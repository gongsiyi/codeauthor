1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:74f2d79: package org.apache.aries.subsystem.core.internal;
1:74f2d79: 
1:74f2d79: import java.util.ArrayList;
1:74f2d79: import java.util.Collection;
1:74f2d79: import java.util.Collections;
1:74f2d79: import java.util.HashMap;
1:74f2d79: import java.util.HashSet;
1:74f2d79: import java.util.Map;
1:74f2d79: import java.util.Map.Entry;
1:74f2d79: 
1:74f2d79: import org.osgi.service.subsystem.Subsystem;
1:74f2d79: import org.osgi.service.subsystem.SubsystemException;
1:74f2d79: 
1:74f2d79: public class SubsystemGraph {
1:74f2d79: 	private static class SubsystemWrapper {
1:74f2d79: 		private final Subsystem s;
1:74f2d79: 		
1:74f2d79: 		public SubsystemWrapper(Subsystem subsystem) {
1:74f2d79: 			s = subsystem;
1:74f2d79: 		}
1:74f2d79: 		
1:74f2d79: 		@Override
1:74f2d79: 		public boolean equals(Object o) {
1:74f2d79: 			if (o == this)
1:74f2d79: 				return true;
1:74f2d79: 			if (!(o instanceof SubsystemWrapper))
1:74f2d79: 				return false;
1:74f2d79: 			SubsystemWrapper that = (SubsystemWrapper)o;
1:52b079f: 			return s.getLocation().equals(that.s.getLocation());
1:74f2d79: 		}
1:74f2d79: 		
1:74f2d79: 		public Subsystem getSubsystem() {
1:74f2d79: 			return s;
1:74f2d79: 		}
1:74f2d79: 		
1:74f2d79: 		@Override
1:74f2d79: 		public int hashCode() {
1:307d743: 			int result = 17;
1:307d743: 			result = 31 * result + s.getLocation().hashCode();
1:307d743: 			return result;
1:74f2d79: 		}
1:74f2d79: 		
1:74f2d79: 		@Override
1:74f2d79: 		public String toString() {
1:52b079f: 			return new StringBuilder("location=").append(s.getLocation())
1:52b079f: 					.append(", symbolicName=").append(s.getSymbolicName())
1:74f2d79: 					.append(", version=").append(s.getVersion())
1:74f2d79: 					.append(", type=").append(s.getType()).toString();
1:74f2d79: 		}
1:74f2d79: 	}
1:74f2d79: 	private final Map<SubsystemWrapper, Collection<SubsystemWrapper>> adjacencyList = new HashMap<SubsystemWrapper, Collection<SubsystemWrapper>>();
1:74f2d79: 	
1:5bd3bf6: 	public SubsystemGraph(BasicSubsystem root) {
1:74f2d79: 		adjacencyList.put(new SubsystemWrapper(root), new HashSet<SubsystemWrapper>());
1:74f2d79: 	}
1:74f2d79: 	
1:5bd3bf6: 	public synchronized void add(BasicSubsystem parent, BasicSubsystem child) {
1:74f2d79: 		SubsystemWrapper parentWrap = new SubsystemWrapper(parent);
1:74f2d79: 		SubsystemWrapper childWrap = new SubsystemWrapper(child);
1:74f2d79: 		if (containsAncestor(childWrap, parentWrap))
1:74f2d79: 			throw new SubsystemException("Cycle detected between '" + parentWrap + "' and '" + childWrap + "'");
1:74f2d79: 		Collection<SubsystemWrapper> subsystems = adjacencyList.get(childWrap);
1:74f2d79: 		if (subsystems == null) {
1:74f2d79: 			subsystems = new HashSet<SubsystemWrapper>();
1:74f2d79: 			adjacencyList.put(childWrap, subsystems);
1:74f2d79: 		}
1:74f2d79: 		subsystems = adjacencyList.get(parentWrap);
1:74f2d79: 		if (subsystems == null) {
1:74f2d79: 			subsystems = new HashSet<SubsystemWrapper>();
1:74f2d79: 			adjacencyList.put(parentWrap, subsystems);
1:74f2d79: 		}
1:74f2d79: 		subsystems.add(childWrap);
1:74f2d79: 	}
1:74f2d79: 	
1:5bd3bf6: 	public synchronized Collection<Subsystem> getChildren(BasicSubsystem parent) {
1:74f2d79: 		Collection<SubsystemWrapper> children = adjacencyList.get(new SubsystemWrapper(parent));
1:74f2d79: 		if (children == null || children.isEmpty())
1:74f2d79: 			return Collections.emptySet();
1:74f2d79: 		Collection<Subsystem> result = new ArrayList<Subsystem>(children.size());
1:74f2d79: 		for (SubsystemWrapper child : children)
1:74f2d79: 			result.add(child.getSubsystem());
1:74f2d79:  		return Collections.unmodifiableCollection(result);
1:74f2d79: 	}
1:74f2d79: 	
1:5bd3bf6: 	public synchronized Collection<Subsystem> getParents(BasicSubsystem child) {
1:74f2d79: 		Collection<SubsystemWrapper> parents = getParents(new SubsystemWrapper(child));
1:74f2d79: 		Collection<Subsystem> result = new ArrayList<Subsystem>(parents.size());
1:74f2d79: 		for (SubsystemWrapper parent : parents) {
1:74f2d79: 			result.add(parent.getSubsystem());
1:74f2d79: 		}
1:74f2d79: 		return Collections.unmodifiableCollection(result);
1:74f2d79: 	}
1:74f2d79: 	
1:5bd3bf6: 	public synchronized void remove(BasicSubsystem child) {
1:225bcae: 		SubsystemWrapper subsystemWrap = new SubsystemWrapper(child);
1:74f2d79: 		Collection<SubsystemWrapper> parents = getParents(subsystemWrap);
1:74f2d79: 		for (SubsystemWrapper parent : parents)
1:74f2d79: 			adjacencyList.get(parent).remove(subsystemWrap);
1:74f2d79: 		adjacencyList.remove(subsystemWrap);
1:74f2d79: 	}
1:74f2d79: 	
1:5bd3bf6: 	public synchronized void remove(BasicSubsystem parent, BasicSubsystem child) {
1:225bcae: 		SubsystemWrapper parentWrap = new SubsystemWrapper(parent);
1:225bcae: 		SubsystemWrapper childWrap = new SubsystemWrapper(child);
1:225bcae: 		adjacencyList.get(parentWrap).remove(childWrap);
1:225bcae: 	}
1:225bcae: 	
1:74f2d79: 	private boolean containsAncestor(SubsystemWrapper subsystem, SubsystemWrapper ancestor) {
1:74f2d79: 		Collection<SubsystemWrapper> subsystems = adjacencyList.get(subsystem);
1:74f2d79: 		if (subsystems == null)
1:74f2d79: 			return false;
1:74f2d79: 		if (subsystems.contains(ancestor))
1:74f2d79: 			return true;
1:74f2d79: 		for (SubsystemWrapper s : subsystems) {
1:74f2d79: 			return containsAncestor(s, ancestor);
1:74f2d79: 		}
1:74f2d79: 		return false;
1:74f2d79: 	}
1:74f2d79: 	
1:74f2d79: 	private Collection<SubsystemWrapper> getParents(SubsystemWrapper child) {
1:74f2d79: 		ArrayList<SubsystemWrapper> result = new ArrayList<SubsystemWrapper>();
1:74f2d79: 		for (Entry<SubsystemWrapper, Collection<SubsystemWrapper>> entry : adjacencyList.entrySet())
1:74f2d79: 			if (entry.getValue().contains(child))
1:74f2d79: 				result.add(entry.getKey());
1:74f2d79: 		result.trimToSize();
2:74f2d79: 		return result;
1:74f2d79: 	}
1:74f2d79: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public SubsystemGraph(BasicSubsystem root) {
1: 	public synchronized void add(BasicSubsystem parent, BasicSubsystem child) {
/////////////////////////////////////////////////////////////////////////
1: 	public synchronized Collection<Subsystem> getChildren(BasicSubsystem parent) {
/////////////////////////////////////////////////////////////////////////
1: 	public synchronized Collection<Subsystem> getParents(BasicSubsystem child) {
/////////////////////////////////////////////////////////////////////////
1: 	public synchronized void remove(BasicSubsystem child) {
/////////////////////////////////////////////////////////////////////////
1: 	public synchronized void remove(BasicSubsystem parent, BasicSubsystem child) {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: 			int result = 17;
1: 			result = 31 * result + s.getLocation().hashCode();
1: 			return result;
commit:225bcae
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized void remove(AriesSubsystem child) {
1: 		SubsystemWrapper subsystemWrap = new SubsystemWrapper(child);
0: 	public synchronized void remove(AriesSubsystem parent, AriesSubsystem child) {
1: 		SubsystemWrapper parentWrap = new SubsystemWrapper(parent);
1: 		SubsystemWrapper childWrap = new SubsystemWrapper(child);
1: 		adjacencyList.get(parentWrap).remove(childWrap);
1: 	}
1: 	
commit:52b079f
/////////////////////////////////////////////////////////////////////////
1: 			return s.getLocation().equals(that.s.getLocation());
/////////////////////////////////////////////////////////////////////////
0: 			return s.getLocation().hashCode();
1: 			return new StringBuilder("location=").append(s.getLocation())
1: 					.append(", symbolicName=").append(s.getSymbolicName())
0: 	public SubsystemGraph(AriesSubsystem root) {
0: 	public synchronized void add(AriesSubsystem parent, AriesSubsystem child) {
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized Collection<Subsystem> getChildren(AriesSubsystem parent) {
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized Collection<Subsystem> getParents(AriesSubsystem child) {
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized void remove(AriesSubsystem subsystem) {
commit:74f2d79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class SubsystemGraph {
1: 	private static class SubsystemWrapper {
1: 		private final Subsystem s;
1: 		
1: 		public SubsystemWrapper(Subsystem subsystem) {
1: 			s = subsystem;
1: 		}
1: 		
1: 		@Override
1: 		public boolean equals(Object o) {
1: 			if (o == this)
1: 				return true;
1: 			if (!(o instanceof SubsystemWrapper))
1: 				return false;
1: 			SubsystemWrapper that = (SubsystemWrapper)o;
0: 			return s.getSymbolicName().equals(that.s.getSymbolicName())
0: 					&& s.getVersion().equals(that.s.getVersion())
0: 					&& s.getType().equals(that.s.getType());
1: 		}
1: 		
1: 		public Subsystem getSubsystem() {
1: 			return s;
1: 		}
1: 		
1: 		@Override
1: 		public int hashCode() {
0: 			int result = 17;
0: 			result = result + 31 * s.getSymbolicName().hashCode();
0: 			result = result + 31 * s.getVersion().hashCode();
0: 			result = result + 31 * s.getType().hashCode();
1: 			return result;
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
0: 			return new StringBuilder().append(s.getClass().getName())
0: 					.append(": symbolicName=").append(s.getSymbolicName())
1: 					.append(", version=").append(s.getVersion())
1: 					.append(", type=").append(s.getType()).toString();
1: 		}
1: 	}
1: 	private final Map<SubsystemWrapper, Collection<SubsystemWrapper>> adjacencyList = new HashMap<SubsystemWrapper, Collection<SubsystemWrapper>>();
1: 	
0: 	public SubsystemGraph(Subsystem root) {
1: 		adjacencyList.put(new SubsystemWrapper(root), new HashSet<SubsystemWrapper>());
1: 	}
1: 	
0: 	public synchronized void add(Subsystem parent, Subsystem child) {
1: 		SubsystemWrapper parentWrap = new SubsystemWrapper(parent);
1: 		SubsystemWrapper childWrap = new SubsystemWrapper(child);
1: 		if (containsAncestor(childWrap, parentWrap))
1: 			throw new SubsystemException("Cycle detected between '" + parentWrap + "' and '" + childWrap + "'");
1: 		Collection<SubsystemWrapper> subsystems = adjacencyList.get(childWrap);
1: 		if (subsystems == null) {
1: 			subsystems = new HashSet<SubsystemWrapper>();
1: 			adjacencyList.put(childWrap, subsystems);
1: 		}
1: 		subsystems = adjacencyList.get(parentWrap);
1: 		if (subsystems == null) {
1: 			subsystems = new HashSet<SubsystemWrapper>();
1: 			adjacencyList.put(parentWrap, subsystems);
1: 		}
1: 		subsystems.add(childWrap);
1: 	}
1: 	
0: 	public synchronized Collection<Subsystem> getChildren(Subsystem parent) {
1: 		Collection<SubsystemWrapper> children = adjacencyList.get(new SubsystemWrapper(parent));
1: 		if (children == null || children.isEmpty())
1: 			return Collections.emptySet();
1: 		Collection<Subsystem> result = new ArrayList<Subsystem>(children.size());
1: 		for (SubsystemWrapper child : children)
1: 			result.add(child.getSubsystem());
1:  		return Collections.unmodifiableCollection(result);
1: 	}
1: 	
0: 	public synchronized Collection<Subsystem> getParents(Subsystem child) {
1: 		Collection<SubsystemWrapper> parents = getParents(new SubsystemWrapper(child));
1: 		Collection<Subsystem> result = new ArrayList<Subsystem>(parents.size());
1: 		for (SubsystemWrapper parent : parents) {
1: 			result.add(parent.getSubsystem());
1: 		}
1: 		return Collections.unmodifiableCollection(result);
1: 	}
1: 	
0: 	public synchronized void remove(Subsystem subsystem) {
0: 		SubsystemWrapper subsystemWrap = new SubsystemWrapper(subsystem);
1: 		Collection<SubsystemWrapper> parents = getParents(subsystemWrap);
1: 		for (SubsystemWrapper parent : parents)
1: 			adjacencyList.get(parent).remove(subsystemWrap);
1: 		adjacencyList.remove(subsystemWrap);
1: 	}
1: 	
1: 	private boolean containsAncestor(SubsystemWrapper subsystem, SubsystemWrapper ancestor) {
1: 		Collection<SubsystemWrapper> subsystems = adjacencyList.get(subsystem);
1: 		if (subsystems == null)
1: 			return false;
1: 		if (subsystems.contains(ancestor))
1: 			return true;
1: 		for (SubsystemWrapper s : subsystems) {
1: 			return containsAncestor(s, ancestor);
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private Collection<SubsystemWrapper> getParents(SubsystemWrapper child) {
1: 		ArrayList<SubsystemWrapper> result = new ArrayList<SubsystemWrapper>();
1: 		for (Entry<SubsystemWrapper, Collection<SubsystemWrapper>> entry : adjacencyList.entrySet())
1: 			if (entry.getValue().contains(child))
1: 				result.add(entry.getKey());
1: 		result.trimToSize();
1: 		return result;
1: 	}
1: }
============================================================================