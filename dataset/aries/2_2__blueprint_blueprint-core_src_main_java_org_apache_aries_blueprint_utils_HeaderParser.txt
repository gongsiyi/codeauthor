1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.HashMap;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Utility class to parse a standard OSGi header with paths.
1:f13c6ac:  *
1:f13c6ac:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class HeaderParser  {
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Parse a given OSGi header into a list of paths
1:f13c6ac:      *
1:f13c6ac:      * @param header the OSGi header to parse
1:f13c6ac:      * @return the list of paths extracted from this header
1:f13c6ac:      */
1:f13c6ac:     public static List<PathElement> parseHeader(String header) {
1:f13c6ac:         List<PathElement> elements = new ArrayList<PathElement>();
1:f13c6ac:         if (header == null || header.trim().length() == 0) {
1:f13c6ac:             return elements;
1:f13c6ac:         }
1:f13c6ac:         String[] clauses = header.split(",");
1:f13c6ac:         for (String clause : clauses) {
1:f13c6ac:             String[] tokens = clause.split(";");
1:f13c6ac:             if (tokens.length < 1) {
1:f13c6ac:                 throw new IllegalArgumentException("Invalid header clause: " + clause);
1:f13c6ac:             }
1:f13c6ac:             PathElement elem = new PathElement(tokens[0].trim());
1:f13c6ac:             elements.add(elem);
1:f13c6ac:             for (int i = 1; i < tokens.length; i++) {
1:f13c6ac:                 int pos = tokens[i].indexOf('=');
1:f13c6ac:                 if (pos != -1) {
1:f13c6ac:                     if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
1:f13c6ac:                         String name = tokens[i].substring(0, pos - 1).trim();
1:f13c6ac:                         String value = tokens[i].substring(pos + 1).trim();
1:f13c6ac:                         elem.addDirective(name, value);
1:f13c6ac:                     } else {
1:f13c6ac:                         String name = tokens[i].substring(0, pos).trim();
1:f13c6ac:                         String value = tokens[i].substring(pos + 1).trim();
1:f13c6ac:                         elem.addAttribute(name, value);
1:f13c6ac:                     }
1:f13c6ac:                 } else {
1:f13c6ac:                     elem = new PathElement(tokens[i].trim());
1:f13c6ac:                     elements.add(elem);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return elements;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public static class PathElement {
1:f13c6ac:         
1:f13c6ac:         private String path;
1:f13c6ac:         private Map<String, String> attributes;
1:f13c6ac:         private Map<String, String> directives;
1:f13c6ac:         
1:f13c6ac:         public PathElement(String path) {
1:f13c6ac:             this.path = path;
1:f13c6ac:             this.attributes = new HashMap<String, String>();
1:f13c6ac:             this.directives = new HashMap<String, String>();
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public String getName() {
1:f13c6ac:             return this.path;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public Map<String, String> getAttributes() {
1:f13c6ac:             return attributes;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public String getAttribute(String name) {
1:f13c6ac:             return attributes.get(name);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public void addAttribute(String name, String value) {
1:f13c6ac:             attributes.put(name, value);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public Map<String, String> getDirectives() {
1:f13c6ac:             return directives;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public String getDirective(String name) {
1:f13c6ac:             return directives.get(name);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         public void addDirective(String name, String value) {
1:f13c6ac:             directives.put(name, value);
1:f13c6ac:         }        
1:f13c6ac:         
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.utils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.utils;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Utility class to parse a standard OSGi header with paths.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
1:  * @version $Rev$, $Date$
1:  */
1: public class HeaderParser  {
1: 
1:     /**
1:      * Parse a given OSGi header into a list of paths
1:      *
1:      * @param header the OSGi header to parse
1:      * @return the list of paths extracted from this header
1:      */
1:     public static List<PathElement> parseHeader(String header) {
1:         List<PathElement> elements = new ArrayList<PathElement>();
1:         if (header == null || header.trim().length() == 0) {
1:             return elements;
1:         }
1:         String[] clauses = header.split(",");
1:         for (String clause : clauses) {
1:             String[] tokens = clause.split(";");
1:             if (tokens.length < 1) {
1:                 throw new IllegalArgumentException("Invalid header clause: " + clause);
1:             }
1:             PathElement elem = new PathElement(tokens[0].trim());
1:             elements.add(elem);
1:             for (int i = 1; i < tokens.length; i++) {
1:                 int pos = tokens[i].indexOf('=');
1:                 if (pos != -1) {
1:                     if (pos > 0 && tokens[i].charAt(pos - 1) == ':') {
1:                         String name = tokens[i].substring(0, pos - 1).trim();
1:                         String value = tokens[i].substring(pos + 1).trim();
1:                         elem.addDirective(name, value);
1:                     } else {
1:                         String name = tokens[i].substring(0, pos).trim();
1:                         String value = tokens[i].substring(pos + 1).trim();
1:                         elem.addAttribute(name, value);
1:                     }
1:                 } else {
1:                     elem = new PathElement(tokens[i].trim());
1:                     elements.add(elem);
1:                 }
1:             }
1:         }
1:         return elements;
1:     }
1: 
1:     public static class PathElement {
1:         
1:         private String path;
1:         private Map<String, String> attributes;
1:         private Map<String, String> directives;
1:         
1:         public PathElement(String path) {
1:             this.path = path;
1:             this.attributes = new HashMap<String, String>();
1:             this.directives = new HashMap<String, String>();
1:         }
1:         
1:         public String getName() {
1:             return this.path;
1:         }
1:         
1:         public Map<String, String> getAttributes() {
1:             return attributes;
1:         }
1:         
1:         public String getAttribute(String name) {
1:             return attributes.get(name);
1:         }
1:         
1:         public void addAttribute(String name, String value) {
1:             attributes.put(name, value);
1:         }
1:         
1:         public Map<String, String> getDirectives() {
1:             return directives;
1:         }
1:         
1:         public String getDirective(String name) {
1:             return directives.get(name);
1:         }
1:         
1:         public void addDirective(String name, String value) {
1:             directives.put(name, value);
1:         }        
1:         
1:     }
1: }
============================================================================