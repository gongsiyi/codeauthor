1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
52:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: import static org.osgi.jmx.JmxConstants.BIGINTEGER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1:fdf3952: import static org.osgi.jmx.JmxConstants.CHARACTER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.DOUBLE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.INTEGER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.KEY;
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTY_TYPE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_CHAR;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_INT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.STRING;
1:fdf3952: import static org.osgi.jmx.JmxConstants.TYPE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.VALUE;
1:fdf3952: 
1:fdf3952: import java.math.BigInteger;
1:255bc84: import java.util.ArrayList;
1:fdf3952: import java.util.HashMap;
1:255bc84: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.Vector;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: 
1:fdf3952: import org.junit.Test;
1:fdf3952: 
1:fdf3952: /**
1:255bc84:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PropertyDataTest {
1:255bc84: 
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testToCompositeDataForPrimitiveTypes() throws Exception {
1:255bc84: 
1:fdf3952:         PropertyData<Integer> intData = PropertyData.newInstance("test", 1);
1:fdf3952:         CompositeData intCData = intData.toCompositeData();
1:fdf3952:         assertEquals("test", intCData.get(KEY));
1:fdf3952:         assertEquals("1", intCData.get(VALUE));
1:fdf3952:         assertEquals(P_INT, intCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Double> doubleData = PropertyData.newInstance("test", 1.0);
1:fdf3952:         CompositeData doubleCData = doubleData.toCompositeData();
1:fdf3952:         assertEquals("test", doubleCData.get(KEY));
1:fdf3952:         assertEquals("1.0", doubleCData.get(VALUE));
1:fdf3952:         assertEquals(P_DOUBLE, doubleCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Character> charData = PropertyData.newInstance("test", 'c');
1:fdf3952:         CompositeData charCData = charData.toCompositeData();
1:fdf3952:         assertEquals("test", charCData.get(KEY));
1:fdf3952:         assertEquals("c", charCData.get(VALUE));
1:fdf3952:         assertEquals(P_CHAR, charCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Boolean> booleanData = PropertyData.newInstance("test", true);
1:fdf3952:         CompositeData booleanCData = booleanData.toCompositeData();
1:fdf3952:         assertEquals("test", booleanCData.get(KEY));
1:fdf3952:         assertEquals("true", booleanCData.get(VALUE));
1:fdf3952:         assertEquals(P_BOOLEAN, booleanCData.get(TYPE));
2:fdf3952:     }
1:255bc84: 
1:fdf3952:     @Test
1:fdf3952:     public void testFromCompositeDataForPrimitiveTypes() throws Exception {
1:255bc84: 
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "1");
1:fdf3952:         items.put(TYPE, P_INT);
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Integer> intData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", intData.getKey());
1:fdf3952:         assertEquals(new Integer(1), intData.getValue());
1:fdf3952:         assertEquals(P_INT, intData.getEncodedType());
1:fdf3952:         assertTrue(intData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "1.0");
1:fdf3952:         items.put(TYPE, P_DOUBLE);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Double> doubleData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", doubleData.getKey());
1:fdf3952:         assertEquals(Double.valueOf(1.0), doubleData.getValue());
1:fdf3952:         assertEquals(P_DOUBLE, doubleData.getEncodedType());
1:fdf3952:         assertTrue(doubleData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "a");
1:fdf3952:         items.put(TYPE, P_CHAR);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Character> charData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", charData.getKey());
1:fdf3952:         assertEquals(Character.valueOf('a'), charData.getValue());
1:fdf3952:         assertEquals(P_CHAR, charData.getEncodedType());
1:fdf3952:         assertTrue(charData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "true");
1:fdf3952:         items.put(TYPE, P_BOOLEAN);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Boolean> booleanData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", booleanData.getKey());
1:fdf3952:         assertTrue(booleanData.getValue());
1:fdf3952:         assertEquals(P_BOOLEAN, booleanData.getEncodedType());
1:fdf3952:         assertTrue(booleanData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     @Test
1:fdf3952:     public void testToCompositeDataForWrapperTypes() {
1:255bc84: 
1:fdf3952:         PropertyData<Integer> intData = PropertyData.newInstance("test", new Integer(1));
1:fdf3952:         CompositeData intCData = intData.toCompositeData();
1:fdf3952:         assertEquals("test", intCData.get(KEY));
1:fdf3952:         assertEquals("1", intCData.get(VALUE));
1:fdf3952:         assertEquals(INTEGER, intCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Double> doubleData = PropertyData.newInstance("test", new Double(1.0));
1:fdf3952:         CompositeData doubleCData = doubleData.toCompositeData();
1:fdf3952:         assertEquals("test", doubleCData.get(KEY));
1:fdf3952:         assertEquals("1.0", doubleCData.get(VALUE));
1:fdf3952:         assertEquals(DOUBLE, doubleCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Character> charData = PropertyData.newInstance("test", Character.valueOf('c'));
1:fdf3952:         CompositeData charCData = charData.toCompositeData();
1:fdf3952:         assertEquals("test", charCData.get(KEY));
1:fdf3952:         assertEquals("c", charCData.get(VALUE));
1:fdf3952:         assertEquals(CHARACTER, charCData.get(TYPE));
1:255bc84: 
1:fdf3952:         PropertyData<Boolean> booleanData = PropertyData.newInstance("test", Boolean.TRUE);
1:fdf3952:         CompositeData booleanCData = booleanData.toCompositeData();
1:fdf3952:         assertEquals("test", booleanCData.get(KEY));
1:fdf3952:         assertEquals("true", booleanCData.get(VALUE));
1:fdf3952:         assertEquals(BOOLEAN, booleanCData.get(TYPE));
1:255bc84: 
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     @Test
1:fdf3952:     public void testFromCompositeDataForWrapperTypes() throws Exception {
1:255bc84: 
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "1");
1:fdf3952:         items.put(TYPE, INTEGER);
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Integer> intData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", intData.getKey());
1:fdf3952:         assertEquals(new Integer(1), intData.getValue());
1:fdf3952:         assertEquals(INTEGER, intData.getEncodedType());
1:fdf3952:         assertFalse(intData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "1.0");
1:fdf3952:         items.put(TYPE, DOUBLE);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Double> doubleData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", doubleData.getKey());
1:fdf3952:         assertEquals(Double.valueOf(1.0), doubleData.getValue());
1:fdf3952:         assertEquals(DOUBLE, doubleData.getEncodedType());
1:fdf3952:         assertFalse(doubleData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "a");
1:fdf3952:         items.put(TYPE, CHARACTER);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Character> charData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", charData.getKey());
1:fdf3952:         assertEquals(Character.valueOf('a'), charData.getValue());
1:fdf3952:         assertEquals(CHARACTER, charData.getEncodedType());
1:fdf3952:         assertFalse(charData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:         items.clear();
1:fdf3952:         items.put(KEY, "key");
1:fdf3952:         items.put(VALUE, "true");
1:fdf3952:         items.put(TYPE, BOOLEAN);
1:fdf3952:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:255bc84: 
1:fdf3952:         PropertyData<Boolean> booleanData = PropertyData.from(compositeData);
1:fdf3952:         assertEquals("key", booleanData.getKey());
1:fdf3952:         assertTrue(booleanData.getValue());
1:fdf3952:         assertEquals(BOOLEAN, booleanData.getEncodedType());
1:fdf3952:         assertFalse(booleanData.isEncodingPrimitive());
1:255bc84: 
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     @Test
1:fdf3952:     public void testToFromCompositeDataForAdditionalTypes() {
1:255bc84: 
1:fdf3952:         PropertyData<String> stringData = PropertyData.newInstance("test", "value");
1:255bc84: 
1:fdf3952:         CompositeData stringCData = stringData.toCompositeData();
1:fdf3952:         assertEquals("test", stringCData.get(KEY));
1:fdf3952:         assertEquals("value", stringCData.get(VALUE));
1:fdf3952:         assertEquals(STRING, stringCData.get(TYPE));
1:255bc84: 
1:fdf3952:         stringData = PropertyData.from(stringCData);
1:fdf3952:         assertEquals("test", stringData.getKey());
1:fdf3952:         assertEquals("value", stringData.getValue());
1:fdf3952:         assertEquals(STRING, stringData.getEncodedType());
1:255bc84: 
1:fdf3952:         PropertyData<BigInteger> bigIntData = PropertyData.newInstance("test", new BigInteger("1"));
1:255bc84: 
1:fdf3952:         CompositeData bigIntCData = bigIntData.toCompositeData();
1:fdf3952:         assertEquals("test", bigIntCData.get(KEY));
1:fdf3952:         assertEquals("1", bigIntCData.get(VALUE));
1:fdf3952:         assertEquals(BIGINTEGER, bigIntCData.get(TYPE));
1:255bc84: 
1:fdf3952:         bigIntData = PropertyData.from(bigIntCData);
1:fdf3952:         assertEquals("test", bigIntData.getKey());
1:fdf3952:         assertEquals(new BigInteger("1"), bigIntData.getValue());
1:fdf3952:         assertEquals(BIGINTEGER, bigIntData.getEncodedType());
1:255bc84: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testToFromCompositeDataForArrayTypes() {
1:255bc84: 
1:fdf3952:         //long[]
1:fdf3952:         long[] primitiveLongValues = new long[] { 1, 2, 3 };
1:fdf3952:         PropertyData<long[]> primitiveLongArrayData = PropertyData.newInstance("test", primitiveLongValues);
1:fdf3952:         CompositeData primitiveLongArrayCData = primitiveLongArrayData.toCompositeData();
1:fdf3952:         assertEquals("test", primitiveLongArrayCData.get(KEY));
1:fdf3952:         assertEquals("1,2,3", primitiveLongArrayCData.get(VALUE));
1:fdf3952:         assertEquals("Array of long", primitiveLongArrayCData.get(TYPE));
1:fdf3952:         primitiveLongArrayData = PropertyData.from(primitiveLongArrayCData);
1:fdf3952:         assertEquals("test", primitiveLongArrayData.getKey());
1:fdf3952:         assertEquals("Array of long", primitiveLongArrayData.getEncodedType());
1:fdf3952:         assertArrayEquals(primitiveLongValues, primitiveLongArrayData.getValue());
1:255bc84: 
1:fdf3952:         //Long[]
1:fdf3952:         Long[] longValues = new Long[] { new Long(4), new Long(5), new Long(6) };
1:fdf3952:         PropertyData<Long[]> longArrayData = PropertyData.newInstance("test", longValues);
1:fdf3952:         CompositeData longArrayCData = longArrayData.toCompositeData();
1:fdf3952:         assertEquals("test", longArrayCData.get(KEY));
1:fdf3952:         assertEquals("4,5,6", longArrayCData.get(VALUE));
1:fdf3952:         assertEquals("Array of Long", longArrayCData.get(TYPE));
1:fdf3952:         longArrayData = PropertyData.from(longArrayCData);
1:fdf3952:         assertEquals("test", longArrayData.getKey());
1:fdf3952:         assertEquals("Array of Long", longArrayData.getEncodedType());
1:fdf3952:         assertArrayEquals(longValues, longArrayData.getValue());
1:255bc84: 
1:fdf3952:         //char[]
1:fdf3952:         char[] primitiveCharValues = new char[] { 'a', 'b', 'c' };
1:fdf3952:         PropertyData<char[]> primitiveCharArrayData = PropertyData.newInstance("test", primitiveCharValues);
1:fdf3952:         CompositeData primitiveCharArrayCData = primitiveCharArrayData.toCompositeData();
1:fdf3952:         assertEquals("test", primitiveCharArrayCData.get(KEY));
1:fdf3952:         assertEquals("a,b,c", primitiveCharArrayCData.get(VALUE));
1:fdf3952:         assertEquals("Array of char", primitiveCharArrayCData.get(TYPE));
1:fdf3952:         primitiveCharArrayData = PropertyData.from(primitiveCharArrayCData);
1:fdf3952:         assertEquals("test", primitiveCharArrayData.getKey());
1:fdf3952:         assertEquals("Array of char", primitiveCharArrayData.getEncodedType());
1:fdf3952:         assertArrayEquals(primitiveCharValues, primitiveCharArrayData.getValue());
1:255bc84: 
1:fdf3952:         //Character[]
1:fdf3952:         Character[] charValues = new Character[] { 'a', 'b', 'c' };
1:fdf3952:         PropertyData<Character[]> charArrayData = PropertyData.newInstance("test", charValues);
1:fdf3952:         CompositeData charArrayCData = charArrayData.toCompositeData();
1:fdf3952:         assertEquals("test", charArrayCData.get(KEY));
1:fdf3952:         assertEquals("a,b,c", charArrayCData.get(VALUE));
1:fdf3952:         assertEquals("Array of Character", charArrayCData.get(TYPE));
1:fdf3952:         charArrayData = PropertyData.from(charArrayCData);
1:fdf3952:         assertEquals("test", charArrayData.getKey());
1:fdf3952:         assertEquals("Array of Character", charArrayData.getEncodedType());
1:fdf3952:         assertArrayEquals(charValues, charArrayData.getValue());
1:255bc84: 
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     @Test
1:fdf3952:     public void testToFromCompositeDataForVector() {
1:255bc84: 
1:fdf3952:         Vector<Long> vector = new Vector<Long>();
1:fdf3952:         vector.add(new Long(40));
1:fdf3952:         vector.add(new Long(50));
1:fdf3952:         vector.add(new Long(60));
1:255bc84: 
1:fdf3952:         PropertyData<Vector<Long>> vectorPropertyData = PropertyData.newInstance("test", vector);
1:fdf3952:         CompositeData vectorCompositeData = vectorPropertyData.toCompositeData();
1:255bc84: 
1:fdf3952:         assertEquals("test", vectorCompositeData.get(KEY));
1:fdf3952:         assertEquals("40,50,60", vectorCompositeData.get(VALUE));
1:fdf3952:         assertEquals("Vector of Long", vectorCompositeData.get(TYPE));
1:255bc84: 
1:fdf3952:         vectorPropertyData = PropertyData.from(vectorCompositeData);
1:fdf3952:         assertEquals("test", vectorPropertyData.getKey());
1:fdf3952:         assertEquals("Vector of Long", vectorPropertyData.getEncodedType());
1:fdf3952:         assertArrayEquals(vector.toArray(new Long[vector.size()]), vectorPropertyData.getValue().toArray(new Long[vector.size()]));
1:255bc84: 
1:255bc84:     }
1:fdf3952: 
1:255bc84:     @Test
1:255bc84:     public void testToFromCompositeDataForList() {
1:255bc84:         List<String> sl = new ArrayList<String>();
1:255bc84:         sl.add("A");
1:255bc84:         sl.add("B");
1:255bc84: 
1:255bc84:         PropertyData<List<String>> pd = PropertyData.newInstance("test", sl);
1:255bc84:         CompositeData cd = pd.toCompositeData();
1:255bc84: 
1:255bc84:         assertEquals("test", cd.get(KEY));
1:255bc84:         assertEquals("A,B", cd.get(VALUE));
1:255bc84:         assertEquals("Array of String", cd.get(TYPE));
1:255bc84: 
1:255bc84:         PropertyData<String []> pd2 = PropertyData.from(cd);
1:255bc84:         assertEquals("test", pd2.getKey());
1:255bc84:         assertEquals("Array of String", pd2.getEncodedType());
1:255bc84:         assertArrayEquals(new String [] {"A", "B"}, pd2.getValue());
1:255bc84:     }
1:255bc84: 
1:255bc84:     @Test
1:255bc84:     public void testToFromCompositeDataForList2() {
1:255bc84:         List<Long> sl = new ArrayList<Long>();
1:255bc84:         sl.add(Long.MAX_VALUE);
1:255bc84: 
1:255bc84:         PropertyData<List<Long>> pd = PropertyData.newInstance("test", sl);
1:255bc84:         CompositeData cd = pd.toCompositeData();
1:255bc84: 
1:255bc84:         assertEquals("test", cd.get(KEY));
1:255bc84:         assertEquals(new Long(Long.MAX_VALUE).toString(), cd.get(VALUE));
1:255bc84:         assertEquals("Array of Long", cd.get(TYPE));
1:255bc84: 
1:255bc84:         PropertyData<Long []> pd2 = PropertyData.from(cd);
1:255bc84:         assertEquals("test", pd2.getKey());
1:255bc84:         assertEquals("Array of Long", pd2.getEncodedType());
1:255bc84:         assertArrayEquals(new Long [] {Long.MAX_VALUE}, pd2.getValue());
1:255bc84:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:255bc84
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:     }
1: 
1:     @Test
1:     public void testToFromCompositeDataForList() {
1:         List<String> sl = new ArrayList<String>();
1:         sl.add("A");
1:         sl.add("B");
1: 
1:         PropertyData<List<String>> pd = PropertyData.newInstance("test", sl);
1:         CompositeData cd = pd.toCompositeData();
1: 
1:         assertEquals("test", cd.get(KEY));
1:         assertEquals("A,B", cd.get(VALUE));
1:         assertEquals("Array of String", cd.get(TYPE));
1: 
1:         PropertyData<String []> pd2 = PropertyData.from(cd);
1:         assertEquals("test", pd2.getKey());
1:         assertEquals("Array of String", pd2.getEncodedType());
1:         assertArrayEquals(new String [] {"A", "B"}, pd2.getValue());
1:     }
1: 
1:     @Test
1:     public void testToFromCompositeDataForList2() {
1:         List<Long> sl = new ArrayList<Long>();
1:         sl.add(Long.MAX_VALUE);
1: 
1:         PropertyData<List<Long>> pd = PropertyData.newInstance("test", sl);
1:         CompositeData cd = pd.toCompositeData();
1: 
1:         assertEquals("test", cd.get(KEY));
1:         assertEquals(new Long(Long.MAX_VALUE).toString(), cd.get(VALUE));
1:         assertEquals("Array of Long", cd.get(TYPE));
1: 
1:         PropertyData<Long []> pd2 = PropertyData.from(cd);
1:         assertEquals("test", pd2.getKey());
1:         assertEquals("Array of Long", pd2.getEncodedType());
1:         assertArrayEquals(new Long [] {Long.MAX_VALUE}, pd2.getValue());
1:     }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.osgi.jmx.JmxConstants.BIGINTEGER;
1: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.CHARACTER;
1: import static org.osgi.jmx.JmxConstants.DOUBLE;
1: import static org.osgi.jmx.JmxConstants.INTEGER;
1: import static org.osgi.jmx.JmxConstants.KEY;
1: import static org.osgi.jmx.JmxConstants.PROPERTY_TYPE;
1: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.P_CHAR;
1: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1: import static org.osgi.jmx.JmxConstants.P_INT;
1: import static org.osgi.jmx.JmxConstants.STRING;
1: import static org.osgi.jmx.JmxConstants.TYPE;
1: import static org.osgi.jmx.JmxConstants.VALUE;
1: 
1: import java.math.BigInteger;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Vector;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: 
1: import org.junit.Test;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class PropertyDataTest {
1: 
1:    
1:     @Test
1:     public void testToCompositeDataForPrimitiveTypes() throws Exception {
1:         
1:         PropertyData<Integer> intData = PropertyData.newInstance("test", 1);
1:         CompositeData intCData = intData.toCompositeData();
1:         assertEquals("test", intCData.get(KEY));
1:         assertEquals("1", intCData.get(VALUE));
1:         assertEquals(P_INT, intCData.get(TYPE));
1:         
1:         PropertyData<Double> doubleData = PropertyData.newInstance("test", 1.0);
1:         CompositeData doubleCData = doubleData.toCompositeData();
1:         assertEquals("test", doubleCData.get(KEY));
1:         assertEquals("1.0", doubleCData.get(VALUE));
1:         assertEquals(P_DOUBLE, doubleCData.get(TYPE));
1:         
1:         PropertyData<Character> charData = PropertyData.newInstance("test", 'c');
1:         CompositeData charCData = charData.toCompositeData();
1:         assertEquals("test", charCData.get(KEY));
1:         assertEquals("c", charCData.get(VALUE));
1:         assertEquals(P_CHAR, charCData.get(TYPE));
1:         
1:         PropertyData<Boolean> booleanData = PropertyData.newInstance("test", true);
1:         CompositeData booleanCData = booleanData.toCompositeData();
1:         assertEquals("test", booleanCData.get(KEY));
1:         assertEquals("true", booleanCData.get(VALUE));
1:         assertEquals(P_BOOLEAN, booleanCData.get(TYPE));
1:     }
1:     
1:     @Test
1:     public void testFromCompositeDataForPrimitiveTypes() throws Exception {
1:         
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "1");
1:         items.put(TYPE, P_INT);
1:         CompositeData compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Integer> intData = PropertyData.from(compositeData);
1:         assertEquals("key", intData.getKey());
1:         assertEquals(new Integer(1), intData.getValue());
1:         assertEquals(P_INT, intData.getEncodedType());
1:         assertTrue(intData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "1.0");
1:         items.put(TYPE, P_DOUBLE);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Double> doubleData = PropertyData.from(compositeData);
1:         assertEquals("key", doubleData.getKey());
1:         assertEquals(Double.valueOf(1.0), doubleData.getValue());
1:         assertEquals(P_DOUBLE, doubleData.getEncodedType());
1:         assertTrue(doubleData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "a");
1:         items.put(TYPE, P_CHAR);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Character> charData = PropertyData.from(compositeData);
1:         assertEquals("key", charData.getKey());
1:         assertEquals(Character.valueOf('a'), charData.getValue());
1:         assertEquals(P_CHAR, charData.getEncodedType());
1:         assertTrue(charData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "true");
1:         items.put(TYPE, P_BOOLEAN);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Boolean> booleanData = PropertyData.from(compositeData);
1:         assertEquals("key", booleanData.getKey());
1:         assertTrue(booleanData.getValue());
1:         assertEquals(P_BOOLEAN, booleanData.getEncodedType());
1:         assertTrue(booleanData.isEncodingPrimitive());
1:         
1:     }
1:     
1:     @Test
1:     public void testToCompositeDataForWrapperTypes() {
1:         
1:         PropertyData<Integer> intData = PropertyData.newInstance("test", new Integer(1));
1:         CompositeData intCData = intData.toCompositeData();
1:         assertEquals("test", intCData.get(KEY));
1:         assertEquals("1", intCData.get(VALUE));
1:         assertEquals(INTEGER, intCData.get(TYPE));
1:         
1:         PropertyData<Double> doubleData = PropertyData.newInstance("test", new Double(1.0));
1:         CompositeData doubleCData = doubleData.toCompositeData();
1:         assertEquals("test", doubleCData.get(KEY));
1:         assertEquals("1.0", doubleCData.get(VALUE));
1:         assertEquals(DOUBLE, doubleCData.get(TYPE));
1:         
1:         PropertyData<Character> charData = PropertyData.newInstance("test", Character.valueOf('c'));
1:         CompositeData charCData = charData.toCompositeData();
1:         assertEquals("test", charCData.get(KEY));
1:         assertEquals("c", charCData.get(VALUE));
1:         assertEquals(CHARACTER, charCData.get(TYPE));
1:         
1:         PropertyData<Boolean> booleanData = PropertyData.newInstance("test", Boolean.TRUE);
1:         CompositeData booleanCData = booleanData.toCompositeData();
1:         assertEquals("test", booleanCData.get(KEY));
1:         assertEquals("true", booleanCData.get(VALUE));
1:         assertEquals(BOOLEAN, booleanCData.get(TYPE));
1:         
1:     }
1:     
1:     @Test
1:     public void testFromCompositeDataForWrapperTypes() throws Exception {
1:         
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "1");
1:         items.put(TYPE, INTEGER);
1:         CompositeData compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Integer> intData = PropertyData.from(compositeData);
1:         assertEquals("key", intData.getKey());
1:         assertEquals(new Integer(1), intData.getValue());
1:         assertEquals(INTEGER, intData.getEncodedType());
1:         assertFalse(intData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "1.0");
1:         items.put(TYPE, DOUBLE);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Double> doubleData = PropertyData.from(compositeData);
1:         assertEquals("key", doubleData.getKey());
1:         assertEquals(Double.valueOf(1.0), doubleData.getValue());
1:         assertEquals(DOUBLE, doubleData.getEncodedType());
1:         assertFalse(doubleData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "a");
1:         items.put(TYPE, CHARACTER);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Character> charData = PropertyData.from(compositeData);
1:         assertEquals("key", charData.getKey());
1:         assertEquals(Character.valueOf('a'), charData.getValue());
1:         assertEquals(CHARACTER, charData.getEncodedType());
1:         assertFalse(charData.isEncodingPrimitive());
1:         
1:         items.clear();
1:         items.put(KEY, "key");
1:         items.put(VALUE, "true");
1:         items.put(TYPE, BOOLEAN);
1:         compositeData = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         
1:         PropertyData<Boolean> booleanData = PropertyData.from(compositeData);
1:         assertEquals("key", booleanData.getKey());
1:         assertTrue(booleanData.getValue());
1:         assertEquals(BOOLEAN, booleanData.getEncodedType());
1:         assertFalse(booleanData.isEncodingPrimitive());
1:         
1:     }
1:     
1:     @Test
1:     public void testToFromCompositeDataForAdditionalTypes() {
1:         
1:         PropertyData<String> stringData = PropertyData.newInstance("test", "value");
1:         
1:         CompositeData stringCData = stringData.toCompositeData();
1:         assertEquals("test", stringCData.get(KEY));
1:         assertEquals("value", stringCData.get(VALUE));
1:         assertEquals(STRING, stringCData.get(TYPE));
1:         
1:         stringData = PropertyData.from(stringCData);
1:         assertEquals("test", stringData.getKey());
1:         assertEquals("value", stringData.getValue());
1:         assertEquals(STRING, stringData.getEncodedType());
1:         
1:         PropertyData<BigInteger> bigIntData = PropertyData.newInstance("test", new BigInteger("1"));
1:         
1:         CompositeData bigIntCData = bigIntData.toCompositeData();
1:         assertEquals("test", bigIntCData.get(KEY));
1:         assertEquals("1", bigIntCData.get(VALUE));
1:         assertEquals(BIGINTEGER, bigIntCData.get(TYPE));
1:         
1:         bigIntData = PropertyData.from(bigIntCData);
1:         assertEquals("test", bigIntData.getKey());
1:         assertEquals(new BigInteger("1"), bigIntData.getValue());
1:         assertEquals(BIGINTEGER, bigIntData.getEncodedType());
1:         
1:     }
1: 
1:     @Test
1:     public void testToFromCompositeDataForArrayTypes() {
1:         
1:         //long[]
1:         long[] primitiveLongValues = new long[] { 1, 2, 3 };
1:         PropertyData<long[]> primitiveLongArrayData = PropertyData.newInstance("test", primitiveLongValues);
1:         CompositeData primitiveLongArrayCData = primitiveLongArrayData.toCompositeData();
1:         assertEquals("test", primitiveLongArrayCData.get(KEY));
1:         assertEquals("1,2,3", primitiveLongArrayCData.get(VALUE));
1:         assertEquals("Array of long", primitiveLongArrayCData.get(TYPE));
1:         primitiveLongArrayData = PropertyData.from(primitiveLongArrayCData);
1:         assertEquals("test", primitiveLongArrayData.getKey());
1:         assertEquals("Array of long", primitiveLongArrayData.getEncodedType());
1:         assertArrayEquals(primitiveLongValues, primitiveLongArrayData.getValue());
1:         
1:         //Long[]
1:         Long[] longValues = new Long[] { new Long(4), new Long(5), new Long(6) };
1:         PropertyData<Long[]> longArrayData = PropertyData.newInstance("test", longValues);
1:         CompositeData longArrayCData = longArrayData.toCompositeData();
1:         assertEquals("test", longArrayCData.get(KEY));
1:         assertEquals("4,5,6", longArrayCData.get(VALUE));
1:         assertEquals("Array of Long", longArrayCData.get(TYPE));
1:         longArrayData = PropertyData.from(longArrayCData);
1:         assertEquals("test", longArrayData.getKey());
1:         assertEquals("Array of Long", longArrayData.getEncodedType());
1:         assertArrayEquals(longValues, longArrayData.getValue());
1:         
1:         //char[]
1:         char[] primitiveCharValues = new char[] { 'a', 'b', 'c' };
1:         PropertyData<char[]> primitiveCharArrayData = PropertyData.newInstance("test", primitiveCharValues);
1:         CompositeData primitiveCharArrayCData = primitiveCharArrayData.toCompositeData();
1:         assertEquals("test", primitiveCharArrayCData.get(KEY));
1:         assertEquals("a,b,c", primitiveCharArrayCData.get(VALUE));
1:         assertEquals("Array of char", primitiveCharArrayCData.get(TYPE));
1:         primitiveCharArrayData = PropertyData.from(primitiveCharArrayCData);
1:         assertEquals("test", primitiveCharArrayData.getKey());
1:         assertEquals("Array of char", primitiveCharArrayData.getEncodedType());
1:         assertArrayEquals(primitiveCharValues, primitiveCharArrayData.getValue());
1:         
1:         //Character[]
1:         Character[] charValues = new Character[] { 'a', 'b', 'c' };
1:         PropertyData<Character[]> charArrayData = PropertyData.newInstance("test", charValues);
1:         CompositeData charArrayCData = charArrayData.toCompositeData();
1:         assertEquals("test", charArrayCData.get(KEY));
1:         assertEquals("a,b,c", charArrayCData.get(VALUE));
1:         assertEquals("Array of Character", charArrayCData.get(TYPE));
1:         charArrayData = PropertyData.from(charArrayCData);
1:         assertEquals("test", charArrayData.getKey());
1:         assertEquals("Array of Character", charArrayData.getEncodedType());
1:         assertArrayEquals(charValues, charArrayData.getValue());
1:         
1:     }
1:     
1:     @Test
1:     public void testToFromCompositeDataForVector() {
1:         
1:         Vector<Long> vector = new Vector<Long>();
1:         vector.add(new Long(40));
1:         vector.add(new Long(50));
1:         vector.add(new Long(60));
1:         
1:         PropertyData<Vector<Long>> vectorPropertyData = PropertyData.newInstance("test", vector);
1:         CompositeData vectorCompositeData = vectorPropertyData.toCompositeData();
1:      
1:         assertEquals("test", vectorCompositeData.get(KEY));
1:         assertEquals("40,50,60", vectorCompositeData.get(VALUE));
1:         assertEquals("Vector of Long", vectorCompositeData.get(TYPE));
1:         
1:         vectorPropertyData = PropertyData.from(vectorCompositeData);
1:         assertEquals("test", vectorPropertyData.getKey());
1:         assertEquals("Vector of Long", vectorPropertyData.getEncodedType());
1:         assertArrayEquals(vector.toArray(new Long[vector.size()]), vectorPropertyData.getValue().toArray(new Long[vector.size()]));
1:         
1:     }
1:     
1: 
1: }
============================================================================