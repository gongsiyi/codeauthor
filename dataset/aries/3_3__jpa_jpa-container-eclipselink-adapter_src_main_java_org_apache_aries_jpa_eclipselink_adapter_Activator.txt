1:01b1fa4: /*
1:b95cbad: // * Licensed to the Apache Software Foundation (ASF) under one
1:01b1fa4:  * or more contributor license agreements.  See the NOTICE file
1:01b1fa4:  * distributed with this work for additional information
1:01b1fa4:  * regarding copyright ownership.  The ASF licenses this file
1:01b1fa4:  * to you under the Apache License, Version 2.0 (the
1:01b1fa4:  * "License"); you may not use this file except in compliance
1:01b1fa4:  * with the License.  You may obtain a copy of the License at
1:01b1fa4:  *
1:01b1fa4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:01b1fa4:  *
1:01b1fa4:  * Unless required by applicable law or agreed to in writing,
1:01b1fa4:  * software distributed under the License is distributed on an
1:01b1fa4:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:01b1fa4:  * KIND, either express or implied.  See the License for the
1:01b1fa4:  * specific language governing permissions and limitations
1:01b1fa4:  * under the License.
3:01b1fa4:  */
1:01b1fa4: package org.apache.aries.jpa.eclipselink.adapter;
1:3b80dcd: 
1:ec3ea65: import java.lang.reflect.Constructor;
1:5ac33c7: import java.util.Dictionary;
1:01b1fa4: import java.util.HashSet;
1:01b1fa4: import java.util.Hashtable;
1:01b1fa4: import java.util.List;
1:01b1fa4: import java.util.Set;
1:01b1fa4: import java.util.concurrent.ConcurrentHashMap;
1:01b1fa4: import java.util.concurrent.ConcurrentMap;
1:a3c7aee: 
1:f55debd: import javax.persistence.EntityManagerFactory;
1:01b1fa4: import javax.persistence.spi.PersistenceProvider;
1:3b80dcd: 
1:ec3ea65: import org.osgi.framework.Bundle;
1:ec3ea65: import org.osgi.framework.BundleActivator;
1:ec3ea65: import org.osgi.framework.BundleContext;
1:ec3ea65: import org.osgi.framework.BundleEvent;
1:ec3ea65: import org.osgi.framework.BundleListener;
1:ec3ea65: import org.osgi.framework.Constants;
1:ec3ea65: import org.osgi.framework.ServiceRegistration;
1:ec3ea65: import org.osgi.framework.wiring.BundleRevision;
1:ec3ea65: import org.osgi.framework.wiring.BundleWire;
1:ec3ea65: import org.osgi.framework.wiring.BundleWiring;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:ec3ea65: 
1:3c711eb: /**
1:3c711eb:  * Eclipselink adapter main class.
1:3c711eb:  * 
1:3c711eb:  * The purpose of this class is to:
1:3c711eb:  * <ul>
1:3c711eb:  * <li>publish an OSGi-compatible Eclipselink {@link PersistenceProvider} service in the service registry</li>
1:3c711eb:  * <li>intercept {@link EntityManagerFactory} creation to ensure that the Eclipselink target server (if not specified otherwise)
1:3c711eb:  *     is OSGi compatible</li>
1:3c711eb:  * </ul>
1:3c711eb:  */
1:01b1fa4: public class Activator implements BundleActivator, BundleListener {
1:35b5b11:     public static final String ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME = "org.eclipse.persistence.jpa";
1:35b5b11:     public static final String ECLIPSELINK_JPA_PROVIDER_CLASS_NAME = "org.eclipse.persistence.jpa.PersistenceProvider";
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(Activator.class);
1:3b80dcd:     private final ConcurrentMap<Bundle, ServiceRegistration<?>> registeredProviders = new ConcurrentHashMap<Bundle, ServiceRegistration<?>>();
1:3b80dcd:     
1:01b1fa4:     private BundleContext context;
1:3b80dcd:     
1:ec3ea65:     @Override
1:01b1fa4:     public void start(BundleContext ctx) {
1:ec3ea65:         LOG.debug("Starting EclipseLink adapter");
1:01b1fa4:         context = ctx;
1:01b1fa4:         ctx.addBundleListener(this);
1:86224ba:         
1:01b1fa4:         for (Bundle b : ctx.getBundles()) {
1:b95cbad:             if ((b.getState() & (Bundle.ACTIVE | Bundle.STARTING | Bundle.RESOLVED | Bundle.STOPPING)) != 0) 
1:01b1fa4:                 handlePotentialEclipseLink(b);
1:86224ba:         }
16:f55debd:     }
1:a3c7aee:     
1:ec3ea65:     @Override
1:01b1fa4:     public void stop(BundleContext ctx) {
1:ec3ea65:         LOG.debug("Stopping EclipseLink adapter");
1:b80f1c3: 
1:b80f1c3:         for (ServiceRegistration<?> reg : registeredProviders.values()) {
1:b80f1c3:           reg.unregister();
1:b80f1c3:         }
1:b80f1c3:       }
1:3b80dcd:     
1:ec3ea65:     @Override
1:01b1fa4:     public void bundleChanged(BundleEvent event) {
1:b95cbad:         if ((event.getType() & (BundleEvent.RESOLVED)) != 0) {
1:01b1fa4:             handlePotentialEclipseLink(event.getBundle());
1:ec3ea65:         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
1:3b80dcd:             ServiceRegistration<?> reg = registeredProviders.remove(event.getBundle());
1:01b1fa4:             if (reg != null) {
3:01b1fa4:                 reg.unregister();
1:f55debd:             }
1:f55debd:         }
1:f55debd:     }
1:86224ba:     
1:01b1fa4:     private void handlePotentialEclipseLink(Bundle b) {
1:ec3ea65:         if (!ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME.equals(b.getSymbolicName())) {
1:ec3ea65:             return;
1:ec3ea65:         }
1:ec3ea65:         if (registeredProviders.containsKey(b)) {
1:ec3ea65:             return;
1:ec3ea65:         }
1:ec3ea65:         
1:ec3ea65:         PersistenceProvider provider = createEclipselinkProvider(b);
1:ec3ea65:         if (provider == null) {
1:ec3ea65:             return;
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         LOG.debug("Adding new EclipseLink provider for bundle {}", b);
1:ec3ea65:         PersistenceProvider proxiedProvider = new EclipseLinkPersistenceProvider(provider, b);
1:ec3ea65:         
1:ec3ea65:         Dictionary<String, Object> props = new Hashtable<String, Object>(); // NOSONAR
1:ec3ea65:         props.put("org.apache.aries.jpa.container.weaving.packages", getJPAPackages(b));
1:ec3ea65:         props.put("javax.persistence.provider", ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
1:ec3ea65:         ServiceRegistration<?> reg = context.registerService(PersistenceProvider.class, proxiedProvider, props);
1:ec3ea65:         
1:ec3ea65:         ServiceRegistration<?> old = registeredProviders.putIfAbsent(b, reg);
1:ec3ea65:         if (old != null) {
1:ec3ea65:             reg.unregister();
1:ec3ea65:         }
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     @SuppressWarnings("unchecked")
1:ec3ea65:     private static PersistenceProvider createEclipselinkProvider(Bundle b) {
1:ec3ea65:         try {
1:ec3ea65:             Class<? extends PersistenceProvider> providerClass = (Class<? extends PersistenceProvider>)b.loadClass(Activator.ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
1:ec3ea65:             Constructor<? extends PersistenceProvider> con = providerClass.getConstructor();
1:ec3ea65:             return con.newInstance();
1:ec3ea65:         } catch (Exception e) {
1:ec3ea65:             LOG.debug("Unable to load EclipseLink provider class. Ignoring bundle " + b.getSymbolicName(), e);
1:ec3ea65:             return null;
1:f55debd:         }
1:f55debd:     }
21:f55debd:     
1:3c711eb:     /**
1:3c711eb:      * Get all the relevant packages that the EclipseLink JPA provider exports or persistence packages it uses itself. These are needed
1:3c711eb:      * so that the woven proxy (for runtime enhancement) can be used later on :)
1:3c711eb:      * 
1:3c711eb:      * Note that differently to OpenJPA the relevant classes are actually in more than just one bundle (org.eclipse.persistence.jpa and org.eclipse.persistence.core
1:3c711eb:      * at the time of this writing). Hence, we have to take more than just the packages of the JPA provider bundle into account ...
1:3c711eb:      * 
1:01b1fa4:      * @param jpaBundle
1:01b1fa4:      * @return
1:3c711eb:      */
1:01b1fa4:     private String[] getJPAPackages(Bundle jpaBundle) {
1:01b1fa4:         Set<String> result = new HashSet<String>();
1:ec3ea65: 
1:01b1fa4:         for (Bundle b : context.getBundles()) {
1:3b80dcd:             BundleWiring bw = b.adapt(BundleWiring.class);
1:ec3ea65:             if (bw == null) {
1:ec3ea65:                 continue;
1:ec3ea65:             }
1:ec3ea65:             boolean isJpaBundle = b.equals(jpaBundle);
1:ec3ea65:             List<BundleWire> wires = bw.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1:ec3ea65:             for (BundleWire w : wires) {
1:ec3ea65:                 String pkgName = (String)w.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE);
1:ec3ea65:                 boolean add = isJpaBundle || pkgName.startsWith("org.eclipse.persistence");
1:ec3ea65:                 if (add) {
1:ec3ea65:                     result.add(getPkg(b, pkgName));
1:ec3ea65:                 }
1:a3c7aee:             }
1:a3c7aee:         }
1:a3c7aee:         
1:ec3ea65:         result.add(getPkg(context.getBundle(), "org.apache.aries.jpa.eclipselink.adapter.platform"));
1:ec3ea65:         LOG.debug("Found JPA packages {}", result);
1:01b1fa4:         return result.toArray(new String[0]);
1:a3c7aee:     }
1:ec3ea65: 
1:ec3ea65:     private static String getPkg(Bundle b, String pkgName) {
1:ec3ea65:         return String.format("%s;%s=%s; %s=%s", pkgName, Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, b.getSymbolicName(), Constants.BUNDLE_VERSION_ATTRIBUTE, b.getVersion());
1:ec3ea65:     }
1:3b80dcd: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.BundleListener;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(Activator.class);
1:     @Override
1:         LOG.debug("Starting EclipseLink adapter");
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         LOG.debug("Stopping EclipseLink adapter");
1:     @Override
1:         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
/////////////////////////////////////////////////////////////////////////
1:         if (!ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME.equals(b.getSymbolicName())) {
1:             return;
1:         }
1:         if (registeredProviders.containsKey(b)) {
1:             return;
1:         }
1:         
1:         PersistenceProvider provider = createEclipselinkProvider(b);
1:         if (provider == null) {
1:             return;
1:         }
1: 
1:         LOG.debug("Adding new EclipseLink provider for bundle {}", b);
1:         PersistenceProvider proxiedProvider = new EclipseLinkPersistenceProvider(provider, b);
1:         
1:         Dictionary<String, Object> props = new Hashtable<String, Object>(); // NOSONAR
1:         props.put("org.apache.aries.jpa.container.weaving.packages", getJPAPackages(b));
1:         props.put("javax.persistence.provider", ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
1:         ServiceRegistration<?> reg = context.registerService(PersistenceProvider.class, proxiedProvider, props);
1:         
1:         ServiceRegistration<?> old = registeredProviders.putIfAbsent(b, reg);
1:         if (old != null) {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private static PersistenceProvider createEclipselinkProvider(Bundle b) {
1:         try {
1:             Class<? extends PersistenceProvider> providerClass = (Class<? extends PersistenceProvider>)b.loadClass(Activator.ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
1:             Constructor<? extends PersistenceProvider> con = providerClass.getConstructor();
1:             return con.newInstance();
1:         } catch (Exception e) {
1:             LOG.debug("Unable to load EclipseLink provider class. Ignoring bundle " + b.getSymbolicName(), e);
1:             return null;
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (bw == null) {
1:                 continue;
1:             }
1:             boolean isJpaBundle = b.equals(jpaBundle);
1:             List<BundleWire> wires = bw.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1:             for (BundleWire w : wires) {
1:                 String pkgName = (String)w.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE);
1:                 boolean add = isJpaBundle || pkgName.startsWith("org.eclipse.persistence");
1:                 if (add) {
1:                     result.add(getPkg(b, pkgName));
1:                 }
1:         result.add(getPkg(context.getBundle(), "org.apache.aries.jpa.eclipselink.adapter.platform"));
1:         LOG.debug("Found JPA packages {}", result);
1: 
1:     private static String getPkg(Bundle b, String pkgName) {
1:         return String.format("%s;%s=%s; %s=%s", pkgName, Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, b.getSymbolicName(), Constants.BUNDLE_VERSION_ATTRIBUTE, b.getVersion());
1:     }
commit:5ac33c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
0:                 ServiceFactory<PersistenceProvider> factory = new EclipseLinkProviderService(b);
0:                 Dictionary<String, Object> props = new Hashtable<String, Object>();
0:                 ServiceRegistration<?> reg = context.registerService(
0:                 ServiceRegistration<?> old = registeredProviders.putIfAbsent(b, reg);
commit:a3c7aee
/////////////////////////////////////////////////////////////////////////
0:             if(bw != null) {
0: 	            List<BundleWire> wires = bw.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1: 	
0: 	            for (BundleWire w : wires) {
0: 	                String pkgName = (String) w.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE);
1: 	
0: 	                boolean add = false;
0: 	                if (b.equals(jpaBundle)) {
0: 	                    add = true;
0: 	                } else if (pkgName.startsWith("org.eclipse.persistence")) {
0: 	                    add = true;
1: 	                }
1: 	                
0: 	                if (add) {
0: 	                    String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" + b.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE  + "=" + b.getVersion();                    
0: 	                    result.add(pkgName + suffix);
1: 	                }
1: 	            }
commit:b80f1c3
/////////////////////////////////////////////////////////////////////////
0:         logger.debug("Stopping EclipseLink adapter");
1: 
1:         for (ServiceRegistration<?> reg : registeredProviders.values()) {
1:           reg.unregister();
1:         }
1:       }
commit:3b80dcd
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.BundleListener;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceFactory;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.framework.wiring.BundleRevision;
0: import org.osgi.framework.wiring.BundleWire;
0: import org.osgi.framework.wiring.BundleWiring;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<Bundle, ServiceRegistration<?>> registeredProviders = new ConcurrentHashMap<Bundle, ServiceRegistration<?>>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:             ServiceRegistration<?> reg = registeredProviders.remove(event.getBundle());
/////////////////////////////////////////////////////////////////////////
0:                 ServiceFactory<?> factory = new EclipseLinkProviderService(b);
/////////////////////////////////////////////////////////////////////////
1:             BundleWiring bw = b.adapt(BundleWiring.class);
0:             List<BundleWire> wires = bw.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1: 
0:             for (BundleWire w : wires) {
0:                 String pkgName = (String) w.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE);
1: 
0:                 boolean add = false;
0:                 } else if (pkgName.startsWith("org.eclipse.persistence")) {
0:                     add = true;
0:                     result.add(pkgName + suffix);
1:                 }
/////////////////////////////////////////////////////////////////////////
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:35b5b11
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jpa.eclipselink.adapter.EclipseLinkProviderService;
/////////////////////////////////////////////////////////////////////////
1:     public static final String ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME = "org.eclipse.persistence.jpa";
1:     public static final String ECLIPSELINK_JPA_PROVIDER_CLASS_NAME = "org.eclipse.persistence.jpa.PersistenceProvider";
/////////////////////////////////////////////////////////////////////////
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1:             
0:             if (props == null) {
0:                 props = new Properties();
1:             }
1:             
commit:b95cbad
/////////////////////////////////////////////////////////////////////////
1: // * Licensed to the Apache Software Foundation (ASF) under one
/////////////////////////////////////////////////////////////////////////
1:             if ((b.getState() & (Bundle.ACTIVE | Bundle.STARTING | Bundle.RESOLVED | Bundle.STOPPING)) != 0) 
/////////////////////////////////////////////////////////////////////////
1:         if ((event.getType() & (BundleEvent.RESOLVED)) != 0) {
0:         } else if (event.getType() == BundleEvent.UNRESOLVED | event.getType() == BundleEvent.UNINSTALLED) {
/////////////////////////////////////////////////////////////////////////
0:                 ServiceRegistration reg = context.registerService(
commit:3c711eb
/////////////////////////////////////////////////////////////////////////
1:  * Eclipselink adapter main class.
1:  * 
1:  * The purpose of this class is to:
1:  * <ul>
1:  * <li>publish an OSGi-compatible Eclipselink {@link PersistenceProvider} service in the service registry</li>
1:  * <li>intercept {@link EntityManagerFactory} creation to ensure that the Eclipselink target server (if not specified otherwise)
1:  *     is OSGi compatible</li>
1:  * </ul>
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Wrapper {@link PersistenceUnitInfo} object that adds the eclipselink.target-server setting (if not present)
0:      * and makes sure we can load {@link OSGiTSServer} from the unit's classloader.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Service factory for generating the Eclipselink OSGi compatible provider. It proxies the provider so that
0:      * we can go in at entity manager creation time and set the eclipselink target-server to be {@link OSGiTSServer}.
1:      */
/////////////////////////////////////////////////////////////////////////
0:             // make sure we can actually find the JPA provider we expect to find
/////////////////////////////////////////////////////////////////////////
1:      * Get all the relevant packages that the EclipseLink JPA provider exports or persistence packages it uses itself. These are needed
1:      * so that the woven proxy (for runtime enhancement) can be used later on :)
1:      * 
1:      * Note that differently to OpenJPA the relevant classes are actually in more than just one bundle (org.eclipse.persistence.jpa and org.eclipse.persistence.core
1:      * at the time of this writing). Hence, we have to take more than just the packages of the JPA provider bundle into account ...
1:      * 
commit:f55debd
/////////////////////////////////////////////////////////////////////////
0: import java.net.URL;
0: import java.util.Map;
0: import java.util.Properties;
1: import javax.persistence.EntityManagerFactory;
0: import javax.persistence.SharedCacheMode;
0: import javax.persistence.ValidationMode;
0: import javax.persistence.spi.ClassTransformer;
0: import javax.persistence.spi.PersistenceUnitInfo;
0: import javax.persistence.spi.PersistenceUnitTransactionType;
0: import javax.persistence.spi.ProviderUtil;
0: import javax.sql.DataSource;
0: import org.apache.aries.jpa.eclipselink.adapter.platform.OSGiTSServer;
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static class PersistenceUnitProxyWithTargetServer implements PersistenceUnitInfo {
0:         private final PersistenceUnitInfo delegate;
1:         
0:         public PersistenceUnitProxyWithTargetServer(PersistenceUnitInfo info) {
0:             delegate = info;
1:         }
1: 
0:         public void addTransformer(ClassTransformer arg0) {
0:             delegate.addTransformer(arg0);
1:         }
1: 
0:         public boolean excludeUnlistedClasses() {
0:             return delegate.excludeUnlistedClasses();
1:         }
1: 
0:         public ClassLoader getClassLoader() {
0:             ClassLoader unionClassLoader = new ClassLoader(delegate.getClassLoader()) {
0:                 protected Class<?> findClass(String name) throws ClassNotFoundException {
0:                     return Activator.class.getClassLoader().loadClass(name);
1:                 }
0:             };
1:             
0:             return unionClassLoader;
1:         }
1: 
0:         public List<URL> getJarFileUrls() {
0:             return delegate.getJarFileUrls();
1:         }
1: 
0:         public DataSource getJtaDataSource() {
0:             return delegate.getJtaDataSource();
1:         }
1: 
0:         public List<String> getManagedClassNames() {
0:             return delegate.getManagedClassNames();
1:         }
1: 
0:         public List<String> getMappingFileNames() {
0:             return delegate.getMappingFileNames();
1:         }
1: 
0:         public ClassLoader getNewTempClassLoader() {
0:             return delegate.getNewTempClassLoader();
1:         }
1: 
0:         public DataSource getNonJtaDataSource() {
0:             return delegate.getNonJtaDataSource();
1:         }
1: 
0:         public String getPersistenceProviderClassName() {
0:             return delegate.getPersistenceProviderClassName();
1:         }
1: 
0:         public String getPersistenceUnitName() {
0:             return delegate.getPersistenceUnitName();
1:         }
1: 
0:         public URL getPersistenceUnitRootUrl() {
0:             return delegate.getPersistenceUnitRootUrl();
1:         }
1: 
0:         public String getPersistenceXMLSchemaVersion() {
0:             return delegate.getPersistenceXMLSchemaVersion();
1:         }
1: 
0:         public Properties getProperties() {
0:             Properties props = delegate.getProperties();
0:             if (!!!props.containsKey("eclipselink.target-server")) {
0:                 props.put("eclipselink.target-server", OSGiTSServer.class.getName());
1:             }
1:             
0:             return props;
1:         }
1: 
0:         public SharedCacheMode getSharedCacheMode() {
0:             return delegate.getSharedCacheMode();
1:         }
1: 
0:         public PersistenceUnitTransactionType getTransactionType() {
0:             return delegate.getTransactionType();
1:         }
1: 
0:         public ValidationMode getValidationMode() {
0:             return delegate.getValidationMode();
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
0:                 final PersistenceProvider provider = con.newInstance();
0:                 
0:                 return new PersistenceProvider() {
0:                     public ProviderUtil getProviderUtil() {
0:                         return provider.getProviderUtil();
0:                     }
0:                     
0:                     public EntityManagerFactory createEntityManagerFactory(String arg0, Map arg1) {
0:                         return provider.createEntityManagerFactory(arg0, arg1);
0:                     }
0:                     
0:                     public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo punit, Map props) {
0:                         return provider.createContainerEntityManagerFactory(new PersistenceUnitProxyWithTargetServer(punit), props);
0:                     }
0:                 };
0:                 
/////////////////////////////////////////////////////////////////////////
0:         result.add("org.apache.aries.jpa.eclipselink.adapter.platform;" + 
0:                 Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" + context.getBundle().getSymbolicName() + ";" + 
0:                 Constants.BUNDLE_VERSION_ATTRIBUTE  + "=" + context.getBundle().getVersion());        
0:         
commit:01b1fa4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.eclipselink.adapter;
0: 
0: import java.lang.reflect.Constructor;
0: import java.util.Arrays;
0: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
0: 
1: import javax.persistence.spi.PersistenceProvider;
0: 
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.BundleListener;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceFactory;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.packageadmin.ExportedPackage;
0: import org.osgi.service.packageadmin.PackageAdmin;
0: import org.osgi.util.tracker.ServiceTracker;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * This exception is thrown if an {@link EntityManagerFactoryManager} has
0:  * entered an invalid state and needs to be destroyed
1:  */
1: public class Activator implements BundleActivator, BundleListener {
0:     private static final String ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME = "org.eclipse.persistence.jpa";
0:     private static final String ECLIPSELINK_JPA_PROVIDER_CLASS_NAME = "org.eclipse.persistence.jpa.PersistenceProvider";
0:     private final ConcurrentMap<Bundle, ServiceRegistration> registeredProviders = new ConcurrentHashMap<Bundle, ServiceRegistration>();
0:     
0:     private static final Logger logger = LoggerFactory.getLogger(Activator.class);
0:     
0:     private ServiceTracker tracker;
1:     private BundleContext context;
0:   
0:     private static class EclipseLinkProviderService implements ServiceFactory {
0:         private final Bundle eclipseLinkJpaBundle;
0:         
0:         public EclipseLinkProviderService(Bundle b) {
0:             eclipseLinkJpaBundle = b;
0:         }
0:         
0:         public Object getService(Bundle bundle, ServiceRegistration registration) {
0:             logger.debug("Requested EclipseLink Provider service");
0:             
0:             try {
0:                 Class<? extends PersistenceProvider> providerClass = eclipseLinkJpaBundle.loadClass(ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
0:                 Constructor<? extends PersistenceProvider> con = providerClass.getConstructor();
0:                 return con.newInstance();
0:             } catch (Exception e) {
0:                 logger.error("Got exception trying to instantiate the EclipseLink provider", e);
0:                 return null;                
0:             }
0:         }
0: 
0:         public void ungetService(Bundle bundle, ServiceRegistration registration, Object service) {}
0:     }
0:     
1:     public void start(BundleContext ctx) {
0:         logger.debug("Starting EclipseLink adapter");
0:         
1:         context = ctx;
0:         
0:         tracker = new ServiceTracker(ctx, PackageAdmin.class.getName(), null);
0:         tracker.open();
0:         
1:         ctx.addBundleListener(this);
0:         
1:         for (Bundle b : ctx.getBundles()) {
0:             if ((b.getState() & (Bundle.ACTIVE | Bundle.STARTING)) != 0) 
1:                 handlePotentialEclipseLink(b);
0:         }
0:     }
0:   
1:     public void stop(BundleContext ctx) {
0:         logger.debug("Stopping EclipseLink adapter");
0:         
0:         tracker.close();
0:         
0:         for (ServiceRegistration reg : registeredProviders.values()) {
1:             reg.unregister();
0:         }
0:     }
0: 
1:     public void bundleChanged(BundleEvent event) {
0:         if ((event.getType() & (BundleEvent.STARTED | BundleEvent.STARTING | BundleEvent.LAZY_ACTIVATION)) != 0) {
1:             handlePotentialEclipseLink(event.getBundle());
0:         } else if (event.getType() == BundleEvent.STOPPING) {
0:             ServiceRegistration reg = registeredProviders.remove(event.getBundle());
1:             if (reg != null) {
1:                 reg.unregister();
0:             }
0:         }
0:     }
0:     
1:     private void handlePotentialEclipseLink(Bundle b) {
0:         if (b.getSymbolicName().equals(ECLIPSELINK_JPA_PROVIDER_BUNDLE_SYMBOLIC_NAME)) {
0:             logger.debug("Found EclipseLink bundle {}", b);
0:             
0:             try {
0:                 b.loadClass(ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
0:             } catch (ClassNotFoundException cnfe) {
0:                 logger.debug("Did not find provider class, exiting");
0:                 // not one we can handle
0:                 return;
0:             }
0:             
0:             if (!!!registeredProviders.containsKey(b)) {
0:                 logger.debug("Adding new EclipseLink provider for bundle {}", b);
0:                 
0:                 ServiceFactory factory = new EclipseLinkProviderService(b);
0:                 
0:                 Hashtable<String, Object> props = new Hashtable<String, Object>();
0:                 props.put("org.apache.aries.jpa.container.weaving.packages", getJPAPackages(b));
0:                 props.put("javax.persistence.provider", ECLIPSELINK_JPA_PROVIDER_CLASS_NAME);
0:                             
0:                 ServiceRegistration reg = b.getBundleContext().registerService(
0:                         PersistenceProvider.class.getName(), factory, props);
0:                 
0:                 ServiceRegistration old = registeredProviders.putIfAbsent(b, reg);
0:                 if (old != null) {
1:                     reg.unregister();
0:                 }
0:             }
0:         }
0:     }
0:     
0:     /**
0:      * Get all the relevant packages that the EclipseLink JPA provider exports or persistence packages it uses itself
1:      * @param jpaBundle
1:      * @return
1:      */
1:     private String[] getJPAPackages(Bundle jpaBundle) {
1:         Set<String> result = new HashSet<String>();
0:         
0:         PackageAdmin admin = (PackageAdmin) tracker.getService();
1:         for (Bundle b : context.getBundles()) {
0:             for (ExportedPackage ep : nullSafe(admin.getExportedPackages(b))) {
0:                 boolean add = true;
0:                 if (b.equals(jpaBundle)) {
0:                     add = true;
0:                 } else if (ep.getName().startsWith("org.eclipse.persistence")) {
0:                     inner: for (Bundle b2 : nullSafe(ep.getImportingBundles())) {
0:                         if (b2.equals(jpaBundle)) {
0:                             add = true;
0:                             break inner;
0:                         }
0:                     }
0:                 }
0:                 
0:                 if (add) {
0:                     String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" + b.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE  + "=" + b.getVersion();                    
0:                     result.add(ep.getName()+suffix);
0:                 }                
0:             }
0:         }
0:         
0:         logger.debug("Found JPA packages {}", result);
0:         
1:         return result.toArray(new String[0]);
0:     }
0:     
0:     private<T> List<T> nullSafe(T[] array) {
0:         if (array == null) return Collections.emptyList();
0:         else return Arrays.asList(array);
0:     }
0: }
============================================================================