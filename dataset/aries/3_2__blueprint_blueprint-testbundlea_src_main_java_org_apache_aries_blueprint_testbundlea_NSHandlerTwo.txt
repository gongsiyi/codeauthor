1:4f67549: /**
1:4f67549:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:4f67549:  *  contributor license agreements.  See the NOTICE file distributed with
1:4f67549:  *  this work for additional information regarding copyright ownership.
1:4f67549:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:4f67549:  *  (the "License"); you may not use this file except in compliance with
1:4f67549:  *  the License.  You may obtain a copy of the License at
1:4f67549:  *
1:4f67549:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4f67549:  *
1:4f67549:  *  Unless required by applicable law or agreed to in writing, software
1:4f67549:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:4f67549:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f67549:  *  See the License for the specific language governing permissions and
1:4f67549:  *  limitations under the License.
1:4f67549:  */
1:4f67549: package org.apache.aries.blueprint.testbundlea;
1:4f67549: 
1:4f67549: import java.lang.reflect.Method;
1:4f67549: import java.net.URL;
1:4f67549: import java.util.ArrayList;
1:4f67549: import java.util.Collections;
1:4f67549: import java.util.List;
1:4f67549: import java.util.Set;
1:4f67549: 
1:4f67549: import org.apache.aries.blueprint.Interceptor;
1:4f67549: import org.apache.aries.blueprint.NamespaceHandler;
1:4f67549: import org.apache.aries.blueprint.ParserContext;
1:4f67549: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:4f67549: import org.osgi.service.blueprint.reflect.Metadata;
1:4f67549: import org.w3c.dom.Element;
1:4f67549: import org.w3c.dom.Node;
1:4f67549: 
1:4f67549: /**
1:4f67549:  * A simple example namespace handler, that understands an element, and 2 attributes
1:4f67549:  * 
1:4f67549:  * When attribone is found on a bean, an interceptor is added that will track invocations.
1:4f67549:  * 
1:4f67549:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
1:4f67549:  *
1:4f67549:  */
1:4f67549: public class NSHandlerTwo implements NamespaceHandler{
1:4f67549:     
1:4f67549:     public static String NSURI = "http://ns.handler.two";
1:4f67549:     
1:4f67549:     private static String ELT_NAME = "nshandlertwo";
1:4f67549:     private static String ATTRIB_ONE = "attribone";
1:4f67549:     private static String ATTRIB_TWO = "attribtwo";
1:4f67549:     
1:4f67549:     private static List<String> interceptorLog = new ArrayList<String>();
1:4f67549:     
1:4f67549:     private static Interceptor tracker = new Interceptor() {
1:4f67549:         
1:1394f4c:         //debug/trace calls to toString etc will mess up the interceptor
1:1394f4c:         //log, and break tests if tracked. So we filter them out here.
1:1394f4c:         private boolean isIgnorableMethod(Method m){
1:1394f4c:             if(m.getDeclaringClass()==Object.class){
1:1394f4c:                 return true;
1:1394f4c:             }
1:1394f4c:             else
1:1394f4c:                 return false;
1:1394f4c:         }
1:1394f4c:         
1:4f67549:         public Object preCall(ComponentMetadata cm, Method m, Object... parameters)
1:1394f4c:                 throws Throwable {            
1:4f67549:             String args = "[";
1:4f67549:             if(parameters!=null){
1:4f67549:                 if(parameters.length>0){
1:4f67549:                     args+=parameters[0]==null ? "null" : parameters[0].toString();
1:4f67549:                 }
1:4f67549:                 for(int index=1; index<parameters.length; index++){
1:4f67549:                     args+=","+(parameters[index]==null ? "null" : parameters[index].toString());
1:4f67549:                 }
1:4f67549:             }
1:4f67549:             args+="]";
1:4f67549:             String token = cm.getId() +":"+ m.getName() +":"+args+":"+System.currentTimeMillis();
1:1394f4c:             
1:1394f4c:             if(!isIgnorableMethod(m))
1:1394f4c:               interceptorLog.add("PRECALL:"+token);
1:1394f4c:             
1:4f67549:             return token;
1:4f67549:         }
1:4f67549:         
1:4f67549:         public void postCallWithReturn(ComponentMetadata cm, Method m,
1:4f67549:                 Object returnType, Object preCallToken) throws Throwable {
1:1394f4c:             
1:1394f4c:             if(!isIgnorableMethod(m))
1:1394f4c:                 interceptorLog.add("POSTCALL["+returnType.toString()+"]:"+preCallToken);
1:4f67549:         }
1:4f67549:         
1:4f67549:         public void postCallWithException(ComponentMetadata cm, Method m,
1:b664100:                 Throwable ex, Object preCallToken) throws Throwable {
1:1394f4c:             
1:1394f4c:             if(!isIgnorableMethod(m))
1:1394f4c:                 interceptorLog.add("POSTCALLEXCEPTION["+ex.toString()+"]:"+preCallToken);
1:4f67549:         }
1:4f67549:         
1:4f67549:         public int getRank() {
1:4f67549:             return 0;
1:4f67549:         }
1:4f67549:     };
1:4f67549:     
1:4f67549:     //
1:4f67549:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:4f67549:             ParserContext context) {
1:4f67549:         
1:4f67549:         if(node.getLocalName().equals(ATTRIB_ONE)){
1:4f67549:             if(context.getComponentDefinitionRegistry().getInterceptors(component) == null ||
1:4f67549:                !context.getComponentDefinitionRegistry().getInterceptors(component).contains(tracker) ){
1:4f67549:                 context.getComponentDefinitionRegistry().registerInterceptorWithComponent(component, tracker);
1:4f67549:             }
1:4f67549:         }
1:4f67549:         return component;
1:4f67549:     }
1:4f67549:     
1:4f67549:     //process elements
1:4f67549:     public Metadata parse(Element element, ParserContext context) {
1:4f67549:         return null;
1:4f67549:     }    
1:4f67549: 
1:4f67549:     //supply schema back to blueprint.
1:4f67549:     public URL getSchemaLocation(String namespace) {
1:4f67549:         return this.getClass().getResource("nshandlertwo.xsd");
1:4f67549:     }
1:4f67549: 
1:4f67549:     public Set<Class> getManagedClasses() {
1:4f67549:         return null;
1:4f67549:     }
1:4f67549: 
1:4f67549:     public List<String> getLog() {
1:4f67549:         return Collections.unmodifiableList(interceptorLog);
1:4f67549:     }
1:4f67549:     
1:4f67549: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b664100
/////////////////////////////////////////////////////////////////////////
1:                 Throwable ex, Object preCallToken) throws Throwable {
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:1394f4c
/////////////////////////////////////////////////////////////////////////
1:         //debug/trace calls to toString etc will mess up the interceptor
1:         //log, and break tests if tracked. So we filter them out here.
1:         private boolean isIgnorableMethod(Method m){
1:             if(m.getDeclaringClass()==Object.class){
1:                 return true;
1:             }
1:             else
1:                 return false;
1:         }
1:         
1:                 throws Throwable {            
/////////////////////////////////////////////////////////////////////////
1:             
1:             if(!isIgnorableMethod(m))
1:               interceptorLog.add("PRECALL:"+token);
1:             
1:             
1:             if(!isIgnorableMethod(m))
1:                 interceptorLog.add("POSTCALL["+returnType.toString()+"]:"+preCallToken);
1:             
1:             if(!isIgnorableMethod(m))
1:                 interceptorLog.add("POSTCALLEXCEPTION["+ex.toString()+"]:"+preCallToken);
commit:4f67549
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.testbundlea;
1: 
1: import java.lang.reflect.Method;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.Interceptor;
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: /**
1:  * A simple example namespace handler, that understands an element, and 2 attributes
1:  * 
1:  * When attribone is found on a bean, an interceptor is added that will track invocations.
1:  * 
1:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
1:  *
1:  */
1: public class NSHandlerTwo implements NamespaceHandler{
1:     
1:     public static String NSURI = "http://ns.handler.two";
1:     
1:     private static String ELT_NAME = "nshandlertwo";
1:     private static String ATTRIB_ONE = "attribone";
1:     private static String ATTRIB_TWO = "attribtwo";
1:     
1:     private static List<String> interceptorLog = new ArrayList<String>();
1:     
1:     private static Interceptor tracker = new Interceptor() {
1:         
1:         public Object preCall(ComponentMetadata cm, Method m, Object... parameters)
0:                 throws Throwable {
1:             String args = "[";
1:             if(parameters!=null){
1:                 if(parameters.length>0){
1:                     args+=parameters[0]==null ? "null" : parameters[0].toString();
1:                 }
1:                 for(int index=1; index<parameters.length; index++){
1:                     args+=","+(parameters[index]==null ? "null" : parameters[index].toString());
1:                 }
1:             }
1:             args+="]";
1:             String token = cm.getId() +":"+ m.getName() +":"+args+":"+System.currentTimeMillis();
0:             interceptorLog.add("PRECALL:"+token);
1:             return token;
1:         }
1:         
1:         public void postCallWithReturn(ComponentMetadata cm, Method m,
1:                 Object returnType, Object preCallToken) throws Throwable {
0:             interceptorLog.add("POSTCALL["+returnType.toString()+"]:"+preCallToken);
1:         }
1:         
1:         public void postCallWithException(ComponentMetadata cm, Method m,
0:                 Exception ex, Object preCallToken) throws Throwable {
0:             interceptorLog.add("POSTCALLEXCEPTION["+ex.toString()+"]:"+preCallToken);
1:         }
1:         
1:         public int getRank() {
1:             return 0;
1:         }
1:     };
1:     
1:     //
1:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:             ParserContext context) {
1:         
1:         if(node.getLocalName().equals(ATTRIB_ONE)){
1:             if(context.getComponentDefinitionRegistry().getInterceptors(component) == null ||
1:                !context.getComponentDefinitionRegistry().getInterceptors(component).contains(tracker) ){
1:                 context.getComponentDefinitionRegistry().registerInterceptorWithComponent(component, tracker);
1:             }
1:         }
1:         return component;
1:     }
1:     
1:     //process elements
1:     public Metadata parse(Element element, ParserContext context) {
1:         return null;
1:     }    
1: 
1:     //supply schema back to blueprint.
1:     public URL getSchemaLocation(String namespace) {
1:         return this.getClass().getResource("nshandlertwo.xsd");
1:     }
1: 
1:     public Set<Class> getManagedClasses() {
1:         return null;
1:     }
1: 
1:     public List<String> getLog() {
1:         return Collections.unmodifiableList(interceptorLog);
1:     }
1:     
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  */
0: package org.apache.aries.blueprint.testbundlea;
0: 
0: import java.lang.reflect.Method;
0: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.blueprint.Interceptor;
0: import org.apache.aries.blueprint.NamespaceHandler;
0: import org.apache.aries.blueprint.ParserContext;
0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
0: import org.osgi.service.blueprint.reflect.Metadata;
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
0: 
0: /**
0:  * A simple example namespace handler, that understands an element, and 2 attributes
0:  * 
0:  * When attribone is found on a bean, an interceptor is added that will track invocations.
0:  * 
0:  * This handler is designed to exercise aspects of the NamespaceHandler capability set.
0:  *
0:  */
0: public class NSHandlerTwo implements NamespaceHandler{
0:     
0:     public static String NSURI = "http://ns.handler.two";
0:     
0:     private static String ELT_NAME = "nshandlertwo";
0:     private static String ATTRIB_ONE = "attribone";
0:     private static String ATTRIB_TWO = "attribtwo";
0:     
0:     private static List<String> interceptorLog = new ArrayList<String>();
0:     
0:     private static Interceptor tracker = new Interceptor() {
0:         
0:         public Object preCall(ComponentMetadata cm, Method m, Object... parameters)
0:                 throws Throwable {
0:             String args = "[";
0:             if(parameters!=null){
0:                 if(parameters.length>0){
0:                     args+=parameters[0]==null ? "null" : parameters[0].toString();
0:                 }
0:                 for(int index=1; index<parameters.length; index++){
0:                     args+=","+(parameters[index]==null ? "null" : parameters[index].toString());
0:                 }
0:             }
0:             args+="]";
0:             String token = cm.getId() +":"+ m.getName() +":"+args+":"+System.currentTimeMillis();
0:             interceptorLog.add("PRECALL:"+token);
0:             return token;
0:         }
0:         
0:         public void postCallWithReturn(ComponentMetadata cm, Method m,
0:                 Object returnType, Object preCallToken) throws Throwable {
0:             interceptorLog.add("POSTCALL["+returnType.toString()+"]:"+preCallToken);
0:         }
0:         
0:         public void postCallWithException(ComponentMetadata cm, Method m,
0:                 Exception ex, Object preCallToken) throws Throwable {
0:             interceptorLog.add("POSTCALLEXCEPTION["+ex.toString()+"]:"+preCallToken);
0:         }
0:         
0:         public int getRank() {
0:             return 0;
0:         }
0:     };
0:     
0:     //
0:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
0:             ParserContext context) {
0:         
0:         if(node.getLocalName().equals(ATTRIB_ONE)){
0:             if(context.getComponentDefinitionRegistry().getInterceptors(component) == null ||
0:                !context.getComponentDefinitionRegistry().getInterceptors(component).contains(tracker) ){
0:                 context.getComponentDefinitionRegistry().registerInterceptorWithComponent(component, tracker);
0:             }
0:         }
0:         return component;
0:     }
0:     
0:     //process elements
0:     public Metadata parse(Element element, ParserContext context) {
0:         return null;
0:     }    
0: 
0:     //supply schema back to blueprint.
0:     public URL getSchemaLocation(String namespace) {
0:         return this.getClass().getResource("nshandlertwo.xsd");
0:     }
0: 
0:     public Set<Class> getManagedClasses() {
0:         return null;
0:     }
0: 
0:     public List<String> getLog() {
0:         return Collections.unmodifiableList(interceptorLog);
0:     }
0:     
0: }
============================================================================