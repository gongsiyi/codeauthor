1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.example.tasklist.blueprint.impl;
2:2cfdf52: 
1:2cfdf52: import java.util.Collection;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.PersistenceContext;
1:04d21a4: import javax.persistence.criteria.CriteriaQuery;
1:bfabf32: import javax.transaction.Transactional;
1:bfabf32: import javax.transaction.Transactional.TxType;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.example.tasklist.model.Task;
1:2cfdf52: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1:2cfdf52: 
1:bfabf32: @Transactional
1:2cfdf52: public class TaskServiceImpl implements TaskService {
1:2cfdf52: 
1:0d59ccb:     @PersistenceContext(unitName = "tasklist")
1:0d59ccb:     EntityManager em;
1:2cfdf52: 
1:bfabf32:     @Transactional(TxType.SUPPORTS)
1:ec3ea65:     @Override
1:0d59ccb:     public Task getTask(Integer id) {
1:0d59ccb:         return em.find(Task.class, id);
1:0d59ccb:     }
1:2cfdf52: 
1:2cfdf52:     
1:ec3ea65:     @Override
1:0d59ccb:     public void addTask(Task task) {
1:0d59ccb:         em.persist(task);
1:0d59ccb:         em.flush();
1:0d59ccb:     }
1:2cfdf52: 
1:bfabf32:     @Transactional(TxType.SUPPORTS)
1:ec3ea65:     @Override
1:0d59ccb:     public Collection<Task> getTasks() {
1:04d21a4:         CriteriaQuery<Task> query = em.getCriteriaBuilder().createQuery(Task.class);
1:04d21a4:         return em.createQuery(query.select(query.from(Task.class))).getResultList();
1:0d59ccb:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:0d59ccb:     public void updateTask(Task task) {
1:0d59ccb:         em.persist(task);
1:0d59ccb:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:0d59ccb:     public void deleteTask(Integer id) {
1:0d59ccb:         em.remove(getTask(id));
1:0d59ccb:     }
1:0d59ccb: 
1:0d59ccb: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
commit:04d21a4
/////////////////////////////////////////////////////////////////////////
1: import javax.persistence.criteria.CriteriaQuery;
/////////////////////////////////////////////////////////////////////////
1:         CriteriaQuery<Task> query = em.getCriteriaBuilder().createQuery(Task.class);
1:         return em.createQuery(query.select(query.from(Task.class))).getResultList();
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:     @PersistenceContext(unitName = "tasklist")
1:     EntityManager em;
0:     @Override
1:     public Task getTask(Integer id) {
1:         return em.find(Task.class, id);
1:     }
0:     @Transaction
0:     @Override
1:     public void addTask(Task task) {
1:         em.persist(task);
1:         em.flush();
1:     }
1:     public Collection<Task> getTasks() {
0:         return em.createQuery("select t from Task t", Task.class).getResultList();
1:     }
0:     @Transaction
0:     @Override
1:     public void updateTask(Task task) {
1:         em.persist(task);
1:     }
0:     @Transaction
0:     @Override
1:     public void deleteTask(Integer id) {
1:         em.remove(getTask(id));
1:     }
1: 
0:     public void setEm(EntityManager em) {
0:         this.em = em;
1:     }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.example.tasklist.blueprint.impl;
1: 
1: import java.util.Collection;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.PersistenceContext;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
1: import org.apache.aries.jpa.example.tasklist.model.TaskService;
0: import org.apache.aries.transaction.annotations.Transaction;
1: 
1: 
1: public class TaskServiceImpl implements TaskService {
1: 
0: 	@PersistenceContext(unitName="tasklist")
0: 	EntityManager em;
1: 	
0: 	@Override
0: 	public Task getTask(Integer id) {
0: 		return em.find(Task.class, id);
0: 	}
1: 
0: 	@Transaction
0: 	@Override
0: 	public void addTask(Task task) {
0: 		em.persist(task);
0: 		em.flush();
0: 	}
1: 
0: 	public Collection<Task> getTasks() {
0: 		return em.createQuery("select t from Task t", Task.class)
0: 			.getResultList();
0: 	}
1: 
0: 	@Transaction
0: 	@Override
0: 	public void updateTask(Task task) {
0: 		em.persist(task);
0: 	}
1: 
0: 	@Transaction
0: 	@Override
0: 	public void deleteTask(Integer id) {
0: 		em.remove(getTask(id));
0: 	}
1: 
0: 	public void setEm(EntityManager em) {
0: 		this.em = em;
0: 	}
0: }
author:asf-sync-process
-------------------------------------------------------------------------------
commit:bfabf32
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.Transactional;
1: import javax.transaction.Transactional.TxType;
1: @Transactional
1:     @Transactional(TxType.SUPPORTS)
0:     
1:     @Transactional(TxType.SUPPORTS)
============================================================================