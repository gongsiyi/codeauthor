1:c1f1260: /**
1:c1f1260:  * Licensed to the Apache Software Foundation (ASF) under one
1:c1f1260:  * or more contributor license agreements.  See the NOTICE file
1:c1f1260:  * distributed with this work for additional information
1:c1f1260:  * regarding copyright ownership.  The ASF licenses this file
1:c1f1260:  * to you under the Apache License, Version 2.0 (the
1:c1f1260:  * "License"); you may not use this file except in compliance
1:c1f1260:  * with the License.  You may obtain a copy of the License at
1:c1f1260:  *
1:c1f1260:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c1f1260:  *
1:c1f1260:  * Unless required by applicable law or agreed to in writing,
1:c1f1260:  * software distributed under the License is distributed on an
1:c1f1260:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c1f1260:  * KIND, either express or implied.  See the License for the
1:c1f1260:  * specific language governing permissions and limitations
1:c1f1260:  * under the License.
1:c1f1260:  */
1:c1f1260: package org.apache.aries.spifly;
3:c1f1260: 
1:06d1e60: import static junit.framework.Assert.assertNotNull;
1:06d1e60: import static org.junit.Assert.assertSame;
1:06d1e60: 
1:c1f1260: import java.net.URL;
1:c1f1260: import java.net.URLClassLoader;
1:06d1e60: import java.util.Dictionary;
1:7158c23: import java.util.HashMap;
1:06d1e60: import java.util.Hashtable;
1:06d1e60: import java.util.ServiceLoader;
1:c1f1260: 
1:06d1e60: import org.apache.aries.mytest.MySPI;
1:06d1e60: import org.easymock.EasyMock;
1:06d1e60: import org.easymock.IAnswer;
1:06d1e60: import org.junit.After;
1:06d1e60: import org.junit.Before;
1:c1f1260: import org.junit.Test;
1:06d1e60: import org.osgi.framework.Bundle;
1:06d1e60: import org.osgi.framework.BundleContext;
1:06d1e60: import org.osgi.framework.BundleReference;
1:06d1e60: import org.osgi.framework.Constants;
1:c1f1260: 
1:c1f1260: public class UtilTest {
1:06d1e60:     private ClassLoader storedTCCL;
1:06d1e60: 
1:06d1e60:     @Before
1:06d1e60:     public void setup() {
1:06d1e60:         storedTCCL = Thread.currentThread().getContextClassLoader();
1:06d1e60:     }
1:06d1e60: 
1:06d1e60:     @After
1:06d1e60:     public void tearDown() {
1:06d1e60:         Thread.currentThread().setContextClassLoader(storedTCCL);
1:06d1e60:         storedTCCL = null;
1:06d1e60:     }
1:06d1e60: 
1:c1f1260:     @Test
1:c1f1260:     public void testSetRestoreTCCL() {
1:c1f1260:         ClassLoader cl = new URLClassLoader(new URL[] {});
1:c1f1260:         Thread.currentThread().setContextClassLoader(cl);
1:c1f1260:         Util.storeContextClassloader();
1:06d1e60: 
1:c1f1260:         Thread.currentThread().setContextClassLoader(null);
1:06d1e60: 
1:c1f1260:         Util.restoreContextClassloader();
1:06d1e60:         assertSame(cl, Thread.currentThread().getContextClassLoader());
1:06d1e60:     }
1:06d1e60: 
1:06d1e60:     @Test
1:e711070:     public void testFixContextClassLoaderSimpleViaEmbeddedJar() throws Exception {
1:06d1e60:         BaseActivator activator = new BaseActivator() {
1:06d1e60:             public void start(BundleContext context) throws Exception {
1:06d1e60:             }
1:06d1e60:         };
1:06d1e60:         BaseActivator.activator = activator;
1:06d1e60: 
1:06d1e60:         URL url = getClass().getResource("/embedded3.jar");
1:06d1e60:         assertNotNull("precondition", url);
1:06d1e60: 
1:06d1e60:         Bundle providerBundle = EasyMock.createMock(Bundle.class);
1:06d1e60:         final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);
1:5c4365d:         EasyMock.expect(providerBundle.getBundleContext()).andThrow(new IllegalStateException("Disable getBundleClassLoaderViaAdapt"));
1:06d1e60:         EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes();
1:06d1e60:         EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes();
1:06d1e60:         Dictionary<String, String> providerHeaders = new Hashtable<String, String>();
1:e711070:         providerHeaders.put(Constants.BUNDLE_CLASSPATH, ".,embedded3.jar");
1:06d1e60:         EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes();
1:06d1e60:         EasyMock.expect(providerBundle.getResource("embedded3.jar")).andReturn(url).anyTimes();
1:f4b2805:         providerBundle.loadClass((String) EasyMock.anyObject());
1:f4b2805:         EasyMock.expectLastCall().andAnswer(new IAnswer<Class<?>>() {
1:06d1e60:             @Override
1:06d1e60:             public Class<?> answer() throws Throwable {
1:06d1e60:                 return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]);
1:06d1e60:             }
1:06d1e60:         }).anyTimes();
1:06d1e60:         EasyMock.replay(providerBundle);
1:7158c23:         activator.registerProviderBundle(MySPI.class.getName(), providerBundle, new HashMap<String, Object>());
1:06d1e60: 
1:06d1e60:         Bundle clientBundle = EasyMock.createMock(Bundle.class);
1:06d1e60:         EasyMock.replay(clientBundle);
1:06d1e60:         ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);
1:06d1e60: 
1:06d1e60:         Thread.currentThread().setContextClassLoader(null);
1:06d1e60:         Util.fixContextClassloader(ServiceLoader.class.getName(), "load", MySPI.class, clientCL);
1:06d1e60:         assertSame(providerCL, Thread.currentThread().getContextClassLoader());
1:06d1e60:     }
1:b302317: 
1:b302317:     @Test
1:b302317:     public void testNotInitialized() throws Exception {
1:b302317:         BaseActivator.activator = null;
1:b302317: 
1:b302317:         URL url = getClass().getResource("/embedded3.jar");
1:b302317:         assertNotNull("precondition", url);
1:b302317: 
1:b302317:         Bundle providerBundle = EasyMock.createMock(Bundle.class);
1:b302317:         final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);
1:b302317:         EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes();
1:b302317:         EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes();
1:b302317:         Dictionary<String, String> providerHeaders = new Hashtable<String, String>();
1:b302317:         providerHeaders.put(Constants.BUNDLE_CLASSPATH, ".,embedded3.jar");
1:b302317:         EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes();
1:b302317:         EasyMock.expect(providerBundle.getResource("embedded3.jar")).andReturn(url).anyTimes();
1:f4b2805:         providerBundle.loadClass((String) EasyMock.anyObject());
1:f4b2805:         EasyMock.expectLastCall().andAnswer(new IAnswer<Class<?>>() {
1:b302317:             @Override
1:b302317:             public Class<?> answer() throws Throwable {
1:b302317:                 return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]);
1:b302317:             }
1:b302317:         }).anyTimes();
1:b302317:         EasyMock.replay(providerBundle);
1:b302317: 
1:b302317:         Bundle clientBundle = EasyMock.createMock(Bundle.class);
1:b302317:         EasyMock.replay(clientBundle);
1:b302317:         ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);
1:06d1e60: 
1:b302317:         Thread.currentThread().setContextClassLoader(null);
1:b302317:         Util.fixContextClassloader(ServiceLoader.class.getName(), "load", MySPI.class, clientCL);
1:b302317:         assertSame("The system is not yet initialized, so the TCCL should not be set",
1:b302317:                 null, Thread.currentThread().getContextClassLoader());
1:b302317:     }
1:b302317: 
1:06d1e60:     private static class TestBundleClassLoader extends URLClassLoader implements BundleReference {
1:06d1e60:         private final Bundle bundle;
1:06d1e60: 
1:06d1e60:         public TestBundleClassLoader(URL[] urls, ClassLoader parent, Bundle bundle) {
1:06d1e60:             super(urls, parent);
1:06d1e60:             this.bundle = bundle;
1:06d1e60:         }
1:06d1e60: 
1:06d1e60:         @Override
1:06d1e60:         public Bundle getBundle() {
1:06d1e60:             return bundle;
1:06d1e60:         }
1:c1f1260:     }
1:c1f1260: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5c4365d
/////////////////////////////////////////////////////////////////////////
1:         EasyMock.expect(providerBundle.getBundleContext()).andThrow(new IllegalStateException("Disable getBundleClassLoaderViaAdapt"));
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:f4b2805
/////////////////////////////////////////////////////////////////////////
1:         providerBundle.loadClass((String) EasyMock.anyObject());
1:         EasyMock.expectLastCall().andAnswer(new IAnswer<Class<?>>() {
/////////////////////////////////////////////////////////////////////////
1:         providerBundle.loadClass((String) EasyMock.anyObject());
1:         EasyMock.expectLastCall().andAnswer(new IAnswer<Class<?>>() {
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:b302317
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testNotInitialized() throws Exception {
1:         BaseActivator.activator = null;
1: 
1:         URL url = getClass().getResource("/embedded3.jar");
1:         assertNotNull("precondition", url);
1: 
1:         Bundle providerBundle = EasyMock.createMock(Bundle.class);
1:         final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);
1:         EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes();
1:         EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes();
1:         Dictionary<String, String> providerHeaders = new Hashtable<String, String>();
1:         providerHeaders.put(Constants.BUNDLE_CLASSPATH, ".,embedded3.jar");
1:         EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes();
1:         EasyMock.expect(providerBundle.getResource("embedded3.jar")).andReturn(url).anyTimes();
0:         EasyMock.expect(providerBundle.loadClass((String) EasyMock.anyObject())).andAnswer(new IAnswer<Class<?>>() {
1:             @Override
1:             public Class<?> answer() throws Throwable {
1:                 return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]);
1:             }
1:         }).anyTimes();
1:         EasyMock.replay(providerBundle);
1: 
1:         Bundle clientBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.replay(clientBundle);
1:         ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);
1: 
1:         Thread.currentThread().setContextClassLoader(null);
1:         Util.fixContextClassloader(ServiceLoader.class.getName(), "load", MySPI.class, clientCL);
1:         assertSame("The system is not yet initialized, so the TCCL should not be set",
1:                 null, Thread.currentThread().getContextClassLoader());
1:     }
1: 
commit:7158c23
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:         activator.registerProviderBundle(MySPI.class.getName(), providerBundle, new HashMap<String, Object>());
commit:e711070
/////////////////////////////////////////////////////////////////////////
1:     public void testFixContextClassLoaderSimpleViaEmbeddedJar() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         providerHeaders.put(Constants.BUNDLE_CLASSPATH, ".,embedded3.jar");
commit:06d1e60
/////////////////////////////////////////////////////////////////////////
1: import static junit.framework.Assert.assertNotNull;
1: import static org.junit.Assert.assertSame;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.ServiceLoader;
1: import org.apache.aries.mytest.MySPI;
1: import org.easymock.EasyMock;
1: import org.easymock.IAnswer;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleReference;
1: import org.osgi.framework.Constants;
1:     private ClassLoader storedTCCL;
1: 
1:     @Before
1:     public void setup() {
1:         storedTCCL = Thread.currentThread().getContextClassLoader();
1:     }
1: 
1:     @After
1:     public void tearDown() {
1:         Thread.currentThread().setContextClassLoader(storedTCCL);
1:         storedTCCL = null;
1:     }
1: 
1: 
1: 
1:         assertSame(cl, Thread.currentThread().getContextClassLoader());
1:     }
1: 
1:     @Test
0:     public void testFixContextClassLoader() throws Exception {
1:         BaseActivator activator = new BaseActivator() {
1:             public void start(BundleContext context) throws Exception {
1:             }
1:         };
1:         BaseActivator.activator = activator;
1: 
1:         URL url = getClass().getResource("/embedded3.jar");
1:         assertNotNull("precondition", url);
1: 
1:         Bundle providerBundle = EasyMock.createMock(Bundle.class);
1:         final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);
1:         EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes();
1:         EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes();
1:         Dictionary<String, String> providerHeaders = new Hashtable<String, String>();
0:         providerHeaders.put(Constants.BUNDLE_CLASSPATH, "embedded3.jar");
1:         EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes();
1:         EasyMock.expect(providerBundle.getResource("embedded3.jar")).andReturn(url).anyTimes();
0:         EasyMock.expect(providerBundle.loadClass((String) EasyMock.anyObject())).andAnswer(new IAnswer<Class<?>>() {
1:             @Override
1:             public Class<?> answer() throws Throwable {
1:                 return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]);
1:             }
1:         }).anyTimes();
1:         EasyMock.replay(providerBundle);
0:         activator.registerProviderBundle(MySPI.class.getName(), providerBundle);
1: 
1:         Bundle clientBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.replay(clientBundle);
1:         ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);
1: 
1:         Thread.currentThread().setContextClassLoader(null);
1:         Util.fixContextClassloader(ServiceLoader.class.getName(), "load", MySPI.class, clientCL);
1:         assertSame(providerCL, Thread.currentThread().getContextClassLoader());
1:     }
1: 
1:     private static class TestBundleClassLoader extends URLClassLoader implements BundleReference {
1:         private final Bundle bundle;
1: 
1:         public TestBundleClassLoader(URL[] urls, ClassLoader parent, Bundle bundle) {
1:             super(urls, parent);
1:             this.bundle = bundle;
1:         }
1: 
1:         @Override
1:         public Bundle getBundle() {
1:             return bundle;
1:         }
commit:c1f1260
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: 
0: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class UtilTest {
1:     @Test
1:     public void testSetRestoreTCCL() {
1:         ClassLoader cl = new URLClassLoader(new URL[] {});
1:         Thread.currentThread().setContextClassLoader(cl);
1:         Util.storeContextClassloader();
1:         
1:         Thread.currentThread().setContextClassLoader(null);
1:         
1:         Util.restoreContextClassloader();
0:         Assert.assertSame(cl, Thread.currentThread().getContextClassLoader());
1:     }
1: }
============================================================================