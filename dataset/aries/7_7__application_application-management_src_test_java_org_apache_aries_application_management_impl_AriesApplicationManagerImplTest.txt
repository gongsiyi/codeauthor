1:5297b83: /*
1:5297b83:  * Licensed to the Apache Software Foundation (ASF) under one
1:5297b83:  * or more contributor license agreements.  See the NOTICE file
1:5297b83:  * distributed with this work for additional information
1:5297b83:  * regarding copyright ownership.  The ASF licenses this file
1:5297b83:  * to you under the Apache License, Version 2.0 (the
1:5297b83:  * "License"); you may not use this file except in compliance
1:5297b83:  * with the License.  You may obtain a copy of the License at
1:5297b83:  *
1:5297b83:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5297b83:  *
1:5297b83:  * Unless required by applicable law or agreed to in writing,
1:5297b83:  * software distributed under the License is distributed on an
1:5297b83:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:5297b83:  * KIND, either express or implied.  See the License for the
1:5297b83:  * specific language governing permissions and limitations
1:5297b83:  * under the License.
1:5297b83:  */
1:7e2bed4: 
1:5297b83: package org.apache.aries.application.management.impl;
1:7e2bed4: 
1:a1f07b5: import static org.junit.Assert.assertEquals;
1:a1f07b5: import static org.junit.Assert.assertNotNull;
1:a1f07b5: import static org.junit.Assert.assertTrue;
1:a1f07b5: import static org.junit.Assert.fail;
1:7e2bed4: 
1:5297b83: import java.io.File;
1:7e2bed4: import java.io.FileInputStream;
1:ffe1828: import java.io.IOException;
1:7e2bed4: import java.io.InputStream;
1:5297b83: import java.lang.reflect.Field;
1:5297b83: import java.util.ArrayList;
1:5258897: import java.util.Collection;
1:8151f8c: import java.util.Collections;
1:5258897: import java.util.HashMap;
1:5297b83: import java.util.HashSet;
1:5297b83: import java.util.List;
1:5258897: import java.util.Map;
1:5297b83: import java.util.Set;
1:5258897: import java.util.jar.Attributes;
1:7e2bed4: import java.util.jar.Manifest;
1:7e2bed4: 
1:5297b83: import org.apache.aries.application.ApplicationMetadata;
1:beeb1d7: import org.apache.aries.application.ApplicationMetadataFactory;
1:5297b83: import org.apache.aries.application.Content;
1:5297b83: import org.apache.aries.application.DeploymentContent;
1:5297b83: import org.apache.aries.application.DeploymentMetadata;
1:5297b83: import org.apache.aries.application.DeploymentMetadataFactory;
1:a1f07b5: import org.apache.aries.application.ServiceDeclaration;
1:beeb1d7: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
1:5297b83: import org.apache.aries.application.impl.ContentImpl;
1:5297b83: import org.apache.aries.application.impl.DeploymentContentImpl;
1:5297b83: import org.apache.aries.application.impl.DeploymentMetadataFactoryImpl;
1:5297b83: import org.apache.aries.application.management.AriesApplication;
1:8151f8c: import org.apache.aries.application.management.AriesApplicationContext;
1:5297b83: import org.apache.aries.application.management.BundleInfo;
1:ffe1828: import org.apache.aries.application.management.ManagementException;
1:bfd7c4d: import org.apache.aries.application.management.ResolveConstraint;
1:e328c1b: import org.apache.aries.application.management.ResolverException;
1:8151f8c: import org.apache.aries.application.management.UpdateException;
1:89f804e: import org.apache.aries.application.management.spi.convert.BundleConversion;
1:89f804e: import org.apache.aries.application.management.spi.convert.BundleConverter;
1:89f804e: import org.apache.aries.application.management.spi.convert.ConversionException;
1:89f804e: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1:89f804e: import org.apache.aries.application.management.spi.resolve.DeploymentManifestManager;
1:89f804e: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1:89f804e: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
1:6fe82e7: import org.apache.aries.application.modelling.DeployedBundles;
1:5258897: import org.apache.aries.application.modelling.ModelledResource;
1:5258897: import org.apache.aries.application.utils.AppConstants;
1:ba73ed7: import org.apache.aries.application.utils.management.SimpleBundleInfo;
1:8151f8c: import org.apache.aries.unittest.mocks.MethodCall;
1:8151f8c: import org.apache.aries.unittest.mocks.Skeleton;
1:5297b83: import org.apache.aries.unittest.utils.EbaUnitTestUtils;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:910fec0: import org.apache.aries.util.manifest.BundleManifest;
1:ffe1828: import org.junit.Before;
1:5297b83: import org.junit.BeforeClass;
1:5297b83: import org.junit.Test;
1:0a7ee24: import org.osgi.framework.Constants;
1:5297b83: import org.osgi.framework.Version;
1:7e2bed4: 
1:ffe1828: /**
1:ffe1828:  * Initial, simple test that creates and stores an AriesApplication. No
1:ffe1828:  * BundleConverters are used in this test. 
1:ffe1828:  */
1:5297b83: public class AriesApplicationManagerImplTest {
1:ffe1828:   
1:5258897:   static class DummyDMManager implements DeploymentManifestManager {
1:5258897: 
1:5258897:     private AriesApplicationResolver resolver;
2:5258897:     public Manifest generateDeploymentManifest(AriesApplication app,
1:5258897:         ResolveConstraint... constraints) throws ResolverException
1:5258897:     {
1:5258897:       
1:5258897:       Map<String, String> deploymentMap = new HashMap<String, String>();
1:5258897:       Set<BundleInfo> byValueBundles = app.getBundleInfo();
1:5258897:       StringBuilder deployedContents = new StringBuilder();
1:5258897:       boolean beginning= true;
1:5258897:       for (BundleInfo bundle: byValueBundles) {
1:5258897:         if (!!!beginning) {
1:5258897:           deployedContents.append(",");
1:5258897:         }
1:5258897:         deployedContents.append(bundle.getSymbolicName()+";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" +  bundle.getVersion());
1:5258897:         beginning = false;
1:5258897:       }
1:5258897:       deploymentMap.put(AppConstants.DEPLOYMENT_CONTENT, deployedContents.toString());
1:5258897:       // fake the provision bundle now.
1:5258897:       String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
1:5258897:       File persistenceLibrary = new File (persistenceLibraryLocation);
1:5258897:       BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
1:2901df4:       
1:5258897:       deploymentMap.put(AppConstants.DEPLOYMENT_PROVISION_BUNDLE, mf.getSymbolicName()+";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + mf.getVersion());
1:5258897:       deploymentMap.put(AppConstants.APPLICATION_SYMBOLIC_NAME, app.getApplicationMetadata().getApplicationSymbolicName());
1:6fe82e7:      
1:5258897:       deploymentMap.put(AppConstants.APPLICATION_VERSION, app.getApplicationMetadata().getApplicationVersion().toString());
1:5258897:       
1:5258897:       
1:5258897:       Manifest man = new Manifest();
1:5258897:       Attributes att = man.getMainAttributes();
1:5258897:       att.putValue(Attributes.Name.MANIFEST_VERSION.toString(), AppConstants.MANIFEST_VERSION);
1:5258897:       for (Map.Entry<String, String> entry : deploymentMap.entrySet()) {
1:5258897:         att.putValue(entry.getKey(),  entry.getValue());
1:5258897:       }
1:5258897:       return man;
1:5258897:     }
1:5258897: 
1:5258897:     public void setResolver(AriesApplicationResolver resolver) {
1:5258897:       this.resolver = resolver;
1:5258897:     }
1:5258897: 
1:5258897:     public AriesApplicationResolver getResolver()
1:5258897:     {
1:5258897:       
1:5258897:       return resolver;
1:5258897:     }
1:a1f07b5: 
1:a1f07b5:     public Manifest generateDeploymentManifest(String appName,
1:6fe82e7:         String appVersion, Collection<Content> appContent,
1:6fe82e7:         Collection<ModelledResource> byValueBundles,
1:6fe82e7:         Collection<Content> useBundleSet, Collection<Content> otherBundles,
1:6fe82e7:         Collection<ServiceDeclaration> appImportServices)
1:6fe82e7:         throws ResolverException {
1:6fe82e7:       return null;
1:6fe82e7:     }
1:6fe82e7: 
1:59044ac:     public DeployedBundles generateDeployedBundles(ApplicationMetadata appMetadata,
1:2e105c1:         Collection<ModelledResource> byValueBundles, Collection<Content> otherBundles)
1:59044ac:         throws ResolverException {
1:59044ac:       // Not required or used in this test
1:59044ac:       return null;
1:59044ac:     }
1:59044ac: 
1:6fe82e7:     public Manifest generateDeploymentManifest(String appSymbolicName,
1:6fe82e7:         String appVersion, DeployedBundles deployedBundles)
1:6fe82e7:         throws ResolverException {
2:6fe82e7:       // Not required or used in this test
1:6fe82e7:       return null;
1:6fe82e7:     }
1:a1f07b5:   }
1:5258897: 
1:ffe1828:   static class DummyResolver implements AriesApplicationResolver {
1:5297b83:     Set<BundleInfo> nextResult;
1:bfd7c4d:     public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) {
1:ad46961:       Set<BundleInfo> info = new HashSet<BundleInfo>(nextResult);
1:5258897:       
1:ad46961:       info.addAll(app.getBundleInfo());
1:5258897:       
1:ad46961:       return info;
1:5258897:     } 
1:5297b83:     void setNextResult (Set<BundleInfo> r) { 
1:5297b83:       nextResult = r;
1:5258897:     }
1:55a9b56:     public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion)
1:5258897:     {
1:a1f07b5:       return null;
1:ffe1828:     }
1:2901df4:     public Collection<ModelledResource> resolve(String appName, String appVersion,
1:5258897:         Collection<ModelledResource> byValueBundles, Collection<Content> inputs)
1:2901df4:         throws ResolverException
1:2901df4:     {
1:2901df4:       
1:2901df4:       return byValueBundles;
1:2901df4:     }
1:cce7f7c:     @Override
1:cce7f7c:     public Collection<ModelledResource> resolveInIsolation(String appName,
1:cce7f7c:             String appVersion, Collection<ModelledResource> byValueBundles,
1:cce7f7c:             Collection<Content> inputs) throws ResolverException {
1:cce7f7c:         return null;
1:cce7f7c:     }
1:5258897:   }
1:2901df4:   
1:ffe1828:   static class DummyLocalPlatform implements LocalPlatform {
1:ffe1828:     public File getTemporaryDirectory() throws IOException {
1:ffe1828:       File f = File.createTempFile("ebaTmp", null);
1:ffe1828:       f.delete();
1:ffe1828:       f.mkdir();
1:ffe1828:       return f;
1:ffe1828:     } 
1:ffe1828:     public File getTemporaryFile () throws IOException { 
1:ffe1828:       // Not used
1:ffe1828:       return File.createTempFile("ebaTmp", null);
1:ffe1828:     }
1:5297b83:   }
1:5258897:   
1:7e2bed4:   static class DummyConverter implements BundleConverter {
1:5258897: 
1:7e2bed4: 	public BundleConversion convert(IDirectory parentEba, IFile toBeConverted)
1:7e2bed4: 			throws ConversionException {
1:7e2bed4: 		if (toBeConverted.getName().equals("helloWorld.war")) {
1:7e2bed4: 			InputStream is = null;
1:7e2bed4:             try {
1:7e2bed4:             	is = new FileInputStream(new File("../src/test/resources/conversion/MANIFEST.MF"));
1:7e2bed4:             	Manifest warManifest = new Manifest(is);           
1:0a7ee24:             	final File convertedFile = new File("./ariesApplicationManagerImplTest/conversion/helloWorld.war");
1:0a7ee24:             	IOUtils.jarUp(new File("../src/test/resources/conversion/conversion.eba/helloWorld.war"), convertedFile, warManifest);            
1:7e2bed4:                 final String location = toBeConverted.toString();                
1:7e2bed4:             	return new BundleConversion() {
1:5258897: 
1:c70a567: 					public BundleInfo getBundleInfo() throws IOException {
1:c70a567: 						return new SimpleBundleInfo(BundleManifest.fromBundle(convertedFile), location);
1:7e2bed4: 					}
1:5258897: 
1:7e2bed4: 					public InputStream getInputStream() throws IOException {
1:0a7ee24: 						return new FileInputStream(convertedFile);
1:7e2bed4: 					}
1:5258897:                 	
1:7e2bed4:                 };
1:7e2bed4:             } catch (IOException e) {
1:7e2bed4:             	e.printStackTrace();                
1:7e2bed4:             } finally {
1:7e2bed4:             	try {
1:7e2bed4:             	if (is != null)
1:7e2bed4:             		is.close();
1:7e2bed4:             	} catch (Exception e) {
1:7e2bed4:             		e.printStackTrace();
1:7e2bed4:             	}
1:7e2bed4:             }
1:7e2bed4:         }
1:5258897: 
1:5258897:         return null;
1:7e2bed4:     }
1:5258897: 	
1:5258897: 	  
1:7e2bed4:   }
1:7e2bed4:   
1:7e2bed4: 
1:7e2bed4: 
1:bbb186b:   static final String TEST_EBA = "./ariesApplicationManagerImplTest/test.eba";
1:7e2bed4:   static final String CONVERSION_EBA = "./ariesApplicationManagerImplTest/conversion.eba";
1:5297b83:   @BeforeClass 
1:ffe1828:   public static void preTest() throws Exception { 
1:7e2bed4:     new File("ariesApplicationManagerImplTest/conversion").mkdirs();
1:bbb186b:     EbaUnitTestUtils.createEba("../src/test/resources/bundles/test.eba", TEST_EBA);
1:5297b83:     File src = new File ("../src/test/resources/bundles/repository/a.handy.persistence.library.jar");
1:5297b83:     File dest = new File ("ariesApplicationManagerImplTest/a.handy.persistence.library.jar");
1:5297b83:     IOUtils.zipUp(src, dest);
1:7e2bed4:     EbaUnitTestUtils.createEba("../src/test/resources/conversion/conversion.eba", CONVERSION_EBA);
1:5297b83:   }
1:7e2bed4:   
1:ffe1828:   AriesApplicationManagerImpl _appMgr;
1:beeb1d7:   ApplicationMetadataFactory _appMetaFactory;
1:ffe1828:   DummyResolver _resolver;
1:7e2bed4:   DummyConverter _converter;
1:5258897:   DummyDMManager _dmMgr;
1:ffe1828:   @Before
1:ffe1828:   public void setup() { 
1:ffe1828:     _appMgr = new AriesApplicationManagerImpl ();
1:beeb1d7:     _appMetaFactory = new ApplicationMetadataFactoryImpl ();
1:7e2bed4: 
1:5297b83:     DeploymentMetadataFactory dmf = new DeploymentMetadataFactoryImpl();
1:7e2bed4:     _converter = new DummyConverter();
1:5297b83:     List<BundleConverter> bundleConverters = new ArrayList<BundleConverter>();
1:7e2bed4:     bundleConverters.add(_converter);
1:5258897:     _resolver = new DummyResolver(); 
1:5258897:     _dmMgr = new DummyDMManager();
1:5258897:     _dmMgr.setResolver(_resolver);
1:beeb1d7:     _appMgr.setApplicationMetadataFactory(_appMetaFactory);
1:ffe1828:     _appMgr.setDeploymentMetadataFactory(dmf);
1:ffe1828:     _appMgr.setBundleConverters(bundleConverters);
1:5258897:     _appMgr.setDeploymentManifestManager(_dmMgr);
1:ffe1828:     _appMgr.setLocalPlatform(new DummyLocalPlatform());
1:ffe1828:   }
1:7e2bed4:   
1:ffe1828:   @Test
1:ffe1828:   public void testCreate() throws Exception { 
1:ffe1828:     AriesApplication app = createApplication (TEST_EBA);
1:ffe1828:     
1:5297b83:     ApplicationMetadata appMeta = app.getApplicationMetadata();
1:5297b83:     assertEquals (appMeta.getApplicationName(), "Test application");
1:5297b83:     assertEquals (appMeta.getApplicationSymbolicName(), "org.apache.aries.application.management.test");
1:5297b83:     assertEquals (appMeta.getApplicationVersion(), new Version("1.0"));
1:5297b83:     List<Content> appContent = appMeta.getApplicationContents();
1:7e2bed4:     assertEquals (appContent.size(), 2);
1:5297b83:     Content fbw = new ContentImpl("foo.bar.widgets;version=1.0.0");
1:5297b83:     Content mbl = new ContentImpl("my.business.logic;version=1.0.0");
1:5297b83:     assertTrue (appContent.contains(fbw));
1:5297b83:     assertTrue (appContent.contains(mbl));
1:7e2bed4:     
1:5297b83:     DeploymentMetadata dm = app.getDeploymentMetadata();
1:5297b83:     List<DeploymentContent> dcList = dm.getApplicationDeploymentContents();
1:ffe1828: 
1:ad46961:     assertEquals (2, dcList.size());
1:ad46961:     DeploymentContent dc1 = new DeploymentContentImpl ("foo.bar.widgets;deployed-version=1.1.0");
1:ad46961:     DeploymentContent dc2 = new DeploymentContentImpl ("my.business.logic;deployed-version=1.1.0");
1:5297b83:     DeploymentContent dc3 = new DeploymentContentImpl ("a.handy.persistence.library;deployed-version=1.1.0");
1:5297b83:     assertTrue (dcList.contains(dc1));
1:5297b83:     assertTrue (dcList.contains(dc2));
1:ffe1828:     
1:ad46961:     dcList = dm.getApplicationProvisionBundles();
14:5297b83:     
1:ad46961:     assertEquals(1, dcList.size());
1:5297b83:     assertTrue (dcList.contains(dc3));
1:ffe1828: 
1:5297b83:   }
1:5297b83:   
1:ffe1828:   @Test
1:7e2bed4:   public void testCreateAndConversion() throws Exception {
1:7e2bed4: 	  	AriesApplication app = createApplication (CONVERSION_EBA);	    
1:7e2bed4: 	    ApplicationMetadata appMeta = app.getApplicationMetadata();	    
1:7e2bed4: 	    assertEquals (appMeta.getApplicationName(), "conversion.eba");	   
1:7e2bed4: 	    assertEquals (appMeta.getApplicationSymbolicName(), "conversion.eba");	    
1:7e2bed4: 	    assertEquals (appMeta.getApplicationVersion(), new Version("0.0"));	    
1:7e2bed4: 	    List<Content> appContent = appMeta.getApplicationContents();
1:0a7ee24: 	    assertEquals (2, appContent.size());
1:7e2bed4: 	    Content fbw = new ContentImpl("hello.world.jar;version=\"[1.1.0, 1.1.0]\"");
1:7e2bed4: 	    Content mbl = new ContentImpl("helloWorld.war;version=\"[0.0.0, 0.0.0]\"");
1:7e2bed4: 	    assertTrue (appContent.contains(fbw));
1:7e2bed4: 	    assertTrue (appContent.contains(mbl));
1:7e2bed4: 	    
1:7e2bed4: 	    DeploymentMetadata dm = app.getDeploymentMetadata();
1:7e2bed4: 	    List<DeploymentContent> dcList = dm.getApplicationDeploymentContents();
1:7e2bed4: 
1:7e2bed4: 	    assertEquals (2, dcList.size());
1:7e2bed4: 	    DeploymentContent dc1 = new DeploymentContentImpl ("hello.world.jar;deployed-version=1.1.0");
1:7e2bed4: 	    DeploymentContent dc2 = new DeploymentContentImpl ("helloWorld.war;deployed-version=0.0.0");
1:7e2bed4: 	    DeploymentContent dc3 = new DeploymentContentImpl ("a.handy.persistence.library;deployed-version=1.1.0");
1:7e2bed4: 	    assertTrue (dcList.contains(dc1));
1:7e2bed4: 	    assertTrue (dcList.contains(dc2));
1:7e2bed4: 	    
1:7e2bed4: 	    dcList = dm.getApplicationProvisionBundles();
1:7e2bed4: 	    
1:7e2bed4: 	    assertEquals(1, dcList.size());
1:7e2bed4: 	    assertTrue (dcList.contains(dc3));
1:5297b83: 	    
1:0a7ee24: 	    assertEquals(2, app.getBundleInfo().size());
1:0a7ee24: 	    BundleInfo info;
1:0a7ee24: 	    info = findBundleInfo(app.getBundleInfo(), "hello.world.jar");
1:0a7ee24: 	    assertNotNull(info);
1:0a7ee24: 	    assertEquals("HelloWorldJar", info.getHeaders().get(Constants.BUNDLE_NAME));
1:5297b83: 	    
1:0a7ee24: 	    info = findBundleInfo(app.getBundleInfo(), "helloWorld.war");
1:0a7ee24:         assertNotNull(info);
1:0a7ee24:         assertEquals("helloWorld.war", info.getHeaders().get(Constants.BUNDLE_NAME));
1:0a7ee24:         assertEquals("/test", info.getHeaders().get("Bundle-ContextPath"));
1:7e2bed4:   }
1:5297b83:   
1:0a7ee24:   private BundleInfo findBundleInfo(Set<BundleInfo> infos, String symbolicName) {
1:0a7ee24:       for (BundleInfo info : infos) {
1:0a7ee24:           if (symbolicName.equals(info.getSymbolicName())) {
1:0a7ee24:               return info;
1:5297b83:           }
1:5297b83:       }
1:7e2bed4:       return null;
3:0a7ee24:   }
1:5297b83:   
1:7e2bed4:   @Test
1:ffe1828:   public void testStoreAndReload() throws Exception { 
1:ffe1828:     AriesApplication app = createApplication (TEST_EBA);
1:ffe1828:     File dest = new File ("ariesApplicationManagerImplTest/stored.eba");
1:ffe1828:     app.store(dest);
1:ffe1828:     
1:ffe1828:     /* Dest should be a zip file with four entries:
1:ffe1828:      *  /foo.bar.widgets.jar
1:ffe1828:      *  /my.business.logic.jar
1:ffe1828:      *  /META-INF/APPLICATION.MF
1:ffe1828:      *  /META-INF/DEPLOYMENT.MF
1:ffe1828:      */
1:ffe1828:     
1:ffe1828:     IDirectory storedEba = FileSystem.getFSRoot(dest);
1:ffe1828:     assertNotNull (storedEba);
1:ffe1828:     assertEquals (storedEba.listFiles().size(), 3);
1:ffe1828:     IFile ifile = storedEba.getFile("META-INF/APPLICATION.MF");
1:ffe1828:     assertNotNull (ifile);
1:ffe1828:     ifile = storedEba.getFile ("META-INF/DEPLOYMENT.MF");
1:ffe1828:     assertNotNull (ifile);
1:ffe1828:     ifile = storedEba.getFile ("foo.bar.widgets.jar");
1:ffe1828:     assertNotNull (ifile);
1:ffe1828:     ifile = storedEba.getFile ("my.business.logic.jar");
1:ffe1828:     assertNotNull (ifile);
1:ffe1828:     
1:ffe1828:     AriesApplication newApp = _appMgr.createApplication(storedEba);
1:ffe1828:     DeploymentMetadata dm = newApp.getDeploymentMetadata();
1:ad46961:     assertEquals (2, dm.getApplicationDeploymentContents().size());
1:ad46961:     assertEquals(1, dm.getApplicationProvisionBundles().size());
1:ffe1828:     assertEquals (dm.getApplicationSymbolicName(), app.getApplicationMetadata().getApplicationSymbolicName());
1:ffe1828:     assertEquals (dm.getApplicationVersion(), app.getApplicationMetadata().getApplicationVersion());
1:ffe1828:   }
1:ffe1828:   
1:8151f8c:   @Test
1:8151f8c:   public void testUpdate() throws Exception {
1:8151f8c:     AriesApplication app = createApplication(TEST_EBA);
1:8151f8c: 
1:8151f8c:     DeploymentMetadata depMf = createUpdateDepMf();
1:8151f8c:     
1:8151f8c:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:8151f8c:     _appMgr.setApplicationContextManager(ctxMgr);
1:8151f8c: 
1:8151f8c:     _appMgr.update(app, depMf);
1:8151f8c:     
1:8151f8c:     assertTrue("Deployment.mf should have been updated", app.getDeploymentMetadata() == depMf);
1:8151f8c:   }
1:8151f8c:   
1:8151f8c:   @Test(expected=IllegalArgumentException.class)
1:8151f8c:   public void testUpdateWithIncorrectDepMf() throws Exception
1:8151f8c:   {
1:8151f8c:     AriesApplication app = createApplication(TEST_EBA);
1:8151f8c: 
1:8151f8c:     DeploymentMetadata depMf = Skeleton.newMock(DeploymentMetadata.class);
1:8151f8c:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationSymbolicName"), "random.app");
1:8151f8c:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationVersion"), new Version("1.0.0"));
1:8151f8c:     
1:8151f8c:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:8151f8c:     _appMgr.setApplicationContextManager(ctxMgr);
1:8151f8c: 
1:8151f8c:     _appMgr.update(app, depMf);    
1:8151f8c:   }
1:8151f8c:   
1:8151f8c:   @Test
1:8151f8c:   public void testFailedUpdate() throws Exception {
1:8151f8c:     AriesApplication app = createApplication(TEST_EBA);
1:8151f8c: 
1:8151f8c:     DeploymentMetadata depMf = createUpdateDepMf();
1:8151f8c:     
1:8151f8c:     AriesApplicationContext ctx = Skeleton.newMock(AriesApplicationContext.class);
1:8151f8c:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(AriesApplicationContext.class, "getApplication"), app);
1:8151f8c:     
1:8151f8c:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:8151f8c:     Skeleton.getSkeleton(ctxMgr).setReturnValue(
1:8151f8c:         new MethodCall(AriesApplicationContextManager.class, "getApplicationContexts"), 
1:8151f8c:         Collections.singleton(ctx));    
1:8151f8c:     
1:8151f8c:     Skeleton.getSkeleton(ctxMgr).setThrows(
1:8151f8c:         new MethodCall(AriesApplicationContextManager.class, "update", AriesApplication.class, DeploymentMetadata.class), 
1:8151f8c:         new UpdateException("", null, false, null));
1:8151f8c:     
1:8151f8c:     _appMgr.setApplicationContextManager(ctxMgr);
1:8151f8c: 
1:8151f8c:     try {
1:8151f8c:       _appMgr.update(app, depMf);
1:8151f8c:       fail("Update should have failed.");
1:8151f8c:     } catch (UpdateException e) {
1:8151f8c:       assertTrue("Deployment.mf should have been updated", app.getDeploymentMetadata() == depMf);
1:8151f8c:     }
1:8151f8c:   }
1:8151f8c:   
1:8151f8c:   @Test
1:8151f8c:   public void testRolledbackUpdate() throws Exception {
1:8151f8c:     AriesApplication app = createApplication(TEST_EBA);
1:8151f8c: 
1:8151f8c:     DeploymentMetadata depMf = createUpdateDepMf();
1:8151f8c:     DeploymentMetadata oldMf = app.getDeploymentMetadata();
1:8151f8c:     
1:8151f8c:     AriesApplicationContext ctx = Skeleton.newMock(AriesApplicationContext.class);
1:8151f8c:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(AriesApplicationContext.class, "getApplication"), app);
1:8151f8c:     
1:8151f8c:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:8151f8c:     Skeleton.getSkeleton(ctxMgr).setReturnValue(
1:8151f8c:         new MethodCall(AriesApplicationContextManager.class, "getApplicationContexts"), 
1:8151f8c:         Collections.singleton(ctx));    
1:8151f8c:     
1:8151f8c:     Skeleton.getSkeleton(ctxMgr).setThrows(
1:8151f8c:         new MethodCall(AriesApplicationContextManager.class, "update", AriesApplication.class, DeploymentMetadata.class), 
1:8151f8c:         new UpdateException("", null, true, null));
1:8151f8c:     
1:8151f8c:     _appMgr.setApplicationContextManager(ctxMgr);
1:8151f8c: 
1:8151f8c:     try {
1:8151f8c:       _appMgr.update(app, depMf);
1:8151f8c:       fail("Update should have failed.");
1:8151f8c:     } catch (UpdateException e) {
1:8151f8c:       assertTrue("Deployment.mf should have been rolled back to the old", app.getDeploymentMetadata() == oldMf);
1:8151f8c:     }
1:8151f8c:   }
1:8151f8c:   
1:8151f8c:   private DeploymentMetadata createUpdateDepMf()
1:8151f8c:   {
1:8151f8c:     DeploymentMetadata depMf = Skeleton.newMock(DeploymentMetadata.class);
1:8151f8c:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationSymbolicName"), "org.apache.aries.application.management.test");
1:8151f8c:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationVersion"), new Version("1.0.0"));
1:8151f8c: 
1:8151f8c:     return depMf;
1:8151f8c:   }
1:8151f8c:   
1:e328c1b:   private AriesApplication createApplication (String fileName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, ManagementException, ResolverException {
1:ffe1828:     // This next block is a very long winded way of constructing a BundleInfoImpl
1:ffe1828:     // against the existing (BundleManifest bm, String location) constructor. If we 
1:ffe1828:     // find we need a String-based BundleInfoImpl constructor for other reasons, 
1:ffe1828:     // we could change to using it here. 
1:ffe1828:     Set<BundleInfo> nextResolverResult = new HashSet<BundleInfo>();
1:ffe1828:     String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
1:ffe1828:     File persistenceLibrary = new File (persistenceLibraryLocation);
1:ffe1828:     BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
1:c70a567:     BundleInfo resolvedPersistenceLibrary = new SimpleBundleInfo(mf, persistenceLibraryLocation); 
1:ba73ed7:     Field v = SimpleBundleInfo.class.getDeclaredField("_version");
1:ffe1828:     v.setAccessible(true);
1:ffe1828:     v.set(resolvedPersistenceLibrary, new Version("1.1.0"));
1:ffe1828:     nextResolverResult.add(resolvedPersistenceLibrary);
1:ffe1828:     _resolver.setNextResult(nextResolverResult);
1:ffe1828:     
1:7e2bed4:     IDirectory testEba = FileSystem.getFSRoot(new File(fileName));    
1:ffe1828:     AriesApplication app = _appMgr.createApplication(testEba);
1:e328c1b:     app = _appMgr.resolve(app);
1:ffe1828:     return app;
1:ffe1828:   }
1:5297b83: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:cce7f7c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Collection<ModelledResource> resolveInIsolation(String appName,
1:             String appVersion, Collection<ModelledResource> byValueBundles,
1:             Collection<Content> inputs) throws ResolverException {
1:         return null;
1:     }
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
1: import org.apache.aries.util.manifest.BundleManifest;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.convert.BundleConversion;
1: import org.apache.aries.application.management.spi.convert.BundleConverter;
1: import org.apache.aries.application.management.spi.convert.ConversionException;
1: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1: import org.apache.aries.application.management.spi.resolve.DeploymentManifestManager;
1: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationContextManager;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.UpdateException;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testUpdate() throws Exception {
1:     AriesApplication app = createApplication(TEST_EBA);
1: 
1:     DeploymentMetadata depMf = createUpdateDepMf();
1:     
1:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:     _appMgr.setApplicationContextManager(ctxMgr);
1: 
1:     _appMgr.update(app, depMf);
1:     
1:     assertTrue("Deployment.mf should have been updated", app.getDeploymentMetadata() == depMf);
1:   }
1:   
1:   @Test(expected=IllegalArgumentException.class)
1:   public void testUpdateWithIncorrectDepMf() throws Exception
1:   {
1:     AriesApplication app = createApplication(TEST_EBA);
1: 
1:     DeploymentMetadata depMf = Skeleton.newMock(DeploymentMetadata.class);
1:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationSymbolicName"), "random.app");
1:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationVersion"), new Version("1.0.0"));
1:     
1:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:     _appMgr.setApplicationContextManager(ctxMgr);
1: 
1:     _appMgr.update(app, depMf);    
1:   }
1:   
1:   @Test
1:   public void testFailedUpdate() throws Exception {
1:     AriesApplication app = createApplication(TEST_EBA);
1: 
1:     DeploymentMetadata depMf = createUpdateDepMf();
1:     
1:     AriesApplicationContext ctx = Skeleton.newMock(AriesApplicationContext.class);
1:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(AriesApplicationContext.class, "getApplication"), app);
1:     
1:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:     Skeleton.getSkeleton(ctxMgr).setReturnValue(
1:         new MethodCall(AriesApplicationContextManager.class, "getApplicationContexts"), 
1:         Collections.singleton(ctx));    
1:     
1:     Skeleton.getSkeleton(ctxMgr).setThrows(
1:         new MethodCall(AriesApplicationContextManager.class, "update", AriesApplication.class, DeploymentMetadata.class), 
1:         new UpdateException("", null, false, null));
1:     
1:     _appMgr.setApplicationContextManager(ctxMgr);
1: 
1:     try {
1:       _appMgr.update(app, depMf);
1:       fail("Update should have failed.");
1:     } catch (UpdateException e) {
1:       assertTrue("Deployment.mf should have been updated", app.getDeploymentMetadata() == depMf);
1:     }
1:   }
1:   
1:   @Test
1:   public void testRolledbackUpdate() throws Exception {
1:     AriesApplication app = createApplication(TEST_EBA);
1: 
1:     DeploymentMetadata depMf = createUpdateDepMf();
1:     DeploymentMetadata oldMf = app.getDeploymentMetadata();
1:     
1:     AriesApplicationContext ctx = Skeleton.newMock(AriesApplicationContext.class);
1:     Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(AriesApplicationContext.class, "getApplication"), app);
1:     
1:     AriesApplicationContextManager ctxMgr = Skeleton.newMock(AriesApplicationContextManager.class);
1:     Skeleton.getSkeleton(ctxMgr).setReturnValue(
1:         new MethodCall(AriesApplicationContextManager.class, "getApplicationContexts"), 
1:         Collections.singleton(ctx));    
1:     
1:     Skeleton.getSkeleton(ctxMgr).setThrows(
1:         new MethodCall(AriesApplicationContextManager.class, "update", AriesApplication.class, DeploymentMetadata.class), 
1:         new UpdateException("", null, true, null));
1:     
1:     _appMgr.setApplicationContextManager(ctxMgr);
1: 
1:     try {
1:       _appMgr.update(app, depMf);
1:       fail("Update should have failed.");
1:     } catch (UpdateException e) {
1:       assertTrue("Deployment.mf should have been rolled back to the old", app.getDeploymentMetadata() == oldMf);
1:     }
1:   }
1:   
1:   private DeploymentMetadata createUpdateDepMf()
1:   {
1:     DeploymentMetadata depMf = Skeleton.newMock(DeploymentMetadata.class);
1:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationSymbolicName"), "org.apache.aries.application.management.test");
1:     Skeleton.getSkeleton(depMf).setReturnValue(new MethodCall(DeploymentMetadata.class, "getApplicationVersion"), new Version("1.0.0"));
1: 
1:     return depMf;
1:   }
1:   
author:Holly Cummins
-------------------------------------------------------------------------------
commit:17170a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:59044ac
/////////////////////////////////////////////////////////////////////////
1:     public DeployedBundles generateDeployedBundles(ApplicationMetadata appMetadata,
0:             Collection<ModelledResource> byValueBundles, Collection<Content> otherBundles, PlatformRepository platformRepository)
1:             throws ResolverException {
1:           // Not required or used in this test
1:           return null;
1:         }
1: 
commit:2901df4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.spi.repository.PlatformRepository;
/////////////////////////////////////////////////////////////////////////
1:     
1: 	   public Collection<ModelledResource> resolve(String appName, String appVersion,
0: 		       Collection<ModelledResource> byValueBundles, Collection<Content> inputs, PlatformRepository platformRepository)
1: 		       throws ResolverException
1: 		   {
1: 		     
1: 		     return byValueBundles;
1: 		   }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2e105c1
/////////////////////////////////////////////////////////////////////////
0:     public DeployedBundles generateDeployedBundles(ApplicationMetadata appMetadata,
1:         Collection<ModelledResource> byValueBundles, Collection<Content> otherBundles)
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:6fe82e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.DeployedBundles;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public DeployedBundles generateDeployedBundles(String appName,
1:         String appVersion, Collection<Content> appContent,
1:         Collection<ModelledResource> byValueBundles,
1:         Collection<Content> useBundleSet, Collection<Content> otherBundles,
1:         Collection<ServiceDeclaration> appImportServices)
1:         throws ResolverException {
1:       // Not required or used in this test
1:       return null;
1:     }
1: 
1:     public Manifest generateDeploymentManifest(String appSymbolicName,
1:         String appVersion, DeployedBundles deployedBundles)
1:         throws ResolverException {
1:       // Not required or used in this test
1:       return null;
1:     }
commit:a1f07b5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.ServiceDeclaration;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Manifest generateDeploymentManifest(String appName,
0:         String appVersion, Collection<Content> appContent,
0:         Collection<ModelledResource> byValueBundles,
0:         Collection<Content> useBundleSet, Collection<Content> otherBundles,
0:         Collection<ServiceDeclaration> appImportServices)
0:         throws ResolverException {
1:       return null;
1:     }
commit:5258897
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.DeploymentManifestManager;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
1:   static class DummyDMManager implements DeploymentManifestManager {
1: 
1:     private AriesApplicationResolver resolver;
1:     public Manifest generateDeploymentManifest(AriesApplication app,
1:         ResolveConstraint... constraints) throws ResolverException
1:     {
1:       
1:       Map<String, String> deploymentMap = new HashMap<String, String>();
1:       Set<BundleInfo> byValueBundles = app.getBundleInfo();
1:       StringBuilder deployedContents = new StringBuilder();
1:       boolean beginning= true;
1:       for (BundleInfo bundle: byValueBundles) {
1:         if (!!!beginning) {
1:           deployedContents.append(",");
1:         }
1:         deployedContents.append(bundle.getSymbolicName()+";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" +  bundle.getVersion());
1:         beginning = false;
1:       }
1:       deploymentMap.put(AppConstants.DEPLOYMENT_CONTENT, deployedContents.toString());
1:       // fake the provision bundle now.
1:       String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
1:       File persistenceLibrary = new File (persistenceLibraryLocation);
1:       BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
1:       
1:       deploymentMap.put(AppConstants.DEPLOYMENT_PROVISION_BUNDLE, mf.getSymbolicName()+";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + mf.getVersion());
1:       deploymentMap.put(AppConstants.APPLICATION_SYMBOLIC_NAME, app.getApplicationMetadata().getApplicationSymbolicName());
1:      
1:       deploymentMap.put(AppConstants.APPLICATION_VERSION, app.getApplicationMetadata().getApplicationVersion().toString());
1:       
1:       
1:       Manifest man = new Manifest();
1:       Attributes att = man.getMainAttributes();
1:       att.putValue(Attributes.Name.MANIFEST_VERSION.toString(), AppConstants.MANIFEST_VERSION);
1:       for (Map.Entry<String, String> entry : deploymentMap.entrySet()) {
1:         att.putValue(entry.getKey(),  entry.getValue());
1:       }
1:       return man;
1:     }
1: 
1:    
1: 
1:     public Manifest generateDeploymentManifest(AriesApplication app,
0:         Collection<ModelledResource> byValueBundles, Collection<Content> useBundleSet,
0:         Collection<Content> otherBundles) throws ResolverException
1:     {
1:       
1:       return null;
1:     }
1: 
1: 
1:     public void setResolver(AriesApplicationResolver resolver) {
1:       this.resolver = resolver;
1:     }
1: 
1:     public AriesApplicationResolver getResolver()
1:     {
1:       
1:       return resolver;
1:     }
1:     
1:     
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public Collection<ModelledResource> resolve(String appName, String appVersion,
1:         Collection<ModelledResource> byValueBundles, Collection<Content> inputs)
0:         throws ResolverException
0:     {
1:       
0:       return byValueBundles;
1:     }
/////////////////////////////////////////////////////////////////////////
1:   DummyDMManager _dmMgr;
/////////////////////////////////////////////////////////////////////////
1:     _resolver = new DummyResolver(); 
1:     _dmMgr = new DummyDMManager();
1:     _dmMgr.setResolver(_resolver);
1:     _appMgr.setDeploymentManifestManager(_dmMgr);
commit:c70a567
/////////////////////////////////////////////////////////////////////////
1: 					public BundleInfo getBundleInfo() throws IOException {
1: 						return new SimpleBundleInfo(BundleManifest.fromBundle(convertedFile), location);
/////////////////////////////////////////////////////////////////////////
1:     BundleInfo resolvedPersistenceLibrary = new SimpleBundleInfo(mf, persistenceLibraryLocation); 
commit:7e2bed4
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.io.InputStream;
1: import java.util.jar.Manifest;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.BundleConversion;
0: import org.apache.aries.application.management.ConversionException;
/////////////////////////////////////////////////////////////////////////
1:   
1:   static class DummyConverter implements BundleConverter {
1: 
1: 	public BundleConversion convert(IDirectory parentEba, IFile toBeConverted)
1: 			throws ConversionException {
1: 		if (toBeConverted.getName().equals("helloWorld.war")) {
1: 			InputStream is = null;
1:             try {
1:             	is = new FileInputStream(new File("../src/test/resources/conversion/MANIFEST.MF"));
1:             	Manifest warManifest = new Manifest(is);            	
0:             	IOUtils.jarUp(new File("../src/test/resources/conversion/conversion.eba/helloWorld.war"), new File("./ariesApplicationManagerImplTest/conversion/helloWorld.war"), warManifest);
0:             	IOUtils.zipUp(new  File("../src/test/resources/conversion/conversion.eba/helloWorld.jar"), new File("./ariesApplicationManagerImplTest/conversion/helloWorld.jar"));
1:             	
0:             	IOUtils.zipUp(new File("./ariesApplicationManagerImplTest/conversion"), new File("./ariesApplicationManagerImplTest/conversion.eba"));
0:             	final InputStream jarIs = new FileInputStream(new File("./ariesApplicationManagerImplTest/conversion.eba"));            	
1:                 final String location = toBeConverted.toString();                
1:             	return new BundleConversion() {
1: 
0: 					public BundleInfo getBundleInfo(ApplicationMetadataFactory amf) throws IOException {
0: 						return new SimpleBundleInfo(amf, BundleManifest.fromBundle(jarIs), location);
1: 					}
1: 
1: 					public InputStream getInputStream() throws IOException {
0: 						return jarIs;
1: 					}
1:                 	
1:                 };
1:             } catch (IOException e) {
1:             	e.printStackTrace();                
1:             } finally {
1:             	try {
1:             	if (is != null)
1:             		is.close();
1:             	} catch (Exception e) {
1:             		e.printStackTrace();
1:             	}
1:             }
1:         }
1: 
1:         return null;
1:     }
1: 	
1: 	  
1:   }
1:   
1: 
1:   static final String CONVERSION_EBA = "./ariesApplicationManagerImplTest/conversion.eba";
1:     new File("ariesApplicationManagerImplTest/conversion").mkdirs();
1:     EbaUnitTestUtils.createEba("../src/test/resources/conversion/conversion.eba", CONVERSION_EBA);
1:   DummyConverter _converter;
1:     _converter = new DummyConverter();
1:     bundleConverters.add(_converter);
0:     _resolver = new DummyResolver();    
/////////////////////////////////////////////////////////////////////////
1:   public void testCreateAndConversion() throws Exception {
1: 	  	AriesApplication app = createApplication (CONVERSION_EBA);	    
1: 	    ApplicationMetadata appMeta = app.getApplicationMetadata();	    
1: 	    assertEquals (appMeta.getApplicationName(), "conversion.eba");	   
1: 	    assertEquals (appMeta.getApplicationSymbolicName(), "conversion.eba");	    
1: 	    assertEquals (appMeta.getApplicationVersion(), new Version("0.0"));	    
1: 	    List<Content> appContent = appMeta.getApplicationContents();
1: 	    assertEquals (appContent.size(), 2);
1: 	    Content fbw = new ContentImpl("hello.world.jar;version=\"[1.1.0, 1.1.0]\"");
1: 	    Content mbl = new ContentImpl("helloWorld.war;version=\"[0.0.0, 0.0.0]\"");
1: 	    assertTrue (appContent.contains(fbw));
1: 	    assertTrue (appContent.contains(mbl));
1: 	    
1: 	    DeploymentMetadata dm = app.getDeploymentMetadata();
1: 	    List<DeploymentContent> dcList = dm.getApplicationDeploymentContents();
1: 
1: 	    assertEquals (2, dcList.size());
1: 	    DeploymentContent dc1 = new DeploymentContentImpl ("hello.world.jar;deployed-version=1.1.0");
1: 	    DeploymentContent dc2 = new DeploymentContentImpl ("helloWorld.war;deployed-version=0.0.0");
1: 	    DeploymentContent dc3 = new DeploymentContentImpl ("a.handy.persistence.library;deployed-version=1.1.0");
1: 	    assertTrue (dcList.contains(dc1));
1: 	    assertTrue (dcList.contains(dc2));
1: 	    
1: 	    dcList = dm.getApplicationProvisionBundles();
1: 	    
1: 	    assertEquals(1, dcList.size());
1: 	    assertTrue (dcList.contains(dc3));
1:   }
1:   
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:     IDirectory testEba = FileSystem.getFSRoot(new File(fileName));    
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.ApplicationMetadataFactory;
1: import org.apache.aries.application.impl.ApplicationMetadataFactoryImpl;
/////////////////////////////////////////////////////////////////////////
1:   ApplicationMetadataFactory _appMetaFactory;
1:     _appMetaFactory = new ApplicationMetadataFactoryImpl ();
1:     _appMgr.setApplicationMetadataFactory(_appMetaFactory);
/////////////////////////////////////////////////////////////////////////
0:     BundleInfo resolvedPersistenceLibrary = new BundleInfoImpl(_appMetaFactory, mf, persistenceLibraryLocation); 
commit:734efc2
/////////////////////////////////////////////////////////////////////////
0:     BundleInfo resolvedPersistenceLibrary = new BundleInfoImpl(_appMetaMgr, mf, persistenceLibraryLocation); 
commit:be01f1d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.impl.AriesApplicationManagerImpl;
0: import org.apache.aries.application.management.impl.BundleInfoImpl;
commit:ffe1828
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNotNull;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.filesystem.IFile;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.LocalPlatform;
1: import org.apache.aries.application.management.ManagementException;
1: import org.junit.Before;
1: /**
1:  * Initial, simple test that creates and stores an AriesApplication. No
1:  * BundleConverters are used in this test. 
1:  */
1:   static class DummyResolver implements AriesApplicationResolver {
1:   }
1:   
1:   static class DummyLocalPlatform implements LocalPlatform {
1:     public File getTemporaryDirectory() throws IOException {
1:       File f = File.createTempFile("ebaTmp", null);
1:       f.delete();
1:       f.mkdir();
1:       return f;
1:     } 
1:     public File getTemporaryFile () throws IOException { 
1:       // Not used
1:       return File.createTempFile("ebaTmp", null);
1:     }
1:   public static void preTest() throws Exception { 
/////////////////////////////////////////////////////////////////////////
1:   AriesApplicationManagerImpl _appMgr;
0:   ApplicationMetadataManager _appMetaMgr;
1:   DummyResolver _resolver;
1:   
1:   @Before
1:   public void setup() { 
1:     _appMgr = new AriesApplicationManagerImpl ();
0:     _appMetaMgr = new ApplicationMetadataManagerImpl ();
1: 
0:     _resolver = new DummyResolver();
0:     _appMgr.setApplicationMetadataManager(_appMetaMgr);
1:     _appMgr.setDeploymentMetadataFactory(dmf);
1:     _appMgr.setBundleConverters(bundleConverters);
0:     _appMgr.setResolver(_resolver);
1:     _appMgr.setLocalPlatform(new DummyLocalPlatform());
1:   }
1:   
1:   @Test
1:   public void testCreate() throws Exception { 
1:     AriesApplication app = createApplication (TEST_EBA);
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testStoreAndReload() throws Exception { 
1:     AriesApplication app = createApplication (TEST_EBA);
1:     File dest = new File ("ariesApplicationManagerImplTest/stored.eba");
1:     app.store(dest);
1:     
1:     /* Dest should be a zip file with four entries:
1:      *  /foo.bar.widgets.jar
1:      *  /my.business.logic.jar
1:      *  /META-INF/APPLICATION.MF
1:      *  /META-INF/DEPLOYMENT.MF
1:      */
1:     
1:     IDirectory storedEba = FileSystem.getFSRoot(dest);
1:     assertNotNull (storedEba);
1:     assertEquals (storedEba.listFiles().size(), 3);
1:     IFile ifile = storedEba.getFile("META-INF/APPLICATION.MF");
1:     assertNotNull (ifile);
1:     ifile = storedEba.getFile ("META-INF/DEPLOYMENT.MF");
1:     assertNotNull (ifile);
1:     ifile = storedEba.getFile ("foo.bar.widgets.jar");
1:     assertNotNull (ifile);
1:     ifile = storedEba.getFile ("my.business.logic.jar");
1:     assertNotNull (ifile);
1:     
1:     AriesApplication newApp = _appMgr.createApplication(storedEba);
1:     DeploymentMetadata dm = newApp.getDeploymentMetadata();
0:     assertEquals (dm.getApplicationDeploymentContents().size(), 3);
1:     assertEquals (dm.getApplicationSymbolicName(), app.getApplicationMetadata().getApplicationSymbolicName());
1:     assertEquals (dm.getApplicationVersion(), app.getApplicationMetadata().getApplicationVersion());
1:   }
1:   
0:   private AriesApplication createApplication (String fileName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, ManagementException  { 
1:     // This next block is a very long winded way of constructing a BundleInfoImpl
1:     // against the existing (BundleManifest bm, String location) constructor. If we 
1:     // find we need a String-based BundleInfoImpl constructor for other reasons, 
1:     // we could change to using it here. 
1:     Set<BundleInfo> nextResolverResult = new HashSet<BundleInfo>();
1:     String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
1:     File persistenceLibrary = new File (persistenceLibraryLocation);
1:     BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
0:     BundleInfo resolvedPersistenceLibrary = new BundleInfoImpl(mf, persistenceLibraryLocation); 
0:     Field v = BundleInfoImpl.class.getDeclaredField("_version");
1:     v.setAccessible(true);
1:     v.set(resolvedPersistenceLibrary, new Version("1.1.0"));
1:     nextResolverResult.add(resolvedPersistenceLibrary);
1:     _resolver.setNextResult(nextResolverResult);
1:     
0:     IDirectory testEba = FileSystem.getFSRoot(new File(TEST_EBA));
1:     AriesApplication app = _appMgr.createApplication(testEba);
1:     return app;
1:   }
commit:bbb186b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   static final String TEST_EBA = "./ariesApplicationManagerImplTest/test.eba";
1:     EbaUnitTestUtils.createEba("../src/test/resources/bundles/test.eba", TEST_EBA);
/////////////////////////////////////////////////////////////////////////
0:     IDirectory testEba = FileSystem.getFSRoot(new File(TEST_EBA));
commit:456fb6f
/////////////////////////////////////////////////////////////////////////
0:     new File("ariesApplicationManagerImplTest").mkdir();
commit:df501e0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.impl.AriesApplicationManagerImpl;
0: import org.apache.aries.application.management.impl.BundleInfoImpl;
commit:5297b83
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.management.impl;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.lang.reflect.Field;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.DeploymentMetadataFactory;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.impl.ApplicationMetadataManagerImpl;
1: import org.apache.aries.application.impl.ContentImpl;
1: import org.apache.aries.application.impl.DeploymentContentImpl;
1: import org.apache.aries.application.impl.DeploymentMetadataFactoryImpl;
1: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.AriesApplicationResolver;
0: import org.apache.aries.application.management.BundleConverter;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
1: import org.apache.aries.unittest.utils.EbaUnitTestUtils;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: 
1: public class AriesApplicationManagerImplTest {
1:   
0:   class DummyResolver implements AriesApplicationResolver {
1: 
1:     Set<BundleInfo> nextResult;
0:     public Set<BundleInfo> resolve(AriesApplication app) {
0:       return nextResult;
1:     } 
1:     
1:     void setNextResult (Set<BundleInfo> r) { 
1:       nextResult = r;
1:     }
1:     
1:   }
1: 
0:   static String _testEba = "./ariesApplicationManagerImplTest/test.eba";
1:   
1:   @BeforeClass 
0:   public static void setup() throws Exception { 
0:     EbaUnitTestUtils.createEba("../src/test/resources/bundles/test.eba", _testEba);
1:     File src = new File ("../src/test/resources/bundles/repository/a.handy.persistence.library.jar");
1:     File dest = new File ("ariesApplicationManagerImplTest/a.handy.persistence.library.jar");
1:     IOUtils.zipUp(src, dest);
1:   }
1:   
0:   @Test
0:   public void testCreate() throws Exception { 
0:     AriesApplicationManagerImpl appMgr = new AriesApplicationManagerImpl ();
0:     ApplicationMetadataManager appMetaMgr = new ApplicationMetadataManagerImpl ();
1:     DeploymentMetadataFactory dmf = new DeploymentMetadataFactoryImpl();
1:     List<BundleConverter> bundleConverters = new ArrayList<BundleConverter>();
0:     DummyResolver resolver = new DummyResolver();
1:     
0:     appMgr.setApplicationMetadataManager(appMetaMgr);
0:     appMgr.setDeploymentMetadataFactory(dmf);
0:     appMgr.setBundleConverters(bundleConverters);
0:     appMgr.setResolver(resolver);
1:     
0:     // This next block is a very long winded way of constructing a BundleInfoImpl
0:     // against the existing (BundleManifest bm, String location) constructor. If we 
0:     // find we need a String-based BundleInfoImpl constructor for other reasons, 
0:     // we could change to using it here. 
0:     Set<BundleInfo> nextResolverResult = new HashSet<BundleInfo>();
0:     String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
0:     File persistenceLibrary = new File (persistenceLibraryLocation);
0:     BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
0:     BundleInfo resolvedPersistenceLibrary = new BundleInfoImpl(mf, persistenceLibraryLocation); 
0:     Field v = BundleInfoImpl.class.getDeclaredField("_version");
0:     v.setAccessible(true);
0:     v.set(resolvedPersistenceLibrary, new Version("1.1.0"));
0:     nextResolverResult.add(resolvedPersistenceLibrary);
0:     resolver.setNextResult(nextResolverResult);
1:     
0:     IDirectory testEba = FileSystem.getFSRoot(new File(_testEba));
0:     AriesApplication app = appMgr.createApplication(testEba);
1:     
1:     ApplicationMetadata appMeta = app.getApplicationMetadata();
1:     assertEquals (appMeta.getApplicationName(), "Test application");
1:     assertEquals (appMeta.getApplicationSymbolicName(), "org.apache.aries.application.management.test");
1:     assertEquals (appMeta.getApplicationVersion(), new Version("1.0"));
1:     List<Content> appContent = appMeta.getApplicationContents();
0:     assertEquals (appContent.size(), 2);
1:     Content fbw = new ContentImpl("foo.bar.widgets;version=1.0.0");
1:     Content mbl = new ContentImpl("my.business.logic;version=1.0.0");
1:     assertTrue (appContent.contains(fbw));
1:     assertTrue (appContent.contains(mbl));
1:     
1:     DeploymentMetadata dm = app.getDeploymentMetadata();
1:     List<DeploymentContent> dcList = dm.getApplicationDeploymentContents();
1:     
0:     assertEquals (dcList.size(), 3);
0:     DeploymentContent dc1 = new DeploymentContentImpl ("foo.bar.widgets;deployed-version=1.0.0");
0:     DeploymentContent dc2 = new DeploymentContentImpl ("my.business.logic;deployed-version=1.0.0");
1:     DeploymentContent dc3 = new DeploymentContentImpl ("a.handy.persistence.library;deployed-version=1.1.0");
1:     assertTrue (dcList.contains(dc1));
1:     assertTrue (dcList.contains(dc2));
1:     assertTrue (dcList.contains(dc3));
1:   
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:0a7ee24
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
0:             	Manifest warManifest = new Manifest(is);           
1:             	final File convertedFile = new File("./ariesApplicationManagerImplTest/conversion/helloWorld.war");
1:             	IOUtils.jarUp(new File("../src/test/resources/conversion/conversion.eba/helloWorld.war"), convertedFile, warManifest);            
0: 						return new SimpleBundleInfo(amf, BundleManifest.fromBundle(convertedFile), location);
1: 						return new FileInputStream(convertedFile);
/////////////////////////////////////////////////////////////////////////
1: 	    assertEquals (2, appContent.size());
/////////////////////////////////////////////////////////////////////////
0: 	    
1: 	    assertEquals(2, app.getBundleInfo().size());
1: 	    BundleInfo info;
1: 	    info = findBundleInfo(app.getBundleInfo(), "hello.world.jar");
1: 	    assertNotNull(info);
1: 	    assertEquals("HelloWorldJar", info.getHeaders().get(Constants.BUNDLE_NAME));
0: 	    
1: 	    info = findBundleInfo(app.getBundleInfo(), "helloWorld.war");
1:         assertNotNull(info);
1:         assertEquals("helloWorld.war", info.getHeaders().get(Constants.BUNDLE_NAME));
1:         assertEquals("/test", info.getHeaders().get("Bundle-ContextPath"));
1:   }
0:   
1:   private BundleInfo findBundleInfo(Set<BundleInfo> infos, String symbolicName) {
1:       for (BundleInfo info : infos) {
1:           if (symbolicName.equals(info.getSymbolicName())) {
1:               return info;
1:           }
1:       }
0:       return null;
commit:ba73ed7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.management.SimpleBundleInfo;
/////////////////////////////////////////////////////////////////////////
0:     BundleInfo resolvedPersistenceLibrary = new SimpleBundleInfo(_appMetaFactory, mf, persistenceLibraryLocation); 
1:     Field v = SimpleBundleInfo.class.getDeclaredField("_version");
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.management.impl;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.lang.reflect.Field;
0: import java.util.ArrayList;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.DeploymentMetadataFactory;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.impl.ApplicationMetadataManagerImpl;
0: import org.apache.aries.application.impl.ContentImpl;
0: import org.apache.aries.application.impl.DeploymentContentImpl;
0: import org.apache.aries.application.impl.DeploymentMetadataFactoryImpl;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.AriesApplicationResolver;
0: import org.apache.aries.application.management.BundleConverter;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.management.LocalPlatform;
0: import org.apache.aries.application.management.ManagementException;
0: import org.apache.aries.application.management.impl.AriesApplicationManagerImpl;
0: import org.apache.aries.application.management.impl.BundleInfoImpl;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.apache.aries.unittest.utils.EbaUnitTestUtils;
0: import org.junit.Before;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: import org.osgi.framework.Version;
0: 
0: /**
0:  * Initial, simple test that creates and stores an AriesApplication. No
0:  * BundleConverters are used in this test. 
0:  */
0: public class AriesApplicationManagerImplTest {
0:   
0:   static class DummyResolver implements AriesApplicationResolver {
0:     Set<BundleInfo> nextResult;
0:     public Set<BundleInfo> resolve(AriesApplication app) {
0:       return nextResult;
0:     } 
0:     void setNextResult (Set<BundleInfo> r) { 
0:       nextResult = r;
0:     }
0:   }
0:   
0:   static class DummyLocalPlatform implements LocalPlatform {
0:     public File getTemporaryDirectory() throws IOException {
0:       File f = File.createTempFile("ebaTmp", null);
0:       f.delete();
0:       f.mkdir();
0:       return f;
0:     } 
0:     public File getTemporaryFile () throws IOException { 
0:       // Not used
0:       return File.createTempFile("ebaTmp", null);
0:     }
0:   }
0: 
0:   static final String TEST_EBA = "./ariesApplicationManagerImplTest/test.eba";
0:   
0:   @BeforeClass 
0:   public static void preTest() throws Exception { 
0:     new File("ariesApplicationManagerImplTest").mkdir();
0:     EbaUnitTestUtils.createEba("../src/test/resources/bundles/test.eba", TEST_EBA);
0:     File src = new File ("../src/test/resources/bundles/repository/a.handy.persistence.library.jar");
0:     File dest = new File ("ariesApplicationManagerImplTest/a.handy.persistence.library.jar");
0:     IOUtils.zipUp(src, dest);
0:   }
0:   
0:   AriesApplicationManagerImpl _appMgr;
0:   ApplicationMetadataManager _appMetaMgr;
0:   DummyResolver _resolver;
0:   
0:   @Before
0:   public void setup() { 
0:     _appMgr = new AriesApplicationManagerImpl ();
0:     _appMetaMgr = new ApplicationMetadataManagerImpl ();
0: 
0:     DeploymentMetadataFactory dmf = new DeploymentMetadataFactoryImpl();
0:     List<BundleConverter> bundleConverters = new ArrayList<BundleConverter>();
0:     _resolver = new DummyResolver();
0:     
0:     _appMgr.setApplicationMetadataManager(_appMetaMgr);
0:     _appMgr.setDeploymentMetadataFactory(dmf);
0:     _appMgr.setBundleConverters(bundleConverters);
0:     _appMgr.setResolver(_resolver);
0:     _appMgr.setLocalPlatform(new DummyLocalPlatform());
0:   }
0:   
0:   @Test
0:   public void testCreate() throws Exception { 
0:     AriesApplication app = createApplication (TEST_EBA);
0:     
0:     ApplicationMetadata appMeta = app.getApplicationMetadata();
0:     assertEquals (appMeta.getApplicationName(), "Test application");
0:     assertEquals (appMeta.getApplicationSymbolicName(), "org.apache.aries.application.management.test");
0:     assertEquals (appMeta.getApplicationVersion(), new Version("1.0"));
0:     List<Content> appContent = appMeta.getApplicationContents();
0:     assertEquals (appContent.size(), 2);
0:     Content fbw = new ContentImpl("foo.bar.widgets;version=1.0.0");
0:     Content mbl = new ContentImpl("my.business.logic;version=1.0.0");
0:     assertTrue (appContent.contains(fbw));
0:     assertTrue (appContent.contains(mbl));
0:     
0:     DeploymentMetadata dm = app.getDeploymentMetadata();
0:     List<DeploymentContent> dcList = dm.getApplicationDeploymentContents();
0:     
0:     assertEquals (dcList.size(), 3);
0:     DeploymentContent dc1 = new DeploymentContentImpl ("foo.bar.widgets;deployed-version=1.0.0");
0:     DeploymentContent dc2 = new DeploymentContentImpl ("my.business.logic;deployed-version=1.0.0");
0:     DeploymentContent dc3 = new DeploymentContentImpl ("a.handy.persistence.library;deployed-version=1.1.0");
0:     assertTrue (dcList.contains(dc1));
0:     assertTrue (dcList.contains(dc2));
0:     assertTrue (dcList.contains(dc3));
0:   
0:   }
0:   
0:   @Test
0:   public void testStoreAndReload() throws Exception { 
0:     AriesApplication app = createApplication (TEST_EBA);
0:     File dest = new File ("ariesApplicationManagerImplTest/stored.eba");
0:     app.store(dest);
0:     
0:     /* Dest should be a zip file with four entries:
0:      *  /foo.bar.widgets.jar
0:      *  /my.business.logic.jar
0:      *  /META-INF/APPLICATION.MF
0:      *  /META-INF/DEPLOYMENT.MF
0:      */
0:     
0:     IDirectory storedEba = FileSystem.getFSRoot(dest);
0:     assertNotNull (storedEba);
0:     assertEquals (storedEba.listFiles().size(), 3);
0:     IFile ifile = storedEba.getFile("META-INF/APPLICATION.MF");
0:     assertNotNull (ifile);
0:     ifile = storedEba.getFile ("META-INF/DEPLOYMENT.MF");
0:     assertNotNull (ifile);
0:     ifile = storedEba.getFile ("foo.bar.widgets.jar");
0:     assertNotNull (ifile);
0:     ifile = storedEba.getFile ("my.business.logic.jar");
0:     assertNotNull (ifile);
0:     
0:     AriesApplication newApp = _appMgr.createApplication(storedEba);
0:     DeploymentMetadata dm = newApp.getDeploymentMetadata();
0:     assertEquals (dm.getApplicationDeploymentContents().size(), 3);
0:     assertEquals (dm.getApplicationSymbolicName(), app.getApplicationMetadata().getApplicationSymbolicName());
0:     assertEquals (dm.getApplicationVersion(), app.getApplicationMetadata().getApplicationVersion());
0:   }
0:   
0:   private AriesApplication createApplication (String fileName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, ManagementException  { 
0:     // This next block is a very long winded way of constructing a BundleInfoImpl
0:     // against the existing (BundleManifest bm, String location) constructor. If we 
0:     // find we need a String-based BundleInfoImpl constructor for other reasons, 
0:     // we could change to using it here. 
0:     Set<BundleInfo> nextResolverResult = new HashSet<BundleInfo>();
0:     String persistenceLibraryLocation = "../src/test/resources/bundles/repository/a.handy.persistence.library.jar";
0:     File persistenceLibrary = new File (persistenceLibraryLocation);
0:     BundleManifest mf = BundleManifest.fromBundle(persistenceLibrary);
0:     BundleInfo resolvedPersistenceLibrary = new BundleInfoImpl(mf, persistenceLibraryLocation); 
0:     Field v = BundleInfoImpl.class.getDeclaredField("_version");
0:     v.setAccessible(true);
0:     v.set(resolvedPersistenceLibrary, new Version("1.1.0"));
0:     nextResolverResult.add(resolvedPersistenceLibrary);
0:     _resolver.setNextResult(nextResolverResult);
0:     
0:     IDirectory testEba = FileSystem.getFSRoot(new File(TEST_EBA));
0:     AriesApplication app = _appMgr.createApplication(testEba);
0:     return app;
0:   }
0: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ad46961
/////////////////////////////////////////////////////////////////////////
1:       Set<BundleInfo> info = new HashSet<BundleInfo>(nextResult);
0:       
1:       info.addAll(app.getBundleInfo());
0:       
1:       return info;
/////////////////////////////////////////////////////////////////////////
1:     assertEquals (2, dcList.size());
1:     DeploymentContent dc1 = new DeploymentContentImpl ("foo.bar.widgets;deployed-version=1.1.0");
1:     DeploymentContent dc2 = new DeploymentContentImpl ("my.business.logic;deployed-version=1.1.0");
0:     
1:     dcList = dm.getApplicationProvisionBundles();
0:     
1:     assertEquals(1, dcList.size());
/////////////////////////////////////////////////////////////////////////
1:     assertEquals (2, dm.getApplicationDeploymentContents().size());
1:     assertEquals(1, dm.getApplicationProvisionBundles().size());
commit:55a9b56
/////////////////////////////////////////////////////////////////////////
1:     public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion)
0:     {
0:       return null;
0:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e328c1b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.ResolverException;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:   private AriesApplication createApplication (String fileName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, ManagementException, ResolverException {
/////////////////////////////////////////////////////////////////////////
1:     app = _appMgr.resolve(app);
commit:bfd7c4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.ResolveConstraint;
/////////////////////////////////////////////////////////////////////////
1:     public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) {
============================================================================