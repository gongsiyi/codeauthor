1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
1:f13c6ac: 
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.HashMap;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Properties;
1:fc74a12: import java.util.concurrent.CopyOnWriteArrayList;
1:f13c6ac: 
1:047a2ae: import org.apache.aries.util.AriesFrameworkUtil;
1:1591a51: import org.osgi.framework.BundleContext;
1:1591a51: import org.osgi.framework.FrameworkUtil;
1:f13c6ac: import org.osgi.framework.ServiceRegistration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationException;
1:f13c6ac: import org.osgi.service.cm.ManagedService;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Since persistence id can only be associated with one ManagedService in a bundle
1:f13c6ac:  * this class ensures only one ManagedService is registered per persistence id.
1:f13c6ac:  */
1:f13c6ac: public class ManagedObjectManager {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(ManagedObjectManager.class);
1:f13c6ac: 
1:f13c6ac:     private HashMap<String, ConfigurationWatcher> map = new HashMap<String, ConfigurationWatcher>();
1:f13c6ac:                
1:f13c6ac:     public synchronized void register(ManagedObject cm, Properties props) {
1:f13c6ac:         String key = cm.getPersistentId();
1:f13c6ac:         ConfigurationWatcher reg = map.get(key);
1:f13c6ac:         if (reg == null) {
1:f13c6ac:             reg = new ConfigurationWatcher(); 
1:b49a314:             ServiceRegistration registration = cm.getBundle().getBundleContext().registerService(ManagedService.class.getName(), reg, (Dictionary) props);
1:f13c6ac:             reg.setRegistration(registration);            
1:f13c6ac:             map.put(key, reg);
2:f13c6ac:         }
1:f13c6ac:         reg.add(cm);
1:1591a51: 
1:1591a51:         try {
1:1591a51:             Dictionary<String, Object> config = CmUtils.getProperties(reg.getRegistration().getReference(), key);
1:1591a51:             cm.updated(config);
1:1591a51:         } catch (Throwable t) {
1:1591a51:             // Ignore
1:1591a51:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public synchronized void unregister(ManagedObject cm) {
1:f13c6ac:         String key = cm.getPersistentId();
1:f13c6ac:         ConfigurationWatcher reg = map.get(key);
1:f13c6ac:         if (reg != null) {
1:f13c6ac:             reg.remove(cm);
1:f13c6ac:             if (reg.isEmpty()) {
1:f13c6ac:                 map.remove(key);
1:047a2ae:                 AriesFrameworkUtil.safeUnregisterService(reg.getRegistration());
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:             
1:f13c6ac:     private static class ConfigurationWatcher implements ManagedService {
1:f13c6ac: 
1:f13c6ac:         private ServiceRegistration registration;
1:fc74a12:         private List<ManagedObject> list = new CopyOnWriteArrayList<ManagedObject>();
1:f13c6ac:         
1:f13c6ac:         public ConfigurationWatcher() {
1:f13c6ac:         }
1:f13c6ac:         
1:fc74a12:         public void updated(final Dictionary props) throws ConfigurationException {
1:fc74a12:             // Run in a separate thread to avoid re-entrance
1:fc74a12:             new Thread() {
1:fc74a12:                 public void run() {
1:fc74a12:                     for (ManagedObject cm : list) {
1:fc74a12:                         cm.updated(props);
1:fc74a12:                     }
1:f13c6ac:                 }
1:fc74a12:             }.start();
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         private void setRegistration(ServiceRegistration registration) {
1:f13c6ac:             this.registration = registration;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         private ServiceRegistration getRegistration() {
1:f13c6ac:             return registration;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         private void add(ManagedObject cm) {
1:f13c6ac:             list.add(cm);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         private void remove(ManagedObject cm) {
1:f13c6ac:             list.remove(cm);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         private boolean isEmpty() {
1:f13c6ac:             return list.isEmpty();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:         
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.FrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             Dictionary<String, Object> config = CmUtils.getProperties(reg.getRegistration().getReference(), key);
1:             cm.updated(config);
1:         } catch (Throwable t) {
1:             // Ignore
1:         }
commit:fc74a12
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
1:         private List<ManagedObject> list = new CopyOnWriteArrayList<ManagedObject>();
1:         public void updated(final Dictionary props) throws ConfigurationException {
1:             // Run in a separate thread to avoid re-entrance
1:             new Thread() {
1:                 public void run() {
1:                     for (ManagedObject cm : list) {
1:                         cm.updated(props);
1:                     }
1:             }.start();
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
0: import java.util.ArrayList;
0: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Since persistence id can only be associated with one ManagedService in a bundle
1:  * this class ensures only one ManagedService is registered per persistence id.
1:  */
1: public class ManagedObjectManager {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(ManagedObjectManager.class);
1: 
1:     private HashMap<String, ConfigurationWatcher> map = new HashMap<String, ConfigurationWatcher>();
1:                
1:     public synchronized void register(ManagedObject cm, Properties props) {
1:         String key = cm.getPersistentId();
1:         ConfigurationWatcher reg = map.get(key);
1:         if (reg == null) {
1:             reg = new ConfigurationWatcher(); 
0:             ServiceRegistration registration = cm.getBundle().getBundleContext().registerService(ManagedService.class.getName(), reg, props);
1:             reg.setRegistration(registration);            
1:             map.put(key, reg);
1:         }
1:         reg.add(cm);
1:     }
1: 
1:     public synchronized void unregister(ManagedObject cm) {
1:         String key = cm.getPersistentId();
1:         ConfigurationWatcher reg = map.get(key);
1:         if (reg != null) {
1:             reg.remove(cm);
1:             if (reg.isEmpty()) {
1:                 map.remove(key);
0:                 reg.getRegistration().unregister();
1:             }
1:         }
1:     }
1:             
1:     private static class ConfigurationWatcher implements ManagedService {
1: 
1:         private ServiceRegistration registration;
0:         private List<ManagedObject> list = Collections.synchronizedList(new ArrayList<ManagedObject>());
1:         
1:         public ConfigurationWatcher() {
1:         }
1:         
0:         public void updated(Dictionary props) throws ConfigurationException {
0:             synchronized (list) {
0:                 for (ManagedObject cm : list) {
0:                     cm.updated(props);
1:                 }
1:             }
1:         }
1:         
1:         private void setRegistration(ServiceRegistration registration) {
1:             this.registration = registration;
1:         }
1:         
1:         private ServiceRegistration getRegistration() {
1:             return registration;
1:         }
1:         
1:         private void add(ManagedObject cm) {
1:             list.add(cm);
1:         }
1:         
1:         private void remove(ManagedObject cm) {
1:             list.remove(cm);
1:         }
1:         
1:         private boolean isEmpty() {
1:             return list.isEmpty();
1:         }
1:     }
1:         
1: }
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1:             ServiceRegistration registration = cm.getBundle().getBundleContext().registerService(ManagedService.class.getName(), reg, (Dictionary) props);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:                 AriesFrameworkUtil.safeUnregisterService(reg.getRegistration());
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
============================================================================