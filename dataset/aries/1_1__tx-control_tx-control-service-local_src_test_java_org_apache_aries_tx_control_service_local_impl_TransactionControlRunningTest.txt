1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:9552b0c: package org.apache.aries.tx.control.service.local.impl;
12:9552b0c: 
1:9552b0c: import static org.junit.Assert.assertEquals;
1:9552b0c: import static org.junit.Assert.assertFalse;
1:9552b0c: import static org.junit.Assert.assertSame;
1:9552b0c: import static org.junit.Assert.assertTrue;
1:9552b0c: import static org.junit.Assert.fail;
1:9552b0c: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:9552b0c: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:9552b0c: 
1:9552b0c: import java.net.BindException;
1:9552b0c: import java.util.concurrent.atomic.AtomicReference;
1:9552b0c: 
1:9552b0c: import org.junit.Before;
1:9552b0c: import org.junit.Test;
1:9552b0c: import org.junit.runner.RunWith;
1:9552b0c: import org.mockito.Mock;
1:9552b0c: import org.mockito.runners.MockitoJUnitRunner;
1:9552b0c: import org.osgi.service.transaction.control.LocalResource;
1:9552b0c: import org.osgi.service.transaction.control.ResourceProvider;
1:9552b0c: import org.osgi.service.transaction.control.ScopedWorkException;
1:9552b0c: import org.osgi.service.transaction.control.TransactionStatus;
1:9552b0c: 
1:9552b0c: @RunWith(MockitoJUnitRunner.class)
1:9552b0c: public class TransactionControlRunningTest {
1:9552b0c: 
4:9552b0c: 	@Mock
1:9552b0c: 	ResourceProvider<Object> testProvider;
1:9552b0c: 	@Mock
1:9552b0c: 	LocalResource testResource;
1:9552b0c: 
1:9552b0c: 	TransactionControlImpl txControl;
1:9552b0c: 
1:9552b0c: 	@Before
1:9552b0c: 	public void setUp() {
1:f87416c: 		txControl = new TransactionControlImpl();
6:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testRequired() {
1:edd266c: 
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatus::set);
5:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(COMMITTED, finalStatus.get());
1:9552b0c: 
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testRequiredMarkedRollback() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 			
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatus::set);
1:9552b0c: 			
1:9552b0c: 			txControl.setRollbackOnly();
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatus.get());
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testRequiredUserException() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		Exception userEx = new Exception("Bang!");
1:9552b0c: 		
1:9552b0c: 		try {
1:9552b0c: 			txControl.required(() -> {
1:9552b0c: 				
1:9552b0c: 				assertTrue(txControl.activeTransaction());
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatus::set);
1:9552b0c: 				
1:9552b0c: 				throw userEx;
1:9552b0c: 			});
1:9552b0c: 			fail("Should not be reached");
1:9552b0c: 		} catch (ScopedWorkException swe) {
1:9552b0c: 			assertSame(userEx, swe.getCause());
1:9552b0c: 		}
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatus.get());
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testRequiredNoRollbackException() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		Exception userEx = new BindException("Bang!");
1:9552b0c: 		
1:9552b0c: 		try {
1:9552b0c: 			txControl.build()
1:9552b0c: 				.noRollbackFor(BindException.class)
1:9552b0c: 				.required(() -> {
1:9552b0c: 					
1:9552b0c: 					assertTrue(txControl.activeTransaction());
1:9552b0c: 					
1:9552b0c: 					txControl.getCurrentContext().postCompletion(finalStatus::set);
1:9552b0c: 					
1:9552b0c: 					throw userEx;
1:9552b0c: 				});
1:9552b0c: 			fail("Should not be reached");
1:9552b0c: 		} catch (ScopedWorkException swe) {
1:9552b0c: 			assertSame(userEx, swe.getCause());
1:9552b0c: 		}
1:9552b0c: 		
1:9552b0c: 		assertEquals(COMMITTED, finalStatus.get());
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNested() {
1:9552b0c: 
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:edd266c: 		
1:9552b0c: 		txControl.required(() -> {
1:edd266c: 
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:edd266c: 			
1:9552b0c: 			txControl.requiresNew(() -> {
1:9552b0c: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 					
1:9552b0c: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 					return null;
1:9552b0c: 				});
1:9552b0c: 			
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(COMMITTED, finalStatusOuter.get());
1:9552b0c: 		assertEquals(COMMITTED, finalStatusInner.get());
1:9552b0c: 
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedOuterMarkedRollback() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 			
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 			
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 			
1:9552b0c: 			txControl.setRollbackOnly();
1:9552b0c: 			
1:9552b0c: 			txControl.requiresNew(() -> {
1:9552b0c: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 				return null;
1:9552b0c: 			});
1:9552b0c: 			
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1:9552b0c: 		assertEquals(COMMITTED, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedInnerMarkedRollback() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 			
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 			
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 			
1:9552b0c: 			txControl.requiresNew(() -> {
1:9552b0c: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 
1:9552b0c: 				txControl.setRollbackOnly();
1:9552b0c: 				
1:9552b0c: 				return null;
1:9552b0c: 			});
1:9552b0c: 			
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(COMMITTED, finalStatusOuter.get());
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedBothMarkedRollback() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 			
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 			
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 			
1:9552b0c: 			txControl.setRollbackOnly();
1:9552b0c: 
1:9552b0c: 			txControl.requiresNew(() -> {
1:9552b0c: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 				
1:9552b0c: 				txControl.setRollbackOnly();
1:9552b0c: 				
1:9552b0c: 				return null;
1:9552b0c: 			});
1:9552b0c: 			
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 	
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedOuterThrowsException() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		Exception userEx = new Exception("Bang!");
1:9552b0c: 		
1:9552b0c: 		try {
1:9552b0c: 			txControl.required(() -> {
1:9552b0c: 				
1:9552b0c: 				assertTrue(txControl.activeTransaction());
1:9552b0c: 				
1:9552b0c: 				Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 				
1:9552b0c: 				txControl.setRollbackOnly();
1:9552b0c: 				
1:9552b0c: 				txControl.requiresNew(() -> {
1:9552b0c: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 					
1:9552b0c: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 					return null;
1:9552b0c: 				});
1:9552b0c: 				
1:9552b0c: 				throw userEx;
1:9552b0c: 			});
1:9552b0c: 			fail("Should not be reached");
1:9552b0c: 		} catch (ScopedWorkException swe) {
1:9552b0c: 			assertSame(userEx, swe.getCause());
1:9552b0c: 		}
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1:9552b0c: 		assertEquals(COMMITTED, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 	
1:9552b0c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedInnerThrowsException() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		Exception userEx = new Exception("Bang!");
1:9552b0c: 		
1:9552b0c: 		txControl.required(() -> {
1:9552b0c: 			
1:9552b0c: 			assertTrue(txControl.activeTransaction());
1:9552b0c: 			
1:9552b0c: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 			
1:9552b0c: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 			
1:9552b0c: 			try {
1:9552b0c: 				txControl.requiresNew(() -> {
1:9552b0c: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 					
1:9552b0c: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 					
1:9552b0c: 					txControl.setRollbackOnly();
1:9552b0c: 					
1:9552b0c: 					throw userEx;
1:9552b0c: 				});
1:9552b0c: 				fail("Should not be reached!");
1:9552b0c: 			} catch (ScopedWorkException swe) {
1:9552b0c: 				assertSame(userEx, swe.getCause());
1:9552b0c: 			}
1:9552b0c: 			return null;
1:9552b0c: 		});
1:9552b0c: 		
1:9552b0c: 		assertEquals(COMMITTED, finalStatusOuter.get());
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 	
1:9552b0c: 	@Test
1:edd266c: 	public void testTwoRequiredsNestedInnerThrowsExceptionOuterDoesNotCatch() {
1:edd266c: 		
1:edd266c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:edd266c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:edd266c: 		
1:edd266c: 		Exception userEx = new Exception("Bang!");
1:edd266c: 		
1:edd266c: 		try {
1:edd266c: 			txControl.required(() -> {
1:edd266c: 				
1:edd266c: 				assertTrue(txControl.activeTransaction());
1:edd266c: 				
1:edd266c: 				Object key = txControl.getCurrentContext().getTransactionKey();
1:edd266c: 				
1:edd266c: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:edd266c: 				
1:edd266c: 				txControl.requiresNew(() -> {
1:edd266c: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:edd266c: 					
1:edd266c: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:edd266c: 					
1:edd266c: 					txControl.setRollbackOnly();
1:9552b0c: 					
1:edd266c: 					throw userEx;
1:edd266c: 				});
1:edd266c: 				fail("Should not be reached!");
1:edd266c: 				return null;
1:edd266c: 			});
1:edd266c: 		} catch (ScopedWorkException swe) {
1:edd266c: 			assertSame(userEx, swe.getCause());
1:edd266c: 		}
1:9552b0c: 		
1:edd266c: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1:edd266c: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1:9552b0c: 		
1:edd266c: 	}
1:9552b0c: 	
1:edd266c: 	@Test
1:9552b0c: 	public void testTwoRequiredsNestedNoRollbackForInnerException() {
1:9552b0c: 		
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1:9552b0c: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1:9552b0c: 		
1:9552b0c: 		Exception userEx = new BindException("Bang!");
1:9552b0c: 		
1:9552b0c: 		try {
1:9552b0c: 			txControl.required(() -> {
1:9552b0c: 				
1:9552b0c: 				assertTrue(txControl.activeTransaction());
1:9552b0c: 				
1:9552b0c: 				Object key = txControl.getCurrentContext().getTransactionKey();
1:9552b0c: 				
1:9552b0c: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1:9552b0c: 				
1:9552b0c: 				try {
1:9552b0c: 					txControl.build()
1:9552b0c: 						.noRollbackFor(BindException.class)
1:9552b0c: 						.requiresNew(() -> {
1:9552b0c: 								assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1:9552b0c: 								
1:9552b0c: 								txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1:9552b0c: 								
1:9552b0c: 								throw userEx;
1:9552b0c: 							});
1:9552b0c: 					fail("Should not be reached!");
1:9552b0c: 				} catch (ScopedWorkException swe) {
1:9552b0c: 					throw swe.as(BindException.class);
1:9552b0c: 				}
1:9552b0c: 				
1:9552b0c: 				return null;
1:9552b0c: 			});
1:9552b0c: 			fail("Should not be reached!");
1:9552b0c: 		} catch (ScopedWorkException swe) {
1:9552b0c: 			assertSame(userEx, swe.getCause());
1:9552b0c: 		}
1:9552b0c: 		
1:9552b0c: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1:9552b0c: 		assertEquals(COMMITTED, finalStatusInner.get());
1:9552b0c: 		
1:9552b0c: 	}
1:9552b0c: 	
1:9552b0c: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:edd266c
/////////////////////////////////////////////////////////////////////////
1: 	public void testTwoRequiredsNestedInnerThrowsExceptionOuterDoesNotCatch() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		Exception userEx = new Exception("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				assertTrue(txControl.activeTransaction());
1: 				
1: 				Object key = txControl.getCurrentContext().getTransactionKey();
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 				
1: 				txControl.requiresNew(() -> {
1: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 					
1: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 					
1: 					txControl.setRollbackOnly();
1: 					
1: 					throw userEx;
1: 				});
1: 				fail("Should not be reached!");
1: 				return null;
1: 			});
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(userEx, swe.getCause());
1: 		}
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1: 		
1: 	}
1: 	
1: 	@Test
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		txControl = new TransactionControlImpl();
commit:9552b0c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: 
1: import java.net.BindException;
0: import java.util.HashMap;
0: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.mockito.ArgumentCaptor;
1: import org.mockito.Mock;
0: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Coordinator;
0: import org.osgi.service.coordinator.Participant;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.ResourceProvider;
1: import org.osgi.service.transaction.control.ScopedWorkException;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class TransactionControlRunningTest {
1: 
1: 	@Mock
0: 	Coordinator coordinator;
1: 	@Mock
0: 	Coordination coordination1;
1: 	@Mock
0: 	Coordination coordination2;
1: 
1: 	@Mock
1: 	ResourceProvider<Object> testProvider;
1: 	@Mock
1: 	LocalResource testResource;
1: 
1: 	TransactionControlImpl txControl;
1: 
0: 	Map<Class<?>, Object> variables1;
0: 	Map<Class<?>, Object> variables2;
1: 
1: 	@Before
1: 	public void setUp() {
0: 		variables1 = new HashMap<>();
0: 		variables2 = new HashMap<>();
1: 
0: 		setupCoordinations();
1: 
0: 		txControl = new TransactionControlImpl(coordinator);
1: 	}
1: 
0: 	/**
0: 	 * Allow up to two Coordinations to be happening
0: 	 */
0: 	private void setupCoordinations() {
0: 		Mockito.when(coordinator.begin(Mockito.anyString(), Mockito.anyLong())).then(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 			return coordination1;
0: 		}).then(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination2);
0: 			return coordination2;
0: 		}).thenThrow(new IllegalStateException("Only two coordinations at a time in the test"));
1: 
0: 		Mockito.when(coordination1.getVariables()).thenReturn(variables1);
0: 		Mockito.when(coordination1.getId()).thenReturn(42L);
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(null);
0: 			ArgumentCaptor<Participant> captor = ArgumentCaptor.forClass(Participant.class);
0: 			Mockito.verify(coordination1, Mockito.atLeast(1)).addParticipant(captor.capture());
1: 			
0: 			for(Participant p : captor.getAllValues()) {
0: 				p.ended(coordination1);
1: 			}
1: 			return null;
0: 		}).when(coordination1).end();
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(null);
0: 			ArgumentCaptor<Participant> captor = ArgumentCaptor.forClass(Participant.class);
0: 			Mockito.verify(coordination1, Mockito.atLeast(1)).addParticipant(captor.capture());
1: 			
0: 			for(Participant p : captor.getAllValues()) {
0: 				p.failed(coordination1);
1: 			}
1: 			return null;
0: 		}).when(coordination1).fail(Mockito.any(Throwable.class));
1: 
0: 		Mockito.when(coordination2.getVariables()).thenReturn(variables2);
0: 		Mockito.when(coordination2.getId()).thenReturn(43L);
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 			ArgumentCaptor<Participant> captor = ArgumentCaptor.forClass(Participant.class);
0: 			Mockito.verify(coordination2, Mockito.atLeast(1)).addParticipant(captor.capture());
1: 			
0: 			for(Participant p : captor.getAllValues()) {
0: 				p.ended(coordination2);
1: 			}
1: 			return null;
0: 		}).when(coordination2).end();
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 			ArgumentCaptor<Participant> captor = ArgumentCaptor.forClass(Participant.class);
0: 			Mockito.verify(coordination2, Mockito.atLeast(1)).addParticipant(captor.capture());
1: 			
0: 			for(Participant p : captor.getAllValues()) {
0: 				p.failed(coordination2);
1: 			}
1: 			return null;
0: 		}).when(coordination2).fail(Mockito.any(Throwable.class));
1: 	}
1: 
1: 	@Test
1: 	public void testRequired() {
1: 
1: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			txControl.getCurrentContext().postCompletion(finalStatus::set);
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(COMMITTED, finalStatus.get());
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredMarkedRollback() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 			
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			txControl.getCurrentContext().postCompletion(finalStatus::set);
1: 			
1: 			txControl.setRollbackOnly();
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatus.get());
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredUserException() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1: 		
1: 		Exception userEx = new Exception("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				assertTrue(txControl.activeTransaction());
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatus::set);
1: 				
1: 				throw userEx;
1: 			});
1: 			fail("Should not be reached");
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(userEx, swe.getCause());
1: 		}
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatus.get());
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredNoRollbackException() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatus = new AtomicReference<>();
1: 		
1: 		Exception userEx = new BindException("Bang!");
1: 		
1: 		try {
1: 			txControl.build()
1: 				.noRollbackFor(BindException.class)
1: 				.required(() -> {
1: 					
1: 					assertTrue(txControl.activeTransaction());
1: 					
1: 					txControl.getCurrentContext().postCompletion(finalStatus::set);
1: 					
1: 					throw userEx;
1: 				});
1: 			fail("Should not be reached");
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(userEx, swe.getCause());
1: 		}
1: 		
1: 		assertEquals(COMMITTED, finalStatus.get());
1: 	}
1: 
1: 	@Test
1: 	public void testTwoRequiredsNested() {
1: 
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 
1: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 			
1: 			txControl.requiresNew(() -> {
1: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 					
1: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 					return null;
1: 				});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(COMMITTED, finalStatusOuter.get());
1: 		assertEquals(COMMITTED, finalStatusInner.get());
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testTwoRequiredsNestedOuterMarkedRollback() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 			
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			
1: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 			
1: 			txControl.setRollbackOnly();
1: 			
1: 			txControl.requiresNew(() -> {
1: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1: 		assertEquals(COMMITTED, finalStatusInner.get());
1: 		
1: 	}
1: 
1: 	@Test
1: 	public void testTwoRequiredsNestedInnerMarkedRollback() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 			
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			
1: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 			
1: 			txControl.requiresNew(() -> {
1: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 
1: 				txControl.setRollbackOnly();
1: 				
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(COMMITTED, finalStatusOuter.get());
1: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1: 		
1: 	}
1: 
1: 	@Test
1: 	public void testTwoRequiredsNestedBothMarkedRollback() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		txControl.required(() -> {
1: 			
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			
1: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 			
1: 			txControl.setRollbackOnly();
1: 
1: 			txControl.requiresNew(() -> {
1: 				assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 				
1: 				txControl.setRollbackOnly();
1: 				
1: 				return null;
1: 			});
1: 			
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1: 		
1: 	}
1: 	
1: 	@Test
1: 	public void testTwoRequiredsNestedOuterThrowsException() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		Exception userEx = new Exception("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				assertTrue(txControl.activeTransaction());
1: 				
1: 				Object key = txControl.getCurrentContext().getTransactionKey();
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 				
1: 				txControl.setRollbackOnly();
1: 				
1: 				txControl.requiresNew(() -> {
1: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 					
1: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 					return null;
1: 				});
1: 				
1: 				throw userEx;
1: 			});
1: 			fail("Should not be reached");
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(userEx, swe.getCause());
1: 		}
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1: 		assertEquals(COMMITTED, finalStatusInner.get());
1: 		
1: 	}
1: 	
1: 	@Test
1: 	public void testTwoRequiredsNestedInnerThrowsException() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		Exception userEx = new Exception("Bang!");
1: 		
1: 		txControl.required(() -> {
1: 			
1: 			assertTrue(txControl.activeTransaction());
1: 			
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			
1: 			txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 			
1: 			try {
1: 				txControl.requiresNew(() -> {
1: 					assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 					
1: 					txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 					
1: 					txControl.setRollbackOnly();
1: 					
1: 					throw userEx;
1: 				});
1: 				fail("Should not be reached!");
1: 			} catch (ScopedWorkException swe) {
1: 				assertSame(userEx, swe.getCause());
1: 			}
1: 			return null;
1: 		});
1: 		
1: 		assertEquals(COMMITTED, finalStatusOuter.get());
1: 		assertEquals(ROLLED_BACK, finalStatusInner.get());
1: 		
1: 	}
1: 	
1: 	@Test
1: 	public void testTwoRequiredsNestedNoRollbackForInnerException() {
1: 		
1: 		AtomicReference<TransactionStatus> finalStatusOuter = new AtomicReference<>();
1: 		AtomicReference<TransactionStatus> finalStatusInner = new AtomicReference<>();
1: 		
1: 		Exception userEx = new BindException("Bang!");
1: 		
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				assertTrue(txControl.activeTransaction());
1: 				
1: 				Object key = txControl.getCurrentContext().getTransactionKey();
1: 				
1: 				txControl.getCurrentContext().postCompletion(finalStatusOuter::set);
1: 				
1: 				try {
1: 					txControl.build()
1: 						.noRollbackFor(BindException.class)
1: 						.requiresNew(() -> {
1: 								assertFalse(key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 								
1: 								txControl.getCurrentContext().postCompletion(finalStatusInner::set);
1: 								
1: 								throw userEx;
1: 							});
1: 					fail("Should not be reached!");
1: 				} catch (ScopedWorkException swe) {
1: 					throw swe.as(BindException.class);
1: 				}
1: 				
1: 				return null;
1: 			});
1: 			fail("Should not be reached!");
1: 		} catch (ScopedWorkException swe) {
1: 			assertSame(userEx, swe.getCause());
1: 		}
1: 		
1: 		assertEquals(ROLLED_BACK, finalStatusOuter.get());
1: 		assertEquals(COMMITTED, finalStatusInner.get());
1: 		
1: 	}
1: 	
1: }
============================================================================