1:98ca24c: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:98ca24c:  *  contributor license agreements.  See the NOTICE file distributed with
1:98ca24c:  *  this work for additional information regarding copyright ownership.
1:98ca24c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:98ca24c:  *  (the "License"); you may not use this file except in compliance with
1:98ca24c:  *  the License.  You may obtain a copy of the License at
1:98ca24c:  *
1:98ca24c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:98ca24c:  *
1:98ca24c:  *  Unless required by applicable law or agreed to in writing, software
1:98ca24c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:98ca24c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98ca24c:  *  See the License for the specific language governing permissions and
1:98ca24c:  *  limitations under the License.
1:98ca24c:  */
1:98ca24c: package org.apache.aries.jpa.itest;
1:98ca24c: 
1:98ca24c: import static org.junit.Assert.assertEquals;
1:98ca24c: 
1:98ca24c: import javax.persistence.EntityManager;
1:98ca24c: import javax.transaction.UserTransaction;
1:98ca24c: 
1:98ca24c: import org.apache.aries.jpa.container.itest.entities.Car;
1:d5c184f: import org.junit.Assert;
1:98ca24c: import org.osgi.framework.BundleException;
1:98ca24c: 
1:98ca24c: public abstract class AbstractCarJPAITest extends AbstractJPAItest {
1:98ca24c:     protected static final String BLUE_CAR_PLATE = "A1AAA";
1:98ca24c:     protected static final String GREEN_CAR_PLATE = "B2BBB";
1:98ca24c:     protected static final String BLACK_CAR_PLATE = "C3CCC";
1:98ca24c: 
1:98ca24c:     protected Car createBlueCar() {
1:98ca24c:         Car car = new Car();
1:98ca24c:         car.setNumberOfSeats(5);
1:98ca24c:         car.setEngineSize(1200);
1:98ca24c:         car.setColour("blue");
1:98ca24c:         car.setNumberPlate(BLUE_CAR_PLATE);
1:98ca24c:         return car;
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     protected Car createGreenCar() {
1:98ca24c:         Car car;
1:98ca24c:         car = new Car();
1:98ca24c:         car.setNumberOfSeats(7);
1:98ca24c:         car.setEngineSize(1800);
1:98ca24c:         car.setColour("green");
1:98ca24c:         car.setNumberPlate(GREEN_CAR_PLATE);
1:98ca24c:         return car;
1:98ca24c:     }
1:98ca24c:     
1:98ca24c: 
1:98ca24c:     protected Car createBlackCar() {
1:98ca24c:         Car car;
1:98ca24c:         car = new Car();
1:98ca24c:         car.setNumberOfSeats(2);
1:98ca24c:         car.setEngineSize(800);
1:98ca24c:         car.setColour("black");
1:98ca24c:         car.setNumberPlate(BLACK_CAR_PLATE);
1:98ca24c:         return car;
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     protected void assertBlueCar(Car car) {
1:d5c184f:         Assert.assertNotNull("Blue car not found (null)", car);
1:98ca24c:         assertEquals(5, car.getNumberOfSeats());
1:98ca24c:         assertEquals(1200, car.getEngineSize());
1:98ca24c:         assertEquals("blue", car.getColour());
1:98ca24c:         assertEquals(BLUE_CAR_PLATE, car.getNumberPlate());
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     protected void assertGreenCar(Car car) {
1:98ca24c:         assertEquals(7, car.getNumberOfSeats());
1:98ca24c:         assertEquals(1800, car.getEngineSize());
1:98ca24c:         assertEquals("green", car.getColour());
1:98ca24c:         assertEquals(GREEN_CAR_PLATE, car.getNumberPlate());
1:98ca24c:     }
1:98ca24c:     
1:98ca24c:     protected void assertBlackCar(Car car) {
1:98ca24c:         assertEquals(2, car.getNumberOfSeats());
1:98ca24c:         assertEquals(800, car.getEngineSize());
1:98ca24c:         assertEquals("black", car.getColour());
1:98ca24c:         assertEquals(BLACK_CAR_PLATE, car.getNumberPlate());
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     /**
1:98ca24c:      * Create, find and delete car using resource local transactions
1:98ca24c:      * @param emf
1:98ca24c:      * @throws BundleException
1:98ca24c:      */
1:98ca24c:     protected void carLifecycleRL(EntityManager em) throws BundleException {
1:98ca24c:         em.getTransaction().begin();
1:98ca24c:         Car car = createBlueCar();
1:98ca24c:         em.persist(car);
1:98ca24c:         em.getTransaction().commit();
1:98ca24c: 
1:98ca24c:         Car car2 = em.find(Car.class, BLUE_CAR_PLATE);
1:98ca24c:         assertBlueCar(car2);
1:98ca24c:         em.getTransaction().begin();
1:98ca24c:         em.remove(car2);
1:98ca24c:         em.getTransaction().commit();
1:98ca24c:         em.close();
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     /**
1:98ca24c:      * Create, find and delete car using XA Transactions
1:98ca24c:      * @param ut
1:98ca24c:      * @param em
1:98ca24c:      * @throws Exception
1:98ca24c:      */
1:98ca24c:     protected void carLifecycleXA(UserTransaction ut, EntityManager em) throws Exception {
1:98ca24c:         ut.begin();
1:98ca24c:         em.joinTransaction();
1:98ca24c:         delete(em, BLUE_CAR_PLATE);
1:98ca24c:         em.persist(createBlueCar());
1:98ca24c:         ut.commit();
1:98ca24c: 
1:98ca24c:         Car c = em.find(Car.class, BLUE_CAR_PLATE);
1:98ca24c:         assertBlueCar(c);
1:98ca24c: 
1:98ca24c:         ut.begin();
1:98ca24c:         em.joinTransaction();
1:98ca24c:         delete(em, BLUE_CAR_PLATE);
1:98ca24c:         ut.commit();
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     protected void delete(EntityManager em, String plateId) {
1:98ca24c:         Car car = em.find(Car.class, plateId);
1:98ca24c:         if (car != null) {
1:98ca24c:             em.remove(car);
1:98ca24c:         }
1:98ca24c:     }
1:98ca24c: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:d5c184f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertNotNull("Blue car not found (null)", car);
commit:98ca24c
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jpa.itest;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.persistence.EntityManager;
1: import javax.transaction.UserTransaction;
1: 
1: import org.apache.aries.jpa.container.itest.entities.Car;
1: import org.osgi.framework.BundleException;
1: 
1: public abstract class AbstractCarJPAITest extends AbstractJPAItest {
1:     protected static final String BLUE_CAR_PLATE = "A1AAA";
1:     protected static final String GREEN_CAR_PLATE = "B2BBB";
1:     protected static final String BLACK_CAR_PLATE = "C3CCC";
1: 
1:     protected Car createBlueCar() {
1:         Car car = new Car();
1:         car.setNumberOfSeats(5);
1:         car.setEngineSize(1200);
1:         car.setColour("blue");
1:         car.setNumberPlate(BLUE_CAR_PLATE);
1:         return car;
1:     }
1: 
1:     protected Car createGreenCar() {
1:         Car car;
1:         car = new Car();
1:         car.setNumberOfSeats(7);
1:         car.setEngineSize(1800);
1:         car.setColour("green");
1:         car.setNumberPlate(GREEN_CAR_PLATE);
1:         return car;
1:     }
1:     
1: 
1:     protected Car createBlackCar() {
1:         Car car;
1:         car = new Car();
1:         car.setNumberOfSeats(2);
1:         car.setEngineSize(800);
1:         car.setColour("black");
1:         car.setNumberPlate(BLACK_CAR_PLATE);
1:         return car;
1:     }
1: 
1:     protected void assertBlueCar(Car car) {
1:         assertEquals(5, car.getNumberOfSeats());
1:         assertEquals(1200, car.getEngineSize());
1:         assertEquals("blue", car.getColour());
1:         assertEquals(BLUE_CAR_PLATE, car.getNumberPlate());
1:     }
1: 
1:     protected void assertGreenCar(Car car) {
1:         assertEquals(7, car.getNumberOfSeats());
1:         assertEquals(1800, car.getEngineSize());
1:         assertEquals("green", car.getColour());
1:         assertEquals(GREEN_CAR_PLATE, car.getNumberPlate());
1:     }
1:     
1:     protected void assertBlackCar(Car car) {
1:         assertEquals(2, car.getNumberOfSeats());
1:         assertEquals(800, car.getEngineSize());
1:         assertEquals("black", car.getColour());
1:         assertEquals(BLACK_CAR_PLATE, car.getNumberPlate());
1:     }
1: 
1:     /**
1:      * Create, find and delete car using resource local transactions
1:      * @param emf
1:      * @throws BundleException
1:      */
1:     protected void carLifecycleRL(EntityManager em) throws BundleException {
1:         em.getTransaction().begin();
1:         Car car = createBlueCar();
1:         em.persist(car);
1:         em.getTransaction().commit();
1: 
1:         Car car2 = em.find(Car.class, BLUE_CAR_PLATE);
1:         assertBlueCar(car2);
1:         em.getTransaction().begin();
1:         em.remove(car2);
1:         em.getTransaction().commit();
1:         em.close();
1:     }
1: 
1:     /**
1:      * Create, find and delete car using XA Transactions
1:      * @param ut
1:      * @param em
1:      * @throws Exception
1:      */
1:     protected void carLifecycleXA(UserTransaction ut, EntityManager em) throws Exception {
1:         ut.begin();
1:         em.joinTransaction();
1:         delete(em, BLUE_CAR_PLATE);
1:         em.persist(createBlueCar());
1:         ut.commit();
1: 
1:         Car c = em.find(Car.class, BLUE_CAR_PLATE);
1:         assertBlueCar(c);
1: 
1:         ut.begin();
1:         em.joinTransaction();
1:         delete(em, BLUE_CAR_PLATE);
1:         ut.commit();
1:     }
1: 
1:     protected void delete(EntityManager em, String plateId) {
1:         Car car = em.find(Car.class, plateId);
1:         if (car != null) {
1:             em.remove(car);
1:         }
1:     }
1: }
============================================================================