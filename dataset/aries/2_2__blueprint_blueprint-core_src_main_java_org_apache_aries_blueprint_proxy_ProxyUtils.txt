1:acd9504: /**
1:acd9504:  * Licensed to the Apache Software Foundation (ASF) under one
1:acd9504:  * or more contributor license agreements.  See the NOTICE file
1:acd9504:  * distributed with this work for additional information
1:acd9504:  * regarding copyright ownership.  The ASF licenses this file
1:acd9504:  * to you under the Apache License, Version 2.0 (the
1:acd9504:  * "License"); you may not use this file except in compliance
1:acd9504:  * with the License.  You may obtain a copy of the License at
1:acd9504:  *
1:acd9504:  *   http://www.apache.org/licenses/LICENSE-2.0
1:acd9504:  *
1:acd9504:  * Unless required by applicable law or agreed to in writing,
1:acd9504:  * software distributed under the License is distributed on an
1:acd9504:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:acd9504:  * KIND, either express or implied.  See the License for the
1:acd9504:  * specific language governing permissions and limitations
1:acd9504:  * under the License.
1:acd9504:  */
1:24455ce: package org.apache.aries.blueprint.proxy;
1:24455ce: 
1:24455ce: import java.util.ArrayList;
1:24455ce: import java.util.List;
1:24455ce: import java.util.concurrent.Callable;
1:24455ce: 
1:24455ce: public class ProxyUtils 
1:24455ce: {
1:24455ce:   public static final Callable<Object> passThrough(final Object target)
1:24455ce:   {
1:24455ce:     return new Callable<Object>() {
1:24455ce:       public Object call() throws Exception {
1:24455ce:         return target;
2:24455ce:       }
1:24455ce:     };
1:24455ce:   }
1:24455ce:   
1:24455ce:   public static final List<Class<?>> asList(Class<?> ... classesArray)
1:24455ce:   {
1:24455ce:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:24455ce:     for (Class<?> clazz : classesArray) {
1:24455ce:       classes.add(clazz);
1:24455ce:     }
1:24455ce:     return classes;
1:acd9504:   }
1:24455ce:   public static final List<Class<?>> asList(Class<?> clazz)
1:24455ce:   {
1:24455ce:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:24455ce:     classes.add(clazz);
1:24455ce:     return classes;
1:24455ce:   }
1:24455ce: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:acd9504
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.proxy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: public class ProxyUtils 
1: {
1:   public static final Callable<Object> passThrough(final Object target)
1:   {
1:     return new Callable<Object>() {
1:       public Object call() throws Exception {
1:         return target;
1:       }
1:     };
1:   }
1:   
1:   public static final List<Class<?>> asList(Class<?> ... classesArray)
1:   {
1:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:     for (Class<?> clazz : classesArray) {
1:       classes.add(clazz);
1:     }
1:     return classes;
1:   }
1:   public static final List<Class<?>> asList(Class<?> clazz)
1:   {
1:     List<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(clazz);
1:     return classes;
1:   }
1: }
============================================================================