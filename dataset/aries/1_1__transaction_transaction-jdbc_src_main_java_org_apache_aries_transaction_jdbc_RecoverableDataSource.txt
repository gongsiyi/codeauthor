1:aa20c34: /*
1:aa20c34:  * Licensed to the Apache Software Foundation (ASF) under one
1:aa20c34:  * or more contributor license agreements.  See the NOTICE file
1:aa20c34:  * distributed with this work for additional information
1:aa20c34:  * regarding copyright ownership.  The ASF licenses this file
1:aa20c34:  * to you under the Apache License, Version 2.0 (the
1:aa20c34:  * "License"); you may not use this file except in compliance
1:aa20c34:  * with the License.  You may obtain a copy of the License at
2:aa20c34:  *
1:aa20c34:  *   http://www.apache.org/licenses/LICENSE-2.0
1:aa20c34:  *
1:aa20c34:  * Unless required by applicable law or agreed to in writing,
1:aa20c34:  * software distributed under the License is distributed on an
1:aa20c34:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:aa20c34:  * KIND, either express or implied.  See the License for the
1:aa20c34:  * specific language governing permissions and limitations
1:aa20c34:  * under the License.
1:aa20c34:  */
1:aa20c34: package org.apache.aries.transaction.jdbc;
1:aa20c34: 
1:db3b209: import org.apache.aries.transaction.AriesTransactionManager;
1:ca23c31: import org.apache.aries.transaction.jdbc.internal.AbstractMCFFactory;
1:db3b209: import org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory;
1:ca23c31: import org.apache.aries.transaction.jdbc.internal.DataSourceMCFFactory;
1:db3b209: import org.apache.aries.transaction.jdbc.internal.Recovery;
1:db3b209: import org.apache.aries.transaction.jdbc.internal.XADataSourceMCFFactory;
1:db3b209: import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
1:db3b209: 
1:ca23c31: import javax.sql.CommonDataSource;
1:db3b209: import javax.sql.DataSource;
1:db3b209: import javax.sql.XADataSource;
1:db3b209: import java.io.PrintWriter;
1:db3b209: import java.sql.Connection;
1:db3b209: import java.sql.SQLException;
1:db3b209: import java.sql.SQLFeatureNotSupportedException;
1:aa20c34: 
1:aa20c34: /**
1:aa20c34:  * Defines a JDBC DataSource that will auto-enlist into existing XA transactions.
1:aa20c34:  * The DataSource will also be registered with the Aries/Geronimo transaction
1:aa20c34:  * manager in order to provide proper transaction recovery at startup.
1:aa20c34:  * Other considerations such as connection pooling and error handling are
1:aa20c34:  * completely ignored.
1:aa20c34:  *
1:aa20c34:  * @org.apache.xbean.XBean
1:aa20c34:  */
1:db3b209: public class RecoverableDataSource implements DataSource {
1:aa20c34: 
1:ca23c31:     private CommonDataSource dataSource;
1:db3b209:     private AriesTransactionManager transactionManager;
1:aa20c34:     private String name;
1:db3b209:     private String exceptionSorter = "all";
1:db3b209:     private String username = "";
1:db3b209:     private String password = "";
1:db3b209:     private boolean allConnectionsEquals = true;
1:db3b209:     private int connectionMaxIdleMinutes = 15;
1:db3b209:     private int connectionMaxWaitMilliseconds = 5000;
1:db3b209:     private String partitionStrategy = "none";
1:db3b209:     private boolean pooling = true;
1:db3b209:     private int poolMaxSize = 10;
1:db3b209:     private int poolMinSize = 0;
1:ca23c31:     private String transaction;
1:48ad380:     private boolean validateOnMatch = true;
1:48ad380:     private boolean backgroundValidation = false;
1:48ad380:     private int backgroundValidationMilliseconds = 600000;
1:aa20c34: 
1:db3b209:     private DataSource delegate;
1:aa20c34: 
1:aa20c34:     /**
1:aa20c34:      * The unique name for this managed XAResource.  This name will be used
1:aa20c34:      * by the transaction manager to recover transactions.
1:aa20c34:      */
1:aa20c34:     public void setName(String name) {
1:aa20c34:         this.name = name;
3:aa20c34:     }
1:aa20c34: 
1:aa20c34:     /**
1:ca23c31:      * The CommonDataSource to wrap.
1:db3b209:      *
1:db3b209:      * @org.apache.xbean.Property required=true
1:db3b209:      */
1:ca23c31:     public void setDataSource(CommonDataSource dataSource) {
1:db3b209:         this.dataSource = dataSource;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * The XA TransactionManager to use to enlist the JDBC connections into.
1:db3b209:      *
1:db3b209:      * @org.apache.xbean.Property required=true
1:db3b209:      */
1:db3b209:     public void setTransactionManager(AriesTransactionManager transactionManager) {
1:db3b209:         this.transactionManager = transactionManager;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * Specify which SQL exceptions are fatal.
1:db3b209:      * Can be all, none, known or custom(xx,yy...).
1:db3b209:      */
1:db3b209:     public void setExceptionSorter(String exceptionSorter) {
1:db3b209:         this.exceptionSorter = exceptionSorter;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * The user name used to establish the connection.
1:db3b209:      */
1:db3b209:     public void setUsername(String username) {
1:db3b209:         this.username = username;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * The password credential used to establish the connection.
1:db3b209:      */
1:db3b209:     public void setPassword(String password) {
1:db3b209:         this.password = password;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setAllConnectionsEquals(boolean allConnectionsEquals) {
1:db3b209:         this.allConnectionsEquals = allConnectionsEquals;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setConnectionMaxIdleMinutes(int connectionMaxIdleMinutes) {
1:db3b209:         this.connectionMaxIdleMinutes = connectionMaxIdleMinutes;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setConnectionMaxWaitMilliseconds(int connectionMaxWaitMilliseconds) {
1:db3b209:         this.connectionMaxWaitMilliseconds = connectionMaxWaitMilliseconds;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * Pool partition strategy.
1:db3b209:      * Can be none, by-connector-properties or by-subject (defaults to none).
1:db3b209:      */
1:db3b209:     public void setPartitionStrategy(String partitionStrategy) {
1:db3b209:         this.partitionStrategy = partitionStrategy;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * If pooling is enabled (defaults to true).
1:db3b209:      * @param pooling
1:db3b209:      */
1:db3b209:     public void setPooling(boolean pooling) {
1:db3b209:         this.pooling = pooling;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * Maximum pool size (defaults to 10).
1:db3b209:      */
1:db3b209:     public void setPoolMaxSize(int poolMaxSize) {
1:db3b209:         this.poolMaxSize = poolMaxSize;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * Minimum pool size (defaults to 0).
1:db3b209:      */
1:db3b209:     public void setPoolMinSize(int poolMinSize) {
1:db3b209:         this.poolMinSize = poolMinSize;
1:db3b209:     }
1:db3b209: 
1:48ad380:      /**
1:48ad380:      * If validation on connection matching is enabled (defaults to true).
1:48ad380:      * @param validateOnMatch
1:48ad380:      */
1:48ad380:     public void setValidateOnMatch(boolean validateOnMatch) {
1:48ad380:         this.validateOnMatch = validateOnMatch;
1:48ad380:     }
1:48ad380: 
1:48ad380:     /**
1:48ad380:      * If periodically background validation is enabled (defaults to false).
1:48ad380:      * @param backgroundValidation
1:48ad380:      */
1:48ad380:     public void setBackgroundValidation(boolean backgroundValidation) {
1:48ad380:         this.backgroundValidation = backgroundValidation;
1:48ad380:     }
1:48ad380: 
1:48ad380:     /**
1:48ad380:      * Background validation period (defaults to 600000)
1:48ad380:      * @param backgroundValidationMilliseconds
1:48ad380:      */
1:48ad380:     public void setBackgroundValidationMilliseconds(int backgroundValidationMilliseconds) {
1:48ad380:         this.backgroundValidationMilliseconds = backgroundValidationMilliseconds;
1:48ad380:     }
1:48ad380: 
1:db3b209:     /**
1:db3b209:      * Transaction support.
1:db3b209:      * Can be none, local or xa (defaults to xa).
1:db3b209:      */
1:db3b209:     public void setTransaction(String transaction) {
1:db3b209:         this.transaction = transaction;
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:aa20c34:      * @org.apache.xbean.InitMethod
1:aa20c34:      */
1:db3b209:     public void start() throws Exception {
1:ca23c31:         AbstractMCFFactory mcf;
1:94c60fb:         if (("xa".equals(transaction) || "local".equals(transaction)) && transactionManager == null) {
1:94c60fb:             throw new IllegalArgumentException("xa or local transactions specified, but no TransactionManager set");
1:94c60fb:         }
1:94c60fb:         if ("xa".equals(transaction) && !(dataSource instanceof XADataSource)) {
1:94c60fb:             throw new IllegalArgumentException("xa transactions specified, but DataSource does not implement javax.sql.XADataSource");
1:94c60fb:         }
1:94c60fb:         if ("xa".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {
1:ca23c31:             mcf = new XADataSourceMCFFactory();
2:ca23c31:             if (transaction == null) {
1:ca23c31:                 transaction = "xa";
1:ca23c31:             }
1:b31f5f9:         } else if (dataSource instanceof DataSource) {
1:b31f5f9:             mcf = new DataSourceMCFFactory();
1:b31f5f9:             if (transaction == null) {
1:9e6b429:                 transaction = transactionManager != null ? "local" : "none";
1:b31f5f9:             }
1:ca23c31:         } else {
1:ca23c31:             throw new IllegalArgumentException("dataSource must be of type javax.sql.DataSource/XADataSource");
1:ca23c31:         }
1:db3b209:         mcf.setDataSource(dataSource);
1:db3b209:         mcf.setExceptionSorterAsString(exceptionSorter);
1:db3b209:         mcf.setUserName(username);
1:db3b209:         mcf.setPassword(password);
1:db3b209:         mcf.init();
1:db3b209: 
1:db3b209:         ConnectionManagerFactory cm = new ConnectionManagerFactory();
1:db3b209:         cm.setManagedConnectionFactory(mcf.getConnectionFactory());
1:db3b209:         cm.setTransactionManager(transactionManager);
1:db3b209:         cm.setAllConnectionsEqual(allConnectionsEquals);
1:db3b209:         cm.setConnectionMaxIdleMinutes(connectionMaxIdleMinutes);
1:db3b209:         cm.setConnectionMaxWaitMilliseconds(connectionMaxWaitMilliseconds);
1:db3b209:         cm.setPartitionStrategy(partitionStrategy);
1:db3b209:         cm.setPooling(pooling);
1:db3b209:         cm.setPoolMaxSize(poolMaxSize);
1:db3b209:         cm.setPoolMinSize(poolMinSize);
1:48ad380:         cm.setValidateOnMatch(validateOnMatch);
1:48ad380:         cm.setBackgroundValidation(backgroundValidation);
1:48ad380:         cm.setBackgroundValidationMilliseconds(backgroundValidationMilliseconds);
1:db3b209:         cm.setTransaction(transaction);
1:8a65caa:         cm.setName(name);
1:db3b209:         cm.init();
1:db3b209: 
1:db3b209:         delegate = (DataSource) mcf.getConnectionFactory().createConnectionFactory(cm.getConnectionManager());
1:db3b209: 
1:b31f5f9:         if (dataSource instanceof XADataSource) {
1:ca23c31:             Recovery.recover(name, (XADataSource) dataSource, transactionManager);
1:ca23c31:         }
1:ca23c31:     }
1:db3b209: 
1:db3b209:     //---------------------------
1:db3b209:     // DataSource implementation
1:db3b209:     //---------------------------
1:db3b209: 
1:db3b209:     public Connection getConnection() throws SQLException {
1:db3b209:         return delegate.getConnection();
1:db3b209:     }
1:db3b209: 
1:db3b209:     public Connection getConnection(String username, String password) throws SQLException {
1:db3b209:         return delegate.getConnection(username, password);
1:db3b209:     }
1:db3b209: 
1:db3b209:     public PrintWriter getLogWriter() throws SQLException {
1:db3b209:         return delegate.getLogWriter();
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * @org.apache.xbean.Property hidden=true
1:db3b209:      */
1:db3b209:     public void setLogWriter(PrintWriter out) throws SQLException {
1:db3b209:         delegate.setLogWriter(out);
1:db3b209:     }
1:db3b209: 
1:db3b209:     /**
1:db3b209:      * @org.apache.xbean.Property hidden=true
1:db3b209:      */
1:db3b209:     public void setLoginTimeout(int seconds) throws SQLException {
1:db3b209:         delegate.setLoginTimeout(seconds);
1:db3b209:     }
1:db3b209: 
1:db3b209:     public int getLoginTimeout() throws SQLException {
1:db3b209:         return delegate.getLoginTimeout();
1:db3b209:     }
1:db3b209: 
1:db3b209:     @IgnoreJRERequirement
1:db3b209:     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:db3b209:         throw new SQLFeatureNotSupportedException();
1:db3b209:     }
1:db3b209: 
1:db3b209:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:db3b209:         return null;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:db3b209:         return false;
1:db3b209:     }
1:db3b209: 
1:aa20c34: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9e6b429
/////////////////////////////////////////////////////////////////////////
1:                 transaction = transactionManager != null ? "local" : "none";
commit:94c60fb
/////////////////////////////////////////////////////////////////////////
1:         if (("xa".equals(transaction) || "local".equals(transaction)) && transactionManager == null) {
1:             throw new IllegalArgumentException("xa or local transactions specified, but no TransactionManager set");
1:         }
1:         if ("xa".equals(transaction) && !(dataSource instanceof XADataSource)) {
1:             throw new IllegalArgumentException("xa transactions specified, but DataSource does not implement javax.sql.XADataSource");
1:         }
1:         if ("xa".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {
/////////////////////////////////////////////////////////////////////////
0:                 transaction = "none";
commit:8a65caa
/////////////////////////////////////////////////////////////////////////
1:         cm.setName(name);
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1:     private boolean validateOnMatch = true;
1:     private boolean backgroundValidation = false;
1:     private int backgroundValidationMilliseconds = 600000;
/////////////////////////////////////////////////////////////////////////
1:      /**
1:      * If validation on connection matching is enabled (defaults to true).
1:      * @param validateOnMatch
1:      */
1:     public void setValidateOnMatch(boolean validateOnMatch) {
1:         this.validateOnMatch = validateOnMatch;
1:     }
1: 
1:     /**
1:      * If periodically background validation is enabled (defaults to false).
1:      * @param backgroundValidation
1:      */
1:     public void setBackgroundValidation(boolean backgroundValidation) {
1:         this.backgroundValidation = backgroundValidation;
1:     }
1: 
1:     /**
1:      * Background validation period (defaults to 600000)
1:      * @param backgroundValidationMilliseconds
1:      */
1:     public void setBackgroundValidationMilliseconds(int backgroundValidationMilliseconds) {
1:         this.backgroundValidationMilliseconds = backgroundValidationMilliseconds;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         cm.setValidateOnMatch(validateOnMatch);
1:         cm.setBackgroundValidation(backgroundValidation);
1:         cm.setBackgroundValidationMilliseconds(backgroundValidationMilliseconds);
commit:b31f5f9
/////////////////////////////////////////////////////////////////////////
1:         if (dataSource instanceof XADataSource) {
1:         } else if (dataSource instanceof DataSource) {
1:             mcf = new DataSourceMCFFactory();
1:             if (transaction == null) {
0:                 transaction = "local";
1:             }
commit:ca23c31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.jdbc.internal.AbstractMCFFactory;
1: import org.apache.aries.transaction.jdbc.internal.DataSourceMCFFactory;
1: import javax.sql.CommonDataSource;
/////////////////////////////////////////////////////////////////////////
1:     private CommonDataSource dataSource;
/////////////////////////////////////////////////////////////////////////
1:     private String transaction;
/////////////////////////////////////////////////////////////////////////
1:      * The CommonDataSource to wrap.
1:     public void setDataSource(CommonDataSource dataSource) {
/////////////////////////////////////////////////////////////////////////
1:         AbstractMCFFactory mcf;
0:         if (dataSource instanceof DataSource) {
0:             mcf = new DataSourceMCFFactory();
1:             if (transaction == null) {
0:                 transaction = "local";
1:             }
0:         } else if (dataSource instanceof XADataSource) {
1:             mcf = new XADataSourceMCFFactory();
1:             if (transaction == null) {
1:                 transaction = "xa";
1:             }
1:         } else {
1:             throw new IllegalArgumentException("dataSource must be of type javax.sql.DataSource/XADataSource");
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (dataSource instanceof XADataSource) {
1:             Recovery.recover(name, (XADataSource) dataSource, transactionManager);
1:         }
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.AriesTransactionManager;
1: import org.apache.aries.transaction.jdbc.internal.ConnectionManagerFactory;
1: import org.apache.aries.transaction.jdbc.internal.Recovery;
1: import org.apache.aries.transaction.jdbc.internal.XADataSourceMCFFactory;
1: import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
/////////////////////////////////////////////////////////////////////////
1: public class RecoverableDataSource implements DataSource {
0:     private XADataSource dataSource;
1:     private AriesTransactionManager transactionManager;
1:     private String exceptionSorter = "all";
1:     private String username = "";
1:     private String password = "";
1:     private boolean allConnectionsEquals = true;
1:     private int connectionMaxIdleMinutes = 15;
1:     private int connectionMaxWaitMilliseconds = 5000;
1:     private String partitionStrategy = "none";
1:     private boolean pooling = true;
1:     private int poolMaxSize = 10;
1:     private int poolMinSize = 0;
0:     private String transaction = "xa";
1:     private DataSource delegate;
0:      * The XADataSource to wrap.
1:      *
1:      * @org.apache.xbean.Property required=true
1:      */
0:     public void setDataSource(XADataSource dataSource) {
1:         this.dataSource = dataSource;
1:     }
1: 
1:     /**
1:      * The XA TransactionManager to use to enlist the JDBC connections into.
1:      *
1:      * @org.apache.xbean.Property required=true
1:      */
1:     public void setTransactionManager(AriesTransactionManager transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     /**
1:      * Specify which SQL exceptions are fatal.
1:      * Can be all, none, known or custom(xx,yy...).
1:      */
1:     public void setExceptionSorter(String exceptionSorter) {
1:         this.exceptionSorter = exceptionSorter;
1:     }
1: 
1:     /**
1:      * The user name used to establish the connection.
1:      */
1:     public void setUsername(String username) {
1:         this.username = username;
1:     }
1: 
1:     /**
1:      * The password credential used to establish the connection.
1:      */
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     public void setAllConnectionsEquals(boolean allConnectionsEquals) {
1:         this.allConnectionsEquals = allConnectionsEquals;
1:     }
1: 
1:     public void setConnectionMaxIdleMinutes(int connectionMaxIdleMinutes) {
1:         this.connectionMaxIdleMinutes = connectionMaxIdleMinutes;
1:     }
1: 
1:     public void setConnectionMaxWaitMilliseconds(int connectionMaxWaitMilliseconds) {
1:         this.connectionMaxWaitMilliseconds = connectionMaxWaitMilliseconds;
1:     }
1: 
1:     /**
1:      * Pool partition strategy.
1:      * Can be none, by-connector-properties or by-subject (defaults to none).
1:      */
1:     public void setPartitionStrategy(String partitionStrategy) {
1:         this.partitionStrategy = partitionStrategy;
1:     }
1: 
1:     /**
1:      * If pooling is enabled (defaults to true).
1:      * @param pooling
1:      */
1:     public void setPooling(boolean pooling) {
1:         this.pooling = pooling;
1:     }
1: 
1:     /**
1:      * Maximum pool size (defaults to 10).
1:      */
1:     public void setPoolMaxSize(int poolMaxSize) {
1:         this.poolMaxSize = poolMaxSize;
1:     }
1: 
1:     /**
1:      * Minimum pool size (defaults to 0).
1:      */
1:     public void setPoolMinSize(int poolMinSize) {
1:         this.poolMinSize = poolMinSize;
1:     }
1: 
1:     /**
1:      * Transaction support.
1:      * Can be none, local or xa (defaults to xa).
1:      */
1:     public void setTransaction(String transaction) {
1:         this.transaction = transaction;
1:     }
1: 
1:     /**
1:     public void start() throws Exception {
0:         XADataSourceMCFFactory mcf = new XADataSourceMCFFactory();
1:         mcf.setDataSource(dataSource);
1:         mcf.setExceptionSorterAsString(exceptionSorter);
1:         mcf.setUserName(username);
1:         mcf.setPassword(password);
1:         mcf.init();
1: 
1:         ConnectionManagerFactory cm = new ConnectionManagerFactory();
1:         cm.setManagedConnectionFactory(mcf.getConnectionFactory());
1:         cm.setTransactionManager(transactionManager);
1:         cm.setAllConnectionsEqual(allConnectionsEquals);
1:         cm.setConnectionMaxIdleMinutes(connectionMaxIdleMinutes);
1:         cm.setConnectionMaxWaitMilliseconds(connectionMaxWaitMilliseconds);
1:         cm.setPartitionStrategy(partitionStrategy);
1:         cm.setPooling(pooling);
1:         cm.setPoolMaxSize(poolMaxSize);
1:         cm.setPoolMinSize(poolMinSize);
1:         cm.setTransaction(transaction);
1:         cm.init();
1: 
1:         delegate = (DataSource) mcf.getConnectionFactory().createConnectionFactory(cm.getConnectionManager());
1: 
0:         Recovery.recover(name, dataSource, transactionManager);
1: 
1:     //---------------------------
1:     // DataSource implementation
1:     //---------------------------
1: 
1:     public Connection getConnection() throws SQLException {
1:         return delegate.getConnection();
1:     }
1: 
1:     public Connection getConnection(String username, String password) throws SQLException {
1:         return delegate.getConnection(username, password);
1:     }
1: 
1:     public PrintWriter getLogWriter() throws SQLException {
1:         return delegate.getLogWriter();
1:     }
1: 
1:     /**
1:      * @org.apache.xbean.Property hidden=true
1:      */
1:     public void setLogWriter(PrintWriter out) throws SQLException {
1:         delegate.setLogWriter(out);
1:     }
1: 
1:     /**
1:      * @org.apache.xbean.Property hidden=true
1:      */
1:     public void setLoginTimeout(int seconds) throws SQLException {
1:         delegate.setLoginTimeout(seconds);
1:     }
1: 
1:     public int getLoginTimeout() throws SQLException {
1:         return delegate.getLoginTimeout();
1:     }
1: 
1:     @IgnoreJRERequirement
1:     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:         throw new SQLFeatureNotSupportedException();
1:     }
1: 
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         return null;
1:     }
1: 
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         return false;
1:     }
1: 
commit:aa20c34
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc;
1: 
0: import org.apache.aries.transaction.jdbc.internal.GenericResourceManager;
0: import org.apache.aries.transaction.jdbc.internal.XADatasourceEnlistingWrapper;
1: 
1: /**
1:  * Defines a JDBC DataSource that will auto-enlist into existing XA transactions.
1:  * The DataSource will also be registered with the Aries/Geronimo transaction
1:  * manager in order to provide proper transaction recovery at startup.
1:  * Other considerations such as connection pooling and error handling are
1:  * completely ignored.
1:  *
1:  * @org.apache.xbean.XBean
1:  */
0: public class RecoverableDataSource extends XADatasourceEnlistingWrapper {
1: 
1:     private String name;
1: 
0:     public String getName() {
0:         return name;
1:     }
1: 
1:     /**
1:      * The unique name for this managed XAResource.  This name will be used
1:      * by the transaction manager to recover transactions.
1:      *
0:      * @param name
1:      */
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
1:     /**
1:      * @org.apache.xbean.InitMethod
1:      */
0:     public void start() {
0:         new GenericResourceManager(getName(), getTransactionManager(), getDataSource()).recoverResource();
1:     }
1: }
============================================================================