1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanArgument;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanProperty;
1:fdf3952: 
1:fdf3952: public class BPBeanMetadata extends BPComponentMetadata implements BPTarget {
1:fdf3952: 
1:fdf3952:     private String className;
1:fdf3952: 
1:fdf3952:     private String destroyMethod;
1:fdf3952: 
1:fdf3952:     private String factoryMethod;
1:fdf3952: 
1:fdf3952:     private String initMethod;
1:fdf3952: 
1:fdf3952:     private String scope;
1:fdf3952: 
1:fdf3952:     private BPBeanArgument[] arguments;
1:fdf3952: 
1:fdf3952:     private BPBeanProperty[] properties;
1:fdf3952: 
1:fdf3952:     private BPTarget factoryComponent;
1:fdf3952: 
1:fdf3952:     public BPBeanMetadata(CompositeData bean) {
1:fdf3952:         super(bean);
1:fdf3952:         className = (String) bean.get(BlueprintMetadataMBean.CLASS_NAME);
1:fdf3952:         destroyMethod = (String) bean.get(BlueprintMetadataMBean.DESTROY_METHOD);
1:fdf3952:         factoryMethod = (String) bean.get(BlueprintMetadataMBean.FACTORY_METHOD);
1:fdf3952:         initMethod = (String) bean.get(BlueprintMetadataMBean.INIT_METHOD);
1:fdf3952:         scope = (String) bean.get(BlueprintMetadataMBean.SCOPE);
1:fdf3952: 
1:fdf3952:         Byte[] buf = (Byte[]) bean.get(BlueprintMetadataMBean.FACTORY_COMPONENT);
1:fdf3952:         factoryComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_args = (CompositeData[]) bean.get(BlueprintMetadataMBean.ARGUMENTS);
1:fdf3952:         arguments = new BPBeanArgument[cd_args.length];
1:fdf3952:         for (int i = 0; i < arguments.length; i++) {
1:fdf3952:             arguments[i] = new BPBeanArgument(cd_args[i]);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_props = (CompositeData[]) bean.get(BlueprintMetadataMBean.PROPERTIES);
1:fdf3952:         properties = new BPBeanProperty[cd_props.length];
1:fdf3952:         for (int i = 0; i < properties.length; i++) {
1:fdf3952:             properties[i] = new BPBeanProperty(cd_props[i]);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPBeanMetadata(BeanMetadata bean) {
1:fdf3952:         super(bean);
1:fdf3952:         className = bean.getClassName();
1:fdf3952:         destroyMethod = bean.getDestroyMethod();
1:fdf3952:         factoryMethod = bean.getFactoryMethod();
1:fdf3952:         initMethod = bean.getInitMethod();
1:fdf3952:         scope = bean.getScope();
1:fdf3952: 
1:fdf3952:         factoryComponent = (BPTarget) Util.metadata2BPMetadata(bean.getFactoryComponent());
1:fdf3952: 
1:fdf3952:         arguments = new BPBeanArgument[bean.getArguments().size()];
1:fdf3952:         int i = 0;
1:fdf3952:         for (Object arg : bean.getArguments()) {
1:fdf3952:             arguments[i++] = new BPBeanArgument((BeanArgument) arg);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         properties = new BPBeanProperty[bean.getProperties().size()];
1:fdf3952:         i = 0;
1:fdf3952:         for (Object prop : bean.getProperties()) {
1:fdf3952:             properties[i++] = new BPBeanProperty((BeanProperty) prop);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected Map<String, Object> getItemsMap() {
1:fdf3952:         Map<String, Object> items = super.getItemsMap();
1:fdf3952: 
1:fdf3952:         // add its fields to the map
1:fdf3952:         items.put(BlueprintMetadataMBean.CLASS_NAME, className);
1:fdf3952:         items.put(BlueprintMetadataMBean.DESTROY_METHOD, destroyMethod);
1:fdf3952:         items.put(BlueprintMetadataMBean.FACTORY_METHOD, factoryMethod);
1:fdf3952:         items.put(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:fdf3952:         items.put(BlueprintMetadataMBean.SCOPE, scope);
1:fdf3952: 
1:fdf3952:         items.put(BlueprintMetadataMBean.FACTORY_COMPONENT, Util.bpMetadata2BoxedBinary(factoryComponent));
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_args = new CompositeData[arguments.length];
1:fdf3952:         for (int i = 0; i < arguments.length; i++) {
1:fdf3952:             cd_args[i] = arguments[i].asCompositeData();
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.ARGUMENTS, cd_args);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_props = new CompositeData[properties.length];
1:fdf3952:         for (int i = 0; i < properties.length; i++) {
1:fdf3952:             cd_props[i] = properties[i].asCompositeData();
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.PROPERTIES, cd_props);
1:fdf3952: 
1:fdf3952:         return items;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintMetadataMBean.BEAN_METADATA_TYPE, getItemsMap());
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPBeanArgument[] getArguments() {
1:fdf3952:         return arguments;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getClassName() {
1:fdf3952:         return className;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getDestroyMethod() {
1:fdf3952:         return destroyMethod;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPTarget getFactoryComponent() {
1:fdf3952:         return factoryComponent;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getFactoryMethod() {
1:fdf3952:         return factoryMethod;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getInitMethod() {
1:fdf3952:         return initMethod;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPBeanProperty[] getProperties() {
1:fdf3952:         return properties;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getScope() {
1:fdf3952:         return scope;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: 
1: public class BPBeanMetadata extends BPComponentMetadata implements BPTarget {
1: 
1:     private String className;
1: 
1:     private String destroyMethod;
1: 
1:     private String factoryMethod;
1: 
1:     private String initMethod;
1: 
1:     private String scope;
1: 
1:     private BPBeanArgument[] arguments;
1: 
1:     private BPBeanProperty[] properties;
1: 
1:     private BPTarget factoryComponent;
1: 
1:     public BPBeanMetadata(CompositeData bean) {
1:         super(bean);
1:         className = (String) bean.get(BlueprintMetadataMBean.CLASS_NAME);
1:         destroyMethod = (String) bean.get(BlueprintMetadataMBean.DESTROY_METHOD);
1:         factoryMethod = (String) bean.get(BlueprintMetadataMBean.FACTORY_METHOD);
1:         initMethod = (String) bean.get(BlueprintMetadataMBean.INIT_METHOD);
1:         scope = (String) bean.get(BlueprintMetadataMBean.SCOPE);
1: 
1:         Byte[] buf = (Byte[]) bean.get(BlueprintMetadataMBean.FACTORY_COMPONENT);
1:         factoryComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1: 
1:         CompositeData[] cd_args = (CompositeData[]) bean.get(BlueprintMetadataMBean.ARGUMENTS);
1:         arguments = new BPBeanArgument[cd_args.length];
1:         for (int i = 0; i < arguments.length; i++) {
1:             arguments[i] = new BPBeanArgument(cd_args[i]);
1:         }
1: 
1:         CompositeData[] cd_props = (CompositeData[]) bean.get(BlueprintMetadataMBean.PROPERTIES);
1:         properties = new BPBeanProperty[cd_props.length];
1:         for (int i = 0; i < properties.length; i++) {
1:             properties[i] = new BPBeanProperty(cd_props[i]);
1:         }
1: 
1:     }
1: 
1:     public BPBeanMetadata(BeanMetadata bean) {
1:         super(bean);
1:         className = bean.getClassName();
1:         destroyMethod = bean.getDestroyMethod();
1:         factoryMethod = bean.getFactoryMethod();
1:         initMethod = bean.getInitMethod();
1:         scope = bean.getScope();
1: 
1:         factoryComponent = (BPTarget) Util.metadata2BPMetadata(bean.getFactoryComponent());
1: 
1:         arguments = new BPBeanArgument[bean.getArguments().size()];
1:         int i = 0;
1:         for (Object arg : bean.getArguments()) {
1:             arguments[i++] = new BPBeanArgument((BeanArgument) arg);
1:         }
1: 
1:         properties = new BPBeanProperty[bean.getProperties().size()];
1:         i = 0;
1:         for (Object prop : bean.getProperties()) {
1:             properties[i++] = new BPBeanProperty((BeanProperty) prop);
1:         }
1:     }
1: 
1:     protected Map<String, Object> getItemsMap() {
1:         Map<String, Object> items = super.getItemsMap();
1: 
1:         // add its fields to the map
1:         items.put(BlueprintMetadataMBean.CLASS_NAME, className);
1:         items.put(BlueprintMetadataMBean.DESTROY_METHOD, destroyMethod);
1:         items.put(BlueprintMetadataMBean.FACTORY_METHOD, factoryMethod);
1:         items.put(BlueprintMetadataMBean.INIT_METHOD, initMethod);
1:         items.put(BlueprintMetadataMBean.SCOPE, scope);
1: 
1:         items.put(BlueprintMetadataMBean.FACTORY_COMPONENT, Util.bpMetadata2BoxedBinary(factoryComponent));
1: 
1:         CompositeData[] cd_args = new CompositeData[arguments.length];
1:         for (int i = 0; i < arguments.length; i++) {
1:             cd_args[i] = arguments[i].asCompositeData();
1:         }
1:         items.put(BlueprintMetadataMBean.ARGUMENTS, cd_args);
1: 
1:         CompositeData[] cd_props = new CompositeData[properties.length];
1:         for (int i = 0; i < properties.length; i++) {
1:             cd_props[i] = properties[i].asCompositeData();
1:         }
1:         items.put(BlueprintMetadataMBean.PROPERTIES, cd_props);
1: 
1:         return items;
1:     }
1: 
1:     public CompositeData asCompositeData() {
1:         try {
1:             return new CompositeDataSupport(BlueprintMetadataMBean.BEAN_METADATA_TYPE, getItemsMap());
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public BPBeanArgument[] getArguments() {
1:         return arguments;
1:     }
1: 
1:     public String getClassName() {
1:         return className;
1:     }
1: 
1:     public String getDestroyMethod() {
1:         return destroyMethod;
1:     }
1: 
1:     public BPTarget getFactoryComponent() {
1:         return factoryComponent;
1:     }
1: 
1:     public String getFactoryMethod() {
1:         return factoryMethod;
1:     }
1: 
1:     public String getInitMethod() {
1:         return initMethod;
1:     }
1: 
1:     public BPBeanProperty[] getProperties() {
1:         return properties;
1:     }
1: 
1:     public String getScope() {
1:         return scope;
1:     }
1: }
============================================================================