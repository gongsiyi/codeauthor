1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.internal;
3:1129914: 
1:1129914: import java.util.Collections;
1:1129914: import java.util.HashMap;
1:1129914: import java.util.Map;
1:1129914: 
1:1129914: import org.osgi.framework.Constants;
1:1129914: import org.osgi.framework.Filter;
1:1129914: import org.osgi.framework.FrameworkUtil;
1:1129914: import org.osgi.framework.InvalidSyntaxException;
1:1129914: import org.osgi.framework.Version;
1:deca8ed: import org.osgi.framework.VersionRange;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:1129914: import org.osgi.service.subsystem.SubsystemException;
1:1129914: 
1:1c9c28b: public class OsgiIdentityRequirement extends AbstractRequirement {
1:226c63f: 	private static Filter createFilter(String symbolicName, Version version, String type) {
1:226c63f: 		return createFilter(
1:226c63f: 				symbolicName,
1:226c63f: 				new StringBuilder()
1:226c63f: 					.append('(')
1:a1c6951: 					.append(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE)
1:226c63f: 					.append('=')
1:226c63f: 					.append(version)
1:226c63f: 					.append(')')
1:226c63f: 					.toString(),
1:226c63f: 				type);
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	private static Filter createFilter(String symbolicName, VersionRange versionRange, String type) {
1:226c63f: 		return createFilter(
1:226c63f: 				symbolicName,
1:deca8ed: 				versionRange.toFilterString(Constants.VERSION_ATTRIBUTE),
1:226c63f: 				type);
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	private static Filter createFilter(Resource resource) {
1:a1c6951: 		Map<String, Object> attributes = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0).getAttributes();
1:a1c6951: 		String symbolicName = String.valueOf(attributes.get(IdentityNamespace.IDENTITY_NAMESPACE));
1:a1c6951: 		Version version = Version.parseVersion(String.valueOf(attributes.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE)));
1:a1c6951: 		String type = String.valueOf(attributes.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
1:226c63f: 		return createFilter(symbolicName, version, type);
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	private static Filter createFilter(String symbolicName, String versionFilter, String type) {
1:226c63f: 		try {
1:226c63f: 			return FrameworkUtil.createFilter(createFilterString(symbolicName, versionFilter, type));
1:226c63f: 		}
1:226c63f: 		catch (InvalidSyntaxException e) {
1:226c63f: 			throw new SubsystemException(e);
1:226c63f: 		}
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	private static String createFilterString(String symbolicName, String versionFilter, String type) {
1:226c63f: 		return new StringBuilder("(&(")
1:a1c6951: 			.append(IdentityNamespace.IDENTITY_NAMESPACE)
1:226c63f: 			.append('=')
1:226c63f: 			.append(symbolicName)
1:226c63f: 			.append(')')
1:226c63f: 			.append(versionFilter)
1:226c63f: 			.append('(')
1:a1c6951: 			.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE)
1:226c63f: 			.append('=')
1:226c63f: 			.append(type)
1:226c63f: 			.append("))").toString();
4:1129914: 	}
1:1129914: 	
1:1129914: 	private final Map<String, String> directives = new HashMap<String, String>();
1:1129914: 	private final Resource resource;
1:226c63f: 	private final boolean transitive;
1:1129914: 	
1:226c63f: 	public OsgiIdentityRequirement(String symbolicName, VersionRange versionRange, String type, boolean transitive) {
1:226c63f: 		this(createFilter(symbolicName, versionRange, type), null, transitive);
1:1129914: 	}
1:1129914: 	
1:226c63f: 	public OsgiIdentityRequirement(String symbolicName, Version version, String type, boolean transitive) {
1:226c63f: 		this(createFilter(symbolicName, version, type), null, transitive);
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	public OsgiIdentityRequirement(Resource resource, boolean transitive) {
1:226c63f: 		this(createFilter(resource), resource, transitive);
1:226c63f: 	}
1:226c63f: 	
1:226c63f: 	private OsgiIdentityRequirement(Filter filter, Resource resource, boolean transitive) {
1:1129914: 		this.resource = resource;
1:226c63f: 		this.transitive = transitive;
1:046b8ec: 		directives.put(Constants.FILTER_DIRECTIVE, filter.toString());
1:1c9c28b: 		// TODO Let's not add these directives until we know what we're doing and that
1:1c9c28b: 		// we really need them.
1:1c9c28b: //		directives.put(ResourceConstants.IDENTITY_SINGLETON_DIRECTIVE, Boolean.FALSE.toString());
1:1c9c28b: //		directives.put(Constants.EFFECTIVE_DIRECTIVE, Constants.EFFECTIVE_RESOLVE);
1:1129914: 	}
1:1129914: 
2:226c63f: 	@Override
1:1129914: 	public Map<String, Object> getAttributes() {
1:1129914: 		return Collections.emptyMap();
1:1129914: 	}
1:1129914: 
1:226c63f: 	@Override
1:1129914: 	public Map<String, String> getDirectives() {
1:1129914: 		return Collections.unmodifiableMap(directives);
1:1129914: 	}
1:1129914: 
1:226c63f: 	@Override
1:1129914: 	public String getNamespace() {
1:a1c6951: 		return IdentityNamespace.IDENTITY_NAMESPACE;
1:1129914: 	}
1:226c63f: 
1:226c63f: 	@Override
1:1129914: 	public Resource getResource() {
1:1129914: 		return resource;
1:1129914: 	}
1:1129914: 	
1:226c63f: 	public boolean isTransitiveDependency() {
1:226c63f: 		return transitive;
1:226c63f: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.VersionRange;
/////////////////////////////////////////////////////////////////////////
1: 				versionRange.toFilterString(Constants.VERSION_ATTRIBUTE),
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1: 					.append(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE)
/////////////////////////////////////////////////////////////////////////
1: 		Map<String, Object> attributes = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0).getAttributes();
1: 		String symbolicName = String.valueOf(attributes.get(IdentityNamespace.IDENTITY_NAMESPACE));
1: 		Version version = Version.parseVersion(String.valueOf(attributes.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE)));
1: 		String type = String.valueOf(attributes.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
/////////////////////////////////////////////////////////////////////////
1: 			.append(IdentityNamespace.IDENTITY_NAMESPACE)
1: 			.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE)
/////////////////////////////////////////////////////////////////////////
1: 		return IdentityNamespace.IDENTITY_NAMESPACE;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.resource.AbstractRequirement;
1: public class OsgiIdentityRequirement extends AbstractRequirement {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		// TODO Let's not add these directives until we know what we're doing and that
1: 		// we really need them.
1: //		directives.put(ResourceConstants.IDENTITY_SINGLETON_DIRECTIVE, Boolean.FALSE.toString());
1: //		directives.put(Constants.EFFECTIVE_DIRECTIVE, Constants.EFFECTIVE_RESOLVE);
/////////////////////////////////////////////////////////////////////////
commit:732a67a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.archive.VersionRangeAttribute;
0: import org.apache.aries.util.VersionRange;
/////////////////////////////////////////////////////////////////////////
0: 				VersionRangeAttribute.toFilterString(versionRange),
commit:046b8ec
/////////////////////////////////////////////////////////////////////////
1: 		directives.put(Constants.FILTER_DIRECTIVE, filter.toString());
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.framework.resource.ResourceConstants;
commit:226c63f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.VersionRange;
/////////////////////////////////////////////////////////////////////////
1: 	private static Filter createFilter(String symbolicName, Version version, String type) {
1: 		return createFilter(
1: 				symbolicName,
1: 				new StringBuilder()
1: 					.append('(')
0: 					.append(ResourceConstants.IDENTITY_VERSION_ATTRIBUTE)
1: 					.append('=')
1: 					.append(version)
1: 					.append(')')
1: 					.toString(),
1: 				type);
1: 	}
1: 	
1: 	private static Filter createFilter(String symbolicName, VersionRange versionRange, String type) {
1: 		return createFilter(
1: 				symbolicName,
0: 				versionRange.toFilterString(ResourceConstants.IDENTITY_VERSION_ATTRIBUTE),
1: 				type);
1: 	}
1: 	
1: 	private static Filter createFilter(Resource resource) {
0: 		Map<String, Object> attributes = resource.getCapabilities(ResourceConstants.IDENTITY_NAMESPACE).get(0).getAttributes();
0: 		String symbolicName = String.valueOf(attributes.get(ResourceConstants.IDENTITY_NAMESPACE));
0: 		Version version = Version.parseVersion(String.valueOf(attributes.get(ResourceConstants.IDENTITY_VERSION_ATTRIBUTE)));
0: 		String type = String.valueOf(attributes.get(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE));
1: 		return createFilter(symbolicName, version, type);
1: 	}
1: 	
1: 	private static Filter createFilter(String symbolicName, String versionFilter, String type) {
1: 		try {
1: 			return FrameworkUtil.createFilter(createFilterString(symbolicName, versionFilter, type));
1: 		}
1: 		catch (InvalidSyntaxException e) {
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: 	
1: 	private static String createFilterString(String symbolicName, String versionFilter, String type) {
1: 		return new StringBuilder("(&(")
0: 			.append(ResourceConstants.IDENTITY_NAMESPACE)
1: 			.append('=')
1: 			.append(symbolicName)
1: 			.append(')')
1: 			.append(versionFilter)
1: 			.append('(')
0: 			.append(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE)
1: 			.append('=')
1: 			.append(type)
1: 			.append("))").toString();
1: 	private final boolean transitive;
1: 	public OsgiIdentityRequirement(String symbolicName, VersionRange versionRange, String type, boolean transitive) {
1: 		this(createFilter(symbolicName, versionRange, type), null, transitive);
1: 	public OsgiIdentityRequirement(String symbolicName, Version version, String type, boolean transitive) {
1: 		this(createFilter(symbolicName, version, type), null, transitive);
1: 	}
1: 	
1: 	public OsgiIdentityRequirement(Resource resource, boolean transitive) {
1: 		this(createFilter(resource), resource, transitive);
1: 	}
1: 	
1: 	private OsgiIdentityRequirement(Filter filter, Resource resource, boolean transitive) {
0: 		this.filter = filter;
1: 		this.transitive = transitive;
1: 	@Override
1: 	@Override
1: 	@Override
1: 	@Override
1: 	
1: 	public boolean isTransitiveDependency() {
1: 		return transitive;
1: 	}
1: 	@Override
/////////////////////////////////////////////////////////////////////////
commit:e6bf465
/////////////////////////////////////////////////////////////////////////
0: 			// TODO This does not take into account version ranges.
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Requirement;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.framework.wiring.ResourceConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: public class OsgiIdentityRequirement implements Requirement {
0: 	public static OsgiIdentityRequirement newInstance(SubsystemContentHeader.Content content) {
0: 		return new OsgiIdentityRequirement(null, content.getName(), content.getVersion(), content.getType());
1: 	}
1: 	
1: 	private final Map<String, String> directives = new HashMap<String, String>();
0: 	private final Filter filter;
1: 	private final Resource resource;
1: 	
0: 	public OsgiIdentityRequirement(Resource resource, String symbolicName, Version version) {
0: 		this(resource, symbolicName, version, ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: 	}
1: 	
0: 	public OsgiIdentityRequirement(Resource resource, String symbolicName, Version version, String type) {
1: 		this.resource = resource;
0: 		StringBuilder builder = new StringBuilder("(&(")
0: 			.append(ResourceConstants.IDENTITY_NAMESPACE)
0: 			.append('=')
0: 			.append(symbolicName)
0: 			.append(")(")
0: 			.append(ResourceConstants.IDENTITY_VERSION_ATTRIBUTE)
0: 			.append('=')
0: 			.append(version)
0: 			.append(")(")
0: 			.append(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE)
0: 			.append('=')
0: 			.append(type)
0: 			.append("))");
0: 		try {
0: 			filter = FrameworkUtil.createFilter(builder.toString());
1: 		}
0: 		catch (InvalidSyntaxException e) {
0: 			throw new SubsystemException(e);
1: 		}
0: 		directives.put(ResourceConstants.IDENTITY_SINGLETON_DIRECTIVE, Boolean.FALSE.toString());
0: 		directives.put(Constants.EFFECTIVE_DIRECTIVE, Constants.EFFECTIVE_RESOLVE);
1: 	}
1: 
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	public String getNamespace() {
0: 		return ResourceConstants.IDENTITY_NAMESPACE;
1: 	}
1: 
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: 
0: 	public boolean matches(Capability capability) {
0: 		if (capability == null) return false;
0: 		if (!capability.getNamespace().equals(getNamespace())) return false;
0: 		if (!filter.matches(capability.getAttributes())) return false;
0: 		// TODO Check directives.
0: 		return true;
1: 	}
1: 
1: }
============================================================================