1:76b662a: /*
1:76b662a:  * Licensed to the Apache Software Foundation (ASF) under one
1:76b662a:  * or more contributor license agreements.  See the NOTICE file
1:76b662a:  * distributed with this work for additional information
1:76b662a:  * regarding copyright ownership.  The ASF licenses this file
1:76b662a:  * to you under the Apache License, Version 2.0 (the
1:76b662a:  * "License"); you may not use this file except in compliance
1:76b662a:  * with the License.  You may obtain a copy of the License at
1:76b662a:  *
1:76b662a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:76b662a:  *
1:76b662a:  * Unless required by applicable law or agreed to in writing,
1:76b662a:  * software distributed under the License is distributed on an
1:76b662a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:76b662a:  * KIND, either express or implied.  See the License for the
1:76b662a:  * specific language governing permissions and limitations
1:76b662a:  * under the License.
1:76b662a:  */
1:76b662a: package org.apache.aries.blueprint;
1:76b662a: 
1:76b662a: import java.lang.reflect.Method;
1:76b662a: 
1:76b662a: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:76b662a: 
1:76b662a: /**
1:76b662a:  * An Interceptor interface provides support for custom interceptor implementation.
1:76b662a:  */
1:76b662a: public interface Interceptor {
1:76b662a:     /**
1:76b662a:      * This is called just before the method m is invocation.
1:76b662a:      * @param cm : the component's metada
1:76b662a:      * @param m: the method to be invoked
1:76b662a:      * @param parameters: method parameters
1:76b662a:      * @return token which will subsequently be passed to postCall
1:76b662a:      * @throws Throwable
1:76b662a:      */
1:76b662a:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable;
1:76b662a:     
1:76b662a:     /**
1:76b662a:      * This method is called after the method m is invoked and returned normally.
1:76b662a:      * @param cm: the component metadata
1:76b662a:      * @param m: the method invoked
1:76b662a:      * @param returnType : the return object
1:76b662a:      * @param preCallToken token returned by preCall
1:76b662a:      * @throws Throwable
1:76b662a:      */
1:76b662a:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken) throws Throwable;
1:76b662a:     
1:76b662a:     /**
1:76b662a:      * The method is called after the method m is invoked and causes an exception.
1:76b662a:      * @param cm : the component metadata
1:76b662a:      * @param m : the method invoked
1:b664100:      * @param ex : the <code>Throwable</code> thrown
1:76b662a:      * @param preCallToken token returned by preCall
1:76b662a:      * @throws Throwable
1:76b662a:      */
1:b664100:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) throws Throwable;
1:76b662a:     
1:76b662a:     
1:76b662a:     /**
1:76b662a:      * Return the rank of the interceptor, which is used to determine the order of the interceptors to be invoked
1:76b662a:      * Rank is between Integer.MIN_VALUE and Integer.MAX_VALUE, interceptors are called in the order of highest value
1:76b662a:      * rank first to lowest value rank last i.e. an interceptor with rank Integer.MAX_VALUE will be called before 
1:76b662a:      * all others (except of the same rank).
1:76b662a:      * @return the rank of the interceptor
1:76b662a:      */
1:76b662a:     public int getRank();
1:76b662a: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
commit:b664100
/////////////////////////////////////////////////////////////////////////
1:      * @param ex : the <code>Throwable</code> thrown
1:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) throws Throwable;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint;
1: 
1: import java.lang.reflect.Method;
1: 
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: 
1: /**
1:  * An Interceptor interface provides support for custom interceptor implementation.
1:  */
1: public interface Interceptor {
1:     /**
1:      * This is called just before the method m is invocation.
1:      * @param cm : the component's metada
1:      * @param m: the method to be invoked
1:      * @param parameters: method parameters
1:      * @return token which will subsequently be passed to postCall
1:      * @throws Throwable
1:      */
1:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable;
1:     
1:     /**
1:      * This method is called after the method m is invoked and returned normally.
1:      * @param cm: the component metadata
1:      * @param m: the method invoked
1:      * @param returnType : the return object
1:      * @param preCallToken token returned by preCall
1:      * @throws Throwable
1:      */
1:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken) throws Throwable;
1:     
1:     /**
1:      * The method is called after the method m is invoked and causes an exception.
1:      * @param cm : the component metadata
1:      * @param m : the method invoked
0:      * @param ex : the exception thrown
1:      * @param preCallToken token returned by preCall
1:      * @throws Throwable
1:      */
0:     public void postCallWithException(ComponentMetadata cm, Method m, Exception ex, Object preCallToken) throws Throwable;
1:     
1:     
1:     /**
1:      * Return the rank of the interceptor, which is used to determine the order of the interceptors to be invoked
1:      * Rank is between Integer.MIN_VALUE and Integer.MAX_VALUE, interceptors are called in the order of highest value
1:      * rank first to lowest value rank last i.e. an interceptor with rank Integer.MAX_VALUE will be called before 
1:      * all others (except of the same rank).
1:      * @return the rank of the interceptor
1:      */
1:     public int getRank();
1: }
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:815f46c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.blueprint;
0: 
0: import java.lang.reflect.Method;
0: 
0: import org.osgi.service.blueprint.reflect.ComponentMetadata;
0: 
0: /**
0:  * An Interceptor interface provides support for custom interceptor implementation.
0:  */
0: public interface Interceptor {
0:     /**
0:      * This is called just before the method m is invocation.
0:      * @param cm : the component's metada
0:      * @param m: the method to be invoked
0:      * @param parameters: method parameters
0:      * @return token which will subsequently be passed to postCall
0:      * @throws Throwable
0:      */
0:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable;
0:     
0:     /**
0:      * This method is called after the method m is invoked and returned normally.
0:      * @param cm: the component metadata
0:      * @param m: the method invoked
0:      * @param returnType : the return object
0:      * @param preCallToken token returned by preCall
0:      * @throws Throwable
0:      */
0:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken) throws Throwable;
0:     
0:     /**
0:      * The method is called after the method m is invoked and causes an exception.
0:      * @param cm : the component metadata
0:      * @param m : the method invoked
0:      * @param ex : the exception thrown
0:      * @param preCallToken token returned by preCall
0:      * @throws Throwable
0:      */
0:     public void postCallWithException(ComponentMetadata cm, Method m, Exception ex, Object preCallToken) throws Throwable;
0:     
0:     
0:     /**
0:      * Return the rank of the interceptor, which is used to determine the order of the interceptors to be invoked
0:      * Rank is between Integer.MIN_VALUE and Integer.MAX_VALUE, interceptors are called in the order of highest value
0:      * rank first to lowest value rank last i.e. an interceptor with rank Integer.MAX_VALUE will be called before 
0:      * all others (except of the same rank).
0:      * @return the rank of the interceptor
0:      */
0:     public int getRank();
0: }
============================================================================