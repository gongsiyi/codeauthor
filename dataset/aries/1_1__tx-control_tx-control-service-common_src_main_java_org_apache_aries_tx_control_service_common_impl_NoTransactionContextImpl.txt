1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.common.impl;
11:8a2da19: 
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:8a2da19: 
1:f377acd: import java.util.concurrent.atomic.AtomicBoolean;
1:8a2da19: import java.util.function.Consumer;
1:8a2da19: 
1:8a2da19: import javax.transaction.xa.XAResource;
1:8a2da19: 
1:8a2da19: import org.osgi.service.transaction.control.LocalResource;
1:8a2da19: import org.osgi.service.transaction.control.TransactionContext;
1:8a2da19: import org.osgi.service.transaction.control.TransactionStatus;
1:8a2da19: 
1:8a2da19: public class NoTransactionContextImpl extends AbstractTransactionContextImpl
1:8a2da19: 		implements TransactionContext {
1:8a2da19: 
1:f377acd: 	private final AtomicBoolean finished = new AtomicBoolean(false);
1:8a2da19: 
1:f87416c: 	public NoTransactionContextImpl() {
1:f87416c: 		super();
8:8a2da19: 	}
1:8a2da19: 
4:8a2da19: 	@Override
1:8a2da19: 	public Object getTransactionKey() {
1:8a2da19: 		return null;
1:25e28f1: 	}
1:25e28f1: 
1:25e28f1: 	@Override
1:8a2da19: 	public boolean getRollbackOnly() throws IllegalStateException {
1:8a2da19: 		throw new IllegalStateException("No transaction is active");
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void setRollbackOnly() throws IllegalStateException {
1:8a2da19: 		throw new IllegalStateException("No transaction is active");
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public TransactionStatus getTransactionStatus() {
1:8a2da19: 		return NO_TRANSACTION;
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void preCompletion(Runnable job) throws IllegalStateException {
1:f87416c: 		if (finished.get()) {
1:8a2da19: 			throw new IllegalStateException(
1:8a2da19: 					"The transaction context has finished");
1:8a2da19: 		}
1:f377acd: 		
1:8a2da19: 		preCompletion.add(job);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void postCompletion(Consumer<TransactionStatus> job)
1:8a2da19: 			throws IllegalStateException {
1:f87416c: 		if (finished.get()) {
1:8a2da19: 			throw new IllegalStateException(
1:8a2da19: 					"The transaction context has finished");
1:8a2da19: 		}
1:8a2da19: 
1:8a2da19: 		postCompletion.add(job);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:47a70d3: 	public void registerXAResource(XAResource resource, String recoveryName) {
1:8a2da19: 		throw new IllegalStateException("No transaction is active");
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void registerLocalResource(LocalResource resource) {
1:8a2da19: 		throw new IllegalStateException("No transaction is active");
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public boolean supportsXA() {
1:8a2da19: 		return false;
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public boolean supportsLocal() {
1:8a2da19: 		return false;
1:8a2da19: 	}
1:f377acd: 
1:f377acd: 	@Override
1:661c406: 	public boolean isReadOnly() {
1:661c406: 		return false;
1:661c406: 	}
1:661c406: 
1:661c406: 	@Override
1:f377acd: 	protected boolean isAlive() {
1:f377acd: 		return !finished.get();
1:f377acd: 	}
1:f377acd: 	
1:f377acd: 	@Override
1:f377acd: 	public void finish() {
1:f377acd: 		if(finished.compareAndSet(false, true)) {
1:f377acd: 			beforeCompletion(() -> {});
1:f377acd: 			afterCompletion(NO_TRANSACTION);
1:f377acd: 		}
1:f377acd: 	}
1:f377acd: 
1:f377acd: 	@Override
1:f377acd: 	protected void safeSetRollbackOnly() {
1:f377acd: 	}
1:8a2da19: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 	public void registerXAResource(XAResource resource, String recoveryName) {
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public NoTransactionContextImpl() {
1: 		super();
/////////////////////////////////////////////////////////////////////////
1: 		if (finished.get()) {
/////////////////////////////////////////////////////////////////////////
1: 		if (finished.get()) {
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isReadOnly() {
1: 		return false;
1: 	}
1: 
1: 	@Override
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.common.impl;
commit:f377acd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: 	private final AtomicBoolean finished = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1: 		
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Override
1: 	protected boolean isAlive() {
1: 		return !finished.get();
1: 	}
1: 	
1: 	@Override
1: 	public void finish() {
1: 		if(finished.compareAndSet(false, true)) {
1: 			beforeCompletion(() -> {});
1: 			afterCompletion(NO_TRANSACTION);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	protected void safeSetRollbackOnly() {
1: 	}
commit:25e28f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				finished();
1: 			@Override
0: 			public void ended(Coordination coordination) throws Exception {
0: 				finished();
1: 			}
1: 
0: 			private void finished() {
0: 				beforeCompletion(() -> {});
0: 				afterCompletion();
/////////////////////////////////////////////////////////////////////////
0: 						firstUnexpectedException.compareAndSet(null, e);
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: import java.util.function.Consumer;
1: 
1: import javax.transaction.xa.XAResource;
1: 
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Participant;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
1: public class NoTransactionContextImpl extends AbstractTransactionContextImpl
1: 		implements TransactionContext {
1: 
0: 	final List<Runnable>					preCompletion		= new ArrayList<>();
0: 	final List<Consumer<TransactionStatus>>	postCompletion		= new ArrayList<>();
1: 
0: 	volatile boolean						finished			= false;
1: 
0: 	public NoTransactionContextImpl(Coordination coordination) {
0: 		super(coordination);
1: 
0: 		coordination.addParticipant(new Participant() {
1: 
1: 			@Override
0: 			public void failed(Coordination coordination) throws Exception {
1: 
0: 				beforeCompletion();
1: 
0: 				afterCompletion();
1: 			}
1: 
0: 			private void beforeCompletion() {
0: 				preCompletion.stream().forEach(r -> {
0: 					try {
0: 						r.run();
0: 					} catch (Exception e) {
0: 						unexpectedException.compareAndSet(null, e);
0: 						// TODO log this
1: 					}
0: 				});
1: 			}
1: 
0: 			private void afterCompletion() {
0: 				postCompletion.stream().forEach(c -> {
0: 					try {
0: 						c.accept(NO_TRANSACTION);
0: 					} catch (Exception e) {
0: 						unexpectedException.compareAndSet(null, e);
0: 						// TODO log this
1: 					}
0: 				});
1: 			}
1: 
1: 			@Override
0: 			public void ended(Coordination coordination) throws Exception {
0: 				beforeCompletion();
1: 
0: 				afterCompletion();
1: 			}
0: 		});
1: 	}
1: 
1: 	@Override
1: 	public Object getTransactionKey() {
1: 		return null;
1: 	}
1: 
1: 	@Override
1: 	public boolean getRollbackOnly() throws IllegalStateException {
1: 		throw new IllegalStateException("No transaction is active");
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly() throws IllegalStateException {
1: 		throw new IllegalStateException("No transaction is active");
1: 	}
1: 
1: 	@Override
1: 	public TransactionStatus getTransactionStatus() {
1: 		return NO_TRANSACTION;
1: 	}
1: 
1: 	@Override
1: 	public void preCompletion(Runnable job) throws IllegalStateException {
0: 		if (coordination.isTerminated()) {
1: 			throw new IllegalStateException(
1: 					"The transaction context has finished");
1: 		}
1: 		preCompletion.add(job);
1: 	}
1: 
1: 	@Override
1: 	public void postCompletion(Consumer<TransactionStatus> job)
1: 			throws IllegalStateException {
0: 		if (coordination.isTerminated()) {
1: 			throw new IllegalStateException(
1: 					"The transaction context has finished");
1: 		}
1: 
1: 		postCompletion.add(job);
1: 	}
1: 
1: 	@Override
0: 	public void registerXAResource(XAResource resource) {
1: 		throw new IllegalStateException("No transaction is active");
1: 	}
1: 
1: 	@Override
1: 	public void registerLocalResource(LocalResource resource) {
1: 		throw new IllegalStateException("No transaction is active");
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsXA() {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsLocal() {
1: 		return false;
1: 	}
1: }
============================================================================