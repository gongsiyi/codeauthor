1:aa4dd7c: /**
1:aa4dd7c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:aa4dd7c:  *  contributor license agreements.  See the NOTICE file distributed with
1:aa4dd7c:  *  this work for additional information regarding copyright ownership.
1:aa4dd7c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:aa4dd7c:  *  (the "License"); you may not use this file except in compliance with
1:aa4dd7c:  *  the License.  You may obtain a copy of the License at
1:aa4dd7c:  *
1:aa4dd7c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aa4dd7c:  *
1:aa4dd7c:  *  Unless required by applicable law or agreed to in writing, software
1:aa4dd7c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:aa4dd7c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa4dd7c:  *  See the License for the specific language governing permissions and
1:aa4dd7c:  *  limitations under the License.
1:aa4dd7c:  */
1:3364e3f: package org.apache.aries.samples.ariestrader.entities;
2:aa4dd7c: 
1:aa4dd7c: import java.io.Serializable;
1:aa4dd7c: import java.math.BigDecimal;
1:aa4dd7c: import java.util.Date;
1:aa4dd7c: 
1:aa4dd7c: import javax.persistence.Column;
1:aa4dd7c: import javax.persistence.Entity;
1:aa4dd7c: import javax.persistence.FetchType;
1:aa4dd7c: import javax.persistence.GeneratedValue;
1:aa4dd7c: import javax.persistence.GenerationType;
1:aa4dd7c: import javax.persistence.Id;
1:aa4dd7c: import javax.persistence.JoinColumn;
1:aa4dd7c: import javax.persistence.ManyToOne;
1:aa4dd7c: import javax.persistence.NamedQueries;
1:aa4dd7c: import javax.persistence.NamedQuery;
1:aa4dd7c: import javax.persistence.Table;
1:aa4dd7c: import javax.persistence.TableGenerator;
1:aa4dd7c: import javax.persistence.Transient;
1:aa4dd7c: 
1:61d7f67: import org.apache.aries.samples.ariestrader.util.Log;
1:61d7f67: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:aa4dd7c: 
1:aa4dd7c: @Entity(name = "holdingejb")
1:aa4dd7c: @Table(name = "holdingejb")
1:aa4dd7c: @NamedQueries( {
1:aa4dd7c: 		@NamedQuery(name = "holdingejb.findByPurchaseprice", query = "SELECT h FROM holdingejb h WHERE h.purchasePrice = :purchaseprice"),
1:aa4dd7c: 		@NamedQuery(name = "holdingejb.findByHoldingid", query = "SELECT h FROM holdingejb h WHERE h.holdingID = :holdingid"),
1:aa4dd7c: 		@NamedQuery(name = "holdingejb.findByQuantity", query = "SELECT h FROM holdingejb h WHERE h.quantity = :quantity"),
1:aa4dd7c: 		@NamedQuery(name = "holdingejb.findByPurchasedate", query = "SELECT h FROM holdingejb h WHERE h.purchaseDate = :purchasedate"),
1:aa4dd7c: 		@NamedQuery(name = "holdingejb.holdingsByUserID", query = "SELECT h FROM holdingejb h where h.account.profile.userID = :userID") })
1:aa4dd7c: public class HoldingDataBeanImpl implements HoldingDataBean, Serializable {
1:aa4dd7c: 
1:aa4dd7c: 	/* persistent/relationship fields */
1:aa4dd7c: 
1:aa4dd7c: 	@TableGenerator(name = "holdingIdGen", table = "KEYGENEJB", pkColumnName = "KEYNAME", valueColumnName = "KEYVAL", pkColumnValue = "holding", allocationSize = 1000)
1:aa4dd7c: 	@Id
1:aa4dd7c: 	@GeneratedValue(strategy = GenerationType.TABLE, generator = "holdingIdGen")
1:aa4dd7c: 	@Column(name = "HOLDINGID", nullable = false)
1:aa4dd7c: 	private Integer holdingID; /* holdingID */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "QUANTITY", nullable = false)
1:aa4dd7c: 	private double quantity; /* quantity */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "PURCHASEPRICE")
1:aa4dd7c: 	private BigDecimal purchasePrice; /* purchasePrice */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "PURCHASEDATE")
1:aa4dd7c: 	private Date purchaseDate; /* purchaseDate */
1:aa4dd7c: 	@Transient
1:aa4dd7c: 	private String quoteID; /* Holding() ---> Quote(1) */
1:aa4dd7c: 
1:aa4dd7c: 	@ManyToOne(fetch = FetchType.LAZY)
1:aa4dd7c: 	@JoinColumn(name = "ACCOUNT_ACCOUNTID")
1:aa4dd7c: 	private AccountDataBeanImpl account;
1:aa4dd7c: 
1:aa4dd7c: 	@ManyToOne(fetch = FetchType.EAGER)
1:09d6656: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
1:aa4dd7c: 	private QuoteDataBeanImpl quote;
1:aa4dd7c: 
1:aa4dd7c: 	public HoldingDataBeanImpl() {
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public HoldingDataBeanImpl(Integer holdingID, double quantity,
1:aa4dd7c: 			BigDecimal purchasePrice, Date purchaseDate, String quoteID) {
1:aa4dd7c: 		setHoldingID(holdingID);
1:aa4dd7c: 		setQuantity(quantity);
1:aa4dd7c: 		setPurchasePrice(purchasePrice);
1:aa4dd7c: 		setPurchaseDate(purchaseDate);
1:aa4dd7c: 		setQuoteID(quoteID);
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public HoldingDataBeanImpl(double quantity, BigDecimal purchasePrice,
1:aa4dd7c: 			Date purchaseDate, AccountDataBean account, QuoteDataBean quote) {
1:aa4dd7c: 		setQuantity(quantity);
1:aa4dd7c: 		setPurchasePrice(purchasePrice);
1:aa4dd7c: 		setPurchaseDate(purchaseDate);
1:aa4dd7c: 		setAccount(account);
1:aa4dd7c: 		setQuote(quote);
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public static HoldingDataBean getRandomInstance() {
1:aa4dd7c: 		return new HoldingDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), // holdingID
1:aa4dd7c: 				TradeConfig.rndQuantity(), // quantity
1:aa4dd7c: 				TradeConfig.rndBigDecimal(1000.0f), // purchasePrice
1:aa4dd7c: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), // purchaseDate
1:aa4dd7c: 				TradeConfig.rndSymbol() // symbol
1:aa4dd7c: 		);
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String toString() {
1:aa4dd7c: 		return "\n\tHolding Data for holding: " + getHoldingID()
1:aa4dd7c: 				+ "\n\t\t      quantity:" + getQuantity()
1:aa4dd7c: 				+ "\n\t\t purchasePrice:" + getPurchasePrice()
1:aa4dd7c: 				+ "\n\t\t  purchaseDate:" + getPurchaseDate()
1:aa4dd7c: 				+ "\n\t\t       quoteID:" + getQuoteID();
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String toHTML() {
1:aa4dd7c: 		return "<BR>Holding Data for holding: " + getHoldingID() + "</B>"
1:aa4dd7c: 				+ "<LI>      quantity:" + getQuantity() + "</LI>"
1:aa4dd7c: 				+ "<LI> purchasePrice:" + getPurchasePrice() + "</LI>"
1:aa4dd7c: 				+ "<LI>  purchaseDate:" + getPurchaseDate() + "</LI>"
1:aa4dd7c: 				+ "<LI>       quoteID:" + getQuoteID() + "</LI>";
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void print() {
1:aa4dd7c: 		Log.log(this.toString());
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public Integer getHoldingID() {
1:aa4dd7c: 		return holdingID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setHoldingID(Integer holdingID) {
1:aa4dd7c: 		this.holdingID = holdingID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public double getQuantity() {
1:aa4dd7c: 		return quantity;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setQuantity(double quantity) {
1:aa4dd7c: 		this.quantity = quantity;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public BigDecimal getPurchasePrice() {
1:aa4dd7c: 		return purchasePrice;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setPurchasePrice(BigDecimal purchasePrice) {
1:aa4dd7c: 		this.purchasePrice = purchasePrice;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public Date getPurchaseDate() {
1:aa4dd7c: 		return purchaseDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setPurchaseDate(Date purchaseDate) {
1:aa4dd7c: 		this.purchaseDate = purchaseDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String getQuoteID() {
1:aa4dd7c: 		if (quote != null) {
1:aa4dd7c: 			return quote.getSymbol();
1:aa4dd7c: 		}
1:aa4dd7c: 		return quoteID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setQuoteID(String quoteID) {
1:aa4dd7c: 		this.quoteID = quoteID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public AccountDataBean getAccount() {
1:aa4dd7c: 		return account;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setAccount(AccountDataBean account) {
1:aa4dd7c: 		this.account = (AccountDataBeanImpl) account;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	/*
1:aa4dd7c: 	 * Disabled for D185273 public String getSymbol() { return getQuoteID(); }
1:aa4dd7c: 	 */
1:aa4dd7c: 
1:aa4dd7c: 	public QuoteDataBean getQuote() {
1:aa4dd7c: 		return quote;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setQuote(QuoteDataBean quote) {
1:aa4dd7c: 		this.quote = (QuoteDataBeanImpl) quote;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	@Override
1:aa4dd7c: 	public int hashCode() {
1:aa4dd7c: 		int hash = 0;
1:aa4dd7c: 		hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);
1:aa4dd7c: 		return hash;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	@Override
1:aa4dd7c: 	public boolean equals(Object object) {
1:aa4dd7c: 		// TODO: Warning - this method won't work in the case the id fields are
1:aa4dd7c: 		// not set
1:aa4dd7c: 		if (!(object instanceof HoldingDataBeanImpl)) {
1:aa4dd7c: 			return false;
1:aa4dd7c: 		}
1:aa4dd7c: 		HoldingDataBeanImpl other = (HoldingDataBeanImpl) object;
1:aa4dd7c: 		if (this.holdingID != other.holdingID
1:aa4dd7c: 				&& (this.holdingID == null || !this.holdingID
1:aa4dd7c: 						.equals(other.holdingID)))
1:aa4dd7c: 			return false;
1:aa4dd7c: 		return true;
1:aa4dd7c: 	}
1:aa4dd7c: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
commit:3ed5a02
/////////////////////////////////////////////////////////////////////////
0: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(250)")
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:3364e3f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.entities;
commit:f336ad3
commit:61d7f67
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.ariestrader.beans;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
commit:4eb010a
commit:aa4dd7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.util.Date;
1: 
1: import javax.persistence.Column;
1: import javax.persistence.Entity;
1: import javax.persistence.FetchType;
1: import javax.persistence.GeneratedValue;
1: import javax.persistence.GenerationType;
1: import javax.persistence.Id;
1: import javax.persistence.JoinColumn;
1: import javax.persistence.ManyToOne;
1: import javax.persistence.NamedQueries;
1: import javax.persistence.NamedQuery;
1: import javax.persistence.Table;
1: import javax.persistence.TableGenerator;
1: import javax.persistence.Transient;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: @Entity(name = "holdingejb")
1: @Table(name = "holdingejb")
1: @NamedQueries( {
1: 		@NamedQuery(name = "holdingejb.findByPurchaseprice", query = "SELECT h FROM holdingejb h WHERE h.purchasePrice = :purchaseprice"),
1: 		@NamedQuery(name = "holdingejb.findByHoldingid", query = "SELECT h FROM holdingejb h WHERE h.holdingID = :holdingid"),
1: 		@NamedQuery(name = "holdingejb.findByQuantity", query = "SELECT h FROM holdingejb h WHERE h.quantity = :quantity"),
1: 		@NamedQuery(name = "holdingejb.findByPurchasedate", query = "SELECT h FROM holdingejb h WHERE h.purchaseDate = :purchasedate"),
1: 		@NamedQuery(name = "holdingejb.holdingsByUserID", query = "SELECT h FROM holdingejb h where h.account.profile.userID = :userID") })
1: public class HoldingDataBeanImpl implements HoldingDataBean, Serializable {
1: 
1: 	/* persistent/relationship fields */
1: 
1: 	@TableGenerator(name = "holdingIdGen", table = "KEYGENEJB", pkColumnName = "KEYNAME", valueColumnName = "KEYVAL", pkColumnValue = "holding", allocationSize = 1000)
1: 	@Id
1: 	@GeneratedValue(strategy = GenerationType.TABLE, generator = "holdingIdGen")
1: 	@Column(name = "HOLDINGID", nullable = false)
1: 	private Integer holdingID; /* holdingID */
1: 
1: 	@Column(name = "QUANTITY", nullable = false)
1: 	private double quantity; /* quantity */
1: 
1: 	@Column(name = "PURCHASEPRICE")
1: 	private BigDecimal purchasePrice; /* purchasePrice */
1: 
1: 	@Column(name = "PURCHASEDATE")
1: 	private Date purchaseDate; /* purchaseDate */
1: 	@Transient
1: 	private String quoteID; /* Holding() ---> Quote(1) */
1: 
1: 	@ManyToOne(fetch = FetchType.LAZY)
1: 	@JoinColumn(name = "ACCOUNT_ACCOUNTID")
1: 	private AccountDataBeanImpl account;
1: 
1: 	@ManyToOne(fetch = FetchType.EAGER)
0: 	@JoinColumn(name = "QUOTE_SYMBOL")
1: 	private QuoteDataBeanImpl quote;
1: 
0: 	// @Version
0: 	// private Integer optLock;
1: 
1: 	public HoldingDataBeanImpl() {
1: 	}
1: 
1: 	public HoldingDataBeanImpl(Integer holdingID, double quantity,
1: 			BigDecimal purchasePrice, Date purchaseDate, String quoteID) {
1: 		setHoldingID(holdingID);
1: 		setQuantity(quantity);
1: 		setPurchasePrice(purchasePrice);
1: 		setPurchaseDate(purchaseDate);
1: 		setQuoteID(quoteID);
1: 	}
1: 
1: 	public HoldingDataBeanImpl(double quantity, BigDecimal purchasePrice,
1: 			Date purchaseDate, AccountDataBean account, QuoteDataBean quote) {
1: 		setQuantity(quantity);
1: 		setPurchasePrice(purchasePrice);
1: 		setPurchaseDate(purchaseDate);
1: 		setAccount(account);
1: 		setQuote(quote);
1: 	}
1: 
1: 	public static HoldingDataBean getRandomInstance() {
1: 		return new HoldingDataBeanImpl(new Integer(TradeConfig.rndInt(100000)), // holdingID
1: 				TradeConfig.rndQuantity(), // quantity
1: 				TradeConfig.rndBigDecimal(1000.0f), // purchasePrice
1: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), // purchaseDate
1: 				TradeConfig.rndSymbol() // symbol
1: 		);
1: 	}
1: 
1: 	public String toString() {
1: 		return "\n\tHolding Data for holding: " + getHoldingID()
1: 				+ "\n\t\t      quantity:" + getQuantity()
1: 				+ "\n\t\t purchasePrice:" + getPurchasePrice()
1: 				+ "\n\t\t  purchaseDate:" + getPurchaseDate()
1: 				+ "\n\t\t       quoteID:" + getQuoteID();
1: 	}
1: 
1: 	public String toHTML() {
1: 		return "<BR>Holding Data for holding: " + getHoldingID() + "</B>"
1: 				+ "<LI>      quantity:" + getQuantity() + "</LI>"
1: 				+ "<LI> purchasePrice:" + getPurchasePrice() + "</LI>"
1: 				+ "<LI>  purchaseDate:" + getPurchaseDate() + "</LI>"
1: 				+ "<LI>       quoteID:" + getQuoteID() + "</LI>";
1: 	}
1: 
1: 	public void print() {
1: 		Log.log(this.toString());
1: 	}
1: 
1: 	public Integer getHoldingID() {
1: 		return holdingID;
1: 	}
1: 
1: 	public void setHoldingID(Integer holdingID) {
1: 		this.holdingID = holdingID;
1: 	}
1: 
1: 	public double getQuantity() {
1: 		return quantity;
1: 	}
1: 
1: 	public void setQuantity(double quantity) {
1: 		this.quantity = quantity;
1: 	}
1: 
1: 	public BigDecimal getPurchasePrice() {
1: 		return purchasePrice;
1: 	}
1: 
1: 	public void setPurchasePrice(BigDecimal purchasePrice) {
1: 		this.purchasePrice = purchasePrice;
1: 	}
1: 
1: 	public Date getPurchaseDate() {
1: 		return purchaseDate;
1: 	}
1: 
1: 	public void setPurchaseDate(Date purchaseDate) {
1: 		this.purchaseDate = purchaseDate;
1: 	}
1: 
1: 	public String getQuoteID() {
1: 		if (quote != null) {
1: 			return quote.getSymbol();
1: 		}
1: 		return quoteID;
1: 	}
1: 
1: 	public void setQuoteID(String quoteID) {
1: 		this.quoteID = quoteID;
1: 	}
1: 
1: 	public AccountDataBean getAccount() {
1: 		return account;
1: 	}
1: 
1: 	public void setAccount(AccountDataBean account) {
1: 		this.account = (AccountDataBeanImpl) account;
1: 	}
1: 
1: 	/*
1: 	 * Disabled for D185273 public String getSymbol() { return getQuoteID(); }
1: 	 */
1: 
1: 	public QuoteDataBean getQuote() {
1: 		return quote;
1: 	}
1: 
1: 	public void setQuote(QuoteDataBean quote) {
1: 		this.quote = (QuoteDataBeanImpl) quote;
1: 	}
1: 
1: 	@Override
1: 	public int hashCode() {
1: 		int hash = 0;
1: 		hash += (this.holdingID != null ? this.holdingID.hashCode() : 0);
1: 		return hash;
1: 	}
1: 
1: 	@Override
1: 	public boolean equals(Object object) {
1: 		// TODO: Warning - this method won't work in the case the id fields are
1: 		// not set
1: 		if (!(object instanceof HoldingDataBeanImpl)) {
1: 			return false;
1: 		}
1: 		HoldingDataBeanImpl other = (HoldingDataBeanImpl) object;
1: 		if (this.holdingID != other.holdingID
1: 				&& (this.holdingID == null || !this.holdingID
1: 						.equals(other.holdingID)))
1: 			return false;
1: 		return true;
1: 	}
1: }
============================================================================