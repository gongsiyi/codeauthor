1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
1:1c9c28b: 
1:3a9710b: import org.osgi.framework.Constants;
1:3a9710b: import org.osgi.framework.Filter;
1:3a9710b: import org.osgi.framework.FrameworkUtil;
1:3a9710b: import org.osgi.framework.InvalidSyntaxException;
1:71fe81a: import org.osgi.resource.Requirement;
1:1c9c28b: 
1:1c9c28b: public abstract class AbstractRequirement implements Requirement {
1:1c9c28b: 	@Override
1:1c9c28b: 	public boolean equals(Object o) {
1:1c9c28b: 		if (o == this)
1:1c9c28b: 			return true;
1:1c9c28b: 		if (!(o instanceof Requirement))
1:1c9c28b: 			return false;
1:1c9c28b: 		Requirement c = (Requirement)o;
1:1c9c28b: 		return c.getNamespace().equals(getNamespace())
1:1c9c28b: 				&& c.getAttributes().equals(getAttributes())
1:1c9c28b: 				&& c.getDirectives().equals(getDirectives())
1:1c9c28b: 				&& c.getResource() != null ? c.getResource().equals(
1:1c9c28b: 				getResource()) : getResource() == null;
1:1c9c28b: 	}
1:1c9c28b: 	
1:3a9710b: 	private Filter filter;
1:3a9710b: 	public Filter getFilter() throws InvalidSyntaxException {
1:3a9710b: 	    String filterStr = getDirectives().get(Constants.FILTER_DIRECTIVE);
1:3a9710b: 	    if (filterStr == null) {
1:3a9710b: 	        return null;
1:3a9710b: 	    }
1:3a9710b: 	    synchronized (this) {
1:3a9710b: 	        if (filter == null) {
1:3a9710b: 	            filter = FrameworkUtil.createFilter(filterStr);
1:3a9710b: 	        }
1:3a9710b: 	        return filter;
1:3a9710b: 	    }	    
1:3a9710b: 	}
1:3a9710b: 	
1:1c9c28b: 	@Override
1:1c9c28b: 	public int hashCode() {
1:1c9c28b: 		int result = 17;
1:1c9c28b: 		result = 31 * result + getNamespace().hashCode();
1:1c9c28b: 		result = 31 * result + getAttributes().hashCode();
1:1c9c28b: 		result = 31 * result + getDirectives().hashCode();
1:1c9c28b: 		result = 31 * result
1:1c9c28b: 				+ (getResource() == null ? 0 : getResource().hashCode());
1:1c9c28b: 		return result;
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	@Override
1:1c9c28b: 	public String toString() {
1:deca8ed: 		return new StringBuffer().append(getClass().getName()).append(": ")
1:1c9c28b: 				.append("namespace=").append(getNamespace())
1:1c9c28b: 				.append(", attributes=").append(getAttributes())
1:1c9c28b: 				.append(", directives=").append(getDirectives())
1:deca8ed: 				.append(", resource=").append(getResource()).toString();
1:1c9c28b: 	}
1:1c9c28b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3a9710b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
/////////////////////////////////////////////////////////////////////////
1: 	private Filter filter;
1: 	public Filter getFilter() throws InvalidSyntaxException {
1: 	    String filterStr = getDirectives().get(Constants.FILTER_DIRECTIVE);
1: 	    if (filterStr == null) {
1: 	        return null;
1: 	    }
1: 	    synchronized (this) {
1: 	        if (filter == null) {
1: 	            filter = FrameworkUtil.createFilter(filterStr);
1: 	        }
1: 	        return filter;
1: 	    }	    
1: 	}
1: 	
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: 		return new StringBuffer().append(getClass().getName()).append(": ")
1: 				.append(", resource=").append(getResource()).toString();
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Requirement;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
1: 
1: public abstract class AbstractRequirement implements Requirement {
1: 	@Override
1: 	public boolean equals(Object o) {
1: 		if (o == this)
1: 			return true;
1: 		if (!(o instanceof Requirement))
1: 			return false;
1: 		Requirement c = (Requirement)o;
1: 		return c.getNamespace().equals(getNamespace())
1: 				&& c.getAttributes().equals(getAttributes())
1: 				&& c.getDirectives().equals(getDirectives())
1: 				&& c.getResource() != null ? c.getResource().equals(
1: 				getResource()) : getResource() == null;
1: 	}
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 		int result = 17;
1: 		result = 31 * result + getNamespace().hashCode();
1: 		result = 31 * result + getAttributes().hashCode();
1: 		result = 31 * result + getDirectives().hashCode();
1: 		result = 31 * result
1: 				+ (getResource() == null ? 0 : getResource().hashCode());
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
0: 		return new StringBuffer().append("[Requirement: ")
1: 				.append("namespace=").append(getNamespace())
1: 				.append(", attributes=").append(getAttributes())
1: 				.append(", directives=").append(getDirectives())
0: 				.append(", resource=").append(getResource()).append(']')
0: 				.toString();
1: 	}
1: }
============================================================================