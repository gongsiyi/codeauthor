1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import org.osgi.annotation.versioning.ConsumerType;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * An Async Event Consumer asynchronously receives Data events until it receives
1:7fa86e8:  * either a Close or Error event.
1:7fa86e8:  * 
1:7fa86e8:  * @param <T>
1:7fa86e8:  *            The type for the event payload
1:7fa86e8:  */
1:7fa86e8: @ConsumerType
1:7fa86e8: @FunctionalInterface
1:7fa86e8: public interface PushEventConsumer<T> {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * If ABORT is used as return value, the sender should close the channel all
1:7fa86e8: 	 * the way to the upstream source. The ABORT will not guarantee that no
1:7fa86e8: 	 * more events are delivered since this is impossible in a concurrent
1:7fa86e8: 	 * environment. The consumer should accept subsequent events and close/clean
1:7fa86e8: 	 * up when the Close or Error event is received.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * Though ABORT has the value -1, any value less than 0 will act as an
1:7fa86e8: 	 * abort.
1:7fa86e8: 	 */
1:7fa86e8: 	long	ABORT		= -1;
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * A 0 indicates that the consumer is willing to receive subsequent events
1:7fa86e8: 	 * at full speeds.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * Any value more than 0 will indicate that the consumer is becoming
1:7fa86e8: 	 * overloaded and wants a delay of the given milliseconds before the next
1:7fa86e8: 	 * event is sent. This allows the consumer to pushback the event delivery
1:7fa86e8: 	 * speed.
1:7fa86e8: 	 */
1:7fa86e8: 	long	CONTINUE	= 0;
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Accept an event from a source. Events can be delivered on multiple
1:7fa86e8: 	 * threads simultaneously. However, Close and Error events are the last
1:7fa86e8: 	 * events received, no more events must be sent after them.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param event The event
1:7fa86e8: 	 * @return less than 0 means abort, 0 means continue, more than 0 means
1:7fa86e8: 	 *         delay ms
1:7fa86e8: 	 * @throws Exception to indicate that an error has occured and that no
1:7fa86e8: 	 *         further events should be delivered to this
1:7fa86e8: 	 *         {@link PushEventConsumer}
1:7fa86e8: 	 */
1:7fa86e8: 	long accept(PushEvent<? extends T> event) throws Exception;
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import org.osgi.annotation.versioning.ConsumerType;
1: 
1: /**
1:  * An Async Event Consumer asynchronously receives Data events until it receives
1:  * either a Close or Error event.
1:  * 
1:  * @param <T>
1:  *            The type for the event payload
1:  */
1: @ConsumerType
1: @FunctionalInterface
1: public interface PushEventConsumer<T> {
1: 
1: 	/**
1: 	 * If ABORT is used as return value, the sender should close the channel all
1: 	 * the way to the upstream source. The ABORT will not guarantee that no
1: 	 * more events are delivered since this is impossible in a concurrent
1: 	 * environment. The consumer should accept subsequent events and close/clean
1: 	 * up when the Close or Error event is received.
1: 	 * 
1: 	 * Though ABORT has the value -1, any value less than 0 will act as an
1: 	 * abort.
1: 	 */
1: 	long	ABORT		= -1;
1: 
1: 	/**
1: 	 * A 0 indicates that the consumer is willing to receive subsequent events
1: 	 * at full speeds.
1: 	 * 
1: 	 * Any value more than 0 will indicate that the consumer is becoming
1: 	 * overloaded and wants a delay of the given milliseconds before the next
1: 	 * event is sent. This allows the consumer to pushback the event delivery
1: 	 * speed.
1: 	 */
1: 	long	CONTINUE	= 0;
1: 
1: 	/**
1: 	 * Accept an event from a source. Events can be delivered on multiple
1: 	 * threads simultaneously. However, Close and Error events are the last
1: 	 * events received, no more events must be sent after them.
1: 	 * 
1: 	 * @param event The event
1: 	 * @return less than 0 means abort, 0 means continue, more than 0 means
1: 	 *         delay ms
1: 	 * @throws Exception to indicate that an error has occured and that no
1: 	 *         further events should be delivered to this
1: 	 *         {@link PushEventConsumer}
1: 	 */
1: 	long accept(PushEvent<? extends T> event) throws Exception;
1: 
1: }
============================================================================