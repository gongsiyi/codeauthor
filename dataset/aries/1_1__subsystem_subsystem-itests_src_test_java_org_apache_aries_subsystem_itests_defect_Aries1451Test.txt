1:7689d87: /*
1:7689d87:  * Licensed to the Apache Software Foundation (ASF) under one
1:7689d87:  * or more contributor license agreements.  See the NOTICE file
1:7689d87:  * distributed with this work for additional information
1:7689d87:  * regarding copyright ownership.  The ASF licenses this file
1:7689d87:  * to you under the Apache License, Version 2.0 (the
1:7689d87:  * "License"); you may not use this file except in compliance
1:7689d87:  * with the License.  You may obtain a copy of the License at
1:7689d87:  *
1:7689d87:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7689d87:  *
1:7689d87:  * Unless required by applicable law or agreed to in writing,
1:7689d87:  * software distributed under the License is distributed on an
1:7689d87:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7689d87:  * KIND, either express or implied.  See the License for the
1:7689d87:  * specific language governing permissions and limitations
1:7689d87:  * under the License.
1:7689d87:  */
1:7689d87: package org.apache.aries.subsystem.itests.defect;
1:7689d87: 
1:7689d87: import java.io.ByteArrayInputStream;
1:7689d87: import java.io.ByteArrayOutputStream;
1:7689d87: import java.io.IOException;
1:7689d87: import java.io.InputStream;
1:7689d87: import java.util.ArrayList;
1:7689d87: import java.util.Collections;
1:7689d87: import java.util.HashMap;
1:7689d87: import java.util.List;
1:7689d87: import java.util.Map;
1:7689d87: import java.util.jar.Attributes;
1:7689d87: import java.util.jar.JarOutputStream;
1:7689d87: import java.util.jar.Manifest;
1:7689d87: 
1:7689d87: import org.apache.aries.subsystem.itests.SubsystemTest;
1:7689d87: import org.apache.aries.subsystem.itests.util.TestCapability;
1:7689d87: import org.apache.aries.subsystem.itests.util.TestRepository;
1:7689d87: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:7689d87: import org.apache.aries.subsystem.itests.util.TestResource;
1:7689d87: import org.junit.Before;
1:7689d87: import org.junit.Test;
1:7689d87: import org.osgi.framework.Constants;
1:7689d87: import org.osgi.framework.namespace.IdentityNamespace;
1:7689d87: import org.osgi.framework.namespace.PackageNamespace;
1:7689d87: import org.osgi.resource.Resource;
1:7689d87: import org.osgi.service.repository.Repository;
1:7689d87: import org.osgi.service.repository.RepositoryContent;
1:7689d87: import org.osgi.service.subsystem.Subsystem;
1:7689d87: import org.osgi.service.subsystem.SubsystemConstants;
1:7689d87: 
1:7689d87: public class Aries1451Test extends SubsystemTest {
1:7689d87: 
1:7689d87:     private static final String APPLICATION_A = "application.a.esa";
1:7689d87:     private static final String BUNDLE_A = "bundle.a.jar";
1:7689d87:     private static final String BUNDLE_B = "bundle.b.jar";
1:7689d87:     private static final String PACKAGE_REQUIREMENT = "org.apache.aries.test.bundlebrequirement";
1:7689d87: 
1:7689d87:     private static boolean createdTestFiles;
1:7689d87: 
1:7689d87:     @Before
1:7689d87:     public void createTestFiles() throws Exception {
1:7689d87:         if (createdTestFiles)
1:7689d87:             return;
1:7689d87:         createBundleA();
1:7689d87:         createApplicationA();
1:7689d87:         createdTestFiles = true;
1:7689d87: 
1:7689d87:         //set up repository to satisfy BUNDLE_A's package requirement for a package in BUNDLE_B use
1:7689d87:         // a RepositoryContent test with implementation that is private. 
1:7689d87:         try {
1:7689d87:             serviceRegistrations.add(
1:7689d87:                     bundleContext.registerService(
1:7689d87:                             Repository.class, 
1:7689d87:                             createTestRepository(), 
1:7689d87:                             null));
1:7689d87:         }
1:7689d87:         catch (IOException e) {
1:7689d87:             throw new RuntimeException(e);
1:7689d87:         }        
1:7689d87:     }
1:7689d87: 
1:7689d87:     private void createBundleA() throws IOException {
1:7689d87:         createBundle(name(BUNDLE_A), importPackage(PACKAGE_REQUIREMENT));
1:7689d87:     }
1:7689d87: 
1:7689d87:     private void createApplicationA() throws IOException {
1:7689d87:         createApplicationAManifest();
1:7689d87:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:7689d87:     }
1:7689d87: 
1:7689d87:     private void createApplicationAManifest() throws IOException {
1:7689d87:         Map<String, String> attributes = new HashMap<String, String>();
1:7689d87:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:7689d87:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle");
1:7689d87:         createManifest(APPLICATION_A + ".mf", attributes);
1:7689d87:     }
1:7689d87: 
1:7689d87: 
1:7689d87:     @Test
1:7689d87:     public void testInstallWithAccessProtectedRepository() throws Exception {
1:7689d87:         Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:7689d87:         try {
1:7689d87:             startSubsystem(applicationA);
1:7689d87:         }
1:7689d87:         finally {
1:7689d87:             stopAndUninstallSubsystemSilently(applicationA);
1:7689d87:         }
1:7689d87:     }
1:7689d87: 
1:7689d87: 
1:7689d87:     private Repository createTestRepository() throws IOException {
1:7689d87:         return new TestRepository.Builder()
1:7689d87:         .resource(createTestBundleResource())
1:7689d87:         .build();
1:7689d87:     }
1:7689d87: 
1:7689d87:     private byte[] createTestBundleContent() throws IOException {
1:7689d87:         Manifest manifest = new Manifest();
1:7689d87:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:7689d87:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_B);
1:7689d87:         manifest.getMainAttributes().putValue(Constants.EXPORT_PACKAGE,  PACKAGE_REQUIREMENT);
1:7689d87:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:7689d87:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:7689d87:         jos.close();
1:7689d87:         return baos.toByteArray();
1:7689d87:     }
1:7689d87: 
1:7689d87: 
1:7689d87:     //This resource must have private visibility for the test 
1:7689d87:     private Resource createTestBundleResource() throws IOException {
1:7689d87: 
1:7689d87:         List<TestCapability.Builder> capabilities = new ArrayList<TestCapability.Builder>() {
1:7689d87:             private static final long serialVersionUID = 1L;
1:7689d87: 
1:7689d87:             {
1:7689d87:                 add(new TestCapability.Builder()
1:7689d87:                 .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:7689d87:                 .attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_B)
1:7689d87:                 .attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE));
1:7689d87:                 add(new TestCapability.Builder()
1:7689d87:                 .namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:7689d87:                 .attribute(PackageNamespace.PACKAGE_NAMESPACE, PACKAGE_REQUIREMENT)
1:7689d87:                 .attribute(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE, "0.0.0"));
1:7689d87:             }
1:7689d87:         };
1:7689d87: 
1:7689d87:         return new PrivateRepositoryContent(capabilities, Collections.<TestRequirement.Builder>emptyList(), 
1:7689d87:                 createTestBundleContent());
1:7689d87:     }
1:7689d87: 
1:7689d87:     private class PrivateRepositoryContent extends TestResource implements RepositoryContent {
1:7689d87: 
1:7689d87:         private final byte[] content;
1:7689d87: 
1:7689d87:         public PrivateRepositoryContent(List<TestCapability.Builder> capabilities, 
1:7689d87:                 List<TestRequirement.Builder> requirements, byte[] content) {
1:7689d87:             super(capabilities, requirements);
1:7689d87:             this.content = content;
1:7689d87:         }
1:7689d87: 
1:7689d87:         @Override
1:7689d87:         public InputStream getContent() {
1:7689d87:             try {
1:7689d87:                 return new ByteArrayInputStream(content);
1:7689d87:             }
1:7689d87:             catch (Exception e) {
1:7689d87:                 throw new RuntimeException(e);
1:7689d87:             }
1:7689d87:         }
1:7689d87:     }
1:7689d87: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:7689d87
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
1: import org.apache.aries.subsystem.itests.util.TestResource;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.repository.RepositoryContent;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class Aries1451Test extends SubsystemTest {
1: 
1:     private static final String APPLICATION_A = "application.a.esa";
1:     private static final String BUNDLE_A = "bundle.a.jar";
1:     private static final String BUNDLE_B = "bundle.b.jar";
1:     private static final String PACKAGE_REQUIREMENT = "org.apache.aries.test.bundlebrequirement";
1: 
1:     private static boolean createdTestFiles;
1: 
1:     @Before
1:     public void createTestFiles() throws Exception {
1:         if (createdTestFiles)
1:             return;
1:         createBundleA();
1:         createApplicationA();
1:         createdTestFiles = true;
1: 
1:         //set up repository to satisfy BUNDLE_A's package requirement for a package in BUNDLE_B use
1:         // a RepositoryContent test with implementation that is private. 
1:         try {
1:             serviceRegistrations.add(
1:                     bundleContext.registerService(
1:                             Repository.class, 
1:                             createTestRepository(), 
1:                             null));
1:         }
1:         catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }        
1:     }
1: 
1:     private void createBundleA() throws IOException {
1:         createBundle(name(BUNDLE_A), importPackage(PACKAGE_REQUIREMENT));
1:     }
1: 
1:     private void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:     }
1: 
1:     private void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ";type=osgi.bundle");
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1: 
1: 
1:     @Test
1:     public void testInstallWithAccessProtectedRepository() throws Exception {
1:         Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:         try {
1:             startSubsystem(applicationA);
1:         }
1:         finally {
1:             stopAndUninstallSubsystemSilently(applicationA);
1:         }
1:     }
1: 
1: 
1:     private Repository createTestRepository() throws IOException {
1:         return new TestRepository.Builder()
1:         .resource(createTestBundleResource())
1:         .build();
1:     }
1: 
1:     private byte[] createTestBundleContent() throws IOException {
1:         Manifest manifest = new Manifest();
1:         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:         manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, BUNDLE_B);
1:         manifest.getMainAttributes().putValue(Constants.EXPORT_PACKAGE,  PACKAGE_REQUIREMENT);
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         JarOutputStream jos = new JarOutputStream(baos, manifest);
1:         jos.close();
1:         return baos.toByteArray();
1:     }
1: 
1: 
1:     //This resource must have private visibility for the test 
1:     private Resource createTestBundleResource() throws IOException {
1: 
1:         List<TestCapability.Builder> capabilities = new ArrayList<TestCapability.Builder>() {
1:             private static final long serialVersionUID = 1L;
1: 
1:             {
1:                 add(new TestCapability.Builder()
1:                 .namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:                 .attribute(IdentityNamespace.IDENTITY_NAMESPACE, BUNDLE_B)
1:                 .attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE));
1:                 add(new TestCapability.Builder()
1:                 .namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:                 .attribute(PackageNamespace.PACKAGE_NAMESPACE, PACKAGE_REQUIREMENT)
1:                 .attribute(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE, "0.0.0"));
1:             }
1:         };
1: 
1:         return new PrivateRepositoryContent(capabilities, Collections.<TestRequirement.Builder>emptyList(), 
1:                 createTestBundleContent());
1:     }
1: 
1:     private class PrivateRepositoryContent extends TestResource implements RepositoryContent {
1: 
1:         private final byte[] content;
1: 
1:         public PrivateRepositoryContent(List<TestCapability.Builder> capabilities, 
1:                 List<TestRequirement.Builder> requirements, byte[] content) {
1:             super(capabilities, requirements);
1:             this.content = content;
1:         }
1: 
1:         @Override
1:         public InputStream getContent() {
1:             try {
1:                 return new ByteArrayInputStream(content);
1:             }
1:             catch (Exception e) {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
1: }
============================================================================