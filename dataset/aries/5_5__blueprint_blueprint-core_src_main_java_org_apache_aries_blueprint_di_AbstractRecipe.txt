1:f13c6ac: /**
1:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
11:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Type;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.List;
1:88a0e3f: import java.util.concurrent.Callable;
1:88a0e3f: import java.util.concurrent.ExecutionException;
1:88a0e3f: import java.util.concurrent.Future;
1:88a0e3f: import java.util.concurrent.FutureTask;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.container.GenericType;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:38eeca6: import org.osgi.service.blueprint.container.ReifiedType;
1:38eeca6: import org.slf4j.Logger;
1:38eeca6: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: public abstract class AbstractRecipe implements Recipe {
1:38eeca6:     private static final Logger LOGGER = LoggerFactory
1:38eeca6:             .getLogger(AbstractRecipe.class);
1:f13c6ac: 
1:f13c6ac:     protected final String name;
1:f13c6ac:     protected boolean prototype = true;
1:f13c6ac: 
1:f13c6ac:     protected AbstractRecipe(String name) {
1:38eeca6:         if (name == null)
1:38eeca6:             throw new NullPointerException("name is null");
1:f13c6ac:         this.name = name;
1:88a0e3f:     }
1:5e2bd49: 
1:f13c6ac:     public String getName() {
1:f13c6ac:         return name;
3:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean isPrototype() {
1:f13c6ac:         return prototype;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setPrototype(boolean prototype) {
1:f13c6ac:         this.prototype = prototype;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public final Object create() throws ComponentDefinitionException {
1:f13c6ac:         // Ensure a container has been set
1:f13c6ac:         ExecutionContext context = ExecutionContext.Holder.getContext();
1:88a0e3f: 
1:38eeca6:         // if this recipe has already been executed in this context, return the
1:38eeca6:         // currently registered value
1:88a0e3f:         Object result = context.getPartialObject(name);
1:88a0e3f:         if (result != null) {
1:88a0e3f:             return result;
1:88a0e3f:         }
1:88a0e3f: 
1:88a0e3f:         // execute the recipe
1:88a0e3f:         context.push(this);
1:88a0e3f:         boolean didCreate = false;
1:88a0e3f:         try {
1:88a0e3f:             if (!prototype) {
1:38eeca6:                 FutureTask<Object> objectCreation = new FutureTask<Object>(
1:38eeca6:                         new Callable<Object>() {
1:38eeca6:                             public Object call()
1:38eeca6:                                     throws ComponentDefinitionException {
1:38eeca6:                                 return internalCreate();
1:38eeca6:                             }
1:38eeca6:                         });
1:38eeca6:                 Future<Object> resultFuture = context.addFullObject(name,
1:38eeca6:                         objectCreation);
1:88a0e3f: 
1:88a0e3f:                 // are we the first to try to create it
1:88a0e3f:                 if (resultFuture == null) {
1:88a0e3f:                     didCreate = true;
1:88a0e3f:                     objectCreation.run();
1:88a0e3f:                     resultFuture = objectCreation;
1:f13c6ac:                 }
1:38eeca6: 
1:88a0e3f:                 try {
1:88a0e3f:                     result = resultFuture.get();
1:88a0e3f:                 } catch (InterruptedException ie) {
1:88a0e3f:                     Thread.currentThread().interrupt();
1:88a0e3f:                 } catch (ExecutionException ee) {
1:88a0e3f:                     if (ee.getCause() instanceof ComponentDefinitionException)
1:88a0e3f:                         throw (ComponentDefinitionException) ee.getCause();
1:88a0e3f:                     else if (ee.getCause() instanceof RuntimeException)
1:88a0e3f:                         throw (RuntimeException) ee.getCause();
1:38eeca6:                     else
1:88a0e3f:                         throw (Error) ee.getCause();
1:f13c6ac:                 }
1:38eeca6: 
1:88a0e3f:             } else {
1:88a0e3f:                 result = internalCreate();
1:88a0e3f:             }
1:88a0e3f:         } finally {
1:38eeca6:             if (didCreate)
1:38eeca6:                 context.removePartialObject(name);
1:38eeca6: 
1:88a0e3f:             Recipe popped = context.pop();
1:88a0e3f:             if (popped != this) {
1:38eeca6:                 // noinspection ThrowFromFinallyBlock
1:38eeca6:                 throw new IllegalStateException(
1:38eeca6:                         "Internal Error: recipe stack is corrupt:"
1:38eeca6:                                 + " Expected " + this
1:38eeca6:                                 + " to be popped of the stack but was "
1:38eeca6:                                 + popped);
1:f13c6ac:             }
1:f13c6ac:         }
1:38eeca6: 
1:88a0e3f:         return result;
1:f13c6ac:     }
1:88a0e3f: 
1:38eeca6:     protected abstract Object internalCreate()
1:38eeca6:             throws ComponentDefinitionException;
1:38eeca6: 
1:f13c6ac:     protected void addPartialObject(Object obj) {
1:38eeca6:         if (!prototype) {
1:f13c6ac:             ExecutionContext.Holder.getContext().addPartialObject(name, obj);
1:f13c6ac:         }
1:f13c6ac:     }
1:38eeca6: 
1:5e2bd49:     protected boolean canConvert(Object obj, ReifiedType type) {
1:38eeca6:         return ExecutionContext.Holder.getContext().canConvert(obj, type);
1:5e2bd49:     }
1:38eeca6: 
1:f13c6ac:     protected Object convert(Object obj, ReifiedType type) throws Exception {
1:f13c6ac:         return ExecutionContext.Holder.getContext().convert(obj, type);
1:f13c6ac:     }
1:88a0e3f: 
1:f13c6ac:     protected Object convert(Object obj, Type type) throws Exception {
1:38eeca6:         return ExecutionContext.Holder.getContext().convert(obj,
1:38eeca6:                 new GenericType(type));
1:f13c6ac:     }
1:88a0e3f: 
1:f13c6ac:     protected Class loadClass(String className) {
1:f13c6ac:         ReifiedType t = loadType(className, null);
1:f13c6ac:         return t != null ? t.getRawClass() : null;
1:f13c6ac:     }
1:88a0e3f: 
1:f13c6ac:     protected ReifiedType loadType(String typeName) {
1:f13c6ac:         return loadType(typeName, null);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected ReifiedType loadType(String typeName, ClassLoader fromClassLoader) {
1:f13c6ac:         if (typeName == null) {
1:f13c6ac:             return null;
1:f13c6ac:         }
1:38eeca6:         return doLoadType(typeName, fromClassLoader, true, false);
1:38eeca6:     }
1:38eeca6: 
1:38eeca6:     private ReifiedType doLoadType(String typeName,
1:38eeca6:             ClassLoader fromClassLoader, boolean checkNestedIfFailed,
1:38eeca6:             boolean retry) {
2:f13c6ac:         try {
1:38eeca6:             return GenericType.parse(typeName,
1:38eeca6:                     fromClassLoader != null ? fromClassLoader
1:38eeca6:                             : ExecutionContext.Holder.getContext());
1:f13c6ac:         } catch (ClassNotFoundException e) {
1:38eeca6:             String errorMessage = "Unable to load class " + typeName
1:38eeca6:                     + " from recipe " + this;
1:38eeca6:             if (checkNestedIfFailed) {
1:38eeca6:                 int lastDot = typeName.lastIndexOf('.');
1:38eeca6:                 if (lastDot > 0 && lastDot < typeName.length()) {
1:38eeca6:                     String nestedTypeName = typeName.substring(0, lastDot)
1:38eeca6:                             + "$" + typeName.substring(lastDot + 1);
1:38eeca6:                     LOGGER.debug(errorMessage
1:38eeca6:                             + ", trying to load a nested class "
1:38eeca6:                             + nestedTypeName);
1:38eeca6:                     try {
1:38eeca6:                         return doLoadType(nestedTypeName, fromClassLoader,
1:38eeca6:                                 false, true);
1:38eeca6:                     } catch (ComponentDefinitionException e2) {
1:38eeca6:                         // ignore, the recursive call will throw this exception,
1:38eeca6:                         // but ultimately the exception referencing the original
1:38eeca6:                         // typeName has to be thrown
1:38eeca6:                     }
1:38eeca6:                 }
1:38eeca6:             }
1:38eeca6:             if (!retry) {
1:38eeca6:                 LOGGER.error(errorMessage);
1:38eeca6:             }
1:38eeca6:             throw new ComponentDefinitionException(errorMessage, e);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void destroy(Object instance) {
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getConstructorDependencies() {
1:f13c6ac:         return Collections.emptyList();
1:f13c6ac:     }
1:38eeca6: 
1:f13c6ac:     public String toString() {
1:38eeca6:         return getClass().getSimpleName() + "[" + "name='" + name + '\'' + ']';
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Sergey Beryozkin
-------------------------------------------------------------------------------
commit:38eeca6
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOGGER = LoggerFactory
1:             .getLogger(AbstractRecipe.class);
1:         if (name == null)
1:             throw new NullPointerException("name is null");
/////////////////////////////////////////////////////////////////////////
1:         // if this recipe has already been executed in this context, return the
1:         // currently registered value
/////////////////////////////////////////////////////////////////////////
1:                 FutureTask<Object> objectCreation = new FutureTask<Object>(
1:                         new Callable<Object>() {
1:                             public Object call()
1:                                     throws ComponentDefinitionException {
1:                                 return internalCreate();
1:                             }
1:                         });
1:                 Future<Object> resultFuture = context.addFullObject(name,
1:                         objectCreation);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                     else
1: 
1:             if (didCreate)
1:                 context.removePartialObject(name);
1: 
1:                 // noinspection ThrowFromFinallyBlock
1:                 throw new IllegalStateException(
1:                         "Internal Error: recipe stack is corrupt:"
1:                                 + " Expected " + this
1:                                 + " to be popped of the stack but was "
1:                                 + popped);
1: 
1:     protected abstract Object internalCreate()
1:             throws ComponentDefinitionException;
1: 
1:         if (!prototype) {
1: 
1:         return ExecutionContext.Holder.getContext().canConvert(obj, type);
1: 
1:         return ExecutionContext.Holder.getContext().convert(obj,
1:                 new GenericType(type));
/////////////////////////////////////////////////////////////////////////
1:         return doLoadType(typeName, fromClassLoader, true, false);
1:     }
1: 
1:     private ReifiedType doLoadType(String typeName,
1:             ClassLoader fromClassLoader, boolean checkNestedIfFailed,
1:             boolean retry) {
1:             return GenericType.parse(typeName,
1:                     fromClassLoader != null ? fromClassLoader
1:                             : ExecutionContext.Holder.getContext());
1:             String errorMessage = "Unable to load class " + typeName
1:                     + " from recipe " + this;
1:             if (checkNestedIfFailed) {
1:                 int lastDot = typeName.lastIndexOf('.');
1:                 if (lastDot > 0 && lastDot < typeName.length()) {
1:                     String nestedTypeName = typeName.substring(0, lastDot)
1:                             + "$" + typeName.substring(lastDot + 1);
1:                     LOGGER.debug(errorMessage
1:                             + ", trying to load a nested class "
1:                             + nestedTypeName);
1:                     try {
1:                         return doLoadType(nestedTypeName, fromClassLoader,
1:                                 false, true);
1:                     } catch (ComponentDefinitionException e2) {
1:                         // ignore, the recursive call will throw this exception,
1:                         // but ultimately the exception referencing the original
1:                         // typeName has to be thrown
1:                     }
1:                 }
1:             }
1:             if (!retry) {
1:                 LOGGER.error(errorMessage);
1:             }
1:             throw new ComponentDefinitionException(errorMessage, e);
/////////////////////////////////////////////////////////////////////////
1: 
1:         return getClass().getSimpleName() + "[" + "name='" + name + '\'' + ']';
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1:     protected boolean canConvert(Object obj, ReifiedType type) {
0:     	return ExecutionContext.Holder.getContext().canConvert(obj, type);
1:     }
1:     
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:88a0e3f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.FutureTask;
/////////////////////////////////////////////////////////////////////////
0:         // if this recipe has already been executed in this context, return the currently registered value
1:         Object result = context.getPartialObject(name);
1:         if (result != null) {
1:             return result;
1:         }
1:         // execute the recipe
1:         context.push(this);
1:         boolean didCreate = false;
1:         try {
1:             if (!prototype) {
0:                 FutureTask<Object> objectCreation = new FutureTask<Object>(new Callable<Object>() {
0:                     public Object call() throws ComponentDefinitionException {
0:                         return internalCreate();
1:                     }                
0:                 });
0:                 Future<Object> resultFuture = context.addFullObject(name, objectCreation);
1: 
1:                 // are we the first to try to create it
1:                 if (resultFuture == null) {
1:                     didCreate = true;
1:                     objectCreation.run();
1:                     resultFuture = objectCreation;
1:                 
1:                 
1:                 try {
1:                     result = resultFuture.get();
1:                 } catch (InterruptedException ie) {
1:                     Thread.currentThread().interrupt();
1:                 } catch (ExecutionException ee) {
1:                     if (ee.getCause() instanceof ComponentDefinitionException)
1:                         throw (ComponentDefinitionException) ee.getCause();
1:                     else if (ee.getCause() instanceof RuntimeException)
1:                         throw (RuntimeException) ee.getCause();
0:                     else 
1:                         throw (Error) ee.getCause();
1:                 
1:             } else {
1:                 result = internalCreate();
1:             }
1:         } finally {
0:             if (didCreate) context.removePartialObject(name);
1:             
1:             Recipe popped = context.pop();
1:             if (popped != this) {
0:                 //noinspection ThrowFromFinallyBlock
0:                 throw new IllegalStateException("Internal Error: recipe stack is corrupt:" +
0:                         " Expected " + this + " to be popped of the stack but was " + popped);
1:         
1:         return result;
1:     
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
1: import org.apache.aries.blueprint.container.GenericType;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.lang.reflect.Type;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.geronimo.blueprint.container.GenericType;
0: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: public abstract class AbstractRecipe implements Recipe {
1: 
1:     protected final String name;
1:     protected boolean prototype = true;
1: 
1:     protected AbstractRecipe(String name) {
0:         if (name == null) throw new NullPointerException("name is null");
1:         this.name = name;
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public boolean isPrototype() {
1:         return prototype;
1:     }
1: 
1:     public void setPrototype(boolean prototype) {
1:         this.prototype = prototype;
1:     }
1: 
1:     public final Object create() throws ComponentDefinitionException {
1:         // Ensure a container has been set
1:         ExecutionContext context = ExecutionContext.Holder.getContext();
1: 
0:         synchronized (context.getInstanceLock()) {
0:             // if this recipe has already been executed in this container, return the currently registered value
0:             Object obj = context.getPartialObject(name);
0:             if (obj != null) {
0:                 return obj;
1:             }
1: 
0:             // execute the recipe
0:             context.push(this);
1:             try {
0:                 obj = internalCreate();
0:                 if (!prototype) {
0:                     context.addFullObject(name, obj);
1:                 }
0:                 return obj;
0:             } finally {
0:                 Recipe popped = context.pop();
0:                 if (popped != this) {
0:                     //noinspection ThrowFromFinallyBlock
0:                     throw new IllegalStateException("Internal Error: recipe stack is corrupt:" +
0:                             " Expected " + this + " to be popped of the stack but was " + popped);
1:                 }
1:             }
1:         }
1:     }
1: 
0:     protected abstract Object internalCreate() throws ComponentDefinitionException;
1: 
1:     protected void addPartialObject(Object obj) {
0:         if (!prototype) {                 
1:             ExecutionContext.Holder.getContext().addPartialObject(name, obj);
1:         }
1:     }
1:     
1:     protected Object convert(Object obj, ReifiedType type) throws Exception {
1:         return ExecutionContext.Holder.getContext().convert(obj, type);
1:     }
1: 
1:     protected Object convert(Object obj, Type type) throws Exception {
0:         return ExecutionContext.Holder.getContext().convert(obj, new GenericType(type));
1:     }
1: 
1:     protected Class loadClass(String className) {
1:         ReifiedType t = loadType(className, null);
1:         return t != null ? t.getRawClass() : null;
1:     }
1: 
1:     protected ReifiedType loadType(String typeName) {
1:         return loadType(typeName, null);
1:     }
1: 
1:     protected ReifiedType loadType(String typeName, ClassLoader fromClassLoader) {
1:         if (typeName == null) {
1:             return null;
1:         }
1:         try {
0:             return GenericType.parse(typeName, fromClassLoader != null ? fromClassLoader : ExecutionContext.Holder.getContext());
1:         } catch (ClassNotFoundException e) {
0:             throw new ComponentDefinitionException("Unable to load class " + typeName + " from recipe " + this, e);
1:         }
1:     }
1: 
1:     public void destroy(Object instance) {
1:     }
1: 
1:     public List<Recipe> getConstructorDependencies() {
1:         return Collections.emptyList();
1:     }
1:     
1:     public String toString() {
0:         return getClass().getSimpleName() + "[" +
0:                 "name='" + name + '\'' +
0:                 ']';
1: 
1:     }
1: 
1: }
============================================================================