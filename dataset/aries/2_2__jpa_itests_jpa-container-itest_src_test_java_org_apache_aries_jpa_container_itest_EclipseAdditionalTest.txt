1:83d1ac1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:83d1ac1:  *  contributor license agreements.  See the NOTICE file distributed with
1:83d1ac1:  *  this work for additional information regarding copyright ownership.
1:83d1ac1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:83d1ac1:  *  (the "License"); you may not use this file except in compliance with
1:83d1ac1:  *  the License.  You may obtain a copy of the License at
1:83d1ac1:  *
1:83d1ac1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:83d1ac1:  *
1:83d1ac1:  *  Unless required by applicable law or agreed to in writing, software
1:83d1ac1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:83d1ac1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:83d1ac1:  *  See the License for the specific language governing permissions and
1:83d1ac1:  *  limitations under the License.
2:83d1ac1:  */
1:83d1ac1: package org.apache.aries.jpa.container.itest;
1:83d1ac1: 
1:06491b0: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:06491b0: import static org.junit.Assert.assertEquals;
1:83d1ac1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:06491b0: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1:83d1ac1: 
1:83d1ac1: import java.io.InputStream;
1:06491b0: import java.util.HashMap;
1:06491b0: import java.util.Map;
1:06491b0: import java.util.Properties;
1:83d1ac1: 
1:83d1ac1: import javax.persistence.EntityManagerFactory;
1:83d1ac1: 
1:83d1ac1: import org.apache.aries.jpa.itest.AbstractJPAItest;
1:06491b0: import org.eclipse.persistence.config.SessionCustomizer;
1:06491b0: import org.eclipse.persistence.sessions.Session;
1:83d1ac1: import org.junit.Assert;
1:83d1ac1: import org.junit.Test;
1:83d1ac1: import org.ops4j.pax.exam.Configuration;
1:83d1ac1: import org.ops4j.pax.exam.Option;
1:83d1ac1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:83d1ac1: import org.osgi.framework.Constants;
1:06491b0: import org.osgi.service.jdbc.DataSourceFactory;
1:95f35a3: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:83d1ac1: 
1:95f35a3: public class EclipseAdditionalTest extends AbstractJPAItest {
1:83d1ac1: 
1:06491b0: 	private static final String CUSTOMIZER_CALLED = "org.apache.aries.jpa.itest.eclipse.customizer";
1:06491b0: 
1:06491b0: 	@Test
1:95f35a3:     public void testContextCreationWithStartingBundle() throws Exception {
1:95f35a3:         getBundleByName("org.apache.aries.jpa.container.itest.bundle.eclipselink").start();
1:95f35a3:         getEMF("script-test-unit");
1:95f35a3:     }
1:95f35a3:     
1:95f35a3:     @Test
1:95f35a3:     public void testEntityManagerFactoryBuilderWithIncompletePersistenceUnit() throws Exception {
1:95f35a3:         getService(EntityManagerFactoryBuilder.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:95f35a3:     }
1:06491b0: 
1:06491b0:     @Test
1:06491b0:     public void testEntityManagerFactoryBuilderWithIncompletePersistenceUnitAddPlugin() throws Exception {
1:06491b0:     	EntityManagerFactoryBuilder builder = getService(EntityManagerFactoryBuilder.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:06491b0:     	
1:06491b0:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:06491b0:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:06491b0:        
1:06491b0:     	Properties jdbcProps = new Properties();
1:06491b0:     	jdbcProps.setProperty("url", "jdbc:derby:memory:DSFTEST;create=true");
1:06491b0:     	
1:06491b0:     	Map<String, Object> props = new HashMap<String, Object>();
1:06491b0:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1:06491b0:     	props.put("javax.persistence.transactionType", RESOURCE_LOCAL.name());
1:06491b0:     	
1:06491b0:     	props.put("org.apache.aries.jpa.eclipselink.plugin.types", SessionCustomizerImpl.class);
1:06491b0:     	props.put("eclipselink.session.customizer", SessionCustomizerImpl.class.getName());
1:06491b0:     	
1:06491b0:     	EntityManagerFactory emf = builder.createEntityManagerFactory(props);
1:06491b0:     	emf.createEntityManager();
1:06491b0: 		assertEquals("invoked", emf
1:06491b0:     			.getProperties().get(CUSTOMIZER_CALLED));
1:06491b0:     	
1:06491b0:     }
1:95f35a3:     
1:95f35a3:     @Test(expected = IllegalStateException.class)
1:e5c89d2:     public void testEntityManagerFactoryWithIncompletePersistenceUnit() throws Exception {
1:95f35a3:         getService(EntityManagerFactory.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:95f35a3:         Assert.fail("There should be no EntityManagerFactory registered since this persistence unit is incomplete");
1:e5c89d2:     }
1:83d1ac1: 
1:83d1ac1:     @Configuration
1:83d1ac1:     public Option[] configuration() {
1:e5c89d2:         InputStream testBundle = TinyBundles.bundle()
1:e5c89d2:             .set(Constants.BUNDLE_SYMBOLICNAME, "incompleteTestUnit") //
1:e5c89d2:             .set("Meta-Persistence", " ") //
1:98ca24c:             .add("META-INF/persistence.xml", this.getClass().getResourceAsStream("/persistence.xml")) //
1:e5c89d2:             .build(TinyBundles.withBnd());
1:95f35a3:         return new Option[] {//
1:95f35a3:             baseOptions(),//
1:95f35a3:             ariesJpa21(),//
1:f50875c:             jta12Bundles(), //
1:95f35a3:             eclipseLink(),//
1:83d1ac1:             derbyDSF(), //
1:95f35a3:             testBundleEclipseLink().noStart(),//
1:1c56c89:             streamBundle(testBundle)
1:06491b0: //         ,debug()
1:83d1ac1:         };
2:83d1ac1:     }
1:06491b0: 
1:06491b0: 	public static class SessionCustomizerImpl implements SessionCustomizer {
1:06491b0: 	
1:06491b0: 		@Override
1:06491b0: 		public void customize(Session arg0) throws Exception {
1:06491b0: 			arg0.setProperty(CUSTOMIZER_CALLED, "invoked");
1:06491b0: 		}
1:06491b0: 	}
1:83d1ac1: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:06491b0
/////////////////////////////////////////////////////////////////////////
1: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
1: import static org.junit.Assert.assertEquals;
1: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
1: import org.eclipse.persistence.config.SessionCustomizer;
1: import org.eclipse.persistence.sessions.Session;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: 	private static final String CUSTOMIZER_CALLED = "org.apache.aries.jpa.itest.eclipse.customizer";
1: 
1: 	@Test
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testEntityManagerFactoryBuilderWithIncompletePersistenceUnitAddPlugin() throws Exception {
1:     	EntityManagerFactoryBuilder builder = getService(EntityManagerFactoryBuilder.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:     	
1:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:        
1:     	Properties jdbcProps = new Properties();
1:     	jdbcProps.setProperty("url", "jdbc:derby:memory:DSFTEST;create=true");
1:     	
1:     	Map<String, Object> props = new HashMap<String, Object>();
1:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1:     	props.put("javax.persistence.transactionType", RESOURCE_LOCAL.name());
1:     	
1:     	props.put("org.apache.aries.jpa.eclipselink.plugin.types", SessionCustomizerImpl.class);
1:     	props.put("eclipselink.session.customizer", SessionCustomizerImpl.class.getName());
1:     	
1:     	EntityManagerFactory emf = builder.createEntityManagerFactory(props);
1:     	emf.createEntityManager();
1: 		assertEquals("invoked", emf
1:     			.getProperties().get(CUSTOMIZER_CALLED));
1:     	
1:     }
/////////////////////////////////////////////////////////////////////////
1: //         ,debug()
1: 
1: 	public static class SessionCustomizerImpl implements SessionCustomizer {
1: 	
1: 		@Override
1: 		public void customize(Session arg0) throws Exception {
1: 			arg0.setProperty(CUSTOMIZER_CALLED, "invoked");
1: 		}
1: 	}
author:Christian Schneider
-------------------------------------------------------------------------------
commit:f50875c
/////////////////////////////////////////////////////////////////////////
1:             jta12Bundles(), //
commit:98ca24c
/////////////////////////////////////////////////////////////////////////
1:             .add("META-INF/persistence.xml", this.getClass().getResourceAsStream("/persistence.xml")) //
commit:95f35a3
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: public class EclipseAdditionalTest extends AbstractJPAItest {
1:     public void testContextCreationWithStartingBundle() throws Exception {
1:         getBundleByName("org.apache.aries.jpa.container.itest.bundle.eclipselink").start();
1:         getEMF("script-test-unit");
1:     }
1:     
1:     @Test
1:     public void testEntityManagerFactoryBuilderWithIncompletePersistenceUnit() throws Exception {
1:         getService(EntityManagerFactoryBuilder.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:     }
1:     
1:     @Test(expected = IllegalStateException.class)
1:         getService(EntityManagerFactory.class, "(osgi.unit.name=incompleteTestUnit)", 1000);
1:         Assert.fail("There should be no EntityManagerFactory registered since this persistence unit is incomplete");
/////////////////////////////////////////////////////////////////////////
0:             .add("META-INF/persistence.xml", this.getClass().getResourceAsStream("persistence.xml")) //
1:         return new Option[] {//
1:             baseOptions(),//
1:             ariesJpa21(),//
1:             eclipseLink(),//
1:             testBundleEclipseLink().noStart(),//
0:         // debug()
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
0:  * Simulates the invalid bundle test from TCK
1:     public void testEntityManagerFactoryWithIncompletePersistenceUnit() throws Exception {
0:         EntityManagerFactory emf = getService(EntityManagerFactory.class, "(osgi.unit.name=incompleteTestUnit)", false);
0:         Assert.assertNull("There should be no EntityManagerFactory registered since this persistence unit is incomplete", emf);
1:     }
1:         InputStream testBundle = TinyBundles.bundle()
1:             .set(Constants.BUNDLE_SYMBOLICNAME, "incompleteTestUnit") //
1:             .set("Meta-Persistence", " ") //
0:             .add("META-INF/persistence.xml", this.getClass().getResourceAsStream("persistence.xml"))
1:             .build(TinyBundles.withBnd());
0:             testBundle(), // Just for Car class
commit:1c56c89
/////////////////////////////////////////////////////////////////////////
1:             streamBundle(testBundle)
commit:83d1ac1
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jpa.container.itest;
1: 
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: 
1: import java.io.InputStream;
1: 
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.apache.aries.jpa.itest.AbstractJPAItest;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
0: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: 
0: /**
0:  * Simulates some tests from the tck
1:  */
0: public class TCKJPATestCase extends AbstractJPAItest {
1: 
0:     @Test
0: 	public void testEntityManagerFactoryWithIncompletePersistenceUnit() throws Exception {
0: 		EntityManagerFactory emf = getService(EntityManagerFactory.class, "(osgi.unit.name=incompleteTestUnit)", false); 
0: 		Assert.assertNull("There should be no EntityManagerFactory registered since this persistence unit is incomplete", emf);
0: 		Bundle testBundle = getBundleByName("incompleteTestUnit");
0: 		testBundle.uninstall();
1: 	}
1: 
1:     @Configuration
1:     public Option[] configuration() {
0:     	InputStream testBundle = TinyBundles.bundle()
0:     			.set(Constants.BUNDLE_SYMBOLICNAME, "incompleteTestUnit")
0:     			.set("Meta-Persistence", " ")
0:     			.add("META-INF/persistence.xml", this.getClass().getResourceAsStream("persistence.xml"))
0:     			.build(TinyBundles.withBnd());
0:         return new Option[] {
0:             baseOptions(), //
0:             ariesJpa20(), //
1:             derbyDSF(), //
0:             hibernate(), //
0:             streamBundle(testBundle),
0:             debug()
1:         };
1:     }
1: }
============================================================================