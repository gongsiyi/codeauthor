1:798ba3b: /*
1:798ba3b:  * Licensed to the Apache Software Foundation (ASF) under one
1:798ba3b:  * or more contributor license agreements.  See the NOTICE file
1:798ba3b:  * distributed with this work for additional information
1:798ba3b:  * regarding copyright ownership.  The ASF licenses this file
1:798ba3b:  * to you under the Apache License, Version 2.0 (the
1:798ba3b:  * "License"); you may not use this file except in compliance
1:798ba3b:  * with the License.  You may obtain a copy of the License at
1:798ba3b:  *
1:798ba3b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:798ba3b:  *
1:798ba3b:  * Unless required by applicable law or agreed to in writing,
1:798ba3b:  * software distributed under the License is distributed on an
1:798ba3b:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:798ba3b:  * KIND, either express or implied.  See the License for the
1:798ba3b:  * specific language governing permissions and limitations
1:798ba3b:  * under the License.
1:798ba3b:  */
1:798ba3b: package org.apache.aries.jpa.impl;
1:798ba3b: 
1:798ba3b: import java.util.HashMap;
1:798ba3b: import java.util.HashSet;
1:798ba3b: import java.util.Iterator;
1:798ba3b: import java.util.List;
1:798ba3b: import java.util.Map;
1:798ba3b: import java.util.Set;
1:798ba3b: 
1:798ba3b: import org.osgi.framework.Bundle;
1:798ba3b: import org.osgi.service.coordinator.Coordination;
1:798ba3b: import org.osgi.service.coordinator.Participant;
1:798ba3b: 
1:798ba3b: public class DummyCoordination implements Coordination {
1:e809e9c:     private Set<Participant> participants = new HashSet<Participant>();
1:798ba3b:     private Map<Class<?>, Object> vars = new HashMap<Class<?>, Object>();
1:798ba3b:     private Coordination enclosing;
1:798ba3b: 
1:798ba3b:     public DummyCoordination(Coordination enclosing) {
1:798ba3b:         this.enclosing = enclosing;
1:798ba3b:     }
1:798ba3b:     
1:798ba3b:     @Override
1:798ba3b:     public long getId() {
1:798ba3b:         return 0;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public String getName() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public void end() {
1:798ba3b:         Iterator<Participant> it = participants.iterator();
1:798ba3b:         while (it.hasNext()) {
1:798ba3b:             try {
1:798ba3b:                 it.next().ended(this);
1:798ba3b:             } catch (Exception e) {
1:798ba3b:             }
1:798ba3b:         }
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public boolean fail(Throwable cause) {
1:798ba3b:         return false;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Throwable getFailure() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public boolean isTerminated() {
1:798ba3b:         return false;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public void addParticipant(Participant participant) {
1:798ba3b:         this.participants.add(participant);
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public List<Participant> getParticipants() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Map<Class<?>, Object> getVariables() {
1:798ba3b:         return vars ;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public long extendTimeout(long timeMillis) {
1:798ba3b:         return 0;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public void join(long timeMillis) throws InterruptedException {
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Coordination push() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Thread getThread() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Bundle getBundle() {
1:798ba3b:         return null;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b:     @Override
1:798ba3b:     public Coordination getEnclosingCoordination() {
1:798ba3b:         return enclosing;
1:798ba3b:     }
1:798ba3b: 
1:798ba3b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:     private Set<Participant> participants = new HashSet<Participant>();
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.impl;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Participant;
1: 
1: public class DummyCoordination implements Coordination {
0:     private Set<Participant> participants = new HashSet<>();
1:     private Map<Class<?>, Object> vars = new HashMap<Class<?>, Object>();
1:     private Coordination enclosing;
1: 
1:     public DummyCoordination(Coordination enclosing) {
1:         this.enclosing = enclosing;
1:     }
1:     
1:     @Override
1:     public long getId() {
1:         return 0;
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void end() {
1:         Iterator<Participant> it = participants.iterator();
1:         while (it.hasNext()) {
1:             try {
1:                 it.next().ended(this);
1:             } catch (Exception e) {
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public boolean fail(Throwable cause) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public Throwable getFailure() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public boolean isTerminated() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public void addParticipant(Participant participant) {
1:         this.participants.add(participant);
1:     }
1: 
1:     @Override
1:     public List<Participant> getParticipants() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Map<Class<?>, Object> getVariables() {
1:         return vars ;
1:     }
1: 
1:     @Override
1:     public long extendTimeout(long timeMillis) {
1:         return 0;
1:     }
1: 
1:     @Override
1:     public void join(long timeMillis) throws InterruptedException {
1:     }
1: 
1:     @Override
1:     public Coordination push() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Thread getThread() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Bundle getBundle() {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Coordination getEnclosingCoordination() {
1:         return enclosing;
1:     }
1: 
1: }
============================================================================