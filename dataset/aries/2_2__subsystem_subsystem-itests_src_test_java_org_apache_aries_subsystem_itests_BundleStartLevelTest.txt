1:590cf45: /*
1:590cf45:  * Licensed to the Apache Software Foundation (ASF) under one
1:590cf45:  * or more contributor license agreements.  See the NOTICE file
1:590cf45:  * distributed with this work for additional information
1:590cf45:  * regarding copyright ownership.  The ASF licenses this file
1:590cf45:  * to you under the Apache License, Version 2.0 (the
1:590cf45:  * "License"); you may not use this file except in compliance
1:590cf45:  * with the License.  You may obtain a copy of the License at
1:590cf45:  *
1:590cf45:  *   http://www.apache.org/licenses/LICENSE-2.0
1:590cf45:  *
1:590cf45:  * Unless required by applicable law or agreed to in writing,
1:590cf45:  * software distributed under the License is distributed on an
1:590cf45:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:590cf45:  * KIND, either express or implied.  See the License for the
1:590cf45:  * specific language governing permissions and limitations
1:590cf45:  * under the License.
1:590cf45:  */
1:590cf45: package org.apache.aries.subsystem.itests;
4:590cf45: 
1:590cf45: import java.io.IOException;
1:590cf45: import java.util.HashMap;
1:590cf45: import java.util.Map;
1:590cf45: 
1:590cf45: import org.junit.Test;
1:590cf45: import org.osgi.framework.Bundle;
1:590cf45: import org.osgi.service.subsystem.Subsystem;
1:590cf45: import org.osgi.service.subsystem.SubsystemConstants;
1:590cf45: 
1:590cf45: public class BundleStartLevelTest extends SubsystemTest {
1:590cf45: 	/*
1:590cf45: 	 * Subsystem-SymbolicName: application.a.esa
1:590cf45: 	 * Subsystem-Content: bundle.b.jar
1:590cf45: 	 */
1:590cf45: 	private static final String APPLICATION_A = "application.a.esa";
1:590cf45:     /*
1:590cf45: 	 * Bundle-SymbolicName: bundle.a.jar
1:590cf45: 	 * Export-Package: x
1:590cf45: 	 */
1:590cf45: 	private static final String BUNDLE_A = "bundle.a.jar";
1:590cf45: 	/*
1:590cf45: 	 * Bundle-SymbolicName: bundle.b.jar
1:590cf45: 	 * Import-Package: x
1:590cf45: 	 */
1:590cf45: 	private static final String BUNDLE_B = "bundle.b.jar";
1:590cf45: 	/*
1:590cf45: 	 * Bundle-SymbolicName: bundle.c.jar
1:590cf45: 	 */
1:590cf45: 	private static final String BUNDLE_C = "bundle.c.jar";
1:590cf45: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:590cf45: 		createBundleA();
1:590cf45: 		createBundleB();
1:590cf45: 		createBundleC();
1:590cf45: 		createApplicationA();
1:57b6627: 		registerRepositoryService(BUNDLE_A, BUNDLE_B);
3:590cf45: 	}
1:590cf45: 	
1:57b6627: 	private void createApplicationA() throws IOException {
1:590cf45: 		createApplicationAManifest();
1:590cf45: 		createSubsystem(APPLICATION_A);
1:590cf45: 	}
1:590cf45: 	
1:57b6627: 	private void createApplicationAManifest() throws IOException {
1:590cf45: 		Map<String, String> attributes = new HashMap<String, String>();
1:590cf45: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:590cf45: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B);
1:590cf45: 		createManifest(APPLICATION_A + ".mf", attributes);
1:590cf45: 	}
1:590cf45: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), exportPackage("x"));
1:590cf45: 	}
1:590cf45: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), importPackage("x"));
1:590cf45: 	}
1:590cf45: 	
1:57b6627: 	private void createBundleC() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_C));
1:590cf45: 	}
1:57b6627: 
1:590cf45:     /*
1:590cf45:      * Tests the start level of bundle constituents.
1:590cf45:      * 
1:590cf45:      * A managed bundle is a bundle that was installed via the Subsystems API
1:590cf45:      * either as content or a dependency. This includes the region context
1:590cf45:      * bundle. The life cycle of managed bundles should follow the life cycle of
1:590cf45:      * the subsystem of which they are constituents. They therefore receive a
1:590cf45:      * start level of 1 to ensure they will be started and stopped at the same
1:590cf45:      * time as the subsystem.
1:590cf45:      * 
1:590cf45:      * An unmanaged bundle is a bundle that was installed outside of the
1:590cf45:      * Subsystem API. For example, the root subsystem may contain bundles that
1:590cf45:      * were installed prior to the subsystems bundle. It's also possible to
1:590cf45:      * install bundles via subsystem.getBundleContext().install(...). Unmanaged
1:590cf45:      * bundles retain the start level setting assigned by the framework or
1:590cf45:      * third party.
1:590cf45:      */
1:590cf45:     @Test
1:590cf45:     public void testBundleStartLevel() throws Exception {
1:590cf45:     	// Set the default bundle start level to something other than 1.
1:590cf45:     	getSystemBundleAsFrameworkStartLevel().setInitialBundleStartLevel(5);
1:590cf45:     	Subsystem a = installSubsystemFromFile(APPLICATION_A);
1:590cf45:     	try {
1:590cf45:     		startSubsystem(a);
1:590cf45:     		try {
1:590cf45:     			// Test managed bundles.
1:57b6627:     			assertStartLevel(context(a).getBundleByName(BUNDLE_B), 1);
1:590cf45:     			assertStartLevel(getRegionContextBundle(a), 1);
1:57b6627:     			assertStartLevel(context(getRootSubsystem()).getBundleByName(BUNDLE_A), 1);
1:590cf45:     			// Test unmanaged bundle.
1:590cf45:     			Bundle c = installBundleFromFile(BUNDLE_C, a);
1:590cf45:     			try {
1:590cf45:     				assertConstituent(a, BUNDLE_C);
1:590cf45:     				assertStartLevel(c, 5);
1:590cf45:     			}
1:590cf45:     			finally {
1:590cf45:     				uninstallSilently(c);
1:590cf45:     			}
1:590cf45:     		}
1:590cf45:     		finally {
1:590cf45:     			stopSubsystemSilently(a);
1:590cf45:     		}
1:590cf45:     	}
1:590cf45:     	finally {
1:590cf45:     		uninstallSubsystemSilently(a);
1:590cf45:     	}
1:590cf45:     }
1:590cf45: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		registerRepositoryService(BUNDLE_A, BUNDLE_B);
1: 	private void createApplicationA() throws IOException {
1: 	private void createApplicationAManifest() throws IOException {
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), exportPackage("x"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), importPackage("x"));
1: 	private void createBundleC() throws IOException {
1: 		createBundle(name(BUNDLE_C));
1: 
/////////////////////////////////////////////////////////////////////////
1:     			assertStartLevel(context(a).getBundleByName(BUNDLE_B), 1);
1:     			assertStartLevel(context(getRootSubsystem()).getBundleByName(BUNDLE_A), 1);
author:John Ross
-------------------------------------------------------------------------------
commit:590cf45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: import aQute.lib.osgi.Constants;
1: 
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class BundleStartLevelTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1:     /*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Export-Package: x
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.c.jar
1: 	 */
1: 	private static final String BUNDLE_C = "bundle.c.jar";
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
1: 		}
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createApplicationA();
0: 		createdApplications = true;
1: 	}
1: 	
0: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A);
1: 	}
1: 	
0: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createBundleC() throws IOException {
0: 		createBundle(BUNDLE_C);
1: 	}
1: 	
0: 	public void setUp() throws Exception {
0: 		super.setUp();
0: 		registerRepositoryService(BUNDLE_A, BUNDLE_B);
1: 	}
1:     
1:     /*
1:      * Tests the start level of bundle constituents.
1:      * 
1:      * A managed bundle is a bundle that was installed via the Subsystems API
1:      * either as content or a dependency. This includes the region context
1:      * bundle. The life cycle of managed bundles should follow the life cycle of
1:      * the subsystem of which they are constituents. They therefore receive a
1:      * start level of 1 to ensure they will be started and stopped at the same
1:      * time as the subsystem.
1:      * 
1:      * An unmanaged bundle is a bundle that was installed outside of the
1:      * Subsystem API. For example, the root subsystem may contain bundles that
1:      * were installed prior to the subsystems bundle. It's also possible to
1:      * install bundles via subsystem.getBundleContext().install(...). Unmanaged
1:      * bundles retain the start level setting assigned by the framework or
1:      * third party.
1:      */
1:     @Test
1:     public void testBundleStartLevel() throws Exception {
1:     	// Set the default bundle start level to something other than 1.
1:     	getSystemBundleAsFrameworkStartLevel().setInitialBundleStartLevel(5);
1:     	Subsystem a = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		startSubsystem(a);
1:     		try {
1:     			// Test managed bundles.
0:     			assertStartLevel(getBundle(a, BUNDLE_B), 1);
1:     			assertStartLevel(getRegionContextBundle(a), 1);
0:     			assertStartLevel(getBundle(getRootSubsystem(), BUNDLE_A), 1);
1:     			// Test unmanaged bundle.
1:     			Bundle c = installBundleFromFile(BUNDLE_C, a);
1:     			try {
1:     				assertConstituent(a, BUNDLE_C);
1:     				assertStartLevel(c, 5);
1:     			}
1:     			finally {
1:     				uninstallSilently(c);
1:     			}
1:     		}
1:     		finally {
1:     			stopSubsystemSilently(a);
1:     		}
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(a);
1:     	}
1:     }
1: }
============================================================================