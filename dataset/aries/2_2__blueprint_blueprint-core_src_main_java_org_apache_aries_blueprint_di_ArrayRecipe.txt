1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
1:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Array;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: import org.osgi.service.blueprint.container.ReifiedType;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * @version $Rev$ $Date$
1:f13c6ac:  */
1:f13c6ac: public class ArrayRecipe extends AbstractRecipe {
1:f13c6ac: 
1:f13c6ac:     private final List<Recipe> list;
1:f13c6ac:     private final Object type;
1:f13c6ac: 
1:f13c6ac:     public ArrayRecipe(String name, Object type) {
1:f13c6ac:         super(name);
1:f13c6ac:         this.type = type;
1:f13c6ac:         this.list = new ArrayList<Recipe>();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getDependencies() {
1:f13c6ac:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(list.size());
1:f13c6ac:         for (Recipe recipe : list) {
1:f13c6ac:             if (recipe != null) {
1:f13c6ac:                 nestedRecipes.add(recipe);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return nestedRecipes;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected Object internalCreate() throws ComponentDefinitionException {
1:f13c6ac:         ReifiedType type;
1:f13c6ac:         if (this.type instanceof Class) {
1:f13c6ac:             type = new ReifiedType((Class) this.type);
1:f13c6ac:         } else if (this.type instanceof String) {
1:f13c6ac:             type = loadType((String) this.type);
1:f13c6ac:         } else {
1:f13c6ac:             type = new ReifiedType(Object.class);
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // create array instance
1:f13c6ac:         Object array;
1:f13c6ac:         try {
1:f13c6ac:             array = Array.newInstance(type.getRawClass(), list.size());
1:f13c6ac:         } catch (Exception e) {
1:f13c6ac:             throw new ComponentDefinitionException("Error while creating array instance: " + type);
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         int index = 0;
1:f13c6ac:         for (Recipe recipe : list) {
1:f13c6ac:             Object value;
1:f13c6ac:             if (recipe != null) {
1:f13c6ac:                 try {
1:f13c6ac:                     value = convert(recipe.create(), type);
1:f13c6ac:                 } catch (Exception e) {
1:f13c6ac:                     throw new ComponentDefinitionException("Unable to convert value " + recipe + " to type " + type, e);
1:f13c6ac:                 }
1:f13c6ac:             } else {
1:f13c6ac:                 value = null;
1:f13c6ac:             }
1:f13c6ac:             
1:f13c6ac:             Array.set(array, index, value);
1:f13c6ac:             index++;
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         return array;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void add(Recipe value) {
1:f13c6ac:         list.add(value);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.lang.reflect.Array;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: 
1: /**
1:  * @version $Rev$ $Date$
1:  */
1: public class ArrayRecipe extends AbstractRecipe {
1: 
1:     private final List<Recipe> list;
1:     private final Object type;
1: 
1:     public ArrayRecipe(String name, Object type) {
1:         super(name);
1:         this.type = type;
1:         this.list = new ArrayList<Recipe>();
1:     }
1: 
1:     public List<Recipe> getDependencies() {
1:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(list.size());
1:         for (Recipe recipe : list) {
1:             if (recipe != null) {
1:                 nestedRecipes.add(recipe);
1:             }
1:         }
1:         return nestedRecipes;
1:     }
1: 
1:     protected Object internalCreate() throws ComponentDefinitionException {
1:         ReifiedType type;
1:         if (this.type instanceof Class) {
1:             type = new ReifiedType((Class) this.type);
1:         } else if (this.type instanceof String) {
1:             type = loadType((String) this.type);
1:         } else {
1:             type = new ReifiedType(Object.class);
1:         }
1: 
1:         // create array instance
1:         Object array;
1:         try {
1:             array = Array.newInstance(type.getRawClass(), list.size());
1:         } catch (Exception e) {
1:             throw new ComponentDefinitionException("Error while creating array instance: " + type);
1:         }
1: 
1:         int index = 0;
1:         for (Recipe recipe : list) {
1:             Object value;
1:             if (recipe != null) {
1:                 try {
1:                     value = convert(recipe.create(), type);
1:                 } catch (Exception e) {
1:                     throw new ComponentDefinitionException("Unable to convert value " + recipe + " to type " + type, e);
1:                 }
1:             } else {
1:                 value = null;
1:             }
1:             
1:             Array.set(array, index, value);
1:             index++;
1:         }
1:         
1:         return array;
1:     }
1: 
1:     public void add(Recipe value) {
1:         list.add(value);
1:     }
1: 
1: }
============================================================================