1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:fc759fb: package org.apache.aries.subsystem.itests.util;
1:fc759fb: 
1:fc759fb: import java.util.Collection;
1:fc759fb: import java.util.HashMap;
1:fc759fb: import java.util.HashSet;
1:fc759fb: import java.util.List;
1:fc759fb: import java.util.Map;
1:fc759fb: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:71fe81a: import org.osgi.resource.Capability;
1:71fe81a: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:48360fa: import org.osgi.service.repository.ExpressionCombiner;
1:fc759fb: import org.osgi.service.repository.Repository;
1:48360fa: import org.osgi.service.repository.RequirementBuilder;
1:48360fa: import org.osgi.service.repository.RequirementExpression;
1:48360fa: import org.osgi.util.promise.Promise;
1:fc759fb: 
1:fc759fb: public class TestRepository implements Repository {
1:fc759fb: 	public static class Builder {
1:fc759fb: 		private final Collection<Resource> resources = new HashSet<Resource>();
1:fc759fb: 		
1:fc759fb: 		public TestRepository build() {
1:fc759fb: 			return new TestRepository(resources);
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public Builder resource(Resource value) {
1:fc759fb: 			resources.add(value);
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 	}
1:fc759fb: 	
1:fc759fb: 	private final Collection<Resource> resources;
1:fc759fb: 	
1:fc759fb: 	public TestRepository(Collection<Resource> resources) {
1:fc759fb: 		this.resources = resources;
1:fc759fb: 	}
1:fc759fb: 	@Override
1:fc759fb: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:fc759fb: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1:fc759fb: 		for (Requirement requirement : requirements) {
1:fc759fb: 			for (Resource resource : resources) {
1:fc759fb: 				List<Capability> capabilities = resource.getCapabilities(requirement.getNamespace());
1:fc759fb: 				for (Capability capability : capabilities) {
1:fc759fb: 					if (ResourceHelper.matches(requirement, capability)) {
1:fc759fb: 						Collection<Capability> c = result.get(requirement);
1:fc759fb: 						if (c == null) {
1:fc759fb: 							c = new HashSet<Capability>();
1:fc759fb: 							result.put(requirement, c);
1:fc759fb: 						}
1:fc759fb: 						c.add(capability);
1:fc759fb: 					}
1:fc759fb: 				}
1:fc759fb: 			}
1:fc759fb: 		}
1:fc759fb: 		return result;
1:fc759fb: 	}
1:48360fa: 	
1:48360fa: 	@Override
1:48360fa: 	public Promise<Collection<Resource>> findProviders(RequirementExpression expression) {
1:48360fa: 		throw new UnsupportedOperationException();
1:48360fa: 	}
1:48360fa: 	
1:48360fa: 	@Override
1:48360fa: 	public ExpressionCombiner getExpressionCombiner() {
1:48360fa: 		throw new UnsupportedOperationException();
1:48360fa: 	}
1:48360fa: 	
1:48360fa: 	@Override
1:48360fa: 	public RequirementBuilder newRequirementBuilder(String namespace) {
1:48360fa: 		throw new UnsupportedOperationException();
1:48360fa: 	}
1:fc759fb: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:48360fa
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.repository.ExpressionCombiner;
1: import org.osgi.service.repository.RequirementBuilder;
1: import org.osgi.service.repository.RequirementExpression;
1: import org.osgi.util.promise.Promise;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Override
1: 	public Promise<Collection<Resource>> findProviders(RequirementExpression expression) {
1: 		throw new UnsupportedOperationException();
1: 	}
1: 	
1: 	@Override
1: 	public ExpressionCombiner getExpressionCombiner() {
1: 		throw new UnsupportedOperationException();
1: 	}
1: 	
1: 	@Override
1: 	public RequirementBuilder newRequirementBuilder(String namespace) {
1: 		throw new UnsupportedOperationException();
1: 	}
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.ResourceHelper;
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: 
1: public class TestRepository implements Repository {
1: 	public static class Builder {
1: 		private final Collection<Resource> resources = new HashSet<Resource>();
1: 		
1: 		public TestRepository build() {
1: 			return new TestRepository(resources);
1: 		}
1: 		
1: 		public Builder resource(Resource value) {
1: 			resources.add(value);
1: 			return this;
1: 		}
1: 	}
1: 	
1: 	private final Collection<Resource> resources;
1: 	
1: 	public TestRepository(Collection<Resource> resources) {
1: 		this.resources = resources;
1: 	}
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1: 		for (Requirement requirement : requirements) {
1: 			for (Resource resource : resources) {
1: 				List<Capability> capabilities = resource.getCapabilities(requirement.getNamespace());
1: 				for (Capability capability : capabilities) {
1: 					if (ResourceHelper.matches(requirement, capability)) {
1: 						Collection<Capability> c = result.get(requirement);
1: 						if (c == null) {
1: 							c = new HashSet<Capability>();
1: 							result.put(requirement, c);
1: 						}
1: 						c.add(capability);
1: 					}
1: 				}
1: 			}
1: 		}
1: 		return result;
1: 	}
1: }
============================================================================