1:e6518d7: /*
1:e6518d7:  * Licensed to the Apache Software Foundation (ASF) under one
1:e6518d7:  * or more contributor license agreements.  See the NOTICE file
1:e6518d7:  * distributed with this work for additional information
1:e6518d7:  * regarding copyright ownership.  The ASF licenses this file
1:e6518d7:  * to you under the Apache License, Version 2.0 (the
1:e6518d7:  * "License"); you may not use this file except in compliance
1:e6518d7:  * with the License.  You may obtain a copy of the License at
1:e6518d7:  *
1:e6518d7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e6518d7:  *
1:e6518d7:  * Unless required by applicable law or agreed to in writing,
1:e6518d7:  * software distributed under the License is distributed on an
1:e6518d7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e6518d7:  * KIND, either express or implied.  See the License for the
1:e6518d7:  * specific language governing permissions and limitations
1:e6518d7:  * under the License.
1:e6518d7:  */
1:e6518d7: package org.apache.aries.proxy.impl.common;
4:e6518d7: 
1:e6518d7: import org.objectweb.asm.ClassVisitor;
1:e6518d7: import org.objectweb.asm.ClassWriter;
1:e6518d7: import org.objectweb.asm.MethodVisitor;
1:322f373: import org.objectweb.asm.Opcodes;
1:e6518d7: import org.objectweb.asm.commons.JSRInlinerAdapter;
1:e6518d7: /**
1:e6518d7:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:e6518d7:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
1:e6518d7:  * anyway...)
1:e6518d7:  */
1:e6518d7: public final class OSGiFriendlyClassVisitor extends ClassVisitor {
1:e6518d7: 
1:e6518d7:  
1:e6518d7:   private final boolean inlineJSR;
1:9a9631e:   
1:9a9631e:   public OSGiFriendlyClassVisitor(ClassVisitor cv, int arg1) {
1:9a9631e:    
1:9a9631e:     super(Opcodes.ASM5, cv);
1:9a9631e: 
1:9a9631e:     inlineJSR = arg1 == ClassWriter.COMPUTE_FRAMES;
1:9a9631e:   }
1:e6518d7:   
1:e6518d7:   
1:e6518d7: 
1:e6518d7:   
1:e6518d7:   @Override
1:e6518d7:   public MethodVisitor visitMethod(int arg0, String arg1, String arg2,
1:e6518d7:       String arg3, String[] arg4) {
1:e6518d7:     MethodVisitor mv =  cv.visitMethod(arg0, arg1, arg2, arg3, arg4);
1:e6518d7:     
1:e6518d7:     if(inlineJSR)
1:e6518d7:       mv = new JSRInlinerAdapter(mv, arg0, arg1, arg2, arg3, arg4);
1:e6518d7:     
1:e6518d7:     return mv;
2:e6518d7:   }
1:e6518d7: 
1:e6518d7: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1:   
1:   public OSGiFriendlyClassVisitor(ClassVisitor cv, int arg1) {
1:    
1:     super(Opcodes.ASM5, cv);
1: 
1:     inlineJSR = arg1 == ClassWriter.COMPUTE_FRAMES;
1:   }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.Opcodes;
/////////////////////////////////////////////////////////////////////////
0:     super(Opcodes.ASM4, cv);
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.common;
1: 
0: import org.apache.aries.proxy.impl.gen.Constants;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.ClassWriter;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.commons.JSRInlinerAdapter;
1: /**
1:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
1:  * anyway...)
1:  */
1: public final class OSGiFriendlyClassVisitor extends ClassVisitor {
1: 
1:  
1:   private final boolean inlineJSR;
1:   
0:   public OSGiFriendlyClassVisitor(ClassVisitor cv, int arg1) {
1:    
0:     super(Constants.ASM4, cv);
1: 
0:     inlineJSR = arg1 == ClassWriter.COMPUTE_FRAMES;
1:   }
1:   
1:   
1: 
1:   
1:   @Override
1:   public MethodVisitor visitMethod(int arg0, String arg1, String arg2,
1:       String arg3, String[] arg4) {
1:     MethodVisitor mv =  cv.visitMethod(arg0, arg1, arg2, arg3, arg4);
1:     
1:     if(inlineJSR)
1:       mv = new JSRInlinerAdapter(mv, arg0, arg1, arg2, arg3, arg4);
1:     
1:     return mv;
1:   }
1: 
1: }
============================================================================