1:c0dfffa: /**
1:c0dfffa:  * Licensed to the Apache Software Foundation (ASF) under one
1:c0dfffa:  * or more contributor license agreements.  See the NOTICE file
1:c0dfffa:  * distributed with this work for additional information
1:c0dfffa:  * regarding copyright ownership.  The ASF licenses this file
1:c0dfffa:  * to you under the Apache License, Version 2.0 (the
1:c0dfffa:  * "License"); you may not use this file except in compliance
1:c0dfffa:  * with the License.  You may obtain a copy of the License at
1:c0dfffa:  *
1:c0dfffa:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c0dfffa:  *
1:c0dfffa:  * Unless required by applicable law or agreed to in writing,
1:c0dfffa:  * software distributed under the License is distributed on an
1:c0dfffa:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c0dfffa:  * KIND, either express or implied.  See the License for the
1:c0dfffa:  * specific language governing permissions and limitations
1:c0dfffa:  * under the License.
1:c0dfffa:  */
1:c0dfffa: package org.apache.aries.samples.transaction;
1:c0dfffa: 
1:c0dfffa: import java.io.IOException;
1:c0dfffa: import java.io.PrintWriter;
1:c0dfffa: import java.sql.Connection;
1:c0dfffa: import java.sql.PreparedStatement;
1:c0dfffa: import java.sql.ResultSet;
1:c0dfffa: import java.sql.SQLException;
1:c0dfffa: import java.util.Properties;
1:c0dfffa: 
1:c0dfffa: import javax.servlet.ServletException;
1:c0dfffa: import javax.servlet.http.HttpServlet;
1:c0dfffa: import javax.servlet.http.HttpServletRequest;
1:c0dfffa: import javax.servlet.http.HttpServletResponse;
1:c0dfffa: import javax.sql.XAConnection;
1:c0dfffa: import javax.sql.XADataSource;
1:c0dfffa: import javax.transaction.HeuristicMixedException;
1:c0dfffa: import javax.transaction.HeuristicRollbackException;
1:c0dfffa: import javax.transaction.NotSupportedException;
1:c0dfffa: import javax.transaction.RollbackException;
1:c0dfffa: import javax.transaction.SystemException;
1:c0dfffa: import javax.transaction.Transaction;
1:c0dfffa: import javax.transaction.TransactionManager;
1:c0dfffa: import javax.transaction.xa.XAResource;
1:c0dfffa: 
1:c0dfffa: import org.osgi.framework.BundleContext;
1:c0dfffa: import org.osgi.framework.ServiceReference;
1:c0dfffa: import org.osgi.service.jdbc.DataSourceFactory;
1:c0dfffa: 
1:c0dfffa: public class TxDBServlet extends HttpServlet {
1:c0dfffa: 		
1:c0dfffa: 	private static final long serialVersionUID = 1L;
1:c0dfffa: 	private static final String OSGI_BUNDLECONTEXT_ATTRIBUTE = "osgi-bundlecontext";
1:c0dfffa: 	private static final String CLEAN_TABLE = "delete from txDemo";	
1:c0dfffa: 	private static final String SELECT_TABLE = "SELECT * FROM txDemo";
1:c0dfffa: 	private static final String INSERT_INTO_TABLE = "INSERT INTO txDemo VALUES(?)";
1:c0dfffa: 	private static final String LOGO_HEADER = "<TABLE border='0\' cellpadding=\'0\' cellspacing='0' width='100%'> " +
1:c0dfffa: 							"<TR> " +
1:c0dfffa: 							"<TD align='left' class='topbardiv' nowrap=''>" +
1:c0dfffa: 							"<A href='http://incubator.apache.org/aries/' title='Apache Aries (incubating)'>" +
1:c0dfffa: 							"<IMG border='0' src='http://incubator.apache.org/aries/images/Arieslogo_Horizontal.gif'>" +
1:c0dfffa: 							"</A>" +
1:c0dfffa: 							"</TD>" +
1:c0dfffa: 
1:c0dfffa: 							"<TD align='right' nowrap=''>" + 
1:c0dfffa: 							"<A href='http://www.apache.org/' title='The Apache Software Foundation'>" +
1:c0dfffa: 							"<IMG border='0' src='http://incubator.apache.org/aries/images/apache-incubator-logo.png'>" +
1:c0dfffa: 							"</A>"+
1:c0dfffa: 							"</TD>"+
1:c0dfffa: 
1:c0dfffa: 							"</TR>"+
1:c0dfffa: 							"</TABLE>";
1:c0dfffa: 	
1:c0dfffa: 	private PrintWriter pw = null;
1:c0dfffa: 
1:c0dfffa: 	public void init() throws ServletException {
1:c0dfffa:     }
1:c0dfffa:     
1:c0dfffa: 	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:c0dfffa: 		pw = response.getWriter();
1:c0dfffa: 	    pw.write(LOGO_HEADER);
1:c0dfffa: 		// Get the bundle context from ServletContext attributes
1:c0dfffa: 		BundleContext ctx = (BundleContext) getServletContext().getAttribute(OSGI_BUNDLECONTEXT_ATTRIBUTE);
1:c0dfffa: 
1:c0dfffa: 		pw.println("<html>");
1:c0dfffa: 		pw.println("<head>");
1:c0dfffa: 		pw.println("<link rel=\"stylesheet\" type=\"text/css\" href=\"tableTemplate.css\"/>");
1:c0dfffa: 		pw.println("<body>");
1:c0dfffa: 		pw.println("<h2 align=center><p><font face=\"Tahoma\">Sample Application for JDBC usage in JTA Transactions.</font></h2>");
1:c0dfffa: 		pw.println("<p><p>");
1:c0dfffa: 		
1:c0dfffa: 		ServiceReference tmServiceRef = ctx.getServiceReference("javax.transaction.TransactionManager");
1:c0dfffa: 		ServiceReference derbyServiceRef = ctx.getServiceReference(DataSourceFactory.class.getName());
1:c0dfffa: 
1:c0dfffa: 		if(tmServiceRef == null || derbyServiceRef == null){
1:c0dfffa: 			pw.println("<font face=\"Tahoma\">TransactionManager or Derby driver are not available in the OSGI registry.</font><br>");
1:c0dfffa: 		} else {
1:c0dfffa: 			TransactionManager tm = (TransactionManager)ctx.getService(tmServiceRef);
1:c0dfffa: 			DataSourceFactory derbyRegistry = (DataSourceFactory)ctx.getService(derbyServiceRef);
1:c0dfffa: 			try{
1:c0dfffa: 				// Set the needed properties for the database connection
1:c0dfffa: 				Properties props = new Properties();
1:c0dfffa: 				props.put(DataSourceFactory.JDBC_URL, "jdbc:derby:txDemo");
1:c0dfffa: 				props.put(DataSourceFactory.JDBC_DATABASE_NAME, "txDemo");
1:c0dfffa: 				props.put(DataSourceFactory.JDBC_USER, "");
1:c0dfffa: 				props.put(DataSourceFactory.JDBC_PASSWORD, "");
1:c0dfffa: 				XADataSource xaDataSource = derbyRegistry.createXADataSource(props);
1:c0dfffa: 
1:c0dfffa: 				pw.println("<center><form><table><tr><td align='right'>Value: </td><td align=left><input type='text' name='value' value='' size='12'/><input type='submit' name='action' value='InsertAndCommit' size='100'/></td></tr>");
1:c0dfffa: 				pw.println("<tr><td align='right'>Value: </td><td align=left><input type='text' name='value' value='' size='12'/><input type='submit' name='action' value='InsertAndRollback' size='100'/></center></td></tr>");
1:c0dfffa: 				pw.println("<tr colspan='2' align='center'><td>&nbsp;</td><td><input type='submit' name='action' value='cleanTable' size='100' />&nbsp;<input type='submit' name='action' value='printTable' size='100'/></td><tr></table></form></center>");				
1:c0dfffa: 				
1:c0dfffa: 				
1:c0dfffa: 				String value = request.getParameter("value");
1:c0dfffa: 				String action = request.getParameter("action");
1:c0dfffa: 				
1:c0dfffa: 				if(action != null && action.equals("InsertAndCommit")){
1:c0dfffa: 					insertIntoTransaction(xaDataSource, tm, value, true);
1:c0dfffa: 				} else if(action != null && action.equals("InsertAndRollback")){
1:c0dfffa: 					insertIntoTransaction(xaDataSource, tm, value, false);
1:c0dfffa: 				} else if(action != null && action.equals("cleanTable")){
1:c0dfffa: 					cleanTable(xaDataSource);
1:c0dfffa: 				}
1:c0dfffa: 				printTable(xaDataSource);
1:c0dfffa: 			} catch (Exception e){
1:c0dfffa: 				pw.println("<font face=\"Tahoma\">Unexpected exception occurred "+ e.toString()+".</font><br>");
1:c0dfffa: 				e.printStackTrace(pw);
1:c0dfffa: 			}
1:c0dfffa: 
1:c0dfffa: 		}
1:c0dfffa: 		pw.println("</body>");
1:c0dfffa: 		pw.println("</html>");
1:c0dfffa: 		pw.flush();
1:c0dfffa: 	}// end of doGet(HttpServletRequest request, HttpServletResponse response)
1:c0dfffa: 
1:c0dfffa: 	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,
1:c0dfffa: 			IOException {
1:c0dfffa: 		doGet(request, response);
1:c0dfffa: 	}// end of doPost(HttpServletRequest request, HttpServletResponse response)
1:c0dfffa: 
1:c0dfffa: 
1:c0dfffa: 	/**
1:c0dfffa: 	 * Prints the table 
1:c0dfffa: 	 * @param xaDataSource
1:c0dfffa: 	 * @throws SQLException
1:c0dfffa: 	 */
1:c0dfffa: 	private void printTable(XADataSource xaDataSource) throws SQLException {
1:c0dfffa: 		XAConnection xaConnection = xaDataSource.getXAConnection();
1:c0dfffa: 		Connection connection = xaConnection.getConnection();		
1:c0dfffa: 		PreparedStatement selectStatement = connection.prepareStatement(SELECT_TABLE);
1:c0dfffa: 		ResultSet set = selectStatement.executeQuery();		
1:c0dfffa: 		pw.write("<center><br><table>");
1:c0dfffa: 		  pw.write("<tr BGCOLOR=#FFCC33>");
1:c0dfffa: 		  pw.write("<td><font face=\"Tahoma\"><b>VALUES</font></td>");
1:c0dfffa: 		  pw.write("</tr>");
1:c0dfffa: 			  while (set.next()) {
1:c0dfffa: 				  pw.write("<tr>");
1:c0dfffa: 				  pw.write("<td><font face=\"Tahoma\">");
1:c0dfffa: 				  pw.write(set.getString("value"));
1:c0dfffa: 				  pw.write("</font></td>");
1:c0dfffa: 				  pw.write("</tr>");
1:c0dfffa: 			  }
1:c0dfffa: 		  pw.write("</table><br></center>");
1:c0dfffa: 	}
1:c0dfffa: 	
1:c0dfffa: 	/**
1:c0dfffa: 	 * This method demonstrates how to enlist JDBC connection into Transaction according OSGi enterprise specification.
1:c0dfffa: 	 * 
1:c0dfffa: 	 * @param xads XADataSource
1:c0dfffa: 	 * @param tm TransactionManager
1:c0dfffa: 	 * @param value which will be inserted into table
1:c0dfffa: 	 * @param toCommit Specify if the transaction will be committed or rolledback
1:c0dfffa: 	 * @throws SQLException
1:c0dfffa: 	 * @throws GenericJTAException
1:c0dfffa: 	 */
1:c0dfffa: 	private void insertIntoTransaction(XADataSource xads, TransactionManager tm, String value, boolean toCommit) throws SQLException, GenericJTAException{
1:c0dfffa: 		
1:c0dfffa: 		XAConnection xaConnection = xads.getXAConnection();
1:c0dfffa: 		Connection connection = xaConnection.getConnection();
1:c0dfffa: 		XAResource xaResource  = xaConnection.getXAResource();
1:c0dfffa: 		try{
1:c0dfffa: 			tm.begin();
1:c0dfffa: 			Transaction transaction = tm.getTransaction();
1:c0dfffa: 			transaction.enlistResource(xaResource);
1:c0dfffa: 	
1:c0dfffa: 			PreparedStatement insertStatement = connection.prepareStatement(INSERT_INTO_TABLE);
1:c0dfffa: 			insertStatement.setString(1, value);
1:c0dfffa: 			insertStatement.executeUpdate();
1:c0dfffa: 			if(toCommit){
1:c0dfffa: 				transaction.commit();
1:c0dfffa: 			} else {
1:c0dfffa: 				transaction.rollback();
1:c0dfffa: 			}
1:c0dfffa: 		}catch(RollbackException e){
1:c0dfffa: 			throw new GenericJTAException(e);	  
1:c0dfffa: 		} catch (SecurityException e) {
1:c0dfffa: 			throw new GenericJTAException(e);	  
1:c0dfffa: 		} catch (IllegalStateException e) {
1:c0dfffa: 			throw new GenericJTAException(e);	  
1:c0dfffa: 		} catch (HeuristicMixedException e) {
1:c0dfffa: 			throw new GenericJTAException(e);
1:c0dfffa: 		} catch (HeuristicRollbackException e) {
1:c0dfffa: 			throw new GenericJTAException(e);
1:c0dfffa: 		} catch (SystemException e) {
1:c0dfffa: 			throw new GenericJTAException(e);
1:c0dfffa: 		} catch (NotSupportedException e) {
1:c0dfffa: 			throw new GenericJTAException(e);
1:c0dfffa: 		}	
1:c0dfffa: 	}
1:c0dfffa: 	
1:c0dfffa: 	
1:c0dfffa: 	/**
1:c0dfffa: 	 * Cleans the Table
1:c0dfffa: 	 * 
1:c0dfffa: 	 * @param xaDataSource
1:c0dfffa: 	 * @throws SQLException
1:c0dfffa: 	 */
1:c0dfffa: 	private void cleanTable(XADataSource xaDataSource) throws SQLException {
1:c0dfffa: 		XAConnection xaConnection = xaDataSource.getXAConnection();
1:c0dfffa: 		Connection connection = xaConnection.getConnection();
1:c0dfffa: 		PreparedStatement statement = connection.prepareStatement(CLEAN_TABLE);
1:c0dfffa: 		statement.executeUpdate();
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
commit:fb2a45a
author:Violeta Georgieva Georgieva
-------------------------------------------------------------------------------
commit:c0dfffa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.transaction;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: 
1: public class TxDBServlet extends HttpServlet {
1: 		
1: 	private static final long serialVersionUID = 1L;
1: 	private static final String OSGI_BUNDLECONTEXT_ATTRIBUTE = "osgi-bundlecontext";
1: 	private static final String CLEAN_TABLE = "delete from txDemo";	
1: 	private static final String SELECT_TABLE = "SELECT * FROM txDemo";
1: 	private static final String INSERT_INTO_TABLE = "INSERT INTO txDemo VALUES(?)";
1: 	private static final String LOGO_HEADER = "<TABLE border='0\' cellpadding=\'0\' cellspacing='0' width='100%'> " +
1: 							"<TR> " +
1: 							"<TD align='left' class='topbardiv' nowrap=''>" +
1: 							"<A href='http://incubator.apache.org/aries/' title='Apache Aries (incubating)'>" +
1: 							"<IMG border='0' src='http://incubator.apache.org/aries/images/Arieslogo_Horizontal.gif'>" +
1: 							"</A>" +
1: 							"</TD>" +
1: 
1: 							"<TD align='right' nowrap=''>" + 
1: 							"<A href='http://www.apache.org/' title='The Apache Software Foundation'>" +
1: 							"<IMG border='0' src='http://incubator.apache.org/aries/images/apache-incubator-logo.png'>" +
1: 							"</A>"+
1: 							"</TD>"+
1: 
1: 							"</TR>"+
1: 							"</TABLE>";
1: 	
1: 	private PrintWriter pw = null;
1: 
1: 	public void init() throws ServletException {
1:     }
1:     
1: 	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1: 		pw = response.getWriter();
1: 	    pw.write(LOGO_HEADER);
1: 		// Get the bundle context from ServletContext attributes
1: 		BundleContext ctx = (BundleContext) getServletContext().getAttribute(OSGI_BUNDLECONTEXT_ATTRIBUTE);
1: 
1: 		pw.println("<html>");
1: 		pw.println("<head>");
1: 		pw.println("<link rel=\"stylesheet\" type=\"text/css\" href=\"tableTemplate.css\"/>");
1: 		pw.println("<body>");
1: 		pw.println("<h2 align=center><p><font face=\"Tahoma\">Sample Application for JDBC usage in JTA Transactions.</font></h2>");
1: 		pw.println("<p><p>");
1: 		
1: 		ServiceReference tmServiceRef = ctx.getServiceReference("javax.transaction.TransactionManager");
1: 		ServiceReference derbyServiceRef = ctx.getServiceReference(DataSourceFactory.class.getName());
1: 
1: 		if(tmServiceRef == null || derbyServiceRef == null){
1: 			pw.println("<font face=\"Tahoma\">TransactionManager or Derby driver are not available in the OSGI registry.</font><br>");
1: 		} else {
1: 			TransactionManager tm = (TransactionManager)ctx.getService(tmServiceRef);
1: 			DataSourceFactory derbyRegistry = (DataSourceFactory)ctx.getService(derbyServiceRef);
1: 			try{
1: 				// Set the needed properties for the database connection
1: 				Properties props = new Properties();
1: 				props.put(DataSourceFactory.JDBC_URL, "jdbc:derby:txDemo");
1: 				props.put(DataSourceFactory.JDBC_DATABASE_NAME, "txDemo");
1: 				props.put(DataSourceFactory.JDBC_USER, "");
1: 				props.put(DataSourceFactory.JDBC_PASSWORD, "");
1: 				XADataSource xaDataSource = derbyRegistry.createXADataSource(props);
1: 
1: 				pw.println("<center><form><table><tr><td align='right'>Value: </td><td align=left><input type='text' name='value' value='' size='12'/><input type='submit' name='action' value='InsertAndCommit' size='100'/></td></tr>");
1: 				pw.println("<tr><td align='right'>Value: </td><td align=left><input type='text' name='value' value='' size='12'/><input type='submit' name='action' value='InsertAndRollback' size='100'/></center></td></tr>");
1: 				pw.println("<tr colspan='2' align='center'><td>&nbsp;</td><td><input type='submit' name='action' value='cleanTable' size='100' />&nbsp;<input type='submit' name='action' value='printTable' size='100'/></td><tr></table></form></center>");				
1: 				
1: 				
1: 				String value = request.getParameter("value");
1: 				String action = request.getParameter("action");
1: 				
1: 				if(action != null && action.equals("InsertAndCommit")){
1: 					insertIntoTransaction(xaDataSource, tm, value, true);
1: 				} else if(action != null && action.equals("InsertAndRollback")){
1: 					insertIntoTransaction(xaDataSource, tm, value, false);
1: 				} else if(action != null && action.equals("cleanTable")){
1: 					cleanTable(xaDataSource);
1: 				}
1: 				printTable(xaDataSource);
1: 			} catch (Exception e){
1: 				pw.println("<font face=\"Tahoma\">Unexpected exception occurred "+ e.toString()+".</font><br>");
1: 				e.printStackTrace(pw);
1: 			}
1: 
1: 		}
1: 		pw.println("</body>");
1: 		pw.println("</html>");
1: 		pw.flush();
1: 	}// end of doGet(HttpServletRequest request, HttpServletResponse response)
1: 
1: 	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,
1: 			IOException {
1: 		doGet(request, response);
1: 	}// end of doPost(HttpServletRequest request, HttpServletResponse response)
1: 
1: 
1: 	/**
1: 	 * Prints the table 
1: 	 * @param xaDataSource
1: 	 * @throws SQLException
1: 	 */
1: 	private void printTable(XADataSource xaDataSource) throws SQLException {
1: 		XAConnection xaConnection = xaDataSource.getXAConnection();
1: 		Connection connection = xaConnection.getConnection();		
1: 		PreparedStatement selectStatement = connection.prepareStatement(SELECT_TABLE);
1: 		ResultSet set = selectStatement.executeQuery();		
1: 		pw.write("<center><br><table>");
1: 		  pw.write("<tr BGCOLOR=#FFCC33>");
1: 		  pw.write("<td><font face=\"Tahoma\"><b>VALUES</font></td>");
1: 		  pw.write("</tr>");
1: 			  while (set.next()) {
1: 				  pw.write("<tr>");
1: 				  pw.write("<td><font face=\"Tahoma\">");
1: 				  pw.write(set.getString("value"));
1: 				  pw.write("</font></td>");
1: 				  pw.write("</tr>");
1: 			  }
1: 		  pw.write("</table><br></center>");
1: 	}
1: 	
1: 	/**
1: 	 * This method demonstrates how to enlist JDBC connection into Transaction according OSGi enterprise specification.
1: 	 * 
1: 	 * @param xads XADataSource
1: 	 * @param tm TransactionManager
1: 	 * @param value which will be inserted into table
1: 	 * @param toCommit Specify if the transaction will be committed or rolledback
1: 	 * @throws SQLException
1: 	 * @throws GenericJTAException
1: 	 */
1: 	private void insertIntoTransaction(XADataSource xads, TransactionManager tm, String value, boolean toCommit) throws SQLException, GenericJTAException{
1: 		
1: 		XAConnection xaConnection = xads.getXAConnection();
1: 		Connection connection = xaConnection.getConnection();
1: 		XAResource xaResource  = xaConnection.getXAResource();
1: 		try{
1: 			tm.begin();
1: 			Transaction transaction = tm.getTransaction();
1: 			transaction.enlistResource(xaResource);
1: 	
1: 			PreparedStatement insertStatement = connection.prepareStatement(INSERT_INTO_TABLE);
1: 			insertStatement.setString(1, value);
1: 			insertStatement.executeUpdate();
1: 			if(toCommit){
1: 				transaction.commit();
1: 			} else {
1: 				transaction.rollback();
1: 			}
1: 		}catch(RollbackException e){
1: 			throw new GenericJTAException(e);	  
1: 		} catch (SecurityException e) {
1: 			throw new GenericJTAException(e);	  
1: 		} catch (IllegalStateException e) {
1: 			throw new GenericJTAException(e);	  
1: 		} catch (HeuristicMixedException e) {
1: 			throw new GenericJTAException(e);
1: 		} catch (HeuristicRollbackException e) {
1: 			throw new GenericJTAException(e);
1: 		} catch (SystemException e) {
1: 			throw new GenericJTAException(e);
1: 		} catch (NotSupportedException e) {
1: 			throw new GenericJTAException(e);
1: 		}	
1: 	}
1: 	
1: 	
1: 	/**
1: 	 * Cleans the Table
1: 	 * 
1: 	 * @param xaDataSource
1: 	 * @throws SQLException
1: 	 */
1: 	private void cleanTable(XADataSource xaDataSource) throws SQLException {
1: 		XAConnection xaConnection = xaDataSource.getXAConnection();
1: 		Connection connection = xaConnection.getConnection();
1: 		PreparedStatement statement = connection.prepareStatement(CLEAN_TABLE);
1: 		statement.executeUpdate();
1: 	}
1: 
1: }
============================================================================