1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: package org.osgi.service.transaction.control;
1:314564e: 
1:314564e: import java.util.function.Consumer;
1:314564e: 
1:314564e: import javax.transaction.xa.XAResource;
1:314564e: 
1:47a70d3: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1:47a70d3: 
1:314564e: /**
1:314564e:  * A transaction context defines the current transaction, and allows resources
1:314564e:  * to register information and/or synchronisations
1:314564e:  */
1:314564e: public interface TransactionContext {
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Get the key associated with the current transaction
1:314564e: 	 * 
1:314564e: 	 * @return the transaction key, or null if there is no transaction
1:314564e: 	 */
1:314564e: 	Object getTransactionKey();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Get a value scoped to this transaction
1:314564e: 	 * 
1:314564e: 	 * @param key
1:314564e: 	 * @return The resource, or <code>null</code>
1:314564e: 	 */
1:314564e: 	Object getScopedValue(Object key);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Associate a value with this transaction
1:314564e: 	 * 
1:314564e: 	 * @param key
1:314564e: 	 * @param value
1:314564e: 	 */
1:314564e: 	void putScopedValue(Object key, Object value);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Is this transaction marked for rollback only
1:314564e: 	 * 
1:314564e: 	 * @return true if this transaction is rollback only
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	boolean getRollbackOnly() throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Mark this transaction for rollback
1:314564e: 	 * 
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	void setRollbackOnly() throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return The current transaction status
1:314564e: 	 */
1:314564e: 	TransactionStatus getTransactionStatus();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Register a callback that will be made before a call to commit or rollback
1:314564e: 	 * 
1:314564e: 	 * @param job
1:314564e: 	 * @throws IllegalStateException if no transaction is active or the
1:314564e: 	 *             transaction has already passed beyond the
1:314564e: 	 *             {@link TransactionStatus#MARKED_ROLLBACK} state
1:314564e: 	 */
1:314564e: 	void preCompletion(Runnable job) throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Register a callback that will be made after the decision to commit or
1:314564e: 	 * rollback
1:314564e: 	 * 
1:314564e: 	 * @param job
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	void postCompletion(Consumer<TransactionStatus> job)
1:314564e: 			throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return true if the current transaction supports XA resources
1:314564e: 	 */
1:314564e: 	boolean supportsXA();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return true if the current transaction supports Local resources
1:314564e: 	 */
1:314564e: 	boolean supportsLocal();
1:314564e: 
1:314564e: 	/**
1:661c406: 	 * @return true if the TransactionContext supports read-only optimisations
1:661c406: 	 * <em>and</em> the transaction was marked read only. In particular it is
1:661c406: 	 * legal for this method to return false even if the transaction was marked
1:661c406: 	 * read only by the initiating client.
1:661c406: 	 */
1:661c406: 	boolean isReadOnly();
1:661c406: 
1:661c406: 	/**
1:314564e: 	 * Register an XA resource with the current transaction
1:314564e: 	 * 
1:314564e: 	 * @param resource
1:47a70d3: 	 * @param name 		The resource name used for recovery, may be <code>null</code>
1:47a70d3: 	 *             		if this resource is not recoverable. If a name is passed then
1:47a70d3: 	 *                  a corresponding {@link RecoverableXAResource} must be registered
1:47a70d3: 	 *                  in the service registry
1:314564e: 	 * @throws IllegalStateException if no transaction is active, or the current
1:314564e: 	 *             transaction is not XA capable
1:314564e: 	 */
1:47a70d3: 	void registerXAResource(XAResource resource, String name) throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Register an XA resource with the current transaction
1:314564e: 	 * 
1:314564e: 	 * @param resource
1:314564e: 	 * @throws IllegalStateException if no transaction is active, or the current
1:314564e: 	 *             transaction is not XA capable
1:314564e: 	 */
1:314564e: 	void registerLocalResource(LocalResource resource)
1:314564e: 			throws IllegalStateException;
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	 * @param name 		The resource name used for recovery, may be <code>null</code>
1: 	 *             		if this resource is not recoverable. If a name is passed then
1: 	 *                  a corresponding {@link RecoverableXAResource} must be registered
1: 	 *                  in the service registry
1: 	void registerXAResource(XAResource resource, String name) throws IllegalStateException;
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 	 * @return true if the TransactionContext supports read-only optimisations
1: 	 * <em>and</em> the transaction was marked read only. In particular it is
1: 	 * legal for this method to return false even if the transaction was marked
1: 	 * read only by the initiating client.
1: 	 */
1: 	boolean isReadOnly();
1: 
1: 	/**
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control;
1: 
1: import java.util.function.Consumer;
1: 
1: import javax.transaction.xa.XAResource;
1: 
1: /**
1:  * A transaction context defines the current transaction, and allows resources
1:  * to register information and/or synchronisations
1:  */
1: public interface TransactionContext {
1: 
1: 	/**
1: 	 * Get the key associated with the current transaction
1: 	 * 
1: 	 * @return the transaction key, or null if there is no transaction
1: 	 */
1: 	Object getTransactionKey();
1: 
1: 	/**
1: 	 * Get a value scoped to this transaction
1: 	 * 
1: 	 * @param key
1: 	 * @return The resource, or <code>null</code>
1: 	 */
1: 	Object getScopedValue(Object key);
1: 
1: 	/**
1: 	 * Associate a value with this transaction
1: 	 * 
1: 	 * @param key
1: 	 * @param value
1: 	 */
1: 	void putScopedValue(Object key, Object value);
1: 
1: 	/**
1: 	 * Is this transaction marked for rollback only
1: 	 * 
1: 	 * @return true if this transaction is rollback only
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	boolean getRollbackOnly() throws IllegalStateException;
1: 
1: 	/**
1: 	 * Mark this transaction for rollback
1: 	 * 
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	void setRollbackOnly() throws IllegalStateException;
1: 
1: 	/**
1: 	 * @return The current transaction status
1: 	 */
1: 	TransactionStatus getTransactionStatus();
1: 
1: 	/**
1: 	 * Register a callback that will be made before a call to commit or rollback
1: 	 * 
1: 	 * @param job
1: 	 * @throws IllegalStateException if no transaction is active or the
1: 	 *             transaction has already passed beyond the
1: 	 *             {@link TransactionStatus#MARKED_ROLLBACK} state
1: 	 */
1: 	void preCompletion(Runnable job) throws IllegalStateException;
1: 
1: 	/**
1: 	 * Register a callback that will be made after the decision to commit or
1: 	 * rollback
1: 	 * 
1: 	 * @param job
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	void postCompletion(Consumer<TransactionStatus> job)
1: 			throws IllegalStateException;
1: 
1: 	/**
1: 	 * @return true if the current transaction supports XA resources
1: 	 */
1: 	boolean supportsXA();
1: 
1: 	/**
1: 	 * @return true if the current transaction supports Local resources
1: 	 */
1: 	boolean supportsLocal();
1: 
1: 	/**
1: 	 * Register an XA resource with the current transaction
1: 	 * 
1: 	 * @param resource
1: 	 * @throws IllegalStateException if no transaction is active, or the current
1: 	 *             transaction is not XA capable
1: 	 */
0: 	void registerXAResource(XAResource resource) throws IllegalStateException;
1: 
1: 	/**
1: 	 * Register an XA resource with the current transaction
1: 	 * 
1: 	 * @param resource
1: 	 * @throws IllegalStateException if no transaction is active, or the current
1: 	 *             transaction is not XA capable
1: 	 */
1: 	void registerLocalResource(LocalResource resource)
1: 			throws IllegalStateException;
1: }
============================================================================