1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:b8ad309: package org.apache.aries.subsystem.core.internal;
1:deca8ed: 
1:a990e32: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1:f1b1384: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1:a990e32: import org.apache.aries.subsystem.core.archive.ProvisionPolicyDirective;
1:b8ad309: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1:b8ad309: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1:a990e32: import org.apache.aries.subsystem.core.archive.SubsystemTypeHeader;
1:a990e32: import org.osgi.service.subsystem.Subsystem.State;
1:52b079f: import org.osgi.service.subsystem.SubsystemConstants;
1:b8ad309: import org.osgi.service.subsystem.SubsystemException;
2:b8ad309: 
1:b8ad309: public class SubsystemManifestValidator {
1:5bd3bf6: 	public static void validate(BasicSubsystem subsystem, SubsystemManifest manifest) {
1:a990e32: 		if (subsystem.getResource().getId() == 0) {
1:a990e32: 			return;
1:a990e32: 		}
1:f1b1384: 		validatePreferredProviderHeader(manifest.getPreferredProviderHeader());
1:a990e32: 		validateAriesProvisionDependenciesDirective(subsystem);
1:b8ad309: 		if (subsystem.isComposite()) {
1:b8ad309: 			SubsystemContentHeader header = manifest.getSubsystemContentHeader();
1:a990e32: 			if (header == null) {
1:b8ad309: 				return;
1:a990e32: 			}
1:547a8ce: 			for (SubsystemContentHeader.Clause clause : header.getClauses()) {
1:a990e32: 				if (!clause.getVersionRange().isExact()) {
1:547a8ce: 					throw new SubsystemException("Composite subsystem using version range for content: " + clause);
1:a990e32: 				}
1:deca8ed: 			}
1:deca8ed: 		}
1:875a6d6: 		else if (subsystem.isFeature()) {
1:a990e32: 			SubsystemTypeHeader subsystemTypeHeader = manifest.getSubsystemTypeHeader();
1:a990e32: 			ProvisionPolicyDirective provisionPolicyDirective = subsystemTypeHeader.getProvisionPolicyDirective();
1:a990e32: 			if (provisionPolicyDirective.isAcceptDependencies()) {
1:875a6d6: 				throw new SubsystemException("Feature subsystems may not declare a provision-policy of acceptDependencies");
1:a990e32: 			}
1:a990e32: 			if (manifest.getHeaders().get(SubsystemConstants.PREFERRED_PROVIDER) != null) {
1:52b079f: 				throw new SubsystemException("Feature subsystems may not declare a " + SubsystemConstants.PREFERRED_PROVIDER + " header");
1:a990e32: 			}
1:875a6d6: 		}
1:875a6d6: 	}
1:f1b1384: 	
1:f1b1384: 	private static void validatePreferredProviderHeader(PreferredProviderHeader header) {
1:a990e32: 		if (header == null) {
1:f1b1384: 			return;
1:a990e32: 		}
1:f1b1384: 		for (PreferredProviderHeader.Clause clause : header.getClauses()) {
1:f1b1384: 			String type = (String)clause.getAttribute(PreferredProviderHeader.Clause.ATTRIBUTE_TYPE).getValue();
1:f1b1384: 			if (!(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type) ||
1:f1b1384: 					SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type) ||
1:a990e32: 					Constants.ResourceTypeBundle.equals(type))) {
1:f1b1384: 				throw new SubsystemException("Unsupported " + PreferredProviderHeader.NAME + " type: " + type);
1:a990e32: 			}
1:a990e32: 		}
1:a990e32: 	}
1:a990e32: 	
1:a990e32: 	private static void validateAriesProvisionDependenciesDirective(BasicSubsystem subsystem) {
1:a990e32: 		AriesProvisionDependenciesDirective directive = subsystem.getAriesProvisionDependenciesDirective();
1:a990e32: 		BasicSubsystem parent = subsystem.getResource().getParents().iterator().next();
1:a990e32: 		AriesProvisionDependenciesDirective parentDirective = parent.getAriesProvisionDependenciesDirective();
1:a990e32: 		if (!directive.equals(parentDirective) 
1:a990e32: 				&& (subsystem.isFeature()
1:a990e32: 						|| State.INSTALLING.equals(parent.getState()))) {
1:a990e32: 			throw new SubsystemException("The value of the " 
1:a990e32: 						+ AriesProvisionDependenciesDirective.NAME 
1:a990e32: 						+ " directive must be the same as the parent subsystem for features and implicitly installed subsystems.");
1:f1b1384: 		}
1:f1b1384: 	}
4:b8ad309: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.AriesProvisionDependenciesDirective;
1: import org.apache.aries.subsystem.core.archive.ProvisionPolicyDirective;
1: import org.apache.aries.subsystem.core.archive.SubsystemTypeHeader;
1: import org.osgi.service.subsystem.Subsystem.State;
1: 		if (subsystem.getResource().getId() == 0) {
1: 			return;
1: 		}
1: 		validateAriesProvisionDependenciesDirective(subsystem);
1: 			if (header == null) {
1: 			}
1: 				if (!clause.getVersionRange().isExact()) {
1: 				}
1: 			SubsystemTypeHeader subsystemTypeHeader = manifest.getSubsystemTypeHeader();
1: 			ProvisionPolicyDirective provisionPolicyDirective = subsystemTypeHeader.getProvisionPolicyDirective();
1: 			if (provisionPolicyDirective.isAcceptDependencies()) {
1: 			}
1: 			if (manifest.getHeaders().get(SubsystemConstants.PREFERRED_PROVIDER) != null) {
1: 			}
1: 		if (header == null) {
1: 		}
1: 					Constants.ResourceTypeBundle.equals(type))) {
1: 			}
1: 		}
1: 	}
1: 	
1: 	private static void validateAriesProvisionDependenciesDirective(BasicSubsystem subsystem) {
1: 		AriesProvisionDependenciesDirective directive = subsystem.getAriesProvisionDependenciesDirective();
1: 		BasicSubsystem parent = subsystem.getResource().getParents().iterator().next();
1: 		AriesProvisionDependenciesDirective parentDirective = parent.getAriesProvisionDependenciesDirective();
1: 		if (!directive.equals(parentDirective) 
1: 				&& (subsystem.isFeature()
1: 						|| State.INSTALLING.equals(parent.getState()))) {
1: 			throw new SubsystemException("The value of the " 
1: 						+ AriesProvisionDependenciesDirective.NAME 
1: 						+ " directive must be the same as the parent subsystem for features and implicitly installed subsystems.");
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public static void validate(BasicSubsystem subsystem, SubsystemManifest manifest) {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 				if (!clause.getVersionRange().isExact())
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			for (SubsystemContentHeader.Clause clause : header.getClauses()) {
0: 				if (clause.getVersionRange().isExact())
1: 					throw new SubsystemException("Composite subsystem using version range for content: " + clause);
/////////////////////////////////////////////////////////////////////////
commit:f1b1384
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
/////////////////////////////////////////////////////////////////////////
1: 		validatePreferredProviderHeader(manifest.getPreferredProviderHeader());
/////////////////////////////////////////////////////////////////////////
0: 	// TODO Replace this with the new isExact() method on OSGi VersionRange.
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private static void validatePreferredProviderHeader(PreferredProviderHeader header) {
0: 		if (header == null)
1: 			return;
1: 		for (PreferredProviderHeader.Clause clause : header.getClauses()) {
1: 			String type = (String)clause.getAttribute(PreferredProviderHeader.Clause.ATTRIBUTE_TYPE).getValue();
1: 			if (!(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type) ||
1: 					SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type) ||
0: 					Constants.ResourceTypeBundle.equals(type)))
1: 				throw new SubsystemException("Unsupported " + PreferredProviderHeader.NAME + " type: " + type);
1: 		}
1: 	}
commit:52b079f
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
0: 			if (manifest.getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies())
0: 			if (manifest.getHeaders().get(SubsystemConstants.PREFERRED_PROVIDER) != null)
1: 				throw new SubsystemException("Feature subsystems may not declare a " + SubsystemConstants.PREFERRED_PROVIDER + " header");
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
1: 		else if (subsystem.isFeature()) {
0: 			if (manifest.getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies()) {
1: 				throw new SubsystemException("Feature subsystems may not declare a provision-policy of acceptDependencies");
1: 			}
1: 		}
commit:95f6444
/////////////////////////////////////////////////////////////////////////
0: 				// TODO Need to update this to use the new VersionRange.isExact() method, which is more robust.
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.VersionRange;
/////////////////////////////////////////////////////////////////////////
0: 				if (!isExactVersion(content.getVersionRange()))
1: 	
0: 	private static boolean isExactVersion(VersionRange range) {
0: 		if (range.getLeftType() == VersionRange.LEFT_CLOSED
0: 		          && range.getLeft().equals(range.getRight())
0: 		          && range.getRightType() == VersionRange.RIGHT_CLOSED) {
0: 		     return true;
1: 		}
0: 		return false;
1: 	}
commit:b8ad309
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemManifest;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class SubsystemManifestValidator {
0: 	public static void validate(AriesSubsystem subsystem, SubsystemManifest manifest) {
1: 		if (subsystem.isComposite()) {
1: 			SubsystemContentHeader header = manifest.getSubsystemContentHeader();
0: 			if (header == null)
1: 				return;
0: 			for (SubsystemContentHeader.Content content : header.getContents()) {
0: 				if (!content.getVersionRange().isExactVersion())
0: 					throw new SubsystemException("Composite subsystem using version range for content: " + content);
1: 			}
1: 		}
1: 	}
1: }
============================================================================