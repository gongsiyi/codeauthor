1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.lang.ref.WeakReference;
1:f13c6ac: import java.util.AbstractCollection;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.Iterator;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.ListIterator;
1:f13c6ac: import java.util.NoSuchElementException;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Collection that allows iterators to see addition or removals of elements while iterating.
1:f13c6ac:  * This collection and its iterators are thread safe but all operations happen under a
1:f13c6ac:  * synchronization lock, so the performance in heavy concurrency load is far from optimal.
1:f13c6ac:  * If such a use is needed, a CopyOnWriteArrayList may be more suited.
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class DynamicCollection<E> extends AbstractCollection<E> {
1:f13c6ac: 
1:f13c6ac:     protected final Object lock = new Object();
1:f13c6ac:     protected final List<E> storage;
1:f13c6ac:     protected final List<WeakReference<DynamicIterator>> iterators;
1:f13c6ac: 
1:f13c6ac:     public DynamicCollection() {
1:f13c6ac:         this.storage = new ArrayList<E>();
1:f13c6ac:         this.iterators = new ArrayList<WeakReference<DynamicIterator>>();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public DynamicIterator iterator() {
1:f13c6ac:         return iterator(0);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public DynamicIterator iterator(int index) {
1:f13c6ac:         DynamicIterator iterator = createIterator(index);
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:f13c6ac:                 if (it.next().get() == null) {
1:f13c6ac:                     it.remove();
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:             iterators.add(new WeakReference<DynamicIterator>(iterator));
1:f13c6ac:         }
1:f13c6ac:         return iterator;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected DynamicIterator createIterator(int index) {
1:f13c6ac:         return new DynamicIterator(index);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public int size() {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.size();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean isEmpty() {
1:f13c6ac:         return size() == 0;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean contains(Object o) {
1:f13c6ac:         if (o == null) {
1:f13c6ac:             throw new NullPointerException();
1:f13c6ac:         }
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.contains(o);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Object[] toArray() {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.toArray();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public <T> T[] toArray(T[] a) {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.toArray(a);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean containsAll(Collection<?> c) {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.containsAll(c);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean add(E o) {
1:f13c6ac:         if (o == null) {
1:f13c6ac:             throw new NullPointerException();
1:f13c6ac:         }
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             internalAdd(storage.size(), o);
1:f13c6ac:             return true;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean remove(Object o) {
1:f13c6ac:         if (o == null) {
1:f13c6ac:             throw new NullPointerException();
1:f13c6ac:         }
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             int index = storage.indexOf(o);
1:f13c6ac:             return remove(index) != null;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public E get(int index) {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             return storage.get(index);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void internalAdd(int index, E o) {
1:f13c6ac:         if (o == null) {
1:f13c6ac:             throw new NullPointerException();
1:f13c6ac:         }
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             storage.add(index, o);
1:f13c6ac:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:f13c6ac:                 DynamicIterator i = it.next().get();
1:f13c6ac:                 if (i == null) {
1:f13c6ac:                     it.remove();
1:f13c6ac:                 } else {
1:f13c6ac:                     i.addedIndex(index);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public void clear() {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             storage.clear();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public E remove(int index) {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             E o = storage.remove(index);
1:f13c6ac:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:f13c6ac:                 WeakReference<DynamicIterator> r = it.next();
1:f13c6ac:                 DynamicIterator i = r.get();
1:f13c6ac:                 if (i == null) {
1:f13c6ac:                     it.remove();
1:f13c6ac:                 } else {
1:f13c6ac:                     i.removedIndex(index);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:             return o;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public E first() {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             if (storage.isEmpty()) {
1:f13c6ac:                 throw new NoSuchElementException();
1:f13c6ac:             } else {
1:f13c6ac:                 return storage.get(0);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public E last() {
1:f13c6ac:         synchronized (lock) {
1:f13c6ac:             if (storage.isEmpty()) {
1:f13c6ac:                 throw new NoSuchElementException();
1:f13c6ac:             } else {
1:f13c6ac:                 return storage.get(storage.size() - 1);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public class DynamicIterator implements ListIterator<E> {
1:f13c6ac: 
1:f13c6ac:         protected int index;
1:f13c6ac:         protected boolean hasNextCalled;
1:f13c6ac:         protected E next;
1:f13c6ac:         protected boolean hasPreviousCalled;
1:f13c6ac:         protected E previous;
1:f13c6ac:         protected E last;
1:f13c6ac: 
1:f13c6ac:         public DynamicIterator() {
1:f13c6ac:             this(0);
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public DynamicIterator(int index) {
1:f13c6ac:             this.index = index;
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         protected void removedIndex(int index) {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 if (index < this.index || (index == this.index && (hasNextCalled || hasPreviousCalled))) {
1:f13c6ac:                     this.index--;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         protected void addedIndex(int index) {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 if (index < this.index || (index == this.index && (next != null || previous != null))) {
1:f13c6ac:                     this.index++;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public boolean hasNext() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 hasPreviousCalled = false;
1:f13c6ac:                 hasNextCalled = true;
1:f13c6ac:                 next = index < storage.size() ? storage.get(index) : null;
1:f13c6ac:                 return next != null;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public boolean hasPrevious() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 hasPreviousCalled = true;
1:f13c6ac:                 hasNextCalled = false;
1:f13c6ac:                 previous = index > 0 ? storage.get(index - 1) : null;
1:f13c6ac:                 return previous != null;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public E next() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 try {
1:f13c6ac:                     if (!hasNextCalled) {
1:f13c6ac:                         hasNext();
1:f13c6ac:                     }
1:f13c6ac:                     last = next;
1:f13c6ac:                     if (next != null) {
1:f13c6ac:                         ++index;
1:f13c6ac:                         return next;
1:f13c6ac:                     } else {
1:f13c6ac:                         throw new NoSuchElementException();
1:f13c6ac:                     }
1:f13c6ac:                 } finally {
1:f13c6ac:                     hasPreviousCalled = false;
1:f13c6ac:                     hasNextCalled = false;
1:f13c6ac:                     next = null;
1:f13c6ac:                     previous = null;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public E previous() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 try {
1:f13c6ac:                     if (!hasPreviousCalled) {
1:f13c6ac:                         hasPrevious();
1:f13c6ac:                     }
1:f13c6ac:                     last = previous;
1:f13c6ac:                     if (previous != null) {
1:f13c6ac:                         --index;
1:f13c6ac:                         return previous;
1:f13c6ac:                     } else {
1:f13c6ac:                         throw new NoSuchElementException();
1:f13c6ac:                     }
1:f13c6ac:                 } finally {
1:f13c6ac:                     hasPreviousCalled = false;
1:f13c6ac:                     hasNextCalled = false;
1:f13c6ac:                     next = null;
1:f13c6ac:                     previous = null;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public int nextIndex() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 return index;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public int previousIndex() {
1:f13c6ac:             synchronized (lock) {
1:f13c6ac:                 return index - 1;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public void set(E o) {
1:f13c6ac:             throw new UnsupportedOperationException();
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public void add(E o) {
1:f13c6ac:             throw new UnsupportedOperationException();
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public void remove() {
1:f13c6ac:             throw new UnsupportedOperationException();
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.utils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.utils;
1: 
1: import java.lang.ref.WeakReference;
1: import java.util.AbstractCollection;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.ListIterator;
1: import java.util.NoSuchElementException;
1: 
1: /**
1:  * Collection that allows iterators to see addition or removals of elements while iterating.
1:  * This collection and its iterators are thread safe but all operations happen under a
1:  * synchronization lock, so the performance in heavy concurrency load is far from optimal.
1:  * If such a use is needed, a CopyOnWriteArrayList may be more suited.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766653 $, $Date: 2009-04-20 13:19:48 +0200 (Mon, 20 Apr 2009) $
1:  */
1: public class DynamicCollection<E> extends AbstractCollection<E> {
1: 
1:     protected final Object lock = new Object();
1:     protected final List<E> storage;
1:     protected final List<WeakReference<DynamicIterator>> iterators;
1: 
1:     public DynamicCollection() {
1:         this.storage = new ArrayList<E>();
1:         this.iterators = new ArrayList<WeakReference<DynamicIterator>>();
1:     }
1: 
1:     public DynamicIterator iterator() {
1:         return iterator(0);
1:     }
1: 
1:     public DynamicIterator iterator(int index) {
1:         DynamicIterator iterator = createIterator(index);
1:         synchronized (lock) {
1:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:                 if (it.next().get() == null) {
1:                     it.remove();
1:                 }
1:             }
1:             iterators.add(new WeakReference<DynamicIterator>(iterator));
1:         }
1:         return iterator;
1:     }
1: 
1:     protected DynamicIterator createIterator(int index) {
1:         return new DynamicIterator(index);
1:     }
1: 
1:     public int size() {
1:         synchronized (lock) {
1:             return storage.size();
1:         }
1:     }
1: 
1:     public boolean isEmpty() {
1:         return size() == 0;
1:     }
1: 
1:     public boolean contains(Object o) {
1:         if (o == null) {
1:             throw new NullPointerException();
1:         }
1:         synchronized (lock) {
1:             return storage.contains(o);
1:         }
1:     }
1: 
1:     public Object[] toArray() {
1:         synchronized (lock) {
1:             return storage.toArray();
1:         }
1:     }
1: 
1:     public <T> T[] toArray(T[] a) {
1:         synchronized (lock) {
1:             return storage.toArray(a);
1:         }
1:     }
1: 
1:     public boolean containsAll(Collection<?> c) {
1:         synchronized (lock) {
1:             return storage.containsAll(c);
1:         }
1:     }
1: 
1:     public boolean add(E o) {
1:         if (o == null) {
1:             throw new NullPointerException();
1:         }
1:         synchronized (lock) {
1:             internalAdd(storage.size(), o);
1:             return true;
1:         }
1:     }
1: 
1:     public boolean remove(Object o) {
1:         if (o == null) {
1:             throw new NullPointerException();
1:         }
1:         synchronized (lock) {
1:             int index = storage.indexOf(o);
1:             return remove(index) != null;
1:         }
1:     }
1: 
1:     public E get(int index) {
1:         synchronized (lock) {
1:             return storage.get(index);
1:         }
1:     }
1: 
1:     private void internalAdd(int index, E o) {
1:         if (o == null) {
1:             throw new NullPointerException();
1:         }
1:         synchronized (lock) {
1:             storage.add(index, o);
1:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:                 DynamicIterator i = it.next().get();
1:                 if (i == null) {
1:                     it.remove();
1:                 } else {
1:                     i.addedIndex(index);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void clear() {
1:         synchronized (lock) {
1:             storage.clear();
1:         }
1:     }
1: 
1:     public E remove(int index) {
1:         synchronized (lock) {
1:             E o = storage.remove(index);
1:             for (Iterator<WeakReference<DynamicIterator>> it = iterators.iterator(); it.hasNext();) {
1:                 WeakReference<DynamicIterator> r = it.next();
1:                 DynamicIterator i = r.get();
1:                 if (i == null) {
1:                     it.remove();
1:                 } else {
1:                     i.removedIndex(index);
1:                 }
1:             }
1:             return o;
1:         }
1:     }
1: 
1:     public E first() {
1:         synchronized (lock) {
1:             if (storage.isEmpty()) {
1:                 throw new NoSuchElementException();
1:             } else {
1:                 return storage.get(0);
1:             }
1:         }
1:     }
1: 
1:     public E last() {
1:         synchronized (lock) {
1:             if (storage.isEmpty()) {
1:                 throw new NoSuchElementException();
1:             } else {
1:                 return storage.get(storage.size() - 1);
1:             }
1:         }
1:     }
1: 
1:     public class DynamicIterator implements ListIterator<E> {
1: 
1:         protected int index;
1:         protected boolean hasNextCalled;
1:         protected E next;
1:         protected boolean hasPreviousCalled;
1:         protected E previous;
1:         protected E last;
1: 
1:         public DynamicIterator() {
1:             this(0);
1:         }
1: 
1:         public DynamicIterator(int index) {
1:             this.index = index;
1:         }
1: 
1:         protected void removedIndex(int index) {
1:             synchronized (lock) {
1:                 if (index < this.index || (index == this.index && (hasNextCalled || hasPreviousCalled))) {
1:                     this.index--;
1:                 }
1:             }
1:         }
1: 
1:         protected void addedIndex(int index) {
1:             synchronized (lock) {
1:                 if (index < this.index || (index == this.index && (next != null || previous != null))) {
1:                     this.index++;
1:                 }
1:             }
1:         }
1: 
1:         public boolean hasNext() {
1:             synchronized (lock) {
1:                 hasPreviousCalled = false;
1:                 hasNextCalled = true;
1:                 next = index < storage.size() ? storage.get(index) : null;
1:                 return next != null;
1:             }
1:         }
1: 
1:         public boolean hasPrevious() {
1:             synchronized (lock) {
1:                 hasPreviousCalled = true;
1:                 hasNextCalled = false;
1:                 previous = index > 0 ? storage.get(index - 1) : null;
1:                 return previous != null;
1:             }
1:         }
1: 
1:         public E next() {
1:             synchronized (lock) {
1:                 try {
1:                     if (!hasNextCalled) {
1:                         hasNext();
1:                     }
1:                     last = next;
1:                     if (next != null) {
1:                         ++index;
1:                         return next;
1:                     } else {
1:                         throw new NoSuchElementException();
1:                     }
1:                 } finally {
1:                     hasPreviousCalled = false;
1:                     hasNextCalled = false;
1:                     next = null;
1:                     previous = null;
1:                 }
1:             }
1:         }
1: 
1:         public E previous() {
1:             synchronized (lock) {
1:                 try {
1:                     if (!hasPreviousCalled) {
1:                         hasPrevious();
1:                     }
1:                     last = previous;
1:                     if (previous != null) {
1:                         --index;
1:                         return previous;
1:                     } else {
1:                         throw new NoSuchElementException();
1:                     }
1:                 } finally {
1:                     hasPreviousCalled = false;
1:                     hasNextCalled = false;
1:                     next = null;
1:                     previous = null;
1:                 }
1:             }
1:         }
1: 
1:         public int nextIndex() {
1:             synchronized (lock) {
1:                 return index;
1:             }
1:         }
1: 
1:         public int previousIndex() {
1:             synchronized (lock) {
1:                 return index - 1;
1:             }
1:         }
1: 
1:         public void set(E o) {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void add(E o) {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public void remove() {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:     }
1: 
1: }
============================================================================