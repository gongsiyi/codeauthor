1:2906477: /*
1:2906477:  * Licensed to the Apache Software Foundation (ASF) under one
1:2906477:  * or more contributor license agreements.  See the NOTICE file
1:2906477:  * distributed with this work for additional information
1:2906477:  * regarding copyright ownership.  The ASF licenses this file
1:2906477:  * to you under the Apache License, Version 2.0 (the
1:2906477:  * "License"); you may not use this file except in compliance
1:2906477:  * with the License.  You may obtain a copy of the License at
1:2906477:  *
1:2906477:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2906477:  *
1:2906477:  * Unless required by applicable law or agreed to in writing,
1:2906477:  * software distributed under the License is distributed on an
1:2906477:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2906477:  * KIND, either express or implied.  See the License for the
1:2906477:  * specific language governing permissions and limitations
1:2906477:  * under the License.
1:2906477:  */
1:2906477: package org.apache.aries.tx.control.jdbc.common.impl;
1:2906477: 
1:2906477: import java.sql.Connection;
1:2906477: 
1:2906477: import javax.sql.DataSource;
1:2906477: 
1:2906477: import org.osgi.service.transaction.control.TransactionControl;
1:2906477: import org.osgi.service.transaction.control.TransactionException;
1:2906477: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1:2906477: import org.slf4j.Logger;
1:2906477: import org.slf4j.LoggerFactory;
1:2906477: 
1:7c388cb: public abstract class AbstractJDBCConnectionProvider implements JDBCConnectionProvider, AutoCloseable {
1:2906477: 
1:2906477: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractJDBCConnectionProvider.class);
1:2906477: 	
1:2906477: 	protected final DataSource dataSource;
1:2906477: 	
1:2906477: 	public AbstractJDBCConnectionProvider(DataSource dataSource) {
1:2906477: 		this.dataSource = dataSource;
1:2906477: 	}
1:2906477: 
1:2906477: 	@Override
1:2906477: 	public abstract Connection getResource(TransactionControl txControl)
1:2906477: 			throws TransactionException;
1:2906477: 
1:2906477: 	
1:2906477: 	public void close() {
1:2906477: 		if(dataSource instanceof AutoCloseable) {
1:2906477: 			try {
1:2906477: 				((AutoCloseable) dataSource).close();
1:2906477: 			} catch (Exception e) {
1:2906477: 				LOG.warn("An error occurred shutting down the JDBCConnectionProvider {}", dataSource, e);
1:2906477: 			}
1:2906477: 		}
1:2906477: 	}
1:2906477: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractJDBCConnectionProvider implements JDBCConnectionProvider, AutoCloseable {
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.jdbc.common.impl;
1: 
1: import java.sql.Connection;
1: 
1: import javax.sql.DataSource;
1: 
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public abstract class AbstractJDBCConnectionProvider implements JDBCConnectionProvider {
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractJDBCConnectionProvider.class);
1: 	
1: 	protected final DataSource dataSource;
1: 	
1: 	public AbstractJDBCConnectionProvider(DataSource dataSource) {
1: 		this.dataSource = dataSource;
1: 	}
1: 
1: 	@Override
1: 	public abstract Connection getResource(TransactionControl txControl)
1: 			throws TransactionException;
1: 
1: 	
1: 	public void close() {
1: 		if(dataSource instanceof AutoCloseable) {
1: 			try {
1: 				((AutoCloseable) dataSource).close();
1: 			} catch (Exception e) {
1: 				LOG.warn("An error occurred shutting down the JDBCConnectionProvider {}", dataSource, e);
1: 			}
1: 		}
1: 	}
1: }
============================================================================