1:96f3261: package org.apache.aries.subsystem.ctt.itests;
1:96f3261: 
1:96f3261: import static org.junit.Assert.assertTrue;
1:96f3261: 
1:96f3261: import java.util.ArrayList;
1:96f3261: import java.util.Collection;
1:96f3261: import java.util.HashMap;
1:96f3261: import java.util.Map;
1:96f3261: 
1:96f3261: import org.junit.Before;
1:96f3261: import org.junit.Test;
1:96f3261: import org.osgi.framework.Bundle;
1:96f3261: import org.osgi.framework.Constants;
1:96f3261: import org.osgi.service.subsystem.Subsystem;
1:96f3261: import org.osgi.service.subsystem.SubsystemConstants;
1:96f3261: 
1:96f3261: /*
1:96f3261:  * B) Test with no pre-installed transitive resources
1:96f3261:      - Register repository R2
1:96f3261:      - Using the Root subsystem, install a scoped subsystem with the following content bundles and no local repository
1:96f3261:        - Bundle C
1:96f3261:        - Bundle D
1:96f3261:        - Bundle E
1:96f3261:      - Verify that bundles A and B got installed into the Root Subsystem
1:96f3261:      - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:96f3261:  */
1:96f3261: 
1:96f3261: public class SubsystemDependency_4BTest extends SubsystemDependencyTestBase 
3:96f3261: {
1:96f3261: 
1:3e9adfe: 	protected static String APPLICATION_B="sdt_application.b.esa";
1:96f3261: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		super.createApplications();
1:57b6627: 		createTestApplicationB();
1:57b6627: 	}
1:96f3261: 	
1:96f3261: 	@Before
1:57b6627: 	public void registerRepo() throws Exception {
1:96f3261: 		registerRepositoryR2();
1:3e9adfe: 	}
1:96f3261: 	
1:96f3261: 	// - Verify that bundles A and B got installed into the Root Subsystem
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundlesAandBinstalledIntoRootRegion() throws Exception
1:96f3261: 	{
1:96f3261: 		System.out.println ("Into verifyBundlesAandBinstalledIntoRootRegion");
1:96f3261: 		
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		Bundle[] bundles = bundleContext.getBundles();
1:96f3261: 		Collection<String> bundleNames = new ArrayList<String>();
1:96f3261: 		for (Bundle b : bundles) { 
1:96f3261: 			bundleNames.add(b.getSymbolicName());
3:96f3261: 		}
1:96f3261: 		assertTrue ("Bundle A should have been provisioned to the root region", bundleNames.contains(BUNDLE_A));
1:96f3261: 		assertTrue ("Bundle B should have been provisioned to the root region", bundleNames.contains(BUNDLE_B));
1:412c1f8: 		stopSubsystem(s);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleCWiredToPackage_xFromBundleA() throws Exception
1:96f3261: 	{
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1:96f3261: 		stopSubsystem(s);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleDWiredToBundleA() throws Exception
1:96f3261: 	{ 
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1:96f3261: 		stopSubsystem(s);
1:96f3261: 	}
1:96f3261: 
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleEWiredToCapability_yFromBundleB() throws Exception
1:96f3261: 	{
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1:96f3261: 		stopSubsystem(s);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	private static void createTestApplicationB() throws Exception
1:96f3261: 	{ 
1:96f3261: 		Map<String, String> attributes = new HashMap<String, String>();
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:96f3261: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:96f3261: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:96f3261: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:96f3261: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:96f3261: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1:36b1234: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y");
1:96f3261: 		createManifest(APPLICATION_B + ".mf", attributes);
1:96f3261: 		createSubsystem(APPLICATION_B);
1:96f3261: 	}
1:96f3261: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		super.createApplications();
1: 		createTestApplicationB();
1: 	}
1: 	public void registerRepo() throws Exception {
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:36b1234
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y");
commit:412c1f8
/////////////////////////////////////////////////////////////////////////
1: 		stopSubsystem(s);
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	protected static String APPLICATION_B="sdt_application.b.esa";
0: 	private static boolean appCreated = false;
0: 		if (!appCreated) { 
0: 			createTestApplicationB();
0: 			appCreated = true;
1: 		}
commit:96f3261
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.junit.Before;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * B) Test with no pre-installed transitive resources
1:      - Register repository R2
1:      - Using the Root subsystem, install a scoped subsystem with the following content bundles and no local repository
1:        - Bundle C
1:        - Bundle D
1:        - Bundle E
1:      - Verify that bundles A and B got installed into the Root Subsystem
1:      - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:  */
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class SubsystemDependency_4BTest extends SubsystemDependencyTestBase 
1: {
1: 
0: 	protected static String APPLICATION_B="sdt_application.a.esa";
1: 	
0: 	@BeforeClass
0: 	public static void createTestApp() throws Exception
1: 	{ 
0: 		createTestApplicationB();
1: 	}
1: 	
1: 	@Before
0: 	public void setUp() throws Exception
1: 	{ 
0: 		super.setUp();
1: 		registerRepositoryR2();
1: 	}
1: 	
1: 	// - Verify that bundles A and B got installed into the Root Subsystem
1: 	@Test
1: 	public void verifyBundlesAandBinstalledIntoRootRegion() throws Exception
1: 	{
1: 		System.out.println ("Into verifyBundlesAandBinstalledIntoRootRegion");
1: 		
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1: 		startSubsystem(s);
1: 		Bundle[] bundles = bundleContext.getBundles();
1: 		Collection<String> bundleNames = new ArrayList<String>();
1: 		for (Bundle b : bundles) { 
1: 			bundleNames.add(b.getSymbolicName());
1: 		}
1: 		assertTrue ("Bundle A should have been provisioned to the root region", bundleNames.contains(BUNDLE_A));
1: 		assertTrue ("Bundle B should have been provisioned to the root region", bundleNames.contains(BUNDLE_B));
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleCWiredToPackage_xFromBundleA() throws Exception
1: 	{
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1: 		startSubsystem(s);
1: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1: 		stopSubsystem(s);
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleDWiredToBundleA() throws Exception
1: 	{ 
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1: 		startSubsystem(s);
1: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1: 		stopSubsystem(s);
1: 	}
1: 
1: 	@Test
1: 	public void verifyBundleEWiredToCapability_yFromBundleB() throws Exception
1: 	{
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_B);
1: 		startSubsystem(s);
1: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1: 		stopSubsystem(s);
1: 	}
1: 	
1: 	private static void createTestApplicationB() throws Exception
1: 	{ 
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
0: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y;filter:=\"(bug=true)\"");
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 		createSubsystem(APPLICATION_B);
1: 	}
1: }
============================================================================