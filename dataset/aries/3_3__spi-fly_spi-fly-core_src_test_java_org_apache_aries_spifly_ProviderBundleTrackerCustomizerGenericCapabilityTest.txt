1:3e50f86: /**
1:3e50f86:  * Licensed to the Apache Software Foundation (ASF) under one
1:3e50f86:  * or more contributor license agreements.  See the NOTICE file
1:3e50f86:  * distributed with this work for additional information
1:3e50f86:  * regarding copyright ownership.  The ASF licenses this file
1:3e50f86:  * to you under the Apache License, Version 2.0 (the
1:3e50f86:  * "License"); you may not use this file except in compliance
1:3e50f86:  * with the License.  You may obtain a copy of the License at
1:3e50f86:  *
1:3e50f86:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3e50f86:  *
1:3e50f86:  * Unless required by applicable law or agreed to in writing,
1:3e50f86:  * software distributed under the License is distributed on an
1:3e50f86:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3e50f86:  * KIND, either express or implied.  See the License for the
1:3e50f86:  * specific language governing permissions and limitations
1:3e50f86:  * under the License.
1:3e50f86:  */
1:3e50f86: package org.apache.aries.spifly;
1:708d00a: 
1:3e50f86: import java.net.URL;
1:3e50f86: import java.net.URLClassLoader;
1:d4c0656: import java.util.ArrayList;
1:708d00a: import java.util.Arrays;
1:3e50f86: import java.util.Collection;
1:3e50f86: import java.util.Collections;
1:3e50f86: import java.util.Dictionary;
1:2276d43: import java.util.HashSet;
1:3e50f86: import java.util.Hashtable;
1:3e50f86: import java.util.List;
1:708d00a: import java.util.Map;
1:2276d43: import java.util.Set;
1:708d00a: 
1:c69c410: import org.apache.aries.mytest.MySPI;
1:c69c410: import org.apache.aries.mytest.MySPI2;
1:b769cd4: import org.apache.aries.spifly.impl4.MySPIImpl4a;
1:b769cd4: import org.apache.aries.spifly.impl4.MySPIImpl4b;
1:b769cd4: import org.apache.aries.spifly.impl4.MySPIImpl4c;
1:3e50f86: import org.easymock.EasyMock;
1:708d00a: import org.easymock.IAnswer;
1:3e50f86: import org.junit.Test;
1:3e50f86: import org.osgi.framework.Bundle;
1:3e50f86: import org.osgi.framework.BundleContext;
1:3e50f86: import org.osgi.framework.Constants;
1:c69c410: import org.osgi.framework.ServiceFactory;
1:708d00a: import org.osgi.framework.ServiceReference;
1:3e50f86: import org.osgi.framework.ServiceRegistration;
1:d4c0656: import org.osgi.framework.wiring.BundleRequirement;
1:d4c0656: import org.osgi.framework.wiring.BundleRevision;
1:d4c0656: import org.osgi.framework.wiring.BundleWire;
1:d4c0656: import org.osgi.framework.wiring.BundleWiring;
19:3e50f86: 
1:7dabe8c: import static org.junit.Assert.assertEquals;
1:7dabe8c: import static org.junit.Assert.assertNotNull;
1:7dabe8c: import static org.junit.Assert.assertNull;
1:7dabe8c: import static org.junit.Assert.assertSame;
1:7dabe8c: import static org.junit.Assert.assertTrue;
1:7dabe8c: 
1:6591ac7: public class ProviderBundleTrackerCustomizerGenericCapabilityTest {
4:3e50f86:     @Test
1:3e50f86:     public void testAddingRemovedBundle() throws Exception {
1:7dabe8c:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:7dabe8c:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:7dabe8c:         EasyMock.replay(mediatorBundle);
1:7dabe8c:         BaseActivator activator = new BaseActivator() {
1:7dabe8c:             @Override
1:7dabe8c:             public void start(BundleContext context) throws Exception {}
1:7dabe8c:         };
1:7dabe8c: 
1:7dabe8c:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:7dabe8c: 
1:7dabe8c:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:7dabe8c:         sreg.unregister();
1:7dabe8c:         EasyMock.expectLastCall();
1:76c890d:         EasyMock.replay(sreg);
1:708d00a: 
1:76c890d:         BundleContext implBC = mockSPIBundleContext(sreg);
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:7dabe8c:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:a166d95:         Bundle implBundle = mockSPIBundle(implBC, headers);
1:a166d95: 
1:3e50f86:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:3e50f86:         // Call addingBundle();
1:76c890d:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:76c890d:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:76c890d:         assertEquals(1, bundles.size());
1:76c890d:         assertSame(implBundle, bundles.iterator().next());
1:76c890d: 
1:3e50f86:         // The bc.registerService() call should now have been made
1:3e50f86:         EasyMock.verify(implBC);
1:708d00a: 
1:3e50f86:         // Call removedBundle();
1:3e50f86:         customizer.removedBundle(implBundle, null, registrations);
1:9644284: 
1:9644284:         Collection<Bundle> bundles2 = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:9644284:         assertEquals(0, bundles2.size());
1:9644284: 
1:3e50f86:         // sreg.unregister() should have been called.
1:3e50f86:         EasyMock.verify(sreg);
8:3e50f86:     }
1:b769cd4: 
1:708d00a:     @Test
1:7dabe8c:     public void testCapReqHeadersInFragment() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:708d00a:         BaseActivator activator = new BaseActivator() {
1:76c890d:             @Override
1:76c890d:             public void start(BundleContext context) throws Exception {}
1:708d00a:         };
1:7dabe8c: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:7dabe8c: 
1:d4c0656:         ServiceRegistration<?> sreg = EasyMock.createNiceMock(ServiceRegistration.class);
1:7dabe8c:         EasyMock.replay(sreg);
1:7dabe8c: 
1:7dabe8c:         BundleContext implBC = mockSPIBundleContext(sreg);
1:7dabe8c:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:d4c0656:         // A typical requirement that is not for us...
1:d4c0656:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, "osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"");
1:d4c0656: 
1:d4c0656:         List<BundleWire> wires = new ArrayList<BundleWire>();
1:d4c0656:         BundleWire wire = EasyMock.createMock(BundleWire.class);
1:d4c0656:         Bundle fragment = EasyMock.createMock(Bundle.class);
1:d4c0656:         BundleRevision frev = EasyMock.createMock(BundleRevision.class);
1:d4c0656:         EasyMock.expect(frev.getBundle()).andReturn(fragment).anyTimes();
1:d4c0656:         EasyMock.replay(frev);
1:d4c0656:         BundleRequirement req = EasyMock.createMock(BundleRequirement.class);
1:d4c0656:         EasyMock.expect(req.getRevision()).andReturn(frev).anyTimes();
1:d4c0656:         EasyMock.replay(req);
1:d4c0656:         EasyMock.expect(wire.getRequirement()).andReturn(req).anyTimes();
1:d4c0656:         EasyMock.replay(wire);
1:d4c0656:         wires.add(wire);
1:d4c0656: 
1:d4c0656:         BundleWiring bw = EasyMock.createMock(BundleWiring.class);
1:d4c0656:         EasyMock.expect(bw.getProvidedWires("osgi.wiring.host")).andReturn(wires).anyTimes();
1:d4c0656:         EasyMock.replay(bw);
1:d4c0656: 
1:d4c0656:         BundleRevision rev = EasyMock.createMock(BundleRevision.class);
1:d4c0656:         EasyMock.expect(rev.getWiring()).andReturn(bw).anyTimes();
1:d4c0656:         EasyMock.replay(rev);
1:d4c0656:         Bundle implBundle = mockSPIBundle(implBC, headers, rev);
1:d4c0656: 
1:d4c0656:         Dictionary<String, String> fheaders = new Hashtable<String, String>();
1:d4c0656:         fheaders.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:d4c0656:         fheaders.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:d4c0656:               SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:d4c0656:         EasyMock.expect(fragment.getHeaders()).andReturn(fheaders).anyTimes();
1:d4c0656:         EasyMock.replay(fragment);
1:7dabe8c: 
1:7dabe8c:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:d4c0656:         customizer.addingBundle(implBundle, null);
1:7dabe8c:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:7dabe8c:         assertEquals(1, bundles.size());
1:7dabe8c:         assertSame(implBundle, bundles.iterator().next());
1:7dabe8c:     }
1:708d00a: 
1:7dabe8c:     @Test
1:708d00a:     public void testCustomAttributesBundle() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:708d00a:         BaseActivator activator = new BaseActivator() {
1:708d00a:             @Override
1:708d00a:             public void start(BundleContext context) throws Exception {}
1:708d00a:         };
1:708d00a: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:708d00a: 
1:76c890d:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
2:708d00a:         EasyMock.replay(sreg);
1:708d00a: 
1:708d00a:         BundleContext implBC = mockSPIBundleContext(sreg);
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:7dabe8c:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:7dabe8c:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:c5a6657:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah; ");
1:7dabe8c:         Bundle implBundle = mockSPIBundle(implBC, headers);
1:708d00a: 
1:7dabe8c:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:708d00a:         assertEquals(1, registrations.size());
1:708d00a:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:708d00a:         assertEquals(1, bundles.size());
1:708d00a:         assertSame(implBundle, bundles.iterator().next());
1:c69c410: 
1:708d00a:         Map<String, Object> attrs = activator.getCustomBundleAttributes("org.apache.aries.mytest.MySPI", implBundle);
1:708d00a:         assertEquals(1, attrs.size());
1:a166d95:         assertEquals("yeah", attrs.get("approval"));
1:a166d95:     }
1:a166d95: 
1:a166d95:     @Test
1:a166d95:     public void testNonServiceRegistryBundle() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:a166d95:         BaseActivator activator = new BaseActivator() {
1:a166d95:             @Override
1:a166d95:             public void start(BundleContext context) throws Exception {}
1:a166d95:         };
1:a166d95: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:a166d95: 
1:a166d95:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:a166d95:         EasyMock.replay(sreg);
1:a166d95: 
1:a166d95:         BundleContext implBC = mockSPIBundleContext(sreg);
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah;" +
1:a166d95:                 SpiFlyConstants.REGISTER_DIRECTIVE + ":=\"\"");
1:a166d95:         Bundle implBundle = mockSPIBundle(implBC, headers);
1:a166d95: 
1:a166d95:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:a166d95:         assertEquals(0, registrations.size());
1:a166d95:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:a166d95:         assertEquals(1, bundles.size());
1:a166d95:         assertSame(implBundle, bundles.iterator().next());
1:a166d95: 
1:a166d95:         Map<String, Object> attrs = activator.getCustomBundleAttributes("org.apache.aries.mytest.MySPI", implBundle);
1:a166d95:         assertEquals(1, attrs.size());
1:a166d95:         assertEquals("yeah", attrs.get("approval"));
1:a166d95:     }
1:a166d95: 
1:a166d95:     @Test
1:a166d95:     public void testRegisterAltAttributeDatatype() throws Exception {
1:a166d95:         // TODO
1:76c890d:     }
1:76c890d: 
1:76c890d:     @Test
1:22e0ef1:     public void testServiceSubsetSelectionAndRegistrationProperties() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:76c890d: 
1:76c890d:         BaseActivator activator = new BaseActivator() {
1:708d00a:             @Override
1:708d00a:             public void start(BundleContext context) throws Exception {}
1:76c890d:         };
1:76c890d: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:708d00a: 
1:b769cd4:         BundleContext implBC = mockSPIBundleContext4();
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2; approval=yeah; " +
1:a166d95:         		SpiFlyConstants.REGISTER_DIRECTIVE + ":=\"org.apache.aries.spifly.impl4.MySPIImpl4b\"");
1:a166d95:         Bundle implBundle = mockSPIBundle4(implBC, headers);
1:708d00a: 
1:708d00a:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:708d00a:         assertEquals(1, registrations.size());
1:708d00a: 
1:c69c410:         String[] objectClassProp = (String [])registrations.iterator().next().getReference().getProperty(Constants.OBJECTCLASS);
1:c69c410:         assertEquals(1, objectClassProp.length);
1:c69c410:         assertEquals("org.apache.aries.mytest.MySPI2", objectClassProp[0]);
1:82e8b21:         assertNotNull(registrations.iterator().next().getReference().getProperty(SpiFlyConstants.SERVICELOADER_MEDIATOR_PROPERTY));
1:a166d95:         assertEquals("yeah", registrations.iterator().next().getReference().getProperty("approval"));
1:708d00a:     }
1:708d00a: 
1:708d00a:     @Test
1:2276d43:     public void testProvidedSPIDirective() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:2276d43: 
1:2276d43:         BaseActivator activator = new BaseActivator() {
1:2276d43:             @Override
1:2276d43:             public void start(BundleContext context) throws Exception {}
1:2276d43:         };
1:2276d43: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:2276d43: 
1:2276d43:         BundleContext implBC = mockSPIBundleContext4();
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah, " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2");
1:a166d95:         Bundle implBundle = mockSPIBundle4(implBC, headers);
1:2276d43: 
1:2276d43:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:2276d43:         assertEquals("Expected 3 registrations, one for MySPI and 2 for MySPI2", 3, registrations.size());
1:2276d43:         Set<String> expectedObjectClasses = new HashSet<String>(Arrays.asList("org.apache.aries.mytest.MySPI", "org.apache.aries.mytest.MySPI2"));
1:2276d43:         Set<String> actualObjectClasses = new HashSet<String>();
1:a166d95: 
1:a166d95:         boolean foundMySPI = false;
1:a166d95:         boolean foundMySPI2 = false;
1:2276d43:         for (ServiceRegistration sr : registrations) {
1:c69c410:             List<String> objectClasses = Arrays.asList((String[]) sr.getReference().getProperty(Constants.OBJECTCLASS));
1:c69c410:             actualObjectClasses.addAll(objectClasses);
1:82e8b21:             assertNotNull(sr.getReference().getProperty(SpiFlyConstants.SERVICELOADER_MEDIATOR_PROPERTY));
1:c69c410:             if (objectClasses.contains("org.apache.aries.mytest.MySPI")) {
1:a166d95:                 assertEquals("yeah", sr.getReference().getProperty("approval"));
1:a166d95:                 foundMySPI = true;
1:c69c410:             } else if (objectClasses.contains("org.apache.aries.mytest.MySPI2")) {
1:a166d95:                 assertNull(sr.getReference().getProperty("approval"));
1:a166d95:                 foundMySPI2 = true;
1:a166d95:             }
1:2276d43:         }
1:a166d95:         assertTrue(foundMySPI);
1:a166d95:         assertTrue(foundMySPI2);
1:a166d95: 
1:2276d43:         assertEquals(expectedObjectClasses, actualObjectClasses);
1:2276d43:     }
1:2276d43: 
1:2276d43:     @Test
1:b769cd4:     public void testMultipleServiceInstancesAndTypes() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:b769cd4: 
1:b769cd4:         BaseActivator activator = new BaseActivator() {
1:b769cd4:             @Override
1:b769cd4:             public void start(BundleContext context) throws Exception {}
1:b769cd4:         };
1:b769cd4: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:b769cd4: 
1:b769cd4:         BundleContext implBC = mockSPIBundleContext4();
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI," +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2");
1:a166d95:         Bundle implBundle = mockSPIBundle4(implBC, headers);
1:708d00a: 
1:b769cd4:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:b769cd4:         assertEquals(3, registrations.size());
1:b769cd4: 
1:b769cd4:         boolean foundA = false, foundB = false, foundC = false;
1:b769cd4:         for (ServiceRegistration sreg : registrations) {
1:b769cd4:             ServiceReference sref = sreg.getReference();
1:c69c410:             String objectClassName = ((String [])sref.getProperty(Constants.OBJECTCLASS))[0];
1:c69c410:             String serviceImplClassName = (String) sref.getProperty(SpiFlyConstants.PROVIDER_IMPLCLASS_PROPERTY);
1:b769cd4:             if (MySPIImpl4a.class.getName().equals(serviceImplClassName)) {
1:b769cd4:                 assertEquals("org.apache.aries.mytest.MySPI", objectClassName);
1:c69c410: 
1:c69c410:                 MySPI svc = (MySPI) implBC.getService(sreg.getReference());
1:c69c410:                 assertEquals("impl4a", svc.someMethod(""));
1:c69c410: 
1:b769cd4:                 foundA = true;
1:b769cd4:             } else if (MySPIImpl4b.class.getName().equals(serviceImplClassName)) {
1:b769cd4:                 assertEquals("org.apache.aries.mytest.MySPI2", objectClassName);
1:c69c410: 
1:c69c410:                 MySPI2 svc = (MySPI2) implBC.getService(sreg.getReference());
1:c69c410:                 assertEquals("impl4b", svc.someMethod(""));
1:c69c410: 
1:b769cd4:                 foundB = true;
1:b769cd4:             } else if (MySPIImpl4c.class.getName().equals(serviceImplClassName)) {
1:b769cd4:                 assertEquals("org.apache.aries.mytest.MySPI2", objectClassName);
1:c69c410: 
1:c69c410:                 MySPI2 svc = (MySPI2) implBC.getService(sreg.getReference());
1:c69c410:                 assertEquals("impl4c", svc.someMethod(""));
1:c69c410: 
1:b769cd4:                 foundC = true;
1:b769cd4:             }
1:b769cd4:         }
1:b769cd4: 
1:b769cd4:         assertTrue(foundA);
1:b769cd4:         assertTrue(foundB);
1:b769cd4:         assertTrue(foundC);
1:708d00a:     }
1:708d00a: 
1:708d00a:     @Test
1:b769cd4:     public void testNoServiceRegistration() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
1:76c890d:         BaseActivator activator = new BaseActivator() {
1:76c890d:             @Override
1:76c890d:             public void start(BundleContext context) throws Exception {}
1:76c890d:         };
1:76c890d: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:76c890d: 
1:76c890d:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:76c890d:         EasyMock.replay(sreg);
1:76c890d: 
1:76c890d:         BundleContext implBC = mockSPIBundleContext(sreg);
1:8d934f9:         Bundle implBundle = mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:76c890d: 
1:708d00a:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:76c890d:         assertEquals(0, registrations.size());
1:76c890d:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:3e50f86:         assertEquals(1, bundles.size());
1:3e50f86:         assertSame(implBundle, bundles.iterator().next());
1:708d00a:     }
1:b769cd4: 
1:708d00a:     @Test
1:22e0ef1:     @SuppressWarnings("unchecked")
1:3e50f86:     public void testAddingBundleWithBundleClassPath() throws Exception {
1:82e8b21:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:82e8b21:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:82e8b21:         EasyMock.replay(mediatorBundle);
2:3e50f86:         BaseActivator activator = new BaseActivator() {
1:708d00a:             @Override
2:3e50f86:             public void start(BundleContext context) throws Exception {}
2:3e50f86:         };
1:708d00a: 
1:82e8b21:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1:3e50f86: 
1:3e50f86:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
3:3e50f86:         EasyMock.<Object>expect(implBC.registerService(
3:3e50f86:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
1:c69c410:                 EasyMock.isA(ServiceFactory.class),
1:c69c410:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class)).times(3);
1:3e50f86:         EasyMock.replay(implBC);
1:3e50f86: 
1:3e50f86: 
1:3e50f86:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:3e50f86:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:3e50f86: 
1:708d00a:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:a166d95:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:a166d95:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:3e50f86:         headers.put(Constants.BUNDLE_CLASSPATH, ".,non-jar.jar,embedded.jar,embedded2.jar");
1:3e50f86:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1:3e50f86: 
1:3e50f86:         URL embeddedJar = getClass().getResource("/embedded.jar");
1:3e50f86:         assertNotNull("precondition", embeddedJar);
1:3e50f86:         EasyMock.expect(implBundle.getResource("embedded.jar")).andReturn(embeddedJar).anyTimes();
1:3e50f86:         URL embedded2Jar = getClass().getResource("/embedded2.jar");
1:3e50f86:         assertNotNull("precondition", embedded2Jar);
1:3e50f86:         EasyMock.expect(implBundle.getResource("embedded2.jar")).andReturn(embedded2Jar).anyTimes();
1:3e50f86:         URL dir = new URL("jar:" + embeddedJar + "!/META-INF/services");
1:3e50f86:         assertNotNull("precondition", dir);
1:3e50f86:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:3e50f86:         EasyMock.expect(implBundle.findEntries((String) EasyMock.anyObject(), (String) EasyMock.anyObject(), EasyMock.anyBoolean())).
1:3e50f86:             andReturn(null).anyTimes();
1:3e50f86: 
1:3e50f86:         ClassLoader cl = new URLClassLoader(new URL [] {embeddedJar}, getClass().getClassLoader());
1:3e50f86:         Class<?> clsA = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a");
1:3e50f86:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a")).andReturn(clsA).anyTimes();
1:3e50f86:         Class<?> clsB = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b");
1:3e50f86:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b")).andReturn(clsB).anyTimes();
1:3e50f86:         ClassLoader cl2 = new URLClassLoader(new URL [] {embedded2Jar}, getClass().getClassLoader());
1:3e50f86:         Class<?> clsC = cl2.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3");
1:3e50f86:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3")).andReturn(clsC).anyTimes();
1:3e50f86:         EasyMock.replay(implBundle);
1:708d00a: 
1:3e50f86:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:3e50f86:         // Call addingBundle();
1:5e6f679:         customizer.addingBundle(implBundle, null);
2:3e50f86:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:3e50f86:         assertEquals(1, bundles.size());
1:3e50f86:         assertSame(implBundle, bundles.iterator().next());
1:708d00a: 
1:3e50f86:         // The bc.registerService() call should now have been made
1:3e50f86:         EasyMock.verify(implBC);
1:708d00a:     }
1:3e50f86: 
2:3e50f86:     @SuppressWarnings("unchecked")
1:3e50f86:     private BundleContext mockSPIBundleContext(ServiceRegistration sreg) {
1:3e50f86:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
1:3e50f86:         EasyMock.<Object>expect(implBC.registerService(
1:3e50f86:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
1:c69c410:                 EasyMock.isA(ServiceFactory.class),
1:3e50f86:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(sreg);
1:3e50f86:         EasyMock.replay(implBC);
1:3e50f86:         return implBC;
1:708d00a:     }
1:3e50f86: 
1:3e50f86:     private Bundle mockSPIBundle(BundleContext implBC, String spiProviderHeader) throws ClassNotFoundException {
1:a166d95:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:a166d95:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, spiProviderHeader);
1:a166d95:         return mockSPIBundle(implBC, headers);
1:a166d95:     }
1:a166d95: 
1:a166d95:     private Bundle mockSPIBundle(BundleContext implBC, Dictionary<String, String> headers) throws ClassNotFoundException {
1:d4c0656:         return mockSPIBundle(implBC, headers, null);
1:d4c0656:     }
1:d4c0656: 
1:d4c0656:     private Bundle mockSPIBundle(BundleContext implBC, Dictionary<String, String> headers, BundleRevision rev) throws ClassNotFoundException {
1:a166d95:         if (headers == null)
1:a166d95:             headers = new Hashtable<String, String>();
1:a166d95: 
1:3e50f86:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:3e50f86:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:3e50f86:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1:3e50f86: 
1:3e50f86:         // List the resources found at META-INF/services in the test bundle
1:3e50f86:         URL dir = getClass().getResource("impl1/META-INF/services");
1:3e50f86:         assertNotNull("precondition", dir);
1:3e50f86:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:3e50f86:         URL res = getClass().getResource("impl1/META-INF/services/org.apache.aries.mytest.MySPI");
1:3e50f86:         assertNotNull("precondition", res);
1:3e50f86:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
1:3e50f86:                 Collections.enumeration(Collections.singleton(res))).anyTimes();
1:3e50f86:         Class<?> cls = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl1.MySPIImpl1");
1:3e50f86:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
1:d4c0656: 
1:d4c0656:         if (rev != null)
1:d4c0656:             EasyMock.expect(implBundle.adapt(BundleRevision.class)).andReturn(rev).anyTimes();
1:d4c0656: 
1:3e50f86:         EasyMock.replay(implBundle);
1:3e50f86:         return implBundle;
1:708d00a:     }
1:c69c410: 
1:5e6f679:     @SuppressWarnings("unchecked")
1:b769cd4:     private BundleContext mockSPIBundleContext4() {
1:708d00a:         BundleContext implBC = EasyMock.createNiceMock(BundleContext.class);
1:22e0ef1: 
1:f4b2805:         implBC.registerService(EasyMock.anyString(),
1:7dabe8c:                                EasyMock.anyObject(),
1:f4b2805:                                (Dictionary<String,?>)EasyMock.anyObject());
1:f4b2805:         EasyMock.expectLastCall().andAnswer(new IAnswer<ServiceRegistration<Object>>() {
1:22e0ef1:             @Override
1:f4b2805:             public ServiceRegistration<Object> answer() throws Throwable {
1:22e0ef1:                 final String className = (String) EasyMock.getCurrentArguments()[0];
1:b769cd4:                 final Object serviceObject = EasyMock.getCurrentArguments()[1];
1:c69c410:                 final Dictionary<String, Object> registrationProps =
1:c69c410:                     (Dictionary<String, Object>) EasyMock.getCurrentArguments()[2];
1:c69c410:                 return new ServiceRegistrationImpl(className, serviceObject, registrationProps);
1:c69c410:             }
1:c69c410:         }).anyTimes();
1:f4b2805:         implBC.getService(EasyMock.anyObject(ServiceReference.class));
1:f4b2805:         EasyMock.expectLastCall().
1:c69c410:             andAnswer(new IAnswer<Object>() {
1:c69c410:                 @Override
1:c69c410:                 public Object answer() throws Throwable {
1:c69c410:                     ServiceRegistrationImpl reg = (ServiceRegistrationImpl) EasyMock.getCurrentArguments()[0];
1:c69c410:                     Object svc = reg.getServiceObject();
1:c69c410:                     if (svc instanceof ServiceFactory) {
1:c69c410:                         return ((ServiceFactory) svc).getService(null, reg);
1:c69c410:                     } else {
1:c69c410:                         return svc;
1:c69c410:                     }
1:b769cd4:                 }
1:b769cd4:             }).anyTimes();
1:708d00a: 
1:708d00a:         EasyMock.replay(implBC);
1:708d00a:         return implBC;
1:22e0ef1:     }
1:708d00a: 
1:a166d95:     private Bundle mockSPIBundle4(BundleContext implBC, Dictionary<String, String> headers) throws ClassNotFoundException {
1:708d00a:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:708d00a:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1:708d00a:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1:708d00a: 
1:708d00a:         // List the resources found at META-INF/services in the test bundle
1:708d00a:         URL dir = getClass().getResource("impl4/META-INF/services");
1:708d00a:         assertNotNull("precondition", dir);
1:708d00a:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:708d00a:         URL res = getClass().getResource("impl4/META-INF/services/org.apache.aries.mytest.MySPI");
1:708d00a:         assertNotNull("precondition", res);
1:708d00a:         URL res2 = getClass().getResource("impl4/META-INF/services/org.apache.aries.mytest.MySPI2");
1:708d00a:         assertNotNull("precondition", res2);
1:708d00a: 
1:708d00a:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
1:708d00a:                 Collections.enumeration(Arrays.asList(res, res2))).anyTimes();
1:708d00a: 
1:708d00a:         Class<?> clsa = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4a");
1:708d00a:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4a")).andReturn(clsa).anyTimes();
1:708d00a:         Class<?> clsb = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4b");
1:708d00a:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4b")).andReturn(clsb).anyTimes();
1:708d00a:         Class<?> clsc = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4c");
1:708d00a:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4c")).andReturn(clsc).anyTimes();
1:708d00a: 
1:708d00a: 
1:708d00a:         EasyMock.replay(implBundle);
1:708d00a:         return implBundle;
1:22e0ef1:     }
1:3e50f86: 
1:8dc9594:     private static class ServiceRegistrationImpl implements ServiceRegistration<Object>, ServiceReference {
1:c69c410:         private final Object serviceObject;
1:c69c410:         private final Dictionary<String, Object> properties;
1:c69c410: 
1:c69c410:         public ServiceRegistrationImpl(String className, Object serviceObject, Dictionary<String, Object> properties) {
1:c69c410:             this.serviceObject = serviceObject;
1:c69c410:             this.properties = properties;
1:c69c410:             this.properties.put(Constants.OBJECTCLASS, new String[] {className});
1:c69c410:         }
1:c69c410: 
1:c69c410:         Object getServiceObject() {
1:c69c410:             return serviceObject;
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:8dc9594:         public ServiceReference<Object> getReference() {
1:c69c410:             return this;
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:8dc9594:         public void setProperties(Dictionary<String, ?> properties) {
1:c69c410:             throw new UnsupportedOperationException();
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public void unregister() {
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public Object getProperty(String key) {
1:c69c410:             return properties.get(key);
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public String[] getPropertyKeys() {
1:c69c410:             return Collections.list(properties.keys()).toArray(new String [] {});
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public Bundle getBundle() {
1:c69c410:             throw new UnsupportedOperationException();
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public Bundle[] getUsingBundles() {
1:c69c410:             throw new UnsupportedOperationException();
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public boolean isAssignableTo(Bundle bundle, String className) {
1:c69c410:             throw new UnsupportedOperationException();
1:c69c410:         }
1:c69c410: 
1:c69c410:         @Override
1:c69c410:         public int compareTo(Object reference) {
1:c69c410:             throw new UnsupportedOperationException();
1:c69c410:         }
1:c69c410:     }
1:708d00a: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:d4c0656
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:         ServiceRegistration<?> sreg = EasyMock.createNiceMock(ServiceRegistration.class);
1:         // A typical requirement that is not for us...
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, "osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"");
1: 
1:         List<BundleWire> wires = new ArrayList<BundleWire>();
1:         BundleWire wire = EasyMock.createMock(BundleWire.class);
1:         Bundle fragment = EasyMock.createMock(Bundle.class);
1:         BundleRevision frev = EasyMock.createMock(BundleRevision.class);
1:         EasyMock.expect(frev.getBundle()).andReturn(fragment).anyTimes();
1:         EasyMock.replay(frev);
1:         BundleRequirement req = EasyMock.createMock(BundleRequirement.class);
1:         EasyMock.expect(req.getRevision()).andReturn(frev).anyTimes();
1:         EasyMock.replay(req);
1:         EasyMock.expect(wire.getRequirement()).andReturn(req).anyTimes();
1:         EasyMock.replay(wire);
1:         wires.add(wire);
1: 
1:         BundleWiring bw = EasyMock.createMock(BundleWiring.class);
1:         EasyMock.expect(bw.getProvidedWires("osgi.wiring.host")).andReturn(wires).anyTimes();
1:         EasyMock.replay(bw);
1: 
1:         BundleRevision rev = EasyMock.createMock(BundleRevision.class);
1:         EasyMock.expect(rev.getWiring()).andReturn(bw).anyTimes();
1:         EasyMock.replay(rev);
1:         Bundle implBundle = mockSPIBundle(implBC, headers, rev);
1: 
1:         Dictionary<String, String> fheaders = new Hashtable<String, String>();
1:         fheaders.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         fheaders.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:               SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:         EasyMock.expect(fragment.getHeaders()).andReturn(fheaders).anyTimes();
1:         EasyMock.replay(fragment);
1:         customizer.addingBundle(implBundle, null);
/////////////////////////////////////////////////////////////////////////
1:         return mockSPIBundle(implBC, headers, null);
1:     }
1: 
1:     private Bundle mockSPIBundle(BundleContext implBC, Dictionary<String, String> headers, BundleRevision rev) throws ClassNotFoundException {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (rev != null)
1:             EasyMock.expect(implBundle.adapt(BundleRevision.class)).andReturn(rev).anyTimes();
1: 
commit:7dabe8c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testCapReqHeadersInFragment() throws Exception {
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
1: 
1:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         sreg.unregister();
1:         EasyMock.expectLastCall();
1:         EasyMock.replay(sreg);
1: 
1:         BundleContext implBC = mockSPIBundleContext(sreg);
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:         Bundle implBundle = mockSPIBundle(implBC, headers);
1: 
1:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:                                EasyMock.anyObject(),
commit:e9a5257
/////////////////////////////////////////////////////////////////////////
commit:9644284
/////////////////////////////////////////////////////////////////////////
1: 
1:         Collection<Bundle> bundles2 = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(0, bundles2.size());
1: 
commit:c69c410
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.mytest.MySPI;
1: import org.apache.aries.mytest.MySPI2;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:         String[] objectClassProp = (String [])registrations.iterator().next().getReference().getProperty(Constants.OBJECTCLASS);
1:         assertEquals(1, objectClassProp.length);
1:         assertEquals("org.apache.aries.mytest.MySPI2", objectClassProp[0]);
/////////////////////////////////////////////////////////////////////////
1:             List<String> objectClasses = Arrays.asList((String[]) sr.getReference().getProperty(Constants.OBJECTCLASS));
1:             actualObjectClasses.addAll(objectClasses);
1:             if (objectClasses.contains("org.apache.aries.mytest.MySPI")) {
1:             } else if (objectClasses.contains("org.apache.aries.mytest.MySPI2")) {
/////////////////////////////////////////////////////////////////////////
1:             String objectClassName = ((String [])sref.getProperty(Constants.OBJECTCLASS))[0];
1:             String serviceImplClassName = (String) sref.getProperty(SpiFlyConstants.PROVIDER_IMPLCLASS_PROPERTY);
1: 
1:                 MySPI svc = (MySPI) implBC.getService(sreg.getReference());
1:                 assertEquals("impl4a", svc.someMethod(""));
1: 
1: 
1:                 MySPI2 svc = (MySPI2) implBC.getService(sreg.getReference());
1:                 assertEquals("impl4b", svc.someMethod(""));
1: 
1: 
1:                 MySPI2 svc = (MySPI2) implBC.getService(sreg.getReference());
1:                 assertEquals("impl4c", svc.someMethod(""));
1: 
/////////////////////////////////////////////////////////////////////////
1:                 EasyMock.isA(ServiceFactory.class),
1:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class)).times(3);
/////////////////////////////////////////////////////////////////////////
1:                 EasyMock.isA(ServiceFactory.class),
/////////////////////////////////////////////////////////////////////////
0:         EasyMock.expect(implBC.registerService((String) EasyMock.anyObject(), EasyMock.anyObject(), (Dictionary<String,?>)EasyMock.anyObject())).
1:                     final Dictionary<String, Object> registrationProps =
1:                         (Dictionary<String, Object>) EasyMock.getCurrentArguments()[2];
1:                     return new ServiceRegistrationImpl(className, serviceObject, registrationProps);
1:                 }
1:             }).anyTimes();
0:         EasyMock.expect(implBC.getService(EasyMock.anyObject(ServiceReference.class))).
1:             andAnswer(new IAnswer<Object>() {
1:                 @Override
1:                 public Object answer() throws Throwable {
1:                     ServiceRegistrationImpl reg = (ServiceRegistrationImpl) EasyMock.getCurrentArguments()[0];
1:                     Object svc = reg.getServiceObject();
1:                     if (svc instanceof ServiceFactory) {
1:                         return ((ServiceFactory) svc).getService(null, reg);
1:                     } else {
1:                         return svc;
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static class ServiceRegistrationImpl implements ServiceRegistration, ServiceReference {
1:         private final Object serviceObject;
1:         private final Dictionary<String, Object> properties;
1: 
1:         public ServiceRegistrationImpl(String className, Object serviceObject, Dictionary<String, Object> properties) {
1:             this.serviceObject = serviceObject;
1:             this.properties = properties;
1:             this.properties.put(Constants.OBJECTCLASS, new String[] {className});
1:         }
1: 
1:         Object getServiceObject() {
1:             return serviceObject;
1:         }
1: 
1:         @Override
0:         public ServiceReference getReference() {
1:             return this;
1:         }
1: 
1:         @Override
0:         public void setProperties(@SuppressWarnings("rawtypes") Dictionary properties) {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public void unregister() {
1:         }
1: 
1:         @Override
1:         public Object getProperty(String key) {
1:             return properties.get(key);
1:         }
1: 
1:         @Override
1:         public String[] getPropertyKeys() {
1:             return Collections.list(properties.keys()).toArray(new String [] {});
1:         }
1: 
1:         @Override
1:         public Bundle getBundle() {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public Bundle[] getUsingBundles() {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public boolean isAssignableTo(Bundle bundle, String className) {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public int compareTo(Object reference) {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
commit:82e8b21
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(registrations.iterator().next().getReference().getProperty(SpiFlyConstants.SERVICELOADER_MEDIATOR_PROPERTY));
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(sr.getReference().getProperty(SpiFlyConstants.SERVICELOADER_MEDIATOR_PROPERTY));
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
/////////////////////////////////////////////////////////////////////////
1:         Bundle mediatorBundle = EasyMock.createMock(Bundle.class);
1:         EasyMock.expect(mediatorBundle.getBundleId()).andReturn(42l).anyTimes();
1:         EasyMock.replay(mediatorBundle);
1:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, mediatorBundle);
commit:c5a6657
/////////////////////////////////////////////////////////////////////////
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah; ");
commit:782066c
/////////////////////////////////////////////////////////////////////////
commit:8d934f9
/////////////////////////////////////////////////////////////////////////
1:         Bundle implBundle = mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT);
commit:a166d95
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
1:         Bundle implBundle = mockSPIBundle(implBC, headers);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
0:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah; " +
0:                 SpiFlyConstants.REGISTER_DIRECTIVE + ":=*");
1:         Bundle implBundle = mockSPIBundle(implBC, headers);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("yeah", attrs.get("approval"));
1:     }
1: 
1:     @Test
1:     public void testNonServiceRegistryBundle() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         EasyMock.replay(sreg);
1: 
1:         BundleContext implBC = mockSPIBundleContext(sreg);
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah;" +
1:                 SpiFlyConstants.REGISTER_DIRECTIVE + ":=\"\"");
0:         Bundle implBundle = mockSPIBundle(implBC, headers);
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals(0, registrations.size());
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         Map<String, Object> attrs = activator.getCustomBundleAttributes("org.apache.aries.mytest.MySPI", implBundle);
1:         assertEquals(1, attrs.size());
1:         assertEquals("yeah", attrs.get("approval"));
1:     }
1: 
1:     @Test
1:     public void testRegisterAltAttributeDatatype() throws Exception {
1:         // TODO
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
0:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2; approval=yeah; " +
1:         		SpiFlyConstants.REGISTER_DIRECTIVE + ":=\"org.apache.aries.spifly.impl4.MySPIImpl4b\"");
1:         Bundle implBundle = mockSPIBundle4(implBC, headers);
0:         assertEquals("org.apache.aries.mytest.MySPI2", registrations.iterator().next().getReference().getProperty(Constants.OBJECTCLASS));
0:         assertNotNull(registrations.iterator().next().getReference().getProperty(SpiFlyConstants.SERVICELOADER_URL_PROPERTY));
1:         assertEquals("yeah", registrations.iterator().next().getReference().getProperty("approval"));
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI; approval=yeah, " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2");
1:         Bundle implBundle = mockSPIBundle4(implBC, headers);
1: 
1:         boolean foundMySPI = false;
1:         boolean foundMySPI2 = false;
0:             assertNotNull(sr.getReference().getProperty(SpiFlyConstants.SERVICELOADER_URL_PROPERTY));
0:             if ("org.apache.aries.mytest.MySPI".equals(sr.getReference().getProperty(Constants.OBJECTCLASS))) {
1:                 assertEquals("yeah", sr.getReference().getProperty("approval"));
1:                 foundMySPI = true;
0:             } else if ("org.apache.aries.mytest.MySPI2".equals(sr.getReference().getProperty(Constants.OBJECTCLASS))) {
1:                 assertNull(sr.getReference().getProperty("approval"));
1:                 foundMySPI2 = true;
1:             }
1:         assertTrue(foundMySPI);
1:         assertTrue(foundMySPI2);
1: 
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI," +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI2");
1:         Bundle implBundle = mockSPIBundle4(implBC, headers);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         headers.put(SpiFlyConstants.PROVIDE_CAPABILITY,
1:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "; " +
0:                 SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE + "=org.apache.aries.mytest.MySPI");
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, spiProviderHeader);
1:         return mockSPIBundle(implBC, headers);
1:     }
1: 
1:     private Bundle mockSPIBundle(BundleContext implBC, Dictionary<String, String> headers) throws ClassNotFoundException {
1:         if (headers == null)
1:             headers = new Hashtable<String, String>();
1: 
/////////////////////////////////////////////////////////////////////////
1:     private Bundle mockSPIBundle4(BundleContext implBC, Dictionary<String, String> headers) throws ClassNotFoundException {
commit:2276d43
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:                 "; " + SpiFlyConstants.SERVICE_REGISTRY_DIRECTIVE + ":=true; approval=global");
/////////////////////////////////////////////////////////////////////////
1:     public void testProvidedSPIDirective() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1: 
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         BundleContext implBC = mockSPIBundleContext4();
0:         Bundle implBundle =
0:             mockSPIBundle4(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT + "; " + SpiFlyConstants.PROVIDED_SPI_DIRECTIVE + ":=\"org.apache.aries.mytest.MySPI,org.apache.aries.mytest.MySPI2\"; approval=global");
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals("Expected 3 registrations, one for MySPI and 2 for MySPI2", 3, registrations.size());
1:         Set<String> expectedObjectClasses = new HashSet<String>(Arrays.asList("org.apache.aries.mytest.MySPI", "org.apache.aries.mytest.MySPI2"));
1:         Set<String> actualObjectClasses = new HashSet<String>();
1:         for (ServiceRegistration sr : registrations) {
0:             actualObjectClasses.add((String) sr.getReference().getProperty(Constants.OBJECTCLASS));
0:             assertNotNull(sr.getReference().getProperty(SpiFlyConstants.SPI_PROVIDER_URL_PROPERTY));
0:             assertEquals("global", sr.getReference().getProperty("approval"));
1:         }
1:         assertEquals(expectedObjectClasses, actualObjectClasses);
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:         Bundle implBundle = mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT +
0:                 "; " + SpiFlyConstants.SERVICE_REGISTRY_DIRECTIVE + ":=false");
commit:5e6f679
/////////////////////////////////////////////////////////////////////////
0:         Bundle implBundle = mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT +
0:                 "; service-registry:=true; approval=global");
/////////////////////////////////////////////////////////////////////////
0:             mockSPIBundle4(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT + "; " + SpiFlyConstants.PROVIDED_SPI_DIRECTIVE + ":=org.apache.aries.mytest.MySPI; approval=global");
0:         assertNotNull(registrations.iterator().next().getReference().getProperty(SpiFlyConstants.SPI_PROVIDER_URL_PROPERTY));
/////////////////////////////////////////////////////////////////////////
0:             mockSPIBundle4(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT);
/////////////////////////////////////////////////////////////////////////
0:         Bundle implBundle = mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT + "; service-registry:=false");
/////////////////////////////////////////////////////////////////////////
0:         headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, SpiFlyConstants.PROVIDER_REQUIREMENT);
/////////////////////////////////////////////////////////////////////////
1:         customizer.addingBundle(implBundle, null);
/////////////////////////////////////////////////////////////////////////
0:         return mockSPIBundle(implBC, SpiFlyConstants.PROVIDER_REQUIREMENT);
/////////////////////////////////////////////////////////////////////////
0:             headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, spiProviderHeader);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             headers.put(SpiFlyConstants.REQUIRE_CAPABILITY, spiProviderHeader);
commit:76c890d
/////////////////////////////////////////////////////////////////////////
0:         Bundle implBundle = mockSPIBundle(implBC, "osgi.spi.provider; effective:=active; service-registry:=true; approval=global");
/////////////////////////////////////////////////////////////////////////
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         EasyMock.replay(sreg);
1: 
1:         BundleContext implBC = mockSPIBundleContext(sreg);
0:         Bundle implBundle = mockSPIBundle(implBC, "osgi.spi.provider; effective:=active; service-registry:=false");
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals(0, registrations.size());
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1:     }
1: 
1:     @Test
0:     public void testNoEffectiveValue() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         EasyMock.replay(sreg);
1: 
1:         BundleContext implBC = mockSPIBundleContext(sreg);
0:         Bundle implBundle = mockSPIBundle(implBC, "osgi.spi.provider");
1: 
0:         assertNull(customizer.addingBundle(implBundle, null));
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
0:         assertEquals(0, bundles.size());
commit:b769cd4
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.spifly.impl4.MySPIImpl4a;
1: import org.apache.aries.spifly.impl4.MySPIImpl4b;
1: import org.apache.aries.spifly.impl4.MySPIImpl4c;
/////////////////////////////////////////////////////////////////////////
1:         BundleContext implBC = mockSPIBundleContext4();
/////////////////////////////////////////////////////////////////////////
1:     public void testMultipleServiceInstancesAndTypes() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1: 
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         BundleContext implBC = mockSPIBundleContext4();
0:         Bundle implBundle =
0:             mockSPIBundle4(implBC, "osgi.spi.provider; effective:=active");
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals(3, registrations.size());
1: 
1:         boolean foundA = false, foundB = false, foundC = false;
1:         for (ServiceRegistration sreg : registrations) {
1:             ServiceReference sref = sreg.getReference();
0:             String objectClassName = sref.getProperty(Constants.OBJECTCLASS).toString();
0:             String serviceImplClassName = sref.getProperty("serviceObject").getClass().getName();
1:             if (MySPIImpl4a.class.getName().equals(serviceImplClassName)) {
1:                 assertEquals("org.apache.aries.mytest.MySPI", objectClassName);
1:                 foundA = true;
1:             } else if (MySPIImpl4b.class.getName().equals(serviceImplClassName)) {
1:                 assertEquals("org.apache.aries.mytest.MySPI2", objectClassName);
1:                 foundB = true;
1:             } else if (MySPIImpl4c.class.getName().equals(serviceImplClassName)) {
1:                 assertEquals("org.apache.aries.mytest.MySPI2", objectClassName);
1:                 foundC = true;
1:             }
1:         }
1: 
1:         assertTrue(foundA);
1:         assertTrue(foundB);
1:         assertTrue(foundC);
1:     public void testNoServiceRegistration() throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1:     private BundleContext mockSPIBundleContext4() {
/////////////////////////////////////////////////////////////////////////
1:                     final Object serviceObject = EasyMock.getCurrentArguments()[1];
/////////////////////////////////////////////////////////////////////////
0:                             } else if ("serviceObject".equals(prop)) {
0:                                 // just used by the test to check the service object that was registered.
0:                                 return serviceObject;
1:                             }
/////////////////////////////////////////////////////////////////////////
1:             }).anyTimes();
commit:22e0ef1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.spifly.api.SpiFlyConstants;
/////////////////////////////////////////////////////////////////////////
1:     public void testServiceSubsetSelectionAndRegistrationProperties() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         assertNotNull(registrations.iterator().next().getReference().getProperty(SpiFlyConstants.SPI_PROVIDER_URL));
0:         assertEquals("global", registrations.iterator().next().getReference().getProperty("approval"));
/////////////////////////////////////////////////////////////////////////
0:             registerService((String) EasyMock.anyObject(), EasyMock.anyObject(), (Dictionary<String,?>)EasyMock.anyObject())).
1:                 @SuppressWarnings("unchecked")
1:                     final String className = (String) EasyMock.getCurrentArguments()[0];
0:                     final Dictionary<String,?> registrationProps =
0:                             (Dictionary<String, ?>) EasyMock.getCurrentArguments()[2];
1: 
0:                     EasyMock.expect(sref.getProperty(EasyMock.anyObject(String.class))).andAnswer(new IAnswer<Object>() {
1:                         @Override
0:                         public Object answer() throws Throwable {
0:                             Object prop = EasyMock.getCurrentArguments()[0];
0:                             if (Constants.OBJECTCLASS.equals(prop)) {
0:                                 return className;
0:                             } else {
0:                                 return registrationProps.get(prop);
1:                         }
1:                         }
0:                     }).anyTimes();
commit:708d00a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Map;
1: import org.easymock.IAnswer;
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
1:     public void testCustomAttributesBundle() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
0:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         EasyMock.replay(sreg);
1: 
1:         BundleContext implBC = mockSPIBundleContext(sreg);
0:         Bundle implBundle = mockSPIBundle(implBC, "osgi.spi.provider; effective:=active; approval=global");
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals(1, registrations.size());
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         Map<String, Object> attrs = activator.getCustomBundleAttributes("org.apache.aries.mytest.MySPI", implBundle);
1:         assertEquals(1, attrs.size());
0:         assertEquals("global", attrs.get("approval"));
1:     }
1: 
1:     @Test
0:     public void testServiceSubsetSelection() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1: 
1:         BaseActivator activator = new BaseActivator() {
1:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
0:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
1:         EasyMock.replay(sreg);
1: 
0:         BundleContext implBC = mockSPIBundleContext4(sreg);
0:         Bundle implBundle =
0:             mockSPIBundle4(implBC, "osgi.spi.provider; effective:=active; service=org.apache.aries.mytest.MySPI; approval=global");
1: 
1:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         assertEquals(1, registrations.size());
0:         assertEquals("org.apache.aries.mytest.MySPI", registrations.iterator().next().getReference().getProperty(Constants.OBJECTCLASS));
1:     }
1: 
1:     @Test
0:     public void testMultipleServiceInstances() throws Exception {
0:         // TODO
1:     }
1: 
1:     @Test
0:     public void testMultipleServiceTypes() throws Exception {
0:         // TODO
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 
0:     private BundleContext mockSPIBundleContext4(ServiceRegistration sreg) {
1:         BundleContext implBC = EasyMock.createNiceMock(BundleContext.class);
1: 
0:         EasyMock.expect(implBC.
0:             registerService((String) EasyMock.anyObject(), EasyMock.anyObject(), (Dictionary<?,?>)EasyMock.anyObject())).
0:             andAnswer(new IAnswer<ServiceRegistration>() {
1:                 @Override
0:                 public ServiceRegistration answer() throws Throwable {
0:                     ServiceReference sref = EasyMock.createMock(ServiceReference.class);
0:                     EasyMock.expect(sref.getProperty(Constants.OBJECTCLASS)).andReturn(
0:                         EasyMock.getCurrentArguments()[0]);
0:                     EasyMock.replay(sref);
1: 
0:                     ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
0:                     EasyMock.expect(sreg.getReference()).andReturn(sref).anyTimes();
0:                     EasyMock.replay(sreg);
0:                     return sreg;
1:                 }
0:             });
1: 
1:         EasyMock.replay(implBC);
1:         return implBC;
1:     }
1: 
0:     private Bundle mockSPIBundle4(BundleContext implBC, String spiProviderHeader) throws ClassNotFoundException {
1:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1: 
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
0:         if (spiProviderHeader != null)
0:             headers.put("Provide-Capability", spiProviderHeader);
1:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1: 
1:         // List the resources found at META-INF/services in the test bundle
1:         URL dir = getClass().getResource("impl4/META-INF/services");
1:         assertNotNull("precondition", dir);
1:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:         URL res = getClass().getResource("impl4/META-INF/services/org.apache.aries.mytest.MySPI");
1:         assertNotNull("precondition", res);
1:         URL res2 = getClass().getResource("impl4/META-INF/services/org.apache.aries.mytest.MySPI2");
1:         assertNotNull("precondition", res2);
1: 
1:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
1:                 Collections.enumeration(Arrays.asList(res, res2))).anyTimes();
1: 
1:         Class<?> clsa = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4a");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4a")).andReturn(clsa).anyTimes();
1:         Class<?> clsb = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4b");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4b")).andReturn(clsb).anyTimes();
1:         Class<?> clsc = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl4.MySPIImpl4c");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl4.MySPIImpl4c")).andReturn(clsc).anyTimes();
1: 
1: 
1:         EasyMock.replay(implBundle);
1:         return implBundle;
1:     }
commit:6591ac7
/////////////////////////////////////////////////////////////////////////
1: public class ProviderBundleTrackerCustomizerGenericCapabilityTest {
commit:3e50f86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
0: import static org.junit.Assert.assertSame;
1: 
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.List;
1: 
0: import org.apache.aries.spifly.impl1.MySPIImpl1;
0: import org.apache.aries.spifly.impl2.MySPIImpl2a;
0: import org.apache.aries.spifly.impl2.MySPIImpl2b;
0: import org.apache.aries.spifly.impl3.MySPIImpl3;
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: 
0: public class ProviderBundleTrackerCustomizerTest2 {
1:     @Test
1:     public void testAddingRemovedBundle() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
0:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
0:         ServiceRegistration sreg = EasyMock.createMock(ServiceRegistration.class);
0:         sreg.unregister();
0:         EasyMock.expectLastCall();
0:         EasyMock.replay(sreg);
1: 
0:         BundleContext implBC = mockSPIBundleContext(sreg);
0:         Bundle implBundle = mockSPIBundle(implBC);
1: 
1:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:         // Call addingBundle();
0:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         // The bc.registerService() call should now have been made
1:         EasyMock.verify(implBC);
1: 
1:         // Call removedBundle();
1:         customizer.removedBundle(implBundle, null, registrations);
1:         // sreg.unregister() should have been called.
1:         EasyMock.verify(sreg);
1:     }
1: 
1:     @Test
0:     public void testAddingBundleSPIBundle() throws Exception {
0:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
0:         Bundle spiBundle = mockSPIBundle(implBC);
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), spiBundle);
0:         assertNull("The SpiFly bundle itself should be ignored", customizer.addingBundle(spiBundle, null));
1:     }
1: 
1:     @Test
0:     public void testAddingNonOptInBundle() throws Exception {
0:         BundleContext implBC = mockSPIBundleContext(EasyMock.createNiceMock(ServiceRegistration.class));
0:         Bundle implBundle = mockSPIBundle(implBC, null);
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(EasyMock.createNiceMock(BaseActivator.class), null);
0:         assertNull("Bundle doesn't opt-in so should be ignored", customizer.addingBundle(implBundle, null));
1:     }
1: 
1:     @Test
1:     @SuppressWarnings("unchecked")
1:     public void testAddingBundleWithBundleClassPath() throws Exception {
0:         Bundle spiBundle = EasyMock.createMock(Bundle.class);
0:         EasyMock.replay(spiBundle);
1:         BaseActivator activator = new BaseActivator() {
0:             @Override
1:             public void start(BundleContext context) throws Exception {}
1:         };
1: 
0:         ProviderBundleTrackerCustomizer customizer = new ProviderBundleTrackerCustomizer(activator, spiBundle);
1: 
1:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl2a.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl2b.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl3.class),
0:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(EasyMock.createNiceMock(ServiceRegistration.class));
1:         EasyMock.replay(implBC);
1: 
1: 
1:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1: 
0:         Dictionary<String, String> headers = new Hashtable<String, String>();
0:         headers.put("Provide-Capability", "osgi.spi.provider; effective:=active;");
1:         headers.put(Constants.BUNDLE_CLASSPATH, ".,non-jar.jar,embedded.jar,embedded2.jar");
1:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1: 
1:         URL embeddedJar = getClass().getResource("/embedded.jar");
1:         assertNotNull("precondition", embeddedJar);
1:         EasyMock.expect(implBundle.getResource("embedded.jar")).andReturn(embeddedJar).anyTimes();
1:         URL embedded2Jar = getClass().getResource("/embedded2.jar");
1:         assertNotNull("precondition", embedded2Jar);
1:         EasyMock.expect(implBundle.getResource("embedded2.jar")).andReturn(embedded2Jar).anyTimes();
1:         URL dir = new URL("jar:" + embeddedJar + "!/META-INF/services");
1:         assertNotNull("precondition", dir);
1:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:         EasyMock.expect(implBundle.findEntries((String) EasyMock.anyObject(), (String) EasyMock.anyObject(), EasyMock.anyBoolean())).
1:             andReturn(null).anyTimes();
1: 
1:         ClassLoader cl = new URLClassLoader(new URL [] {embeddedJar}, getClass().getClassLoader());
1:         Class<?> clsA = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2a")).andReturn(clsA).anyTimes();
1:         Class<?> clsB = cl.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl2.MySPIImpl2b")).andReturn(clsB).anyTimes();
1:         ClassLoader cl2 = new URLClassLoader(new URL [] {embedded2Jar}, getClass().getClassLoader());
1:         Class<?> clsC = cl2.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl3.MySPIImpl3")).andReturn(clsC).anyTimes();
1:         EasyMock.replay(implBundle);
1: 
1:         assertEquals("Precondition", 0, activator.findProviderBundles("org.apache.aries.mytest.MySPI").size());
1:         // Call addingBundle();
0:         List<ServiceRegistration> registrations = customizer.addingBundle(implBundle, null);
1:         Collection<Bundle> bundles = activator.findProviderBundles("org.apache.aries.mytest.MySPI");
1:         assertEquals(1, bundles.size());
1:         assertSame(implBundle, bundles.iterator().next());
1: 
1:         // The bc.registerService() call should now have been made
1:         EasyMock.verify(implBC);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private BundleContext mockSPIBundleContext(ServiceRegistration sreg) {
1:         BundleContext implBC = EasyMock.createMock(BundleContext.class);
1:         EasyMock.<Object>expect(implBC.registerService(
1:                 EasyMock.eq("org.apache.aries.mytest.MySPI"),
0:                 EasyMock.isA(MySPIImpl1.class),
1:                 (Dictionary<String,?>) EasyMock.anyObject())).andReturn(sreg);
1:         EasyMock.replay(implBC);
1:         return implBC;
1:     }
1: 
0:     private Bundle mockSPIBundle(BundleContext implBC) throws ClassNotFoundException {
0:         return mockSPIBundle(implBC, "osgi.spi.provider; effective:=active;");
1:     }
1: 
1:     private Bundle mockSPIBundle(BundleContext implBC, String spiProviderHeader) throws ClassNotFoundException {
1:         Bundle implBundle = EasyMock.createNiceMock(Bundle.class);
1:         EasyMock.expect(implBundle.getBundleContext()).andReturn(implBC).anyTimes();
1: 
0:         Dictionary<String, String> headers = new Hashtable<String, String>();
0:         if (spiProviderHeader != null)
0:             headers.put("Provide-Capability", spiProviderHeader);
1:         EasyMock.expect(implBundle.getHeaders()).andReturn(headers).anyTimes();
1: 
1:         // List the resources found at META-INF/services in the test bundle
1:         URL dir = getClass().getResource("impl1/META-INF/services");
1:         assertNotNull("precondition", dir);
1:         EasyMock.expect(implBundle.getResource("/META-INF/services")).andReturn(dir).anyTimes();
1:         URL res = getClass().getResource("impl1/META-INF/services/org.apache.aries.mytest.MySPI");
1:         assertNotNull("precondition", res);
1:         EasyMock.expect(implBundle.findEntries("META-INF/services", "*", false)).andReturn(
1:                 Collections.enumeration(Collections.singleton(res))).anyTimes();
1:         Class<?> cls = getClass().getClassLoader().loadClass("org.apache.aries.spifly.impl1.MySPIImpl1");
1:         EasyMock.<Object>expect(implBundle.loadClass("org.apache.aries.spifly.impl1.MySPIImpl1")).andReturn(cls).anyTimes();
1:         EasyMock.replay(implBundle);
1:         return implBundle;
1:     }
1: }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:f4b2805
/////////////////////////////////////////////////////////////////////////
0: import org.easymock.IExpectationSetters;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         implBC.registerService(EasyMock.anyString(),
0:                                EasyMock.anyObject(), 
1:                                (Dictionary<String,?>)EasyMock.anyObject());
1:         EasyMock.expectLastCall().andAnswer(new IAnswer<ServiceRegistration<Object>>() {
0:             @Override
1:             public ServiceRegistration<Object> answer() throws Throwable {
0:                 final String className = (String) EasyMock.getCurrentArguments()[0];
0:                 final Object serviceObject = EasyMock.getCurrentArguments()[1];
0:                 final Dictionary<String, Object> registrationProps =
0:                     (Dictionary<String, Object>) EasyMock.getCurrentArguments()[2];
0:                 return new ServiceRegistrationImpl(className, serviceObject, registrationProps);
0:             }
0:         }).anyTimes();
1:         implBC.getService(EasyMock.anyObject(ServiceReference.class));
1:         EasyMock.expectLastCall().
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:8dc9594
/////////////////////////////////////////////////////////////////////////
0:             andAnswer(new IAnswer<ServiceRegistration<?>>() {
0:                 public ServiceRegistration<?> answer() throws Throwable {
/////////////////////////////////////////////////////////////////////////
1:     private static class ServiceRegistrationImpl implements ServiceRegistration<Object>, ServiceReference {
/////////////////////////////////////////////////////////////////////////
1:         public ServiceReference<Object> getReference() {
1:         public void setProperties(Dictionary<String, ?> properties) {
============================================================================