1:391a1aa: /*
1:391a1aa:  * Licensed under the Apache License, Version 2.0 (the "License");
1:391a1aa:  * you may not use this file except in compliance with the License.
1:391a1aa:  * You may obtain a copy of the License at
1:391a1aa:  *
1:391a1aa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:391a1aa:  *
1:391a1aa:  * Unless required by applicable law or agreed to in writing, software
1:391a1aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:391a1aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:391a1aa:  * See the License for the specific language governing permissions and
1:391a1aa:  * limitations under the License.
1:391a1aa:  */
1:391a1aa: package org.apache.aries.subsystem.core.archive;
1:391a1aa: 
1:391a1aa: public class ReferenceDirective extends AbstractDirective {
1:391a1aa: 	public static final String NAME = "reference";
1:391a1aa: 	public static final String VALUE_FALSE = Boolean.FALSE.toString();
1:391a1aa: 	public static final String VALUE_TRUE = Boolean.TRUE.toString();
1:391a1aa: 	
1:391a1aa: 	public static final ReferenceDirective FALSE = new ReferenceDirective(VALUE_FALSE);
1:391a1aa: 	public static final ReferenceDirective TRUE = new ReferenceDirective(VALUE_TRUE);
1:391a1aa: 	
1:391a1aa: 	
1:391a1aa: 	public ReferenceDirective() {
1:391a1aa: 		this(VALUE_TRUE);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	public static ReferenceDirective getInstance(String value) {
1:391a1aa: 		if (VALUE_TRUE.equals(value))
1:391a1aa: 			return TRUE;
1:391a1aa: 		if (VALUE_FALSE.equals(value))
1:391a1aa: 			return FALSE;
1:2ffcfb9:         throw new IllegalArgumentException("Invalid " + NAME + " directive: " + value);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private ReferenceDirective(String value) {
1:391a1aa: 		super(NAME, value);
1:391a1aa: 	}
1:391a1aa: 
1:391a1aa: 	public boolean isReferenced() {
1:391a1aa: 		return TRUE == this || VALUE_TRUE.equals(getValue());
1:391a1aa: 	}
1:391a1aa: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1:         throw new IllegalArgumentException("Invalid " + NAME + " directive: " + value);
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: public class ReferenceDirective extends AbstractDirective {
1: 	public static final String NAME = "reference";
1: 	public static final String VALUE_FALSE = Boolean.FALSE.toString();
1: 	public static final String VALUE_TRUE = Boolean.TRUE.toString();
1: 	
1: 	public static final ReferenceDirective FALSE = new ReferenceDirective(VALUE_FALSE);
1: 	public static final ReferenceDirective TRUE = new ReferenceDirective(VALUE_TRUE);
1: 	
1: 	
1: 	public ReferenceDirective() {
1: 		this(VALUE_TRUE);
1: 	}
1: 	
1: 	public static ReferenceDirective getInstance(String value) {
1: 		if (VALUE_TRUE.equals(value))
1: 			return TRUE;
1: 		if (VALUE_FALSE.equals(value))
1: 			return FALSE;
0: 		else
0: 			throw new IllegalArgumentException("Invalid " + NAME + " directive: " + value);
1: 	}
1: 	
1: 	private ReferenceDirective(String value) {
1: 		super(NAME, value);
1: 	}
1: 
1: 	public boolean isReferenced() {
1: 		return TRUE == this || VALUE_TRUE.equals(getValue());
1: 	}
1: }
============================================================================