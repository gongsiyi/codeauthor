1:48dd690: /*
1:48dd690:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:48dd690:  * contributor license agreements.  See the NOTICE file distributed with
1:48dd690:  * this work for additional information regarding copyright ownership.
1:48dd690:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:48dd690:  * (the "License"); you may not use this file except in compliance with
1:48dd690:  * the License.  You may obtain a copy of the License at
1:48dd690:  *
1:48dd690:  *     http://www.apache.org/licenses/LICENSE-2.0
1:48dd690:  *
1:48dd690:  *  Unless required by applicable law or agreed to in writing, software
1:48dd690:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:48dd690:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48dd690:  *  See the License for the specific language governing permissions and
1:48dd690:  *  limitations under the License.
1:48dd690:  */
1:48dd690: package org.apache.aries.blueprint.container;
1:48dd690: 
1:48dd690: import java.util.concurrent.Executors;
1:48dd690: import java.util.concurrent.ThreadFactory;
1:48dd690: import java.util.concurrent.atomic.AtomicInteger;
1:48dd690: 
1:48dd690: public class BlueprintThreadFactory implements ThreadFactory {
1:48dd690:     private final ThreadFactory factory = Executors.defaultThreadFactory();
1:48dd690:     private final AtomicInteger count = new AtomicInteger();
1:48dd690:     private final String name;
1:48dd690:         
1:48dd690:     public BlueprintThreadFactory(String name) {
1:48dd690:         this.name = name;
1:48dd690:     }
1:48dd690: 
1:48dd690:     public Thread newThread(Runnable r) {
1:48dd690:         final Thread t = factory.newThread(r);
1:48dd690:         t.setName(name + ": " + count.incrementAndGet());
1:48dd690:         t.setDaemon(true);
1:48dd690:         return t;
1:48dd690:     }
1:48dd690: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:48dd690
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.container;
1: 
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: public class BlueprintThreadFactory implements ThreadFactory {
1:     private final ThreadFactory factory = Executors.defaultThreadFactory();
1:     private final AtomicInteger count = new AtomicInteger();
1:     private final String name;
1:         
1:     public BlueprintThreadFactory(String name) {
1:         this.name = name;
1:     }
1: 
1:     public Thread newThread(Runnable r) {
1:         final Thread t = factory.newThread(r);
1:         t.setName(name + ": " + count.incrementAndGet());
1:         t.setDaemon(true);
1:         return t;
1:     }
1: }
============================================================================