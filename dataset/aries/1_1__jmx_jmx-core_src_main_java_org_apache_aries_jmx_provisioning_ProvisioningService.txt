1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.provisioning;
1:fdf3952: 
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.io.InputStream;
1:fdf3952: import java.net.URL;
1:fdf3952: import java.util.Collection;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.zip.ZipInputStream;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.osgi.jmx.service.provisioning.ProvisioningServiceMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * Implementation of <code>ProvisioningServiceMBean</code> 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ProvisioningService implements ProvisioningServiceMBean {
1:fdf3952: 
1:fdf3952:     private org.osgi.service.provisioning.ProvisioningService provisioningService;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Constructs new ProvisioningService instance
1:fdf3952:      * @param provisioningService instance of org.osgi.service.provisioning.ProvisioningService service
1:fdf3952:      */
1:fdf3952:     public ProvisioningService(org.osgi.service.provisioning.ProvisioningService provisioningService){
1:fdf3952:         this.provisioningService = provisioningService;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformationFromZip(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void addInformationFromZip(String zipURL) throws IOException {
1:fdf3952:         if (zipURL == null || zipURL.length() < 1) {
1:fdf3952:             throw new IOException("Argument zipURL cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         InputStream is = createStream(zipURL);
1:fdf3952:         ZipInputStream zis = new ZipInputStream(is);
1:fdf3952:         try {
1:fdf3952:             provisioningService.addInformation(zis);
1:fdf3952:         } finally {
1:fdf3952:             zis.close();
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformation(javax.management.openmbean.TabularData)
1:fdf3952:      */
1:fdf3952:     public void addInformation(TabularData info) throws IOException {
1:fdf3952:         Dictionary<String, Object> provisioningInfo = extractProvisioningDictionary(info);
1:fdf3952:         provisioningService.addInformation(provisioningInfo);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#listInformation()
1:fdf3952:      */
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public TabularData listInformation() throws IOException {
1:fdf3952:         TabularData propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
1:fdf3952:         Dictionary<String, Object> information = (Dictionary<String, Object>) provisioningService.getInformation();
1:fdf3952:         if (information != null) {
1:fdf3952:             Enumeration<String> keys = information.keys();
1:fdf3952:             while (keys.hasMoreElements()) {
1:fdf3952:                 String key = keys.nextElement();
1:fdf3952:                 propertiesTable.put(PropertyData.newInstance(key, information.get(key)).toCompositeData());
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return propertiesTable;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#setInformation(javax.management.openmbean.TabularData)
1:fdf3952:      */
1:fdf3952:     public void setInformation(TabularData info) throws IOException {
1:fdf3952:         Dictionary<String, Object> provisioningInfo = extractProvisioningDictionary(info);
1:fdf3952:         provisioningService.setInformation(provisioningInfo);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     protected Dictionary<String, Object> extractProvisioningDictionary(TabularData info) {
1:fdf3952:         Dictionary<String, Object> provisioningInfo = new Hashtable<String, Object>();
1:fdf3952:         if (info != null) {
1:fdf3952:             Collection<CompositeData> compositeData = (Collection<CompositeData>) info.values();
1:fdf3952:             for (CompositeData row: compositeData) {
1:fdf3952:                 PropertyData<? extends Class> propertyData = PropertyData.from(row);
1:fdf3952:                 provisioningInfo.put(propertyData.getKey(), propertyData.getValue());
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return provisioningInfo;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected InputStream createStream(String url) throws IOException {
1:fdf3952:         return new URL(url).openStream();
1:fdf3952:     }
1:fdf3952:     
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.provisioning;
1: 
1: import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import java.util.zip.ZipInputStream;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.osgi.jmx.service.provisioning.ProvisioningServiceMBean;
1: 
1: /**
1:  * Implementation of <code>ProvisioningServiceMBean</code> 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ProvisioningService implements ProvisioningServiceMBean {
1: 
1:     private org.osgi.service.provisioning.ProvisioningService provisioningService;
1:     
1:     /**
1:      * Constructs new ProvisioningService instance
1:      * @param provisioningService instance of org.osgi.service.provisioning.ProvisioningService service
1:      */
1:     public ProvisioningService(org.osgi.service.provisioning.ProvisioningService provisioningService){
1:         this.provisioningService = provisioningService;
1:     }
1:     
1:     /**
1:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformationFromZip(java.lang.String)
1:      */
1:     public void addInformationFromZip(String zipURL) throws IOException {
1:         if (zipURL == null || zipURL.length() < 1) {
1:             throw new IOException("Argument zipURL cannot be null or empty");
1:         }
1:         InputStream is = createStream(zipURL);
1:         ZipInputStream zis = new ZipInputStream(is);
1:         try {
1:             provisioningService.addInformation(zis);
1:         } finally {
1:             zis.close();
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#addInformation(javax.management.openmbean.TabularData)
1:      */
1:     public void addInformation(TabularData info) throws IOException {
1:         Dictionary<String, Object> provisioningInfo = extractProvisioningDictionary(info);
1:         provisioningService.addInformation(provisioningInfo);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#listInformation()
1:      */
1:     @SuppressWarnings("unchecked")
1:     public TabularData listInformation() throws IOException {
1:         TabularData propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
1:         Dictionary<String, Object> information = (Dictionary<String, Object>) provisioningService.getInformation();
1:         if (information != null) {
1:             Enumeration<String> keys = information.keys();
1:             while (keys.hasMoreElements()) {
1:                 String key = keys.nextElement();
1:                 propertiesTable.put(PropertyData.newInstance(key, information.get(key)).toCompositeData());
1:             }
1:         }
1:         return propertiesTable;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.provisioning.ProvisioningServiceMBean#setInformation(javax.management.openmbean.TabularData)
1:      */
1:     public void setInformation(TabularData info) throws IOException {
1:         Dictionary<String, Object> provisioningInfo = extractProvisioningDictionary(info);
1:         provisioningService.setInformation(provisioningInfo);
1:     }
1:     
1:     
1:     @SuppressWarnings("unchecked")
1:     protected Dictionary<String, Object> extractProvisioningDictionary(TabularData info) {
1:         Dictionary<String, Object> provisioningInfo = new Hashtable<String, Object>();
1:         if (info != null) {
1:             Collection<CompositeData> compositeData = (Collection<CompositeData>) info.values();
1:             for (CompositeData row: compositeData) {
1:                 PropertyData<? extends Class> propertyData = PropertyData.from(row);
1:                 provisioningInfo.put(propertyData.getKey(), propertyData.getValue());
1:             }
1:         }
1:         return provisioningInfo;
1:     }
1: 
1:     protected InputStream createStream(String url) throws IOException {
1:         return new URL(url).openStream();
1:     }
1:     
1: }
============================================================================