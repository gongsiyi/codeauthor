1:efb3993: /*
1:efb3993:  * Licensed to the Apache Software Foundation (ASF) under one
1:efb3993:  * or more contributor license agreements.  See the NOTICE file
1:efb3993:  * distributed with this work for additional information
1:efb3993:  * regarding copyright ownership.  The ASF licenses this file
1:efb3993:  * to you under the Apache License, Version 2.0 (the
1:efb3993:  * "License"); you may not use this file except in compliance
1:efb3993:  * with the License.  You may obtain a copy of the License at
1:efb3993:  *
1:efb3993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:efb3993:  *
1:efb3993:  * Unless required by applicable law or agreed to in writing,
1:efb3993:  * software distributed under the License is distributed on an
1:efb3993:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:efb3993:  * KIND, either express or implied.  See the License for the
1:efb3993:  * specific language governing permissions and limitations
1:efb3993:  * under the License.
1:efb3993:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import static org.mockito.Mockito.anyMapOf;
1:7c388cb: import static org.mockito.Mockito.never;
1:7c388cb: import static org.mockito.Mockito.times;
1:7c388cb: 
1:7c388cb: import java.util.Hashtable;
1:7c388cb: import java.util.Map;
1:7c388cb: 
1:7c388cb: import org.junit.Test;
1:7c388cb: import org.junit.runner.RunWith;
1:7c388cb: import org.mockito.Mock;
1:7c388cb: import org.mockito.Mockito;
1:7c388cb: import org.mockito.runners.MockitoJUnitRunner;
1:7c388cb: import org.osgi.framework.BundleContext;
1:7c388cb: 
1:7c388cb: @RunWith(MockitoJUnitRunner.class)
1:7c388cb: public class ConfigurationDefinedResourceFactoryTest {
1:7c388cb: 
1:7c388cb: 	private final class ConfigurationDefinedResourceFactoryExtension extends ConfigurationDefinedResourceFactory {
1:7c388cb: 		private ConfigurationDefinedResourceFactoryExtension(BundleContext context) {
1:7c388cb: 			super(context);
1:7c388cb: 		}
1:7c388cb: 
1:7c388cb: 		@Override
1:7c388cb: 		public String getName() {
1:7c388cb: 			return "Test";
1:7c388cb: 		}
1:7c388cb: 
1:7c388cb: 		@Override
1:7c388cb: 		protected LifecycleAware getConfigurationDrivenResource(BundleContext context, String pid,
1:7c388cb: 				Map<String, Object> properties) throws Exception {
1:7c388cb: 			switch(pid) {
1:7c388cb: 				case "a": return resourceA;
1:7c388cb: 				case "b": return resourceB;
1:7c388cb: 				default: throw new IllegalArgumentException(pid);
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Mock
1:7c388cb: 	BundleContext ctx;
1:7c388cb: 	
1:7c388cb: 	@Mock
1:7c388cb: 	LifecycleAware resourceA;
1:7c388cb: 	
1:7c388cb: 	@Mock
1:7c388cb: 	LifecycleAware resourceB;
1:7c388cb: 	
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleStop() throws Exception {
1:7c388cb: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1:7c388cb: 		
1:7c388cb: 		cdrf.updated("a", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceA).start();
1:7c388cb: 		
1:7c388cb: 		cdrf.stop();
1:7c388cb: 		Mockito.verify(resourceA).stop();
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleDelete() throws Exception {
1:7c388cb: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1:7c388cb: 		
1:7c388cb: 		cdrf.updated("a", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceA).start();
1:7c388cb: 		
1:7c388cb: 		cdrf.deleted("a");
1:7c388cb: 		
1:7c388cb: 		Mockito.verify(resourceA).stop();
1:7c388cb: 		
1:7c388cb: 		cdrf.stop();
1:7c388cb: 		Mockito.verify(resourceA).stop();
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Test
1:7c388cb: 	public void testLifecycleUpdate() throws Exception {
1:7c388cb: 		
1:7c388cb: 		Mockito.when(resourceB.update(anyMapOf(String.class, Object.class))).thenReturn(true);
1:7c388cb: 		
1:7c388cb: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1:7c388cb: 		
1:7c388cb: 		cdrf.updated("a", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceA).start();
1:7c388cb: 		cdrf.updated("b", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceB).start();
1:7c388cb: 		
1:7c388cb: 		cdrf.updated("a", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceA).stop();
1:7c388cb: 		Mockito.verify(resourceA, times(2)).start();
1:7c388cb: 		
1:7c388cb: 		cdrf.updated("b", new Hashtable<>());
1:7c388cb: 		Mockito.verify(resourceB, never()).stop();
1:7c388cb: 
1:7c388cb: 		
1:7c388cb: 		cdrf.stop();
1:7c388cb: 		Mockito.verify(resourceA, times(2)).stop();
1:7c388cb: 		Mockito.verify(resourceB).stop();
1:7c388cb: 	}
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import static org.mockito.Mockito.anyMapOf;
1: import static org.mockito.Mockito.never;
1: import static org.mockito.Mockito.times;
1: 
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
1: import org.osgi.framework.BundleContext;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class ConfigurationDefinedResourceFactoryTest {
1: 
1: 	private final class ConfigurationDefinedResourceFactoryExtension extends ConfigurationDefinedResourceFactory {
1: 		private ConfigurationDefinedResourceFactoryExtension(BundleContext context) {
1: 			super(context);
1: 		}
1: 
1: 		@Override
1: 		public String getName() {
1: 			return "Test";
1: 		}
1: 
1: 		@Override
1: 		protected LifecycleAware getConfigurationDrivenResource(BundleContext context, String pid,
1: 				Map<String, Object> properties) throws Exception {
1: 			switch(pid) {
1: 				case "a": return resourceA;
1: 				case "b": return resourceB;
1: 				default: throw new IllegalArgumentException(pid);
1: 			}
1: 		}
1: 	}
1: 
1: 	@Mock
1: 	BundleContext ctx;
1: 	
1: 	@Mock
1: 	LifecycleAware resourceA;
1: 	
1: 	@Mock
1: 	LifecycleAware resourceB;
1: 	
1: 	@Test
1: 	public void testLifecycleStop() throws Exception {
1: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1: 		
1: 		cdrf.updated("a", new Hashtable<>());
1: 		Mockito.verify(resourceA).start();
1: 		
1: 		cdrf.stop();
1: 		Mockito.verify(resourceA).stop();
1: 	}
1: 	
1: 	@Test
1: 	public void testLifecycleDelete() throws Exception {
1: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1: 		
1: 		cdrf.updated("a", new Hashtable<>());
1: 		Mockito.verify(resourceA).start();
1: 		
1: 		cdrf.deleted("a");
1: 		
1: 		Mockito.verify(resourceA).stop();
1: 		
1: 		cdrf.stop();
1: 		Mockito.verify(resourceA).stop();
1: 	}
1: 
1: 	@Test
1: 	public void testLifecycleUpdate() throws Exception {
1: 		
1: 		Mockito.when(resourceB.update(anyMapOf(String.class, Object.class))).thenReturn(true);
1: 		
1: 		ConfigurationDefinedResourceFactory cdrf = new ConfigurationDefinedResourceFactoryExtension(ctx);
1: 		
1: 		cdrf.updated("a", new Hashtable<>());
1: 		Mockito.verify(resourceA).start();
1: 		cdrf.updated("b", new Hashtable<>());
1: 		Mockito.verify(resourceB).start();
1: 		
1: 		cdrf.updated("a", new Hashtable<>());
1: 		Mockito.verify(resourceA).stop();
1: 		Mockito.verify(resourceA, times(2)).start();
1: 		
1: 		cdrf.updated("b", new Hashtable<>());
1: 		Mockito.verify(resourceB, never()).stop();
1: 
1: 		
1: 		cdrf.stop();
1: 		Mockito.verify(resourceA, times(2)).stop();
1: 		Mockito.verify(resourceB).stop();
1: 	}
1: }
============================================================================