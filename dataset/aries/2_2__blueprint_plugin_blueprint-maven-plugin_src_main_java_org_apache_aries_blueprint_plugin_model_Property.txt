2:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:d22e134:  * <p/>
1:d22e134:  * http://www.apache.org/licenses/LICENSE-2.0
1:d22e134:  * <p/>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
2:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin.model;
1:46cfc09: 
1:c201f83: import org.apache.aries.blueprint.plugin.Extensions;
1:868c96f: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1:46cfc09: 
1:868c96f: import java.lang.annotation.Annotation;
1:d22e134: import java.lang.reflect.AnnotatedElement;
1:46cfc09: import java.lang.reflect.Field;
1:d22e134: import java.lang.reflect.Method;
1:46cfc09: 
1:fc7ae19: import static org.apache.aries.blueprint.plugin.model.AnnotationHelper.findName;
1:46cfc09: 
1:46cfc09: public class Property implements Comparable<Property> {
1:9632b7d:     public final String name;
1:9632b7d:     public final String ref;
1:9632b7d:     public final String value;
1:9632b7d:     public final boolean isField;
1:46cfc09: 
1:9632b7d:     public Property(String name, String ref, String value, boolean isField) {
1:46cfc09:         this.name = name;
1:46cfc09:         this.ref = ref;
1:46cfc09:         this.value = value;
1:9632b7d:         this.isField = isField;
1:0b1a9fb:     }
1:46cfc09: 
1:a2ed671:     public static Property create(BlueprintRegister blueprintRegister, Field field) {
1:46cfc09:         if (needsInject(field)) {
1:c201f83:             String value = AnnotationHelper.findValue(field.getAnnotations());
1:c201f83:             if (value != null) {
1:c201f83:                 return new Property(field.getName(), null, value, true);
1:0b1a9fb:             }
1:868c96f:             String ref = getForcedRefName(field);
1:868c96f:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:868c96f:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(field.getAnnotations(), customDependencyAnnotationHandler.getAnnotation());
1:868c96f:                 if (annotation != null) {
1:a2ed671:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(field, ref, blueprintRegister);
1:868c96f:                     if (generatedRef != null) {
1:868c96f:                         ref = generatedRef;
1:868c96f:                         break;
1:46cfc09:                     }
1:868c96f:                 }
1:868c96f:             }
1:868c96f:             if (ref != null) {
1:868c96f:                 return new Property(field.getName(), ref, null, true);
1:868c96f:             }
1:a2ed671:             BeanRef matching = blueprintRegister.getMatching(new BeanRef(field));
1:868c96f:             ref = (matching == null) ? getDefaultRefName(field) : matching.id;
1:9632b7d:             return new Property(field.getName(), ref, null, true);
1:46cfc09:         } else {
1:46cfc09:             // Field is not a property
1:46cfc09:             return null;
1:46cfc09:         }
1:46cfc09:     }
1:46cfc09: 
1:a2ed671:     public static Property create(BlueprintRegister blueprintRegister, Method method) {
1:d22e134:         String propertyName = resolveProperty(method);
1:d22e134:         if (propertyName == null) {
1:868c96f:             return null;
1:868c96f:         }
1:fc7ae19: 
1:c201f83:         String value = AnnotationHelper.findValue(method.getAnnotations());
1:d22e134:         if (value != null) {
1:c201f83:             return new Property(propertyName, null, value, false);
1:868c96f:         }
1:868c96f: 
1:d22e134:         if (needsInject(method)) {
1:868c96f:             String ref = getForcedRefName(method);
1:868c96f:             if (ref == null) {
1:fc7ae19:                 ref = findName(method.getParameterAnnotations()[0]);
1:868c96f:             }
1:868c96f:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:868c96f:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(method.getAnnotations(), customDependencyAnnotationHandler.getAnnotation());
1:868c96f:                 if (annotation != null) {
1:a2ed671:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method, ref, blueprintRegister);
1:868c96f:                     if (generatedRef != null) {
1:868c96f:                         ref = generatedRef;
1:868c96f:                         break;
1:868c96f:                     }
1:868c96f:                 }
1:868c96f:             }
1:868c96f:             if (ref != null) {
1:868c96f:                 return new Property(propertyName, ref, null, false);
1:868c96f:             }
1:868c96f: 
1:868c96f:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:868c96f:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(method.getParameterAnnotations()[0], customDependencyAnnotationHandler.getAnnotation());
1:868c96f:                 if (annotation != null) {
1:a2ed671:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method.getParameterTypes()[0], annotation, ref, blueprintRegister);
1:868c96f:                     if (generatedRef != null) {
1:868c96f:                         ref = generatedRef;
1:868c96f:                         break;
1:868c96f:                     }
1:868c96f:                 }
1:868c96f:             }
1:868c96f:             if (ref != null) {
1:868c96f:                 return new Property(propertyName, ref, null, false);
1:868c96f:             }
1:868c96f: 
1:d22e134:             BeanRef beanRef = new BeanRef(method);
1:a2ed671:             BeanRef matching = blueprintRegister.getMatching(beanRef);
1:868c96f:             ref = (matching == null) ? beanRef.id : matching.id;
1:9632b7d:             return new Property(propertyName, ref, null, false);
1:868c96f:         }
1:868c96f: 
2:d22e134:         return null;
1:c201f83:     }
1:d22e134: 
1:d22e134:     private static String resolveProperty(Method method) {
1:d22e134:         if (method.getParameterTypes().length != 1) {
1:d22e134:             return null;
1:c201f83:         }
1:d22e134:         String propertyName = method.getName().substring(3);
1:d22e134:         return makeFirstLetterLower(propertyName);
1:c201f83:     }
5:d22e134: 
1:46cfc09:     /**
1:46cfc09:      * Assume it is defined in another manually created blueprint context with default name
3:46cfc09:      *
1:46cfc09:      * @param field
2:46cfc09:      * @return
1:46cfc09:      */
1:868c96f:     private static String getDefaultRefName(Field field) {
1:0b1a9fb:         return Bean.getBeanName(field.getType());
1:46cfc09:     }
1:46cfc09: 
1:868c96f:     private static String getForcedRefName(Field field) {
1:868c96f:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:c201f83:             if (field.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:c201f83:                 String name = namedLikeHandler.getName(field.getType(), field);
1:868c96f:                 if (name != null) {
1:868c96f:                     return name;
1:46cfc09:                 }
1:46cfc09:             }
1:868c96f:         }
1:868c96f:         return null;
1:868c96f:     }
1:46cfc09: 
1:868c96f:     private static String getForcedRefName(Method method) {
1:868c96f:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:868c96f:             if (method.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:868c96f:                 String name = namedLikeHandler.getName(method.getParameterTypes()[0], method);
1:868c96f:                 if (name != null) {
1:868c96f:                     return name;
1:868c96f:                 }
1:868c96f:             }
1:868c96f:         }
1:868c96f:         return null;
1:868c96f:     }
1:46cfc09: 
1:d22e134:     private static boolean needsInject(AnnotatedElement annotatedElement) {
1:c201f83:         for (Class injectDependencyAnnotation : AnnotationHelper.injectDependencyAnnotations) {
1:c201f83:             if (annotatedElement.getAnnotation(injectDependencyAnnotation) != null) {
1:c201f83:                 return true;
1:868c96f:             }
1:c201f83:         }
1:c201f83:         return false;
1:c201f83:     }
1:868c96f: 
1:46cfc09:     @Override
1:46cfc09:     public int compareTo(Property other) {
1:46cfc09:         return name.compareTo(other.name);
1:46cfc09:     }
1:46cfc09: 
1:d22e134:     private static String makeFirstLetterLower(String name) {
1:d22e134:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
1:46cfc09:     }
6:d22e134: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
0:             return named.value();
0:             return qualifier.value();
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
0:             BeanRef matching = matcher.getMatching(new BeanRef(field));
commit:0b1a9fb
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.beans.factory.annotation.Qualifier;
/////////////////////////////////////////////////////////////////////////
0:         if (named != null) {
0:         	return named.value();
1:         }
0:     	Qualifier qualifier = field.getAnnotation(Qualifier.class);
0:         if (qualifier != null) {
0:         	return qualifier.value();
1:         }
1:         return Bean.getBeanName(field.getType());
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
1: 
1: import java.lang.reflect.Field;
1: 
0: import javax.inject.Inject;
0: import javax.inject.Named;
1: 
0: import org.springframework.beans.factory.annotation.Autowired;
0: import org.springframework.beans.factory.annotation.Value;
1: 
1: public class Property implements Comparable<Property> {
0:     public String name;
0:     public String ref;
0:     public String value;
1: 
0:     public Property(String name, String ref, String value) {
1:         this.name = name;
1:         this.ref = ref;
1:         this.value = value;
1:     }
1: 
0:     public static Property create(Matcher matcher, Field field) {
0:         Value value = field.getAnnotation(Value.class);
1:         if (needsInject(field)) {
0:             Bean matching = matcher.getMatching(field);
0:             String ref = (matching == null) ? getRefName(field) : matching.id;
0:             return new Property(field.getName(), ref, null);
0:         } else if (value != null){
0:             return new Property(field.getName(), null, cleanValue(value.value()));
1:         } else {
1:             // Field is not a property
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * Assume it is defined in another manually created blueprint context with default name
1:      * @param field
1:      * @return
1:      */
0:     private static String getRefName(Field field) {
0:         Named named = field.getAnnotation(Named.class);
0:         return (named != null) ? named.value() : Bean.getBeanName(field.getType());
1:     }
1: 
0:     private static boolean needsInject(Field field) {
0:         return field.getAnnotation(Autowired.class) != null || field.getAnnotation(Inject.class) != null;
1:     }
1: 
1:     /**
0:      * Remove default value definition
1:      * 
0:      * @param value
1:      * @return
1:      */
0:     private static String cleanValue(String value) {
0:         return value.replaceAll("\\:.*\\}", "}");
1:     }
1: 
1:     @Override
1:     public int compareTo(Property other) {
1:         return name.compareTo(other.name);
1:     }
1: 
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:fc7ae19
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.plugin.model.AnnotationHelper.findName;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 ref = findName(method.getParameterAnnotations()[0]);
/////////////////////////////////////////////////////////////////////////
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1:     public static Property create(BlueprintRegister blueprintRegister, Field field) {
/////////////////////////////////////////////////////////////////////////
1:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(field, ref, blueprintRegister);
/////////////////////////////////////////////////////////////////////////
1:             BeanRef matching = blueprintRegister.getMatching(new BeanRef(field));
/////////////////////////////////////////////////////////////////////////
1:     public static Property create(BlueprintRegister blueprintRegister, Method method) {
/////////////////////////////////////////////////////////////////////////
1:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method, ref, blueprintRegister);
/////////////////////////////////////////////////////////////////////////
1:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method.getParameterTypes()[0], annotation, ref, blueprintRegister);
/////////////////////////////////////////////////////////////////////////
1:             BeanRef matching = blueprintRegister.getMatching(beanRef);
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
1: import java.lang.annotation.Annotation;
/////////////////////////////////////////////////////////////////////////
0:     public static Property create(BlueprinRegister blueprinRegister, Field field) {
1:             String ref = getForcedRefName(field);
1:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(field.getAnnotations(), customDependencyAnnotationHandler.getAnnotation());
1:                 if (annotation != null) {
0:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(field, ref, blueprinRegister);
1:                     if (generatedRef != null) {
1:                         ref = generatedRef;
1:                         break;
1:                     }
1:                 }
1:             }
1:             if (ref != null) {
1:                 return new Property(field.getName(), ref, null, true);
1:             }
0:             BeanRef matching = blueprinRegister.getMatching(new BeanRef(field));
1:             ref = (matching == null) ? getDefaultRefName(field) : matching.id;
/////////////////////////////////////////////////////////////////////////
0:     public static Property create(BlueprinRegister blueprinRegister, Method method) {
/////////////////////////////////////////////////////////////////////////
1:             String ref = getForcedRefName(method);
1:             if (ref == null) {
0:                 ref = getForcedRefName(method.getParameterAnnotations()[0]);
1:             }
1:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(method.getAnnotations(), customDependencyAnnotationHandler.getAnnotation());
1:                 if (annotation != null) {
0:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method, ref, blueprinRegister);
1:                     if (generatedRef != null) {
1:                         ref = generatedRef;
1:                         break;
1:                     }
1:                 }
1:             }
1:             if (ref != null) {
1:                 return new Property(propertyName, ref, null, false);
1:             }
1: 
1:             for (CustomDependencyAnnotationHandler customDependencyAnnotationHandler : Extensions.customDependencyAnnotationHandlers) {
1:                 Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(method.getParameterAnnotations()[0], customDependencyAnnotationHandler.getAnnotation());
1:                 if (annotation != null) {
0:                     String generatedRef = customDependencyAnnotationHandler.handleDependencyAnnotation(method.getParameterTypes()[0], annotation, ref, blueprinRegister);
1:                     if (generatedRef != null) {
1:                         ref = generatedRef;
1:                         break;
1:                     }
1:                 }
1:             }
1:             if (ref != null) {
1:                 return new Property(propertyName, ref, null, false);
1:             }
1: 
0:             BeanRef matching = blueprinRegister.getMatching(beanRef);
1:             ref = (matching == null) ? beanRef.id : matching.id;
/////////////////////////////////////////////////////////////////////////
1:     private static String getDefaultRefName(Field field) {
0:         return Bean.getBeanName(field.getType());
1:     }
1: 
1:     private static String getForcedRefName(Field field) {
/////////////////////////////////////////////////////////////////////////
1:         return null;
1:     }
1: 
1:     private static String getForcedRefName(Method method) {
1:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:             if (method.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:                 String name = namedLikeHandler.getName(method.getParameterTypes()[0], method);
1:                 if (name != null) {
1:                     return name;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
0:     private static String getForcedRefName(Annotation[] annotations) {
1:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
0:             Annotation annotation = (Annotation) AnnotationHelper.findAnnotation(annotations, namedLikeHandler.getAnnotation());
0:             if (annotation != null) {
0:                 String name = namedLikeHandler.getName(annotation);
1:                 if (name != null) {
1:                     return name;
1:                 }
1:             }
1:         }
1:         return null;
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.Extensions;
1: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
/////////////////////////////////////////////////////////////////////////
1:             String value = AnnotationHelper.findValue(field.getAnnotations());
1:             if (value != null) {
1:                 return new Property(field.getName(), null, value, true);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         String value = AnnotationHelper.findValue(method.getAnnotations());
1:             return new Property(propertyName, null, value, false);
/////////////////////////////////////////////////////////////////////////
0:      *
0:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:             if (field.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:                 String name = namedLikeHandler.getName(field.getType(), field);
0:                 if (name != null) {
0:                     return name;
1:                 }
1:             }
1:         for (Class injectDependencyAnnotation : AnnotationHelper.injectDependencyAnnotations) {
1:             if (annotatedElement.getAnnotation(injectDependencyAnnotation) != null) {
1:                 return true;
1:             }
1:         }
1:         return false;
commit:9632b7d
/////////////////////////////////////////////////////////////////////////
1:     public final String name;
1:     public final String ref;
1:     public final String value;
1:     public final boolean isField;
1:     public Property(String name, String ref, String value, boolean isField) {
1:         this.isField = isField;
/////////////////////////////////////////////////////////////////////////
1:             return new Property(field.getName(), ref, null, true);
0:             return new Property(field.getName(), null, cleanValue(value.value()), true);
/////////////////////////////////////////////////////////////////////////
0:             return new Property(propertyName, null, cleanValue(value.value()), false);
1:             return new Property(propertyName, ref, null, false);
commit:d22e134
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
0: import javax.inject.Inject;
0: import javax.inject.Named;
1: import java.lang.reflect.AnnotatedElement;
0: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: 
/////////////////////////////////////////////////////////////////////////
0:         } else if (value != null) {
/////////////////////////////////////////////////////////////////////////
0:     public static Property create(Matcher matcher, Method method) {
1:         String propertyName = resolveProperty(method);
1:         if (propertyName == null) {
1:             return null;
1:         }
1: 
0:         Value value = method.getAnnotation(Value.class);
1:         if (value != null) {
0:             return new Property(propertyName, null, cleanValue(value.value()));
1:         }
1: 
1:         if (needsInject(method)) {
1:             BeanRef beanRef = new BeanRef(method);
0:             BeanRef matching = matcher.getMatching(beanRef);
0:             String ref = (matching == null) ? beanRef.id : matching.id;
0:             return new Property(propertyName, ref, null);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     private static String resolveProperty(Method method) {
1:         if (method.getParameterTypes().length != 1) {
1:             return null;
1:         }
1:         String propertyName = method.getName().substring(3);
1:         return makeFirstLetterLower(propertyName);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         Qualifier qualifier = field.getAnnotation(Qualifier.class);
1:     private static boolean needsInject(AnnotatedElement annotatedElement) {
0:         return annotatedElement.getAnnotation(Autowired.class) != null || annotatedElement.getAnnotation(Inject.class) != null;
0:      *
/////////////////////////////////////////////////////////////////////////
1:     private static String makeFirstLetterLower(String name) {
1:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
0:     }
============================================================================