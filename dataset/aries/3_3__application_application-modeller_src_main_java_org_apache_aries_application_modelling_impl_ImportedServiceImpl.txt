1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
2:4fec049: 
1:4fec049: import static org.apache.aries.application.modelling.ResourceType.SERVICE;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Dictionary;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Hashtable;
1:4fec049: import java.util.Map;
1:4fec049: import java.util.regex.Pattern;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:4fec049: import org.apache.aries.application.modelling.ImportedService;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:4fec049: import org.apache.aries.application.modelling.Provider;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:4fec049: import org.apache.aries.application.modelling.WrappedReferenceMetadata;
1:58f55bd: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
1:4fec049: import org.apache.aries.application.utils.FilterUtils;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Filter;
1:4fec049: import org.osgi.framework.FrameworkUtil;
1:4fec049: import org.osgi.framework.InvalidSyntaxException;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: /**
1:4fec049:  * an Import-Service entry
1:4fec049:  */
1:4fec049: public class ImportedServiceImpl implements ImportedService
1:4fec049: {
1:4fec049:   private final static String DEPRECATED_FILTER_ATTRIBUTE = "filter";
1:4fec049:   private final boolean _optional;
1:4fec049:   private final String _iface;
1:4fec049:   private final String _componentName;
1:4fec049:   private final String _blueprintFilter;
1:4fec049:   private final Filter _attributeFilter;
1:4fec049:   private final boolean _isMultiple;
1:4fec049:   private final String _id;
1:4fec049:   private final Map<String, String> _attributes;
1:4fec049:   private String _toString;
1:4fec049:   private String _attribFilterString;   // The manner in which we set means it can't be final
1:4fec049:   private final static Pattern SERVICE_EQUALS_SERVICE = Pattern.compile("\\(" + ResourceType.SERVICE.toString()
1:4fec049:       + "=" + ResourceType.SERVICE.toString() + "\\)");
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(ImportedServiceImpl.class);
1:4fec049:   /**
1:4fec049:    * Build an ImportedServiceImpl from its elements
1:4fec049:    * @param optional
1:4fec049:    * @param iface
1:4fec049:    * @param componentName
1:4fec049:    * @param blueprintFilter
1:4fec049:    * @param id
1:4fec049:    * @param isMultiple
1:4fec049:    * @throws InvalidAttributeException
1:4fec049:    */
1:4fec049:   public ImportedServiceImpl (boolean optional, String iface, String componentName, 
1:4fec049:       String blueprintFilter, String id, boolean isMultiple) 
1:4fec049:     throws InvalidAttributeException 
1:4fec049:   {
1:4fec049:     
1:4fec049:     _optional = optional;
1:4fec049:     _iface = iface;
1:4fec049:     _componentName = componentName;
1:4fec049:     _blueprintFilter = FilterUtils.removeMandatoryFilterToken(blueprintFilter);
1:4fec049:     _id = id;
1:4fec049:     _isMultiple = isMultiple;
1:4fec049:     _attributes = new HashMap<String, String>();
1:4fec049:     _attributeFilter = generateAttributeFilter (_attributes);
1:4fec049:     
1:4fec049:     
1:4fec049:   }
1:4fec049: 
1:4fec049:   private Filter generateAttributeFilter (Map<String, String> attrsToPopulate) throws InvalidAttributeException {
1:4fec049:     logger.debug(LOG_ENTRY, "generateAttributeFilter", new Object[]{attrsToPopulate});
1:4fec049:     Filter result = null;
1:4fec049:     
1:4fec049:     try {
1:4fec049:       attrsToPopulate.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:4fec049:       if (_blueprintFilter != null) { 
1:4fec049:         // We may get blueprint filters of the form (&(a=b)(c=d)). We can't put these in 'whole' because we'll 
1:4fec049:         // end up generating a filter of the form (&(objectClass=foo)(&(a=b)(c=d)) which subsequent calls to 
1:4fec049:         // parseFilter will choke on. So as an interim fix we'll strip off a leading &( and trailing ) if present. 
1:4fec049:         String reducedBlueprintFilter;
1:4fec049:         if (_blueprintFilter.startsWith("(&")) { 
1:4fec049:           reducedBlueprintFilter = _blueprintFilter.substring(2, _blueprintFilter.length() - 1);
1:4fec049:         } else { 
1:4fec049:           reducedBlueprintFilter = _blueprintFilter;
1:4fec049:         }
1:4fec049:         
1:4fec049:         attrsToPopulate.put(ManifestHeaderProcessor.NESTED_FILTER_ATTRIBUTE, reducedBlueprintFilter);
1:4fec049:       }
1:4fec049:       if (_componentName != null) { 
1:4fec049:         attrsToPopulate.put ("osgi.service.blueprint.compname", _componentName);
1:4fec049:       }
1:4fec049:       if (_iface != null) { 
1:4fec049:         attrsToPopulate.put (Constants.OBJECTCLASS, _iface);
1:4fec049:       }
1:4fec049:       _attribFilterString = ManifestHeaderProcessor.generateFilter(_attributes);
1:4fec049:       if (! "".equals(_attribFilterString)) { 
1:4fec049:         result = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_attribFilterString));
1:4fec049:       } 
1:4fec049:     } catch (InvalidSyntaxException isx) { 
1:ad65b90:       InvalidAttributeException iax = new InvalidAttributeException(
1:ad65b90:     		  "A syntax error occurred attempting to parse the blueprint filter string '" 
1:ad65b90:     		  + _blueprintFilter + "' for element with id " + _id + ": " 
1:ad65b90:     		  + isx.getLocalizedMessage(), isx);
1:4fec049:       logger.debug(LOG_EXIT, "generateAttributeFilter", new Object[]{isx});
1:4fec049:       throw iax;
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "generateAttributeFilter", new Object[]{result});
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /** 
1:4fec049:    * Deprecated constructor for building these from deprecated Export-Service manifest headers. Do not use this 
1:4fec049:    * constructor for any other purpose. 
1:4fec049:    * @param ifaceName
1:4fec049:    * @param attributes
1:4fec049:    * @throws InvalidAttributeException 
1:4fec049:    */
1:4fec049:   @Deprecated
1:4fec049:   public ImportedServiceImpl (String ifaceName, Map<String, String> attributes) throws InvalidAttributeException {
1:4fec049:     
1:08df2a2:     _optional = ("optional".equals(attributes.get("availability:")));
1:4fec049:     _iface = ifaceName;
1:4fec049:     _isMultiple = false;
1:4fec049:     _componentName = null;
1:4fec049:     _id = null;
1:4fec049:     _attributes = new HashMap<String, String>(attributes);
1:4fec049:     
1:4fec049:     // The syntax for this deprecated header allows statements of the form, 
1:4fec049:     // ImportService: myService;filter="(a=b")
1:4fec049:     _blueprintFilter = _attributes.remove(DEPRECATED_FILTER_ATTRIBUTE);
1:4fec049:     _attributeFilter = generateAttributeFilter (_attributes);
1:4fec049:     
1:4fec049:     
1:4fec049:   }
1:4fec049: 
1:4fec049:   public String getFilter() {
1:4fec049:     logger.debug(LOG_ENTRY, "getFilter");
1:4fec049:     logger.debug(LOG_EXIT, "getFilter", _blueprintFilter);
1:4fec049:     return _blueprintFilter;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public ResourceType getType() {
1:4fec049:     logger.debug(LOG_ENTRY, "getType");
1:4fec049:     logger.debug(LOG_EXIT, "getType",  ResourceType.SERVICE);
1:4fec049:     return ResourceType.SERVICE;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:  public boolean isMultiple() {
1:4fec049:    logger.debug(LOG_ENTRY, "isMultiple");
1:4fec049:    logger.debug(LOG_EXIT, "isMultiple",  _isMultiple);
1:4fec049:     return _isMultiple;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isOptional() {
1:4fec049:     logger.debug(LOG_ENTRY, "isOptional");
1:4fec049:     logger.debug(LOG_EXIT, "isOptional",  _optional);
1:4fec049:     return _optional;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isSatisfied(Provider capability) {
1:4fec049:     logger.debug(LOG_ENTRY, "isSatisfied", capability);
1:4fec049:     
1:4fec049:     if (capability.getType() != SERVICE) { 
1:4fec049:       logger.debug(LOG_EXIT, "isSatisfied",  false);
1:4fec049:       return false;
1:4fec049:     }
1:4fec049:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:4fec049:     
1:4fec049:     // If there's a value for ObjectClass, it may be a comma separated list.
1:4fec049:     String objectClass = (String) dict.get(Constants.OBJECTCLASS);
1:4fec049:     if (objectClass != null) { 
1:4fec049:       String [] split = objectClass.split (",");
1:4fec049:       dict.put (Constants.OBJECTCLASS, split);
1:4fec049:     }
1:4fec049:     
1:4fec049:     if (_attributeFilter == null) { 
1:4fec049:       logger.debug(LOG_EXIT, "isSatisfied",  true);
1:4fec049:       return true;
1:4fec049:     }
1:58f55bd:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
1:4fec049:     boolean result = allPresent && _attributeFilter.match(dict);
1:4fec049:     logger.debug(LOG_EXIT, "isSatisfied",  result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049:   
1:4fec049:   public String getComponentName() {
1:4fec049:     logger.debug(LOG_ENTRY, "getComponentName");
1:4fec049:     logger.debug(LOG_EXIT, "getComponentName",  _componentName);
1:4fec049:     return _componentName;
1:4fec049:   }
1:4fec049: 
1:4fec049:   
1:4fec049:   public String getId() {
1:4fec049:     logger.debug(LOG_ENTRY, "getId");
1:4fec049:     logger.debug(LOG_EXIT, "getId",  _id);
1:4fec049:     return _id;
1:4fec049:   }
1:4fec049: 
1:4fec049:   
1:4fec049:   public String getInterface() {
1:4fec049:     logger.debug(LOG_ENTRY, "getInterface");
1:4fec049:     logger.debug(LOG_EXIT, "getInterface",  _iface);
1:4fec049:    return _iface;
1:4fec049:   }
1:4fec049: 
1:4fec049:   public boolean isList() {
1:4fec049:     logger.debug(LOG_ENTRY, "isList");    
1:4fec049:     boolean result = isMultiple();
1:4fec049:     logger.debug(LOG_EXIT, "isList",  result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public String getAttributeFilter() {
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributeFilter",  _attribFilterString);
1:4fec049:     return _attribFilterString;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public boolean equals (Object o) { 
1:4fec049:     
1:4fec049:     boolean equal = false;
1:4fec049:     if (o==null) { 
1:4fec049:       equal = false;
1:4fec049:     } else if (o==this) { 
1:4fec049:       equal = true;
1:4fec049:     } else if (!(o instanceof WrappedReferenceMetadata)) { 
1:4fec049:       equal = false;
1:4fec049:     } else { 
1:4fec049:       equal = toString().equals(o.toString());
1:4fec049:     }
1:4fec049:     
1:4fec049:     return equal;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public int hashCode() {
1:4fec049:     
1:4fec049:     int result = toString().hashCode();
1:4fec049:     
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override 
1:4fec049:   public String toString() { 
1:4fec049:     logger.debug(LOG_ENTRY, "toString");
1:4fec049:     
1:4fec049:     if (_toString != null) { 
1:4fec049:       logger.debug(LOG_EXIT, "toString",  _toString);
1:4fec049:       return _toString;
1:4fec049:     }
1:4fec049:     StringBuffer buf = new StringBuffer("<reference>");
1:4fec049:     buf.append("<componentName>" + _componentName + "</componentName>");
1:4fec049:     buf.append("<id>" + _id + "</id>");
1:4fec049:     buf.append("<interface>" + _iface + "</interface>");
1:4fec049:     buf.append("<isList>" + _isMultiple + "</isList>");
1:4fec049:     buf.append("<isOptional>" + _optional + "</isOptional>");
1:4fec049:     // We don't have a method for writing filters in a canonical form
1:4fec049:     buf.append("<filter>" + _blueprintFilter + "</filter>");
1:4fec049:     _toString = buf.toString();
1:4fec049:     logger.debug(LOG_EXIT, "toString",  _toString);
1:4fec049:     return _toString;
1:4fec049:   }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * A String suitable for use in DeployedImport-Service
1:4fec049:    */
1:4fec049:   public String toDeploymentString() {
1:4fec049:     logger.debug(LOG_ENTRY, "toDeploymentString");    
1:4fec049:     String baseFilter = getAttributeFilter();
1:4fec049:     // We may have one or more (service=service) elements that must be removed.
1:4fec049:     String reducedFilter = SERVICE_EQUALS_SERVICE.matcher(baseFilter).replaceAll("");    
1:4fec049:     // now trim off mandatory:<*service occurrences
1:4fec049:     String result = FilterUtils.removeMandatoryFilterToken(reducedFilter);
1:4fec049:     logger.debug(LOG_EXIT, "toDeploymentString",  result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:ad65b90
/////////////////////////////////////////////////////////////////////////
1:       InvalidAttributeException iax = new InvalidAttributeException(
1:     		  "A syntax error occurred attempting to parse the blueprint filter string '" 
1:     		  + _blueprintFilter + "' for element with id " + _id + ": " 
1:     		  + isx.getLocalizedMessage(), isx);
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
1: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
/////////////////////////////////////////////////////////////////////////
1:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: import static org.apache.aries.application.modelling.ResourceType.SERVICE;
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.regex.Pattern;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.Provider;
1: import org.apache.aries.application.modelling.ResourceType;
1: import org.apache.aries.application.modelling.WrappedReferenceMetadata;
0: import org.apache.aries.application.modelling.utils.ModellingConstants;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
1: import org.apache.aries.application.utils.FilterUtils;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: /**
1:  * an Import-Service entry
1:  */
1: public class ImportedServiceImpl implements ImportedService
1: {
1:   private final static String DEPRECATED_FILTER_ATTRIBUTE = "filter";
1:   private final boolean _optional;
1:   private final String _iface;
1:   private final String _componentName;
1:   private final String _blueprintFilter;
1:   private final Filter _attributeFilter;
1:   private final boolean _isMultiple;
1:   private final String _id;
1:   private final Map<String, String> _attributes;
1:   private String _toString;
1:   private String _attribFilterString;   // The manner in which we set means it can't be final
1:   private final static Pattern SERVICE_EQUALS_SERVICE = Pattern.compile("\\(" + ResourceType.SERVICE.toString()
1:       + "=" + ResourceType.SERVICE.toString() + "\\)");
1:   private final Logger logger = LoggerFactory.getLogger(ImportedServiceImpl.class);
1:   /**
1:    * Build an ImportedServiceImpl from its elements
1:    * @param optional
1:    * @param iface
1:    * @param componentName
1:    * @param blueprintFilter
1:    * @param id
1:    * @param isMultiple
1:    * @throws InvalidAttributeException
1:    */
1:   public ImportedServiceImpl (boolean optional, String iface, String componentName, 
1:       String blueprintFilter, String id, boolean isMultiple) 
1:     throws InvalidAttributeException 
1:   {
1:     
1:     _optional = optional;
1:     _iface = iface;
1:     _componentName = componentName;
1:     _blueprintFilter = FilterUtils.removeMandatoryFilterToken(blueprintFilter);
1:     _id = id;
1:     _isMultiple = isMultiple;
1:     _attributes = new HashMap<String, String>();
1:     _attributeFilter = generateAttributeFilter (_attributes);
1:     
1:     
1:   }
1: 
1:   private Filter generateAttributeFilter (Map<String, String> attrsToPopulate) throws InvalidAttributeException {
1:     logger.debug(LOG_ENTRY, "generateAttributeFilter", new Object[]{attrsToPopulate});
1:     Filter result = null;
1:     
1:     try {
1:       attrsToPopulate.put(ModellingConstants.OBR_SERVICE, ModellingConstants.OBR_SERVICE);
1:       if (_blueprintFilter != null) { 
1:         // We may get blueprint filters of the form (&(a=b)(c=d)). We can't put these in 'whole' because we'll 
1:         // end up generating a filter of the form (&(objectClass=foo)(&(a=b)(c=d)) which subsequent calls to 
1:         // parseFilter will choke on. So as an interim fix we'll strip off a leading &( and trailing ) if present. 
1:         String reducedBlueprintFilter;
1:         if (_blueprintFilter.startsWith("(&")) { 
1:           reducedBlueprintFilter = _blueprintFilter.substring(2, _blueprintFilter.length() - 1);
1:         } else { 
1:           reducedBlueprintFilter = _blueprintFilter;
1:         }
1:         
1:         attrsToPopulate.put(ManifestHeaderProcessor.NESTED_FILTER_ATTRIBUTE, reducedBlueprintFilter);
1:       }
1:       if (_componentName != null) { 
1:         attrsToPopulate.put ("osgi.service.blueprint.compname", _componentName);
1:       }
1:       if (_iface != null) { 
1:         attrsToPopulate.put (Constants.OBJECTCLASS, _iface);
1:       }
1:       _attribFilterString = ManifestHeaderProcessor.generateFilter(_attributes);
1:       if (! "".equals(_attribFilterString)) { 
1:         result = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_attribFilterString));
1:       } 
1:     } catch (InvalidSyntaxException isx) { 
1:       
0:       InvalidAttributeException iax = new InvalidAttributeException(isx);
1:       logger.debug(LOG_EXIT, "generateAttributeFilter", new Object[]{isx});
1:       throw iax;
1:     }
1:     logger.debug(LOG_EXIT, "generateAttributeFilter", new Object[]{result});
1:     return result;
1:   }
1:   
1:   /** 
1:    * Deprecated constructor for building these from deprecated Export-Service manifest headers. Do not use this 
1:    * constructor for any other purpose. 
1:    * @param ifaceName
1:    * @param attributes
1:    * @throws InvalidAttributeException 
1:    */
1:   @Deprecated
1:   public ImportedServiceImpl (String ifaceName, Map<String, String> attributes) throws InvalidAttributeException {
1:     
0:     _optional = false;
1:     _iface = ifaceName;
1:     _isMultiple = false;
1:     _componentName = null;
1:     _id = null;
1:     _attributes = new HashMap<String, String>(attributes);
1:     
1:     // The syntax for this deprecated header allows statements of the form, 
1:     // ImportService: myService;filter="(a=b")
1:     _blueprintFilter = _attributes.remove(DEPRECATED_FILTER_ATTRIBUTE);
1:     _attributeFilter = generateAttributeFilter (_attributes);
1:     
1:     
1:   }
1: 
1:   public String getFilter() {
1:     logger.debug(LOG_ENTRY, "getFilter");
1:     logger.debug(LOG_EXIT, "getFilter", _blueprintFilter);
1:     return _blueprintFilter;
1:   }
1: 
1: 
1:   public ResourceType getType() {
1:     logger.debug(LOG_ENTRY, "getType");
1:     logger.debug(LOG_EXIT, "getType",  ResourceType.SERVICE);
1:     return ResourceType.SERVICE;
1:   }
1: 
1: 
1:  public boolean isMultiple() {
1:    logger.debug(LOG_ENTRY, "isMultiple");
1:    logger.debug(LOG_EXIT, "isMultiple",  _isMultiple);
1:     return _isMultiple;
1:   }
1: 
1: 
1: 
1:   public boolean isOptional() {
1:     logger.debug(LOG_ENTRY, "isOptional");
1:     logger.debug(LOG_EXIT, "isOptional",  _optional);
1:     return _optional;
1:   }
1: 
1: 
1:   public boolean isSatisfied(Provider capability) {
1:     logger.debug(LOG_ENTRY, "isSatisfied", capability);
1:     
1:     if (capability.getType() != SERVICE) { 
1:       logger.debug(LOG_EXIT, "isSatisfied",  false);
1:       return false;
1:     }
1:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:     
1:     // If there's a value for ObjectClass, it may be a comma separated list.
1:     String objectClass = (String) dict.get(Constants.OBJECTCLASS);
1:     if (objectClass != null) { 
1:       String [] split = objectClass.split (",");
1:       dict.put (Constants.OBJECTCLASS, split);
1:     }
1:     
1:     if (_attributeFilter == null) { 
1:       logger.debug(LOG_EXIT, "isSatisfied",  true);
1:       return true;
1:     }
0:     boolean allPresent = ModellingUtils.areMandatoryAttributesPresent(_attributes, capability);
1:     boolean result = allPresent && _attributeFilter.match(dict);
1:     logger.debug(LOG_EXIT, "isSatisfied",  result);
1:     return result;
1:   }
1: 
1:   
1:   public String getComponentName() {
1:     logger.debug(LOG_ENTRY, "getComponentName");
1:     logger.debug(LOG_EXIT, "getComponentName",  _componentName);
1:     return _componentName;
1:   }
1: 
1:   
1:   public String getId() {
1:     logger.debug(LOG_ENTRY, "getId");
1:     logger.debug(LOG_EXIT, "getId",  _id);
1:     return _id;
1:   }
1: 
1:   
1:   public String getInterface() {
1:     logger.debug(LOG_ENTRY, "getInterface");
1:     logger.debug(LOG_EXIT, "getInterface",  _iface);
1:    return _iface;
1:   }
1: 
1:   public boolean isList() {
1:     logger.debug(LOG_ENTRY, "isList");    
1:     boolean result = isMultiple();
1:     logger.debug(LOG_EXIT, "isList",  result);
1:     return result;
1:   }
1: 
1: 
1:   public String getAttributeFilter() {
1:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:     logger.debug(LOG_EXIT, "getAttributeFilter",  _attribFilterString);
1:     return _attribFilterString;
1:   }
1:   
1:   @Override
1:   public boolean equals (Object o) { 
1:     
1:     boolean equal = false;
1:     if (o==null) { 
1:       equal = false;
1:     } else if (o==this) { 
1:       equal = true;
1:     } else if (!(o instanceof WrappedReferenceMetadata)) { 
1:       equal = false;
1:     } else { 
1:       equal = toString().equals(o.toString());
1:     }
1:     
1:     return equal;
1:   }
1:   
1:   @Override
1:   public int hashCode() {
1:     
1:     int result = toString().hashCode();
1:     
1:     return result;
1:   }
1:   
1:   @Override 
1:   public String toString() { 
1:     logger.debug(LOG_ENTRY, "toString");
1:     
1:     if (_toString != null) { 
1:       logger.debug(LOG_EXIT, "toString",  _toString);
1:       return _toString;
1:     }
1:     StringBuffer buf = new StringBuffer("<reference>");
1:     buf.append("<componentName>" + _componentName + "</componentName>");
1:     buf.append("<id>" + _id + "</id>");
1:     buf.append("<interface>" + _iface + "</interface>");
1:     buf.append("<isList>" + _isMultiple + "</isList>");
1:     buf.append("<isOptional>" + _optional + "</isOptional>");
1:     // We don't have a method for writing filters in a canonical form
1:     buf.append("<filter>" + _blueprintFilter + "</filter>");
1:     _toString = buf.toString();
1:     logger.debug(LOG_EXIT, "toString",  _toString);
1:     return _toString;
1:   }
1: 
1:   /**
1:    * A String suitable for use in DeployedImport-Service
1:    */
1:   public String toDeploymentString() {
1:     logger.debug(LOG_ENTRY, "toDeploymentString");    
1:     String baseFilter = getAttributeFilter();
1:     // We may have one or more (service=service) elements that must be removed.
1:     String reducedFilter = SERVICE_EQUALS_SERVICE.matcher(baseFilter).replaceAll("");    
1:     // now trim off mandatory:<*service occurrences
1:     String result = FilterUtils.removeMandatoryFilterToken(reducedFilter);
1:     logger.debug(LOG_EXIT, "toDeploymentString",  result);
1:     return result;
1:   }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:08df2a2
/////////////////////////////////////////////////////////////////////////
1:     _optional = ("optional".equals(attributes.get("availability:")));
============================================================================