1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
1:39cd3f4: 
1:39cd3f4: import java.lang.reflect.InvocationHandler;
1:39cd3f4: import java.lang.reflect.Method;
1:39cd3f4: import java.util.Collections;
1:39cd3f4: import java.util.HashMap;
1:39cd3f4: import java.util.Map;
1:39cd3f4: 
1:39cd3f4: import org.osgi.framework.Bundle;
1:39cd3f4: import org.osgi.framework.ServiceReference;
1:39cd3f4: import org.osgi.service.log.LogService;
1:39cd3f4: import org.osgi.util.tracker.ServiceTracker;
1:39cd3f4: 
1:39cd3f4: class TrackingInvocationHandler implements InvocationHandler, net.sf.cglib.proxy.InvocationHandler {
1:39cd3f4: 
1:39cd3f4: 	private static final Map<Class<?>, Object> RETURN_VALUES;
1:39cd3f4: 	
1:39cd3f4: 	static {
1:39cd3f4: 		Map<Class<?>, Object> map = new HashMap<Class<?>, Object>();
1:39cd3f4: 		
1:39cd3f4: 		map.put(boolean.class, Boolean.FALSE);
1:39cd3f4: 		map.put(byte.class, Byte.valueOf((byte)0));
1:39cd3f4: 		map.put(short.class, Short.valueOf((short)0));
1:39cd3f4: 		map.put(char.class, Character.valueOf((char)0));
1:39cd3f4: 		map.put(int.class, Integer.valueOf(0));
1:39cd3f4: 		map.put(float.class, Float.valueOf(0));
1:39cd3f4: 		map.put(long.class, Long.valueOf(0));
1:39cd3f4: 		map.put(double.class, Double.valueOf(0));
1:39cd3f4: 		
1:39cd3f4: 		RETURN_VALUES = Collections.unmodifiableMap(map);
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: 	/**
1:39cd3f4: 	 * 
1:39cd3f4: 	 */
1:39cd3f4: 	private final AsyncService asyncService;
1:39cd3f4: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1:39cd3f4: 	private final Bundle clientBundle;
1:39cd3f4: 	private final ServiceReference<?> ref;
1:39cd3f4: 	private final Object delegate;
1:39cd3f4: 	
1:39cd3f4: 	public TrackingInvocationHandler(AsyncService asyncService, 
1:39cd3f4: 			Bundle clientBundle, ServiceTracker<LogService, LogService> logServiceTracker, 
1:39cd3f4: 			ServiceReference<?> ref) {
1:39cd3f4: 		this.asyncService = asyncService;
1:39cd3f4: 		this.logServiceTracker = logServiceTracker;
1:39cd3f4: 		this.clientBundle = clientBundle;
1:39cd3f4: 		this.ref = ref;
1:39cd3f4: 		this.delegate = null;
1:39cd3f4: 	}
1:39cd3f4: 	public TrackingInvocationHandler(AsyncService asyncService, 
1:39cd3f4: 			Bundle clientBundle,ServiceTracker<LogService, LogService> logServiceTracker, 
1:39cd3f4: 			Object service) {
1:39cd3f4: 		this.asyncService = asyncService;
1:39cd3f4: 		this.logServiceTracker = logServiceTracker;
1:39cd3f4: 		this.clientBundle = clientBundle;
1:39cd3f4: 		this.delegate = service;
1:39cd3f4: 		this.ref = null;
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	public Object invoke(Object proxy, Method method, Object[] args)
1:39cd3f4: 			throws Throwable {
1:39cd3f4: 		asyncService.registerInvocation(new MethodCall(clientBundle, logServiceTracker, 
1:39cd3f4: 				ref, delegate, method, args));
1:39cd3f4: 		Class<?> returnType = method.getReturnType();
1:39cd3f4: 		return RETURN_VALUES.get(returnType);
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Method;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: class TrackingInvocationHandler implements InvocationHandler, net.sf.cglib.proxy.InvocationHandler {
1: 
1: 	private static final Map<Class<?>, Object> RETURN_VALUES;
1: 	
1: 	static {
1: 		Map<Class<?>, Object> map = new HashMap<Class<?>, Object>();
1: 		
1: 		map.put(boolean.class, Boolean.FALSE);
1: 		map.put(byte.class, Byte.valueOf((byte)0));
1: 		map.put(short.class, Short.valueOf((short)0));
1: 		map.put(char.class, Character.valueOf((char)0));
1: 		map.put(int.class, Integer.valueOf(0));
1: 		map.put(float.class, Float.valueOf(0));
1: 		map.put(long.class, Long.valueOf(0));
1: 		map.put(double.class, Double.valueOf(0));
1: 		
1: 		RETURN_VALUES = Collections.unmodifiableMap(map);
1: 	}
1: 	
1: 	/**
1: 	 * 
1: 	 */
1: 	private final AsyncService asyncService;
1: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1: 	private final Bundle clientBundle;
1: 	private final ServiceReference<?> ref;
1: 	private final Object delegate;
1: 	
1: 	public TrackingInvocationHandler(AsyncService asyncService, 
1: 			Bundle clientBundle, ServiceTracker<LogService, LogService> logServiceTracker, 
1: 			ServiceReference<?> ref) {
1: 		this.asyncService = asyncService;
1: 		this.logServiceTracker = logServiceTracker;
1: 		this.clientBundle = clientBundle;
1: 		this.ref = ref;
1: 		this.delegate = null;
1: 	}
1: 	public TrackingInvocationHandler(AsyncService asyncService, 
1: 			Bundle clientBundle,ServiceTracker<LogService, LogService> logServiceTracker, 
1: 			Object service) {
1: 		this.asyncService = asyncService;
1: 		this.logServiceTracker = logServiceTracker;
1: 		this.clientBundle = clientBundle;
1: 		this.delegate = service;
1: 		this.ref = null;
1: 	}
1: 
1: 	public Object invoke(Object proxy, Method method, Object[] args)
1: 			throws Throwable {
1: 		asyncService.registerInvocation(new MethodCall(clientBundle, logServiceTracker, 
1: 				ref, delegate, method, args));
1: 		Class<?> returnType = method.getReturnType();
1: 		return RETURN_VALUES.get(returnType);
1: 	}
1: 	
1: }
============================================================================