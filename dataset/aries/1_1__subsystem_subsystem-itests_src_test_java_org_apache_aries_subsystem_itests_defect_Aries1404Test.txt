1:d8cec40: /*
1:d8cec40:  * Licensed to the Apache Software Foundation (ASF) under one
1:d8cec40:  * or more contributor license agreements.  See the NOTICE file
1:d8cec40:  * distributed with this work for additional information
1:d8cec40:  * regarding copyright ownership.  The ASF licenses this file
1:d8cec40:  * to you under the Apache License, Version 2.0 (the
1:d8cec40:  * "License"); you may not use this file except in compliance
1:d8cec40:  * with the License.  You may obtain a copy of the License at
1:d8cec40:  *
1:d8cec40:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d8cec40:  *
1:d8cec40:  * Unless required by applicable law or agreed to in writing,
1:d8cec40:  * software distributed under the License is distributed on an
1:d8cec40:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d8cec40:  * KIND, either express or implied.  See the License for the
1:d8cec40:  * specific language governing permissions and limitations
1:d8cec40:  * under the License.
1:d8cec40:  */
1:d8cec40: package org.apache.aries.subsystem.itests.defect;
1:d8cec40: 
1:d8cec40: import static org.junit.Assert.fail;
1:d8cec40: 
1:d8cec40: import java.io.IOException;
1:d8cec40: import java.util.HashMap;
1:d8cec40: import java.util.Map;
1:d8cec40: 
1:d8cec40: import org.apache.aries.subsystem.itests.Header;
1:d8cec40: import org.apache.aries.subsystem.itests.SubsystemTest;
1:d8cec40: import org.junit.Before;
1:d8cec40: import org.junit.Test;
1:d8cec40: import org.osgi.framework.Constants;
1:d8cec40: import org.osgi.service.subsystem.Subsystem;
1:d8cec40: import org.osgi.service.subsystem.SubsystemConstants;
1:d8cec40: import org.osgi.service.subsystem.SubsystemException;
1:d8cec40: 
1:d8cec40: /*
1:d8cec40:  * https://issues.apache.org/jira/browse/ARIES-1404
1:d8cec40:  * 
1:d8cec40:  * Restart of the osgi container does not restart subsystem core because of an 
1:d8cec40:  * error related to missing resource 
1:d8cec40:  * org.apache.aries.subsystem.resource.synthesized.
1:d8cec40:  */
1:d8cec40: public class Aries1404Test extends SubsystemTest {
1:d8cec40:     /*
1:d8cec40:      * Subsystem-SymbolicName: application.a.esa
1:d8cec40:      * Subsystem-Content: bundle.a.jar
1:d8cec40:      */
1:d8cec40:     private static final String APPLICATION_A = "application.a.esa";
1:d8cec40:     /*
1:d8cec40:      * Subsystem-SymbolicName: application.b.esa
1:d8cec40:      * Subsystem-Content: bundle.b.jar
1:d8cec40:      * Application-ImportService: b
1:d8cec40:      */
1:d8cec40:     private static final String APPLICATION_B = "application.b.esa";
1:d8cec40: 	/*
1:d8cec40: 	 * Bundle-SymbolicName: bundle.a.jar
1:d8cec40: 	 * Require-Capability: a;resolution:=optional
1:d8cec40: 	 */
1:d8cec40: 	private static final String BUNDLE_A = "bundle.a.jar";
1:d8cec40: 	/*
1:d8cec40: 	 * Bundle-SymbolicName: bundle.b.jar
1:d8cec40: 	 * Require-Capability: osgi.service;filter:="(objectClass=b)"
1:d8cec40: 	 */
1:d8cec40: 	private static final String BUNDLE_B = "bundle.b.jar";
1:d8cec40: 	
1:d8cec40: 	private static boolean createdTestFiles;
1:d8cec40: 	
1:d8cec40: 	@Before
1:d8cec40: 	public void createTestFiles() throws Exception {
1:d8cec40: 		if (createdTestFiles)
1:d8cec40: 			return;
1:d8cec40: 		createBundleA();
1:d8cec40: 		createBundleB();
1:d8cec40: 		createApplicationA();
1:d8cec40: 		createApplicationB();
1:d8cec40: 		createdTestFiles = true;
1:d8cec40: 	}
1:d8cec40: 	
1:d8cec40: 	private void createBundleA() throws IOException {
1:d8cec40: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "a;resolution:=optional"));
1:d8cec40: 	}
1:d8cec40: 	
1:d8cec40: 	private void createBundleB() throws IOException {
1:d8cec40: 		createBundle(name(BUNDLE_B), new Header(Constants.REQUIRE_CAPABILITY, "osgi.service;filter:=\"(objectClass=b)\""));
1:d8cec40: 	}
1:d8cec40:     
1:d8cec40:     private static void createApplicationA() throws IOException {
1:d8cec40:         createApplicationAManifest();
1:d8cec40:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:d8cec40:     }
1:d8cec40:     
1:d8cec40:     private static void createApplicationAManifest() throws IOException {
1:d8cec40:         Map<String, String> attributes = new HashMap<String, String>();
1:d8cec40:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:d8cec40:         createManifest(APPLICATION_A + ".mf", attributes);
1:d8cec40:     }
1:d8cec40:     
1:d8cec40:     private static void createApplicationB() throws IOException {
1:d8cec40:         createApplicationBManifest();
1:d8cec40:         createSubsystem(APPLICATION_B, BUNDLE_B);
1:d8cec40:     }
1:d8cec40:     
1:d8cec40:     private static void createApplicationBManifest() throws IOException {
1:d8cec40:         Map<String, String> attributes = new HashMap<String, String>();
1:d8cec40:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:d8cec40:         attributes.put("Application-ImportService", "b");
1:d8cec40:         createManifest(APPLICATION_B + ".mf", attributes);
1:d8cec40:     }
1:d8cec40:     
1:d8cec40:     @Test 
1:d8cec40:     public void testProvisionedSyntheticResourceWithOptionalRequirement() throws Exception {
1:d8cec40:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:d8cec40:     	try {
1:d8cec40:     		try {
1:d8cec40:     			restartSubsystemsImplBundle();
1:d8cec40:     		}
1:d8cec40:     		catch (SubsystemException e) {
1:d8cec40:     			e.printStackTrace();
1:d8cec40:     			fail("Core bundle should have restarted");
1:d8cec40:     		}
1:d8cec40:     	}
1:d8cec40:     	finally {
1:d8cec40:     		stopAndUninstallSubsystemSilently(applicationA);
1:d8cec40:     	}
1:d8cec40:     }
1:d8cec40:     
1:d8cec40:     @Test 
1:d8cec40:     public void testProvisionedSyntheticResourceWithMandatoryRequirementAndApplicationImportService() throws Exception {
1:d8cec40:     	Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:d8cec40:     	try {
1:d8cec40:     		try {
1:d8cec40:     			restartSubsystemsImplBundle();
1:d8cec40:     		}
1:d8cec40:     		catch (SubsystemException e) {
1:d8cec40:     			e.printStackTrace();
1:d8cec40:     			fail("Core bundle should have restarted");
1:d8cec40:     		}
1:d8cec40:     	}
1:d8cec40:     	finally {
1:d8cec40:     		stopAndUninstallSubsystemSilently(applicationB);
1:d8cec40:     	}
1:d8cec40:     }
1:d8cec40: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d8cec40
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.Header;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1404
1:  * 
1:  * Restart of the osgi container does not restart subsystem core because of an 
1:  * error related to missing resource 
1:  * org.apache.aries.subsystem.resource.synthesized.
1:  */
1: public class Aries1404Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * Subsystem-Content: bundle.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.b.esa
1:      * Subsystem-Content: bundle.b.jar
1:      * Application-ImportService: b
1:      */
1:     private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: a;resolution:=optional
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Require-Capability: osgi.service;filter:="(objectClass=b)"
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "a;resolution:=optional"));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), new Header(Constants.REQUIRE_CAPABILITY, "osgi.service;filter:=\"(objectClass=b)\""));
1: 	}
1:     
1:     private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     private static void createApplicationB() throws IOException {
1:         createApplicationBManifest();
1:         createSubsystem(APPLICATION_B, BUNDLE_B);
1:     }
1:     
1:     private static void createApplicationBManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:         attributes.put("Application-ImportService", "b");
1:         createManifest(APPLICATION_B + ".mf", attributes);
1:     }
1:     
1:     @Test 
1:     public void testProvisionedSyntheticResourceWithOptionalRequirement() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		try {
1:     			restartSubsystemsImplBundle();
1:     		}
1:     		catch (SubsystemException e) {
1:     			e.printStackTrace();
1:     			fail("Core bundle should have restarted");
1:     		}
1:     	}
1:     	finally {
1:     		stopAndUninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test 
1:     public void testProvisionedSyntheticResourceWithMandatoryRequirementAndApplicationImportService() throws Exception {
1:     	Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:     	try {
1:     		try {
1:     			restartSubsystemsImplBundle();
1:     		}
1:     		catch (SubsystemException e) {
1:     			e.printStackTrace();
1:     			fail("Core bundle should have restarted");
1:     		}
1:     	}
1:     	finally {
1:     		stopAndUninstallSubsystemSilently(applicationB);
1:     	}
1:     }
1: }
============================================================================