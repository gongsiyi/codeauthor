1:caa372f: package org.apache.aries.jndi.services;
1:caa372f: 
1:caa372f: import java.util.Collection;
1:caa372f: 
1:caa372f: import org.apache.aries.jndi.services.ServiceHelper;
1:caa372f: import org.junit.Test;
1:caa372f: 
1:caa372f: import static org.junit.Assert.assertTrue;
1:caa372f: 
1:caa372f: public class ServiceHelperTest {
1:caa372f: 
1:caa372f: 	interface A {};
1:caa372f: 	interface B extends A{};
1:caa372f: 	interface C {};
1:caa372f: 	interface D extends A, C{};
1:caa372f: 	
1:caa372f: 	@Test
1:caa372f: 	public void testGetAllInterfaces() throws Exception {
1:caa372f: 		
1:caa372f: 		Class<?>[] classes = { B.class, D.class };
1:caa372f: 		Collection<Class<?>> cx = ServiceHelper.getAllInterfaces(classes);
1:caa372f: 		
1:caa372f: 		assertTrue (cx.contains(A.class));
1:caa372f: 		assertTrue (cx.contains(B.class));
1:caa372f: 		assertTrue (cx.contains(C.class));
1:caa372f: 		assertTrue (cx.contains(D.class));
1:caa372f: 		assertTrue (cx.size() == 4);
1:caa372f: 		
1:caa372f: 	}
1:caa372f: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:caa372f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jndi.services;
1: 
1: import java.util.Collection;
1: 
1: import org.apache.aries.jndi.services.ServiceHelper;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class ServiceHelperTest {
1: 
1: 	interface A {};
1: 	interface B extends A{};
1: 	interface C {};
1: 	interface D extends A, C{};
1: 	
1: 	@Test
1: 	public void testGetAllInterfaces() throws Exception {
1: 		
1: 		Class<?>[] classes = { B.class, D.class };
1: 		Collection<Class<?>> cx = ServiceHelper.getAllInterfaces(classes);
1: 		
1: 		assertTrue (cx.contains(A.class));
1: 		assertTrue (cx.contains(B.class));
1: 		assertTrue (cx.contains(C.class));
1: 		assertTrue (cx.contains(D.class));
1: 		assertTrue (cx.size() == 4);
1: 		
1: 	}
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:18ebfe2
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c3a056d
/////////////////////////////////////////////////////////////////////////
0: ///**
0: // * Licensed to the Apache Software Foundation (ASF) under one
0: // * or more contributor license agreements.  See the NOTICE file
0: // * distributed with this work for additional information
0: // * regarding copyright ownership.  The ASF licenses this file
0: // * to you under the Apache License, Version 2.0 (the
0: // * "License"); you may not use this file except in compliance
0: // * with the License.  You may obtain a copy of the License at
0: // *
0: // *   http://www.apache.org/licenses/LICENSE-2.0
0: // *
0: // * Unless required by applicable law or agreed to in writing,
0: // * software distributed under the License is distributed on an
0: // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: // * KIND, either express or implied.  See the License for the
0: // * specific language governing permissions and limitations
0: // * under the License.
0: // */
0: //package org.apache.aries.jndi.services;
0: //
0: //import static org.junit.Assert.assertEquals;
0: //import static org.junit.Assert.assertFalse;
0: //import static org.junit.Assert.assertNotNull;
0: //import static org.junit.Assert.assertTrue;
0: //
0: //import java.lang.reflect.Field;
0: //import java.util.Hashtable;
0: //import java.util.List;
0: //import java.util.Properties;
0: //
0: //import mocks.BundleContextMock;
0: //import mocks.BundleMock;
0: //
0: //import org.junit.After;
0: //import org.junit.Before;
0: //import org.junit.Test;
0: //import org.osgi.framework.Bundle;
0: //import org.osgi.framework.BundleContext;
0: //import org.osgi.framework.ServiceFactory;
0: //import org.osgi.framework.ServiceReference;
0: //import org.osgi.framework.ServiceRegistration;
0: //
0: //import com.ibm.aries.unittest.mocks.MethodCall;
0: //import com.ibm.aries.unittest.mocks.Skeleton;
0: //import com.ibm.osgi.jndi.services.ServiceHelper;
0: //import com.ibm.osgi.jndi.url.Activator;
0: //
0: //
0: ///**
0: // * This class contains tests for the ServiceHelper
0: // */
0: //public class ServiceHelperTest
0: //{
0: //  /** The service we register by default */
0: //  private Thread service;
0: //  /** The bundle context for the test */
0: //  private BundleContext bc;
0: //
0: //  /**
0: //   * This method does the setup to ensure we always have a service.
0: //   * @throws NoSuchFieldException
0: //   * @throws SecurityException
0: //   * @throws IllegalAccessException
0: //   * @throws IllegalArgumentException
0: //   */
0: //  @Before
0: //  public void registerService() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
0: //  {
0: //
0: //    bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
0: //    new Activator().start(bc);
0: //
0: //    Field f = ServiceHelper.class.getDeclaredField("context");
0: //    f.setAccessible(true);
0: //    f.set(null, bc);
0: //
0: //    service = new Thread();
0: //
0: //    registerService(service);
0: //  }
0: //
0: //  /**
0: //   * Register a service in our map.
0: //   *
0: //   * @param service2 The service to register.
0: //   */
0: //  private void registerService(Thread service2)
0: //  {
0: //    ServiceFactory factory = Skeleton.newMock(ServiceFactory.class);
0: //    Skeleton skel = Skeleton.getSkeleton(factory);
0: //
0: //    skel.setReturnValue(new MethodCall(ServiceFactory.class, "getService", Bundle.class, ServiceRegistration.class), service2);
0: //
0: //    bc.registerService(new String[] {"java.lang.Runnable"}, factory, new Hashtable<String, String>());
0: //  }
0: //
0: //  /**
0: //   * Make sure we clear the caches out before the next test.
0: //   */
0: //  @After
0: //  public void teardown()
0: //  {
0: //    BundleContextMock.clear();
0: //  }
0: //
0: //  /**
0: //   * Check that the basic behaviour is correct. Do we call ungetService, do
0: //   * we call getService the right number of times.
0: //   */
0: //  @Test
0: //  public void getAService()
0: //  {
0: //    Bundle b = Skeleton.newMock(new BundleMock("scooby.doo", new Properties()), Bundle.class);
0: //
0: //    Skeleton skel = Skeleton.getSkeleton(b);
0: //
0: //    Thread.currentThread().setContextClassLoader(((BundleMock)skel.getTemplateObject()).getClassLoader());
0: //
0: //    skel = Skeleton.getSkeleton(b.getBundleContext());
0: //
0: //    Object retrievedService = ServiceHelper.getService("java.lang.Runnable", null);
0: //
0: //    assertNotNull("We could not locate the service in the registry", retrievedService);
0: //
0: //    assertTrue("We didn't get back the service we expected", service == retrievedService);
0: //
0: //    MethodCall getService = new MethodCall(BundleContext.class, "getService", ServiceReference.class);
0: //    MethodCall ungetService = new MethodCall(BundleContext.class, "ungetService", ServiceReference.class);
0: //
0: //    skel.assertNotCalled(ungetService);
0: //    skel.assertCalledExactNumberOfTimes(getService, 1);
0: //
0: //    Object retrievedService2 = ServiceHelper.getService("java.lang.Runnable", null);
0: //
0: //    assertTrue("We got different objects, which we did not want", retrievedService == retrievedService2);
0: //    skel.assertCalledExactNumberOfTimes(getService, 2);
0: //    skel.assertCalledExactNumberOfTimes(ungetService, 1);
0: //  }
0: //
0: //  /**
0: //   * This method checks that we get two different services from different
0: //   * bundles if the thread context classloader is different.
0: //   */
0: //  @Test
0: //  public void getAServiceFromTwoDifferentApplications()
0: //  {
0: //    Bundle b = Skeleton.newMock(new BundleMock("scooby.doo", new Properties()), Bundle.class);
0: //
0: //    Skeleton skel = Skeleton.getSkeleton(b);
0: //
0: //    Thread.currentThread().setContextClassLoader(((BundleMock)skel.getTemplateObject()).getClassLoader());
0: //
0: //    Object retrievedService = ServiceHelper.getService("java.lang.Runnable", null);
0: //    Bundle b2 = Skeleton.newMock(new BundleMock("scooby.doo", new Properties()), Bundle.class);
0: //
0: //    skel = Skeleton.getSkeleton(b2);
0: //
0: //    Thread.currentThread().setContextClassLoader(((BundleMock)skel.getTemplateObject()).getClassLoader());
0: //    Object retrievedService2 = ServiceHelper.getService("java.lang.Runnable", null);
0: //
0: //    assertNotNull("We could not locate the service in the registry", retrievedService);
0: //    assertNotNull("We could not locate the service in the registry", retrievedService2);
0: //
0: //    assertTrue("We got different objects, which we did not want", retrievedService == retrievedService2);
0: //
0: //    assertFalse("We expected different bundles from our calls to the BundleMaker, but we got the same one", b == b2);
0: //
0: //    MethodCall getService = new MethodCall(BundleContext.class, "getService", ServiceReference.class);
0: //    Skeleton.getSkeleton(b.getBundleContext()).assertCalledExactNumberOfTimes(getService, 1);
0: //    Skeleton.getSkeleton(b2.getBundleContext()).assertCalledExactNumberOfTimes(getService, 1);
0: //  }
0: //
0: //  /**
0: //   * This test checks that the getServices method returns the expected number of
0: //   * services, and that it changes when new services are registered.
0: //   */
0: //  @Test
0: //  public void getMultipleServices()
0: //  {
0: //    Bundle b = Skeleton.newMock(new BundleMock("scooby.doo", new Properties()), Bundle.class);
0: //
0: //    Skeleton skel = Skeleton.getSkeleton(b);
0: //
0: //    Thread.currentThread().setContextClassLoader(((BundleMock)skel.getTemplateObject()).getClassLoader());
0: //
0: //    MethodCall getService = new MethodCall(BundleContext.class, "getService", ServiceReference.class);
0: //    MethodCall ungetService = new MethodCall(BundleContext.class, "ungetService", ServiceReference.class);
0: //
0: //    List<?> services = ServiceHelper.getServices("java.lang.Runnable", null);
0: //
0: //    skel = Skeleton.getSkeleton(b.getBundleContext());
0: //
0: //    skel.assertNotCalled(ungetService);
0: //    skel.assertCalledExactNumberOfTimes(getService, 1);
0: //
0: //    assertEquals("At this point we really should only have one service.", 1, services.size());
0: //    Thread anotherService = new Thread();
0: //    registerService(anotherService);
0: //
0: //    services = ServiceHelper.getServices("java.lang.Runnable", null);
0: //
0: //    assertEquals("At this point we really should have two services.", 2, services.size());
0: //    assertTrue("The master service was not there, odd.", services.contains(service));
0: //    assertTrue("The service we added just for this test was not there, odd.", services.contains(anotherService));
0: //
0: //    // this should be 3 times, once for the first call to getServices, and twice for the second
0: //    skel.assertCalledExactNumberOfTimes(getService, 3);
0: //    skel.assertCalledExactNumberOfTimes(ungetService, 1);
0: //  }
0: //}
============================================================================