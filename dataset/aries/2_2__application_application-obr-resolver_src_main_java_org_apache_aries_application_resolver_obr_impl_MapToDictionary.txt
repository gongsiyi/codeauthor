1:0aad0ca: /*
1:0aad0ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:0aad0ca:  * or more contributor license agreements.  See the NOTICE file
1:0aad0ca:  * distributed with this work for additional information
1:0aad0ca:  * regarding copyright ownership.  The ASF licenses this file
1:0aad0ca:  * to you under the Apache License, Version 2.0 (the
1:0aad0ca:  * "License"); you may not use this file except in compliance
1:0aad0ca:  * with the License.  You may obtain a copy of the License at
1:0aad0ca:  *
1:0aad0ca:  *  http://www.apache.org/licenses/LICENSE-2.0
1:0aad0ca:  *
1:0aad0ca:  * Unless required by applicable law or agreed to in writing,
1:0aad0ca:  * software distributed under the License is distributed on an
1:0aad0ca:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0aad0ca:  * KIND, either express or implied.  See the License for the
1:0aad0ca:  * specific language governing permissions and limitations
1:0aad0ca:  * under the License.
1:0aad0ca:  */
1:0aad0ca: 
1:0aad0ca: 
1:0aad0ca: package org.apache.aries.application.resolver.obr.impl;
1:0aad0ca: 
1:0aad0ca: import java.util.Dictionary;
1:0aad0ca: import java.util.Enumeration;
1:0aad0ca: import java.util.Iterator;
1:0aad0ca: import java.util.Map;
1:0aad0ca: 
1:0aad0ca: /**
1:0aad0ca:  * @version $Rev$ $Date$
1:0aad0ca:  */
1:0aad0ca: public class MapToDictionary extends Dictionary
1:0aad0ca: {
1:0aad0ca:   /**
1:0aad0ca:    * Map source.
1:0aad0ca:    */
1:0aad0ca:   private final Map m_map;
1:0aad0ca: 
1:0aad0ca:   public MapToDictionary(Map map)
1:0aad0ca:   {
1:0aad0ca:     m_map = map;
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Enumeration elements()
1:0aad0ca:   {
1:0aad0ca:     if (m_map == null) {
1:0aad0ca:       return null;
1:0aad0ca:     }
1:0aad0ca:     return new IteratorToEnumeration(m_map.values().iterator());
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Object get(Object key)
1:0aad0ca:   {
1:0aad0ca:     if (m_map == null) {
1:0aad0ca:       return null;
1:0aad0ca:     }
1:0aad0ca:     return m_map.get(key);
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public boolean isEmpty()
1:0aad0ca:   {
1:0aad0ca:     if (m_map == null) {
1:0aad0ca:       return true;
1:0aad0ca:     }
1:0aad0ca:     return m_map.isEmpty();
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Enumeration keys()
1:0aad0ca:   {
1:0aad0ca:     if (m_map == null) {
1:0aad0ca:       return null;
1:0aad0ca:     }
1:0aad0ca:     return new IteratorToEnumeration(m_map.keySet().iterator());
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Object put(Object key, Object value)
1:0aad0ca:   {
1:0aad0ca:     throw new UnsupportedOperationException();
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public Object remove(Object key)
1:0aad0ca:   {
1:0aad0ca:     throw new UnsupportedOperationException();
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca:   public int size()
1:0aad0ca:   {
1:0aad0ca:     if (m_map == null) {
1:0aad0ca:       return 0;
1:0aad0ca:     }
1:0aad0ca:     return m_map.size();
1:0aad0ca:   }
1:0aad0ca: 
1:05979c1:   @Override
1:05979c1:   public String toString()
1:05979c1:   {
1:05979c1:     return m_map != null ? m_map.toString() : "null";
1:05979c1:   }
1:05979c1: 
1:0aad0ca:   private static class IteratorToEnumeration implements Enumeration
1:0aad0ca:   {
1:0aad0ca:     private final Iterator m_iter;
1:0aad0ca: 
1:0aad0ca:     public IteratorToEnumeration(Iterator iter)
1:0aad0ca:     {
1:0aad0ca:       m_iter = iter;
1:0aad0ca:     }
1:0aad0ca: 
1:0aad0ca:     public boolean hasMoreElements()
1:0aad0ca:     {
1:0aad0ca:       if (m_iter == null)
1:0aad0ca:         return false;
1:0aad0ca:       return m_iter.hasNext();
1:0aad0ca:     }
1:0aad0ca: 
1:0aad0ca:     public Object nextElement()
1:0aad0ca:     {
1:0aad0ca:       if (m_iter == null)
1:0aad0ca:         return null;
1:0aad0ca:       return m_iter.next();
1:0aad0ca:     }
1:0aad0ca:   }
1:0aad0ca: 
1:0aad0ca: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:05979c1
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public String toString()
1:   {
1:     return m_map != null ? m_map.toString() : "null";
1:   }
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:0aad0ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: 
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: /**
1:  * @version $Rev$ $Date$
1:  */
1: public class MapToDictionary extends Dictionary
1: {
1:   /**
1:    * Map source.
1:    */
1:   private final Map m_map;
1: 
1:   public MapToDictionary(Map map)
1:   {
1:     m_map = map;
1:   }
1: 
1:   public Enumeration elements()
1:   {
1:     if (m_map == null) {
1:       return null;
1:     }
1:     return new IteratorToEnumeration(m_map.values().iterator());
1:   }
1: 
1:   public Object get(Object key)
1:   {
1:     if (m_map == null) {
1:       return null;
1:     }
1:     return m_map.get(key);
1:   }
1: 
1:   public boolean isEmpty()
1:   {
1:     if (m_map == null) {
1:       return true;
1:     }
1:     return m_map.isEmpty();
1:   }
1: 
1:   public Enumeration keys()
1:   {
1:     if (m_map == null) {
1:       return null;
1:     }
1:     return new IteratorToEnumeration(m_map.keySet().iterator());
1:   }
1: 
1:   public Object put(Object key, Object value)
1:   {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   public Object remove(Object key)
1:   {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   public int size()
1:   {
1:     if (m_map == null) {
1:       return 0;
1:     }
1:     return m_map.size();
1:   }
1: 
1:   private static class IteratorToEnumeration implements Enumeration
1:   {
1:     private final Iterator m_iter;
1: 
1:     public IteratorToEnumeration(Iterator iter)
1:     {
1:       m_iter = iter;
1:     }
1: 
1:     public boolean hasMoreElements()
1:     {
1:       if (m_iter == null)
1:         return false;
1:       return m_iter.hasNext();
1:     }
1: 
1:     public Object nextElement()
1:     {
1:       if (m_iter == null)
1:         return null;
1:       return m_iter.next();
1:     }
1:   }
1: 
1: }
============================================================================