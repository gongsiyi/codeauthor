2:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:1c43780: package org.apache.aries.spifly;
1:faebae4: 
1:5e890d0: import java.io.IOException;
1:0a02617: import java.lang.reflect.Method;
1:5e890d0: import java.net.URL;
1:6826a3a: import java.security.AccessControlException;
1:7904fa4: import java.security.AccessController;
1:7904fa4: import java.security.PrivilegedAction;
1:1c43780: import java.util.ArrayList;
1:1c43780: import java.util.Collection;
1:4b6c670: import java.util.Enumeration;
1:1c43780: import java.util.HashMap;
1:1c43780: import java.util.Iterator;
1:1c43780: import java.util.List;
1:1c43780: import java.util.Map;
1:1c43780: import java.util.ServiceLoader;
1:5e890d0: import java.util.jar.JarEntry;
1:5e890d0: import java.util.jar.JarInputStream;
1:faebae4: 
1:1c43780: import org.osgi.framework.Bundle;
1:1c43780: import org.osgi.framework.BundleReference;
1:5e890d0: import org.osgi.framework.Constants;
1:6826a3a: import org.osgi.framework.ServicePermission;
1:1c43780: import org.osgi.service.log.LogService;
1:faebae4: 
1:a8ccbc9: /**
1:1c43780:  * Methods used from ASM-generated code. They store, change and reset the thread context classloader.
1:1c43780:  * The methods are static to make it easy to access them from generated code.
1:1c43780:  */
1:1c43780: public class Util {
1:1c43780:     static ThreadLocal<ClassLoader> storedClassLoaders = new ThreadLocal<ClassLoader>();
1:a8ccbc9: 
1:06d1e60:     // Provided as static method to make it easier to call from ASM-modified code
1:1c43780:     public static void storeContextClassloader() {
1:7904fa4:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:7904fa4:             @Override
1:7904fa4:             public Void run() {
1:7904fa4:                 storedClassLoaders.set(Thread.currentThread().getContextClassLoader());
1:7904fa4:                 return null;
1:7904fa4:             }
1:7904fa4:         });
2:1c43780:     }
1:06d1e60: 
1:06d1e60:     // Provided as static method to make it easier to call from ASM-modified code
1:1c43780:     public static void restoreContextClassloader() {
1:7904fa4:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:7904fa4:             @Override
1:7904fa4:             public Void run() {
1:7904fa4:                 Thread.currentThread().setContextClassLoader(storedClassLoaders.get());
1:7904fa4:                 storedClassLoaders.set(null);
1:7904fa4:                 return null;
1:7904fa4:             }
1:7904fa4:         });
1:1c43780:     }
1:5e890d0: 
1:1c43780:     public static void fixContextClassloader(String cls, String method, Class<?> clsArg, ClassLoader bundleLoader) {
1:b302317:         if (BaseActivator.activator == null) {
1:b302317:             // The system is not yet initialized. We can't do anything.
1:b302317:             return;
1:b302317:         }
1:b302317: 
1:1c43780:         if (!(bundleLoader instanceof BundleReference)) {
1:b1379cb:             BaseActivator.activator.log(LogService.LOG_WARNING, "Classloader of consuming bundle doesn't implement BundleReference: " + bundleLoader);
1:1c43780:             return;
1:1c43780:         }
1:a8ccbc9: 
1:1c43780:         BundleReference br = ((BundleReference) bundleLoader);
1:a8ccbc9: 
1:7904fa4:         final ClassLoader cl = findContextClassloader(br.getBundle(), cls, method, clsArg);
1:1c43780:         if (cl != null) {
1:b1379cb:             BaseActivator.activator.log(LogService.LOG_INFO, "Temporarily setting Thread Context Classloader to: " + cl);
1:7904fa4:             AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:7904fa4:                 @Override
1:7904fa4:                 public Void run() {
1:7904fa4:                     Thread.currentThread().setContextClassLoader(cl);
1:7904fa4:                     return null;
1:7904fa4:                 }
1:7904fa4:             });
1:1c43780:         } else {
1:b1379cb:             BaseActivator.activator.log(LogService.LOG_WARNING, "No classloader found for " + cls + ":" + method + "(" + clsArg + ")");
1:1c43780:         }
1:1c43780:     }
1:a8ccbc9: 
1:1c43780:     private static ClassLoader findContextClassloader(Bundle consumerBundle, String className, String methodName, Class<?> clsArg) {
1:b1379cb:         BaseActivator activator = BaseActivator.activator;
1:a8ccbc9: 
1:1c43780:         String requestedClass;
1:1c43780:         Map<Pair<Integer, String>, String> args;
1:1c43780:         if (ServiceLoader.class.getName().equals(className) && "load".equals(methodName)) {
1:1c43780:             requestedClass = clsArg.getName();
1:1c43780:             args = new HashMap<Pair<Integer,String>, String>();
1:6826a3a:             args.put(new Pair<Integer, String>(0, Class.class.getName()), requestedClass);
1:6826a3a: 
1:6826a3a:             SecurityManager sm = System.getSecurityManager();
1:6826a3a:             if (sm != null) {
1:6826a3a:                 try {
1:6826a3a:                     sm.checkPermission(new ServicePermission(requestedClass, ServicePermission.GET));
1:6826a3a:                 } catch (AccessControlException ace) {
1:6826a3a:                     // access denied
1:6826a3a:                     activator.log(LogService.LOG_INFO, "No permission to obtain service of type: " + requestedClass);
1:6826a3a:                     return null;
1:6826a3a:                 }
1:6826a3a:             }
1:1c43780:         } else {
1:1c43780:             requestedClass = className;
1:1c43780:             args = null; // only supported on ServiceLoader.load() at the moment
1:1c43780:         }
1:5e890d0: 
1:1c43780:         Collection<Bundle> bundles = new ArrayList<Bundle>(activator.findProviderBundles(requestedClass));
1:1c43780:         activator.log(LogService.LOG_DEBUG, "Found bundles providing " + requestedClass + ": " + bundles);
1:a8ccbc9: 
1:1c43780:         Collection<Bundle> allowedBundles = activator.findConsumerRestrictions(consumerBundle, className, methodName, args);
1:a8ccbc9: 
1:1c43780:         if (allowedBundles != null) {
1:1c43780:             for (Iterator<Bundle> it = bundles.iterator(); it.hasNext(); ) {
1:1c43780:                 if (!allowedBundles.contains(it.next())) {
1:1c43780:                     it.remove();
1:1c43780:                 }
1:1c43780:             }
1:1c43780:         }
1:a8ccbc9: 
1:1c43780:         switch (bundles.size()) {
1:1c43780:         case 0:
1:1c43780:             return null;
1:1c43780:         case 1:
1:1c43780:             Bundle bundle = bundles.iterator().next();
1:4b6c670:             return getBundleClassLoader(bundle);
1:1c43780:         default:
1:1c43780:             List<ClassLoader> loaders = new ArrayList<ClassLoader>();
1:1c43780:             for (Bundle b : bundles) {
1:4b6c670:                 loaders.add(getBundleClassLoader(b));
1:1c43780:             }
1:1c43780:             return new MultiDelegationClassloader(loaders.toArray(new ClassLoader[loaders.size()]));
1:1c43780:         }
1:1c43780:     }
1:a8ccbc9: 
1:7904fa4:     private static ClassLoader getBundleClassLoader(final Bundle b) {
1:7904fa4:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:7904fa4:             @Override
1:7904fa4:             public ClassLoader run() {
1:7904fa4:                 return getBundleClassLoaderPrivileged(b);
1:7904fa4:             }
1:7904fa4:         });
1:7904fa4:     }
1:7904fa4: 
1:4b6c670:     @SuppressWarnings("unchecked")
1:7904fa4:     private static ClassLoader getBundleClassLoaderPrivileged(Bundle b) {
1:c144094:         // In 4.3 this can be done much easier by using the BundleWiring, but we want this code to
1:c144094:         // be 4.2 compliant.
1:c144094:         // Here we're just finding any class in the bundle, load that and then use its classloader.
1:06d1e60: 
1:0a02617:         try {
1:1362378:             Method adaptMethod = Bundle.class.getMethod("adapt", Class.class);
1:0a02617:             if (adaptMethod != null) {
1:0a02617:                 return getBundleClassLoaderViaAdapt(b, adaptMethod);
1:0a02617:             }
1:0a02617:         } catch (Exception e) {
1:0a02617:             // No Bundle.adapt(), use the fallback approach to find the bundle classloader
1:0a02617:         }
1:0a02617: 
1:faebae4:         List<String> rootPaths = new ArrayList<String>();
1:faebae4:         rootPaths.add("/");
1:06d1e60: 
1:06d1e60:         while(rootPaths.size() > 0) {
1:faebae4:             String rootPath = rootPaths.remove(0);
1:06d1e60: 
1:faebae4:             Enumeration<String> paths = b.getEntryPaths(rootPath);
1:06d1e60:             while(paths != null && paths.hasMoreElements()) {
1:faebae4:                 String path = paths.nextElement();
1:faebae4:                 if (path.endsWith(".class")) {
1:5e890d0:                     ClassLoader cl = getClassLoaderFromClassResource(b, path);
1:5e890d0:                     if (cl != null)
1:5e890d0:                         return cl;
1:faebae4:                 } else if (path.endsWith("/")) {
1:faebae4:                     rootPaths.add(path);
1:4b6c670:                 }
1:4b6c670:             }
1:4b6c670:         }
1:5e890d0: 
1:06d1e60:         // if we can't find any classes in the bundle directly, try the Bundle-ClassPath
1:5e890d0:         Object bcp = b.getHeaders().get(Constants.BUNDLE_CLASSPATH);
1:5e890d0:         if (bcp instanceof String) {
1:5e890d0:             for (String entry : ((String) bcp).split(",")) {
1:5e890d0:                 entry = entry.trim();
1:5e890d0:                 if (entry.equals("."))
1:5e890d0:                     continue;
1:06d1e60: 
1:5e890d0:                 URL url = b.getResource(entry);
1:5e890d0:                 if (url != null) {
1:5e890d0:                     ClassLoader cl = getClassLoaderViaBundleClassPath(b, url);
1:5e890d0:                     if (cl != null)
1:5e890d0:                         return cl;
1:5e890d0:                 }
1:5e890d0:             }
1:5e890d0:         }
1:4b6c670:         throw new RuntimeException("Could not obtain classloader for bundle " + b);
1:4b6c670:     }
1:5e890d0: 
1:0a02617:     private static ClassLoader getBundleClassLoaderViaAdapt(Bundle b, Method adaptMethod) {
1:0a02617:         // This method uses reflection to avoid a hard dependency on OSGi 4.3 APIs
1:0a02617:         try {
1:0a02617:             // Load the BundleRevision and BundleWiring classes from the System Bundle.
1:0a02617:             Bundle systemBundle = b.getBundleContext().getBundle(0);
1:0a02617: 
1:0a02617:             Class<?> bundleRevisionClass = systemBundle.loadClass("org.osgi.framework.wiring.BundleRevision");
1:0a02617:             Object bundleRevision = adaptMethod.invoke(b, bundleRevisionClass);
1:0a02617: 
1:0a02617:             Method getWiringMethod = bundleRevisionClass.getDeclaredMethod("getWiring");
1:0a02617:             Object bundleWiring = getWiringMethod.invoke(bundleRevision);
1:0a02617: 
1:0a02617:             Class<?> bundleWiringClass = systemBundle.loadClass("org.osgi.framework.wiring.BundleWiring");
1:0a02617:             Method getClassLoaderMethod = bundleWiringClass.getDeclaredMethod("getClassLoader");
1:0a02617: 
1:0a02617:             return (ClassLoader) getClassLoaderMethod.invoke(bundleWiring);
1:0a02617:         } catch (Exception e) {
1:0a02617:             throw new RuntimeException("Can't obtain Bundle Class Loader for bundle: " + b, e);
1:0a02617:         }
1:0a02617:     }
1:0a02617: 
1:5e890d0:     private static ClassLoader getClassLoaderViaBundleClassPath(Bundle b, URL url) {
1:5e890d0:         try {
1:5e890d0:             JarInputStream jis = null;
1:5e890d0:             try {
1:5e890d0:                 jis = new JarInputStream(url.openStream());
1:06d1e60: 
1:5e890d0:                 JarEntry je = null;
1:5e890d0:                 while ((je = jis.getNextJarEntry()) != null) {
1:5e890d0:                     String path = je.getName();
1:5e890d0:                     if (path.endsWith(".class")) {
1:5e890d0:                         ClassLoader cl = getClassLoaderFromClassResource(b, path);
1:5e890d0:                         if (cl != null)
1:5e890d0:                             return cl;
1:5e890d0:                     }
1:5e890d0:                 }
1:5e890d0:             } finally {
1:5e890d0:                 if (jis != null)
1:5e890d0:                     jis.close();
1:5e890d0:             }
1:5e890d0:         } catch (IOException e) {
1:5e890d0:             BaseActivator.activator.log(LogService.LOG_ERROR, "Problem loading class from embedded jar file: " + url +
1:06d1e60:                 " in bundle " + b.getSymbolicName(), e);
1:5e890d0:         }
1:5e890d0:         return null;
1:5e890d0:     }
1:5e890d0: 
1:5e890d0:     private static ClassLoader getClassLoaderFromClassResource(Bundle b, String path) {
1:5e890d0:         String className = path.substring(0, path.length() - ".class".length());
1:5e890d0:         if (className.startsWith("/"))
1:5e890d0:             className = className.substring(1);
1:5e890d0: 
1:5e890d0:         className = className.replace('/', '.');
1:5e890d0:         try {
1:5e890d0:             Class<?> cls = b.loadClass(className);
1:5e890d0:             return cls.getClassLoader();
1:5e890d0:         } catch (ClassNotFoundException e) {
1:5e890d0:             // try the next class
1:5e890d0:         }
1:5e890d0:         return null;
1:5e890d0:     }
1:faebae4: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:b302317
/////////////////////////////////////////////////////////////////////////
1:         if (BaseActivator.activator == null) {
1:             // The system is not yet initialized. We can't do anything.
1:             return;
1:         }
1: 
commit:7904fa4
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
/////////////////////////////////////////////////////////////////////////
1:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:             @Override
1:             public Void run() {
1:                 storedClassLoaders.set(Thread.currentThread().getContextClassLoader());
1:                 return null;
1:             }
1:         });
1:         AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:             @Override
1:             public Void run() {
1:                 Thread.currentThread().setContextClassLoader(storedClassLoaders.get());
1:                 storedClassLoaders.set(null);
1:                 return null;
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         final ClassLoader cl = findContextClassloader(br.getBundle(), cls, method, clsArg);
1:             AccessController.doPrivileged(new PrivilegedAction<Void>() {
1:                 @Override
1:                 public Void run() {
1:                     Thread.currentThread().setContextClassLoader(cl);
1:                     return null;
1:                 }
1:             });
/////////////////////////////////////////////////////////////////////////
1:     private static ClassLoader getBundleClassLoader(final Bundle b) {
1:         return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:             @Override
1:             public ClassLoader run() {
1:                 return getBundleClassLoaderPrivileged(b);
1:             }
1:         });
1:     }
1: 
1:     private static ClassLoader getBundleClassLoaderPrivileged(Bundle b) {
commit:6826a3a
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessControlException;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServicePermission;
/////////////////////////////////////////////////////////////////////////
1:             args.put(new Pair<Integer, String>(0, Class.class.getName()), requestedClass);
1: 
1:             SecurityManager sm = System.getSecurityManager();
1:             if (sm != null) {
1:                 try {
1:                     sm.checkPermission(new ServicePermission(requestedClass, ServicePermission.GET));
1:                 } catch (AccessControlException ace) {
1:                     // access denied
1:                     activator.log(LogService.LOG_INFO, "No permission to obtain service of type: " + requestedClass);
1:                     return null;
1:                 }
1:             }
commit:1362378
/////////////////////////////////////////////////////////////////////////
1:             Method adaptMethod = Bundle.class.getMethod("adapt", Class.class);
commit:0a02617
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             Method adaptMethod = b.getClass().getMethod("adapt", Class.class);
1:             if (adaptMethod != null) {
1:                 return getBundleClassLoaderViaAdapt(b, adaptMethod);
1:             }
1:         } catch (Exception e) {
1:             // No Bundle.adapt(), use the fallback approach to find the bundle classloader
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static ClassLoader getBundleClassLoaderViaAdapt(Bundle b, Method adaptMethod) {
1:         // This method uses reflection to avoid a hard dependency on OSGi 4.3 APIs
1:         try {
1:             // Load the BundleRevision and BundleWiring classes from the System Bundle.
1:             Bundle systemBundle = b.getBundleContext().getBundle(0);
1: 
1:             Class<?> bundleRevisionClass = systemBundle.loadClass("org.osgi.framework.wiring.BundleRevision");
1:             Object bundleRevision = adaptMethod.invoke(b, bundleRevisionClass);
1: 
1:             Method getWiringMethod = bundleRevisionClass.getDeclaredMethod("getWiring");
1:             Object bundleWiring = getWiringMethod.invoke(bundleRevision);
1: 
1:             Class<?> bundleWiringClass = systemBundle.loadClass("org.osgi.framework.wiring.BundleWiring");
1:             Method getClassLoaderMethod = bundleWiringClass.getDeclaredMethod("getClassLoader");
1: 
1:             return (ClassLoader) getClassLoaderMethod.invoke(bundleWiring);
1:         } catch (Exception e) {
1:             throw new RuntimeException("Can't obtain Bundle Class Loader for bundle: " + b, e);
1:         }
1:     }
1: 
commit:06d1e60
/////////////////////////////////////////////////////////////////////////
1:     // Provided as static method to make it easier to call from ASM-modified code
1:     // Provided as static method to make it easier to call from ASM-modified code
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         while(rootPaths.size() > 0) {
1: 
1:             while(paths != null && paths.hasMoreElements()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         // if we can't find any classes in the bundle directly, try the Bundle-ClassPath
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 " in bundle " + b.getSymbolicName(), e);
commit:5e890d0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.jar.JarEntry;
1: import java.util.jar.JarInputStream;
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:                     ClassLoader cl = getClassLoaderFromClassResource(b, path);
1:                     if (cl != null)
1:                         return cl;
1:         
0:         // if we can't find any classes in the bundle directly, try the Bundle-ClassPath 
1:         Object bcp = b.getHeaders().get(Constants.BUNDLE_CLASSPATH);
1:         if (bcp instanceof String) {
1:             for (String entry : ((String) bcp).split(",")) {
1:                 entry = entry.trim();
1:                 if (entry.equals("."))
1:                     continue;
1:                 
1:                 URL url = b.getResource(entry);
1:                 if (url != null) {
1:                     ClassLoader cl = getClassLoaderViaBundleClassPath(b, url);
1:                     if (cl != null)
1:                         return cl;
1:                 }
1:             }
1:         }
1: 
1:     private static ClassLoader getClassLoaderViaBundleClassPath(Bundle b, URL url) {
1:         try {
1:             JarInputStream jis = null;
1:             try {
1:                 jis = new JarInputStream(url.openStream());
1:                 
1:                 JarEntry je = null;
1:                 while ((je = jis.getNextJarEntry()) != null) {
1:                     String path = je.getName();
1:                     if (path.endsWith(".class")) {
1:                         ClassLoader cl = getClassLoaderFromClassResource(b, path);
1:                         if (cl != null)
1:                             return cl;
1:                     }
1:                 }
1:             } finally {
1:                 if (jis != null)
1:                     jis.close();
1:             }
1:         } catch (IOException e) {
1:             BaseActivator.activator.log(LogService.LOG_ERROR, "Problem loading class from embedded jar file: " + url +
0:                 " in bundle " + b.getSymbolicName(), e);            
1:         }
1:         return null;
1:     }
1: 
1:     private static ClassLoader getClassLoaderFromClassResource(Bundle b, String path) {
1:         String className = path.substring(0, path.length() - ".class".length());
1:         if (className.startsWith("/"))
1:             className = className.substring(1);
1: 
1:         className = className.replace('/', '.');
1:         try {
1:             Class<?> cls = b.loadClass(className);
1:             return cls.getClassLoader();
1:         } catch (ClassNotFoundException e) {
1:             // try the next class
1:         }
1:         return null;
1:     }
commit:faebae4
/////////////////////////////////////////////////////////////////////////
0: import java.util.ListIterator;
/////////////////////////////////////////////////////////////////////////
1:         
1:         List<String> rootPaths = new ArrayList<String>();
1:         rootPaths.add("/");
1:         
0:         while(rootPaths.size() > 0) {            
1:             String rootPath = rootPaths.remove(0);
1:             
1:             Enumeration<String> paths = b.getEntryPaths(rootPath);
0:             while(paths.hasMoreElements()) {
1:                 String path = paths.nextElement();
1:                 if (path.endsWith(".class")) {
0:                     String className = path.substring(0,path.length() - ".class".length());
0:                     if (className.startsWith("/"))
0:                         className = className.substring(1);
0:                     className = className.replace('/', '.');
0:                     try {
0:                         Class<?> cls = b.loadClass(className);
0:                         return cls.getClassLoader();
0:                     } catch (ClassNotFoundException e) {
0:                         // try the next class
1:                     }
1:                 } else if (path.endsWith("/")) {
1:                     rootPaths.add(path);
commit:c144094
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // In 4.3 this can be done much easier by using the BundleWiring, but we want this code to
1:         // be 4.2 compliant.
1:         // Here we're just finding any class in the bundle, load that and then use its classloader.
commit:a8ccbc9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: /**
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("~~~ cls: " + cls + " method: " + method + " clarg:" + clsArg + " cl:" + bundleLoader + " clientBundle: " + br.getBundle().getSymbolicName());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: //            return wiring.getClassLoader();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 if (className.startsWith("/"))
0:                     className = className.substring(1);
0: 
0:                 } catch (ClassNotFoundException e) {
commit:4b6c670
/////////////////////////////////////////////////////////////////////////
0: import java.net.URL;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return getBundleClassLoader(bundle);
0: //            BundleWiring wiring = bundle.adapt(BundleWiring.class);
0: //            return wiring.getClassLoader();            
0: //                BundleWiring bw = b.adapt(BundleWiring.class);
0: //                loaders.add(bw.getClassLoader());
1:                 loaders.add(getBundleClassLoader(b));
0:     
1:     @SuppressWarnings("unchecked")
0:     private static ClassLoader getBundleClassLoader(Bundle b) {
0:         // In 4.3 this can be done much easier by using the BundleWiring...
0:         // but here we're just finding any class in the bundle, load that and then use its classloader.
0:         Enumeration<String> paths = b.getEntryPaths("/");
0:         while(paths.hasMoreElements()) {
0:             String path = paths.nextElement();
0:             if (path.endsWith(".class")) {
0:                 String className = path.substring(0,path.length() - ".class".length());
0:                 className = className.replace('/', '.');
0:                 try {
0:                     Class<?> cls = b.loadClass(className);
0:                     return cls.getClassLoader();
0:                 } catch (ClassNotFoundException e) {                    
0:                     // try the next class
1:                 }
1:             }
1:         }
1:         throw new RuntimeException("Could not obtain classloader for bundle " + b);
1:     }
commit:b1379cb
/////////////////////////////////////////////////////////////////////////
1:             BaseActivator.activator.log(LogService.LOG_WARNING, "Classloader of consuming bundle doesn't implement BundleReference: " + bundleLoader);
/////////////////////////////////////////////////////////////////////////
1:             BaseActivator.activator.log(LogService.LOG_INFO, "Temporarily setting Thread Context Classloader to: " + cl);
1:             BaseActivator.activator.log(LogService.LOG_WARNING, "No classloader found for " + cls + ":" + method + "(" + clsArg + ")");
1:         BaseActivator activator = BaseActivator.activator;
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.ServiceLoader;
0: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleReference;
0: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.log.LogService;
0: 
1: /** 
1:  * Methods used from ASM-generated code. They store, change and reset the thread context classloader.
1:  * The methods are static to make it easy to access them from generated code.
1:  */
1: public class Util {
1:     static ThreadLocal<ClassLoader> storedClassLoaders = new ThreadLocal<ClassLoader>();
0:     
1:     public static void storeContextClassloader() {
0:         storedClassLoaders.set(Thread.currentThread().getContextClassLoader());
1:     }
0:     
1:     public static void restoreContextClassloader() {
0:         Thread.currentThread().setContextClassLoader(storedClassLoaders.get());
0:         storedClassLoaders.set(null);
1:     }
0:         
1:     public static void fixContextClassloader(String cls, String method, Class<?> clsArg, ClassLoader bundleLoader) {
1:         if (!(bundleLoader instanceof BundleReference)) {
0:             Activator.activator.log(LogService.LOG_WARNING, "Classloader of consuming bundle doesn't implement BundleReference: " + bundleLoader);
1:             return;
1:         }
0: 
1:         BundleReference br = ((BundleReference) bundleLoader);
0:         System.out.println("~~~ cls: " + cls + " method: " + method + " clarg:" + clsArg + " cl:" + bundleLoader + " clientBundle: " + br.getBundle().getSymbolicName());        
0:         
0:         ClassLoader cl = findContextClassloader(br.getBundle(), cls, method, clsArg);
1:         if (cl != null) {
0:             Activator.activator.log(LogService.LOG_INFO, "Temporarily setting Thread Context Classloader to: " + cl);
0:             Thread.currentThread().setContextClassLoader(cl);
1:         } else {
0:             Activator.activator.log(LogService.LOG_WARNING, "No classloader found for " + cls + ":" + method + "(" + clsArg + ")");
1:         }
1:     }
0:     
1:     private static ClassLoader findContextClassloader(Bundle consumerBundle, String className, String methodName, Class<?> clsArg) {
0:         Activator activator = Activator.activator;
0:         
1:         String requestedClass;
1:         Map<Pair<Integer, String>, String> args;
1:         if (ServiceLoader.class.getName().equals(className) && "load".equals(methodName)) {
1:             requestedClass = clsArg.getName();
1:             args = new HashMap<Pair<Integer,String>, String>();
0:             args.put(new Pair<Integer, String>(0, Class.class.getName()), clsArg.getName());
1:         } else {
1:             requestedClass = className;
1:             args = null; // only supported on ServiceLoader.load() at the moment
1:         }
0: 
1:         Collection<Bundle> bundles = new ArrayList<Bundle>(activator.findProviderBundles(requestedClass));
1:         activator.log(LogService.LOG_DEBUG, "Found bundles providing " + requestedClass + ": " + bundles);
0:                 
1:         Collection<Bundle> allowedBundles = activator.findConsumerRestrictions(consumerBundle, className, methodName, args);
0: 
1:         if (allowedBundles != null) {
1:             for (Iterator<Bundle> it = bundles.iterator(); it.hasNext(); ) {
1:                 if (!allowedBundles.contains(it.next())) {
1:                     it.remove();
1:                 }
1:             }
1:         }
0:         
1:         switch (bundles.size()) {
1:         case 0:
1:             return null;
1:         case 1:
1:             Bundle bundle = bundles.iterator().next();
0:             BundleWiring wiring = bundle.adapt(BundleWiring.class);
0:             return wiring.getClassLoader();            
1:         default:
1:             List<ClassLoader> loaders = new ArrayList<ClassLoader>();
1:             for (Bundle b : bundles) {
0:                 BundleWiring bw = b.adapt(BundleWiring.class);
0:                 loaders.add(bw.getClassLoader());
1:             }
1:             return new MultiDelegationClassloader(loaders.toArray(new ClassLoader[loaders.size()]));
1:         }
1:     }
1: }
============================================================================