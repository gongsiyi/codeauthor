1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
13:875a6d6: 
1:a990e32: import java.util.Collection;
1:875a6d6: import java.util.Collections;
1:875a6d6: 
1:b8ad309: import org.osgi.service.subsystem.SubsystemConstants;
1:875a6d6: 
1:2ffcfb9: public class SubsystemTypeHeader extends AbstractClauseBasedHeader<SubsystemTypeHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:a990e32:     	private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1:a990e32:     			ProvisionPolicyDirective.REJECT_DEPENDENCIES);
1:a990e32:     	
1:875a6d6: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9:             		parsePath(clause, Patterns.SUBSYSTEM_TYPE, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:a990e32:             		defaultParameters);
1:a990e32: 		}
1:a990e32: 		
1:a990e32: 		public AriesProvisionDependenciesDirective getProvisionDependenciesDirective() {
1:a990e32: 			return (AriesProvisionDependenciesDirective)getDirective(DIRECTIVE_PROVISION_DEPENDENCIES);
18:875a6d6: 		}
1:2ffcfb9: 				
1:875a6d6: 		public ProvisionPolicyDirective getProvisionPolicyDirective() {
1:875a6d6: 			return (ProvisionPolicyDirective)getDirective(DIRECTIVE_PROVISION_POLICY);
1:875a6d6: 		}
1:875a6d6: 		
1:875a6d6: 		public String getType() {
2:875a6d6: 			return path;
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: 	
1:a990e32: 	public static final String DIRECTIVE_PROVISION_DEPENDENCIES = AriesProvisionDependenciesDirective.NAME;
1:a990e32:     public static final String DIRECTIVE_PROVISION_POLICY = ProvisionPolicyDirective.NAME;
1:875a6d6: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_TYPE;
1:a990e32: 	public static final String ARIES_PROVISION_DEPENDENCIES_INSTALL = AriesProvisionDependenciesDirective.VALUE_INSTALL;
1:a990e32: 	public static final String ARIES_PROVISION_DEPENDENCIES_RESOLVE = AriesProvisionDependenciesDirective.VALUE_RESOLVE;
1:a990e32: 	public static final String PROVISION_POLICY_ACCEPT_DEPENDENCIES = ProvisionPolicyDirective.VALUE_ACCEPT_DEPENDENCIES;
1:a990e32: 	public static final String PROVISION_POLICY_REJECT_DEPENDENCIES = ProvisionPolicyDirective.VALUE_REJECT_DEPENDENCIES;
1:875a6d6: 	public static final String TYPE_APPLICATION = SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;
1:875a6d6: 	public static final String TYPE_COMPOSITE = SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE;
1:875a6d6: 	public static final String TYPE_FEATURE = SubsystemConstants.SUBSYSTEM_TYPE_FEATURE;
1:875a6d6: 	
1:875a6d6: 	public static final SubsystemTypeHeader DEFAULT = new SubsystemTypeHeader(TYPE_APPLICATION);
1:875a6d6: 	
1:875a6d6: 	public SubsystemTypeHeader(Clause clause) {
1:2ffcfb9: 		super(Collections.singleton(clause));
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public SubsystemTypeHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:875a6d6: 	}
1:2ffcfb9: 
1:2ffcfb9:     public Clause getClause() {
1:2ffcfb9: 		return clauses.iterator().next();
1:875a6d6: 	}
1:875a6d6: 
11:875a6d6: 	@Override
1:875a6d6: 	public String getName() {
1:875a6d6: 		return NAME;
1:875a6d6: 	}
1:875a6d6: 	
1:a990e32: 	public AriesProvisionDependenciesDirective getAriesProvisionDependenciesDirective() {
1:a990e32: 		return clauses.iterator().next().getProvisionDependenciesDirective();
1:a990e32: 	}
1:a990e32: 	
1:875a6d6: 	public ProvisionPolicyDirective getProvisionPolicyDirective() {
1:2ffcfb9: 		return clauses.iterator().next().getProvisionPolicyDirective();
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public String getType() {
1:2ffcfb9: 		return clauses.iterator().next().getType();
1:875a6d6: 	}
1:875a6d6: 
1:875a6d6: 	@Override
1:875a6d6: 	public String getValue() {
1:875a6d6: 		return toString();
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public boolean isApplication() {
1:875a6d6: 		return this == DEFAULT || TYPE_APPLICATION.equals(getType());
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public boolean isComposite() {
1:875a6d6: 		return TYPE_COMPOSITE.equals(getType());
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public boolean isFeature() {
1:875a6d6: 		return TYPE_FEATURE.equals(getType());
1:875a6d6: 	}
1:875a6d6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1:     	private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1:     			ProvisionPolicyDirective.REJECT_DEPENDENCIES);
1:     	
1:             		defaultParameters);
1: 		}
1: 		
1: 		public AriesProvisionDependenciesDirective getProvisionDependenciesDirective() {
1: 			return (AriesProvisionDependenciesDirective)getDirective(DIRECTIVE_PROVISION_DEPENDENCIES);
/////////////////////////////////////////////////////////////////////////
1: 	public static final String DIRECTIVE_PROVISION_DEPENDENCIES = AriesProvisionDependenciesDirective.NAME;
1:     public static final String DIRECTIVE_PROVISION_POLICY = ProvisionPolicyDirective.NAME;
1: 	public static final String ARIES_PROVISION_DEPENDENCIES_INSTALL = AriesProvisionDependenciesDirective.VALUE_INSTALL;
1: 	public static final String ARIES_PROVISION_DEPENDENCIES_RESOLVE = AriesProvisionDependenciesDirective.VALUE_RESOLVE;
1: 	public static final String PROVISION_POLICY_ACCEPT_DEPENDENCIES = ProvisionPolicyDirective.VALUE_ACCEPT_DEPENDENCIES;
1: 	public static final String PROVISION_POLICY_REJECT_DEPENDENCIES = ProvisionPolicyDirective.VALUE_REJECT_DEPENDENCIES;
/////////////////////////////////////////////////////////////////////////
1: 	public AriesProvisionDependenciesDirective getAriesProvisionDependenciesDirective() {
1: 		return clauses.iterator().next().getProvisionDependenciesDirective();
1: 	}
1: 	
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class SubsystemTypeHeader extends AbstractClauseBasedHeader<SubsystemTypeHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 			super(
1:             		parsePath(clause, Patterns.SUBSYSTEM_TYPE, false), 
1:             		parseParameters(clause, false), 
0:             		generateDefaultParameters(
0:             				ProvisionPolicyDirective.REJECT_DEPENDENCIES));
1: 				
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		super(Collections.singleton(clause));
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 
1:     public Clause getClause() {
1: 		return clauses.iterator().next();
/////////////////////////////////////////////////////////////////////////
1: 		return clauses.iterator().next().getProvisionPolicyDirective();
1: 		return clauses.iterator().next().getType();
/////////////////////////////////////////////////////////////////////////
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
0: public class SubsystemTypeHeader implements Header<SubsystemTypeHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		private static final Pattern PATTERN_TYPE = Pattern.compile('(' + TYPE_APPLICATION + '|' + TYPE_COMPOSITE + '|' + TYPE_FEATURE + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PROVISION_POLICY = Pattern.compile(PROVISION_POLICY_ACCEPT_DEPENDENCIES + '|' + PROVISION_POLICY_REJECT_DEPENDENCIES);
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(DIRECTIVE_PROVISION_POLICY);
0: 			if (parameter == null)
0: 				parameter = ProvisionPolicyDirective.REJECT_DEPENDENCIES;
0: 			String value = ((Directive)parameter).getValue();
0: 			if (!PATTERN_PROVISION_POLICY.matcher(value).matches())
0: 				throw new IllegalArgumentException("Invalid " + DIRECTIVE_PROVISION_POLICY + " directive: " + value);
0: 			parameters.put(DIRECTIVE_PROVISION_POLICY, parameter);
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_TYPE.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Invalid subsystem type: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public ProvisionPolicyDirective getProvisionPolicyDirective() {
1: 			return (ProvisionPolicyDirective)getDirective(DIRECTIVE_PROVISION_POLICY);
1: 		}
1: 		
1: 		public String getType() {
1: 			return path;
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
0: 	public static final String DIRECTIVE_PROVISION_POLICY = SubsystemConstants.PROVISION_POLICY_DIRECTIVE;
1: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_TYPE;
0: 	public static final String PROVISION_POLICY_ACCEPT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES;
0: 	public static final String PROVISION_POLICY_REJECT_DEPENDENCIES = SubsystemConstants.PROVISION_POLICY_REJECT_DEPENDENCIES;
1: 	public static final String TYPE_APPLICATION = SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;
1: 	public static final String TYPE_COMPOSITE = SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE;
1: 	public static final String TYPE_FEATURE = SubsystemConstants.SUBSYSTEM_TYPE_FEATURE;
1: 	
1: 	public static final SubsystemTypeHeader DEFAULT = new SubsystemTypeHeader(TYPE_APPLICATION);
1: 	
0: 	private final Clause clause;
1: 	
1: 	public SubsystemTypeHeader(Clause clause) {
0: 		if (clause == null)
0: 			throw new NullPointerException("Missing required parameter: clause");
0: 		this.clause = clause;
1: 	}
1: 	
1: 	public SubsystemTypeHeader(String value) {
0: 		this(new Clause(value));
1: 	}
1: 	
0: 	public Clause getClause() {
0: 		return clause;
1: 	}
1: 	
1: 	@Override
0: 	public Collection<SubsystemTypeHeader.Clause> getClauses() {
0: 		return Collections.singleton(clause);
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 	
1: 	public ProvisionPolicyDirective getProvisionPolicyDirective() {
0: 		return clause.getProvisionPolicyDirective();
1: 	}
1: 	
1: 	public String getType() {
0: 		return clause.getType();
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	public boolean isApplication() {
1: 		return this == DEFAULT || TYPE_APPLICATION.equals(getType());
1: 	}
1: 	
1: 	public boolean isComposite() {
1: 		return TYPE_COMPOSITE.equals(getType());
1: 	}
1: 	
1: 	public boolean isFeature() {
1: 		return TYPE_FEATURE.equals(getType());
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
commit:b8ad309
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
0: 
0: 	public static final String DEFAULT_VALUE = SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;
0: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_TYPE;
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
0: public class SubsystemTypeHeader extends AbstractHeader {
0: 	public static final SubsystemTypeHeader DEFAULT = new SubsystemTypeHeader();
0: 	// TODO Add to constants.
0: 	public static final String DEFAULT_VALUE = "osgi.application";
0: 	// TODO Add to constants.
0: 	public static final String NAME = "Subsystem-Type";
0: 	
0: 	public SubsystemTypeHeader() {
0: 		this(DEFAULT_VALUE);
0: 	}
0: 
0: 	public SubsystemTypeHeader(String value) {
0: 		super(NAME, value);
0: 	}
0: }
============================================================================