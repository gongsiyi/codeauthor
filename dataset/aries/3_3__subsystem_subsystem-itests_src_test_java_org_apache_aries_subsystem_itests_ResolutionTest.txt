1:bfcd190: /*
1:bfcd190:  * Licensed to the Apache Software Foundation (ASF) under one
1:bfcd190:  * or more contributor license agreements.  See the NOTICE file
1:bfcd190:  * distributed with this work for additional information
1:bfcd190:  * regarding copyright ownership.  The ASF licenses this file
1:bfcd190:  * to you under the Apache License, Version 2.0 (the
1:bfcd190:  * "License"); you may not use this file except in compliance
1:bfcd190:  * with the License.  You may obtain a copy of the License at
1:bfcd190:  *
1:bfcd190:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bfcd190:  *
1:bfcd190:  * Unless required by applicable law or agreed to in writing,
1:bfcd190:  * software distributed under the License is distributed on an
1:bfcd190:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bfcd190:  * KIND, either express or implied.  See the License for the
1:bfcd190:  * specific language governing permissions and limitations
1:bfcd190:  * under the License.
1:bfcd190:  */
1:bfcd190: package org.apache.aries.subsystem.itests;
1:bfcd190: 
1:bfcd190: import static org.junit.Assert.assertEquals;
1:f46e7d5: import static org.junit.Assert.assertTrue;
1:bfcd190: import static org.junit.Assert.fail;
1:bfcd190: 
1:bfcd190: import java.io.IOException;
1:a6b79e8: import java.util.Collections;
1:bfcd190: import java.util.HashMap;
1:bfcd190: import java.util.Map;
1:bfcd190: 
1:4a66095: import org.apache.aries.subsystem.core.archive.Clause;
1:4a66095: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
1:bfcd190: import org.junit.Before;
1:bfcd190: import org.junit.Test;
1:bfcd190: import org.osgi.framework.Bundle;
1:bfcd190: import org.osgi.framework.Constants;
1:f46e7d5: import org.osgi.service.resolver.ResolutionException;
1:bfcd190: import org.osgi.service.subsystem.Subsystem;
1:bfcd190: import org.osgi.service.subsystem.SubsystemConstants;
1:bfcd190: import org.osgi.service.subsystem.SubsystemException;
1:bfcd190: 
1:bfcd190: /*
1:bfcd190:  * Contains a series of tests related to resolution.
1:bfcd190:  */
1:bfcd190: public class ResolutionTest extends SubsystemTest {
1:bfcd190: 	/*
1:bfcd190: 	 * Subsystem-SymbolicName: application.a.esa
1:bfcd190: 	 * Subsystem-Content: bundle.a.jar
1:bfcd190: 	 */
1:bfcd190: 	private static final String APPLICATION_A = "application.a.esa";
1:bfcd190: 	/*
1:f46e7d5: 	 * Subsystem-SymbolicName: application.b.esa
1:f46e7d5: 	 * Subsystem-Content: bundle.d.jar
1:f46e7d5: 	 */
1:f46e7d5: 	private static final String APPLICATION_B = "application.b.esa";
1:f46e7d5: 	/*
1:7219e73: 	 * Subsystem-SymbolicName: application.c.esa
1:7219e73: 	 * Subsystem-Content: bundle.e.jar
1:7219e73: 	 */
1:7219e73: 	private static final String APPLICATION_C = "application.c.esa";
1:7219e73: 	/*
1:a6b79e8: 	 * Subsystem-SymbolicName: application.d.esa
1:a6b79e8: 	 * Subsystem-Content: bundle.f.jar
1:a6b79e8: 	 */
1:a6b79e8: 	private static final String APPLICATION_D = "application.d.esa";
1:a6b79e8: 	/* Subsystem-SymbolicName: application.e.esa
1:a6b79e8: 	 * Subsystem-Content: bundle.g.jar
1:a6b79e8: 	 */
1:a6b79e8: 	private static final String APPLICATION_E = "application.e.esa";
1:a6b79e8: 	/*
1:bfcd190: 	 * Bundle-SymbolicName: bundle.a.jar
1:bfcd190: 	 * Require-Capability: a
1:bfcd190: 	 */
1:bfcd190: 	private static final String BUNDLE_A = "bundle.a.jar";
1:bfcd190: 	/*
1:bfcd190: 	 * Bundle-SymbolicName: bundle.b.jar
1:bfcd190: 	 * Provide-Capability: a
1:bfcd190: 	 * Require-Capability: b
1:bfcd190: 	 */
1:bfcd190: 	private static final String BUNDLE_B = "bundle.b.jar";
1:bfcd190: 	/*
1:bfcd190: 	 * Bundle-SymbolicName: bundle.c.jar
1:bfcd190: 	 * Provide-Capability: b
1:bfcd190: 	 */
1:bfcd190: 	private static final String BUNDLE_C = "bundle.c.jar";
1:f46e7d5: 	/*
1:f46e7d5: 	 * Bundle-SymbolicName: bundle.d.jar
1:f46e7d5: 	 * Bundle-RequiredExecutionEnvironment: JavaSE-100.100
1:f46e7d5: 	 */
1:f46e7d5: 	private static final String BUNDLE_D = "bundle.d.jar";
1:7219e73: 	/*
1:7219e73: 	 * Bundle-SymbolicName: bundle.e.jar
1:7219e73: 	 * Bundle-RequiredExecutionEnvironment: J2SE-1.4, J2SE-1.5,		J2SE-1.6,JavaSE-1.7
1:7219e73: 	 */
1:7219e73: 	private static final String BUNDLE_E = "bundle.e.jar";
1:bfcd190: 
1:a6b79e8: 	/*
1:a6b79e8: 	 * Bundle-SymbolicName: bundle.f.jar
1:a6b79e8: 	 * Bundle-NativeCode: \
1:a6b79e8: 	 *   native.file; osname=Linux; processor=x86, \
1:a6b79e8: 	 *   native.file; osname=Linux; processor=x86-64, \
1:a6b79e8: 	 *   native.file; osname=Win32; processor=x86, \
1:a6b79e8: 	 *   native.file; osname=Win32; processor=x86-64, \
1:a6b79e8: 	 *   native.file; osname="mac os x"; processor=x86-64
1:a6b79e8: 	 */
1:a6b79e8: 	private static final String BUNDLE_F = "bundle.f.jar";
1:a6b79e8: 
1:a6b79e8: 	/*
1:a6b79e8: 	 * Bundle-SymbolicName: bundle.f.jar
1:a6b79e8: 	 * Bundle-NativeCode: \
1:a6b79e8: 	 *   native.file; osname=noMatch; processor=noMatch
1:a6b79e8: 	 */
1:a6b79e8: 	private static final String BUNDLE_G = "bundle.g.jar";
1:a6b79e8: 	
1:bfcd190: 	@Before
1:57b6627: 	public void createApplications() throws Exception {
1:bfcd190: 		if (createdApplications) {
1:bfcd190: 			return;
1:bfcd190: 		};
1:bfcd190: 		createBundleA();
1:bfcd190: 		createBundleB();
1:bfcd190: 		createBundleC();
1:f46e7d5: 		createBundleD();
1:7219e73: 		createBundleE();
1:a6b79e8: 		createBundleF();
1:a6b79e8: 		createBundleG();
1:bfcd190: 		createApplicationA();
1:f46e7d5: 		createApplicationB();
1:7219e73: 		createApplicationC();
1:a6b79e8: 		createApplicationD();
1:a6b79e8: 		createApplicationE();
1:bfcd190: 		createdApplications = true;
1:bfcd190: 	}
1:bfcd190: 	
1:bfcd190: 	private static void createApplicationA() throws IOException {
1:bfcd190: 		createApplicationAManifest();
1:bfcd190: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:bfcd190: 	}
1:bfcd190: 	
1:bfcd190: 	private static void createApplicationAManifest() throws IOException {
1:bfcd190: 		Map<String, String> attributes = new HashMap<String, String>();
1:bfcd190: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:bfcd190: 		createManifest(APPLICATION_A + ".mf", attributes);
1:bfcd190: 	}
1:bfcd190: 	
1:f46e7d5: 	private static void createApplicationB() throws IOException {
1:f46e7d5: 		createApplicationBManifest();
1:f46e7d5: 		createSubsystem(APPLICATION_B, BUNDLE_D);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private static void createApplicationBManifest() throws IOException {
1:f46e7d5: 		Map<String, String> attributes = new HashMap<String, String>();
1:f46e7d5: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:f46e7d5: 		createManifest(APPLICATION_B + ".mf", attributes);
1:f46e7d5: 	}
1:f46e7d5: 	
1:7219e73: 	private static void createApplicationC() throws IOException {
1:7219e73: 		createApplicationCManifest();
1:7219e73: 		createSubsystem(APPLICATION_C, BUNDLE_E);
1:7219e73: 	}
1:7219e73: 	
1:7219e73: 	private static void createApplicationCManifest() throws IOException {
1:7219e73: 		Map<String, String> attributes = new HashMap<String, String>();
1:7219e73: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_C);
1:7219e73: 		createManifest(APPLICATION_C + ".mf", attributes);
1:7219e73: 	}
1:7219e73: 
1:a6b79e8: 	private static void createApplicationD() throws IOException {
1:a6b79e8: 		createApplicationDManifest();
1:a6b79e8: 		createSubsystem(APPLICATION_D, BUNDLE_F);
1:bfcd190: 	}
1:bfcd190: 
1:a6b79e8: 	private static void createApplicationDManifest() throws IOException {
1:a6b79e8: 		Map<String, String> attributes = new HashMap<String, String>();
1:a6b79e8: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_D);
1:a6b79e8: 		createManifest(APPLICATION_D + ".mf", attributes);
1:bfcd190: 	}
1:bfcd190: 
1:a6b79e8: 	private static void createApplicationE() throws IOException {
1:a6b79e8: 		createApplicationEManifest();
1:a6b79e8: 		createSubsystem(APPLICATION_E, BUNDLE_G);
1:bfcd190: 	}
1:bfcd190: 
1:a6b79e8: 	private static void createApplicationEManifest() throws IOException {
1:a6b79e8: 		Map<String, String> attributes = new HashMap<String, String>();
1:a6b79e8: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_E);
1:a6b79e8: 		createManifest(APPLICATION_E + ".mf", attributes);
1:a6b79e8: 	}
1:a6b79e8: 
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "a"));
1:a6b79e8: 	}
1:a6b79e8: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), 
1:57b6627: 				provideCapability("a"),
1:57b6627: 				requireCapability("b"));
1:a6b79e8: 	}
1:a6b79e8: 	
1:57b6627: 	private void createBundleC() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_C), provideCapability("b"));
1:a6b79e8: 	}
1:a6b79e8: 	
1:7219e73: 	@SuppressWarnings("deprecation")
1:57b6627: 	private void createBundleD() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_D), new Header(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "JavaSE-100.100"));
1:7219e73: 	}
1:7219e73: 	
1:f46e7d5: 	@SuppressWarnings("deprecation")
1:57b6627: 	private void createBundleE() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_E), new Header(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "J2SE-1.4, J2SE-1.5,		J2SE-1.6,JavaSE-1.7"));
1:f46e7d5: 	}
1:f46e7d5: 	
1:a6b79e8: 	private void createBundleF() throws IOException {
1:a6b79e8: 		createBundle(Collections.singletonList("native.file"), name(BUNDLE_F), new Header(Constants.BUNDLE_NATIVECODE,
1:a6b79e8: 				"native.file; osname=Linux; processor=x86,"
1:a6b79e8: 				+ "native.file; osname=Linux; processor=x86-64,"
1:a6b79e8: 				+ "native.file; osname=Win32; processor=x86,"
1:a6b79e8: 				+ "native.file; osname=Win32; processor=x86-64,"
1:a6b79e8: 				+ "native.file; osname=\"MacOSX\"; processor=x86-64"));
1:a6b79e8: 	}
1:a6b79e8: 	private void createBundleG() throws IOException {
1:a6b79e8: 		createBundle(Collections.singletonList("native.file"), name(BUNDLE_G), new Header(Constants.BUNDLE_NATIVECODE,
1:a6b79e8: 				"native.file; osname=noMatch; processor=noMatch"));
1:a6b79e8: 	}
1:a6b79e8: 
1:bfcd190: 	/*
1:bfcd190: 	 * Test that the right regions are used when validating capabilities.
1:bfcd190: 	 * 
1:bfcd190: 	 * Application A contains a content bundle requiring capability A. Bundle B
1:bfcd190: 	 * provides capability A and is available as an installable resource from a
1:bfcd190: 	 * repository service. Bundle B also requires capability B. Bundle C is an
1:bfcd190: 	 * already installed resource in the root subsystem providing capability B.
1:bfcd190: 	 * When validating capability A, the subsystem should use the root region as
1:bfcd190: 	 * the from region, and its own region as the to region. When validating 
1:bfcd190: 	 * capability B, the subsystem should use the root region as the from region
1:bfcd190: 	 * as well as for the to region.
1:bfcd190: 	 */
1:bfcd190: 	@Test
1:bfcd190: 	public void testContentWithNonConstituentDependencyWithNonConstituentDependency() throws Exception {
1:bfcd190: 		// Register a repository service containing bundle B requiring
1:bfcd190: 		// capability B and providing capability A.
1:bfcd190: 		registerRepositoryService(BUNDLE_B);
1:bfcd190: 		Subsystem root = getRootSubsystem();
1:bfcd190: 		// Install unmanaged bundle C providing capability B as a constituent 
1:bfcd190: 		// of the root subsystem.
1:bfcd190: 		Bundle bundleC = installBundleFromFile(BUNDLE_C, root);
1:bfcd190: 		try {
1:bfcd190: 			// Install application A with content bundle A requiring
1:bfcd190: 			// capability A.
1:bfcd190: 			Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:bfcd190: 			// Make sure the Require-Capability exists for capability a...
1:bfcd190: 			assertHeaderExists(applicationA, Constants.REQUIRE_CAPABILITY);
1:bfcd190: 			// ...but not for capability b.
1:4a66095: 			RequireCapabilityHeader header = new RequireCapabilityHeader(applicationA.getSubsystemHeaders(null).get(Constants.REQUIRE_CAPABILITY));
1:4a66095: 			assertEquals("Wrong number of clauses", 1, header.getClauses().size());
1:4a66095: 			Clause clause = header.getClauses().iterator().next();
1:4a66095: 			assertEquals("Wrong path", "a", clause.getPath());
1:4a66095: 			assertEquals("Wrong resolution directive", Constants.RESOLUTION_MANDATORY, clause.getDirective(Constants.RESOLUTION_DIRECTIVE).getValue());
1:4a66095: 			assertEquals("Wrong effective directive", Constants.EFFECTIVE_RESOLVE, clause.getDirective(Constants.EFFECTIVE_DIRECTIVE).getValue());
1:bfcd190: 			try {
1:bfcd190: 				// Make sure the runtime resolution works as well.
1:bfcd190: 				applicationA.start();
1:bfcd190: 			}
1:bfcd190: 			catch (SubsystemException e) {
1:bfcd190: 				fail("Application A should have started");
1:bfcd190: 			}
1:bfcd190: 			finally {
1:bfcd190: 				stopAndUninstallSubsystemSilently(applicationA);
1:bfcd190: 			}
1:bfcd190: 		}
1:bfcd190: 		catch (SubsystemException e) {
1:57b6627: 			fail("Application A should have installed." + e.getMessage());
1:bfcd190: 		}
1:bfcd190: 		finally {
1:bfcd190: 			uninstallSilently(bundleC);
1:bfcd190: 		}
1:bfcd190: 	}
1:f46e7d5: 	
1:f46e7d5: 	/*
1:f46e7d5: 	 * BREE headers must be converted into osgi.ee requirements.
1:f46e7d5: 	 * 
1:f46e7d5: 	 * The subsystem should fail to resolve and install if the required
1:f46e7d5: 	 * execution environment is not present.
1:f46e7d5: 	 */
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testMissingBundleRequiredExecutionEnvironment() throws Exception {
1:f46e7d5: 		Subsystem applicationB = null;
1:f46e7d5: 		try {
1:f46e7d5: 			applicationB = installSubsystemFromFile(APPLICATION_B);
1:f46e7d5: 			fail("Missing BREE should result in installation failure");
1:f46e7d5: 		}
1:f46e7d5: 		catch (Exception e) {
1:2ffcfb9: 			e.printStackTrace();
1:f46e7d5: 			assertTrue("Installation failure should be due to resolution error", e.getCause() instanceof ResolutionException);
1:f46e7d5: 		}
1:f46e7d5: 		finally {
1:f46e7d5: 			uninstallSubsystemSilently(applicationB);
1:f46e7d5: 		}
1:f46e7d5: 	}
1:7219e73: 	
1:7219e73: 	/*
1:7219e73: 	 * BREE headers must be converted into osgi.ee requirements.
1:7219e73: 	 * 
1:7219e73: 	 * The subsystem should resolve and install if at least one of the specified
1:7219e73: 	 * execution environments is present.
1:7219e73: 	 */
1:7219e73: 	@Test
1:7219e73: 	public void testMultipleBundleRequiredExecutionEnvironments() throws Exception {
1:7219e73: 		Subsystem applicationC = null;
1:7219e73: 		try {
1:7219e73: 			applicationC = installSubsystemFromFile(APPLICATION_C);
1:7219e73: 		}
1:7219e73: 		catch (Exception e) {
1:7219e73: 			e.printStackTrace();
1:7219e73: 			fail("Installation should succeed when at least one BREE is present");
1:7219e73: 		}
1:7219e73: 		finally {
1:7219e73: 			uninstallSubsystemSilently(applicationC);
1:7219e73: 		}
1:7219e73: 	}
1:a6b79e8: 
1:a6b79e8: 	@Test
1:a6b79e8: 	public void testNativeCodeRequirement() throws Exception {
1:a6b79e8: 		Subsystem applicationD = null;
1:a6b79e8: 		try {
1:a6b79e8: 			applicationD = installSubsystemFromFile(APPLICATION_D);
1:a6b79e8: 			applicationD.start();
1:bfcd190: 		}
1:a6b79e8: 		catch (Exception e) {
1:a6b79e8: 			e.printStackTrace();
1:a6b79e8: 			fail("Installation should succeed for Bundle-NativeCode");
1:a6b79e8: 		}
1:a6b79e8: 		finally {
1:a6b79e8: 			uninstallSubsystemSilently(applicationD);
1:a6b79e8: 		}
1:a6b79e8: 	}
2:a6b79e8: 
1:a6b79e8: 	@Test
1:a6b79e8: 	public void testMissingNativeCodeRequirement() throws Exception {
1:a6b79e8: 		Subsystem applicationE = null;
1:a6b79e8: 		try {
1:a6b79e8: 			applicationE = installSubsystemFromFile(APPLICATION_E);
1:a6b79e8: 			// TODO this should fail to intsall
1:a6b79e8: 		} catch (SubsystemException e) {
1:a6b79e8: 			e.printStackTrace();
1:a6b79e8: 			fail("Installation should succeed for Bundle-NativeCode");
1:a6b79e8: 		}
1:a6b79e8: 		try {
1:a6b79e8: 			applicationE.start();
1:a6b79e8: 			fail("Expected to fail to install");
1:a6b79e8: 		}
1:a6b79e8: 		catch (Exception e) {
1:a6b79e8: 			// expected 
1:a6b79e8: 		}
1:a6b79e8: 		finally {
1:a6b79e8: 			uninstallSubsystemSilently(applicationE);
1:a6b79e8: 		}
1:a6b79e8: 	}
1:a6b79e8: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 			e.printStackTrace();
commit:7219e73
/////////////////////////////////////////////////////////////////////////
1: 	 * Subsystem-SymbolicName: application.c.esa
1: 	 * Subsystem-Content: bundle.e.jar
1: 	 */
1: 	private static final String APPLICATION_C = "application.c.esa";
1: 	/*
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.e.jar
1: 	 * Bundle-RequiredExecutionEnvironment: J2SE-1.4, J2SE-1.5,		J2SE-1.6,JavaSE-1.7
1: 	 */
1: 	private static final String BUNDLE_E = "bundle.e.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createBundleE();
1: 		createApplicationC();
/////////////////////////////////////////////////////////////////////////
1: 	private static void createApplicationC() throws IOException {
1: 		createApplicationCManifest();
1: 		createSubsystem(APPLICATION_C, BUNDLE_E);
1: 	}
1: 	
1: 	private static void createApplicationCManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_C);
1: 		createManifest(APPLICATION_C + ".mf", attributes);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("deprecation")
0: 	private static void createBundleE() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "J2SE-1.4, J2SE-1.5,		J2SE-1.6,JavaSE-1.7");
0: 		createBundle(BUNDLE_E, headers);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * BREE headers must be converted into osgi.ee requirements.
1: 	 * 
1: 	 * The subsystem should resolve and install if at least one of the specified
1: 	 * execution environments is present.
1: 	 */
1: 	@Test
1: 	public void testMultipleBundleRequiredExecutionEnvironments() throws Exception {
1: 		Subsystem applicationC = null;
1: 		try {
1: 			applicationC = installSubsystemFromFile(APPLICATION_C);
1: 		}
1: 		catch (Exception e) {
1: 			e.printStackTrace();
1: 			fail("Installation should succeed when at least one BREE is present");
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationC);
1: 		}
1: 	}
commit:f46e7d5
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.resolver.ResolutionException;
/////////////////////////////////////////////////////////////////////////
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.d.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.d.jar
1: 	 * Bundle-RequiredExecutionEnvironment: JavaSE-100.100
1: 	 */
1: 	private static final String BUNDLE_D = "bundle.d.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createBundleD();
1: 		createApplicationB();
/////////////////////////////////////////////////////////////////////////
1: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_D);
1: 	}
1: 	
1: 	private static void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	@SuppressWarnings("deprecation")
0: 	private static void createBundleD() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "JavaSE-100.100");
0: 		createBundle(BUNDLE_D, headers);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * BREE headers must be converted into osgi.ee requirements.
1: 	 * 
1: 	 * The subsystem should fail to resolve and install if the required
1: 	 * execution environment is not present.
1: 	 */
1: 	@Test
1: 	public void testMissingBundleRequiredExecutionEnvironment() throws Exception {
1: 		Subsystem applicationB = null;
1: 		try {
1: 			applicationB = installSubsystemFromFile(APPLICATION_B);
1: 			fail("Missing BREE should result in installation failure");
1: 		}
1: 		catch (Exception e) {
1: 			assertTrue("Installation failure should be due to resolution error", e.getCause() instanceof ResolutionException);
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationB);
1: 		}
1: 	}
commit:4a66095
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.Clause;
1: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
/////////////////////////////////////////////////////////////////////////
1: 			RequireCapabilityHeader header = new RequireCapabilityHeader(applicationA.getSubsystemHeaders(null).get(Constants.REQUIRE_CAPABILITY));
1: 			assertEquals("Wrong number of clauses", 1, header.getClauses().size());
1: 			Clause clause = header.getClauses().iterator().next();
1: 			assertEquals("Wrong path", "a", clause.getPath());
1: 			assertEquals("Wrong resolution directive", Constants.RESOLUTION_MANDATORY, clause.getDirective(Constants.RESOLUTION_DIRECTIVE).getValue());
1: 			assertEquals("Wrong effective directive", Constants.EFFECTIVE_RESOLVE, clause.getDirective(Constants.EFFECTIVE_DIRECTIVE).getValue());
commit:bfcd190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: /*
1:  * Contains a series of tests related to resolution.
1:  */
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class ResolutionTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: a
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: a
1: 	 * Require-Capability: b
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.c.jar
1: 	 * Provide-Capability: b
1: 	 */
1: 	private static final String BUNDLE_C = "bundle.c.jar";
1: 	
1: 	@Before
0: 	public static void createApplications() throws Exception {
1: 		if (createdApplications) {
1: 			return;
1: 		};
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createApplicationA();
1: 		createdApplications = true;
1: 	}
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "a");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "a");
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "b");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createBundleC() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "b");
0: 		createBundle(BUNDLE_C, headers);
1: 	}
1: 	
1: 	/*
1: 	 * Test that the right regions are used when validating capabilities.
1: 	 * 
1: 	 * Application A contains a content bundle requiring capability A. Bundle B
1: 	 * provides capability A and is available as an installable resource from a
1: 	 * repository service. Bundle B also requires capability B. Bundle C is an
1: 	 * already installed resource in the root subsystem providing capability B.
1: 	 * When validating capability A, the subsystem should use the root region as
1: 	 * the from region, and its own region as the to region. When validating 
1: 	 * capability B, the subsystem should use the root region as the from region
1: 	 * as well as for the to region.
1: 	 */
1: 	@Test
1: 	public void testContentWithNonConstituentDependencyWithNonConstituentDependency() throws Exception {
1: 		// Register a repository service containing bundle B requiring
1: 		// capability B and providing capability A.
1: 		registerRepositoryService(BUNDLE_B);
1: 		Subsystem root = getRootSubsystem();
1: 		// Install unmanaged bundle C providing capability B as a constituent 
1: 		// of the root subsystem.
1: 		Bundle bundleC = installBundleFromFile(BUNDLE_C, root);
1: 		try {
1: 			// Install application A with content bundle A requiring
1: 			// capability A.
1: 			Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1: 			// Make sure the Require-Capability exists for capability a...
1: 			assertHeaderExists(applicationA, Constants.REQUIRE_CAPABILITY);
1: 			// ...but not for capability b.
0: 			assertEquals("Wrong Require-Capability header", "a;resolution:=mandatory;effective:=resolve", applicationA.getSubsystemHeaders(null).get(Constants.REQUIRE_CAPABILITY));
1: 			try {
1: 				// Make sure the runtime resolution works as well.
1: 				applicationA.start();
1: 			}
1: 			catch (SubsystemException e) {
1: 				fail("Application A should have started");
1: 			}
1: 			finally {
1: 				stopAndUninstallSubsystemSilently(applicationA);
1: 			}
1: 		}
1: 		catch (SubsystemException e) {
0: 			fail("Application A should have installed");
1: 		}
1: 		finally {
1: 			uninstallSilently(bundleC);
1: 		}
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:a6b79e8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: 	 * Subsystem-SymbolicName: application.d.esa
1: 	 * Subsystem-Content: bundle.f.jar
1: 	 */
1: 	private static final String APPLICATION_D = "application.d.esa";
1: 	/* Subsystem-SymbolicName: application.e.esa
1: 	 * Subsystem-Content: bundle.g.jar
1: 	 */
1: 	private static final String APPLICATION_E = "application.e.esa";
1: 	/*
/////////////////////////////////////////////////////////////////////////
1: 
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.f.jar
1: 	 * Bundle-NativeCode: \
1: 	 *   native.file; osname=Linux; processor=x86, \
1: 	 *   native.file; osname=Linux; processor=x86-64, \
1: 	 *   native.file; osname=Win32; processor=x86, \
1: 	 *   native.file; osname=Win32; processor=x86-64, \
1: 	 *   native.file; osname="mac os x"; processor=x86-64
1: 	 */
1: 	private static final String BUNDLE_F = "bundle.f.jar";
1: 
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.f.jar
1: 	 * Bundle-NativeCode: \
1: 	 *   native.file; osname=noMatch; processor=noMatch
1: 	 */
1: 	private static final String BUNDLE_G = "bundle.g.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createBundleF();
1: 		createBundleG();
1: 		createApplicationD();
1: 		createApplicationE();
/////////////////////////////////////////////////////////////////////////
1: 
1: 	private static void createApplicationD() throws IOException {
1: 		createApplicationDManifest();
1: 		createSubsystem(APPLICATION_D, BUNDLE_F);
1: 	}
1: 
1: 	private static void createApplicationDManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_D);
1: 		createManifest(APPLICATION_D + ".mf", attributes);
1: 	}
1: 
1: 	private static void createApplicationE() throws IOException {
1: 		createApplicationEManifest();
1: 		createSubsystem(APPLICATION_E, BUNDLE_G);
1: 	}
1: 
1: 	private static void createApplicationEManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_E);
1: 		createManifest(APPLICATION_E + ".mf", attributes);
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleF() throws IOException {
1: 		createBundle(Collections.singletonList("native.file"), name(BUNDLE_F), new Header(Constants.BUNDLE_NATIVECODE,
1: 				"native.file; osname=Linux; processor=x86,"
1: 				+ "native.file; osname=Linux; processor=x86-64,"
1: 				+ "native.file; osname=Win32; processor=x86,"
1: 				+ "native.file; osname=Win32; processor=x86-64,"
1: 				+ "native.file; osname=\"MacOSX\"; processor=x86-64"));
1: 	}
1: 	private void createBundleG() throws IOException {
1: 		createBundle(Collections.singletonList("native.file"), name(BUNDLE_G), new Header(Constants.BUNDLE_NATIVECODE,
1: 				"native.file; osname=noMatch; processor=noMatch"));
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Test
1: 	public void testNativeCodeRequirement() throws Exception {
1: 		Subsystem applicationD = null;
1: 		try {
1: 			applicationD = installSubsystemFromFile(APPLICATION_D);
1: 			applicationD.start();
1: 		}
1: 		catch (Exception e) {
1: 			e.printStackTrace();
1: 			fail("Installation should succeed for Bundle-NativeCode");
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationD);
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testMissingNativeCodeRequirement() throws Exception {
1: 		Subsystem applicationE = null;
1: 		try {
1: 			applicationE = installSubsystemFromFile(APPLICATION_E);
1: 			// TODO this should fail to intsall
1: 		} catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Installation should succeed for Bundle-NativeCode");
1: 		}
1: 		try {
1: 			applicationE.start();
1: 			fail("Expected to fail to install");
1: 		}
1: 		catch (Exception e) {
1: 			// expected 
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationE);
1: 		}
1: 	}
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), new Header(Constants.REQUIRE_CAPABILITY, "a"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), 
1: 				provideCapability("a"),
1: 				requireCapability("b"));
1: 	private void createBundleC() throws IOException {
1: 		createBundle(name(BUNDLE_C), provideCapability("b"));
1: 	private void createBundleD() throws IOException {
1: 		createBundle(name(BUNDLE_D), new Header(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "JavaSE-100.100"));
1: 	private void createBundleE() throws IOException {
1: 		createBundle(name(BUNDLE_E), new Header(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, "J2SE-1.4, J2SE-1.5,		J2SE-1.6,JavaSE-1.7"));
/////////////////////////////////////////////////////////////////////////
1: 			fail("Application A should have installed." + e.getMessage());
============================================================================