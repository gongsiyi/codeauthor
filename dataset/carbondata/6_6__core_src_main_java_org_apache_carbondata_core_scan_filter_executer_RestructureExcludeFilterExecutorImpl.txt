1:70256e7: /*
1:70256e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:70256e7:  * contributor license agreements.  See the NOTICE file distributed with
1:70256e7:  * this work for additional information regarding copyright ownership.
1:70256e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:70256e7:  * (the "License"); you may not use this file except in compliance with
1:70256e7:  * the License.  You may obtain a copy of the License at
1:70256e7:  *
1:70256e7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:70256e7:  *
1:70256e7:  * Unless required by applicable law or agreed to in writing, software
1:70256e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:70256e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:70256e7:  * See the License for the specific language governing permissions and
1:70256e7:  * limitations under the License.
1:70256e7:  */
1:70256e7: package org.apache.carbondata.core.scan.filter.executer;
1:70256e7: 
1:70256e7: import java.io.IOException;
1:70256e7: import java.util.BitSet;
1:70256e7: 
1:d7393da: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:70256e7: import org.apache.carbondata.core.scan.filter.FilterUtil;
1:d7393da: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
1:70256e7: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:266c473: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
1:daa6465: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
1:70256e7: import org.apache.carbondata.core.util.BitSetGroup;
1:70256e7: 
1:6b3b16c: public class RestructureExcludeFilterExecutorImpl extends RestructureEvaluatorImpl {
1:70256e7: 
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * flag to check whether filter values contain the default value applied on the dimension column
1:70256e7:    * which does not exist in the current block
1:70256e7:    */
1:daa6465:   private boolean isDefaultValuePresentInFilterValues;
1:70256e7: 
1:70256e7:   public RestructureExcludeFilterExecutorImpl(DimColumnResolvedFilterInfo dimColEvaluatorInfo,
1:500654e:       MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo, boolean isMeasure) {
1:266c473:     if (isMeasure) {
1:266c473:       isDefaultValuePresentInFilterValues =
1:266c473:           isMeasureDefaultValuePresentInFilterValues(measureColumnResolvedFilterInfo);
1:266c473:     } else {
1:266c473:       isDefaultValuePresentInFilterValues =
1:266c473:           isDimensionDefaultValuePresentInFilterValues(dimColEvaluatorInfo);
1:266c473:     }
1:70256e7:   }
1:70256e7: 
1:75e0bd4:   @Override
1:daa6465:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks,
1:daa6465:       boolean useBitsetPipeLine) throws IOException {
1:daa6465:     int numberOfRows = rawBlockletColumnChunks.getDataBlock().numRows();
1:6b3b16c:     return FilterUtil
1:daa6465:         .createBitSetGroupWithDefaultValue(rawBlockletColumnChunks.getDataBlock().numberOfPages(),
1:6b3b16c:             numberOfRows, !isDefaultValuePresentInFilterValues);
1:70256e7:   }
1:70256e7: 
1:daa6465:   @Override
1:daa6465:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:d7393da:       throws FilterUnsupportedException {
1:d7393da:     throw new FilterUnsupportedException("Unsupported RestructureExcludeFilterExecutorImpl on row");
1:d7393da:   }
1:d7393da: 
1:daa6465:   @Override
1:daa6465:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:70256e7:     BitSet bitSet = new BitSet(1);
1:70256e7:     bitSet.flip(0, 1);
1:70256e7:     return bitSet;
1:70256e7:   }
1:70256e7: 
1:daa6465:   @Override
1:daa6465:   public void readColumnChunks(RawBlockletColumnChunks rawBlockletColumnChunks) {
1:70256e7: 
1:70256e7:   }
1:70256e7: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;
/////////////////////////////////////////////////////////////////////////
1:   private boolean isDefaultValuePresentInFilterValues;
/////////////////////////////////////////////////////////////////////////
1:   public BitSetGroup applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks,
1:       boolean useBitsetPipeLine) throws IOException {
1:     int numberOfRows = rawBlockletColumnChunks.getDataBlock().numRows();
1:         .createBitSetGroupWithDefaultValue(rawBlockletColumnChunks.getDataBlock().numberOfPages(),
1:   @Override
1:   public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:   @Override
1:   public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:   @Override
1:   public void readColumnChunks(RawBlockletColumnChunks rawBlockletColumnChunks) {
author:QiangCai
-------------------------------------------------------------------------------
commit:d7393da
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.intf.RowIntf;
/////////////////////////////////////////////////////////////////////////
0:   @Override public boolean applyFilter(RowIntf value, int dimOrdinalMax)
1:       throws FilterUnsupportedException {
1:     throw new FilterUnsupportedException("Unsupported RestructureExcludeFilterExecutorImpl on row");
1:   }
1: 
author:kumarvishal
-------------------------------------------------------------------------------
commit:75e0bd4
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public BitSetGroup applyFilter(BlocksChunkHolder blockChunkHolder, boolean useBitsetPipeLine)
0:       throws IOException {
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo, boolean isMeasure) {
author:sounakr
-------------------------------------------------------------------------------
commit:266c473
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.MeasureColumnResolvedFilterInfo;
0:   protected MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo;
0:   protected boolean isMeasure;
/////////////////////////////////////////////////////////////////////////
0:       MeasureColumnResolvedFilterInfo measureColumnResolvedFilterInfo,
0:       SegmentProperties segmentProperties, boolean isMeasure) {
0:     this.measureColumnResolvedFilterInfo = measureColumnResolvedFilterInfo;
0:     this.isMeasure = isMeasure;
1:     if (isMeasure) {
1:       isDefaultValuePresentInFilterValues =
1:           isMeasureDefaultValuePresentInFilterValues(measureColumnResolvedFilterInfo);
1:     } else {
1:       isDefaultValuePresentInFilterValues =
1:           isDimensionDefaultValuePresentInFilterValues(dimColEvaluatorInfo);
1:     }
author:manishgupta88
-------------------------------------------------------------------------------
commit:6b3b16c
/////////////////////////////////////////////////////////////////////////
1: public class RestructureExcludeFilterExecutorImpl extends RestructureEvaluatorImpl {
/////////////////////////////////////////////////////////////////////////
0:         isDimensionDefaultValuePresentInFilterValues(dimColEvaluatorInfo);
1:     return FilterUtil
0:         .createBitSetGroupWithDefaultValue(blockChunkHolder.getDataBlock().numberOfPages(),
1:             numberOfRows, !isDefaultValuePresentInFilterValues);
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.io.IOException;
1: import java.util.BitSet;
1: 
0: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1: import org.apache.carbondata.core.scan.filter.FilterUtil;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
0: import org.apache.carbondata.core.scan.processor.BlocksChunkHolder;
1: import org.apache.carbondata.core.util.BitSetGroup;
1: 
0: public class RestructureExcludeFilterExecutorImpl implements FilterExecuter {
1: 
0:   protected DimColumnResolvedFilterInfo dimColEvaluatorInfo;
0:   protected SegmentProperties segmentProperties;
1: 
1:   /**
1:    * flag to check whether filter values contain the default value applied on the dimension column
1:    * which does not exist in the current block
1:    */
0:   protected boolean isDefaultValuePresentInFilterValues;
1: 
1:   public RestructureExcludeFilterExecutorImpl(DimColumnResolvedFilterInfo dimColEvaluatorInfo,
0:       SegmentProperties segmentProperties) {
0:     this.dimColEvaluatorInfo = dimColEvaluatorInfo;
0:     this.segmentProperties = segmentProperties;
0:     isDefaultValuePresentInFilterValues =
0:         FilterUtil.isDimensionDefaultValuePresentInFilterValues(dimColEvaluatorInfo);
1:   }
1: 
0:   @Override public BitSetGroup applyFilter(BlocksChunkHolder blockChunkHolder) throws IOException {
0:     int numberOfRows = blockChunkHolder.getDataBlock().nodeSize();
0:     BitSetGroup bitSetGroup = new BitSetGroup(1);
0:     BitSet bitSet = new BitSet(numberOfRows);
0:     bitSet.set(0, numberOfRows, !isDefaultValuePresentInFilterValues);
0:     bitSetGroup.setBitSet(bitSet, 0);
0:     return bitSetGroup;
1:   }
1: 
0:   @Override public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {
1:     BitSet bitSet = new BitSet(1);
1:     bitSet.flip(0, 1);
1:     return bitSet;
1:   }
1: 
0:   @Override public void readBlocks(BlocksChunkHolder blockChunkHolder) throws IOException {
1: 
1:   }
1: }
============================================================================