1:17a4b48: /*
1:17a4b48:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:17a4b48:  * contributor license agreements.  See the NOTICE file distributed with
1:17a4b48:  * this work for additional information regarding copyright ownership.
1:17a4b48:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:17a4b48:  * (the "License"); you may not use this file except in compliance with
1:17a4b48:  * the License.  You may obtain a copy of the License at
1:17a4b48:  *
1:17a4b48:  *    http://www.apache.org/licenses/LICENSE-2.0
1:17a4b48:  *
1:17a4b48:  * Unless required by applicable law or agreed to in writing, software
1:17a4b48:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17a4b48:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17a4b48:  * See the License for the specific language governing permissions and
1:17a4b48:  * limitations under the License.
1:17a4b48:  */
1:17a4b48: 
1:17a4b48: package org.apache.carbondata.sdk.file;
1:17a4b48: 
1:17a4b48: import java.io.File;
1:17a4b48: import java.io.IOException;
1:17a4b48: import java.util.concurrent.ExecutorService;
1:17a4b48: import java.util.concurrent.Executors;
1:17a4b48: import java.util.concurrent.TimeUnit;
1:17a4b48: 
1:17a4b48: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:17a4b48: 
1:17a4b48: import org.apache.commons.io.FileUtils;
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:17a4b48: import org.junit.Assert;
1:17a4b48: import org.junit.Test;
1:17a4b48: 
1:17a4b48: /**
1:17a4b48:  * multi-thread Test suite for {@link CSVCarbonWriter}
1:17a4b48:  */
1:17a4b48: public class ConcurrentSdkWriterTest {
1:17a4b48: 
1:17a4b48:   private static final int recordsPerItr = 10;
1:17a4b48:   private static final short numOfThreads = 4;
1:17a4b48: 
1:17a4b48:   @Test
1:17a4b48:   public void testWriteFiles() throws IOException {
1:17a4b48:     String path = "./testWriteFiles";
1:17a4b48:     FileUtils.deleteDirectory(new File(path));
1:17a4b48: 
1:17a4b48:     Field[] fields = new Field[2];
1:17a4b48:     fields[0] = new Field("name", DataTypes.STRING);
1:17a4b48:     fields[1] = new Field("age", DataTypes.INT);
1:17a4b48: 
1:17a4b48: 
1:17a4b48: 
1:17a4b48:     ExecutorService executorService = Executors.newFixedThreadPool(numOfThreads);
1:17a4b48:     try {
1:17a4b48:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:17a4b48:           .outputPath(path);
1:17a4b48:       CarbonWriter writer =
1:8f1a029:           builder.buildThreadSafeWriterForCSVInput(new Schema(fields), numOfThreads, TestUtil.configuration);
1:17a4b48:       // write in multi-thread
1:17a4b48:       for (int i = 0; i < numOfThreads; i++) {
1:17a4b48:         executorService.submit(new WriteLogic(writer));
1:17a4b48:       }
1:17a4b48:       executorService.shutdown();
1:17a4b48:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:17a4b48:       writer.close();
1:17a4b48:     } catch (Exception e) {
1:17a4b48:       e.printStackTrace();
1:17a4b48:       Assert.fail(e.getMessage());
1:17a4b48:     }
1:17a4b48: 
1:17a4b48:     // read the files and verify the count
1:17a4b48:     CarbonReader reader;
1:17a4b48:     try {
1:17a4b48:       reader = CarbonReader
1:17a4b48:           .builder(path, "_temp")
1:17a4b48:           .projection(new String[]{"name", "age"})
1:8f1a029:           .build(new Configuration(false));
1:17a4b48:       int i = 0;
1:17a4b48:       while (reader.hasNext()) {
1:17a4b48:         Object[] row = (Object[]) reader.readNextRow();
1:17a4b48:         i++;
1:17a4b48:       }
1:17a4b48:       Assert.assertEquals(i, numOfThreads * recordsPerItr);
1:17a4b48:       reader.close();
1:17a4b48:     } catch (InterruptedException e) {
1:17a4b48:       e.printStackTrace();
1:17a4b48:       Assert.fail(e.getMessage());
1:17a4b48:     }
1:17a4b48: 
1:17a4b48:     FileUtils.deleteDirectory(new File(path));
1:17a4b48:   }
1:17a4b48: 
1:17a4b48:   class WriteLogic implements Runnable {
1:17a4b48:     CarbonWriter writer;
1:17a4b48: 
1:17a4b48:     WriteLogic(CarbonWriter writer) {
1:17a4b48:       this.writer = writer;
1:17a4b48:     }
1:17a4b48: 
1:17a4b48:     @Override public void run() {
1:17a4b48:       try {
1:17a4b48:         for (int i = 0; i < recordsPerItr; i++) {
1:17a4b48:           writer.write(new String[] { "robot" + (i % 10), String.valueOf(i),
1:17a4b48:               String.valueOf((double) i / 2) });
1:17a4b48:         }
1:17a4b48:       } catch (IOException e) {
1:17a4b48:         e.printStackTrace();
1:17a4b48:         Assert.fail(e.getMessage());
1:17a4b48:       }
1:17a4b48:     }
1:17a4b48:   }
1:17a4b48: 
1:17a4b48: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:           builder.buildThreadSafeWriterForCSVInput(new Schema(fields), numOfThreads, TestUtil.configuration);
/////////////////////////////////////////////////////////////////////////
1:           .build(new Configuration(false));
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:17a4b48
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: 
1: import org.apache.commons.io.FileUtils;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: /**
1:  * multi-thread Test suite for {@link CSVCarbonWriter}
1:  */
1: public class ConcurrentSdkWriterTest {
1: 
1:   private static final int recordsPerItr = 10;
1:   private static final short numOfThreads = 4;
1: 
1:   @Test
1:   public void testWriteFiles() throws IOException {
1:     String path = "./testWriteFiles";
1:     FileUtils.deleteDirectory(new File(path));
1: 
1:     Field[] fields = new Field[2];
1:     fields[0] = new Field("name", DataTypes.STRING);
1:     fields[1] = new Field("age", DataTypes.INT);
1: 
1: 
1: 
1:     ExecutorService executorService = Executors.newFixedThreadPool(numOfThreads);
1:     try {
1:       CarbonWriterBuilder builder = CarbonWriter.builder()
1:           .outputPath(path);
1:       CarbonWriter writer =
0:           builder.buildThreadSafeWriterForCSVInput(new Schema(fields), numOfThreads);
1:       // write in multi-thread
1:       for (int i = 0; i < numOfThreads; i++) {
1:         executorService.submit(new WriteLogic(writer));
1:       }
1:       executorService.shutdown();
1:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:       writer.close();
1:     } catch (Exception e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     }
1: 
1:     // read the files and verify the count
1:     CarbonReader reader;
1:     try {
1:       reader = CarbonReader
1:           .builder(path, "_temp")
1:           .projection(new String[]{"name", "age"})
0:           .build();
1:       int i = 0;
1:       while (reader.hasNext()) {
1:         Object[] row = (Object[]) reader.readNextRow();
1:         i++;
1:       }
1:       Assert.assertEquals(i, numOfThreads * recordsPerItr);
1:       reader.close();
1:     } catch (InterruptedException e) {
1:       e.printStackTrace();
1:       Assert.fail(e.getMessage());
1:     }
1: 
1:     FileUtils.deleteDirectory(new File(path));
1:   }
1: 
1:   class WriteLogic implements Runnable {
1:     CarbonWriter writer;
1: 
1:     WriteLogic(CarbonWriter writer) {
1:       this.writer = writer;
1:     }
1: 
1:     @Override public void run() {
1:       try {
1:         for (int i = 0; i < recordsPerItr; i++) {
1:           writer.write(new String[] { "robot" + (i % 10), String.valueOf(i),
1:               String.valueOf((double) i / 2) });
1:         }
1:       } catch (IOException e) {
1:         e.printStackTrace();
1:         Assert.fail(e.getMessage());
1:       }
1:     }
1:   }
1: 
1: }
============================================================================