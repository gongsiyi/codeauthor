1:05086e5: /*
1:05086e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:05086e5:  * contributor license agreements.  See the NOTICE file distributed with
1:05086e5:  * this work for additional information regarding copyright ownership.
1:05086e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:05086e5:  * (the "License"); you may not use this file except in compliance with
1:05086e5:  * the License.  You may obtain a copy of the License at
1:05086e5:  *
1:05086e5:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05086e5:  *
1:05086e5:  * Unless required by applicable law or agreed to in writing, software
1:05086e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05086e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05086e5:  * See the License for the specific language governing permissions and
1:05086e5:  * limitations under the License.
1:05086e5:  */
3:05086e5: 
1:05086e5: package org.apache.carbondata.core.metadata.schema.table;
1:05086e5: 
1:05086e5: import java.io.BufferedReader;
1:05086e5: import java.io.BufferedWriter;
1:05086e5: import java.io.DataInputStream;
1:05086e5: import java.io.DataOutputStream;
1:05086e5: import java.io.IOException;
1:05086e5: import java.io.InputStreamReader;
1:05086e5: import java.io.OutputStreamWriter;
1:05086e5: import java.nio.charset.Charset;
1:05086e5: import java.util.ArrayList;
1:5f2a748: import java.util.HashSet;
1:98c7581: import java.util.Iterator;
1:05086e5: import java.util.List;
1:5f2a748: import java.util.Set;
1:05086e5: 
1:5f2a748: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1:05086e5: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:05086e5: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:05086e5: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1:05086e5: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:05086e5: import org.apache.carbondata.core.util.CarbonUtil;
1:05086e5: 
1:05086e5: import com.google.gson.Gson;
1:0ab03f2: import org.apache.commons.lang3.StringUtils;
1:5f2a748: import org.apache.hadoop.fs.permission.FsAction;
1:5f2a748: import org.apache.hadoop.fs.permission.FsPermission;
1:05086e5: 
1:05086e5: /**
1:05086e5:  * Stores datamap schema in disk as json format
1:05086e5:  */
1:05086e5: public class DiskBasedDMSchemaStorageProvider implements DataMapSchemaStorageProvider {
1:05086e5: 
1:05086e5:   private String storePath;
1:05086e5: 
1:5f2a748:   private String mdtFilePath;
1:5f2a748: 
1:5f2a748:   private long lastModifiedTime;
1:5f2a748: 
1:5f2a748:   private Set<DataMapSchema> dataMapSchemas = new HashSet<>();
1:5f2a748: 
1:05086e5:   public DiskBasedDMSchemaStorageProvider(String storePath) {
1:61afa42:     this.storePath = CarbonUtil.checkAndAppendHDFSUrl(storePath);
1:5f2a748:     this.mdtFilePath = storePath + CarbonCommonConstants.FILE_SEPARATOR + "datamap.mdtfile";
2:05086e5:   }
1:05086e5: 
1:05086e5:   @Override public void saveSchema(DataMapSchema dataMapSchema) throws IOException {
1:05086e5:     BufferedWriter brWriter = null;
1:05086e5:     DataOutputStream dataOutputStream = null;
1:05086e5:     Gson gsonObjectToWrite = new Gson();
1:5f2a748:     String schemaPath = getSchemaPath(storePath, dataMapSchema.getDataMapName());
1:05086e5:     FileFactory.FileType fileType = FileFactory.getFileType(schemaPath);
1:05086e5:     if (FileFactory.isFileExist(schemaPath, fileType)) {
1:05086e5:       throw new IOException(
1:05086e5:           "DataMap with name " + dataMapSchema.getDataMapName() + " already exists in storage");
1:05086e5:     }
1:05086e5:     // write the datamap shema in json format.
2:05086e5:     try {
1:05086e5:       FileFactory.mkdirs(storePath, fileType);
1:05086e5:       FileFactory.createNewFile(schemaPath, fileType);
1:05086e5:       dataOutputStream =
1:05086e5:           FileFactory.getDataOutputStream(schemaPath, fileType);
1:05086e5:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutputStream,
1:05086e5:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:05086e5: 
1:05086e5:       String metadataInstance = gsonObjectToWrite.toJson(dataMapSchema);
1:05086e5:       brWriter.write(metadataInstance);
2:05086e5:     } finally {
1:05086e5:       if (null != brWriter) {
1:05086e5:         brWriter.flush();
1:05086e5:       }
1:5f2a748:       dataMapSchemas.add(dataMapSchema);
1:05086e5:       CarbonUtil.closeStreams(dataOutputStream, brWriter);
1:98c7581:       checkAndReloadDataMapSchemas(true);
1:5f2a748:       touchMDTFile();
1:05086e5:     }
1:05086e5:   }
1:05086e5: 
1:5f2a748:   @Override public DataMapSchema retrieveSchema(String dataMapName)
1:5f2a748:       throws IOException, NoSuchDataMapException {
1:cf55028:     checkAndReloadDataMapSchemas(true);
1:5f2a748:     for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:5f2a748:       if (dataMapSchema.getDataMapName().equalsIgnoreCase(dataMapName)) {
1:5f2a748:         return dataMapSchema;
1:5f2a748:       }
1:05086e5:     }
1:5f2a748:     throw new NoSuchDataMapException(dataMapName);
1:05086e5:   }
1:05086e5: 
1:5f2a748:   @Override public List<DataMapSchema> retrieveSchemas(CarbonTable carbonTable) throws IOException {
1:cf55028:     checkAndReloadDataMapSchemas(false);
1:5f2a748:     List<DataMapSchema> dataMapSchemas = new ArrayList<>();
1:5f2a748:     for (DataMapSchema dataMapSchema : this.dataMapSchemas) {
1:5f2a748:       List<RelationIdentifier> parentTables = dataMapSchema.getParentTables();
1:5f2a748:       for (RelationIdentifier identifier : parentTables) {
1:0ab03f2:         if (StringUtils.isNotEmpty(identifier.getTableId())) {
1:0ab03f2:           if (identifier.getTableId().equalsIgnoreCase(carbonTable.getTableId())) {
1:0ab03f2:             dataMapSchemas.add(dataMapSchema);
1:0ab03f2:             break;
1:0ab03f2:           }
1:0ab03f2:         } else if (identifier.getTableName().equalsIgnoreCase(carbonTable.getTableName()) &&
1:0ab03f2:             identifier.getDatabaseName().equalsIgnoreCase(carbonTable.getDatabaseName())) {
1:5f2a748:           dataMapSchemas.add(dataMapSchema);
1:5f2a748:           break;
1:5f2a748:         }
1:5f2a748:       }
1:05086e5:     }
1:05086e5:     return dataMapSchemas;
1:05086e5:   }
1:05086e5: 
1:05086e5:   @Override public List<DataMapSchema> retrieveAllSchemas() throws IOException {
1:cf55028:     checkAndReloadDataMapSchemas(true);
1:5f2a748:     return new ArrayList<>(dataMapSchemas);
1:5f2a748:   }
1:5f2a748: 
1:5f2a748:   private Set<DataMapSchema> retrieveAllSchemasInternal() throws IOException {
1:5f2a748:     Set<DataMapSchema> dataMapSchemas = new HashSet<>();
1:05086e5:     CarbonFile carbonFile = FileFactory.getCarbonFile(storePath);
1:05086e5:     CarbonFile[] carbonFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:05086e5:       @Override public boolean accept(CarbonFile file) {
1:05086e5:         return file.getName().endsWith(".dmschema");
1:05086e5:       }
1:05086e5:     });
1:05086e5: 
1:05086e5:     for (CarbonFile file :carbonFiles) {
1:5f2a748:       Gson gsonObjectToRead = new Gson();
1:5f2a748:       DataInputStream dataInputStream = null;
1:5f2a748:       BufferedReader buffReader = null;
1:5f2a748:       InputStreamReader inStream = null;
1:5f2a748:       try {
1:5f2a748:         String absolutePath = file.getAbsolutePath();
1:5f2a748:         dataInputStream =
1:5f2a748:             FileFactory.getDataInputStream(
1:5f2a748:                 absolutePath, FileFactory.getFileType(absolutePath));
1:5f2a748:         inStream = new InputStreamReader(dataInputStream,
1:5f2a748:             Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:5f2a748:         buffReader = new BufferedReader(inStream);
1:5f2a748:         dataMapSchemas.add(gsonObjectToRead.fromJson(buffReader, DataMapSchema.class));
1:5f2a748:       } finally {
1:5f2a748:         CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:5f2a748:       }
1:05086e5:     }
1:05086e5:     return dataMapSchemas;
1:05086e5:   }
1:05086e5: 
1:5f2a748:   @Override public void dropSchema(String dataMapName)
1:05086e5:       throws IOException {
1:5f2a748:     String schemaPath = getSchemaPath(storePath, dataMapName);
2:05086e5:     if (!FileFactory.isFileExist(schemaPath, FileFactory.getFileType(schemaPath))) {
2:05086e5:       throw new IOException("DataMap with name " + dataMapName + " does not exists in storage");
1:5f2a748:     }
1:98c7581:     Iterator<DataMapSchema> iterator = dataMapSchemas.iterator();
1:98c7581:     while (iterator.hasNext()) {
1:98c7581:       DataMapSchema schema = iterator.next();
1:98c7581:       if (schema.getDataMapName().equalsIgnoreCase(dataMapName)) {
1:98c7581:         iterator.remove();
1:5f2a748:       }
1:5f2a748:     }
1:5f2a748:     touchMDTFile();
1:05086e5:     if (!FileFactory.deleteFile(schemaPath, FileFactory.getFileType(schemaPath))) {
1:05086e5:       throw new IOException("DataMap with name " + dataMapName + " cannot be deleted");
1:05086e5:     }
1:05086e5:   }
1:05086e5: 
1:cf55028:   private void checkAndReloadDataMapSchemas(boolean touchFile) throws IOException {
1:5f2a748:     if (FileFactory.isFileExist(mdtFilePath)) {
1:5f2a748:       long lastModifiedTime = FileFactory.getCarbonFile(mdtFilePath).getLastModifiedTime();
1:5f2a748:       if (this.lastModifiedTime != lastModifiedTime) {
1:5f2a748:         dataMapSchemas = retrieveAllSchemasInternal();
1:98c7581:         touchMDTFile();
1:5f2a748:       }
2:5f2a748:     } else {
1:5f2a748:       dataMapSchemas = retrieveAllSchemasInternal();
1:cf55028:       if (touchFile) {
1:5f2a748:         touchMDTFile();
1:5f2a748:       }
1:5f2a748:     }
1:05086e5:   }
1:5f2a748: 
1:5f2a748:   private void touchMDTFile() throws IOException {
1:5f2a748:     if (!FileFactory.isFileExist(storePath)) {
1:5f2a748:       FileFactory.createDirectoryAndSetPermission(
1:5f2a748:           storePath,
1:5f2a748:           new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));
1:5f2a748:     }
1:5f2a748:     if (!FileFactory.isFileExist(mdtFilePath)) {
1:5f2a748:       FileFactory.createNewFile(
1:5f2a748:           mdtFilePath,
1:5f2a748:           FileFactory.getFileType(mdtFilePath),
1:5f2a748:           true,
1:5f2a748:           new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));
1:5f2a748:     }
1:5f2a748:     long lastModifiedTime = System.currentTimeMillis();
1:5f2a748:     FileFactory.getCarbonFile(mdtFilePath).setLastModifiedTime(lastModifiedTime);
1:5f2a748:     this.lastModifiedTime = lastModifiedTime;
1:5f2a748:   }
1:5f2a748: 
1:860e144:   /**
1:860e144:    * it returns the schema path for the datamap
1:860e144:    * @param storePath
1:860e144:    * @param dataMapName
1:860e144:    * @return
1:860e144:    */
1:5f2a748:   public static String getSchemaPath(String storePath, String dataMapName) {
1:5f2a748:     String schemaPath =  storePath + CarbonCommonConstants.FILE_SEPARATOR + dataMapName
1:5f2a748:         + ".dmschema";;
1:860e144:     return schemaPath;
1:05086e5:   }
1:05086e5: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:0ab03f2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
/////////////////////////////////////////////////////////////////////////
1:         if (StringUtils.isNotEmpty(identifier.getTableId())) {
1:           if (identifier.getTableId().equalsIgnoreCase(carbonTable.getTableId())) {
1:             dataMapSchemas.add(dataMapSchema);
1:             break;
1:           }
1:         } else if (identifier.getTableName().equalsIgnoreCase(carbonTable.getTableName()) &&
1:             identifier.getDatabaseName().equalsIgnoreCase(carbonTable.getDatabaseName())) {
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:         if (identifier.getTableName().equalsIgnoreCase(carbonTable.getTableName()) &&
0:             identifier.getDatabaseName().equalsIgnoreCase(carbonTable.getDatabaseName())) {
commit:5f2a748
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
1: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.fs.permission.FsAction;
1: import org.apache.hadoop.fs.permission.FsPermission;
/////////////////////////////////////////////////////////////////////////
1:   private String mdtFilePath;
1: 
1:   private long lastModifiedTime;
1: 
1:   private Set<DataMapSchema> dataMapSchemas = new HashSet<>();
1: 
1:     this.mdtFilePath = storePath + CarbonCommonConstants.FILE_SEPARATOR + "datamap.mdtfile";
1:     String schemaPath = getSchemaPath(storePath, dataMapSchema.getDataMapName());
/////////////////////////////////////////////////////////////////////////
0:       checkAndReloadDataMapSchemas();
1:       dataMapSchemas.add(dataMapSchema);
1:       touchMDTFile();
1:   @Override public DataMapSchema retrieveSchema(String dataMapName)
1:       throws IOException, NoSuchDataMapException {
0:     checkAndReloadDataMapSchemas();
1:     for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:       if (dataMapSchema.getDataMapName().equalsIgnoreCase(dataMapName)) {
1:         return dataMapSchema;
1:       }
1:     throw new NoSuchDataMapException(dataMapName);
1:   @Override public List<DataMapSchema> retrieveSchemas(CarbonTable carbonTable) throws IOException {
0:     checkAndReloadDataMapSchemas();
1:     List<DataMapSchema> dataMapSchemas = new ArrayList<>();
1:     for (DataMapSchema dataMapSchema : this.dataMapSchemas) {
1:       List<RelationIdentifier> parentTables = dataMapSchema.getParentTables();
1:       for (RelationIdentifier identifier : parentTables) {
0:         if (identifier.getTableName().equals(carbonTable.getTableName()) &&
0:             identifier.getDatabaseName().equals(carbonTable.getDatabaseName())) {
1:           dataMapSchemas.add(dataMapSchema);
1:           break;
1:         }
1:       }
0:     checkAndReloadDataMapSchemas();
1:     return new ArrayList<>(dataMapSchemas);
1:   }
1: 
1:   private Set<DataMapSchema> retrieveAllSchemasInternal() throws IOException {
1:     Set<DataMapSchema> dataMapSchemas = new HashSet<>();
/////////////////////////////////////////////////////////////////////////
1:       Gson gsonObjectToRead = new Gson();
1:       DataInputStream dataInputStream = null;
1:       BufferedReader buffReader = null;
1:       InputStreamReader inStream = null;
1:       try {
1:         String absolutePath = file.getAbsolutePath();
1:         dataInputStream =
1:             FileFactory.getDataInputStream(
1:                 absolutePath, FileFactory.getFileType(absolutePath));
1:         inStream = new InputStreamReader(dataInputStream,
1:             Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:         buffReader = new BufferedReader(inStream);
1:         dataMapSchemas.add(gsonObjectToRead.fromJson(buffReader, DataMapSchema.class));
1:       } finally {
1:         CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:       }
1:   @Override public void dropSchema(String dataMapName)
1:     String schemaPath = getSchemaPath(storePath, dataMapName);
0:     DataMapSchema dataMapSchemaToRemove = null;
0:     for (DataMapSchema dataMapSchema : dataMapSchemas) {
0:       if (dataMapSchema.getDataMapName().equalsIgnoreCase(dataMapName)) {
0:         dataMapSchemaToRemove =  dataMapSchema;
1:       }
1:     }
0:     if (dataMapSchemaToRemove != null) {
0:       dataMapSchemas.remove(dataMapSchemaToRemove);
1:     }
1:     } else {
1:       touchMDTFile();
0:   private void checkAndReloadDataMapSchemas() throws IOException {
1:     if (FileFactory.isFileExist(mdtFilePath)) {
1:       long lastModifiedTime = FileFactory.getCarbonFile(mdtFilePath).getLastModifiedTime();
1:       if (this.lastModifiedTime != lastModifiedTime) {
1:         dataMapSchemas = retrieveAllSchemasInternal();
1:         this.lastModifiedTime = lastModifiedTime;
1:       }
1:     } else {
1:       touchMDTFile();
1:       dataMapSchemas = retrieveAllSchemasInternal();
1:     }
1:   }
1: 
1:   private void touchMDTFile() throws IOException {
1:     if (!FileFactory.isFileExist(storePath)) {
1:       FileFactory.createDirectoryAndSetPermission(
1:           storePath,
1:           new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));
1:     }
1:     if (!FileFactory.isFileExist(mdtFilePath)) {
1:       FileFactory.createNewFile(
1:           mdtFilePath,
1:           FileFactory.getFileType(mdtFilePath),
1:           true,
1:           new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));
1:     }
1:     long lastModifiedTime = System.currentTimeMillis();
1:     FileFactory.getCarbonFile(mdtFilePath).setLastModifiedTime(lastModifiedTime);
1:   }
1: 
1:   public static String getSchemaPath(String storePath, String dataMapName) {
1:     String schemaPath =  storePath + CarbonCommonConstants.FILE_SEPARATOR + dataMapName
1:         + ".dmschema";;
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.io.BufferedReader;
1: import java.io.BufferedWriter;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.io.OutputStreamWriter;
1: import java.nio.charset.Charset;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: import com.google.gson.Gson;
1: 
1: /**
1:  * Stores datamap schema in disk as json format
1:  */
1: public class DiskBasedDMSchemaStorageProvider implements DataMapSchemaStorageProvider {
1: 
1:   private String storePath;
1: 
1:   public DiskBasedDMSchemaStorageProvider(String storePath) {
0:     this.storePath = storePath;
1:   }
1: 
1:   @Override public void saveSchema(DataMapSchema dataMapSchema) throws IOException {
1:     BufferedWriter brWriter = null;
1:     DataOutputStream dataOutputStream = null;
1:     Gson gsonObjectToWrite = new Gson();
0:     String schemaPath =
0:         storePath + CarbonCommonConstants.FILE_SEPARATOR + dataMapSchema.getDataMapName()
0:             + ".dmschema";
1:     FileFactory.FileType fileType = FileFactory.getFileType(schemaPath);
1:     if (FileFactory.isFileExist(schemaPath, fileType)) {
1:       throw new IOException(
1:           "DataMap with name " + dataMapSchema.getDataMapName() + " already exists in storage");
1:     }
1:     // write the datamap shema in json format.
1:     try {
1:       FileFactory.mkdirs(storePath, fileType);
1:       FileFactory.createNewFile(schemaPath, fileType);
1:       dataOutputStream =
1:           FileFactory.getDataOutputStream(schemaPath, fileType);
1:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutputStream,
1:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1: 
1:       String metadataInstance = gsonObjectToWrite.toJson(dataMapSchema);
1:       brWriter.write(metadataInstance);
1:     } finally {
1:       if (null != brWriter) {
1:         brWriter.flush();
1:       }
1:       CarbonUtil.closeStreams(dataOutputStream, brWriter);
1:     }
1:   }
1: 
0:   @Override public DataMapSchema retrieveSchema(String dataMapName) throws IOException {
0:     if (!dataMapName.endsWith(".dmschema")) {
0:       dataMapName = dataMapName + ".dmschema";
1:     }
0:     String schemaPath =
0:         storePath + CarbonCommonConstants.FILE_SEPARATOR + dataMapName;
1:     if (!FileFactory.isFileExist(schemaPath, FileFactory.getFileType(schemaPath))) {
1:       throw new IOException("DataMap with name " + dataMapName + " does not exists in storage");
1:     }
1: 
0:     Gson gsonObjectToRead = new Gson();
0:     DataInputStream dataInputStream = null;
0:     BufferedReader buffReader = null;
0:     InputStreamReader inStream = null;
1:     try {
0:       dataInputStream =
0:           FileFactory.getDataInputStream(schemaPath, FileFactory.getFileType(schemaPath));
0:       inStream = new InputStreamReader(dataInputStream,
0:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
0:       buffReader = new BufferedReader(inStream);
0:       return gsonObjectToRead.fromJson(buffReader, DataMapSchema.class);
1:     } finally {
0:       CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:     }
1: 
1:   }
1: 
0:   @Override public List<DataMapSchema> retrieveSchemas(List<String> dataMapNames)
1:       throws IOException {
0:     List<DataMapSchema> dataMapSchemas = new ArrayList<>(dataMapNames.size());
0:     for (String dataMapName : dataMapNames) {
0:       dataMapSchemas.add(retrieveSchema(dataMapName));
1:     }
1:     return dataMapSchemas;
1:   }
1: 
1:   @Override public List<DataMapSchema> retrieveAllSchemas() throws IOException {
0:     List<DataMapSchema> dataMapSchemas = new ArrayList<>();
1:     CarbonFile carbonFile = FileFactory.getCarbonFile(storePath);
1:     CarbonFile[] carbonFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:       @Override public boolean accept(CarbonFile file) {
1:         return file.getName().endsWith(".dmschema");
1:       }
1:     });
1: 
1:     for (CarbonFile file :carbonFiles) {
0:       dataMapSchemas.add(retrieveSchema(file.getName()));
1:     }
1:     return dataMapSchemas;
1:   }
1: 
0:   @Override public void dropSchema(String dataMapName) throws IOException {
0:     String schemaPath =
0:         storePath + CarbonCommonConstants.FILE_SEPARATOR + dataMapName + ".dmschema";
1:     if (!FileFactory.isFileExist(schemaPath, FileFactory.getFileType(schemaPath))) {
1:       throw new IOException("DataMap with name " + dataMapName + " does not exists in storage");
1:     }
1: 
1:     if (!FileFactory.deleteFile(schemaPath, FileFactory.getFileType(schemaPath))) {
1:       throw new IOException("DataMap with name " + dataMapName + " cannot be deleted");
1:     }
1:   }
1: }
author:ndwangsen
-------------------------------------------------------------------------------
commit:cdee81d
/////////////////////////////////////////////////////////////////////////
0:         if (identifier.getTableId().equalsIgnoreCase(carbonTable.getTableId())) {
author:xuchuanyin
-------------------------------------------------------------------------------
commit:98c7581
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:       checkAndReloadDataMapSchemas(true);
1:       touchMDTFile();
/////////////////////////////////////////////////////////////////////////
1:     Iterator<DataMapSchema> iterator = dataMapSchemas.iterator();
1:     while (iterator.hasNext()) {
1:       DataMapSchema schema = iterator.next();
1:       if (schema.getDataMapName().equalsIgnoreCase(dataMapName)) {
1:         iterator.remove();
0:     touchMDTFile();
/////////////////////////////////////////////////////////////////////////
0:         touchMDTFile();
0:       dataMapSchemas = retrieveAllSchemasInternal();
/////////////////////////////////////////////////////////////////////////
0:     this.lastModifiedTime = lastModifiedTime;
author:xubo245
-------------------------------------------------------------------------------
commit:cf55028
/////////////////////////////////////////////////////////////////////////
1:       checkAndReloadDataMapSchemas(true);
/////////////////////////////////////////////////////////////////////////
1:     checkAndReloadDataMapSchemas(true);
/////////////////////////////////////////////////////////////////////////
1:     checkAndReloadDataMapSchemas(false);
/////////////////////////////////////////////////////////////////////////
0:     checkAndReloadDataMapSchemas(true);
/////////////////////////////////////////////////////////////////////////
1:   private void checkAndReloadDataMapSchemas(boolean touchFile) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       if (touchFile) {
0:         touchMDTFile();
0:       }
author:Indhumathi27
-------------------------------------------------------------------------------
commit:61afa42
/////////////////////////////////////////////////////////////////////////
1:     this.storePath = CarbonUtil.checkAndAppendHDFSUrl(storePath);
author:akashrn5
-------------------------------------------------------------------------------
commit:860e144
/////////////////////////////////////////////////////////////////////////
0:     String schemaPath = getSchemaPath(storePath, dataMapSchema.getDataMapName(),
0:         dataMapSchema.relationIdentifier.getTableName(), dataMapSchema.getProviderName());
/////////////////////////////////////////////////////////////////////////
0:   @Override public void dropSchema(String dataMapName, String tableName, String dataMapProviderName)
0:       throws IOException {
0:     String schemaPath = getSchemaPath(storePath, dataMapName, tableName, dataMapProviderName);
/////////////////////////////////////////////////////////////////////////
0: 
1:   /**
1:    * it returns the schema path for the datamap
1:    * @param storePath
1:    * @param dataMapName
0:    * @param tableName
0:    * @param dataMapProviderName
1:    * @return
1:    */
0:   public static String getSchemaPath(String storePath, String dataMapName, String tableName,
0:       String dataMapProviderName) {
0:     String schemaPath = storePath + CarbonCommonConstants.FILE_SEPARATOR + tableName
0:         + CarbonCommonConstants.UNDERSCORE + dataMapName + CarbonCommonConstants.UNDERSCORE
0:         + dataMapProviderName + ".dmschema";
1:     return schemaPath;
0:   }
============================================================================