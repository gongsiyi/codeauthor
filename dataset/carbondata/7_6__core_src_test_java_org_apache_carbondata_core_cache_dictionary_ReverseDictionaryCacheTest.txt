1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:e02f021: import static org.junit.Assert.assertEquals;
1:cd6a4ff: import static org.junit.Assert.assertTrue;
1:e02f021: import static org.junit.Assert.fail;
1:cd6a4ff: 
1:eaadc88: import java.io.IOException;
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.UUID;
1:cd6a4ff: 
1:cd6a4ff: import mockit.Mock;
1:cd6a4ff: import mockit.MockUp;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.Cache;
1:cd6a4ff: import org.apache.carbondata.core.cache.CacheProvider;
1:cd6a4ff: import org.apache.carbondata.core.cache.CacheType;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cd6a4ff: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:eaadc88: 
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Test class to test the functionality of reverse dictionary cache
1:cd6a4ff:  */
1:cd6a4ff: public class ReverseDictionaryCacheTest extends AbstractDictionaryCacheTest {
1:cd6a4ff: 
1:cd6a4ff:   protected Cache reverseDictionaryCache;
1:cd6a4ff: 
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     init();
1:cd6a4ff:     this.databaseName = props.getProperty("database", "testSchema");
1:cd6a4ff:     this.tableName = props.getProperty("tableName", "carbon");
1:cd6a4ff:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
1:1155d4d:     carbonTableIdentifier =
1:1155d4d:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:bf6c471:     identifier = AbsoluteTableIdentifier.from(
1:2fe7758:         carbonStorePath + "/" + databaseName + "/" + tableName, carbonTableIdentifier);
1:cd6a4ff:     columnIdentifiers = new String[] { "name", "place" };
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     prepareDataSet();
1:cd6a4ff:     createDictionaryCacheObject();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:     carbonTableIdentifier = null;
1:cd6a4ff:     reverseDictionaryCache = null;
1:bf6c471:     identifier = null;
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void createDictionaryCacheObject() {
1:cd6a4ff:     // enable lru cache by setting cache size
1:cd6a4ff:     CarbonProperties.getInstance()
1:b6ab4ef:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:cd6a4ff:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:f093093:     cacheProvider.dropAllCache();
1:cd6a4ff:     reverseDictionaryCache =
1:1155d4d:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void get() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
2:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     Dictionary reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:     compareSurrogateKeyData(dataSet1, reverseDictionary);
1:cd6a4ff:     // decrement its access count
1:cd6a4ff:     reverseDictionary.clear();
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(reverseDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void getAll() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers = new ArrayList<>(3);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     columnIdentifier = columnIdentifiers[1];
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     List<Dictionary> reverseDictionaryList =
1:cd6a4ff:         (List<Dictionary>) reverseDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);
1:cd6a4ff:     for (Dictionary reverseDictionary : reverseDictionaryList) {
1:cd6a4ff:       // reverse dictionary object should not be null
1:cd6a4ff:       assertTrue(null != reverseDictionary);
1:cd6a4ff:       // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:       compareSurrogateKeyData(dataSet1, reverseDictionary);
1:cd6a4ff:       // decrement its access count
1:cd6a4ff:       reverseDictionary.clear();
1:cd6a4ff:     }
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(reverseDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void getIfPresent() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     Dictionary reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.getIfPresent(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // compare that surrogate key for data inserted and actual data should be same
1:cd6a4ff:     compareSurrogateKeyData(dataSet1, reverseDictionary);
1:cd6a4ff:     // remove the identifier from lru cache
1:cd6a4ff:     reverseDictionaryCache.invalidate(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // use getIfPresent API to get the reverse dictionary cache again
1:cd6a4ff:     reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.getIfPresent(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // as key has been removed from lru cache object should not be found
2:cd6a4ff:     assertTrue(null == reverseDictionary);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testLRUCacheForMaxSize() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     // mock get end offset method so that required size is greater than
1:cd6a4ff:     // available size limit
1:cd6a4ff:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:cd6a4ff:       @Mock public long getEnd_offset() {
1:cd6a4ff:         return 123456789L;
1:cd6a4ff:       }
1:cd6a4ff:     };
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     Dictionary reverseDictionary = null;
1:cd6a4ff:     try {
1:cd6a4ff:       reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:e02f021:       fail("not throwing exception");
1:cd6a4ff:     } catch (Exception e) {
1:eaadc88:       assertTrue(e instanceof IOException);
1:cd6a4ff:     }
1:e02f021:     assertEquals(null, reverseDictionary);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testLRUCacheForKeyDeletionAfterMaxSizeIsReached() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     Dictionary reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     // decrement access count
1:cd6a4ff:     reverseDictionary.clear();
1:cd6a4ff:     // mock get end offset method so that required size is greater than
1:cd6a4ff:     // available size limit
1:cd6a4ff:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:cd6a4ff:       @Mock public long getEnd_offset() {
1:377dee9:         return 10445000L;
1:cd6a4ff:       }
1:cd6a4ff:     };
1:cd6a4ff:     columnIdentifier = columnIdentifiers[1];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     // lru cache should delete the existing key and empty the size for new key addition
1:cd6a4ff:     reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(reverseDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testMultipleDictionaryChunks() throws Exception {
1:cd6a4ff:     // delete store path
1:cd6a4ff:     deleteStorePath();
1:cd6a4ff:     String columnIdentifier = columnIdentifiers[0];
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:cd6a4ff:     // create dictionary column unique identifier instance
1:cd6a4ff:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:cd6a4ff:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     Dictionary reverseDictionary =
1:cd6a4ff:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     // prepare dictionary writer and write data
1:cd6a4ff:     prepareWriterAndWriteData(dataSet2, columnIdentifier);
1:cd6a4ff:     // get the reverse dictionary object
1:cd6a4ff:     reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:cd6a4ff:     // reverse dictionary object should not be null
1:cd6a4ff:     assertTrue(null != reverseDictionary);
1:cd6a4ff:     // prepare expected result
1:cd6a4ff:     List<String> expected = new ArrayList<>(2);
1:cd6a4ff:     expected.addAll(dataSet1);
1:cd6a4ff:     expected.addAll(dataSet2);
1:cd6a4ff:     // compare the data
1:cd6a4ff:     compareSurrogateKeyData(expected, reverseDictionary);
1:cd6a4ff:     // decrement access count
1:cd6a4ff:     reverseDictionary.clear();
1:cd6a4ff:     // remove keys from lru cache
1:cd6a4ff:     removeKeyFromLRUCache(reverseDictionaryCache);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will compare the actual data with expected data
1:cd6a4ff:    *
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @param reverseDictionary
1:cd6a4ff:    */
1:cd6a4ff:   private void compareSurrogateKeyData(List<String> data, Dictionary reverseDictionary) {
1:cd6a4ff:     int surrogateKey = 0;
1:cd6a4ff:     for (int i = 0; i < data.size(); i++) {
1:cd6a4ff:       surrogateKey++;
1:cd6a4ff:       assertTrue(surrogateKey == reverseDictionary.getSurrogateKey(data.get(i)));
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff:   protected DictionaryColumnUniqueIdentifier createDictionaryColumnUniqueIdentifier(
1:cd6a4ff: 	      String columnId) {
1:956833e: 	    ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataTypes.DOUBLE);
1:bf6c471:     return new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier);
1:cd6a4ff: 	  }
1:cd6a4ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
1:     identifier = AbsoluteTableIdentifier.from(
/////////////////////////////////////////////////////////////////////////
1:     identifier = null;
/////////////////////////////////////////////////////////////////////////
1:     return new DictionaryColumnUniqueIdentifier(identifier, columnIdentifier);
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
0:     absoluteTableIdentifier = AbsoluteTableIdentifier.from(
1:         carbonStorePath + "/" + databaseName + "/" + tableName, carbonTableIdentifier);
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1: 	    ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataTypes.DOUBLE);
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     carbonTableIdentifier =
1:         new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
0:     absoluteTableIdentifier =
0:         new AbsoluteTableIdentifier(carbonStorePath + "/" + databaseName + "/" + tableName,
0:             carbonTableIdentifier);
/////////////////////////////////////////////////////////////////////////
0:     absoluteTableIdentifier = null;
/////////////////////////////////////////////////////////////////////////
1:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
/////////////////////////////////////////////////////////////////////////
0:     return new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier, columnIdentifier);
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1:         return 10445000L;
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
0:     return new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       assertTrue(e instanceof IOException);
commit:f031394
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
0: 	    ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, DataType.DOUBLE);
commit:e02f021
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:       fail("not throwing exception");
1:     assertEquals(null, reverseDictionary);
author:ravipesala
-------------------------------------------------------------------------------
commit:f093093
/////////////////////////////////////////////////////////////////////////
1:     cacheProvider.dropAllCache();
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.UUID;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: 
1: import org.apache.carbondata.core.cache.Cache;
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.cache.CacheType;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.reader.CarbonDictionaryColumnMetaChunk;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test class to test the functionality of reverse dictionary cache
1:  */
1: public class ReverseDictionaryCacheTest extends AbstractDictionaryCacheTest {
1: 
1:   protected Cache reverseDictionaryCache;
1: 
1:   @Before public void setUp() throws Exception {
1:     init();
1:     this.databaseName = props.getProperty("database", "testSchema");
1:     this.tableName = props.getProperty("tableName", "carbon");
1:     this.carbonStorePath = props.getProperty("storePath", "carbonStore");
0:     carbonTableIdentifier = new CarbonTableIdentifier(databaseName, tableName, UUID.randomUUID().toString());
1:     columnIdentifiers = new String[] { "name", "place" };
1:     deleteStorePath();
1:     prepareDataSet();
1:     createDictionaryCacheObject();
1:   }
1: 
1:   @After public void tearDown() throws Exception {
1:     carbonTableIdentifier = null;
1:     reverseDictionaryCache = null;
1:     deleteStorePath();
1:   }
1: 
1:   private void createDictionaryCacheObject() {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
0:         .addProperty(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE, "10");
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:     reverseDictionaryCache =
0:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY, this.carbonStorePath);
1:   }
1: 
1:   @Test public void get() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     Dictionary reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     // compare that surrogate key for data inserted and actual data should be same
1:     compareSurrogateKeyData(dataSet1, reverseDictionary);
1:     // decrement its access count
1:     reverseDictionary.clear();
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(reverseDictionaryCache);
1:   }
1: 
1:   @Test public void getAll() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers = new ArrayList<>(3);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:     // prepare dictionary writer and write data
1:     columnIdentifier = columnIdentifiers[1];
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);
1:     // get the reverse dictionary object
1:     List<Dictionary> reverseDictionaryList =
1:         (List<Dictionary>) reverseDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);
1:     for (Dictionary reverseDictionary : reverseDictionaryList) {
1:       // reverse dictionary object should not be null
1:       assertTrue(null != reverseDictionary);
1:       // compare that surrogate key for data inserted and actual data should be same
1:       compareSurrogateKeyData(dataSet1, reverseDictionary);
1:       // decrement its access count
1:       reverseDictionary.clear();
1:     }
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(reverseDictionaryCache);
1:   }
1: 
1:   @Test public void getIfPresent() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     Dictionary reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.getIfPresent(dictionaryColumnUniqueIdentifier);
1:     // compare that surrogate key for data inserted and actual data should be same
1:     compareSurrogateKeyData(dataSet1, reverseDictionary);
1:     // remove the identifier from lru cache
1:     reverseDictionaryCache.invalidate(dictionaryColumnUniqueIdentifier);
1:     // use getIfPresent API to get the reverse dictionary cache again
1:     reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.getIfPresent(dictionaryColumnUniqueIdentifier);
1:     // as key has been removed from lru cache object should not be found
1:     assertTrue(null == reverseDictionary);
1:   }
1: 
1:   @Test public void testLRUCacheForMaxSize() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     // mock get end offset method so that required size is greater than
1:     // available size limit
1:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:       @Mock public long getEnd_offset() {
1:         return 123456789L;
1:       }
1:     };
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     Dictionary reverseDictionary = null;
1:     try {
1:       reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     } catch (Exception e) {
0:       assertTrue(e instanceof CarbonUtilException);
1:     }
1:     assertTrue(null == reverseDictionary);
1:   }
1: 
1:   @Test public void testLRUCacheForKeyDeletionAfterMaxSizeIsReached() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     Dictionary reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     // decrement access count
1:     reverseDictionary.clear();
1:     // mock get end offset method so that required size is greater than
1:     // available size limit
1:     new MockUp<CarbonDictionaryColumnMetaChunk>() {
1:       @Mock public long getEnd_offset() {
0:         return 10485755L;
1:       }
1:     };
1:     columnIdentifier = columnIdentifiers[1];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     dictionaryColumnUniqueIdentifier = createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     // lru cache should delete the existing key and empty the size for new key addition
1:     reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(reverseDictionaryCache);
1:   }
1: 
1:   @Test public void testMultipleDictionaryChunks() throws Exception {
1:     // delete store path
1:     deleteStorePath();
1:     String columnIdentifier = columnIdentifiers[0];
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet1, columnIdentifier);
1:     // create dictionary column unique identifier instance
1:     DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
1:         createDictionaryColumnUniqueIdentifier(columnIdentifier);
1:     // get the reverse dictionary object
1:     Dictionary reverseDictionary =
1:         (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     // prepare dictionary writer and write data
1:     prepareWriterAndWriteData(dataSet2, columnIdentifier);
1:     // get the reverse dictionary object
1:     reverseDictionary = (Dictionary) reverseDictionaryCache.get(dictionaryColumnUniqueIdentifier);
1:     // reverse dictionary object should not be null
1:     assertTrue(null != reverseDictionary);
1:     // prepare expected result
1:     List<String> expected = new ArrayList<>(2);
1:     expected.addAll(dataSet1);
1:     expected.addAll(dataSet2);
1:     // compare the data
1:     compareSurrogateKeyData(expected, reverseDictionary);
1:     // decrement access count
1:     reverseDictionary.clear();
1:     // remove keys from lru cache
1:     removeKeyFromLRUCache(reverseDictionaryCache);
1:   }
1: 
1:   /**
1:    * This method will compare the actual data with expected data
1:    *
1:    * @param data
1:    * @param reverseDictionary
1:    */
1:   private void compareSurrogateKeyData(List<String> data, Dictionary reverseDictionary) {
1:     int surrogateKey = 0;
1:     for (int i = 0; i < data.size(); i++) {
1:       surrogateKey++;
1:       assertTrue(surrogateKey == reverseDictionary.getSurrogateKey(data.get(i)));
1:     }
1:   }
1:   protected DictionaryColumnUniqueIdentifier createDictionaryColumnUniqueIdentifier(
1: 	      String columnId) {
0: 	    ColumnIdentifier columnIdentifier = new ColumnIdentifier(columnId, null, null);
1: 	    DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier =
0: 	        new DictionaryColumnUniqueIdentifier(carbonTableIdentifier, columnIdentifier);
0: 	    return dictionaryColumnUniqueIdentifier;
1: 	  }
1: }
============================================================================