1:bbb1092: /*
1:bbb1092:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbb1092:  * contributor license agreements.  See the NOTICE file distributed with
1:bbb1092:  * this work for additional information regarding copyright ownership.
1:bbb1092:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbb1092:  * (the "License"); you may not use this file except in compliance with
1:bbb1092:  * the License.  You may obtain a copy of the License at
1:bbb1092:  *
1:bbb1092:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bbb1092:  *
1:bbb1092:  * Unless required by applicable law or agreed to in writing, software
1:bbb1092:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbb1092:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbb1092:  * See the License for the specific language governing permissions and
1:bbb1092:  * limitations under the License.
1:bbb1092:  */
1:bbb1092: 
1:bbb1092: package org.apache.carbondata.datamap.lucene;
1:bbb1092: 
1:bbb1092: import java.io.IOException;
1:bbb1092: import java.util.ArrayList;
1:bbb1092: import java.util.List;
1:bbb1092: 
1:bbb1092: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:9db662a: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:bbb1092: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:bbb1092: import org.apache.carbondata.core.datamap.DataMapLevel;
1:5397c05: import org.apache.carbondata.core.datamap.Segment;
1:bbb1092: import org.apache.carbondata.core.datamap.dev.DataMapModel;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1:bbb1092: import org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainDataMap;
1:8f1a029: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:5229443: import org.apache.carbondata.core.features.TableOperation;
1:bbb1092: import org.apache.carbondata.core.memory.MemoryException;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:bbb1092: 
1:bbb1092: /**
1:784b22d:  * FG level of lucene DataMap
1:bbb1092:  */
1:bbb1092: @InterfaceAudience.Internal
1:bbb1092: public class LuceneFineGrainDataMapFactory extends LuceneDataMapFactoryBase<FineGrainDataMap> {
1:bbb1092: 
1:9db662a:   public LuceneFineGrainDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema)
1:9db662a:       throws MalformedDataMapCommandException {
1:9db662a:     super(carbonTable, dataMapSchema);
1:9db662a:   }
1:9db662a: 
1:bbb1092:   /**
1:bbb1092:    * Get the datamap for segmentid
1:bbb1092:    */
1:c58eb43:   @Override public List<FineGrainDataMap> getDataMaps(Segment segment) throws IOException {
1:bbb1092:     List<FineGrainDataMap> lstDataMap = new ArrayList<>();
1:f184de8:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer, getDataMapSchema());
1:bbb1092:     try {
1:bbb1092:       dataMap.init(new DataMapModel(
1:8f1a029:           DataMapWriter.getDefaultDataMapPath(tableIdentifier.getTablePath(),
1:8f1a029:               segment.getSegmentNo(), dataMapName), segment.getConfiguration()));
1:bbb1092:     } catch (MemoryException e) {
1:bbb1092:       LOGGER.error("failed to get lucene datamap , detail is {}" + e.getMessage());
1:bbb1092:       return lstDataMap;
1:bbb1092:     }
1:bbb1092:     lstDataMap.add(dataMap);
1:bbb1092:     return lstDataMap;
1:bbb1092:   }
1:bbb1092: 
1:bbb1092:   /**
1:bbb1092:    * Get datamaps for distributable object.
1:bbb1092:    */
1:5397c05:   @Override
1:bbb1092:   public List<FineGrainDataMap> getDataMaps(DataMapDistributable distributable)
1:bbb1092:       throws IOException {
1:860e144:     List<FineGrainDataMap> lstDataMap = new ArrayList<>();
1:f184de8:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer, getDataMapSchema());
1:860e144:     String indexPath = ((LuceneDataMapDistributable) distributable).getIndexPath();
1:860e144:     try {
1:8f1a029:       dataMap.init(new DataMapModel(indexPath, FileFactory.getConfiguration()));
1:860e144:     } catch (MemoryException e) {
1:860e144:       LOGGER.error(String.format("failed to get lucene datamap , detail is %s", e.getMessage()));
1:860e144:       return lstDataMap;
1:bbb1092:     }
1:860e144:     lstDataMap.add(dataMap);
1:860e144:     return lstDataMap;
1:bbb1092:   }
1:bbb1092: 
1:5397c05:   @Override
1:9db662a:   public DataMapLevel getDataMapLevel() {
1:bbb1092:     return DataMapLevel.FG;
1:bbb1092:   }
1:bbb1092: 
1:5229443:   @Override public boolean willBecomeStale(TableOperation operation) {
1:5229443:     switch (operation) {
1:5229443:       case ALTER_RENAME:
2:5229443:         return true;
1:5229443:       case ALTER_DROP:
1:5229443:         return true;
1:5229443:       case ALTER_ADD_COLUMN:
1:5229443:         return true;
1:5229443:       case ALTER_CHANGE_DATATYPE:
1:5229443:         return true;
1:5229443:       case STREAMING:
1:b9e5106:         return false;
1:5229443:       case DELETE:
1:5229443:         return true;
1:5229443:       case UPDATE:
1:5229443:         return true;
1:5229443:       case PARTITION:
1:5229443:         return true;
1:5229443:       default:
1:5229443:         return false;
1:5229443:     }
1:5229443:   }
1:860e144: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
/////////////////////////////////////////////////////////////////////////
1:           DataMapWriter.getDefaultDataMapPath(tableIdentifier.getTablePath(),
1:               segment.getSegmentNo(), dataMapName), segment.getConfiguration()));
/////////////////////////////////////////////////////////////////////////
1:       dataMap.init(new DataMapModel(indexPath, FileFactory.getConfiguration()));
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b9e5106
/////////////////////////////////////////////////////////////////////////
1:         return false;
commit:5397c05
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public List<FineGrainDataMap> getDataMaps(Segment segment) throws IOException {
0:               tableIdentifier.getTablePath(), segment.getSegmentNo(), dataMapName)));
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:     return getDataMaps(distributable.getSegment());
author:ravipesala
-------------------------------------------------------------------------------
commit:f184de8
/////////////////////////////////////////////////////////////////////////
1:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer, getDataMapSchema());
/////////////////////////////////////////////////////////////////////////
1:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer, getDataMapSchema());
author:xubo245
-------------------------------------------------------------------------------
commit:784b22d
/////////////////////////////////////////////////////////////////////////
1:  * FG level of lucene DataMap
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.core.datamap.dev.DataMapWriter;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
1:   public LuceneFineGrainDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema)
1:       throws MalformedDataMapCommandException {
1:     super(carbonTable, dataMapSchema);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:           DataMapWriter.getDefaultDataMapPath(
/////////////////////////////////////////////////////////////////////////
1:   public DataMapLevel getDataMapLevel() {
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap.lucene;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: import org.apache.carbondata.core.datamap.DataMapLevel;
1: import org.apache.carbondata.core.datamap.dev.DataMapModel;
1: import org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainDataMap;
1: import org.apache.carbondata.core.memory.MemoryException;
1: 
1: /**
0:  * CG level of lucene DataMap
1:  */
1: @InterfaceAudience.Internal
1: public class LuceneFineGrainDataMapFactory extends LuceneDataMapFactoryBase<FineGrainDataMap> {
1: 
1:   /**
1:    * Get the datamap for segmentid
1:    */
0:   public List<FineGrainDataMap> getDataMaps(String segmentId) throws IOException {
1:     List<FineGrainDataMap> lstDataMap = new ArrayList<>();
0:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer);
1:     try {
1:       dataMap.init(new DataMapModel(
0:           LuceneDataMapWriter.genDataMapStorePath(
0:               tableIdentifier.getTablePath(), segmentId, dataMapName)));
1:     } catch (MemoryException e) {
1:       LOGGER.error("failed to get lucene datamap , detail is {}" + e.getMessage());
1:       return lstDataMap;
1:     }
1:     lstDataMap.add(dataMap);
1:     return lstDataMap;
1:   }
1: 
1:   /**
1:    * Get datamaps for distributable object.
1:    */
1:   public List<FineGrainDataMap> getDataMaps(DataMapDistributable distributable)
1:       throws IOException {
0:     return getDataMaps(distributable.getSegmentId());
1:   }
1: 
0:   @Override
0:   public DataMapLevel getDataMapType() {
1:     return DataMapLevel.FG;
1:   }
1: 
1: }
author:akashrn5
-------------------------------------------------------------------------------
commit:5229443
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.features.TableOperation;
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean willBecomeStale(TableOperation operation) {
1:     switch (operation) {
1:       case ALTER_RENAME:
1:         return true;
1:       case ALTER_DROP:
1:         return true;
1:       case ALTER_ADD_COLUMN:
1:         return true;
1:       case ALTER_CHANGE_DATATYPE:
1:         return true;
1:       case STREAMING:
1:         return true;
1:       case DELETE:
1:         return true;
1:       case UPDATE:
1:         return true;
1:       case PARTITION:
1:         return true;
1:       default:
1:         return false;
1:     }
1:   }
commit:860e144
/////////////////////////////////////////////////////////////////////////
1:     List<FineGrainDataMap> lstDataMap = new ArrayList<>();
0:     FineGrainDataMap dataMap = new LuceneFineGrainDataMap(analyzer);
1:     String indexPath = ((LuceneDataMapDistributable) distributable).getIndexPath();
1:     try {
0:       dataMap.init(new DataMapModel(indexPath));
1:     } catch (MemoryException e) {
1:       LOGGER.error(String.format("failed to get lucene datamap , detail is %s", e.getMessage()));
1:       return lstDataMap;
1:     }
1:     lstDataMap.add(dataMap);
1:     return lstDataMap;
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override public List<FineGrainDataMap> getDataMaps(Segment segment) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:   public List<FineGrainDataMap> getDataMaps(DataMapDistributable distributable)
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
0:   @Override public List<FineGrainDataMap> getDataMaps(Segment segment,
0:       ReadCommittedScope readCommittedScope) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:   public List<FineGrainDataMap> getDataMaps(DataMapDistributable distributable,
0:       ReadCommittedScope readCommittedScope)
0:     return getDataMaps(distributable.getSegment(), readCommittedScope);
============================================================================