1:e6a4f64: /*
1:e6a4f64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6a4f64:  * contributor license agreements.  See the NOTICE file distributed with
1:e6a4f64:  * this work for additional information regarding copyright ownership.
1:e6a4f64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6a4f64:  * (the "License"); you may not use this file except in compliance with
1:e6a4f64:  * the License.  You may obtain a copy of the License at
1:e6a4f64:  *
1:e6a4f64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e6a4f64:  *
1:e6a4f64:  * Unless required by applicable law or agreed to in writing, software
1:e6a4f64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6a4f64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6a4f64:  * See the License for the specific language governing permissions and
1:e6a4f64:  * limitations under the License.
1:e6a4f64:  */
11:e6a4f64: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding.compress;
1:e6a4f64: 
1:e6a4f64: import java.io.IOException;
1:e6a4f64: import java.util.ArrayList;
1:e6a4f64: import java.util.List;
1:e6a4f64: import java.util.Map;
1:e6a4f64: 
1:e6a4f64: import org.apache.carbondata.core.datastore.compression.Compressor;
1:e6a4f64: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:e6a4f64: import org.apache.carbondata.core.memory.MemoryException;
1:e6a4f64: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:e6a4f64: import org.apache.carbondata.format.Encoding;
1:e6a4f64: 
1:e6a4f64: /**
1:e6a4f64:  * This codec directly apply compression on the input data
1:e6a4f64:  */
1:e6a4f64: public class DirectCompressCodec implements ColumnPageCodec {
1:e6a4f64: 
1:e6a4f64:   private DataType dataType;
1:e6a4f64: 
1:e6a4f64:   public DirectCompressCodec(DataType dataType) {
1:e6a4f64:     this.dataType = dataType;
10:e6a4f64:   }
1:e6a4f64: 
5:e6a4f64:   @Override
1:e6a4f64:   public String getName() {
1:e6a4f64:     return "DirectCompressCodec";
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:8f08c4a:     return new ColumnPageEncoder() {
1:8f08c4a: 
1:8f08c4a:       @Override
1:8f08c4a:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:8f08c4a:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:             input.getColumnCompressorName());
1:8f08c4a:         return input.compress(compressor);
1:8f08c4a:       }
1:8f08c4a: 
1:8f08c4a:       @Override
1:8f08c4a:       protected List<Encoding> getEncodingList() {
1:8f08c4a:         List<Encoding> encodings = new ArrayList<>();
1:8f08c4a:         encodings.add(dataType == DataTypes.VARCHAR ?
1:8f08c4a:             Encoding.DIRECT_COMPRESS_VARCHAR :
1:8f08c4a:             Encoding.DIRECT_COMPRESS);
1:8f08c4a:         return encodings;
1:8f08c4a:       }
1:8f08c4a: 
1:8f08c4a:       @Override
1:8f08c4a:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:8f08c4a:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), inputPage.getDataType(),
1:8f08c4a:             inputPage.getStatistics(), inputPage.getColumnCompressorName());
1:8f08c4a:       }
1:8f08c4a:     };
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:8f08c4a:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:8f08c4a:     return new ColumnPageDecoder() {
1:e6a4f64: 
1:8f08c4a:       @Override
1:8f08c4a:       public ColumnPage decode(byte[] input, int offset, int length) throws MemoryException {
1:8f08c4a:         ColumnPage decodedPage;
1:8f08c4a:         if (DataTypes.isDecimal(dataType)) {
1:8f08c4a:           decodedPage = ColumnPage.decompressDecimalPage(meta, input, offset, length);
1:8f08c4a:         } else {
1:8f08c4a:           decodedPage = ColumnPage.decompress(meta, input, offset, length, false);
1:8f08c4a:         }
1:8f08c4a:         return LazyColumnPage.newPage(decodedPage, converter);
1:e6a4f64:       }
1:43285bb: 
1:8f08c4a:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:43285bb:         throws MemoryException, IOException {
1:8f08c4a:         return LazyColumnPage.newPage(
1:8f08c4a:             ColumnPage.decompress(meta, input, offset, length, isLVEncoded), converter);
1:8f08c4a:       }
1:8f08c4a:     };
1:43285bb:   }
1:e6a4f64: 
1:e6a4f64:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, byte value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, short value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, int value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, long value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, float value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public void encode(int rowId, double value) {
1:e6a4f64:       throw new RuntimeException("internal error");
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public long decodeLong(byte value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public long decodeLong(short value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public long decodeLong(int value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(byte value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(short value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(int value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(long value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(float value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64: 
1:e6a4f64:     @Override
1:e6a4f64:     public double decodeDouble(double value) {
1:e6a4f64:       return value;
1:e6a4f64:     }
1:e6a4f64:   };
1:e6a4f64: 
1:e6a4f64: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return new ColumnPageEncoder() {
1: 
1:       @Override
1:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:             input.getColumnCompressorName());
1:         return input.compress(compressor);
1:       }
1: 
1:       @Override
1:       protected List<Encoding> getEncodingList() {
1:         List<Encoding> encodings = new ArrayList<>();
1:         encodings.add(dataType == DataTypes.VARCHAR ?
1:             Encoding.DIRECT_COMPRESS_VARCHAR :
1:             Encoding.DIRECT_COMPRESS);
1:         return encodings;
1:       }
1: 
1:       @Override
1:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), inputPage.getDataType(),
1:             inputPage.getStatistics(), inputPage.getColumnCompressorName());
1:       }
1:     };
1:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:     return new ColumnPageDecoder() {
1:       @Override
1:       public ColumnPage decode(byte[] input, int offset, int length) throws MemoryException {
1:         ColumnPage decodedPage;
1:         if (DataTypes.isDecimal(dataType)) {
1:           decodedPage = ColumnPage.decompressDecimalPage(meta, input, offset, length);
1:         } else {
1:           decodedPage = ColumnPage.decompress(meta, input, offset, length, false);
1:         }
1:         return LazyColumnPage.newPage(decodedPage, converter);
1:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:         return LazyColumnPage.newPage(
1:             ColumnPage.decompress(meta, input, offset, length, isLVEncoded), converter);
1:       }
1:     };
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
0:   private class DirectCompressor extends ColumnPageEncoder {
/////////////////////////////////////////////////////////////////////////
0:       encodings.add(dataType == DataTypes.VARCHAR ?
0:           Encoding.DIRECT_COMPRESS_VARCHAR :
0:           Encoding.DIRECT_COMPRESS);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
0:         decodedPage = ColumnPage.decompress(meta, input, offset, length, false);
1: 
0:     @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:         throws MemoryException, IOException {
0:       return LazyColumnPage
0:           .newPage(ColumnPage.decompress(meta, input, offset, length, isLVEncoded), converter);
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0:       if (DataTypes.isDecimal(dataType)) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:       if (dataType == DataTypes.DECIMAL) {
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:     return new DirectDecompressor(meta);
/////////////////////////////////////////////////////////////////////////
0:       return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), inputPage.getDataType(),
0:           inputPage.getStatistics(), compressor.getName());
0:     private ColumnPageEncoderMeta meta;
0:     DirectDecompressor(ColumnPageEncoderMeta meta) {
0:       this.meta = meta;
0:         decodedPage = ColumnPage.decompressDecimalPage(meta, input, offset, length);
0:         decodedPage = ColumnPage.decompress(meta, input, offset, length);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding.compress;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.format.Encoding;
1: 
1: /**
1:  * This codec directly apply compression on the input data
1:  */
1: public class DirectCompressCodec implements ColumnPageCodec {
1: 
1:   private DataType dataType;
1: 
1:   public DirectCompressCodec(DataType dataType) {
1:     this.dataType = dataType;
1:   }
1: 
1:   @Override
1:   public String getName() {
1:     return "DirectCompressCodec";
1:   }
1: 
1:   @Override
1:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
0:     // TODO: make compressor configurable in create table
0:     return new DirectCompressor(CarbonCommonConstants.DEFAULT_COMPRESSOR);
1:   }
1: 
1:   @Override
0:   public ColumnPageDecoder createDecoder(ColumnPageEncoderMeta meta) {
0:     DirectCompressorEncoderMeta codecMeta = (DirectCompressorEncoderMeta) meta;
0:     return new DirectDecompressor(codecMeta.getCompressorName(),
0:         codecMeta.getScale(), codecMeta.getPrecision());
1:   }
1: 
0:   private class DirectCompressor extends ColumnPageEncoder {
1: 
0:     private Compressor compressor;
1: 
0:     DirectCompressor(String compressorName) {
0:       this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
1:     }
1: 
1:     @Override
0:     protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
0:       return input.compress(compressor);
1:     }
1: 
1:     @Override
0:     protected List<Encoding> getEncodingList() {
0:       List<Encoding> encodings = new ArrayList<>();
0:       encodings.add(Encoding.DIRECT_COMPRESS);
0:       return encodings;
1:     }
1: 
1:     @Override
0:     protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
0:       return new DirectCompressorEncoderMeta(compressor.getName(), inputPage.getDataType(),
0:           inputPage.getStatistics());
1:     }
1: 
1:   }
1: 
0:   private class DirectDecompressor implements ColumnPageDecoder {
1: 
0:     private Compressor compressor;
0:     private int scale;
0:     private int precision;
1: 
0:     DirectDecompressor(String compressorName, int scale, int precision) {
0:       this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
0:       this.scale = scale;
0:       this.precision = precision;
1:     }
1: 
1:     @Override
0:     public ColumnPage decode(byte[] input, int offset, int length) throws MemoryException {
0:       ColumnPage decodedPage;
0:       if (dataType == DataType.DECIMAL) {
0:         decodedPage = ColumnPage.decompressDecimalPage(compressor, input, offset, length,
0:             scale, precision);
0:       } else {
0:         decodedPage = ColumnPage.decompress(compressor, dataType, input, offset, length);
1:       }
0:       return LazyColumnPage.newPage(decodedPage, converter);
1:     }
1:   }
1: 
1:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:     @Override
1:     public void encode(int rowId, byte value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, short value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, int value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, long value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, float value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, double value) {
1:       throw new RuntimeException("internal error");
1:     }
1: 
1:     @Override
1:     public long decodeLong(byte value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public long decodeLong(short value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public long decodeLong(int value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(byte value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(short value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(int value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(long value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(float value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(double value) {
1:       return value;
1:     }
1:   };
1: 
1: }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
0:     assert meta instanceof DirectCompressorEncoderMeta;
0:   private static class DirectCompressor extends ColumnPageEncoder {
============================================================================