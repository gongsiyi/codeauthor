1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.columnar;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * Splits the odometer key to columns.Further these columns can be stored in a columnar storage.
1:cd6a4ff:  */
1:cd6a4ff: public interface ColumnarSplitter {
1:cd6a4ff:   /**
1:cd6a4ff:    * Splits generated MDKey to multiple columns.
1:cd6a4ff:    *
1:cd6a4ff:    * @param key MDKey
1:cd6a4ff:    * @return Multiple columns in 2 dimensional byte array
1:cd6a4ff:    */
1:cd6a4ff:   byte[][] splitKey(byte[] key);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It generates and splits key to multiple columns
1:cd6a4ff:    *
1:cd6a4ff:    * @param keys
3:cd6a4ff:    * @return
1:cd6a4ff:    * @throws KeyGenException
1:cd6a4ff:    */
1:cd6a4ff:   byte[][] generateAndSplitKey(long[] keys) throws KeyGenException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * It generates and splits key to multiple columns
1:cd6a4ff:    *
1:cd6a4ff:    * @param keys
1:cd6a4ff:    * @return
1:cd6a4ff:    * @throws KeyGenException
1:cd6a4ff:    */
1:cd6a4ff:   byte[][] generateAndSplitKey(int[] keys) throws KeyGenException;
1:cd6a4ff: 
1:cd6a4ff:   /**
2:cd6a4ff:    * Takes the split keys and generates the surrogate key array
1:cd6a4ff:    *
3:cd6a4ff:    * @param key
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   long[] getKeyArray(byte[][] key);
1:cd6a4ff: 
1:cd6a4ff:   /**
2:cd6a4ff:    * Takes the split keys and generates the surrogate key array in bytes
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   byte[] getKeyByteArray(byte[][] key);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to get the block size
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   int[] getBlockKeySize();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to get the total key Size of the particular block
1:cd6a4ff:    *
1:cd6a4ff:    * @param blockIndexes
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   int getKeySizeByBlock(int[] blockIndexes);
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.columnar;
1: 
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: 
1: /**
1:  * Splits the odometer key to columns.Further these columns can be stored in a columnar storage.
1:  */
1: public interface ColumnarSplitter {
1:   /**
1:    * Splits generated MDKey to multiple columns.
1:    *
1:    * @param key MDKey
1:    * @return Multiple columns in 2 dimensional byte array
1:    */
1:   byte[][] splitKey(byte[] key);
1: 
1:   /**
1:    * It generates and splits key to multiple columns
1:    *
1:    * @param keys
1:    * @return
1:    * @throws KeyGenException
1:    */
1:   byte[][] generateAndSplitKey(long[] keys) throws KeyGenException;
1: 
1:   /**
1:    * It generates and splits key to multiple columns
1:    *
1:    * @param keys
1:    * @return
1:    * @throws KeyGenException
1:    */
1:   byte[][] generateAndSplitKey(int[] keys) throws KeyGenException;
1: 
1:   /**
1:    * Takes the split keys and generates the surrogate key array
1:    *
1:    * @param key
1:    * @return
1:    */
1:   long[] getKeyArray(byte[][] key);
1: 
1:   /**
1:    * Takes the split keys and generates the surrogate key array in bytes
1:    *
1:    * @param key
1:    * @return
1:    */
1:   byte[] getKeyByteArray(byte[][] key);
1: 
1:   /**
1:    * Takes the split keys and generates the surrogate key array in bytes
1:    *
1:    * @param key
0:    * @param columnIndexes, takes columnIndexes to consider which columns are present in the key
1:    * @return
1:    */
0:   byte[] getKeyByteArray(byte[][] key, int[] columnIndexes);
1: 
1:   /**
1:    * Takes the split keys and generates the surrogate key array
1:    *
1:    * @param key
0:    * @param columnIndexes, takes columnIndexes to consider which columns are present in the key
1:    * @return
1:    */
0:   long[] getKeyArray(byte[][] key, int[] columnIndexes);
1: 
1:   /**
1:    * Below method will be used to get the block size
1:    *
1:    * @return
1:    */
1:   int[] getBlockKeySize();
1: 
1:   /**
1:    * Below method will be used to get the total key Size of the particular block
1:    *
1:    * @param blockIndexes
1:    * @return
1:    */
1:   int getKeySizeByBlock(int[] blockIndexes);
1: 
1: }
============================================================================