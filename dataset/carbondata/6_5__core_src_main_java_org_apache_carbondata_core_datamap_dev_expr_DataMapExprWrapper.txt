1:56330ae: /*
1:56330ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56330ae:  * contributor license agreements.  See the NOTICE file distributed with
1:56330ae:  * this work for additional information regarding copyright ownership.
1:56330ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56330ae:  * (the "License"); you may not use this file except in compliance with
1:56330ae:  * the License.  You may obtain a copy of the License at
1:56330ae:  *
1:56330ae:  *    http://www.apache.org/licenses/LICENSE-2.0
1:56330ae:  *
1:56330ae:  * Unless required by applicable law or agreed to in writing, software
1:56330ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56330ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56330ae:  * See the License for the specific language governing permissions and
1:56330ae:  * limitations under the License.
1:56330ae:  */
1:56330ae: package org.apache.carbondata.core.datamap.dev.expr;
1:56330ae: 
1:56330ae: import java.io.IOException;
1:56330ae: import java.io.Serializable;
1:56330ae: import java.util.List;
1:56330ae: 
1:b338459: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:fc2a7eb: import org.apache.carbondata.core.datamap.DataMapLevel;
1:f9291cd: import org.apache.carbondata.core.datamap.Segment;
1:56330ae: import org.apache.carbondata.core.indexstore.ExtendedBlocklet;
1:56330ae: import org.apache.carbondata.core.indexstore.PartitionSpec;
1:56330ae: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1:56330ae: 
1:56330ae: /**
1:56330ae:  * It is the wrapper around datamap and related filter expression. By using it user can apply
1:56330ae:  * datamaps in expression style.
1:56330ae:  */
1:56330ae: public interface DataMapExprWrapper extends Serializable {
1:56330ae: 
1:56330ae:   /**
1:56330ae:    * It get the blocklets from each leaf node datamap and apply expressions on the blocklets
1:56330ae:    * using list of segments, it is used in case on non distributable datamap.
1:56330ae:    */
1:c58eb43:   List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune)
1:56330ae:       throws IOException;
1:56330ae: 
1:56330ae:   /**
1:b338459:    * prune blocklet according distributable
1:b338459:    *
1:b338459:    * @param distributable     distributable
1:b338459:    * @param partitionsToPrune partitions to prune
1:b338459:    * @return the pruned ExtendedBlocklet list
1:b338459:    * @throws IOException
1:b338459:    */
1:b338459:   List<ExtendedBlocklet> prune(DataMapDistributable distributable,
1:b338459:       List<PartitionSpec> partitionsToPrune)
1:b338459:           throws IOException;
1:b338459: 
1:b338459:   /**
1:56330ae:    * It is used in case on distributable datamap. First using job it gets all blockets from all
1:56330ae:    * related datamaps. These blocklets are passed to this method to apply expression.
1:56330ae:    * @param blocklets
2:56330ae:    * @return
1:56330ae:    * @throws IOException
1:56330ae:    */
1:56330ae:   List<ExtendedBlocklet> pruneBlocklets(List<ExtendedBlocklet> blocklets) throws IOException;
1:56330ae: 
1:56330ae:   /**
1:56330ae:    * Get the underlying filter expression.
1:56330ae:    * @return
1:56330ae:    */
1:56330ae:   FilterResolverIntf getFilterResolverIntf();
1:56330ae: 
1:56330ae:   /**
1:56330ae:    * Convert to distributable objects for executing job.
1:56330ae:    * @param segments
1:56330ae:    * @return
1:56330ae:    * @throws IOException
1:56330ae:    */
1:56330ae:   List<DataMapDistributableWrapper> toDistributable(List<Segment> segments) throws IOException;
1:56330ae: 
1:56330ae:   /**
1:56330ae:    * Each leaf node is identified by uniqueid, so if user wants the underlying filter expression for
1:56330ae:    * any leaf node then this method can be used.
1:56330ae:    * @param uniqueId
1:56330ae:    * @return
1:56330ae:    */
1:56330ae:   FilterResolverIntf getFilterResolverIntf(String uniqueId);
1:56330ae: 
1:56330ae:   /**
1:03a735b:    * Get the datamap level.
1:56330ae:    */
1:03a735b:   DataMapLevel getDataMapLevel();
1:03a735b: 
1:03a735b:   /**
1:c0de9f1:    * get the left datamap wrapper
1:03a735b:    */
1:c0de9f1:   DataMapExprWrapper getLeftDataMapWrapper();
1:56330ae: 
1:c0de9f1:   /**
1:c0de9f1:    * get the right datamap wrapper
1:c0de9f1:    */
1:c0de9f1:   DataMapExprWrapper getRightDataMapWrapprt();
1:56330ae: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:c0de9f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * get the left datamap wrapper
1:   DataMapExprWrapper getLeftDataMapWrapper();
1:   /**
1:    * get the right datamap wrapper
1:    */
1:   DataMapExprWrapper getRightDataMapWrapprt();
commit:f9291cd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
/////////////////////////////////////////////////////////////////////////
1:    * prune blocklet according distributable
1:    *
1:    * @param distributable     distributable
1:    * @param partitionsToPrune partitions to prune
1:    * @return the pruned ExtendedBlocklet list
1:    * @throws IOException
1:    */
1:   List<ExtendedBlocklet> prune(DataMapDistributable distributable,
1:       List<PartitionSpec> partitionsToPrune)
1:           throws IOException;
1: 
1:   /**
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
1:    * Get the datamap level.
1:   DataMapLevel getDataMapLevel();
1: 
1:   /**
0:    * Get the datamap schema
1:    */
0:   DataMapSchema getDataMapSchema();
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapLevel;
/////////////////////////////////////////////////////////////////////////
0:   DataMapLevel getDataMapType();
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune)
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
0:   List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune,
0:       ReadCommittedScope readCommittedScope)
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev.expr;
1: 
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.datamap.DataMapType;
0: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.indexstore.ExtendedBlocklet;
1: import org.apache.carbondata.core.indexstore.PartitionSpec;
1: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: 
1: /**
1:  * It is the wrapper around datamap and related filter expression. By using it user can apply
1:  * datamaps in expression style.
1:  */
1: public interface DataMapExprWrapper extends Serializable {
1: 
1:   /**
1:    * It get the blocklets from each leaf node datamap and apply expressions on the blocklets
1:    * using list of segments, it is used in case on non distributable datamap.
1:    */
0:   List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune)
1:       throws IOException;
1: 
1:   /**
1:    * It is used in case on distributable datamap. First using job it gets all blockets from all
1:    * related datamaps. These blocklets are passed to this method to apply expression.
1:    * @param blocklets
1:    * @return
1:    * @throws IOException
1:    */
1:   List<ExtendedBlocklet> pruneBlocklets(List<ExtendedBlocklet> blocklets) throws IOException;
1: 
1:   /**
1:    * Get the underlying filter expression.
1:    * @return
1:    */
1:   FilterResolverIntf getFilterResolverIntf();
1: 
1:   /**
1:    * Convert to distributable objects for executing job.
1:    * @param segments
1:    * @return
1:    * @throws IOException
1:    */
1:   List<DataMapDistributableWrapper> toDistributable(List<Segment> segments) throws IOException;
1: 
1:   /**
1:    * Each leaf node is identified by uniqueid, so if user wants the underlying filter expression for
1:    * any leaf node then this method can be used.
1:    * @param uniqueId
1:    * @return
1:    */
1:   FilterResolverIntf getFilterResolverIntf(String uniqueId);
1: 
1:   /**
0:    * Get the datamap type.
1:    * @return
1:    */
0:   DataMapType getDataMapType();
1: 
1: }
============================================================================