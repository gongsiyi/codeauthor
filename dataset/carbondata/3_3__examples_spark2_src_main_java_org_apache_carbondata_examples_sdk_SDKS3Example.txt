1:242c08b: /*
1:242c08b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:242c08b:  * contributor license agreements.  See the NOTICE file distributed with
1:242c08b:  * this work for additional information regarding copyright ownership.
1:242c08b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:242c08b:  * (the "License"); you may not use this file except in compliance with
1:242c08b:  * the License.  You may obtain a copy of the License at
1:242c08b:  *
1:242c08b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:242c08b:  *
1:242c08b:  * Unless required by applicable law or agreed to in writing, software
1:242c08b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:242c08b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:242c08b:  * See the License for the specific language governing permissions and
1:242c08b:  * limitations under the License.
1:242c08b:  */
3:242c08b: 
1:242c08b: package org.apache.carbondata.examples.sdk;
1:242c08b: 
1:242c08b: import org.apache.carbondata.common.logging.LogService;
1:242c08b: import org.apache.carbondata.common.logging.LogServiceFactory;
1:242c08b: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:459331c: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1:459331c: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1:459331c: import org.apache.carbondata.core.scan.expression.conditional.EqualToExpression;
1:242c08b: import org.apache.carbondata.sdk.file.*;
1:242c08b: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:242c08b: /**
1:242c08b:  * Example for testing CarbonWriter on S3
1:242c08b:  */
1:242c08b: public class SDKS3Example {
1:242c08b:     public static void main(String[] args) throws Exception {
1:242c08b:         LogService logger = LogServiceFactory.getLogService(SDKS3Example.class.getName());
1:242c08b:         if (args == null || args.length < 3) {
1:74770aa:             logger.error("Usage: java CarbonS3Example: <access-key> <secret-key>"
1:74770aa:                 + "<s3-endpoint> [table-path-on-s3] [rows]");
1:242c08b:             System.exit(0);
5:242c08b:         }
1:242c08b: 
1:242c08b:         String path = "s3a://sdk/WriterOutput";
1:242c08b:         if (args.length > 3) {
1:242c08b:             path=args[3];
1:242c08b:         }
1:242c08b: 
1:242c08b:         int num = 3;
1:242c08b:         if (args.length > 4) {
1:242c08b:             num = Integer.parseInt(args[4]);
1:242c08b:         }
1:242c08b: 
1:242c08b:         Field[] fields = new Field[2];
1:242c08b:         fields[0] = new Field("name", DataTypes.STRING);
1:242c08b:         fields[1] = new Field("age", DataTypes.INT);
1:242c08b:         CarbonWriterBuilder builder = CarbonWriter.builder()
2:242c08b:                 .setAccessKey(args[0])
2:242c08b:                 .setSecretKey(args[1])
2:242c08b:                 .setEndPoint(args[2])
1:74770aa:                 .outputPath(path);
1:242c08b: 
1:8f1a029:         CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), new Configuration(false));
1:242c08b: 
1:242c08b:         for (int i = 0; i < num; i++) {
1:242c08b:             writer.write(new String[]{"robot" + (i % 10), String.valueOf(i)});
1:242c08b:         }
1:242c08b:         writer.close();
1:242c08b:         // Read data
1:459331c: 
1:459331c:         EqualToExpression equalToExpression = new EqualToExpression(
1:459331c:             new ColumnExpression("name", DataTypes.STRING),
1:459331c:             new LiteralExpression("robot1", DataTypes.STRING));
1:459331c: 
1:242c08b:         CarbonReader reader = CarbonReader
1:459331c:             .builder(path, "_temp")
1:459331c:             .projection(new String[]{"name", "age"})
1:459331c:             .filter(equalToExpression)
1:459331c:             .setAccessKey(args[0])
1:459331c:             .setSecretKey(args[1])
1:459331c:             .setEndPoint(args[2])
1:8f1a029:             .build(new Configuration(false));
1:242c08b: 
1:242c08b:         System.out.println("\nData:");
1:242c08b:         int i = 0;
1:242c08b:         while (i < 20 && reader.hasNext()) {
1:242c08b:             Object[] row = (Object[]) reader.readNextRow();
1:242c08b:             System.out.println(row[0] + " " + row[1]);
1:242c08b:             i++;
1:242c08b:         }
1:242c08b:         System.out.println("\nFinished");
1:f7c0670:         reader.close();
1:242c08b:     }
1:242c08b: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:         CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields), new Configuration(false));
/////////////////////////////////////////////////////////////////////////
1:             .build(new Configuration(false));
commit:26eb2d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         CarbonWriter writer = builder.buildWriterForCSVInput(new Schema(fields));
author:xubo245
-------------------------------------------------------------------------------
commit:459331c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.expression.ColumnExpression;
1: import org.apache.carbondata.core.scan.expression.LiteralExpression;
1: import org.apache.carbondata.core.scan.expression.conditional.EqualToExpression;
/////////////////////////////////////////////////////////////////////////
1: 
1:         EqualToExpression equalToExpression = new EqualToExpression(
1:             new ColumnExpression("name", DataTypes.STRING),
1:             new LiteralExpression("robot1", DataTypes.STRING));
1: 
1:             .builder(path, "_temp")
1:             .projection(new String[]{"name", "age"})
1:             .filter(equalToExpression)
1:             .setAccessKey(args[0])
1:             .setSecretKey(args[1])
1:             .setEndPoint(args[2])
0:             .build();
commit:f7c0670
/////////////////////////////////////////////////////////////////////////
1:         reader.close();
commit:242c08b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.examples.sdk;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.sdk.file.*;
1: 
1: /**
1:  * Example for testing CarbonWriter on S3
1:  */
1: public class SDKS3Example {
1:     public static void main(String[] args) throws Exception {
1:         LogService logger = LogServiceFactory.getLogService(SDKS3Example.class.getName());
1:         if (args == null || args.length < 3) {
0:             logger.error("Usage: java CarbonS3Example: <access-key> <secret-key>" +
0:                     "<s3-endpoint> [table-path-on-s3] [persistSchema] [transactionalTable]");
1:             System.exit(0);
1:         }
1: 
1:         String path = "s3a://sdk/WriterOutput";
1:         if (args.length > 3) {
1:             path=args[3];
1:         }
1: 
1:         int num = 3;
1:         if (args.length > 4) {
1:             num = Integer.parseInt(args[4]);
1:         }
1: 
0:         Boolean persistSchema = true;
0:         if (args.length > 5) {
0:             if (args[5].equalsIgnoreCase("true")) {
0:                 persistSchema = true;
0:             } else {
0:                 persistSchema = false;
1:             }
1:         }
1: 
0:         Boolean transactionalTable = true;
0:         if (args.length > 6) {
0:             if (args[6].equalsIgnoreCase("true")) {
0:                 transactionalTable = true;
0:             } else {
0:                 transactionalTable = false;
1:             }
1:         }
1: 
1:         Field[] fields = new Field[2];
1:         fields[0] = new Field("name", DataTypes.STRING);
1:         fields[1] = new Field("age", DataTypes.INT);
1:         CarbonWriterBuilder builder = CarbonWriter.builder()
0:                 .withSchema(new Schema(fields))
1:                 .setAccessKey(args[0])
1:                 .setSecretKey(args[1])
1:                 .setEndPoint(args[2])
0:                 .outputPath(path)
0:                 .persistSchemaFile(persistSchema)
0:                 .isTransactionalTable(transactionalTable);
1: 
0:         CarbonWriter writer = builder.buildWriterForCSVInput();
1: 
1:         for (int i = 0; i < num; i++) {
1:             writer.write(new String[]{"robot" + (i % 10), String.valueOf(i)});
1:         }
1:         writer.close();
1:         // Read data
1:         CarbonReader reader = CarbonReader
0:                 .builder(path, "_temp")
0:                 .projection(new String[]{"name", "age"})
1:                 .setAccessKey(args[0])
1:                 .setSecretKey(args[1])
1:                 .setEndPoint(args[2])
0:                 .build();
1: 
1:         System.out.println("\nData:");
1:         int i = 0;
1:         while (i < 20 && reader.hasNext()) {
1:             Object[] row = (Object[]) reader.readNextRow();
1:             System.out.println(row[0] + " " + row[1]);
1:             i++;
1:         }
1:         System.out.println("\nFinished");
0:         // TODO
0:         //        reader.close();
1:     }
1: }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:74770aa
/////////////////////////////////////////////////////////////////////////
1:             logger.error("Usage: java CarbonS3Example: <access-key> <secret-key>"
1:                 + "<s3-endpoint> [table-path-on-s3] [rows]");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 .outputPath(path);
============================================================================