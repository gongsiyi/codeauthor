1:cfb8ed9: /*
1:cfb8ed9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfb8ed9:  * contributor license agreements.  See the NOTICE file distributed with
1:cfb8ed9:  * this work for additional information regarding copyright ownership.
1:cfb8ed9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfb8ed9:  * (the "License"); you may not use this file except in compliance with
1:cfb8ed9:  * the License.  You may obtain a copy of the License at
1:cfb8ed9:  *
1:cfb8ed9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cfb8ed9:  *
1:cfb8ed9:  * Unless required by applicable law or agreed to in writing, software
1:cfb8ed9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfb8ed9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfb8ed9:  * See the License for the specific language governing permissions and
1:cfb8ed9:  * limitations under the License.
1:cfb8ed9:  */
1:cfb8ed9: 
1:cfb8ed9: package org.apache.carbondata.store;
1:cfb8ed9: 
1:cfb8ed9: import java.io.Closeable;
1:cfb8ed9: import java.io.IOException;
1:cfb8ed9: import java.util.Iterator;
1:cfb8ed9: 
1:cfb8ed9: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:cfb8ed9: import org.apache.carbondata.common.annotations.InterfaceStability;
1:cfb8ed9: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:9f42fbf: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:cfb8ed9: import org.apache.carbondata.core.scan.expression.Expression;
1:cfb8ed9: 
1:cfb8ed9: /**
1:cfb8ed9:  * User can use {@link CarbonStore} to query data
1:cfb8ed9:  */
1:cfb8ed9: @InterfaceAudience.User
1:cfb8ed9: @InterfaceStability.Unstable
1:cfb8ed9: public interface CarbonStore extends Closeable {
1:cfb8ed9: 
1:cfb8ed9:   /**
1:cfb8ed9:    * Scan query on the data in the table path
1:cfb8ed9:    * @param path table path
1:cfb8ed9:    * @param projectColumns column names to read
1:cfb8ed9:    * @return rows
1:cfb8ed9:    * @throws IOException if unable to read files in table path
1:cfb8ed9:    */
1:cfb8ed9:   Iterator<CarbonRow> scan(
1:9f42fbf:       AbsoluteTableIdentifier tableIdentifier,
1:cfb8ed9:       String[] projectColumns) throws IOException;
1:cfb8ed9: 
1:cfb8ed9:   /**
1:cfb8ed9:    * Scan query with filter, on the data in the table path
1:cfb8ed9:    * @param path table path
1:cfb8ed9:    * @param projectColumns column names to read
1:cfb8ed9:    * @param filter filter condition, can be null
1:cfb8ed9:    * @return rows that satisfy filter condition
1:cfb8ed9:    * @throws IOException if unable to read files in table path
1:cfb8ed9:    */
1:cfb8ed9:   Iterator<CarbonRow> scan(
1:9f42fbf:       AbsoluteTableIdentifier tableIdentifier,
1:cfb8ed9:       String[] projectColumns,
1:cfb8ed9:       Expression filter) throws IOException;
1:cfb8ed9: 
1:cfb8ed9:   /**
1:cfb8ed9:    * SQL query, table should be created before calling this function
1:cfb8ed9:    * @param sqlString SQL statement
1:cfb8ed9:    * @return rows
1:cfb8ed9:    * @throws IOException if unable to read files in table path
1:cfb8ed9:    */
1:cfb8ed9:   Iterator<CarbonRow> sql(String sqlString) throws IOException;
1:cfb8ed9: 
1:cfb8ed9: }
============================================================================
author:rahul
-------------------------------------------------------------------------------
commit:9f42fbf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:       AbsoluteTableIdentifier tableIdentifier,
/////////////////////////////////////////////////////////////////////////
1:       AbsoluteTableIdentifier tableIdentifier,
author:Jacky Li
-------------------------------------------------------------------------------
commit:cfb8ed9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.store;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: 
1: /**
1:  * User can use {@link CarbonStore} to query data
1:  */
1: @InterfaceAudience.User
1: @InterfaceStability.Unstable
1: public interface CarbonStore extends Closeable {
1: 
1:   /**
1:    * Scan query on the data in the table path
1:    * @param path table path
1:    * @param projectColumns column names to read
1:    * @return rows
1:    * @throws IOException if unable to read files in table path
1:    */
1:   Iterator<CarbonRow> scan(
0:       String path,
1:       String[] projectColumns) throws IOException;
1: 
1:   /**
1:    * Scan query with filter, on the data in the table path
1:    * @param path table path
1:    * @param projectColumns column names to read
1:    * @param filter filter condition, can be null
1:    * @return rows that satisfy filter condition
1:    * @throws IOException if unable to read files in table path
1:    */
1:   Iterator<CarbonRow> scan(
0:       String path,
1:       String[] projectColumns,
1:       Expression filter) throws IOException;
1: 
1:   /**
1:    * SQL query, table should be created before calling this function
1:    * @param sqlString SQL statement
1:    * @return rows
1:    * @throws IOException if unable to read files in table path
1:    */
1:   Iterator<CarbonRow> sql(String sqlString) throws IOException;
1: 
1: }
============================================================================