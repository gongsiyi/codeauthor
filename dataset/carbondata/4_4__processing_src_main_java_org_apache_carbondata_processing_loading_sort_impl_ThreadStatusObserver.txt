1:9e11e13: /*
1:9e11e13:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e11e13:  * contributor license agreements.  See the NOTICE file distributed with
1:9e11e13:  * this work for additional information regarding copyright ownership.
1:9e11e13:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e11e13:  * (the "License"); you may not use this file except in compliance with
1:9e11e13:  * the License.  You may obtain a copy of the License at
1:9e11e13:  *
1:9e11e13:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9e11e13:  *
1:9e11e13:  * Unless required by applicable law or agreed to in writing, software
1:9e11e13:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e11e13:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e11e13:  * See the License for the specific language governing permissions and
1:9e11e13:  * limitations under the License.
1:9e11e13:  */
1:9e11e13: 
1:349c59c: package org.apache.carbondata.processing.loading.sort.impl;
1:9e11e13: 
1:9e11e13: import java.util.concurrent.ExecutorService;
1:9e11e13: 
1:9e11e13: public class ThreadStatusObserver {
1:9e11e13: 
1:b6545c5:   /**
1:b6545c5:    * lock object
1:b6545c5:    */
1:b6545c5:   private Object lock = new Object();
1:b6545c5: 
1:9e11e13:   private ExecutorService executorService;
1:9e11e13: 
1:9e11e13:   private Throwable throwable;
1:9e11e13: 
1:9e11e13:   public ThreadStatusObserver(ExecutorService executorService) {
1:9e11e13:     this.executorService = executorService;
2:9e11e13:   }
1:9e11e13: 
1:9e11e13:   public void notifyFailed(Throwable throwable) {
1:b6545c5:     // Only the first failing thread should call for shutting down the executor service and
1:b6545c5:     // should assign the throwable object else the actual cause for failure can be overridden as
1:b6545c5:     // all the running threads will throw interrupted exception on calling shutdownNow and
1:b6545c5:     // will override the throwable object
1:7ef9164:     synchronized (lock) {
1:7ef9164:       if (null == this.throwable) {
1:7ef9164:         executorService.shutdownNow();
1:7ef9164:         this.throwable = throwable;
1:b6545c5:       }
1:b6545c5:     }
1:b6545c5:   }
1:9e11e13: 
1:9e11e13:   public Throwable getThrowable() {
1:7ef9164: 
1:7ef9164:     synchronized (lock) {
1:7ef9164:       return throwable;
1:7ef9164:     }
1:9e11e13:   }
1:9e11e13: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     synchronized (lock) {
1:       if (null == this.throwable) {
1:         executorService.shutdownNow();
1:         this.throwable = throwable;
1: 
1:     synchronized (lock) {
1:       return throwable;
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.impl;
author:manishgupta88
-------------------------------------------------------------------------------
commit:b6545c5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * lock object
1:    */
1:   private Object lock = new Object();
1: 
/////////////////////////////////////////////////////////////////////////
1:     // Only the first failing thread should call for shutting down the executor service and
1:     // should assign the throwable object else the actual cause for failure can be overridden as
1:     // all the running threads will throw interrupted exception on calling shutdownNow and
1:     // will override the throwable object
0:     if (null == this.throwable) {
0:       synchronized (lock) {
0:         if (null == this.throwable) {
0:           executorService.shutdownNow();
0:           this.throwable = throwable;
1:         }
1:       }
1:     }
author:akash
-------------------------------------------------------------------------------
commit:9e11e13
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.sort.impl;
1: 
1: import java.util.concurrent.ExecutorService;
1: 
1: public class ThreadStatusObserver {
1: 
1:   private ExecutorService executorService;
1: 
1:   private Throwable throwable;
1: 
1:   public ThreadStatusObserver(ExecutorService executorService) {
1:     this.executorService = executorService;
1:   }
1: 
1:   public void notifyFailed(Throwable throwable) {
0:     executorService.shutdownNow();
0:     this.throwable = throwable;
1:   }
1: 
1:   public Throwable getThrowable() {
0:     return throwable;
1:   }
1: }
============================================================================