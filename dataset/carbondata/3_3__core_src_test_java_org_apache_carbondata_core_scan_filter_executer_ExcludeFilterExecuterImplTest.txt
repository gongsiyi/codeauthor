1:a5e3643: /*
1:a5e3643:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a5e3643:  * contributor license agreements.  See the NOTICE file distributed with
1:a5e3643:  * this work for additional information regarding copyright ownership.
1:a5e3643:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a5e3643:  * (the "License"); you may not use this file except in compliance with
1:a5e3643:  * the License.  You may obtain a copy of the License at
1:a5e3643:  *
1:a5e3643:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a5e3643:  *
1:a5e3643:  * Unless required by applicable law or agreed to in writing, software
1:a5e3643:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a5e3643:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5e3643:  * See the License for the specific language governing permissions and
1:a5e3643:  * limitations under the License.
1:a5e3643:  */
1:a5e3643: package org.apache.carbondata.core.scan.filter.executer;
1:a5e3643: 
1:a5e3643: import java.util.BitSet;
1:a5e3643: 
1:daa6465: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1:a5e3643: import org.apache.carbondata.core.util.CarbonUtil;
1:a5e3643: 
1:a5e3643: public class ExcludeFilterExecuterImplTest extends IncludeFilterExecuterImplTest {
1:a5e3643: 
1:daa6465:  @Override public BitSet setFilterdIndexToBitSetNew(DimensionColumnPage dimColumnDataChunk,
1:a5e3643:      int numerOfRows, byte[][] filterValues) {
1:a5e3643:    BitSet bitSet = new BitSet(numerOfRows);
1:a5e3643:    bitSet.flip(0, numerOfRows);
1:a5e3643:    // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:a5e3643:    if (filterValues.length > 1) {
1:a5e3643:      for (int j = 0; j < numerOfRows; j++) {
1:a5e3643:        int index = CarbonUtil.binarySearch(filterValues, 0, filterValues.length - 1,
1:4935cb1:            dimColumnDataChunk, j);
1:a5e3643:        if (index >= 0) {
1:a5e3643:          bitSet.flip(j);
1:a5e3643:        }
1:a5e3643:      }
1:a5e3643:    } else if (filterValues.length == 1) {
1:a5e3643:      for (int j = 0; j < numerOfRows; j++) {
1:a5e3643:        if (dimColumnDataChunk.compareTo(j, filterValues[0]) == 0) {
1:a5e3643:          bitSet.flip(j);
1:a5e3643:        }
1:a5e3643:      }
1:a5e3643:    }
1:a5e3643:    return bitSet;
1:a5e3643:  }
1:a5e3643: 
1:daa6465:  @Override public BitSet setFilterdIndexToBitSet(DimensionColumnPage dimColumnDataChunk,
1:a5e3643:       int numerOfRows, byte[][] filterValues) {
1:a5e3643:     BitSet bitSet = new BitSet(numerOfRows);
1:a5e3643:     bitSet.flip(0, numerOfRows);
1:a5e3643:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:a5e3643:     for (int k = 0; k < filterValues.length; k++) {
1:a5e3643:       for (int j = 0; j < numerOfRows; j++) {
1:a5e3643:         if (dimColumnDataChunk.compareTo(j, filterValues[k]) == 0) {
1:a5e3643:           bitSet.flip(j);
1:a5e3643:         }
1:a5e3643:       }
1:a5e3643:     }
1:a5e3643:     return bitSet;
1:a5e3643:   }
1:a5e3643: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:4935cb1
/////////////////////////////////////////////////////////////////////////
1:            dimColumnDataChunk, j);
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.chunk.DimensionColumnPage;
1:  @Override public BitSet setFilterdIndexToBitSetNew(DimensionColumnPage dimColumnDataChunk,
/////////////////////////////////////////////////////////////////////////
1:  @Override public BitSet setFilterdIndexToBitSet(DimensionColumnPage dimColumnDataChunk,
author:mayun
-------------------------------------------------------------------------------
commit:a5e3643
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.util.BitSet;
1: 
0: import org.apache.carbondata.core.datastore.chunk.DimensionColumnDataChunk;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: public class ExcludeFilterExecuterImplTest extends IncludeFilterExecuterImplTest {
1: 
0:  @Override public BitSet setFilterdIndexToBitSetNew(DimensionColumnDataChunk dimColumnDataChunk,
1:      int numerOfRows, byte[][] filterValues) {
1:    BitSet bitSet = new BitSet(numerOfRows);
1:    bitSet.flip(0, numerOfRows);
1:    // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:    if (filterValues.length > 1) {
1:      for (int j = 0; j < numerOfRows; j++) {
1:        int index = CarbonUtil.binarySearch(filterValues, 0, filterValues.length - 1,
0:            dimColumnDataChunk.getChunkData(j));
1:        if (index >= 0) {
1:          bitSet.flip(j);
1:        }
1:      }
1:    } else if (filterValues.length == 1) {
1:      for (int j = 0; j < numerOfRows; j++) {
1:        if (dimColumnDataChunk.compareTo(j, filterValues[0]) == 0) {
1:          bitSet.flip(j);
1:        }
1:      }
1:    }
1:    return bitSet;
1:  }
1: 
0:  @Override public BitSet setFilterdIndexToBitSet(DimensionColumnDataChunk dimColumnDataChunk,
1:       int numerOfRows, byte[][] filterValues) {
1:     BitSet bitSet = new BitSet(numerOfRows);
1:     bitSet.flip(0, numerOfRows);
1:     // byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();
1:     for (int k = 0; k < filterValues.length; k++) {
1:       for (int j = 0; j < numerOfRows; j++) {
1:         if (dimColumnDataChunk.compareTo(j, filterValues[k]) == 0) {
1:           bitSet.flip(j);
1:         }
1:       }
1:     }
1:     return bitSet;
1:   }
1: }
============================================================================