1:bc3e684: /*
1:bc3e684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc3e684:  * contributor license agreements.  See the NOTICE file distributed with
1:bc3e684:  * this work for additional information regarding copyright ownership.
1:bc3e684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc3e684:  * (the "License"); you may not use this file except in compliance with
1:bc3e684:  * the License.  You may obtain a copy of the License at
2:bc3e684:  *
1:bc3e684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc3e684:  *
1:bc3e684:  * Unless required by applicable law or agreed to in writing, software
1:bc3e684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc3e684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc3e684:  * See the License for the specific language governing permissions and
1:bc3e684:  * limitations under the License.
2:bc3e684:  */
5:bc3e684: 
1:bc3e684: package org.apache.carbondata.core.datastore.page.statistics;
1:bc3e684: 
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1:bc3e684: import org.apache.carbondata.core.util.CarbonUtil;
1:bc3e684: 
1:bc3e684: // Statistics of dimension and measure column in a TablePage
1:bc3e684: public class TablePageStatistics {
1:bc3e684: 
1:bc3e684:   // min of each dimension column
1:bc3e684:   private byte[][] dimensionMinValue;
1:bc3e684: 
1:bc3e684:   // max of each dimension column
1:bc3e684:   private byte[][] dimensionMaxValue;
1:bc3e684: 
1:bc3e684:   // min of each measure column
1:bc3e684:   private byte[][] measureMinValue;
1:bc3e684: 
1:bc3e684:   // max os each measure column
1:bc3e684:   private byte[][] measureMaxValue;
1:bc3e684: 
1:e6a4f64:   public TablePageStatistics(EncodedColumnPage[] dimensions,
1:e6a4f64:       EncodedColumnPage[] measures) {
1:e6a4f64:     int numDimensionsExpanded = dimensions.length;
1:bc3e684:     int numMeasures = measures.length;
1:bc3e684:     this.dimensionMinValue = new byte[numDimensionsExpanded][];
1:bc3e684:     this.dimensionMaxValue = new byte[numDimensionsExpanded][];
1:bc3e684:     this.measureMinValue = new byte[numMeasures][];
1:bc3e684:     this.measureMaxValue = new byte[numMeasures][];
1:bc3e684:     updateDimensionMinMax(dimensions);
1:bc3e684:     updateMeasureMinMax(measures);
5:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   private void updateDimensionMinMax(EncodedColumnPage[] dimensions) {
1:bc3e684:     for (int i = 0; i < dimensions.length; i++) {
1:e6a4f64:       SimpleStatsResult stats = dimensions[i].getStats();
1:e6a4f64:       dimensionMaxValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMax());
1:e6a4f64:       dimensionMinValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMin());
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:e6a4f64:   private void updateMeasureMinMax(EncodedColumnPage[] measures) {
1:bc3e684:     for (int i = 0; i < measures.length; i++) {
1:e6a4f64:       SimpleStatsResult stats = measures[i].getStats();
1:e6a4f64:       measureMaxValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMax());
1:e6a4f64:       measureMinValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMin());
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[][] getDimensionMinValue() {
1:bc3e684:     return dimensionMinValue;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[][] getDimensionMaxValue() {
1:bc3e684:     return dimensionMaxValue;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[][] getMeasureMinValue() {
1:bc3e684:     return measureMinValue;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[][] getMeasureMaxValue() {
1:bc3e684:     return measureMaxValue;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
/////////////////////////////////////////////////////////////////////////
1:   public TablePageStatistics(EncodedColumnPage[] dimensions,
1:       EncodedColumnPage[] measures) {
1:     int numDimensionsExpanded = dimensions.length;
1:   private void updateDimensionMinMax(EncodedColumnPage[] dimensions) {
1:       SimpleStatsResult stats = dimensions[i].getStats();
1:       dimensionMaxValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMax());
1:       dimensionMinValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMin());
1:   private void updateMeasureMinMax(EncodedColumnPage[] measures) {
1:       SimpleStatsResult stats = measures[i].getStats();
1:       measureMaxValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMax());
1:       measureMinValue[i] = CarbonUtil.getValueAsBytes(stats.getDataType(), stats.getMin());
/////////////////////////////////////////////////////////////////////////
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.statistics;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.BitSet;
1: 
0: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedDimensionPage;
0: import org.apache.carbondata.core.datastore.page.encoding.EncodedMeasurePage;
0: import org.apache.carbondata.core.metadata.ColumnPageCodecMeta;
0: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: // Statistics of dimension and measure column in a TablePage
1: public class TablePageStatistics {
1: 
0:   // number of dimension after complex column expanded
0:   private int numDimensionsExpanded;
1: 
1:   // min of each dimension column
1:   private byte[][] dimensionMinValue;
1: 
1:   // max of each dimension column
1:   private byte[][] dimensionMaxValue;
1: 
1:   // min of each measure column
1:   private byte[][] measureMinValue;
1: 
1:   // max os each measure column
1:   private byte[][] measureMaxValue;
1: 
0:   // null bit set for each measure column
0:   private BitSet[] nullBitSet;
1: 
0:   public TablePageStatistics(EncodedDimensionPage[] dimensions,
0:       EncodedMeasurePage[] measures) {
0:     this.numDimensionsExpanded = dimensions.length;
1:     int numMeasures = measures.length;
1:     this.dimensionMinValue = new byte[numDimensionsExpanded][];
1:     this.dimensionMaxValue = new byte[numDimensionsExpanded][];
1:     this.measureMinValue = new byte[numMeasures][];
1:     this.measureMaxValue = new byte[numMeasures][];
0:     this.nullBitSet = new BitSet[numMeasures];
1:     updateDimensionMinMax(dimensions);
1:     updateMeasureMinMax(measures);
1:   }
1: 
0:   private void updateDimensionMinMax(EncodedDimensionPage[] dimensions) {
1:     for (int i = 0; i < dimensions.length; i++) {
0:       IndexStorage keyStorageArray = dimensions[i].getIndexStorage();
0:       switch (dimensions[i].getDimensionType()) {
0:         case GLOBAL_DICTIONARY:
0:         case DIRECT_DICTIONARY:
0:         case COLUMN_GROUP:
0:         case COMPLEX:
0:           dimensionMinValue[i] = keyStorageArray.getMin();
0:           dimensionMaxValue[i] = keyStorageArray.getMax();
0:           break;
0:         case PLAIN_VALUE:
0:           dimensionMinValue[i] = updateMinMaxForNoDictionary(keyStorageArray.getMin());
0:           dimensionMaxValue[i] = updateMinMaxForNoDictionary(keyStorageArray.getMax());
0:           break;
1:       }
1:     }
1:   }
1: 
0:   private void updateMeasureMinMax(EncodedMeasurePage[] measures) {
1:     for (int i = 0; i < measures.length; i++) {
0:       ValueEncoderMeta meta = measures[i].getMetaData();
0:       if (meta instanceof ColumnPageCodecMeta) {
0:         ColumnPageCodecMeta metadata = (ColumnPageCodecMeta) meta;
0:         measureMaxValue[i] = metadata.getMaxAsBytes();
0:         measureMinValue[i] = metadata.getMinAsBytes();
0:       } else {
0:         measureMaxValue[i] = CarbonUtil.getMaxValueAsBytes(meta);
0:         measureMinValue[i] = CarbonUtil.getMinValueAsBytes(meta);
1:       }
0:       nullBitSet[i] = measures[i].getNullBitSet();
1:     }
1:   }
1: 
0:   /**
0:    * Below method will be used to update the min or max value
0:    * by removing the length from it
1:    *
0:    * @return min max value without length
1:    */
0:   public static byte[] updateMinMaxForNoDictionary(byte[] valueWithLength) {
0:     ByteBuffer buffer = ByteBuffer.wrap(valueWithLength);
0:     byte[] actualValue = new byte[buffer.getShort()];
0:     buffer.get(actualValue);
0:     return actualValue;
1:   }
1: 
1:   public byte[][] getDimensionMinValue() {
1:     return dimensionMinValue;
1:   }
1: 
1:   public byte[][] getDimensionMaxValue() {
1:     return dimensionMaxValue;
1:   }
1: 
1:   public byte[][] getMeasureMinValue() {
1:     return measureMinValue;
1:   }
1: 
1:   public byte[][] getMeasureMaxValue() {
1:     return measureMaxValue;
1:   }
1: 
0:   public BitSet[] getNullBitSet() {
0:     return nullBitSet;
1:   }
1: }
============================================================================