1:6828c4f: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:6828c4f:  *
1:6828c4f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6828c4f:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:6828c4f:  */
1:6828c4f: package org.apache.carbondata.core.cache.dictionary;
1:6828c4f: 
1:6828c4f: import java.nio.ByteBuffer;
1:6828c4f: import java.util.ArrayList;
1:6828c4f: import java.util.Arrays;
1:6828c4f: import java.util.List;
1:6828c4f: 
1:6828c4f: import org.apache.carbondata.format.ColumnDictionaryChunk;
1:6828c4f: 
1:6828c4f: import org.junit.BeforeClass;
1:6828c4f: import org.junit.Test;
1:6828c4f: 
1:6828c4f: import static org.hamcrest.CoreMatchers.equalTo;
1:6828c4f: import static org.hamcrest.CoreMatchers.is;
1:6828c4f: import static org.hamcrest.MatcherAssert.assertThat;
1:6828c4f: 
1:6828c4f: public class ColumnDictionaryChunkIteratorTest {
1:6828c4f: 
1:6828c4f:   private static ColumnDictionaryChunkIterator columnDictionaryChunkIterator;
1:6828c4f:   private static List<byte[]> expectedResult;
1:6828c4f: 
1:6828c4f:   @BeforeClass public static void setUp() {
1:6828c4f:     ColumnDictionaryChunk columnDictionaryChunk1 = new ColumnDictionaryChunk();
1:6828c4f:     ByteBuffer byteBuffer3 = ByteBuffer.wrap("c".getBytes());
1:6828c4f:     ByteBuffer byteBuffer4 = ByteBuffer.wrap("d".getBytes());
1:6828c4f:     columnDictionaryChunk1.setValues(new ArrayList<ByteBuffer>());
1:6828c4f:     ColumnDictionaryChunk columnDictionaryChunk2 = new ColumnDictionaryChunk();
1:6828c4f:     columnDictionaryChunk2.setValues(Arrays.asList(byteBuffer3, byteBuffer4));
1:6828c4f:     expectedResult = prepareExpectedData();
1:6828c4f:     columnDictionaryChunkIterator = new ColumnDictionaryChunkIterator(
1:6828c4f:         Arrays.asList(columnDictionaryChunk1, columnDictionaryChunk2));
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   private static List<byte[]> prepareExpectedData() {
1:6828c4f:     List<byte[]> chunks = new ArrayList<>();
1:6828c4f:     chunks.add("c".getBytes());
1:6828c4f:     chunks.add("d".getBytes());
1:6828c4f:     return chunks;
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testNext() throws Exception {
1:6828c4f:     List<byte[]> actual = new ArrayList<>();
1:6828c4f:     while (columnDictionaryChunkIterator.hasNext()) {
1:6828c4f:       actual.add(columnDictionaryChunkIterator.next());
1:6828c4f:     }
1:6828c4f:     for (int i = 0; i < actual.size(); i++) {
1:6828c4f:       assertThat(expectedResult.get(i), is(equalTo(actual.get(i))));
1:6828c4f:     }
1:6828c4f:   }
1:6828c4f: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kunal642
-------------------------------------------------------------------------------
commit:6828c4f
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.carbondata.format.ColumnDictionaryChunk;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.CoreMatchers.is;
1: import static org.hamcrest.MatcherAssert.assertThat;
1: 
1: public class ColumnDictionaryChunkIteratorTest {
1: 
1:   private static ColumnDictionaryChunkIterator columnDictionaryChunkIterator;
1:   private static List<byte[]> expectedResult;
1: 
1:   @BeforeClass public static void setUp() {
1:     ColumnDictionaryChunk columnDictionaryChunk1 = new ColumnDictionaryChunk();
1:     ByteBuffer byteBuffer3 = ByteBuffer.wrap("c".getBytes());
1:     ByteBuffer byteBuffer4 = ByteBuffer.wrap("d".getBytes());
1:     columnDictionaryChunk1.setValues(new ArrayList<ByteBuffer>());
1:     ColumnDictionaryChunk columnDictionaryChunk2 = new ColumnDictionaryChunk();
1:     columnDictionaryChunk2.setValues(Arrays.asList(byteBuffer3, byteBuffer4));
1:     expectedResult = prepareExpectedData();
1:     columnDictionaryChunkIterator = new ColumnDictionaryChunkIterator(
1:         Arrays.asList(columnDictionaryChunk1, columnDictionaryChunk2));
1:   }
1: 
1:   private static List<byte[]> prepareExpectedData() {
1:     List<byte[]> chunks = new ArrayList<>();
1:     chunks.add("c".getBytes());
1:     chunks.add("d".getBytes());
1:     return chunks;
1:   }
1: 
1:   @Test public void testNext() throws Exception {
1:     List<byte[]> actual = new ArrayList<>();
1:     while (columnDictionaryChunkIterator.hasNext()) {
1:       actual.add(columnDictionaryChunkIterator.next());
1:     }
1:     for (int i = 0; i < actual.size(); i++) {
1:       assertThat(expectedResult.get(i), is(equalTo(actual.get(i))));
1:     }
1:   }
1: }
============================================================================