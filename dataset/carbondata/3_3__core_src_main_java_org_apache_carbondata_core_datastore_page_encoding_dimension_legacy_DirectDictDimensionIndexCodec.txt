1:e6a4f64: /*
1:e6a4f64:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6a4f64:  * contributor license agreements.  See the NOTICE file distributed with
1:e6a4f64:  * this work for additional information regarding copyright ownership.
1:e6a4f64:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6a4f64:  * (the "License"); you may not use this file except in compliance with
1:e6a4f64:  * the License.  You may obtain a copy of the License at
1:e6a4f64:  *
1:e6a4f64:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e6a4f64:  *
1:e6a4f64:  * Unless required by applicable law or agreed to in writing, software
1:e6a4f64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6a4f64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6a4f64:  * See the License for the specific language governing permissions and
1:e6a4f64:  * limitations under the License.
1:e6a4f64:  */
1:e6a4f64: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding.dimension.legacy;
1:e6a4f64: 
1:e6a4f64: import java.util.ArrayList;
1:e6a4f64: import java.util.List;
1:e6a4f64: import java.util.Map;
1:e6a4f64: 
1:e6a4f64: import org.apache.carbondata.core.datastore.columnar.BlockIndexerStorageForNoInvertedIndexForShort;
1:e6a4f64: import org.apache.carbondata.core.datastore.columnar.BlockIndexerStorageForShort;
1:e6a4f64: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
1:e6a4f64: import org.apache.carbondata.core.datastore.compression.Compressor;
1:8f08c4a: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:e6a4f64: import org.apache.carbondata.core.util.ByteUtil;
1:e6a4f64: import org.apache.carbondata.format.Encoding;
1:e6a4f64: 
1:e6a4f64: public class DirectDictDimensionIndexCodec extends IndexStorageCodec {
1:e6a4f64: 
1:8f08c4a:   public DirectDictDimensionIndexCodec(boolean isSort, boolean isInvertedIndex) {
1:8f08c4a:     super(isSort, isInvertedIndex);
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public String getName() {
1:e6a4f64:     return "DirectDictDimensionIndexCodec";
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:e6a4f64:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:e6a4f64:     return new IndexStorageEncoder() {
1:e6a4f64:       @Override
1:e6a4f64:       void encodeIndexStorage(ColumnPage inputPage) {
1:e6a4f64:         IndexStorage indexStorage;
1:e6a4f64:         byte[][] data = inputPage.getByteArrayPage();
1:e6a4f64:         if (isInvertedIndex) {
1:e6a4f64:           indexStorage = new BlockIndexerStorageForShort(data, false, false, isSort);
1:e6a4f64:         } else {
1:334e647:           indexStorage = new BlockIndexerStorageForNoInvertedIndexForShort(data, false);
1:e6a4f64:         }
1:e6a4f64:         byte[] flattened = ByteUtil.flatten(indexStorage.getDataPage());
1:8f08c4a:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:             inputPage.getColumnCompressorName());
1:e6a4f64:         super.compressedDataPage = compressor.compressByte(flattened);
1:e6a4f64:         super.indexStorage = indexStorage;
1:e6a4f64:       }
1:e6a4f64: 
1:e6a4f64:       @Override
1:e6a4f64:       protected List<Encoding> getEncodingList() {
1:e6a4f64:         List<Encoding> encodings = new ArrayList<>();
1:e6a4f64:         encodings.add(Encoding.DICTIONARY);
1:e6a4f64:         encodings.add(Encoding.RLE);
1:e6a4f64:         if (isInvertedIndex) {
1:e6a4f64:           encodings.add(Encoding.INVERTED_INDEX);
1:e6a4f64:         }
1:e6a4f64:         return encodings;
1:e6a4f64:       }
1:e6a4f64:     };
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
/////////////////////////////////////////////////////////////////////////
1:   public DirectDictDimensionIndexCodec(boolean isSort, boolean isInvertedIndex) {
1:     super(isSort, isInvertedIndex);
/////////////////////////////////////////////////////////////////////////
1:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:             inputPage.getColumnCompressorName());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:334e647
/////////////////////////////////////////////////////////////////////////
1:           indexStorage = new BlockIndexerStorageForNoInvertedIndexForShort(data, false);
commit:e710339
/////////////////////////////////////////////////////////////////////////
0:           indexStorage = new BlockIndexerStorageForNoInvertedIndexForShort(data, false, false);
author:Jacky Li
-------------------------------------------------------------------------------
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding.dimension.legacy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.datastore.columnar.BlockIndexerStorageForNoInvertedIndexForShort;
1: import org.apache.carbondata.core.datastore.columnar.BlockIndexerStorageForShort;
1: import org.apache.carbondata.core.datastore.columnar.IndexStorage;
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.util.ByteUtil;
1: import org.apache.carbondata.format.Encoding;
1: 
1: public class DirectDictDimensionIndexCodec extends IndexStorageCodec {
1: 
0:   public DirectDictDimensionIndexCodec(boolean isSort, boolean isInvertedIndex,
0:       Compressor compressor) {
0:     super(isSort, isInvertedIndex, compressor);
1:   }
1: 
1:   @Override
1:   public String getName() {
1:     return "DirectDictDimensionIndexCodec";
1:   }
1: 
1:   @Override
1:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:     return new IndexStorageEncoder() {
1:       @Override
1:       void encodeIndexStorage(ColumnPage inputPage) {
1:         IndexStorage indexStorage;
1:         byte[][] data = inputPage.getByteArrayPage();
1:         if (isInvertedIndex) {
1:           indexStorage = new BlockIndexerStorageForShort(data, false, false, isSort);
1:         } else {
0:           indexStorage = new BlockIndexerStorageForNoInvertedIndexForShort(data, false);
1:         }
1:         byte[] flattened = ByteUtil.flatten(indexStorage.getDataPage());
1:         super.compressedDataPage = compressor.compressByte(flattened);
1:         super.indexStorage = indexStorage;
1:       }
1: 
1:       @Override
1:       protected List<Encoding> getEncodingList() {
1:         List<Encoding> encodings = new ArrayList<>();
1:         encodings.add(Encoding.DICTIONARY);
1:         encodings.add(Encoding.RLE);
1:         if (isInvertedIndex) {
1:           encodings.add(Encoding.INVERTED_INDEX);
1:         }
1:         return encodings;
1:       }
1:     };
1:   }
1: 
1: }
============================================================================