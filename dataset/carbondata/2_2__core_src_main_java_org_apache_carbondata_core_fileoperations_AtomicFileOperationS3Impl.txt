1:878bbd8: /*
1:878bbd8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:878bbd8:  * contributor license agreements.  See the NOTICE file distributed with
1:878bbd8:  * this work for additional information regarding copyright ownership.
1:878bbd8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:878bbd8:  * (the "License"); you may not use this file except in compliance with
1:878bbd8:  * the License.  You may obtain a copy of the License at
1:878bbd8:  *
1:878bbd8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:878bbd8:  *
1:878bbd8:  * Unless required by applicable law or agreed to in writing, software
1:878bbd8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:878bbd8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:878bbd8:  * See the License for the specific language governing permissions and
1:878bbd8:  * limitations under the License.
1:878bbd8:  */
2:878bbd8: 
1:878bbd8: package org.apache.carbondata.core.fileoperations;
1:878bbd8: 
1:878bbd8: import java.io.DataInputStream;
1:878bbd8: import java.io.DataOutputStream;
1:878bbd8: import java.io.IOException;
1:878bbd8: 
1:878bbd8: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:878bbd8: import org.apache.carbondata.core.util.CarbonUtil;
1:878bbd8: 
1:878bbd8: /**
1:878bbd8:  * This Implementation for AtomicFileOperation is specific to S3 store.
1:878bbd8:  * In this temporary files would not be written instead directly overwrite call
1:878bbd8:  * would be fired on the desired file.
1:878bbd8:  *
1:878bbd8:  * This is required because deletion and recreation on tablestatus has a very small window where the
1:878bbd8:  * file would not exist in the Metadata directory. Any query which tries to access tablestatus
1:878bbd8:  * during this time will fail. By this fix the complete object will be overwritten to the bucket and
1:878bbd8:  * S3 will ensure that either the old or the new file content is always available for read.
1:878bbd8:  *
1:878bbd8:  */
1:878bbd8: class AtomicFileOperationS3Impl implements AtomicFileOperations {
1:878bbd8: 
1:878bbd8:   private String filePath;
1:878bbd8: 
1:878bbd8:   private DataOutputStream dataOutStream;
1:878bbd8: 
1:878bbd8:   AtomicFileOperationS3Impl(String filePath) {
1:878bbd8:     this.filePath = filePath;
1:878bbd8:   }
1:878bbd8:   @Override public DataInputStream openForRead() throws IOException {
1:878bbd8:     return FileFactory.getDataInputStream(filePath, FileFactory.getFileType(filePath));
1:878bbd8:   }
1:878bbd8: 
1:878bbd8:   @Override public void close() throws IOException {
1:878bbd8:     if (null != dataOutStream) {
1:878bbd8:       CarbonUtil.closeStream(dataOutStream);
1:878bbd8:     }
1:878bbd8:   }
1:878bbd8: 
1:878bbd8:   @Override public DataOutputStream openForWrite(FileWriteOperation operation) throws IOException {
1:878bbd8:     filePath = filePath.replace("\\", "/");
1:878bbd8:     FileFactory.FileType fileType = FileFactory.getFileType(filePath);
1:878bbd8:     dataOutStream = FileFactory.getDataOutputStream(filePath, fileType);
1:878bbd8:     return dataOutStream;
1:878bbd8:   }
1:7628571: 
1:7628571:   @Override public void setFailed() {
1:7628571:     // no implementation required
1:7628571:   }
1:878bbd8: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:7628571
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public void setFailed() {
1:     // no implementation required
1:   }
author:kunal642
-------------------------------------------------------------------------------
commit:878bbd8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.fileoperations;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: /**
1:  * This Implementation for AtomicFileOperation is specific to S3 store.
1:  * In this temporary files would not be written instead directly overwrite call
1:  * would be fired on the desired file.
1:  *
1:  * This is required because deletion and recreation on tablestatus has a very small window where the
1:  * file would not exist in the Metadata directory. Any query which tries to access tablestatus
1:  * during this time will fail. By this fix the complete object will be overwritten to the bucket and
1:  * S3 will ensure that either the old or the new file content is always available for read.
1:  *
1:  */
1: class AtomicFileOperationS3Impl implements AtomicFileOperations {
1: 
1:   private String filePath;
1: 
1:   private DataOutputStream dataOutStream;
1: 
1:   AtomicFileOperationS3Impl(String filePath) {
1:     this.filePath = filePath;
1:   }
1: 
1:   @Override public DataInputStream openForRead() throws IOException {
1:     return FileFactory.getDataInputStream(filePath, FileFactory.getFileType(filePath));
1:   }
1: 
1:   @Override public void close() throws IOException {
1:     if (null != dataOutStream) {
1:       CarbonUtil.closeStream(dataOutStream);
1:     }
1:   }
1: 
1:   @Override public DataOutputStream openForWrite(FileWriteOperation operation) throws IOException {
1:     filePath = filePath.replace("\\", "/");
1:     FileFactory.FileType fileType = FileFactory.getFileType(filePath);
1:     dataOutStream = FileFactory.getDataOutputStream(filePath, fileType);
1:     return dataOutStream;
1:   }
1: }
============================================================================