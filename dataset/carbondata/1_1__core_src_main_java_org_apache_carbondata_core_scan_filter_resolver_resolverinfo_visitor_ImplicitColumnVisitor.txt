1:0bbfa85: /*
1:0bbfa85:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0bbfa85:  * contributor license agreements.  See the NOTICE file distributed with
1:0bbfa85:  * this work for additional information regarding copyright ownership.
1:0bbfa85:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0bbfa85:  * (the "License"); you may not use this file except in compliance with
1:0bbfa85:  * the License.  You may obtain a copy of the License at
1:0bbfa85:  *
1:0bbfa85:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0bbfa85:  *
1:0bbfa85:  * Unless required by applicable law or agreed to in writing, software
1:0bbfa85:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0bbfa85:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0bbfa85:  * See the License for the specific language governing permissions and
1:0bbfa85:  * limitations under the License.
1:0bbfa85:  */
1:0bbfa85: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1:0bbfa85: 
1:0bbfa85: import java.io.IOException;
1:0bbfa85: import java.util.List;
1:0bbfa85: 
1:0bbfa85: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1:0bbfa85: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.FilterUtil;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
1:0bbfa85: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1:0bbfa85: 
1:0bbfa85: public class ImplicitColumnVisitor implements ResolvedFilterInfoVisitorIntf {
1:0bbfa85: 
1:0bbfa85:   /**
1:0bbfa85:    * Visitor Method will update the filter related details in visitableObj, For implicit
1:0bbfa85:    * type columns the filter members will resolved directly, no need to look up in dictionary
1:0bbfa85:    * since it will not be part of dictionary, directly the actual data can be taken
1:0bbfa85:    * and can be set. This type of encoding is effective when the particular column
1:0bbfa85:    * is having very high cardinality.
1:0bbfa85:    *
1:0bbfa85:    * @param visitableObj
1:0bbfa85:    * @param metadata
1:0bbfa85:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:0bbfa85:    *                                       filter models.
1:0bbfa85:    */
1:0bbfa85: 
1:0bbfa85:   @Override public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
1:0bbfa85:       FilterResolverMetadata metadata) throws FilterUnsupportedException, IOException {
1:0bbfa85:     if (visitableObj instanceof DimColumnResolvedFilterInfo) {
1:0bbfa85:       ColumnFilterInfo resolvedFilterObject = null;
1:0bbfa85:       List<String> evaluateResultListFinal;
1:0bbfa85:       try {
1:0bbfa85:         evaluateResultListFinal = metadata.getExpression().evaluate(null).getListAsString();
1:0bbfa85:       } catch (FilterIllegalMemberException e) {
1:0bbfa85:         throw new FilterUnsupportedException(e);
1:0bbfa85:       }
1:0bbfa85:       resolvedFilterObject = FilterUtil
1:0bbfa85:           .getImplicitColumnFilterList(evaluateResultListFinal, metadata.isIncludeFilter());
1:0bbfa85:       ((DimColumnResolvedFilterInfo)visitableObj).setFilterValues(resolvedFilterObject);
1:0bbfa85:     }
1:0bbfa85:   }
1:0bbfa85: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:0bbfa85
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.resolver.resolverinfo.visitor;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.scan.expression.exception.FilterIllegalMemberException;
1: import org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;
1: import org.apache.carbondata.core.scan.filter.ColumnFilterInfo;
1: import org.apache.carbondata.core.scan.filter.FilterUtil;
1: import org.apache.carbondata.core.scan.filter.resolver.metadata.FilterResolverMetadata;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.ColumnResolvedFilterInfo;
1: import org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;
1: 
1: public class ImplicitColumnVisitor implements ResolvedFilterInfoVisitorIntf {
1: 
1:   /**
1:    * Visitor Method will update the filter related details in visitableObj, For implicit
1:    * type columns the filter members will resolved directly, no need to look up in dictionary
1:    * since it will not be part of dictionary, directly the actual data can be taken
1:    * and can be set. This type of encoding is effective when the particular column
1:    * is having very high cardinality.
1:    *
1:    * @param visitableObj
1:    * @param metadata
1:    * @throws FilterUnsupportedException,if exception occurs while evaluating
1:    *                                       filter models.
1:    */
1: 
1:   @Override public void populateFilterResolvedInfo(ColumnResolvedFilterInfo visitableObj,
1:       FilterResolverMetadata metadata) throws FilterUnsupportedException, IOException {
1:     if (visitableObj instanceof DimColumnResolvedFilterInfo) {
1:       ColumnFilterInfo resolvedFilterObject = null;
1:       List<String> evaluateResultListFinal;
1:       try {
1:         evaluateResultListFinal = metadata.getExpression().evaluate(null).getListAsString();
1:       } catch (FilterIllegalMemberException e) {
1:         throw new FilterUnsupportedException(e);
1:       }
1:       resolvedFilterObject = FilterUtil
1:           .getImplicitColumnFilterList(evaluateResultListFinal, metadata.isIncludeFilter());
1:       ((DimColumnResolvedFilterInfo)visitableObj).setFilterValues(resolvedFilterObject);
1:     }
1:   }
1: }
============================================================================