1:df22368: /*
1:df22368:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df22368:  * contributor license agreements.  See the NOTICE file distributed with
1:df22368:  * this work for additional information regarding copyright ownership.
1:df22368:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df22368:  * (the "License"); you may not use this file except in compliance with
1:df22368:  * the License.  You may obtain a copy of the License at
1:df22368:  *
1:df22368:  *    http://www.apache.org/licenses/LICENSE-2.0
1:df22368:  *
1:df22368:  * Unless required by applicable law or agreed to in writing, software
1:df22368:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df22368:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df22368:  * See the License for the specific language governing permissions and
1:df22368:  * limitations under the License.
1:df22368:  */
1:df22368: package org.apache.carbondata.core.memory;
1:df22368: 
1:df22368: import java.util.HashMap;
1:df22368: import java.util.HashSet;
1:df22368: import java.util.Iterator;
1:df22368: import java.util.Map;
1:df22368: import java.util.Set;
1:df22368: 
1:df22368: import org.apache.carbondata.common.logging.LogService;
1:df22368: import org.apache.carbondata.common.logging.LogServiceFactory;
1:df22368: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:df22368: import org.apache.carbondata.core.util.CarbonProperties;
1:df22368: 
1:df22368: /**
1:df22368:  * Memory manager to keep track of
1:df22368:  * all memory for storing the sorted data
1:df22368:  */
1:df22368: public class UnsafeSortMemoryManager {
1:df22368: 
1:df22368:   /**
1:df22368:    * logger
1:df22368:    */
1:df22368:   private static final LogService LOGGER =
1:df22368:       LogServiceFactory.getLogService(UnsafeSortMemoryManager.class.getName());
1:df22368: 
1:df22368:   /**
1:df22368:    * offheap is enabled
1:df22368:    */
1:df22368:   private static boolean offHeap = Boolean.parseBoolean(CarbonProperties.getInstance()
1:df22368:       .getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT,
1:df22368:           CarbonCommonConstants.ENABLE_OFFHEAP_SORT_DEFAULT));
1:df22368: 
1:df22368:   /**
1:df22368:    * map to keep taskid to memory blocks
1:df22368:    */
1:df22368:   private static Map<Long, Set<MemoryBlock>> taskIdToMemoryBlockMap;
1:df22368: 
1:df22368:   /**
1:df22368:    * singleton instance
1:df22368:    */
1:df22368:   public static final UnsafeSortMemoryManager INSTANCE;
1:df22368: 
1:df22368:   /**
1:df22368:    * total memory available for sort data storage
1:df22368:    */
1:df22368:   private long totalMemory;
1:df22368: 
1:df22368:   /**
1:df22368:    * current memory used
1:df22368:    */
1:df22368:   private long memoryUsed;
1:df22368: 
1:df22368:   /**
1:df22368:    * current memory allocator
1:df22368:    */
1:df22368:   private MemoryAllocator allocator;
1:df22368: 
1:df22368:   static {
1:df22368:     long size;
1:df22368:     try {
1:df22368:       size = Long.parseLong(CarbonProperties.getInstance()
1:27ec651:           .getProperty(CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB,
1:27ec651:               CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT));
1:df22368:     } catch (Exception e) {
1:27ec651:       size = Long.parseLong(CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT);
1:df22368:       LOGGER.info("Wrong memory size given, " + "so setting default value to " + size);
1:df22368:     }
1:df22368:     if (size < 1024) {
1:df22368:       size = 1024;
1:df22368:       LOGGER.info("It is not recommended to keep unsafe memory size less than 1024MB, "
1:df22368:           + "so setting default value to " + size);
1:df22368:     }
1:df22368: 
1:df22368:     long takenSize = size * 1024 * 1024;
1:df22368:     MemoryAllocator allocator;
1:df22368:     if (offHeap) {
1:df22368:       allocator = MemoryAllocator.UNSAFE;
1:df22368:     } else {
1:df22368:       long maxMemory = Runtime.getRuntime().maxMemory() * 60 / 100;
1:df22368:       if (takenSize > maxMemory) {
1:df22368:         takenSize = maxMemory;
1:df22368:       }
1:df22368:       allocator = MemoryAllocator.HEAP;
1:df22368:     }
1:df22368:     INSTANCE = new UnsafeSortMemoryManager(takenSize, allocator);
1:df22368:     taskIdToMemoryBlockMap = new HashMap<>();
1:df22368:   }
1:df22368: 
1:df22368:   private UnsafeSortMemoryManager(long totalMemory, MemoryAllocator allocator) {
1:df22368:     this.totalMemory = totalMemory;
1:df22368:     this.allocator = allocator;
1:df22368:     LOGGER.info("Sort Memory manager is created with size " + totalMemory + " with " + allocator);
1:df22368:   }
1:df22368: 
1:df22368:   /**
1:df22368:    * Below method will be used to check whether memory required is
1:df22368:    * available or not
1:df22368:    *
1:df22368:    * @param required
1:df22368:    * @return if memory available
1:df22368:    */
1:df22368:   public synchronized boolean isMemoryAvailable(long required) {
1:df22368:     return memoryUsed + required < totalMemory;
1:df22368:   }
1:df22368: 
1:df22368:   /**
1:b439b00:    * total usable memory for sort memory manager
1:b439b00:    * @return size in bytes
1:b439b00:    */
1:b439b00:   public long getUsableMemory() {
1:b439b00:     return totalMemory;
1:b439b00:   }
1:b439b00: 
1:b439b00:   /**
1:df22368:    * Below method will be used to allocate dummy memory
1:df22368:    * this will be used to allocate first and then used when u need
1:df22368:    *
1:df22368:    * @param size
1:df22368:    */
1:df22368:   public synchronized void allocateDummyMemory(long size) {
1:df22368:     memoryUsed += size;
1:df22368:     if (LOGGER.isDebugEnabled()) {
1:df22368:       LOGGER.debug("Working Memory block (" + size + ") is created with size " + size
1:df22368:           + ". Total memory used " + memoryUsed + "Bytes, left " + (totalMemory - memoryUsed)
1:df22368:           + "Bytes");
1:df22368:     }
1:df22368:   }
1:df22368: 
1:df22368:   public synchronized void freeMemory(long taskId, MemoryBlock memoryBlock) {
1:2892326:     if (taskIdToMemoryBlockMap.containsKey(taskId)) {
1:df22368:       taskIdToMemoryBlockMap.get(taskId).remove(memoryBlock);
2:2892326:     }
1:2892326:     if (!memoryBlock.isFreedStatus()) {
1:df22368:       allocator.free(memoryBlock);
1:df22368:       memoryUsed -= memoryBlock.size();
1:df22368:       memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
1:df22368:       if (LOGGER.isDebugEnabled()) {
1:df22368:         LOGGER.debug(
1:df22368:             "Freeing memory of size: " + memoryBlock.size() + ": Current available memory is: " + (
1:df22368:                 totalMemory - memoryUsed));
1:df22368:       }
1:df22368:     }
1:df22368:   }
1:df22368: 
1:df22368:   /**
1:df22368:    * Below method will be used to free all the
1:df22368:    * memory occupied for a task, this will be useful
1:df22368:    * when in case of task failure we need to clear all the memory occupied
1:df22368:    * @param taskId
1:df22368:    */
1:500654e:   public synchronized void freeMemoryAll(long taskId) {
1:df22368:     Set<MemoryBlock> memoryBlockSet = null;
1:df22368:     memoryBlockSet = taskIdToMemoryBlockMap.remove(taskId);
1:df22368:     long occuppiedMemory = 0;
1:df22368:     if (null != memoryBlockSet) {
1:df22368:       Iterator<MemoryBlock> iterator = memoryBlockSet.iterator();
1:df22368:       MemoryBlock memoryBlock = null;
1:df22368:       while (iterator.hasNext()) {
1:df22368:         memoryBlock = iterator.next();
1:2892326:         if (!memoryBlock.isFreedStatus()) {
1:df22368:           occuppiedMemory += memoryBlock.size();
1:df22368:           allocator.free(memoryBlock);
1:df22368:         }
1:df22368:       }
1:df22368:     }
1:df22368:     memoryUsed -= occuppiedMemory;
1:df22368:     memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
1:df22368:     if (LOGGER.isDebugEnabled()) {
1:df22368:       LOGGER.debug(
1:df22368:           "Freeing memory of size: " + occuppiedMemory + ": Current available memory is: " + (
1:df22368:               totalMemory - memoryUsed));
1:df22368:     }
1:df22368:   }
1:df22368: 
1:df22368:   /**
1:df22368:    * Before calling this method caller should call allocateMemoryDummy
1:df22368:    * This method will be used to allocate the memory, this can be used
1:df22368:    * when caller wants to allocate memory first and used it anytime
1:df22368:    * @param taskId
1:df22368:    * @param memoryRequested
1:df22368:    * @return memory block
1:df22368:    */
1:df22368:   public synchronized MemoryBlock allocateMemoryLazy(long taskId, long memoryRequested) {
1:df22368:     MemoryBlock allocate = allocator.allocate(memoryRequested);
1:df22368:     Set<MemoryBlock> listOfMemoryBlock = taskIdToMemoryBlockMap.get(taskId);
1:df22368:     if (null == listOfMemoryBlock) {
1:df22368:       listOfMemoryBlock = new HashSet<>();
1:df22368:       taskIdToMemoryBlockMap.put(taskId, listOfMemoryBlock);
1:df22368:     }
1:df22368:     listOfMemoryBlock.add(allocate);
1:df22368:     return allocate;
1:df22368:   }
1:df22368: 
1:df22368:   /**
1:df22368:    * It tries to allocate memory of `size` bytes, keep retry until it allocates successfully.
1:df22368:    */
1:df22368:   public static MemoryBlock allocateMemoryWithRetry(long taskId, long size) throws MemoryException {
1:df22368:     MemoryBlock baseBlock = null;
1:df22368:     int tries = 0;
1:df22368:     while (tries < 100) {
1:df22368:       baseBlock = INSTANCE.allocateMemory(taskId, size);
1:df22368:       if (baseBlock == null) {
1:df22368:         try {
1:df22368:           Thread.sleep(50);
1:df22368:         } catch (InterruptedException e) {
1:df22368:           throw new MemoryException(e);
1:df22368:         }
1:df22368:       } else {
1:df22368:         break;
1:df22368:       }
1:df22368:       tries++;
1:df22368:     }
1:df22368:     if (baseBlock == null) {
1:df22368:       throw new MemoryException("Not enough memory");
1:df22368:     }
1:df22368:     return baseBlock;
1:df22368:   }
1:df22368: 
1:df22368:   private synchronized MemoryBlock allocateMemory(long taskId, long memoryRequested) {
1:df22368:     if (memoryUsed + memoryRequested <= totalMemory) {
1:df22368:       MemoryBlock allocate = allocator.allocate(memoryRequested);
1:df22368:       memoryUsed += allocate.size();
1:df22368:       if (LOGGER.isDebugEnabled()) {
1:df22368:         LOGGER.debug(
1:df22368:             "Working Memory block (" + allocate.size() + ") is created with size " + allocate.size()
1:df22368:                 + ". Total memory used " + memoryUsed + "Bytes, left " + (totalMemory - memoryUsed)
1:df22368:                 + "Bytes");
1:df22368:       }
1:df22368:       Set<MemoryBlock> listOfMemoryBlock = taskIdToMemoryBlockMap.get(taskId);
1:df22368:       if (null == listOfMemoryBlock) {
1:df22368:         listOfMemoryBlock = new HashSet<>();
1:df22368:         taskIdToMemoryBlockMap.put(taskId, listOfMemoryBlock);
1:df22368:       }
1:df22368:       listOfMemoryBlock.add(allocate);
1:df22368:       return allocate;
1:df22368:     }
1:df22368:     return null;
1:df22368:   }
1:df22368: 
1:df22368:   public static boolean isOffHeap() {
1:df22368:     return offHeap;
1:df22368:   }
1:df22368: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b439b00
/////////////////////////////////////////////////////////////////////////
1:    * total usable memory for sort memory manager
1:    * @return size in bytes
1:    */
1:   public long getUsableMemory() {
1:     return totalMemory;
1:   }
1: 
1:   /**
author:kumarvishal
-------------------------------------------------------------------------------
commit:27ec651
/////////////////////////////////////////////////////////////////////////
1:           .getProperty(CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB,
1:               CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT));
1:       size = Long.parseLong(CarbonCommonConstants.IN_MEMORY_STORAGE_FOR_SORTED_DATA_IN_MB_DEFAULT);
commit:df22368
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.memory;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: /**
1:  * Memory manager to keep track of
1:  * all memory for storing the sorted data
1:  */
1: public class UnsafeSortMemoryManager {
1: 
1:   /**
1:    * logger
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(UnsafeSortMemoryManager.class.getName());
1: 
1:   /**
1:    * offheap is enabled
1:    */
1:   private static boolean offHeap = Boolean.parseBoolean(CarbonProperties.getInstance()
1:       .getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT,
1:           CarbonCommonConstants.ENABLE_OFFHEAP_SORT_DEFAULT));
1: 
1:   /**
1:    * map to keep taskid to memory blocks
1:    */
1:   private static Map<Long, Set<MemoryBlock>> taskIdToMemoryBlockMap;
1: 
1:   /**
1:    * singleton instance
1:    */
1:   public static final UnsafeSortMemoryManager INSTANCE;
1: 
1:   /**
1:    * total memory available for sort data storage
1:    */
1:   private long totalMemory;
1: 
1:   /**
1:    * current memory used
1:    */
1:   private long memoryUsed;
1: 
1:   /**
1:    * current memory allocator
1:    */
1:   private MemoryAllocator allocator;
1: 
1:   static {
1:     long size;
1:     try {
1:       size = Long.parseLong(CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.IN_MEMORY_FOR_SORT_DATA_IN_MB,
0:               CarbonCommonConstants.IN_MEMORY_FOR_SORT_DATA_IN_MB_DEFAULT));
1:     } catch (Exception e) {
0:       size = Long.parseLong(CarbonCommonConstants.IN_MEMORY_FOR_SORT_DATA_IN_MB_DEFAULT);
1:       LOGGER.info("Wrong memory size given, " + "so setting default value to " + size);
1:     }
1:     if (size < 1024) {
1:       size = 1024;
1:       LOGGER.info("It is not recommended to keep unsafe memory size less than 1024MB, "
1:           + "so setting default value to " + size);
1:     }
1: 
1:     long takenSize = size * 1024 * 1024;
1:     MemoryAllocator allocator;
1:     if (offHeap) {
1:       allocator = MemoryAllocator.UNSAFE;
1:     } else {
1:       long maxMemory = Runtime.getRuntime().maxMemory() * 60 / 100;
1:       if (takenSize > maxMemory) {
1:         takenSize = maxMemory;
1:       }
1:       allocator = MemoryAllocator.HEAP;
1:     }
1:     INSTANCE = new UnsafeSortMemoryManager(takenSize, allocator);
1:     taskIdToMemoryBlockMap = new HashMap<>();
1:   }
1: 
1:   private UnsafeSortMemoryManager(long totalMemory, MemoryAllocator allocator) {
1:     this.totalMemory = totalMemory;
1:     this.allocator = allocator;
1:     LOGGER.info("Sort Memory manager is created with size " + totalMemory + " with " + allocator);
1:   }
1: 
1:   /**
1:    * Below method will be used to check whether memory required is
1:    * available or not
1:    *
1:    * @param required
1:    * @return if memory available
1:    */
1:   public synchronized boolean isMemoryAvailable(long required) {
1:     return memoryUsed + required < totalMemory;
1:   }
1: 
1:   /**
1:    * Below method will be used to allocate dummy memory
1:    * this will be used to allocate first and then used when u need
1:    *
1:    * @param size
1:    */
1:   public synchronized void allocateDummyMemory(long size) {
1:     memoryUsed += size;
1:     if (LOGGER.isDebugEnabled()) {
1:       LOGGER.debug("Working Memory block (" + size + ") is created with size " + size
1:           + ". Total memory used " + memoryUsed + "Bytes, left " + (totalMemory - memoryUsed)
1:           + "Bytes");
1:     }
1:   }
1: 
1:   public synchronized void freeMemory(long taskId, MemoryBlock memoryBlock) {
1:     allocator.free(memoryBlock);
1:     taskIdToMemoryBlockMap.get(taskId).remove(memoryBlock);
1:     memoryUsed -= memoryBlock.size();
1:     memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
1:     if (LOGGER.isDebugEnabled()) {
1:       LOGGER.debug(
1:           "Freeing memory of size: " + memoryBlock.size() + ": Current available memory is: " + (
1:               totalMemory - memoryUsed));
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to free all the
1:    * memory occupied for a task, this will be useful
1:    * when in case of task failure we need to clear all the memory occupied
1:    * @param taskId
1:    */
0:   public void freeMemoryAll(long taskId) {
1:     Set<MemoryBlock> memoryBlockSet = null;
0:     synchronized (INSTANCE) {
1:       memoryBlockSet = taskIdToMemoryBlockMap.remove(taskId);
1:     }
1:     long occuppiedMemory = 0;
1:     if (null != memoryBlockSet) {
1:       Iterator<MemoryBlock> iterator = memoryBlockSet.iterator();
1:       MemoryBlock memoryBlock = null;
1:       while (iterator.hasNext()) {
1:         memoryBlock = iterator.next();
1:         occuppiedMemory += memoryBlock.size();
1:         allocator.free(memoryBlock);
1:       }
1:     }
0:     synchronized (INSTANCE) {
1:       memoryUsed -= occuppiedMemory;
1:       memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
1:     }
1:     if (LOGGER.isDebugEnabled()) {
1:       LOGGER.debug(
1:           "Freeing memory of size: " + occuppiedMemory + ": Current available memory is: " + (
1:               totalMemory - memoryUsed));
1:     }
1:   }
1: 
1:   /**
1:    * Before calling this method caller should call allocateMemoryDummy
1:    * This method will be used to allocate the memory, this can be used
1:    * when caller wants to allocate memory first and used it anytime
1:    * @param taskId
1:    * @param memoryRequested
1:    * @return memory block
1:    */
1:   public synchronized MemoryBlock allocateMemoryLazy(long taskId, long memoryRequested) {
1:     MemoryBlock allocate = allocator.allocate(memoryRequested);
1:     Set<MemoryBlock> listOfMemoryBlock = taskIdToMemoryBlockMap.get(taskId);
1:     if (null == listOfMemoryBlock) {
1:       listOfMemoryBlock = new HashSet<>();
1:       taskIdToMemoryBlockMap.put(taskId, listOfMemoryBlock);
1:     }
1:     listOfMemoryBlock.add(allocate);
1:     return allocate;
1:   }
1: 
1:   /**
1:    * It tries to allocate memory of `size` bytes, keep retry until it allocates successfully.
1:    */
1:   public static MemoryBlock allocateMemoryWithRetry(long taskId, long size) throws MemoryException {
1:     MemoryBlock baseBlock = null;
1:     int tries = 0;
1:     while (tries < 100) {
1:       baseBlock = INSTANCE.allocateMemory(taskId, size);
1:       if (baseBlock == null) {
1:         try {
1:           Thread.sleep(50);
1:         } catch (InterruptedException e) {
1:           throw new MemoryException(e);
1:         }
1:       } else {
1:         break;
1:       }
1:       tries++;
1:     }
1:     if (baseBlock == null) {
1:       throw new MemoryException("Not enough memory");
1:     }
1:     return baseBlock;
1:   }
1: 
1:   private synchronized MemoryBlock allocateMemory(long taskId, long memoryRequested) {
1:     if (memoryUsed + memoryRequested <= totalMemory) {
1:       MemoryBlock allocate = allocator.allocate(memoryRequested);
1:       memoryUsed += allocate.size();
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug(
1:             "Working Memory block (" + allocate.size() + ") is created with size " + allocate.size()
1:                 + ". Total memory used " + memoryUsed + "Bytes, left " + (totalMemory - memoryUsed)
1:                 + "Bytes");
1:       }
1:       Set<MemoryBlock> listOfMemoryBlock = taskIdToMemoryBlockMap.get(taskId);
1:       if (null == listOfMemoryBlock) {
1:         listOfMemoryBlock = new HashSet<>();
1:         taskIdToMemoryBlockMap.put(taskId, listOfMemoryBlock);
1:       }
1:       listOfMemoryBlock.add(allocate);
1:       return allocate;
1:     }
1:     return null;
1:   }
1: 
1:   public static boolean isOffHeap() {
1:     return offHeap;
1:   }
1: }
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:2892326
/////////////////////////////////////////////////////////////////////////
1:     if (taskIdToMemoryBlockMap.containsKey(taskId)) {
0:       taskIdToMemoryBlockMap.get(taskId).remove(memoryBlock);
1:     }
1:     if (!memoryBlock.isFreedStatus()) {
0:       allocator.free(memoryBlock);
0:       memoryUsed -= memoryBlock.size();
0:       memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
0:       if (LOGGER.isDebugEnabled()) {
0:         LOGGER.debug(
0:             "Freeing memory of size: " + memoryBlock.size() + ": Current available memory is: " + (
0:                 totalMemory - memoryUsed));
1:       }
/////////////////////////////////////////////////////////////////////////
1:         if (!memoryBlock.isFreedStatus()) {
0:           occuppiedMemory += memoryBlock.size();
0:           allocator.free(memoryBlock);
0:         }
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:   public synchronized void freeMemoryAll(long taskId) {
0:     memoryBlockSet = taskIdToMemoryBlockMap.remove(taskId);
/////////////////////////////////////////////////////////////////////////
0:     memoryUsed -= occuppiedMemory;
0:     memoryUsed = memoryUsed < 0 ? 0 : memoryUsed;
============================================================================