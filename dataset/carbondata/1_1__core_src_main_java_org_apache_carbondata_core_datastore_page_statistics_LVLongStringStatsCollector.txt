1:dc53dee: /*
1:dc53dee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc53dee:  * contributor license agreements.  See the NOTICE file distributed with
1:dc53dee:  * this work for additional information regarding copyright ownership.
1:dc53dee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc53dee:  * (the "License"); you may not use this file except in compliance with
1:dc53dee:  * the License.  You may obtain a copy of the License at
1:dc53dee:  *
1:dc53dee:  *    http://www.apache.org/licenses/LICENSE-2.0
1:dc53dee:  *
1:dc53dee:  * Unless required by applicable law or agreed to in writing, software
1:dc53dee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc53dee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc53dee:  * See the License for the specific language governing permissions and
1:dc53dee:  * limitations under the License.
1:dc53dee:  */
1:dc53dee: 
1:dc53dee: package org.apache.carbondata.core.datastore.page.statistics;
1:dc53dee: 
1:dc53dee: import org.apache.carbondata.core.util.ByteUtil;
1:dc53dee: 
1:dc53dee: /**
1:dc53dee:  * This class is for the columns with varchar data type,
1:dc53dee:  * a string type which can hold more than 32000 characters
1:dc53dee:  */
1:dc53dee: public class LVLongStringStatsCollector extends LVStringStatsCollector {
1:dc53dee: 
1:dc53dee:   public static LVLongStringStatsCollector newInstance() {
1:dc53dee:     return new LVLongStringStatsCollector();
1:dc53dee:   }
1:dc53dee: 
1:dc53dee:   private LVLongStringStatsCollector() {
1:dc53dee: 
1:dc53dee:   }
1:dc53dee: 
1:dc53dee:   @Override
1:dc53dee:   protected byte[] getActualValue(byte[] value) {
1:dc53dee:     byte[] actualValue;
1:dc53dee:     assert (value.length >= 4);
1:dc53dee:     if (value.length == 4) {
1:dc53dee:       assert (value[0] == 0 && value[1] == 0);
1:dc53dee:       actualValue = new byte[0];
1:dc53dee:     } else {
1:dc53dee:       int length = ByteUtil.toInt(value, 0);
1:dc53dee:       assert (length > 0);
1:dc53dee:       actualValue = new byte[value.length - 4];
1:dc53dee:       System.arraycopy(value, 4, actualValue, 0, actualValue.length);
1:dc53dee:     }
1:dc53dee:     return actualValue;
1:dc53dee:   }
1:dc53dee: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.statistics;
1: 
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * This class is for the columns with varchar data type,
1:  * a string type which can hold more than 32000 characters
1:  */
1: public class LVLongStringStatsCollector extends LVStringStatsCollector {
1: 
1:   public static LVLongStringStatsCollector newInstance() {
1:     return new LVLongStringStatsCollector();
1:   }
1: 
1:   private LVLongStringStatsCollector() {
1: 
1:   }
1: 
1:   @Override
1:   protected byte[] getActualValue(byte[] value) {
1:     byte[] actualValue;
1:     assert (value.length >= 4);
1:     if (value.length == 4) {
1:       assert (value[0] == 0 && value[1] == 0);
1:       actualValue = new byte[0];
1:     } else {
1:       int length = ByteUtil.toInt(value, 0);
1:       assert (length > 0);
1:       actualValue = new byte[value.length - 4];
1:       System.arraycopy(value, 4, actualValue, 0, actualValue.length);
1:     }
1:     return actualValue;
1:   }
1: }
============================================================================