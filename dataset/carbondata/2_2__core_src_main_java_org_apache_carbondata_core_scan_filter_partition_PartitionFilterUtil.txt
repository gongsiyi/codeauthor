1:cdde3dd: /*
1:cdde3dd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdde3dd:  * contributor license agreements.  See the NOTICE file distributed with
1:cdde3dd:  * this work for additional information regarding copyright ownership.
1:cdde3dd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdde3dd:  * (the "License"); you may not use this file except in compliance with
1:cdde3dd:  * the License.  You may obtain a copy of the License at
1:cdde3dd:  *
1:cdde3dd:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cdde3dd:  *
1:cdde3dd:  * Unless required by applicable law or agreed to in writing, software
1:cdde3dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdde3dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdde3dd:  * See the License for the specific language governing permissions and
1:cdde3dd:  * limitations under the License.
2:cdde3dd:  */
10:cdde3dd: 
1:cdde3dd: package org.apache.carbondata.core.scan.filter.partition;
1:cdde3dd: 
1:71934e9: import java.text.DateFormat;
1:cdde3dd: import java.util.BitSet;
1:cdde3dd: import java.util.List;
1:cdde3dd: 
1:cdde3dd: import org.apache.carbondata.core.metadata.datatype.DataType;
1:cdde3dd: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.ListPartitioner;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1:cdde3dd: import org.apache.carbondata.core.scan.partition.RangePartitioner;
1:c7aba5e: import org.apache.carbondata.core.util.ByteUtil;
1:6488bc0: import org.apache.carbondata.core.util.comparator.Comparator;
1:6488bc0: import org.apache.carbondata.core.util.comparator.SerializableComparator;
1:cdde3dd: 
1:cdde3dd: public class PartitionFilterUtil {
1:cdde3dd: 
2:cdde3dd:   /**
1:cdde3dd:    * get partition map of range filter on list partition table
1:cdde3dd:    * @param partitionInfo
1:cdde3dd:    * @param partitioner
1:cdde3dd:    * @param filterValue
1:cdde3dd:    * @param isGreaterThan
1:cdde3dd:    * @param isEqualTo
2:cdde3dd:    * @return
1:cdde3dd:    */
1:cdde3dd:   public static BitSet getPartitionMapForRangeFilter(PartitionInfo partitionInfo,
1:71934e9:       ListPartitioner partitioner, Object filterValue,  boolean isGreaterThan, boolean isEqualTo,
1:71934e9:       DateFormat timestampFormatter, DateFormat dateFormatter) {
1:cdde3dd: 
1:c7aba5e:     List<List<String>> listInfo = partitionInfo.getListInfo();
1:cdde3dd:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:cdde3dd: 
1:6488bc0:     SerializableComparator comparator =
1:6488bc0:         Comparator.getComparator(partitionColumnDataType);
1:cdde3dd: 
1:cdde3dd:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1:cdde3dd:     // add default partition
1:6488bc0:     partitionMap.set(0);
1:c7aba5e:     int partitions = listInfo.size();
1:cdde3dd:     if (isGreaterThan) {
1:cdde3dd:       if (isEqualTo) {
1:cdde3dd:         // GreaterThanEqualTo(>=)
1:cdde3dd:         outer1:
1:cdde3dd:         for (int i = 0; i < partitions; i++) {
1:c7aba5e:           for (String value : listInfo.get(i)) {
1:71934e9:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:71934e9:                 timestampFormatter, dateFormatter);
1:c7aba5e:             if (listValue instanceof String) {
1:c7aba5e:               listValue = ByteUtil.toBytes((String)listValue);
1:c7aba5e:             }
1:cdde3dd:             if (comparator.compare(listValue, filterValue) >= 0) {
1:6488bc0:               partitionMap.set(i + 1);
1:cdde3dd:               continue outer1;
17:cdde3dd:             }
1:cdde3dd:           }
1:cdde3dd:         }
3:cdde3dd:       } else {
1:cdde3dd:         // GreaterThan(>)
1:cdde3dd:         outer2:
1:cdde3dd:         for (int i = 0; i < partitions; i++) {
1:c7aba5e:           for (String value : listInfo.get(i)) {
1:71934e9:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:71934e9:                 timestampFormatter, dateFormatter);
1:c7aba5e:             if (listValue instanceof String) {
1:c7aba5e:               listValue = ByteUtil.toBytes((String)listValue);
1:c7aba5e:             }
1:cdde3dd:             if (comparator.compare(listValue, filterValue) > 0) {
1:6488bc0:               partitionMap.set(i + 1);
1:cdde3dd:               continue outer2;
1:cdde3dd:             }
1:cdde3dd:           }
1:cdde3dd:         }
1:cdde3dd:       }
1:cdde3dd:     } else {
1:cdde3dd:       if (isEqualTo) {
1:cdde3dd:         // LessThanEqualTo(<=)
1:cdde3dd:         outer3:
1:cdde3dd:         for (int i = 0; i < partitions; i++) {
1:c7aba5e:           for (String value : listInfo.get(i)) {
1:71934e9:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:71934e9:                 timestampFormatter, dateFormatter);
1:c7aba5e:             if (listValue instanceof String) {
1:c7aba5e:               listValue = ByteUtil.toBytes((String)listValue);
1:c7aba5e:             }
1:cdde3dd:             if (comparator.compare(listValue, filterValue) <= 0) {
1:6488bc0:               partitionMap.set(i + 1);
1:cdde3dd:               continue outer3;
1:cdde3dd:             }
1:cdde3dd:           }
1:cdde3dd:         }
1:cdde3dd:       } else {
1:874764f:         // LessThan(<)
1:cdde3dd:         outer4:
1:cdde3dd:         for (int i = 0; i < partitions; i++) {
1:c7aba5e:           for (String value : listInfo.get(i)) {
1:71934e9:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:71934e9:                 timestampFormatter, dateFormatter);
1:c7aba5e:             if (listValue instanceof String) {
1:c7aba5e:               listValue = ByteUtil.toBytes((String)listValue);
1:c7aba5e:             }
1:cdde3dd:             if (comparator.compare(listValue, filterValue) < 0) {
1:6488bc0:               partitionMap.set(i + 1);
1:cdde3dd:               continue outer4;
1:cdde3dd:             }
1:cdde3dd:           }
1:cdde3dd:         }
1:cdde3dd:       }
1:cdde3dd:     }
1:cdde3dd: 
1:cdde3dd:     return partitionMap;
1:cdde3dd:   }
1:cdde3dd: 
1:cdde3dd:   /**
1:cdde3dd:    * get partition map of range filter on range partition table
1:cdde3dd:    * @param partitionInfo
1:cdde3dd:    * @param partitioner
1:cdde3dd:    * @param filterValue
1:cdde3dd:    * @param isGreaterThan
1:cdde3dd:    * @param isEqualTo
1:cdde3dd:    * @return
1:cdde3dd:    */
1:cdde3dd:   public static BitSet getPartitionMapForRangeFilter(PartitionInfo partitionInfo,
1:71934e9:       RangePartitioner partitioner, Object filterValue, boolean isGreaterThan, boolean isEqualTo,
1:71934e9:       DateFormat timestampFormatter, DateFormat dateFormatter) {
1:cdde3dd: 
1:cdde3dd:     List<String> values = partitionInfo.getRangeInfo();
1:cdde3dd:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:cdde3dd: 
1:6488bc0:     SerializableComparator comparator =
1:6488bc0:         Comparator.getComparator(partitionColumnDataType);
1:cdde3dd: 
1:cdde3dd:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1:cdde3dd: 
1:cdde3dd:     int numPartitions = values.size();
1:cdde3dd:     int result = 0;
1:cdde3dd:     // the partition index of filter value
1:cdde3dd:     int partitionIndex = 0;
1:cdde3dd:     // find the partition of filter value
1:cdde3dd:     for (; partitionIndex < numPartitions; partitionIndex++) {
1:c7aba5e:       Object value = PartitionUtil.getDataBasedOnDataType(
1:c7aba5e:           values.get(partitionIndex), partitionColumnDataType, timestampFormatter, dateFormatter);
1:c7aba5e:       if (value instanceof String) {
1:c7aba5e:         value = ByteUtil.toBytes((String)value);
1:c7aba5e:       }
1:c7aba5e:       result = comparator.compare(filterValue, value);
1:cdde3dd:       if (result <= 0) {
1:cdde3dd:         break;
1:cdde3dd:       }
1:cdde3dd:     }
1:cdde3dd:     if (partitionIndex == numPartitions) {
1:cdde3dd:       // filter value is in default partition
1:cdde3dd:       if (isGreaterThan) {
1:cdde3dd:         // GreaterThan(>), GreaterThanEqualTo(>=)
1:6488bc0:         partitionMap.set(0);
1:cdde3dd:       } else {
1:cdde3dd:         // LessThan(<), LessThanEqualTo(<=)
1:cdde3dd:         partitionMap.set(0, partitioner.numPartitions());
1:cdde3dd:       }
1:cdde3dd:     } else {
1:cdde3dd:       // filter value is not in default partition
1:cdde3dd:       if (result == 0) {
1:cdde3dd:         // if result is 0, the filter value is a bound value of range partition.
1:cdde3dd:         if (isGreaterThan) {
1:cdde3dd:           // GreaterThan(>), GreaterThanEqualTo(>=)
1:6488bc0:           partitionMap.set(partitionIndex + 2, partitioner.numPartitions());
1:6488bc0:           partitionMap.set(0);
1:cdde3dd:         } else {
1:cdde3dd:           if (isEqualTo) {
1:cdde3dd:             // LessThanEqualTo(<=)
1:6488bc0:             partitionMap.set(1, partitionIndex + 3);
1:cdde3dd:           } else {
1:cdde3dd:             // LessThan(<)
1:6488bc0:             partitionMap.set(1, partitionIndex + 2);
1:cdde3dd:           }
1:cdde3dd:         }
1:cdde3dd:       } else {
1:cdde3dd:         // the filter value is not a bound value of range partition
1:cdde3dd:         if (isGreaterThan) {
1:cdde3dd:           // GreaterThan(>), GreaterThanEqualTo(>=)
1:6488bc0:           partitionMap.set(partitionIndex + 1, partitioner.numPartitions());
1:6488bc0:           partitionMap.set(0);
1:cdde3dd:         } else {
1:cdde3dd:           // LessThan(<), LessThanEqualTo(<=)
1:6488bc0:           partitionMap.set(1, partitionIndex + 2);
1:cdde3dd:         }
1:cdde3dd:       }
1:cdde3dd:     }
1:cdde3dd:     return partitionMap;
1:cdde3dd:   }
1:cdde3dd: 
1:cdde3dd: }
============================================================================
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1:         // LessThan(<)
commit:c7aba5e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.ByteUtil;
/////////////////////////////////////////////////////////////////////////
1:     List<List<String>> listInfo = partitionInfo.getListInfo();
/////////////////////////////////////////////////////////////////////////
1:     int partitions = listInfo.size();
1:           for (String value : listInfo.get(i)) {
1:             if (listValue instanceof String) {
1:               listValue = ByteUtil.toBytes((String)listValue);
1:             }
/////////////////////////////////////////////////////////////////////////
1:           for (String value : listInfo.get(i)) {
1:             if (listValue instanceof String) {
1:               listValue = ByteUtil.toBytes((String)listValue);
1:             }
/////////////////////////////////////////////////////////////////////////
1:           for (String value : listInfo.get(i)) {
1:             if (listValue instanceof String) {
1:               listValue = ByteUtil.toBytes((String)listValue);
1:             }
/////////////////////////////////////////////////////////////////////////
1:           for (String value : listInfo.get(i)) {
1:             if (listValue instanceof String) {
1:               listValue = ByteUtil.toBytes((String)listValue);
1:             }
/////////////////////////////////////////////////////////////////////////
1:       Object value = PartitionUtil.getDataBasedOnDataType(
1:           values.get(partitionIndex), partitionColumnDataType, timestampFormatter, dateFormatter);
1:       if (value instanceof String) {
1:         value = ByteUtil.toBytes((String)value);
1:       }
1:       result = comparator.compare(filterValue, value);
commit:6488bc0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.comparator.Comparator;
1: import org.apache.carbondata.core.util.comparator.SerializableComparator;
/////////////////////////////////////////////////////////////////////////
1:     SerializableComparator comparator =
1:         Comparator.getComparator(partitionColumnDataType);
1:     partitionMap.set(0);
/////////////////////////////////////////////////////////////////////////
1:               partitionMap.set(i + 1);
/////////////////////////////////////////////////////////////////////////
1:               partitionMap.set(i + 1);
/////////////////////////////////////////////////////////////////////////
1:               partitionMap.set(i + 1);
/////////////////////////////////////////////////////////////////////////
1:               partitionMap.set(i + 1);
/////////////////////////////////////////////////////////////////////////
1:     SerializableComparator comparator =
1:         Comparator.getComparator(partitionColumnDataType);
/////////////////////////////////////////////////////////////////////////
1:         partitionMap.set(0);
/////////////////////////////////////////////////////////////////////////
1:           partitionMap.set(partitionIndex + 2, partitioner.numPartitions());
1:           partitionMap.set(0);
1:             partitionMap.set(1, partitionIndex + 3);
1:             partitionMap.set(1, partitionIndex + 2);
1:           partitionMap.set(partitionIndex + 1, partitioner.numPartitions());
1:           partitionMap.set(0);
1:           partitionMap.set(1, partitionIndex + 2);
author:QiangCai
-------------------------------------------------------------------------------
commit:71934e9
/////////////////////////////////////////////////////////////////////////
1: import java.text.DateFormat;
/////////////////////////////////////////////////////////////////////////
1:       ListPartitioner partitioner, Object filterValue,  boolean isGreaterThan, boolean isEqualTo,
1:       DateFormat timestampFormatter, DateFormat dateFormatter) {
/////////////////////////////////////////////////////////////////////////
1:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:                 timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:                 timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:                 timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType,
1:                 timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:       RangePartitioner partitioner, Object filterValue, boolean isGreaterThan, boolean isEqualTo,
1:       DateFormat timestampFormatter, DateFormat dateFormatter) {
/////////////////////////////////////////////////////////////////////////
0:           values.get(partitionIndex), partitionColumnDataType, timestampFormatter, dateFormatter));
commit:cdde3dd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.filter.partition;
1: 
0: import java.math.BigDecimal;
1: import java.util.BitSet;
0: import java.util.Comparator;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1: import org.apache.carbondata.core.scan.partition.ListPartitioner;
1: import org.apache.carbondata.core.scan.partition.PartitionUtil;
1: import org.apache.carbondata.core.scan.partition.RangePartitioner;
0: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: public class PartitionFilterUtil {
1: 
1:   /**
0:    * create Comparator for range filter
0:    * @param dataType
1:    * @return
1:    */
0:   public static Comparator getComparatorByDataType(DataType dataType) {
0:     switch (dataType) {
0:       case INT:
0:         return new IntComparator();
0:       case SHORT:
0:         return new ShortComparator();
0:       case DOUBLE:
0:         return new DoubleComparator();
0:       case LONG:
0:       case DATE:
0:       case TIMESTAMP:
0:         return new LongComparator();
0:       case DECIMAL:
0:         return new BigDecimalComparator();
0:       default:
0:         return new ByteArrayComparator();
1:     }
1:   }
1: 
0:   static class ByteArrayComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       return ByteUtil.compare((byte[]) key1, (byte[]) key2);
1:     }
1:   }
1: 
0:   static class IntComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       return (int) key1 - (int) key2;
1:     }
1:   }
1: 
0:   static class ShortComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       return (short) key1 - (short) key2;
1:     }
1:   }
1: 
0:   static class DoubleComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       double result = (double) key1 - (double) key2;
0:       if (result < 0) {
0:         return -1;
0:       } else if (result > 0) {
0:         return 1;
1:       } else {
0:         return 0;
1:       }
1: 
1:     }
1:   }
1: 
0:   static class LongComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       long result = (long) key1 - (long) key2;
0:       if (result < 0) {
0:         return -1;
0:       } else if (result > 0) {
0:         return 1;
1:       } else {
0:         return 0;
1:       }
1:     }
1:   }
1: 
0:   static class BigDecimalComparator implements Comparator<Object> {
0:     @Override public int compare(Object key1, Object key2) {
0:       return ((BigDecimal) key1).compareTo((BigDecimal) key2);
1:     }
1:   }
1: 
1:   /**
1:    * get partition map of range filter on list partition table
1:    * @param partitionInfo
1:    * @param partitioner
1:    * @param filterValue
1:    * @param isGreaterThan
1:    * @param isEqualTo
1:    * @return
1:    */
1:   public static BitSet getPartitionMapForRangeFilter(PartitionInfo partitionInfo,
0:       ListPartitioner partitioner, Object filterValue,  boolean isGreaterThan, boolean isEqualTo) {
1: 
0:     List<List<String>> values = partitionInfo.getListInfo();
1:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1: 
0:     Comparator comparator =
0:         PartitionFilterUtil.getComparatorByDataType(partitionColumnDataType);
1: 
1:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1:     // add default partition
0:     partitionMap.set(partitioner.numPartitions() - 1);
1: 
0:     int partitions = values.size();
1:     if (isGreaterThan) {
1:       if (isEqualTo) {
1:         // GreaterThanEqualTo(>=)
1:         outer1:
1:         for (int i = 0; i < partitions; i++) {
0:           for (String value : values.get(i)) {
0:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType);
1:             if (comparator.compare(listValue, filterValue) >= 0) {
0:               partitionMap.set(i);
1:               continue outer1;
1:             }
1:           }
1:         }
1:       } else {
1:         // GreaterThan(>)
1:         outer2:
1:         for (int i = 0; i < partitions; i++) {
0:           for (String value : values.get(i)) {
0:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType);
1:             if (comparator.compare(listValue, filterValue) > 0) {
0:               partitionMap.set(i);
1:               continue outer2;
1:             }
1:           }
1:         }
1:       }
1:     } else {
1:       if (isEqualTo) {
1:         // LessThanEqualTo(<=)
1:         outer3:
1:         for (int i = 0; i < partitions; i++) {
0:           for (String value : values.get(i)) {
0:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType);
1:             if (comparator.compare(listValue, filterValue) <= 0) {
0:               partitionMap.set(i);
1:               continue outer3;
1:             }
1:           }
1:         }
1:       } else {
0:         // LessThanEqualTo(<)
1:         outer4:
1:         for (int i = 0; i < partitions; i++) {
0:           for (String value : values.get(i)) {
0:             Object listValue = PartitionUtil.getDataBasedOnDataType(value, partitionColumnDataType);
1:             if (comparator.compare(listValue, filterValue) < 0) {
0:               partitionMap.set(i);
1:               continue outer4;
1:             }
1:           }
1:         }
1:       }
1:     }
1: 
1:     return partitionMap;
1:   }
1: 
1:   /**
1:    * get partition map of range filter on range partition table
1:    * @param partitionInfo
1:    * @param partitioner
1:    * @param filterValue
1:    * @param isGreaterThan
1:    * @param isEqualTo
1:    * @return
1:    */
1:   public static BitSet getPartitionMapForRangeFilter(PartitionInfo partitionInfo,
0:       RangePartitioner partitioner, Object filterValue, boolean isGreaterThan, boolean isEqualTo) {
1: 
1:     List<String> values = partitionInfo.getRangeInfo();
1:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1: 
0:     Comparator comparator =
0:         PartitionFilterUtil.getComparatorByDataType(partitionColumnDataType);
1: 
1:     BitSet partitionMap = PartitionUtil.generateBitSetBySize(partitioner.numPartitions(), false);
1: 
1:     int numPartitions = values.size();
1:     int result = 0;
1:     // the partition index of filter value
1:     int partitionIndex = 0;
1:     // find the partition of filter value
1:     for (; partitionIndex < numPartitions; partitionIndex++) {
0:       result = comparator.compare(filterValue, PartitionUtil.getDataBasedOnDataType(
0:           values.get(partitionIndex), partitionColumnDataType));
1:       if (result <= 0) {
1:         break;
1:       }
1:     }
1:     if (partitionIndex == numPartitions) {
1:       // filter value is in default partition
1:       if (isGreaterThan) {
1:         // GreaterThan(>), GreaterThanEqualTo(>=)
0:         partitionMap.set(numPartitions);
1:       } else {
1:         // LessThan(<), LessThanEqualTo(<=)
1:         partitionMap.set(0, partitioner.numPartitions());
1:       }
1:     } else {
1:       // filter value is not in default partition
1:       if (result == 0) {
1:         // if result is 0, the filter value is a bound value of range partition.
1:         if (isGreaterThan) {
1:           // GreaterThan(>), GreaterThanEqualTo(>=)
0:           partitionMap.set(partitionIndex + 1, partitioner.numPartitions());
1:         } else {
1:           if (isEqualTo) {
1:             // LessThanEqualTo(<=)
0:             partitionMap.set(0, partitionIndex + 2);
1:           } else {
1:             // LessThan(<)
0:             partitionMap.set(0, partitionIndex + 1);
1:           }
1:         }
1:       } else {
1:         // the filter value is not a bound value of range partition
1:         if (isGreaterThan) {
1:           // GreaterThan(>), GreaterThanEqualTo(>=)
0:           partitionMap.set(partitionIndex, partitioner.numPartitions());
1:         } else {
1:           // LessThan(<), LessThanEqualTo(<=)
0:           partitionMap.set(0, partitionIndex + 1);
1:         }
1:       }
1:     }
1:     return partitionMap;
1:   }
1: 
1: }
============================================================================