1:531dcd2: /*
1:531dcd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531dcd2:  * contributor license agreements.  See the NOTICE file distributed with
1:531dcd2:  * this work for additional information regarding copyright ownership.
1:531dcd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531dcd2:  * (the "License"); you may not use this file except in compliance with
1:531dcd2:  * the License.  You may obtain a copy of the License at
1:531dcd2:  *
1:531dcd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531dcd2:  *
1:531dcd2:  * Unless required by applicable law or agreed to in writing, software
1:531dcd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531dcd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531dcd2:  * See the License for the specific language governing permissions and
1:531dcd2:  * limitations under the License.
2:531dcd2:  */
11:531dcd2: 
1:531dcd2: package org.apache.carbondata.presto.readers;
1:2ad621d: 
1:a4c2ef5: import org.apache.carbondata.core.metadata.datatype.DataType;
1:a4c2ef5: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1:531dcd2: 
1:531dcd2: import com.facebook.presto.spi.block.Block;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilder;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilderStatus;
1:531dcd2: import com.facebook.presto.spi.block.DictionaryBlock;
1:531dcd2: import com.facebook.presto.spi.block.SliceArrayBlock;
1:531dcd2: import com.facebook.presto.spi.type.Type;
1:a4c2ef5: import com.facebook.presto.spi.type.VarcharType;
1:531dcd2: 
1:531dcd2: import static io.airlift.slice.Slices.wrappedBuffer;
1:531dcd2: 
2:531dcd2: /**
1:531dcd2:  * This class reads the String data and convert it into Slice Block
1:531dcd2:  */
1:a4c2ef5: public class SliceStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:531dcd2: 
1:a4c2ef5:   protected int batchSize;
1:531dcd2: 
1:a4c2ef5:   protected Type type = VarcharType.VARCHAR;
1:a4c2ef5: 
1:a4c2ef5:   protected BlockBuilder builder;
1:a4c2ef5:   int[] values;
1:6add19a:   private SliceArrayBlock dictionarySliceArrayBlock;
1:531dcd2: 
1:a4c2ef5:   public SliceStreamReader(int batchSize, DataType dataType,
1:a4c2ef5:       SliceArrayBlock dictionarySliceArrayBlock) {
1:a4c2ef5:     super(batchSize, dataType);
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:     if (dictionarySliceArrayBlock == null) {
1:a4c2ef5:       this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:2ad621d:     } else {
1:a4c2ef5:       this.dictionarySliceArrayBlock = dictionarySliceArrayBlock;
1:a4c2ef5:       this.values = new int[batchSize];
1:2ad621d:     }
1:2ad621d:   }
1:2ad621d: 
1:a4c2ef5:   @Override public Block buildBlock() {
1:a4c2ef5:     if (dictionarySliceArrayBlock == null) {
1:a4c2ef5:       return builder.build();
1:a4c2ef5:     } else {
1:a4c2ef5:       return new DictionaryBlock(batchSize, dictionarySliceArrayBlock, values);
1:2ad621d:     }
1:2ad621d:   }
1:2ad621d: 
1:a4c2ef5:   @Override public void setBatchSize(int batchSize) {
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:   }
1:2ad621d: 
1:a4c2ef5:   @Override public void putInt(int rowId, int value) {
1:a4c2ef5:     values[rowId] = value;
1:a4c2ef5:   }
1:2ad621d: 
1:a4c2ef5:   @Override public void putBytes(int rowId, byte[] value) {
1:a4c2ef5:     type.writeSlice(builder, wrappedBuffer(value));
1:a4c2ef5:   }
1:2ad621d: 
1:a4c2ef5:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:a4c2ef5:     byte[] byteArr = new byte[length];
1:a4c2ef5:     System.arraycopy(value, offset, byteArr, 0, length);
1:a4c2ef5:     type.writeSlice(builder, wrappedBuffer(byteArr));
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putNull(int rowId) {
1:a4c2ef5:     if (dictionarySliceArrayBlock == null) {
1:a4c2ef5:       builder.appendNull();
1:a4c2ef5:     }
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void reset() {
1:a4c2ef5:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:a4c2ef5:   }
1:2ad621d: }
============================================================================
author:sv71294
-------------------------------------------------------------------------------
commit:a4c2ef5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
/////////////////////////////////////////////////////////////////////////
1: import com.facebook.presto.spi.type.VarcharType;
1: public class SliceStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:   protected int batchSize;
1:   protected Type type = VarcharType.VARCHAR;
1: 
1:   protected BlockBuilder builder;
1:   int[] values;
1:   public SliceStreamReader(int batchSize, DataType dataType,
1:       SliceArrayBlock dictionarySliceArrayBlock) {
1:     super(batchSize, dataType);
1:     this.batchSize = batchSize;
1:     if (dictionarySliceArrayBlock == null) {
1:       this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:       this.dictionarySliceArrayBlock = dictionarySliceArrayBlock;
1:       this.values = new int[batchSize];
1:   @Override public Block buildBlock() {
1:     if (dictionarySliceArrayBlock == null) {
1:       return builder.build();
1:     } else {
1:       return new DictionaryBlock(batchSize, dictionarySliceArrayBlock, values);
1:   @Override public void setBatchSize(int batchSize) {
1:     this.batchSize = batchSize;
1:   }
1:   @Override public void putInt(int rowId, int value) {
1:     values[rowId] = value;
1:   }
1:   @Override public void putBytes(int rowId, byte[] value) {
1:     type.writeSlice(builder, wrappedBuffer(value));
1:   }
1:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:     byte[] byteArr = new byte[length];
1:     System.arraycopy(value, offset, byteArr, 0, length);
1:     type.writeSlice(builder, wrappedBuffer(byteArr));
1:   }
1: 
1:   @Override public void putNull(int rowId) {
1:     if (dictionarySliceArrayBlock == null) {
1:       builder.appendNull();
1:     }
1:   }
1: 
1:   @Override public void reset() {
1:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
0:           if (columnVector.anyNullsSet()) {
/////////////////////////////////////////////////////////////////////////
0:       for (int i = 0; i < numberOfRows; i++) {
0:         type.writeSlice(builder, utf8Slice(streamData[i].toString()));
author:Bhavya
-------------------------------------------------------------------------------
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
/////////////////////////////////////////////////////////////////////////
0:           if(columnVector.anyNullsSet()) {
0:             handleNullInVector(type, numberOfRows, builder);
1:           } else {
0:             populateVector(type, numberOfRows, builder);
/////////////////////////////////////////////////////////////////////////
0:   private void handleNullInVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       if (columnVector.isNullAt(i)) {
0:         builder.appendNull();
0:       } else {
0:         type.writeSlice(builder, wrappedBuffer((byte[]) columnVector.getData(i)));
1:       }
1:     }
1:   }
1: 
0:   private void populateVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       type.writeSlice(builder, wrappedBuffer((byte[]) columnVector.getData(i)));
1:     }
1:   }
1: 
1: 
1: 
1: 
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
0:               values[i] = (Integer) columnVector.getData(i);
/////////////////////////////////////////////////////////////////////////
0:               type.writeSlice(builder, wrappedBuffer((byte[]) columnVector.getData(i)));
commit:531dcd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.readers;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
1: 
0: import org.apache.carbondata.core.cache.dictionary.Dictionary;
0: import org.apache.carbondata.core.cache.dictionary.DictionaryChunksWrapper;
1: 
1: import com.facebook.presto.spi.block.Block;
1: import com.facebook.presto.spi.block.BlockBuilder;
1: import com.facebook.presto.spi.block.BlockBuilderStatus;
1: import com.facebook.presto.spi.block.DictionaryBlock;
1: import com.facebook.presto.spi.block.SliceArrayBlock;
1: import com.facebook.presto.spi.type.Type;
0: import io.airlift.slice.Slice;
0: import io.airlift.slice.Slices;
1: 
0: import static io.airlift.slice.Slices.utf8Slice;
1: import static io.airlift.slice.Slices.wrappedBuffer;
1: 
1: /**
1:  * This class reads the String data and convert it into Slice Block
1:  */
0: public class SliceStreamReader extends AbstractStreamReader {
1: 
1: 
0:   private boolean isDictionary;
1: 
0:   private SliceArrayBlock dictionaryBlock;
1: 
0:   public SliceStreamReader() {}
1: 
0:   public SliceStreamReader(boolean isDictionary, SliceArrayBlock dictionaryBlock) {
0:     this.isDictionary = isDictionary;
0:     this.dictionaryBlock = dictionaryBlock;
0:   }
1: 
1:   /**
0:    * Function to create the Slice Block
0:    * @param type
0:    * @return
0:    * @throws IOException
1:    */
0:   public Block readBlock(Type type)
0:       throws IOException
0:   {
0:     int numberOfRows = 0;
0:     BlockBuilder builder = null;
0:     if(isVectorReader) {
0:       numberOfRows = batchSize;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (columnVector != null) {
0:         if(isDictionary) {
0:           int[] values = new int[numberOfRows];
0:           for (int i = 0; i < numberOfRows; i++) {
0:             if (!columnVector.isNullAt(i)) {
0:               values[i] = columnVector.getInt(i);
0:             }
0:           }
0:           Block block = new DictionaryBlock(batchSize, dictionaryBlock, values);
1: 
0:           return block;
0:         } else {
0:           for (int i = 0; i < numberOfRows; i++) {
0:             if (columnVector.isNullAt(i)) {
0:               builder.appendNull();
0:             } else {
0:               type.writeSlice(builder, wrappedBuffer(columnVector.getArray(i).toByteArray()));
0:             }
0:           }
0:         }
0:       }
0:     } else {
0:       numberOfRows = streamData.length;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (streamData != null) {
0:         for(int i = 0; i < numberOfRows ; i++ ){
0:           type.writeSlice(builder, utf8Slice(streamData[i].toString()));
0:         }
0:       }
0:     }
1: 
0:     return builder.build();
1: 
0:   }
1: 
1: 
0: }
author:anubhav100
-------------------------------------------------------------------------------
commit:6add19a
/////////////////////////////////////////////////////////////////////////
1:   private SliceArrayBlock dictionarySliceArrayBlock;
0:   public SliceStreamReader() {
0:   }
0:   public SliceStreamReader(boolean isDictionary, SliceArrayBlock dictionarySliceArrayBlock) {
0:     this.dictionarySliceArrayBlock = dictionarySliceArrayBlock;
0:    *
0:   public Block readBlock(Type type) throws IOException {
0:     int numberOfRows;
0:     BlockBuilder builder;
0:     if (isVectorReader) {
0:         if (isDictionary) {
0:           return new DictionaryBlock(batchSize, dictionarySliceArrayBlock, values);
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < numberOfRows; i++) {
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================