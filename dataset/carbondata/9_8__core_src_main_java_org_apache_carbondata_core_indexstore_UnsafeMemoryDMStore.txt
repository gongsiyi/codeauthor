1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
1:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
1:b681244:  */
1:b681244: package org.apache.carbondata.core.indexstore;
5:b681244: 
1:b681244: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1:b681244: import org.apache.carbondata.core.indexstore.row.UnsafeDataMapRow;
1:cc0e6f1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:b681244: import org.apache.carbondata.core.memory.MemoryBlock;
1:79feac9: import org.apache.carbondata.core.memory.MemoryException;
1:79feac9: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b681244: 
1:b681244: import static org.apache.carbondata.core.memory.CarbonUnsafe.BYTE_ARRAY_OFFSET;
1:500654e: import static org.apache.carbondata.core.memory.CarbonUnsafe.getUnsafe;
1:b681244: 
1:b681244: /**
1:b681244:  * Store the data map row @{@link DataMapRow} data to unsafe.
1:b681244:  */
1:531ecdf: public class UnsafeMemoryDMStore extends AbstractMemoryDMStore {
1:b681244: 
1:531ecdf:   private static final long serialVersionUID = -5344592407101055335L;
1:531ecdf: 
1:531ecdf:   private transient MemoryBlock memoryBlock;
1:b681244: 
1:b4dc866:   private static int capacity = 8 * 1024;
1:b681244: 
1:b681244:   private int allocatedSize;
1:b681244: 
1:b681244:   private int runningLength;
1:b681244: 
1:b681244:   private int[] pointers;
1:b681244: 
1:b681244:   private int rowCount;
1:b681244: 
1:f4a58c5:   public UnsafeMemoryDMStore() throws MemoryException {
1:b681244:     this.allocatedSize = capacity;
1:79feac9:     this.memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, allocatedSize);
1:b681244:     this.pointers = new int[1000];
3:b681244:   }
1:b681244: 
1:b681244:   /**
1:b681244:    * Check memory is sufficient or not, if not sufficient allocate more memory and copy old data to
1:b681244:    * new one.
1:b681244:    *
1:b681244:    * @param rowSize
1:b681244:    */
1:79feac9:   private void ensureSize(int rowSize) throws MemoryException {
1:b4dc866:     while (runningLength + rowSize >= allocatedSize) {
1:b4dc866:       increaseMemory();
1:b681244:     }
1:b681244:     if (this.pointers.length <= rowCount + 1) {
1:b681244:       int[] newPointer = new int[pointers.length + 1000];
1:b681244:       System.arraycopy(pointers, 0, newPointer, 0, pointers.length);
1:b681244:       this.pointers = newPointer;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:b4dc866:   private void increaseMemory() throws MemoryException {
1:b4dc866:     MemoryBlock allocate =
1:b4dc866:         UnsafeMemoryManager.allocateMemoryWithRetry(taskId, allocatedSize + capacity);
1:b4dc866:     getUnsafe().copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
1:b4dc866:         allocate.getBaseObject(), allocate.getBaseOffset(), runningLength);
1:b4dc866:     UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:b4dc866:     allocatedSize = allocatedSize + capacity;
1:b4dc866:     memoryBlock = allocate;
1:b4dc866:   }
1:b4dc866: 
1:b681244:   /**
1:b681244:    * Add the index row to unsafe.
1:b681244:    *
1:b681244:    * @param indexRow
1:b681244:    * @return
1:b681244:    */
1:f4a58c5:   public void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow) throws MemoryException {
1:b681244:     // First calculate the required memory to keep the row in unsafe
1:b681244:     int rowSize = indexRow.getTotalSizeInBytes();
1:b681244:     // Check whether allocated memory is sufficient or not.
1:b681244:     ensureSize(rowSize);
1:b681244:     int pointer = runningLength;
1:b681244: 
1:b681244:     for (int i = 0; i < schema.length; i++) {
1:b681244:       addToUnsafe(schema[i], indexRow, i);
1:b681244:     }
1:b681244:     pointers[rowCount++] = pointer;
1:b681244:   }
1:b681244: 
1:cc0e6f1:   private void addToUnsafe(CarbonRowSchema schema, DataMapRow row, int index) {
1:b681244:     switch (schema.getSchemaType()) {
1:b681244:       case FIXED:
1:956833e:         DataType dataType = schema.getDataType();
1:956833e:         if (dataType == DataTypes.BYTE) {
1:956833e:           getUnsafe()
1:956833e:               .putByte(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getByte(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.SHORT) {
1:956833e:           getUnsafe()
1:b681244:               .putShort(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getShort(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.INT) {
1:956833e:           getUnsafe()
1:956833e:               .putInt(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getInt(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.LONG) {
1:956833e:           getUnsafe()
1:956833e:               .putLong(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getLong(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.FLOAT) {
1:956833e:           getUnsafe()
1:b681244:               .putFloat(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getFloat(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.DOUBLE) {
1:956833e:           getUnsafe()
1:b681244:               .putDouble(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:b681244:                   row.getDouble(index));
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else if (dataType == DataTypes.BYTE_ARRAY) {
1:b681244:           byte[] data = row.getByteArray(index);
1:956833e:           getUnsafe().copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:b681244:               memoryBlock.getBaseOffset() + runningLength, data.length);
1:b681244:           runningLength += row.getSizeInBytes(index);
1:956833e:         } else {
1:956833e:           throw new UnsupportedOperationException(
1:956833e:               "unsupported data type for unsafe storage: " + schema.getDataType());
1:b681244:         }
8:b681244:         break;
1:dc53dee:       case VARIABLE_SHORT:
1:b681244:         byte[] data = row.getByteArray(index);
1:d504e06:         getUnsafe().putShort(memoryBlock.getBaseObject(),
1:d504e06:             memoryBlock.getBaseOffset() + runningLength, (short) data.length);
1:b681244:         runningLength += 2;
2:500654e:         getUnsafe().copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:b681244:             memoryBlock.getBaseOffset() + runningLength, data.length);
1:b681244:         runningLength += data.length;
1:b681244:         break;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         byte[] data2 = row.getByteArray(index);
1:dc53dee:         getUnsafe().putInt(memoryBlock.getBaseObject(),
1:dc53dee:             memoryBlock.getBaseOffset() + runningLength, data2.length);
1:dc53dee:         runningLength += 4;
1:dc53dee:         getUnsafe().copyMemory(data2, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:dc53dee:             memoryBlock.getBaseOffset() + runningLength, data2.length);
1:dc53dee:         runningLength += data2.length;
1:dc53dee:         break;
1:b681244:       case STRUCT:
1:cc0e6f1:         CarbonRowSchema[] childSchemas =
1:cc0e6f1:             ((CarbonRowSchema.StructCarbonRowSchema) schema).getChildSchemas();
1:b681244:         DataMapRow struct = row.getRow(index);
1:b681244:         for (int i = 0; i < childSchemas.length; i++) {
1:b681244:           addToUnsafe(childSchemas[i], struct, i);
1:b681244:         }
1:b681244:         break;
1:500654e:       default:
1:500654e:         throw new UnsupportedOperationException(
1:500654e:             "unsupported data type for unsafe storage: " + schema.getDataType());
1:b681244:     }
1:b681244:   }
1:b681244: 
1:f4a58c5:   public DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index) {
1:b681244:     assert (index < rowCount);
1:b681244:     return new UnsafeDataMapRow(schema, memoryBlock, pointers[index]);
1:b681244:   }
1:b681244: 
1:79feac9:   public void finishWriting() throws MemoryException {
1:b681244:     if (runningLength < allocatedSize) {
2:b681244:       MemoryBlock allocate =
1:79feac9:           UnsafeMemoryManager.allocateMemoryWithRetry(taskId, runningLength);
1:500654e:       getUnsafe().copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
2:b681244:           allocate.getBaseObject(), allocate.getBaseOffset(), runningLength);
1:79feac9:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
2:b681244:       memoryBlock = allocate;
1:b681244:     }
1:b681244:     // Compact pointers.
1:b681244:     if (rowCount < pointers.length) {
1:b681244:       int[] newPointer = new int[rowCount];
1:b681244:       System.arraycopy(pointers, 0, newPointer, 0, rowCount);
1:b681244:       this.pointers = newPointer;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:b681244:   public void freeMemory() {
1:b681244:     if (!isMemoryFreed) {
1:79feac9:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:b681244:       isMemoryFreed = true;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:b681244:   public int getMemoryUsed() {
1:b681244:     return runningLength;
1:b681244:   }
1:b681244: 
1:b681244:   public int getRowCount() {
1:b681244:     return rowCount;
1:531ecdf:   }
1:b681244: 
1:b681244: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
1:   public UnsafeMemoryDMStore() throws MemoryException {
/////////////////////////////////////////////////////////////////////////
1:   public void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow) throws MemoryException {
/////////////////////////////////////////////////////////////////////////
1:   public DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index) {
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_INT:
1:         byte[] data2 = row.getByteArray(index);
1:         getUnsafe().putInt(memoryBlock.getBaseObject(),
1:             memoryBlock.getBaseOffset() + runningLength, data2.length);
1:         runningLength += 4;
1:         getUnsafe().copyMemory(data2, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:             memoryBlock.getBaseOffset() + runningLength, data2.length);
1:         runningLength += data2.length;
1:         break;
commit:d504e06
/////////////////////////////////////////////////////////////////////////
1:         getUnsafe().putShort(memoryBlock.getBaseObject(),
1:             memoryBlock.getBaseOffset() + runningLength, (short) data.length);
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class UnsafeMemoryDMStore extends AbstractMemoryDMStore {
1:   private static final long serialVersionUID = -5344592407101055335L;
1: 
1:   private transient MemoryBlock memoryBlock;
/////////////////////////////////////////////////////////////////////////
0:     super(schema);
/////////////////////////////////////////////////////////////////////////
0:   public void addIndexRow(DataMapRow indexRow) throws MemoryException {
/////////////////////////////////////////////////////////////////////////
0:   public DataMapRow getDataMapRow(int index) {
/////////////////////////////////////////////////////////////////////////
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:b4dc866
/////////////////////////////////////////////////////////////////////////
1:   private static int capacity = 8 * 1024;
/////////////////////////////////////////////////////////////////////////
1:     while (runningLength + rowSize >= allocatedSize) {
1:       increaseMemory();
/////////////////////////////////////////////////////////////////////////
1:   private void increaseMemory() throws MemoryException {
1:     MemoryBlock allocate =
1:         UnsafeMemoryManager.allocateMemoryWithRetry(taskId, allocatedSize + capacity);
1:     getUnsafe().copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
1:         allocate.getBaseObject(), allocate.getBaseOffset(), runningLength);
1:     UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:     allocatedSize = allocatedSize + capacity;
1:     memoryBlock = allocate;
1:   }
1: 
commit:41b0074
/////////////////////////////////////////////////////////////////////////
0:   public UnsafeDataMapRow getUnsafeRow(int index) {
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore;
1: 
1: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1: import org.apache.carbondata.core.indexstore.row.UnsafeDataMapRow;
0: import org.apache.carbondata.core.indexstore.schema.DataMapSchema;
0: import org.apache.carbondata.core.memory.MemoryAllocator;
0: import org.apache.carbondata.core.memory.MemoryAllocatorFactory;
1: import org.apache.carbondata.core.memory.MemoryBlock;
1: 
1: import static org.apache.carbondata.core.memory.CarbonUnsafe.BYTE_ARRAY_OFFSET;
0: import static org.apache.carbondata.core.memory.CarbonUnsafe.unsafe;
1: 
1: /**
1:  * Store the data map row @{@link DataMapRow} data to unsafe.
1:  */
0: public class UnsafeMemoryDMStore {
1: 
0:   private MemoryBlock memoryBlock;
1: 
0:   private static int capacity = 8 * 1024 * 1024;
1: 
1:   private int allocatedSize;
1: 
1:   private int runningLength;
1: 
0:   private MemoryAllocator memoryAllocator;
1: 
0:   private boolean isMemoryFreed;
1: 
0:   private DataMapSchema[] schema;
1: 
1:   private int[] pointers;
1: 
1:   private int rowCount;
1: 
0:   public UnsafeMemoryDMStore(DataMapSchema[] schema) {
0:     this.schema = schema;
0:     this.memoryAllocator = MemoryAllocatorFactory.INSATANCE.getMemoryAllocator();
1:     this.allocatedSize = capacity;
0:     this.memoryBlock = memoryAllocator.allocate(allocatedSize);
1:     this.pointers = new int[1000];
1:   }
1: 
1:   /**
1:    * Check memory is sufficient or not, if not sufficient allocate more memory and copy old data to
1:    * new one.
1:    *
1:    * @param rowSize
1:    */
0:   private void ensureSize(int rowSize) {
0:     if (runningLength + rowSize >= allocatedSize) {
1:       MemoryBlock allocate =
0:           MemoryAllocatorFactory.INSATANCE.getMemoryAllocator().allocate(allocatedSize + capacity);
0:       unsafe.copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
1:           allocate.getBaseObject(), allocate.getBaseOffset(), runningLength);
0:       memoryAllocator.free(memoryBlock);
0:       allocatedSize = allocatedSize + capacity;
1:       memoryBlock = allocate;
1:     }
1:     if (this.pointers.length <= rowCount + 1) {
1:       int[] newPointer = new int[pointers.length + 1000];
1:       System.arraycopy(pointers, 0, newPointer, 0, pointers.length);
1:       this.pointers = newPointer;
1:     }
1:   }
1: 
1:   /**
1:    * Add the index row to unsafe.
1:    *
1:    * @param indexRow
1:    * @return
1:    */
0:   public void addIndexRowToUnsafe(DataMapRow indexRow) {
1:     // First calculate the required memory to keep the row in unsafe
1:     int rowSize = indexRow.getTotalSizeInBytes();
1:     // Check whether allocated memory is sufficient or not.
1:     ensureSize(rowSize);
1:     int pointer = runningLength;
1: 
1:     for (int i = 0; i < schema.length; i++) {
1:       addToUnsafe(schema[i], indexRow, i);
1:     }
1:     pointers[rowCount++] = pointer;
1:   }
1: 
0:   private void addToUnsafe(DataMapSchema schema, DataMapRow row, int index) {
1:     switch (schema.getSchemaType()) {
1:       case FIXED:
0:         switch (schema.getDataType()) {
0:           case BYTE:
0:             unsafe.putByte(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                 row.getByte(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case SHORT:
0:             unsafe
1:                 .putShort(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                     row.getShort(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case INT:
0:             unsafe.putInt(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                 row.getInt(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case LONG:
0:             unsafe.putLong(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                 row.getLong(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case FLOAT:
0:             unsafe
1:                 .putFloat(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                     row.getFloat(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case DOUBLE:
0:             unsafe
1:                 .putDouble(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
1:                     row.getDouble(index));
1:             runningLength += row.getSizeInBytes(index);
1:             break;
0:           case BYTE_ARRAY:
1:             byte[] data = row.getByteArray(index);
0:             unsafe.copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:                 memoryBlock.getBaseOffset() + runningLength, data.length);
1:             runningLength += row.getSizeInBytes(index);
1:             break;
1:         }
1:         break;
0:       case VARIABLE:
1:         byte[] data = row.getByteArray(index);
0:         unsafe.putShort(memoryBlock.getBaseOffset() + runningLength, (short) data.length);
1:         runningLength += 2;
0:         unsafe.copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:             memoryBlock.getBaseOffset() + runningLength, data.length);
1:         runningLength += data.length;
1:         break;
1:       case STRUCT:
0:         DataMapSchema[] childSchemas =
0:             ((DataMapSchema.StructDataMapSchema) schema).getChildSchemas();
1:         DataMapRow struct = row.getRow(index);
1:         for (int i = 0; i < childSchemas.length; i++) {
1:           addToUnsafe(childSchemas[i], struct, i);
1:         }
1:         break;
1:     }
1:   }
1: 
0:   public DataMapRow getUnsafeRow(int index) {
1:     assert (index < rowCount);
1:     return new UnsafeDataMapRow(schema, memoryBlock, pointers[index]);
1:   }
1: 
0:   public void finishWriting() {
1:     if (runningLength < allocatedSize) {
1:       MemoryBlock allocate =
0:           MemoryAllocatorFactory.INSATANCE.getMemoryAllocator().allocate(runningLength);
0:       unsafe.copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
1:           allocate.getBaseObject(), allocate.getBaseOffset(), runningLength);
0:       memoryAllocator.free(memoryBlock);
1:       memoryBlock = allocate;
1:     }
1:     // Compact pointers.
1:     if (rowCount < pointers.length) {
1:       int[] newPointer = new int[rowCount];
1:       System.arraycopy(pointers, 0, newPointer, 0, rowCount);
1:       this.pointers = newPointer;
1:     }
1:   }
1: 
1:   public void freeMemory() {
1:     if (!isMemoryFreed) {
0:       memoryAllocator.free(memoryBlock);
1:       isMemoryFreed = true;
1:     }
1:   }
1: 
1:   public int getMemoryUsed() {
1:     return runningLength;
1:   }
1: 
0:   public DataMapSchema[] getSchema() {
0:     return schema;
1:   }
1: 
1:   public int getRowCount() {
1:     return rowCount;
1:   }
1: 
1: }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
/////////////////////////////////////////////////////////////////////////
0:   private CarbonRowSchema[] schema;
/////////////////////////////////////////////////////////////////////////
0:   public UnsafeMemoryDMStore(CarbonRowSchema[] schema) throws MemoryException {
/////////////////////////////////////////////////////////////////////////
1:   private void addToUnsafe(CarbonRowSchema schema, DataMapRow row, int index) {
/////////////////////////////////////////////////////////////////////////
1:         CarbonRowSchema[] childSchemas =
1:             ((CarbonRowSchema.StructCarbonRowSchema) schema).getChildSchemas();
/////////////////////////////////////////////////////////////////////////
0:   public CarbonRowSchema[] getSchema() {
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:         DataType dataType = schema.getDataType();
1:         if (dataType == DataTypes.BYTE) {
1:           getUnsafe()
1:               .putByte(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getByte(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.SHORT) {
1:           getUnsafe()
0:               .putShort(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getShort(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.INT) {
1:           getUnsafe()
1:               .putInt(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getInt(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.LONG) {
1:           getUnsafe()
1:               .putLong(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getLong(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.FLOAT) {
1:           getUnsafe()
0:               .putFloat(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getFloat(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.DOUBLE) {
1:           getUnsafe()
0:               .putDouble(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                   row.getDouble(index));
0:           runningLength += row.getSizeInBytes(index);
1:         } else if (dataType == DataTypes.BYTE_ARRAY) {
0:           byte[] data = row.getByteArray(index);
1:           getUnsafe().copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
0:               memoryBlock.getBaseOffset() + runningLength, data.length);
0:           runningLength += row.getSizeInBytes(index);
1:         } else {
1:           throw new UnsupportedOperationException(
1:               "unsupported data type for unsafe storage: " + schema.getDataType());
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.memory.CarbonUnsafe.getUnsafe;
/////////////////////////////////////////////////////////////////////////
1:       getUnsafe().copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
/////////////////////////////////////////////////////////////////////////
0:             getUnsafe()
0:                 .putByte(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                     row.getByte(index));
0:             getUnsafe()
0:             getUnsafe()
0:                 .putInt(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                     row.getInt(index));
0:             getUnsafe()
0:                 .putLong(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset() + runningLength,
0:                     row.getLong(index));
0:             getUnsafe()
0:             getUnsafe()
1:             getUnsafe().copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
1:           default:
1:             throw new UnsupportedOperationException(
1:                 "unsupported data type for unsafe storage: " + schema.getDataType());
0:         getUnsafe().putShort(memoryBlock.getBaseOffset() + runningLength, (short) data.length);
1:         getUnsafe().copyMemory(data, BYTE_ARRAY_OFFSET, memoryBlock.getBaseObject(),
/////////////////////////////////////////////////////////////////////////
0:       default:
0:         throw new UnsupportedOperationException(
0:             "unsupported data type for unsafe storage: " + schema.getDataType());
/////////////////////////////////////////////////////////////////////////
0:       getUnsafe().copyMemory(memoryBlock.getBaseObject(), memoryBlock.getBaseOffset(),
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:2c4e6c4
/////////////////////////////////////////////////////////////////////////
0:   private final long taskId = ThreadLocalTaskInfo.getCarbonTaskInfo().getTaskId();
author:Raghunandan S
-------------------------------------------------------------------------------
commit:79feac9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
0: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private final long taskId = null != ThreadLocalTaskInfo.getCarbonTaskInfo() ?
0:       ThreadLocalTaskInfo.getCarbonTaskInfo().getTaskId() : System.nanoTime();
0: 
0:   public UnsafeMemoryDMStore(DataMapSchema[] schema) throws MemoryException {
1:     this.memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, allocatedSize);
/////////////////////////////////////////////////////////////////////////
1:   private void ensureSize(int rowSize) throws MemoryException {
0:           UnsafeMemoryManager.allocateMemoryWithRetry(taskId, allocatedSize + capacity);
1:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
/////////////////////////////////////////////////////////////////////////
0:   public void addIndexRowToUnsafe(DataMapRow indexRow) throws MemoryException {
/////////////////////////////////////////////////////////////////////////
1:   public void finishWriting() throws MemoryException {
1:           UnsafeMemoryManager.allocateMemoryWithRetry(taskId, runningLength);
1:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
/////////////////////////////////////////////////////////////////////////
0:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
============================================================================