1:d35fbaf: /*
1:d35fbaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d35fbaf:  * contributor license agreements.  See the NOTICE file distributed with
1:d35fbaf:  * this work for additional information regarding copyright ownership.
1:d35fbaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d35fbaf:  * (the "License"); you may not use this file except in compliance with
1:d35fbaf:  * the License.  You may obtain a copy of the License at
1:d35fbaf:  *
1:d35fbaf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d35fbaf:  *
1:d35fbaf:  * Unless required by applicable law or agreed to in writing, software
1:d35fbaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d35fbaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d35fbaf:  * See the License for the specific language governing permissions and
1:d35fbaf:  * limitations under the License.
1:d35fbaf:  */
1:d35fbaf: package org.apache.carbondata.core.datamap.dev.fgdatamap;
1:d35fbaf: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceStability;
1:fc2a7eb: import org.apache.carbondata.core.datamap.DataMapLevel;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:d35fbaf: 
1:d35fbaf: /**
1:fc2a7eb:  *  Factory for {@link FineGrainDataMap}
1:fc2a7eb:  *
1:d35fbaf:  *  1. Any filter query which hits the table with datamap will call prune method of FGdatamap.
1:d35fbaf:  *  2. The prune method of FGDatamap return list FineGrainBlocklet , these blocklets contain the
1:d35fbaf:  *     information of block, blocklet, page and rowids information as well.
1:d35fbaf:  *  3. The pruned blocklets are internally wriitten to file and returns only the block ,
1:d35fbaf:  *    blocklet and filepath information as part of Splits.
1:d35fbaf:  *  4. Based on the splits scanrdd schedule the tasks.
1:d35fbaf:  *  5. In filterscanner we check the datamapwriterpath from split and reNoteads the
1:d35fbaf:  *     bitset if exists. And pass this bitset as input to it.
1:d35fbaf:  */
1:fc2a7eb: @InterfaceAudience.Developer("DataMap")
1:fc2a7eb: @InterfaceStability.Evolving
1:9db662a: public abstract class FineGrainDataMapFactory extends DataMapFactory<FineGrainDataMap> {
1:d35fbaf: 
1:9db662a:   public FineGrainDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:9db662a:     super(carbonTable, dataMapSchema);
1:9db662a:   }
1:9db662a: 
1:9db662a:   @Override
1:9db662a:   public DataMapLevel getDataMapLevel() {
1:fc2a7eb:     return DataMapLevel.FG;
1:d35fbaf:   }
1:d35fbaf: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
1: public abstract class FineGrainDataMapFactory extends DataMapFactory<FineGrainDataMap> {
1:   public FineGrainDataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:     super(carbonTable, dataMapSchema);
1:   }
1: 
1:   @Override
1:   public DataMapLevel getDataMapLevel() {
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.datamap.DataMapLevel;
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:  *  Factory for {@link FineGrainDataMap}
1:  *
/////////////////////////////////////////////////////////////////////////
1: @InterfaceAudience.Developer("DataMap")
1: @InterfaceStability.Evolving
0: public abstract class FineGrainDataMapFactory
0:     implements DataMapFactory<FineGrainDataMap> {
0:   @Override public DataMapLevel getDataMapType() {
1:     return DataMapLevel.FG;
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.dev.IndexDataMapFactory;
/////////////////////////////////////////////////////////////////////////
0: public abstract class AbstractFineGrainIndexDataMapFactory
0:     implements IndexDataMapFactory<AbstractFineGrainIndexDataMap> {
author:ravipesala
-------------------------------------------------------------------------------
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev.fgdatamap;
1: 
0: import org.apache.carbondata.core.datamap.DataMapType;
0: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1: 
1: /**
1:  *  1. Any filter query which hits the table with datamap will call prune method of FGdatamap.
1:  *  2. The prune method of FGDatamap return list FineGrainBlocklet , these blocklets contain the
1:  *     information of block, blocklet, page and rowids information as well.
1:  *  3. The pruned blocklets are internally wriitten to file and returns only the block ,
1:  *    blocklet and filepath information as part of Splits.
1:  *  4. Based on the splits scanrdd schedule the tasks.
1:  *  5. In filterscanner we check the datamapwriterpath from split and reNoteads the
1:  *     bitset if exists. And pass this bitset as input to it.
1:  */
0: public abstract class AbstractFineGrainDataMapFactory
0:     implements DataMapFactory<AbstractFineGrainDataMap> {
1: 
0:   @Override public DataMapType getDataMapType() {
0:     return DataMapType.FG;
1:   }
1: }
============================================================================