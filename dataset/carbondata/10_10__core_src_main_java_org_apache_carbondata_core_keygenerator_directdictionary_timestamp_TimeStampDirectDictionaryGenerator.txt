1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.directdictionary.timestamp;
1:cd6a4ff: 
1:cd6a4ff: import java.text.ParseException;
1:cd6a4ff: import java.text.SimpleDateFormat;
1:cd6a4ff: import java.util.Date;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogServiceFactory;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: 
1:956833e: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_DAY;
1:956833e: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_HOUR;
1:956833e: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_MIN;
1:956833e: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_SEC;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * The class provides the method to generate dictionary key and getting the actual value from
1:cd6a4ff:  * the dictionaryKey for direct dictionary column for TIMESTAMP type.
1:cd6a4ff:  */
1:cd6a4ff: public class TimeStampDirectDictionaryGenerator implements DirectDictionaryGenerator {
1:cd6a4ff: 
1:72d076a:   private ThreadLocal<SimpleDateFormat> simpleDateFormatLocal = new ThreadLocal<>();
1:cd6a4ff: 
1:72d076a:   private String dateFormat;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The value of 1 unit of the SECOND, MINUTE, HOUR, or DAY in millis.
1:cd6a4ff:    */
1:cd6a4ff:   public static final long granularityFactor;
1:cd6a4ff:   /**
1:cd6a4ff:    * The date timestamp to be considered as start date for calculating the timestamp
1:cd6a4ff:    * java counts the number of milliseconds from  start of "January 1, 1970", this property is
1:cd6a4ff:    * customized the start of position. for example "January 1, 2000"
1:cd6a4ff:    */
1:cd6a4ff:   public static final long cutOffTimeStamp;
1:cd6a4ff:   /**
1:cd6a4ff:    * Logger instance
1:cd6a4ff:    */
1:cd6a4ff:   private static final LogService LOGGER =
1:cd6a4ff:       LogServiceFactory.getLogService(TimeStampDirectDictionaryGenerator.class.getName());
1:cd6a4ff: 
1:086b06d:   /*
1:cd6a4ff:    * initialization block for granularityFactor and cutOffTimeStamp
1:cd6a4ff:    */
1:cd6a4ff:   static {
1:cd6a4ff:     String cutOffTimeStampString = CarbonProperties.getInstance()
1:cd6a4ff:         .getProperty(TimeStampGranularityConstants.CARBON_CUTOFF_TIMESTAMP);
1:cd6a4ff:     String timeGranularity = CarbonProperties.getInstance()
1:cd6a4ff:         .getProperty(TimeStampGranularityConstants.CARBON_TIME_GRANULARITY, TIME_GRAN_SEC);
1:cd6a4ff:     long granularityFactorLocal = 1000;
1:cd6a4ff:     switch (timeGranularity) {
1:cd6a4ff:       case TIME_GRAN_SEC:
1:cd6a4ff:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_SECONDS.getValue();
1:cd6a4ff:         break;
1:cd6a4ff:       case TIME_GRAN_MIN:
1:cd6a4ff:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_MINUTE.getValue();
1:cd6a4ff:         break;
1:cd6a4ff:       case TIME_GRAN_HOUR:
1:cd6a4ff:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_HOUR.getValue();
1:cd6a4ff:         break;
1:cd6a4ff:       case TIME_GRAN_DAY:
1:cd6a4ff:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_DAY.getValue();
1:cd6a4ff:         break;
1:cd6a4ff:       default:
1:cd6a4ff:         granularityFactorLocal = 1000;
1:cd6a4ff:     }
1:cd6a4ff:     long cutOffTimeStampLocal;
1:cd6a4ff:     if (null == cutOffTimeStampString) {
1:2176a2f:       cutOffTimeStampLocal = 0;
3:cd6a4ff:     } else {
1:cd6a4ff:       try {
2:cd6a4ff:         SimpleDateFormat timeParser = new SimpleDateFormat(CarbonProperties.getInstance()
2:cd6a4ff:             .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
2:cd6a4ff:                 CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
3:cd6a4ff:         timeParser.setLenient(false);
1:cd6a4ff:         Date dateToStr = timeParser.parse(cutOffTimeStampString);
1:cd6a4ff:         cutOffTimeStampLocal = dateToStr.getTime();
1:cd6a4ff:       } catch (ParseException e) {
1:cd6a4ff:         LOGGER.warn("Cannot convert" + cutOffTimeStampString
1:cd6a4ff:             + " to Time/Long type value. Value considered for cutOffTimeStamp is -1." + e
3:cd6a4ff:             .getMessage());
1:2176a2f:         cutOffTimeStampLocal = 0;
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     granularityFactor = granularityFactorLocal;
1:cd6a4ff:     cutOffTimeStamp = cutOffTimeStampLocal;
1:cd6a4ff:   }
1:cd6a4ff: 
1:72d076a:   public TimeStampDirectDictionaryGenerator(String dateFormat) {
1:72d076a:     this.dateFormat = dateFormat;
1:72d076a:     initialize();
1:cd6a4ff:   }
1:cd6a4ff: 
1:256dbed:   public TimeStampDirectDictionaryGenerator() {
1:256dbed:     this(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:256dbed:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:cd6a4ff:   }
1:72d076a: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method take member String as input and converts
1:cd6a4ff:    * and returns the dictionary key
1:cd6a4ff:    *
1:cd6a4ff:    * @param memberStr date format string
1:cd6a4ff:    * @return dictionary value
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int generateDirectSurrogateKey(String memberStr) {
1:cd6a4ff:     if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:cd6a4ff:         .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:cd6a4ff:     }
1:72d076a:     return getDirectSurrogateForMember(memberStr);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method take member String as input and converts
1:cd6a4ff:    * and returns the dictionary key
1:cd6a4ff:    *
1:cd6a4ff:    * @param memberStr date format string
1:cd6a4ff:    * @return dictionary value
1:cd6a4ff:    */
1:cd6a4ff:   public int generateDirectSurrogateKey(String memberStr, String format) {
1:cd6a4ff:     if (null == format) {
1:cd6a4ff:       return generateDirectSurrogateKeyForNonTimestampType(memberStr);
1:cd6a4ff:     } else {
1:cd6a4ff:       if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:cd6a4ff:           .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:cd7c210:         return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:cd6a4ff:       }
1:72d076a:       return getDirectSurrogateForMember(memberStr);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:72d076a:   private int getDirectSurrogateForMember(String memberStr) {
1:cd6a4ff:     Date dateToStr = null;
1:cd6a4ff:     try {
1:496cde4:       SimpleDateFormat simpleDateFormat = simpleDateFormatLocal.get();
1:496cde4:       if (null == simpleDateFormat) {
1:496cde4:         initialize();
1:496cde4:         simpleDateFormat = simpleDateFormatLocal.get();
1:496cde4:       }
1:496cde4:       dateToStr = simpleDateFormat.parse(memberStr);
1:cd6a4ff:     } catch (ParseException e) {
1:4a79a86:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug("Cannot convert value to Time/Long type value. Value considered as null." + e
1:4a79a86:             .getMessage());
1:4a79a86:       }
1:cd6a4ff:       dateToStr = null;
1:cd6a4ff:     }
1:cd6a4ff:     //adding +2 to reserve the first cuttOffDiff value for null or empty date
1:cd6a4ff:     if (null == dateToStr) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:cd6a4ff:     } else {
1:cd6a4ff:       return generateKey(dateToStr.getTime());
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method take dictionary key as input and returns the
1:cd6a4ff:    *
1:cd6a4ff:    * @param key
1:cd6a4ff:    * @return member value/actual value Date
1:cd6a4ff:    */
1:cd6a4ff:   @Override public Object getValueFromSurrogate(int key) {
1:cd7c210:     if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
1:cd6a4ff:       return null;
1:cd6a4ff:     }
1:2176a2f:     long timeStamp = ((key - 2) * granularityFactor + cutOffTimeStamp);
1:cd6a4ff:     return timeStamp * 1000L;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int generateDirectSurrogateKeyForNonTimestampType(String memberStr) {
1:cd6a4ff:     long timeValue = -1;
1:cd6a4ff:     try {
1:500654e:       timeValue = Long.parseLong(memberStr) / 1000;
1:cd6a4ff:     } catch (NumberFormatException e) {
1:4a79a86:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug(
1:4a79a86:             "Cannot convert " + memberStr + " Long type value. Value considered as null." + e
1:4a79a86:                 .getMessage());
1:4a79a86:       }
1:cd6a4ff:     }
1:cd6a4ff:     if (timeValue == -1) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:cd6a4ff:     } else {
1:cd6a4ff:       return generateKey(timeValue);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:2f23486:   public int generateKey(long timeValue) {
1:8791eab:     long time = (timeValue - cutOffTimeStamp) / granularityFactor;
1:8791eab:     int keyValue = -1;
1:8791eab:     if (time >= (long) Integer.MIN_VALUE && time <= (long) Integer.MAX_VALUE) {
1:8791eab:       keyValue = (int) time;
1:2176a2f:     }
1:cd7c210:     return keyValue < 0 ? CarbonCommonConstants.DIRECT_DICT_VALUE_NULL : keyValue + 2;
1:cd6a4ff:   }
1:cd6a4ff: 
1:256dbed:   public void initialize() {
1:72d076a:     if (simpleDateFormatLocal.get() == null) {
1:72d076a:       simpleDateFormatLocal.set(new SimpleDateFormat(dateFormat));
1:72d076a:       simpleDateFormatLocal.get().setLenient(false);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:72d076a: 
1:376d69f:   @Override public DataType getReturnType() {
1:956833e:     return DataTypes.LONG;
1:376d69f:   }
1:376d69f: 
2:72d076a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:         return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:     if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:     return keyValue < 0 ? CarbonCommonConstants.DIRECT_DICT_VALUE_NULL : keyValue + 2;
author:kunal642
-------------------------------------------------------------------------------
commit:2f23486
/////////////////////////////////////////////////////////////////////////
1:   public int generateKey(long timeValue) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_DAY;
1: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_HOUR;
1: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_MIN;
1: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_SEC;
/////////////////////////////////////////////////////////////////////////
1:     return DataTypes.LONG;
author:dhatchayani
-------------------------------------------------------------------------------
commit:8791eab
/////////////////////////////////////////////////////////////////////////
1:     long time = (timeValue - cutOffTimeStamp) / granularityFactor;
1:     int keyValue = -1;
1:     if (time >= (long) Integer.MIN_VALUE && time <= (long) Integer.MAX_VALUE) {
1:       keyValue = (int) time;
0:     return keyValue < 0 ? 1 : keyValue + 2;
commit:2176a2f
/////////////////////////////////////////////////////////////////////////
1:       cutOffTimeStampLocal = 0;
/////////////////////////////////////////////////////////////////////////
1:         cutOffTimeStampLocal = 0;
/////////////////////////////////////////////////////////////////////////
1:     long timeStamp = ((key - 2) * granularityFactor + cutOffTimeStamp);
/////////////////////////////////////////////////////////////////////////
0:     if (timeValue >= 0) {
0:       long time = (timeValue - cutOffTimeStamp) / granularityFactor;
0:       int keyValue = -1;
0:       if (time <= (long) Integer.MAX_VALUE) {
0:         keyValue = (int) time;
1:       }
0:     return 1;
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:       timeValue = Long.parseLong(memberStr) / 1000;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Cannot convert value to Time/Long type value. Value considered as null." + e
1:             .getMessage());
1:       }
/////////////////////////////////////////////////////////////////////////
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug(
1:             "Cannot convert " + memberStr + " Long type value. Value considered as null." + e
1:                 .getMessage());
1:       }
author:QiangCai
-------------------------------------------------------------------------------
commit:086b06d
/////////////////////////////////////////////////////////////////////////
1:   /*
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:   public TimeStampDirectDictionaryGenerator() {
1:     this(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:         CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
/////////////////////////////////////////////////////////////////////////
1:   public void initialize() {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp
0:     .TimeStampGranularityConstants.TIME_GRAN_DAY;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp
0:     .TimeStampGranularityConstants.TIME_GRAN_HOUR;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp
0:     .TimeStampGranularityConstants.TIME_GRAN_MIN;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp
0:     .TimeStampGranularityConstants.TIME_GRAN_SEC;
author:ravipesala
-------------------------------------------------------------------------------
commit:376d69f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
1:   @Override public DataType getReturnType() {
0:     return DataType.LONG;
1:   }
1: 
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1:       SimpleDateFormat simpleDateFormat = simpleDateFormatLocal.get();
1:       if (null == simpleDateFormat) {
1:         initialize();
1:         simpleDateFormat = simpleDateFormatLocal.get();
1:       }
1:       dateToStr = simpleDateFormat.parse(memberStr);
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.keygenerator.directdictionary.timestamp;
1: 
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_DAY;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_HOUR;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_MIN;
0: import static org.apache.carbondata.core.keygenerator.directdictionary.timestamp.TimeStampGranularityConstants.TIME_GRAN_SEC;
1: 
1: /**
1:  * The class provides the method to generate dictionary key and getting the actual value from
1:  * the dictionaryKey for direct dictionary column for TIMESTAMP type.
1:  */
1: public class TimeStampDirectDictionaryGenerator implements DirectDictionaryGenerator {
1: 
0:   private TimeStampDirectDictionaryGenerator() {
1: 
1:   }
1: 
0:   public static TimeStampDirectDictionaryGenerator instance =
0:       new TimeStampDirectDictionaryGenerator();
1: 
1:   /**
1:    * The value of 1 unit of the SECOND, MINUTE, HOUR, or DAY in millis.
1:    */
1:   public static final long granularityFactor;
1:   /**
1:    * The date timestamp to be considered as start date for calculating the timestamp
1:    * java counts the number of milliseconds from  start of "January 1, 1970", this property is
1:    * customized the start of position. for example "January 1, 2000"
1:    */
1:   public static final long cutOffTimeStamp;
1:   /**
1:    * Logger instance
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(TimeStampDirectDictionaryGenerator.class.getName());
1: 
1:   /**
1:    * initialization block for granularityFactor and cutOffTimeStamp
1:    */
1:   static {
1:     String cutOffTimeStampString = CarbonProperties.getInstance()
1:         .getProperty(TimeStampGranularityConstants.CARBON_CUTOFF_TIMESTAMP);
1:     String timeGranularity = CarbonProperties.getInstance()
1:         .getProperty(TimeStampGranularityConstants.CARBON_TIME_GRANULARITY, TIME_GRAN_SEC);
1:     long granularityFactorLocal = 1000;
1:     switch (timeGranularity) {
1:       case TIME_GRAN_SEC:
1:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_SECONDS.getValue();
1:         break;
1:       case TIME_GRAN_MIN:
1:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_MINUTE.getValue();
1:         break;
1:       case TIME_GRAN_HOUR:
1:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_HOUR.getValue();
1:         break;
1:       case TIME_GRAN_DAY:
1:         granularityFactorLocal = TimeStampGranularityTypeValue.MILLIS_DAY.getValue();
1:         break;
1:       default:
1:         granularityFactorLocal = 1000;
1:     }
1:     long cutOffTimeStampLocal;
1:     if (null == cutOffTimeStampString) {
0:       cutOffTimeStampLocal = -1;
1:     } else {
1:       try {
1:         SimpleDateFormat timeParser = new SimpleDateFormat(CarbonProperties.getInstance()
1:             .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:                 CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:         timeParser.setLenient(false);
1:         Date dateToStr = timeParser.parse(cutOffTimeStampString);
1:         cutOffTimeStampLocal = dateToStr.getTime();
1:       } catch (ParseException e) {
1:         LOGGER.warn("Cannot convert" + cutOffTimeStampString
1:             + " to Time/Long type value. Value considered for cutOffTimeStamp is -1." + e
1:             .getMessage());
0:         cutOffTimeStampLocal = -1;
1:       }
1:     }
1:     granularityFactor = granularityFactorLocal;
1:     cutOffTimeStamp = cutOffTimeStampLocal;
1:   }
1: 
1:   /**
1:    * The method take member String as input and converts
1:    * and returns the dictionary key
1:    *
1:    * @param memberStr date format string
1:    * @return dictionary value
1:    */
1:   @Override public int generateDirectSurrogateKey(String memberStr) {
1:     SimpleDateFormat timeParser = new SimpleDateFormat(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:             CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:     timeParser.setLenient(false);
1:     if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:         .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
0:       return 1;
1:     }
0:     return getDirectSurrogateForMember(memberStr, timeParser);
1:   }
1: 
1:   /**
1:    * The method take member String as input and converts
1:    * and returns the dictionary key
1:    *
1:    * @param memberStr date format string
1:    * @return dictionary value
1:    */
1:   public int generateDirectSurrogateKey(String memberStr, String format) {
1:     if (null == format) {
1:       return generateDirectSurrogateKeyForNonTimestampType(memberStr);
1:     } else {
0:       SimpleDateFormat timeParser = new SimpleDateFormat(format);
1:       timeParser.setLenient(false);
1:       if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:           .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
0:         return 1;
1:       }
0:       return getDirectSurrogateForMember(memberStr, timeParser);
1:     }
1:   }
1: 
0:   private int getDirectSurrogateForMember(String memberStr, SimpleDateFormat timeParser) {
1:     Date dateToStr = null;
1:     try {
0:       dateToStr = timeParser.parse(memberStr);
1:     } catch (ParseException e) {
0:       LOGGER.debug(
0:           "Cannot convert " + memberStr + " to Time/Long type value. Value considered as null." + e
1:               .getMessage());
1:       dateToStr = null;
1:     }
1:     //adding +2 to reserve the first cuttOffDiff value for null or empty date
1:     if (null == dateToStr) {
0:       return 1;
1:     } else {
1:       return generateKey(dateToStr.getTime());
1:     }
1:   }
1: 
1:   /**
1:    * The method take dictionary key as input and returns the
1:    *
1:    * @param key
1:    * @return member value/actual value Date
1:    */
1:   @Override public Object getValueFromSurrogate(int key) {
0:     if (key == 1) {
1:       return null;
1:     }
0:     long timeStamp = 0;
0:     if (cutOffTimeStamp >= 0) {
0:       timeStamp = ((key - 2) * granularityFactor + cutOffTimeStamp);
1:     } else {
0:       timeStamp = (key - 2) * granularityFactor;
1:     }
1:     return timeStamp * 1000L;
1:   }
1: 
1:   private int generateDirectSurrogateKeyForNonTimestampType(String memberStr) {
1:     long timeValue = -1;
1:     try {
0:       timeValue = Long.valueOf(memberStr) / 1000;
1:     } catch (NumberFormatException e) {
0:       LOGGER.debug(
0:           "Cannot convert " + memberStr + " Long type value. Value considered as null." + e
1:               .getMessage());
1:     }
1:     if (timeValue == -1) {
0:       return 1;
1:     } else {
1:       return generateKey(timeValue);
1:     }
1:   }
1: 
0:   private int generateKey(long timeValue) {
0:     if (cutOffTimeStamp >= 0) {
0:       int keyValue = (int) ((timeValue - cutOffTimeStamp) / granularityFactor);
0:       return keyValue < 0 ? 1 : keyValue + 2;
1:     } else {
0:       int keyValue = (int) (timeValue / granularityFactor);
0:       return keyValue < 0 ? 1 : keyValue + 2;
1:     }
1:   }
1: 
1: }
author:X-Lion
-------------------------------------------------------------------------------
commit:72d076a
/////////////////////////////////////////////////////////////////////////
1:   private ThreadLocal<SimpleDateFormat> simpleDateFormatLocal = new ThreadLocal<>();
1:   private String dateFormat;
/////////////////////////////////////////////////////////////////////////
1:   public TimeStampDirectDictionaryGenerator(String dateFormat) {
1:     this.dateFormat = dateFormat;
1:     initialize();
1:   }
1: 
0:   public TimeStampDirectDictionaryGenerator( ) {
0:     this(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
0:             CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     return getDirectSurrogateForMember(memberStr);
/////////////////////////////////////////////////////////////////////////
1:       return getDirectSurrogateForMember(memberStr);
1:   private int getDirectSurrogateForMember(String memberStr) {
0:       dateToStr = simpleDateFormatLocal.get().parse(memberStr);
/////////////////////////////////////////////////////////////////////////
0:   public void initialize(){
1:     if (simpleDateFormatLocal.get() == null) {
1:       simpleDateFormatLocal.set(new SimpleDateFormat(dateFormat));
1:       simpleDateFormatLocal.get().setLenient(false);
0:     }
0:   }
0: 
============================================================================