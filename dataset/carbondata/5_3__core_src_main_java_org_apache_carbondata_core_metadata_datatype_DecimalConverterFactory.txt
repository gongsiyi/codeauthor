1:9e064ee: /*
1:9e064ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e064ee:  * contributor license agreements.  See the NOTICE file distributed with
1:9e064ee:  * this work for additional information regarding copyright ownership.
1:9e064ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e064ee:  * (the "License"); you may not use this file except in compliance with
1:9e064ee:  * the License.  You may obtain a copy of the License at
1:9e064ee:  *
1:9e064ee:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9e064ee:  *
1:9e064ee:  * Unless required by applicable law or agreed to in writing, software
1:9e064ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e064ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e064ee:  * See the License for the specific language governing permissions and
1:9e064ee:  * limitations under the License.
1:9e064ee:  */
1:9e064ee: package org.apache.carbondata.core.metadata.datatype;
12:9e064ee: 
1:9e064ee: import java.math.BigDecimal;
1:9e064ee: import java.math.BigInteger;
1:9e064ee: import java.util.Arrays;
1:9e064ee: 
1:9e064ee: import org.apache.carbondata.core.util.DataTypeUtil;
1:9e064ee: 
1:9e064ee: /**
1:9e064ee:  * Decimal converter to keep the data compact.
1:9e064ee:  */
1:9e064ee: public final class DecimalConverterFactory {
1:9e064ee: 
1:2b66476:   public static final DecimalConverterFactory INSTANCE = new DecimalConverterFactory();
1:9e064ee: 
1:9e064ee:   private int[] minBytesForPrecision = minBytesForPrecision();
1:9e064ee: 
1:9e064ee:   private DecimalConverterFactory() {
1:9e064ee: 
7:9e064ee:   }
1:9e064ee: 
1:9e064ee:   private int computeMinBytesForPrecision(int precision) {
1:9e064ee:     int numBytes = 1;
1:9e064ee:     while (Math.pow(2.0, 8 * numBytes - 1) < Math.pow(10.0, precision)) {
1:9e064ee:       numBytes += 1;
1:9e064ee:     }
1:9e064ee:     return numBytes;
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   private int[] minBytesForPrecision() {
1:9e064ee:     int[] data = new int[39];
1:9e064ee:     for (int i = 0; i < data.length; i++) {
1:9e064ee:       data[i] = computeMinBytesForPrecision(i);
1:9e064ee:     }
1:9e064ee:     return data;
1:9e064ee:   }
1:9e064ee: 
1:6f20437:   public enum DecimalConverterType {
1:6f20437:     DECIMAL_LV(-1), DECIMAL_INT(4), DECIMAL_LONG(8), DECIMAL_UNSCALED(-1);
1:6f20437: 
1:6f20437:     private int sizeInBytes;
1:6f20437: 
1:6f20437:     DecimalConverterType(int sizeInBytes) {
1:6f20437:       this.sizeInBytes = sizeInBytes;
1:6f20437:     }
1:6f20437: 
1:6f20437:     public int getSizeInBytes() {
1:6f20437:       return sizeInBytes;
1:6f20437:     }
1:6f20437: 
1:6f20437:   }
1:6f20437: 
1:9e064ee:   public interface DecimalConverter {
1:9e064ee: 
1:6f20437:     Object convert(BigDecimal decimal);
1:9e064ee: 
1:6f20437:     BigDecimal getDecimal(Object valueToBeConverted);
1:9e064ee: 
1:9e064ee:     int getSize();
1:9e064ee: 
1:6f20437:     DecimalConverterType getDecimalConverterType();
1:6f20437: 
1:9e064ee:   }
1:9e064ee: 
1:f209e8e:   public static class DecimalIntConverter implements DecimalConverter {
1:9e064ee: 
1:9e064ee:     private int scale;
1:9e064ee: 
1:f209e8e:     DecimalIntConverter(int scale) {
1:9e064ee:       this.scale = scale;
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public Object convert(BigDecimal decimal) {
2:9e064ee:       long longValue = decimal.unscaledValue().longValue();
1:6f20437:       return (int) longValue;
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:6f20437:       return BigDecimal.valueOf((Long) valueToBeConverted, scale);
1:9e064ee:     }
1:9e064ee: 
1:9e064ee:     @Override public int getSize() {
1:9e064ee:       return 4;
1:9e064ee:     }
1:6f20437: 
1:6f20437:     @Override public DecimalConverterType getDecimalConverterType() {
1:6f20437:       return DecimalConverterType.DECIMAL_INT;
1:6f20437:     }
1:9e064ee:   }
1:6f20437: 
1:f209e8e:   public static class DecimalLongConverter implements DecimalConverter {
1:9e064ee: 
1:9e064ee:     private int scale;
1:9e064ee: 
1:f209e8e:     DecimalLongConverter(int scale) {
1:9e064ee:       this.scale = scale;
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public Object convert(BigDecimal decimal) {
1:f209e8e:       return decimal.unscaledValue().longValue();
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:6f20437:       return BigDecimal.valueOf((Long) valueToBeConverted, scale);
1:9e064ee:     }
1:9e064ee: 
1:9e064ee:     @Override public int getSize() {
1:9e064ee:       return 8;
1:9e064ee:     }
1:6f20437: 
1:6f20437:     @Override public DecimalConverterType getDecimalConverterType() {
1:6f20437:       return DecimalConverterType.DECIMAL_LONG;
1:6f20437:     }
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   public class DecimalUnscaledConverter implements DecimalConverter {
1:9e064ee: 
1:9e064ee:     private int scale;
1:9e064ee: 
1:9e064ee:     private int numBytes;
1:9e064ee: 
1:9e064ee:     private byte[] decimalBuffer = new byte[minBytesForPrecision[38]];
1:9e064ee: 
1:f209e8e:     DecimalUnscaledConverter(int precision, int scale) {
1:9e064ee:       this.scale = scale;
1:9e064ee:       this.numBytes = minBytesForPrecision[precision];
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public Object convert(BigDecimal decimal) {
1:9e064ee:       byte[] bytes = decimal.unscaledValue().toByteArray();
1:9e064ee:       byte[] fixedLengthBytes = null;
1:9e064ee:       if (bytes.length == numBytes) {
1:9e064ee:         // If the length of the underlying byte array of the unscaled `BigInteger` happens to be
1:9e064ee:         // `numBytes`, just reuse it, so that we don't bother copying it to `decimalBuffer`.
1:9e064ee:         fixedLengthBytes = bytes;
1:9e064ee:       } else {
1:9e064ee:         // Otherwise, the length must be less than `numBytes`.  In this case we copy contents of
1:9e064ee:         // the underlying bytes with padding sign bytes to `decimalBuffer` to form the result
1:9e064ee:         // fixed-length byte array.
1:9e064ee:         byte signByte = 0;
1:9e064ee:         if (bytes[0] < 0) {
1:9e064ee:           signByte = (byte) -1;
1:9e064ee:         } else {
1:9e064ee:           signByte = (byte) 0;
1:9e064ee:         }
1:9e064ee:         Arrays.fill(decimalBuffer, 0, numBytes - bytes.length, signByte);
1:9e064ee:         System.arraycopy(bytes, 0, decimalBuffer, numBytes - bytes.length, bytes.length);
1:9e064ee:         fixedLengthBytes = decimalBuffer;
1:9e064ee:       }
1:9e064ee:       byte[] value = new byte[numBytes];
1:9e064ee:       System.arraycopy(fixedLengthBytes, 0, value, 0, numBytes);
1:9e064ee:       return value;
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:6f20437:       BigInteger bigInteger = new BigInteger((byte[]) valueToBeConverted);
1:9e064ee:       return new BigDecimal(bigInteger, scale);
1:9e064ee:     }
1:9e064ee: 
1:9e064ee:     @Override public int getSize() {
1:9e064ee:       return numBytes;
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public DecimalConverterType getDecimalConverterType() {
1:6f20437:       return DecimalConverterType.DECIMAL_UNSCALED;
1:6f20437:     }
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   public static class LVBytesDecimalConverter implements DecimalConverter {
1:9e064ee: 
1:9e064ee:     public static LVBytesDecimalConverter INSTANCE = new LVBytesDecimalConverter();
1:9e064ee: 
1:6f20437:     @Override public Object convert(BigDecimal decimal) {
1:9e064ee:       return DataTypeUtil.bigDecimalToByte(decimal);
1:9e064ee:     }
1:9e064ee: 
1:6f20437:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:6f20437:       return DataTypeUtil.byteToBigDecimal((byte[]) valueToBeConverted);
1:9e064ee:     }
1:9e064ee: 
1:9e064ee:     @Override public int getSize() {
1:9e064ee:       return -1;
1:9e064ee:     }
1:6f20437: 
1:6f20437:     @Override public DecimalConverterType getDecimalConverterType() {
1:6f20437:       return DecimalConverterType.DECIMAL_LV;
1:6f20437:     }
1:9e064ee:   }
1:9e064ee: 
1:9e064ee:   public DecimalConverter getDecimalConverter(int precision, int scale) {
1:9e064ee:     if (precision < 0) {
1:9e064ee:       return new LVBytesDecimalConverter();
1:9e064ee:     } else if (precision <= 9) {
1:f209e8e:       return new DecimalIntConverter(scale);
1:9e064ee:     } else if (precision <= 18) {
1:f209e8e:       return new DecimalLongConverter(scale);
1:9e064ee:     } else {
1:9e064ee:       return new DecimalUnscaledConverter(precision, scale);
1:9e064ee:     }
1:9e064ee:   }
1:9e064ee: 
1:9e064ee: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:500654e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static class DecimalIntConverter implements DecimalConverter {
1:     DecimalIntConverter(int scale) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static class DecimalLongConverter implements DecimalConverter {
1:     DecimalLongConverter(int scale) {
1:       return decimal.unscaledValue().longValue();
/////////////////////////////////////////////////////////////////////////
1:     DecimalUnscaledConverter(int precision, int scale) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       return new DecimalIntConverter(scale);
1:       return new DecimalLongConverter(scale);
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public enum DecimalConverterType {
1:     DECIMAL_LV(-1), DECIMAL_INT(4), DECIMAL_LONG(8), DECIMAL_UNSCALED(-1);
1: 
1:     private int sizeInBytes;
1: 
1:     DecimalConverterType(int sizeInBytes) {
1:       this.sizeInBytes = sizeInBytes;
1:     }
1: 
1:     public int getSizeInBytes() {
1:       return sizeInBytes;
1:     }
1: 
1:   }
1: 
1:     Object convert(BigDecimal decimal);
1:     BigDecimal getDecimal(Object valueToBeConverted);
1:     DecimalConverterType getDecimalConverterType();
1: 
1:     @Override public Object convert(BigDecimal decimal) {
1:       return (int) longValue;
1:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:       return BigDecimal.valueOf((Long) valueToBeConverted, scale);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override public DecimalConverterType getDecimalConverterType() {
1:       return DecimalConverterType.DECIMAL_INT;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override public Object convert(BigDecimal decimal) {
0:       return longValue;
1:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:       return BigDecimal.valueOf((Long) valueToBeConverted, scale);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override public DecimalConverterType getDecimalConverterType() {
1:       return DecimalConverterType.DECIMAL_LONG;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override public Object convert(BigDecimal decimal) {
/////////////////////////////////////////////////////////////////////////
1:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:       BigInteger bigInteger = new BigInteger((byte[]) valueToBeConverted);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override public DecimalConverterType getDecimalConverterType() {
1:       return DecimalConverterType.DECIMAL_UNSCALED;
1:     }
1:     @Override public Object convert(BigDecimal decimal) {
1:     @Override public BigDecimal getDecimal(Object valueToBeConverted) {
1:       return DataTypeUtil.byteToBigDecimal((byte[]) valueToBeConverted);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override public DecimalConverterType getDecimalConverterType() {
1:       return DecimalConverterType.DECIMAL_LV;
1:     }
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:   public static final DecimalConverterFactory INSTANCE = new DecimalConverterFactory();
author:Raghunandan S
-------------------------------------------------------------------------------
commit:79feac9
/////////////////////////////////////////////////////////////////////////
0:   public static final DecimalConverterFactory INSTANCE = new DecimalConverterFactory();
author:ravipesala
-------------------------------------------------------------------------------
commit:92fe63c
/////////////////////////////////////////////////////////////////////////
0:   public static DecimalConverterFactory INSTANCE = new DecimalConverterFactory();
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
0: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: 
0: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: /**
1:  * Decimal converter to keep the data compact.
1:  */
1: public final class DecimalConverterFactory {
1: 
0:   public static DecimalConverterFactory INSTANCE = new DecimalConverterFactory();
1: 
1:   private int[] minBytesForPrecision = minBytesForPrecision();
1: 
1:   private DecimalConverterFactory() {
1: 
1:   }
1: 
1:   private int computeMinBytesForPrecision(int precision) {
1:     int numBytes = 1;
1:     while (Math.pow(2.0, 8 * numBytes - 1) < Math.pow(10.0, precision)) {
1:       numBytes += 1;
1:     }
1:     return numBytes;
1:   }
1: 
1:   private int[] minBytesForPrecision() {
1:     int[] data = new int[39];
1:     for (int i = 0; i < data.length; i++) {
1:       data[i] = computeMinBytesForPrecision(i);
1:     }
1:     return data;
1:   }
1: 
1:   public interface DecimalConverter {
1: 
0:     byte[] convert(BigDecimal decimal);
1: 
0:     BigDecimal getDecimal(byte[] bytes);
1: 
0:     void writeToColumnVector(byte[] bytes, CarbonColumnVector vector, int rowId);
1: 
1:     int getSize();
1: 
1:   }
1: 
0:   public class DecimalIntConverter implements DecimalConverter {
1: 
0:     private ByteBuffer buffer = ByteBuffer.allocate(4);
1: 
0:     private int precision;
1:     private int scale;
1: 
0:     public DecimalIntConverter(int precision, int scale) {
0:       this.precision = precision;
1:       this.scale = scale;
1:     }
1: 
0:     @Override public byte[] convert(BigDecimal decimal) {
1:       long longValue = decimal.unscaledValue().longValue();
0:       buffer.putInt(0, (int) longValue);
0:       return buffer.array().clone();
1:     }
1: 
0:     @Override public BigDecimal getDecimal(byte[] bytes) {
0:       long unscaled = getUnscaledLong(bytes);
0:       return BigDecimal.valueOf(unscaled, scale);
1:     }
1: 
0:     @Override public void writeToColumnVector(byte[] bytes, CarbonColumnVector vector, int rowId) {
0:       long unscaled = getUnscaledLong(bytes);
0:       vector.putInt(rowId, (int) unscaled);
1:     }
1: 
1:     @Override public int getSize() {
1:       return 4;
1:     }
1:   }
1: 
0:   private long getUnscaledLong(byte[] bytes) {
0:     long unscaled = 0L;
0:     int i = 0;
1: 
0:     while (i < bytes.length) {
0:       unscaled = (unscaled << 8) | (bytes[i] & 0xff);
0:       i += 1;
1:     }
1: 
0:     int bits = 8 * bytes.length;
0:     unscaled = (unscaled << (64 - bits)) >> (64 - bits);
0:     return unscaled;
1:   }
1: 
0:   public class DecimalLongConverter implements DecimalConverter {
1: 
0:     private ByteBuffer buffer = ByteBuffer.allocate(8);
1: 
0:     private int precision;
1:     private int scale;
1: 
0:     public DecimalLongConverter(int precision, int scale) {
0:       this.precision = precision;
1:       this.scale = scale;
1:     }
1: 
0:     @Override public byte[] convert(BigDecimal decimal) {
1:       long longValue = decimal.unscaledValue().longValue();
0:       buffer.putLong(0, longValue);
0:       return buffer.array().clone();
1:     }
1: 
0:     @Override public BigDecimal getDecimal(byte[] bytes) {
0:       long unscaled = getUnscaledLong(bytes);
0:       return BigDecimal.valueOf(unscaled, scale);
1:     }
1: 
0:     @Override public void writeToColumnVector(byte[] bytes, CarbonColumnVector vector, int rowId) {
0:       long unscaled = getUnscaledLong(bytes);
0:       vector.putLong(rowId, unscaled);
1:     }
1: 
1:     @Override public int getSize() {
1:       return 8;
1:     }
1:   }
1: 
1:   public class DecimalUnscaledConverter implements DecimalConverter {
1: 
0:     private int precision;
1: 
1:     private int scale;
1: 
1:     private int numBytes;
1: 
1:     private byte[] decimalBuffer = new byte[minBytesForPrecision[38]];
1: 
0:     public DecimalUnscaledConverter(int precision, int scale) {
0:       this.precision = precision;
1:       this.scale = scale;
1:       this.numBytes = minBytesForPrecision[precision];
1:     }
1: 
0:     @Override public byte[] convert(BigDecimal decimal) {
1:       byte[] bytes = decimal.unscaledValue().toByteArray();
1:       byte[] fixedLengthBytes = null;
1:       if (bytes.length == numBytes) {
1:         // If the length of the underlying byte array of the unscaled `BigInteger` happens to be
1:         // `numBytes`, just reuse it, so that we don't bother copying it to `decimalBuffer`.
1:         fixedLengthBytes = bytes;
1:       } else {
1:         // Otherwise, the length must be less than `numBytes`.  In this case we copy contents of
1:         // the underlying bytes with padding sign bytes to `decimalBuffer` to form the result
1:         // fixed-length byte array.
1:         byte signByte = 0;
1:         if (bytes[0] < 0) {
1:           signByte = (byte) -1;
1:         } else {
1:           signByte = (byte) 0;
1:         }
1:         Arrays.fill(decimalBuffer, 0, numBytes - bytes.length, signByte);
1:         System.arraycopy(bytes, 0, decimalBuffer, numBytes - bytes.length, bytes.length);
1:         fixedLengthBytes = decimalBuffer;
1:       }
1:       byte[] value = new byte[numBytes];
1:       System.arraycopy(fixedLengthBytes, 0, value, 0, numBytes);
1:       return value;
1:     }
1: 
0:     @Override public BigDecimal getDecimal(byte[] bytes) {
0:       BigInteger bigInteger = new BigInteger(bytes);
1:       return new BigDecimal(bigInteger, scale);
1:     }
1: 
0:     @Override public void writeToColumnVector(byte[] bytes, CarbonColumnVector vector, int rowId) {
0:       vector.putBytes(rowId, bytes);
1:     }
1: 
1:     @Override public int getSize() {
1:       return numBytes;
1:     }
1:   }
1: 
1:   public static class LVBytesDecimalConverter implements DecimalConverter {
1: 
1:     public static LVBytesDecimalConverter INSTANCE = new LVBytesDecimalConverter();
1: 
0:     @Override public byte[] convert(BigDecimal decimal) {
1:       return DataTypeUtil.bigDecimalToByte(decimal);
1:     }
1: 
0:     @Override public BigDecimal getDecimal(byte[] bytes) {
0:       return DataTypeUtil.byteToBigDecimal(bytes);
1:     }
1: 
0:     @Override public void writeToColumnVector(byte[] bytes, CarbonColumnVector vector, int rowId) {
0:       throw new UnsupportedOperationException("Unsupported in vector reading for legacy format");
1:     }
1: 
1:     @Override public int getSize() {
1:       return -1;
1:     }
1:   }
1: 
1:   public DecimalConverter getDecimalConverter(int precision, int scale) {
1:     if (precision < 0) {
1:       return new LVBytesDecimalConverter();
1:     } else if (precision <= 9) {
0:       return new DecimalIntConverter(precision, scale);
1:     } else if (precision <= 18) {
0:       return new DecimalLongConverter(precision, scale);
1:     } else {
1:       return new DecimalUnscaledConverter(precision, scale);
1:     }
1:   }
1: 
1: }
============================================================================