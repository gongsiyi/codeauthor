1:d35fbaf: /*
1:d35fbaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d35fbaf:  * contributor license agreements.  See the NOTICE file distributed with
1:d35fbaf:  * this work for additional information regarding copyright ownership.
1:d35fbaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d35fbaf:  * (the "License"); you may not use this file except in compliance with
1:d35fbaf:  * the License.  You may obtain a copy of the License at
1:d35fbaf:  *
1:d35fbaf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d35fbaf:  *
1:d35fbaf:  * Unless required by applicable law or agreed to in writing, software
1:d35fbaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d35fbaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d35fbaf:  * See the License for the specific language governing permissions and
1:d35fbaf:  * limitations under the License.
1:d35fbaf:  */
1:d35fbaf: package org.apache.carbondata.core.datamap.dev;
1:d35fbaf: 
1:d35fbaf: import java.io.IOException;
1:9db662a: import java.util.List;
1:d35fbaf: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceStability;
1:8d8b589: import org.apache.carbondata.core.datamap.Segment;
1:d35fbaf: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:d35fbaf: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:d35fbaf: import org.apache.carbondata.core.util.CarbonUtil;
1:d35fbaf: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:d35fbaf: 
1:d35fbaf: /**
1:fc2a7eb:  * Writer interface for datamap.
1:fc2a7eb:  * Developer should implement this interface to write index files.
1:fc2a7eb:  * Writer will be called for every new block/blocklet/page is created when data load is executing.
1:d35fbaf:  */
1:fc2a7eb: @InterfaceAudience.Developer("DataMap")
1:fc2a7eb: @InterfaceStability.Evolving
1:fc2a7eb: public abstract class DataMapWriter {
1:d35fbaf: 
1:9db662a:   protected String tablePath;
1:d35fbaf: 
1:d35fbaf:   protected String segmentId;
1:d35fbaf: 
1:9db662a:   protected String dataMapPath;
1:d35fbaf: 
1:cd7c210:   protected List<CarbonColumn> indexColumns;
1:9db662a: 
1:7f4bd3d:   private boolean isWritingFinished;
1:7f4bd3d: 
1:9db662a:   public DataMapWriter(String tablePath, String dataMapName, List<CarbonColumn> indexColumns,
1:9db662a:       Segment segment, String shardName) {
1:9db662a:     this.tablePath = tablePath;
1:8d8b589:     this.segmentId = segment.getSegmentNo();
1:9db662a:     this.dataMapPath = CarbonTablePath.getDataMapStorePathOnShardName(
1:9db662a:         tablePath, segmentId, dataMapName, shardName);
1:9db662a:     this.indexColumns = indexColumns;
1:d35fbaf:   }
1:d35fbaf: 
1:9db662a:   protected final List<CarbonColumn> getIndexColumns() {
1:9db662a:     return indexColumns;
1:9db662a:   }
1:9db662a: 
1:d35fbaf:   /**
1:d35fbaf:    * Start of new block notification.
1:d35fbaf:    *
1:d35fbaf:    * @param blockId file name of the carbondata file
1:d35fbaf:    */
1:9db662a:   public abstract void onBlockStart(String blockId) throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * End of block notification
1:d35fbaf:    */
1:bbb1092:   public abstract void onBlockEnd(String blockId) throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * Start of new blocklet notification.
1:d35fbaf:    *
1:d35fbaf:    * @param blockletId sequence number of blocklet in the block
1:d35fbaf:    */
1:9db662a:   public abstract void onBlockletStart(int blockletId) throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * End of blocklet notification
1:d35fbaf:    *
1:d35fbaf:    * @param blockletId sequence number of blocklet in the block
1:d35fbaf:    */
1:9db662a:   public abstract void onBlockletEnd(int blockletId) throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:9db662a:    * Add columnar page data to the datamap, order of field is same as `indexColumns` in
1:d35fbaf:    * DataMapMeta returned in DataMapFactory.
1:9db662a:    * Implementation should copy the content of it as needed, because its memory
1:9db662a:    * may be freed after this method returns, in case of unsafe memory
1:d35fbaf:    */
1:9db662a:   public abstract void onPageAdded(int blockletId, int pageId, int pageSize, ColumnPage[] pages)
1:bbb1092:       throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * This is called during closing of writer.So after this call no more data will be sent to this
1:d35fbaf:    * class.
1:d35fbaf:    */
1:d35fbaf:   public abstract void finish() throws IOException;
1:d35fbaf: 
1:d35fbaf:   /**
1:fc2a7eb:    * It commits the index file by copying the file from temp folder to actual folder
1:d35fbaf:    *
1:fc2a7eb:    * @param dataMapFile file path of index file
1:fc2a7eb:    * @throws IOException if IO fails
1:d35fbaf:    */
1:d35fbaf:   protected void commitFile(String dataMapFile) throws IOException {
1:9db662a:     if (!dataMapFile.startsWith(dataMapPath)) {
1:d35fbaf:       throw new UnsupportedOperationException(
1:d35fbaf:           "Datamap file " + dataMapFile + " is not written in provided directory path "
1:9db662a:               + dataMapPath);
1:d35fbaf:     }
1:d35fbaf:     String dataMapFileName =
1:9db662a:         dataMapFile.substring(dataMapPath.length(), dataMapFile.length());
1:d35fbaf:     String carbonFilePath = dataMapFileName.substring(0, dataMapFileName.lastIndexOf("/"));
1:9db662a:     String segmentPath = CarbonTablePath.getSegmentPath(tablePath, segmentId);
1:d35fbaf:     if (carbonFilePath.length() > 0) {
1:d35fbaf:       carbonFilePath = segmentPath + carbonFilePath;
1:d35fbaf:       FileFactory.mkdirs(carbonFilePath, FileFactory.getFileType(carbonFilePath));
1:d35fbaf:     } else {
1:d35fbaf:       carbonFilePath = segmentPath;
1:d35fbaf:     }
1:d35fbaf:     CarbonUtil.copyCarbonDataFileToCarbonStorePath(dataMapFile, carbonFilePath, 0);
1:d35fbaf:   }
1:d35fbaf: 
1:9db662a: 
1:9db662a:   /**
1:9db662a:    * Return store path for datamap
1:9db662a:    */
1:9db662a:   public static String getDefaultDataMapPath(
1:9db662a:       String tablePath, String segmentId, String dataMapName) {
1:60dfdd3:     return CarbonTablePath.getDataMapStorePath(tablePath, segmentId, dataMapName);
1:d35fbaf:   }
1:7f4bd3d: 
1:7f4bd3d:   public boolean isWritingFinished() {
1:7f4bd3d:     return isWritingFinished;
1:7f4bd3d:   }
1:7f4bd3d: 
1:7f4bd3d:   public void setWritingFinished(boolean writingFinished) {
1:7f4bd3d:     isWritingFinished = writingFinished;
1:7f4bd3d:   }
1:9db662a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:   protected List<CarbonColumn> indexColumns;
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
/////////////////////////////////////////////////////////////////////////
0:   public AbstractDataMapWriter(AbsoluteTableIdentifier identifier, Segment segment,
1:     this.segmentId = segment.getSegmentNo();
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return CarbonTablePath.getDataMapStorePath(tablePath, segmentId, dataMapName);
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:   public abstract void onBlockStart(String blockId, String indexShardName) throws IOException;
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: /**
0:  * Data Map writer
1:  */
0: public abstract class AbstractDataMapWriter {
1: 
0:   protected AbsoluteTableIdentifier identifier;
1: 
1:   protected String segmentId;
1: 
0:   protected String writeDirectoryPath;
1: 
0:   public AbstractDataMapWriter(AbsoluteTableIdentifier identifier, String segmentId,
0:       String writeDirectoryPath) {
0:     this.identifier = identifier;
0:     this.segmentId = segmentId;
0:     this.writeDirectoryPath = writeDirectoryPath;
1:   }
1: 
1:   /**
1:    * Start of new block notification.
1:    *
1:    * @param blockId file name of the carbondata file
1:    */
0:   public abstract void onBlockStart(String blockId);
1: 
1:   /**
1:    * End of block notification
1:    */
0:   public abstract void onBlockEnd(String blockId);
1: 
1:   /**
1:    * Start of new blocklet notification.
1:    *
1:    * @param blockletId sequence number of blocklet in the block
1:    */
0:   public abstract void onBlockletStart(int blockletId);
1: 
1:   /**
1:    * End of blocklet notification
1:    *
1:    * @param blockletId sequence number of blocklet in the block
1:    */
0:   public abstract void onBlockletEnd(int blockletId);
1: 
1:   /**
0:    * Add the column pages row to the datamap, order of pages is same as `indexColumns` in
1:    * DataMapMeta returned in DataMapFactory.
0:    * Implementation should copy the content of `pages` as needed, because `pages` memory
0:    * may be freed after this method returns, if using unsafe column page.
1:    */
0:   public abstract void onPageAdded(int blockletId, int pageId, ColumnPage[] pages);
1: 
1:   /**
1:    * This is called during closing of writer.So after this call no more data will be sent to this
1:    * class.
1:    */
1:   public abstract void finish() throws IOException;
1: 
1:   /**
0:    * It copies the file from temp folder to actual folder
1:    *
0:    * @param dataMapFile
0:    * @throws IOException
1:    */
1:   protected void commitFile(String dataMapFile) throws IOException {
0:     if (!dataMapFile.startsWith(writeDirectoryPath)) {
1:       throw new UnsupportedOperationException(
1:           "Datamap file " + dataMapFile + " is not written in provided directory path "
0:               + writeDirectoryPath);
1:     }
1:     String dataMapFileName =
0:         dataMapFile.substring(writeDirectoryPath.length(), dataMapFile.length());
1:     String carbonFilePath = dataMapFileName.substring(0, dataMapFileName.lastIndexOf("/"));
0:     String segmentPath = CarbonTablePath.getSegmentPath(identifier.getTablePath(), segmentId);
1:     if (carbonFilePath.length() > 0) {
1:       carbonFilePath = segmentPath + carbonFilePath;
1:       FileFactory.mkdirs(carbonFilePath, FileFactory.getFileType(carbonFilePath));
1:     } else {
1:       carbonFilePath = segmentPath;
1:     }
1:     CarbonUtil.copyCarbonDataFileToCarbonStorePath(dataMapFile, carbonFilePath, 0);
1:   }
1: 
1: }
author:akashrn5
-------------------------------------------------------------------------------
commit:7f4bd3d
/////////////////////////////////////////////////////////////////////////
1:   private boolean isWritingFinished;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isWritingFinished() {
1:     return isWritingFinished;
1:   }
1: 
1:   public void setWritingFinished(boolean writingFinished) {
1:     isWritingFinished = writingFinished;
1:   }
commit:860e144
/////////////////////////////////////////////////////////////////////////
0:   public abstract void onBlockStart(String blockId, long taskId) throws IOException;
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: import java.util.List;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
1:   protected String tablePath;
1:   protected String dataMapPath;
0:   private List<CarbonColumn> indexColumns;
1: 
1:   public DataMapWriter(String tablePath, String dataMapName, List<CarbonColumn> indexColumns,
1:       Segment segment, String shardName) {
1:     this.tablePath = tablePath;
1:     this.dataMapPath = CarbonTablePath.getDataMapStorePathOnShardName(
1:         tablePath, segmentId, dataMapName, shardName);
1:     this.indexColumns = indexColumns;
1:   }
1: 
1:   protected final List<CarbonColumn> getIndexColumns() {
1:     return indexColumns;
/////////////////////////////////////////////////////////////////////////
1:   public abstract void onBlockStart(String blockId) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:   public abstract void onBlockletStart(int blockletId) throws IOException;
1:   public abstract void onBlockletEnd(int blockletId) throws IOException;
1:    * Add columnar page data to the datamap, order of field is same as `indexColumns` in
1:    * Implementation should copy the content of it as needed, because its memory
1:    * may be freed after this method returns, in case of unsafe memory
1:   public abstract void onPageAdded(int blockletId, int pageId, int pageSize, ColumnPage[] pages)
/////////////////////////////////////////////////////////////////////////
1:     if (!dataMapFile.startsWith(dataMapPath)) {
1:               + dataMapPath);
1:         dataMapFile.substring(dataMapPath.length(), dataMapFile.length());
1:     String segmentPath = CarbonTablePath.getSegmentPath(tablePath, segmentId);
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Return store path for datamap
1:    */
1:   public static String getDefaultDataMapPath(
1:       String tablePath, String segmentId, String dataMapName) {
0:     return CarbonTablePath.getSegmentPath(tablePath, segmentId) + File.separator + dataMapName;
1:   }
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
0:   public abstract void onBlockStart(String blockId) throws IOException;
1:   public abstract void onBlockEnd(String blockId) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:   public abstract void onPageAdded(int blockletId, int pageId, ColumnPage[] pages)
1:       throws IOException;
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
/////////////////////////////////////////////////////////////////////////
1:  * Writer interface for datamap.
1:  * Developer should implement this interface to write index files.
1:  * Writer will be called for every new block/blocklet/page is created when data load is executing.
1: @InterfaceAudience.Developer("DataMap")
1: @InterfaceStability.Evolving
1: public abstract class DataMapWriter {
/////////////////////////////////////////////////////////////////////////
0:   public DataMapWriter(AbsoluteTableIdentifier identifier, Segment segment,
/////////////////////////////////////////////////////////////////////////
0:    * DataMapMeta returned in DataMapFactory.
/////////////////////////////////////////////////////////////////////////
1:    * It commits the index file by copying the file from temp folder to actual folder
1:    * @param dataMapFile file path of index file
1:    * @throws IOException if IO fails
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0:    * DataMapMeta returned in IndexDataMapFactory.
============================================================================