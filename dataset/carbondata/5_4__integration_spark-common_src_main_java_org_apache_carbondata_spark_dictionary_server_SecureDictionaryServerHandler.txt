1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
4:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
4:05b2654:  */
1:4daf063: package org.apache.carbondata.spark.dictionary.server;
1:4daf063: 
1:4daf063: import java.nio.ByteBuffer;
4:05b2654: 
1:05b2654: import org.apache.carbondata.common.logging.LogService;
1:05b2654: import org.apache.carbondata.common.logging.LogServiceFactory;
1:05b2654: import org.apache.carbondata.core.dictionary.generator.ServerDictionaryGenerator;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:ee5f65f: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:05b2654: 
1:87dade7: import io.netty.buffer.ByteBuf;
1:4daf063: import io.netty.buffer.ByteBufAllocator;
1:4daf063: import io.netty.buffer.Unpooled;
1:87dade7: import io.netty.channel.ChannelHandler;
1:4daf063: import org.apache.spark.network.client.RpcResponseCallback;
1:4daf063: import org.apache.spark.network.client.TransportClient;
1:4daf063: import org.apache.spark.network.server.OneForOneStreamManager;
1:4daf063: import org.apache.spark.network.server.RpcHandler;
1:4daf063: import org.apache.spark.network.server.StreamManager;
1:05b2654: 
4:05b2654: /**
1:05b2654:  * Handler for Dictionary server.
1:05b2654:  */
1:4daf063: @ChannelHandler.Sharable public class SecureDictionaryServerHandler extends RpcHandler {
1:05b2654: 
1:05b2654:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(SecureDictionaryServerHandler.class.getName());
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * dictionary generator
1:05b2654:    */
1:05b2654:   private ServerDictionaryGenerator generatorForServer = new ServerDictionaryGenerator();
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * process message by message type
1:05b2654:    *
1:05b2654:    * @param key
1:05b2654:    * @return
3:05b2654:    * @throws Exception
1:05b2654:    */
1:87dade7:   public int processMessage(DictionaryMessage key) throws Exception {
1:05b2654:     switch (key.getType()) {
1:ee5f65f:       case DICT_GENERATION:
1:4daf063:         generatorForServer.initializeGeneratorForColumn(key);
1:05b2654:         return generatorForServer.generateKey(key);
1:ee5f65f:       case SIZE:
1:4daf063:         generatorForServer.initializeGeneratorForColumn(key);
1:05b2654:         return generatorForServer.size(key);
1:8815dd5:       case WRITE_TABLE_DICTIONARY:
1:4daf063:         generatorForServer.writeTableDictionaryData(key.getTableUniqueId());
1:8815dd5:         return 0;
1:05b2654:       default:
1:05b2654:         return -1;
5:05b2654:     }
1:ee5f65f:   }
1:ee5f65f: 
1:4daf063:   @Override public void receive(TransportClient transportClient, ByteBuffer byteBuffer,
1:4daf063:       RpcResponseCallback rpcResponseCallback) {
1:4daf063:     try {
1:4daf063:       ByteBuf data = Unpooled.wrappedBuffer(byteBuffer);
1:4daf063:       DictionaryMessage key = new DictionaryMessage();
1:4daf063:       key.readFullLength(data);
1:4daf063:       data.release();
1:4daf063:       int outPut = processMessage(key);
1:4daf063:       key.setDictionaryValue(outPut);
1:4daf063:       // Send back the response
1:4daf063:       ByteBuf buff = ByteBufAllocator.DEFAULT.buffer();
1:4daf063:       key.writeData(buff);
1:4daf063:       rpcResponseCallback.onSuccess(buff.nioBuffer());
1:4daf063:     } catch (Exception e) {
1:4daf063:       LOGGER.error(e);
1:4daf063:     }
1:87dade7:   }
1:05b2654: 
1:4daf063:   @Override public StreamManager getStreamManager() {
1:4daf063:     return new OneForOneStreamManager();
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void initializeTable(CarbonTable carbonTable) {
1:4daf063:     generatorForServer.initializeGeneratorForTable(carbonTable);
1:4daf063:   }
1:05b2654: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.spark.dictionary.server;
1: 
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBufAllocator;
1: import io.netty.buffer.Unpooled;
1: import org.apache.spark.network.client.RpcResponseCallback;
1: import org.apache.spark.network.client.TransportClient;
1: import org.apache.spark.network.server.OneForOneStreamManager;
1: import org.apache.spark.network.server.RpcHandler;
1: import org.apache.spark.network.server.StreamManager;
1: @ChannelHandler.Sharable public class SecureDictionaryServerHandler extends RpcHandler {
1:       LogServiceFactory.getLogService(SecureDictionaryServerHandler.class.getName());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         generatorForServer.initializeGeneratorForColumn(key);
1:         generatorForServer.initializeGeneratorForColumn(key);
1:         generatorForServer.writeTableDictionaryData(key.getTableUniqueId());
1:   @Override public void receive(TransportClient transportClient, ByteBuffer byteBuffer,
1:       RpcResponseCallback rpcResponseCallback) {
1:     try {
1:       ByteBuf data = Unpooled.wrappedBuffer(byteBuffer);
1:       DictionaryMessage key = new DictionaryMessage();
1:       key.readFullLength(data);
1:       data.release();
1:       int outPut = processMessage(key);
1:       key.setDictionaryValue(outPut);
1:       // Send back the response
1:       ByteBuf buff = ByteBufAllocator.DEFAULT.buffer();
1:       key.writeData(buff);
1:       rpcResponseCallback.onSuccess(buff.nioBuffer());
1:     } catch (Exception e) {
1:       LOGGER.error(e);
1:     }
1:   @Override public StreamManager getStreamManager() {
1:     return new OneForOneStreamManager();
1:   }
1: 
1:   public void initializeTable(CarbonTable carbonTable) {
1:     generatorForServer.initializeGeneratorForTable(carbonTable);
1:   }
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
0: @ChannelHandler.Sharable public class DictionaryServerHandler extends ChannelInboundHandlerAdapter {
0:       LogServiceFactory.getLogService(DictionaryServerHandler.class.getName());
/////////////////////////////////////////////////////////////////////////
0:   @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:   @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
/////////////////////////////////////////////////////////////////////////
1:       case DICT_GENERATION:
1:       case SIZE:
0:         generatorForServer
0:             .writeTableDictionaryData(key.getTableUniqueId());
0:   void initializeTable(CarbonTable carbonTable) {
0:     generatorForServer.initializeGeneratorForTable(carbonTable);
1:   }
1: 
commit:8815dd5
/////////////////////////////////////////////////////////////////////////
1:       case WRITE_TABLE_DICTIONARY:
0:         generatorForServer.writeTableDictionaryData(key.getTableUniqueName());
1:         return 0;
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import io.netty.buffer.ByteBuf;
1: import io.netty.channel.ChannelHandler;
0: import io.netty.channel.ChannelHandlerContext;
0: import io.netty.channel.ChannelInboundHandlerAdapter;
0: @ChannelHandler.Sharable
0: public class DictionaryServerHandler extends ChannelInboundHandlerAdapter {
/////////////////////////////////////////////////////////////////////////
0:    * channel registered
0:   public void channelActive(ChannelHandlerContext ctx) throws Exception {
0:     LOGGER.audit("Connected " + ctx);
0:     super.channelActive(ctx);
0:   @Override
0:   public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
0:     try {
0:       ByteBuf data = (ByteBuf) msg;
0:       DictionaryMessage key = new DictionaryMessage();
0:       key.readData(data);
0:       data.release();
0:       int outPut = processMessage(key);
0:       key.setDictionaryValue(outPut);
0:       // Send back the response
0:       ByteBuf buffer = ctx.alloc().buffer();
0:       key.writeData(buffer);
0:       ctx.writeAndFlush(buffer);
0:     } catch (Exception e) {
0:       LOGGER.error(e);
0:       throw e;
1:     }
0:    * @param cause
0:   @Override
0:   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
0:     LOGGER.error(cause, "exceptionCaught");
0:     ctx.close();
/////////////////////////////////////////////////////////////////////////
1:   public int processMessage(DictionaryMessage key) throws Exception {
0:       case DICT_GENERATION :
0:       case TABLE_INTIALIZATION :
0:       case SIZE :
0:       case WRITE_DICTIONARY :
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.core.dictionary.server;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.dictionary.generator.ServerDictionaryGenerator;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
0: import org.apache.carbondata.core.dictionary.generator.key.KryoRegister;
1: 
0: import org.jboss.netty.channel.*;
1: 
1: /**
1:  * Handler for Dictionary server.
1:  */
0: public class DictionaryServerHandler extends SimpleChannelHandler {
1: 
1:   private static final LogService LOGGER =
0:           LogServiceFactory.getLogService(DictionaryServerHandler.class.getName());
1: 
1:   /**
1:    * dictionary generator
1:    */
1:   private ServerDictionaryGenerator generatorForServer = new ServerDictionaryGenerator();
1: 
1:   /**
0:    * channel connected
1:    *
0:    * @param ctx
0:    * @param e
1:    * @throws Exception
1:    */
0:   public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
0:     LOGGER.audit("Connected " + ctx.getHandler());
1:   }
1: 
1:   /**
0:    * receive message and handle
1:    *
0:    * @param ctx
0:    * @param e
1:    * @throws Exception
1:    */
0:   @Override public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
0:       throws Exception {
0:     byte[] request = (byte[]) e.getMessage();
0:     DictionaryKey key = KryoRegister.deserialize(request);
0:     int outPut = processMessage(key);
0:     key.setData(outPut);
0:     // Send back the response
0:     byte[] response = KryoRegister.serialize(key);
0:     ctx.getChannel().write(response);
0:     super.messageReceived(ctx, e);
1:   }
1: 
1:   /**
0:    * handle exceptions
1:    *
0:    * @param ctx
0:    * @param e
1:    */
0:   @Override public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {
0:     LOGGER.error("exceptionCaught");
0:     e.getCause().printStackTrace();
0:     ctx.getChannel().close();
1:   }
1: 
1:   /**
1:    * process message by message type
1:    *
1:    * @param key
1:    * @return
1:    * @throws Exception
1:    */
0:   public Integer processMessage(DictionaryKey key) throws Exception {
1:     switch (key.getType()) {
0:       case "DICTIONARY_GENERATION":
1:         return generatorForServer.generateKey(key);
0:       case "TABLE_INTIALIZATION":
0:         generatorForServer.initializeGeneratorForTable(key);
0:         return 0;
0:       case "SIZE":
1:         return generatorForServer.size(key);
0:       case "WRITE_DICTIONARY":
0:         generatorForServer.writeDictionaryData();
0:         return 0;
1:       default:
1:         return -1;
1:     }
1:   }
1: 
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.channel.ChannelHandlerContext;
0: import org.jboss.netty.channel.ChannelStateEvent;
0: import org.jboss.netty.channel.ExceptionEvent;
0: import org.jboss.netty.channel.MessageEvent;
0: import org.jboss.netty.channel.SimpleChannelHandler;
============================================================================