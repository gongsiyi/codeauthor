1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: package org.apache.carbondata.core.dictionary.server;
2:4daf063: 
1:4daf063: import java.net.InetSocketAddress;
1:4daf063: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: import org.apache.carbondata.common.logging.LogServiceFactory;
1:4daf063: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1:4daf063: import org.apache.carbondata.core.dictionary.service.AbstractDictionaryServer;
1:4daf063: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:4daf063: import org.apache.carbondata.core.util.CarbonProperties;
1:4daf063: 
1:4daf063: import io.netty.bootstrap.ServerBootstrap;
1:4daf063: import io.netty.channel.ChannelInitializer;
1:4daf063: import io.netty.channel.ChannelOption;
1:4daf063: import io.netty.channel.ChannelPipeline;
1:4daf063: import io.netty.channel.EventLoopGroup;
1:4daf063: import io.netty.channel.nio.NioEventLoopGroup;
1:4daf063: import io.netty.channel.socket.SocketChannel;
1:4daf063: import io.netty.channel.socket.nio.NioServerSocketChannel;
1:4daf063: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
1:4daf063: 
1:4daf063: /**
1:4daf063:  * Dictionary Server to generate dictionary keys.
1:4daf063:  */
1:4daf063: public class NonSecureDictionaryServer extends AbstractDictionaryServer
1:4daf063:     implements DictionaryServer {
1:4daf063: 
1:4daf063:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(NonSecureDictionaryServer.class.getName());
1:4daf063: 
1:4daf063:   private NonSecureDictionaryServerHandler nonSecureDictionaryServerHandler;
1:4daf063: 
1:4daf063:   private EventLoopGroup boss;
1:4daf063:   private EventLoopGroup worker;
1:4daf063:   private int port;
1:4daf063:   private String host;
1:4daf063:   private static Object lock = new Object();
1:4daf063:   private static NonSecureDictionaryServer INSTANCE = null;
1:4daf063: 
1:4daf063:   private NonSecureDictionaryServer(int port) {
1:4daf063:     this.port = port;
1:4daf063:     startServer();
1:4daf063:   }
1:4daf063: 
1:4daf063:   public static synchronized DictionaryServer getInstance(int port, CarbonTable carbonTable)
1:4daf063:       throws Exception {
1:4daf063:     if (INSTANCE == null) {
1:4daf063:       INSTANCE = new NonSecureDictionaryServer(port);
1:4daf063:     }
1:4daf063:     INSTANCE.initializeDictionaryGenerator(carbonTable);
1:4daf063:     return INSTANCE;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * start dictionary server
1:4daf063:    *
1:4daf063:    */
1:4daf063:   @Override public void startServer() {
1:4daf063:     LOGGER.info("Starting Dictionary Server in Non Secure Mode");
1:4daf063:     nonSecureDictionaryServerHandler = new NonSecureDictionaryServerHandler();
1:4daf063:     String workerThreads = CarbonProperties.getInstance()
1:4daf063:         .getProperty(CarbonCommonConstants.DICTIONARY_WORKER_THREADS,
1:4daf063:             CarbonCommonConstants.DICTIONARY_WORKER_THREADS_DEFAULT);
1:4daf063:     boss = new NioEventLoopGroup(1);
1:4daf063:     worker = new NioEventLoopGroup(Integer.parseInt(workerThreads));
1:4daf063:     // Configure the server.
1:4daf063:     bindToPort();
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * Binds dictionary server to an available port.
1:4daf063:    *
1:4daf063:    */
1:4daf063:   @Override public void bindToPort() {
1:4daf063:     long start = System.currentTimeMillis();
1:4daf063:     // Configure the server.
1:4daf063:     int i = 0;
1:4daf063:     while (i < 10) {
1:4daf063:       int newPort = port + i;
1:4daf063:       try {
1:4daf063:         ServerBootstrap bootstrap = new ServerBootstrap();
1:4daf063:         bootstrap.group(boss, worker);
1:4daf063:         bootstrap.channel(NioServerSocketChannel.class);
1:4daf063:         bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
1:4daf063:           @Override public void initChannel(SocketChannel ch) throws Exception {
1:4daf063:             ChannelPipeline pipeline = ch.pipeline();
1:4daf063:             pipeline
1:4daf063:                 .addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
1:4daf063:             pipeline.addLast("NonSecureDictionaryServerHandler", nonSecureDictionaryServerHandler);
1:4daf063:           }
1:4daf063:         });
1:4daf063:         bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
1:4daf063:         String hostToBind = findLocalIpAddress(LOGGER);
1:4daf063:         InetSocketAddress address = hostToBind == null ?
1:4daf063:             new InetSocketAddress(newPort) :
1:4daf063:             new InetSocketAddress(hostToBind, newPort);
1:4daf063:         bootstrap.bind(address).sync();
1:873c3de:         LOGGER.info("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
1:4daf063:             + " Listening on port " + newPort);
1:4daf063:         this.port = newPort;
1:4daf063:         this.host = hostToBind;
1:4daf063:         break;
1:4daf063:       } catch (Exception e) {
1:4daf063:         LOGGER.error(e, "Dictionary Server Failed to bind to port:");
1:4daf063:         if (i == 9) {
1:4daf063:           throw new RuntimeException("Dictionary Server Could not bind to any port");
1:4daf063:         }
1:4daf063:       }
1:4daf063:       i++;
1:4daf063:     }
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * @return Port on which the NonSecureDictionaryServer has started.
1:4daf063:    */
1:4daf063:   @Override public int getPort() {
1:4daf063:     return port;
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public String getSecretKey() {
1:4daf063:     return null;
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public boolean isEncryptSecureServer() {
1:4daf063:     return false;
1:4daf063:   }
1:4daf063: 
1:4daf063:   @Override public String getHost() {
1:4daf063:     return host;
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * shutdown dictionary server
1:4daf063:    *
1:4daf063:    * @throws Exception
1:4daf063:    */
1:4daf063:   @Override public void shutdown() throws Exception {
1:4daf063:     LOGGER.info("Shutting down dictionary server");
1:4daf063:     worker.shutdownGracefully();
1:4daf063:     boss.shutdownGracefully();
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * Write Dictionary for one table.
1:4daf063:    *
1:4daf063:    * @throws Exception
1:4daf063:    */
1:4daf063: 
1:4daf063:   @Override
1:4daf063:   public void writeTableDictionary(String uniqueTableName) throws Exception {
1:4daf063:     DictionaryMessage key = new DictionaryMessage();
1:4daf063:     key.setTableUniqueId(uniqueTableName);
1:4daf063:     key.setType(DictionaryMessageType.WRITE_TABLE_DICTIONARY);
1:4daf063:     nonSecureDictionaryServerHandler.processMessage(key);
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception {
1:4daf063:     nonSecureDictionaryServerHandler.initializeTable(carbonTable);
1:4daf063:   }
1:4daf063: 
1:4daf063: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:873c3de
/////////////////////////////////////////////////////////////////////////
1:         LOGGER.info("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
commit:daa6465
/////////////////////////////////////////////////////////////////////////
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.server;
1: 
1: import java.net.InetSocketAddress;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
1: import org.apache.carbondata.core.dictionary.service.AbstractDictionaryServer;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: 
1: import io.netty.bootstrap.ServerBootstrap;
1: import io.netty.channel.ChannelInitializer;
1: import io.netty.channel.ChannelOption;
1: import io.netty.channel.ChannelPipeline;
1: import io.netty.channel.EventLoopGroup;
1: import io.netty.channel.nio.NioEventLoopGroup;
1: import io.netty.channel.socket.SocketChannel;
1: import io.netty.channel.socket.nio.NioServerSocketChannel;
1: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
1: 
1: /**
1:  * Dictionary Server to generate dictionary keys.
1:  */
1: public class NonSecureDictionaryServer extends AbstractDictionaryServer
1:     implements DictionaryServer {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(NonSecureDictionaryServer.class.getName());
1: 
1:   private NonSecureDictionaryServerHandler nonSecureDictionaryServerHandler;
1: 
1:   private EventLoopGroup boss;
1:   private EventLoopGroup worker;
1:   private int port;
1:   private String host;
1:   private static Object lock = new Object();
1:   private static NonSecureDictionaryServer INSTANCE = null;
1: 
1:   private NonSecureDictionaryServer(int port) {
1:     this.port = port;
1:     startServer();
1:   }
1: 
1:   public static synchronized DictionaryServer getInstance(int port, CarbonTable carbonTable)
1:       throws Exception {
1:     if (INSTANCE == null) {
1:       INSTANCE = new NonSecureDictionaryServer(port);
1:     }
1:     INSTANCE.initializeDictionaryGenerator(carbonTable);
1:     return INSTANCE;
1:   }
1: 
1:   /**
1:    * start dictionary server
1:    *
1:    */
1:   @Override public void startServer() {
1:     LOGGER.info("Starting Dictionary Server in Non Secure Mode");
1:     nonSecureDictionaryServerHandler = new NonSecureDictionaryServerHandler();
1:     String workerThreads = CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.DICTIONARY_WORKER_THREADS,
1:             CarbonCommonConstants.DICTIONARY_WORKER_THREADS_DEFAULT);
1:     boss = new NioEventLoopGroup(1);
1:     worker = new NioEventLoopGroup(Integer.parseInt(workerThreads));
1:     // Configure the server.
1:     bindToPort();
1:   }
1: 
1:   /**
1:    * Binds dictionary server to an available port.
1:    *
1:    */
1:   @Override public void bindToPort() {
1:     long start = System.currentTimeMillis();
1:     // Configure the server.
1:     int i = 0;
1:     while (i < 10) {
1:       int newPort = port + i;
1:       try {
1:         ServerBootstrap bootstrap = new ServerBootstrap();
1:         bootstrap.group(boss, worker);
1:         bootstrap.channel(NioServerSocketChannel.class);
1:         bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
1:           @Override public void initChannel(SocketChannel ch) throws Exception {
1:             ChannelPipeline pipeline = ch.pipeline();
1:             pipeline
1:                 .addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
1:             pipeline.addLast("NonSecureDictionaryServerHandler", nonSecureDictionaryServerHandler);
1:           }
1:         });
1:         bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);
1:         String hostToBind = findLocalIpAddress(LOGGER);
1:         InetSocketAddress address = hostToBind == null ?
1:             new InetSocketAddress(newPort) :
1:             new InetSocketAddress(hostToBind, newPort);
1:         bootstrap.bind(address).sync();
0:         LOGGER.audit("Dictionary Server started, Time spent " + (System.currentTimeMillis() - start)
1:             + " Listening on port " + newPort);
1:         this.port = newPort;
1:         this.host = hostToBind;
1:         break;
1:       } catch (Exception e) {
1:         LOGGER.error(e, "Dictionary Server Failed to bind to port:");
1:         if (i == 9) {
1:           throw new RuntimeException("Dictionary Server Could not bind to any port");
1:         }
1:       }
1:       i++;
1:     }
1:   }
1: 
1:   /**
1:    * @return Port on which the NonSecureDictionaryServer has started.
1:    */
1:   @Override public int getPort() {
1:     return port;
1:   }
1: 
1:   @Override public String getSecretKey() {
1:     return null;
1:   }
1: 
1:   @Override public boolean isEncryptSecureServer() {
1:     return false;
1:   }
1: 
1:   @Override public String getHost() {
1:     return host;
1:   }
1: 
1:   /**
1:    * shutdown dictionary server
1:    *
1:    * @throws Exception
1:    */
1:   @Override public void shutdown() throws Exception {
1:     LOGGER.info("Shutting down dictionary server");
1:     worker.shutdownGracefully();
1:     boss.shutdownGracefully();
1:   }
1: 
1:   /**
1:    * Write Dictionary for one table.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Override
1:   public void writeTableDictionary(String uniqueTableName) throws Exception {
1:     DictionaryMessage key = new DictionaryMessage();
1:     key.setTableUniqueId(uniqueTableName);
1:     key.setType(DictionaryMessageType.WRITE_TABLE_DICTIONARY);
1:     nonSecureDictionaryServerHandler.processMessage(key);
1:   }
1: 
1:   public void initializeDictionaryGenerator(CarbonTable carbonTable) throws Exception {
1:     nonSecureDictionaryServerHandler.initializeTable(carbonTable);
1:   }
1: 
1: }
============================================================================