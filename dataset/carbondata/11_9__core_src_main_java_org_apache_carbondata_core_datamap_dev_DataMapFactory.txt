1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
5:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
2:b681244:  */
1:f089287: package org.apache.carbondata.core.datamap.dev;
4:b681244: 
1:f089287: import java.io.IOException;
1:e580d64: import java.util.HashMap;
1:9db662a: import java.util.HashSet;
1:b681244: import java.util.List;
1:e580d64: import java.util.Map;
1:9db662a: import java.util.Set;
1:b681244: 
1:d23f7fa: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:f089287: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:fc2a7eb: import org.apache.carbondata.core.datamap.DataMapLevel;
1:f089287: import org.apache.carbondata.core.datamap.DataMapMeta;
1:859d71c: import org.apache.carbondata.core.datamap.Segment;
1:e580d64: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMap;
1:cd7c210: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:5229443: import org.apache.carbondata.core.features.TableOperation;
1:860e144: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:56330ae: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:9db662a: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:4aa0f49: import org.apache.carbondata.events.Event;
1:9db662a: import static org.apache.carbondata.core.constants.CarbonCommonConstants.INDEX_COLUMNS;
1:b681244: 
1:f089287: /**
1:9db662a:  * Interface for datamap of index type, it is responsible for creating the datamap.
1:b681244:  */
1:9db662a: public abstract class DataMapFactory<T extends DataMap> {
1:9db662a: 
1:9db662a:   private CarbonTable carbonTable;
1:9db662a:   private DataMapSchema dataMapSchema;
1:9db662a: 
1:9db662a:   public DataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:9db662a:     this.carbonTable = carbonTable;
1:9db662a:     this.dataMapSchema = dataMapSchema;
1:9db662a:   }
1:9db662a: 
1:9db662a:   public CarbonTable getCarbonTable() {
1:9db662a:     return carbonTable;
1:9db662a:   }
1:9db662a: 
1:9db662a:   public DataMapSchema getDataMapSchema() {
1:9db662a:     return dataMapSchema;
1:9db662a:   }
1:f089287: 
1:1c4358e:   /**
1:9db662a:    * Create a new write for this datamap, to write new data into the specified segment and shard
1:b681244:    */
1:cd7c210:   public abstract DataMapWriter createWriter(Segment segment, String shardName,
1:cd7c210:       SegmentProperties segmentProperties) throws IOException;
2:b681244:   /**
1:747be9b:    * Create a new DataMapBuilder for this datamap, to rebuild the specified
1:9db662a:    * segment and shard data in the main table.
1:747be9b:    * TODO: refactor to unify with DataMapWriter
1:b681244:    */
1:cd7c210:   public abstract DataMapBuilder createBuilder(Segment segment, String shardName,
1:cd7c210:       SegmentProperties segmentProperties) throws IOException;
1:e580d64: 
1:e580d64:   /**
1:e580d64:    * Get the datamap for all segments
1:e580d64:    */
1:e580d64:   public Map<Segment, List<CoarseGrainDataMap>> getDataMaps(List<Segment> segments)
1:e580d64:       throws IOException {
1:e580d64:     Map<Segment, List<CoarseGrainDataMap>> dataMaps = new HashMap<>();
1:e580d64:     for (Segment segment : segments) {
1:e580d64:       dataMaps.put(segment, (List<CoarseGrainDataMap>) this.getDataMaps(segment));
1:e580d64:     }
1:e580d64:     return dataMaps;
1:e580d64:   }
1:e580d64: 
1:b681244:   /**
1:b681244:    * Get the datamap for segmentid
1:b681244:    */
1:9db662a:   public abstract List<T> getDataMaps(Segment segment) throws IOException;
1:b681244: 
1:b681244:   /**
1:0586146:    * Get datamaps for distributable object.
1:b681244:    */
1:9db662a:   public abstract List<T> getDataMaps(DataMapDistributable distributable)
2:9db662a:       throws IOException;
1:b681244: 
1:b681244:   /**
1:1e21cd1:    * Get all distributable objects of a segmentid
1:1e21cd1:    * @return
1:1e21cd1:    */
1:9db662a:   public abstract List<DataMapDistributable> toDistributable(Segment segment);
1:1e21cd1: 
1:1e21cd1:   /**
1:b681244:    *
1:b681244:    * @param event
1:b681244:    */
1:9db662a:   public abstract void fireEvent(Event event);
1:b681244: 
1:b681244:   /**
1:b681244:    * Clears datamap of the segment
1:b681244:    */
1:9db662a:   public abstract void clear(Segment segment);
1:b681244: 
1:b681244:   /**
1:b681244:    * Clear all datamaps from memory
1:b681244:    */
1:9db662a:   public abstract void clear();
1:b681244: 
1:b681244:   /**
1:f089287:    * Return metadata of this datamap
1:f089287:    */
1:9db662a:   public abstract DataMapMeta getMeta();
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    *  Type of datamap whether it is FG or CG
1:d35fbaf:    */
1:9db662a:   public abstract DataMapLevel getDataMapLevel();
1:860e144: 
1:860e144:   /**
1:d8562e5:    * delete datamap data in the specified segment
1:d8562e5:    */
1:1fd3703:   public abstract void deleteDatamapData(Segment segment) throws IOException;
1:d8562e5: 
1:d8562e5:   /**
1:860e144:    * delete datamap data if any
1:860e144:    */
1:9db662a:   public abstract void deleteDatamapData();
1:5229443: 
1:5229443:   /**
1:5229443:    * This function should return true is the input operation enum will make the datamap become stale
1:5229443:    */
1:9db662a:   public abstract boolean willBecomeStale(TableOperation operation);
1:9db662a: 
1:9db662a:   /**
1:9db662a:    * Validate INDEX_COLUMNS property and return a array containing index column name
1:9db662a:    * Following will be validated
1:9db662a:    * 1. require INDEX_COLUMNS property
1:9db662a:    * 2. INDEX_COLUMNS can't contains illegal argument(empty, blank)
1:9db662a:    * 3. INDEX_COLUMNS can't contains duplicate same columns
1:9db662a:    * 4. INDEX_COLUMNS should be exists in table columns
1:9db662a:    */
1:9db662a:   public void validate() throws MalformedDataMapCommandException {
1:9db662a:     List<CarbonColumn> indexColumns = carbonTable.getIndexedColumns(dataMapSchema);
1:9db662a:     Set<String> unique = new HashSet<>();
1:9db662a:     for (CarbonColumn indexColumn : indexColumns) {
1:9db662a:       unique.add(indexColumn.getColName());
1:9db662a:     }
1:9db662a:     if (unique.size() != indexColumns.size()) {
1:9db662a:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " has duplicate column");
1:9db662a:     }
1:9db662a:   }
1:9db662a: 
1:b681244:   /**
1:1c4358e:    * whether to block operation on corresponding table or column.
1:1c4358e:    * For example, bloomfilter datamap will block changing datatype for bloomindex column.
1:1c4358e:    * By default it will not block any operation.
1:1c4358e:    *
1:1c4358e:    * @param operation table operation
1:1c4358e:    * @param targets objects which the operation impact on
1:1c4358e:    * @return true the operation will be blocked;false the operation will not be blocked
1:1c4358e:    */
1:1c4358e:   public boolean isOperationBlocked(TableOperation operation, Object... targets) {
1:1c4358e:     return false;
1:1c4358e:   }
1:1c4358e: 
1:abcd4f6:   /**
1:abcd4f6:    * whether this datamap support rebuild
1:abcd4f6:    */
1:abcd4f6:   public boolean supportRebuild() {
1:abcd4f6:     return false;
1:abcd4f6:   }
1:b681244: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:abcd4f6
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether this datamap support rebuild
1:    */
1:   public boolean supportRebuild() {
1:     return false;
1:   }
commit:1fd3703
/////////////////////////////////////////////////////////////////////////
1:   public abstract void deleteDatamapData(Segment segment) throws IOException;
commit:d8562e5
/////////////////////////////////////////////////////////////////////////
1:    * delete datamap data in the specified segment
1:    */
0:   public abstract void deleteDatamapData(Segment segment);
1: 
1:   /**
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
/////////////////////////////////////////////////////////////////////////
1:   public abstract DataMapWriter createWriter(Segment segment, String shardName,
1:       SegmentProperties segmentProperties) throws IOException;
1:   public abstract DataMapBuilder createBuilder(Segment segment, String shardName,
1:       SegmentProperties segmentProperties) throws IOException;
commit:859d71c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0:   AbstractDataMapWriter createWriter(Segment segment, String writeDirectoryPath);
author:rahul
-------------------------------------------------------------------------------
commit:e580d64
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.cgdatamap.CoarseGrainDataMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Get the datamap for all segments
1:    */
1:   public Map<Segment, List<CoarseGrainDataMap>> getDataMaps(List<Segment> segments)
1:       throws IOException {
1:     Map<Segment, List<CoarseGrainDataMap>> dataMaps = new HashMap<>();
1:     for (Segment segment : segments) {
1:       dataMaps.put(segment, (List<CoarseGrainDataMap>) this.getDataMaps(segment));
1:     }
1:     return dataMaps;
1:   }
1: 
author:Sssan520
-------------------------------------------------------------------------------
commit:1c4358e
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether to block operation on corresponding table or column.
1:    * For example, bloomfilter datamap will block changing datatype for bloomindex column.
1:    * By default it will not block any operation.
1:    *
1:    * @param operation table operation
1:    * @param targets objects which the operation impact on
1:    * @return true the operation will be blocked;false the operation will not be blocked
1:    */
1:   public boolean isOperationBlocked(TableOperation operation, Object... targets) {
1:     return false;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1:    * Create a new DataMapBuilder for this datamap, to rebuild the specified
1:    * TODO: refactor to unify with DataMapWriter
0:   public abstract DataMapBuilder createBuilder(Segment segment, String shardName)
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.INDEX_COLUMNS;
1:  * Interface for datamap of index type, it is responsible for creating the datamap.
1: public abstract class DataMapFactory<T extends DataMap> {
1: 
1:   private CarbonTable carbonTable;
1:   private DataMapSchema dataMapSchema;
1: 
1:   public DataMapFactory(CarbonTable carbonTable, DataMapSchema dataMapSchema) {
1:     this.carbonTable = carbonTable;
1:     this.dataMapSchema = dataMapSchema;
1:   }
1: 
1:   public CarbonTable getCarbonTable() {
1:     return carbonTable;
1:   }
1: 
1:   public DataMapSchema getDataMapSchema() {
1:     return dataMapSchema;
1:   }
1:    * Create a new write for this datamap, to write new data into the specified segment and shard
0:   public abstract DataMapWriter createWriter(Segment segment, String shardName)
1:       throws IOException;
0:    * Create a new Refresher for this datamap, to rebuild the specified
1:    * segment and shard data in the main table.
0:   public abstract DataMapRefresher createRefresher(Segment segment, String shardName)
1:       throws IOException;
1:   public abstract List<T> getDataMaps(Segment segment) throws IOException;
1:   public abstract List<T> getDataMaps(DataMapDistributable distributable)
1:   public abstract List<DataMapDistributable> toDistributable(Segment segment);
1:   public abstract void fireEvent(Event event);
1:   public abstract void clear(Segment segment);
1:   public abstract void clear();
1:   public abstract DataMapMeta getMeta();
1:   public abstract DataMapLevel getDataMapLevel();
1:   public abstract void deleteDatamapData();
1:   public abstract boolean willBecomeStale(TableOperation operation);
1: 
1:   /**
1:    * Validate INDEX_COLUMNS property and return a array containing index column name
1:    * Following will be validated
1:    * 1. require INDEX_COLUMNS property
1:    * 2. INDEX_COLUMNS can't contains illegal argument(empty, blank)
1:    * 3. INDEX_COLUMNS can't contains duplicate same columns
1:    * 4. INDEX_COLUMNS should be exists in table columns
1:    */
1:   public void validate() throws MalformedDataMapCommandException {
1:     List<CarbonColumn> indexColumns = carbonTable.getIndexedColumns(dataMapSchema);
1:     Set<String> unique = new HashSet<>();
1:     for (CarbonColumn indexColumn : indexColumns) {
1:       unique.add(indexColumn.getColName());
1:     }
1:     if (unique.size() != indexColumns.size()) {
1:       throw new MalformedDataMapCommandException(INDEX_COLUMNS + " has duplicate column");
1:     }
1:   }
1: 
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
0:   void init(AbsoluteTableIdentifier identifier, DataMapSchema dataMapSchema) throws IOException;
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapLevel;
/////////////////////////////////////////////////////////////////////////
0: public interface DataMapFactory<T extends DataMap> {
/////////////////////////////////////////////////////////////////////////
0:   DataMapWriter createWriter(Segment segment, String writeDirectoryPath);
/////////////////////////////////////////////////////////////////////////
0:   DataMapLevel getDataMapType();
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: public interface IndexDataMapFactory<T extends IndexDataMap> {
commit:956833e
/////////////////////////////////////////////////////////////////////////
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datamap.dev;
1: import java.io.IOException;
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: import org.apache.carbondata.core.datamap.DataMapMeta;
0: import org.apache.carbondata.core.datamap.dev.DataMap;
/////////////////////////////////////////////////////////////////////////
0:    * Initialization of Datamap factory with the identifier and datamap name
1: 
0:    * Return a new write for this datamap
0:   DataMapWriter createWriter(String segmentId);
0:   List<DataMap> getDataMaps(String segmentId) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Return metadata of this datamap
1:    */
0:   DataMapMeta getMeta();
author:akashrn5
-------------------------------------------------------------------------------
commit:5229443
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.features.TableOperation;
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This function should return true is the input operation enum will make the datamap become stale
1:    */
0:   boolean willBecomeStale(TableOperation operation);
commit:860e144
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
0:    * Initialization of Datamap factory with the carbonTable and datamap name
0:   void init(CarbonTable carbonTable, DataMapSchema dataMapSchema)
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * delete datamap data if any
1:    */
0:   void deleteDatamapData();
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   List<T> getDataMaps(Segment segment) throws IOException;
0:   List<T> getDataMaps(DataMapDistributable distributable)
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
0:   List<T> getDataMaps(Segment segment, ReadCommittedScope readCommittedScope) throws IOException;
0:   List<T> getDataMaps(DataMapDistributable distributable, ReadCommittedScope readCommittedScope)
0:       throws IOException;
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
/////////////////////////////////////////////////////////////////////////
0:   void init(AbsoluteTableIdentifier identifier, DataMapSchema dataMapSchema)
0:       throws IOException, MalformedDataMapCommandException;
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
0:   void init(AbsoluteTableIdentifier identifier, DataMapSchema dataMapSchema);
commit:1e21cd1
/////////////////////////////////////////////////////////////////////////
1:    * Get all distributable objects of a segmentid
1:    * @return
1:    */
0:   List<DataMapDistributable> toDistributable(String segmentId);
1: 
1:   /**
author:ravipesala
-------------------------------------------------------------------------------
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.DataMapType;
0: public interface DataMapFactory<T extends DataMap> {
/////////////////////////////////////////////////////////////////////////
0:   AbstractDataMapWriter createWriter(Segment segment);
0:   List<T> getDataMaps(Segment segment) throws IOException;
0:   List<T> getDataMaps(DataMapDistributable distributable) throws IOException;
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    *  Type of datamap whether it is FG or CG
1:    */
0:   DataMapType getDataMapType();
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datamap.Segment;
/////////////////////////////////////////////////////////////////////////
0:   DataMapWriter createWriter(Segment segment);
0:   List<DataMap> getDataMaps(Segment segment) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:   List<DataMapDistributable> toDistributable(Segment segment);
/////////////////////////////////////////////////////////////////////////
0:   void clear(Segment segment);
commit:0586146
/////////////////////////////////////////////////////////////////////////
1:    * Get datamaps for distributable object.
0:   List<DataMap> getDataMaps(DataMapDistributable distributable) throws IOException;
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.core.indexstore;
1: 
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.events.ChangeEvent;
0: import org.apache.carbondata.core.indexstore.schema.FilterType;
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: 
1: /**
0:  * Interface for datamap factory, it is responsible for creating the datamap.
1:  */
0: public interface DataMapFactory {
1: 
1:   /**
0:    * Initialization of Datamap factory
0:    * @param identifier
0:    * @param dataMapName
1:    */
0:   void init(AbsoluteTableIdentifier identifier, String dataMapName);
1:   /**
0:    * Get the datamap writer for each segmentid.
1:    *
0:    * @param identifier
0:    * @param segmentId
0:    * @return
1:    */
0:   DataMapWriter getDataMapWriter(AbsoluteTableIdentifier identifier,
0:       String segmentId);
1: 
1:   /**
1:    * Get the datamap for segmentid
1:    *
0:    * @param segmentId
0:    * @return
1:    */
0:   List<DataMap> getDataMaps(String segmentId);
1: 
1:   /**
0:    * Get datamap for distributable object.
1:    *
0:    * @param distributable
0:    * @return
1:    */
0:   DataMap getDataMap(DataMapDistributable distributable);
1: 
1:   /**
0:    * This method checks whether the columns and the type of filters supported
0:    * for this datamap or not
1:    *
0:    * @param filterType
0:    * @return
1:    */
0:   boolean isFiltersSupported(FilterType filterType);
1: 
1:   /**
1:    *
1:    * @param event
1:    */
0:   void fireEvent(ChangeEvent event);
1: 
1:   /**
1:    * Clears datamap of the segment
1:    */
0:   void clear(String segmentId);
1: 
1:   /**
1:    * Clear all datamaps from memory
1:    */
0:   void clear();
1: 
1: }
author:rahulforallp
-------------------------------------------------------------------------------
commit:4aa0f49
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.events.Event;
/////////////////////////////////////////////////////////////////////////
0:   void fireEvent(Event event);
============================================================================