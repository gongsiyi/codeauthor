1:bc3e684: /*
1:bc3e684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc3e684:  * contributor license agreements.  See the NOTICE file distributed with
1:bc3e684:  * this work for additional information regarding copyright ownership.
1:bc3e684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc3e684:  * (the "License"); you may not use this file except in compliance with
1:bc3e684:  * the License.  You may obtain a copy of the License at
1:bc3e684:  *
1:bc3e684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc3e684:  *
1:bc3e684:  * Unless required by applicable law or agreed to in writing, software
1:bc3e684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc3e684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc3e684:  * See the License for the specific language governing permissions and
1:bc3e684:  * limitations under the License.
1:bc3e684:  */
5:bc3e684: 
1:bc3e684: package org.apache.carbondata.core.datastore.page.key;
1:bc3e684: 
1:bc3e684: import java.nio.ByteBuffer;
1:bc3e684: 
1:bc3e684: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:bc3e684: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:bc3e684: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:bc3e684: import org.apache.carbondata.core.datastore.row.WriteStepRowUtil;
1:bc3e684: import org.apache.carbondata.core.util.NonDictionaryUtil;
1:bc3e684: 
1:bc3e684: public class TablePageKey {
1:bc3e684:   private int pageSize;
1:bc3e684: 
1:bc3e684:   private byte[][] currentNoDictionaryKey;
1:bc3e684: 
1:bc3e684:   // MDK start key
1:bc3e684:   private byte[] startKey;
1:bc3e684: 
1:bc3e684:   // MDK end key
1:bc3e684:   private byte[] endKey;
1:bc3e684: 
1:bc3e684:   // startkey for no dictionary columns
1:bc3e684:   private byte[][] noDictStartKey;
1:bc3e684: 
1:bc3e684:   // endkey for no diciotn
1:bc3e684:   private byte[][] noDictEndKey;
1:bc3e684: 
1:bc3e684:   // startkey for no dictionary columns after packing into one column
1:bc3e684:   private byte[] packedNoDictStartKey;
1:bc3e684: 
1:bc3e684:   // endkey for no dictionary columns after packing into one column
1:bc3e684:   private byte[] packedNoDictEndKey;
1:bc3e684: 
1:bc3e684:   private SegmentProperties segmentProperties;
1:bc3e684:   private boolean hasNoDictionary;
1:bc3e684: 
1:40c7e8e:   public TablePageKey(int pageSize, SegmentProperties segmentProperties,
1:40c7e8e:                       boolean hasNoDictionary) {
1:bc3e684:     this.pageSize = pageSize;
1:bc3e684:     this.segmentProperties = segmentProperties;
1:bc3e684:     this.hasNoDictionary = hasNoDictionary;
5:bc3e684:   }
1:bc3e684: 
1:bc3e684:   /** update all keys based on the input row */
1:40c7e8e:   public void update(int rowId, CarbonRow row, byte[] mdk) {
1:bc3e684:     if (hasNoDictionary) {
1:bc3e684:       currentNoDictionaryKey = WriteStepRowUtil.getNoDictAndComplexDimension(row);
1:bc3e684:     }
1:bc3e684:     if (rowId == 0) {
1:40c7e8e:       startKey = mdk;
1:bc3e684:       noDictStartKey = currentNoDictionaryKey;
1:bc3e684:     }
1:bc3e684:     noDictEndKey = currentNoDictionaryKey;
1:bc3e684:     if (rowId == pageSize - 1) {
1:40c7e8e:       endKey = mdk;
1:bc3e684:       finalizeKeys();
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   /** update all keys if SORT_COLUMNS option is used when creating table */
1:bc3e684:   private void finalizeKeys() {
1:bc3e684:     // If SORT_COLUMNS is used, may need to update start/end keys since the they may
1:bc3e684:     // contains dictionary columns that are not in SORT_COLUMNS, which need to be removed from
1:bc3e684:     // start/end key
1:bc3e684:     int numberOfDictSortColumns = segmentProperties.getNumberOfDictSortColumns();
1:bc3e684:     if (numberOfDictSortColumns > 0) {
1:bc3e684:       // if SORT_COLUMNS contain dictionary columns
1:bc3e684:       int[] keySize = segmentProperties.getFixedLengthKeySplitter().getBlockKeySize();
1:bc3e684:       if (keySize.length > numberOfDictSortColumns) {
1:bc3e684:         // if there are some dictionary columns that are not in SORT_COLUMNS, it will come to here
1:bc3e684:         int newMdkLength = 0;
1:bc3e684:         for (int i = 0; i < numberOfDictSortColumns; i++) {
1:bc3e684:           newMdkLength += keySize[i];
1:bc3e684:         }
1:bc3e684:         byte[] newStartKeyOfSortKey = new byte[newMdkLength];
1:bc3e684:         byte[] newEndKeyOfSortKey = new byte[newMdkLength];
1:bc3e684:         System.arraycopy(startKey, 0, newStartKeyOfSortKey, 0, newMdkLength);
1:bc3e684:         System.arraycopy(endKey, 0, newEndKeyOfSortKey, 0, newMdkLength);
1:bc3e684:         startKey = newStartKeyOfSortKey;
1:bc3e684:         endKey = newEndKeyOfSortKey;
1:bc3e684:       }
1:bc3e684:     } else {
1:bc3e684:       startKey = new byte[0];
1:bc3e684:       endKey = new byte[0];
1:bc3e684:     }
1:bc3e684: 
1:bc3e684:     // Do the same update for noDictionary start/end Key
1:bc3e684:     int numberOfNoDictSortColumns = segmentProperties.getNumberOfNoDictSortColumns();
1:bc3e684:     if (numberOfNoDictSortColumns > 0) {
1:bc3e684:       // if sort_columns contain no-dictionary columns
1:bc3e684:       if (noDictStartKey.length > numberOfNoDictSortColumns) {
1:bc3e684:         byte[][] newNoDictionaryStartKey = new byte[numberOfNoDictSortColumns][];
1:bc3e684:         byte[][] newNoDictionaryEndKey = new byte[numberOfNoDictSortColumns][];
1:bc3e684:         System.arraycopy(
1:bc3e684:             noDictStartKey, 0, newNoDictionaryStartKey, 0, numberOfNoDictSortColumns);
1:bc3e684:         System.arraycopy(
1:bc3e684:             noDictEndKey, 0, newNoDictionaryEndKey, 0, numberOfNoDictSortColumns);
1:bc3e684:         noDictStartKey = newNoDictionaryStartKey;
1:bc3e684:         noDictEndKey = newNoDictionaryEndKey;
1:bc3e684:       }
1:bc3e684:       packedNoDictStartKey =
1:bc3e684:           NonDictionaryUtil.packByteBufferIntoSingleByteArray(noDictStartKey);
1:bc3e684:       packedNoDictEndKey =
1:bc3e684:           NonDictionaryUtil.packByteBufferIntoSingleByteArray(noDictEndKey);
1:bc3e684:     } else {
1:bc3e684:       noDictStartKey = new byte[0][];
1:bc3e684:       noDictEndKey = new byte[0][];
1:bc3e684:       packedNoDictStartKey = new byte[0];
1:bc3e684:       packedNoDictEndKey = new byte[0];
1:bc3e684:     }
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[] getNoDictStartKey() {
1:bc3e684:     return packedNoDictStartKey;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[] getNoDictEndKey() {
1:bc3e684:     return packedNoDictEndKey;
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[] serializeStartKey() {
1:bc3e684:     byte[] updatedNoDictionaryStartKey = updateNoDictionaryStartAndEndKey(getNoDictStartKey());
1:bc3e684:     ByteBuffer buffer = ByteBuffer.allocate(
1:bc3e684:         CarbonCommonConstants.INT_SIZE_IN_BYTE + CarbonCommonConstants.INT_SIZE_IN_BYTE
1:bc3e684:             + startKey.length + updatedNoDictionaryStartKey.length);
1:bc3e684:     buffer.putInt(startKey.length);
1:bc3e684:     buffer.putInt(updatedNoDictionaryStartKey.length);
1:bc3e684:     buffer.put(startKey);
1:bc3e684:     buffer.put(updatedNoDictionaryStartKey);
1:bc3e684:     buffer.rewind();
1:bc3e684:     return buffer.array();
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   public byte[] serializeEndKey() {
1:bc3e684:     byte[] updatedNoDictionaryEndKey = updateNoDictionaryStartAndEndKey(getNoDictEndKey());
1:bc3e684:     ByteBuffer buffer = ByteBuffer.allocate(
1:bc3e684:         CarbonCommonConstants.INT_SIZE_IN_BYTE + CarbonCommonConstants.INT_SIZE_IN_BYTE
1:bc3e684:             + endKey.length + updatedNoDictionaryEndKey.length);
1:bc3e684:     buffer.putInt(endKey.length);
1:bc3e684:     buffer.putInt(updatedNoDictionaryEndKey.length);
1:bc3e684:     buffer.put(endKey);
1:bc3e684:     buffer.put(updatedNoDictionaryEndKey);
1:bc3e684:     buffer.rewind();
1:bc3e684:     return buffer.array();
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   /**
1:bc3e684:    * Below method will be used to update the no dictionary start and end key
1:bc3e684:    *
1:bc3e684:    * @param key key to be updated
1:bc3e684:    * @return return no dictionary key
1:bc3e684:    */
1:bc3e684:   public byte[] updateNoDictionaryStartAndEndKey(byte[] key) {
1:bc3e684:     if (key.length == 0) {
1:bc3e684:       return key;
1:bc3e684:     }
1:bc3e684:     // add key to byte buffer remove the length part of the data
1:bc3e684:     ByteBuffer buffer = ByteBuffer.wrap(key, 2, key.length - 2);
1:bc3e684:     // create a output buffer without length
1:bc3e684:     ByteBuffer output = ByteBuffer.allocate(key.length - 2);
1:bc3e684:     short numberOfByteToStorLength = 2;
1:bc3e684:     // as length part is removed, so each no dictionary value index
1:bc3e684:     // needs to be reshuffled by 2 bytes
1:bc3e684:     int NumberOfNoDictSortColumns = segmentProperties.getNumberOfNoDictSortColumns();
1:bc3e684:     for (int i = 0; i < NumberOfNoDictSortColumns; i++) {
1:bc3e684:       output.putShort((short) (buffer.getShort() - numberOfByteToStorLength));
1:bc3e684:     }
1:bc3e684:     // copy the data part
1:bc3e684:     while (buffer.hasRemaining()) {
1:bc3e684:       output.put(buffer.get());
1:bc3e684:     }
1:bc3e684:     output.rewind();
1:bc3e684:     return output.array();
1:bc3e684:   }
1:bc3e684: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Manhua
-------------------------------------------------------------------------------
commit:40c7e8e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public TablePageKey(int pageSize, SegmentProperties segmentProperties,
1:                       boolean hasNoDictionary) {
1:   public void update(int rowId, CarbonRow row, byte[] mdk) {
1:       startKey = mdk;
1:       endKey = mdk;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7422690
/////////////////////////////////////////////////////////////////////////
0:       startKey = WriteStepRowUtil.getMdk(row, mdkGenerator);
0:       endKey = WriteStepRowUtil.getMdk(row, mdkGenerator);
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.key;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.datastore.row.WriteStepRowUtil;
0: import org.apache.carbondata.core.keygenerator.KeyGenException;
0: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.util.NonDictionaryUtil;
1: 
1: public class TablePageKey {
1:   private int pageSize;
1: 
1:   private byte[][] currentNoDictionaryKey;
1: 
1:   // MDK start key
1:   private byte[] startKey;
1: 
1:   // MDK end key
1:   private byte[] endKey;
1: 
1:   // startkey for no dictionary columns
1:   private byte[][] noDictStartKey;
1: 
1:   // endkey for no diciotn
1:   private byte[][] noDictEndKey;
1: 
1:   // startkey for no dictionary columns after packing into one column
1:   private byte[] packedNoDictStartKey;
1: 
1:   // endkey for no dictionary columns after packing into one column
1:   private byte[] packedNoDictEndKey;
1: 
0:   private KeyGenerator mdkGenerator;
1:   private SegmentProperties segmentProperties;
1:   private boolean hasNoDictionary;
1: 
0:   public TablePageKey(int pageSize, KeyGenerator mdkGenerator, SegmentProperties segmentProperties,
0:       boolean hasNoDictionary) {
1:     this.pageSize = pageSize;
0:     this.mdkGenerator = mdkGenerator;
1:     this.segmentProperties = segmentProperties;
1:     this.hasNoDictionary = hasNoDictionary;
1:   }
1: 
1:   /** update all keys based on the input row */
0:   public void update(int rowId, CarbonRow row, byte[] mdk) throws KeyGenException {
1:     if (hasNoDictionary) {
1:       currentNoDictionaryKey = WriteStepRowUtil.getNoDictAndComplexDimension(row);
1:     }
1:     if (rowId == 0) {
0:       startKey = WriteStepRowUtil.getMdk(row, model.getMDKeyGenerator());
1:       noDictStartKey = currentNoDictionaryKey;
1:     }
1:     noDictEndKey = currentNoDictionaryKey;
1:     if (rowId == pageSize - 1) {
0:       endKey = WriteStepRowUtil.getMdk(row, model.getMDKeyGenerator());
1:       finalizeKeys();
1:     }
1:   }
1: 
0:   public Object getKey() {
0:     return this;
1:   }
1: 
1:   /** update all keys if SORT_COLUMNS option is used when creating table */
1:   private void finalizeKeys() {
1:     // If SORT_COLUMNS is used, may need to update start/end keys since the they may
1:     // contains dictionary columns that are not in SORT_COLUMNS, which need to be removed from
1:     // start/end key
1:     int numberOfDictSortColumns = segmentProperties.getNumberOfDictSortColumns();
1:     if (numberOfDictSortColumns > 0) {
1:       // if SORT_COLUMNS contain dictionary columns
1:       int[] keySize = segmentProperties.getFixedLengthKeySplitter().getBlockKeySize();
1:       if (keySize.length > numberOfDictSortColumns) {
1:         // if there are some dictionary columns that are not in SORT_COLUMNS, it will come to here
1:         int newMdkLength = 0;
1:         for (int i = 0; i < numberOfDictSortColumns; i++) {
1:           newMdkLength += keySize[i];
1:         }
1:         byte[] newStartKeyOfSortKey = new byte[newMdkLength];
1:         byte[] newEndKeyOfSortKey = new byte[newMdkLength];
1:         System.arraycopy(startKey, 0, newStartKeyOfSortKey, 0, newMdkLength);
1:         System.arraycopy(endKey, 0, newEndKeyOfSortKey, 0, newMdkLength);
1:         startKey = newStartKeyOfSortKey;
1:         endKey = newEndKeyOfSortKey;
1:       }
1:     } else {
1:       startKey = new byte[0];
1:       endKey = new byte[0];
1:     }
1: 
1:     // Do the same update for noDictionary start/end Key
1:     int numberOfNoDictSortColumns = segmentProperties.getNumberOfNoDictSortColumns();
1:     if (numberOfNoDictSortColumns > 0) {
1:       // if sort_columns contain no-dictionary columns
1:       if (noDictStartKey.length > numberOfNoDictSortColumns) {
1:         byte[][] newNoDictionaryStartKey = new byte[numberOfNoDictSortColumns][];
1:         byte[][] newNoDictionaryEndKey = new byte[numberOfNoDictSortColumns][];
1:         System.arraycopy(
1:             noDictStartKey, 0, newNoDictionaryStartKey, 0, numberOfNoDictSortColumns);
1:         System.arraycopy(
1:             noDictEndKey, 0, newNoDictionaryEndKey, 0, numberOfNoDictSortColumns);
1:         noDictStartKey = newNoDictionaryStartKey;
1:         noDictEndKey = newNoDictionaryEndKey;
1:       }
1:       packedNoDictStartKey =
1:           NonDictionaryUtil.packByteBufferIntoSingleByteArray(noDictStartKey);
1:       packedNoDictEndKey =
1:           NonDictionaryUtil.packByteBufferIntoSingleByteArray(noDictEndKey);
1:     } else {
1:       noDictStartKey = new byte[0][];
1:       noDictEndKey = new byte[0][];
1:       packedNoDictStartKey = new byte[0];
1:       packedNoDictEndKey = new byte[0];
1:     }
1:   }
1: 
0:   public byte[] getStartKey() {
0:     return startKey;
1:   }
1: 
0:   public byte[] getEndKey() {
0:     return endKey;
1:   }
1: 
1:   public byte[] getNoDictStartKey() {
1:     return packedNoDictStartKey;
1:   }
1: 
1:   public byte[] getNoDictEndKey() {
1:     return packedNoDictEndKey;
1:   }
1: 
0:   public int getPageSize() {
0:     return pageSize;
1:   }
1: 
1:   public byte[] serializeStartKey() {
1:     byte[] updatedNoDictionaryStartKey = updateNoDictionaryStartAndEndKey(getNoDictStartKey());
1:     ByteBuffer buffer = ByteBuffer.allocate(
1:         CarbonCommonConstants.INT_SIZE_IN_BYTE + CarbonCommonConstants.INT_SIZE_IN_BYTE
1:             + startKey.length + updatedNoDictionaryStartKey.length);
1:     buffer.putInt(startKey.length);
1:     buffer.putInt(updatedNoDictionaryStartKey.length);
1:     buffer.put(startKey);
1:     buffer.put(updatedNoDictionaryStartKey);
1:     buffer.rewind();
1:     return buffer.array();
1:   }
1: 
1:   public byte[] serializeEndKey() {
1:     byte[] updatedNoDictionaryEndKey = updateNoDictionaryStartAndEndKey(getNoDictEndKey());
1:     ByteBuffer buffer = ByteBuffer.allocate(
1:         CarbonCommonConstants.INT_SIZE_IN_BYTE + CarbonCommonConstants.INT_SIZE_IN_BYTE
1:             + endKey.length + updatedNoDictionaryEndKey.length);
1:     buffer.putInt(endKey.length);
1:     buffer.putInt(updatedNoDictionaryEndKey.length);
1:     buffer.put(endKey);
1:     buffer.put(updatedNoDictionaryEndKey);
1:     buffer.rewind();
1:     return buffer.array();
1:   }
1: 
1:   /**
1:    * Below method will be used to update the no dictionary start and end key
1:    *
1:    * @param key key to be updated
1:    * @return return no dictionary key
1:    */
1:   public byte[] updateNoDictionaryStartAndEndKey(byte[] key) {
1:     if (key.length == 0) {
1:       return key;
1:     }
1:     // add key to byte buffer remove the length part of the data
1:     ByteBuffer buffer = ByteBuffer.wrap(key, 2, key.length - 2);
1:     // create a output buffer without length
1:     ByteBuffer output = ByteBuffer.allocate(key.length - 2);
1:     short numberOfByteToStorLength = 2;
1:     // as length part is removed, so each no dictionary value index
1:     // needs to be reshuffled by 2 bytes
1:     int NumberOfNoDictSortColumns = segmentProperties.getNumberOfNoDictSortColumns();
1:     for (int i = 0; i < NumberOfNoDictSortColumns; i++) {
1:       output.putShort((short) (buffer.getShort() - numberOfByteToStorLength));
1:     }
1:     // copy the data part
1:     while (buffer.hasRemaining()) {
1:       output.put(buffer.get());
1:     }
1:     output.rewind();
1:     return output.array();
1:   }
1: }
============================================================================