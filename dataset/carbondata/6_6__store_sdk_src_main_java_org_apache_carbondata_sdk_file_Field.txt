1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
2:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.sdk.file;
1:1d827c7: 
1:68b359e: import java.util.ArrayList;
1:e740182: import java.util.LinkedList;
1:3202cf5: import java.util.List;
1:3202cf5: 
1:1d827c7: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:1d827c7: import org.apache.carbondata.common.annotations.InterfaceStability;
1:68b359e: import org.apache.carbondata.core.metadata.datatype.ArrayType;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataType;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:68b359e: import org.apache.carbondata.core.metadata.datatype.MapType;
1:3202cf5: import org.apache.carbondata.core.metadata.datatype.StructField;
1:68b359e: import org.apache.carbondata.core.metadata.datatype.StructType;
1:e740182: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:1d827c7: 
1:4b98af2: /**
1:1d827c7:  * A field represent one column
1:4b98af2:  */
1:1d827c7: @InterfaceAudience.User
1:1d827c7: @InterfaceStability.Unstable
1:1d827c7: public class Field {
1:1d827c7: 
1:1d827c7:   private String name;
1:1d827c7:   private DataType type;
1:3202cf5:   private List<StructField> children;
1:3202cf5:   private String parent;
1:fb6dffe:   private String storeType = "columnar";
1:3202cf5:   private int schemaOrdinal = -1;
1:3202cf5:   private int precision = 0;
1:3202cf5:   private int scale = 0;
1:3202cf5:   private String rawSchema = "";
1:3202cf5:   private String columnComment = "";
1:1d827c7: 
1:4b98af2:   /**
1:4b98af2:    * Field Constructor
1:4b98af2:    * @param name name of the field
1:4b98af2:    * @param type datatype of field, specified in strings.
1:4b98af2:    */
1:1d827c7:   public Field(String name, String type) {
1:1d827c7:     this.name = name;
1:1d827c7:     if (type.equalsIgnoreCase("string")) {
1:1d827c7:       this.type = DataTypes.STRING;
1:1345dc6:     } else if (type.equalsIgnoreCase("varchar")) {
1:1345dc6:       this.type = DataTypes.VARCHAR;
1:1d827c7:     } else if (type.equalsIgnoreCase("date")) {
1:1d827c7:       this.type = DataTypes.DATE;
1:1d827c7:     } else if (type.equalsIgnoreCase("timestamp")) {
1:1d827c7:       this.type = DataTypes.TIMESTAMP;
1:1d827c7:     } else if (type.equalsIgnoreCase("boolean")) {
1:1d827c7:       this.type = DataTypes.BOOLEAN;
1:1d827c7:     } else if (type.equalsIgnoreCase("byte")) {
1:1d827c7:       this.type = DataTypes.BYTE;
1:1d827c7:     } else if (type.equalsIgnoreCase("short")) {
1:1d827c7:       this.type = DataTypes.SHORT;
1:1d827c7:     } else if (type.equalsIgnoreCase("int")) {
1:1d827c7:       this.type = DataTypes.INT;
1:1d827c7:     } else if (type.equalsIgnoreCase("long")) {
1:1d827c7:       this.type = DataTypes.LONG;
1:1d827c7:     } else if (type.equalsIgnoreCase("float")) {
1:1d827c7:       this.type = DataTypes.FLOAT;
1:1d827c7:     } else if (type.equalsIgnoreCase("double")) {
1:1d827c7:       this.type = DataTypes.DOUBLE;
1:3202cf5:     } else if (type.equalsIgnoreCase("array")) {
1:3202cf5:       this.type = DataTypes.createDefaultArrayType();
1:3202cf5:     } else if (type.equalsIgnoreCase("struct")) {
1:3202cf5:       this.type = DataTypes.createDefaultStructType();
1:fb6dffe:     } else if (type.equalsIgnoreCase("map")) {
1:fb6dffe:       this.type = DataTypes.createDefaultMapType();
1:fb6dffe:     } else {
1:1d827c7:       throw new IllegalArgumentException("unsupported data type: " + type);
1:3202cf5:     }
3:1d827c7:   }
1:b1c85fa: 
1:3202cf5:   public Field(String name, String type, List<StructField> fields) {
1:3202cf5:     this.name = name;
1:3202cf5:     this.children = fields;
1:3202cf5:     if (type.equalsIgnoreCase("string")) {
1:3202cf5:       this.type = DataTypes.STRING;
1:1345dc6:     } else if (type.equalsIgnoreCase("varchar")) {
1:1345dc6:       this.type = DataTypes.VARCHAR;
1:3202cf5:     } else if (type.equalsIgnoreCase("date")) {
1:3202cf5:       this.type = DataTypes.DATE;
1:3202cf5:     } else if (type.equalsIgnoreCase("timestamp")) {
1:3202cf5:       this.type = DataTypes.TIMESTAMP;
1:3202cf5:     } else if (type.equalsIgnoreCase("boolean")) {
1:3202cf5:       this.type = DataTypes.BOOLEAN;
1:3202cf5:     } else if (type.equalsIgnoreCase("byte")) {
1:3202cf5:       this.type = DataTypes.BYTE;
1:3202cf5:     } else if (type.equalsIgnoreCase("short")) {
1:3202cf5:       this.type = DataTypes.SHORT;
1:3202cf5:     } else if (type.equalsIgnoreCase("int")) {
1:3202cf5:       this.type = DataTypes.INT;
1:3202cf5:     } else if (type.equalsIgnoreCase("long")) {
1:3202cf5:       this.type = DataTypes.LONG;
1:3202cf5:     } else if (type.equalsIgnoreCase("float")) {
1:3202cf5:       this.type = DataTypes.FLOAT;
1:3202cf5:     } else if (type.equalsIgnoreCase("double")) {
1:3202cf5:       this.type = DataTypes.DOUBLE;
1:3202cf5:     } else if (type.equalsIgnoreCase("array")) {
1:b1c85fa:       this.type = DataTypes.createArrayType(fields.get(0).getDataType());
1:3202cf5:     } else if (type.equalsIgnoreCase("struct")) {
2:3202cf5:       this.type = DataTypes.createStructType(fields);
1:fb6dffe:     } else {
1:3202cf5:       throw new IllegalArgumentException("unsupported data type: " + type);
1:3202cf5:     }
1:3202cf5:   }
1:b1c85fa: 
1:3202cf5: 
1:1d827c7: 
1:3202cf5:   public Field(String name, DataType type, List<StructField> fields) {
1:3202cf5:     this.name = name;
1:3202cf5:     this.type = type;
1:3202cf5:     this.children = fields;
1:3202cf5:   }
1:3202cf5: 
1:1d827c7:   public Field(String name, DataType type) {
1:1d827c7:     this.name = name;
1:1d827c7:     this.type = type;
1:68b359e:     initComplexTypeChildren();
1:3202cf5:   }
1:1d827c7: 
1:e740182:   /**
1:e740182:    * Construct Field from ColumnSchema
1:e740182:    *
1:e740182:    * @param columnSchema ColumnSchema, Store the information about the column meta data
1:e740182:    */
1:e740182:   public Field(ColumnSchema columnSchema) {
1:e740182:     this.name = columnSchema.getColumnName();
1:e740182:     this.type = columnSchema.getDataType();
1:e740182:     children = new LinkedList<>();
1:e740182:     schemaOrdinal = columnSchema.getSchemaOrdinal();
1:e740182:     precision = columnSchema.getPrecision();
1:e740182:     scale = columnSchema.getScale();
1:e740182:   }
1:e740182: 
1:1d827c7:   public String getFieldName() {
1:1d827c7:     return name;
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   public DataType getDataType() {
1:1d827c7:     return type;
1:1d827c7:   }
1:3202cf5: 
1:3202cf5:   public List<StructField> getChildren() {
1:3202cf5:     return children;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setChildren(List<StructField> children) {
1:3202cf5:     this.children = children;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public String getParent() {
1:3202cf5:     return parent;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setParent(String parent) {
1:3202cf5:     this.parent = parent;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public String getStoreType() {
1:3202cf5:     return storeType;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public int getSchemaOrdinal() {
1:3202cf5:     return schemaOrdinal;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setSchemaOrdinal(int schemaOrdinal) {
1:3202cf5:     this.schemaOrdinal = schemaOrdinal;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public int getPrecision() {
1:3202cf5:     return precision;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setPrecision(int precision) {
1:3202cf5:     this.precision = precision;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public int getScale() {
1:3202cf5:     return scale;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setScale(int scale) {
1:3202cf5:     this.scale = scale;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public String getRawSchema() {
1:3202cf5:     return rawSchema;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setRawSchema(String rawSchema) {
1:3202cf5:     this.rawSchema = rawSchema;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public String getColumnComment() {
1:3202cf5:     return columnComment;
1:3202cf5:   }
1:3202cf5: 
1:3202cf5:   public void setColumnComment(String columnComment) {
1:3202cf5:     this.columnComment = columnComment;
1:3202cf5:   }
1:f5c7a19: 
1:a9cc434:   /* for SDK, change string type to varchar by default for parent columns */
1:a9cc434:   public void updateDataTypeToVarchar() {
1:a9cc434:     this.type = DataTypes.VARCHAR;
1:a9cc434:   }
1:a9cc434: 
1:f5c7a19:   /*can use to change the case of the schema */
1:f5c7a19:   public void updateNameToLowerCase() {
1:f5c7a19:     this.name = name.toLowerCase();
1:f5c7a19:   }
1:68b359e: 
1:68b359e:   private void initComplexTypeChildren() {
1:68b359e:     if (getDataType().isComplexType()) {
1:68b359e:       StructField subFields = prepareSubFields(getFieldName(), getDataType());
1:68b359e:       if (DataTypes.isArrayType(getDataType()) || DataTypes.isMapType(getDataType())) {
1:68b359e:         children = subFields.getChildren();
1:68b359e:       } else if (DataTypes.isStructType(getDataType())) {
1:68b359e:         children = ((StructType) subFields.getDataType()).getFields();
1:68b359e:       }
1:68b359e:     }
1:68b359e:   }
1:68b359e: 
1:68b359e:   /**
1:68b359e:    * prepare sub fields for complex types
1:68b359e:    *
1:68b359e:    * @param fieldName column name
1:68b359e:    * @param dataType data type of column or it's children
1:68b359e:    * @return
1:68b359e:    */
1:68b359e:   private StructField prepareSubFields(String fieldName, DataType dataType) {
1:68b359e:     if (DataTypes.isArrayType(dataType)) {
1:68b359e:       List<StructField> arrayFields = new ArrayList<>();
1:68b359e:       StructField arrayField = prepareSubFields(fieldName, ((ArrayType) dataType).getElementType());
1:68b359e:       arrayFields.add(arrayField);
1:68b359e:       return new StructField(fieldName, DataTypes.createArrayType(arrayField.getDataType()),
1:68b359e:           arrayFields);
1:68b359e:     } else if (DataTypes.isStructType(dataType)) {
1:68b359e:       List<StructField> structFields = new ArrayList<>();
1:68b359e:       List<StructField> fields = ((StructType) dataType).getFields();
1:68b359e:       for (StructField field : fields) {
1:68b359e:         structFields.add(prepareSubFields(field.getFieldName(), field.getDataType()));
1:68b359e:       }
1:68b359e:       return new StructField(fieldName, DataTypes.createStructType(structFields), structFields);
1:68b359e:     } else if (DataTypes.isMapType(dataType)) {
1:68b359e:       // Internally Map<key, value> is stored as Array<struct<key, value>>. So the below method
1:68b359e:       // will convert a map type into similar field structure. The columnSchema will be formed
1:68b359e:       // as Map<Struct<key,value>>
1:68b359e:       List<StructField> mapFields = new ArrayList<>();
1:68b359e:       MapType mapType = (MapType) dataType;
1:68b359e:       // key is primitive type so type can be fetched directly
1:68b359e:       StructField keyField = new StructField(fieldName + ".key", mapType.getKeyType());
1:68b359e:       StructField valueField = prepareSubFields(fieldName + ".value", mapType.getValueType());
1:68b359e:       mapFields.add(keyField);
1:68b359e:       mapFields.add(valueField);
1:68b359e:       StructField field =
1:68b359e:           new StructField(fieldName + ".val", DataTypes.createStructType(mapFields));
1:68b359e:       MapType mapDataType = DataTypes.createMapType(keyField.getDataType(), field.getDataType());
1:68b359e:       List<StructField> mapStructField = new ArrayList<>();
1:68b359e:       mapStructField.add(field);
1:68b359e:       return new StructField(fieldName, mapDataType, mapStructField);
1:68b359e:     } else {
1:68b359e:       return new StructField(fieldName, dataType);
1:68b359e:     }
1:68b359e:   }
1:1d827c7: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:a9cc434
/////////////////////////////////////////////////////////////////////////
1:   /* for SDK, change string type to varchar by default for parent columns */
1:   public void updateDataTypeToVarchar() {
1:     this.type = DataTypes.VARCHAR;
1:   }
1: 
commit:f5c7a19
/////////////////////////////////////////////////////////////////////////
1: 
1:   /*can use to change the case of the schema */
1:   public void updateNameToLowerCase() {
1:     this.name = name.toLowerCase();
1:   }
commit:4b98af2
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Field Constructor
1:    * @param name name of the field
1:    * @param type datatype of field, specified in strings.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * Field constructor
0:    * @param name name of the field
0:    * @param type datatype of the field of class DataType
1:    */
author:manishgupta88
-------------------------------------------------------------------------------
commit:68b359e
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.carbondata.core.metadata.datatype.ArrayType;
1: import org.apache.carbondata.core.metadata.datatype.MapType;
1: import org.apache.carbondata.core.metadata.datatype.StructType;
/////////////////////////////////////////////////////////////////////////
1:     initComplexTypeChildren();
/////////////////////////////////////////////////////////////////////////
1: 
1:   private void initComplexTypeChildren() {
1:     if (getDataType().isComplexType()) {
1:       StructField subFields = prepareSubFields(getFieldName(), getDataType());
1:       if (DataTypes.isArrayType(getDataType()) || DataTypes.isMapType(getDataType())) {
1:         children = subFields.getChildren();
1:       } else if (DataTypes.isStructType(getDataType())) {
1:         children = ((StructType) subFields.getDataType()).getFields();
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * prepare sub fields for complex types
1:    *
1:    * @param fieldName column name
1:    * @param dataType data type of column or it's children
1:    * @return
1:    */
1:   private StructField prepareSubFields(String fieldName, DataType dataType) {
1:     if (DataTypes.isArrayType(dataType)) {
1:       List<StructField> arrayFields = new ArrayList<>();
1:       StructField arrayField = prepareSubFields(fieldName, ((ArrayType) dataType).getElementType());
1:       arrayFields.add(arrayField);
1:       return new StructField(fieldName, DataTypes.createArrayType(arrayField.getDataType()),
1:           arrayFields);
1:     } else if (DataTypes.isStructType(dataType)) {
1:       List<StructField> structFields = new ArrayList<>();
1:       List<StructField> fields = ((StructType) dataType).getFields();
1:       for (StructField field : fields) {
1:         structFields.add(prepareSubFields(field.getFieldName(), field.getDataType()));
1:       }
1:       return new StructField(fieldName, DataTypes.createStructType(structFields), structFields);
1:     } else if (DataTypes.isMapType(dataType)) {
1:       // Internally Map<key, value> is stored as Array<struct<key, value>>. So the below method
1:       // will convert a map type into similar field structure. The columnSchema will be formed
1:       // as Map<Struct<key,value>>
1:       List<StructField> mapFields = new ArrayList<>();
1:       MapType mapType = (MapType) dataType;
1:       // key is primitive type so type can be fetched directly
1:       StructField keyField = new StructField(fieldName + ".key", mapType.getKeyType());
1:       StructField valueField = prepareSubFields(fieldName + ".value", mapType.getValueType());
1:       mapFields.add(keyField);
1:       mapFields.add(valueField);
1:       StructField field =
1:           new StructField(fieldName + ".val", DataTypes.createStructType(mapFields));
1:       MapType mapDataType = DataTypes.createMapType(keyField.getDataType(), field.getDataType());
1:       List<StructField> mapStructField = new ArrayList<>();
1:       mapStructField.add(field);
1:       return new StructField(fieldName, mapDataType, mapStructField);
1:     } else {
1:       return new StructField(fieldName, dataType);
1:     }
1:   }
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1:   private String storeType = "columnar";
/////////////////////////////////////////////////////////////////////////
1:     } else if (type.equalsIgnoreCase("map")) {
1:       this.type = DataTypes.createDefaultMapType();
1:     } else {
/////////////////////////////////////////////////////////////////////////
1:     } else {
author:xuchuanyin
-------------------------------------------------------------------------------
commit:1345dc6
/////////////////////////////////////////////////////////////////////////
1:     } else if (type.equalsIgnoreCase("varchar")) {
1:       this.type = DataTypes.VARCHAR;
/////////////////////////////////////////////////////////////////////////
1:     } else if (type.equalsIgnoreCase("varchar")) {
1:       this.type = DataTypes.VARCHAR;
author:xubo245
-------------------------------------------------------------------------------
commit:e740182
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Construct Field from ColumnSchema
1:    *
1:    * @param columnSchema ColumnSchema, Store the information about the column meta data
1:    */
1:   public Field(ColumnSchema columnSchema) {
1:     this.name = columnSchema.getColumnName();
1:     this.type = columnSchema.getDataType();
1:     children = new LinkedList<>();
1:     schemaOrdinal = columnSchema.getSchemaOrdinal();
1:     precision = columnSchema.getPrecision();
1:     scale = columnSchema.getScale();
1:   }
1: 
author:sounakr
-------------------------------------------------------------------------------
commit:b1c85fa
/////////////////////////////////////////////////////////////////////////
1:       this.type = DataTypes.createArrayType(fields.get(0).getDataType());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.datatype.StructField;
/////////////////////////////////////////////////////////////////////////
1:   private List<StructField> children;
1:   private String parent;
0:   private String storeType = "columnnar";
1:   private int schemaOrdinal = -1;
1:   private int precision = 0;
1:   private int scale = 0;
1:   private String rawSchema = "";
1:   private String columnComment = "";
/////////////////////////////////////////////////////////////////////////
1:     } else if (type.equalsIgnoreCase("array")) {
1:       this.type = DataTypes.createDefaultArrayType();
1:     } else if (type.equalsIgnoreCase("struct")) {
1:       this.type = DataTypes.createDefaultStructType();
1:     }
0:     else {
1:   public Field(String name, String type, List<StructField> fields) {
1:     this.name = name;
1:     this.children = fields;
1:     if (type.equalsIgnoreCase("string")) {
1:       this.type = DataTypes.STRING;
1:     } else if (type.equalsIgnoreCase("date")) {
1:       this.type = DataTypes.DATE;
1:     } else if (type.equalsIgnoreCase("timestamp")) {
1:       this.type = DataTypes.TIMESTAMP;
1:     } else if (type.equalsIgnoreCase("boolean")) {
1:       this.type = DataTypes.BOOLEAN;
1:     } else if (type.equalsIgnoreCase("byte")) {
1:       this.type = DataTypes.BYTE;
1:     } else if (type.equalsIgnoreCase("short")) {
1:       this.type = DataTypes.SHORT;
1:     } else if (type.equalsIgnoreCase("int")) {
1:       this.type = DataTypes.INT;
1:     } else if (type.equalsIgnoreCase("long")) {
1:       this.type = DataTypes.LONG;
1:     } else if (type.equalsIgnoreCase("float")) {
1:       this.type = DataTypes.FLOAT;
1:     } else if (type.equalsIgnoreCase("double")) {
1:       this.type = DataTypes.DOUBLE;
1:     } else if (type.equalsIgnoreCase("array")) {
1:       this.type = DataTypes.createStructType(fields);
1:     } else if (type.equalsIgnoreCase("struct")) {
1:       this.type = DataTypes.createStructType(fields);
1:     }
0:     else {
1:       throw new IllegalArgumentException("unsupported data type: " + type);
1:     }
1:   }
1: 
1:   public Field(String name, DataType type, List<StructField> fields) {
1:     this.name = name;
1:     this.type = type;
1:     this.children = fields;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public List<StructField> getChildren() {
1:     return children;
1:   }
1: 
1:   public void setChildren(List<StructField> children) {
1:     this.children = children;
1:   }
1: 
1:   public String getParent() {
1:     return parent;
1:   }
1: 
1:   public void setParent(String parent) {
1:     this.parent = parent;
1:   }
1: 
1:   public String getStoreType() {
1:     return storeType;
1:   }
1: 
1:   public int getSchemaOrdinal() {
1:     return schemaOrdinal;
1:   }
1: 
1:   public void setSchemaOrdinal(int schemaOrdinal) {
1:     this.schemaOrdinal = schemaOrdinal;
1:   }
1: 
1:   public int getPrecision() {
1:     return precision;
1:   }
1: 
1:   public void setPrecision(int precision) {
1:     this.precision = precision;
1:   }
1: 
1:   public int getScale() {
1:     return scale;
1:   }
1: 
1:   public void setScale(int scale) {
1:     this.scale = scale;
1:   }
1: 
1:   public String getRawSchema() {
1:     return rawSchema;
1:   }
1: 
1:   public void setRawSchema(String rawSchema) {
1:     this.rawSchema = rawSchema;
1:   }
1: 
1:   public String getColumnComment() {
1:     return columnComment;
1:   }
1: 
1:   public void setColumnComment(String columnComment) {
1:     this.columnComment = columnComment;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.sdk.file;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: 
0: /**
1:  * A field represent one column
1:  */
1: @InterfaceAudience.User
1: @InterfaceStability.Unstable
1: public class Field {
1: 
1:   private String name;
1:   private DataType type;
1: 
1:   public Field(String name, String type) {
1:     this.name = name;
1:     if (type.equalsIgnoreCase("string")) {
1:       this.type = DataTypes.STRING;
1:     } else if (type.equalsIgnoreCase("date")) {
1:       this.type = DataTypes.DATE;
1:     } else if (type.equalsIgnoreCase("timestamp")) {
1:       this.type = DataTypes.TIMESTAMP;
1:     } else if (type.equalsIgnoreCase("boolean")) {
1:       this.type = DataTypes.BOOLEAN;
1:     } else if (type.equalsIgnoreCase("byte")) {
1:       this.type = DataTypes.BYTE;
1:     } else if (type.equalsIgnoreCase("short")) {
1:       this.type = DataTypes.SHORT;
1:     } else if (type.equalsIgnoreCase("int")) {
1:       this.type = DataTypes.INT;
1:     } else if (type.equalsIgnoreCase("long")) {
1:       this.type = DataTypes.LONG;
1:     } else if (type.equalsIgnoreCase("float")) {
1:       this.type = DataTypes.FLOAT;
1:     } else if (type.equalsIgnoreCase("double")) {
1:       this.type = DataTypes.DOUBLE;
0:     } else {
1:       throw new IllegalArgumentException("unsupported data type: " + type);
1:     }
1:   }
1: 
1:   public Field(String name, DataType type) {
1:     this.name = name;
1:     this.type = type;
1:   }
1: 
1:   public String getFieldName() {
1:     return name;
1:   }
1: 
1:   public DataType getDataType() {
1:     return type;
1:   }
1: }
============================================================================