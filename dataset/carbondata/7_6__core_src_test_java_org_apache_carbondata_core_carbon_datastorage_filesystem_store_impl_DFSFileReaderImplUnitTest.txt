1:9e66ff7: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9e66ff7:  *
1:9e66ff7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9e66ff7:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:9e66ff7:  */
1:9e66ff7: package org.apache.carbondata.core.carbon.datastorage.filesystem.store.impl;
6:9e66ff7: 
1:9e66ff7: import java.io.BufferedWriter;
1:9e66ff7: import java.io.File;
1:9e66ff7: import java.io.FileOutputStream;
1:9e66ff7: import java.io.IOException;
1:9e66ff7: import java.io.OutputStreamWriter;
1:9e66ff7: 
1:daa6465: import org.apache.carbondata.core.datastore.impl.DFSFileReaderImpl;
1:9e66ff7: 
1:9e66ff7: import mockit.Mock;
1:9e66ff7: import mockit.MockUp;
1:2a9604c: import org.apache.hadoop.conf.Configuration;
1:9e66ff7: import org.apache.hadoop.fs.FSDataInputStream;
1:9e66ff7: import org.apache.hadoop.fs.FileSystem;
1:9e66ff7: import org.apache.hadoop.fs.Path;
1:9e66ff7: import org.junit.AfterClass;
1:9e66ff7: import org.junit.BeforeClass;
1:9e66ff7: import org.junit.Test;
1:9e66ff7: 
1:9e66ff7: import static org.hamcrest.CoreMatchers.equalTo;
1:9e66ff7: import static org.hamcrest.CoreMatchers.is;
1:9e66ff7: import static org.junit.Assert.assertThat;
1:9e66ff7: 
1:daa6465: public class DFSFileReaderImplUnitTest {
1:daa6465:   private static DFSFileReaderImpl dfsFileHolder;
1:9e66ff7:   private static String fileName;
1:9e66ff7:   private static String fileNameWithEmptyContent;
1:9e66ff7:   private static File file;
1:9e66ff7:   private static File fileWithEmptyContent;
1:9e66ff7: 
1:9e66ff7:   @BeforeClass public static void setup() {
1:2a9604c:     dfsFileHolder = new DFSFileReaderImpl(new Configuration());
1:9e66ff7:     file = new File("Test.carbondata");
1:9e66ff7:     fileWithEmptyContent = new File("TestEXception.carbondata");
1:9e66ff7: 
1:859d71c:     if (file.exists()) {
1:859d71c:       file.delete();
2:9e66ff7:     }
1:9e66ff7:     if (!fileWithEmptyContent.exists()) try {
1:9e66ff7:       fileWithEmptyContent.createNewFile();
2:9e66ff7:     } catch (IOException e) {
2:9e66ff7:       e.printStackTrace();
1:9e66ff7:     }
2:9e66ff7:     try {
1:859d71c:       FileOutputStream of = new FileOutputStream(file, false);
1:9e66ff7:       BufferedWriter br = new BufferedWriter(new OutputStreamWriter(of, "UTF-8"));
1:9e66ff7:       br.write("Hello World");
1:9e66ff7:       br.close();
1:859d71c:       of.flush();
1:859d71c:       of.close();
2:9e66ff7:     } catch (Exception e) {
1:9e66ff7:       e.getMessage();
1:9e66ff7:     }
1:9e66ff7:     fileName = file.getAbsolutePath();
1:9e66ff7:     fileNameWithEmptyContent = fileWithEmptyContent.getAbsolutePath();
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @AfterClass public static void tearDown() throws IOException  {
1:9e66ff7:     file.delete();
1:9e66ff7:     fileWithEmptyContent.delete();
1:9e66ff7:     dfsFileHolder.finish();
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testReadByteArray() throws IOException  {
1:9e66ff7:     byte[] result = dfsFileHolder.readByteArray(fileName, 1);
1:9e66ff7:     byte[] expected_result = new byte[] { 72 };
1:9e66ff7:     assertThat(result, is(equalTo(expected_result)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testReadByteArrayWithFilePath() throws IOException  {
1:9e66ff7:     byte[] result = dfsFileHolder.readByteArray(fileName, 2L, 2);
1:9e66ff7:     byte[] expected_result = { 108, 108 };
1:9e66ff7:     assertThat(result, is(equalTo(expected_result)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testReadLong() throws IOException  {
1:9e66ff7:     long actualResult = dfsFileHolder.readLong(fileName, 1L);
1:9e66ff7:     long expectedResult = 7308335519855243122L;
1:9e66ff7:     assertThat(actualResult, is(equalTo(expectedResult)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test(expected = IOException.class)
1:eaadc88:   public void testReadLongForIoException() throws IOException {
1:9e66ff7:     dfsFileHolder.readLong(fileNameWithEmptyContent, 1L);
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test(expected = IOException.class)
1:eaadc88:   public void testReadIntForIoException() throws IOException{
1:9e66ff7:     dfsFileHolder.readInt(fileNameWithEmptyContent, 1L);
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testReadInt() throws IOException  {
1:9e66ff7:     int actualResult = dfsFileHolder.readInt(fileName, 1L);
1:9e66ff7:     int expectedResult = 1701604463;
1:9e66ff7:     assertThat(actualResult, is(equalTo(expectedResult)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testReadIntWithFileName() throws IOException {
1:9e66ff7:     int actualResult = dfsFileHolder.readInt(fileName);
1:9e66ff7:     int expectedResult = 1701604463;
1:9e66ff7:     assertThat(actualResult, is(equalTo(expectedResult)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test(expected = IOException.class)
1:eaadc88:   public void testReadIntWithFileNameForIOException() throws IOException {
1:9e66ff7:     dfsFileHolder.readInt(fileNameWithEmptyContent);
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test public void testDouble() throws IOException  {
1:9e66ff7:     double actualResult = dfsFileHolder.readDouble(fileName, 1L);
1:9e66ff7:     double expectedResult = 7.3083355198552433E18;
1:9e66ff7:     assertThat(actualResult, is(equalTo(expectedResult)));
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test(expected = IOException.class)
1:eaadc88:   public void testDoubleForIoException() throws IOException {
1:9e66ff7:     dfsFileHolder.readDouble(fileNameWithEmptyContent, 1L);
1:9e66ff7:   }
1:9e66ff7: 
1:eaadc88:   @Test
1:eaadc88:   public void testDoubleForIoExceptionwithUpdateCache() throws IOException {
1:9e66ff7:     new MockUp<FileSystem>() {
1:9e66ff7:       @SuppressWarnings("unused") @Mock public FSDataInputStream open(Path file)
1:9e66ff7:           throws IOException {
1:9e66ff7:         throw new IOException();
1:9e66ff7:       }
1:9e66ff7: 
1:9e66ff7:     };
1:eaadc88:     dfsFileHolder.readDouble(fileName, 1L);
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:     dfsFileHolder = new DFSFileReaderImpl(new Configuration());
author:xuchuanyin
-------------------------------------------------------------------------------
commit:859d71c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (file.exists()) {
1:       file.delete();
/////////////////////////////////////////////////////////////////////////
1:       FileOutputStream of = new FileOutputStream(file, false);
1:       of.flush();
1:       of.close();
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.DFSFileReaderImpl;
/////////////////////////////////////////////////////////////////////////
1: public class DFSFileReaderImplUnitTest {
1:   private static DFSFileReaderImpl dfsFileHolder;
0:     dfsFileHolder = new DFSFileReaderImpl();
author:ravipesala
-------------------------------------------------------------------------------
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.impl.DFSFileHolderImpl;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:   @AfterClass public static void tearDown() throws IOException  {
1:   @Test public void testReadByteArray() throws IOException  {
1:   @Test public void testReadByteArrayWithFilePath() throws IOException  {
1:   @Test public void testReadLong() throws IOException  {
1:   @Test(expected = IOException.class)
1:   public void testReadLongForIoException() throws IOException {
1:   @Test(expected = IOException.class)
1:   public void testReadIntForIoException() throws IOException{
1:   @Test public void testReadInt() throws IOException  {
1:   @Test public void testReadIntWithFileName() throws IOException {
1:   @Test(expected = IOException.class)
1:   public void testReadIntWithFileNameForIOException() throws IOException {
1:   @Test public void testDouble() throws IOException  {
1:   @Test(expected = IOException.class)
1:   public void testDoubleForIoException() throws IOException {
1:   @Test
1:   public void testDoubleForIoExceptionwithUpdateCache() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     dfsFileHolder.readDouble(fileName, 1L);
author:anubhav100
-------------------------------------------------------------------------------
commit:9e66ff7
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.carbon.datastorage.filesystem.store.impl;
1: 
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: 
0: import org.apache.carbondata.core.datastorage.store.impl.DFSFileHolderImpl;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.apache.hadoop.fs.FSDataInputStream;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.CoreMatchers.is;
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertThat;
0: import static org.pentaho.di.core.util.Assert.assertNull;
1: 
0: public class DFSFileHolderImplUnitTest {
1: 
0:   private static DFSFileHolderImpl dfsFileHolder;
1:   private static String fileName;
1:   private static String fileNameWithEmptyContent;
1:   private static File file;
1:   private static File fileWithEmptyContent;
1: 
1:   @BeforeClass public static void setup() {
0:     dfsFileHolder = new DFSFileHolderImpl();
1:     file = new File("Test.carbondata");
1:     fileWithEmptyContent = new File("TestEXception.carbondata");
1: 
0:     if (!file.exists()) try {
0:       file.createNewFile();
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:     }
1:     if (!fileWithEmptyContent.exists()) try {
1:       fileWithEmptyContent.createNewFile();
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:     }
1:     try {
0:       FileOutputStream of = new FileOutputStream(file, true);
1:       BufferedWriter br = new BufferedWriter(new OutputStreamWriter(of, "UTF-8"));
1:       br.write("Hello World");
1:       br.close();
1:     } catch (Exception e) {
1:       e.getMessage();
1:     }
1:     fileName = file.getAbsolutePath();
1:     fileNameWithEmptyContent = fileWithEmptyContent.getAbsolutePath();
1:   }
1: 
0:   @AfterClass public static void tearDown() {
1:     file.delete();
1:     fileWithEmptyContent.delete();
1:     dfsFileHolder.finish();
1:   }
1: 
0:   @Test public void testReadByteArray() {
1:     byte[] result = dfsFileHolder.readByteArray(fileName, 1);
1:     byte[] expected_result = new byte[] { 72 };
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
0:   @Test public void testReadByteArrayWithFilePath() {
1:     byte[] result = dfsFileHolder.readByteArray(fileName, 2L, 2);
1:     byte[] expected_result = { 108, 108 };
1:     assertThat(result, is(equalTo(expected_result)));
1:   }
1: 
0:   @Test public void testReadLong() {
1:     long actualResult = dfsFileHolder.readLong(fileName, 1L);
1:     long expectedResult = 7308335519855243122L;
1:     assertThat(actualResult, is(equalTo(expectedResult)));
1:   }
1: 
0:   @Test public void testReadLongForIoException() throws IOException {
1:     dfsFileHolder.readLong(fileNameWithEmptyContent, 1L);
1: 
1:   }
1: 
0:   @Test public void testReadIntForIoException() throws IOException {
1:     dfsFileHolder.readInt(fileNameWithEmptyContent, 1L);
1:   }
1: 
0:   @Test public void testReadInt() {
1:     int actualResult = dfsFileHolder.readInt(fileName, 1L);
1:     int expectedResult = 1701604463;
1:     assertThat(actualResult, is(equalTo(expectedResult)));
1:   }
1: 
0:   @Test public void testReadIntWithFileName() {
1:     int actualResult = dfsFileHolder.readInt(fileName);
1:     int expectedResult = 1701604463;
1:     assertThat(actualResult, is(equalTo(expectedResult)));
1:   }
1: 
0:   @Test public void testReadIntWithFileNameForIOException() {
1:     dfsFileHolder.readInt(fileNameWithEmptyContent);
1: 
1:   }
1: 
0:   @Test public void testDouble() {
1:     double actualResult = dfsFileHolder.readDouble(fileName, 1L);
1:     double expectedResult = 7.3083355198552433E18;
1:     assertThat(actualResult, is(equalTo(expectedResult)));
1:   }
1: 
0:   @Test public void testDoubleForIoException() throws IOException {
1:     dfsFileHolder.readDouble(fileNameWithEmptyContent, 1L);
1: 
1:   }
1: 
0:   @Test public void testDoubleForIoExceptionwithUpdateCache() throws Exception {
1:     new MockUp<FileSystem>() {
1:       @SuppressWarnings("unused") @Mock public FSDataInputStream open(Path file)
1:           throws IOException {
1:         throw new IOException();
1:       }
1: 
1:     };
0:     String expected = null;
1:     try {
0:       dfsFileHolder.readDouble(fileName, 1L);
1:     } catch (Exception e) {
0:       assertNull(e.getMessage());
1:     }
1: 
1:   }
1: 
1: }
============================================================================