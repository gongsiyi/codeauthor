1:4422c52: /*
1:32bf296:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:32bf296:  * contributor license agreements.  See the NOTICE file distributed with
1:32bf296:  * this work for additional information regarding copyright ownership.
1:32bf296:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:32bf296:  * (the "License"); you may not use this file except in compliance with
1:32bf296:  * the License.  You may obtain a copy of the License at
1:4422c52:  *
1:32bf296:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4422c52:  *
1:4422c52:  * Unless required by applicable law or agreed to in writing, software
1:4422c52:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4422c52:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4422c52:  * See the License for the specific language governing permissions and
1:4422c52:  * limitations under the License.
1:4422c52:  */
1:32bf296: 
1:32bf296: package org.apache.carbondata.presto;
12:4422c52: 
1:d4a1577: import java.util.Map;
1:d4a1577: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:4422c52: import com.facebook.presto.spi.ConnectorHandleResolver;
1:4422c52: import com.facebook.presto.spi.classloader.ThreadContextClassLoader;
1:4422c52: import com.facebook.presto.spi.connector.*;
1:e5e74fc: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata;
1:9669c0b: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorPageSourceProvider;
1:4422c52: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorSplitManager;
1:4422c52: import com.google.common.base.Throwables;
1:4422c52: import com.google.inject.Injector;
1:4422c52: import io.airlift.bootstrap.Bootstrap;
1:4422c52: import io.airlift.bootstrap.LifeCycleManager;
1:4422c52: import io.airlift.json.JsonModule;
1:4422c52: 
1:4422c52: 
1:4422c52: /**
1:4422c52:  * Build Carbondata Connector
1:4422c52:  * It will be called by CarbondataPlugin
1:4422c52:  */
1:2712330: public class CarbondataConnectorFactory implements ConnectorFactory {
1:4422c52: 
1:2712330:   private final String name;
1:2712330:   private final ClassLoader classLoader;
1:2712330: 
1:2712330:   public CarbondataConnectorFactory(String connectorName, ClassLoader classLoader) {
1:2712330:     this.name = connectorName;
1:2712330:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
1:2712330:   }
1:2712330: 
1:2712330:   @Override public String getName() {
1:2712330:     return name;
1:2712330:   }
1:2712330: 
1:2712330:   @Override public ConnectorHandleResolver getHandleResolver() {
1:2712330:     return new CarbondataHandleResolver();
1:2712330:   }
1:2712330: 
1:2712330:   @Override public Connector create(String connectorId, Map<String, String> config,
1:2712330:       ConnectorContext context) {
1:2712330:     requireNonNull(config, "config is null");
1:2712330: 
1:2712330:     try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(classLoader)) {
1:2712330:       Bootstrap app = new Bootstrap(new JsonModule(),
1:2712330:           new CarbondataModule(connectorId, context.getTypeManager()));
1:2712330: 
1:2712330:       Injector injector =
1:2712330:           app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(config)
1:2712330:               .initialize();
1:2712330: 
1:2712330:       LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);
1:e5e74fc:       ConnectorMetadata metadata = injector.getInstance(CarbondataMetadata.class);
1:2712330:       ConnectorSplitManager splitManager = injector.getInstance(ConnectorSplitManager.class);
1:d4a1577:       ConnectorPageSourceProvider connectorPageSource =
1:d4a1577:           injector.getInstance(ConnectorPageSourceProvider.class);
1:2712330: 
1:d4a1577:       return new CarbondataConnector(lifeCycleManager,
1:d4a1577:           new ClassLoaderSafeConnectorMetadata(metadata, classLoader),
1:d4a1577:           new ClassLoaderSafeConnectorSplitManager(splitManager, classLoader), classLoader,
1:d4a1577:           new ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader));
1:2712330:     } catch (Exception e) {
1:2712330:       throw Throwables.propagate(e);
1:2712330:     }
5:4422c52:   }
1:4422c52: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
1: import static java.util.Objects.requireNonNull;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       ConnectorPageSourceProvider connectorPageSource =
1:           injector.getInstance(ConnectorPageSourceProvider.class);
1:       return new CarbondataConnector(lifeCycleManager,
1:           new ClassLoaderSafeConnectorMetadata(metadata, classLoader),
1:           new ClassLoaderSafeConnectorSplitManager(splitManager, classLoader), classLoader,
1:           new ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader));
author:Bhavya
-------------------------------------------------------------------------------
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
0:           new ClassLoaderSafeConnectorSplitManager(splitManager, classLoader),
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
1: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata;
/////////////////////////////////////////////////////////////////////////
1:       ConnectorMetadata metadata = injector.getInstance(CarbondataMetadata.class);
0:       return new CarbondataConnector(lifeCycleManager, new ClassLoaderSafeConnectorMetadata(metadata,classLoader),
commit:9669c0b
/////////////////////////////////////////////////////////////////////////
1: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorPageSourceProvider;
/////////////////////////////////////////////////////////////////////////
0:        ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);
0:           classLoader,
0:           new ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader)
author:bianhq
-------------------------------------------------------------------------------
commit:b699ee6
/////////////////////////////////////////////////////////////////////////
0:       ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);
author:chenliang613
-------------------------------------------------------------------------------
commit:7c0e660
/////////////////////////////////////////////////////////////////////////
commit:7ee8e27
/////////////////////////////////////////////////////////////////////////
commit:2712330
/////////////////////////////////////////////////////////////////////////
1: public class CarbondataConnectorFactory implements ConnectorFactory {
1:   private final String name;
1:   private final ClassLoader classLoader;
1:   public CarbondataConnectorFactory(String connectorName, ClassLoader classLoader) {
1:     this.name = connectorName;
1:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
1:   }
1: 
1:   @Override public String getName() {
1:     return name;
1:   }
1: 
1:   @Override public ConnectorHandleResolver getHandleResolver() {
1:     return new CarbondataHandleResolver();
1:   }
1: 
1:   @Override public Connector create(String connectorId, Map<String, String> config,
1:       ConnectorContext context) {
1:     requireNonNull(config, "config is null");
1: 
1:     try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(classLoader)) {
1:       Bootstrap app = new Bootstrap(new JsonModule(),
1:           new CarbondataModule(connectorId, context.getTypeManager()));
1: 
1:       Injector injector =
1:           app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(config)
1:               .initialize();
1: 
1:       LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);
0:       CarbondataMetadata metadata = injector.getInstance(CarbondataMetadata.class);
0:       //HiveTransactionManager transactionManager = injector.getInstance(HiveTransactionManager.class);
1:       ConnectorSplitManager splitManager = injector.getInstance(ConnectorSplitManager.class);
0:       ConnectorRecordSetProvider connectorRecordSet =
0:           injector.getInstance(ConnectorRecordSetProvider.class);
0:       //ConnectorAccessControl accessControl = injector.getInstance(ConnectorAccessControl.class);
1: 
0:       //ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);
0:       //ConnectorPageSinkProvider pageSinkProvider = injector.getInstance(ConnectorPageSinkProvider.class);
0:       //ConnectorNodePartitioningProvider connectorDistributionProvider = injector.getInstance(ConnectorNodePartitioningProvider.class);
0:       //HiveSessionProperties hiveSessionProperties = injector.getInstance(HiveSessionProperties.class);
0:       //HiveTableProperties hiveTableProperties = injector.getInstance(HiveTableProperties.class);
1: 
0:       return new CarbondataConnector(lifeCycleManager, metadata,
0:           new ClassLoaderSafeConnectorSplitManager(splitManager, classLoader), connectorRecordSet,
0:           //new ClassLoaderSafeConnectorRecordSetProvider(, classLoader),
0:           classLoader
0:           //new ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader),
0:           //new ClassLoaderSafeConnectorPageSinkProvider(pageSinkProvider, classLoader),
0:           //new ClassLoaderSafeNodePartitioningProvider(connectorDistributionProvider, classLoader),
0:       );
1:     } catch (Exception e) {
1:       throw Throwables.propagate(e);
1:   }
commit:32bf296
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *    http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: package org.apache.carbondata.presto;
commit:9d7dbea
author:ffpeng90
-------------------------------------------------------------------------------
commit:4422c52
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
1:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.presto;
1: 
1: import com.facebook.presto.spi.ConnectorHandleResolver;
1: import com.facebook.presto.spi.classloader.ThreadContextClassLoader;
1: import com.facebook.presto.spi.connector.*;
1: import com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorSplitManager;
1: import com.google.common.base.Throwables;
1: import com.google.inject.Injector;
1: import io.airlift.bootstrap.Bootstrap;
1: import io.airlift.bootstrap.LifeCycleManager;
1: import io.airlift.json.JsonModule;
1: 
0: import java.util.Map;
1: 
0: import static java.util.Objects.requireNonNull;
1: 
1: /**
1:  * Build Carbondata Connector
1:  * It will be called by CarbondataPlugin
1:  */
0: public class CarbondataConnectorFactory implements ConnectorFactory {
1: 
0:   private final String name;
0:   private final ClassLoader classLoader;
1: 
0:   public CarbondataConnectorFactory(String connectorName, ClassLoader classLoader) {
0:     this.name = connectorName;
0:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
1:   }
1: 
0:   @Override public String getName() {
0:     return name;
1:   }
1: 
0:   @Override public ConnectorHandleResolver getHandleResolver() {
0:     return new CarbondataHandleResolver();
1:   }
1: 
0:   @Override public Connector create(String connectorId, Map<String, String> config,
0:       ConnectorContext context) {
0:     requireNonNull(config, "config is null");
1: 
0:     try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(classLoader)) {
0:       Bootstrap app = new Bootstrap(new JsonModule(),
0:           new CarbondataModule(connectorId, context.getTypeManager()));
1: 
0:       Injector injector =
0:           app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(config)
0:               .initialize();
1: 
0:       LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);
0:       CarbondataMetadata metadata = injector.getInstance(CarbondataMetadata.class);
0:       //HiveTransactionManager transactionManager = injector.getInstance(HiveTransactionManager.class);
0:       ConnectorSplitManager splitManager = injector.getInstance(ConnectorSplitManager.class);
0:       ConnectorRecordSetProvider connectorRecordSet =
0:           injector.getInstance(ConnectorRecordSetProvider.class);
0:       //ConnectorAccessControl accessControl = injector.getInstance(ConnectorAccessControl.class);
1: 
0:       //ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);
0:       //ConnectorPageSinkProvider pageSinkProvider = injector.getInstance(ConnectorPageSinkProvider.class);
0:       //ConnectorNodePartitioningProvider connectorDistributionProvider = injector.getInstance(ConnectorNodePartitioningProvider.class);
0:       //HiveSessionProperties hiveSessionProperties = injector.getInstance(HiveSessionProperties.class);
0:       //HiveTableProperties hiveTableProperties = injector.getInstance(HiveTableProperties.class);
1: 
0:       return new CarbondataConnector(lifeCycleManager, metadata,
0:           new ClassLoaderSafeConnectorSplitManager(splitManager, classLoader), connectorRecordSet,
0:           //new ClassLoaderSafeConnectorRecordSetProvider(, classLoader),
0:           classLoader
0:           //new ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader),
0:           //new ClassLoaderSafeConnectorPageSinkProvider(pageSinkProvider, classLoader),
0:           //new ClassLoaderSafeNodePartitioningProvider(connectorDistributionProvider, classLoader),
0:       );
0:     } catch (Exception e) {
0:       throw Throwables.propagate(e);
1:     }
1:   }
1: }
============================================================================