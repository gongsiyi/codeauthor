1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: 
1:4daf063: package org.apache.carbondata.core.dictionary.service;
1:4daf063: 
1:4daf063: import java.net.Inet4Address;
1:4daf063: import java.net.InetAddress;
1:4daf063: import java.net.NetworkInterface;
1:4daf063: import java.net.SocketException;
1:4daf063: import java.net.UnknownHostException;
1:4daf063: import java.util.ArrayList;
1:4daf063: import java.util.Collections;
1:4daf063: import java.util.Enumeration;
1:4daf063: import java.util.List;
1:4daf063: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: 
1:4daf063: import org.apache.commons.lang3.SystemUtils;
1:4daf063: 
1:4daf063: public abstract class AbstractDictionaryServer {
1:4daf063: 
1:4daf063:   public String findLocalIpAddress(LogService LOGGER) {
1:4daf063:     try {
1:4daf063:       String defaultIpOverride = System.getenv("SPARK_LOCAL_IP");
1:4daf063:       if (defaultIpOverride != null) {
1:4daf063:         return defaultIpOverride;
1:4daf063:       } else {
1:4daf063:         InetAddress address = InetAddress.getLocalHost();
1:4daf063:         if (address.isLoopbackAddress()) {
1:4daf063:           // Address resolves to something like 127.0.1.1, which happens on Debian; try to find
1:4daf063:           // a better address using the local network interfaces
1:4daf063:           // getNetworkInterfaces returns ifs in reverse order compared to ifconfig output order
1:4daf063:           // on unix-like system. On windows, it returns in index order.
1:4daf063:           // It's more proper to pick ip address following system output order.
1:4daf063:           Enumeration<NetworkInterface> activeNetworkIFs = NetworkInterface.getNetworkInterfaces();
1:4daf063:           List<NetworkInterface> reOrderedNetworkIFs = new ArrayList<NetworkInterface>();
1:4daf063:           while (activeNetworkIFs.hasMoreElements()) {
1:4daf063:             reOrderedNetworkIFs.add(activeNetworkIFs.nextElement());
1:4daf063:           }
1:4daf063: 
1:4daf063:           if (!SystemUtils.IS_OS_WINDOWS) {
1:4daf063:             Collections.reverse(reOrderedNetworkIFs);
1:4daf063:           }
1:4daf063: 
1:4daf063:           for (NetworkInterface ni : reOrderedNetworkIFs) {
1:4daf063:             Enumeration<InetAddress> inetAddresses = ni.getInetAddresses();
1:4daf063:             while (inetAddresses.hasMoreElements()) {
1:4daf063:               InetAddress addr = inetAddresses.nextElement();
1:4daf063:               if (!addr.isLinkLocalAddress() && !addr.isLoopbackAddress()
1:4daf063:                   && addr instanceof Inet4Address) {
1:4daf063:                 // We've found an address that looks reasonable!
1:4daf063:                 LOGGER.warn("Your hostname, " + InetAddress.getLocalHost().getHostName()
1:4daf063:                     + " resolves to a loopback address: " + address.getHostAddress() + "; using "
1:4daf063:                     + addr.getHostAddress() + " instead (on interface " + ni.getName() + ")");
1:4daf063:                 LOGGER.warn("Set SPARK_LOCAL_IP if you need to bind to another address");
1:4daf063:                 return addr.getHostAddress();
1:4daf063:               }
1:4daf063:             }
1:4daf063:             LOGGER.warn("Your hostname, " + InetAddress.getLocalHost().getHostName()
1:4daf063:                 + " resolves to a loopback address: " + address.getHostAddress()
1:4daf063:                 + ", but we couldn't find any external IP address!");
1:4daf063:             LOGGER.warn("Set SPARK_LOCAL_IP if you need to bind to another address");
1:4daf063:           }
1:4daf063:         }
1:4daf063:         return address.getHostAddress();
1:4daf063:       }
1:4daf063:     } catch (UnknownHostException e) {
1:4daf063:       LOGGER.error("do not get local host address:" + e.getMessage());
1:4daf063:       throw new RuntimeException(e.getMessage());
1:4daf063:     } catch (SocketException e) {
1:4daf063:       LOGGER.error("do not get net work interface:" + e.getMessage());
1:4daf063:       throw new RuntimeException(e.getMessage());
1:4daf063:     }
1:4daf063:   }
1:4daf063: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.dictionary.service;
1: 
1: import java.net.Inet4Address;
1: import java.net.InetAddress;
1: import java.net.NetworkInterface;
1: import java.net.SocketException;
1: import java.net.UnknownHostException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: 
1: import org.apache.commons.lang3.SystemUtils;
1: 
1: public abstract class AbstractDictionaryServer {
1: 
1:   public String findLocalIpAddress(LogService LOGGER) {
1:     try {
1:       String defaultIpOverride = System.getenv("SPARK_LOCAL_IP");
1:       if (defaultIpOverride != null) {
1:         return defaultIpOverride;
1:       } else {
1:         InetAddress address = InetAddress.getLocalHost();
1:         if (address.isLoopbackAddress()) {
1:           // Address resolves to something like 127.0.1.1, which happens on Debian; try to find
1:           // a better address using the local network interfaces
1:           // getNetworkInterfaces returns ifs in reverse order compared to ifconfig output order
1:           // on unix-like system. On windows, it returns in index order.
1:           // It's more proper to pick ip address following system output order.
1:           Enumeration<NetworkInterface> activeNetworkIFs = NetworkInterface.getNetworkInterfaces();
1:           List<NetworkInterface> reOrderedNetworkIFs = new ArrayList<NetworkInterface>();
1:           while (activeNetworkIFs.hasMoreElements()) {
1:             reOrderedNetworkIFs.add(activeNetworkIFs.nextElement());
1:           }
1: 
1:           if (!SystemUtils.IS_OS_WINDOWS) {
1:             Collections.reverse(reOrderedNetworkIFs);
1:           }
1: 
1:           for (NetworkInterface ni : reOrderedNetworkIFs) {
1:             Enumeration<InetAddress> inetAddresses = ni.getInetAddresses();
1:             while (inetAddresses.hasMoreElements()) {
1:               InetAddress addr = inetAddresses.nextElement();
1:               if (!addr.isLinkLocalAddress() && !addr.isLoopbackAddress()
1:                   && addr instanceof Inet4Address) {
1:                 // We've found an address that looks reasonable!
1:                 LOGGER.warn("Your hostname, " + InetAddress.getLocalHost().getHostName()
1:                     + " resolves to a loopback address: " + address.getHostAddress() + "; using "
1:                     + addr.getHostAddress() + " instead (on interface " + ni.getName() + ")");
1:                 LOGGER.warn("Set SPARK_LOCAL_IP if you need to bind to another address");
1:                 return addr.getHostAddress();
1:               }
1:             }
1:             LOGGER.warn("Your hostname, " + InetAddress.getLocalHost().getHostName()
1:                 + " resolves to a loopback address: " + address.getHostAddress()
1:                 + ", but we couldn't find any external IP address!");
1:             LOGGER.warn("Set SPARK_LOCAL_IP if you need to bind to another address");
1:           }
1:         }
1:         return address.getHostAddress();
1:       }
1:     } catch (UnknownHostException e) {
1:       LOGGER.error("do not get local host address:" + e.getMessage());
1:       throw new RuntimeException(e.getMessage());
1:     } catch (SocketException e) {
1:       LOGGER.error("do not get net work interface:" + e.getMessage());
1:       throw new RuntimeException(e.getMessage());
1:     }
1:   }
1: }
============================================================================