1:3a4b881: /*
1:3a4b881:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a4b881:  * contributor license agreements.  See the NOTICE file distributed with
1:3a4b881:  * this work for additional information regarding copyright ownership.
1:3a4b881:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a4b881:  * (the "License"); you may not use this file except in compliance with
1:3a4b881:  * the License.  You may obtain a copy of the License at
1:3a4b881:  *
1:3a4b881:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3a4b881:  *
1:3a4b881:  * Unless required by applicable law or agreed to in writing, software
1:3a4b881:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a4b881:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a4b881:  * See the License for the specific language governing permissions and
1:3a4b881:  * limitations under the License.
1:3a4b881:  */
1:3a4b881: 
1:3a4b881: package org.apache.carbondata.core.datastore.chunk.store.impl;
1:3a4b881: 
1:3a4b881: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:3a4b881: import org.apache.carbondata.core.datastore.chunk.store.DimensionDataChunkStore;
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:3a4b881: 
1:3a4b881: /**
1:3a4b881:  * Dimension chunk store for local dictionary encoded data.
1:3a4b881:  * It's a decorator over dimension chunk store
1:3a4b881:  */
1:3a4b881: public class LocalDictDimensionDataChunkStore implements DimensionDataChunkStore {
1:3a4b881: 
1:3a4b881:   private DimensionDataChunkStore dimensionDataChunkStore;
1:3a4b881: 
1:3a4b881:   private CarbonDictionary dictionary;
1:3a4b881: 
1:3a4b881:   public LocalDictDimensionDataChunkStore(DimensionDataChunkStore dimensionDataChunkStore,
1:3a4b881:       CarbonDictionary dictionary) {
1:3a4b881:     this.dimensionDataChunkStore = dimensionDataChunkStore;
1:3a4b881:     this.dictionary = dictionary;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   /**
1:3a4b881:    * Below method will be used to put the rows and its metadata in offheap
1:3a4b881:    *
1:3a4b881:    * @param invertedIndex        inverted index to be stored
1:3a4b881:    * @param invertedIndexReverse inverted index reverse to be stored
1:3a4b881:    * @param data                 data to be stored
1:3a4b881:    */
1:3a4b881:   public void putArray(int[] invertedIndex, int[] invertedIndexReverse, byte[] data) {
1:3a4b881:     this.dimensionDataChunkStore.putArray(invertedIndex, invertedIndexReverse, data);
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public byte[] getRow(int rowId) {
1:3a4b881:     return dictionary.getDictionaryValue(dimensionDataChunkStore.getSurrogate(rowId));
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public void fillRow(int rowId, CarbonColumnVector vector, int vectorRow) {
1:3a4b881:     if (!dictionary.isDictionaryUsed()) {
1:3a4b881:       vector.setDictionary(dictionary);
1:3a4b881:       dictionary.setDictionaryUsed();
1:3a4b881:     }
1:3a4b881:     int surrogate = dimensionDataChunkStore.getSurrogate(rowId);
1:3a4b881:     if (surrogate == CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY) {
1:4da03f2:       vector.putNull(vectorRow);
1:4da03f2:       vector.getDictionaryVector().putNull(vectorRow);
1:3a4b881:       return;
1:3a4b881:     }
1:3a4b881:     vector.putNotNull(vectorRow);
1:3a4b881:     vector.getDictionaryVector().putInt(vectorRow, dimensionDataChunkStore.getSurrogate(rowId));
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public void fillRow(int rowId, byte[] buffer, int offset) {
1:3a4b881:     throw new UnsupportedOperationException("Operation not supported");
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getInvertedIndex(int rowId) {
1:3a4b881:     return this.dimensionDataChunkStore.getInvertedIndex(rowId);
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getInvertedReverseIndex(int rowId) {
1:3a4b881:     return this.dimensionDataChunkStore.getInvertedReverseIndex(rowId);
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getSurrogate(int rowId) {
1:3a4b881:     throw new UnsupportedOperationException("Operation not supported");
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int getColumnValueSize() {
1:3a4b881:     throw new UnsupportedOperationException("Operation not supported");
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public boolean isExplicitSorted() {
1:3a4b881:     return this.dimensionDataChunkStore.isExplicitSorted();
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public int compareTo(int rowId, byte[] compareValue) {
1:3a4b881:     return dimensionDataChunkStore.compareTo(rowId, compareValue);
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   /**
1:3a4b881:    * Below method will be used to free the memory occupied by the column chunk
1:3a4b881:    */
1:3a4b881:   @Override public void freeMemory() {
1:3a4b881:     if (null != dimensionDataChunkStore) {
1:3a4b881:       this.dimensionDataChunkStore.freeMemory();
1:3a4b881:       this.dictionary = null;
1:3a4b881:       this.dimensionDataChunkStore = null;
1:3a4b881:     }
1:3a4b881:   }
1:3a4b881: }
============================================================================
author:Jatin
-------------------------------------------------------------------------------
commit:4da03f2
/////////////////////////////////////////////////////////////////////////
1:       vector.putNull(vectorRow);
1:       vector.getDictionaryVector().putNull(vectorRow);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.chunk.store.impl;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.chunk.store.DimensionDataChunkStore;
1: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1: 
1: /**
1:  * Dimension chunk store for local dictionary encoded data.
1:  * It's a decorator over dimension chunk store
1:  */
1: public class LocalDictDimensionDataChunkStore implements DimensionDataChunkStore {
1: 
1:   private DimensionDataChunkStore dimensionDataChunkStore;
1: 
1:   private CarbonDictionary dictionary;
1: 
1:   public LocalDictDimensionDataChunkStore(DimensionDataChunkStore dimensionDataChunkStore,
1:       CarbonDictionary dictionary) {
1:     this.dimensionDataChunkStore = dimensionDataChunkStore;
1:     this.dictionary = dictionary;
1:   }
1: 
1:   /**
1:    * Below method will be used to put the rows and its metadata in offheap
1:    *
1:    * @param invertedIndex        inverted index to be stored
1:    * @param invertedIndexReverse inverted index reverse to be stored
1:    * @param data                 data to be stored
1:    */
1:   public void putArray(int[] invertedIndex, int[] invertedIndexReverse, byte[] data) {
1:     this.dimensionDataChunkStore.putArray(invertedIndex, invertedIndexReverse, data);
1:   }
1: 
1:   @Override public byte[] getRow(int rowId) {
1:     return dictionary.getDictionaryValue(dimensionDataChunkStore.getSurrogate(rowId));
1:   }
1: 
1:   @Override public void fillRow(int rowId, CarbonColumnVector vector, int vectorRow) {
1:     if (!dictionary.isDictionaryUsed()) {
1:       vector.setDictionary(dictionary);
1:       dictionary.setDictionaryUsed();
1:     }
1:     int surrogate = dimensionDataChunkStore.getSurrogate(rowId);
1:     if (surrogate == CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY) {
0:       vector.putNull(rowId);
0:       vector.getDictionaryVector().putNull(rowId);
1:       return;
1:     }
1:     vector.putNotNull(vectorRow);
1:     vector.getDictionaryVector().putInt(vectorRow, dimensionDataChunkStore.getSurrogate(rowId));
1:   }
1: 
1:   @Override public void fillRow(int rowId, byte[] buffer, int offset) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public int getInvertedIndex(int rowId) {
1:     return this.dimensionDataChunkStore.getInvertedIndex(rowId);
1:   }
1: 
1:   @Override public int getInvertedReverseIndex(int rowId) {
1:     return this.dimensionDataChunkStore.getInvertedReverseIndex(rowId);
1:   }
1: 
1:   @Override public int getSurrogate(int rowId) {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public int getColumnValueSize() {
1:     throw new UnsupportedOperationException("Operation not supported");
1:   }
1: 
1:   @Override public boolean isExplicitSorted() {
1:     return this.dimensionDataChunkStore.isExplicitSorted();
1:   }
1: 
1:   @Override public int compareTo(int rowId, byte[] compareValue) {
1:     return dimensionDataChunkStore.compareTo(rowId, compareValue);
1:   }
1: 
1:   /**
1:    * Below method will be used to free the memory occupied by the column chunk
1:    */
1:   @Override public void freeMemory() {
1:     if (null != dimensionDataChunkStore) {
1:       this.dimensionDataChunkStore.freeMemory();
1:       this.dictionary = null;
1:       this.dimensionDataChunkStore = null;
1:     }
1:   }
1: }
============================================================================