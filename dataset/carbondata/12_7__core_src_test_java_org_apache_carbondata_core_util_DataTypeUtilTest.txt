1:707e258: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:707e258:  *
1:707e258:  *    http://www.apache.org/licenses/LICENSE-2.0
1:707e258:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:707e258:  */
9:707e258: 
1:707e258: package org.apache.carbondata.core.util;
1:707e258: 
1:956833e: import java.math.BigDecimal;
1:956833e: import java.math.BigInteger;
1:956833e: 
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:707e258: 
1:29be1d0: import org.junit.Assert;
1:707e258: import org.junit.Test;
1:707e258: 
1:956833e: import static junit.framework.TestCase.assertEquals;
1:956833e: import static junit.framework.TestCase.assertTrue;
1:956833e: import static org.apache.carbondata.core.util.DataTypeUtil.bigDecimalToByte;
1:956833e: import static org.apache.carbondata.core.util.DataTypeUtil.byteToBigDecimal;
1:707e258: import static org.apache.carbondata.core.util.DataTypeUtil.getDataBasedOnDataType;
1:956833e: import static org.apache.carbondata.core.util.DataTypeUtil.getMeasureValueBasedOnDataType;
1:956833e: import static org.apache.carbondata.core.util.DataTypeUtil.normalizeIntAndLongValues;
1:707e258: 
1:707e258: public class DataTypeUtilTest {
1:707e258: 
1:707e258:   @Test public void testGetColumnDataTypeDisplayName() {
1:956833e:     String expected = DataTypes.INT.getName();
1:f209e8e:     String result = "INT";
1:707e258:     assertEquals(expected, result);
1:707e258: 
6:707e258:   }
1:707e258: 
1:707e258:   @Test public void testByteToBigDecimal() {
1:707e258:     byte[] byteArr = { 0, 0 };
1:707e258:     byte[] unscale = new byte[byteArr.length - 1];
1:707e258:     BigInteger bigInteger = new BigInteger(unscale);
1:707e258:     BigDecimal expected = new BigDecimal(bigInteger, 0);
1:707e258:     BigDecimal result = byteToBigDecimal(byteArr);
1:707e258:     assertEquals(expected, result);
1:707e258: 
1:707e258:   }
1:707e258: 
1:707e258:   @Test public void testBigDecimalToByte() {
1:707e258:     byte[] result = bigDecimalToByte(BigDecimal.ONE);
1:707e258:     assertTrue(result == result);
1:707e258:   }
1:707e258: 
1:707e258:   @Test public void testGetMeasureValueBasedOnDataType() {
1:707e258:     ColumnSchema columnSchema = new ColumnSchema();
1:707e258:     CarbonMeasure carbonMeasure = new CarbonMeasure(columnSchema, 1);
1:956833e:     Object resultInt = getMeasureValueBasedOnDataType("1", DataTypes.INT, carbonMeasure);
1:8b3fa7f:     Object expectedInt = Double.valueOf(1).intValue();
1:707e258:     assertEquals(expectedInt, resultInt);
1:956833e:     Object resultLong = getMeasureValueBasedOnDataType("1", DataTypes.LONG, carbonMeasure);
1:707e258:     Object expectedLong = Long.valueOf(1);
1:707e258:     assertEquals(expectedLong, resultLong);
1:956833e:     Object resultDefault = getMeasureValueBasedOnDataType("1", DataTypes.DOUBLE, carbonMeasure);
1:707e258:     Double expectedDefault = Double.valueOf(1);
1:707e258:     assertEquals(expectedDefault, resultDefault);
1:707e258: 
1:707e258:   }
1:707e258: 
1:707e258:   @Test public void testNormalizeIntAndLongValues() throws NumberFormatException {
1:956833e:     assertEquals(null, normalizeIntAndLongValues("INT", DataTypes.INT));
1:956833e:     assertEquals("1", normalizeIntAndLongValues("1", DataTypes.STRING));
1:707e258: 
1:707e258:   }
1:707e258: 
1:a86c54b:   @Test public void testGetDataBasedOnDataTypeForNoDictionaryColumn() {
1:a86c54b:     Object result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:a86c54b:         DataTypes.INT);
1:29be1d0:     Assert.assertTrue(result == null);
1:a86c54b:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:a86c54b:         DataTypes.SHORT);
1:29be1d0:     Assert.assertTrue(result == null);
1:a86c54b:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:a86c54b:         DataTypes.LONG);
1:29be1d0:     Assert.assertTrue(result == null);
1:a86c54b:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:a86c54b:         DataTypes.TIMESTAMP);
1:29be1d0:     Assert.assertTrue(result == null);
1:a86c54b:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:a86c54b:         DataTypes.STRING);
1:29be1d0:     Assert.assertTrue(result != null);
1:a86c54b:   }
1:a86c54b: 
1:707e258: }
1:707e258: 
1:707e258: 
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:83f9f12
/////////////////////////////////////////////////////////////////////////
commit:8b3fa7f
/////////////////////////////////////////////////////////////////////////
1:     Object expectedInt = Double.valueOf(1).intValue();
commit:72cb415
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(getDataBasedOnDataType((String) null, DataType.NULL), null);
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
0:         DataTypeUtil.getDataTypeConverter().convertFromBigDecimalToDecimal(scalaDecVal));
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String result = "INT";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(getDataBasedOnDataType("1", DataTypes.createDefaultDecimalType()),
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import static junit.framework.TestCase.assertEquals;
1: import static junit.framework.TestCase.assertTrue;
1: import static org.apache.carbondata.core.util.DataTypeUtil.bigDecimalToByte;
1: import static org.apache.carbondata.core.util.DataTypeUtil.byteToBigDecimal;
0: import static org.apache.carbondata.core.util.DataTypeUtil.getColumnDataTypeDisplayName;
0: import static org.apache.carbondata.core.util.DataTypeUtil.getDataType;
1: import static org.apache.carbondata.core.util.DataTypeUtil.getMeasureValueBasedOnDataType;
1: import static org.apache.carbondata.core.util.DataTypeUtil.normalizeIntAndLongValues;
1:     String expected = DataTypes.INT.getName();
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(DataTypes.TIMESTAMP, getDataType("TIMESTAMP"));
0:     assertEquals(DataTypes.DATE, getDataType("DATE"));
0:     assertEquals(DataTypes.STRING, getDataType("STRING"));
0:     assertEquals(DataTypes.INT, getDataType("INT"));
0:     assertEquals(DataTypes.SHORT, getDataType("SMALLINT"));
0:     assertEquals(DataTypes.LONG, getDataType("LONG"));
0:     assertEquals(DataTypes.DOUBLE, getDataType("DOUBLE"));
0:     assertEquals(DataTypes.DECIMAL, getDataType("DECIMAL"));
0:     assertEquals(DataTypes.ARRAY, getDataType("ARRAY"));
0:     assertEquals(DataTypes.STRUCT, getDataType("STRUCT"));
0:     assertEquals(DataTypes.STRING, getDataType("MAP"));
0:     assertEquals(DataTypes.STRING, getDataType("default"));
0:       assertEquals(getDataBasedOnDataType(data, DataTypes.INT), null);
0:     assertEquals(getDataBasedOnDataType("1", DataTypes.INT), 1);
0:     assertEquals(getDataBasedOnDataType(" ", DataTypes.INT), null);
0:     assertEquals(getDataBasedOnDataType("0", DataTypes.DOUBLE), 0.0d);
0:     assertEquals(getDataBasedOnDataType("0", DataTypes.LONG), 0L);
0:     assertEquals(getDataBasedOnDataType("1", DataTypes.DECIMAL),
0:     assertEquals(getDataBasedOnDataType("default", DataTypes.NULL),
0:     assertEquals(getDataBasedOnDataType((String) null, DataTypes.NULL), null);
1:     Object resultInt = getMeasureValueBasedOnDataType("1", DataTypes.INT, carbonMeasure);
1:     Object resultLong = getMeasureValueBasedOnDataType("1", DataTypes.LONG, carbonMeasure);
1:     Object resultDefault = getMeasureValueBasedOnDataType("1", DataTypes.DOUBLE, carbonMeasure);
1:     assertEquals(null, normalizeIntAndLongValues("INT", DataTypes.INT));
1:     assertEquals("1", normalizeIntAndLongValues("1", DataTypes.STRING));
author:xuchuanyin
-------------------------------------------------------------------------------
commit:29be1d0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(result == null);
1:     Assert.assertTrue(result == null);
1:     Assert.assertTrue(result == null);
1:     Assert.assertTrue(result == null);
1:     Assert.assertTrue(result != null);
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:a86c54b
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testGetDataBasedOnDataTypeForNoDictionaryColumn() {
1:     Object result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:         DataTypes.INT);
0:     assert (result == null);
1:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:         DataTypes.SHORT);
0:     assert (result == null);
1:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:         DataTypes.LONG);
0:     assert (result == null);
1:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:         DataTypes.TIMESTAMP);
0:     assert (result == null);
1:     result = DataTypeUtil.getDataBasedOnDataTypeForNoDictionaryColumn(new byte[0],
1:         DataTypes.STRING);
0:     assert (result != null);
1:   }
1: 
author:chenliang613
-------------------------------------------------------------------------------
commit:09f7cdd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(getDataBasedOnDataType("1", DataType.DECIMAL),
0:         DataTypeUtil.getDataTypeConverter().convertToDecimal(scalaDecVal));
0:         DataTypeUtil.getDataTypeConverter().convertFromStringToUTF8String("default"));
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
author:kumarvishal
-------------------------------------------------------------------------------
commit:f94bae5
/////////////////////////////////////////////////////////////////////////
0:     assertTrue(getAggType(DataType.INT) == 'd');
0:     assertTrue(getAggType(DataType.LONG) == 'd');
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:d73f4bf
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(DataType.DATE, getDataType("DATE"));
author:piaoyats
-------------------------------------------------------------------------------
commit:f853998
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(
0:             getMeasureDataBasedOnDataType(
0:                     new java.math.BigDecimal(1),
0:                     DataType.DECIMAL),
0:             expected);
author:cenyuhai
-------------------------------------------------------------------------------
commit:e5ee02c
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(DataType.SHORT, getDataType("SMALLINT"));
author:abhishek
-------------------------------------------------------------------------------
commit:707e258
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
0: import mockit.Mock;
0: import mockit.MockUp;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonMeasure;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema;
1: 
0: import org.apache.spark.unsafe.types.UTF8String;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.ExpectedException;
1: 
0: import java.math.BigDecimal;
0: import java.math.BigInteger;
0: import java.text.SimpleDateFormat;
0: import java.util.Date;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: import static org.apache.carbondata.core.util.DataTypeUtil.*;
0: import static junit.framework.TestCase.*;
1: import static org.apache.carbondata.core.util.DataTypeUtil.getDataBasedOnDataType;
1: 
1: public class DataTypeUtilTest {
1: 
1:   @Test public void testGetColumnDataTypeDisplayName() {
0:     String expected = DataType.INT.getName();
0:     String result = getColumnDataTypeDisplayName("INT");
1:     assertEquals(expected, result);
1: 
1:   }
1: 
1:   @Test public void testByteToBigDecimal() {
1:     byte[] byteArr = { 0, 0 };
1:     byte[] unscale = new byte[byteArr.length - 1];
1:     BigInteger bigInteger = new BigInteger(unscale);
1:     BigDecimal expected = new BigDecimal(bigInteger, 0);
1:     BigDecimal result = byteToBigDecimal(byteArr);
1:     assertEquals(expected, result);
1: 
1:   }
1: 
0:   @Test public void testGetAggType() {
0:     assertTrue(getAggType(DataType.DECIMAL) == 'b');
0:     assertTrue(getAggType(DataType.INT) == 'l');
0:     assertTrue(getAggType(DataType.LONG) == 'l');
0:     assertTrue(getAggType(DataType.NULL) == 'n');
1: 
1:   }
1: 
1:   @Test public void testBigDecimalToByte() {
1:     byte[] result = bigDecimalToByte(BigDecimal.ONE);
1:     assertTrue(result == result);
1:   }
1: 
0:   @Test public void testGetDataType() {
0:     assertEquals(DataType.TIMESTAMP, getDataType("TIMESTAMP"));
0:     assertEquals(DataType.STRING, getDataType("STRING"));
0:     assertEquals(DataType.INT, getDataType("INT"));
0:     assertEquals(DataType.SHORT, getDataType("SHORT"));
0:     assertEquals(DataType.LONG, getDataType("LONG"));
0:     assertEquals(DataType.DOUBLE, getDataType("DOUBLE"));
0:     assertEquals(DataType.DECIMAL, getDataType("DECIMAL"));
0:     assertEquals(DataType.ARRAY, getDataType("ARRAY"));
0:     assertEquals(DataType.STRUCT, getDataType("STRUCT"));
0:     assertEquals(DataType.STRING, getDataType("MAP"));
0:     assertEquals(DataType.STRING, getDataType("default"));
1: 
1:   }
1: 
0:   @Test public void testGetDataBasedOnDataType() throws NumberFormatException {
0:     String data = " ";
0:     if (data.isEmpty()) {
0:       assertEquals(getDataBasedOnDataType(data, DataType.INT), null);
1:     }
0:     assertEquals(getDataBasedOnDataType("1", DataType.INT), 1);
0:     assertEquals(getDataBasedOnDataType(" ", DataType.INT), null);
0:     assertEquals(getDataBasedOnDataType("0", DataType.DOUBLE), 0.0d);
0:     assertEquals(getDataBasedOnDataType("0", DataType.LONG), 0L);
0:     java.math.BigDecimal javaDecVal = new java.math.BigDecimal(1);
0:     scala.math.BigDecimal scalaDecVal = new scala.math.BigDecimal(javaDecVal);
0:     org.apache.spark.sql.types.Decimal expected =
0:         new org.apache.spark.sql.types.Decimal().set(scalaDecVal);
0:     assertEquals(getDataBasedOnDataType("1", DataType.DECIMAL), expected);
0:     assertEquals(getDataBasedOnDataType("default", DataType.NULL),
0:         UTF8String.fromString("default"));
0:     assertEquals(getDataBasedOnDataType(null, DataType.NULL), null);
1:   }
1: 
0:   @Test public void testGetMeasureDataBasedOnDataType() throws NumberFormatException {
0:     assertEquals(getMeasureDataBasedOnDataType(new Long("1"), DataType.LONG), Long.parseLong("1"));
0:     assertEquals(getMeasureDataBasedOnDataType(new Double("1"), DataType.DOUBLE),
0:         Double.parseDouble("1"));
0:     java.math.BigDecimal javaDecVal = new java.math.BigDecimal(1);
0:     scala.math.BigDecimal scalaDecVal = new scala.math.BigDecimal(javaDecVal);
0:     org.apache.spark.sql.types.Decimal expected =
0:         new org.apache.spark.sql.types.Decimal().set(scalaDecVal);
0:     assertEquals(getMeasureDataBasedOnDataType(1, DataType.DECIMAL), expected);
0:     assertEquals(getMeasureDataBasedOnDataType("1", DataType.STRING), "1");
1:   }
1: 
1:   @Test public void testGetMeasureValueBasedOnDataType() {
1:     ColumnSchema columnSchema = new ColumnSchema();
1:     CarbonMeasure carbonMeasure = new CarbonMeasure(columnSchema, 1);
0:     Object resultInt = getMeasureValueBasedOnDataType("1", DataType.INT, carbonMeasure);
0:     Object expectedInt = Double.valueOf(1).longValue();
1:     assertEquals(expectedInt, resultInt);
0:     Object resultLong = getMeasureValueBasedOnDataType("1", DataType.LONG, carbonMeasure);
1:     Object expectedLong = Long.valueOf(1);
1:     assertEquals(expectedLong, resultLong);
0:     Object resultDefault = getMeasureValueBasedOnDataType("1", DataType.DOUBLE, carbonMeasure);
1:     Double expectedDefault = Double.valueOf(1);
1:     assertEquals(expectedDefault, resultDefault);
1: 
1:   }
1: 
1:   @Test public void testNormalizeIntAndLongValues() throws NumberFormatException {
0:     assertEquals(null, normalizeIntAndLongValues("INT", DataType.INT));
0:     assertEquals("1", normalizeIntAndLongValues("1", DataType.STRING));
1: 
1:   }
1: 
1: }
1: 
1: 
============================================================================