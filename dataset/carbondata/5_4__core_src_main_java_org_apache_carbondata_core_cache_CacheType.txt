1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:ce09aaa: import org.apache.carbondata.core.datastore.TableSegmentUniqueIdentifier;
1:ce09aaa: import org.apache.carbondata.core.datastore.block.AbstractIndex;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * class which defines different cache types. cache type can be dictionary cache for
1:cd6a4ff:  * forward (surrogate key to byte array mapping) and reverse (byte array to
1:cd6a4ff:  * surrogate mapping) dictionary or a B-tree cache
1:cd6a4ff:  */
1:cd6a4ff: public class CacheType<K, V> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Forward dictionary cache which maintains surrogate key to byte array mapping
1:cd6a4ff:    */
1:cd6a4ff:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> FORWARD_DICTIONARY =
1:cd6a4ff:       new CacheType("forward_dictionary");
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Reverse dictionary cache which maintains byte array to surrogate key mapping
1:cd6a4ff:    */
1:cd6a4ff:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> REVERSE_DICTIONARY =
1:cd6a4ff:       new CacheType("reverse_dictionary");
1:cd6a4ff: 
1:cd6a4ff:   /**
1:b681244:    * Executor BTree cache which maintains size of BTree metadata
1:b681244:    */
1:f911403:   public static final CacheType<TableSegmentUniqueIdentifier, AbstractIndex>
1:b681244:       DRIVER_BLOCKLET_DATAMAP = new CacheType("driver_blocklet_datamap");
1:b681244: 
1:b681244:   /**
1:cd6a4ff:    * cacheName which is unique name for a cache
1:cd6a4ff:    */
1:cd6a4ff:   private String cacheName;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param cacheName
1:cd6a4ff:    */
1:047c502:   public CacheType(String cacheName) {
1:cd6a4ff:     this.cacheName = cacheName;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return cache unique name
1:cd6a4ff:    */
1:cd6a4ff:   public String getCacheName() {
1:cd6a4ff:     return cacheName;
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static final CacheType<TableSegmentUniqueIdentifier, AbstractIndex>
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public static final CacheType<TableSegmentUniqueIdentifier, AbstractIndex>
author:ravipesala
-------------------------------------------------------------------------------
commit:047c502
/////////////////////////////////////////////////////////////////////////
1:   public CacheType(String cacheName) {
commit:b681244
/////////////////////////////////////////////////////////////////////////
1:    * Executor BTree cache which maintains size of BTree metadata
1:    */
0:   public static final CacheType<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>
1:       DRIVER_BLOCKLET_DATAMAP = new CacheType("driver_blocklet_datamap");
1: 
1:   /**
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1: 
1: /**
1:  * class which defines different cache types. cache type can be dictionary cache for
1:  * forward (surrogate key to byte array mapping) and reverse (byte array to
1:  * surrogate mapping) dictionary or a B-tree cache
1:  */
1: public class CacheType<K, V> {
1: 
1:   /**
1:    * Forward dictionary cache which maintains surrogate key to byte array mapping
1:    */
1:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> FORWARD_DICTIONARY =
1:       new CacheType("forward_dictionary");
1: 
1:   /**
1:    * Reverse dictionary cache which maintains byte array to surrogate key mapping
1:    */
1:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> REVERSE_DICTIONARY =
1:       new CacheType("reverse_dictionary");
1: 
1:   /**
1:    * cacheName which is unique name for a cache
1:    */
1:   private String cacheName;
1: 
1:   /**
1:    * @param cacheName
1:    */
0:   private CacheType(String cacheName) {
1:     this.cacheName = cacheName;
1:   }
1: 
1:   /**
1:    * @return cache unique name
1:    */
1:   public String getCacheName() {
1:     return cacheName;
1:   }
1: }
commit:047c502
/////////////////////////////////////////////////////////////////////////
0:   public CacheType(String cacheName) {
commit:b681244
/////////////////////////////////////////////////////////////////////////
0:    * Executor BTree cache which maintains size of BTree metadata
0:    */
0:   public static final CacheType<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>
0:       DRIVER_BLOCKLET_DATAMAP = new CacheType("driver_blocklet_datamap");
0: 
0:   /**
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache;
0: 
0: import org.apache.carbondata.core.cache.dictionary.Dictionary;
0: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: 
0: /**
0:  * class which defines different cache types. cache type can be dictionary cache for
0:  * forward (surrogate key to byte array mapping) and reverse (byte array to
0:  * surrogate mapping) dictionary or a B-tree cache
0:  */
0: public class CacheType<K, V> {
0: 
0:   /**
0:    * Forward dictionary cache which maintains surrogate key to byte array mapping
0:    */
0:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> FORWARD_DICTIONARY =
0:       new CacheType("forward_dictionary");
0: 
0:   /**
0:    * Reverse dictionary cache which maintains byte array to surrogate key mapping
0:    */
0:   public static final CacheType<DictionaryColumnUniqueIdentifier, Dictionary> REVERSE_DICTIONARY =
0:       new CacheType("reverse_dictionary");
0: 
0:   /**
0:    * cacheName which is unique name for a cache
0:    */
0:   private String cacheName;
0: 
0:   /**
0:    * @param cacheName
0:    */
0:   private CacheType(String cacheName) {
0:     this.cacheName = cacheName;
0:   }
0: 
0:   /**
0:    * @return cache unique name
0:    */
0:   public String getCacheName() {
0:     return cacheName;
0:   }
0: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.TableSegmentUniqueIdentifier;
1: import org.apache.carbondata.core.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.datastore.block.TableBlockUniqueIdentifier;
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.datastore.block.TableBlockUniqueIdentifier;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.carbon.datastore.block.TableBlockUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * Executor BTree cache which maintains size of BTree metadata
0:    */
0:   public static final CacheType<TableBlockUniqueIdentifier, AbstractIndex> EXECUTOR_BTREE =
0:       new CacheType("executor_btree");
0: 
0:   /**
0:    * Executor BTree cache which maintains size of BTree metadata
0:    */
0:   public static final CacheType<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>
0:       DRIVER_BTREE = new CacheType("driver_btree");
0: 
0:   /**
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.carbon.datastore.block.TableBlockUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * Executor BTree cache which maintains size of BTree metadata
0:    */
0:   public static final CacheType<TableBlockUniqueIdentifier, AbstractIndex> EXECUTOR_BTREE =
0:       new CacheType("executor_btree");
0: 
0:   /**
0:    * Executor BTree cache which maintains size of BTree metadata
0:    */
0:   public static final CacheType<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>
0:       DRIVER_BTREE = new CacheType("driver_btree");
0: 
0:   /**
============================================================================