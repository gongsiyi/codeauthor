1:edaaccb: /*
1:edaaccb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edaaccb:  * contributor license agreements.  See the NOTICE file distributed with
1:edaaccb:  * this work for additional information regarding copyright ownership.
1:edaaccb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edaaccb:  * (the "License"); you may not use this file except in compliance with
1:edaaccb:  * the License.  You may obtain a copy of the License at
1:edaaccb:  *
1:edaaccb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edaaccb:  *
1:edaaccb:  * Unless required by applicable law or agreed to in writing, software
1:edaaccb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edaaccb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edaaccb:  * See the License for the specific language governing permissions and
1:edaaccb:  * limitations under the License.
1:edaaccb:  */
4:edaaccb: 
1:edaaccb: package org.apache.carbondata.core.dictionary.generator;
1:edaaccb: 
1:edaaccb: import java.io.File;
1:edaaccb: import java.util.Arrays;
1:edaaccb: 
1:edaaccb: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:edaaccb: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:edaaccb: import org.apache.carbondata.core.metadata.CarbonMetadata;
1:df27831: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:edaaccb: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:edaaccb: import org.apache.carbondata.core.util.CarbonProperties;
1:edaaccb: 
1:edaaccb: import org.junit.After;
1:edaaccb: import org.junit.Before;
1:edaaccb: import org.junit.Test;
1:edaaccb: 
1:edaaccb: import static org.junit.Assert.assertEquals;
1:edaaccb: import static org.junit.Assert.assertTrue;
1:edaaccb: 
1:edaaccb: /**
1:edaaccb:  * Test class to test table column dictionary generator functionality
1:edaaccb:  */
1:edaaccb: public class TableDictionaryGeneratorTest {
1:edaaccb: 
1:edaaccb:   private ColumnSchema empColumnSchema;
1:edaaccb:   private CarbonDimension empDimension;
1:edaaccb:   private ColumnSchema ageColumnSchema;
1:edaaccb:   private CarbonDimension ageDimension;
1:edaaccb:   private TableSchema tableSchema;
1:edaaccb:   private TableInfo tableInfo;
1:edaaccb:   private String storePath;
1:ee5f65f:   private CarbonTable carbonTable;
1:edaaccb: 
1:edaaccb:   @Before public void setUp() throws Exception {
1:edaaccb:     // enable lru cache by setting cache size
1:edaaccb:     CarbonProperties.getInstance()
1:edaaccb:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:edaaccb: 
1:edaaccb:     // Create two column schemas and dimensions for the table
1:edaaccb:     empColumnSchema = new ColumnSchema();
1:edaaccb:     empColumnSchema.setColumnName("empNameCol");
1:edaaccb:     empColumnSchema.setColumnUniqueId("empNameCol");
1:edaaccb:     empColumnSchema.setDimensionColumn(true);
1:df27831:     empColumnSchema.setDataType(DataTypes.STRING);
1:edaaccb:     empColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
1:f911403:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0);
1:edaaccb: 
1:edaaccb:     ageColumnSchema = new ColumnSchema();
1:df27831:     ageColumnSchema.setDataType(DataTypes.SHORT_INT);
1:5b4cf70:     ageColumnSchema.setColumnName("ageNameCol");
1:5b4cf70:     ageColumnSchema.setColumnUniqueId("ageNameCol");
1:edaaccb:     ageColumnSchema.setDimensionColumn(true);
1:edaaccb:     ageColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
1:f911403:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0);
1:edaaccb: 
1:edaaccb:     // Create a Table
1:edaaccb:     tableSchema = new TableSchema();
1:edaaccb:     tableSchema.setTableName("TestTable");
1:edaaccb:     tableSchema.setListOfColumns(Arrays.asList(empColumnSchema, ageColumnSchema));
1:edaaccb:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1:edaaccb: 
1:edaaccb:     tableInfo = new TableInfo();
1:edaaccb:     tableInfo.setFactTable(tableSchema);
1:edaaccb:     tableInfo.setTableUniqueName("TestTable");
1:edaaccb:     tableInfo.setDatabaseName("test");
1:edaaccb:     storePath = System.getProperty("java.io.tmpdir") + "/tmp";
1:1155d4d:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
1:ee5f65f:     carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
1:edaaccb:     // Add the created table to metadata
1:edaaccb:     metadata.addCarbonTable(carbonTable);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyOnce() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb: 
1:edaaccb:     // Generate dictionary for one key
1:edaaccb:     DictionaryMessage empKey = new DictionaryMessage();
1:edaaccb:     empKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     empKey.setData("FirstKey");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(empKey);
1:edaaccb:     Integer value = tableDictionaryGenerator.generateKey(empKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb: 
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyTwice() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb: 
1:edaaccb:     // Generate dictionary for same key twice
1:edaaccb:     DictionaryMessage firstKey = new DictionaryMessage();
1:edaaccb:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:ee5f65f:     firstKey.setTableUniqueId("1");
1:edaaccb:     firstKey.setData("FirstKey");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(firstKey);
2:edaaccb:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb:     DictionaryMessage secondKey = new DictionaryMessage();
1:edaaccb:     secondKey.setColumnName(empColumnSchema.getColumnName());
1:ee5f65f:     secondKey.setTableUniqueId("1");
1:edaaccb:     secondKey.setData("FirstKey");
1:edaaccb:     value = tableDictionaryGenerator.generateKey(secondKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyAgain() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb: 
1:edaaccb:     // Generate dictionary for two different keys
1:edaaccb:     DictionaryMessage firstKey = new DictionaryMessage();
1:edaaccb:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     firstKey.setData("FirstKey");
1:ee5f65f:     firstKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(firstKey);
1:edaaccb:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb:     DictionaryMessage secondKey = new DictionaryMessage();
1:edaaccb:     secondKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     secondKey.setData("SecondKey");
1:ee5f65f:     secondKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(secondKey);
1:edaaccb:     value = tableDictionaryGenerator.generateKey(secondKey);
1:edaaccb:     assertEquals(new Integer(3), value);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void updateGenerator() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb:     DictionaryMessage firstKey = new DictionaryMessage();
1:edaaccb:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     firstKey.setData("FirstKey");
1:ee5f65f:     firstKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(firstKey);
1:edaaccb:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb: 
1:edaaccb:     DictionaryMessage secondKey = new DictionaryMessage();
1:edaaccb:     secondKey.setColumnName(ageColumnSchema.getColumnName());
1:edaaccb:     secondKey.setData("SecondKey");
1:ee5f65f:     secondKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(secondKey);
1:ee5f65f:     //Update generator with a new dimension
1:edaaccb:     value = tableDictionaryGenerator.generateKey(secondKey);
1:edaaccb:     assertEquals(new Integer(2), value);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void size() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb:     //Add keys for first Column
1:edaaccb:     DictionaryMessage empKey = new DictionaryMessage();
1:edaaccb:     //Add key 1
1:edaaccb:     empKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     empKey.setData("FirstKey");
1:ee5f65f:     empKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(empKey);
1:edaaccb:     tableDictionaryGenerator.generateKey(empKey);
1:edaaccb:     assertEquals(new Integer(2), tableDictionaryGenerator.size(empKey));
1:edaaccb: 
1:edaaccb:     //Add key 2
1:edaaccb:     empKey = new DictionaryMessage();
1:edaaccb:     empKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     empKey.setData("SecondKey");
1:ee5f65f:     empKey.setTableUniqueId("1");
1:edaaccb:     tableDictionaryGenerator.generateKey(empKey);
1:edaaccb:     assertEquals(new Integer(3), tableDictionaryGenerator.size(empKey));
1:edaaccb: 
1:edaaccb:     //Add key 3
1:edaaccb:     empKey = new DictionaryMessage();
1:edaaccb:     empKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     empKey.setData("ThirdKey");
1:ee5f65f:     empKey.setTableUniqueId("1");
1:edaaccb:     tableDictionaryGenerator.generateKey(empKey);
1:edaaccb:     assertEquals(new Integer(4), tableDictionaryGenerator.size(empKey));
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void writeDictionaryData() throws Exception {
1:ee5f65f:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:edaaccb:     DictionaryMessage firstKey = new DictionaryMessage();
1:edaaccb:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:edaaccb:     firstKey.setData("FirstKey");
1:ee5f65f:     firstKey.setTableUniqueId("1");
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(firstKey);
1:ee5f65f:     tableDictionaryGenerator.generateKey(firstKey);
1:edaaccb: 
1:edaaccb:     DictionaryMessage secondKey = new DictionaryMessage();
1:edaaccb:     secondKey.setColumnName(ageColumnSchema.getColumnName());
1:edaaccb:     secondKey.setData("SecondKey");
1:ee5f65f:     secondKey.setTableUniqueId("1");
1:ee5f65f:     //Update generator with a new dimension
1:ee5f65f:     tableDictionaryGenerator.updateGenerator(secondKey);
1:edaaccb:     tableDictionaryGenerator.generateKey(secondKey);
1:edaaccb:     File dictPath = new File(storePath + "/test/TestTable/Metadata/");
1:ee5f65f:     dictPath.mkdirs();
1:ee5f65f:     tableDictionaryGenerator.writeDictionaryData();
1:edaaccb: 
1:edaaccb:     File empDictionaryFile = new File(dictPath, empColumnSchema.getColumnName() + ".dict");
1:edaaccb:     assertTrue(empDictionaryFile.exists());
1:edaaccb: 
1:edaaccb:     File ageDictionaryFile = new File(dictPath, ageColumnSchema.getColumnName() + ".dict");
1:edaaccb:     assertTrue(ageDictionaryFile.exists());
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @After public void tearDown() {
1:edaaccb:     CarbonMetadata.getInstance().removeTable(tableInfo.getTableUniqueName());
1:edaaccb:     cleanUpDirectory(new File(storePath));
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   private void cleanUpDirectory(File path) {
1:edaaccb:     File[] files = path.listFiles();
1:edaaccb:     if (null == files) {
1:edaaccb:       return;
1:edaaccb:     }
1:edaaccb:     for (File file : files) {
1:edaaccb:       if (file.isDirectory()) cleanUpDirectory(file);
1:edaaccb:       else file.delete();
1:edaaccb:     }
1:edaaccb:     path.delete();
1:edaaccb:   }
1:edaaccb: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0);
/////////////////////////////////////////////////////////////////////////
1:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0);
author:kunal642
-------------------------------------------------------------------------------
commit:df27831
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     empColumnSchema.setDataType(DataTypes.STRING);
1:     ageColumnSchema.setDataType(DataTypes.SHORT_INT);
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessageType;
/////////////////////////////////////////////////////////////////////////
1:   private CarbonTable carbonTable;
/////////////////////////////////////////////////////////////////////////
1:     carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     tableDictionaryGenerator.updateGenerator(empKey);
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     firstKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(firstKey);
1:     secondKey.setTableUniqueId("1");
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     firstKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(firstKey);
1:     secondKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(secondKey);
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     firstKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(firstKey);
1:     secondKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(secondKey);
1:     //Update generator with a new dimension
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     empKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(empKey);
1:     empKey.setTableUniqueId("1");
1:     empKey.setTableUniqueId("1");
1:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(carbonTable);
1:     firstKey.setTableUniqueId("1");
1:     tableDictionaryGenerator.updateGenerator(firstKey);
1:     tableDictionaryGenerator.generateKey(firstKey);
1:     secondKey.setTableUniqueId("1");
1:     //Update generator with a new dimension
1:     tableDictionaryGenerator.updateGenerator(secondKey);
1:     dictPath.mkdirs();
1:     tableDictionaryGenerator.writeDictionaryData();
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
author:jackylk
-------------------------------------------------------------------------------
commit:ac5aee1
/////////////////////////////////////////////////////////////////////////
0:     CarbonTable carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
author:QiangCai
-------------------------------------------------------------------------------
commit:5b4cf70
/////////////////////////////////////////////////////////////////////////
1:     ageColumnSchema.setColumnName("ageNameCol");
1:     ageColumnSchema.setColumnUniqueId("ageNameCol");
author:Vimal-Das
-------------------------------------------------------------------------------
commit:edaaccb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.dictionary.generator;
1: 
1: import java.io.File;
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Test class to test table column dictionary generator functionality
1:  */
1: public class TableDictionaryGeneratorTest {
1: 
1:   private ColumnSchema empColumnSchema;
1:   private CarbonDimension empDimension;
1:   private ColumnSchema ageColumnSchema;
1:   private CarbonDimension ageDimension;
1:   private TableSchema tableSchema;
1:   private TableInfo tableInfo;
1:   private String storePath;
1: 
1:   @Before public void setUp() throws Exception {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1: 
1:     // Create two column schemas and dimensions for the table
1:     empColumnSchema = new ColumnSchema();
1:     empColumnSchema.setColumnName("empNameCol");
1:     empColumnSchema.setColumnUniqueId("empNameCol");
1:     empColumnSchema.setDimensionColumn(true);
1:     empColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
0:     empDimension = new CarbonDimension(empColumnSchema, 0, 0, 0, 0, 0);
1: 
1:     ageColumnSchema = new ColumnSchema();
0:     ageColumnSchema.setColumnName("empNameCol");
0:     ageColumnSchema.setColumnUniqueId("empNameCol");
1:     ageColumnSchema.setDimensionColumn(true);
1:     ageColumnSchema.setEncodingList(Arrays.asList(Encoding.DICTIONARY));
0:     ageDimension = new CarbonDimension(ageColumnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create a Table
1:     tableSchema = new TableSchema();
1:     tableSchema.setTableName("TestTable");
1:     tableSchema.setListOfColumns(Arrays.asList(empColumnSchema, ageColumnSchema));
1:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1: 
1:     tableInfo = new TableInfo();
1:     tableInfo.setFactTable(tableSchema);
1:     tableInfo.setTableUniqueName("TestTable");
1:     tableInfo.setDatabaseName("test");
1:     storePath = System.getProperty("java.io.tmpdir") + "/tmp";
0:     tableInfo.setStorePath(storePath);
0:     CarbonTable carbonTable = new CarbonTable();
0:     carbonTable.loadCarbonTable(tableInfo);
1: 
1:     // Add the created table to metadata
1:     metadata.addCarbonTable(carbonTable);
1:   }
1: 
1:   @Test public void generateKeyOnce() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1: 
1:     // Generate dictionary for one key
1:     DictionaryMessage empKey = new DictionaryMessage();
0:     empKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     empKey.setColumnName(empColumnSchema.getColumnName());
1:     empKey.setData("FirstKey");
1:     Integer value = tableDictionaryGenerator.generateKey(empKey);
1:     assertEquals(new Integer(2), value);
1: 
1:   }
1: 
1:   @Test public void generateKeyTwice() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1: 
1:     // Generate dictionary for same key twice
1:     DictionaryMessage firstKey = new DictionaryMessage();
0:     firstKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:     firstKey.setData("FirstKey");
1:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:     assertEquals(new Integer(2), value);
1:     DictionaryMessage secondKey = new DictionaryMessage();
0:     secondKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     secondKey.setColumnName(empColumnSchema.getColumnName());
1:     secondKey.setData("FirstKey");
1:     value = tableDictionaryGenerator.generateKey(secondKey);
1:     assertEquals(new Integer(2), value);
1:   }
1: 
1:   @Test public void generateKeyAgain() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1: 
1:     // Generate dictionary for two different keys
1:     DictionaryMessage firstKey = new DictionaryMessage();
0:     firstKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:     firstKey.setData("FirstKey");
1:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:     assertEquals(new Integer(2), value);
1:     DictionaryMessage secondKey = new DictionaryMessage();
0:     secondKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     secondKey.setColumnName(empColumnSchema.getColumnName());
1:     secondKey.setData("SecondKey");
1:     value = tableDictionaryGenerator.generateKey(secondKey);
1:     assertEquals(new Integer(3), value);
1:   }
1: 
1:   @Test public void updateGenerator() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1:     DictionaryMessage firstKey = new DictionaryMessage();
0:     firstKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:     firstKey.setData("FirstKey");
1:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1:     assertEquals(new Integer(2), value);
1: 
0:     tableDictionaryGenerator.updateGenerator(ageDimension);
0:     //Update generator with a new dimension
1: 
1:     DictionaryMessage secondKey = new DictionaryMessage();
0:     secondKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     secondKey.setColumnName(ageColumnSchema.getColumnName());
1:     secondKey.setData("SecondKey");
1:     value = tableDictionaryGenerator.generateKey(secondKey);
1:     assertEquals(new Integer(2), value);
1:   }
1: 
1:   @Test public void size() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1:     //Add keys for first Column
1:     DictionaryMessage empKey = new DictionaryMessage();
1:     //Add key 1
0:     empKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     empKey.setColumnName(empColumnSchema.getColumnName());
1:     empKey.setData("FirstKey");
1:     tableDictionaryGenerator.generateKey(empKey);
1:     assertEquals(new Integer(2), tableDictionaryGenerator.size(empKey));
1: 
1:     //Add key 2
1:     empKey = new DictionaryMessage();
0:     empKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     empKey.setColumnName(empColumnSchema.getColumnName());
1:     empKey.setData("SecondKey");
1:     tableDictionaryGenerator.generateKey(empKey);
1:     assertEquals(new Integer(3), tableDictionaryGenerator.size(empKey));
1: 
1:     //Add key 3
1:     empKey = new DictionaryMessage();
0:     empKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     empKey.setColumnName(empColumnSchema.getColumnName());
1:     empKey.setData("ThirdKey");
1:     tableDictionaryGenerator.generateKey(empKey);
1:     assertEquals(new Integer(4), tableDictionaryGenerator.size(empKey));
1:   }
1: 
1:   @Test public void writeDictionaryData() throws Exception {
0:     TableDictionaryGenerator tableDictionaryGenerator = new TableDictionaryGenerator(empDimension);
1:     DictionaryMessage firstKey = new DictionaryMessage();
0:     firstKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     firstKey.setColumnName(empColumnSchema.getColumnName());
1:     firstKey.setData("FirstKey");
1:     Integer value = tableDictionaryGenerator.generateKey(firstKey);
1: 
0:     tableDictionaryGenerator.updateGenerator(ageDimension);
0:     //Update generator with a new dimension
1: 
1:     DictionaryMessage secondKey = new DictionaryMessage();
0:     secondKey.setTableUniqueName(tableInfo.getTableUniqueName());
1:     secondKey.setColumnName(ageColumnSchema.getColumnName());
1:     secondKey.setData("SecondKey");
1:     tableDictionaryGenerator.generateKey(secondKey);
1:     File dictPath = new File(storePath + "/test/TestTable/Metadata/");
0:     System.out.print(dictPath.mkdirs());
0:     tableDictionaryGenerator.writeDictionaryData(tableInfo.getTableUniqueName());
1: 
1:     File empDictionaryFile = new File(dictPath, empColumnSchema.getColumnName() + ".dict");
1:     assertTrue(empDictionaryFile.exists());
1: 
1:     File ageDictionaryFile = new File(dictPath, ageColumnSchema.getColumnName() + ".dict");
1:     assertTrue(ageDictionaryFile.exists());
1:   }
1: 
1:   @After public void tearDown() {
1:     CarbonMetadata.getInstance().removeTable(tableInfo.getTableUniqueName());
1:     cleanUpDirectory(new File(storePath));
1:   }
1: 
1:   private void cleanUpDirectory(File path) {
1:     File[] files = path.listFiles();
1:     if (null == files) {
1:       return;
1:     }
1:     for (File file : files) {
1:       if (file.isDirectory()) cleanUpDirectory(file);
1:       else file.delete();
1:     }
1:     path.delete();
1:   }
1: }
============================================================================