1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:df5d7a9: package org.apache.carbondata.core.metadata.schema;
1:9a25dc6: 
1:cd6a4ff: import java.io.IOException;
4:cd6a4ff: 
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:ce09aaa: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonMetadata;
1:30457c4: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1:ce09aaa: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:30457c4: import org.apache.carbondata.core.util.CarbonUtil;
1:bf6c471: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:cd6a4ff: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:cd6a4ff: /**
1:528c2be:  * TODO: It should be removed after store manager implementation.
1:cd6a4ff:  */
1:cd6a4ff: public class SchemaReader {
1:cd6a4ff: 
1:fad5e1f:   public static CarbonTable readCarbonTableFromStore(AbsoluteTableIdentifier identifier)
1:30457c4:       throws IOException {
1:bf6c471:     String schemaFilePath = CarbonTablePath.getSchemaFilePath(identifier.getTablePath());
1:528c2be:     if (FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.LOCAL) ||
1:528c2be:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.HDFS) ||
1:733bb51:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.S3) ||
1:528c2be:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.VIEWFS)) {
1:528c2be:       String tableName = identifier.getCarbonTableIdentifier().getTableName();
1:cd6a4ff: 
1:9a25dc6:       org.apache.carbondata.format.TableInfo tableInfo =
1:bf6c471:           CarbonUtil.readSchemaFile(CarbonTablePath.getSchemaFilePath(identifier.getTablePath()));
1:cd6a4ff:       SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:2fe7758:       TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:2fe7758:           tableInfo,
1:2fe7758:           identifier.getCarbonTableIdentifier().getDatabaseName(),
1:2fe7758:           tableName,
1:2fe7758:           identifier.getTablePath());
1:cd6a4ff:       CarbonMetadata.getInstance().loadTableMetadata(wrapperTableInfo);
1:528c2be:       return CarbonMetadata.getInstance().getCarbonTable(
1:528c2be:           identifier.getCarbonTableIdentifier().getTableUniqueName());
1:528c2be:     } else {
1:bcd2839:       throw new IOException("File does not exist: " + schemaFilePath);
2:cd6a4ff:     }
1:cd6a4ff:   }
1:9a25dc6: 
1:30457c4:   /**
1:30457c4:    * the method returns the Wrapper TableInfo
1:30457c4:    *
1:bf6c471:    * @param identifier
1:30457c4:    * @return
1:30457c4:    */
1:bf6c471:   public static TableInfo getTableInfo(AbsoluteTableIdentifier identifier)
1:9a25dc6:       throws IOException {
1:30457c4:     org.apache.carbondata.format.TableInfo thriftTableInfo =
1:bf6c471:         CarbonUtil.readSchemaFile(CarbonTablePath.getSchemaFilePath(identifier.getTablePath()));
1:30457c4:     ThriftWrapperSchemaConverterImpl thriftWrapperSchemaConverter =
1:30457c4:         new ThriftWrapperSchemaConverterImpl();
1:30457c4:     CarbonTableIdentifier carbonTableIdentifier =
1:bf6c471:         identifier.getCarbonTableIdentifier();
1:910d496:     return thriftWrapperSchemaConverter.fromExternalToWrapperTableInfo(
1:910d496:         thriftTableInfo,
1:910d496:         carbonTableIdentifier.getDatabaseName(),
1:910d496:         carbonTableIdentifier.getTableName(),
1:bf6c471:         identifier.getTablePath());
1:30457c4:   }
1:9a25dc6: 
1:280a400:   public static TableInfo inferSchema(AbsoluteTableIdentifier identifier,
1:8f1a029:       boolean isCarbonFileProvider, Configuration configuration) throws IOException {
1:8f1a029: 
1:8f1a029:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
1:8f1a029:         .inferSchema(identifier.getTablePath(), identifier.getTableName(), isCarbonFileProvider,
1:8f1a029:             configuration);
1:8f1a029:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:8f1a029:     TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:8f1a029:         tableInfo, identifier.getDatabaseName(), identifier.getTableName(),
1:8f1a029:         identifier.getTablePath());
1:8f1a029:     wrapperTableInfo.setTransactionalTable(false);
1:8f1a029:     return wrapperTableInfo;
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   public static TableInfo inferSchema(AbsoluteTableIdentifier identifier,
1:280a400:       boolean isCarbonFileProvider) throws IOException {
1:3202cf5: 
1:280a400:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
1:8f1a029:         .inferSchema(identifier.getTablePath(), identifier.getTableName(), isCarbonFileProvider,
1:8f1a029:             FileFactory.getConfiguration());
1:9a25dc6:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:c09ef99:     TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:c09ef99:         tableInfo, identifier.getDatabaseName(), identifier.getTableName(),
1:c09ef99:         identifier.getTablePath());
1:b7b8073:     wrapperTableInfo.setTransactionalTable(false);
1:9a25dc6:     return wrapperTableInfo;
1:9a25dc6:   }
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:       boolean isCarbonFileProvider, Configuration configuration) throws IOException {
1: 
1:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
1:         .inferSchema(identifier.getTablePath(), identifier.getTableName(), isCarbonFileProvider,
1:             configuration);
1:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
1:     TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:         tableInfo, identifier.getDatabaseName(), identifier.getTableName(),
1:         identifier.getTablePath());
1:     wrapperTableInfo.setTransactionalTable(false);
1:     return wrapperTableInfo;
1:   }
1: 
1:   public static TableInfo inferSchema(AbsoluteTableIdentifier identifier,
1:         .inferSchema(identifier.getTablePath(), identifier.getTableName(), isCarbonFileProvider,
1:             FileFactory.getConfiguration());
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1: 
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:     wrapperTableInfo.setTransactionalTable(false);
commit:9a25dc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:   public static TableInfo inferSchema(AbsoluteTableIdentifier identifier)
1:       throws IOException {
0:     // This routine is going to infer schema from the carbondata file footer
0:     // Convert the ColumnSchema -> TableSchema -> TableInfo.
0:     // Return the TableInfo.
1:     org.apache.carbondata.format.TableInfo tableInfo =
0:         CarbonUtil.inferSchemaFileExternalTable(identifier.getTablePath(), identifier, false);
1:     SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
0:     TableInfo wrapperTableInfo = schemaConverter
0:         .fromExternalToWrapperTableInfo(tableInfo, identifier.getDatabaseName(),
0:             identifier.getTableName(), identifier.getTablePath());
1:     return wrapperTableInfo;
1:   }
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
1:   public static TableInfo inferSchema(AbsoluteTableIdentifier identifier,
1:       boolean isCarbonFileProvider) throws IOException {
1:     org.apache.carbondata.format.TableInfo tableInfo = CarbonUtil
0:         .inferSchema(identifier.getTablePath(), identifier.getTableName(), isCarbonFileProvider);
author:Jacky Li
-------------------------------------------------------------------------------
commit:f910cfa
/////////////////////////////////////////////////////////////////////////
0:         CarbonUtil.inferSchema(identifier.getTablePath(), identifier.getTableName());
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.metadata.schema;
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
1:     String schemaFilePath = CarbonTablePath.getSchemaFilePath(identifier.getTablePath());
/////////////////////////////////////////////////////////////////////////
1:           CarbonUtil.readSchemaFile(CarbonTablePath.getSchemaFilePath(identifier.getTablePath()));
/////////////////////////////////////////////////////////////////////////
1:    * @param identifier
1:   public static TableInfo getTableInfo(AbsoluteTableIdentifier identifier)
1:         CarbonUtil.readSchemaFile(CarbonTablePath.getSchemaFilePath(identifier.getTablePath()));
1:         identifier.getCarbonTableIdentifier();
1:         identifier.getTablePath());
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
1:       TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:           tableInfo,
1:           identifier.getCarbonTableIdentifier().getDatabaseName(),
1:           tableName,
1:           identifier.getTablePath());
commit:733bb51
/////////////////////////////////////////////////////////////////////////
1:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.S3) ||
commit:528c2be
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:  * TODO: It should be removed after store manager implementation.
0:   public static CarbonTable readCarbonTableFromStore(CarbonTablePath carbonTablePath,
0:       AbsoluteTableIdentifier identifier) throws IOException {
1:     if (FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.LOCAL) ||
1:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.HDFS) ||
1:         FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.VIEWFS)) {
1:       String tableName = identifier.getCarbonTableIdentifier().getTableName();
/////////////////////////////////////////////////////////////////////////
0:           .fromExternalToWrapperTableInfo(tableInfo,
0:               identifier.getCarbonTableIdentifier().getDatabaseName(), tableName,
0:               identifier.getStorePath());
1:       return CarbonMetadata.getInstance().getCarbonTable(
1:           identifier.getCarbonTableIdentifier().getTableUniqueName());
1:     } else {
0:       return null;
author:Ajantha-Bhat
-------------------------------------------------------------------------------
commit:c09ef99
/////////////////////////////////////////////////////////////////////////
0:         CarbonUtil.inferSchema(identifier.getTablePath(), identifier, false);
1:     TableInfo wrapperTableInfo = schemaConverter.fromExternalToWrapperTableInfo(
1:         tableInfo, identifier.getDatabaseName(), identifier.getTableName(),
1:         identifier.getTablePath());
author:xuchuanyin
-------------------------------------------------------------------------------
commit:910d496
/////////////////////////////////////////////////////////////////////////
1:     return thriftWrapperSchemaConverter.fromExternalToWrapperTableInfo(
1:         thriftTableInfo,
1:         carbonTableIdentifier.getDatabaseName(),
1:         carbonTableIdentifier.getTableName(),
0:         absoluteTableIdentifier.getTablePath());
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:30457c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
0:           CarbonUtil.readSchemaFile(carbonTablePath.getSchemaFilePath());
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * the method returns the Wrapper TableInfo
1:    *
0:    * @param absoluteTableIdentifier
1:    * @return
1:    */
0:   public static TableInfo getTableInfo(AbsoluteTableIdentifier absoluteTableIdentifier)
1:       throws IOException {
0:     CarbonTablePath carbonTablePath = CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier);
1:     org.apache.carbondata.format.TableInfo thriftTableInfo =
0:         CarbonUtil.readSchemaFile(carbonTablePath.getSchemaFilePath());
1:     ThriftWrapperSchemaConverterImpl thriftWrapperSchemaConverter =
1:         new ThriftWrapperSchemaConverterImpl();
1:     CarbonTableIdentifier carbonTableIdentifier =
0:         absoluteTableIdentifier.getCarbonTableIdentifier();
0:     TableInfo tableInfo = thriftWrapperSchemaConverter
0:         .fromExternalToWrapperTableInfo(thriftTableInfo, carbonTableIdentifier.getDatabaseName(),
0:             carbonTableIdentifier.getTableName(), absoluteTableIdentifier.getTablePath());
0:     return tableInfo;
1:   }
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:               identifier.getTablePath());
author:nareshpr
-------------------------------------------------------------------------------
commit:bcd2839
/////////////////////////////////////////////////////////////////////////
1:       throw new IOException("File does not exist: " + schemaFilePath);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.converter.SchemaConverter;
1: import org.apache.carbondata.core.metadata.converter.ThriftWrapperSchemaConverterImpl;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
commit:fad5e1f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
1:   public static CarbonTable readCarbonTableFromStore(AbsoluteTableIdentifier identifier)
0:       throws IOException {
0:     CarbonTablePath carbonTablePath = CarbonStorePath.getCarbonTablePath(identifier);
author:kumarvishal
-------------------------------------------------------------------------------
commit:31b355f
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.hadoop.util;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.converter.SchemaConverter;
0: import org.apache.carbondata.core.carbon.metadata.converter.ThriftWrapperSchemaConverterImpl;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.TableInfo;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
0: import org.apache.carbondata.core.reader.ThriftReader;
1: 
0: import org.apache.thrift.TBase;
1: 
1: /**
0:  * TODO: It should be removed after store manager implemetation.
1:  */
1: public class SchemaReader {
1: 
0:   public CarbonTable readCarbonTableFromStore(CarbonTablePath carbonTablePath,
0:       CarbonTableIdentifier tableIdentifier, String storePath) throws IOException {
0:     String schemaFilePath = carbonTablePath.getSchemaFilePath();
0:     if (FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.HDFS)
0:           || FileFactory.isFileExist(schemaFilePath, FileFactory.FileType.VIEWFS)) {
0:       String tableName = tableIdentifier.getTableName();
1: 
0:       ThriftReader.TBaseCreator createTBase = new ThriftReader.TBaseCreator() {
0:         public TBase create() {
0:           return new org.apache.carbondata.format.TableInfo();
1:         }
0:       };
0:       ThriftReader thriftReader =
0:           new ThriftReader(carbonTablePath.getSchemaFilePath(), createTBase);
0:       thriftReader.open();
0:       org.apache.carbondata.format.TableInfo tableInfo =
0:           (org.apache.carbondata.format.TableInfo) thriftReader.read();
0:       thriftReader.close();
1: 
1:       SchemaConverter schemaConverter = new ThriftWrapperSchemaConverterImpl();
0:       TableInfo wrapperTableInfo = schemaConverter
0:           .fromExternalToWrapperTableInfo(tableInfo, tableIdentifier.getDatabaseName(), tableName,
0:               storePath);
0:       wrapperTableInfo.setMetaDataFilepath(CarbonTablePath.getFolderContainingFile(schemaFilePath));
1:       CarbonMetadata.getInstance().loadTableMetadata(wrapperTableInfo);
0:       return CarbonMetadata.getInstance().getCarbonTable(tableIdentifier.getTableUniqueName());
1:     }
0:     return null;
1:   }
1: }
============================================================================