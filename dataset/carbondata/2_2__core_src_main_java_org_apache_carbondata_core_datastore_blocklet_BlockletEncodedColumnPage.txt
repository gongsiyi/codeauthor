1:e710339: /*
1:e710339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e710339:  * contributor license agreements.  See the NOTICE file distributed with
1:e710339:  * this work for additional information regarding copyright ownership.
1:e710339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e710339:  * (the "License"); you may not use this file except in compliance with
1:e710339:  * the License.  You may obtain a copy of the License at
1:e710339:  *
1:e710339:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e710339:  *
1:e710339:  * Unless required by applicable law or agreed to in writing, software
1:e710339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e710339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e710339:  * See the License for the specific language governing permissions and
1:e710339:  * limitations under the License.
1:e710339:  */
1:e710339: package org.apache.carbondata.core.datastore.blocklet;
1:e710339: 
1:e710339: import java.io.IOException;
1:e710339: import java.util.ArrayDeque;
1:e710339: import java.util.ArrayList;
1:e710339: import java.util.List;
1:e710339: import java.util.concurrent.ExecutionException;
1:e710339: import java.util.concurrent.ExecutorService;
1:e710339: import java.util.concurrent.Future;
1:e710339: 
1:e710339: import org.apache.carbondata.common.logging.LogService;
1:e710339: import org.apache.carbondata.common.logging.LogServiceFactory;
1:2ccdbb7: import org.apache.carbondata.core.datastore.page.ActualDataBasedFallbackEncoder;
1:2ccdbb7: import org.apache.carbondata.core.datastore.page.DecoderBasedFallbackEncoder;
1:e710339: import org.apache.carbondata.core.datastore.page.FallbackEncodedColumnPage;
1:e710339: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1:e710339: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
1:2ccdbb7: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:e710339: import org.apache.carbondata.core.memory.MemoryException;
1:e710339: import org.apache.carbondata.format.LocalDictionaryChunk;
1:e710339: 
1:e710339: /**
1:e710339:  * Maintains the list of encoded page of a column in a blocklet
1:e710339:  * and encoded dictionary values only if column is encoded using local
1:e710339:  * dictionary
1:e710339:  * Handle the fallback if all the pages in blocklet are not
1:e710339:  * encoded with local dictionary
1:e710339:  */
1:e710339: public class BlockletEncodedColumnPage {
1:e710339: 
1:e710339:   /**
1:e710339:    * LOGGER
1:e710339:    */
1:e710339:   private static final LogService LOGGER =
1:e710339:       LogServiceFactory.getLogService(BlockletEncodedColumnPage.class.getName());
1:e710339: 
1:e710339:   /**
1:e710339:    * list of encoded page of a column in a blocklet
1:e710339:    */
1:e710339:   private List<EncodedColumnPage> encodedColumnPageList;
1:e710339: 
1:e710339:   /**
1:e710339:    * fallback executor service
1:e710339:    */
1:e710339:   private ExecutorService fallbackExecutorService;
1:e710339: 
1:e710339:   /**
1:e710339:    * to check whether pages are local dictionary encoded or not
1:e710339:    */
1:e710339:   private boolean isLocalDictEncoded;
1:e710339: 
1:e710339:   /**
1:e710339:    * page level dictionary only when column is encoded with local dictionary
1:e710339:    */
1:e710339:   private PageLevelDictionary pageLevelDictionary;
1:e710339: 
1:e710339:   /**
1:e710339:    * fallback future task queue;
1:e710339:    */
1:e710339:   private ArrayDeque<Future<FallbackEncodedColumnPage>> fallbackFutureQueue;
1:e710339: 
1:3a4b881:   private String columnName;
1:3a4b881: 
1:2ccdbb7:   /**
1:2ccdbb7:    * is decoder based fallback enabled
1:2ccdbb7:    */
1:2ccdbb7:   private boolean isDecoderBasedFallBackEnabled;
1:2ccdbb7: 
1:2ccdbb7:   /**
1:2ccdbb7:    * Local dictionary generator for column
1:2ccdbb7:    */
1:2ccdbb7:   private LocalDictionaryGenerator localDictionaryGenerator;
1:2ccdbb7: 
1:2ccdbb7:   BlockletEncodedColumnPage(ExecutorService fallbackExecutorService,
1:2ccdbb7:       boolean isDecoderBasedFallBackEnabled, LocalDictionaryGenerator localDictionaryGenerator) {
1:e710339:     this.fallbackExecutorService = fallbackExecutorService;
1:3a4b881:     this.fallbackFutureQueue = new ArrayDeque<>();
1:2ccdbb7:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
1:2ccdbb7:     this.localDictionaryGenerator = localDictionaryGenerator;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to add column page of a column
1:e710339:    *
1:e710339:    * @param encodedColumnPage
1:e710339:    * encoded column page
1:e710339:    */
1:2ccdbb7:   void addEncodedColumnPage(EncodedColumnPage encodedColumnPage) {
1:e710339:     if (null == encodedColumnPageList) {
1:e710339:       this.encodedColumnPageList = new ArrayList<>();
1:e710339:       // if dimension page is local dictionary enabled and encoded with local dictionary
1:e710339:       if (encodedColumnPage.isLocalDictGeneratedPage()) {
1:e710339:         this.isLocalDictEncoded = true;
1:e710339:         // get first page dictionary
1:e710339:         this.pageLevelDictionary = encodedColumnPage.getPageDictionary();
1:e710339:       }
1:3a4b881:       this.encodedColumnPageList.add(encodedColumnPage);
1:3a4b881:       this.columnName = encodedColumnPage.getActualPage().getColumnSpec().getFieldName();
1:e710339:       return;
1:e710339:     }
1:3a4b881:     // when first page was encoded without dictionary and next page encoded with dictionary
1:3a4b881:     // in a blocklet
1:3a4b881:     if (!isLocalDictEncoded && encodedColumnPage.isLocalDictGeneratedPage()) {
1:3a4b881:       LOGGER.info(
1:3a4b881:           "Local dictionary Fallback is initiated for column: " + this.columnName + " for page:"
1:3a4b881:               + encodedColumnPageList.size());
1:2ccdbb7:       initiateFallBack(encodedColumnPage, encodedColumnPageList.size());
1:3a4b881:       // fill null so once page is decoded again fill the re-encoded page again
1:3a4b881:       this.encodedColumnPageList.add(null);
1:3a4b881:     }
1:e710339:     // if local dictionary is false or column is encoded with local dictionary then
1:e710339:     // add a page
1:3a4b881:     else if (!isLocalDictEncoded || encodedColumnPage.isLocalDictGeneratedPage()) {
1:e710339:       // merge page level dictionary values
1:e710339:       if (null != this.pageLevelDictionary) {
1:e710339:         pageLevelDictionary.mergerDictionaryValues(encodedColumnPage.getPageDictionary());
1:3a4b881:       }
1:3a4b881:       this.encodedColumnPageList.add(encodedColumnPage);
1:e710339:     }
1:3a4b881:     // if all the older pages were encoded with dictionary and new pages are without dictionary
1:3a4b881:     else {
1:e710339:       isLocalDictEncoded = false;
1:e710339:       pageLevelDictionary = null;
1:36e14e5:       LOGGER.info("Local dictionary Fallback is initiated for column: " + this.columnName
1:3a4b881:           + " for pages: 1 to " + encodedColumnPageList.size());
1:e710339:       // submit all the older pages encoded with dictionary for fallback
1:e710339:       for (int pageIndex = 0; pageIndex < encodedColumnPageList.size(); pageIndex++) {
1:3a4b881:         if (encodedColumnPageList.get(pageIndex).getActualPage().isLocalDictGeneratedPage()) {
1:2ccdbb7:           initiateFallBack(encodedColumnPageList.get(pageIndex), pageIndex);
1:3a4b881:         }
1:e710339:       }
1:e710339:       //add to page list
2:e710339:       this.encodedColumnPageList.add(encodedColumnPage);
1:e710339:     }
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Return the list of encoded page list for a column in a blocklet
1:e710339:    *
1:e710339:    * @return list of encoded page list
1:e710339:    */
1:e710339:   public List<EncodedColumnPage> getEncodedColumnPageList() {
1:e710339:     // if fallback queue is null then for some pages fallback was initiated
1:e710339:     if (null != this.fallbackFutureQueue) {
1:e710339:       try {
1:e710339:         // check if queue is not empty
1:e710339:         while (!fallbackFutureQueue.isEmpty()) {
1:e710339:           // get the head element of queue
1:e710339:           FallbackEncodedColumnPage fallbackEncodedColumnPage = fallbackFutureQueue.poll().get();
1:e710339:           // add the encoded column page to list
1:e710339:           encodedColumnPageList.set(fallbackEncodedColumnPage.getPageIndex(),
1:e710339:               fallbackEncodedColumnPage.getEncodedColumnPage());
1:e710339:         }
1:e710339:       } catch (ExecutionException | InterruptedException e) {
1:e710339:         throw new RuntimeException("Problem while encoding the blocklet data during fallback", e);
1:e710339:       }
1:e710339:       // setting to null as all the fallback encoded page has been added to list
1:e710339:       fallbackFutureQueue = null;
1:e710339:     }
1:e710339:     // in case of dictionary encoded column page memory will be freed only after
1:e710339:     // all the pages are added in a blocklet, as fallback can happen anytime so old pages memory
1:e710339:     // cannot be freed, so after encoding is done we can free the page memory
1:e710339:     if (null != pageLevelDictionary) {
1:e710339:       // clear the memory footprint for local dictionary encoded pages
1:e710339:       for (EncodedColumnPage columnPage : encodedColumnPageList) {
1:e710339:         columnPage.freeMemory();
1:e710339:       }
1:e710339:     }
1:e710339:     return encodedColumnPageList;
1:e710339:   }
1:e710339: 
1:e710339:   /**
1:e710339:    * Below method will be used to get the encoded dictionary
1:e710339:    * values for local dictionary generated columns
1:e710339:    *
1:e710339:    * @return encoded dictionary values if column is local dictionary generated
1:e710339:    */
1:e710339:   public LocalDictionaryChunk getEncodedDictionary() {
1:e710339:     if (null != pageLevelDictionary) {
1:e710339:       try {
1:e710339:         return pageLevelDictionary.getLocalDictionaryChunkForBlocklet();
1:e710339:       } catch (IOException | MemoryException e) {
1:e710339:         throw new RuntimeException(e);
1:e710339:       }
1:e710339:     }
1:e710339:     return null;
1:e710339:   }
1:2ccdbb7: 
1:2ccdbb7:   /**
1:2ccdbb7:    * This method initiates the fallback for local dictionary encoded column page
1:2ccdbb7:    * @param encodedColumnPage
1:2ccdbb7:    * @param pageIndex
1:2ccdbb7:    */
1:2ccdbb7:   private void initiateFallBack(EncodedColumnPage encodedColumnPage, int pageIndex) {
1:2ccdbb7:     if (isDecoderBasedFallBackEnabled) {
1:2ccdbb7:       fallbackFutureQueue.add(fallbackExecutorService.submit(
1:2ccdbb7:           new DecoderBasedFallbackEncoder(encodedColumnPage, pageIndex, localDictionaryGenerator)));
1:2ccdbb7:     } else {
1:2ccdbb7:       fallbackFutureQueue.add(fallbackExecutorService.submit(
1:2ccdbb7:           new ActualDataBasedFallbackEncoder(encodedColumnPage, encodedColumnPageList.size())));
1:2ccdbb7:     }
1:2ccdbb7:   }
1:e710339: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:2ccdbb7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.ActualDataBasedFallbackEncoder;
1: import org.apache.carbondata.core.datastore.page.DecoderBasedFallbackEncoder;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * is decoder based fallback enabled
1:    */
1:   private boolean isDecoderBasedFallBackEnabled;
1: 
1:   /**
1:    * Local dictionary generator for column
1:    */
1:   private LocalDictionaryGenerator localDictionaryGenerator;
1: 
1:   BlockletEncodedColumnPage(ExecutorService fallbackExecutorService,
1:       boolean isDecoderBasedFallBackEnabled, LocalDictionaryGenerator localDictionaryGenerator) {
1:     this.isDecoderBasedFallBackEnabled = isDecoderBasedFallBackEnabled;
1:     this.localDictionaryGenerator = localDictionaryGenerator;
/////////////////////////////////////////////////////////////////////////
1:   void addEncodedColumnPage(EncodedColumnPage encodedColumnPage) {
/////////////////////////////////////////////////////////////////////////
1:       initiateFallBack(encodedColumnPage, encodedColumnPageList.size());
/////////////////////////////////////////////////////////////////////////
1:           initiateFallBack(encodedColumnPageList.get(pageIndex), pageIndex);
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This method initiates the fallback for local dictionary encoded column page
1:    * @param encodedColumnPage
1:    * @param pageIndex
1:    */
1:   private void initiateFallBack(EncodedColumnPage encodedColumnPage, int pageIndex) {
1:     if (isDecoderBasedFallBackEnabled) {
1:       fallbackFutureQueue.add(fallbackExecutorService.submit(
1:           new DecoderBasedFallbackEncoder(encodedColumnPage, pageIndex, localDictionaryGenerator)));
1:     } else {
1:       fallbackFutureQueue.add(fallbackExecutorService.submit(
1:           new ActualDataBasedFallbackEncoder(encodedColumnPage, encodedColumnPageList.size())));
1:     }
1:   }
commit:36e14e5
/////////////////////////////////////////////////////////////////////////
1:       LOGGER.info("Local dictionary Fallback is initiated for column: " + this.columnName
commit:b0d24ea
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1:   private String columnName;
1: 
1:     this.fallbackFutureQueue = new ArrayDeque<>();
/////////////////////////////////////////////////////////////////////////
1:       this.encodedColumnPageList.add(encodedColumnPage);
1:       this.columnName = encodedColumnPage.getActualPage().getColumnSpec().getFieldName();
1:     // when first page was encoded without dictionary and next page encoded with dictionary
1:     // in a blocklet
1:     if (!isLocalDictEncoded && encodedColumnPage.isLocalDictGeneratedPage()) {
1:       LOGGER.info(
1:           "Local dictionary Fallback is initiated for column: " + this.columnName + " for page:"
1:               + encodedColumnPageList.size());
0:       fallbackFutureQueue.add(fallbackExecutorService
0:           .submit(new FallbackColumnPageEncoder(encodedColumnPage, encodedColumnPageList.size())));
1:       // fill null so once page is decoded again fill the re-encoded page again
1:       this.encodedColumnPageList.add(null);
1:     }
1:     else if (!isLocalDictEncoded || encodedColumnPage.isLocalDictGeneratedPage()) {
1:       this.encodedColumnPageList.add(encodedColumnPage);
1:     }
1:     // if all the older pages were encoded with dictionary and new pages are without dictionary
1:     else {
0:       LOGGER.warn("Local dictionary Fallback is initiated for column: " + this.columnName
1:           + " for pages: 1 to " + encodedColumnPageList.size());
1:         if (encodedColumnPageList.get(pageIndex).getActualPage().isLocalDictGeneratedPage()) {
0:           fallbackFutureQueue.add(fallbackExecutorService.submit(
0:               new FallbackColumnPageEncoder(encodedColumnPageList.get(pageIndex), pageIndex)));
1:         }
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datastore.blocklet;
1: 
1: import java.io.IOException;
1: import java.util.ArrayDeque;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Future;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.datastore.page.FallbackColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.FallbackEncodedColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.EncodedColumnPage;
1: import org.apache.carbondata.core.localdictionary.PageLevelDictionary;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.format.LocalDictionaryChunk;
1: 
1: /**
1:  * Maintains the list of encoded page of a column in a blocklet
1:  * and encoded dictionary values only if column is encoded using local
1:  * dictionary
1:  * Handle the fallback if all the pages in blocklet are not
1:  * encoded with local dictionary
1:  */
1: public class BlockletEncodedColumnPage {
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(BlockletEncodedColumnPage.class.getName());
1: 
1:   /**
1:    * list of encoded page of a column in a blocklet
1:    */
1:   private List<EncodedColumnPage> encodedColumnPageList;
1: 
1:   /**
1:    * fallback executor service
1:    */
1:   private ExecutorService fallbackExecutorService;
1: 
1:   /**
1:    * to check whether pages are local dictionary encoded or not
1:    */
1:   private boolean isLocalDictEncoded;
1: 
1:   /**
1:    * page level dictionary only when column is encoded with local dictionary
1:    */
1:   private PageLevelDictionary pageLevelDictionary;
1: 
1:   /**
1:    * fallback future task queue;
1:    */
1:   private ArrayDeque<Future<FallbackEncodedColumnPage>> fallbackFutureQueue;
1: 
0:   BlockletEncodedColumnPage(ExecutorService fallbackExecutorService) {
1:     this.fallbackExecutorService = fallbackExecutorService;
1:   }
1: 
1:   /**
1:    * Below method will be used to add column page of a column
1:    *
1:    * @param encodedColumnPage
1:    * encoded column page
1:    */
0:   void addEncodedColumnColumnPage(EncodedColumnPage encodedColumnPage) {
1:     if (null == encodedColumnPageList) {
1:       this.encodedColumnPageList = new ArrayList<>();
1:       // if dimension page is local dictionary enabled and encoded with local dictionary
1:       if (encodedColumnPage.isLocalDictGeneratedPage()) {
1:         this.isLocalDictEncoded = true;
1:         // get first page dictionary
1:         this.pageLevelDictionary = encodedColumnPage.getPageDictionary();
1:       }
0:       encodedColumnPageList.add(encodedColumnPage);
1:       return;
1:     }
1:     // if local dictionary is false or column is encoded with local dictionary then
1:     // add a page
0:     if (!isLocalDictEncoded || encodedColumnPage.isLocalDictGeneratedPage()) {
1:       this.encodedColumnPageList.add(encodedColumnPage);
1:       // merge page level dictionary values
1:       if (null != this.pageLevelDictionary) {
1:         pageLevelDictionary.mergerDictionaryValues(encodedColumnPage.getPageDictionary());
1:       }
0:     } else {
0:       // if older pages were encoded with dictionary and new pages are without dictionary
1:       isLocalDictEncoded = false;
1:       pageLevelDictionary = null;
0:       this.fallbackFutureQueue = new ArrayDeque<>();
0:       LOGGER.info(
0:           "Local dictionary Fallback is initiated for column: " + encodedColumnPageList.get(0)
0:               .getActualPage().getColumnSpec().getFieldName());
1:       // submit all the older pages encoded with dictionary for fallback
1:       for (int pageIndex = 0; pageIndex < encodedColumnPageList.size(); pageIndex++) {
0:         fallbackFutureQueue.add(fallbackExecutorService.submit(
0:             new FallbackColumnPageEncoder(encodedColumnPageList.get(pageIndex), pageIndex)));
1:       }
1:       //add to page list
1:       this.encodedColumnPageList.add(encodedColumnPage);
1:     }
1:   }
1: 
1:   /**
1:    * Return the list of encoded page list for a column in a blocklet
1:    *
1:    * @return list of encoded page list
1:    */
1:   public List<EncodedColumnPage> getEncodedColumnPageList() {
1:     // if fallback queue is null then for some pages fallback was initiated
1:     if (null != this.fallbackFutureQueue) {
1:       try {
1:         // check if queue is not empty
1:         while (!fallbackFutureQueue.isEmpty()) {
1:           // get the head element of queue
1:           FallbackEncodedColumnPage fallbackEncodedColumnPage = fallbackFutureQueue.poll().get();
1:           // add the encoded column page to list
1:           encodedColumnPageList.set(fallbackEncodedColumnPage.getPageIndex(),
1:               fallbackEncodedColumnPage.getEncodedColumnPage());
0:           fallbackFutureQueue.poll();
1:         }
1:       } catch (ExecutionException | InterruptedException e) {
1:         throw new RuntimeException("Problem while encoding the blocklet data during fallback", e);
1:       }
1:       // setting to null as all the fallback encoded page has been added to list
1:       fallbackFutureQueue = null;
1:     }
1:     // in case of dictionary encoded column page memory will be freed only after
1:     // all the pages are added in a blocklet, as fallback can happen anytime so old pages memory
1:     // cannot be freed, so after encoding is done we can free the page memory
1:     if (null != pageLevelDictionary) {
1:       // clear the memory footprint for local dictionary encoded pages
1:       for (EncodedColumnPage columnPage : encodedColumnPageList) {
1:         columnPage.freeMemory();
1:       }
1:     }
1:     return encodedColumnPageList;
1:   }
1: 
1:   /**
1:    * Below method will be used to get the encoded dictionary
1:    * values for local dictionary generated columns
1:    *
1:    * @return encoded dictionary values if column is local dictionary generated
1:    */
1:   public LocalDictionaryChunk getEncodedDictionary() {
1:     if (null != pageLevelDictionary) {
1:       try {
1:         return pageLevelDictionary.getLocalDictionaryChunkForBlocklet();
1:       } catch (IOException | MemoryException e) {
1:         throw new RuntimeException(e);
1:       }
1:     }
1:     return null;
1:   }
1: }
============================================================================