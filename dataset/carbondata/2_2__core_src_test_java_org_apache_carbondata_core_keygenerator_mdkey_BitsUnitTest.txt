1:5ef67ac: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:5ef67ac:  *
1:5ef67ac:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5ef67ac:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:5ef67ac:  */
1:5ef67ac: 
1:5ef67ac: package org.apache.carbondata.core.keygenerator.mdkey;
1:5ef67ac: 
1:5ef67ac: import org.junit.BeforeClass;
1:5ef67ac: import org.junit.Test;
1:5ef67ac: 
1:5ef67ac: import static org.hamcrest.CoreMatchers.equalTo;
1:5ef67ac: import static org.hamcrest.MatcherAssert.assertThat;
1:5ef67ac: import static org.hamcrest.core.Is.is;
1:5ef67ac: import static org.junit.Assert.assertEquals;
1:5ef67ac: 
1:5ef67ac: public class BitsUnitTest {
1:5ef67ac:   static Bits bits;
1:5ef67ac: 
1:5ef67ac:   @BeforeClass public static void setup() {
1:5ef67ac:     int[] lens = new int[] { 32, 8, 24, 64, 64 };
1:5ef67ac:     bits = new Bits(lens);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetWithIntKeys() throws Exception {
1:5ef67ac:     long[] expected = new long[] { 0L, 0L, 86570434576L};
1:5ef67ac:     int[] keys = new int[] { 20, 40, 16, 24, 80 };
1:5ef67ac:     long[] result = bits.get(keys);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetWithLongKeys() throws Exception {
1:5ef67ac:     long[] expected = new long[] { 0L, 0L, 103616086028L};
1:5ef67ac:     long[] keys = new long[] { 24L, 32L, 12L, 64L, 40L };
1:5ef67ac:     long[] result = bits.get(keys);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyByteOffsets() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 64, 64, 64, 64, 64 };
1:5ef67ac:     Bits bits1 = new Bits(lens);
1:5ef67ac:     int index = 2;
1:5ef67ac:     int[] expected = new int[] { 16, 23 };
1:5ef67ac:     int[] result = bits1.getKeyByteOffsets(index);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyArray() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 8, 32, 24 };
1:5ef67ac:     Bits bit1 = new Bits(lens);
1:5ef67ac:     int[] maskByteRanges = new int[] { 1, 3, 5, 6, 4, 8, 9, 2 };
1:5ef67ac:     byte[] key = new byte[] { 8, 24, 32, 24, 40, 127, 64, 16, 24, 16 };
1:5ef67ac:     long[] expected = new long[] { 24L, 410992680L, 1576992L };
1:5ef67ac:     long[] result = bit1.getKeyArray(key, maskByteRanges);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyArrayWithKeyContainsNegativeValueOFByte() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 8, 32, 24 };
1:5ef67ac:     Bits bit1 = new Bits(lens);
1:5ef67ac:     int[] maskByteRanges = new int[] { 1, 3, 5, 6, 4, 8, 9, 2 };
1:5ef67ac:     byte[] key = new byte[] { -8, 24, 32, -24, 40, -127, 64, 16, -24, 16 };
1:5ef67ac:     long[] expected = new long[] { 24L, 3900784680L, 15208480L };
1:5ef67ac:     long[] result = bit1.getKeyArray(key, maskByteRanges);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyArrayWithByteBoundaryValue() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 127, 127, 127 };
1:5ef67ac:     Bits bits1= new Bits(lens);
1:5ef67ac:     int[] maskByteRanges =
1:5ef67ac:         new int[] { 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5,
1:5ef67ac:             6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2 };
1:5ef67ac:     byte[] key = new byte[] { 127, 24, 32, 127, 40, 127, 64, 16, 24, 16 };
1:5ef67ac:     long[] expected =
1:5ef67ac:         new long[] { 7061077969919295616L, 3530538984959647808L, 1765269492479823904L };
1:5ef67ac:     long[] result = bits1.getKeyArray(key, maskByteRanges);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testGetKeyArrayWithNullValue() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 20, 35, 10 };
1:5ef67ac:     Bits bit1 = new Bits(lens);
1:5ef67ac:     byte[] key = new byte[] { 10, 20, 30, 10, 15, 10, 20, 30, 10, 15 };
1:5ef67ac:     long[] expected = new long[] { 41200, 10800497927L, 522 };
1:5ef67ac:     long[] result = bit1.getKeyArray(key, null);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithBitsObject() throws Exception {
1:5ef67ac:     boolean result = bits.equals(bits);
1:5ef67ac:     assertEquals(true, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithOtherObject() throws Exception {
1:5ef67ac:     boolean result = bits.equals(new Object());
1:5ef67ac:     assertEquals(false, result);
1:5ef67ac:   }
1:5ef67ac: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Anurag
-------------------------------------------------------------------------------
commit:5ef67ac
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.MatcherAssert.assertThat;
1: import static org.hamcrest.core.Is.is;
1: import static org.junit.Assert.assertEquals;
1: 
1: public class BitsUnitTest {
1:   static Bits bits;
1: 
1:   @BeforeClass public static void setup() {
1:     int[] lens = new int[] { 32, 8, 24, 64, 64 };
1:     bits = new Bits(lens);
1:   }
1: 
1:   @Test public void testGetWithIntKeys() throws Exception {
1:     long[] expected = new long[] { 0L, 0L, 86570434576L};
1:     int[] keys = new int[] { 20, 40, 16, 24, 80 };
1:     long[] result = bits.get(keys);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetWithLongKeys() throws Exception {
1:     long[] expected = new long[] { 0L, 0L, 103616086028L};
1:     long[] keys = new long[] { 24L, 32L, 12L, 64L, 40L };
1:     long[] result = bits.get(keys);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetKeyByteOffsets() throws Exception {
1:     int[] lens = new int[] { 64, 64, 64, 64, 64 };
1:     Bits bits1 = new Bits(lens);
1:     int index = 2;
1:     int[] expected = new int[] { 16, 23 };
1:     int[] result = bits1.getKeyByteOffsets(index);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetKeyArray() throws Exception {
1:     int[] lens = new int[] { 8, 32, 24 };
1:     Bits bit1 = new Bits(lens);
1:     int[] maskByteRanges = new int[] { 1, 3, 5, 6, 4, 8, 9, 2 };
1:     byte[] key = new byte[] { 8, 24, 32, 24, 40, 127, 64, 16, 24, 16 };
1:     long[] expected = new long[] { 24L, 410992680L, 1576992L };
1:     long[] result = bit1.getKeyArray(key, maskByteRanges);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetKeyArrayWithKeyContainsNegativeValueOFByte() throws Exception {
1:     int[] lens = new int[] { 8, 32, 24 };
1:     Bits bit1 = new Bits(lens);
1:     int[] maskByteRanges = new int[] { 1, 3, 5, 6, 4, 8, 9, 2 };
1:     byte[] key = new byte[] { -8, 24, 32, -24, 40, -127, 64, 16, -24, 16 };
1:     long[] expected = new long[] { 24L, 3900784680L, 15208480L };
1:     long[] result = bit1.getKeyArray(key, maskByteRanges);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetKeyArrayWithByteBoundaryValue() throws Exception {
1:     int[] lens = new int[] { 127, 127, 127 };
1:     Bits bits1= new Bits(lens);
1:     int[] maskByteRanges =
1:         new int[] { 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5,
1:             6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2, 1, 3, 5, 6, 4, 8, 9, 2 };
1:     byte[] key = new byte[] { 127, 24, 32, 127, 40, 127, 64, 16, 24, 16 };
1:     long[] expected =
1:         new long[] { 7061077969919295616L, 3530538984959647808L, 1765269492479823904L };
1:     long[] result = bits1.getKeyArray(key, maskByteRanges);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testGetKeyArrayWithNullValue() throws Exception {
1:     int[] lens = new int[] { 20, 35, 10 };
1:     Bits bit1 = new Bits(lens);
1:     byte[] key = new byte[] { 10, 20, 30, 10, 15, 10, 20, 30, 10, 15 };
1:     long[] expected = new long[] { 41200, 10800497927L, 522 };
1:     long[] result = bit1.getKeyArray(key, null);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testEqualsWithBitsObject() throws Exception {
1:     boolean result = bits.equals(bits);
1:     assertEquals(true, result);
1:   }
1: 
1:   @Test public void testEqualsWithOtherObject() throws Exception {
1:     boolean result = bits.equals(new Object());
1:     assertEquals(false, result);
1:   }
1: }
============================================================================