1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
6:cd6a4ff:  */
14:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:d3a09e2: 
1:1744278: import java.io.Serializable;
1:d3a09e2: 
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:d3a09e2: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:1744278: 
6:cd6a4ff: /**
1:cd6a4ff:  * dictionary column identifier which includes table identifier and column identifier
1:29dc302:  */
1:1744278: public class DictionaryColumnUniqueIdentifier implements Serializable {
1:29dc302: 
1:bb0b347:   private static final long serialVersionUID = -1231234567L;
1:bb0b347: 
1:29dc302:   /**
1:cd6a4ff:    * table fully qualified name
1:cd6a4ff:    */
1:29dc302:   private AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier;
1:bb0b347: 
1:cd6a4ff:   /**
1:cd6a4ff:    * unique column id
1:cd6a4ff:    */
1:cd6a4ff:   private ColumnIdentifier columnIdentifier;
1:d3a09e2: 
1:cd6a4ff:   private DataType dataType;
1:29dc302: 
1:29dc302:   private String dictionaryLocation;
1:29dc302: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Will be used in case of reverse dictionary cache which will be used
1:cd6a4ff:    * in case of data loading.
1:cd6a4ff:    *
1:29dc302:    * @param dictionarySourceAbsoluteTableIdentifier
1:cd6a4ff:    * @param columnIdentifier
1:cd6a4ff:    */
1:29dc302:   public DictionaryColumnUniqueIdentifier(
1:29dc302:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:cd6a4ff:       ColumnIdentifier columnIdentifier) {
1:29dc302:     if (dictionarySourceAbsoluteTableIdentifier == null) {
1:f031394:       throw new IllegalArgumentException("carbonTableIdentifier is null");
1:29dc302:     }
1:f031394:     if (columnIdentifier == null) {
1:f031394:       throw new IllegalArgumentException("columnIdentifier is null");
1:29dc302:     }
1:29dc302:     this.dictionarySourceAbsoluteTableIdentifier = dictionarySourceAbsoluteTableIdentifier;
1:cd6a4ff:     this.columnIdentifier = columnIdentifier;
1:f031394:     this.dataType = columnIdentifier.getDataType();
1:29dc302:     this.dictionaryLocation =
1:bf6c471:         CarbonTablePath.getMetadataPath(dictionarySourceAbsoluteTableIdentifier.getTablePath());
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:cd6a4ff:    * Will be used in case of forward dictionary cache in case
1:cd6a4ff:    * of query execution.
1:cd6a4ff:    *
1:29dc302:    * @param dictionarySourceAbsoluteTableIdentifier
1:cd6a4ff:    * @param columnIdentifier
1:cd6a4ff:    * @param dataType
1:29dc302:    */
1:29dc302:   public DictionaryColumnUniqueIdentifier(
1:29dc302:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:29dc302:       ColumnIdentifier columnIdentifier, DataType dataType) {
1:29dc302:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier);
1:cd6a4ff:     this.dataType = dataType;
1:29dc302:   }
1:29dc302: 
1:29dc302:   public DictionaryColumnUniqueIdentifier(
1:29dc302:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:29dc302:       ColumnIdentifier columnIdentifier, DataType dataType, String dictionaryLocation) {
1:29dc302:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier, dataType);
1:29dc302:     if (null != dictionaryLocation) {
1:29dc302:       this.dictionaryLocation = dictionaryLocation;
1:29dc302:     }
1:29dc302:   }
1:29dc302: 
1:cd6a4ff:   public DataType getDataType() {
1:cd6a4ff:     return dataType;
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:cd6a4ff:    * @return columnIdentifier
1:29dc302:    */
1:cd6a4ff:   public ColumnIdentifier getColumnIdentifier() {
1:cd6a4ff:     return columnIdentifier;
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:29dc302:    * @return dictionary file path
1:29dc302:    */
1:29dc302:   public String getDictionaryFilePath() {
1:bf6c471:     return CarbonTablePath.getExternalDictionaryFilePath(
1:bf6c471:         dictionaryLocation, columnIdentifier.getColumnId());
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:29dc302:    * @return dictionary metadata file path
1:29dc302:    */
1:29dc302:   public String getDictionaryMetaFilePath() {
1:bf6c471:     return CarbonTablePath.getExternalDictionaryMetaFilePath(
1:bf6c471:         dictionaryLocation, columnIdentifier.getColumnId());
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:29dc302:    * @return sort index file path
1:29dc302:    */
1:29dc302:   public String getSortIndexFilePath() {
1:bf6c471:     return CarbonTablePath.getExternalSortIndexFilePath(
1:bf6c471:         dictionaryLocation, columnIdentifier.getColumnId());
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:29dc302:    * @param offset
1:29dc302:    * @return sort index file path with given offset
1:29dc302:    */
1:29dc302:   public String getSortIndexFilePath(long offset) {
1:bf6c471:     return CarbonTablePath.getExternalSortIndexFilePath(
1:bf6c471:         dictionaryLocation, columnIdentifier.getColumnId(), offset);
1:29dc302:   }
1:29dc302: 
1:29dc302:   /**
1:cd6a4ff:    * overridden equals method
1:cd6a4ff:    *
1:cd6a4ff:    * @param other
1:cd6a4ff:    * @return
1:29dc302:    */
1:cd6a4ff:   @Override public boolean equals(Object other) {
1:29dc302:     if (this == other) {
1:29dc302:       return true;
1:29dc302:     }
1:29dc302:     if (other == null || getClass() != other.getClass()) {
1:29dc302:       return false;
1:29dc302:     }
1:cd6a4ff:     DictionaryColumnUniqueIdentifier that = (DictionaryColumnUniqueIdentifier) other;
1:29dc302:     if (!dictionarySourceAbsoluteTableIdentifier
1:29dc302:         .equals(that.dictionarySourceAbsoluteTableIdentifier)) {
1:29dc302:       return false;
1:29dc302:     }
1:cd6a4ff:     return columnIdentifier.equals(that.columnIdentifier);
1:29dc302:   }
1:d3a09e2: 
1:cd6a4ff:   /**
1:cd6a4ff:    * overridden hashcode method
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int hashCode() {
1:29dc302:     int result = dictionarySourceAbsoluteTableIdentifier.hashCode();
1:cd6a4ff:     result = 31 * result + columnIdentifier.hashCode();
1:cd6a4ff:     return result;
1:29dc302:   }
1:29dc302: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         CarbonTablePath.getMetadataPath(dictionarySourceAbsoluteTableIdentifier.getTablePath());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return CarbonTablePath.getExternalDictionaryFilePath(
1:         dictionaryLocation, columnIdentifier.getColumnId());
1:     return CarbonTablePath.getExternalDictionaryMetaFilePath(
1:         dictionaryLocation, columnIdentifier.getColumnId());
1:     return CarbonTablePath.getExternalSortIndexFilePath(
1:         dictionaryLocation, columnIdentifier.getColumnId());
/////////////////////////////////////////////////////////////////////////
1:     return CarbonTablePath.getExternalSortIndexFilePath(
1:         dictionaryLocation, columnIdentifier.getColumnId(), offset);
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         CarbonTablePath.getMetadataPath(dictionarySourceAbsoluteTableIdentifier.getTablePath());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     return CarbonTablePath.getExternalDictionaryFilePath(
0:         dictionaryLocation, columnIdentifier.getColumnId());
0:     return CarbonTablePath.getExternalDictionaryMetaFilePath(
0:         dictionaryLocation, columnIdentifier.getColumnId());
0:     return CarbonTablePath.getExternalSortIndexFilePath(
0:         dictionaryLocation, columnIdentifier.getColumnId());
/////////////////////////////////////////////////////////////////////////
0:     return CarbonTablePath.getExternalSortIndexFilePath(
0:         dictionaryLocation, columnIdentifier.getColumnId(), offset);
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
1:   private AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   private String dictionaryLocation;
1: 
1:    * @param dictionarySourceAbsoluteTableIdentifier
1:   public DictionaryColumnUniqueIdentifier(
1:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:     if (dictionarySourceAbsoluteTableIdentifier == null) {
1:     this.dictionarySourceAbsoluteTableIdentifier = dictionarySourceAbsoluteTableIdentifier;
1:     this.dictionaryLocation =
0:         CarbonStorePath.getCarbonTablePath(dictionarySourceAbsoluteTableIdentifier)
0:             .getMetadataDirectoryPath();
1:    * @param dictionarySourceAbsoluteTableIdentifier
1:   public DictionaryColumnUniqueIdentifier(
1:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:       ColumnIdentifier columnIdentifier, DataType dataType) {
1:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier);
1:   }
1: 
1:   public DictionaryColumnUniqueIdentifier(
1:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
1:       ColumnIdentifier columnIdentifier, DataType dataType, String dictionaryLocation) {
1:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier, dataType);
1:     if (null != dictionaryLocation) {
1:       this.dictionaryLocation = dictionaryLocation;
/////////////////////////////////////////////////////////////////////////
0:     if (null == carbonTablePath) {
0:       carbonTablePath = CarbonStorePath.getCarbonTablePath(dictionarySourceAbsoluteTableIdentifier);
1:     }
/////////////////////////////////////////////////////////////////////////
1:    * @return dictionary file path
1:    */
1:   public String getDictionaryFilePath() {
0:     return getCarbonTablePath()
0:         .getDictionaryFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
1:    * @return dictionary metadata file path
1:    */
1:   public String getDictionaryMetaFilePath() {
0:     return getCarbonTablePath()
0:         .getDictionaryMetaFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
1:    * @return sort index file path
1:    */
1:   public String getSortIndexFilePath() {
0:     return getCarbonTablePath()
0:         .getSortIndexFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
1:    * @param offset
1:    * @return sort index file path with given offset
1:    */
1:   public String getSortIndexFilePath(long offset) {
0:     return getCarbonTablePath()
0:         .getSortIndexFilePath(dictionaryLocation, columnIdentifier.getColumnId(), offset);
1:   }
1: 
1:   /**
1:     if (this == other) {
1:       return true;
1:     }
1:     if (other == null || getClass() != other.getClass()) {
1:       return false;
1:     }
1:     if (!dictionarySourceAbsoluteTableIdentifier
1:         .equals(that.dictionarySourceAbsoluteTableIdentifier)) {
1:       return false;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     int result = dictionarySourceAbsoluteTableIdentifier.hashCode();
commit:29dc302
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
/////////////////////////////////////////////////////////////////////////
0:   private AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:   private String dictionaryLocation;
1: 
0:    * @param dictionarySourceAbsoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(
0:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
0:     if (dictionarySourceAbsoluteTableIdentifier == null) {
0:     this.dictionarySourceAbsoluteTableIdentifier = dictionarySourceAbsoluteTableIdentifier;
0:     this.dictionaryLocation =
0:         CarbonStorePath.getCarbonTablePath(dictionarySourceAbsoluteTableIdentifier)
0:             .getMetadataDirectoryPath();
0:    * @param dictionarySourceAbsoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(
0:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
0:       ColumnIdentifier columnIdentifier, DataType dataType) {
0:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier);
1:   }
1: 
0:   public DictionaryColumnUniqueIdentifier(
0:       AbsoluteTableIdentifier dictionarySourceAbsoluteTableIdentifier,
0:       ColumnIdentifier columnIdentifier, DataType dataType, String dictionaryLocation) {
0:     this(dictionarySourceAbsoluteTableIdentifier, columnIdentifier, dataType);
0:     if (null != dictionaryLocation) {
0:       this.dictionaryLocation = dictionaryLocation;
/////////////////////////////////////////////////////////////////////////
0:     if (null == carbonTablePath) {
0:       carbonTablePath = CarbonStorePath.getCarbonTablePath(dictionarySourceAbsoluteTableIdentifier);
1:     }
/////////////////////////////////////////////////////////////////////////
0:    * @return dictionary file path
1:    */
0:   public String getDictionaryFilePath() {
0:     return getCarbonTablePath()
0:         .getDictionaryFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
0:    * @return dictionary metadata file path
1:    */
0:   public String getDictionaryMetaFilePath() {
0:     return getCarbonTablePath()
0:         .getDictionaryMetaFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
0:    * @return sort index file path
1:    */
0:   public String getSortIndexFilePath() {
0:     return getCarbonTablePath()
0:         .getSortIndexFilePath(dictionaryLocation, columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
0:    * @param offset
0:    * @return sort index file path with given offset
1:    */
0:   public String getSortIndexFilePath(long offset) {
0:     return getCarbonTablePath()
0:         .getSortIndexFilePath(dictionaryLocation, columnIdentifier.getColumnId(), offset);
1:   }
1: 
1:   /**
0:     if (this == other) {
0:       return true;
1:     }
0:     if (other == null || getClass() != other.getClass()) {
0:       return false;
1:     }
0:     if (!dictionarySourceAbsoluteTableIdentifier
0:         .equals(that.dictionarySourceAbsoluteTableIdentifier)) {
0:       return false;
1:     }
/////////////////////////////////////////////////////////////////////////
0:     int result = dictionarySourceAbsoluteTableIdentifier.hashCode();
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:   private AbsoluteTableIdentifier absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param absoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(AbsoluteTableIdentifier absoluteTableIdentifier,
0:     if (absoluteTableIdentifier == null) {
0:     this.absoluteTableIdentifier = absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param absoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(AbsoluteTableIdentifier absoluteTableIdentifier,
0:     this(absoluteTableIdentifier, columnIdentifier);
/////////////////////////////////////////////////////////////////////////
0:   public AbsoluteTableIdentifier getAbsoluteCarbonTableIdentifier() {
0:     return absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     if (!absoluteTableIdentifier.equals(that.absoluteTableIdentifier)) return false;
/////////////////////////////////////////////////////////////////////////
0:     int result = absoluteTableIdentifier.hashCode();
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:   private AbsoluteTableIdentifier absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param absoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(AbsoluteTableIdentifier absoluteTableIdentifier,
0:     if (absoluteTableIdentifier == null) {
0:     this.absoluteTableIdentifier = absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:    * @param absoluteTableIdentifier
0:   public DictionaryColumnUniqueIdentifier(AbsoluteTableIdentifier absoluteTableIdentifier,
0:     this(absoluteTableIdentifier, columnIdentifier);
/////////////////////////////////////////////////////////////////////////
0:   public AbsoluteTableIdentifier getAbsoluteCarbonTableIdentifier() {
0:     return absoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     if (!absoluteTableIdentifier.equals(that.absoluteTableIdentifier)) return false;
/////////////////////////////////////////////////////////////////////////
0:     int result = absoluteTableIdentifier.hashCode();
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = -1231234567L;
1: 
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
0:   private static final long serialVersionUID = -1231234567L;
1: 
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
0:   private transient CarbonTablePath carbonTablePath;
1: 
/////////////////////////////////////////////////////////////////////////
0:       ColumnIdentifier columnIdentifier, DataType dataType, CarbonTablePath carbonTablePath) {
0:     if (null != carbonTablePath) {
0:       this.carbonTablePath = carbonTablePath;
0:     }
/////////////////////////////////////////////////////////////////////////
0:   public CarbonTablePath getCarbonTablePath() {
0:     return carbonTablePath;
0:   }
1: 
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
0:   private transient CarbonTablePath carbonTablePath;
1: 
/////////////////////////////////////////////////////////////////////////
0:       ColumnIdentifier columnIdentifier, DataType dataType, CarbonTablePath carbonTablePath) {
0:     if (null != carbonTablePath) {
0:       this.carbonTablePath = carbonTablePath;
0:     }
/////////////////////////////////////////////////////////////////////////
0:   public CarbonTablePath getCarbonTablePath() {
0:     return carbonTablePath;
0:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:1744278
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class DictionaryColumnUniqueIdentifier implements Serializable {
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: 
1: /**
1:  * dictionary column identifier which includes table identifier and column identifier
1:  */
0: public class DictionaryColumnUniqueIdentifier {
1: 
1:   /**
1:    * table fully qualified name
1:    */
0:   private CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
1:    * unique column id
1:    */
1:   private ColumnIdentifier columnIdentifier;
1: 
1:   private DataType dataType;
1: 
1:   /**
1:    * Will be used in case of reverse dictionary cache which will be used
1:    * in case of data loading.
1:    *
0:    * @param carbonTableIdentifier
1:    * @param columnIdentifier
1:    */
0:   public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,
1:       ColumnIdentifier columnIdentifier) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
1:     this.columnIdentifier = columnIdentifier;
0:   }
1: 
1:   /**
1:    * Will be used in case of forward dictionary cache in case
1:    * of query execution.
1:    *
0:    * @param carbonTableIdentifier
1:    * @param columnIdentifier
1:    * @param dataType
1:    */
0:   public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,
0:       ColumnIdentifier columnIdentifier, DataType dataType) {
0:     this(carbonTableIdentifier, columnIdentifier);
1:     this.dataType = dataType;
0:   }
1: 
1:   public DataType getDataType() {
1:     return dataType;
0:   }
1: 
1:   /**
0:    * @return table identifier
1:    */
0:   public CarbonTableIdentifier getCarbonTableIdentifier() {
0:     return carbonTableIdentifier;
0:   }
1: 
1:   /**
1:    * @return columnIdentifier
1:    */
1:   public ColumnIdentifier getColumnIdentifier() {
1:     return columnIdentifier;
0:   }
1: 
1:   /**
1:    * overridden equals method
1:    *
1:    * @param other
1:    * @return
1:    */
1:   @Override public boolean equals(Object other) {
0:     if (this == other) return true;
0:     if (other == null || getClass() != other.getClass()) return false;
1:     DictionaryColumnUniqueIdentifier that = (DictionaryColumnUniqueIdentifier) other;
0:     if (!carbonTableIdentifier.equals(that.carbonTableIdentifier)) return false;
1:     return columnIdentifier.equals(that.columnIdentifier);
1: 
0:   }
1: 
1:   /**
1:    * overridden hashcode method
1:    *
1:    * @return
1:    */
1:   @Override public int hashCode() {
0:     int result = carbonTableIdentifier.hashCode();
1:     result = 31 * result + columnIdentifier.hashCode();
1:     return result;
0:   }
0: }
commit:1744278
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
0: 
/////////////////////////////////////////////////////////////////////////
0: public class DictionaryColumnUniqueIdentifier implements Serializable {
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
0: 
0: /**
0:  * dictionary column identifier which includes table identifier and column identifier
0:  */
0: public class DictionaryColumnUniqueIdentifier {
0: 
0:   /**
0:    * table fully qualified name
0:    */
0:   private CarbonTableIdentifier carbonTableIdentifier;
0: 
0:   /**
0:    * unique column id
0:    */
0:   private ColumnIdentifier columnIdentifier;
0: 
0:   private DataType dataType;
0: 
0:   /**
0:    * Will be used in case of reverse dictionary cache which will be used
0:    * in case of data loading.
0:    *
0:    * @param carbonTableIdentifier
0:    * @param columnIdentifier
0:    */
0:   public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,
0:       ColumnIdentifier columnIdentifier) {
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.columnIdentifier = columnIdentifier;
0:   }
0: 
0:   /**
0:    * Will be used in case of forward dictionary cache in case
0:    * of query execution.
0:    *
0:    * @param carbonTableIdentifier
0:    * @param columnIdentifier
0:    * @param dataType
0:    */
0:   public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,
0:       ColumnIdentifier columnIdentifier, DataType dataType) {
0:     this(carbonTableIdentifier, columnIdentifier);
0:     this.dataType = dataType;
0:   }
0: 
0:   public DataType getDataType() {
0:     return dataType;
0:   }
0: 
0:   /**
0:    * @return table identifier
0:    */
0:   public CarbonTableIdentifier getCarbonTableIdentifier() {
0:     return carbonTableIdentifier;
0:   }
0: 
0:   /**
0:    * @return columnIdentifier
0:    */
0:   public ColumnIdentifier getColumnIdentifier() {
0:     return columnIdentifier;
0:   }
0: 
0:   /**
0:    * overridden equals method
0:    *
0:    * @param other
0:    * @return
0:    */
0:   @Override public boolean equals(Object other) {
0:     if (this == other) return true;
0:     if (other == null || getClass() != other.getClass()) return false;
0:     DictionaryColumnUniqueIdentifier that = (DictionaryColumnUniqueIdentifier) other;
0:     if (!carbonTableIdentifier.equals(that.carbonTableIdentifier)) return false;
0:     return columnIdentifier.equals(that.columnIdentifier);
0: 
0:   }
0: 
0:   /**
0:    * overridden hashcode method
0:    *
0:    * @return
0:    */
0:   @Override public int hashCode() {
0:     int result = carbonTableIdentifier.hashCode();
0:     result = 31 * result + columnIdentifier.hashCode();
0:     return result;
0:   }
0: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:f031394
/////////////////////////////////////////////////////////////////////////
0:     if (carbonTableIdentifier == null) {
1:       throw new IllegalArgumentException("carbonTableIdentifier is null");
0:     }
1:     if (columnIdentifier == null) {
1:       throw new IllegalArgumentException("columnIdentifier is null");
0:     }
1:     this.dataType = columnIdentifier.getDataType();
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:f031394
/////////////////////////////////////////////////////////////////////////
0:     if (carbonTableIdentifier == null) {
0:       throw new IllegalArgumentException("carbonTableIdentifier is null");
0:     }
0:     if (columnIdentifier == null) {
0:       throw new IllegalArgumentException("columnIdentifier is null");
0:     }
0:     this.dataType = columnIdentifier.getDataType();
============================================================================