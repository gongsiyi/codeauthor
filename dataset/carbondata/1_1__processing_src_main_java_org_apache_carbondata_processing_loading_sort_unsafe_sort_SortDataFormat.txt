1:982d03f: /*
1:982d03f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:982d03f:  * contributor license agreements.  See the NOTICE file distributed with
1:982d03f:  * this work for additional information regarding copyright ownership.
1:982d03f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:982d03f:  * (the "License"); you may not use this file except in compliance with
1:982d03f:  * the License.  You may obtain a copy of the License at
1:982d03f:  *
1:982d03f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:982d03f:  *
1:982d03f:  * Unless required by applicable law or agreed to in writing, software
1:982d03f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:982d03f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:982d03f:  * See the License for the specific language governing permissions and
1:982d03f:  * limitations under the License.
1:982d03f:  */
1:982d03f: 
1:982d03f: package org.apache.carbondata.processing.loading.sort.unsafe.sort;
1:982d03f: 
1:982d03f: /**
1:982d03f:  * Ported from Apache Spark.
1:982d03f:  *
1:982d03f:  * Abstraction for sorting an arbitrary input buffer of data. This interface requires determining
1:982d03f:  * the sort key for a given element index, as well as swapping elements and moving data from one
1:982d03f:  * buffer to another.
1:982d03f:  * Example format: an array of numbers, where each element is also the key.
1:982d03f:  * See [[KVArraySortDataFormat]] for a more exciting format.
1:982d03f:  * Note: Declaring and instantiating multiple subclasses of this class would prevent JIT inlining
1:982d03f:  * overridden methods and hence decrease the shuffle performance.
1:982d03f:  *
1:982d03f:  * @tparam K Type of the sort key of each element
1:982d03f:  * @tparam Buffer Internal data structure used by a particular format (e.g., Array[Int]).
1:982d03f:  */
1:982d03f: // TODO: Making Buffer a real trait would be a better abstraction, but adds some complexity.
1:982d03f: abstract class SortDataFormat<K, Buffer> {
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Creates a new mutable key for reuse. This should be implemented if you want to override
1:982d03f:    * [[getKey(Buffer, Int, K)]].
1:982d03f:    */
1:982d03f:   K newKey() {
1:982d03f:     return null;
1:982d03f:   }
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Return the sort key for the element at the given index.
1:982d03f:    */
1:982d03f:   protected abstract K getKey(Buffer data, int pos);
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Returns the sort key for the element at the given index and reuse the input key if possible.
1:982d03f:    * The default implementation ignores the reuse parameter and invokes [[getKey(Buffer, Int]].
1:982d03f:    * If you want to override this method, you must implement [[newKey()]].
1:982d03f:    */
1:982d03f:   K getKey(Buffer data, int pos, K reuse) {
1:982d03f:     return getKey(data, pos);
1:982d03f:   }
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Swap two elements.
1:982d03f:    */
1:982d03f:   abstract void swap(Buffer data, int pos0, int pos1);
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Copy a single element from src(srcPos) to dst(dstPos).
1:982d03f:    */
1:982d03f:   abstract void copyElement(Buffer src, int srcPos, Buffer dst, int dstPos);
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Copy a range of elements starting at src(srcPos) to dst, starting at dstPos.
1:982d03f:    * Overlapping ranges are allowed.
1:982d03f:    */
1:982d03f:   abstract void copyRange(Buffer src, int srcPos, Buffer dst, int dstPos, int length);
1:982d03f: 
1:982d03f:   /**
1:982d03f:    * Allocates a Buffer that can hold up to 'length' elements.
1:982d03f:    * All elements of the buffer should be considered invalid until data is explicitly copied in.
1:982d03f:    */
1:982d03f:   abstract Buffer allocate(int length);
1:982d03f: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading.sort.unsafe.sort;
1: 
1: /**
1:  * Ported from Apache Spark.
1:  *
1:  * Abstraction for sorting an arbitrary input buffer of data. This interface requires determining
1:  * the sort key for a given element index, as well as swapping elements and moving data from one
1:  * buffer to another.
1:  * Example format: an array of numbers, where each element is also the key.
1:  * See [[KVArraySortDataFormat]] for a more exciting format.
1:  * Note: Declaring and instantiating multiple subclasses of this class would prevent JIT inlining
1:  * overridden methods and hence decrease the shuffle performance.
1:  *
1:  * @tparam K Type of the sort key of each element
1:  * @tparam Buffer Internal data structure used by a particular format (e.g., Array[Int]).
1:  */
1: // TODO: Making Buffer a real trait would be a better abstraction, but adds some complexity.
1: abstract class SortDataFormat<K, Buffer> {
1: 
1:   /**
1:    * Creates a new mutable key for reuse. This should be implemented if you want to override
1:    * [[getKey(Buffer, Int, K)]].
1:    */
1:   K newKey() {
1:     return null;
1:   }
1: 
1:   /**
1:    * Return the sort key for the element at the given index.
1:    */
1:   protected abstract K getKey(Buffer data, int pos);
1: 
1:   /**
1:    * Returns the sort key for the element at the given index and reuse the input key if possible.
1:    * The default implementation ignores the reuse parameter and invokes [[getKey(Buffer, Int]].
1:    * If you want to override this method, you must implement [[newKey()]].
1:    */
1:   K getKey(Buffer data, int pos, K reuse) {
1:     return getKey(data, pos);
1:   }
1: 
1:   /**
1:    * Swap two elements.
1:    */
1:   abstract void swap(Buffer data, int pos0, int pos1);
1: 
1:   /**
1:    * Copy a single element from src(srcPos) to dst(dstPos).
1:    */
1:   abstract void copyElement(Buffer src, int srcPos, Buffer dst, int dstPos);
1: 
1:   /**
1:    * Copy a range of elements starting at src(srcPos) to dst, starting at dstPos.
1:    * Overlapping ranges are allowed.
1:    */
1:   abstract void copyRange(Buffer src, int srcPos, Buffer dst, int dstPos, int length);
1: 
1:   /**
1:    * Allocates a Buffer that can hold up to 'length' elements.
1:    * All elements of the buffer should be considered invalid until data is explicitly copied in.
1:    */
1:   abstract Buffer allocate(int length);
1: }
============================================================================