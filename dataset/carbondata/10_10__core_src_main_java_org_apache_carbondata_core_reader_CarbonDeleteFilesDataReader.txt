1:3e045d8: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:3e045d8:  *
1:3e045d8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3e045d8:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:3e045d8:  */
1:803c32e: 
1:3e045d8: package org.apache.carbondata.core.reader;
2:3e045d8: 
1:002279e: import java.io.IOException;
1:002279e: import java.util.ArrayList;
1:90000e6: import java.util.HashMap;
1:002279e: import java.util.List;
1:90000e6: import java.util.Map;
1:002279e: import java.util.Set;
1:ce09aaa: import java.util.concurrent.Callable;
1:8a5ed81: import java.util.concurrent.ExecutionException;
1:ce09aaa: import java.util.concurrent.ExecutorService;
1:ce09aaa: import java.util.concurrent.Executors;
1:ce09aaa: import java.util.concurrent.Future;
1:ce09aaa: import java.util.concurrent.TimeUnit;
1:002279e: 
1:3e045d8: import org.apache.carbondata.common.logging.LogService;
1:3e045d8: import org.apache.carbondata.common.logging.LogServiceFactory;
1:3e045d8: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:ce09aaa: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
1:ce09aaa: import org.apache.carbondata.core.mutate.DeleteDeltaBlockletDetails;
1:8a5ed81: import org.apache.carbondata.core.mutate.DeleteDeltaVo;
1:3e045d8: import org.apache.carbondata.core.util.CarbonProperties;
1:002279e: 
1:3e045d8: 
2:3e045d8: /**
1:3e045d8:  * This class perform the functionality of reading multiple delete delta files
1:3e045d8:  */
1:3e045d8: public class CarbonDeleteFilesDataReader {
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * LOGGER
1:3e045d8:    */
1:3e045d8:   private static final LogService LOGGER =
1:3e045d8:       LogServiceFactory.getLogService(CarbonDeleteFilesDataReader.class.getName());
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * thread pool size to be used for reading delete delta files
1:3e045d8:    */
1:3e045d8:   protected int thread_pool_size;
1:3e045d8: 
1:3e045d8:   public CarbonDeleteFilesDataReader() {
1:3e045d8:     initThreadPoolSize();
5:3e045d8:   }
1:3e045d8: 
1:9b8090b:   /**
1:3e045d8:    * This method will initialize the thread pool size to be used for creating the
1:3e045d8:    * max number of threads for a job
1:3e045d8:    */
1:3e045d8:   private void initThreadPoolSize() {
1:9e9d689:     thread_pool_size = CarbonProperties.getInstance().getNumberOfCores();
1:3e045d8:   }
1:3e045d8: 
1:3e045d8:   /**
1:3e045d8:    * Returns all deleted records from all specified delta files
1:3e045d8:    *
1:3e045d8:    * @param deltaFiles
1:3e045d8:    * @return
1:3e045d8:    * @throws Exception
1:3e045d8:    */
1:90000e6:   public Map<Integer, Integer[]> getDeleteDataFromAllFiles(List<String> deltaFiles,
1:90000e6:       String blockletId) throws Exception {
1:3e045d8: 
1:803c32e:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>();
1:3e045d8:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:3e045d8:     for (final String deltaFile : deltaFiles) {
1:af5fdcb:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
1:8a5ed81:     }
2:3e045d8:     try {
1:3e045d8:       executorService.shutdown();
1:3e045d8:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:3e045d8:     } catch (InterruptedException e) {
1:3e045d8:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:3e045d8:     }
1:3e045d8: 
1:90000e6:     Map<Integer, Integer[]> pageIdDeleteRowsMap =
1:90000e6:         new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:3e045d8:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:3e045d8:       try {
1:3e045d8:         List<DeleteDeltaBlockletDetails> blockletDetails =
1:3e045d8:             taskSubmitList.get(i).get().getBlockletDetails();
1:90000e6:         for (DeleteDeltaBlockletDetails eachBlockletDetails : blockletDetails) {
1:90000e6:           Integer pageId = eachBlockletDetails.getPageId();
1:90000e6:           Set<Integer> rows = blockletDetails
1:90000e6:               .get(blockletDetails.indexOf(new DeleteDeltaBlockletDetails(blockletId, pageId)))
1:90000e6:               .getDeletedRows();
1:90000e6:           pageIdDeleteRowsMap.put(pageId, rows.toArray(new Integer[rows.size()]));
1:90000e6:         }
1:90000e6: 
1:3e045d8:       } catch (Throwable e) {
1:3e045d8:         LOGGER.error(e.getMessage());
1:3e045d8:         throw new Exception(e.getMessage());
1:3e045d8:       }
1:3e045d8:     }
1:90000e6:     return pageIdDeleteRowsMap;
1:8a5ed81:   }
1:3e045d8: 
1:8a5ed81:   /**
1:8a5ed81:    * Below method will be used to read the delete delta files
1:8a5ed81:    * and get the map of blockletid and page id mapping to deleted
1:8a5ed81:    * rows
1:8a5ed81:    *
1:8a5ed81:    * @param deltaFiles delete delta files array
1:8a5ed81:    * @return map of blockletid_pageid to deleted rows
1:8a5ed81:    */
1:8a5ed81:   public Map<String, DeleteDeltaVo> getDeletedRowsDataVo(String[] deltaFiles) {
1:8a5ed81:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>();
1:8a5ed81:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:8a5ed81:     for (final String deltaFile : deltaFiles) {
1:af5fdcb:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
1:8a5ed81:     }
1:8a5ed81:     try {
1:8a5ed81:       executorService.shutdown();
1:8a5ed81:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:8a5ed81:     } catch (InterruptedException e) {
1:8a5ed81:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:8a5ed81:     }
1:8a5ed81:     Map<String, DeleteDeltaVo> pageIdToBlockLetVo = new HashMap<>();
1:8a5ed81:     List<DeleteDeltaBlockletDetails> blockletDetails = null;
1:8a5ed81:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:8a5ed81:       try {
1:8a5ed81:         blockletDetails = taskSubmitList.get(i).get().getBlockletDetails();
1:8a5ed81:       } catch (InterruptedException | ExecutionException e) {
1:8a5ed81:         throw new RuntimeException(e);
1:8a5ed81:       }
1:8a5ed81:       for (DeleteDeltaBlockletDetails blockletDetail : blockletDetails) {
1:8a5ed81:         DeleteDeltaVo deleteDeltaVo = pageIdToBlockLetVo.get(blockletDetail.getBlockletKey());
1:8a5ed81:         if (null == deleteDeltaVo) {
1:8a5ed81:           deleteDeltaVo = new DeleteDeltaVo();
1:8a5ed81:           pageIdToBlockLetVo.put(blockletDetail.getBlockletKey(), deleteDeltaVo);
1:8a5ed81:         }
1:8a5ed81:         deleteDeltaVo.insertData(blockletDetail.getDeletedRows());
1:8a5ed81:       }
1:3e045d8:     }
1:8a5ed81:     return pageIdToBlockLetVo;
1:3e045d8:   }
1:3e045d8: 
1:3e045d8:   /**
1:9b8090b:    * returns delete delta file details for the specified block name
1:9b8090b:    * @param deltaFiles
1:9b8090b:    * @param blockName
1:9b8090b:    * @return DeleteDeltaBlockDetails
1:9b8090b:    * @throws Exception
1:9b8090b:    */
1:3e045d8:   public DeleteDeltaBlockDetails getCompactedDeleteDeltaFileFromBlock(List<String> deltaFiles,
1:002279e:       String blockName) throws Exception {
1:3e045d8:     // get the data.
2:3e045d8:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>(deltaFiles.size());
1:3e045d8:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:3e045d8:     for (final String deltaFile : deltaFiles) {
1:af5fdcb:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
1:3e045d8:     }
1:3e045d8:     try {
1:3e045d8:       executorService.shutdown();
1:3e045d8:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:3e045d8:     } catch (InterruptedException e) {
1:3e045d8:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:3e045d8:     }
1:3e045d8: 
1:3e045d8:     // Get a new DeleteDeltaBlockDetails as result set where all the data will me merged
1:3e045d8:     // based on each Blocklet.
1:3e045d8:     DeleteDeltaBlockDetails deleteDeltaResultSet = new DeleteDeltaBlockDetails(blockName);
1:3e045d8: 
1:3e045d8:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:3e045d8:       try {
1:3e045d8:         List<DeleteDeltaBlockletDetails> blockletDetails =
1:3e045d8:             taskSubmitList.get(i).get().getBlockletDetails();
1:256dbed:         for (DeleteDeltaBlockletDetails blocklet : blockletDetails) {
1:3e045d8:           deleteDeltaResultSet.addBlockletDetails(blocklet);
1:3e045d8:         }
1:3e045d8:       } catch (Throwable e) {
1:3e045d8:         LOGGER.error(e.getMessage());
1:3e045d8:         throw new Exception(e.getMessage());
1:3e045d8:       }
1:3e045d8:     }
1:3e045d8:     return deleteDeltaResultSet;
1:3e045d8:   }
1:af5fdcb:   private static class DeleteDeltaFileReaderCallable implements Callable<DeleteDeltaBlockDetails> {
1:af5fdcb:     private String deltaFile;
1:af5fdcb:     DeleteDeltaFileReaderCallable(String deltaFile) {
1:af5fdcb:       this.deltaFile = deltaFile;
1:af5fdcb:     }
1:af5fdcb:     @Override public DeleteDeltaBlockDetails call() throws IOException {
1:af5fdcb:       CarbonDeleteDeltaFileReaderImpl deltaFileReader =
1:af5fdcb:           new CarbonDeleteDeltaFileReaderImpl(deltaFile, FileFactory.getFileType(deltaFile));
1:af5fdcb:       return deltaFileReader.readJson();
1:af5fdcb:     }
1:af5fdcb:   }
1:8a5ed81: }
1:3e045d8: 
1:3e045d8: 
============================================================================
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:9e9d689
/////////////////////////////////////////////////////////////////////////
1:     thread_pool_size = CarbonProperties.getInstance().getNumberOfCores();
author:Manohar
-------------------------------------------------------------------------------
commit:af5fdcb
/////////////////////////////////////////////////////////////////////////
1:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
/////////////////////////////////////////////////////////////////////////
1:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
/////////////////////////////////////////////////////////////////////////
1:       taskSubmitList.add(executorService.submit(new DeleteDeltaFileReaderCallable(deltaFile)));
/////////////////////////////////////////////////////////////////////////
1:   private static class DeleteDeltaFileReaderCallable implements Callable<DeleteDeltaBlockDetails> {
1:     private String deltaFile;
1:     DeleteDeltaFileReaderCallable(String deltaFile) {
1:       this.deltaFile = deltaFile;
1:     }
1:     @Override public DeleteDeltaBlockDetails call() throws IOException {
1:       CarbonDeleteDeltaFileReaderImpl deltaFileReader =
1:           new CarbonDeleteDeltaFileReaderImpl(deltaFile, FileFactory.getFileType(deltaFile));
1:       return deltaFileReader.readJson();
1:     }
1:   }
author:kumarvishal
-------------------------------------------------------------------------------
commit:8a5ed81
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutionException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.mutate.DeleteDeltaVo;
/////////////////////////////////////////////////////////////////////////
1:   }
1:   /**
1:    * Below method will be used to read the delete delta files
1:    * and get the map of blockletid and page id mapping to deleted
1:    * rows
1:    *
1:    * @param deltaFiles delete delta files array
1:    * @return map of blockletid_pageid to deleted rows
1:    */
1:   public Map<String, DeleteDeltaVo> getDeletedRowsDataVo(String[] deltaFiles) {
1:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>();
1:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:     for (final String deltaFile : deltaFiles) {
0:       taskSubmitList.add(executorService.submit(new Callable<DeleteDeltaBlockDetails>() {
0:         @Override public DeleteDeltaBlockDetails call() throws IOException {
0:           CarbonDeleteDeltaFileReaderImpl deltaFileReader =
0:               new CarbonDeleteDeltaFileReaderImpl(deltaFile, FileFactory.getFileType(deltaFile));
0:           return deltaFileReader.readJson();
1:         }
0:       }));
1:     }
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:     } catch (InterruptedException e) {
1:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:     }
1:     Map<String, DeleteDeltaVo> pageIdToBlockLetVo = new HashMap<>();
1:     List<DeleteDeltaBlockletDetails> blockletDetails = null;
1:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:       try {
1:         blockletDetails = taskSubmitList.get(i).get().getBlockletDetails();
1:       } catch (InterruptedException | ExecutionException e) {
1:         throw new RuntimeException(e);
1:       }
1:       for (DeleteDeltaBlockletDetails blockletDetail : blockletDetails) {
1:         DeleteDeltaVo deleteDeltaVo = pageIdToBlockLetVo.get(blockletDetail.getBlockletKey());
1:         if (null == deleteDeltaVo) {
1:           deleteDeltaVo = new DeleteDeltaVo();
1:           pageIdToBlockLetVo.put(blockletDetail.getBlockletKey(), deleteDeltaVo);
1:         }
1:         deleteDeltaVo.insertData(blockletDetail.getDeletedRows());
1:       }
1:     }
1:     return pageIdToBlockLetVo;
author:ravikiran23
-------------------------------------------------------------------------------
commit:90000e6
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public Map<Integer, Integer[]> getDeleteDataFromAllFiles(List<String> deltaFiles,
1:       String blockletId) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     Map<Integer, Integer[]> pageIdDeleteRowsMap =
1:         new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:         for (DeleteDeltaBlockletDetails eachBlockletDetails : blockletDetails) {
1:           Integer pageId = eachBlockletDetails.getPageId();
1:           Set<Integer> rows = blockletDetails
1:               .get(blockletDetails.indexOf(new DeleteDeltaBlockletDetails(blockletId, pageId)))
1:               .getDeletedRows();
1:           pageIdDeleteRowsMap.put(pageId, rows.toArray(new Integer[rows.size()]));
1:         }
1: 
1:     return pageIdDeleteRowsMap;
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:         for (DeleteDeltaBlockletDetails blocklet : blockletDetails) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.mutate.DeleteDeltaBlockDetails;
1: import org.apache.carbondata.core.mutate.DeleteDeltaBlockletDetails;
author:ravikiran
-------------------------------------------------------------------------------
commit:9b8090b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * returns delete delta file details for the specified block name
1:    * @param deltaFiles
1:    * @param blockName
1:    * @return DeleteDeltaBlockDetails
1:    * @throws Exception
1:    */
author:sounakr
-------------------------------------------------------------------------------
commit:803c32e
/////////////////////////////////////////////////////////////////////////
1: 
1:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>();
author:sraghunandan
-------------------------------------------------------------------------------
commit:002279e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
0: import java.util.TreeSet;
0: import java.util.concurrent.*;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       String blockName) throws Exception {
author:ManoharVanam
-------------------------------------------------------------------------------
commit:3e045d8
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
0: import org.apache.carbondata.core.update.DeleteDeltaBlockDetails;
0: import org.apache.carbondata.core.update.DeleteDeltaBlockletDetails;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.commons.lang.ArrayUtils;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Set;
0: import java.util.TreeSet;
0: import java.util.concurrent.*;
1: 
1: /**
1:  * This class perform the functionality of reading multiple delete delta files
1:  */
1: public class CarbonDeleteFilesDataReader {
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonDeleteFilesDataReader.class.getName());
1: 
1:   /**
1:    * thread pool size to be used for reading delete delta files
1:    */
1:   protected int thread_pool_size;
1: 
1:   /**
0:    * Constructor
1:    */
1:   public CarbonDeleteFilesDataReader() {
1:     initThreadPoolSize();
1:   }
1: 
1:   /**
1:    * This method will initialize the thread pool size to be used for creating the
1:    * max number of threads for a job
1:    */
1:   private void initThreadPoolSize() {
1:     try {
0:       thread_pool_size = Integer.parseInt(CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.NUM_CORES_LOADING,
0:               CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
0:     } catch (NumberFormatException e) {
0:       thread_pool_size = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:     }
1:   }
1: 
1:   /**
1:    * Returns all deleted records from all specified delta files
1:    *
1:    * @param deltaFiles
1:    * @return
1:    * @throws Exception
1:    */
0:   public int[] getDeleteDataFromAllFiles(List<String> deltaFiles, String blockletId)
0:       throws Exception {
1:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>(deltaFiles.size());
1:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:     for (final String deltaFile : deltaFiles) {
0:       taskSubmitList.add(executorService.submit(new Callable<DeleteDeltaBlockDetails>() {
0:         @Override public DeleteDeltaBlockDetails call() throws IOException {
0:           CarbonDeleteDeltaFileReaderImpl deltaFileReader =
0:               new CarbonDeleteDeltaFileReaderImpl(deltaFile, FileFactory.getFileType(deltaFile));
0:           return deltaFileReader.readJson();
1:         }
0:       }));
1:     }
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:     } catch (InterruptedException e) {
1:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:     }
1: 
0:     Set<Integer> result = new TreeSet<Integer>();
1:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:       try {
1:         List<DeleteDeltaBlockletDetails> blockletDetails =
1:             taskSubmitList.get(i).get().getBlockletDetails();
0:         result.addAll(
0:             blockletDetails.get(blockletDetails.indexOf(new DeleteDeltaBlockletDetails(blockletId)))
0:                 .getDeletedRows());
1:       } catch (Throwable e) {
1:         LOGGER.error(e.getMessage());
1:         throw new Exception(e.getMessage());
1:       }
1:     }
0:     return ArrayUtils.toPrimitive(result.toArray(new Integer[result.size()]));
1: 
1:   }
1: 
1:   public DeleteDeltaBlockDetails getCompactedDeleteDeltaFileFromBlock(List<String> deltaFiles,
0:                                                                       String blockName) throws Exception {
1:     // get the data.
1:     List<Future<DeleteDeltaBlockDetails>> taskSubmitList = new ArrayList<>(deltaFiles.size());
1:     ExecutorService executorService = Executors.newFixedThreadPool(thread_pool_size);
1:     for (final String deltaFile : deltaFiles) {
0:       taskSubmitList.add(executorService.submit(new Callable<DeleteDeltaBlockDetails>() {
0:         @Override public DeleteDeltaBlockDetails call() throws IOException {
0:           CarbonDeleteDeltaFileReaderImpl deltaFileReader =
0:               new CarbonDeleteDeltaFileReaderImpl(deltaFile, FileFactory.getFileType(deltaFile));
0:           return deltaFileReader.readJson();
1:         }
0:       }));
1:     }
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(30, TimeUnit.MINUTES);
1:     } catch (InterruptedException e) {
1:       LOGGER.error("Error while reading the delete delta files : " + e.getMessage());
1:     }
1: 
1:     // Get a new DeleteDeltaBlockDetails as result set where all the data will me merged
1:     // based on each Blocklet.
1:     DeleteDeltaBlockDetails deleteDeltaResultSet = new DeleteDeltaBlockDetails(blockName);
1: 
1:     for (int i = 0; i < taskSubmitList.size(); i++) {
1:       try {
1:         List<DeleteDeltaBlockletDetails> blockletDetails =
1:             taskSubmitList.get(i).get().getBlockletDetails();
0:         for(DeleteDeltaBlockletDetails blocklet : blockletDetails ) {
1:           deleteDeltaResultSet.addBlockletDetails(blocklet);
1:         }
1:       } catch (Throwable e) {
1:         LOGGER.error(e.getMessage());
1:         throw new Exception(e.getMessage());
1:       }
1:     }
1:     return deleteDeltaResultSet;
1:   }
1: }
1: 
1: 
============================================================================