1:2b41f14: /*
1:2b41f14:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b41f14:  * contributor license agreements.  See the NOTICE file distributed with
1:2b41f14:  * this work for additional information regarding copyright ownership.
1:2b41f14:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b41f14:  * (the "License"); you may not use this file except in compliance with
1:2b41f14:  * the License.  You may obtain a copy of the License at
1:2b41f14:  *
1:2b41f14:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2b41f14:  *
1:2b41f14:  * Unless required by applicable law or agreed to in writing, software
1:2b41f14:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b41f14:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b41f14:  * See the License for the specific language governing permissions and
1:2b41f14:  * limitations under the License.
1:2b41f14:  */
1:2b41f14: 
1:2b41f14: package org.apache.carbondata.processing.sort.sortdata;
1:2b41f14: 
1:2b41f14: import java.util.Comparator;
1:2b41f14: 
1:2b41f14: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1:2b41f14: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1:2b41f14: 
1:2b41f14: /**
1:2b41f14:  * This class is used as comparator for comparing intermediate sort temp row
1:2b41f14:  */
1:2b41f14: public class IntermediateSortTempRowComparator implements Comparator<IntermediateSortTempRow> {
1:2b41f14:   /**
1:2b41f14:    * isSortColumnNoDictionary whether the sort column is not dictionary or not
1:2b41f14:    */
1:2b41f14:   private boolean[] isSortColumnNoDictionary;
1:2b41f14: 
1:2b41f14:   /**
1:2b41f14:    * @param isSortColumnNoDictionary isSortColumnNoDictionary
1:2b41f14:    */
1:2b41f14:   public IntermediateSortTempRowComparator(boolean[] isSortColumnNoDictionary) {
1:2b41f14:     this.isSortColumnNoDictionary = isSortColumnNoDictionary;
1:2b41f14:   }
1:2b41f14: 
1:2b41f14:   /**
1:2b41f14:    * Below method will be used to compare two sort temp row
1:2b41f14:    */
1:2b41f14:   public int compare(IntermediateSortTempRow rowA, IntermediateSortTempRow rowB) {
1:2b41f14:     int diff = 0;
1:2b41f14:     int dictIndex = 0;
1:2b41f14:     int nonDictIndex = 0;
1:2b41f14: 
1:2b41f14:     for (boolean isNoDictionary : isSortColumnNoDictionary) {
1:2b41f14: 
1:2b41f14:       if (isNoDictionary) {
1:2b41f14:         byte[] byteArr1 = rowA.getNoDictSortDims()[nonDictIndex];
1:2b41f14:         byte[] byteArr2 = rowB.getNoDictSortDims()[nonDictIndex];
1:2b41f14:         nonDictIndex++;
1:2b41f14: 
1:2b41f14:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
1:2b41f14:         if (difference != 0) {
1:2b41f14:           return difference;
1:2b41f14:         }
1:2b41f14:       } else {
1:2b41f14:         int dimFieldA = rowA.getDictSortDims()[dictIndex];
1:2b41f14:         int dimFieldB = rowB.getDictSortDims()[dictIndex];
1:2b41f14:         dictIndex++;
1:2b41f14: 
1:2b41f14:         diff = dimFieldA - dimFieldB;
1:2b41f14:         if (diff != 0) {
1:2b41f14:           return diff;
1:2b41f14:         }
1:2b41f14:       }
1:2b41f14:     }
1:2b41f14:     return diff;
1:2b41f14:   }
1:2b41f14: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.sort.sortdata;
1: 
1: import java.util.Comparator;
1: 
1: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
1: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1: 
1: /**
1:  * This class is used as comparator for comparing intermediate sort temp row
1:  */
1: public class IntermediateSortTempRowComparator implements Comparator<IntermediateSortTempRow> {
1:   /**
1:    * isSortColumnNoDictionary whether the sort column is not dictionary or not
1:    */
1:   private boolean[] isSortColumnNoDictionary;
1: 
1:   /**
1:    * @param isSortColumnNoDictionary isSortColumnNoDictionary
1:    */
1:   public IntermediateSortTempRowComparator(boolean[] isSortColumnNoDictionary) {
1:     this.isSortColumnNoDictionary = isSortColumnNoDictionary;
1:   }
1: 
1:   /**
1:    * Below method will be used to compare two sort temp row
1:    */
1:   public int compare(IntermediateSortTempRow rowA, IntermediateSortTempRow rowB) {
1:     int diff = 0;
1:     int dictIndex = 0;
1:     int nonDictIndex = 0;
1: 
1:     for (boolean isNoDictionary : isSortColumnNoDictionary) {
1: 
1:       if (isNoDictionary) {
1:         byte[] byteArr1 = rowA.getNoDictSortDims()[nonDictIndex];
1:         byte[] byteArr2 = rowB.getNoDictSortDims()[nonDictIndex];
1:         nonDictIndex++;
1: 
1:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
1:         if (difference != 0) {
1:           return difference;
1:         }
1:       } else {
1:         int dimFieldA = rowA.getDictSortDims()[dictIndex];
1:         int dimFieldB = rowB.getDictSortDims()[dictIndex];
1:         dictIndex++;
1: 
1:         diff = dimFieldA - dimFieldB;
1:         if (diff != 0) {
1:           return diff;
1:         }
1:       }
1:     }
1:     return diff;
1:   }
1: }
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.carbondata.processing.sort.sortdata;
0: 
0: import java.util.Comparator;
0: 
0: import org.apache.carbondata.core.util.ByteUtil.UnsafeComparer;
0: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
0: 
0: /**
0:  * This class is used as comparator for comparing intermediate sort temp row
0:  */
0: public class IntermediateSortTempRowComparator implements Comparator<IntermediateSortTempRow> {
0:   /**
0:    * isSortColumnNoDictionary whether the sort column is not dictionary or not
0:    */
0:   private boolean[] isSortColumnNoDictionary;
0: 
0:   /**
0:    * @param isSortColumnNoDictionary isSortColumnNoDictionary
0:    */
0:   public IntermediateSortTempRowComparator(boolean[] isSortColumnNoDictionary) {
0:     this.isSortColumnNoDictionary = isSortColumnNoDictionary;
0:   }
0: 
0:   /**
0:    * Below method will be used to compare two sort temp row
0:    */
0:   public int compare(IntermediateSortTempRow rowA, IntermediateSortTempRow rowB) {
0:     int diff = 0;
0:     int dictIndex = 0;
0:     int nonDictIndex = 0;
0: 
0:     for (boolean isNoDictionary : isSortColumnNoDictionary) {
0: 
0:       if (isNoDictionary) {
0:         byte[] byteArr1 = rowA.getNoDictSortDims()[nonDictIndex];
0:         byte[] byteArr2 = rowB.getNoDictSortDims()[nonDictIndex];
0:         nonDictIndex++;
0: 
0:         int difference = UnsafeComparer.INSTANCE.compareTo(byteArr1, byteArr2);
0:         if (difference != 0) {
0:           return difference;
0:         }
0:       } else {
0:         int dimFieldA = rowA.getDictSortDims()[dictIndex];
0:         int dimFieldB = rowB.getDictSortDims()[dictIndex];
0:         dictIndex++;
0: 
0:         diff = dimFieldA - dimFieldB;
0:         if (diff != 0) {
0:           return diff;
0:         }
0:       }
0:     }
0:     return diff;
0:   }
0: }
============================================================================