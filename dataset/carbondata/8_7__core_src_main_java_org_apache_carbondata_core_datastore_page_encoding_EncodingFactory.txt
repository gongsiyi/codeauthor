1:edda248: /*
1:edda248:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edda248:  * contributor license agreements.  See the NOTICE file distributed with
1:edda248:  * this work for additional information regarding copyright ownership.
1:edda248:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edda248:  * (the "License"); you may not use this file except in compliance with
1:edda248:  * the License.  You may obtain a copy of the License at
1:edda248:  *
1:edda248:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edda248:  *
1:edda248:  * Unless required by applicable law or agreed to in writing, software
1:edda248:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edda248:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edda248:  * See the License for the specific language governing permissions and
1:edda248:  * limitations under the License.
1:edda248:  */
7:edda248: 
1:edda248: package org.apache.carbondata.core.datastore.page.encoding;
1:a5af0ff: 
1:e6a4f64: import java.io.ByteArrayInputStream;
1:e6a4f64: import java.io.DataInputStream;
1:e6a4f64: import java.io.IOException;
1:e6a4f64: import java.nio.ByteBuffer;
1:e6a4f64: import java.util.List;
1:e6a4f64: 
1:8c1ddbf: import org.apache.carbondata.core.datastore.ColumnType;
1:a5af0ff: import org.apache.carbondata.core.datastore.TableSpec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:11661eb: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaFloatingCodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaIntegralCodec;
1:4f7487d: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveFloatingCodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveIntegralCodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.rle.RLECodec;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.rle.RLEEncoderMeta;
1:bc3e684: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1:bc3e684: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:edda248: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1:133b303: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:e6a4f64: import org.apache.carbondata.core.util.CarbonUtil;
1:e6a4f64: import org.apache.carbondata.format.Encoding;
1:e6a4f64: 
1:daa6465: import static org.apache.carbondata.format.Encoding.ADAPTIVE_DELTA_FLOATING;
1:daa6465: import static org.apache.carbondata.format.Encoding.ADAPTIVE_DELTA_INTEGRAL;
1:daa6465: import static org.apache.carbondata.format.Encoding.ADAPTIVE_FLOATING;
1:daa6465: import static org.apache.carbondata.format.Encoding.ADAPTIVE_INTEGRAL;
1:daa6465: import static org.apache.carbondata.format.Encoding.BOOL_BYTE;
1:daa6465: import static org.apache.carbondata.format.Encoding.DIRECT_COMPRESS;
1:dc53dee: import static org.apache.carbondata.format.Encoding.DIRECT_COMPRESS_VARCHAR;
1:daa6465: import static org.apache.carbondata.format.Encoding.RLE_INTEGRAL;
1:edda248: 
1:edda248: /**
1:8c1ddbf:  * Base class for encoding factory implementation.
1:edda248:  */
1:8c1ddbf: public abstract class EncodingFactory {
1:edda248: 
1:edda248:   /**
1:e6a4f64:    * Return new encoder for specified column
1:edda248:    */
1:e6a4f64:   public abstract ColumnPageEncoder createEncoder(TableSpec.ColumnSpec columnSpec,
1:e6a4f64:       ColumnPage inputPage);
1:e6a4f64: 
1:e6a4f64:   /**
1:e6a4f64:    * Return new decoder based on encoder metadata read from file
1:e6a4f64:    */
1:8f08c4a:   public ColumnPageDecoder createDecoder(List<Encoding> encodings, List<ByteBuffer> encoderMetas,
1:8f08c4a:       String compressor) throws IOException {
1:e6a4f64:     assert (encodings.size() == 1);
1:e6a4f64:     assert (encoderMetas.size() == 1);
1:e6a4f64:     Encoding encoding = encodings.get(0);
1:e6a4f64:     byte[] encoderMeta = encoderMetas.get(0).array();
1:e6a4f64:     ByteArrayInputStream stream = new ByteArrayInputStream(encoderMeta);
1:e6a4f64:     DataInputStream in = new DataInputStream(stream);
1:dc53dee:     if (encoding == DIRECT_COMPRESS || encoding == DIRECT_COMPRESS_VARCHAR) {
1:8c1ddbf:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:e6a4f64:       metadata.readFields(in);
1:8c1ddbf:       return new DirectCompressCodec(metadata.getStoreDataType()).createDecoder(metadata);
1:e6a4f64:     } else if (encoding == ADAPTIVE_INTEGRAL) {
1:8c1ddbf:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:e6a4f64:       metadata.readFields(in);
1:4f7487d:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:8c1ddbf:       return new AdaptiveIntegralCodec(metadata.getSchemaDataType(), metadata.getStoreDataType(),
2:e6a4f64:           stats).createDecoder(metadata);
1:e6a4f64:     } else if (encoding == ADAPTIVE_DELTA_INTEGRAL) {
1:8c1ddbf:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:e6a4f64:       metadata.readFields(in);
1:e6a4f64:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:8c1ddbf:       return new AdaptiveDeltaIntegralCodec(metadata.getSchemaDataType(),
1:8c1ddbf:           metadata.getStoreDataType(), stats).createDecoder(metadata);
1:8c1ddbf:     } else if (encoding == ADAPTIVE_FLOATING) {
1:8c1ddbf:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:8c1ddbf:       metadata.readFields(in);
1:8c1ddbf:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:8c1ddbf:       return new AdaptiveFloatingCodec(metadata.getSchemaDataType(), metadata.getStoreDataType(),
1:4f7487d:           stats).createDecoder(metadata);
1:11661eb:     } else if (encoding == ADAPTIVE_DELTA_FLOATING) {
1:11661eb:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:6abdd97:       metadata.readFields(in);
1:e6a4f64:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:11661eb:       return new AdaptiveDeltaFloatingCodec(metadata.getSchemaDataType(),
1:11661eb:           metadata.getStoreDataType(), stats).createDecoder(metadata);
1:e6a4f64:     } else if (encoding == RLE_INTEGRAL) {
1:e6a4f64:       RLEEncoderMeta metadata = new RLEEncoderMeta();
1:e6a4f64:       metadata.readFields(in);
1:e6a4f64:       return new RLECodec().createDecoder(metadata);
1:6abdd97:     } else if (encoding == BOOL_BYTE) {
1:0647348:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:4f7487d:       metadata.readFields(in);
1:0647348:       return new DirectCompressCodec(metadata.getStoreDataType()).createDecoder(metadata);
2:892f120:     } else {
1:e6a4f64:       // for backward compatibility
1:e6a4f64:       ValueEncoderMeta metadata = CarbonUtil.deserializeEncoderMetaV3(encoderMeta);
1:8f08c4a:       return createDecoderLegacy(metadata, compressor);
1:bc3e684:     }
1:bc3e684:   }
1:edda248: 
1:edda248:   /**
1:e6a4f64:    * Old way of creating decoder, based on algorithm
1:edda248:    */
1:8f08c4a:   public ColumnPageDecoder createDecoderLegacy(ValueEncoderMeta metadata, String compressor) {
1:7ef9164:     if (null == metadata) {
1:7ef9164:       throw new RuntimeException("internal error");
1:7ef9164:     }
1:e6a4f64:     SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:f209e8e:     TableSpec.ColumnSpec spec =
1:f209e8e:         TableSpec.ColumnSpec.newInstanceLegacy("legacy", stats.getDataType(), ColumnType.MEASURE);
1:956833e:     DataType dataType = DataType.getDataType(metadata.getType());
1:956833e:     if (dataType == DataTypes.BYTE ||
1:956833e:         dataType == DataTypes.SHORT ||
1:956833e:         dataType == DataTypes.INT ||
1:956833e:         dataType == DataTypes.LONG) {
1:956833e:       // create the codec based on algorithm and create decoder by recovering the metadata
1:438b442:       ColumnPageCodec codec =
1:438b442:           DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(stats, false);
1:956833e:       if (codec instanceof AdaptiveIntegralCodec) {
1:956833e:         AdaptiveIntegralCodec adaptiveCodec = (AdaptiveIntegralCodec) codec;
1:956833e:         ColumnPageEncoderMeta meta =
1:956833e:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:956833e:         return codec.createDecoder(meta);
1:956833e:       } else if (codec instanceof AdaptiveDeltaIntegralCodec) {
1:956833e:         AdaptiveDeltaIntegralCodec adaptiveCodec = (AdaptiveDeltaIntegralCodec) codec;
1:956833e:         ColumnPageEncoderMeta meta =
1:956833e:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:956833e:         return codec.createDecoder(meta);
1:956833e:       } else if (codec instanceof DirectCompressCodec) {
1:956833e:         ColumnPageEncoderMeta meta =
1:956833e:             new ColumnPageEncoderMeta(spec, DataType.getDataType(metadata.getType()), stats,
1:956833e:                 compressor);
1:956833e:         return codec.createDecoder(meta);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error");
1:956833e:       }
1:956833e:     } else if (dataType == DataTypes.FLOAT || dataType == DataTypes.DOUBLE) {
1:956833e:       // create the codec based on algorithm and create decoder by recovering the metadata
1:438b442:       ColumnPageCodec codec =
1:438b442:           DefaultEncodingFactory.selectCodecByAlgorithmForFloating(stats, false);
1:956833e:       if (codec instanceof AdaptiveFloatingCodec) {
1:956833e:         AdaptiveFloatingCodec adaptiveCodec = (AdaptiveFloatingCodec) codec;
1:956833e:         ColumnPageEncoderMeta meta =
1:956833e:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:956833e:         return codec.createDecoder(meta);
1:956833e:       } else if (codec instanceof DirectCompressCodec) {
1:956833e:         ColumnPageEncoderMeta meta =
1:956833e:             new ColumnPageEncoderMeta(spec, DataType.getDataType(metadata.getType()), stats,
1:956833e:                 compressor);
1:956833e:         return codec.createDecoder(meta);
1:11661eb:       } else if (codec instanceof AdaptiveDeltaFloatingCodec) {
1:11661eb:         AdaptiveDeltaFloatingCodec adaptiveCodec = (AdaptiveDeltaFloatingCodec) codec;
1:11661eb:         ColumnPageEncoderMeta meta =
1:11661eb:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
5:892f120:         return codec.createDecoder(meta);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error");
1:956833e:       }
1:f209e8e:     } else if (DataTypes.isDecimal(dataType) || dataType == DataTypes.BYTE_ARRAY) {
1:956833e:       // no dictionary dimension
1:956833e:       return new DirectCompressCodec(stats.getDataType())
1:956833e:           .createDecoder(new ColumnPageEncoderMeta(spec, stats.getDataType(), stats, compressor));
1:956833e:     } else if (dataType == DataTypes.LEGACY_LONG) {
1:956833e:       // In case of older versions like in V1 format it has special datatype to handle
1:956833e:       AdaptiveIntegralCodec adaptiveCodec =
1:956833e:           new AdaptiveIntegralCodec(DataTypes.LONG, DataTypes.LONG, stats);
1:956833e:       ColumnPageEncoderMeta meta =
1:956833e:           new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:956833e:       return adaptiveCodec.createDecoder(meta);
1:956833e:     } else {
1:956833e:       throw new RuntimeException("unsupported data type: " + stats.getDataType());
1:892f120:     }
1:892f120:   }
1:bc3e684: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   public ColumnPageDecoder createDecoder(List<Encoding> encodings, List<ByteBuffer> encoderMetas,
1:       String compressor) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       return createDecoderLegacy(metadata, compressor);
1:   public ColumnPageDecoder createDecoderLegacy(ValueEncoderMeta metadata, String compressor) {
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.format.Encoding.DIRECT_COMPRESS_VARCHAR;
/////////////////////////////////////////////////////////////////////////
1:     if (encoding == DIRECT_COMPRESS || encoding == DIRECT_COMPRESS_VARCHAR) {
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageCodec codec =
1:           DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(stats, false);
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageCodec codec =
1:           DefaultEncodingFactory.selectCodecByAlgorithmForFloating(stats, false);
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     if (null == metadata) {
1:       throw new RuntimeException("internal error");
1:     }
commit:7422690
/////////////////////////////////////////////////////////////////////////
0:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(meta);
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.format.Encoding.ADAPTIVE_DELTA_FLOATING;
1: import static org.apache.carbondata.format.Encoding.ADAPTIVE_DELTA_INTEGRAL;
1: import static org.apache.carbondata.format.Encoding.ADAPTIVE_FLOATING;
1: import static org.apache.carbondata.format.Encoding.ADAPTIVE_INTEGRAL;
1: import static org.apache.carbondata.format.Encoding.BOOL_BYTE;
1: import static org.apache.carbondata.format.Encoding.DIRECT_COMPRESS;
1: import static org.apache.carbondata.format.Encoding.RLE_INTEGRAL;
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:     TableSpec.ColumnSpec spec =
1:         TableSpec.ColumnSpec.newInstanceLegacy("legacy", stats.getDataType(), ColumnType.MEASURE);
/////////////////////////////////////////////////////////////////////////
1:     } else if (DataTypes.isDecimal(dataType) || dataType == DataTypes.BYTE_ARRAY) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     DataType dataType = DataType.getDataType(metadata.getType());
1:     if (dataType == DataTypes.BYTE ||
1:         dataType == DataTypes.SHORT ||
1:         dataType == DataTypes.INT ||
1:         dataType == DataTypes.LONG) {
1:       // create the codec based on algorithm and create decoder by recovering the metadata
0:       ColumnPageCodec codec = DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(stats);
1:       if (codec instanceof AdaptiveIntegralCodec) {
1:         AdaptiveIntegralCodec adaptiveCodec = (AdaptiveIntegralCodec) codec;
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:         return codec.createDecoder(meta);
1:       } else if (codec instanceof AdaptiveDeltaIntegralCodec) {
1:         AdaptiveDeltaIntegralCodec adaptiveCodec = (AdaptiveDeltaIntegralCodec) codec;
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:         return codec.createDecoder(meta);
1:       } else if (codec instanceof DirectCompressCodec) {
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, DataType.getDataType(metadata.getType()), stats,
1:                 compressor);
1:         return codec.createDecoder(meta);
1:       } else {
1:         throw new RuntimeException("internal error");
1:       }
1:     } else if (dataType == DataTypes.FLOAT || dataType == DataTypes.DOUBLE) {
1:       // create the codec based on algorithm and create decoder by recovering the metadata
0:       ColumnPageCodec codec = DefaultEncodingFactory.selectCodecByAlgorithmForFloating(stats);
1:       if (codec instanceof AdaptiveFloatingCodec) {
1:         AdaptiveFloatingCodec adaptiveCodec = (AdaptiveFloatingCodec) codec;
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:         return codec.createDecoder(meta);
1:       } else if (codec instanceof DirectCompressCodec) {
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, DataType.getDataType(metadata.getType()), stats,
1:                 compressor);
1:         return codec.createDecoder(meta);
1:       } else {
1:         throw new RuntimeException("internal error");
1:       }
0:     } else if (dataType == DataTypes.DECIMAL || dataType == DataTypes.BYTE_ARRAY) {
1:       // no dictionary dimension
1:       return new DirectCompressCodec(stats.getDataType())
1:           .createDecoder(new ColumnPageEncoderMeta(spec, stats.getDataType(), stats, compressor));
1:     } else if (dataType == DataTypes.LEGACY_LONG) {
1:       // In case of older versions like in V1 format it has special datatype to handle
1:       AdaptiveIntegralCodec adaptiveCodec =
1:           new AdaptiveIntegralCodec(DataTypes.LONG, DataTypes.LONG, stats);
1:       ColumnPageEncoderMeta meta =
1:           new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
1:       return adaptiveCodec.createDecoder(meta);
1:     } else {
1:       throw new RuntimeException("unsupported data type: " + stats.getDataType());
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.ColumnType;
/////////////////////////////////////////////////////////////////////////
1:  * Base class for encoding factory implementation.
1: public abstract class EncodingFactory {
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:       return new DirectCompressCodec(metadata.getStoreDataType()).createDecoder(metadata);
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:       return new AdaptiveIntegralCodec(metadata.getSchemaDataType(), metadata.getStoreDataType(),
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:       return new AdaptiveDeltaIntegralCodec(metadata.getSchemaDataType(),
1:           metadata.getStoreDataType(), stats).createDecoder(metadata);
1:     } else if (encoding == ADAPTIVE_FLOATING) {
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:       metadata.readFields(in);
1:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:       return new AdaptiveFloatingCodec(metadata.getSchemaDataType(), metadata.getStoreDataType(),
/////////////////////////////////////////////////////////////////////////
0:     TableSpec.ColumnSpec spec = new TableSpec.ColumnSpec("legacy", stats.getDataType(),
0:         ColumnType.MEASURE);
0:     String compressor = "snappy";
0:         ColumnPageCodec codec = DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(stats);
0:           ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:               adaptiveCodec.getTargetDataType(), stats, compressor);
0:           ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:               adaptiveCodec.getTargetDataType(), stats, compressor);
0:           ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:               metadata.getType(), stats, compressor);
/////////////////////////////////////////////////////////////////////////
0:         codec = DefaultEncodingFactory.selectCodecByAlgorithmForFloating(stats);
0:           ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:               adaptiveCodec.getTargetDataType(), stats, compressor);
0:           ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:               metadata.getType(), stats, compressor);
/////////////////////////////////////////////////////////////////////////
0:             new ColumnPageEncoderMeta(spec, stats.getDataType(), stats, compressor));
commit:892f120
/////////////////////////////////////////////////////////////////////////
0:         // create the codec based on algorithm and create decoder by recovering the metadata
0:         ColumnPageCodec codec = DefaultEncodingStrategy.selectCodecByAlgorithmForIntegral(stats);
0:         if (codec instanceof AdaptiveIntegralCodec) {
0:           AdaptiveIntegralCodec adaptiveCodec = (AdaptiveIntegralCodec) codec;
0:           AdaptiveIntegralEncoderMeta meta = new AdaptiveIntegralEncoderMeta(
0:               "snappy", adaptiveCodec.getTargetDataType(), stats);
1:           return codec.createDecoder(meta);
0:         } else if (codec instanceof AdaptiveDeltaIntegralCodec) {
0:           AdaptiveDeltaIntegralCodec adaptiveCodec = (AdaptiveDeltaIntegralCodec) codec;
0:           AdaptiveDeltaIntegralEncoderMeta meta = new AdaptiveDeltaIntegralEncoderMeta(
0:               "snappy", adaptiveCodec.getTargetDataType(), stats);
1:           return codec.createDecoder(meta);
0:         } else if (codec instanceof DirectCompressCodec) {
0:           DirectCompressorEncoderMeta meta = new DirectCompressorEncoderMeta(
0:               "snappy", metadata.getType(), stats);
1:           return codec.createDecoder(meta);
1:         } else {
0:           throw new RuntimeException("internal error");
1:         }
0:         // create the codec based on algorithm and create decoder by recovering the metadata
0:         codec = DefaultEncodingStrategy.selectCodecByAlgorithmForFloating(stats);
0:         if (codec instanceof AdaptiveFloatingCodec) {
0:           AdaptiveFloatingCodec adaptiveCodec = (AdaptiveFloatingCodec) codec;
0:           AdaptiveFloatingEncoderMeta meta = new AdaptiveFloatingEncoderMeta(
0:               "snappy", adaptiveCodec.getTargetDataType(), stats);
1:           return codec.createDecoder(meta);
0:         } else if (codec instanceof DirectCompressCodec) {
0:           DirectCompressorEncoderMeta meta = new DirectCompressorEncoderMeta(
0:               "snappy", metadata.getType(), stats);
1:           return codec.createDecoder(meta);
1:         } else {
0:           throw new RuntimeException("internal error");
1:         }
commit:4f7487d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveFloatingCodec;
0: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveFloatingEncoderMeta;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.carbondata.format.Encoding.ADAPTIVE_FLOATING;
/////////////////////////////////////////////////////////////////////////
0:     } else if (encoding == ADAPTIVE_FLOATING) {
0:       AdaptiveFloatingEncoderMeta metadata = new AdaptiveFloatingEncoderMeta();
1:       metadata.readFields(in);
1:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
0:       return new AdaptiveFloatingCodec(metadata.getDataType(), metadata.getTargetDataType(),
1:           stats).createDecoder(metadata);
/////////////////////////////////////////////////////////////////////////
0:         return DefaultEncodingStrategy.selectCodecByAlgorithmForIntegral(stats).createDecoder(null);
0:         return DefaultEncodingStrategy.selectCodecByAlgorithmForFloating(stats).createDecoder(null);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaIntegralCodec;
0: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaIntegralEncoderMeta;
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveIntegralCodec;
0: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveIntegralEncoderMeta;
1: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
0: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressorEncoderMeta;
1: import org.apache.carbondata.core.datastore.page.encoding.rle.RLECodec;
1: import org.apache.carbondata.core.datastore.page.encoding.rle.RLEEncoderMeta;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.format.Encoding;
1: 
0: import static org.apache.carbondata.format.Encoding.ADAPTIVE_DELTA_INTEGRAL;
0: import static org.apache.carbondata.format.Encoding.ADAPTIVE_INTEGRAL;
0: import static org.apache.carbondata.format.Encoding.DIRECT_COMPRESS;
0: import static org.apache.carbondata.format.Encoding.RLE_INTEGRAL;
/////////////////////////////////////////////////////////////////////////
1:    * Return new encoder for specified column
1:   public abstract ColumnPageEncoder createEncoder(TableSpec.ColumnSpec columnSpec,
1:       ColumnPage inputPage);
1: 
1:   /**
1:    * Return new decoder based on encoder metadata read from file
1:    */
0:   public ColumnPageDecoder createDecoder(List<Encoding> encodings, List<ByteBuffer> encoderMetas)
0:       throws IOException {
1:     assert (encodings.size() == 1);
1:     assert (encoderMetas.size() == 1);
1:     Encoding encoding = encodings.get(0);
1:     byte[] encoderMeta = encoderMetas.get(0).array();
1:     ByteArrayInputStream stream = new ByteArrayInputStream(encoderMeta);
1:     DataInputStream in = new DataInputStream(stream);
0:     if (encoding == DIRECT_COMPRESS) {
0:       DirectCompressorEncoderMeta metadata = new DirectCompressorEncoderMeta();
1:       metadata.readFields(in);
0:       return new DirectCompressCodec(metadata.getDataType()).createDecoder(metadata);
1:     } else if (encoding == ADAPTIVE_INTEGRAL) {
0:       AdaptiveIntegralEncoderMeta metadata = new AdaptiveIntegralEncoderMeta();
1:       metadata.readFields(in);
1:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
0:       return new AdaptiveIntegralCodec(metadata.getDataType(), metadata.getTargetDataType(),
1:           stats).createDecoder(metadata);
1:     } else if (encoding == ADAPTIVE_DELTA_INTEGRAL) {
0:       AdaptiveDeltaIntegralEncoderMeta metadata = new AdaptiveDeltaIntegralEncoderMeta();
1:       metadata.readFields(in);
1:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
0:       return new AdaptiveDeltaIntegralCodec(metadata.getDataType(), metadata.getTargetDataType(),
1:           stats).createDecoder(metadata);
1:     } else if (encoding == RLE_INTEGRAL) {
1:       RLEEncoderMeta metadata = new RLEEncoderMeta();
1:       metadata.readFields(in);
1:       return new RLECodec().createDecoder(metadata);
0:     } else {
1:       // for backward compatibility
1:       ValueEncoderMeta metadata = CarbonUtil.deserializeEncoderMetaV3(encoderMeta);
0:       return createDecoderLegacy(metadata);
1:    * Old way of creating decoder, based on algorithm
0:   public ColumnPageDecoder createDecoderLegacy(ValueEncoderMeta metadata) {
1:     SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
0:     switch (metadata.getType()) {
0:       case BYTE:
0:       case SHORT:
0:       case INT:
0:       case LONG:
0:         return DefaultEncodingStrategy.selectCodecByAlgorithm(stats).createDecoder(null);
0:       case FLOAT:
0:       case DOUBLE:
0:       case DECIMAL:
0:       case BYTE_ARRAY:
0:         // no dictionary dimension
0:         return new DirectCompressCodec(stats.getDataType()).createDecoder(
0:             new DirectCompressorEncoderMeta("snappy", stats.getDataType(), stats));
0:       default:
0:         throw new RuntimeException("unsupported data type: " + stats.getDataType());
author:xubo245
-------------------------------------------------------------------------------
commit:0647348
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
1:       return new DirectCompressCodec(metadata.getStoreDataType()).createDecoder(metadata);
commit:6abdd97
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.carbondata.format.Encoding.BOOL_BYTE;
/////////////////////////////////////////////////////////////////////////
1:     } else if (encoding == BOOL_BYTE) {
0:       RLEEncoderMeta metadata = new RLEEncoderMeta();
1:       metadata.readFields(in);
0:       return new RLECodec().createDecoder(metadata);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:11661eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaFloatingCodec;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.carbondata.format.Encoding.*;
/////////////////////////////////////////////////////////////////////////
1:     } else if (encoding == ADAPTIVE_DELTA_FLOATING) {
1:       ColumnPageEncoderMeta metadata = new ColumnPageEncoderMeta();
0:       metadata.readFields(in);
0:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(metadata);
1:       return new AdaptiveDeltaFloatingCodec(metadata.getSchemaDataType(),
1:           metadata.getStoreDataType(), stats).createDecoder(metadata);
/////////////////////////////////////////////////////////////////////////
1:       } else if (codec instanceof AdaptiveDeltaFloatingCodec) {
1:         AdaptiveDeltaFloatingCodec adaptiveCodec = (AdaptiveDeltaFloatingCodec) codec;
1:         ColumnPageEncoderMeta meta =
1:             new ColumnPageEncoderMeta(spec, adaptiveCodec.getTargetDataType(), stats, compressor);
0:         return codec.createDecoder(meta);
commit:133b303
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
0:     switch (DataType.getDataType(metadata.getType())) {
/////////////////////////////////////////////////////////////////////////
0:               DataType.getDataType(metadata.getType()), stats, compressor);
/////////////////////////////////////////////////////////////////////////
0:               DataType.getDataType(metadata.getType()), stats, compressor);
/////////////////////////////////////////////////////////////////////////
0:         // In case of older versions like in V1 format it has special datatype to handle
0:       case LEGACY_LONG:
0:         AdaptiveIntegralCodec adaptiveCodec =
0:             new AdaptiveIntegralCodec(DataType.LONG, DataType.LONG, stats);
0:         ColumnPageEncoderMeta meta = new ColumnPageEncoderMeta(spec,
0:             adaptiveCodec.getTargetDataType(), stats, compressor);
0:         return adaptiveCodec.createDecoder(meta);
commit:4e83509
/////////////////////////////////////////////////////////////////////////
0:   public ColumnPageCodec newCodec(ValueEncoderMeta meta) {
author:jackylk
-------------------------------------------------------------------------------
commit:a5af0ff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
0:   public ColumnPageCodec newCodec(SimpleStatsResult stats) {
/////////////////////////////////////////////////////////////////////////
0:   public ColumnPageCodec newCodec(ValueEncoderMeta meta, int scale, int precision) {
/////////////////////////////////////////////////////////////////////////
0:   // for dimension column
0:   public abstract ColumnPageCodec newCodec(TableSpec.DimensionSpec dimensionSpec);
1: 
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
0: import org.apache.carbondata.core.metadata.ColumnPageCodecMeta;
/////////////////////////////////////////////////////////////////////////
0:   public ColumnPageCodec createCodec(SimpleStatsResult stats) {
0:         return newCodecForIntegralType(stats);
/////////////////////////////////////////////////////////////////////////
0:     if (meta instanceof ColumnPageCodecMeta) {
0:       ColumnPageCodecMeta codecMeta = (ColumnPageCodecMeta) meta;
0:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(codecMeta);
0:       switch (codecMeta.getSrcDataType()) {
0:         case BYTE:
0:         case SHORT:
0:         case INT:
0:         case LONG:
0:           return newCodecForIntegralType(stats);
0:         case FLOAT:
0:         case DOUBLE:
0:           return newCodecForFloatingType(stats);
0:         case DECIMAL:
0:           return newCodecForDecimalType(stats);
0:         case BYTE_ARRAY:
0:           // no dictionary dimension
0:           return newCodecForByteArrayType(stats);
0:         default:
0:           throw new RuntimeException("unsupported data type: " + stats.getDataType());
1:       }
0:     } else {
0:       SimpleStatsResult stats = PrimitivePageStatsCollector.newInstance(meta, scale, precision);
0:       switch (meta.getType()) {
0:         case BYTE:
0:         case SHORT:
0:         case INT:
0:         case LONG:
0:           return newCodecForIntegralType(stats);
0:         case FLOAT:
0:         case DOUBLE:
0:           return newCodecForFloatingType(stats);
0:         case DECIMAL:
0:           return newCodecForDecimalType(stats);
0:         case BYTE_ARRAY:
0:           // no dictionary dimension
0:           return newCodecForByteArrayType(stats);
0:         default:
0:           throw new RuntimeException("unsupported data type: " + stats.getDataType());
1:       }
1:     }
0:   abstract ColumnPageCodec newCodecForIntegralType(SimpleStatsResult stats);
0:   abstract ColumnPageCodec newCodecForFloatingType(SimpleStatsResult stats);
0:   abstract ColumnPageCodec newCodecForDecimalType(SimpleStatsResult stats);
0:   abstract ColumnPageCodec newCodecForByteArrayType(SimpleStatsResult stats);
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding;
1: 
0: import org.apache.carbondata.core.datastore.page.statistics.ColumnPageStatsVO;
1: import org.apache.carbondata.core.metadata.ValueEncoderMeta;
1: 
1: /**
0:  * Base class for encoding strategy implementation.
1:  */
0: public abstract class EncodingStrategy {
1: 
1:   /**
0:    * create codec based on the page data type and statistics
1:    */
0:   public ColumnPageCodec createCodec(ColumnPageStatsVO stats) {
0:     switch (stats.getDataType()) {
0:       case BYTE:
0:       case SHORT:
0:       case INT:
0:       case LONG:
0:         return newCodecForIntegerType(stats);
0:       case FLOAT:
0:       case DOUBLE:
0:         return newCodecForFloatingType(stats);
0:       case DECIMAL:
0:         return newCodecForDecimalType(stats);
0:       case BYTE_ARRAY:
0:         // no dictionary dimension
0:         return newCodecForByteArrayType(stats);
0:       default:
0:         throw new RuntimeException("unsupported data type: " + stats.getDataType());
0:     }
0:   }
1: 
1:   /**
0:    * create codec based on the page data type and statistics contained by ValueEncoderMeta
1:    */
0:   public ColumnPageCodec createCodec(ValueEncoderMeta meta) {
0:     ColumnPageStatsVO stats = ColumnPageStatsVO.copyFrom(meta);
0:     return createCodec(stats);
0:   }
1: 
0:   // for byte, short, int, long
0:   abstract ColumnPageCodec newCodecForIntegerType(ColumnPageStatsVO stats);
1: 
0:   // for float, double
0:   abstract ColumnPageCodec newCodecForFloatingType(ColumnPageStatsVO stats);
1: 
0:   // for decimal
0:   abstract ColumnPageCodec newCodecForDecimalType(ColumnPageStatsVO stats);
1: 
0:   // for byte array
0:   abstract ColumnPageCodec newCodecForByteArrayType(ColumnPageStatsVO stats);
1: 
0: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:   public ColumnPageCodec createCodec(ValueEncoderMeta meta, int scale, int precision) {
0:     ColumnPageStatsVO stats = ColumnPageStatsVO.copyFrom(meta, scale, precision);
============================================================================