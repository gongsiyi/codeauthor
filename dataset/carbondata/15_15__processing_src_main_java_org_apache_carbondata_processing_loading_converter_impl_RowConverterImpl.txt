1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
4:d96f09a: 
1:eaadc88: import java.io.IOException;
1:d96f09a: import java.util.ArrayList;
1:d96f09a: import java.util.List;
1:87dade7: import java.util.Map;
1:eaadc88: import java.util.concurrent.Callable;
1:87dade7: import java.util.concurrent.ConcurrentHashMap;
1:eaadc88: import java.util.concurrent.ExecutionException;
1:eaadc88: import java.util.concurrent.ExecutorService;
1:eaadc88: import java.util.concurrent.Executors;
1:eaadc88: import java.util.concurrent.Future;
1:d96f09a: 
1:87dade7: import org.apache.carbondata.common.logging.LogService;
1:87dade7: import org.apache.carbondata.common.logging.LogServiceFactory;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:05b2654: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
1:4daf063: import org.apache.carbondata.core.dictionary.service.DictionaryOnePassService;
1:a734add: import org.apache.carbondata.core.util.CarbonThreadFactory;
1:d96f09a: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
1:349c59c: import org.apache.carbondata.processing.loading.BadRecordsLogger;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:349c59c: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:349c59c: import org.apache.carbondata.processing.loading.converter.FieldConverter;
1:349c59c: import org.apache.carbondata.processing.loading.converter.RowConverter;
1:349c59c: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:d96f09a: 
1:d96f09a: /**
1:d96f09a:  * It converts the complete row if necessary, dictionary columns are encoded with dictionary values
1:d96f09a:  * and nondictionary values are converted to binary.
1:d96f09a:  */
1:d96f09a: public class RowConverterImpl implements RowConverter {
1:d96f09a: 
1:87dade7:   private static final LogService LOGGER =
1:87dade7:       LogServiceFactory.getLogService(RowConverterImpl.class.getName());
1:87dade7: 
1:d96f09a:   private CarbonDataLoadConfiguration configuration;
1:d96f09a: 
1:496cde4:   private DataField[] fields;
1:496cde4: 
1:d96f09a:   private FieldConverter[] fieldConverters;
1:496cde4: 
1:496cde4:   private BadRecordsLogger badRecordLogger;
1:496cde4: 
1:496cde4:   private BadRecordLogHolder logHolder;
1:05b2654: 
1:87dade7:   private List<DictionaryClient> dictClients = new ArrayList<>();
1:05b2654: 
1:05b2654:   private ExecutorService executorService;
1:87dade7: 
1:87dade7:   private Map<Object, Integer>[] localCaches;
1:87dade7: 
1:496cde4:   public RowConverterImpl(DataField[] fields, CarbonDataLoadConfiguration configuration,
1:496cde4:       BadRecordsLogger badRecordLogger) {
1:496cde4:     this.fields = fields;
1:d96f09a:     this.configuration = configuration;
1:496cde4:     this.badRecordLogger = badRecordLogger;
1:05b2654:   }
1:05b2654: 
1:05b2654:   @Override
1:eaadc88:   public void initialize() throws IOException {
1:496cde4:     String nullFormat =
1:496cde4:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:496cde4:             .toString();
1:3251c89:     boolean isEmptyBadRecord = Boolean.parseBoolean(
1:3251c89:         configuration.getDataLoadProperty(DataLoadProcessorConstants.IS_EMPTY_DATA_BAD_RECORD)
1:3251c89:             .toString());
1:d96f09a:     List<FieldConverter> fieldConverterList = new ArrayList<>();
1:87dade7:     localCaches = new Map[fields.length];
1:d96f09a:     long lruCacheStartTime = System.currentTimeMillis();
1:87dade7:     DictionaryClient client = createDictionaryClient();
1:87dade7:     dictClients.add(client);
1:496cde4: 
1:87dade7:     for (int i = 0; i < fields.length; i++) {
1:87dade7:       localCaches[i] = new ConcurrentHashMap<>();
1:87dade7:       FieldConverter fieldConverter = FieldEncoderFactory.getInstance()
1:7a1d12a:           .createFieldEncoder(fields[i], configuration.getTableIdentifier(), i, nullFormat, client,
1:7a1d12a:               configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord,
1:7a1d12a:               configuration.getParentTablePath());
1:87dade7:       fieldConverterList.add(fieldConverter);
1:87dade7:     }
1:87dade7:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
1:87dade7:         .recordLruCacheLoadTime((System.currentTimeMillis() - lruCacheStartTime) / 1000.0);
1:87dade7:     fieldConverters = fieldConverterList.toArray(new FieldConverter[fieldConverterList.size()]);
1:87dade7:     logHolder = new BadRecordLogHolder();
1:87dade7:   }
1:87dade7: 
1:87dade7:   private DictionaryClient createDictionaryClient() {
1:05b2654:     // for one pass load, start the dictionary client
1:05b2654:     if (configuration.getUseOnePass()) {
1:87dade7:       if (executorService == null) {
1:a734add:         executorService = Executors.newCachedThreadPool(new CarbonThreadFactory(
1:a734add:             "DictionaryClientPool:" + configuration.getTableIdentifier().getCarbonTableIdentifier()
1:a734add:                 .getTableName()));
1:87dade7:       }
1:4daf063:       DictionaryOnePassService
1:4daf063:           .setDictionaryServiceProvider(configuration.getDictionaryServiceProvider());
1:4daf063: 
1:4daf063:       Future<DictionaryClient> result =
1:4daf063:           executorService.submit(new Callable<DictionaryClient>() {
1:4daf063:             @Override public DictionaryClient call() throws Exception {
1:4daf063:               Thread.currentThread().setName("Dictionary client");
1:4daf063:               DictionaryClient client =
1:e8da880:                   DictionaryOnePassService.getDictionaryProvider().getDictionaryClient();
1:4daf063:               client.startClient(configuration.getDictionaryServerSecretKey(),
1:4daf063:                   configuration.getDictionaryServerHost(), configuration.getDictionaryServerPort(),
1:4daf063:                   configuration.getDictionaryEncryptServerSecure());
1:4daf063:               return client;
1:4daf063:             }
1:4daf063:           });
1:4daf063: 
1:05b2654: 
1:05b2654:       try {
1:05b2654:         // wait for client initialization finished, or will raise null pointer exception
1:05b2654:         Thread.sleep(1000);
2:05b2654:       } catch (InterruptedException e) {
1:87dade7:         LOGGER.error(e);
1:87dade7:         throw new RuntimeException(e);
1:05b2654:       }
1:05b2654: 
1:05b2654:       try {
1:87dade7:         return result.get();
1:eaadc88:       } catch (InterruptedException | ExecutionException e) {
1:eaadc88:         throw new RuntimeException(e);
1:05b2654:       }
1:05b2654:     }
1:87dade7:     return null;
1:496cde4:   }
1:d96f09a: 
1:496cde4:   @Override
1:d96f09a:   public CarbonRow convert(CarbonRow row) throws CarbonDataLoadingException {
1:3251c89:     logHolder.setLogged(false);
1:3251c89:     logHolder.clear();
1:87dade7:     for (int i = 0; i < fieldConverters.length; i++) {
1:496cde4:       fieldConverters[i].convert(row, logHolder);
1:3251c89:       if (!logHolder.isLogged() && logHolder.isBadRecordNotAdded()) {
1:e40b34b:         badRecordLogger.addBadRecordsToBuilder(row.getRawData(), logHolder.getReason());
1:9e11e13:         if (badRecordLogger.isDataLoadFail()) {
1:3bc9152:           String error = "Data load failed due to bad record: " + logHolder.getReason();
1:0c0f90c:           if (!badRecordLogger.isBadRecordLoggerEnable()) {
1:0c0f90c:             error += "Please enable bad record logger to know the detail reason.";
1:0c0f90c:           }
1:b6545c5:           throw new BadRecordFoundException(error);
1:496cde4:         }
1:496cde4:         logHolder.clear();
1:3251c89:         logHolder.setLogged(true);
1:256dbed:         if (badRecordLogger.isBadRecordConvertNullDisable()) {
1:496cde4:           return null;
1:496cde4:         }
7:d96f09a:       }
1:d96f09a:     }
1:e40b34b:     // rawData will not be required after this so reset the entry to null.
1:e40b34b:     row.setRawData(null);
1:d96f09a:     return row;
1:d96f09a:   }
1:d96f09a: 
1:496cde4:   @Override
1:d96f09a:   public void finish() {
1:f79b9ea:     // Clear up dictionary cache access count.
1:f79b9ea:     for (int i = 0; i < fieldConverters.length; i ++) {
1:f79b9ea:       fieldConverters[i].clear();
1:f79b9ea:     }
1:05b2654:     // close dictionary client when finish write
1:05b2654:     if (configuration.getUseOnePass()) {
1:87dade7:       for (DictionaryClient client : dictClients) {
1:87dade7:         if (client != null) {
1:87dade7:           client.shutDown();
1:87dade7:         }
1:87dade7:       }
1:4a79a86:       if (null != logHolder) {
1:4a79a86:         logHolder.finish();
1:4a79a86:       }
1:1fa2df9:       if (executorService != null) {
1:1fa2df9:         executorService.shutdownNow();
1:1fa2df9:         executorService = null;
1:1fa2df9:       }
1:05b2654:     }
1:d96f09a:   }
1:d96f09a: 
2:d96f09a:   @Override
1:496cde4:   public RowConverter createCopyForNewThread() {
1:496cde4:     RowConverterImpl converter =
1:496cde4:         new RowConverterImpl(this.fields, this.configuration, this.badRecordLogger);
1:87dade7:     List<FieldConverter> fieldConverterList = new ArrayList<>();
1:87dade7:     DictionaryClient client = createDictionaryClient();
1:87dade7:     dictClients.add(client);
1:87dade7:     String nullFormat =
1:87dade7:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:87dade7:             .toString();
1:3251c89:     boolean isEmptyBadRecord = Boolean.parseBoolean(
1:3251c89:         configuration.getDataLoadProperty(DataLoadProcessorConstants.IS_EMPTY_DATA_BAD_RECORD)
1:3251c89:             .toString());
1:87dade7:     for (int i = 0; i < fields.length; i++) {
1:87dade7:       FieldConverter fieldConverter = null;
1:87dade7:       try {
1:1155d4d:         fieldConverter = FieldEncoderFactory.getInstance()
1:ff5166e:             .createFieldEncoder(fields[i], configuration.getTableIdentifier(), i, nullFormat,
1:7a1d12a:                 client, configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord,
1:7a1d12a:                 configuration.getParentTablePath());
1:87dade7:       } catch (IOException e) {
1:87dade7:         throw new RuntimeException(e);
1:87dade7:       }
1:87dade7:       fieldConverterList.add(fieldConverter);
1:87dade7:     }
1:87dade7:     converter.fieldConverters =
1:87dade7:         fieldConverterList.toArray(new FieldConverter[fieldConverterList.size()]);
1:496cde4:     converter.logHolder = new BadRecordLogHolder();
1:496cde4:     return converter;
1:496cde4:   }
1:496cde4: 
1:b13ead9:   @Override public int[] getCardinality() {
1:b13ead9:     List<Integer> dimCardinality = new ArrayList<>();
1:b13ead9:     if (fieldConverters != null) {
1:b13ead9:       for (int i = 0; i < fieldConverters.length; i++) {
1:b13ead9:         if (fieldConverters[i] instanceof AbstractDictionaryFieldConverterImpl) {
1:b13ead9:           ((AbstractDictionaryFieldConverterImpl) fieldConverters[i])
1:b13ead9:               .fillColumnCardinality(dimCardinality);
1:b13ead9:         }
1:b13ead9:       }
1:b13ead9:     }
1:b13ead9:     int[] cardinality = new int[dimCardinality.size()];
1:b13ead9:     for (int i = 0; i < dimCardinality.size(); i++) {
1:b13ead9:       cardinality[i] = dimCardinality.get(i);
1:b13ead9:     }
1:b13ead9:     return cardinality;
1:b13ead9:   }
1:d5396b1: 
1:d5396b1:   @Override
1:d5396b1:   public FieldConverter[] getFieldConverters() {
1:d5396b1:     return fieldConverters;
1:d5396b1:   }
1:87dade7: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:7a1d12a
/////////////////////////////////////////////////////////////////////////
1:           .createFieldEncoder(fields[i], configuration.getTableIdentifier(), i, nullFormat, client,
1:               configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord,
1:               configuration.getParentTablePath());
/////////////////////////////////////////////////////////////////////////
1:                 client, configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord,
1:                 configuration.getParentTablePath());
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
0:               localCaches[i], isEmptyBadRecord);
/////////////////////////////////////////////////////////////////////////
0:             configuration.getUseOnePass(), configuration.getTableIdentifier().getStorePath(),
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:ff5166e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:           .createFieldEncoder(fields[i], configuration.getTableIdentifier(), i, nullFormat,
/////////////////////////////////////////////////////////////////////////
0:             .createFieldEncoder(fields[i], configuration.getTableIdentifier(), i, nullFormat,
author:xubo245
-------------------------------------------------------------------------------
commit:e8da880
/////////////////////////////////////////////////////////////////////////
1:                   DictionaryOnePassService.getDictionaryProvider().getDictionaryClient();
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public FieldConverter[] getFieldConverters() {
1:     return fieldConverters;
1:   }
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:e40b34b
/////////////////////////////////////////////////////////////////////////
1:         badRecordLogger.addBadRecordsToBuilder(row.getRawData(), logHolder.getReason());
/////////////////////////////////////////////////////////////////////////
1:     // rawData will not be required after this so reset the entry to null.
1:     row.setRawData(null);
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:     cache = cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
/////////////////////////////////////////////////////////////////////////
0:           .createFieldEncoder(fields[i], cache, configuration.getTableIdentifier(), i, nullFormat,
0:               client, configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord);
/////////////////////////////////////////////////////////////////////////
1:         fieldConverter = FieldEncoderFactory.getInstance()
0:             .createFieldEncoder(fields[i], cache, configuration.getTableIdentifier(), i, nullFormat,
0:                 client, configuration.getUseOnePass(), localCaches[i], isEmptyBadRecord);
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
0:         badRecordLogger.addBadRecordsToBuilder(copy.getData(), logHolder.getReason());
0:           String error = "Data load failed due to bad record: " + logHolder.getReason() +
0:               "Please enable bad record logger to know the detail reason.";
/////////////////////////////////////////////////////////////////////////
1:       if (null != logHolder) {
1:         logHolder.finish();
1:       }
commit:3bc9152
/////////////////////////////////////////////////////////////////////////
1:           String error = "Data load failed due to bad record: " + logHolder.getReason();
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:     boolean isEmptyBadRecord = Boolean.parseBoolean(
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.IS_EMPTY_DATA_BAD_RECORD)
1:             .toString());
/////////////////////////////////////////////////////////////////////////
0:               configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat, client,
0:               configuration.getUseOnePass(), configuration.getTableIdentifier().getStorePath(),
0:               true, localCaches[i], isEmptyBadRecord);
/////////////////////////////////////////////////////////////////////////
0:               configuration.getDictionaryServerPort());
/////////////////////////////////////////////////////////////////////////
1:     logHolder.setLogged(false);
1:     logHolder.clear();
1:       if (!logHolder.isLogged() && logHolder.isBadRecordNotAdded()) {
1:         logHolder.setLogged(true);
/////////////////////////////////////////////////////////////////////////
1:     boolean isEmptyBadRecord = Boolean.parseBoolean(
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.IS_EMPTY_DATA_BAD_RECORD)
1:             .toString());
0:         fieldConverter = FieldEncoderFactory.getInstance().createFieldEncoder(fields[i], cache,
0:             configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat, client,
0:             configuration.getUseOnePass(), configuration.getTableIdentifier().getStorePath(), false,
0:             localCaches[i], isEmptyBadRecord);
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:     // Clear up dictionary cache access count.
1:     for (int i = 0; i < fieldConverters.length; i ++) {
1:       fieldConverters[i].clear();
1:     }
author:shivangi
-------------------------------------------------------------------------------
commit:0c0f90c
/////////////////////////////////////////////////////////////////////////
0:           String error = "Data load failed due to bad record: " + logHolder.getReason();
1:           if (!badRecordLogger.isBadRecordLoggerEnable()) {
1:             error += "Please enable bad record logger to know the detail reason.";
1:           }
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.service.DictionaryOnePassService;
/////////////////////////////////////////////////////////////////////////
1:       DictionaryOnePassService
1:           .setDictionaryServiceProvider(configuration.getDictionaryServiceProvider());
1: 
1:       Future<DictionaryClient> result =
1:           executorService.submit(new Callable<DictionaryClient>() {
1:             @Override public DictionaryClient call() throws Exception {
1:               Thread.currentThread().setName("Dictionary client");
1:               DictionaryClient client =
0:                   DictionaryOnePassService.getDictionayProvider().getDictionaryClient();
1:               client.startClient(configuration.getDictionaryServerSecretKey(),
1:                   configuration.getDictionaryServerHost(), configuration.getDictionaryServerPort(),
1:                   configuration.getDictionaryEncryptServerSecure());
1:               return client;
1:             }
1:           });
1: 
author:kumarvishal
-------------------------------------------------------------------------------
commit:a734add
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonThreadFactory;
/////////////////////////////////////////////////////////////////////////
1:         executorService = Executors.newCachedThreadPool(new CarbonThreadFactory(
1:             "DictionaryClientPool:" + configuration.getTableIdentifier().getCarbonTableIdentifier()
1:                 .getTableName()));
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.BadRecordsLogger;
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1: import org.apache.carbondata.processing.loading.converter.FieldConverter;
1: import org.apache.carbondata.processing.loading.converter.RowConverter;
1: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
/////////////////////////////////////////////////////////////////////////
commit:353272e
/////////////////////////////////////////////////////////////////////////
0:     //TODO: only copy if it is bad record
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
1:   public void initialize() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       } catch (InterruptedException | ExecutionException e) {
1:         throw new RuntimeException(e);
author:manishgupta88
-------------------------------------------------------------------------------
commit:b6545c5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.exception.BadRecordFoundException;
/////////////////////////////////////////////////////////////////////////
1:           throw new BadRecordFoundException(error);
author:ravipesala
-------------------------------------------------------------------------------
commit:1fa2df9
/////////////////////////////////////////////////////////////////////////
1:       if (executorService != null) {
1:         executorService.shutdownNow();
1:         executorService = null;
1:       }
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override public int[] getCardinality() {
1:     List<Integer> dimCardinality = new ArrayList<>();
1:     if (fieldConverters != null) {
1:       for (int i = 0; i < fieldConverters.length; i++) {
1:         if (fieldConverters[i] instanceof AbstractDictionaryFieldConverterImpl) {
1:           ((AbstractDictionaryFieldConverterImpl) fieldConverters[i])
1:               .fillColumnCardinality(dimCardinality);
1:         }
1:       }
1:     }
1:     int[] cardinality = new int[dimCardinality.size()];
1:     for (int i = 0; i < dimCardinality.size(); i++) {
1:       cardinality[i] = dimCardinality.get(i);
1:     }
1:     return cardinality;
1:   }
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(RowConverterImpl.class.getName());
1: 
/////////////////////////////////////////////////////////////////////////
1:   private List<DictionaryClient> dictClients = new ArrayList<>();
0:   private Cache<DictionaryColumnUniqueIdentifier, Dictionary> cache;
1: 
1:   private Map<Object, Integer>[] localCaches;
1: 
/////////////////////////////////////////////////////////////////////////
0:     cache = cacheProvider.createCache(CacheType.REVERSE_DICTIONARY,
0:         configuration.getTableIdentifier().getStorePath());
1:     localCaches = new Map[fields.length];
1:     DictionaryClient client = createDictionaryClient();
1:     dictClients.add(client);
1:     for (int i = 0; i < fields.length; i++) {
1:       localCaches[i] = new ConcurrentHashMap<>();
1:       FieldConverter fieldConverter = FieldEncoderFactory.getInstance()
0:           .createFieldEncoder(fields[i], cache,
0:               configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat,
0:               client, configuration.getUseOnePass(),
0:               configuration.getTableIdentifier().getStorePath(), true, localCaches[i]);
1:       fieldConverterList.add(fieldConverter);
1:     }
1:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
1:         .recordLruCacheLoadTime((System.currentTimeMillis() - lruCacheStartTime) / 1000.0);
1:     fieldConverters = fieldConverterList.toArray(new FieldConverter[fieldConverterList.size()]);
1:     logHolder = new BadRecordLogHolder();
1:   }
1: 
1:   private DictionaryClient createDictionaryClient() {
1:       if (executorService == null) {
0:         executorService = Executors.newCachedThreadPool();
1:       }
/////////////////////////////////////////////////////////////////////////
1:         LOGGER.error(e);
1:         throw new RuntimeException(e);
1:         return result.get();
1:     return null;
/////////////////////////////////////////////////////////////////////////
0:     if (fieldConverters != null) {
1:       for (int i = 0; i < fieldConverters.length; i++) {
0:         if (fieldConverters[i] instanceof AbstractDictionaryFieldConverterImpl) {
0:           ((AbstractDictionaryFieldConverterImpl) fieldConverters[i])
0:               .fillColumnCardinality(dimCardinality);
1:         }
/////////////////////////////////////////////////////////////////////////
1:       for (DictionaryClient client : dictClients) {
1:         if (client != null) {
1:           client.shutDown();
1:         }
1:       }
/////////////////////////////////////////////////////////////////////////
1:     List<FieldConverter> fieldConverterList = new ArrayList<>();
1:     DictionaryClient client = createDictionaryClient();
1:     dictClients.add(client);
1:     String nullFormat =
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:             .toString();
1:     for (int i = 0; i < fields.length; i++) {
1:       FieldConverter fieldConverter = null;
1:       try {
0:         fieldConverter = FieldEncoderFactory.getInstance()
0:             .createFieldEncoder(fields[i], cache,
0:                 configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat,
0:                 client, configuration.getUseOnePass(),
0:                 configuration.getTableIdentifier().getStorePath(), false, localCaches[i]);
1:       } catch (IOException e) {
1:         throw new RuntimeException(e);
1:       }
1:       fieldConverterList.add(fieldConverter);
1:     }
1:     converter.fieldConverters =
1:         fieldConverterList.toArray(new FieldConverter[fieldConverterList.size()]);
commit:05b2654
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.*;
1: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
/////////////////////////////////////////////////////////////////////////
0:   private DictionaryClient dictClient;
1: 
1:   private ExecutorService executorService;
1: 
/////////////////////////////////////////////////////////////////////////
1:     // for one pass load, start the dictionary client
1:     if (configuration.getUseOnePass()) {
0:       executorService = Executors.newFixedThreadPool(1);
0:       Future<DictionaryClient> result = executorService.submit(new Callable<DictionaryClient>() {
1:         @Override
0:         public DictionaryClient call() throws Exception {
0:           Thread.currentThread().setName("Dictionary client");
0:           DictionaryClient dictionaryClient = new DictionaryClient();
0:           dictionaryClient.startClient(configuration.getDictionaryServerHost(),
0:                   configuration.getDictionaryServerPort());
0:           return dictionaryClient;
1:         }
0:       });
1: 
1:       try {
1:         // wait for client initialization finished, or will raise null pointer exception
1:         Thread.sleep(1000);
1:       } catch (InterruptedException e) {
0:         e.printStackTrace();
1:       }
1: 
1:       try {
0:         dictClient = result.get();
1:       } catch (InterruptedException e) {
0:         e.printStackTrace();
0:       } catch (ExecutionException e) {
0:         e.printStackTrace();
1:       }
1:     }
0:               configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat,
0:               dictClient, configuration.getUseOnePass(),
0:               configuration.getTableIdentifier().getStorePath());
/////////////////////////////////////////////////////////////////////////
1: 
1:     // close dictionary client when finish write
1:     if (configuration.getUseOnePass()) {
0:       dictClient.shutDown();
0:       executorService.shutdownNow();
1:     }
commit:496cde4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
0: import org.apache.carbondata.processing.surrogatekeysgenerator.csvbased.BadRecordsLogger;
/////////////////////////////////////////////////////////////////////////
1:   private DataField[] fields;
1: 
1:   private BadRecordsLogger badRecordLogger;
1: 
1:   private BadRecordLogHolder logHolder;
1: 
1:   public RowConverterImpl(DataField[] fields, CarbonDataLoadConfiguration configuration,
1:       BadRecordsLogger badRecordLogger) {
1:     this.fields = fields;
1:     this.badRecordLogger = badRecordLogger;
1:   }
1: 
1:   @Override
0:   public void initialize() {
1:     String nullFormat =
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:             .toString();
/////////////////////////////////////////////////////////////////////////
0:               configuration.getTableIdentifier().getCarbonTableIdentifier(), i, nullFormat);
0:       fieldConverterList.add(fieldConverter);
0:     logHolder = new BadRecordLogHolder();
0:     CarbonRow copy = row.getCopy();
1:       fieldConverters[i].convert(row, logHolder);
0:       if (logHolder.isBadRecordNotAdded()) {
0:         badRecordLogger.addBadRecordsToBuilder(copy.getData(), logHolder.getReason());
1:         logHolder.clear();
0:         if(badRecordLogger.isBadRecordConvertNullDisable()) {
1:           return null;
1:         }
1:       }
/////////////////////////////////////////////////////////////////////////
0:         ((AbstractDictionaryFieldConverterImpl) fieldConverters[i])
0:             .fillColumnCardinality(dimCardinality);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public RowConverter createCopyForNewThread() {
1:     RowConverterImpl converter =
1:         new RowConverterImpl(this.fields, this.configuration, this.badRecordLogger);
0:     converter.fieldConverters = fieldConverters;
1:     converter.logHolder = new BadRecordLogHolder();
1:     return converter;
1:   }
1: 
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.cache.Cache;
0: import org.apache.carbondata.core.cache.CacheProvider;
0: import org.apache.carbondata.core.cache.CacheType;
0: import org.apache.carbondata.core.cache.dictionary.Dictionary;
0: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.constants.DataLoadProcessorConstants;
0: import org.apache.carbondata.processing.newflow.converter.FieldConverter;
0: import org.apache.carbondata.processing.newflow.converter.RowConverter;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: /**
1:  * It converts the complete row if necessary, dictionary columns are encoded with dictionary values
1:  * and nondictionary values are converted to binary.
1:  */
1: public class RowConverterImpl implements RowConverter {
1: 
1:   private CarbonDataLoadConfiguration configuration;
1: 
1:   private FieldConverter[] fieldConverters;
1: 
0:   public RowConverterImpl(DataField[] fields, CarbonDataLoadConfiguration configuration) {
1:     this.configuration = configuration;
0:     CacheProvider cacheProvider = CacheProvider.getInstance();
0:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> cache =
0:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY,
0:             configuration.getTableIdentifier().getStorePath());
1:     List<FieldConverter> fieldConverterList = new ArrayList<>();
1: 
1:     long lruCacheStartTime = System.currentTimeMillis();
1: 
0:     for (int i = 0; i < fields.length; i++) {
0:       FieldConverter fieldConverter = FieldEncoderFactory.getInstance()
0:           .createFieldEncoder(fields[i], cache,
0:               configuration.getTableIdentifier().getCarbonTableIdentifier(), i);
0:       if (fieldConverter != null) {
0:         fieldConverterList.add(fieldConverter);
1:       }
1:     }
0:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
0:         .recordLruCacheLoadTime((System.currentTimeMillis() - lruCacheStartTime) / 1000.0);
0:     fieldConverters = fieldConverterList.toArray(new FieldConverter[fieldConverterList.size()]);
1:   }
1: 
1:   @Override
1:   public CarbonRow convert(CarbonRow row) throws CarbonDataLoadingException {
0:     for (int i = 0; i < fieldConverters.length; i++) {
0:       fieldConverters[i].convert(row);
1:     }
1:     return row;
1:   }
1: 
1:   @Override
1:   public void finish() {
0:     List<Integer> dimCardinality = new ArrayList<>();
0:     for (int i = 0; i < fieldConverters.length; i++) {
0:       if (fieldConverters[i] instanceof AbstractDictionaryFieldConverterImpl) {
0:         dimCardinality.add(
0:             ((AbstractDictionaryFieldConverterImpl) fieldConverters[i]).getColumnCardinality());
1:       }
1:     }
0:     int[] cardinality = new int[dimCardinality.size()];
0:     for (int i = 0; i < dimCardinality.size(); i++) {
0:       cardinality[i] = dimCardinality.get(i);
1:     }
0:     // Set the cardinality to configuration, it will be used by further step for mdk key.
0:     configuration.setDataLoadProperty(DataLoadProcessorConstants.DIMENSION_LENGTHS, cardinality);
1:   }
1: 
1: }
author:akash
-------------------------------------------------------------------------------
commit:9e11e13
/////////////////////////////////////////////////////////////////////////
1:         if (badRecordLogger.isDataLoadFail()) {
0:           String error = "Data load failed due to bad bad record: " + logHolder.getReason();
0:           throw new CarbonDataLoadingException(error);
0:         }
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:         if (badRecordLogger.isBadRecordConvertNullDisable()) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================