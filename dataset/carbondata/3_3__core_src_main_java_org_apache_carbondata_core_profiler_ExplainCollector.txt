1:03a735b: /*
1:03a735b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:03a735b:  * contributor license agreements.  See the NOTICE file distributed with
1:03a735b:  * this work for additional information regarding copyright ownership.
1:03a735b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:03a735b:  * (the "License"); you may not use this file except in compliance with
1:03a735b:  * the License.  You may obtain a copy of the License at
1:03a735b:  *
1:03a735b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:03a735b:  *
1:03a735b:  * Unless required by applicable law or agreed to in writing, software
1:03a735b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:03a735b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:03a735b:  * See the License for the specific language governing permissions and
1:03a735b:  * limitations under the License.
1:03a735b:  */
1:03a735b: 
1:03a735b: package org.apache.carbondata.core.profiler;
1:03a735b: 
1:03a735b: import java.util.ArrayList;
1:03a735b: import java.util.HashMap;
1:03a735b: import java.util.Iterator;
1:03a735b: import java.util.List;
1:03a735b: import java.util.Map;
1:03a735b: import java.util.Objects;
1:03a735b: import java.util.concurrent.ConcurrentHashMap;
1:03a735b: 
1:03a735b: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:c0de9f1: import org.apache.carbondata.core.datamap.dev.expr.DataMapWrapperSimpleInfo;
1:03a735b: 
1:03a735b: /**
1:03a735b:  * An information collector used for EXPLAIN command, to print out
1:03a735b:  * SQL rewrite and pruning information.
1:03a735b:  * This class is a singleton, not supporting concurrent EXPLAIN command
1:03a735b:  */
1:03a735b: @InterfaceAudience.Internal
1:03a735b: public class ExplainCollector {
1:03a735b: 
1:03a735b:   private static ExplainCollector INSTANCE = null;
1:03a735b: 
1:03a735b:   private List<String> olapDataMapProviders = new ArrayList<>();
1:03a735b:   private List<String> olapDataMapNames = new ArrayList<>();
1:03a735b: 
1:03a735b:   // mapping of thread name to map of table name to pruning info
1:03a735b:   private Map<String, Map<String, TablePruningInfo>> scans = new ConcurrentHashMap<>();
1:03a735b: 
1:03a735b:   private ExplainCollector() {
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static boolean enabled() {
1:03a735b:     return INSTANCE != null;
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void setup() {
1:03a735b:     INSTANCE = new ExplainCollector();
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void remove() {
1:03a735b:     if (enabled()) {
1:03a735b:       INSTANCE = null;
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static ExplainCollector get() {
1:03a735b:     return INSTANCE;
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void recordMatchedOlapDataMap(String dataMapProvider, String dataMapName) {
1:03a735b:     if (enabled()) {
1:03a735b:       Objects.requireNonNull(dataMapProvider);
1:03a735b:       Objects.requireNonNull(dataMapName);
1:03a735b:       ExplainCollector profiler = get();
1:03a735b:       profiler.olapDataMapProviders.add(dataMapProvider);
1:03a735b:       profiler.olapDataMapNames.add(dataMapName);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void addPruningInfo(String tableName) {
1:03a735b:     if (enabled()) {
1:03a735b:       ExplainCollector profiler = get();
1:03a735b:       String threadName = Thread.currentThread().getName();
1:03a735b:       if (!profiler.scans.containsKey(threadName)) {
1:03a735b:         Map<String, TablePruningInfo> map = new HashMap<>();
1:03a735b:         map.put(tableName, new TablePruningInfo());
1:03a735b:         profiler.scans.put(threadName, map);
1:03a735b:       }
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void setFilterStatement(String filterStatement) {
1:03a735b:     if (enabled()) {
1:03a735b:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:03a735b:       scan.setFilterStatement(filterStatement);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:3cbabcd:   public static void setShowPruningInfo(boolean showPruningInfo) {
1:03a735b:     if (enabled()) {
1:03a735b:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:3cbabcd:       scan.setShowPruningInfo(showPruningInfo);
1:3cbabcd:     }
1:3cbabcd:   }
1:3cbabcd: 
1:3cbabcd:   public static void addDefaultDataMapPruningHit(int numBlocklets) {
1:3cbabcd:     if (enabled()) {
1:3cbabcd:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:3cbabcd:       scan.addNumBlockletsAfterDefaultPruning(numBlocklets);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:22958d9:   public static void setDefaultDataMapPruningBlockHit(int numBlocks) {
1:03a735b:     if (enabled()) {
1:03a735b:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:22958d9:       scan.setNumBlocksAfterDefaultPruning(numBlocks);
1:22958d9:     }
1:22958d9:   }
1:22958d9: 
1:22958d9:   public static void recordCGDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
1:22958d9:       int numBlocklets, int numBlocks) {
1:22958d9:     if (enabled()) {
1:22958d9:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:22958d9:       scan.setNumBlockletsAfterCGPruning(dataMapWrapperSimpleInfo, numBlocklets, numBlocks);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:c0de9f1:   public static void recordFGDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
1:22958d9:       int numBlocklets, int numBlocks) {
1:03a735b:     if (enabled()) {
1:03a735b:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:22958d9:       scan.setNumBlockletsAfterFGPruning(dataMapWrapperSimpleInfo, numBlocklets, numBlocks);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static void addTotalBlocklets(int numBlocklets) {
1:03a735b:     if (enabled()) {
1:03a735b:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:03a735b:       scan.addTotalBlocklets(numBlocklets);
1:03a735b:     }
1:03a735b:   }
1:03a735b: 
1:22958d9:   public static void addTotalBlocks(int numBlocks) {
1:22958d9:     if (enabled()) {
1:22958d9:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:22958d9:       scan.addTotalBlocks(numBlocks);
1:22958d9:     }
1:22958d9:   }
1:22958d9: 
1:03a735b:   /**
1:03a735b:    * Return the current TablePruningInfo (It is the last one in the map, since it is in
1:03a735b:    * single thread)
1:03a735b:    */
1:03a735b:   private static TablePruningInfo getCurrentTablePruningInfo() {
1:03a735b:     String threadName = Thread.currentThread().getName();
1:03a735b:     if (!get().scans.containsKey(threadName)) {
1:03a735b:       throw new IllegalStateException();
1:03a735b:     }
1:03a735b: 
1:03a735b:     Iterator<TablePruningInfo> iterator = get().scans.get(threadName).values().iterator();
1:03a735b:     TablePruningInfo output = null;
1:03a735b:     while (iterator.hasNext()) {
1:03a735b:       output = iterator.next();
1:03a735b:     }
1:03a735b:     return output;
1:03a735b:   }
1:03a735b: 
1:03a735b:   public static String getFormatedOutput() {
1:03a735b:     return get().toString();
1:03a735b:   }
1:03a735b: 
1:03a735b:   @Override
1:03a735b:   public String toString() {
1:03a735b:     StringBuilder builder = new StringBuilder();
1:03a735b:     for (int i = 0; i < olapDataMapProviders.size(); i++) {
1:03a735b:       if (i == 0) {
1:03a735b:         builder.append("Query rewrite based on DataMap:").append("\n");
1:03a735b:       }
1:03a735b:       builder.append(" - ").append(olapDataMapNames.get(i)).append(" (")
1:03a735b:           .append(olapDataMapProviders.get(i)).append(")").append("\n");
1:03a735b:     }
1:03a735b:     for (Map.Entry<String, Map<String, TablePruningInfo>> allThreads : scans.entrySet()) {
1:03a735b:       for (Map.Entry<String, TablePruningInfo> entry : allThreads.getValue().entrySet()) {
1:03a735b:         builder.append("Table Scan on ").append(entry.getKey()).append("\n")
1:03a735b:             .append(entry.getValue().toString());
1:03a735b:       }
1:03a735b:     }
1:03a735b:     return builder.toString();
1:03a735b:   }
1:03a735b: 
1:03a735b: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:22958d9
/////////////////////////////////////////////////////////////////////////
1:   public static void setDefaultDataMapPruningBlockHit(int numBlocks) {
1:       scan.setNumBlocksAfterDefaultPruning(numBlocks);
1:     }
1:   }
1: 
1:   public static void recordCGDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
1:       int numBlocklets, int numBlocks) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:       scan.setNumBlockletsAfterCGPruning(dataMapWrapperSimpleInfo, numBlocklets, numBlocks);
1:       int numBlocklets, int numBlocks) {
1:       scan.setNumBlockletsAfterFGPruning(dataMapWrapperSimpleInfo, numBlocklets, numBlocks);
/////////////////////////////////////////////////////////////////////////
1:   public static void addTotalBlocks(int numBlocks) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:       scan.addTotalBlocks(numBlocks);
1:     }
1:   }
1: 
commit:3cbabcd
/////////////////////////////////////////////////////////////////////////
1:   public static void setShowPruningInfo(boolean showPruningInfo) {
1:       scan.setShowPruningInfo(showPruningInfo);
1:     }
1:   }
1: 
1:   public static void addDefaultDataMapPruningHit(int numBlocklets) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:       scan.addNumBlockletsAfterDefaultPruning(numBlocklets);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:c0de9f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.dev.expr.DataMapWrapperSimpleInfo;
/////////////////////////////////////////////////////////////////////////
0:   public static void recordDefaultDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
0:       scan.setNumBlockletsAfterDefaultPruning(dataMapWrapperSimpleInfo, numBlocklets);
0:   public static void recordCGDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
0:       scan.setNumBlockletsAfterCGPruning(dataMapWrapperSimpleInfo, numBlocklets);
1:   public static void recordFGDataMapPruning(DataMapWrapperSimpleInfo dataMapWrapperSimpleInfo,
0:       int numBlocklets) {
0:       scan.setNumBlockletsAfterFGPruning(dataMapWrapperSimpleInfo, numBlocklets);
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.profiler;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Objects;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: 
1: /**
1:  * An information collector used for EXPLAIN command, to print out
1:  * SQL rewrite and pruning information.
1:  * This class is a singleton, not supporting concurrent EXPLAIN command
1:  */
1: @InterfaceAudience.Internal
1: public class ExplainCollector {
1: 
1:   private static ExplainCollector INSTANCE = null;
1: 
1:   private List<String> olapDataMapProviders = new ArrayList<>();
1:   private List<String> olapDataMapNames = new ArrayList<>();
1: 
1:   // mapping of thread name to map of table name to pruning info
1:   private Map<String, Map<String, TablePruningInfo>> scans = new ConcurrentHashMap<>();
1: 
1:   private ExplainCollector() {
1:   }
1: 
1:   public static boolean enabled() {
1:     return INSTANCE != null;
1:   }
1: 
1:   public static void setup() {
1:     INSTANCE = new ExplainCollector();
1:   }
1: 
1:   public static void remove() {
1:     if (enabled()) {
1:       INSTANCE = null;
1:     }
1:   }
1: 
1:   public static ExplainCollector get() {
1:     return INSTANCE;
1:   }
1: 
1:   public static void recordMatchedOlapDataMap(String dataMapProvider, String dataMapName) {
1:     if (enabled()) {
1:       Objects.requireNonNull(dataMapProvider);
1:       Objects.requireNonNull(dataMapName);
1:       ExplainCollector profiler = get();
1:       profiler.olapDataMapProviders.add(dataMapProvider);
1:       profiler.olapDataMapNames.add(dataMapName);
1:     }
1:   }
1: 
1:   public static void addPruningInfo(String tableName) {
1:     if (enabled()) {
1:       ExplainCollector profiler = get();
1:       String threadName = Thread.currentThread().getName();
1:       if (!profiler.scans.containsKey(threadName)) {
1:         Map<String, TablePruningInfo> map = new HashMap<>();
1:         map.put(tableName, new TablePruningInfo());
1:         profiler.scans.put(threadName, map);
1:       }
1:     }
1:   }
1: 
1:   public static void setFilterStatement(String filterStatement) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:       scan.setFilterStatement(filterStatement);
1:     }
1:   }
1: 
0:   public static void recordDefaultDataMapPruning(DataMapSchema dataMapSchema, int numBlocklets) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
0:       scan.setNumBlockletsAfterDefaultPruning(dataMapSchema, numBlocklets);
1:     }
1:   }
1: 
0:   public static void recordCGDataMapPruning(DataMapSchema dataMapSchema, int numBlocklets) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
0:       scan.setNumBlockletsAfterCGPruning(dataMapSchema, numBlocklets);
1:     }
1:   }
1: 
0:   public static void recordFGDataMapPruning(DataMapSchema dataMapSchema, int numBlocklets) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
0:       scan.setNumBlockletsAfterFGPruning(dataMapSchema, numBlocklets);
1:     }
1:   }
1: 
1:   public static void addTotalBlocklets(int numBlocklets) {
1:     if (enabled()) {
1:       TablePruningInfo scan = getCurrentTablePruningInfo();
1:       scan.addTotalBlocklets(numBlocklets);
1:     }
1:   }
1: 
1:   /**
1:    * Return the current TablePruningInfo (It is the last one in the map, since it is in
1:    * single thread)
1:    */
1:   private static TablePruningInfo getCurrentTablePruningInfo() {
1:     String threadName = Thread.currentThread().getName();
1:     if (!get().scans.containsKey(threadName)) {
1:       throw new IllegalStateException();
1:     }
1: 
1:     Iterator<TablePruningInfo> iterator = get().scans.get(threadName).values().iterator();
1:     TablePruningInfo output = null;
1:     while (iterator.hasNext()) {
1:       output = iterator.next();
1:     }
1:     return output;
1:   }
1: 
1:   public static String getFormatedOutput() {
1:     return get().toString();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder builder = new StringBuilder();
1:     for (int i = 0; i < olapDataMapProviders.size(); i++) {
1:       if (i == 0) {
1:         builder.append("Query rewrite based on DataMap:").append("\n");
1:       }
1:       builder.append(" - ").append(olapDataMapNames.get(i)).append(" (")
1:           .append(olapDataMapProviders.get(i)).append(")").append("\n");
1:     }
1:     for (Map.Entry<String, Map<String, TablePruningInfo>> allThreads : scans.entrySet()) {
1:       for (Map.Entry<String, TablePruningInfo> entry : allThreads.getValue().entrySet()) {
1:         builder.append("Table Scan on ").append(entry.getKey()).append("\n")
1:             .append(entry.getValue().toString());
1:       }
1:     }
1:     return builder.toString();
1:   }
1: 
1: }
============================================================================