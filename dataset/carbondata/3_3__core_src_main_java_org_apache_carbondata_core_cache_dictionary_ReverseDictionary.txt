1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * This class will be used for dictionary key and value look up
1:cd6a4ff:  */
1:cd6a4ff: public class ReverseDictionary implements Dictionary {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Object which will hold the information related to this dictionary column
1:cd6a4ff:    */
1:cd6a4ff:   private ColumnReverseDictionaryInfo columnReverseDictionaryInfo;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param columnReverseDictionaryInfo
1:cd6a4ff:    */
1:cd6a4ff:   public ReverseDictionary(ColumnReverseDictionaryInfo columnReverseDictionaryInfo) {
1:cd6a4ff:     this.columnReverseDictionaryInfo = columnReverseDictionaryInfo;
3:cd6a4ff:   }
1:cd6a4ff: 
1:f79b9ea:   /**
1:cd6a4ff:    * This method will find and return the surrogate key for a given dictionary value
1:cd6a4ff:    * Applicable scenario:
1:cd6a4ff:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:cd6a4ff:    * that values have to be looked up in the existing dictionary cache.
1:cd6a4ff:    * 2. Filter scenarios where from value surrogate key has to be found.
1:cd6a4ff:    *
1:cd6a4ff:    * @param value dictionary value
1:05b2654:    * @return if found returns key else INVALID_SURROGATE_KEY
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSurrogateKey(String value) {
1:cd6a4ff:     return columnReverseDictionaryInfo.getSurrogateKey(value);
1:cd6a4ff:   }
1:cd6a4ff: 
1:f79b9ea:   /**
1:cd6a4ff:    * This method will find and return the surrogate key for a given dictionary value
1:cd6a4ff:    * Applicable scenario:
1:cd6a4ff:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:cd6a4ff:    * that values have to be looked up in the existing dictionary cache.
1:cd6a4ff:    * 2. Filter scenarios where from value surrogate key has to be found.
1:cd6a4ff:    *
1:cd6a4ff:    * @param value dictionary value as byte array
1:05b2654:    * @return if found returns key else INVALID_SURROGATE_KEY
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSurrogateKey(byte[] value) {
1:cd6a4ff:     return columnReverseDictionaryInfo.getSurrogateKey(value);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the dictionary value for a given surrogate key.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query final result preparation : While convert the final result which will
1:cd6a4ff:    * be surrogate key back to original dictionary values this method will be used
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey a unique ID for a dictionary value
1:cd6a4ff:    * @return value if found else null
1:cd6a4ff:    */
1:cd6a4ff:   @Override public String getDictionaryValueForKey(int surrogateKey) {
1:cd6a4ff:     return columnReverseDictionaryInfo.getDictionaryValueForKey(surrogateKey);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:72cb415:    * This method will find and return the dictionary value for a given surrogate key in bytes.
1:72cb415:    * Applicable scenarios:
1:72cb415:    * 1. Query final result preparation : While convert the final result which will
1:72cb415:    * be surrogate key back to original dictionary values this method will be used
1:72cb415:    *
1:72cb415:    * @param surrogateKey a unique ID for a dictionary value
1:72cb415:    * @return value if found else null
1:72cb415:    */
1:72cb415:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
1:72cb415:     return columnReverseDictionaryInfo.getDictionaryValueForKeyInBytes(surrogateKey);
1:72cb415:   }
1:72cb415: 
1:72cb415:   /**
1:cd6a4ff:    * This method will find and return the sort index for a given dictionary id.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Used in case of order by queries when data sorting is required
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey a unique ID for a dictionary value
3:cd6a4ff:    * @return if found returns key else 0
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSortedIndex(int surrogateKey) {
1:cd6a4ff:     return columnReverseDictionaryInfo.getSortedIndex(surrogateKey);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the dictionary value from sorted index.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query final result preparation in case of order by queries:
1:cd6a4ff:    * While convert the final result which will
1:cd6a4ff:    * be surrogate key back to original dictionary values this method will be used
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortedIndex sort index of dictionary value
1:cd6a4ff:    * @return value if found else null
1:cd6a4ff:    */
1:cd6a4ff:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:cd6a4ff:     return columnReverseDictionaryInfo.getDictionaryValueFromSortedIndex(sortedIndex);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method return the dictionary chunks wrapper of a column
1:cd6a4ff:    * The wrapper wraps the list<list<bye[]>> and provide the iterator to retrieve the chunks
1:cd6a4ff:    * members.
1:cd6a4ff:    * Applications Scenario:
1:cd6a4ff:    * For preparing the column Sort info while writing the sort index file.
1:cd6a4ff:    *
1:f79b9ea:    * @return
1:f79b9ea:    */
1:cd6a4ff:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
1:cd6a4ff:     return columnReverseDictionaryInfo.getDictionaryChunks();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will release the objects and set default value for primitive types
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void clear() {
1:f79b9ea:     if (null != columnReverseDictionaryInfo) {
1:cd6a4ff:       columnReverseDictionaryInfo.clear();
1:cd6a4ff:       columnReverseDictionaryInfo = null;
1:f79b9ea:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:f79b9ea:    * This method return the access count associated with the dictionary.
1:f79b9ea:    * @return
1:f79b9ea:    */
1:f79b9ea:   @Override public int getAccessCount() {
1:f79b9ea:     if (null != columnReverseDictionaryInfo) {
1:f79b9ea:       return columnReverseDictionaryInfo.getAccessCount();
1:f79b9ea:     }
1:f79b9ea:     return 0;
1:f79b9ea:   }
1:f79b9ea: }
============================================================================
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method return the access count associated with the dictionary.
1:    * @return
1:    */
1:   @Override public int getAccessCount() {
1:     if (null != columnReverseDictionaryInfo) {
1:       return columnReverseDictionaryInfo.getAccessCount();
1:     }
1:     return 0;
1:   }
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * This method return the access count associated with the dictionary.
1:    * @return
1:    */
0:   @Override public int getAccessCount() {
1:     if (null != columnReverseDictionaryInfo) {
0:       return columnReverseDictionaryInfo.getAccessCount();
1:     }
0:     return 0;
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1:    * This method will find and return the dictionary value for a given surrogate key in bytes.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation : While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
1:     return columnReverseDictionaryInfo.getDictionaryValueForKeyInBytes(surrogateKey);
1:   }
1: 
1:   /**
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:    * @return if found returns key else INVALID_SURROGATE_KEY
/////////////////////////////////////////////////////////////////////////
1:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: /**
1:  * This class will be used for dictionary key and value look up
1:  */
1: public class ReverseDictionary implements Dictionary {
1: 
1:   /**
1:    * Object which will hold the information related to this dictionary column
1:    */
1:   private ColumnReverseDictionaryInfo columnReverseDictionaryInfo;
1: 
1:   /**
1:    * @param columnReverseDictionaryInfo
1:    */
1:   public ReverseDictionary(ColumnReverseDictionaryInfo columnReverseDictionaryInfo) {
1:     this.columnReverseDictionaryInfo = columnReverseDictionaryInfo;
1:   }
1: 
1:   /**
1:    * This method will find and return the surrogate key for a given dictionary value
1:    * Applicable scenario:
1:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:    * that values have to be looked up in the existing dictionary cache.
1:    * 2. Filter scenarios where from value surrogate key has to be found.
1:    *
1:    * @param value dictionary value
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSurrogateKey(String value) {
1:     return columnReverseDictionaryInfo.getSurrogateKey(value);
1:   }
1: 
1:   /**
1:    * This method will find and return the surrogate key for a given dictionary value
1:    * Applicable scenario:
1:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:    * that values have to be looked up in the existing dictionary cache.
1:    * 2. Filter scenarios where from value surrogate key has to be found.
1:    *
1:    * @param value dictionary value as byte array
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSurrogateKey(byte[] value) {
1:     return columnReverseDictionaryInfo.getSurrogateKey(value);
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value for a given surrogate key.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation : While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public String getDictionaryValueForKey(int surrogateKey) {
1:     return columnReverseDictionaryInfo.getDictionaryValueForKey(surrogateKey);
1:   }
1: 
1:   /**
1:    * This method will find and return the sort index for a given dictionary id.
1:    * Applicable scenarios:
1:    * 1. Used in case of order by queries when data sorting is required
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSortedIndex(int surrogateKey) {
1:     return columnReverseDictionaryInfo.getSortedIndex(surrogateKey);
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value from sorted index.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation in case of order by queries:
1:    * While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param sortedIndex sort index of dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:     return columnReverseDictionaryInfo.getDictionaryValueFromSortedIndex(sortedIndex);
1:   }
1: 
1:   /**
1:    * The method return the dictionary chunks wrapper of a column
1:    * The wrapper wraps the list<list<bye[]>> and provide the iterator to retrieve the chunks
1:    * members.
1:    * Applications Scenario:
1:    * For preparing the column Sort info while writing the sort index file.
1:    *
0:    * @return
1:    */
1:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
1:     return columnReverseDictionaryInfo.getDictionaryChunks();
1:   }
1: 
1:   /**
1:    * This method will release the objects and set default value for primitive types
1:    */
1:   @Override public void clear() {
0:     if (null != columnReverseDictionaryInfo) {
1:       columnReverseDictionaryInfo.clear();
1:       columnReverseDictionaryInfo = null;
1:     }
1:   }
1: 
1: }
commit:72cb415
/////////////////////////////////////////////////////////////////////////
0:    * This method will find and return the dictionary value for a given surrogate key in bytes.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation : While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
0:     return columnReverseDictionaryInfo.getDictionaryValueForKeyInBytes(surrogateKey);
0:   }
0: 
0:   /**
commit:05b2654
/////////////////////////////////////////////////////////////////////////
0:    * @return if found returns key else INVALID_SURROGATE_KEY
/////////////////////////////////////////////////////////////////////////
0:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: /**
0:  * This class will be used for dictionary key and value look up
0:  */
0: public class ReverseDictionary implements Dictionary {
0: 
0:   /**
0:    * Object which will hold the information related to this dictionary column
0:    */
0:   private ColumnReverseDictionaryInfo columnReverseDictionaryInfo;
0: 
0:   /**
0:    * @param columnReverseDictionaryInfo
0:    */
0:   public ReverseDictionary(ColumnReverseDictionaryInfo columnReverseDictionaryInfo) {
0:     this.columnReverseDictionaryInfo = columnReverseDictionaryInfo;
0:   }
0: 
0:   /**
0:    * This method will find and return the surrogate key for a given dictionary value
0:    * Applicable scenario:
0:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
0:    * that values have to be looked up in the existing dictionary cache.
0:    * 2. Filter scenarios where from value surrogate key has to be found.
0:    *
0:    * @param value dictionary value
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSurrogateKey(String value) {
0:     return columnReverseDictionaryInfo.getSurrogateKey(value);
0:   }
0: 
0:   /**
0:    * This method will find and return the surrogate key for a given dictionary value
0:    * Applicable scenario:
0:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
0:    * that values have to be looked up in the existing dictionary cache.
0:    * 2. Filter scenarios where from value surrogate key has to be found.
0:    *
0:    * @param value dictionary value as byte array
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSurrogateKey(byte[] value) {
0:     return columnReverseDictionaryInfo.getSurrogateKey(value);
0:   }
0: 
0:   /**
0:    * This method will find and return the dictionary value for a given surrogate key.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation : While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public String getDictionaryValueForKey(int surrogateKey) {
0:     return columnReverseDictionaryInfo.getDictionaryValueForKey(surrogateKey);
0:   }
0: 
0:   /**
0:    * This method will find and return the sort index for a given dictionary id.
0:    * Applicable scenarios:
0:    * 1. Used in case of order by queries when data sorting is required
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSortedIndex(int surrogateKey) {
0:     return columnReverseDictionaryInfo.getSortedIndex(surrogateKey);
0:   }
0: 
0:   /**
0:    * This method will find and return the dictionary value from sorted index.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation in case of order by queries:
0:    * While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param sortedIndex sort index of dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
0:     return columnReverseDictionaryInfo.getDictionaryValueFromSortedIndex(sortedIndex);
0:   }
0: 
0:   /**
0:    * The method return the dictionary chunks wrapper of a column
0:    * The wrapper wraps the list<list<bye[]>> and provide the iterator to retrieve the chunks
0:    * members.
0:    * Applications Scenario:
0:    * For preparing the column Sort info while writing the sort index file.
0:    *
0:    * @return
0:    */
0:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
0:     return columnReverseDictionaryInfo.getDictionaryChunks();
0:   }
0: 
0:   /**
0:    * This method will release the objects and set default value for primitive types
0:    */
0:   @Override public void clear() {
0:     if (null != columnReverseDictionaryInfo) {
0:       columnReverseDictionaryInfo.clear();
0:       columnReverseDictionaryInfo = null;
0:     }
0:   }
0: 
0: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
============================================================================