1:8a5ed81: /*
1:8a5ed81:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8a5ed81:  * contributor license agreements.  See the NOTICE file distributed with
1:8a5ed81:  * this work for additional information regarding copyright ownership.
1:8a5ed81:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8a5ed81:  * (the "License"); you may not use this file except in compliance with
1:8a5ed81:  * the License.  You may obtain a copy of the License at
1:8a5ed81:  *
1:8a5ed81:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8a5ed81:  *
1:8a5ed81:  * Unless required by applicable law or agreed to in writing, software
1:8a5ed81:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a5ed81:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a5ed81:  * See the License for the specific language governing permissions and
1:8a5ed81:  * limitations under the License.
1:8a5ed81:  */
1:8a5ed81: package org.apache.carbondata.core.scan.executor.infos;
1:8a5ed81: 
1:8a5ed81: import java.util.Arrays;
1:8a5ed81: 
1:8a5ed81: import org.apache.carbondata.core.mutate.CarbonUpdateUtil;
1:8a5ed81: 
1:8a5ed81: /**
1:8a5ed81:  * class to hold information about delete delta files
1:8a5ed81:  */
1:8a5ed81: public class DeleteDeltaInfo {
1:8a5ed81: 
1:8a5ed81:   /**
1:8a5ed81:    * delete delta files
1:8a5ed81:    */
1:8a5ed81:   private String[] deleteDeltaFile;
1:8a5ed81: 
1:8a5ed81:   /**
1:8a5ed81:    * latest delete delta file timestamp
1:8a5ed81:    */
1:8a5ed81:   private long latestDeleteDeltaFileTimestamp;
1:8a5ed81: 
1:8a5ed81:   public DeleteDeltaInfo(String[] deleteDeltaFile) {
1:8a5ed81:     this.deleteDeltaFile = deleteDeltaFile;
1:8a5ed81:     this.latestDeleteDeltaFileTimestamp =
1:8a5ed81:         CarbonUpdateUtil.getLatestDeleteDeltaTimestamp(deleteDeltaFile);
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   public String[] getDeleteDeltaFile() {
1:8a5ed81:     return deleteDeltaFile;
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   public long getLatestDeleteDeltaFileTimestamp() {
1:8a5ed81:     return latestDeleteDeltaFileTimestamp;
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   @Override public int hashCode() {
1:8a5ed81:     final int prime = 31;
1:8a5ed81:     int result = 1;
1:8a5ed81:     result = prime * result + Arrays.hashCode(deleteDeltaFile);
1:8a5ed81:     result =
1:8a5ed81:         prime * result + (int) (latestDeleteDeltaFileTimestamp ^ (latestDeleteDeltaFileTimestamp
1:8a5ed81:             >>> 32));
1:8a5ed81:     return result;
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81:   @Override public boolean equals(Object obj) {
1:8a5ed81:     if (this == obj) {
1:8a5ed81:       return true;
1:8a5ed81:     }
1:8a5ed81:     if (obj == null) {
1:8a5ed81:       return false;
1:8a5ed81:     }
1:8a5ed81:     if (getClass() != obj.getClass()) {
1:8a5ed81:       return false;
1:8a5ed81:     }
1:8a5ed81:     DeleteDeltaInfo other = (DeleteDeltaInfo) obj;
1:8a5ed81:     if (!Arrays.equals(deleteDeltaFile, other.deleteDeltaFile)) {
1:8a5ed81:       return false;
1:8a5ed81:     }
1:8a5ed81:     if (latestDeleteDeltaFileTimestamp != other.latestDeleteDeltaFileTimestamp) {
1:8a5ed81:       return false;
1:8a5ed81:     }
1:8a5ed81:     return true;
1:8a5ed81:   }
1:8a5ed81: 
1:8a5ed81: }
============================================================================
author:kumarvishal
-------------------------------------------------------------------------------
commit:8a5ed81
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.executor.infos;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.mutate.CarbonUpdateUtil;
1: 
1: /**
1:  * class to hold information about delete delta files
1:  */
1: public class DeleteDeltaInfo {
1: 
1:   /**
1:    * delete delta files
1:    */
1:   private String[] deleteDeltaFile;
1: 
1:   /**
1:    * latest delete delta file timestamp
1:    */
1:   private long latestDeleteDeltaFileTimestamp;
1: 
1:   public DeleteDeltaInfo(String[] deleteDeltaFile) {
1:     this.deleteDeltaFile = deleteDeltaFile;
1:     this.latestDeleteDeltaFileTimestamp =
1:         CarbonUpdateUtil.getLatestDeleteDeltaTimestamp(deleteDeltaFile);
1:   }
1: 
1:   public String[] getDeleteDeltaFile() {
1:     return deleteDeltaFile;
1:   }
1: 
1:   public long getLatestDeleteDeltaFileTimestamp() {
1:     return latestDeleteDeltaFileTimestamp;
1:   }
1: 
1:   @Override public int hashCode() {
1:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + Arrays.hashCode(deleteDeltaFile);
1:     result =
1:         prime * result + (int) (latestDeleteDeltaFileTimestamp ^ (latestDeleteDeltaFileTimestamp
1:             >>> 32));
1:     return result;
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1:     if (obj == null) {
1:       return false;
1:     }
1:     if (getClass() != obj.getClass()) {
1:       return false;
1:     }
1:     DeleteDeltaInfo other = (DeleteDeltaInfo) obj;
1:     if (!Arrays.equals(deleteDeltaFile, other.deleteDeltaFile)) {
1:       return false;
1:     }
1:     if (latestDeleteDeltaFileTimestamp != other.latestDeleteDeltaFileTimestamp) {
1:       return false;
1:     }
1:     return true;
1:   }
1: 
1: }
============================================================================