1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:99582a7:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
2:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
1:99582a7: 
1:cd6a4ff: package org.apache.carbondata.core.cache;
1:99582a7: 
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.ForwardDictionaryCache;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.ReverseDictionaryCache;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
3:cd6a4ff: 
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: import static org.junit.Assert.assertFalse;
1:cd6a4ff: import static org.junit.Assert.assertTrue;
1:cd6a4ff: 
1:99582a7: /**
1:cd6a4ff:  * Test class to test dictionary cache functionality
1:99582a7:  */
1:cd6a4ff: public class CacheProviderTest {
1:cd6a4ff: 
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     // enable lru cache by setting cache size
1:cd6a4ff:     CarbonProperties.getInstance()
1:b6ab4ef:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:99582a7:     // enable lru cache by setting cache size
1:99582a7:     CarbonProperties.getInstance()
1:99582a7:         .addProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE, "20");
2:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void getInstance() throws Exception {
1:99582a7:     // get cache provider instance
1:99582a7:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:cd6a4ff:     // assert for cache provider instance
1:cd6a4ff:     assertTrue(cacheProvider instanceof CacheProvider);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void createCache() throws Exception {
2:cd6a4ff:     // get cache provider instance
2:cd6a4ff:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:cd6a4ff:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> dictionaryCache =
1:1155d4d:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY);
1:cd6a4ff:     // assert that dictionary cache is an instance of Forward dictionary cache
1:cd6a4ff:     assertTrue(dictionaryCache instanceof ForwardDictionaryCache);
1:cd6a4ff:     assertFalse(dictionaryCache instanceof ReverseDictionaryCache);
1:cd6a4ff:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> reverseDictionaryCache =
1:1155d4d:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
1:cd6a4ff:     // assert that dictionary cache is an instance of Reverse dictionary cache
1:cd6a4ff:     assertTrue(reverseDictionaryCache instanceof ReverseDictionaryCache);
1:cd6a4ff:     assertFalse(reverseDictionaryCache instanceof ForwardDictionaryCache);
1:214d9eb:     cacheProvider.dropAllCache();
1:99582a7:   }
1:cd6a4ff: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:6178835
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:214d9eb
/////////////////////////////////////////////////////////////////////////
1:     cacheProvider.dropAllCache();
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY);
1:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY);
/////////////////////////////////////////////////////////////////////////
0:         cacheProvider.createCache(CacheType.DRIVER_BTREE);
/////////////////////////////////////////////////////////////////////////
0:         cacheProvider.createCache(CacheType.EXECUTOR_BTREE);
commit:99582a7
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.lang.reflect.Field;
1: 
0: import org.apache.carbondata.core.datastore.BlockIndexStore;
0: import org.apache.carbondata.core.datastore.SegmentTaskIndexStore;
0: import org.apache.carbondata.core.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.datastore.block.TableBlockUniqueIdentifier;
0: import org.apache.avro.Schema;
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE, "20");
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * to test the driver and executor lru memory configuration
1:    *
0:    * @throws IOException
0:    * @throws NoSuchFieldException
0:    * @throws IllegalAccessException
1:    */
0:   @Test public void driverExecutorCacheConfTest()
0:       throws IOException, NoSuchFieldException, IllegalAccessException {
1:     // get cache provider instance
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
0:     CarbonProperties.getInstance().addProperty(CarbonCommonConstants.IS_DRIVER_INSTANCE, "true");
0:     Cache<TableSegmentUniqueIdentifier, SegmentTaskIndexStore> driverCache =
0:         cacheProvider.createCache(CacheType.DRIVER_BTREE, "carbonStore");
0:     Field carbonLRUCacheField = SegmentTaskIndexStore.class.getDeclaredField("lruCache");
0:     carbonLRUCacheField.setAccessible(true);
0:     CarbonLRUCache carbonLRUCache = (CarbonLRUCache) carbonLRUCacheField.get(driverCache);
0:     Field lruCacheMemorySizeField = CarbonLRUCache.class.getDeclaredField("lruCacheMemorySize");
0:     lruCacheMemorySizeField.setAccessible(true);
0:     long lruCacheMemorySize = (long) lruCacheMemorySizeField.get(carbonLRUCache);
0:     String driverCacheSize = CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE);
0:     assertEquals(1024 * 1024 * Integer.parseInt(driverCacheSize), lruCacheMemorySize);
0:     // drop cache
0:     cacheProvider.dropAllCache();
0:     // validation test for the executor memory.
0:     CarbonProperties.getInstance().addProperty(CarbonCommonConstants.IS_DRIVER_INSTANCE, "false");
0:     Cache<TableBlockUniqueIdentifier, BlockIndexStore> executorCache =
0:         cacheProvider.createCache(CacheType.EXECUTOR_BTREE, "carbonStore");
0:     carbonLRUCacheField = BlockIndexStore.class.getSuperclass().getDeclaredField("lruCache");
0:     carbonLRUCacheField.setAccessible(true);
0:     carbonLRUCache = (CarbonLRUCache) carbonLRUCacheField.get(executorCache);
0:     lruCacheMemorySizeField = CarbonLRUCache.class.getDeclaredField("lruCacheMemorySize");
0:     lruCacheMemorySizeField.setAccessible(true);
0:     lruCacheMemorySize = (long) lruCacheMemorySizeField.get(carbonLRUCache);
0:     String executorCacheSize = CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE);
0:     assertEquals(1024 * 1024 * Integer.parseInt(executorCacheSize), lruCacheMemorySize);
1:   }
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
author:ravipesala
-------------------------------------------------------------------------------
commit:a49f751
/////////////////////////////////////////////////////////////////////////
0:     cacheProvider.dropAllCache();
/////////////////////////////////////////////////////////////////////////
0:     cacheProvider.dropAllCache();
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1: import org.apache.carbondata.core.cache.dictionary.ForwardDictionaryCache;
1: import org.apache.carbondata.core.cache.dictionary.ReverseDictionaryCache;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
0: /**
1:  * Test class to test dictionary cache functionality
1:  */
1: public class CacheProviderTest {
1: 
1:   @Before public void setUp() throws Exception {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
0:         .addProperty(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE, "10");
1:   }
1: 
1:   @Test public void getInstance() throws Exception {
1:     // get cache provider instance
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:     // assert for cache provider instance
1:     assertTrue(cacheProvider instanceof CacheProvider);
1:   }
1: 
1:   @Test public void createCache() throws Exception {
1:     // get cache provider instance
1:     CacheProvider cacheProvider = CacheProvider.getInstance();
1:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> dictionaryCache =
0:         cacheProvider.createCache(CacheType.FORWARD_DICTIONARY, "carbonStore");
1:     // assert that dictionary cache is an instance of Forward dictionary cache
1:     assertTrue(dictionaryCache instanceof ForwardDictionaryCache);
1:     assertFalse(dictionaryCache instanceof ReverseDictionaryCache);
1:     Cache<DictionaryColumnUniqueIdentifier, Dictionary> reverseDictionaryCache =
0:         cacheProvider.createCache(CacheType.REVERSE_DICTIONARY, "carbonStore");
1:     // assert that dictionary cache is an instance of Reverse dictionary cache
1:     assertTrue(reverseDictionaryCache instanceof ReverseDictionaryCache);
1:     assertFalse(reverseDictionaryCache instanceof ForwardDictionaryCache);
1:   }
1: }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================