1:f1f9348: /*
1:f1f9348:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f9348:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f9348:  * this work for additional information regarding copyright ownership.
1:f1f9348:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f9348:  * (the "License"); you may not use this file except in compliance with
1:f1f9348:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:f1f9348:  * Unless required by applicable law or agreed to in writing, software
1:f1f9348:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f9348:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f9348:  * See the License for the specific language governing permissions and
1:f1f9348:  * limitations under the License.
1:f1f9348:  */
2:f1f9348: 
1:f1f9348: package org.apache.carbondata.core.memory;
1:f1f9348: 
1:f1f9348: /**
1:f1f9348:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:f1f9348:  * A simple {@link MemoryAllocator} that uses {@code Unsafe} to allocate off-heap memory.
1:f1f9348:  */
1:f1f9348: public class UnsafeMemoryAllocator implements MemoryAllocator {
1:f1f9348: 
1:f1f9348:   @Override
1:f1f9348:   public MemoryBlock allocate(long size) throws OutOfMemoryError {
1:500654e:     long address = CarbonUnsafe.getUnsafe().allocateMemory(size);
1:e240855:     // initializing memory with zero
1:500654e:     CarbonUnsafe.getUnsafe().setMemory(null, address, size, (byte) 0);
1:f1f9348:     return new MemoryBlock(null, address, size);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override
1:f1f9348:   public void free(MemoryBlock memory) {
1:f1f9348:     assert (memory.obj == null) :
1:f1f9348:       "baseObject not null; are you trying to use the off-heap allocator to free on-heap memory?";
1:500654e:     CarbonUnsafe.getUnsafe().freeMemory(memory.offset);
1:2892326:     memory.setFreedStatus(true);
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:2892326
/////////////////////////////////////////////////////////////////////////
1:     memory.setFreedStatus(true);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:     long address = CarbonUnsafe.getUnsafe().allocateMemory(size);
1:     CarbonUnsafe.getUnsafe().setMemory(null, address, size, (byte) 0);
/////////////////////////////////////////////////////////////////////////
1:     CarbonUnsafe.getUnsafe().freeMemory(memory.offset);
author:kumarvishal
-------------------------------------------------------------------------------
commit:e240855
/////////////////////////////////////////////////////////////////////////
1:     // initializing memory with zero
0:     CarbonUnsafe.unsafe.setMemory(null, address, size, (byte) 0);
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.memory;
1: 
0: import org.apache.carbondata.core.unsafe.CarbonUnsafe;
1: 
1: /**
1:  * Code ported from Apache Spark {org.apache.spark.unsafe.memory} package
1:  * A simple {@link MemoryAllocator} that uses {@code Unsafe} to allocate off-heap memory.
1:  */
1: public class UnsafeMemoryAllocator implements MemoryAllocator {
1: 
1:   @Override
1:   public MemoryBlock allocate(long size) throws OutOfMemoryError {
0:     long address = CarbonUnsafe.unsafe.allocateMemory(size);
1:     return new MemoryBlock(null, address, size);
1:   }
1: 
1:   @Override
1:   public void free(MemoryBlock memory) {
1:     assert (memory.obj == null) :
1:       "baseObject not null; are you trying to use the off-heap allocator to free on-heap memory?";
0:     CarbonUnsafe.unsafe.freeMemory(memory.offset);
1:   }
1: }
============================================================================