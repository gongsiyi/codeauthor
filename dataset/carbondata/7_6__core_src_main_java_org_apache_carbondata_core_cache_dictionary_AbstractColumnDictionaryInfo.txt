1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
6:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.nio.charset.Charset;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.concurrent.CopyOnWriteArrayList;
1:cd6a4ff: import java.util.concurrent.atomic.AtomicInteger;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:7e0584e: import org.apache.carbondata.core.util.CarbonUtil;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * class that implements cacheable interface and methods specific to column dictionary
1:377dee9:  */
1:cd6a4ff: public abstract class AbstractColumnDictionaryInfo implements DictionaryInfo {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * list that will hold all the dictionary chunks for one column
1:cd6a4ff:    */
1:cd6a4ff:   protected List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * minimum value of surrogate key, dictionary value key will start from count 1
1:cd6a4ff:    */
1:cd6a4ff:   protected static final int MINIMUM_SURROGATE_KEY = 1;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * atomic integer to maintain the access count for a column access
1:cd6a4ff:    */
1:cd6a4ff:   protected AtomicInteger accessCount = new AtomicInteger();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * file timestamp
1:cd6a4ff:    */
1:cd6a4ff:   protected long fileTimeStamp;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * offset till where file is read
1:cd6a4ff:    */
1:cd6a4ff:   protected long offsetTillFileIsRead;
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * memory size of this object.We store it as calculation everytime is costly
1:377dee9:    */
1:377dee9:   protected long memorySize;
1:377dee9: 
1:377dee9:   /**
1:cd6a4ff:    * length of dictionary metadata file
1:cd6a4ff:    */
1:cd6a4ff:   private long dictionaryMetaFileLength;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:7e0584e:    * size of one dictionary bucket
1:cd6a4ff:    */
1:7e0584e:   private final int dictionaryOneChunkSize = CarbonUtil.getDictionaryChunkSize();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the timestamp of file based on which decision
1:cd6a4ff:    * the decision will be taken whether to read that file or not
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public long getFileTimeStamp() {
1:cd6a4ff:     return fileTimeStamp;
1:377dee9:   }
1:54dcd8d: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the access count for a column based on which decision will be taken
1:cd6a4ff:    * whether to keep the object in memory
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getAccessCount() {
1:cd6a4ff:     return accessCount.get();
5:cd6a4ff:   }
1:54dcd8d: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the memory size of a column
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public long getMemorySize() {
1:377dee9:     return memorySize;
1:377dee9:   }
1:377dee9: 
1:377dee9:   @Override public void setMemorySize(long memorySize) {
1:377dee9:     this.memorySize = memorySize;
1:cd6a4ff:   }
1:377dee9: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will increment the access count for a column by 1
1:cd6a4ff:    * whenever a column is getting used in query or incremental data load
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void incrementAccessCount() {
1:cd6a4ff:     accessCount.incrementAndGet();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:7e0584e:    * This method will return the size of of last dictionary chunk so that only that many
1:7e0584e:    * values are read from the dictionary reader
1:cd6a4ff:    *
1:7e0584e:    * @return size of last dictionary chunk
1:cd6a4ff:    */
1:7e0584e:   @Override public int getSizeOfLastDictionaryChunk() {
1:cd6a4ff:     return 0;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will decrement the access count for a column by 1
1:cd6a4ff:    * whenever a column usage is complete
1:cd6a4ff:    */
1:cd6a4ff:   private void decrementAccessCount() {
1:cd6a4ff:     if (accessCount.get() > 0) {
1:cd6a4ff:       accessCount.decrementAndGet();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will update the end offset of file everytime a file is read
1:cd6a4ff:    *
1:cd6a4ff:    * @param offsetTillFileIsRead
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void setOffsetTillFileIsRead(long offsetTillFileIsRead) {
1:cd6a4ff:     this.offsetTillFileIsRead = offsetTillFileIsRead;
1:377dee9:   }
1:377dee9: 
1:377dee9:   @Override public long getOffsetTillFileIsRead() {
1:377dee9:     return offsetTillFileIsRead;
1:377dee9:   }
1:377dee9: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will update the timestamp of a file if a file is modified
1:cd6a4ff:    * like in case of incremental load
1:cd6a4ff:    *
1:cd6a4ff:    * @param fileTimeStamp
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void setFileTimeStamp(long fileTimeStamp) {
1:cd6a4ff:     this.fileTimeStamp = fileTimeStamp;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method return the list of dictionary chunks of a column
1:cd6a4ff:    * Applications Scenario.
1:cd6a4ff:    * For preparing the column Sort info while writing the sort index file.
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
1:eaadc88:     return new DictionaryChunksWrapper(dictionaryChunks);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will release the objects and set default value for primitive types
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void clear() {
1:cd6a4ff:     decrementAccessCount();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the sort index for a given dictionary id.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Used in case of order by queries when data sorting is required
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey a unique ID for a dictionary value
2:cd6a4ff:    * @return if found returns key else 0
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSortedIndex(int surrogateKey) {
1:cd6a4ff:     return 0;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary metadata file length which will be set whenever we reload dictionary
1:cd6a4ff:    * data from disk
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryMetaFileLength length of dictionary metadata file
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void setDictionaryMetaFileLength(long dictionaryMetaFileLength) {
1:cd6a4ff:     this.dictionaryMetaFileLength = dictionaryMetaFileLength;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Dictionary meta file offset which will be read to check whether length of dictionary
1:cd6a4ff:    * meta file has been modified
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public long getDictionaryMetaFileLength() {
1:cd6a4ff:     return dictionaryMetaFileLength;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the dictionary value from sorted index.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query final result preparation in case of order by queries:
1:cd6a4ff:    * While convert the final result which will
1:cd6a4ff:    * be surrogate key back to original dictionary values this method will be used
1:cd6a4ff:    *
1:cd6a4ff:    * @param sortedIndex sort index of dictionary value
1:cd6a4ff:    * @return value if found else null
1:cd6a4ff:    */
1:cd6a4ff:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:cd6a4ff:     return null;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the dictionary value for a given surrogate key.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query final result preparation : While convert the final result which will
1:cd6a4ff:    * be surrogate key back to original dictionary values this method will be used
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey a unique ID for a dictionary value
1:cd6a4ff:    * @return value if found else null
1:cd6a4ff:    */
1:cd6a4ff:   @Override public String getDictionaryValueForKey(int surrogateKey) {
1:cd6a4ff:     String dictionaryValue = null;
1:cd6a4ff:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
1:cd6a4ff:       return dictionaryValue;
1:cd6a4ff:     }
1:cd6a4ff:     byte[] dictionaryValueInBytes = getDictionaryBytesFromSurrogate(surrogateKey);
1:cd6a4ff:     if (null != dictionaryValueInBytes) {
1:cd6a4ff:       dictionaryValue = new String(dictionaryValueInBytes,
1:72cb415:           CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryValue;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:72cb415:    * This method will find and return the dictionary value for a given surrogate key.
1:72cb415:    * Applicable scenarios:
1:72cb415:    * 1. Query final result preparation : While convert the final result which will
1:72cb415:    * be surrogate key back to original dictionary values this method will be used
1:72cb415:    *
1:72cb415:    * @param surrogateKey a unique ID for a dictionary value
1:72cb415:    * @return value if found else null
1:72cb415:    */
1:72cb415:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
1:72cb415:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
1:72cb415:       return null;
1:72cb415:     }
1:72cb415:     return getDictionaryBytesFromSurrogate(surrogateKey);
1:72cb415:   }
1:72cb415: 
1:72cb415:   /**
1:cd6a4ff:    * This method will find and return the dictionary value as byte array for a
1:cd6a4ff:    * given surrogate key
1:cd6a4ff:    *
1:cd6a4ff:    * @param surrogateKey
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   protected byte[] getDictionaryBytesFromSurrogate(int surrogateKey) {
1:cd6a4ff:     byte[] dictionaryValueInBytes = null;
1:7e0584e:     // surrogate key starts from 1 and list index will start from 0, so lets say if surrogate
1:7e0584e:     // key is 10 then value will present at index 9 of the dictionary chunk list
1:7e0584e:     int actualSurrogateIndex = surrogateKey - 1;
1:7e0584e:     // lets say dictionaryOneChunkSize = 10, surrogateKey = 10, so bucket index will
1:7e0584e:     // be 0 and dictionary chunk index will be 9 to get the value
1:7e0584e:     int dictionaryBucketIndex = actualSurrogateIndex / dictionaryOneChunkSize;
1:7e0584e:     if (dictionaryChunks.size() > dictionaryBucketIndex) {
1:7e0584e:       int indexInsideBucket = actualSurrogateIndex % dictionaryOneChunkSize;
1:7e0584e:       List<byte[]> dictionaryBucketContainingSurrogateValue =
1:7e0584e:           dictionaryChunks.get(dictionaryBucketIndex);
1:7e0584e:       if (dictionaryBucketContainingSurrogateValue.size() > indexInsideBucket) {
1:7e0584e:         dictionaryValueInBytes = dictionaryBucketContainingSurrogateValue.get(indexInsideBucket);
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryValueInBytes;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will find and return the surrogate key for a given dictionary value
1:cd6a4ff:    * Applicable scenario:
1:cd6a4ff:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:cd6a4ff:    * that values have to be looked up in the existing dictionary cache.
1:cd6a4ff:    * 2. Filter scenarios where from value surrogate key has to be found.
1:cd6a4ff:    *
1:cd6a4ff:    * @param value dictionary value
1:05b2654:    * @return if found returns key else INVALID_SURROGATE_KEY
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int getSurrogateKey(String value) {
1:cd6a4ff:     byte[] keyData = value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:cd6a4ff:     return getSurrogateKey(keyData);
1:54dcd8d:   }
1:54dcd8d: 
1:54dcd8d:   @Override public void invalidate() {
1:54dcd8d: 
1:54dcd8d:   }
1:cd6a4ff: }
1:cd6a4ff: 
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public void invalidate() {
1: 
1:   }
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override public void invalidate() {
1: 
1:   }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1:    * memory size of this object.We store it as calculation everytime is costly
1:    */
1:   protected long memorySize;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:     return memorySize;
1:   }
1: 
1:   @Override public void setMemorySize(long memorySize) {
1:     this.memorySize = memorySize;
/////////////////////////////////////////////////////////////////////////
1:   @Override public long getOffsetTillFileIsRead() {
1:     return offsetTillFileIsRead;
1:   }
1: 
commit:377dee9
/////////////////////////////////////////////////////////////////////////
0:    * memory size of this object.We store it as calculation everytime is costly
1:    */
0:   protected long memorySize;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
0:     return memorySize;
1:   }
1: 
0:   @Override public void setMemorySize(long memorySize) {
0:     this.memorySize = memorySize;
/////////////////////////////////////////////////////////////////////////
0:   @Override public long getOffsetTillFileIsRead() {
0:     return offsetTillFileIsRead;
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:72cb415
/////////////////////////////////////////////////////////////////////////
1:           CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
1:    * This method will find and return the dictionary value for a given surrogate key.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation : While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
1:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
1:       return null;
1:     }
1:     return getDictionaryBytesFromSurrogate(surrogateKey);
1:   }
1: 
1:   /**
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.nio.charset.Charset;
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: /**
1:  * class that implements cacheable interface and methods specific to column dictionary
1:  */
1: public abstract class AbstractColumnDictionaryInfo implements DictionaryInfo {
1: 
1:   /**
1:    * list that will hold all the dictionary chunks for one column
1:    */
1:   protected List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
1: 
1:   /**
1:    * minimum value of surrogate key, dictionary value key will start from count 1
1:    */
1:   protected static final int MINIMUM_SURROGATE_KEY = 1;
1: 
1:   /**
1:    * atomic integer to maintain the access count for a column access
1:    */
1:   protected AtomicInteger accessCount = new AtomicInteger();
1: 
1:   /**
1:    * file timestamp
1:    */
1:   protected long fileTimeStamp;
1: 
1:   /**
1:    * offset till where file is read
1:    */
1:   protected long offsetTillFileIsRead;
1: 
1:   /**
1:    * length of dictionary metadata file
1:    */
1:   private long dictionaryMetaFileLength;
1: 
1:   /**
1:    * This method will return the timestamp of file based on which decision
1:    * the decision will be taken whether to read that file or not
1:    *
1:    * @return
1:    */
1:   @Override public long getFileTimeStamp() {
1:     return fileTimeStamp;
1:   }
1: 
1:   /**
1:    * This method will return the access count for a column based on which decision will be taken
1:    * whether to keep the object in memory
1:    *
1:    * @return
1:    */
1:   @Override public int getAccessCount() {
1:     return accessCount.get();
1:   }
1: 
1:   /**
1:    * This method will return the memory size of a column
1:    *
1:    * @return
1:    */
1:   @Override public long getMemorySize() {
0:     return offsetTillFileIsRead;
1:   }
1: 
1:   /**
1:    * This method will increment the access count for a column by 1
1:    * whenever a column is getting used in query or incremental data load
1:    */
1:   @Override public void incrementAccessCount() {
1:     accessCount.incrementAndGet();
1:   }
1: 
1:   /**
1:    * This method will decrement the access count for a column by 1
1:    * whenever a column usage is complete
1:    */
1:   private void decrementAccessCount() {
1:     if (accessCount.get() > 0) {
1:       accessCount.decrementAndGet();
1:     }
1:   }
1: 
1:   /**
1:    * This method will update the end offset of file everytime a file is read
1:    *
1:    * @param offsetTillFileIsRead
1:    */
1:   @Override public void setOffsetTillFileIsRead(long offsetTillFileIsRead) {
1:     this.offsetTillFileIsRead = offsetTillFileIsRead;
1:   }
1: 
1:   /**
1:    * This method will update the timestamp of a file if a file is modified
1:    * like in case of incremental load
1:    *
1:    * @param fileTimeStamp
1:    */
1:   @Override public void setFileTimeStamp(long fileTimeStamp) {
1:     this.fileTimeStamp = fileTimeStamp;
1:   }
1: 
1:   /**
1:    * The method return the list of dictionary chunks of a column
1:    * Applications Scenario.
1:    * For preparing the column Sort info while writing the sort index file.
1:    *
1:    * @return
1:    */
1:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
0:     DictionaryChunksWrapper chunksWrapper = new DictionaryChunksWrapper(dictionaryChunks);
0:     return chunksWrapper;
1:   }
1: 
1:   /**
1:    * This method will release the objects and set default value for primitive types
1:    */
1:   @Override public void clear() {
1:     decrementAccessCount();
1:   }
1: 
1:   /**
1:    * This method will find and return the sort index for a given dictionary id.
1:    * Applicable scenarios:
1:    * 1. Used in case of order by queries when data sorting is required
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSortedIndex(int surrogateKey) {
1:     return 0;
1:   }
1: 
1:   /**
1:    * dictionary metadata file length which will be set whenever we reload dictionary
1:    * data from disk
1:    *
1:    * @param dictionaryMetaFileLength length of dictionary metadata file
1:    */
1:   @Override public void setDictionaryMetaFileLength(long dictionaryMetaFileLength) {
1:     this.dictionaryMetaFileLength = dictionaryMetaFileLength;
1:   }
1: 
1:   /**
1:    * Dictionary meta file offset which will be read to check whether length of dictionary
1:    * meta file has been modified
1:    *
1:    * @return
1:    */
1:   @Override public long getDictionaryMetaFileLength() {
1:     return dictionaryMetaFileLength;
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value from sorted index.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation in case of order by queries:
1:    * While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param sortedIndex sort index of dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
1:     return null;
1:   }
1: 
1:   /**
0:    * This method will set the sort order index of a dictionary column.
0:    * Sort order index if the index of dictionary values after they are sorted.
1:    *
0:    * @param sortOrderIndex
1:    */
0:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:   }
1: 
1:   /**
0:    * This method will set the sort reverse index of a dictionary column.
0:    * Sort reverse index is the index of dictionary values before they are sorted.
1:    *
0:    * @param sortReverseOrderIndex
1:    */
0:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value for a given surrogate key.
1:    * Applicable scenarios:
1:    * 1. Query final result preparation : While convert the final result which will
1:    * be surrogate key back to original dictionary values this method will be used
1:    *
1:    * @param surrogateKey a unique ID for a dictionary value
1:    * @return value if found else null
1:    */
1:   @Override public String getDictionaryValueForKey(int surrogateKey) {
1:     String dictionaryValue = null;
1:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
1:       return dictionaryValue;
1:     }
1:     byte[] dictionaryValueInBytes = getDictionaryBytesFromSurrogate(surrogateKey);
1:     if (null != dictionaryValueInBytes) {
1:       dictionaryValue = new String(dictionaryValueInBytes,
0:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     }
1:     return dictionaryValue;
1:   }
1: 
1:   /**
1:    * This method will find and return the dictionary value as byte array for a
1:    * given surrogate key
1:    *
1:    * @param surrogateKey
1:    * @return
1:    */
1:   protected byte[] getDictionaryBytesFromSurrogate(int surrogateKey) {
1:     byte[] dictionaryValueInBytes = null;
0:     int totalSizeOfDictionaryChunksTraversed = 0;
0:     for (List<byte[]> oneDictionaryChunk : dictionaryChunks) {
0:       totalSizeOfDictionaryChunksTraversed =
0:           totalSizeOfDictionaryChunksTraversed + oneDictionaryChunk.size();
0:       // skip the dictionary chunk till surrogate key is lesser than size of
0:       // dictionary chunks traversed
0:       if (totalSizeOfDictionaryChunksTraversed < surrogateKey) {
0:         continue;
1:       }
0:       // lets say surrogateKey = 26, total size traversed is 28, dictionary chunk size = 12
0:       // then surrogate position in dictionary chunk list is = 26 - (28-12) - 1 = 9
0:       // -1 because list index starts from 0
0:       int surrogatePositionInDictionaryChunk =
0:           surrogateKey - (totalSizeOfDictionaryChunksTraversed - oneDictionaryChunk.size()) - 1;
0:       dictionaryValueInBytes = oneDictionaryChunk.get(surrogatePositionInDictionaryChunk);
0:       break;
1:     }
1:     return dictionaryValueInBytes;
1:   }
1: 
1:   /**
1:    * This method will find and return the surrogate key for a given dictionary value
1:    * Applicable scenario:
1:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:    * that values have to be looked up in the existing dictionary cache.
1:    * 2. Filter scenarios where from value surrogate key has to be found.
1:    *
1:    * @param value dictionary value
1:    * @return if found returns key else 0
1:    */
1:   @Override public int getSurrogateKey(String value) {
1:     byte[] keyData = value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:     return getSurrogateKey(keyData);
1:   }
1: }
1: 
commit:72cb415
/////////////////////////////////////////////////////////////////////////
0:           CarbonCommonConstants.DEFAULT_CHARSET_CLASS);
0:    * This method will find and return the dictionary value for a given surrogate key.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation : While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public byte[] getDictionaryValueForKeyInBytes(int surrogateKey) {
0:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
0:       return null;
0:     }
0:     return getDictionaryBytesFromSurrogate(surrogateKey);
0:   }
0: 
0:   /**
commit:05b2654
/////////////////////////////////////////////////////////////////////////
0:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.nio.charset.Charset;
0: import java.util.List;
0: import java.util.concurrent.CopyOnWriteArrayList;
0: import java.util.concurrent.atomic.AtomicInteger;
0: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: 
0: /**
0:  * class that implements cacheable interface and methods specific to column dictionary
0:  */
0: public abstract class AbstractColumnDictionaryInfo implements DictionaryInfo {
0: 
0:   /**
0:    * list that will hold all the dictionary chunks for one column
0:    */
0:   protected List<List<byte[]>> dictionaryChunks = new CopyOnWriteArrayList<>();
0: 
0:   /**
0:    * minimum value of surrogate key, dictionary value key will start from count 1
0:    */
0:   protected static final int MINIMUM_SURROGATE_KEY = 1;
0: 
0:   /**
0:    * atomic integer to maintain the access count for a column access
0:    */
0:   protected AtomicInteger accessCount = new AtomicInteger();
0: 
0:   /**
0:    * file timestamp
0:    */
0:   protected long fileTimeStamp;
0: 
0:   /**
0:    * offset till where file is read
0:    */
0:   protected long offsetTillFileIsRead;
0: 
0:   /**
0:    * length of dictionary metadata file
0:    */
0:   private long dictionaryMetaFileLength;
0: 
0:   /**
0:    * This method will return the timestamp of file based on which decision
0:    * the decision will be taken whether to read that file or not
0:    *
0:    * @return
0:    */
0:   @Override public long getFileTimeStamp() {
0:     return fileTimeStamp;
0:   }
0: 
0:   /**
0:    * This method will return the access count for a column based on which decision will be taken
0:    * whether to keep the object in memory
0:    *
0:    * @return
0:    */
0:   @Override public int getAccessCount() {
0:     return accessCount.get();
0:   }
0: 
0:   /**
0:    * This method will return the memory size of a column
0:    *
0:    * @return
0:    */
0:   @Override public long getMemorySize() {
0:     return offsetTillFileIsRead;
0:   }
0: 
0:   /**
0:    * This method will increment the access count for a column by 1
0:    * whenever a column is getting used in query or incremental data load
0:    */
0:   @Override public void incrementAccessCount() {
0:     accessCount.incrementAndGet();
0:   }
0: 
0:   /**
0:    * This method will decrement the access count for a column by 1
0:    * whenever a column usage is complete
0:    */
0:   private void decrementAccessCount() {
0:     if (accessCount.get() > 0) {
0:       accessCount.decrementAndGet();
0:     }
0:   }
0: 
0:   /**
0:    * This method will update the end offset of file everytime a file is read
0:    *
0:    * @param offsetTillFileIsRead
0:    */
0:   @Override public void setOffsetTillFileIsRead(long offsetTillFileIsRead) {
0:     this.offsetTillFileIsRead = offsetTillFileIsRead;
0:   }
0: 
0:   /**
0:    * This method will update the timestamp of a file if a file is modified
0:    * like in case of incremental load
0:    *
0:    * @param fileTimeStamp
0:    */
0:   @Override public void setFileTimeStamp(long fileTimeStamp) {
0:     this.fileTimeStamp = fileTimeStamp;
0:   }
0: 
0:   /**
0:    * The method return the list of dictionary chunks of a column
0:    * Applications Scenario.
0:    * For preparing the column Sort info while writing the sort index file.
0:    *
0:    * @return
0:    */
0:   @Override public DictionaryChunksWrapper getDictionaryChunks() {
0:     DictionaryChunksWrapper chunksWrapper = new DictionaryChunksWrapper(dictionaryChunks);
0:     return chunksWrapper;
0:   }
0: 
0:   /**
0:    * This method will release the objects and set default value for primitive types
0:    */
0:   @Override public void clear() {
0:     decrementAccessCount();
0:   }
0: 
0:   /**
0:    * This method will find and return the sort index for a given dictionary id.
0:    * Applicable scenarios:
0:    * 1. Used in case of order by queries when data sorting is required
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSortedIndex(int surrogateKey) {
1:     return 0;
0:   }
0: 
0:   /**
0:    * dictionary metadata file length which will be set whenever we reload dictionary
0:    * data from disk
0:    *
0:    * @param dictionaryMetaFileLength length of dictionary metadata file
0:    */
0:   @Override public void setDictionaryMetaFileLength(long dictionaryMetaFileLength) {
0:     this.dictionaryMetaFileLength = dictionaryMetaFileLength;
0:   }
0: 
0:   /**
0:    * Dictionary meta file offset which will be read to check whether length of dictionary
0:    * meta file has been modified
0:    *
0:    * @return
0:    */
0:   @Override public long getDictionaryMetaFileLength() {
0:     return dictionaryMetaFileLength;
0:   }
0: 
0:   /**
0:    * This method will find and return the dictionary value from sorted index.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation in case of order by queries:
0:    * While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param sortedIndex sort index of dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public String getDictionaryValueFromSortedIndex(int sortedIndex) {
0:     return null;
0:   }
0: 
0:   /**
0:    * This method will set the sort order index of a dictionary column.
0:    * Sort order index if the index of dictionary values after they are sorted.
0:    *
0:    * @param sortOrderIndex
0:    */
0:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
0:   }
0: 
0:   /**
0:    * This method will set the sort reverse index of a dictionary column.
0:    * Sort reverse index is the index of dictionary values before they are sorted.
0:    *
0:    * @param sortReverseOrderIndex
0:    */
0:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
0:   }
0: 
0:   /**
0:    * This method will find and return the dictionary value for a given surrogate key.
0:    * Applicable scenarios:
0:    * 1. Query final result preparation : While convert the final result which will
0:    * be surrogate key back to original dictionary values this method will be used
0:    *
0:    * @param surrogateKey a unique ID for a dictionary value
0:    * @return value if found else null
0:    */
0:   @Override public String getDictionaryValueForKey(int surrogateKey) {
0:     String dictionaryValue = null;
0:     if (surrogateKey < MINIMUM_SURROGATE_KEY) {
0:       return dictionaryValue;
0:     }
0:     byte[] dictionaryValueInBytes = getDictionaryBytesFromSurrogate(surrogateKey);
0:     if (null != dictionaryValueInBytes) {
0:       dictionaryValue = new String(dictionaryValueInBytes,
0:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
0:     }
0:     return dictionaryValue;
0:   }
0: 
0:   /**
0:    * This method will find and return the dictionary value as byte array for a
0:    * given surrogate key
0:    *
0:    * @param surrogateKey
0:    * @return
0:    */
0:   protected byte[] getDictionaryBytesFromSurrogate(int surrogateKey) {
0:     byte[] dictionaryValueInBytes = null;
0:     int totalSizeOfDictionaryChunksTraversed = 0;
0:     for (List<byte[]> oneDictionaryChunk : dictionaryChunks) {
0:       totalSizeOfDictionaryChunksTraversed =
0:           totalSizeOfDictionaryChunksTraversed + oneDictionaryChunk.size();
0:       // skip the dictionary chunk till surrogate key is lesser than size of
0:       // dictionary chunks traversed
0:       if (totalSizeOfDictionaryChunksTraversed < surrogateKey) {
0:         continue;
0:       }
0:       // lets say surrogateKey = 26, total size traversed is 28, dictionary chunk size = 12
0:       // then surrogate position in dictionary chunk list is = 26 - (28-12) - 1 = 9
0:       // -1 because list index starts from 0
0:       int surrogatePositionInDictionaryChunk =
0:           surrogateKey - (totalSizeOfDictionaryChunksTraversed - oneDictionaryChunk.size()) - 1;
0:       dictionaryValueInBytes = oneDictionaryChunk.get(surrogatePositionInDictionaryChunk);
0:       break;
0:     }
0:     return dictionaryValueInBytes;
0:   }
0: 
0:   /**
0:    * This method will find and return the surrogate key for a given dictionary value
0:    * Applicable scenario:
0:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
0:    * that values have to be looked up in the existing dictionary cache.
0:    * 2. Filter scenarios where from value surrogate key has to be found.
0:    *
0:    * @param value dictionary value
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSurrogateKey(String value) {
0:     byte[] keyData = value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
0:     return getSurrogateKey(keyData);
0:   }
0: }
0: 
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:     return new DictionaryChunksWrapper(dictionaryChunks);
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0:     return new DictionaryChunksWrapper(dictionaryChunks);
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:    * size of one dictionary bucket
0:    */
1:   private final int dictionaryOneChunkSize = CarbonUtil.getDictionaryChunkSize();
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
1:    * This method will return the size of of last dictionary chunk so that only that many
1:    * values are read from the dictionary reader
0:    *
1:    * @return size of last dictionary chunk
0:    */
1:   @Override public int getSizeOfLastDictionaryChunk() {
0:     return 0;
0:   }
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
1:     // surrogate key starts from 1 and list index will start from 0, so lets say if surrogate
1:     // key is 10 then value will present at index 9 of the dictionary chunk list
1:     int actualSurrogateIndex = surrogateKey - 1;
1:     // lets say dictionaryOneChunkSize = 10, surrogateKey = 10, so bucket index will
1:     // be 0 and dictionary chunk index will be 9 to get the value
1:     int dictionaryBucketIndex = actualSurrogateIndex / dictionaryOneChunkSize;
1:     if (dictionaryChunks.size() > dictionaryBucketIndex) {
1:       int indexInsideBucket = actualSurrogateIndex % dictionaryOneChunkSize;
1:       List<byte[]> dictionaryBucketContainingSurrogateValue =
1:           dictionaryChunks.get(dictionaryBucketIndex);
1:       if (dictionaryBucketContainingSurrogateValue.size() > indexInsideBucket) {
1:         dictionaryValueInBytes = dictionaryBucketContainingSurrogateValue.get(indexInsideBucket);
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
0:    * size of one dictionary bucket
0:    */
0:   private final int dictionaryOneChunkSize = CarbonUtil.getDictionaryChunkSize();
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
0:    * This method will return the size of of last dictionary chunk so that only that many
0:    * values are read from the dictionary reader
0:    *
0:    * @return size of last dictionary chunk
0:    */
0:   @Override public int getSizeOfLastDictionaryChunk() {
0:     return 0;
0:   }
0: 
0:   /**
/////////////////////////////////////////////////////////////////////////
0:     // surrogate key starts from 1 and list index will start from 0, so lets say if surrogate
0:     // key is 10 then value will present at index 9 of the dictionary chunk list
0:     int actualSurrogateIndex = surrogateKey - 1;
0:     // lets say dictionaryOneChunkSize = 10, surrogateKey = 10, so bucket index will
0:     // be 0 and dictionary chunk index will be 9 to get the value
0:     int dictionaryBucketIndex = actualSurrogateIndex / dictionaryOneChunkSize;
0:     if (dictionaryChunks.size() > dictionaryBucketIndex) {
0:       int indexInsideBucket = actualSurrogateIndex % dictionaryOneChunkSize;
0:       List<byte[]> dictionaryBucketContainingSurrogateValue =
0:           dictionaryChunks.get(dictionaryBucketIndex);
0:       if (dictionaryBucketContainingSurrogateValue.size() > indexInsideBucket) {
0:         dictionaryValueInBytes = dictionaryBucketContainingSurrogateValue.get(indexInsideBucket);
============================================================================