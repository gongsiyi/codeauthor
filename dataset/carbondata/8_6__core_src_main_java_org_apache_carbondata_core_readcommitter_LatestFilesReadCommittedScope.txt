1:280a400: /*
1:280a400:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:280a400:  * contributor license agreements.  See the NOTICE file distributed with
1:280a400:  * this work for additional information regarding copyright ownership.
1:280a400:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:280a400:  * (the "License"); you may not use this file except in compliance with
1:280a400:  * the License.  You may obtain a copy of the License at
1:280a400:  *
1:280a400:  *    http://www.apache.org/licenses/LICENSE-2.0
1:280a400:  *
1:280a400:  * Unless required by applicable law or agreed to in writing, software
1:280a400:  * distributed under the License is distributed on an "AS IS" BASIS,
1:280a400:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:280a400:  * See the License for the specific language governing permissions and
1:280a400:  * limitations under the License.
1:280a400:  */
1:280a400: package org.apache.carbondata.core.readcommitter;
1:280a400: 
1:280a400: import java.io.IOException;
1:347b8e1: import java.util.ArrayList;
1:347b8e1: import java.util.HashMap;
1:347b8e1: import java.util.LinkedList;
1:347b8e1: import java.util.List;
1:347b8e1: import java.util.Map;
1:347b8e1: import java.util.Objects;
1:280a400: 
1:280a400: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:280a400: import org.apache.carbondata.common.annotations.InterfaceStability;
1:280a400: import org.apache.carbondata.core.datamap.Segment;
1:280a400: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:280a400: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:280a400: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1:f1a6c7c: import org.apache.carbondata.core.mutate.UpdateVO;
1:280a400: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1:f1a6c7c: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
1:280a400: import org.apache.carbondata.core.statusmanager.SegmentStatus;
1:280a400: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:280a400: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:280a400: /**
1:b7b8073:  * This is a readCommittedScope for non transactional carbon table
1:280a400:  */
1:280a400: @InterfaceAudience.Internal
1:280a400: @InterfaceStability.Stable
1:280a400: public class LatestFilesReadCommittedScope implements ReadCommittedScope {
1:280a400: 
1:8f1a029:   private static final long serialVersionUID = -839970494288861816L;
1:280a400:   private String carbonFilePath;
1:b338459:   private String segmentId;
1:280a400:   private ReadCommittedIndexFileSnapShot readCommittedIndexFileSnapShot;
1:280a400:   private LoadMetadataDetails[] loadMetadataDetails;
1:8f1a029:   private transient Configuration configuration;
1:c58eb43: 
1:b338459:   /**
1:b338459:    * a new constructor of this class
1:b338459:    *
1:b338459:    * @param path      carbon file path
1:b338459:    * @param segmentId segment id
1:b338459:    */
1:8f1a029:   public LatestFilesReadCommittedScope(String path, String segmentId, Configuration configuration)
1:8f1a029:       throws IOException {
1:8f1a029:     this.configuration = configuration;
1:b338459:     Objects.requireNonNull(path);
1:280a400:     this.carbonFilePath = path;
1:b338459:     this.segmentId = segmentId;
1:347b8e1:     takeCarbonIndexFileSnapShot();
2:280a400:   }
1:280a400: 
1:b338459:   /**
1:b338459:    * a new constructor with path
1:b338459:    *
1:b338459:    * @param path carbon file path
1:b338459:    */
1:8f1a029:   public LatestFilesReadCommittedScope(String path, Configuration configuration)
1:8f1a029:       throws IOException {
1:8f1a029:     this(path, null, configuration);
1:280a400:   }
1:b338459: 
1:347b8e1:   /**
1:347b8e1:    * a new constructor with carbon index files
1:347b8e1:    *
1:347b8e1:    * @param indexFiles carbon index files
1:347b8e1:    */
1:8f1a029:   public LatestFilesReadCommittedScope(CarbonFile[] indexFiles, Configuration configuration) {
1:8f1a029:     this.configuration = configuration;
1:347b8e1:     takeCarbonIndexFileSnapShot(indexFiles);
1:347b8e1:   }
1:347b8e1: 
1:280a400:   private void prepareLoadMetadata() {
1:280a400:     int loadCount = 0;
1:280a400:     Map<String, List<String>> snapshotMap =
1:280a400:         this.readCommittedIndexFileSnapShot.getSegmentIndexFileMap();
1:280a400:     LoadMetadataDetails[] loadMetadataDetailsArray = new LoadMetadataDetails[snapshotMap.size()];
1:280a400:     String segmentID;
1:280a400:     for (Map.Entry<String, List<String>> entry : snapshotMap.entrySet()) {
1:280a400:       segmentID = entry.getKey();
1:280a400:       LoadMetadataDetails loadMetadataDetails = new LoadMetadataDetails();
1:280a400:       long timeSet;
2:280a400:       try {
1:280a400:         timeSet = Long.parseLong(segmentID);
1:280a400:       } catch (NumberFormatException nu) {
1:280a400:         timeSet = 0;
1:280a400:       }
1:280a400:       loadMetadataDetails.setLoadEndTime(timeSet);
1:280a400:       loadMetadataDetails.setLoadStartTime(timeSet);
1:280a400:       loadMetadataDetails.setSegmentStatus(SegmentStatus.SUCCESS);
1:280a400:       loadMetadataDetails.setLoadName(segmentID);
1:280a400:       loadMetadataDetailsArray[loadCount++] = loadMetadataDetails;
1:280a400:     }
1:280a400:     this.loadMetadataDetails = loadMetadataDetailsArray;
1:280a400:   }
1:280a400: 
1:280a400:   @Override public LoadMetadataDetails[] getSegmentList() throws IOException {
1:280a400:     try {
1:280a400:       if (loadMetadataDetails == null) {
2:280a400:         takeCarbonIndexFileSnapShot();
1:280a400:       }
1:280a400:       return loadMetadataDetails;
1:280a400: 
2:280a400:     } catch (IOException ex) {
1:280a400:       throw new IOException("Problem encountered while reading the Table Status file.", ex);
1:280a400:     }
1:280a400:   }
1:280a400: 
1:280a400:   @Override public Map<String, String> getCommittedIndexFile(Segment segment) throws IOException {
1:280a400:     Map<String, String> indexFileStore = new HashMap<>();
1:280a400:     Map<String, List<String>> snapShot = readCommittedIndexFileSnapShot.getSegmentIndexFileMap();
1:280a400:     String segName;
1:280a400:     if (segment.getSegmentNo() != null) {
1:280a400:       segName = segment.getSegmentNo();
1:280a400:     } else {
1:280a400:       segName = segment.getSegmentFileName();
1:280a400:     }
1:280a400:     List<String> index = snapShot.get(segName);
1:b338459:     if (null == index) {
1:b338459:       index = new LinkedList<>();
1:280a400:     }
1:280a400:     for (String indexPath : index) {
1:ed22508:       if (indexPath.endsWith(CarbonTablePath.MERGE_INDEX_FILE_EXT)) {
1:ed22508:         indexFileStore.put(indexPath, indexPath.substring(indexPath.lastIndexOf('/') + 1));
1:ed22508:       } else {
1:ed22508:         indexFileStore.put(indexPath, null);
1:ed22508:       }
1:280a400:     }
1:280a400:     return indexFileStore;
1:280a400:   }
1:280a400: 
1:347b8e1:   @Override
1:347b8e1:   public SegmentRefreshInfo getCommittedSegmentRefreshInfo(Segment segment, UpdateVO updateVo)
1:347b8e1:       throws IOException {
1:f1a6c7c:     Map<String, SegmentRefreshInfo> snapShot =
1:f1a6c7c:         readCommittedIndexFileSnapShot.getSegmentTimestampUpdaterMap();
1:f1a6c7c:     String segName;
1:f1a6c7c:     if (segment.getSegmentNo() != null) {
1:f1a6c7c:       segName = segment.getSegmentNo();
1:b338459:     } else {
1:f1a6c7c:       segName = segment.getSegmentFileName();
1:280a400:     }
1:f1a6c7c:     SegmentRefreshInfo segmentRefreshInfo = snapShot.get(segName);
1:f1a6c7c:     return segmentRefreshInfo;
1:280a400:   }
1:f1a6c7c: 
1:280a400:   private String getSegmentID(String carbonIndexFileName, String indexFilePath) {
1:280a400:     if (indexFilePath.contains("/Fact/Part0/Segment_")) {
1:280a400:       // This is CarbonFile case where the Index files are present inside the Segment Folder
1:280a400:       // So the Segment has to be extracted from the path not from the CarbonIndex file.
1:280a400:       String segString = indexFilePath.substring(0, indexFilePath.lastIndexOf("/") + 1);
1:347b8e1:       String segName =
1:347b8e1:           segString.substring(segString.lastIndexOf("_") + 1, segString.lastIndexOf("/"));
1:280a400:       return segName;
1:280a400:     } else {
1:280a400:       String fileName = carbonIndexFileName;
1:280a400:       String segId = fileName.substring(fileName.lastIndexOf("-") + 1, fileName.lastIndexOf("."));
1:280a400:       return segId;
1:280a400:     }
1:280a400:   }
1:280a400: 
1:280a400:   @Override public void takeCarbonIndexFileSnapShot() throws IOException {
1:280a400:     // Read the current file Path get the list of indexes from the path.
1:280a400:     CarbonFile file = FileFactory.getCarbonFile(carbonFilePath);
1:347b8e1: 
1:b338459:     CarbonFile[] carbonIndexFiles = null;
1:280a400:     if (file.isDirectory()) {
1:b338459:       if (segmentId == null) {
1:70fe514:         List<CarbonFile> indexFiles = new ArrayList<>();
1:70fe514:         SegmentIndexFileStore.getCarbonIndexFilesRecursively(file, indexFiles);
1:70fe514:         carbonIndexFiles = indexFiles.toArray(new CarbonFile[0]);
1:280a400:       } else {
1:b338459:         String segmentPath = CarbonTablePath.getSegmentPath(carbonFilePath, segmentId);
1:8f1a029:         carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(segmentPath, configuration);
1:d777318:       }
1:5f68a79:       if (carbonIndexFiles.length == 0) {
1:5f68a79:         throw new IOException(
1:5f68a79:             "No Index files are present in the table location :" + carbonFilePath);
1:5f68a79:       }
1:347b8e1:       takeCarbonIndexFileSnapShot(carbonIndexFiles);
1:280a400:     } else {
1:280a400:       throw new IOException("Path is not pointing to directory");
1:1dfbcfc:     }
1:280a400:   }
1:280a400: 
1:347b8e1:   private void takeCarbonIndexFileSnapShot(CarbonFile[] carbonIndexFiles) {
1:347b8e1:     Map<String, List<String>> indexFileStore = new HashMap<>();
1:347b8e1:     Map<String, SegmentRefreshInfo> segmentTimestampUpdaterMap = new HashMap<>();
1:347b8e1:     for (int i = 0; i < carbonIndexFiles.length; i++) {
1:347b8e1:       // TODO. Nested File Paths.
1:347b8e1:       if (carbonIndexFiles[i].getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)
1:347b8e1:           || carbonIndexFiles[i].getName().endsWith(CarbonTablePath.MERGE_INDEX_FILE_EXT)) {
1:347b8e1:         // Get Segment Name from the IndexFile.
1:347b8e1:         String indexFilePath =
1:347b8e1:             FileFactory.getUpdatedFilePath(carbonIndexFiles[i].getAbsolutePath());
1:347b8e1:         String segId = getSegmentID(carbonIndexFiles[i].getName(), indexFilePath);
1:347b8e1:         // TODO. During Partition table handling, place Segment File Name.
1:347b8e1:         List<String> indexList;
1:347b8e1:         SegmentRefreshInfo segmentRefreshInfo;
1:347b8e1:         if (indexFileStore.get(segId) == null) {
1:347b8e1:           indexList = new ArrayList<>(1);
1:347b8e1:           segmentRefreshInfo =
1:347b8e1:               new SegmentRefreshInfo(carbonIndexFiles[i].getLastModifiedTime(), 0);
1:347b8e1:           segmentTimestampUpdaterMap.put(segId, segmentRefreshInfo);
1:347b8e1:         } else {
1:347b8e1:           // Entry is already present.
1:347b8e1:           indexList = indexFileStore.get(segId);
1:347b8e1:           segmentRefreshInfo = segmentTimestampUpdaterMap.get(segId);
1:347b8e1:         }
1:347b8e1:         indexList.add(indexFilePath);
1:347b8e1:         if (segmentRefreshInfo.getSegmentUpdatedTimestamp() < carbonIndexFiles[i]
1:347b8e1:             .getLastModifiedTime()) {
1:347b8e1:           segmentRefreshInfo
1:347b8e1:               .setSegmentUpdatedTimestamp(carbonIndexFiles[i].getLastModifiedTime());
1:347b8e1:         }
1:347b8e1:         indexFileStore.put(segId, indexList);
1:347b8e1:         segmentRefreshInfo.setCountOfFileInSegment(indexList.size());
1:347b8e1:       }
1:347b8e1:     }
1:347b8e1:     ReadCommittedIndexFileSnapShot readCommittedIndexFileSnapShot =
1:347b8e1:         new ReadCommittedIndexFileSnapShot(indexFileStore, segmentTimestampUpdaterMap);
1:347b8e1:     this.readCommittedIndexFileSnapShot = readCommittedIndexFileSnapShot;
1:347b8e1:     prepareLoadMetadata();
1:347b8e1:   }
1:347b8e1: 
1:8f1a029:   public Configuration getConfiguration() {
1:8f1a029:     return configuration;
1:8f1a029:   }
1:8f1a029: 
1:8f1a029:   @Override public void setConfiguration(Configuration configuration) {
1:8f1a029:     this.configuration = configuration;
1:8f1a029:   }
1:280a400: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = -839970494288861816L;
1:   private transient Configuration configuration;
/////////////////////////////////////////////////////////////////////////
1:   public LatestFilesReadCommittedScope(String path, String segmentId, Configuration configuration)
1:       throws IOException {
1:     this.configuration = configuration;
/////////////////////////////////////////////////////////////////////////
1:   public LatestFilesReadCommittedScope(String path, Configuration configuration)
1:       throws IOException {
1:     this(path, null, configuration);
/////////////////////////////////////////////////////////////////////////
1:   public LatestFilesReadCommittedScope(CarbonFile[] indexFiles, Configuration configuration) {
1:     this.configuration = configuration;
/////////////////////////////////////////////////////////////////////////
1:         carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(segmentPath, configuration);
/////////////////////////////////////////////////////////////////////////
1:   public Configuration getConfiguration() {
1:     return configuration;
1:   }
1: 
1:   @Override public void setConfiguration(Configuration configuration) {
1:     this.configuration = configuration;
1:   }
commit:d777318
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
/////////////////////////////////////////////////////////////////////////
0:     CarbonFile[] files = file.listFiles(new CarbonFileFilter() {
0:       @Override public boolean accept(CarbonFile file) {
0:         return file.getName().endsWith(CarbonTablePath.INDEX_FILE_EXT) || file.getName()
0:             .endsWith(CarbonTablePath.CARBON_DATA_EXT);
1:       }
0:     });
0:     if (files.length == 0) {
author:ravipesala
-------------------------------------------------------------------------------
commit:70fe514
/////////////////////////////////////////////////////////////////////////
1:         List<CarbonFile> indexFiles = new ArrayList<>();
1:         SegmentIndexFileStore.getCarbonIndexFilesRecursively(file, indexFiles);
1:         carbonIndexFiles = indexFiles.toArray(new CarbonFile[0]);
commit:347b8e1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Objects;
/////////////////////////////////////////////////////////////////////////
0:   public LatestFilesReadCommittedScope(String path, String segmentId) throws IOException {
1:     takeCarbonIndexFileSnapShot();
/////////////////////////////////////////////////////////////////////////
0:   public LatestFilesReadCommittedScope(String path) throws IOException {
1:   /**
1:    * a new constructor with carbon index files
1:    *
1:    * @param indexFiles carbon index files
1:    */
0:   public LatestFilesReadCommittedScope(CarbonFile[] indexFiles) {
1:     takeCarbonIndexFileSnapShot(indexFiles);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public SegmentRefreshInfo getCommittedSegmentRefreshInfo(Segment segment, UpdateVO updateVo)
1:       throws IOException {
/////////////////////////////////////////////////////////////////////////
1:       String segName =
1:           segString.substring(segString.lastIndexOf("_") + 1, segString.lastIndexOf("/"));
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       takeCarbonIndexFileSnapShot(carbonIndexFiles);
1:   private void takeCarbonIndexFileSnapShot(CarbonFile[] carbonIndexFiles) {
1:     Map<String, List<String>> indexFileStore = new HashMap<>();
1:     Map<String, SegmentRefreshInfo> segmentTimestampUpdaterMap = new HashMap<>();
1:     for (int i = 0; i < carbonIndexFiles.length; i++) {
1:       // TODO. Nested File Paths.
1:       if (carbonIndexFiles[i].getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)
1:           || carbonIndexFiles[i].getName().endsWith(CarbonTablePath.MERGE_INDEX_FILE_EXT)) {
1:         // Get Segment Name from the IndexFile.
1:         String indexFilePath =
1:             FileFactory.getUpdatedFilePath(carbonIndexFiles[i].getAbsolutePath());
1:         String segId = getSegmentID(carbonIndexFiles[i].getName(), indexFilePath);
1:         // TODO. During Partition table handling, place Segment File Name.
1:         List<String> indexList;
1:         SegmentRefreshInfo segmentRefreshInfo;
1:         if (indexFileStore.get(segId) == null) {
1:           indexList = new ArrayList<>(1);
1:           segmentRefreshInfo =
1:               new SegmentRefreshInfo(carbonIndexFiles[i].getLastModifiedTime(), 0);
1:           segmentTimestampUpdaterMap.put(segId, segmentRefreshInfo);
1:         } else {
1:           // Entry is already present.
1:           indexList = indexFileStore.get(segId);
1:           segmentRefreshInfo = segmentTimestampUpdaterMap.get(segId);
1:         }
1:         indexList.add(indexFilePath);
1:         if (segmentRefreshInfo.getSegmentUpdatedTimestamp() < carbonIndexFiles[i]
1:             .getLastModifiedTime()) {
1:           segmentRefreshInfo
1:               .setSegmentUpdatedTimestamp(carbonIndexFiles[i].getLastModifiedTime());
1:         }
1:         indexFileStore.put(segId, indexList);
1:         segmentRefreshInfo.setCountOfFileInSegment(indexList.size());
1:       }
1:     }
1:     ReadCommittedIndexFileSnapShot readCommittedIndexFileSnapShot =
1:         new ReadCommittedIndexFileSnapShot(indexFileStore, segmentTimestampUpdaterMap);
1:     this.readCommittedIndexFileSnapShot = readCommittedIndexFileSnapShot;
1:     prepareLoadMetadata();
1:   }
1: 
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:ed22508
/////////////////////////////////////////////////////////////////////////
1:       if (indexPath.endsWith(CarbonTablePath.MERGE_INDEX_FILE_EXT)) {
1:         indexFileStore.put(indexPath, indexPath.substring(indexPath.lastIndexOf('/') + 1));
1:       } else {
1:         indexFileStore.put(indexPath, null);
1:       }
/////////////////////////////////////////////////////////////////////////
0:         if (carbonIndexFiles[i].getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)
0:             || carbonIndexFiles[i].getName().endsWith(CarbonTablePath.MERGE_INDEX_FILE_EXT)) {
commit:5f68a79
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(file);
1:       if (carbonIndexFiles.length == 0) {
1:         throw new IOException(
1:             "No Index files are present in the table location :" + carbonFilePath);
1:       }
commit:cf1b50b
/////////////////////////////////////////////////////////////////////////
0:     if (file.listFiles().length == 0) {
commit:1dfbcfc
/////////////////////////////////////////////////////////////////////////
0:     if (file == null) {
0:       // For nonTransactional table, files can be removed at any point of time.
0:       // So cannot assume files will be present
0:       throw new IOException("No files are present in the table location :"+ carbonFilePath);
1:     }
commit:280a400
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.readcommitter;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.indexstore.blockletindex.SegmentIndexFileStore;
1: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1: import org.apache.carbondata.core.statusmanager.SegmentStatus;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
1: /**
0:  * This is a readCommittedScope for unmanaged carbon table
1:  */
1: @InterfaceAudience.Internal
1: @InterfaceStability.Stable
1: public class LatestFilesReadCommittedScope implements ReadCommittedScope {
1: 
1:   private String carbonFilePath;
1:   private ReadCommittedIndexFileSnapShot readCommittedIndexFileSnapShot;
1:   private LoadMetadataDetails[] loadMetadataDetails;
0:   public LatestFilesReadCommittedScope(String path) {
1:     this.carbonFilePath = path;
1:     try {
1:       takeCarbonIndexFileSnapShot();
1:     } catch (IOException ex) {
0:       throw new RuntimeException("Error while taking index snapshot", ex);
1:     }
1:   }
1: 
1:   private void prepareLoadMetadata() {
1:     int loadCount = 0;
1:     Map<String, List<String>> snapshotMap =
1:         this.readCommittedIndexFileSnapShot.getSegmentIndexFileMap();
1:     LoadMetadataDetails[] loadMetadataDetailsArray = new LoadMetadataDetails[snapshotMap.size()];
1:     String segmentID;
1:     for (Map.Entry<String, List<String>> entry : snapshotMap.entrySet()) {
1:       segmentID = entry.getKey();
1:       LoadMetadataDetails loadMetadataDetails = new LoadMetadataDetails();
1:       long timeSet;
1:       try {
1:         timeSet = Long.parseLong(segmentID);
1:       } catch (NumberFormatException nu) {
1:         timeSet = 0;
1:       }
1:       loadMetadataDetails.setLoadEndTime(timeSet);
1:       loadMetadataDetails.setLoadStartTime(timeSet);
1:       loadMetadataDetails.setSegmentStatus(SegmentStatus.SUCCESS);
1:       loadMetadataDetails.setLoadName(segmentID);
1:       loadMetadataDetailsArray[loadCount++] = loadMetadataDetails;
1:     }
1:     this.loadMetadataDetails = loadMetadataDetailsArray;
1:   }
1: 
1:   @Override public LoadMetadataDetails[] getSegmentList() throws IOException {
1:     try {
1:       if (loadMetadataDetails == null) {
1:         takeCarbonIndexFileSnapShot();
1:       }
1:       return loadMetadataDetails;
1: 
1:     } catch (IOException ex) {
1:       throw new IOException("Problem encountered while reading the Table Status file.", ex);
1:     }
1:   }
1: 
1:   @Override public Map<String, String> getCommittedIndexFile(Segment segment) throws IOException {
1:     Map<String, String> indexFileStore = new HashMap<>();
1:     Map<String, List<String>> snapShot = readCommittedIndexFileSnapShot.getSegmentIndexFileMap();
1:     String segName;
1:     if (segment.getSegmentNo() != null) {
1:       segName = segment.getSegmentNo();
1:     } else {
1:       segName = segment.getSegmentFileName();
1:     }
1:     List<String> index = snapShot.get(segName);
1:     for (String indexPath : index) {
0:       indexFileStore.put(indexPath, null);
1:     }
1:     return indexFileStore;
1:   }
1: 
1:   private String getSegmentID(String carbonIndexFileName, String indexFilePath) {
1:     if (indexFilePath.contains("/Fact/Part0/Segment_")) {
1:       // This is CarbonFile case where the Index files are present inside the Segment Folder
1:       // So the Segment has to be extracted from the path not from the CarbonIndex file.
1:       String segString = indexFilePath.substring(0, indexFilePath.lastIndexOf("/") + 1);
0:       String segName = segString
0:           .substring(segString.lastIndexOf("_") + 1, segString.lastIndexOf("/"));
1:       return segName;
1:     } else {
1:       String fileName = carbonIndexFileName;
1:       String segId = fileName.substring(fileName.lastIndexOf("-") + 1, fileName.lastIndexOf("."));
1:       return segId;
1:     }
1:   }
1: 
1:   @Override public void takeCarbonIndexFileSnapShot() throws IOException {
1:     // Read the current file Path get the list of indexes from the path.
1:     CarbonFile file = FileFactory.getCarbonFile(carbonFilePath);
0:     Map<String, List<String>> indexFileStore = new HashMap<>();
1:     if (file.isDirectory()) {
0:       CarbonFile[] carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(carbonFilePath);
0:       for (int i = 0; i < carbonIndexFiles.length; i++) {
0:         // TODO. If Required to support merge index, then this code has to be modified.
0:         // TODO. Nested File Paths.
0:         if (carbonIndexFiles[i].getName().endsWith(CarbonTablePath.INDEX_FILE_EXT)) {
0:           // Get Segment Name from the IndexFile.
0:           String segId =
0:               getSegmentID(carbonIndexFiles[i].getName(), carbonIndexFiles[i].getAbsolutePath());
0:           // TODO. During Partition table handling, place Segment File Name.
0:           List<String> indexList;
0:           if (indexFileStore.get(segId) == null) {
0:             indexList = new ArrayList<>(1);
1:           } else {
0:             // Entry is already present.
0:             indexList = indexFileStore.get(segId);
1:           }
0:           indexList.add(carbonIndexFiles[i].getAbsolutePath());
0:           indexFileStore.put(segId, indexList);
1:         }
1:       }
0:       ReadCommittedIndexFileSnapShot readCommittedIndexFileSnapShot =
0:           new ReadCommittedIndexFileSnapShot(indexFileStore);
0:       this.readCommittedIndexFileSnapShot = readCommittedIndexFileSnapShot;
0:       prepareLoadMetadata();
1:     } else {
1:       throw new IOException("Path is not pointing to directory");
1:     }
1:   }
1: 
1: }
author:manishgupta88
-------------------------------------------------------------------------------
commit:6118711
/////////////////////////////////////////////////////////////////////////
0:           String indexFilePath =
0:               FileFactory.getUpdatedFilePath(carbonIndexFiles[i].getAbsolutePath());
0:               getSegmentID(carbonIndexFiles[i].getName(), indexFilePath);
/////////////////////////////////////////////////////////////////////////
0:           indexList.add(indexFilePath);
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:   private String segmentId;
1:   /**
1:    * a new constructor of this class
1:    *
1:    * @param path      carbon file path
1:    * @param segmentId segment id
1:    */
0:   public LatestFilesReadCommittedScope(String path, String segmentId) {
1:     Objects.requireNonNull(path);
1:     this.segmentId = segmentId;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * a new constructor with path
1:    *
1:    * @param path carbon file path
1:    */
0:   public LatestFilesReadCommittedScope(String path) {
0:     this(path, null);
0:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (null == index) {
1:       index = new LinkedList<>();
0:     }
0:   @Override public SegmentRefreshInfo getCommittedSegmentRefreshInfo(
/////////////////////////////////////////////////////////////////////////
0:       @Override
0:       public boolean accept(CarbonFile file) {
0:             .endsWith(CarbonTablePath.CARBON_DATA_EXT) || file.getName().endsWith("Fact");
/////////////////////////////////////////////////////////////////////////
1:     CarbonFile[] carbonIndexFiles = null;
1:       if (segmentId == null) {
0:         carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(carbonFilePath);
1:       } else {
1:         String segmentPath = CarbonTablePath.getSegmentPath(carbonFilePath, segmentId);
0:         carbonIndexFiles = SegmentIndexFileStore.getCarbonIndexFiles(segmentPath);
0:       }
author:rahulforallp
-------------------------------------------------------------------------------
commit:f1a6c7c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.mutate.UpdateVO;
1: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
/////////////////////////////////////////////////////////////////////////
0:   public LatestFilesReadCommittedScope(String path)  {
/////////////////////////////////////////////////////////////////////////
0:   @Override public SegmentRefreshInfo getCommitedSegmentRefreshInfo(
0:       Segment segment, UpdateVO updateVo) throws IOException {
1:     Map<String, SegmentRefreshInfo> snapShot =
1:         readCommittedIndexFileSnapShot.getSegmentTimestampUpdaterMap();
1:     String segName;
1:     if (segment.getSegmentNo() != null) {
1:       segName = segment.getSegmentNo();
0:     } else {
1:       segName = segment.getSegmentFileName();
0:     }
1:     SegmentRefreshInfo segmentRefreshInfo = snapShot.get(segName);
1:     return segmentRefreshInfo;
0:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     Map<String, SegmentRefreshInfo> segmentTimestampUpdaterMap = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
0:           SegmentRefreshInfo segmentRefreshInfo;
0:             segmentRefreshInfo =
0:                 new SegmentRefreshInfo(carbonIndexFiles[i].getLastModifiedTime(), 0);
0:             segmentTimestampUpdaterMap.put(segId, segmentRefreshInfo);
0:             segmentRefreshInfo = segmentTimestampUpdaterMap.get(segId);
0:           if (segmentRefreshInfo.getSegmentUpdatedTimestamp() < carbonIndexFiles[i]
0:               .getLastModifiedTime()) {
0:             segmentRefreshInfo
0:                 .setSegmentUpdatedTimestamp(carbonIndexFiles[i].getLastModifiedTime());
0:           }
0:           segmentRefreshInfo.setCountOfFileInSegment(indexList.size());
0:           new ReadCommittedIndexFileSnapShot(indexFileStore, segmentTimestampUpdaterMap);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8e7fceb
/////////////////////////////////////////////////////////////////////////
0:       throw new IOException("No files are present in the table location :" + carbonFilePath);
author:sounakr
-------------------------------------------------------------------------------
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:  * This is a readCommittedScope for non transactional carbon table
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
1: 
============================================================================