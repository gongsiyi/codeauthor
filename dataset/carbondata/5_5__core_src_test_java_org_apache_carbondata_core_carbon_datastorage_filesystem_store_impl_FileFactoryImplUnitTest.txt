1:9e66ff7: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9e66ff7:  *
1:9e66ff7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9e66ff7:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:9e66ff7:  */
1:9e66ff7: 
1:9e66ff7: package org.apache.carbondata.core.carbon.datastorage.filesystem.store.impl;
1:9e66ff7: 
1:859d71c: import java.io.DataOutputStream;
1:9e66ff7: import java.io.File;
1:40c31e8: import java.io.FileWriter;
1:9e66ff7: import java.io.IOException;
1:9e66ff7: 
1:40c31e8: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:ce09aaa: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:9e66ff7: 
1:9e66ff7: import mockit.Mock;
1:9e66ff7: import mockit.MockUp;
1:9e66ff7: import org.apache.hadoop.fs.FileSystem;
1:9e66ff7: import org.apache.hadoop.fs.Path;
1:9e66ff7: import org.junit.AfterClass;
1:9e66ff7: import org.junit.BeforeClass;
1:9e66ff7: import org.junit.Test;
1:9e66ff7: 
1:9e66ff7: import static junit.framework.TestCase.assertNotNull;
1:9e66ff7: import static org.junit.Assert.assertEquals;
1:9e66ff7: import static org.junit.Assert.assertFalse;
1:9e66ff7: import static org.junit.Assert.assertTrue;
1:9e66ff7: 
1:9e66ff7: public class FileFactoryImplUnitTest {
1:9e66ff7: 
1:9e66ff7:   private static String filePath;
1:9e66ff7: 
1:345fb65:   @AfterClass
1:345fb65:   public static void tearDown() {
1:859d71c:     cleanUp();
1:859d71c:   }
1:859d71c: 
1:859d71c:   private static void cleanUp() {
1:9e66ff7:     File file = new File(filePath);
1:9e66ff7:     if (file.exists()) {
1:9e66ff7:       file.delete();
1:9e66ff7:     }
1:345fb65: 
1:345fb65:     File file1 = new File(".TestFileFactory.carbondata.crc");
1:345fb65:     if (file1.exists()) {
1:345fb65:       file1.delete();
1:345fb65:     }
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @BeforeClass public static void setUp() {
1:9e66ff7:     filePath = "TestFileFactory.carbondata";
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForVIEWFSType() throws IOException {
1:9e66ff7:     FileFactory.isFileExist("fakefilePath", FileFactory.FileType.VIEWFS);
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForDefaultType() throws IOException {
1:9e66ff7:     FileFactory.isFileExist("fakefilePath", FileFactory.FileType.LOCAL);
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForDefaultTypeWithPerformFileCheck() throws IOException {
1:9e66ff7:     assertTrue(FileFactory.isFileExist(filePath, FileFactory.FileType.LOCAL, true));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForDefaultTypeWithOutPerformFileCheck() throws IOException {
1:9e66ff7:     assertFalse(FileFactory.isFileExist("fakefilePath", FileFactory.FileType.LOCAL, false));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForVIEWFSTypeWithPerformFileCheck() throws IOException {
1:9e66ff7:     assertTrue(FileFactory.isFileExist(filePath, FileFactory.FileType.VIEWFS, true));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testFileExistsForVIEWFSTypeWithOutPerformFileCheck() throws IOException {
1:9e66ff7:     assertFalse(FileFactory.isFileExist("fakefilePath", FileFactory.FileType.VIEWFS, false));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewFileWithDefaultFileType() throws IOException {
1:859d71c:     cleanUp();
1:9e66ff7:     assertTrue(FileFactory.createNewFile(filePath, FileFactory.FileType.LOCAL));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewLockFileWithDefaultFileType() throws IOException {
1:859d71c:     cleanUp();
1:9e66ff7:     assertTrue(FileFactory.createNewLockFile(filePath, FileFactory.FileType.LOCAL));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewLockFileWithViewFsFileType() throws IOException {
1:859d71c:     cleanUp();
1:9e66ff7:     assertTrue(FileFactory.createNewLockFile(filePath, FileFactory.FileType.VIEWFS));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewLockFileWithViewFsFileTypeWhenFileExists() throws IOException {
1:9e66ff7:     assertFalse(FileFactory.createNewLockFile(filePath, FileFactory.FileType.VIEWFS));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewFileWithDefaultFileTypeWhenFileExists() throws IOException {
1:9e66ff7:     assertFalse(FileFactory.createNewFile(filePath, FileFactory.FileType.LOCAL));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewFileWithVIEWFSFileType() throws IOException {
1:9e66ff7:     File file = new File(filePath);
1:9e66ff7:     if (file.exists()) {
1:9e66ff7:       file.delete();
1:9e66ff7:     }
1:9e66ff7:     assertTrue(FileFactory.createNewFile(filePath, FileFactory.FileType.VIEWFS));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testCreateNewFileWithVIEWFSFileTypeWhenFileExists() throws IOException {
1:9e66ff7:     assertFalse(FileFactory.createNewFile(filePath, FileFactory.FileType.VIEWFS));
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testMkDirWithVIEWFSFileType() throws IOException {
1:9e66ff7:     new MockUp<FileSystem>() {
1:9e66ff7:       @SuppressWarnings("unused") @Mock public boolean mkdirs(Path file) throws IOException {
1:9e66ff7:         {
1:9e66ff7:           return true;
1:9e66ff7:         }
1:9e66ff7:       }
1:9e66ff7:     };
4:9e66ff7:     tearDown();
1:9e66ff7:     assertTrue(FileFactory.mkdirs(filePath, FileFactory.FileType.VIEWFS));
1:9e66ff7:   }
1:9e66ff7: 
1:859d71c:   @Test public void testGetDataOutputStreamUsingAppendeForException() throws IOException {
1:859d71c:     DataOutputStream outputStream = null;
1:9e66ff7:     try {
1:859d71c:       outputStream = FileFactory.getDataOutputStreamUsingAppend(filePath, FileFactory.FileType.VIEWFS);
1:9e66ff7:     } catch (Exception exception) {
1:9e66ff7:       assertEquals("Not supported", exception.getMessage());
1:859d71c:     } finally {
1:859d71c:       if (null != outputStream) {
1:859d71c:         outputStream.close();
1:859d71c:       }
1:9e66ff7:     }
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void getDataOutputStreamForVIEWFSType() throws IOException {
1:859d71c:     DataOutputStream outputStream = FileFactory.getDataOutputStream(filePath, FileFactory.FileType.VIEWFS);
1:859d71c:     assertNotNull(outputStream);
1:859d71c:     outputStream.close();
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void getDataOutputStreamForLocalType() throws IOException {
1:859d71c:     DataOutputStream outputStream = FileFactory.getDataOutputStream(filePath, FileFactory.FileType.LOCAL);
1:859d71c:     assertNotNull(outputStream);
1:859d71c:     outputStream.close();
1:9e66ff7:   }
1:9e66ff7: 
1:9e66ff7:   @Test public void testGetCarbonFile() throws IOException {
1:9e66ff7:     FileFactory.getDataOutputStream(filePath, FileFactory.FileType.VIEWFS);
1:9e66ff7:     assertNotNull(FileFactory.getCarbonFile(filePath, FileFactory.FileType.HDFS));
1:9e66ff7:   }
1:40c31e8: 
1:40c31e8:   @Test public void testTruncateFile() {
1:40c31e8:     FileWriter writer = null;
1:40c31e8:     String path = null;
1:40c31e8:     try {
1:40c31e8:       // generate a file
1:40c31e8:       path = new File("target/truncatFile").getCanonicalPath();
1:40c31e8:       writer = new FileWriter(path);
1:40c31e8:       for (int i = 0; i < 4000; i++) {
1:40c31e8:         writer.write("test truncate file method");
1:40c31e8:       }
1:40c31e8:       writer.close();
1:40c31e8:       CarbonFile file = FileFactory.getCarbonFile(path);
1:40c31e8:       assertTrue(file.getSize() == 100000L);
1:40c31e8: 
1:40c31e8:       // truncate file to 4000 bytes
1:40c31e8:       FileFactory.truncateFile(
1:40c31e8:           path,
1:40c31e8:           FileFactory.getFileType(path),
1:40c31e8:           4000);
1:40c31e8:       file = FileFactory.getCarbonFile(path);
1:40c31e8:       assertEquals(file.getSize(), 4000L);
1:40c31e8:     } catch (IOException e) {
1:40c31e8:       e.printStackTrace();
1:40c31e8:       assertTrue(e.getMessage(), false);
1:40c31e8:     } finally {
1:40c31e8:       if (writer != null) {
1:40c31e8:         try {
1:40c31e8:           writer.close();
1:40c31e8:         } catch (IOException e) {
1:40c31e8:           e.printStackTrace();
1:40c31e8:         }
1:40c31e8:       }
1:40c31e8:       if (path != null) {
1:40c31e8:         try {
1:40c31e8:           FileFactory.deleteFile(path, FileFactory.getFileType(path));
1:40c31e8:         } catch (IOException e) {
1:40c31e8:           e.printStackTrace();
1:40c31e8:         }
1:40c31e8:       }
1:40c31e8:     }
1:40c31e8:   }
1:9e66ff7: }
1:9e66ff7: 
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:859d71c
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
/////////////////////////////////////////////////////////////////////////
1:     cleanUp();
1:   }
1: 
1:   private static void cleanUp() {
/////////////////////////////////////////////////////////////////////////
1:     cleanUp();
1:     cleanUp();
1:     cleanUp();
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testGetDataOutputStreamUsingAppendeForException() throws IOException {
1:     DataOutputStream outputStream = null;
1:       outputStream = FileFactory.getDataOutputStreamUsingAppend(filePath, FileFactory.FileType.VIEWFS);
1:     } finally {
1:       if (null != outputStream) {
1:         outputStream.close();
1:       }
1:     DataOutputStream outputStream = FileFactory.getDataOutputStream(filePath, FileFactory.FileType.VIEWFS);
1:     assertNotNull(outputStream);
1:     outputStream.close();
1:     DataOutputStream outputStream = FileFactory.getDataOutputStream(filePath, FileFactory.FileType.LOCAL);
1:     assertNotNull(outputStream);
1:     outputStream.close();
author:QiangCai
-------------------------------------------------------------------------------
commit:40c31e8
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileWriter;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test public void testTruncateFile() {
1:     FileWriter writer = null;
1:     String path = null;
1:     try {
1:       // generate a file
1:       path = new File("target/truncatFile").getCanonicalPath();
1:       writer = new FileWriter(path);
1:       for (int i = 0; i < 4000; i++) {
1:         writer.write("test truncate file method");
1:       }
1:       writer.close();
1:       CarbonFile file = FileFactory.getCarbonFile(path);
1:       assertTrue(file.getSize() == 100000L);
1: 
1:       // truncate file to 4000 bytes
1:       FileFactory.truncateFile(
1:           path,
1:           FileFactory.getFileType(path),
1:           4000);
1:       file = FileFactory.getCarbonFile(path);
1:       assertEquals(file.getSize(), 4000L);
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:       assertTrue(e.getMessage(), false);
1:     } finally {
1:       if (writer != null) {
1:         try {
1:           writer.close();
1:         } catch (IOException e) {
1:           e.printStackTrace();
1:         }
1:       }
1:       if (path != null) {
1:         try {
1:           FileFactory.deleteFile(path, FileFactory.getFileType(path));
1:         } catch (IOException e) {
1:           e.printStackTrace();
1:         }
1:       }
1:     }
1:   }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
author:chenliang613
-------------------------------------------------------------------------------
commit:345fb65
/////////////////////////////////////////////////////////////////////////
1:   @AfterClass
1:   public static void tearDown() {
1: 
1:     File file1 = new File(".TestFileFactory.carbondata.crc");
1:     if (file1.exists()) {
1:       file1.delete();
1:     }
author:anubhav100
-------------------------------------------------------------------------------
commit:9e66ff7
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.carbon.datastorage.filesystem.store.impl;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
0: import org.apache.carbondata.core.datastorage.store.impl.FileFactory;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static junit.framework.TestCase.assertNotNull;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class FileFactoryImplUnitTest {
1: 
1:   private static String filePath;
1: 
0:   @AfterClass public static void tearDown() {
1:     File file = new File(filePath);
1:     if (file.exists()) {
1:       file.delete();
1:     }
1:   }
1: 
1:   @BeforeClass public static void setUp() {
1:     filePath = "TestFileFactory.carbondata";
1:   }
1: 
1:   @Test public void testFileExistsForVIEWFSType() throws IOException {
1:     FileFactory.isFileExist("fakefilePath", FileFactory.FileType.VIEWFS);
1:   }
1: 
1:   @Test public void testFileExistsForDefaultType() throws IOException {
1:     FileFactory.isFileExist("fakefilePath", FileFactory.FileType.LOCAL);
1:   }
1: 
1:   @Test public void testFileExistsForDefaultTypeWithPerformFileCheck() throws IOException {
1:     assertTrue(FileFactory.isFileExist(filePath, FileFactory.FileType.LOCAL, true));
1:   }
1: 
1:   @Test public void testFileExistsForDefaultTypeWithOutPerformFileCheck() throws IOException {
1:     assertFalse(FileFactory.isFileExist("fakefilePath", FileFactory.FileType.LOCAL, false));
1:   }
1: 
1:   @Test public void testFileExistsForVIEWFSTypeWithPerformFileCheck() throws IOException {
1:     assertTrue(FileFactory.isFileExist(filePath, FileFactory.FileType.VIEWFS, true));
1:   }
1: 
1:   @Test public void testFileExistsForVIEWFSTypeWithOutPerformFileCheck() throws IOException {
1:     assertFalse(FileFactory.isFileExist("fakefilePath", FileFactory.FileType.VIEWFS, false));
1:   }
1: 
1:   @Test public void testCreateNewFileWithDefaultFileType() throws IOException {
1:     tearDown();
1:     assertTrue(FileFactory.createNewFile(filePath, FileFactory.FileType.LOCAL));
1:   }
1: 
1:   @Test public void testCreateNewLockFileWithDefaultFileType() throws IOException {
1:     tearDown();
1:     assertTrue(FileFactory.createNewLockFile(filePath, FileFactory.FileType.LOCAL));
1:   }
1: 
1:   @Test public void testCreateNewLockFileWithViewFsFileType() throws IOException {
1:     tearDown();
1:     assertTrue(FileFactory.createNewLockFile(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
1:   @Test public void testCreateNewLockFileWithViewFsFileTypeWhenFileExists() throws IOException {
1:     assertFalse(FileFactory.createNewLockFile(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
1:   @Test public void testCreateNewFileWithDefaultFileTypeWhenFileExists() throws IOException {
1:     assertFalse(FileFactory.createNewFile(filePath, FileFactory.FileType.LOCAL));
1:   }
1: 
1:   @Test public void testCreateNewFileWithVIEWFSFileType() throws IOException {
1:     File file = new File(filePath);
1:     if (file.exists()) {
1:       file.delete();
1:     }
1:     assertTrue(FileFactory.createNewFile(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
1:   @Test public void testCreateNewFileWithVIEWFSFileTypeWhenFileExists() throws IOException {
1:     assertFalse(FileFactory.createNewFile(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
1:   @Test public void testMkDirWithVIEWFSFileType() throws IOException {
1:     new MockUp<FileSystem>() {
1:       @SuppressWarnings("unused") @Mock public boolean mkdirs(Path file) throws IOException {
1:         {
1:           return true;
1:         }
1:       }
1:     };
1:     tearDown();
1:     assertTrue(FileFactory.mkdirs(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
0:   @Test public void testGetDataOutputStreamUsingAppendeForException() {
1:     try {
0:       FileFactory.getDataOutputStreamUsingAppend(filePath, FileFactory.FileType.VIEWFS);
1:     } catch (Exception exception) {
1:       assertEquals("Not supported", exception.getMessage());
1:     }
1:   }
1: 
1:   @Test public void getDataOutputStreamForVIEWFSType() throws IOException {
0:     assertNotNull(FileFactory.getDataOutputStream(filePath, FileFactory.FileType.VIEWFS));
1:   }
1: 
1:   @Test public void getDataOutputStreamForLocalType() throws IOException {
0:     assertNotNull(FileFactory.getDataOutputStream(filePath, FileFactory.FileType.LOCAL));
1:   }
1: 
1:   @Test public void testGetCarbonFile() throws IOException {
1:     FileFactory.getDataOutputStream(filePath, FileFactory.FileType.VIEWFS);
1:     assertNotNull(FileFactory.getCarbonFile(filePath, FileFactory.FileType.HDFS));
1:   }
1: }
1: 
============================================================================