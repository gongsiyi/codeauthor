1:638ed1f: /*
1:638ed1f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:638ed1f:  * contributor license agreements.  See the NOTICE file distributed with
1:638ed1f:  * this work for additional information regarding copyright ownership.
1:638ed1f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:638ed1f:  * (the "License"); you may not use this file except in compliance with
1:638ed1f:  * the License.  You may obtain a copy of the License at
1:638ed1f:  *
1:638ed1f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:638ed1f:  *
1:638ed1f:  * Unless required by applicable law or agreed to in writing, software
1:638ed1f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:638ed1f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:638ed1f:  * See the License for the specific language governing permissions and
1:638ed1f:  * limitations under the License.
2:638ed1f:  */
1:638ed1f: package org.apache.carbondata.core.scan.executor.impl;
1:638ed1f: 
1:638ed1f: import java.io.IOException;
1:638ed1f: import java.util.List;
1:638ed1f: import java.util.concurrent.ExecutorService;
1:638ed1f: import java.util.concurrent.Executors;
1:638ed1f: 
1:638ed1f: import org.apache.carbondata.common.CarbonIterator;
1:638ed1f: import org.apache.carbondata.common.logging.LogService;
1:638ed1f: import org.apache.carbondata.common.logging.LogServiceFactory;
1:638ed1f: import org.apache.carbondata.core.scan.executor.exception.QueryExecutionException;
1:638ed1f: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:638ed1f: import org.apache.carbondata.core.scan.model.QueryModel;
1:2fc0ad3: import org.apache.carbondata.core.scan.result.iterator.SearchModeVectorResultIterator;
1:638ed1f: import org.apache.carbondata.core.util.CarbonProperties;
1:2fc0ad3: 
1:3ff574d: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_SEARCH_MODE_SCAN_THREAD;
1:638ed1f: 
1:2a9604c: import org.apache.hadoop.conf.Configuration;
1:2a9604c: 
1:3ff574d: /**
1:3ff574d:  * Below class will be used to execute the detail query and returns columnar vectors.
1:3ff574d:  */
1:638ed1f: public class SearchModeVectorDetailQueryExecutor extends AbstractQueryExecutor<Object> {
1:638ed1f:   private static final LogService LOGGER =
1:638ed1f:           LogServiceFactory.getLogService(SearchModeVectorDetailQueryExecutor.class.getName());
1:3ff574d:   private static ExecutorService executorService = null;
1:638ed1f: 
1:2a9604c:   public SearchModeVectorDetailQueryExecutor(Configuration configuration) {
1:2a9604c:     super(configuration);
1:6aadfe7:     if (executorService == null) {
1:6aadfe7:       initThreadPool();
1:6aadfe7:     }
1:3ff574d:   }
1:3ff574d: 
1:3ff574d:   private static synchronized void initThreadPool() {
1:2f85381:     int defaultValue = Runtime.getRuntime().availableProcessors();
1:638ed1f:     int nThread;
1:638ed1f:     try {
1:638ed1f:       nThread = Integer.parseInt(CarbonProperties.getInstance()
1:2f85381:               .getProperty(CARBON_SEARCH_MODE_SCAN_THREAD, String.valueOf(defaultValue)));
1:638ed1f:     } catch (NumberFormatException e) {
1:2f85381:       nThread = defaultValue;
1:3ff574d:       LOGGER.warn("The " + CARBON_SEARCH_MODE_SCAN_THREAD + " is invalid. "
1:3ff574d:           + "Using the default value " + nThread);
2:638ed1f:     }
1:5204818:     if (nThread > 0) {
1:2fc0ad3:       executorService = Executors.newFixedThreadPool(nThread);
1:5204818:     } else {
1:5204818:       executorService = Executors.newCachedThreadPool();
1:5204818:     }
1:638ed1f:   }
1:638ed1f: 
1:3ff574d:   public static synchronized void shutdownThreadPool() {
1:3ff574d:     // shutdown all threads immediately
1:3ff574d:     if (executorService != null) {
1:3ff574d:       executorService.shutdownNow();
1:3ff574d:       executorService = null;
1:3ff574d:     }
1:3ff574d:   }
1:3ff574d: 
1:638ed1f:   @Override
1:638ed1f:   public CarbonIterator<Object> execute(QueryModel queryModel)
1:638ed1f:       throws QueryExecutionException, IOException {
1:638ed1f:     List<BlockExecutionInfo> blockExecutionInfoList = getBlockExecutionInfos(queryModel);
1:7ef9164: 
1:2fc0ad3:     this.queryIterator = new SearchModeVectorResultIterator(
1:638ed1f:         blockExecutionInfoList,
1:638ed1f:         queryModel,
1:638ed1f:         executorService
1:638ed1f:     );
1:638ed1f:     return this.queryIterator;
1:3ff574d:   }
1:638ed1f: 
1:638ed1f: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public SearchModeVectorDetailQueryExecutor(Configuration configuration) {
1:     super(configuration);
author:xubo245
-------------------------------------------------------------------------------
commit:6aadfe7
/////////////////////////////////////////////////////////////////////////
0:   public SearchModeVectorDetailQueryExecutor() {
1:     if (executorService == null) {
1:       initThreadPool();
1:     }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:2f85381
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int defaultValue = Runtime.getRuntime().availableProcessors();
1:               .getProperty(CARBON_SEARCH_MODE_SCAN_THREAD, String.valueOf(defaultValue)));
1:       nThread = defaultValue;
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_SEARCH_MODE_SCAN_THREAD;
1: /**
1:  * Below class will be used to execute the detail query and returns columnar vectors.
1:  */
1:   private static ExecutorService executorService = null;
0:     initThreadPool();
1:   }
1: 
1:   private static synchronized void initThreadPool() {
0:               .getProperty(CARBON_SEARCH_MODE_SCAN_THREAD,
1:       LOGGER.warn("The " + CARBON_SEARCH_MODE_SCAN_THREAD + " is invalid. "
1:           + "Using the default value " + nThread);
/////////////////////////////////////////////////////////////////////////
1:   public static synchronized void shutdownThreadPool() {
1:     // shutdown all threads immediately
1:     if (executorService != null) {
1:       executorService.shutdownNow();
1:       executorService = null;
1:     }
1:   }
1: 
0:     if (executorService == null) {
0:       initThreadPool();
1:     }
author:Manhua
-------------------------------------------------------------------------------
commit:2fc0ad3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.iterator.SearchModeVectorResultIterator;
1: 
/////////////////////////////////////////////////////////////////////////
1:       executorService = Executors.newFixedThreadPool(nThread);
/////////////////////////////////////////////////////////////////////////
1:     this.queryIterator = new SearchModeVectorResultIterator(
commit:5204818
/////////////////////////////////////////////////////////////////////////
0:               .getProperty(CarbonCommonConstants.CARBON_SEARCH_MODE_SCAN_THREAD,
0:                       CarbonCommonConstants.CARBON_SEARCH_MODE_SCAN_THREAD_DEFAULT));
0:       nThread = Integer.parseInt(CarbonCommonConstants.CARBON_SEARCH_MODE_SCAN_THREAD_DEFAULT);
1:     if (nThread > 0) {
0:       executorService =  Executors.newFixedThreadPool(nThread);
1:     } else {
1:       executorService = Executors.newCachedThreadPool();
1:     }
commit:638ed1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.executor.impl;
1: 
1: import java.io.IOException;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import org.apache.carbondata.common.CarbonIterator;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.scan.executor.exception.QueryExecutionException;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.model.QueryModel;
0: import org.apache.carbondata.core.scan.result.iterator.SearchModeResultIterator;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
0: /**
0:  * Below class will be used to execute the detail query and returns columnar vectors.
1:  */
1: public class SearchModeVectorDetailQueryExecutor extends AbstractQueryExecutor<Object> {
1:   private static final LogService LOGGER =
1:           LogServiceFactory.getLogService(SearchModeVectorDetailQueryExecutor.class.getName());
0:   private static ExecutorService executorService;
1: 
0:   static {
1:     int nThread;
1:     try {
1:       nThread = Integer.parseInt(CarbonProperties.getInstance()
0:               .getProperty(CarbonCommonConstants.CARBON_SEARCH_MODE_THREAD,
0:                       CarbonCommonConstants.CARBON_SEARCH_MODE_THREAD_DEFAULT));
1:     } catch (NumberFormatException e) {
0:       nThread = Integer.parseInt(CarbonCommonConstants.CARBON_SEARCH_MODE_THREAD_DEFAULT);
0:       LOGGER.warn("The carbon.search.mode.thread is invalid. Using the default value " + nThread);
1:     }
0:     executorService = Executors.newFixedThreadPool(nThread);
1:   }
1: 
1:   @Override
1:   public CarbonIterator<Object> execute(QueryModel queryModel)
1:       throws QueryExecutionException, IOException {
1:     List<BlockExecutionInfo> blockExecutionInfoList = getBlockExecutionInfos(queryModel);
0:     this.queryIterator = new SearchModeResultIterator(
1:         blockExecutionInfoList,
1:         queryModel,
1:         executorService
1:     );
1:     return this.queryIterator;
1:   }
1: 
1: }
============================================================================