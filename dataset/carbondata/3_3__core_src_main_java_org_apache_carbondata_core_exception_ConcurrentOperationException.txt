1:11353e2: /*
1:11353e2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11353e2:  * contributor license agreements.  See the NOTICE file distributed with
1:11353e2:  * this work for additional information regarding copyright ownership.
1:11353e2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11353e2:  * (the "License"); you may not use this file except in compliance with
1:11353e2:  * the License.  You may obtain a copy of the License at
1:89cfd8e:  *
1:11353e2:  *    http://www.apache.org/licenses/LICENSE-2.0
3:11353e2:  *
1:11353e2:  * Unless required by applicable law or agreed to in writing, software
1:11353e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:11353e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11353e2:  * See the License for the specific language governing permissions and
1:11353e2:  * limitations under the License.
1:89cfd8e:  */
2:11353e2: 
1:89cfd8e: package org.apache.carbondata.core.exception;
1:89cfd8e: 
1:859d71c: import org.apache.carbondata.common.exceptions.sql.MalformedCarbonCommandException;
1:55bffbe: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:11353e2: 
1:859d71c: public class ConcurrentOperationException extends MalformedCarbonCommandException {
1:11353e2: 
1:55bffbe:   public ConcurrentOperationException(String dbName, String tableName, String command1,
1:55bffbe:       String command2) {
1:55bffbe:     super(command1 + " is in progress for table " + dbName + "." + tableName + ", " + command2 +
1:89cfd8e:         " operation is not allowed");
1:11353e2:   }
1:859d71c: 
1:55bffbe:   public ConcurrentOperationException(CarbonTable table, String command1, String command2) {
1:55bffbe:     this(table.getDatabaseName(), table.getTableName(), command1, command2);
1:55bffbe:   }
1:55bffbe: 
1:11353e2:   public String getMessage() {
1:55bffbe:     return super.getMessage();
1:11353e2:   }
1:11353e2: 
1:11353e2: }
1:11353e2: 
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:859d71c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.MalformedCarbonCommandException;
1: public class ConcurrentOperationException extends MalformedCarbonCommandException {
/////////////////////////////////////////////////////////////////////////
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:89cfd8e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.exception;
1: 
0: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: import org.apache.carbondata.common.annotations.InterfaceStability;
0: /**
0:  * This exception will be thrown when executing concurrent operations which
0:  * is not supported in carbon.
1:  *
0:  * For example, when INSERT OVERWRITE is executing, other operations are not
0:  * allowed, so this exception will be thrown
1:  */
0: @InterfaceAudience.User
0: @InterfaceStability.Stable
0: public class ConcurrentOperationException extends Exception {
1:         " operation is not allowed");
commit:55bffbe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: public class ConcurrentOperationException extends MalformedCarbonCommandException {
1:   public ConcurrentOperationException(String dbName, String tableName, String command1,
1:       String command2) {
1:     super(command1 + " is in progress for table " + dbName + "." + tableName + ", " + command2 +
0:       " operation is not allowed");
1:   public ConcurrentOperationException(CarbonTable table, String command1, String command2) {
1:     this(table.getDatabaseName(), table.getTableName(), command1, command2);
1:   }
1: 
1:     return super.getMessage();
author:SangeetaGulia
-------------------------------------------------------------------------------
commit:11353e2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
0: package org.apache.carbondata.spark.exception;
1: 
0: public class ConcurrentOperationException extends Exception {
1: 
0:   /**
0:    * The Error message.
0:    */
0:   private String msg = "";
1: 
0:   /**
0:    * Constructor
1:    *
0:    * @param msg The error message for this exception.
0:    */
0:   public ConcurrentOperationException(String msg) {
0:     super(msg);
0:     this.msg = msg;
1:   }
1: 
0:   /**
0:    * getMessage
0:    */
1:   public String getMessage() {
0:     return this.msg;
1:   }
1: 
1: }
============================================================================