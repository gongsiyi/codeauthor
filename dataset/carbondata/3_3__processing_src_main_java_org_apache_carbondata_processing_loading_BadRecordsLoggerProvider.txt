1:837fdd2: /*
1:837fdd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:837fdd2:  * contributor license agreements.  See the NOTICE file distributed with
1:837fdd2:  * this work for additional information regarding copyright ownership.
1:837fdd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:837fdd2:  * (the "License"); you may not use this file except in compliance with
1:837fdd2:  * the License.  You may obtain a copy of the License at
1:837fdd2:  *
1:837fdd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:837fdd2:  *
1:837fdd2:  * Unless required by applicable law or agreed to in writing, software
1:837fdd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:837fdd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:837fdd2:  * See the License for the specific language governing permissions and
1:837fdd2:  * limitations under the License.
1:837fdd2:  */
3:837fdd2: 
1:837fdd2: package org.apache.carbondata.processing.loading;
1:837fdd2: 
1:837fdd2: import org.apache.carbondata.common.constants.LoggerAction;
1:837fdd2: import org.apache.carbondata.core.constants.CarbonLoadOptionConstants;
1:837fdd2: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:7a1d12a: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:837fdd2: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1:837fdd2: 
1:837fdd2: /**
1:837fdd2:  * This class provides the BadRecordsLogger instance
1:837fdd2:  */
1:837fdd2: public class BadRecordsLoggerProvider {
1:837fdd2:   /**
1:837fdd2:    * method returns the BadRecordsLogger instance
1:837fdd2:    * @param configuration
1:837fdd2:    * @return
1:837fdd2:    */
1:837fdd2:   public static BadRecordsLogger createBadRecordLogger(CarbonDataLoadConfiguration configuration) {
1:837fdd2:     boolean badRecordsLogRedirect = false;
1:837fdd2:     boolean badRecordConvertNullDisable = false;
1:837fdd2:     boolean isDataLoadFail = false;
1:837fdd2:     boolean badRecordsLoggerEnable = Boolean.parseBoolean(
1:837fdd2:         configuration.getDataLoadProperty(DataLoadProcessorConstants.BAD_RECORDS_LOGGER_ENABLE)
1:837fdd2:             .toString());
1:837fdd2:     Object bad_records_action =
1:837fdd2:         configuration.getDataLoadProperty(DataLoadProcessorConstants.BAD_RECORDS_LOGGER_ACTION)
1:837fdd2:             .toString();
1:837fdd2:     if (null != bad_records_action) {
1:837fdd2:       LoggerAction loggerAction = null;
1:837fdd2:       try {
1:837fdd2:         loggerAction = LoggerAction.valueOf(bad_records_action.toString().toUpperCase());
1:837fdd2:       } catch (IllegalArgumentException e) {
1:837fdd2:         loggerAction = LoggerAction.FORCE;
3:837fdd2:       }
1:837fdd2:       switch (loggerAction) {
1:837fdd2:         case FORCE:
1:837fdd2:           badRecordConvertNullDisable = false;
1:837fdd2:           break;
1:837fdd2:         case REDIRECT:
1:837fdd2:           badRecordsLogRedirect = true;
1:837fdd2:           badRecordConvertNullDisable = true;
1:837fdd2:           break;
1:837fdd2:         case IGNORE:
1:837fdd2:           badRecordsLogRedirect = false;
1:837fdd2:           badRecordConvertNullDisable = true;
1:837fdd2:           break;
1:837fdd2:         case FAIL:
1:837fdd2:           isDataLoadFail = true;
1:837fdd2:           break;
1:4b98af2:       }
1:837fdd2:     }
1:837fdd2:     CarbonTableIdentifier identifier =
1:837fdd2:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:4b98af2: 
1:837fdd2:     return new BadRecordsLogger(identifier.getBadRecordLoggerKey(),
1:837fdd2:         identifier.getTableName() + '_' + System.currentTimeMillis(),
1:7a1d12a:         getBadLogStoreLocation(configuration), badRecordsLogRedirect,
1:4b98af2:         badRecordsLoggerEnable, badRecordConvertNullDisable, isDataLoadFail);
1:837fdd2:   }
1:837fdd2: 
1:7a1d12a:   public static String getBadLogStoreLocation(CarbonDataLoadConfiguration configuration) {
1:837fdd2:     String badLogStoreLocation = (String) configuration
1:837fdd2:         .getDataLoadProperty(CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORD_PATH);
1:7a1d12a:     return CarbonTablePath.generateBadRecordsPath(badLogStoreLocation, configuration.getSegmentId(),
1:7a1d12a:         configuration.getTaskNo(), configuration.isCarbonTransactionalTable());
1:837fdd2:   }
1:837fdd2: }
1:837fdd2: 
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:7a1d12a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
1:         getBadLogStoreLocation(configuration), badRecordsLogRedirect,
1:   public static String getBadLogStoreLocation(CarbonDataLoadConfiguration configuration) {
1:     return CarbonTablePath.generateBadRecordsPath(badLogStoreLocation, configuration.getSegmentId(),
1:         configuration.getTaskNo(), configuration.isCarbonTransactionalTable());
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:4b98af2
/////////////////////////////////////////////////////////////////////////
0:     String storeLocation = "";
0:     if (configuration.isCarbonTransactionalTable()) {
0:       storeLocation =
0:           identifier.getDatabaseName() + CarbonCommonConstants.FILE_SEPARATOR + identifier
0:               .getTableName() + CarbonCommonConstants.FILE_SEPARATOR + configuration.getSegmentId()
0:               + CarbonCommonConstants.FILE_SEPARATOR + configuration.getTaskNo();
0:     } else {
0:       storeLocation =
0:           "SdkWriterBadRecords" + CarbonCommonConstants.FILE_SEPARATOR + configuration.getTaskNo();
1:     }
1: 
0:         getBadLogStoreLocation(configuration, storeLocation), badRecordsLogRedirect,
1:         badRecordsLoggerEnable, badRecordConvertNullDisable, isDataLoadFail);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:837fdd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading;
1: 
0: import java.io.File;
1: 
1: import org.apache.carbondata.common.constants.LoggerAction;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.constants.CarbonLoadOptionConstants;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1: 
1: /**
1:  * This class provides the BadRecordsLogger instance
1:  */
1: public class BadRecordsLoggerProvider {
1:   /**
1:    * method returns the BadRecordsLogger instance
1:    * @param configuration
1:    * @return
1:    */
1:   public static BadRecordsLogger createBadRecordLogger(CarbonDataLoadConfiguration configuration) {
1:     boolean badRecordsLogRedirect = false;
1:     boolean badRecordConvertNullDisable = false;
1:     boolean isDataLoadFail = false;
1:     boolean badRecordsLoggerEnable = Boolean.parseBoolean(
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.BAD_RECORDS_LOGGER_ENABLE)
1:             .toString());
1:     Object bad_records_action =
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.BAD_RECORDS_LOGGER_ACTION)
1:             .toString();
1:     if (null != bad_records_action) {
1:       LoggerAction loggerAction = null;
1:       try {
1:         loggerAction = LoggerAction.valueOf(bad_records_action.toString().toUpperCase());
1:       } catch (IllegalArgumentException e) {
1:         loggerAction = LoggerAction.FORCE;
1:       }
1:       switch (loggerAction) {
1:         case FORCE:
1:           badRecordConvertNullDisable = false;
1:           break;
1:         case REDIRECT:
1:           badRecordsLogRedirect = true;
1:           badRecordConvertNullDisable = true;
1:           break;
1:         case IGNORE:
1:           badRecordsLogRedirect = false;
1:           badRecordConvertNullDisable = true;
1:           break;
1:         case FAIL:
1:           isDataLoadFail = true;
1:           break;
1:       }
1:     }
1:     CarbonTableIdentifier identifier =
1:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:     return new BadRecordsLogger(identifier.getBadRecordLoggerKey(),
1:         identifier.getTableName() + '_' + System.currentTimeMillis(),
0:         getBadLogStoreLocation(configuration,
0:             identifier.getDatabaseName() + CarbonCommonConstants.FILE_SEPARATOR + identifier
0:                 .getTableName() + CarbonCommonConstants.FILE_SEPARATOR + configuration
0:                 .getSegmentId() + CarbonCommonConstants.FILE_SEPARATOR + configuration.getTaskNo()),
0:         badRecordsLogRedirect, badRecordsLoggerEnable, badRecordConvertNullDisable, isDataLoadFail);
1:   }
1: 
0:   public static String getBadLogStoreLocation(CarbonDataLoadConfiguration configuration,
0:       String storeLocation) {
1:     String badLogStoreLocation = (String) configuration
1:         .getDataLoadProperty(CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORD_PATH);
0:     if (null == badLogStoreLocation) {
0:       badLogStoreLocation =
0:           CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_BADRECORDS_LOC);
1:     }
0:     badLogStoreLocation = badLogStoreLocation + File.separator + storeLocation;
1: 
0:     return badLogStoreLocation;
1:   }
1: }
1: 
============================================================================