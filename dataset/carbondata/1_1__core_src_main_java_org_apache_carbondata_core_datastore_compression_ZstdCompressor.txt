1:8f08c4a: /*
1:8f08c4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8f08c4a:  * contributor license agreements.  See the NOTICE file distributed with
1:8f08c4a:  * this work for additional information regarding copyright ownership.
1:8f08c4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8f08c4a:  * (the "License"); you may not use this file except in compliance with
1:8f08c4a:  * the License.  You may obtain a copy of the License at
1:8f08c4a:  *
1:8f08c4a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8f08c4a:  *
1:8f08c4a:  * Unless required by applicable law or agreed to in writing, software
1:8f08c4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f08c4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f08c4a:  * See the License for the specific language governing permissions and
1:8f08c4a:  * limitations under the License.
1:8f08c4a:  */
1:8f08c4a: 
1:8f08c4a: package org.apache.carbondata.core.datastore.compression;
1:8f08c4a: 
1:8f08c4a: import java.io.IOException;
1:8f08c4a: import java.nio.ByteBuffer;
1:8f08c4a: import java.nio.DoubleBuffer;
1:8f08c4a: import java.nio.FloatBuffer;
1:8f08c4a: import java.nio.IntBuffer;
1:8f08c4a: import java.nio.LongBuffer;
1:8f08c4a: import java.nio.ShortBuffer;
1:8f08c4a: 
1:8f08c4a: import org.apache.carbondata.core.util.ByteUtil;
1:8f08c4a: 
1:8f08c4a: import com.github.luben.zstd.Zstd;
1:8f08c4a: 
1:8f08c4a: public class ZstdCompressor implements Compressor {
1:8f08c4a:   private static final int COMPRESS_LEVEL = 3;
1:8f08c4a: 
1:8f08c4a:   public ZstdCompressor() {
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public String getName() {
1:8f08c4a:     return "zstd";
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressByte(byte[] unCompInput) {
1:8f08c4a:     return Zstd.compress(unCompInput, COMPRESS_LEVEL);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressByte(byte[] unCompInput, int byteSize) {
1:8f08c4a:     return Zstd.compress(unCompInput, COMPRESS_LEVEL);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] unCompressByte(byte[] compInput) {
1:8f08c4a:     long decompressedSize = Zstd.decompressedSize(compInput);
1:8f08c4a:     return Zstd.decompress(compInput, (int) decompressedSize);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] unCompressByte(byte[] compInput, int offset, int length) {
1:8f08c4a:     // todo: how to avoid memory copy
1:8f08c4a:     byte[] dstBytes = new byte[length];
1:8f08c4a:     System.arraycopy(compInput, offset, dstBytes, 0, length);
1:8f08c4a:     return unCompressByte(dstBytes);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressShort(short[] unCompInput) {
1:8f08c4a:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_SHORT);
1:8f08c4a:     unCompBuffer.asShortBuffer().put(unCompInput);
1:8f08c4a:     return compressByte(unCompBuffer.array());
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public short[] unCompressShort(byte[] compInput, int offset, int length) {
1:8f08c4a:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:8f08c4a:     ShortBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asShortBuffer();
1:8f08c4a:     short[] shorts = new short[unCompArray.length / ByteUtil.SIZEOF_SHORT];
1:8f08c4a:     unCompBuffer.get(shorts);
1:8f08c4a:     return shorts;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressInt(int[] unCompInput) {
1:8f08c4a:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_INT);
1:8f08c4a:     unCompBuffer.asIntBuffer().put(unCompInput);
1:8f08c4a:     return compressByte(unCompBuffer.array());
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public int[] unCompressInt(byte[] compInput, int offset, int length) {
1:8f08c4a:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:8f08c4a:     IntBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asIntBuffer();
1:8f08c4a:     int[] ints = new int[unCompArray.length / ByteUtil.SIZEOF_INT];
1:8f08c4a:     unCompBuffer.get(ints);
1:8f08c4a:     return ints;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressLong(long[] unCompInput) {
1:8f08c4a:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_LONG);
1:8f08c4a:     unCompBuffer.asLongBuffer().put(unCompInput);
1:8f08c4a:     return compressByte(unCompBuffer.array());
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public long[] unCompressLong(byte[] compInput, int offset, int length) {
1:8f08c4a:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:8f08c4a:     LongBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asLongBuffer();
1:8f08c4a:     long[] longs = new long[unCompArray.length / ByteUtil.SIZEOF_LONG];
1:8f08c4a:     unCompBuffer.get(longs);
1:8f08c4a:     return longs;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressFloat(float[] unCompInput) {
1:8f08c4a:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_FLOAT);
1:8f08c4a:     unCompBuffer.asFloatBuffer().put(unCompInput);
1:8f08c4a:     return compressByte(unCompBuffer.array());
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public float[] unCompressFloat(byte[] compInput, int offset, int length) {
1:8f08c4a:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:8f08c4a:     FloatBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asFloatBuffer();
1:8f08c4a:     float[] floats = new float[unCompArray.length / ByteUtil.SIZEOF_FLOAT];
1:8f08c4a:     unCompBuffer.get(floats);
1:8f08c4a:     return floats;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public byte[] compressDouble(double[] unCompInput) {
1:8f08c4a:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_DOUBLE);
1:8f08c4a:     unCompBuffer.asDoubleBuffer().put(unCompInput);
1:8f08c4a:     return compressByte(unCompBuffer.array());
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public double[] unCompressDouble(byte[] compInput, int offset, int length) {
1:8f08c4a:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:8f08c4a:     DoubleBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asDoubleBuffer();
1:8f08c4a:     double[] doubles = new double[unCompArray.length / ByteUtil.SIZEOF_DOUBLE];
1:8f08c4a:     unCompBuffer.get(doubles);
1:8f08c4a:     return doubles;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public long rawCompress(long inputAddress, int inputSize, long outputAddress) throws IOException {
1:8f08c4a:     throw new RuntimeException("Not implemented rawCompress for zstd yet");
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public long rawUncompress(byte[] input, byte[] output) throws IOException {
1:8f08c4a:     return Zstd.decompress(output, input);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   @Override
1:8f08c4a:   public long maxCompressedLength(long inputSize) {
1:8f08c4a:     return Zstd.compressBound(inputSize);
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   /**
1:8f08c4a:    * currently java version of zstd does not support this feature.
1:8f08c4a:    * It may support it in upcoming release 1.3.5-3, then we can optimize this accordingly.
1:8f08c4a:    */
1:8f08c4a:   @Override
1:8f08c4a:   public boolean supportUnsafe() {
1:8f08c4a:     return false;
1:8f08c4a:   }
1:8f08c4a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.compression;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.DoubleBuffer;
1: import java.nio.FloatBuffer;
1: import java.nio.IntBuffer;
1: import java.nio.LongBuffer;
1: import java.nio.ShortBuffer;
1: 
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: import com.github.luben.zstd.Zstd;
1: 
1: public class ZstdCompressor implements Compressor {
1:   private static final int COMPRESS_LEVEL = 3;
1: 
1:   public ZstdCompressor() {
1:   }
1: 
1:   @Override
1:   public String getName() {
1:     return "zstd";
1:   }
1: 
1:   @Override
1:   public byte[] compressByte(byte[] unCompInput) {
1:     return Zstd.compress(unCompInput, COMPRESS_LEVEL);
1:   }
1: 
1:   @Override
1:   public byte[] compressByte(byte[] unCompInput, int byteSize) {
1:     return Zstd.compress(unCompInput, COMPRESS_LEVEL);
1:   }
1: 
1:   @Override
1:   public byte[] unCompressByte(byte[] compInput) {
1:     long decompressedSize = Zstd.decompressedSize(compInput);
1:     return Zstd.decompress(compInput, (int) decompressedSize);
1:   }
1: 
1:   @Override
1:   public byte[] unCompressByte(byte[] compInput, int offset, int length) {
1:     // todo: how to avoid memory copy
1:     byte[] dstBytes = new byte[length];
1:     System.arraycopy(compInput, offset, dstBytes, 0, length);
1:     return unCompressByte(dstBytes);
1:   }
1: 
1:   @Override
1:   public byte[] compressShort(short[] unCompInput) {
1:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_SHORT);
1:     unCompBuffer.asShortBuffer().put(unCompInput);
1:     return compressByte(unCompBuffer.array());
1:   }
1: 
1:   @Override
1:   public short[] unCompressShort(byte[] compInput, int offset, int length) {
1:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:     ShortBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asShortBuffer();
1:     short[] shorts = new short[unCompArray.length / ByteUtil.SIZEOF_SHORT];
1:     unCompBuffer.get(shorts);
1:     return shorts;
1:   }
1: 
1:   @Override
1:   public byte[] compressInt(int[] unCompInput) {
1:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_INT);
1:     unCompBuffer.asIntBuffer().put(unCompInput);
1:     return compressByte(unCompBuffer.array());
1:   }
1: 
1:   @Override
1:   public int[] unCompressInt(byte[] compInput, int offset, int length) {
1:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:     IntBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asIntBuffer();
1:     int[] ints = new int[unCompArray.length / ByteUtil.SIZEOF_INT];
1:     unCompBuffer.get(ints);
1:     return ints;
1:   }
1: 
1:   @Override
1:   public byte[] compressLong(long[] unCompInput) {
1:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_LONG);
1:     unCompBuffer.asLongBuffer().put(unCompInput);
1:     return compressByte(unCompBuffer.array());
1:   }
1: 
1:   @Override
1:   public long[] unCompressLong(byte[] compInput, int offset, int length) {
1:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:     LongBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asLongBuffer();
1:     long[] longs = new long[unCompArray.length / ByteUtil.SIZEOF_LONG];
1:     unCompBuffer.get(longs);
1:     return longs;
1:   }
1: 
1:   @Override
1:   public byte[] compressFloat(float[] unCompInput) {
1:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_FLOAT);
1:     unCompBuffer.asFloatBuffer().put(unCompInput);
1:     return compressByte(unCompBuffer.array());
1:   }
1: 
1:   @Override
1:   public float[] unCompressFloat(byte[] compInput, int offset, int length) {
1:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:     FloatBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asFloatBuffer();
1:     float[] floats = new float[unCompArray.length / ByteUtil.SIZEOF_FLOAT];
1:     unCompBuffer.get(floats);
1:     return floats;
1:   }
1: 
1:   @Override
1:   public byte[] compressDouble(double[] unCompInput) {
1:     ByteBuffer unCompBuffer = ByteBuffer.allocate(unCompInput.length * ByteUtil.SIZEOF_DOUBLE);
1:     unCompBuffer.asDoubleBuffer().put(unCompInput);
1:     return compressByte(unCompBuffer.array());
1:   }
1: 
1:   @Override
1:   public double[] unCompressDouble(byte[] compInput, int offset, int length) {
1:     byte[] unCompArray = unCompressByte(compInput, offset, length);
1:     DoubleBuffer unCompBuffer = ByteBuffer.wrap(unCompArray).asDoubleBuffer();
1:     double[] doubles = new double[unCompArray.length / ByteUtil.SIZEOF_DOUBLE];
1:     unCompBuffer.get(doubles);
1:     return doubles;
1:   }
1: 
1:   @Override
1:   public long rawCompress(long inputAddress, int inputSize, long outputAddress) throws IOException {
1:     throw new RuntimeException("Not implemented rawCompress for zstd yet");
1:   }
1: 
1:   @Override
1:   public long rawUncompress(byte[] input, byte[] output) throws IOException {
1:     return Zstd.decompress(output, input);
1:   }
1: 
1:   @Override
1:   public long maxCompressedLength(long inputSize) {
1:     return Zstd.compressBound(inputSize);
1:   }
1: 
1:   /**
1:    * currently java version of zstd does not support this feature.
1:    * It may support it in upcoming release 1.3.5-3, then we can optimize this accordingly.
1:    */
1:   @Override
1:   public boolean supportUnsafe() {
1:     return false;
1:   }
1: }
============================================================================