1:d35fbaf: /*
1:d35fbaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d35fbaf:  * contributor license agreements.  See the NOTICE file distributed with
1:d35fbaf:  * this work for additional information regarding copyright ownership.
1:d35fbaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d35fbaf:  * (the "License"); you may not use this file except in compliance with
1:d35fbaf:  * the License.  You may obtain a copy of the License at
1:d35fbaf:  *
1:d35fbaf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d35fbaf:  *
1:d35fbaf:  * Unless required by applicable law or agreed to in writing, software
1:d35fbaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d35fbaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d35fbaf:  * See the License for the specific language governing permissions and
1:d35fbaf:  * limitations under the License.
1:d35fbaf:  */
1:d35fbaf: package org.apache.carbondata.core.datamap.dev;
1:d35fbaf: 
1:d35fbaf: import java.io.DataInputStream;
1:d35fbaf: import java.io.DataOutputStream;
1:d35fbaf: import java.io.IOException;
1:d35fbaf: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:fc2a7eb: import org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainBlocklet;
1:d35fbaf: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:d35fbaf: 
1:fc2a7eb: /**
1:fc2a7eb:  * A serializer/deserializer for {@link FineGrainBlocklet}, it is used after prune the data
1:fc2a7eb:  * by {@link org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainDataMap}
1:fc2a7eb:  */
1:fc2a7eb: @InterfaceAudience.Internal
1:d35fbaf: public class BlockletSerializer {
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * Serialize and write blocklet to the file.
1:d35fbaf:    * @param grainBlocklet
1:d35fbaf:    * @param writePath
1:d35fbaf:    * @throws IOException
1:d35fbaf:    */
1:d35fbaf:   public void serializeBlocklet(FineGrainBlocklet grainBlocklet, String writePath)
1:d35fbaf:       throws IOException {
1:d35fbaf:     DataOutputStream dataOutputStream =
1:d35fbaf:         FileFactory.getDataOutputStream(writePath, FileFactory.getFileType(writePath));
1:7ef9164:     try {
1:7ef9164:       grainBlocklet.write(dataOutputStream);
1:7ef9164:     } finally {
1:7ef9164:       dataOutputStream.close();
1:7ef9164:     }
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   /**
1:d35fbaf:    * Read data from filepath and deserialize blocklet.
1:d35fbaf:    * @param writePath
1:d35fbaf:    * @return
1:d35fbaf:    * @throws IOException
1:d35fbaf:    */
1:d35fbaf:   public FineGrainBlocklet deserializeBlocklet(String writePath) throws IOException {
1:d35fbaf:     DataInputStream inputStream =
1:d35fbaf:         FileFactory.getDataInputStream(writePath, FileFactory.getFileType(writePath));
1:d35fbaf:     FineGrainBlocklet blocklet = new FineGrainBlocklet();
1:7ef9164:     try {
1:7ef9164:       blocklet.readFields(inputStream);
1:7ef9164:     } finally {
1:7ef9164:       inputStream.close();
1:7ef9164:     }
1:d35fbaf:     return blocklet;
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       grainBlocklet.write(dataOutputStream);
1:     } finally {
1:       dataOutputStream.close();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       blocklet.readFields(inputStream);
1:     } finally {
1:       inputStream.close();
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainBlocklet;
1: /**
1:  * A serializer/deserializer for {@link FineGrainBlocklet}, it is used after prune the data
1:  * by {@link org.apache.carbondata.core.datamap.dev.fgdatamap.FineGrainDataMap}
1:  */
1: @InterfaceAudience.Internal
author:ravipesala
-------------------------------------------------------------------------------
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
0: import org.apache.carbondata.core.indexstore.FineGrainBlocklet;
1: 
1: public class BlockletSerializer {
1: 
1:   /**
1:    * Serialize and write blocklet to the file.
1:    * @param grainBlocklet
1:    * @param writePath
1:    * @throws IOException
1:    */
1:   public void serializeBlocklet(FineGrainBlocklet grainBlocklet, String writePath)
1:       throws IOException {
1:     DataOutputStream dataOutputStream =
1:         FileFactory.getDataOutputStream(writePath, FileFactory.getFileType(writePath));
0:     grainBlocklet.write(dataOutputStream);
0:     dataOutputStream.close();
1:   }
1: 
1:   /**
1:    * Read data from filepath and deserialize blocklet.
1:    * @param writePath
1:    * @return
1:    * @throws IOException
1:    */
1:   public FineGrainBlocklet deserializeBlocklet(String writePath) throws IOException {
1:     DataInputStream inputStream =
1:         FileFactory.getDataInputStream(writePath, FileFactory.getFileType(writePath));
1:     FineGrainBlocklet blocklet = new FineGrainBlocklet();
0:     blocklet.readFields(inputStream);
0:     inputStream.close();
1:     return blocklet;
1:   }
1: 
1: }
============================================================================