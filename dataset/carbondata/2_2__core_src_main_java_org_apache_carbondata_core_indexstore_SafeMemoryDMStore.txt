1:531ecdf: /*
1:531ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:531ecdf:  * this work for additional information regarding copyright ownership.
1:531ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531ecdf:  * (the "License"); you may not use this file except in compliance with
1:531ecdf:  * the License.  You may obtain a copy of the License at
1:531ecdf:  *
1:531ecdf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:531ecdf:  * Unless required by applicable law or agreed to in writing, software
1:531ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531ecdf:  * See the License for the specific language governing permissions and
1:531ecdf:  * limitations under the License.
1:531ecdf:  */
2:531ecdf: 
1:531ecdf: package org.apache.carbondata.core.indexstore;
1:531ecdf: 
1:531ecdf: import java.util.ArrayList;
1:531ecdf: import java.util.List;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:531ecdf: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1:531ecdf: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:531ecdf: import org.apache.carbondata.core.memory.MemoryException;
1:531ecdf: import org.apache.carbondata.core.util.DataTypeUtil;
1:531ecdf: 
1:531ecdf: /**
1:531ecdf:  * Store the data map row @{@link DataMapRow} data to memory.
1:531ecdf:  */
1:531ecdf: public class SafeMemoryDMStore extends AbstractMemoryDMStore {
1:531ecdf: 
1:531ecdf:   /**
1:531ecdf:    * holds all blocklets metadata in memory
1:531ecdf:    */
1:531ecdf:   private List<DataMapRow> dataMapRows =
1:531ecdf:       new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:531ecdf: 
1:531ecdf:   private int runningLength;
1:531ecdf: 
1:531ecdf:   /**
1:531ecdf:    * Add the index row to dataMapRows, basically to in memory.
1:531ecdf:    *
1:531ecdf:    * @param indexRow
1:531ecdf:    * @return
1:531ecdf:    */
1:531ecdf:   @Override
1:f4a58c5:   public void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow) throws MemoryException {
1:531ecdf:     dataMapRows.add(indexRow);
1:531ecdf:     runningLength += indexRow.getTotalSizeInBytes();
2:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override
1:f4a58c5:   public DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index) {
1:531ecdf:     assert (index < dataMapRows.size());
1:531ecdf:     return dataMapRows.get(index);
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override
1:531ecdf:   public void freeMemory() {
1:531ecdf:     if (!isMemoryFreed) {
1:531ecdf:       if (null != dataMapRows) {
1:531ecdf:         dataMapRows.clear();
1:531ecdf:         dataMapRows = null;
1:531ecdf:       }
1:531ecdf:       isMemoryFreed = true;
1:531ecdf:     }
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override
1:531ecdf:   public int getMemoryUsed() {
1:531ecdf:     return runningLength;
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override
1:531ecdf:   public int getRowCount() {
1:531ecdf:     return dataMapRows.size();
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Override
1:f4a58c5:   public UnsafeMemoryDMStore convertToUnsafeDMStore(CarbonRowSchema[] schema)
1:f4a58c5:       throws MemoryException {
1:f4a58c5:     setSchemaDataType(schema);
1:f4a58c5:     UnsafeMemoryDMStore unsafeMemoryDMStore = new UnsafeMemoryDMStore();
1:531ecdf:     for (DataMapRow dataMapRow : dataMapRows) {
1:f4a58c5:       dataMapRow.setSchemas(schema);
1:f4a58c5:       unsafeMemoryDMStore.addIndexRow(schema, dataMapRow);
1:531ecdf:     }
1:531ecdf:     unsafeMemoryDMStore.finishWriting();
1:531ecdf:     return unsafeMemoryDMStore;
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   /**
1:531ecdf:    * Set the dataType to the schema. Needed in case of serialization / deserialization
1:531ecdf:    */
1:f4a58c5:   private void setSchemaDataType(CarbonRowSchema[] schema) {
1:531ecdf:     for (CarbonRowSchema carbonRowSchema : schema) {
1:531ecdf:       carbonRowSchema.setDataType(DataTypeUtil.valueOf(carbonRowSchema.getDataType(), 0, 0));
1:531ecdf:     }
1:531ecdf:   }
1:531ecdf: 
1:531ecdf: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow) throws MemoryException {
1:   public DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index) {
/////////////////////////////////////////////////////////////////////////
1:   public UnsafeMemoryDMStore convertToUnsafeDMStore(CarbonRowSchema[] schema)
1:       throws MemoryException {
1:     setSchemaDataType(schema);
1:     UnsafeMemoryDMStore unsafeMemoryDMStore = new UnsafeMemoryDMStore();
1:       dataMapRow.setSchemas(schema);
1:       unsafeMemoryDMStore.addIndexRow(schema, dataMapRow);
/////////////////////////////////////////////////////////////////////////
1:   private void setSchemaDataType(CarbonRowSchema[] schema) {
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: /**
1:  * Store the data map row @{@link DataMapRow} data to memory.
1:  */
1: public class SafeMemoryDMStore extends AbstractMemoryDMStore {
1: 
1:   /**
1:    * holds all blocklets metadata in memory
1:    */
1:   private List<DataMapRow> dataMapRows =
1:       new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1: 
1:   private int runningLength;
1: 
0:   public SafeMemoryDMStore(CarbonRowSchema[] schema) {
0:     super(schema);
1:   }
1: 
1:   /**
1:    * Add the index row to dataMapRows, basically to in memory.
1:    *
1:    * @param indexRow
1:    * @return
1:    */
1:   @Override
0:   public void addIndexRow(DataMapRow indexRow) throws MemoryException {
1:     dataMapRows.add(indexRow);
1:     runningLength += indexRow.getTotalSizeInBytes();
1:   }
1: 
1:   @Override
0:   public DataMapRow getDataMapRow(int index) {
1:     assert (index < dataMapRows.size());
1:     return dataMapRows.get(index);
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1:     if (!isMemoryFreed) {
1:       if (null != dataMapRows) {
1:         dataMapRows.clear();
1:         dataMapRows = null;
1:       }
1:       isMemoryFreed = true;
1:     }
1:   }
1: 
1:   @Override
1:   public int getMemoryUsed() {
1:     return runningLength;
1:   }
1: 
1:   @Override
1:   public int getRowCount() {
1:     return dataMapRows.size();
1:   }
1: 
1:   @Override
0:   public UnsafeMemoryDMStore convertToUnsafeDMStore() throws MemoryException {
0:     setSchemaDataType();
0:     UnsafeMemoryDMStore unsafeMemoryDMStore = new UnsafeMemoryDMStore(schema);
1:     for (DataMapRow dataMapRow : dataMapRows) {
0:       unsafeMemoryDMStore.addIndexRow(dataMapRow);
1:     }
1:     unsafeMemoryDMStore.finishWriting();
1:     return unsafeMemoryDMStore;
1:   }
1: 
1:   /**
1:    * Set the dataType to the schema. Needed in case of serialization / deserialization
1:    */
0:   private void setSchemaDataType() {
1:     for (CarbonRowSchema carbonRowSchema : schema) {
1:       carbonRowSchema.setDataType(DataTypeUtil.valueOf(carbonRowSchema.getDataType(), 0, 0));
1:     }
1:   }
1: 
1: }
============================================================================