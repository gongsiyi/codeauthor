1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f1f9348:  */
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.sort;
2:f1f9348: 
1:edda248: import org.apache.carbondata.core.memory.IntPointerBuffer;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
1:f1f9348: 
1:f1f9348: /**
1:f1f9348:  * Interface implementation for utilities to sort the data.
1:f1f9348:  */
1:f1f9348: public class UnsafeIntSortDataFormat
1:f1f9348:     extends SortDataFormat<UnsafeCarbonRow, IntPointerBuffer> {
1:f1f9348: 
1:f1f9348:   private UnsafeCarbonRowPage page;
1:f1f9348: 
1:f1f9348:   public UnsafeIntSortDataFormat(UnsafeCarbonRowPage page) {
1:f1f9348:     this.page = page;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public UnsafeCarbonRow getKey(IntPointerBuffer data, int pos) {
1:f1f9348:     // Since we re-use keys, this method shouldn't be called.
1:f1f9348:     throw new UnsupportedOperationException();
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public UnsafeCarbonRow newKey() {
1:f1f9348:     return new UnsafeCarbonRow();
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override
1:f1f9348:   public UnsafeCarbonRow getKey(IntPointerBuffer data, int pos, UnsafeCarbonRow reuse) {
1:f1f9348:     reuse.address = data.get(pos) + page.getDataBlock().getBaseOffset();
1:f1f9348:     return reuse;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public void swap(IntPointerBuffer data, int pos0, int pos1) {
1:f1f9348:     int tempPointer = data.get(pos0);
1:f1f9348:     data.set(pos0, data.get(pos1));
1:f1f9348:     data.set(pos1, tempPointer);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override
1:f1f9348:   public void copyElement(IntPointerBuffer src, int srcPos, IntPointerBuffer dst, int dstPos) {
1:f1f9348:     dst.set(dstPos, src.get(srcPos));
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override
1:f1f9348:   public void copyRange(IntPointerBuffer src, int srcPos, IntPointerBuffer dst, int dstPos,
1:f1f9348:       int length) {
1:f1f9348:     System.arraycopy(src.getPointerBlock(), srcPos, dst.getPointerBlock(), dstPos, length);
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public IntPointerBuffer allocate(int length) {
1:f1f9348:     return new IntPointerBuffer(length);
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.sort;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.loading.sort.unsafe.holder.UnsafeCarbonRow;
author:jackylk
-------------------------------------------------------------------------------
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.IntPointerBuffer;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.sort.unsafe.sort;
1: 
0: import org.apache.carbondata.processing.newflow.sort.unsafe.IntPointerBuffer;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.holder.UnsafeCarbonRow;
1: 
0: import org.apache.spark.util.collection.SortDataFormat;
1: 
1: /**
1:  * Interface implementation for utilities to sort the data.
1:  */
1: public class UnsafeIntSortDataFormat
1:     extends SortDataFormat<UnsafeCarbonRow, IntPointerBuffer> {
1: 
1:   private UnsafeCarbonRowPage page;
1: 
1:   public UnsafeIntSortDataFormat(UnsafeCarbonRowPage page) {
1:     this.page = page;
1:   }
1: 
1:   @Override public UnsafeCarbonRow getKey(IntPointerBuffer data, int pos) {
1:     // Since we re-use keys, this method shouldn't be called.
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override public UnsafeCarbonRow newKey() {
1:     return new UnsafeCarbonRow();
1:   }
1: 
1:   @Override
1:   public UnsafeCarbonRow getKey(IntPointerBuffer data, int pos, UnsafeCarbonRow reuse) {
1:     reuse.address = data.get(pos) + page.getDataBlock().getBaseOffset();
1:     return reuse;
1:   }
1: 
1:   @Override public void swap(IntPointerBuffer data, int pos0, int pos1) {
1:     int tempPointer = data.get(pos0);
1:     data.set(pos0, data.get(pos1));
1:     data.set(pos1, tempPointer);
1:   }
1: 
1:   @Override
1:   public void copyElement(IntPointerBuffer src, int srcPos, IntPointerBuffer dst, int dstPos) {
1:     dst.set(dstPos, src.get(srcPos));
1:   }
1: 
1:   @Override
1:   public void copyRange(IntPointerBuffer src, int srcPos, IntPointerBuffer dst, int dstPos,
1:       int length) {
1:     System.arraycopy(src.getPointerBlock(), srcPos, dst.getPointerBlock(), dstPos, length);
1:   }
1: 
1:   @Override public IntPointerBuffer allocate(int length) {
1:     return new IntPointerBuffer(length);
1:   }
1: }
============================================================================