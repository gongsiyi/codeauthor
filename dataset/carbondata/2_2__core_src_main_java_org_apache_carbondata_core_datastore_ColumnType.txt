1:8c1ddbf: /*
1:8c1ddbf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c1ddbf:  * contributor license agreements.  See the NOTICE file distributed with
1:8c1ddbf:  * this work for additional information regarding copyright ownership.
1:8c1ddbf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c1ddbf:  * (the "License"); you may not use this file except in compliance with
1:8c1ddbf:  * the License.  You may obtain a copy of the License at
1:8c1ddbf:  *
1:8c1ddbf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8c1ddbf:  *
1:8c1ddbf:  * Unless required by applicable law or agreed to in writing, software
1:8c1ddbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c1ddbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c1ddbf:  * See the License for the specific language governing permissions and
1:8c1ddbf:  * limitations under the License.
1:8c1ddbf:  */
1:8c1ddbf: 
1:8c1ddbf: package org.apache.carbondata.core.datastore;
1:8c1ddbf: 
1:8c1ddbf: public enum ColumnType {
1:8c1ddbf:   // global dictionary for low cardinality dimension column
1:8c1ddbf:   GLOBAL_DICTIONARY,
1:8c1ddbf: 
1:8c1ddbf:   // for timestamp and date column
1:8c1ddbf:   DIRECT_DICTIONARY,
1:8c1ddbf: 
1:8c1ddbf:   // for high cardinality dimension column
1:8c1ddbf:   PLAIN_VALUE,
1:8c1ddbf: 
1:8c1ddbf:   // complex column (array, struct, map)
1:8c1ddbf:   COMPLEX,
1:8c1ddbf: 
1:8c1ddbf:   // measure column, numerical data type
1:6297ea0:   MEASURE,
1:6297ea0: 
1:6297ea0:   COMPLEX_STRUCT,
1:6297ea0: 
1:6297ea0:   COMPLEX_ARRAY,
1:6297ea0: 
1:e710339:   COMPLEX_PRIMITIVE,
1:e710339: 
1:e710339:   PLAIN_LONG_VALUE;
1:8c1ddbf: 
1:8c1ddbf:   public static ColumnType valueOf(int ordinal) {
1:8c1ddbf:     if (ordinal == GLOBAL_DICTIONARY.ordinal()) {
1:8c1ddbf:       return GLOBAL_DICTIONARY;
1:8c1ddbf:     } else if (ordinal == DIRECT_DICTIONARY.ordinal()) {
1:8c1ddbf:       return DIRECT_DICTIONARY;
1:8c1ddbf:     } else if (ordinal == PLAIN_VALUE.ordinal()) {
1:8c1ddbf:       return PLAIN_VALUE;
1:8c1ddbf:     } else if (ordinal == COMPLEX.ordinal()) {
1:8c1ddbf:       return COMPLEX;
1:8c1ddbf:     } else if (ordinal == MEASURE.ordinal()) {
1:8c1ddbf:       return MEASURE;
1:6297ea0:     } else if (ordinal == COMPLEX_STRUCT.ordinal()) {
1:6297ea0:       return COMPLEX_STRUCT;
1:6297ea0:     } else if (ordinal == COMPLEX_ARRAY.ordinal()) {
1:6297ea0:       return COMPLEX_ARRAY;
1:6297ea0:     } else if (ordinal == COMPLEX_PRIMITIVE.ordinal()) {
1:6297ea0:       return COMPLEX_PRIMITIVE;
1:e710339:     } else if (ordinal == PLAIN_LONG_VALUE.ordinal()) {
1:e710339:       return PLAIN_LONG_VALUE;
1:8c1ddbf:     } else {
1:8c1ddbf:       throw new RuntimeException("create ColumnType with invalid ordinal: " + ordinal);
1:8c1ddbf:     }
1:8c1ddbf:   }
1:8c1ddbf: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1:   COMPLEX_PRIMITIVE,
1: 
1:   PLAIN_LONG_VALUE;
/////////////////////////////////////////////////////////////////////////
1:     } else if (ordinal == PLAIN_LONG_VALUE.ordinal()) {
1:       return PLAIN_LONG_VALUE;
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
1:   MEASURE,
1: 
1:   COMPLEX_STRUCT,
1: 
1:   COMPLEX_ARRAY,
1: 
0:   COMPLEX_PRIMITIVE;
/////////////////////////////////////////////////////////////////////////
1:     } else if (ordinal == COMPLEX_STRUCT.ordinal()) {
1:       return COMPLEX_STRUCT;
1:     } else if (ordinal == COMPLEX_ARRAY.ordinal()) {
1:       return COMPLEX_ARRAY;
1:     } else if (ordinal == COMPLEX_PRIMITIVE.ordinal()) {
1:       return COMPLEX_PRIMITIVE;
author:Jacky Li
-------------------------------------------------------------------------------
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore;
1: 
1: public enum ColumnType {
1:   // global dictionary for low cardinality dimension column
1:   GLOBAL_DICTIONARY,
1: 
1:   // for timestamp and date column
1:   DIRECT_DICTIONARY,
1: 
1:   // for high cardinality dimension column
1:   PLAIN_VALUE,
1: 
1:   // complex column (array, struct, map)
1:   COMPLEX,
1: 
1:   // measure column, numerical data type
0:   MEASURE;
1: 
1:   public static ColumnType valueOf(int ordinal) {
1:     if (ordinal == GLOBAL_DICTIONARY.ordinal()) {
1:       return GLOBAL_DICTIONARY;
1:     } else if (ordinal == DIRECT_DICTIONARY.ordinal()) {
1:       return DIRECT_DICTIONARY;
1:     } else if (ordinal == PLAIN_VALUE.ordinal()) {
1:       return PLAIN_VALUE;
1:     } else if (ordinal == COMPLEX.ordinal()) {
1:       return COMPLEX;
1:     } else if (ordinal == MEASURE.ordinal()) {
1:       return MEASURE;
1:     } else {
1:       throw new RuntimeException("create ColumnType with invalid ordinal: " + ordinal);
1:     }
1:   }
1: }
============================================================================