1:89a12af: /*
1:89a12af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89a12af:  * contributor license agreements.  See the NOTICE file distributed with
1:89a12af:  * this work for additional information regarding copyright ownership.
1:89a12af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89a12af:  * (the "License"); you may not use this file except in compliance with
1:89a12af:  * the License.  You may obtain a copy of the License at
1:89a12af:  *
1:89a12af:  *    http://www.apache.org/licenses/LICENSE-2.0
1:89a12af:  *
1:89a12af:  * Unless required by applicable law or agreed to in writing, software
1:89a12af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89a12af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89a12af:  * See the License for the specific language governing permissions and
1:89a12af:  * limitations under the License.
1:89a12af:  */
1:89a12af: 
1:05086e5: package org.apache.carbondata.core.datamap;
1:89a12af: 
1:bbb1092: import java.io.IOException;
1:bbb1092: 
1:89a12af: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:89a12af: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1:9db662a: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1:9db662a: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
1:89a12af: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:89a12af: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:89a12af: 
1:89a12af: /**
1:89a12af:  * DataMap is a accelerator for certain type of query. Developer can add new DataMap
1:89a12af:  * implementation to improve query performance.
1:89a12af:  *
1:89a12af:  * Currently two types of DataMap are supported
1:89a12af:  * <ol>
1:89a12af:  *   <li> MVDataMap: materialized view type of DataMap to accelerate olap style query,
1:89a12af:  * like SPJG query (select, predicate, join, groupby) </li>
1:fc2a7eb:  *   <li> DataMap: index type of DataMap to accelerate filter query </li>
1:89a12af:  * </ol>
1:89a12af:  *
1:89a12af:  * <p>
1:89a12af:  * In following command <br>
1:89a12af:  * {@code CREATE DATAMAP dm ON TABLE main USING 'provider'}, <br>
1:89a12af:  * the <b>provider</b> string can be a short name or class name of the DataMap implementation.
1:89a12af:  *
1:89a12af:  * <br>Currently CarbonData supports following provider:
1:89a12af:  * <ol>
1:9db662a:  *   <li> preaggregate: pre-aggregate table of single table </li>
1:9db662a:  *   <li> timeseries: pre-aggregate table based on time dimension of the table </li>
1:9db662a:  *   <li> lucene: index backed by Apache Lucene </li>
1:9db662a:  *   <li> bloomfilter: index backed by Bloom Filter </li>
1:89a12af:  * </ol>
1:89a12af:  *
1:89a12af:  * @since 1.4.0
1:89a12af:  */
1:fc2a7eb: @InterfaceAudience.Internal
1:9db662a: public abstract class DataMapProvider {
1:9db662a: 
1:9db662a:   private CarbonTable mainTable;
1:9db662a:   private DataMapSchema dataMapSchema;
1:9db662a: 
1:9db662a:   public DataMapProvider(CarbonTable mainTable, DataMapSchema dataMapSchema) {
1:9db662a:     this.mainTable = mainTable;
1:9db662a:     this.dataMapSchema = dataMapSchema;
1:9db662a:   }
1:9db662a: 
1:9db662a:   protected final CarbonTable getMainTable() {
1:9db662a:     return mainTable;
1:9db662a:   }
1:9db662a: 
1:00d6ce4:   public final DataMapSchema getDataMapSchema() {
1:9db662a:     return dataMapSchema;
1:9db662a:   }
1:89a12af: 
1:89a12af:   /**
1:89a12af:    * Initialize a datamap's metadata.
1:89a12af:    * This is called when user creates datamap, for example "CREATE DATAMAP dm ON TABLE mainTable"
1:89a12af:    * Implementation should initialize metadata for datamap, like creating table
1:89a12af:    */
1:9db662a:   public abstract void initMeta(String ctasSqlStatement) throws MalformedDataMapCommandException,
1:9db662a:       IOException;
1:89a12af: 
1:89a12af:   /**
1:89a12af:    * Initialize a datamap's data.
1:89a12af:    * This is called when user creates datamap, for example "CREATE DATAMAP dm ON TABLE mainTable"
1:89a12af:    * Implementation should initialize data for datamap, like creating data folders
1:89a12af:    */
1:f911403:   public void initData() { }
1:89a12af: 
1:89a12af:   /**
1:9db662a:    * Opposite operation of {@link #initMeta(String)}.
1:89a12af:    * This is called when user drops datamap, for example "DROP DATAMAP dm ON TABLE mainTable"
1:89a12af:    * Implementation should clean all meta for the datamap
1:89a12af:    */
1:9db662a:   public abstract void cleanMeta() throws IOException;
1:89a12af: 
1:89a12af:   /**
1:9db662a:    * Opposite operation of {@link #initData()}.
1:89a12af:    * This is called when user drops datamap, for example "DROP DATAMAP dm ON TABLE mainTable"
1:89a12af:    * Implementation should clean all data for the datamap
1:89a12af:    */
1:9db662a:   public abstract void cleanData();
1:89a12af: 
1:89a12af:   /**
1:89a12af:    * Rebuild the datamap by loading all existing data from mainTable
1:89a12af:    * This is called when refreshing the datamap when
1:89a12af:    * 1. after datamap creation and if `autoRefreshDataMap` is set to true
1:747be9b:    * 2. user manually trigger REBUILD DATAMAP command
1:89a12af:    */
1:9db662a:   public abstract void rebuild() throws IOException, NoSuchDataMapException;
1:89a12af: 
1:89a12af:   /**
1:89a12af:    * Build the datamap incrementally by loading specified segment data
1:89a12af:    */
1:f911403:   public void incrementalBuild(String[] segmentIds) {
1:f911403:     throw new UnsupportedOperationException();
1:f911403:   }
1:89a12af: 
1:05086e5:   /**
1:05086e5:    * Provide the datamap catalog instance or null if this datamap not required to rewrite
1:05086e5:    * the query.
1:05086e5:    */
1:f911403:   public DataMapCatalog createDataMapCatalog() {
1:f911403:     return null;
1:f911403:   }
1:9db662a: 
1:9db662a:   public abstract DataMapFactory getDataMapFactory();
1:89a12af: 
1:abcd4f6:   public abstract boolean supportRebuild();
1:89a12af: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:abcd4f6
/////////////////////////////////////////////////////////////////////////
1:   public abstract boolean supportRebuild();
commit:00d6ce4
/////////////////////////////////////////////////////////////////////////
1:   public final DataMapSchema getDataMapSchema() {
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   public void initData() { }
/////////////////////////////////////////////////////////////////////////
1:   public void incrementalBuild(String[] segmentIds) {
1:     throw new UnsupportedOperationException();
1:   }
1:   public DataMapCatalog createDataMapCatalog() {
1:     return null;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:747be9b
/////////////////////////////////////////////////////////////////////////
1:    * 2. user manually trigger REBUILD DATAMAP command
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.exceptions.sql.NoSuchDataMapException;
1: import org.apache.carbondata.core.datamap.dev.DataMapFactory;
/////////////////////////////////////////////////////////////////////////
1:  *   <li> preaggregate: pre-aggregate table of single table </li>
1:  *   <li> timeseries: pre-aggregate table based on time dimension of the table </li>
1:  *   <li> lucene: index backed by Apache Lucene </li>
1:  *   <li> bloomfilter: index backed by Bloom Filter </li>
1: public abstract class DataMapProvider {
1: 
1:   private CarbonTable mainTable;
1:   private DataMapSchema dataMapSchema;
1: 
1:   public DataMapProvider(CarbonTable mainTable, DataMapSchema dataMapSchema) {
1:     this.mainTable = mainTable;
1:     this.dataMapSchema = dataMapSchema;
1:   }
1: 
1:   protected final CarbonTable getMainTable() {
1:     return mainTable;
1:   }
1: 
0:   protected final DataMapSchema getDataMapSchema() {
1:     return dataMapSchema;
1:   }
1:   public abstract void initMeta(String ctasSqlStatement) throws MalformedDataMapCommandException,
1:       IOException;
0:   public abstract void initData();
1:    * Opposite operation of {@link #initMeta(String)}.
1:   public abstract void cleanMeta() throws IOException;
1:    * Opposite operation of {@link #initData()}.
1:   public abstract void cleanData();
/////////////////////////////////////////////////////////////////////////
1:   public abstract void rebuild() throws IOException, NoSuchDataMapException;
0:   public abstract void incrementalBuild(String[] segmentIds) throws IOException;
0:   public abstract DataMapCatalog createDataMapCatalog();
1: 
1:   public abstract DataMapFactory getDataMapFactory();
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:       SparkSession sparkSession) throws MalformedDataMapCommandException, IOException;
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *   <li> DataMap: index type of DataMap to accelerate filter query </li>
/////////////////////////////////////////////////////////////////////////
0:  *   <li> class name of {@link org.apache.carbondata.core.datamap.dev.DataMapFactory}
0:  * implementation: Developer can implement new type of DataMap by extending
0:  * {@link org.apache.carbondata.core.datamap.dev.DataMapFactory} </li>
1: @InterfaceAudience.Internal
commit:89a12af
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.datamap;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
0: import org.apache.carbondata.common.annotations.InterfaceStability;
1: import org.apache.carbondata.common.exceptions.sql.MalformedDataMapCommandException;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
0: import org.apache.carbondata.processing.exception.DataLoadingException;
1: 
0: import org.apache.spark.sql.SparkSession;
1: 
1: /**
1:  * DataMap is a accelerator for certain type of query. Developer can add new DataMap
1:  * implementation to improve query performance.
1:  *
1:  * Currently two types of DataMap are supported
1:  * <ol>
1:  *   <li> MVDataMap: materialized view type of DataMap to accelerate olap style query,
1:  * like SPJG query (select, predicate, join, groupby) </li>
0:  *   <li> IndexDataMap: index type of DataMap to accelerate filter query </li>
1:  * </ol>
1:  *
1:  * <p>
1:  * In following command <br>
1:  * {@code CREATE DATAMAP dm ON TABLE main USING 'provider'}, <br>
1:  * the <b>provider</b> string can be a short name or class name of the DataMap implementation.
1:  *
1:  * <br>Currently CarbonData supports following provider:
1:  * <ol>
0:  *   <li> preaggregate: one type of MVDataMap that do pre-aggregate of single table </li>
0:  *   <li> timeseries: one type of MVDataMap that do pre-aggregate based on time dimension
0:  *     of the table </li>
0:  *   <li> class name of {@link org.apache.carbondata.core.datamap.dev.IndexDataMapFactory}
0:  * implementation: Developer can implement new type of IndexDataMap by extending
0:  * {@link org.apache.carbondata.core.datamap.dev.IndexDataMapFactory} </li>
1:  * </ol>
1:  *
1:  * @since 1.4.0
1:  */
0: @InterfaceAudience.Developer("DataMap")
0: @InterfaceStability.Unstable
0: public interface DataMapProvider {
1: 
1:   /**
1:    * Initialize a datamap's metadata.
1:    * This is called when user creates datamap, for example "CREATE DATAMAP dm ON TABLE mainTable"
1:    * Implementation should initialize metadata for datamap, like creating table
1:    */
0:   void initMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, String ctasSqlStatement,
0:       SparkSession sparkSession) throws MalformedDataMapCommandException;
1: 
1:   /**
1:    * Initialize a datamap's data.
1:    * This is called when user creates datamap, for example "CREATE DATAMAP dm ON TABLE mainTable"
1:    * Implementation should initialize data for datamap, like creating data folders
1:    */
0:   void initData(CarbonTable mainTable, SparkSession sparkSession);
1: 
1:   /**
0:    * Opposite operation of {@link #initMeta(CarbonTable, DataMapSchema, String, SparkSession)}.
1:    * This is called when user drops datamap, for example "DROP DATAMAP dm ON TABLE mainTable"
1:    * Implementation should clean all meta for the datamap
1:    */
0:   void freeMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, SparkSession sparkSession);
1: 
1:   /**
0:    * Opposite operation of {@link #initData(CarbonTable, SparkSession)}.
1:    * This is called when user drops datamap, for example "DROP DATAMAP dm ON TABLE mainTable"
1:    * Implementation should clean all data for the datamap
1:    */
0:   void freeData(CarbonTable mainTable, DataMapSchema dataMapSchema, SparkSession sparkSession);
1: 
1:   /**
1:    * Rebuild the datamap by loading all existing data from mainTable
1:    * This is called when refreshing the datamap when
1:    * 1. after datamap creation and if `autoRefreshDataMap` is set to true
0:    * 2. user manually trigger refresh datamap command
1:    */
0:   void rebuild(CarbonTable mainTable, SparkSession sparkSession) throws DataLoadingException;
1: 
1:   /**
1:    * Build the datamap incrementally by loading specified segment data
0:    * This is called when user manually trigger refresh datamap
1:    */
0:   void incrementalBuild(CarbonTable mainTable, String[] segmentIds, SparkSession sparkSession)
0:     throws DataLoadingException;
1: 
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9fba684
/////////////////////////////////////////////////////////////////////////
0:   void rebuild(CarbonTable mainTable, DataMapSchema dataMapSchema) throws IOException;
0:   void incrementalBuild(CarbonTable mainTable, DataMapSchema dataMapSchema, String[] segmentIds)
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datamap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   void initMeta(CarbonTable mainTable, DataMapSchema dataMapSchema, String ctasSqlStatement)
0:       throws MalformedDataMapCommandException, IOException;
0:   void initData(CarbonTable mainTable);
0:    * Opposite operation of {@link #initMeta(CarbonTable, DataMapSchema, String)}.
0:   void freeMeta(CarbonTable mainTable, DataMapSchema dataMapSchema) throws IOException;
0:    * Opposite operation of {@link #initData(CarbonTable)}.
0:   void freeData(CarbonTable mainTable, DataMapSchema dataMapSchema);
/////////////////////////////////////////////////////////////////////////
0:   void rebuild(CarbonTable mainTable) throws IOException;
0:   void incrementalBuild(CarbonTable mainTable, String[] segmentIds)
0:     throws IOException;
0: 
1:   /**
1:    * Provide the datamap catalog instance or null if this datamap not required to rewrite
1:    * the query.
1:    */
0:   DataMapCatalog createDataMapCatalog();
============================================================================