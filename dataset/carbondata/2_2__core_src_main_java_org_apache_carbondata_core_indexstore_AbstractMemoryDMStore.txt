1:531ecdf: /*
1:531ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:531ecdf:  * this work for additional information regarding copyright ownership.
1:531ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531ecdf:  * (the "License"); you may not use this file except in compliance with
1:531ecdf:  * the License.  You may obtain a copy of the License at
1:531ecdf:  *
1:531ecdf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:531ecdf:  * Unless required by applicable law or agreed to in writing, software
1:531ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531ecdf:  * See the License for the specific language governing permissions and
1:531ecdf:  * limitations under the License.
1:531ecdf:  */
4:531ecdf: 
1:531ecdf: package org.apache.carbondata.core.indexstore;
1:531ecdf: 
1:531ecdf: import java.io.Serializable;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1:531ecdf: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:531ecdf: import org.apache.carbondata.core.memory.MemoryException;
1:531ecdf: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
1:531ecdf: 
1:531ecdf: /**
1:531ecdf:  * Store the data map row @{@link DataMapRow}
1:531ecdf:  */
1:531ecdf: public abstract class AbstractMemoryDMStore implements Serializable {
1:531ecdf: 
1:531ecdf:   protected boolean isMemoryFreed;
1:531ecdf: 
1:531ecdf:   protected final long taskId = ThreadLocalTaskInfo.getCarbonTaskInfo().getTaskId();
1:531ecdf: 
1:f4a58c5:   public abstract void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow)
1:f4a58c5:       throws MemoryException;
1:531ecdf: 
1:f4a58c5:   public abstract DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index);
1:531ecdf: 
1:531ecdf:   public abstract void freeMemory();
1:531ecdf: 
1:531ecdf:   public abstract int getMemoryUsed();
1:531ecdf: 
1:531ecdf:   public abstract int getRowCount();
1:531ecdf: 
1:531ecdf:   public void finishWriting() throws MemoryException {
1:531ecdf:     // do nothing in default implementation
3:531ecdf:   }
1:531ecdf: 
1:f4a58c5:   public UnsafeMemoryDMStore convertToUnsafeDMStore(CarbonRowSchema[] schema)
1:f4a58c5:       throws MemoryException {
1:531ecdf:     throw new UnsupportedOperationException("Operation not allowed");
1:531ecdf:   }
1:531ecdf: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
1:   public abstract void addIndexRow(CarbonRowSchema[] schema, DataMapRow indexRow)
1:       throws MemoryException;
1:   public abstract DataMapRow getDataMapRow(CarbonRowSchema[] schema, int index);
1:   public UnsafeMemoryDMStore convertToUnsafeDMStore(CarbonRowSchema[] schema)
1:       throws MemoryException {
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore;
1: 
1: import java.io.Serializable;
1: 
1: import org.apache.carbondata.core.indexstore.row.DataMapRow;
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.util.ThreadLocalTaskInfo;
1: 
1: /**
1:  * Store the data map row @{@link DataMapRow}
1:  */
1: public abstract class AbstractMemoryDMStore implements Serializable {
1: 
1:   protected boolean isMemoryFreed;
1: 
0:   protected CarbonRowSchema[] schema;
1: 
1:   protected final long taskId = ThreadLocalTaskInfo.getCarbonTaskInfo().getTaskId();
1: 
0:   public AbstractMemoryDMStore(CarbonRowSchema[] schema) {
0:     this.schema = schema;
1:   }
1: 
0:   public abstract void addIndexRow(DataMapRow indexRow) throws MemoryException;
1: 
0:   public abstract DataMapRow getDataMapRow(int index);
1: 
1:   public abstract void freeMemory();
1: 
1:   public abstract int getMemoryUsed();
1: 
0:   public CarbonRowSchema[] getSchema() {
0:     return schema;
1:   }
1: 
1:   public abstract int getRowCount();
1: 
1:   public void finishWriting() throws MemoryException {
1:     // do nothing in default implementation
1:   }
1: 
0:   public UnsafeMemoryDMStore convertToUnsafeDMStore() throws MemoryException {
1:     throw new UnsupportedOperationException("Operation not allowed");
1:   }
1: }
============================================================================