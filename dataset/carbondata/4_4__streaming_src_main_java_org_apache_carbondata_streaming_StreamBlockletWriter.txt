1:d7393da: /*
1:d7393da:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d7393da:  * contributor license agreements.  See the NOTICE file distributed with
1:d7393da:  * this work for additional information regarding copyright ownership.
1:d7393da:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d7393da:  * (the "License"); you may not use this file except in compliance with
1:d7393da:  * the License.  You may obtain a copy of the License at
1:d7393da:  *
1:d7393da:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d7393da:  *
1:d7393da:  * Unless required by applicable law or agreed to in writing, software
1:d7393da:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d7393da:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7393da:  * See the License for the specific language governing permissions and
1:d7393da:  * limitations under the License.
1:d7393da:  */
1:d7393da: 
1:c723947: package org.apache.carbondata.streaming;
1:d7393da: 
1:d7393da: import java.io.DataOutputStream;
1:d7393da: import java.io.IOException;
1:d7393da: 
1:d7393da: import org.apache.carbondata.core.datastore.compression.Compressor;
1:d7393da: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:21a72bf: import org.apache.carbondata.core.datastore.page.statistics.ColumnPageStatsCollector;
1:21a72bf: import org.apache.carbondata.core.datastore.page.statistics.KeyPageStatsCollector;
1:21a72bf: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1:21a72bf: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:21a72bf: import org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex;
1:21a72bf: import org.apache.carbondata.core.metadata.datatype.DataType;
1:21a72bf: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:21a72bf: import org.apache.carbondata.core.util.CarbonMetadataUtil;
1:d7393da: import org.apache.carbondata.core.util.CarbonUtil;
1:d7393da: import org.apache.carbondata.format.BlockletHeader;
1:21a72bf: import org.apache.carbondata.format.BlockletIndex;
1:d7393da: import org.apache.carbondata.format.BlockletInfo;
1:d7393da: import org.apache.carbondata.format.MutationType;
1:21a72bf: import org.apache.carbondata.streaming.segment.StreamSegment;
1:d7393da: 
1:d7393da: /**
1:d7393da:  * stream blocklet writer
1:d7393da:  */
1:d7393da: public class StreamBlockletWriter {
1:d7393da:   private byte[] buffer;
1:d7393da:   private int maxSize;
1:d7393da:   private int maxRowNum;
1:d7393da:   private int rowSize;
1:d7393da:   private int count = 0;
1:d7393da:   private int rowIndex = -1;
1:8f08c4a:   private Compressor compressor;
1:d7393da: 
1:21a72bf:   private int dimCountWithoutComplex;
1:21a72bf:   private int measureCount;
1:21a72bf:   private DataType[] measureDataTypes;
1:21a72bf: 
1:21a72bf:   // blocklet level stats
1:21a72bf:   ColumnPageStatsCollector[] dimStatsCollectors;
1:21a72bf:   ColumnPageStatsCollector[] msrStatsCollectors;
1:21a72bf:   // blocklet level Min/Max
1:21a72bf:   private BlockletMinMaxIndex blockletMinMaxIndex;
1:21a72bf: 
1:21a72bf:   StreamBlockletWriter(int maxSize, int maxRowNum, int rowSize, int dimCountWithoutComplex,
1:8f08c4a:       int measureCount, DataType[] measureDataTypes, String compressorName) {
1:d7393da:     buffer = new byte[maxSize];
1:d7393da:     this.maxSize = maxSize;
1:d7393da:     this.maxRowNum = maxRowNum;
1:d7393da:     this.rowSize = rowSize;
1:21a72bf:     this.dimCountWithoutComplex = dimCountWithoutComplex;
1:21a72bf:     this.measureCount = measureCount;
1:21a72bf:     this.measureDataTypes = measureDataTypes;
1:8f08c4a:     this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
1:21a72bf:     initializeStatsCollector();
1:d7393da:   }
1:d7393da: 
1:21a72bf:   private void initializeStatsCollector() {
1:21a72bf:     // dimension stats collectors
1:21a72bf:     // not require to collector stats for complex type
1:21a72bf:     // so it only contains dictionary dimensions and no-dictionary dimensions
1:21a72bf:     dimStatsCollectors = new ColumnPageStatsCollector[dimCountWithoutComplex];
1:21a72bf:     // measure stats collectors
1:21a72bf:     msrStatsCollectors = new ColumnPageStatsCollector[measureCount];
1:21a72bf: 
1:21a72bf:     int dimCount = 0;
1:21a72bf:     for (; dimCount < dimCountWithoutComplex; dimCount++) {
1:21a72bf:       dimStatsCollectors[dimCount] =
1:21a72bf:           KeyPageStatsCollector.newInstance(DataTypes.BYTE_ARRAY);
1:21a72bf:     }
1:21a72bf: 
1:21a72bf:     for (int msrCount = 0; msrCount < measureCount; msrCount++) {
1:21a72bf:       msrStatsCollectors[msrCount] =
1:21a72bf:           PrimitivePageStatsCollector.newInstance(measureDataTypes[msrCount]);
1:21a72bf:     }
1:21a72bf:   }
1:21a72bf: 
1:21a72bf: 
1:d7393da:   private void ensureCapacity(int space) {
1:d7393da:     int newcount = space + count;
1:d7393da:     if (newcount > buffer.length) {
1:d7393da:       byte[] newbuf = new byte[Math.max(newcount, buffer.length + rowSize)];
1:d7393da:       System.arraycopy(buffer, 0, newbuf, 0, count);
1:d7393da:       buffer = newbuf;
1:d7393da:     }
1:d7393da:   }
1:d7393da: 
1:d7393da:   void reset() {
1:d7393da:     count = 0;
1:d7393da:     rowIndex = -1;
1:21a72bf:     initializeStatsCollector();
1:21a72bf:     blockletMinMaxIndex = null;
1:d7393da:   }
1:d7393da: 
1:d7393da:   byte[] getBytes() {
1:d7393da:     return buffer;
1:d7393da:   }
1:d7393da: 
1:d7393da:   int getCount() {
1:d7393da:     return count;
1:d7393da:   }
1:d7393da: 
1:d7393da:   int getRowIndex() {
1:d7393da:     return rowIndex;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void nextRow() {
1:d7393da:     rowIndex++;
1:d7393da:   }
1:d7393da: 
1:5969312:   void skipRow() {
1:5969312:     maxSize -- ;
1:5969312:     maxRowNum -- ;
1:5969312:   }
1:5969312: 
1:d7393da:   boolean isFull() {
1:d7393da:     return rowIndex == maxRowNum || count >= maxSize;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeBoolean(boolean val) {
1:d7393da:     ensureCapacity(1);
1:d7393da:     buffer[count] = (byte) (val ? 1 : 0);
1:d7393da:     count += 1;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeShort(int val) {
1:d7393da:     ensureCapacity(2);
1:d7393da:     buffer[count + 1] = (byte) (val);
1:d7393da:     buffer[count] = (byte) (val >>> 8);
1:d7393da:     count += 2;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeInt(int val) {
1:d7393da:     ensureCapacity(4);
1:d7393da:     buffer[count + 3] = (byte) (val);
1:d7393da:     buffer[count + 2] = (byte) (val >>> 8);
1:d7393da:     buffer[count + 1] = (byte) (val >>> 16);
1:d7393da:     buffer[count] = (byte) (val >>> 24);
1:d7393da:     count += 4;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeLong(long val) {
1:d7393da:     ensureCapacity(8);
1:d7393da:     buffer[count + 7] = (byte) (val);
1:d7393da:     buffer[count + 6] = (byte) (val >>> 8);
1:d7393da:     buffer[count + 5] = (byte) (val >>> 16);
1:d7393da:     buffer[count + 4] = (byte) (val >>> 24);
1:d7393da:     buffer[count + 3] = (byte) (val >>> 32);
1:d7393da:     buffer[count + 2] = (byte) (val >>> 40);
1:d7393da:     buffer[count + 1] = (byte) (val >>> 48);
1:d7393da:     buffer[count] = (byte) (val >>> 56);
1:d7393da:     count += 8;
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeDouble(double val) {
1:d7393da:     writeLong(Double.doubleToLongBits(val));
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeBytes(byte[] b) {
1:d7393da:     writeBytes(b, 0, b.length);
1:d7393da:   }
1:d7393da: 
1:d7393da:   void writeBytes(byte[] b, int off, int len) {
1:d7393da:     ensureCapacity(len);
1:d7393da:     System.arraycopy(b, off, buffer, count, len);
1:d7393da:     count += len;
1:d7393da:   }
1:d7393da: 
1:21a72bf:   private SimpleStatsResult[] getDimStats() {
1:21a72bf:     if (dimStatsCollectors == null) {
1:21a72bf:       return new SimpleStatsResult[0];
1:21a72bf:     }
1:21a72bf:     SimpleStatsResult[] stats = new SimpleStatsResult[dimStatsCollectors.length];
1:21a72bf:     int dimCount = 0;
1:21a72bf:     for (; dimCount < dimStatsCollectors.length; dimCount++) {
1:21a72bf:       stats[dimCount] = dimStatsCollectors[dimCount].getPageStats();
1:21a72bf:     }
1:21a72bf:     return stats;
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   private SimpleStatsResult[] getMsrStats() {
1:21a72bf:     if (msrStatsCollectors == null) {
1:21a72bf:       return new SimpleStatsResult[0];
1:21a72bf:     }
1:21a72bf:     SimpleStatsResult[] stats = new SimpleStatsResult[msrStatsCollectors.length];
1:21a72bf:     for (int mrsCount = 0; mrsCount < msrStatsCollectors.length; mrsCount++) {
1:21a72bf:       stats[mrsCount] = msrStatsCollectors[mrsCount].getPageStats();
1:21a72bf:     }
1:21a72bf:     return stats;
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   BlockletMinMaxIndex generateBlockletMinMax() {
1:21a72bf:     if (blockletMinMaxIndex == null) {
1:21a72bf:       blockletMinMaxIndex = StreamSegment.collectMinMaxIndex(getDimStats(), getMsrStats());
1:21a72bf:     }
1:21a72bf:     return blockletMinMaxIndex;
1:21a72bf:   }
1:21a72bf: 
1:d7393da:   void apppendBlocklet(DataOutputStream outputStream) throws IOException {
1:d7393da:     outputStream.write(CarbonStreamOutputFormat.CARBON_SYNC_MARKER);
1:d7393da: 
1:d7393da:     BlockletInfo blockletInfo = new BlockletInfo();
1:d7393da:     blockletInfo.setNum_rows(getRowIndex() + 1);
1:d7393da:     BlockletHeader blockletHeader = new BlockletHeader();
1:d7393da:     blockletHeader.setBlocklet_length(getCount());
1:d7393da:     blockletHeader.setMutation(MutationType.INSERT);
1:d7393da:     blockletHeader.setBlocklet_info(blockletInfo);
1:21a72bf:     // add blocklet level min/max
1:21a72bf:     blockletMinMaxIndex = generateBlockletMinMax();
1:21a72bf:     if (blockletInfo.getNum_rows() > 1) {
1:21a72bf:       BlockletIndex blockletIndex = new BlockletIndex();
1:21a72bf:       blockletIndex.setMin_max_index(CarbonMetadataUtil.convertMinMaxIndex(blockletMinMaxIndex));
1:21a72bf:       blockletHeader.setBlocklet_index(blockletIndex);
1:21a72bf:     }
1:d7393da:     byte[] headerBytes = CarbonUtil.getByteArray(blockletHeader);
1:d7393da:     outputStream.writeInt(headerBytes.length);
1:d7393da:     outputStream.write(headerBytes);
1:d7393da: 
1:d7393da:     byte[] compressed = compressor.compressByte(getBytes(), getCount());
1:d7393da:     outputStream.writeInt(compressed.length);
1:d7393da:     outputStream.write(compressed);
1:d7393da:   }
1:d7393da: 
1:d7393da:   void close() {
1:d7393da:   }
1:d7393da: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   private Compressor compressor;
/////////////////////////////////////////////////////////////////////////
1:       int measureCount, DataType[] measureDataTypes, String compressorName) {
/////////////////////////////////////////////////////////////////////////
1:     this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
author:QiangCai
-------------------------------------------------------------------------------
commit:21a72bf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.ColumnPageStatsCollector;
1: import org.apache.carbondata.core.datastore.page.statistics.KeyPageStatsCollector;
1: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1: import org.apache.carbondata.core.metadata.blocklet.index.BlockletMinMaxIndex;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.CarbonMetadataUtil;
1: import org.apache.carbondata.format.BlockletIndex;
1: import org.apache.carbondata.streaming.segment.StreamSegment;
/////////////////////////////////////////////////////////////////////////
1:   private int dimCountWithoutComplex;
1:   private int measureCount;
1:   private DataType[] measureDataTypes;
1: 
1:   // blocklet level stats
1:   ColumnPageStatsCollector[] dimStatsCollectors;
1:   ColumnPageStatsCollector[] msrStatsCollectors;
1:   // blocklet level Min/Max
1:   private BlockletMinMaxIndex blockletMinMaxIndex;
1: 
1:   StreamBlockletWriter(int maxSize, int maxRowNum, int rowSize, int dimCountWithoutComplex,
0:       int measureCount, DataType[] measureDataTypes) {
1:     this.dimCountWithoutComplex = dimCountWithoutComplex;
1:     this.measureCount = measureCount;
1:     this.measureDataTypes = measureDataTypes;
1:     initializeStatsCollector();
1:   private void initializeStatsCollector() {
1:     // dimension stats collectors
1:     // not require to collector stats for complex type
1:     // so it only contains dictionary dimensions and no-dictionary dimensions
1:     dimStatsCollectors = new ColumnPageStatsCollector[dimCountWithoutComplex];
1:     // measure stats collectors
1:     msrStatsCollectors = new ColumnPageStatsCollector[measureCount];
1: 
1:     int dimCount = 0;
1:     for (; dimCount < dimCountWithoutComplex; dimCount++) {
1:       dimStatsCollectors[dimCount] =
1:           KeyPageStatsCollector.newInstance(DataTypes.BYTE_ARRAY);
1:     }
1: 
1:     for (int msrCount = 0; msrCount < measureCount; msrCount++) {
1:       msrStatsCollectors[msrCount] =
1:           PrimitivePageStatsCollector.newInstance(measureDataTypes[msrCount]);
1:     }
1:   }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     initializeStatsCollector();
1:     blockletMinMaxIndex = null;
/////////////////////////////////////////////////////////////////////////
1:   private SimpleStatsResult[] getDimStats() {
1:     if (dimStatsCollectors == null) {
1:       return new SimpleStatsResult[0];
1:     }
1:     SimpleStatsResult[] stats = new SimpleStatsResult[dimStatsCollectors.length];
1:     int dimCount = 0;
1:     for (; dimCount < dimStatsCollectors.length; dimCount++) {
1:       stats[dimCount] = dimStatsCollectors[dimCount].getPageStats();
1:     }
1:     return stats;
1:   }
1: 
1:   private SimpleStatsResult[] getMsrStats() {
1:     if (msrStatsCollectors == null) {
1:       return new SimpleStatsResult[0];
1:     }
1:     SimpleStatsResult[] stats = new SimpleStatsResult[msrStatsCollectors.length];
1:     for (int mrsCount = 0; mrsCount < msrStatsCollectors.length; mrsCount++) {
1:       stats[mrsCount] = msrStatsCollectors[mrsCount].getPageStats();
1:     }
1:     return stats;
1:   }
1: 
1:   BlockletMinMaxIndex generateBlockletMinMax() {
1:     if (blockletMinMaxIndex == null) {
1:       blockletMinMaxIndex = StreamSegment.collectMinMaxIndex(getDimStats(), getMsrStats());
1:     }
1:     return blockletMinMaxIndex;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     // add blocklet level min/max
1:     blockletMinMaxIndex = generateBlockletMinMax();
1:     if (blockletInfo.getNum_rows() > 1) {
1:       BlockletIndex blockletIndex = new BlockletIndex();
1:       blockletIndex.setMin_max_index(CarbonMetadataUtil.convertMinMaxIndex(blockletMinMaxIndex));
1:       blockletHeader.setBlocklet_index(blockletIndex);
1:     }
commit:d7393da
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.hadoop.streaming;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.format.BlockletHeader;
1: import org.apache.carbondata.format.BlockletInfo;
1: import org.apache.carbondata.format.MutationType;
1: 
1: /**
1:  * stream blocklet writer
1:  */
1: public class StreamBlockletWriter {
1:   private byte[] buffer;
1:   private int maxSize;
1:   private int maxRowNum;
1:   private int rowSize;
1:   private int count = 0;
1:   private int rowIndex = -1;
0:   private Compressor compressor = CompressorFactory.getInstance().getCompressor();
1: 
0:   StreamBlockletWriter(int maxSize, int maxRowNum, int rowSize) {
1:     buffer = new byte[maxSize];
1:     this.maxSize = maxSize;
1:     this.maxRowNum = maxRowNum;
1:     this.rowSize = rowSize;
1:   }
1: 
1:   private void ensureCapacity(int space) {
1:     int newcount = space + count;
1:     if (newcount > buffer.length) {
1:       byte[] newbuf = new byte[Math.max(newcount, buffer.length + rowSize)];
1:       System.arraycopy(buffer, 0, newbuf, 0, count);
1:       buffer = newbuf;
1:     }
1:   }
1: 
1:   void reset() {
1:     count = 0;
1:     rowIndex = -1;
1:   }
1: 
1:   byte[] getBytes() {
1:     return buffer;
1:   }
1: 
1:   int getCount() {
1:     return count;
1:   }
1: 
1:   int getRowIndex() {
1:     return rowIndex;
1:   }
1: 
1:   void nextRow() {
1:     rowIndex++;
1:   }
1: 
1:   boolean isFull() {
1:     return rowIndex == maxRowNum || count >= maxSize;
1:   }
1: 
1:   void writeBoolean(boolean val) {
1:     ensureCapacity(1);
1:     buffer[count] = (byte) (val ? 1 : 0);
1:     count += 1;
1:   }
1: 
1:   void writeShort(int val) {
1:     ensureCapacity(2);
1:     buffer[count + 1] = (byte) (val);
1:     buffer[count] = (byte) (val >>> 8);
1:     count += 2;
1:   }
1: 
1:   void writeInt(int val) {
1:     ensureCapacity(4);
1:     buffer[count + 3] = (byte) (val);
1:     buffer[count + 2] = (byte) (val >>> 8);
1:     buffer[count + 1] = (byte) (val >>> 16);
1:     buffer[count] = (byte) (val >>> 24);
1:     count += 4;
1:   }
1: 
1:   void writeLong(long val) {
1:     ensureCapacity(8);
1:     buffer[count + 7] = (byte) (val);
1:     buffer[count + 6] = (byte) (val >>> 8);
1:     buffer[count + 5] = (byte) (val >>> 16);
1:     buffer[count + 4] = (byte) (val >>> 24);
1:     buffer[count + 3] = (byte) (val >>> 32);
1:     buffer[count + 2] = (byte) (val >>> 40);
1:     buffer[count + 1] = (byte) (val >>> 48);
1:     buffer[count] = (byte) (val >>> 56);
1:     count += 8;
1:   }
1: 
1:   void writeDouble(double val) {
1:     writeLong(Double.doubleToLongBits(val));
1:   }
1: 
1:   void writeBytes(byte[] b) {
1:     writeBytes(b, 0, b.length);
1:   }
1: 
1:   void writeBytes(byte[] b, int off, int len) {
1:     ensureCapacity(len);
1:     System.arraycopy(b, off, buffer, count, len);
1:     count += len;
1:   }
1: 
1:   void apppendBlocklet(DataOutputStream outputStream) throws IOException {
1:     outputStream.write(CarbonStreamOutputFormat.CARBON_SYNC_MARKER);
1: 
1:     BlockletInfo blockletInfo = new BlockletInfo();
1:     blockletInfo.setNum_rows(getRowIndex() + 1);
1:     BlockletHeader blockletHeader = new BlockletHeader();
1:     blockletHeader.setBlocklet_length(getCount());
1:     blockletHeader.setMutation(MutationType.INSERT);
1:     blockletHeader.setBlocklet_info(blockletInfo);
1:     byte[] headerBytes = CarbonUtil.getByteArray(blockletHeader);
1:     outputStream.writeInt(headerBytes.length);
1:     outputStream.write(headerBytes);
1: 
1:     byte[] compressed = compressor.compressByte(getBytes(), getCount());
1:     outputStream.writeInt(compressed.length);
1:     outputStream.write(compressed);
1:   }
1: 
1:   void close() {
1:   }
1: }
author:Geetika Gupta
-------------------------------------------------------------------------------
commit:5969312
/////////////////////////////////////////////////////////////////////////
1:   void skipRow() {
1:     maxSize -- ;
1:     maxRowNum -- ;
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:c723947
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.streaming;
============================================================================