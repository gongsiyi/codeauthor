1:181c280: /*
1:181c280:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:181c280:  * contributor license agreements.  See the NOTICE file distributed with
1:181c280:  * this work for additional information regarding copyright ownership.
1:181c280:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:181c280:  * (the "License"); you may not use this file except in compliance with
1:181c280:  * the License.  You may obtain a copy of the License at
1:181c280:  *
1:181c280:  *    http://www.apache.org/licenses/LICENSE-2.0
1:181c280:  *
1:181c280:  * Unless required by applicable law or agreed to in writing, software
1:181c280:  * distributed under the License is distributed on an "AS IS" BASIS,
1:181c280:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:181c280:  * See the License for the specific language governing permissions and
1:181c280:  * limitations under the License.
1:181c280:  */
2:181c280: 
1:181c280: package org.apache.carbondata.core.metadata.schema.datamap;
1:d23f7fa: 
1:181c280: /**
1:181c280:  * type for create datamap
1:181c280:  * The syntax of datamap creation is as follows.
1:05086e5:  * CREATE DATAMAP IF NOT EXISTS dataMapName ON TABLE tableName USING 'DataMapClassProvider'
1:181c280:  * DMPROPERTIES('KEY'='VALUE') AS SELECT COUNT(COL1) FROM tableName
1:181c280:  *
1:181c280:  * Please refer {{org.apache.spark.sql.parser.CarbonSpark2SqlParser}}
1:181c280:  */
1:181c280: 
1:05086e5: public enum DataMapClassProvider {
1:46d9bf9:   PREAGGREGATE("org.apache.carbondata.core.datamap.AggregateDataMap", "preaggregate"),
1:860e144:   TIMESERIES("org.apache.carbondata.core.datamap.TimeSeriesDataMap", "timeseries"),
1:9db662a:   LUCENE("org.apache.carbondata.datamap.lucene.LuceneFineGrainDataMapFactory","lucene"),
1:ffddba7:   BLOOMFILTER("org.apache.carbondata.datamap.bloom.BloomCoarseGrainDataMapFactory", "bloomfilter"),
1:ffddba7:   MV("org.apache.carbondata.core.datamap.MVDataMap", "mv");
1:46d9bf9: 
1:46d9bf9:   /**
1:46d9bf9:    * Fully qualified class name of datamap
1:46d9bf9:    */
1:46d9bf9:   private String className;
1:46d9bf9: 
1:46d9bf9:   /**
1:46d9bf9:    * Short name representation of datamap
1:46d9bf9:    */
1:46d9bf9:   private String shortName;
1:46d9bf9: 
1:05086e5:   DataMapClassProvider(String className, String shortName) {
1:46d9bf9:     this.className = className;
1:46d9bf9:     this.shortName = shortName;
1:46d9bf9:   }
1:860e144: 
1:46d9bf9:   public String getClassName() {
1:46d9bf9:     return className;
1:46d9bf9:   }
1:46d9bf9: 
1:d23f7fa:   public String getShortName() {
1:d23f7fa:     return shortName;
1:46d9bf9:   }
1:46d9bf9: 
1:46d9bf9:   private boolean isEqual(String dataMapClass) {
1:46d9bf9:     return (dataMapClass != null &&
1:46d9bf9:         (dataMapClass.equals(className) ||
1:46d9bf9:         dataMapClass.equalsIgnoreCase(shortName)));
1:46d9bf9:   }
1:46d9bf9: 
1:860e144:   public static DataMapClassProvider getDataMapProviderOnName(String dataMapShortname) {
1:860e144:     if (TIMESERIES.isEqual(dataMapShortname)) {
1:860e144:       return TIMESERIES;
1:860e144:     } else if (PREAGGREGATE.isEqual(dataMapShortname)) {
1:860e144:       return PREAGGREGATE;
1:860e144:     } else if (LUCENE.isEqual(dataMapShortname)) {
2:860e144:       return LUCENE;
1:9db662a:     } else if (BLOOMFILTER.isEqual(dataMapShortname)) {
1:9db662a:       return BLOOMFILTER;
1:860e144:     } else {
1:860e144:       throw new UnsupportedOperationException("Unknown datamap provider" + dataMapShortname);
1:860e144:     }
1:860e144:   }
1:46d9bf9: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:ffddba7
/////////////////////////////////////////////////////////////////////////
1:   BLOOMFILTER("org.apache.carbondata.datamap.bloom.BloomCoarseGrainDataMapFactory", "bloomfilter"),
1:   MV("org.apache.carbondata.core.datamap.MVDataMap", "mv");
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   LUCENE("org.apache.carbondata.datamap.lucene.LuceneFineGrainDataMapFactory","lucene"),
0:   BLOOMFILTER("org.apache.carbondata.datamap.bloom.BloomCoarseGrainDataMapFactory", "bloomfilter");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } else if (BLOOMFILTER.isEqual(dataMapShortname)) {
1:       return BLOOMFILTER;
author:akashrn5
-------------------------------------------------------------------------------
commit:860e144
/////////////////////////////////////////////////////////////////////////
1:   TIMESERIES("org.apache.carbondata.core.datamap.TimeSeriesDataMap", "timeseries"),
0:   LUCENE("org.apache.carbondata.datamap.lucene.LuceneFineGrainDataMapFactory","lucene");
/////////////////////////////////////////////////////////////////////////
0:     } else if (LUCENE.isEqual(dataMapClass)) {
1:       return LUCENE;
1: 
1:   public static DataMapClassProvider getDataMapProviderOnName(String dataMapShortname) {
1:     if (TIMESERIES.isEqual(dataMapShortname)) {
1:       return TIMESERIES;
1:     } else if (PREAGGREGATE.isEqual(dataMapShortname)) {
1:       return PREAGGREGATE;
1:     } else if (LUCENE.isEqual(dataMapShortname)) {
1:       return LUCENE;
1:     } else {
1:       throw new UnsupportedOperationException("Unknown datamap provider" + dataMapShortname);
1:     }
1:   }
author:ravipesala
-------------------------------------------------------------------------------
commit:05086e5
/////////////////////////////////////////////////////////////////////////
1:  * CREATE DATAMAP IF NOT EXISTS dataMapName ON TABLE tableName USING 'DataMapClassProvider'
1: public enum DataMapClassProvider {
/////////////////////////////////////////////////////////////////////////
1:   DataMapClassProvider(String className, String shortName) {
/////////////////////////////////////////////////////////////////////////
0:   public static DataMapClassProvider getDataMapProvider(String dataMapClass) {
commit:46d9bf9
/////////////////////////////////////////////////////////////////////////
1:   PREAGGREGATE("org.apache.carbondata.core.datamap.AggregateDataMap", "preaggregate"),
0:   TIMESERIES("org.apache.carbondata.core.datamap.TimeSeriesDataMap", "timeseries");
1: 
1:   /**
1:    * Fully qualified class name of datamap
1:    */
1:   private String className;
1: 
1:   /**
1:    * Short name representation of datamap
1:    */
1:   private String shortName;
1: 
0:   DataMapProvider(String className, String shortName) {
1:     this.className = className;
1:     this.shortName = shortName;
1:   }
1: 
1:   public String getClassName() {
1:     return className;
1:   }
1: 
1:   private boolean isEqual(String dataMapClass) {
1:     return (dataMapClass != null &&
1:         (dataMapClass.equals(className) ||
1:         dataMapClass.equalsIgnoreCase(shortName)));
1:   }
1: 
0:   public static DataMapProvider getDataMapProvider(String dataMapClass) {
0:     if (TIMESERIES.isEqual(dataMapClass)) {
0:       return TIMESERIES;
0:     } else if (PREAGGREGATE.isEqual(dataMapClass)) {
0:       return PREAGGREGATE;
0:     } else {
0:       throw new UnsupportedOperationException("Unknown datamap provider/class " + dataMapClass);
1:     }
1:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:d23f7fa
/////////////////////////////////////////////////////////////////////////
1:   public String getShortName() {
1:     return shortName;
0:   }
1: 
author:xubo245
-------------------------------------------------------------------------------
commit:181c280
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.datamap;
1: 
1: /**
1:  * type for create datamap
1:  * The syntax of datamap creation is as follows.
0:  * CREATE DATAMAP IF NOT EXISTS dataMapName ON TABLE tableName USING 'DataMapProvider'
1:  * DMPROPERTIES('KEY'='VALUE') AS SELECT COUNT(COL1) FROM tableName
1:  *
1:  * Please refer {{org.apache.spark.sql.parser.CarbonSpark2SqlParser}}
1:  */
1: 
0: public enum DataMapProvider {
0:   PREAGGREGATE,
0:   TIMESERIES;
0: }
============================================================================