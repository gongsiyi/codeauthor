1:f82b10b: /*
1:f82b10b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f82b10b:  * contributor license agreements.  See the NOTICE file distributed with
1:f82b10b:  * this work for additional information regarding copyright ownership.
1:f82b10b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f82b10b:  * (the "License"); you may not use this file except in compliance with
1:f82b10b:  * the License.  You may obtain a copy of the License at
1:f82b10b:  *
1:f82b10b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f82b10b:  *
1:f82b10b:  * Unless required by applicable law or agreed to in writing, software
1:f82b10b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f82b10b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f82b10b:  * See the License for the specific language governing permissions and
1:f82b10b:  * limitations under the License.
1:f82b10b:  */
1:f82b10b: 
1:349c59c: package org.apache.carbondata.processing.loading.sort;
1:f82b10b: 
1:f82b10b: import java.util.concurrent.atomic.AtomicLong;
1:f82b10b: 
1:f82b10b: import org.apache.carbondata.common.logging.LogService;
1:f82b10b: import org.apache.carbondata.common.logging.LogServiceFactory;
1:f82b10b: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:f82b10b: import org.apache.carbondata.core.util.CarbonProperties;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:349c59c: import org.apache.carbondata.processing.loading.sort.impl.ParallelReadMergeSorterImpl;
1:d5396b1: import org.apache.carbondata.processing.loading.sort.impl.ParallelReadMergeSorterWithColumnRangeImpl;
1:349c59c: import org.apache.carbondata.processing.loading.sort.impl.UnsafeBatchParallelReadMergeSorterImpl;
1:349c59c: import org.apache.carbondata.processing.loading.sort.impl.UnsafeParallelReadMergeSorterImpl;
1:d5396b1: import org.apache.carbondata.processing.loading.sort.impl.UnsafeParallelReadMergeSorterWithColumnRangeImpl;
1:3807b2f: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:f82b10b: 
1:f82b10b: public class SorterFactory {
1:f82b10b: 
1:f82b10b:   private static final LogService LOGGER =
1:f82b10b:       LogServiceFactory.getLogService(SorterFactory.class.getName());
1:f82b10b: 
1:f82b10b:   public static Sorter createSorter(CarbonDataLoadConfiguration configuration, AtomicLong counter) {
1:f82b10b:     boolean offheapsort = Boolean.parseBoolean(CarbonProperties.getInstance()
1:f82b10b:         .getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT,
1:f82b10b:             CarbonCommonConstants.ENABLE_UNSAFE_SORT_DEFAULT));
1:3807b2f:     SortScopeOptions.SortScope sortScope = CarbonDataProcessorUtil.getSortScope(configuration);
1:f82b10b:     Sorter sorter;
1:f82b10b:     if (offheapsort) {
1:f82b10b:       if (configuration.getBucketingInfo() != null) {
1:d5396b1:         sorter = new UnsafeParallelReadMergeSorterWithColumnRangeImpl(counter,
1:f82b10b:             configuration.getBucketingInfo());
1:d5396b1:       } else if (configuration.getSortColumnRangeInfo() != null) {
1:d5396b1:         sorter = new UnsafeParallelReadMergeSorterWithColumnRangeImpl(counter,
1:d5396b1:             configuration.getSortColumnRangeInfo());
1:f82b10b:       } else {
1:f82b10b:         sorter = new UnsafeParallelReadMergeSorterImpl(counter);
1:f82b10b:       }
1:f82b10b:     } else {
1:f82b10b:       if (configuration.getBucketingInfo() != null) {
1:d5396b1:         sorter = new ParallelReadMergeSorterWithColumnRangeImpl(counter,
1:d5396b1:             configuration.getBucketingInfo());
1:d5396b1:       } else if (configuration.getSortColumnRangeInfo() != null) {
1:d5396b1:         sorter = new ParallelReadMergeSorterWithColumnRangeImpl(counter,
1:d5396b1:             configuration.getSortColumnRangeInfo());
1:f82b10b:       } else {
1:f82b10b:         sorter = new ParallelReadMergeSorterImpl(counter);
1:f82b10b:       }
1:f82b10b:     }
1:3807b2f:     if (sortScope.equals(SortScopeOptions.SortScope.BATCH_SORT)) {
1:f82b10b:       if (configuration.getBucketingInfo() == null) {
1:f82b10b:         sorter = new UnsafeBatchParallelReadMergeSorterImpl(counter);
1:f82b10b:       } else {
1:f82b10b:         LOGGER.warn(
1:f82b10b:             "Batch sort is not enabled in case of bucketing. Falling back to " + sorter.getClass()
1:f82b10b:                 .getName());
1:f82b10b:       }
1:f82b10b:     }
1:f82b10b:     return sorter;
1:f82b10b:   }
1:f82b10b: 
1:f82b10b: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.sort.impl.ParallelReadMergeSorterWithColumnRangeImpl;
1: import org.apache.carbondata.processing.loading.sort.impl.UnsafeParallelReadMergeSorterWithColumnRangeImpl;
/////////////////////////////////////////////////////////////////////////
1:         sorter = new UnsafeParallelReadMergeSorterWithColumnRangeImpl(counter,
1:       } else if (configuration.getSortColumnRangeInfo() != null) {
1:         sorter = new UnsafeParallelReadMergeSorterWithColumnRangeImpl(counter,
1:             configuration.getSortColumnRangeInfo());
1:         sorter = new ParallelReadMergeSorterWithColumnRangeImpl(counter,
1:             configuration.getBucketingInfo());
1:       } else if (configuration.getSortColumnRangeInfo() != null) {
1:         sorter = new ParallelReadMergeSorterWithColumnRangeImpl(counter,
1:             configuration.getSortColumnRangeInfo());
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1: import org.apache.carbondata.processing.loading.sort.impl.ParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.loading.sort.impl.ParallelReadMergeSorterWithBucketingImpl;
1: import org.apache.carbondata.processing.loading.sort.impl.UnsafeBatchParallelReadMergeSorterImpl;
1: import org.apache.carbondata.processing.loading.sort.impl.UnsafeParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.loading.sort.impl.UnsafeParallelReadMergeSorterWithBucketingImpl;
author:ravipesala
-------------------------------------------------------------------------------
commit:3807b2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
1:     SortScopeOptions.SortScope sortScope = CarbonDataProcessorUtil.getSortScope(configuration);
/////////////////////////////////////////////////////////////////////////
1:     if (sortScope.equals(SortScopeOptions.SortScope.BATCH_SORT)) {
commit:f82b10b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.sort;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.sort.impl.ParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.newflow.sort.impl.ParallelReadMergeSorterWithBucketingImpl;
0: import org.apache.carbondata.processing.newflow.sort.impl.UnsafeBatchParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.newflow.sort.impl.UnsafeParallelReadMergeSorterImpl;
0: import org.apache.carbondata.processing.newflow.sort.impl.UnsafeParallelReadMergeSorterWithBucketingImpl;
1: 
1: public class SorterFactory {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SorterFactory.class.getName());
1: 
1:   public static Sorter createSorter(CarbonDataLoadConfiguration configuration, AtomicLong counter) {
1:     boolean offheapsort = Boolean.parseBoolean(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.ENABLE_UNSAFE_SORT,
1:             CarbonCommonConstants.ENABLE_UNSAFE_SORT_DEFAULT));
0:     boolean batchSort = Boolean.parseBoolean(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.LOAD_USE_BATCH_SORT,
0:             CarbonCommonConstants.LOAD_USE_BATCH_SORT_DEFAULT));
1:     Sorter sorter;
1:     if (offheapsort) {
1:       if (configuration.getBucketingInfo() != null) {
0:         sorter = new UnsafeParallelReadMergeSorterWithBucketingImpl(configuration.getDataFields(),
1:             configuration.getBucketingInfo());
1:       } else {
1:         sorter = new UnsafeParallelReadMergeSorterImpl(counter);
1:       }
1:     } else {
1:       if (configuration.getBucketingInfo() != null) {
0:         sorter =
0:             new ParallelReadMergeSorterWithBucketingImpl(counter, configuration.getBucketingInfo());
1:       } else {
1:         sorter = new ParallelReadMergeSorterImpl(counter);
1:       }
1:     }
0:     if (batchSort) {
1:       if (configuration.getBucketingInfo() == null) {
1:         sorter = new UnsafeBatchParallelReadMergeSorterImpl(counter);
1:       } else {
1:         LOGGER.warn(
1:             "Batch sort is not enabled in case of bucketing. Falling back to " + sorter.getClass()
1:                 .getName());
1:       }
1:     }
1:     return sorter;
1:   }
1: 
1: }
============================================================================