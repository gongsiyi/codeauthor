1:cc288ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cc288ff:  *
1:cc288ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cc288ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cc288ff:  */
1:cc288ff: package org.apache.carbondata.core.cache.dictionary;
2:cc288ff: 
1:956833e: import java.util.HashMap;
1:956833e: import java.util.Map;
1:cc288ff: 
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.metadata.ColumnIdentifier;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cc288ff: 
1:956833e: import mockit.Mock;
1:956833e: import mockit.MockUp;
1:cc288ff: import org.junit.BeforeClass;
1:cc288ff: import org.junit.Test;
1:cc288ff: 
1:956833e: import static junit.framework.TestCase.assertEquals;
1:956833e: import static junit.framework.TestCase.assertNotNull;
1:956833e: import static junit.framework.TestCase.assertTrue;
1:cc288ff: 
1:cc288ff: public class DictionaryColumnUniqueIdentifierTest {
1:cc288ff: 
1:cc288ff:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier1;
1:cc288ff:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier2;
1:cc288ff:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier3;
1:cc288ff: 
1:cc288ff:   @BeforeClass public static void setUp() throws Exception {
1:cc288ff:     CarbonTableIdentifier carbonTableIdentifier1 =
1:cc288ff:         new CarbonTableIdentifier("testDatabase", "testTable", "1");
1:cc288ff:     CarbonTableIdentifier carbonTableIdentifier2 =
1:cc288ff:         new CarbonTableIdentifier("testDatabase", "testTable", "2");
1:2fe7758:     AbsoluteTableIdentifier absoluteTableIdentifier1 = AbsoluteTableIdentifier.from("storepath",
1:1155d4d:         carbonTableIdentifier1);
1:2fe7758:     AbsoluteTableIdentifier absoluteTableIdentifier2 = AbsoluteTableIdentifier.from("storepath",
1:1155d4d:         carbonTableIdentifier2);
1:cc288ff:     Map<String, String> properties = new HashMap<>();
1:956833e:     ColumnIdentifier columnIdentifier = new ColumnIdentifier("2", properties, DataTypes.STRING);
1:956833e:     ColumnIdentifier columnIdentifier2 = new ColumnIdentifier("1", properties, DataTypes.INT);
1:cc288ff:     dictionaryColumnUniqueIdentifier1 =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier1, columnIdentifier,
1:933e30c:             DataTypes.STRING, null);
1:cc288ff:     dictionaryColumnUniqueIdentifier2 =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier2, columnIdentifier2,
1:933e30c:             DataTypes.STRING, null);
1:cc288ff:     dictionaryColumnUniqueIdentifier3 =
1:1155d4d:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier2, columnIdentifier,
1:933e30c:             DataTypes.STRING, null);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetDataType() {
1:933e30c:     assertEquals(dictionaryColumnUniqueIdentifier1.getDataType(), DataTypes.STRING);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testForEqualsWithDifferentObjectsWithDifferentColumnIdentifier() {
1:cc288ff:     assertTrue(!dictionaryColumnUniqueIdentifier1.equals(dictionaryColumnUniqueIdentifier2));
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testForEqualsWithDifferentObjectsWithSameCarbonTableIdentifier() {
1:cc288ff:     assertTrue(!dictionaryColumnUniqueIdentifier3.equals(dictionaryColumnUniqueIdentifier2));
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testForEquals() {
1:cc288ff:     assertTrue(dictionaryColumnUniqueIdentifier1.equals(dictionaryColumnUniqueIdentifier1));
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testForEqualsWithNull() {
1:cc288ff:     assertNotNull(dictionaryColumnUniqueIdentifier1);
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testForEqualsWithDifferentClass() {
1:cc288ff:     assertTrue(!dictionaryColumnUniqueIdentifier1.equals(""));
1:cc288ff:   }
1:cc288ff: 
1:cc288ff:   @Test public void testToGetHashCode() {
1:cc288ff:     new MockUp<CarbonTableIdentifier>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public int hashCode() {
1:cc288ff:         return 1;
1:cc288ff:       }
1:cc288ff:     };
1:cc288ff:     new MockUp<ColumnIdentifier>() {
1:cc288ff:       @SuppressWarnings("unused") @Mock public int hashCode() {
1:cc288ff:         return 2;
1:cc288ff:       }
1:cc288ff:     };
1:1155d4d:     assertEquals(dictionaryColumnUniqueIdentifier1.hashCode(), 937100380);
1:cc288ff:   }
1:cc288ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:2fe7758
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier absoluteTableIdentifier1 = AbsoluteTableIdentifier.from("storepath",
1:     AbsoluteTableIdentifier absoluteTableIdentifier2 = AbsoluteTableIdentifier.from("storepath",
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1:             DataTypes.STRING, null);
1:             DataTypes.STRING, null);
1:             DataTypes.STRING, null);
1:     assertEquals(dictionaryColumnUniqueIdentifier1.getDataType(), DataTypes.STRING);
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import mockit.Mock;
1: import mockit.MockUp;
1: import static junit.framework.TestCase.assertEquals;
1: import static junit.framework.TestCase.assertNotNull;
1: import static junit.framework.TestCase.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:     ColumnIdentifier columnIdentifier = new ColumnIdentifier("2", properties, DataTypes.STRING);
1:     ColumnIdentifier columnIdentifier2 = new ColumnIdentifier("1", properties, DataTypes.INT);
0:             DataTypes.MAP, null);
0:             DataTypes.MAP, null);
0:             DataTypes.MAP, null);
0:     assertEquals(dictionaryColumnUniqueIdentifier1.getDataType(), DataTypes.MAP);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     AbsoluteTableIdentifier absoluteTableIdentifier1 = new AbsoluteTableIdentifier("storepath",
1:         carbonTableIdentifier1);
0:     AbsoluteTableIdentifier absoluteTableIdentifier2 = new AbsoluteTableIdentifier("storepath",
1:         carbonTableIdentifier2);
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier1, columnIdentifier,
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier2, columnIdentifier2,
1:         new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier2, columnIdentifier,
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(dictionaryColumnUniqueIdentifier1.hashCode(), 937100380);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0:             DataType.MAP, null);
0:             DataType.MAP, null);
0:             DataType.MAP, null);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
author:kunal642
-------------------------------------------------------------------------------
commit:cc288ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
0: import mockit.Mock;
0: import mockit.MockUp;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: import static junit.framework.TestCase.*;
1: 
1: public class DictionaryColumnUniqueIdentifierTest {
1: 
1:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier1;
1:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier2;
1:   private static DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier3;
1: 
1:   @BeforeClass public static void setUp() throws Exception {
1:     CarbonTableIdentifier carbonTableIdentifier1 =
1:         new CarbonTableIdentifier("testDatabase", "testTable", "1");
1:     CarbonTableIdentifier carbonTableIdentifier2 =
1:         new CarbonTableIdentifier("testDatabase", "testTable", "2");
1:     Map<String, String> properties = new HashMap<>();
0:     ColumnIdentifier columnIdentifier = new ColumnIdentifier("2", properties, DataType.STRING);
0:     ColumnIdentifier columnIdentifier2 = new ColumnIdentifier("1", properties, DataType.INT);
1:     dictionaryColumnUniqueIdentifier1 =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier1, columnIdentifier,
0:             DataType.MAP);
1:     dictionaryColumnUniqueIdentifier2 =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier2, columnIdentifier2,
0:             DataType.MAP);
1:     dictionaryColumnUniqueIdentifier3 =
0:         new DictionaryColumnUniqueIdentifier(carbonTableIdentifier2, columnIdentifier,
0:             DataType.MAP);
1:   }
1: 
1:   @Test public void testToGetDataType() {
0:     assertEquals(dictionaryColumnUniqueIdentifier1.getDataType(), DataType.MAP);
1:   }
1: 
1:   @Test public void testForEqualsWithDifferentObjectsWithDifferentColumnIdentifier() {
1:     assertTrue(!dictionaryColumnUniqueIdentifier1.equals(dictionaryColumnUniqueIdentifier2));
1:   }
1: 
1:   @Test public void testForEqualsWithDifferentObjectsWithSameCarbonTableIdentifier() {
1:     assertTrue(!dictionaryColumnUniqueIdentifier3.equals(dictionaryColumnUniqueIdentifier2));
1:   }
1: 
1:   @Test public void testForEquals() {
1:     assertTrue(dictionaryColumnUniqueIdentifier1.equals(dictionaryColumnUniqueIdentifier1));
1:   }
1: 
1:   @Test public void testForEqualsWithNull() {
1:     assertNotNull(dictionaryColumnUniqueIdentifier1);
1:   }
1: 
1:   @Test public void testForEqualsWithDifferentClass() {
1:     assertTrue(!dictionaryColumnUniqueIdentifier1.equals(""));
1:   }
1: 
1:   @Test public void testToGetHashCode() {
1:     new MockUp<CarbonTableIdentifier>() {
1:       @SuppressWarnings("unused") @Mock public int hashCode() {
1:         return 1;
1:       }
1:     };
1:     new MockUp<ColumnIdentifier>() {
1:       @SuppressWarnings("unused") @Mock public int hashCode() {
1:         return 2;
1:       }
1:     };
0:     assertEquals(dictionaryColumnUniqueIdentifier1.hashCode(), 33);
1:   }
1: }
============================================================================