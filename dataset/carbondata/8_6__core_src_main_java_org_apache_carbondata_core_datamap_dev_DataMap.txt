1:b434346: /*
1:b434346:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b434346:  * contributor license agreements.  See the NOTICE file distributed with
1:b434346:  * this work for additional information regarding copyright ownership.
1:b434346:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b434346:  * (the "License"); you may not use this file except in compliance with
1:b434346:  * the License.  You may obtain a copy of the License at
1:b8a02f3:  *
1:b434346:  *    http://www.apache.org/licenses/LICENSE-2.0
4:b434346:  *
1:b434346:  * Unless required by applicable law or agreed to in writing, software
1:b434346:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b434346:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b434346:  * See the License for the specific language governing permissions and
1:b434346:  * limitations under the License.
2:b434346:  */
1:f089287: package org.apache.carbondata.core.datamap.dev;
2:b434346: 
1:f089287: import java.io.IOException;
1:b434346: import java.util.List;
1:b434346: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:ca7e2e3: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:f089287: import org.apache.carbondata.core.indexstore.Blocklet;
1:8d3c774: import org.apache.carbondata.core.indexstore.PartitionSpec;
1:f089287: import org.apache.carbondata.core.memory.MemoryException;
1:3894e1d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:3894e1d: import org.apache.carbondata.core.scan.expression.Expression;
1:b434346: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1:b434346: 
1:b8a02f3: /**
1:fc2a7eb:  * An entity which can store and retrieve index data.
1:b681244:  */
1:fc2a7eb: @InterfaceAudience.Internal
1:d35fbaf: public interface DataMap<T extends Blocklet> {
1:b681244: 
1:b681244:   /**
1:b434346:    * It is called to load the data map to memory or to initialize it.
1:b434346:    */
1:8f1a029:   void init(DataMapModel dataMapModel)
1:8f1a029:       throws MemoryException, IOException;
1:b434346: 
2:b434346:   /**
1:3894e1d:    * Prune the datamap with resolved filter expression and partition information.
1:3894e1d:    * It returns the list of blocklets where these filters can exist.
1:b434346:    */
1:d35fbaf:   List<T> prune(FilterResolverIntf filterExp, SegmentProperties segmentProperties,
1:bbb1092:       List<PartitionSpec> partitions) throws IOException;
1:b434346: 
1:3894e1d:   /**
1:3894e1d:    * Prune the datamap with filter expression and partition information. It returns the list of
1:3894e1d:    * blocklets where these filters can exist.
1:3894e1d:    */
1:3894e1d:   List<T> prune(Expression filter, SegmentProperties segmentProperties,
1:3894e1d:       List<PartitionSpec> partitions, AbsoluteTableIdentifier identifier) throws IOException;
1:3894e1d: 
2:b8a02f3:   // TODO Move this method to Abstract class
1:b434346:   /**
1:2bad144:    * Validate whether the current segment needs to be fetching the required data
1:b8a02f3:    */
1:2bad144:   boolean isScanRequired(FilterResolverIntf filterExp);
1:b8a02f3: 
1:b434346:   /**
1:b434346:    * Clear complete index table and release memory.
1:b434346:    */
1:b434346:   void clear();
1:b434346: 
1:b434346:   /**
1:07a77fa:    * clears all the resources for datamaps
1:b434346:    */
1:07a77fa:   void finish();
1:b434346: 
1:b434346: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1:   void init(DataMapModel dataMapModel)
1:       throws MemoryException, IOException;
author:ravipesala
-------------------------------------------------------------------------------
commit:3894e1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.scan.expression.Expression;
/////////////////////////////////////////////////////////////////////////
1:    * Prune the datamap with resolved filter expression and partition information.
1:    * It returns the list of blocklets where these filters can exist.
1:   /**
1:    * Prune the datamap with filter expression and partition information. It returns the list of
1:    * blocklets where these filters can exist.
1:    */
1:   List<T> prune(Expression filter, SegmentProperties segmentProperties,
1:       List<PartitionSpec> partitions, AbsoluteTableIdentifier identifier) throws IOException;
1: 
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: public interface DataMap<T extends Blocklet> {
/////////////////////////////////////////////////////////////////////////
1:   List<T> prune(FilterResolverIntf filterExp, SegmentProperties segmentProperties,
0:       List<PartitionSpec> partitions);
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.PartitionSpec;
/////////////////////////////////////////////////////////////////////////
0:   List<Blocklet> prune(FilterResolverIntf filterExp, List<PartitionSpec> partitions);
commit:b8a02f3
/////////////////////////////////////////////////////////////////////////
1:   // TODO Move this method to Abstract class
1:   /**
0:    * Prune the datamap with filter expression and partition information. It returns the list of
0:    * blocklets where these filters can exist.
1:    *
0:    * @param filterExp
0:    * @return
1:    */
0:   List<Blocklet> prune(FilterResolverIntf filterExp, List<String> partitions);
1: 
1:   // TODO Move this method to Abstract class
commit:0586146
/////////////////////////////////////////////////////////////////////////
0:   void init(DataMapModel dataMapModel) throws MemoryException, IOException;
commit:b681244
/////////////////////////////////////////////////////////////////////////
0:  * Datamap is an entity which can store and retrieve index data.
/////////////////////////////////////////////////////////////////////////
0:    * Convert datamap to distributable object
0:    * @return
1:    */
0:   DataMapDistributable toDistributable();
1: 
1:   /**
commit:b434346
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.core.indexstore;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: 
1: /**
0:  * Interface for adding and retrieving index data.
1:  */
0: public interface DataMap {
1: 
1:   /**
0:    * Give the writer to write the data.
1:    *
0:    * @return
1:    */
0:   DataMapWriter getWriter();
1: 
1:   /**
1:    * It is called to load the data map to memory or to initialize it.
1:    */
0:   void init(String path);
1: 
1:   /**
0:    * Prune the datamap with filter expression. It returns the list of
0:    * blocklets where these filters can exist.
1:    *
0:    * @param filterExp
0:    * @return
1:    */
0:   List<Blocklet> prune(FilterResolverIntf filterExp);
1: 
1:   /**
1:    * Clear complete index table and release memory.
1:    */
1:   void clear();
1: 
1: }
author:akashrn5
-------------------------------------------------------------------------------
commit:07a77fa
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * clears all the resources for datamaps
0:    */
1:   void finish();
0: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:bbb1092
/////////////////////////////////////////////////////////////////////////
1:       List<PartitionSpec> partitions) throws IOException;
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
/////////////////////////////////////////////////////////////////////////
1:  * An entity which can store and retrieve index data.
1: @InterfaceAudience.Internal
0: public interface DataMap<T extends Blocklet> {
commit:89a12af
/////////////////////////////////////////////////////////////////////////
0: public interface IndexDataMap<T extends Blocklet> {
commit:f089287
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datamap.dev;
1: import java.io.IOException;
0: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: import org.apache.carbondata.core.indexstore.Blocklet;
1: import org.apache.carbondata.core.memory.MemoryException;
/////////////////////////////////////////////////////////////////////////
0:   void init(String path) throws MemoryException, IOException;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:859d71c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:ca7e2e3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
/////////////////////////////////////////////////////////////////////////
author:manishgupta88
-------------------------------------------------------------------------------
commit:2bad144
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * Validate whether the current segment needs to be fetching the required data
0:    *
0:    * @param filterExp
0:    * @return
0:    */
1:   boolean isScanRequired(FilterResolverIntf filterExp);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:1e21cd1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   void init(String filePath) throws MemoryException, IOException;
/////////////////////////////////////////////////////////////////////////
============================================================================