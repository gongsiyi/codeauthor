1:d14c403: /*
1:d14c403:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d14c403:  * contributor license agreements.  See the NOTICE file distributed with
1:d14c403:  * this work for additional information regarding copyright ownership.
1:d14c403:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d14c403:  * (the "License"); you may not use this file except in compliance with
1:d14c403:  * the License.  You may obtain a copy of the License at
1:d14c403:  *
1:d14c403:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d14c403:  *
1:d14c403:  * Unless required by applicable law or agreed to in writing, software
1:d14c403:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d14c403:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d14c403:  * See the License for the specific language governing permissions and
1:d14c403:  * limitations under the License.
7:d14c403:  */
1:d14c403: package org.apache.carbondata.datamap.bloom;
15:d14c403: 
1:d14c403: import java.io.IOException;
1:d14c403: import java.util.ArrayList;
1:d14c403: import java.util.List;
1:d14c403: 
1:d14c403: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:d14c403: import org.apache.carbondata.common.logging.LogService;
1:d14c403: import org.apache.carbondata.common.logging.LogServiceFactory;
1:047c502: import org.apache.carbondata.core.cache.Cache;
1:047c502: import org.apache.carbondata.core.cache.CarbonLRUCache;
1:047c502: import org.apache.carbondata.core.memory.MemoryException;
1:d14c403: 
1:047c502: import org.apache.hadoop.util.bloom.CarbonBloomFilter;
1:d14c403: 
7:d14c403: /**
1:d14c403:  * This class is used to add cache for bloomfilter datamap to accelerate query through it.
1:047c502:  * The cache is implemented using carbon lru cache.
1:d14c403:  * As for the cache, the key is a bloomindex file for a shard and the value is the bloomfilters
1:d14c403:  * for the blocklets in this shard.
1:d14c403:  */
1:d14c403: @InterfaceAudience.Internal
1:047c502: public class BloomDataMapCache
1:047c502:     implements Cache<BloomCacheKeyValue.CacheKey, BloomCacheKeyValue.CacheValue> {
1:047c502:   private static final LogService LOGGER =
1:047c502:       LogServiceFactory.getLogService(BloomDataMapCache.class.getName());
1:047c502: 
1:d14c403:   /**
1:047c502:    * CarbonLRU cache
1:d14c403:    */
1:047c502:   private CarbonLRUCache lruCache;
1:d14c403: 
1:047c502:   public BloomDataMapCache(CarbonLRUCache lruCache) {
1:047c502:     this.lruCache = lruCache;
19:d14c403:   }
1:d14c403: 
1:047c502:   @Override
1:047c502:   public BloomCacheKeyValue.CacheValue get(BloomCacheKeyValue.CacheKey key)
1:047c502:       throws IOException {
1:047c502:     BloomCacheKeyValue.CacheValue cacheValue = getIfPresent(key);
1:047c502:     if (cacheValue == null) {
1:7b31b91:       List<CarbonBloomFilter> bloomFilters =
1:7b31b91:               BloomIndexFileStore.loadBloomFilterFromFile(key.getShardPath(), key.getIndexColumn());
1:7b31b91:       cacheValue = new BloomCacheKeyValue.CacheValue(bloomFilters);
1:047c502:       lruCache.put(key.toString(), cacheValue, cacheValue.getMemorySize());
1:d14c403:     }
1:047c502:     return cacheValue;
1:047c502:   }
1:047c502: 
1:047c502:   @Override
1:047c502:   public List<BloomCacheKeyValue.CacheValue> getAll(List<BloomCacheKeyValue.CacheKey> keys)
1:047c502:       throws IOException {
1:047c502:     List<BloomCacheKeyValue.CacheValue> cacheValues = new ArrayList<>();
1:047c502:     for (BloomCacheKeyValue.CacheKey key : keys) {
1:047c502:       BloomCacheKeyValue.CacheValue cacheValue = get(key);
1:047c502:       cacheValues.add(cacheValue);
1:047c502:     }
1:047c502:     return cacheValues;
1:047c502:   }
1:047c502: 
1:047c502:   @Override
1:047c502:   public BloomCacheKeyValue.CacheValue getIfPresent(BloomCacheKeyValue.CacheKey key) {
1:047c502:     return (BloomCacheKeyValue.CacheValue) lruCache.get(key.toString());
1:047c502:   }
1:047c502: 
1:047c502:   @Override
1:047c502:   public void invalidate(BloomCacheKeyValue.CacheKey key) {
1:047c502:     lruCache.remove(key.toString());
1:047c502:   }
1:047c502: 
1:047c502:   @Override
1:047c502:   public void put(BloomCacheKeyValue.CacheKey key, BloomCacheKeyValue.CacheValue value)
1:047c502:       throws IOException, MemoryException {
1:047c502:     // No impl required.
1:d14c403:   }
1:047c502: 
1:047c502:   @Override
1:047c502:   public void clearAccessCount(List<BloomCacheKeyValue.CacheKey> keys) {
1:d14c403:   }
1:d14c403: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:7b31b91
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       List<CarbonBloomFilter> bloomFilters =
1:               BloomIndexFileStore.loadBloomFilterFromFile(key.getShardPath(), key.getIndexColumn());
1:       cacheValue = new BloomCacheKeyValue.CacheValue(bloomFilters);
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:047c502
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.Cache;
1: import org.apache.carbondata.core.cache.CarbonLRUCache;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.hadoop.util.bloom.CarbonBloomFilter;
1:  * The cache is implemented using carbon lru cache.
1: public class BloomDataMapCache
1:     implements Cache<BloomCacheKeyValue.CacheKey, BloomCacheKeyValue.CacheValue> {
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(BloomDataMapCache.class.getName());
1:    * CarbonLRU cache
1:   private CarbonLRUCache lruCache;
1: 
1:   public BloomDataMapCache(CarbonLRUCache lruCache) {
1:     this.lruCache = lruCache;
1:   @Override
1:   public BloomCacheKeyValue.CacheValue get(BloomCacheKeyValue.CacheKey key)
1:       throws IOException {
1:     BloomCacheKeyValue.CacheValue cacheValue = getIfPresent(key);
1:     if (cacheValue == null) {
0:       cacheValue = loadBloomDataMapModel(key);
1:       lruCache.put(key.toString(), cacheValue, cacheValue.getMemorySize());
1:     return cacheValue;
1:   }
1: 
1:   @Override
1:   public List<BloomCacheKeyValue.CacheValue> getAll(List<BloomCacheKeyValue.CacheKey> keys)
1:       throws IOException {
1:     List<BloomCacheKeyValue.CacheValue> cacheValues = new ArrayList<>();
1:     for (BloomCacheKeyValue.CacheKey key : keys) {
1:       BloomCacheKeyValue.CacheValue cacheValue = get(key);
1:       cacheValues.add(cacheValue);
1:     }
1:     return cacheValues;
1:   }
1: 
1:   @Override
1:   public BloomCacheKeyValue.CacheValue getIfPresent(BloomCacheKeyValue.CacheKey key) {
1:     return (BloomCacheKeyValue.CacheValue) lruCache.get(key.toString());
1:   }
1: 
1:   @Override
1:   public void invalidate(BloomCacheKeyValue.CacheKey key) {
1:     lruCache.remove(key.toString());
1:   }
1: 
1:   @Override
1:   public void put(BloomCacheKeyValue.CacheKey key, BloomCacheKeyValue.CacheValue value)
1:       throws IOException, MemoryException {
1:     // No impl required.
0:   private BloomCacheKeyValue.CacheValue loadBloomDataMapModel(
0:       BloomCacheKeyValue.CacheKey cacheKey) {
0:     List<CarbonBloomFilter> bloomFilters = new ArrayList<>();
0:       while (dataInStream.available() > 0) {
0:         CarbonBloomFilter bloomFilter = new CarbonBloomFilter();
0:         bloomFilter.readFields(dataInStream);
0:         bloomFilters.add(bloomFilter);
0:       LOGGER.info(String.format("Read %d bloom indices from %s", bloomFilters.size(), indexFile));
1: 
0:       return new BloomCacheKeyValue.CacheValue(bloomFilters);
/////////////////////////////////////////////////////////////////////////
0:   private String getIndexFileFromCacheKey(BloomCacheKeyValue.CacheKey cacheKey) {
0:     return BloomCoarseGrainDataMap
0:         .getBloomIndexFile(cacheKey.getShardPath(), cacheKey.getIndexColumn());
1:   @Override
1:   public void clearAccessCount(List<BloomCacheKeyValue.CacheKey> keys) {
commit:77a1110
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         while (dataInStream.available() > 0) {
0:           BloomDMModel model = new BloomDMModel();
0:           model.readFields(dataInStream);
/////////////////////////////////////////////////////////////////////////
0:     } catch (IOException e) {
0:       CarbonUtil.closeStreams(dataInStream);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:3087323
/////////////////////////////////////////////////////////////////////////
0:       clear(cacheKey);
/////////////////////////////////////////////////////////////////////////
0:   private void clear(CacheKey cacheKey) {
0:     LOGGER.info("Trigger invalid cache for bloom datamap, key is " + cacheKey);
0:     this.bloomDMCache.invalidate(cacheKey);
commit:d14c403
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.datamap.bloom;
1: 
0: import java.io.DataInputStream;
0: import java.io.EOFException;
1: import java.io.IOException;
0: import java.io.ObjectInputStream;
0: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.List;
0: import java.util.Objects;
0: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
0: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.core.util.CarbonUtil;
1: 
0: import com.google.common.cache.CacheBuilder;
0: import com.google.common.cache.CacheLoader;
0: import com.google.common.cache.CacheStats;
0: import com.google.common.cache.LoadingCache;
0: import com.google.common.cache.RemovalListener;
0: import com.google.common.cache.RemovalNotification;
1: 
1: /**
1:  * This class is used to add cache for bloomfilter datamap to accelerate query through it.
0:  * The cache is implemented using guava cache and is a singleton which will be shared by all the
0:  * bloomfilter datamaps.
1:  * As for the cache, the key is a bloomindex file for a shard and the value is the bloomfilters
1:  * for the blocklets in this shard.
0:  * The size of cache can be configurable through CarbonProperties and the cache will be expired if
0:  * no one access it in the past 2 hours.
1:  */
1: @InterfaceAudience.Internal
0: public class BloomDataMapCache implements Serializable {
0:   private static final LogService LOGGER = LogServiceFactory.getLogService(
0:       BloomDataMapCache.class.getName());
0:   private static final long serialVersionUID = 20160822L;
0:   private static final int DEFAULT_CACHE_EXPIRED_HOURS = 2;
0:   private LoadingCache<CacheKey, List<BloomDMModel>> bloomDMCache = null;
1: 
0:   private BloomDataMapCache() {
0:     RemovalListener<CacheKey, List<BloomDMModel>> listener =
0:         new RemovalListener<CacheKey, List<BloomDMModel>>() {
0:       @Override
0:       public void onRemoval(RemovalNotification<CacheKey, List<BloomDMModel>> notification) {
0:         LOGGER.info(
0:             String.format("Remove bloom datamap entry %s from cache due to %s",
0:                 notification.getKey(), notification.getCause()));
1:       }
0:     };
0:     CacheLoader<CacheKey, List<BloomDMModel>> cacheLoader =
0:         new CacheLoader<CacheKey, List<BloomDMModel>>() {
0:       @Override
0:       public List<BloomDMModel> load(CacheKey key) throws Exception {
0:         LOGGER.info(String.format("Load bloom datamap entry %s to cache", key));
0:         return loadBloomDataMapModel(key);
1:       }
0:     };
1: 
0:     int cacheSizeInBytes = validateAndGetCacheSize()
0:         * CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR
0:         * CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR;
0:     this.bloomDMCache = CacheBuilder.newBuilder()
0:         .recordStats()
0:         .maximumSize(cacheSizeInBytes)
0:         .expireAfterAccess(DEFAULT_CACHE_EXPIRED_HOURS, TimeUnit.HOURS)
0:         .removalListener(listener)
0:         .build(cacheLoader);
1:   }
1: 
0:   private static class SingletonHolder {
0:     private static final BloomDataMapCache INSTANCE = new BloomDataMapCache();
1:   }
1: 
1:   /**
0:    * get instance
1:    */
0:   public static BloomDataMapCache getInstance() {
0:     return SingletonHolder.INSTANCE;
1:   }
1: 
1:   /**
0:    * for resolve from serialized
1:    */
0:   protected Object readResolve() {
0:     return getInstance();
1:   }
1: 
0:   private int validateAndGetCacheSize() {
0:     String cacheSizeStr = CarbonProperties.getInstance().getProperty(
0:         CarbonCommonConstants.CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE,
0:         CarbonCommonConstants.CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE_DEFAULT_VAL);
0:     int cacheSize;
0:     try {
0:       cacheSize = Integer.parseInt(cacheSizeStr);
0:       if (cacheSize <= 0) {
0:         throw new NumberFormatException("Value should be greater than 0: " + cacheSize);
1:       }
0:     } catch (NumberFormatException ex) {
0:       LOGGER.error(String.format(
0:           "The value '%s' for '%s' is invalid, it must be an Integer that greater than 0."
0:               + " Use default value '%s' instead.", cacheSizeStr,
0:           CarbonCommonConstants.CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE,
0:           CarbonCommonConstants.CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE_DEFAULT_VAL));
0:       cacheSize = Integer.parseInt(
0:           CarbonCommonConstants.CARBON_QUERY_DATAMAP_BLOOM_CACHE_SIZE_DEFAULT_VAL);
1:     }
0:     return cacheSize;
1:   }
1: 
1:   /**
0:    * load datamap from bloomindex file
1:    */
0:   private List<BloomDMModel> loadBloomDataMapModel(CacheKey cacheKey) {
0:     DataInputStream dataInStream = null;
0:     ObjectInputStream objectInStream = null;
0:     List<BloomDMModel> bloomDMModels = new ArrayList<BloomDMModel>();
0:     try {
0:       String indexFile = getIndexFileFromCacheKey(cacheKey);
0:       dataInStream = FileFactory.getDataInputStream(indexFile, FileFactory.getFileType(indexFile));
0:       objectInStream = new ObjectInputStream(dataInStream);
0:       try {
0:         BloomDMModel model = null;
0:         while ((model = (BloomDMModel) objectInStream.readObject()) != null) {
0:           bloomDMModels.add(model);
1:         }
0:       } catch (EOFException e) {
0:         LOGGER.info(String.format("Read %d bloom indices from %s",
0:             bloomDMModels.size(), indexFile));
1:       }
0:       this.bloomDMCache.put(cacheKey, bloomDMModels);
0:       return bloomDMModels;
0:     } catch (ClassNotFoundException | IOException e) {
0:       LOGGER.error(e, "Error occurs while reading bloom index");
0:       throw new RuntimeException("Error occurs while reading bloom index", e);
0:     } finally {
0:       clear();
0:       CarbonUtil.closeStreams(objectInStream, dataInStream);
1:     }
1:   }
1: 
1:   /**
0:    * get bloom index file name from cachekey
1:    */
0:   private String getIndexFileFromCacheKey(CacheKey cacheKey) {
0:     return BloomCoarseGrainDataMap.getBloomIndexFile(cacheKey.shardPath, cacheKey.indexColumn);
1:   }
1: 
1:   /**
0:    * get bloom datamap from cache
1:    */
0:   public List<BloomDMModel> getBloomDMModelByKey(CacheKey cacheKey) {
0:     return this.bloomDMCache.getUnchecked(cacheKey);
1:   }
1: 
1:   /**
0:    * get cache status
1:    */
0:   private String getCacheStatus() {
0:     StringBuilder sb = new StringBuilder();
0:     CacheStats stats = this.bloomDMCache.stats();
0:     sb.append("hitCount: ").append(stats.hitCount()).append(System.lineSeparator())
0:         .append("hitRate: ").append(stats.hitCount()).append(System.lineSeparator())
0:         .append("loadCount: ").append(stats.loadCount()).append(System.lineSeparator())
0:         .append("averageLoadPenalty: ").append(stats.averageLoadPenalty())
0:         .append(System.lineSeparator())
0:         .append("evictionCount: ").append(stats.evictionCount());
0:     return sb.toString();
1:   }
1: 
1:   /**
0:    * clear this cache
1:    */
0:   private void clear() {
0:     LOGGER.info(String.format("Current meta cache statistic: %s", getCacheStatus()));
0:     LOGGER.info("Trigger invalid all the cache for bloom datamap");
0:     this.bloomDMCache.invalidateAll();
1:   }
1: 
0:   public static class CacheKey {
0:     private String shardPath;
0:     private String indexColumn;
1: 
0:     CacheKey(String shardPath, String indexColumn) {
0:       this.shardPath = shardPath;
0:       this.indexColumn = indexColumn;
1:     }
1: 
0:     @Override
0:     public String toString() {
0:       final StringBuilder sb = new StringBuilder("CacheKey{");
0:       sb.append("shardPath='").append(shardPath).append('\'');
0:       sb.append(", indexColumn='").append(indexColumn).append('\'');
0:       sb.append('}');
0:       return sb.toString();
1:     }
1: 
0:     @Override
0:     public boolean equals(Object o) {
0:       if (this == o) return true;
0:       if (!(o instanceof CacheKey)) return false;
0:       CacheKey cacheKey = (CacheKey) o;
0:       return Objects.equals(shardPath, cacheKey.shardPath)
0:           && Objects.equals(indexColumn, cacheKey.indexColumn);
1:     }
1: 
0:     @Override
0:     public int hashCode() {
0:       return Objects.hash(shardPath, indexColumn);
1:     }
1:   }
1: }
============================================================================