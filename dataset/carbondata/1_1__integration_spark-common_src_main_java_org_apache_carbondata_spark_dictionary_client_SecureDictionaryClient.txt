1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: package org.apache.carbondata.spark.dictionary.client;
1:4daf063: 
1:4daf063: import java.nio.charset.Charset;
1:4daf063: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: import org.apache.carbondata.common.logging.LogServiceFactory;
1:4daf063: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:4daf063: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:4daf063: 
1:4daf063: import com.google.common.collect.Lists;
1:4daf063: import io.netty.channel.nio.NioEventLoopGroup;
1:4daf063: import org.apache.spark.SecurityManager;
1:4daf063: import org.apache.spark.SparkConf;
1:4daf063: import org.apache.spark.network.TransportContext;
1:4daf063: import org.apache.spark.network.client.TransportClient;
1:4daf063: import org.apache.spark.network.client.TransportClientBootstrap;
1:4daf063: import org.apache.spark.network.client.TransportClientFactory;
1:4daf063: import org.apache.spark.network.netty.SparkTransportConf;
1:4daf063: import org.apache.spark.network.sasl.SaslClientBootstrap;
1:4daf063: import org.apache.spark.network.util.TransportConf;
1:4daf063: 
1:4daf063: /**
1:4daf063:  * Dictionary client to connect to Dictionary server and generate dictionary values
1:4daf063:  */
1:4daf063: public class SecureDictionaryClient implements DictionaryClient {
1:4daf063: 
1:4daf063:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(SecureDictionaryClient.class.getName());
1:4daf063: 
1:4daf063:   private SecureDictionaryClientHandler dictionaryClientHandler =
1:4daf063:       new SecureDictionaryClientHandler();
1:4daf063: 
1:4daf063:   private NioEventLoopGroup workerGroup;
1:4daf063:   private TransportClient client;
1:4daf063:   private TransportClientFactory clientFactory;
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * start dictionary client
1:4daf063:    *
1:4daf063:    * @param address
1:4daf063:    * @param port
1:4daf063:    */
1:4daf063:   @Override public void startClient(String secretKey, String address, int port,
1:4daf063:       boolean encryptSecureServer) {
1:4daf063:     LOGGER.audit("Starting client on " + address + " " + port);
1:4daf063:     long start = System.currentTimeMillis();
1:4daf063: 
1:4daf063:     SecurityManager securityMgr;
1:4daf063:     SparkConf conf = new SparkConf().setAppName("Carbon Dictionary Client");
1:4daf063: 
1:4daf063:     conf.set("spark.authenticate", "true");
1:4daf063: 
1:4daf063:     if (null != secretKey) {
1:4daf063:       conf.set("spark.authenticate.secret", secretKey);
1:4daf063:     }
1:4daf063: 
1:4daf063:     if (encryptSecureServer) {
1:4daf063:       conf.set("spark.authenticate.enableSaslEncryption", "true");
1:4daf063:     }
1:4daf063: 
1:4daf063:     TransportConf transportConf =
1:4daf063:         SparkTransportConf.fromSparkConf(conf, "Carbon Dictionary Client", 0);
1:4daf063:     if (null != secretKey) {
1:4daf063:       securityMgr = new SecurityManager(conf, scala.Option.apply(secretKey.getBytes(Charset.forName(
1:4daf063:           CarbonCommonConstants.DEFAULT_CHARSET))));
1:4daf063:     } else {
1:4daf063:       securityMgr = new SecurityManager(conf, null);
1:4daf063:     }
1:4daf063: 
1:4daf063:     TransportContext context = new TransportContext(transportConf, dictionaryClientHandler);
1:4daf063:     clientFactory = context.createClientFactory(Lists.<TransportClientBootstrap>newArrayList(
1:4daf063:         new SaslClientBootstrap(transportConf, "Carbon Dictionary Client", securityMgr)));
1:4daf063: 
1:4daf063:     try {
1:4daf063:       client = clientFactory.createClient(address, port);
1:4daf063:     } catch (Exception e) {
1:4daf063:       LOGGER.error(e, "Dictionary Client Failed to bind to port:");
1:4daf063:     }
1:4daf063:     LOGGER.info(
1:4daf063:         "Dictionary client Started, Total time spent : " + (System.currentTimeMillis() - start));
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * for client request
1:4daf063:    *
1:4daf063:    * @param key
1:4daf063:    * @return
1:4daf063:    */
1:4daf063:   @Override public DictionaryMessage getDictionary(DictionaryMessage key) {
1:4daf063:     return dictionaryClientHandler.getDictionary(key, this.client);
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * shutdown dictionary client
1:4daf063:    */
1:4daf063:   @Override public void shutDown() {
1:4daf063:     clientFactory.close();
1:4daf063:   }
1:4daf063: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.spark.dictionary.client;
1: 
1: import java.nio.charset.Charset;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.dictionary.client.DictionaryClient;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: 
1: import com.google.common.collect.Lists;
1: import io.netty.channel.nio.NioEventLoopGroup;
1: import org.apache.spark.SecurityManager;
1: import org.apache.spark.SparkConf;
1: import org.apache.spark.network.TransportContext;
1: import org.apache.spark.network.client.TransportClient;
1: import org.apache.spark.network.client.TransportClientBootstrap;
1: import org.apache.spark.network.client.TransportClientFactory;
1: import org.apache.spark.network.netty.SparkTransportConf;
1: import org.apache.spark.network.sasl.SaslClientBootstrap;
1: import org.apache.spark.network.util.TransportConf;
1: 
1: /**
1:  * Dictionary client to connect to Dictionary server and generate dictionary values
1:  */
1: public class SecureDictionaryClient implements DictionaryClient {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SecureDictionaryClient.class.getName());
1: 
1:   private SecureDictionaryClientHandler dictionaryClientHandler =
1:       new SecureDictionaryClientHandler();
1: 
1:   private NioEventLoopGroup workerGroup;
1:   private TransportClient client;
1:   private TransportClientFactory clientFactory;
1: 
1:   /**
1:    * start dictionary client
1:    *
1:    * @param address
1:    * @param port
1:    */
1:   @Override public void startClient(String secretKey, String address, int port,
1:       boolean encryptSecureServer) {
1:     LOGGER.audit("Starting client on " + address + " " + port);
1:     long start = System.currentTimeMillis();
1: 
1:     SecurityManager securityMgr;
1:     SparkConf conf = new SparkConf().setAppName("Carbon Dictionary Client");
1: 
1:     conf.set("spark.authenticate", "true");
1: 
1:     if (null != secretKey) {
1:       conf.set("spark.authenticate.secret", secretKey);
1:     }
1: 
1:     if (encryptSecureServer) {
1:       conf.set("spark.authenticate.enableSaslEncryption", "true");
1:     }
1: 
1:     TransportConf transportConf =
1:         SparkTransportConf.fromSparkConf(conf, "Carbon Dictionary Client", 0);
1:     if (null != secretKey) {
1:       securityMgr = new SecurityManager(conf, scala.Option.apply(secretKey.getBytes(Charset.forName(
1:           CarbonCommonConstants.DEFAULT_CHARSET))));
1:     } else {
1:       securityMgr = new SecurityManager(conf, null);
1:     }
1: 
1:     TransportContext context = new TransportContext(transportConf, dictionaryClientHandler);
1:     clientFactory = context.createClientFactory(Lists.<TransportClientBootstrap>newArrayList(
1:         new SaslClientBootstrap(transportConf, "Carbon Dictionary Client", securityMgr)));
1: 
1:     try {
1:       client = clientFactory.createClient(address, port);
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Dictionary Client Failed to bind to port:");
1:     }
1:     LOGGER.info(
1:         "Dictionary client Started, Total time spent : " + (System.currentTimeMillis() - start));
1:   }
1: 
1:   /**
1:    * for client request
1:    *
1:    * @param key
1:    * @return
1:    */
1:   @Override public DictionaryMessage getDictionary(DictionaryMessage key) {
1:     return dictionaryClientHandler.getDictionary(key, this.client);
1:   }
1: 
1:   /**
1:    * shutdown dictionary client
1:    */
1:   @Override public void shutDown() {
1:     clientFactory.close();
1:   }
1: }
============================================================================