1:edaaccb: /*
1:edaaccb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edaaccb:  * contributor license agreements.  See the NOTICE file distributed with
1:edaaccb:  * this work for additional information regarding copyright ownership.
1:edaaccb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edaaccb:  * (the "License"); you may not use this file except in compliance with
1:edaaccb:  * the License.  You may obtain a copy of the License at
1:edaaccb:  *
1:edaaccb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edaaccb:  *
1:edaaccb:  * Unless required by applicable law or agreed to in writing, software
1:edaaccb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edaaccb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edaaccb:  * See the License for the specific language governing permissions and
1:edaaccb:  * limitations under the License.
1:edaaccb:  */
5:edaaccb: 
1:edaaccb: package org.apache.carbondata.core.dictionary.generator;
1:edaaccb: 
1:edaaccb: import java.io.File;
1:edaaccb: import java.util.Arrays;
1:edaaccb: 
1:edaaccb: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:edaaccb: import org.apache.carbondata.core.metadata.CarbonMetadata;
1:df27831: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:edaaccb: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:edaaccb: import org.apache.carbondata.core.util.CarbonProperties;
1:edaaccb: 
1:edaaccb: import org.junit.Before;
1:edaaccb: import org.junit.Test;
1:edaaccb: 
1:edaaccb: import static org.junit.Assert.assertEquals;
1:edaaccb: import static org.junit.Assert.assertNull;
1:edaaccb: import static org.junit.Assert.assertTrue;
1:edaaccb: 
1:edaaccb: /**
1:edaaccb:  * Test class to test incremental column dictionary generator functionality
1:edaaccb:  */
1:edaaccb: public class IncrementalColumnDictionaryGeneratorTest {
1:edaaccb: 
1:ee5f65f:   private CarbonTable carbonTable;
1:ee5f65f:   private CarbonDimension carbonDimension;
1:ee5f65f: 
1:edaaccb:   @Before public void setUp() throws Exception {
1:edaaccb:     // enable lru cache by setting cache size
1:edaaccb:     CarbonProperties.getInstance()
1:edaaccb:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:ee5f65f:     ColumnSchema columnSchema = new ColumnSchema();
1:ee5f65f:     columnSchema.setColumnName("empName");
1:df27831:     columnSchema.setDataType(DataTypes.STRING);
1:ee5f65f:     TableSchema tableSchema = new TableSchema();
1:ee5f65f:     tableSchema.setTableName("TestTable");
1:ee5f65f:     tableSchema.setListOfColumns(Arrays.asList(columnSchema));
1:ee5f65f:     TableInfo tableInfo = new TableInfo();
1:ee5f65f:     tableInfo.setFactTable(tableSchema);
1:ee5f65f:     tableInfo.setTableUniqueName("TestTable");
1:ee5f65f:     tableInfo.setDatabaseName("test");
1:ee5f65f:     String storePath = System.getProperty("java.io.tmpdir") + "/tmp";
1:1155d4d:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
1:ee5f65f:     carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
1:f911403:     carbonDimension = new CarbonDimension(columnSchema,0,0,0,0);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyOnce() throws Exception {
2:edaaccb:     // Create the generator and add the key to dictionary
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb:     Integer key = generator.generateKey("First");
1:edaaccb:     assertEquals(new Integer(11), key);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyTwice() throws Exception {
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb:     Integer key = generator.generateKey("First");
1:edaaccb: 
1:edaaccb:     // Add one more key and check if it works fine.
1:edaaccb:     key = generator.generateKey("Second");
1:edaaccb:     assertEquals(new Integer(12), key);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void generateKeyAgain() throws Exception {
1:edaaccb:     // Create the generator and add the key to dictionary
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb:     Integer key = generator.generateKey("First");
1:edaaccb: 
1:edaaccb:     // Add the same key again anc check if the value is correct
1:edaaccb:     key = generator.generateKey("First");
1:edaaccb:     assertEquals(new Integer(11), key);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void getKey() throws Exception {
1:edaaccb:     // Create the generator and add the key to dictionary
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
2:edaaccb:     Integer generatedKey = generator.generateKey("First");
1:edaaccb: 
1:edaaccb:     // Get the value of the key from dictionary and check if it matches with the created value
1:edaaccb:     Integer obtainedKey = generator.getKey("First");
1:edaaccb:     assertEquals(generatedKey, obtainedKey);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void getKeyInvalid() throws Exception {
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb: 
1:edaaccb:     // Try to get value for an invalid key
1:edaaccb:     Integer obtainedKey = generator.getKey("Second");
1:edaaccb:     assertNull(obtainedKey);
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void getOrGenerateKey() throws Exception {
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb: 
1:edaaccb:     // Test first with generating a key and then trying geOrGenerate
1:edaaccb:     Integer generatedKey = generator.generateKey("First");
2:edaaccb:     Integer obtainedKey = generator.getOrGenerateKey("First");
1:edaaccb:     assertEquals(generatedKey, obtainedKey);
1:edaaccb: 
1:edaaccb:     // Test directly with getOrGenerate for another key
1:edaaccb:     obtainedKey = generator.getOrGenerateKey("Second");
1:edaaccb:     assertEquals(new Integer(12), obtainedKey);
1:edaaccb: 
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   @Test public void writeDictionaryData() throws Exception {
7:edaaccb:     //Create required column schema
7:edaaccb:     ColumnSchema columnSchema = new ColumnSchema();
1:edaaccb:     columnSchema.setColumnName("empNameCol");
1:df27831:     columnSchema.setDataType(DataTypes.STRING);
1:edaaccb:     columnSchema.setColumnUniqueId("empNameCol");
1:f911403:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0);
1:edaaccb: 
1:edaaccb:     // Create the generator and add the keys to dictionary
1:edaaccb:     IncrementalColumnDictionaryGenerator generator =
1:ee5f65f:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:edaaccb: 
1:edaaccb:     // Create a table schema for saving the dictionary
1:edaaccb:     TableSchema tableSchema = new TableSchema();
1:edaaccb:     tableSchema.setTableName("TestTable");
1:edaaccb:     tableSchema.setListOfColumns(Arrays.asList(columnSchema));
1:edaaccb:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1:edaaccb:     TableInfo tableInfo = new TableInfo();
1:edaaccb:     tableInfo.setFactTable(tableSchema);
1:edaaccb:     tableInfo.setTableUniqueName("TestTable");
1:edaaccb:     tableInfo.setDatabaseName("test");
1:edaaccb: 
1:edaaccb:     String storePath = System.getProperty("java.io.tmpdir") + "/tmp";
1:edaaccb:     File dictPath = new File(storePath + "/test/TestTable/Metadata/");
1:edaaccb:     System.out.print(dictPath.mkdirs());
1:edaaccb: 
1:1155d4d:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
1:ac5aee1:     CarbonTable carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
1:edaaccb: 
1:edaaccb:     // Add the table to metadata
1:edaaccb:     metadata.addCarbonTable(carbonTable);
1:edaaccb: 
1:edaaccb:     /// Write the dictionary and verify whether its written successfully
1:ee5f65f:     generator.writeDictionaryData();
1:edaaccb:     File dictionaryFile = new File(dictPath, "empNameCol.dict");
1:edaaccb:     System.out.println(dictionaryFile.getCanonicalPath());
1:edaaccb:     assertTrue(dictionaryFile.exists());
1:edaaccb:     dictionaryFile.delete();
1:edaaccb: 
1:edaaccb:     // cleanup created files
1:edaaccb:     metadata.removeTable(carbonTable.getTableUniqueName());
1:edaaccb:     cleanUpDirectory(new File(storePath));
1:edaaccb: 
1:edaaccb:   }
1:edaaccb: 
1:edaaccb:   private void cleanUpDirectory(File path) {
1:edaaccb:     File[] files = path.listFiles();
1:edaaccb:     if (null == files) {
1:edaaccb:       return;
1:edaaccb:     }
1:edaaccb:     for (File file : files) {
1:edaaccb:       if (file.isDirectory()) cleanUpDirectory(file);
1:edaaccb:       else file.delete();
1:edaaccb:     }
1:edaaccb:     path.delete();
1:edaaccb:   }
1:edaaccb: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:     carbonDimension = new CarbonDimension(columnSchema,0,0,0,0);
/////////////////////////////////////////////////////////////////////////
1:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0);
author:kunal642
-------------------------------------------------------------------------------
commit:df27831
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     columnSchema.setDataType(DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:     columnSchema.setDataType(DataTypes.STRING);
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
1:   private CarbonTable carbonTable;
1:   private CarbonDimension carbonDimension;
1: 
1:     ColumnSchema columnSchema = new ColumnSchema();
1:     columnSchema.setColumnName("empName");
1:     TableSchema tableSchema = new TableSchema();
1:     tableSchema.setTableName("TestTable");
1:     tableSchema.setListOfColumns(Arrays.asList(columnSchema));
1:     TableInfo tableInfo = new TableInfo();
1:     tableInfo.setFactTable(tableSchema);
1:     tableInfo.setTableUniqueName("TestTable");
1:     tableInfo.setDatabaseName("test");
1:     String storePath = System.getProperty("java.io.tmpdir") + "/tmp";
0:     tableInfo.setStorePath(storePath);
1:     carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
0:     carbonDimension = new CarbonDimension(columnSchema,0,0,0,0,0);
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:     generator.writeDictionaryData();
commit:533835c
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
/////////////////////////////////////////////////////////////////////////
1:     tableInfo.setTablePath(storePath + "/test" + "/TestTable");
author:jackylk
-------------------------------------------------------------------------------
commit:ac5aee1
/////////////////////////////////////////////////////////////////////////
1:     CarbonTable carbonTable = CarbonTable.buildFromTableInfo(tableInfo);
author:Vimal-Das
-------------------------------------------------------------------------------
commit:edaaccb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.dictionary.generator;
1: 
1: import java.io.File;
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1: import org.apache.carbondata.core.metadata.schema.table.TableSchema;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * Test class to test incremental column dictionary generator functionality
1:  */
1: public class IncrementalColumnDictionaryGeneratorTest {
1: 
1:   @Before public void setUp() throws Exception {
1:     // enable lru cache by setting cache size
1:     CarbonProperties.getInstance()
1:         .addProperty(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE, "10");
1:   }
1: 
1:   @Test public void generateKeyOnce() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create the generator and add the key to dictionary
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1:     Integer key = generator.generateKey("First");
1:     assertEquals(new Integer(11), key);
1:   }
1: 
1:   @Test public void generateKeyTwice() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create the generator and add the key to dictionary
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1:     Integer key = generator.generateKey("First");
1: 
1:     // Add one more key and check if it works fine.
1:     key = generator.generateKey("Second");
1:     assertEquals(new Integer(12), key);
1:   }
1: 
1:   @Test public void generateKeyAgain() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create the generator and add the key to dictionary
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1:     Integer key = generator.generateKey("First");
1: 
1:     // Add the same key again anc check if the value is correct
1:     key = generator.generateKey("First");
1:     assertEquals(new Integer(11), key);
1:   }
1: 
1:   @Test public void getKey() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create the generator and add the key to dictionary
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1:     Integer generatedKey = generator.generateKey("First");
1: 
1:     // Get the value of the key from dictionary and check if it matches with the created value
1:     Integer obtainedKey = generator.getKey("First");
1:     assertEquals(generatedKey, obtainedKey);
1:   }
1: 
1:   @Test public void getKeyInvalid() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1: 
1:     // Try to get value for an invalid key
1:     Integer obtainedKey = generator.getKey("Second");
1:     assertNull(obtainedKey);
1:   }
1: 
1:   @Test public void getOrGenerateKey() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
0:     columnSchema.setColumnName("empName");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1: 
1:     // Test first with generating a key and then trying geOrGenerate
1:     Integer generatedKey = generator.generateKey("First");
1:     Integer obtainedKey = generator.getOrGenerateKey("First");
1:     assertEquals(generatedKey, obtainedKey);
1: 
1:     // Test directly with getOrGenerate for another key
1:     obtainedKey = generator.getOrGenerateKey("Second");
1:     assertEquals(new Integer(12), obtainedKey);
1: 
1:   }
1: 
1:   @Test public void writeDictionaryData() throws Exception {
1:     //Create required column schema
1:     ColumnSchema columnSchema = new ColumnSchema();
1:     columnSchema.setColumnName("empNameCol");
1:     columnSchema.setColumnUniqueId("empNameCol");
0:     CarbonDimension carbonDimension = new CarbonDimension(columnSchema, 0, 0, 0, 0, 0);
1: 
1:     // Create the generator and add the keys to dictionary
1:     IncrementalColumnDictionaryGenerator generator =
0:         new IncrementalColumnDictionaryGenerator(carbonDimension, 10);
1:     Integer generatedKey = generator.generateKey("First");
1:     Integer obtainedKey = generator.getOrGenerateKey("First");
1: 
1:     // Create a table schema for saving the dictionary
1:     TableSchema tableSchema = new TableSchema();
1:     tableSchema.setTableName("TestTable");
1:     tableSchema.setListOfColumns(Arrays.asList(columnSchema));
1:     CarbonMetadata metadata = CarbonMetadata.getInstance();
1:     TableInfo tableInfo = new TableInfo();
1:     tableInfo.setFactTable(tableSchema);
1:     tableInfo.setTableUniqueName("TestTable");
1:     tableInfo.setDatabaseName("test");
1: 
1:     String storePath = System.getProperty("java.io.tmpdir") + "/tmp";
1:     File dictPath = new File(storePath + "/test/TestTable/Metadata/");
1:     System.out.print(dictPath.mkdirs());
1: 
0:     tableInfo.setStorePath(storePath);
0:     CarbonTable carbonTable = new CarbonTable();
0:     carbonTable.loadCarbonTable(tableInfo);
1: 
1:     // Add the table to metadata
1:     metadata.addCarbonTable(carbonTable);
1: 
1:     /// Write the dictionary and verify whether its written successfully
0:     generator.writeDictionaryData("TestTable");
1:     File dictionaryFile = new File(dictPath, "empNameCol.dict");
1:     System.out.println(dictionaryFile.getCanonicalPath());
1:     assertTrue(dictionaryFile.exists());
1:     dictionaryFile.delete();
1: 
1:     // cleanup created files
1:     metadata.removeTable(carbonTable.getTableUniqueName());
1:     cleanUpDirectory(new File(storePath));
1: 
1:   }
1: 
1:   private void cleanUpDirectory(File path) {
1:     File[] files = path.listFiles();
1:     if (null == files) {
1:       return;
1:     }
1:     for (File file : files) {
1:       if (file.isDirectory()) cleanUpDirectory(file);
1:       else file.delete();
1:     }
1:     path.delete();
1:   }
1: }
============================================================================