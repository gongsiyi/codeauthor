1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.nio.ByteBuffer;
1:cd6a4ff: import java.util.ArrayList;
1:7e0584e: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:7e0584e: import org.apache.carbondata.core.cache.dictionary.ColumnDictionaryChunkIterator;
1:d3a09e2: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:cd6a4ff: import org.apache.carbondata.format.ColumnDictionaryChunk;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.thrift.TBase;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * This class performs the functionality of reading a carbon dictionary file.
1:cd6a4ff:  * It implements various overloaded method for read functionality.
1:cd6a4ff:  */
1:cd6a4ff: public class CarbonDictionaryReaderImpl implements CarbonDictionaryReader {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * column name
1:cd6a4ff:    */
1:d3a09e2:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary file path
1:cd6a4ff:    */
1:cd6a4ff:   protected String columnDictionaryFilePath;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary thrift file reader
1:cd6a4ff:    */
1:cd6a4ff:   private ThriftReader dictionaryFileReader;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor
1:cd6a4ff:    *
1:d3a09e2:    * @param dictionaryColumnUniqueIdentifier      column unique identifier
1:cd6a4ff:    */
1:1155d4d:   public CarbonDictionaryReaderImpl(
1:d3a09e2:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:d3a09e2:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
1:cd6a4ff:     initFileLocation();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method should be used when complete dictionary data needs to be read.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Global dictionary generation in case of incremental load
1:cd6a4ff:    * 2. Reading dictionary file on first time query
1:cd6a4ff:    * 3. Loading a dictionary column in memory based on query requirement.
1:cd6a4ff:    * This is a case where carbon column cache feature is enabled in which a
1:cd6a4ff:    * column dictionary is read if it is present in the query.
1:cd6a4ff:    *
2:cd6a4ff:    * @return list of byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<byte[]> read() throws IOException {
1:cd6a4ff:     return read(0L);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method should be used when data has to be read from a given offset.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Incremental data load. If column dictionary is already loaded in memory
1:cd6a4ff:    * and incremental load is done, then for the new query only new dictionary data
1:cd6a4ff:    * has to be read form memory.
1:cd6a4ff:    *
1:cd6a4ff:    * @param startOffset start offset of dictionary file
1:cd6a4ff:    * @return list of byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public List<byte[]> read(long startOffset) throws IOException {
1:cd6a4ff:     List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks =
1:cd6a4ff:         readDictionaryMetadataFile();
1:cd6a4ff:     // get the last entry for carbon dictionary meta chunk
1:cd6a4ff:     CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk =
1:cd6a4ff:         carbonDictionaryColumnMetaChunks.get(carbonDictionaryColumnMetaChunks.size() - 1);
1:cd6a4ff:     // end offset till where the dictionary file has to be read
1:cd6a4ff:     long endOffset = carbonDictionaryColumnMetaChunk.getEnd_offset();
1:7e0584e:     List<ColumnDictionaryChunk> columnDictionaryChunks =
1:7e0584e:         read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
1:7e0584e:     return getDictionaryList(columnDictionaryChunks);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read data between given start and end offset.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Truncate operation. If there is any inconsistency while writing the dictionary file
1:cd6a4ff:    * then we can give the start and end offset till where the data has to be retained.
1:cd6a4ff:    *
1:cd6a4ff:    * @param startOffset start offset of dictionary file
1:cd6a4ff:    * @param endOffset   end offset of dictionary file
1:7e0584e:    * @return iterator over byte array. Each byte array is unique dictionary value
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:7e0584e:   @Override public Iterator<byte[]> read(long startOffset, long endOffset) throws IOException {
1:cd6a4ff:     List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks =
1:cd6a4ff:         readDictionaryMetadataFile();
1:7e0584e:     List<ColumnDictionaryChunk> columnDictionaryChunks =
1:7e0584e:         read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
1:eaadc88:     return (Iterator<byte[]>) new ColumnDictionaryChunkIterator(columnDictionaryChunks);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Closes this stream and releases any system resources associated
1:cd6a4ff:    * with it. If the stream is already closed then invoking this
1:cd6a4ff:    * method has no effect.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void close() throws IOException {
1:cd6a4ff:     if (null != dictionaryFileReader) {
1:cd6a4ff:       dictionaryFileReader.close();
1:cd6a4ff:       dictionaryFileReader = null;
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param carbonDictionaryColumnMetaChunks dictionary meta chunk list
1:cd6a4ff:    * @param startOffset                      start offset for dictionary data file
1:cd6a4ff:    * @param endOffset                        end offset till where data has
1:cd6a4ff:    *                                         to be read from dictionary data file
1:7e0584e:    * @return list of byte column dictionary values
1:cd6a4ff:    * @throws IOException readDictionary file method throws IO exception
1:cd6a4ff:    */
1:7e0584e:   private List<ColumnDictionaryChunk> read(
1:7e0584e:       List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks, long startOffset,
1:7e0584e:       long endOffset) throws IOException {
1:cd6a4ff:     // calculate the number of chunks to be read from dictionary file from start offset
1:cd6a4ff:     int dictionaryChunkCountsToBeRead =
1:cd6a4ff:         calculateTotalDictionaryChunkCountsToBeRead(carbonDictionaryColumnMetaChunks, startOffset,
1:cd6a4ff:             endOffset);
1:cd6a4ff:     // open dictionary file thrift reader
1:cd6a4ff:     openThriftReader();
1:cd6a4ff:     // read the required number of chunks from dictionary file
1:eaadc88:     return readDictionaryFile(startOffset, dictionaryChunkCountsToBeRead);
1:7e0584e:   }
1:7e0584e: 
1:7e0584e:   /**
1:7e0584e:    * This method will put all the dictionary chunks into one list and return that list
1:7e0584e:    *
1:7e0584e:    * @param columnDictionaryChunks
1:7e0584e:    * @return
1:7e0584e:    */
1:7e0584e:   private List<byte[]> getDictionaryList(List<ColumnDictionaryChunk> columnDictionaryChunks) {
1:7e0584e:     int dictionaryListSize = 0;
1:7e0584e:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:7e0584e:       dictionaryListSize = dictionaryListSize + dictionaryChunk.getValues().size();
1:7e0584e:     }
1:7e0584e:     // convert byte buffer list to byte array list of dictionary values
1:7e0584e:     List<byte[]> dictionaryValues = new ArrayList<byte[]>(dictionaryListSize);
1:cd6a4ff:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:cd6a4ff:       convertAndFillByteBufferListToByteArrayList(dictionaryValues, dictionaryChunk.getValues());
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryValues;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will convert and fill list of byte buffer to list of byte array
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryValues          list of byte array. Each byte array is
1:cd6a4ff:    *                                  unique dictionary value
1:cd6a4ff:    * @param dictionaryValueBufferList dictionary thrift object which is a list of byte buffer.
1:cd6a4ff:    *                                  Each dictionary value is a wrapped in byte buffer before
1:cd6a4ff:    *                                  writing to file
1:cd6a4ff:    */
1:cd6a4ff:   private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,
1:cd6a4ff:       List<ByteBuffer> dictionaryValueBufferList) {
1:cd6a4ff:     for (ByteBuffer buffer : dictionaryValueBufferList) {
1:cd6a4ff:       int length = buffer.limit();
1:cd6a4ff:       byte[] value = new byte[length];
1:cd6a4ff:       buffer.get(value, 0, value.length);
1:cd6a4ff:       dictionaryValues.add(value);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will form the path for dictionary file for a given column
1:cd6a4ff:    */
1:cd6a4ff:   protected void initFileLocation() {
1:29dc302:     this.columnDictionaryFilePath = dictionaryColumnUniqueIdentifier.getDictionaryFilePath();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will read the dictionary file and return the list of dictionary thrift object
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryStartOffset        start offset for dictionary file
1:cd6a4ff:    * @param dictionaryChunkCountToBeRead number of dictionary chunks to be read
1:cd6a4ff:    * @return list of dictionary chunks
1:cd6a4ff:    * @throws IOException setReadOffset method throws I/O exception
1:cd6a4ff:    */
1:cd6a4ff:   private List<ColumnDictionaryChunk> readDictionaryFile(long dictionaryStartOffset,
1:cd6a4ff:       int dictionaryChunkCountToBeRead) throws IOException {
1:cd6a4ff:     List<ColumnDictionaryChunk> dictionaryChunks =
1:cd6a4ff:         new ArrayList<ColumnDictionaryChunk>(dictionaryChunkCountToBeRead);
1:cd6a4ff:     // skip the number of bytes if a start offset is given
1:cd6a4ff:     dictionaryFileReader.setReadOffset(dictionaryStartOffset);
1:cd6a4ff:     // read till dictionary chunk count
1:cd6a4ff:     while (dictionaryFileReader.hasNext()
1:cd6a4ff:         && dictionaryChunks.size() != dictionaryChunkCountToBeRead) {
1:cd6a4ff:       dictionaryChunks.add((ColumnDictionaryChunk) dictionaryFileReader.read());
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryChunks;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will read the dictionary metadata file for a given column
1:cd6a4ff:    * and calculate the number of chunks to be read from the dictionary file.
1:cd6a4ff:    * It will do a strict validation for start and end offset as if the offsets are not
1:cd6a4ff:    * exactly matching, because data is written in thrift format, the thrift object
1:cd6a4ff:    * will not be retrieved properly
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryChunkMetaList    list of dictionary chunk metadata
1:cd6a4ff:    * @param dictionaryChunkStartOffset start offset for a dictionary chunk
1:cd6a4ff:    * @param dictionaryChunkEndOffset   end offset for a dictionary chunk
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private int calculateTotalDictionaryChunkCountsToBeRead(
1:cd6a4ff:       List<CarbonDictionaryColumnMetaChunk> dictionaryChunkMetaList,
1:cd6a4ff:       long dictionaryChunkStartOffset, long dictionaryChunkEndOffset) {
1:cd6a4ff:     boolean chunkWithStartOffsetFound = false;
1:cd6a4ff:     int dictionaryChunkCount = 0;
1:cd6a4ff:     for (CarbonDictionaryColumnMetaChunk metaChunk : dictionaryChunkMetaList) {
1:cd6a4ff:       // find the column meta chunk whose start offset value matches
1:cd6a4ff:       // with the given dictionary start offset
1:cd6a4ff:       if (!chunkWithStartOffsetFound && dictionaryChunkStartOffset == metaChunk.getStart_offset()) {
1:cd6a4ff:         chunkWithStartOffsetFound = true;
1:cd6a4ff:       }
1:cd6a4ff:       // start offset is found then keep adding the chunk count to be read
1:cd6a4ff:       if (chunkWithStartOffsetFound) {
1:cd6a4ff:         dictionaryChunkCount = dictionaryChunkCount + metaChunk.getChunk_count();
1:cd6a4ff:       }
1:cd6a4ff:       // when end offset is reached then break the loop
1:cd6a4ff:       if (dictionaryChunkEndOffset == metaChunk.getEnd_offset()) {
1:cd6a4ff:         break;
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryChunkCount;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will read dictionary metadata file and return the dictionary meta chunks
1:cd6a4ff:    *
1:cd6a4ff:    * @return list of dictionary metadata chunks
1:cd6a4ff:    * @throws IOException read and close method throws IO exception
1:cd6a4ff:    */
1:cd6a4ff:   private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {
1:cd6a4ff:     CarbonDictionaryMetadataReader columnMetadataReaderImpl = getDictionaryMetadataReader();
1:cd6a4ff:     List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList = null;
1:cd6a4ff:     // read metadata file
1:cd6a4ff:     try {
1:cd6a4ff:       dictionaryMetaChunkList = columnMetadataReaderImpl.read();
1:cd6a4ff:     } finally {
1:cd6a4ff:       // close the metadata reader
1:cd6a4ff:       columnMetadataReaderImpl.close();
1:cd6a4ff:     }
1:cd6a4ff:     return dictionaryMetaChunkList;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   protected CarbonDictionaryMetadataReader getDictionaryMetadataReader() {
1:1155d4d:     return new CarbonDictionaryMetadataReaderImpl(this.dictionaryColumnUniqueIdentifier);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will open the dictionary file stream for reading
1:cd6a4ff:    *
1:cd6a4ff:    * @throws IOException thrift reader open method throws IOException
1:cd6a4ff:    */
1:cd6a4ff:   private void openThriftReader() throws IOException {
1:cd6a4ff:     if (null == dictionaryFileReader) {
1:cd6a4ff:       // initialise dictionary file reader which will return dictionary thrift object
1:cd6a4ff:       // dictionary thrift object contains a list of byte buffer
1:cd6a4ff:       dictionaryFileReader =
1:cd6a4ff:           new ThriftReader(this.columnDictionaryFilePath, new ThriftReader.TBaseCreator() {
1:cd6a4ff:             @Override public TBase create() {
1:cd6a4ff:               return new ColumnDictionaryChunk();
1:cd6a4ff:             }
1:cd6a4ff:           });
1:cd6a4ff:       // Open dictionary file reader
1:cd6a4ff:       dictionaryFileReader.open();
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:29dc302
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this.columnDictionaryFilePath = dictionaryColumnUniqueIdentifier.getDictionaryFilePath();
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public CarbonDictionaryReaderImpl(
/////////////////////////////////////////////////////////////////////////
0:         .getCarbonTablePath(dictionaryColumnUniqueIdentifier.getAbsoluteCarbonTableIdentifier(),
/////////////////////////////////////////////////////////////////////////
1:     return new CarbonDictionaryMetadataReaderImpl(this.dictionaryColumnUniqueIdentifier);
author:dhatchayani
-------------------------------------------------------------------------------
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:   protected DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
1:    * @param dictionaryColumnUniqueIdentifier      column unique identifier
0:   public CarbonDictionaryReaderImpl(String storePath, CarbonTableIdentifier carbonTableIdentifier,
1:       DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier) {
1:     this.dictionaryColumnUniqueIdentifier = dictionaryColumnUniqueIdentifier;
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath = pathService
0:         .getCarbonTablePath(this.storePath, carbonTableIdentifier,
0:             dictionaryColumnUniqueIdentifier);
0:     this.columnDictionaryFilePath = carbonTablePath.getDictionaryFilePath(
0:         dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());
/////////////////////////////////////////////////////////////////////////
0:         this.dictionaryColumnUniqueIdentifier);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
0: import org.apache.carbondata.core.metadata.ColumnIdentifier;
0: import org.apache.carbondata.core.service.CarbonCommonFactory;
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1:     return (Iterator<byte[]>) new ColumnDictionaryChunkIterator(columnDictionaryChunks);
/////////////////////////////////////////////////////////////////////////
1:     return readDictionaryFile(startOffset, dictionaryChunkCountsToBeRead);
author:hexiaoqiao
-------------------------------------------------------------------------------
commit:a65ca7c
/////////////////////////////////////////////////////////////////////////
0:    * carbon dictionary data store path
0:   protected String storePath;
/////////////////////////////////////////////////////////////////////////
0:    * @param storePath         carbon dictionary data store path
0:   public CarbonDictionaryReaderImpl(String storePath,
0:     this.storePath = storePath;
/////////////////////////////////////////////////////////////////////////
0:             this.storePath, carbonTableIdentifier);
/////////////////////////////////////////////////////////////////////////
0:     return new CarbonDictionaryMetadataReaderImpl(this.storePath, carbonTableIdentifier,
commit:77c90b8
/////////////////////////////////////////////////////////////////////////
0:     CarbonTablePath carbonTablePath = pathService.getCarbonTablePath(
author:manishgupt88
-------------------------------------------------------------------------------
commit:7e0584e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import org.apache.carbondata.core.cache.dictionary.ColumnDictionaryChunkIterator;
/////////////////////////////////////////////////////////////////////////
1:     List<ColumnDictionaryChunk> columnDictionaryChunks =
1:         read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
1:     return getDictionaryList(columnDictionaryChunks);
/////////////////////////////////////////////////////////////////////////
1:    * @return iterator over byte array. Each byte array is unique dictionary value
1:   @Override public Iterator<byte[]> read(long startOffset, long endOffset) throws IOException {
1:     List<ColumnDictionaryChunk> columnDictionaryChunks =
1:         read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
0:     Iterator<byte[]> columnDictionaryChunkWrapper =
0:         new ColumnDictionaryChunkIterator(columnDictionaryChunks);
0:     return columnDictionaryChunkWrapper;
/////////////////////////////////////////////////////////////////////////
1:    * @return list of byte column dictionary values
1:   private List<ColumnDictionaryChunk> read(
1:       List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks, long startOffset,
1:       long endOffset) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     return columnDictionaryChunks;
1:   }
1: 
1:   /**
1:    * This method will put all the dictionary chunks into one list and return that list
1:    *
1:    * @param columnDictionaryChunks
1:    * @return
1:    */
1:   private List<byte[]> getDictionaryList(List<ColumnDictionaryChunk> columnDictionaryChunks) {
1:     int dictionaryListSize = 0;
1:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:       dictionaryListSize = dictionaryListSize + dictionaryChunk.getValues().size();
1:     }
1:     // convert byte buffer list to byte array list of dictionary values
1:     List<byte[]> dictionaryValues = new ArrayList<byte[]>(dictionaryListSize);
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.carbondata.common.factory.CarbonCommonFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.ColumnIdentifier;
0: import org.apache.carbondata.core.carbon.path.CarbonTablePath;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.service.PathService;
1: import org.apache.carbondata.format.ColumnDictionaryChunk;
1: 
1: import org.apache.thrift.TBase;
1: 
1: /**
1:  * This class performs the functionality of reading a carbon dictionary file.
1:  * It implements various overloaded method for read functionality.
1:  */
1: public class CarbonDictionaryReaderImpl implements CarbonDictionaryReader {
1: 
1:   /**
0:    * carbon table identifier
1:    */
0:   protected CarbonTableIdentifier carbonTableIdentifier;
1: 
1:   /**
0:    * HDFS store path
1:    */
0:   protected String hdfsStorePath;
1: 
1:   /**
1:    * column name
1:    */
0:   protected ColumnIdentifier columnIdentifier;
1: 
1:   /**
1:    * dictionary file path
1:    */
1:   protected String columnDictionaryFilePath;
1: 
1:   /**
1:    * dictionary thrift file reader
1:    */
1:   private ThriftReader dictionaryFileReader;
1: 
1:   /**
1:    * Constructor
1:    *
0:    * @param hdfsStorePath         HDFS store path
0:    * @param carbonTableIdentifier table identifier which will give table name and database name
0:    * @param columnIdentifier      column unique identifier
1:    */
0:   public CarbonDictionaryReaderImpl(String hdfsStorePath,
0:       CarbonTableIdentifier carbonTableIdentifier, ColumnIdentifier columnIdentifier) {
0:     this.hdfsStorePath = hdfsStorePath;
0:     this.carbonTableIdentifier = carbonTableIdentifier;
0:     this.columnIdentifier = columnIdentifier;
1:     initFileLocation();
1:   }
1: 
1:   /**
1:    * This method should be used when complete dictionary data needs to be read.
1:    * Applicable scenarios :
1:    * 1. Global dictionary generation in case of incremental load
1:    * 2. Reading dictionary file on first time query
1:    * 3. Loading a dictionary column in memory based on query requirement.
1:    * This is a case where carbon column cache feature is enabled in which a
1:    * column dictionary is read if it is present in the query.
1:    *
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public List<byte[]> read() throws IOException {
1:     return read(0L);
1:   }
1: 
1:   /**
1:    * This method should be used when data has to be read from a given offset.
1:    * Applicable scenarios :
1:    * 1. Incremental data load. If column dictionary is already loaded in memory
1:    * and incremental load is done, then for the new query only new dictionary data
1:    * has to be read form memory.
1:    *
1:    * @param startOffset start offset of dictionary file
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public List<byte[]> read(long startOffset) throws IOException {
1:     List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks =
1:         readDictionaryMetadataFile();
1:     // get the last entry for carbon dictionary meta chunk
1:     CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk =
1:         carbonDictionaryColumnMetaChunks.get(carbonDictionaryColumnMetaChunks.size() - 1);
1:     // end offset till where the dictionary file has to be read
1:     long endOffset = carbonDictionaryColumnMetaChunk.getEnd_offset();
0:     return read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
1:   }
1: 
1:   /**
1:    * This method will be used to read data between given start and end offset.
1:    * Applicable scenarios:
1:    * 1. Truncate operation. If there is any inconsistency while writing the dictionary file
1:    * then we can give the start and end offset till where the data has to be retained.
1:    *
1:    * @param startOffset start offset of dictionary file
1:    * @param endOffset   end offset of dictionary file
1:    * @return list of byte array. Each byte array is unique dictionary value
1:    * @throws IOException if an I/O error occurs
1:    */
0:   @Override public List<byte[]> read(long startOffset, long endOffset) throws IOException {
1:     List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks =
1:         readDictionaryMetadataFile();
0:     return read(carbonDictionaryColumnMetaChunks, startOffset, endOffset);
1:   }
1: 
1:   /**
1:    * Closes this stream and releases any system resources associated
1:    * with it. If the stream is already closed then invoking this
1:    * method has no effect.
1:    *
1:    * @throws IOException if an I/O error occurs
1:    */
1:   @Override public void close() throws IOException {
1:     if (null != dictionaryFileReader) {
1:       dictionaryFileReader.close();
1:       dictionaryFileReader = null;
1:     }
1:   }
1: 
1:   /**
1:    * @param carbonDictionaryColumnMetaChunks dictionary meta chunk list
1:    * @param startOffset                      start offset for dictionary data file
1:    * @param endOffset                        end offset till where data has
1:    *                                         to be read from dictionary data file
0:    * @return list of byte array dictionary values
1:    * @throws IOException readDictionary file method throws IO exception
1:    */
0:   private List<byte[]> read(List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks,
0:       long startOffset, long endOffset) throws IOException {
1:     // calculate the number of chunks to be read from dictionary file from start offset
1:     int dictionaryChunkCountsToBeRead =
1:         calculateTotalDictionaryChunkCountsToBeRead(carbonDictionaryColumnMetaChunks, startOffset,
1:             endOffset);
1:     // open dictionary file thrift reader
1:     openThriftReader();
1:     // read the required number of chunks from dictionary file
0:     List<ColumnDictionaryChunk> columnDictionaryChunks =
0:         readDictionaryFile(startOffset, dictionaryChunkCountsToBeRead);
0:     // convert byte buffer list to byte array list of dictionary vlaues
0:     List<byte[]> dictionaryValues =
0:         new ArrayList<byte[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:     for (ColumnDictionaryChunk dictionaryChunk : columnDictionaryChunks) {
1:       convertAndFillByteBufferListToByteArrayList(dictionaryValues, dictionaryChunk.getValues());
1:     }
1:     return dictionaryValues;
1:   }
1: 
1:   /**
1:    * This method will convert and fill list of byte buffer to list of byte array
1:    *
1:    * @param dictionaryValues          list of byte array. Each byte array is
1:    *                                  unique dictionary value
1:    * @param dictionaryValueBufferList dictionary thrift object which is a list of byte buffer.
1:    *                                  Each dictionary value is a wrapped in byte buffer before
1:    *                                  writing to file
1:    */
1:   private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,
1:       List<ByteBuffer> dictionaryValueBufferList) {
1:     for (ByteBuffer buffer : dictionaryValueBufferList) {
1:       int length = buffer.limit();
1:       byte[] value = new byte[length];
1:       buffer.get(value, 0, value.length);
1:       dictionaryValues.add(value);
1:     }
1:   }
1: 
1:   /**
1:    * This method will form the path for dictionary file for a given column
1:    */
1:   protected void initFileLocation() {
0:     PathService pathService = CarbonCommonFactory.getPathService();
0:     CarbonTablePath carbonTablePath = pathService.getCarbonTablePath(columnIdentifier,
0:                 this.hdfsStorePath, carbonTableIdentifier);
0:     this.columnDictionaryFilePath = carbonTablePath
0:         .getDictionaryFilePath(columnIdentifier.getColumnId());
1:   }
1: 
1:   /**
1:    * This method will read the dictionary file and return the list of dictionary thrift object
1:    *
1:    * @param dictionaryStartOffset        start offset for dictionary file
1:    * @param dictionaryChunkCountToBeRead number of dictionary chunks to be read
1:    * @return list of dictionary chunks
1:    * @throws IOException setReadOffset method throws I/O exception
1:    */
1:   private List<ColumnDictionaryChunk> readDictionaryFile(long dictionaryStartOffset,
1:       int dictionaryChunkCountToBeRead) throws IOException {
1:     List<ColumnDictionaryChunk> dictionaryChunks =
1:         new ArrayList<ColumnDictionaryChunk>(dictionaryChunkCountToBeRead);
1:     // skip the number of bytes if a start offset is given
1:     dictionaryFileReader.setReadOffset(dictionaryStartOffset);
1:     // read till dictionary chunk count
1:     while (dictionaryFileReader.hasNext()
1:         && dictionaryChunks.size() != dictionaryChunkCountToBeRead) {
1:       dictionaryChunks.add((ColumnDictionaryChunk) dictionaryFileReader.read());
1:     }
1:     return dictionaryChunks;
1:   }
1: 
1:   /**
1:    * This method will read the dictionary metadata file for a given column
1:    * and calculate the number of chunks to be read from the dictionary file.
1:    * It will do a strict validation for start and end offset as if the offsets are not
1:    * exactly matching, because data is written in thrift format, the thrift object
1:    * will not be retrieved properly
1:    *
1:    * @param dictionaryChunkMetaList    list of dictionary chunk metadata
1:    * @param dictionaryChunkStartOffset start offset for a dictionary chunk
1:    * @param dictionaryChunkEndOffset   end offset for a dictionary chunk
1:    * @return
1:    */
1:   private int calculateTotalDictionaryChunkCountsToBeRead(
1:       List<CarbonDictionaryColumnMetaChunk> dictionaryChunkMetaList,
1:       long dictionaryChunkStartOffset, long dictionaryChunkEndOffset) {
1:     boolean chunkWithStartOffsetFound = false;
1:     int dictionaryChunkCount = 0;
1:     for (CarbonDictionaryColumnMetaChunk metaChunk : dictionaryChunkMetaList) {
1:       // find the column meta chunk whose start offset value matches
1:       // with the given dictionary start offset
1:       if (!chunkWithStartOffsetFound && dictionaryChunkStartOffset == metaChunk.getStart_offset()) {
1:         chunkWithStartOffsetFound = true;
1:       }
1:       // start offset is found then keep adding the chunk count to be read
1:       if (chunkWithStartOffsetFound) {
1:         dictionaryChunkCount = dictionaryChunkCount + metaChunk.getChunk_count();
1:       }
1:       // when end offset is reached then break the loop
1:       if (dictionaryChunkEndOffset == metaChunk.getEnd_offset()) {
1:         break;
1:       }
1:     }
1:     return dictionaryChunkCount;
1:   }
1: 
1:   /**
1:    * This method will read dictionary metadata file and return the dictionary meta chunks
1:    *
1:    * @return list of dictionary metadata chunks
1:    * @throws IOException read and close method throws IO exception
1:    */
1:   private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {
1:     CarbonDictionaryMetadataReader columnMetadataReaderImpl = getDictionaryMetadataReader();
1:     List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList = null;
1:     // read metadata file
1:     try {
1:       dictionaryMetaChunkList = columnMetadataReaderImpl.read();
1:     } finally {
1:       // close the metadata reader
1:       columnMetadataReaderImpl.close();
1:     }
1:     return dictionaryMetaChunkList;
1:   }
1: 
1:   /**
1:    * @return
1:    */
1:   protected CarbonDictionaryMetadataReader getDictionaryMetadataReader() {
0:     return new CarbonDictionaryMetadataReaderImpl(this.hdfsStorePath, carbonTableIdentifier,
0:         this.columnIdentifier);
1:   }
1: 
1:   /**
1:    * This method will open the dictionary file stream for reading
1:    *
1:    * @throws IOException thrift reader open method throws IOException
1:    */
1:   private void openThriftReader() throws IOException {
1:     if (null == dictionaryFileReader) {
1:       // initialise dictionary file reader which will return dictionary thrift object
1:       // dictionary thrift object contains a list of byte buffer
1:       dictionaryFileReader =
1:           new ThriftReader(this.columnDictionaryFilePath, new ThriftReader.TBaseCreator() {
1:             @Override public TBase create() {
1:               return new ColumnDictionaryChunk();
1:             }
1:           });
1:       // Open dictionary file reader
1:       dictionaryFileReader.open();
1:     }
1: 
1:   }
1: }
============================================================================