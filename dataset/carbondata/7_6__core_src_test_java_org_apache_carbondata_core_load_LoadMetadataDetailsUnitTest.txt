1:70537a6: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:70537a6:  *
1:70537a6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:70537a6:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:70537a6:  */
5:70537a6: 
1:70537a6: package org.apache.carbondata.core.load;
1:70537a6: 
1:70537a6: import org.apache.carbondata.common.logging.LogService;
1:70537a6: import org.apache.carbondata.common.logging.LogServiceFactory;
1:70537a6: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1:ce09aaa: 
1:70537a6: import org.junit.Before;
1:70537a6: import org.junit.Test;
1:70537a6: 
1:0d42f52: import java.text.ParseException;
1:0d42f52: import java.text.SimpleDateFormat;
1:0d42f52: 
1:0d42f52: import static junit.framework.Assert.*;
1:70537a6: 
1:70537a6: public class LoadMetadataDetailsUnitTest {
1:70537a6: 
1:70537a6:   private LoadMetadataDetails loadMetadataDetails;
1:70537a6:   private static final LogService LOGGER =
1:be05695:       LogServiceFactory.getLogService(LoadMetadataDetailsUnitTest.class.getName());
1:70537a6: 
1:70537a6:   @Before public void setup() {
1:70537a6:     loadMetadataDetails = new LoadMetadataDetails();
3:70537a6:   }
1:70537a6: 
1:70537a6:   /**
1:70537a6:    * This method will test Hashcode which will return 31 if we don't set loadName.
1:70537a6:    *
1:70537a6:    * @throws Exception
1:70537a6:    */
1:70537a6: 
1:70537a6:   @Test public void testHashCodeLoadNameNull() throws Exception {
1:70537a6:     int expected_result = 31;
1:70537a6:     int data = loadMetadataDetails.hashCode();
1:70537a6:     assertEquals(expected_result, data);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testHashCodeValueInLoadName() throws Exception {
1:70537a6:     loadMetadataDetails.setLoadName("test");
1:70537a6:     int data = loadMetadataDetails.hashCode();
1:70537a6:     assertNotSame(31, data);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsNotLoadMetadataDetails() throws Exception {
1:70537a6:     Object obj = new Object();
1:70537a6:     boolean result = loadMetadataDetails.equals(obj);
1:70537a6:     assertEquals(false, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsNull() throws Exception {
1:70537a6:     boolean result = loadMetadataDetails.equals(new Object());
1:70537a6:     assertEquals(false, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsLoadMetadataDetailsWithoutLoadName() throws Exception {
1:70537a6:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:70537a6:     boolean result = loadMetadataDetails.equals(obj);
1:70537a6:     assertEquals(true, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsLoadMetadataDetails() throws Exception {
1:70537a6:     loadMetadataDetails.setLoadName("test");
1:70537a6:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:70537a6:     boolean result = loadMetadataDetails.equals(obj);
1:70537a6:     assertEquals(false, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsLoadMetadataDetailsLoadNameNull() throws Exception {
1:70537a6:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:70537a6:     obj.setLoadName("test");
1:70537a6:     boolean result = loadMetadataDetails.equals(obj);
1:70537a6:     assertEquals(false, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testEqualsObjectIsLoadMetadataDetailsLoadNameEqualsObjectLoadName()
1:70537a6:       throws Exception {
1:70537a6:     loadMetadataDetails.setLoadName("test");
1:70537a6:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:70537a6:     obj.setLoadName("test");
1:70537a6:     boolean result = loadMetadataDetails.equals(obj);
1:70537a6:     assertEquals(true, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   @Test public void testGetTimeStampWithDate() throws Exception {
1:0d42f52:     String date = "01-01-2016 00:00:00:000";
1:0d42f52:     long longVal = loadMetadataDetails.getTimeStamp(date);
1:0d42f52:     loadMetadataDetails.setLoadStartTime(longVal);
1:70537a6:     Long expected_result = getTime(date);
1:803c32e:     Long result = loadMetadataDetails.getLoadStartTime();
1:70537a6:     assertEquals(expected_result, result);
1:70537a6:   }
1:70537a6: 
1:70537a6:   public static Long getTime(String date) {
1:803c32e:     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP_MILLIS);
1:70537a6:     try {
1:70537a6:       return simpleDateFormat.parse(date).getTime() * 1000;
1:70537a6:     } catch (ParseException e) {
1:70537a6:       LOGGER.error("Error while parsing " + date + " " + e.getMessage());
1:70537a6:       return null;
1:70537a6:     }
1:70537a6:   }
1:70537a6: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:be05695
/////////////////////////////////////////////////////////////////////////
1:       LogServiceFactory.getLogService(LoadMetadataDetailsUnitTest.class.getName());
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1: 
author:ravikiran
-------------------------------------------------------------------------------
commit:9b8090b
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:803c32e
/////////////////////////////////////////////////////////////////////////
0: //  @Test public void testGetTimeStampWithEmptyTimeStamp() throws Exception {
0: //    loadMetadataDetails.setLoadStartTime(0);
0: //    Long result = loadMetadataDetails.getLoadStartTimeAsLong();
0: //    assertNull(result);
0: //  }
0: //
0: //  @Test public void testGetTimeStampWithParserException() throws Exception {
0: //    loadMetadataDetails.setLoadStartTime(0);
0: //    Long result = loadMetadataDetails.getLoadStartTimeAsLong();
0: //    assertNull(result);
0: //  }
1:     Long result = loadMetadataDetails.getLoadStartTime();
1:     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP_MILLIS);
author:ravikiran23
-------------------------------------------------------------------------------
commit:0d42f52
/////////////////////////////////////////////////////////////////////////
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: 
1: import static junit.framework.Assert.*;
/////////////////////////////////////////////////////////////////////////
0:     loadMetadataDetails.setLoadStartTime(0);
0:     loadMetadataDetails.setLoadStartTime(0);
1:     String date = "01-01-2016 00:00:00:000";
1:     long longVal = loadMetadataDetails.getTimeStamp(date);
1:     loadMetadataDetails.setLoadStartTime(longVal);
author:Anurag
-------------------------------------------------------------------------------
commit:70537a6
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.load;
1: 
0: import java.text.ParseException;
0: import java.text.SimpleDateFormat;
0: import java.util.TimeZone;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.assertNotSame;
0: import static junit.framework.Assert.assertNull;
1: 
1: public class LoadMetadataDetailsUnitTest {
1: 
1:   private LoadMetadataDetails loadMetadataDetails;
1:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(LoadMetadataDetails.class.getName());
1: 
1:   @Before public void setup() {
1:     loadMetadataDetails = new LoadMetadataDetails();
1:   }
1: 
1:   /**
1:    * This method will test Hashcode which will return 31 if we don't set loadName.
1:    *
1:    * @throws Exception
1:    */
1: 
1:   @Test public void testHashCodeLoadNameNull() throws Exception {
1:     int expected_result = 31;
1:     int data = loadMetadataDetails.hashCode();
1:     assertEquals(expected_result, data);
1:   }
1: 
1:   @Test public void testHashCodeValueInLoadName() throws Exception {
1:     loadMetadataDetails.setLoadName("test");
1:     int data = loadMetadataDetails.hashCode();
1:     assertNotSame(31, data);
1:   }
1: 
1:   @Test public void testEqualsObjectIsNotLoadMetadataDetails() throws Exception {
1:     Object obj = new Object();
1:     boolean result = loadMetadataDetails.equals(obj);
1:     assertEquals(false, result);
1:   }
1: 
1:   @Test public void testEqualsObjectIsNull() throws Exception {
1:     boolean result = loadMetadataDetails.equals(new Object());
1:     assertEquals(false, result);
1:   }
1: 
1:   @Test public void testEqualsObjectIsLoadMetadataDetailsWithoutLoadName() throws Exception {
1:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:     boolean result = loadMetadataDetails.equals(obj);
1:     assertEquals(true, result);
1:   }
1: 
1:   @Test public void testEqualsObjectIsLoadMetadataDetails() throws Exception {
1:     loadMetadataDetails.setLoadName("test");
1:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:     boolean result = loadMetadataDetails.equals(obj);
1:     assertEquals(false, result);
1:   }
1: 
1:   @Test public void testEqualsObjectIsLoadMetadataDetailsLoadNameNull() throws Exception {
1:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:     obj.setLoadName("test");
1:     boolean result = loadMetadataDetails.equals(obj);
1:     assertEquals(false, result);
1:   }
1: 
1:   @Test public void testEqualsObjectIsLoadMetadataDetailsLoadNameEqualsObjectLoadName()
1:       throws Exception {
1:     loadMetadataDetails.setLoadName("test");
1:     LoadMetadataDetails obj = new LoadMetadataDetails();
1:     obj.setLoadName("test");
1:     boolean result = loadMetadataDetails.equals(obj);
1:     assertEquals(true, result);
1:   }
1: 
0:   @Test public void testGetTimeStampWithEmptyTimeStamp() throws Exception {
0:     loadMetadataDetails.setLoadStartTime("");
0:     Long result = loadMetadataDetails.getLoadStartTimeAsLong();
0:     assertNull(result);
1:   }
1: 
0:   @Test public void testGetTimeStampWithParserException() throws Exception {
0:     loadMetadataDetails.setLoadStartTime("00.00.00");
0:     Long result = loadMetadataDetails.getLoadStartTimeAsLong();
0:     assertNull(result);
1:   }
1: 
1:   @Test public void testGetTimeStampWithDate() throws Exception {
0:     String date = "01-01-2016 00:00:00";
0:     loadMetadataDetails.setLoadStartTime(date);
1:     Long expected_result = getTime(date);
0:     Long result = loadMetadataDetails.getLoadStartTimeAsLong();
1:     assertEquals(expected_result, result);
1:   }
1: 
1:   public static Long getTime(String date) {
0:     SimpleDateFormat simpleDateFormat = new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);
1:     try {
1:       return simpleDateFormat.parse(date).getTime() * 1000;
1:     } catch (ParseException e) {
1:       LOGGER.error("Error while parsing " + date + " " + e.getMessage());
1:       return null;
1:     }
1:   }
1: }
============================================================================