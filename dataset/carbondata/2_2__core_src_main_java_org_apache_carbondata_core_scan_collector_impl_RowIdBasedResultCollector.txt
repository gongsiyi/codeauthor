1:21c5fb1: /*
1:21c5fb1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:21c5fb1:  * contributor license agreements.  See the NOTICE file distributed with
1:21c5fb1:  * this work for additional information regarding copyright ownership.
1:21c5fb1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:21c5fb1:  * (the "License"); you may not use this file except in compliance with
1:21c5fb1:  * the License.  You may obtain a copy of the License at
1:21c5fb1:  *
1:21c5fb1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:21c5fb1:  *
1:21c5fb1:  * Unless required by applicable law or agreed to in writing, software
1:21c5fb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21c5fb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21c5fb1:  * See the License for the specific language governing permissions and
1:21c5fb1:  * limitations under the License.
1:21c5fb1:  */
1:21c5fb1: 
1:21c5fb1: package org.apache.carbondata.core.scan.collector.impl;
1:21c5fb1: 
1:21c5fb1: import java.util.ArrayList;
1:21c5fb1: import java.util.List;
1:21c5fb1: 
1:21c5fb1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:21c5fb1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1:21c5fb1: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
1:21c5fb1: 
1:21c5fb1: /**
1:21c5fb1:  * This class append blocklet id, page id and row id to each row.
1:21c5fb1:  */
1:21c5fb1: @InterfaceAudience.Internal
1:21c5fb1: public class RowIdBasedResultCollector extends DictionaryBasedResultCollector {
1:21c5fb1: 
1:21c5fb1:   public RowIdBasedResultCollector(BlockExecutionInfo blockExecutionInfos) {
1:21c5fb1:     super(blockExecutionInfos);
1:21c5fb1:   }
1:21c5fb1: 
1:21c5fb1:   @Override
1:21c5fb1:   public List<Object[]> collectResultInRow(BlockletScannedResult scannedResult, int batchSize) {
1:21c5fb1: 
1:21c5fb1:     // scan the record and add to list
1:21c5fb1:     List<Object[]> listBasedResult = new ArrayList<>(batchSize);
1:21c5fb1:     int rowCounter = 0;
1:21c5fb1:     int[] surrogateResult;
1:21c5fb1:     byte[][] noDictionaryKeys;
1:21c5fb1:     byte[][] complexTypeKeyArray;
1:21c5fb1:     int columnCount = queryDimensions.length + queryMeasures.length;
1:21c5fb1:     while (scannedResult.hasNext() && rowCounter < batchSize) {
1:21c5fb1:       Object[] row = new Object[columnCount + 3];
1:8952394:       row[columnCount] = scannedResult.getBlockletNumber();
1:21c5fb1:       row[columnCount + 1] = scannedResult.getCurrentPageCounter();
1:21c5fb1:       if (isDimensionExists) {
1:21c5fb1:         surrogateResult = scannedResult.getDictionaryKeyIntegerArray();
1:21c5fb1:         noDictionaryKeys = scannedResult.getNoDictionaryKeyArray();
1:21c5fb1:         complexTypeKeyArray = scannedResult.getComplexTypeKeyArray();
1:21c5fb1:         dictionaryColumnIndex = 0;
1:21c5fb1:         noDictionaryColumnIndex = 0;
1:21c5fb1:         complexTypeColumnIndex = 0;
1:21c5fb1:         for (int i = 0; i < queryDimensions.length; i++) {
1:21c5fb1:           fillDimensionData(scannedResult, surrogateResult, noDictionaryKeys, complexTypeKeyArray,
1:21c5fb1:               comlexDimensionInfoMap, row, i);
1:21c5fb1:         }
1:21c5fb1:       } else {
1:21c5fb1:         scannedResult.incrementCounter();
1:21c5fb1:       }
1:21c5fb1:       row[columnCount + 2] = scannedResult.getCurrentRowId();
1:21c5fb1:       if (scannedResult.containsDeletedRow(scannedResult.getCurrentRowId())) {
1:21c5fb1:         continue;
1:21c5fb1:       }
1:21c5fb1:       fillMeasureData(scannedResult, row);
1:21c5fb1:       listBasedResult.add(row);
1:21c5fb1:       rowCounter++;
1:21c5fb1:     }
1:21c5fb1:     return listBasedResult;
1:21c5fb1: 
1:21c5fb1:   }
1:21c5fb1: 
1:21c5fb1: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:8952394
/////////////////////////////////////////////////////////////////////////
1:       row[columnCount] = scannedResult.getBlockletNumber();
author:QiangCai
-------------------------------------------------------------------------------
commit:21c5fb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.collector.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.scan.executor.infos.BlockExecutionInfo;
1: import org.apache.carbondata.core.scan.result.BlockletScannedResult;
1: 
1: /**
1:  * This class append blocklet id, page id and row id to each row.
1:  */
1: @InterfaceAudience.Internal
1: public class RowIdBasedResultCollector extends DictionaryBasedResultCollector {
1: 
1:   public RowIdBasedResultCollector(BlockExecutionInfo blockExecutionInfos) {
1:     super(blockExecutionInfos);
1:   }
1: 
1:   @Override
1:   public List<Object[]> collectResultInRow(BlockletScannedResult scannedResult, int batchSize) {
1: 
1:     // scan the record and add to list
1:     List<Object[]> listBasedResult = new ArrayList<>(batchSize);
1:     int rowCounter = 0;
1:     int[] surrogateResult;
1:     byte[][] noDictionaryKeys;
1:     byte[][] complexTypeKeyArray;
1:     int columnCount = queryDimensions.length + queryMeasures.length;
1:     while (scannedResult.hasNext() && rowCounter < batchSize) {
1:       Object[] row = new Object[columnCount + 3];
0:       row[columnCount] = Integer.parseInt(scannedResult.getBlockletNumber());
1:       row[columnCount + 1] = scannedResult.getCurrentPageCounter();
1:       if (isDimensionExists) {
1:         surrogateResult = scannedResult.getDictionaryKeyIntegerArray();
1:         noDictionaryKeys = scannedResult.getNoDictionaryKeyArray();
1:         complexTypeKeyArray = scannedResult.getComplexTypeKeyArray();
1:         dictionaryColumnIndex = 0;
1:         noDictionaryColumnIndex = 0;
1:         complexTypeColumnIndex = 0;
1:         for (int i = 0; i < queryDimensions.length; i++) {
1:           fillDimensionData(scannedResult, surrogateResult, noDictionaryKeys, complexTypeKeyArray,
1:               comlexDimensionInfoMap, row, i);
1:         }
1:       } else {
1:         scannedResult.incrementCounter();
1:       }
1:       row[columnCount + 2] = scannedResult.getCurrentRowId();
1:       if (scannedResult.containsDeletedRow(scannedResult.getCurrentRowId())) {
1:         continue;
1:       }
1:       fillMeasureData(scannedResult, row);
1:       listBasedResult.add(row);
1:       rowCounter++;
1:     }
1:     return listBasedResult;
1: 
1:   }
1: 
1: }
============================================================================