1:3ff574d: /*
1:3ff574d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3ff574d:  * contributor license agreements.  See the NOTICE file distributed with
1:3ff574d:  * this work for additional information regarding copyright ownership.
1:3ff574d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3ff574d:  * (the "License"); you may not use this file except in compliance with
1:3ff574d:  * the License.  You may obtain a copy of the License at
1:3ff574d:  *
1:3ff574d:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3ff574d:  *
1:3ff574d:  * Unless required by applicable law or agreed to in writing, software
1:3ff574d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3ff574d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ff574d:  * See the License for the specific language governing permissions and
1:3ff574d:  * limitations under the License.
1:3ff574d:  */
1:3ff574d: 
1:3ff574d: package org.apache.carbondata.hadoop.readsupport.impl;
1:3ff574d: 
1:3ff574d: import java.sql.Date;
1:3ff574d: import java.sql.Timestamp;
1:3ff574d: import java.util.Calendar;
1:3ff574d: 
1:3ff574d: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:3ff574d: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:3ff574d: 
1:3ff574d: /**
1:3ff574d:  * A read support implementation to return CarbonRow after handling
1:3ff574d:  * global dictionary and direct dictionary (date/timestamp) conversion
1:3ff574d:  */
1:3ff574d: public class CarbonRowReadSupport extends DictionaryDecodeReadSupport<CarbonRow> {
1:3ff574d: 
1:3ff574d:   @Override
1:3ff574d:   public CarbonRow readRow(Object[] data) {
1:3ff574d:     assert (data.length == dictionaries.length);
1:3ff574d:     for (int i = 0; i < dictionaries.length; i++) {
1:3ff574d:       if (dictionaries[i] != null) {
1:3ff574d:         data[i] = dictionaries[i].getDictionaryValueForKey((int) data[i]);
1:3ff574d:       }
1:3ff574d:       if (dataTypes[i] == DataTypes.DATE) {
1:3ff574d:         Calendar c = Calendar.getInstance();
1:3ff574d:         c.setTime(new Date(0));
1:3ff574d:         c.add(Calendar.DAY_OF_YEAR, (Integer) data[i]);
1:3ff574d:         data[i] = new Date(c.getTime().getTime());
1:3ff574d:       } else if (dataTypes[i] == DataTypes.TIMESTAMP) {
1:3ff574d:         data[i] = new Timestamp((long) data[i] / 1000);
1:3ff574d:       }
1:3ff574d:     }
1:3ff574d:     return new CarbonRow(data);
1:3ff574d:   }
1:3ff574d: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.hadoop.readsupport.impl;
1: 
1: import java.sql.Date;
1: import java.sql.Timestamp;
1: import java.util.Calendar;
1: 
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: 
1: /**
1:  * A read support implementation to return CarbonRow after handling
1:  * global dictionary and direct dictionary (date/timestamp) conversion
1:  */
1: public class CarbonRowReadSupport extends DictionaryDecodeReadSupport<CarbonRow> {
1: 
1:   @Override
1:   public CarbonRow readRow(Object[] data) {
1:     assert (data.length == dictionaries.length);
1:     for (int i = 0; i < dictionaries.length; i++) {
1:       if (dictionaries[i] != null) {
1:         data[i] = dictionaries[i].getDictionaryValueForKey((int) data[i]);
1:       }
1:       if (dataTypes[i] == DataTypes.DATE) {
1:         Calendar c = Calendar.getInstance();
1:         c.setTime(new Date(0));
1:         c.add(Calendar.DAY_OF_YEAR, (Integer) data[i]);
1:         data[i] = new Date(c.getTime().getTime());
1:       } else if (dataTypes[i] == DataTypes.TIMESTAMP) {
1:         data[i] = new Timestamp((long) data[i] / 1000);
1:       }
1:     }
1:     return new CarbonRow(data);
1:   }
1: }
============================================================================