1:0e93a3f: /*
1:0e93a3f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0e93a3f:  * contributor license agreements.  See the NOTICE file distributed with
1:0e93a3f:  * this work for additional information regarding copyright ownership.
1:0e93a3f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0e93a3f:  * (the "License"); you may not use this file except in compliance with
1:0e93a3f:  * the License.  You may obtain a copy of the License at
1:0e93a3f:  *
1:0e93a3f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0e93a3f:  *
1:0e93a3f:  * Unless required by applicable law or agreed to in writing, software
1:0e93a3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0e93a3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0e93a3f:  * See the License for the specific language governing permissions and
1:0e93a3f:  * limitations under the License.
2:0e93a3f:  */
6:0e93a3f: 
1:0e93a3f: package org.apache.carbondata.presto;
1:0e93a3f: 
1:d4a1577: import java.util.Objects;
1:d4a1577: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:0e93a3f: import com.facebook.presto.spi.ColumnHandle;
1:0e93a3f: import com.facebook.presto.spi.ColumnMetadata;
1:0e93a3f: import com.facebook.presto.spi.type.Type;
1:0e93a3f: import com.fasterxml.jackson.annotation.JsonCreator;
1:0e93a3f: import com.fasterxml.jackson.annotation.JsonProperty;
1:0e93a3f: 
1:ccb6560: import static com.google.common.base.MoreObjects.toStringHelper;
1:d4a1577: 
1:0e93a3f: 
1:0e93a3f: public class CarbondataColumnHandle implements ColumnHandle {
1:0e93a3f:   private final String connectorId;
1:0e93a3f:   private final String columnName;
1:0e93a3f: 
1:0e93a3f:   public boolean isInvertedIndex() {
1:0e93a3f:     return isInvertedIndex;
4:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   private final Type columnType;
1:0e93a3f:   private final int ordinalPosition;
1:0e93a3f:   private final int keyOrdinal;
1:0e93a3f: 
1:0e93a3f:   private final String columnUniqueId;
1:0e93a3f:   private final boolean isInvertedIndex;
1:0e93a3f: 
1:9669c0b:   /**
1:9669c0b:    * Used when this column contains decimal data.
1:9669c0b:    */
1:9669c0b:   private int scale;
1:9669c0b: 
1:9669c0b:   private int precision;
1:9669c0b: 
1:9669c0b: 
1:0e93a3f:   public boolean isMeasure() {
1:0e93a3f:     return isMeasure;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   private final boolean isMeasure;
1:0e93a3f: 
1:0e93a3f:   public int getKeyOrdinal() {
1:0e93a3f:     return keyOrdinal;
1:0e93a3f:   }
1:0e93a3f: 
1:f209e8e:   @JsonCreator public CarbondataColumnHandle(
1:f209e8e:       @JsonProperty("connectorId") String connectorId,
1:f209e8e:       @JsonProperty("columnName") String columnName,
1:f209e8e:       @JsonProperty("columnType") Type columnType,
1:0e93a3f:       @JsonProperty("ordinalPosition") int ordinalPosition,
1:0e93a3f:       @JsonProperty("keyOrdinal") int keyOrdinal,
1:0e93a3f:       @JsonProperty("isMeasure") boolean isMeasure,
1:0e93a3f:       @JsonProperty("columnUniqueId") String columnUniqueId,
1:9669c0b:       @JsonProperty("isInvertedIndex") boolean isInvertedIndex,
1:9669c0b:       @JsonProperty("precision") int precision,
1:9669c0b:       @JsonProperty("scale") int scale) {
1:0e93a3f:     this.connectorId = requireNonNull(connectorId, "connectorId is null");
1:0e93a3f:     this.columnName = requireNonNull(columnName, "columnName is null");
1:0e93a3f:     this.columnType = requireNonNull(columnType, "columnType is null");
1:0e93a3f: 
1:0e93a3f:     this.ordinalPosition = requireNonNull(ordinalPosition, "ordinalPosition is null");
1:0e93a3f:     this.keyOrdinal = requireNonNull(keyOrdinal, "keyOrdinal is null");
1:0e93a3f: 
1:0e93a3f:     this.isMeasure = isMeasure;
1:0e93a3f:     this.columnUniqueId = columnUniqueId;//requireNonNull(columnUniqueId, "columnUniqueId is null");
1:0e93a3f:     this.isInvertedIndex = requireNonNull(isInvertedIndex, "isInvertedIndex is null");
1:9669c0b:     this.precision = precision;
1:9669c0b:     this.scale = scale;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public String getConnectorId() {
1:0e93a3f:     return connectorId;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public String getColumnName() {
1:0e93a3f:     return columnName;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public Type getColumnType() {
1:0e93a3f:     return columnType;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public int getOrdinalPosition() {
1:0e93a3f:     return ordinalPosition;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   public ColumnMetadata getColumnMetadata() {
1:0e93a3f:     return new ColumnMetadata(columnName, columnType, null, false);
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @Override public int hashCode() {
1:0e93a3f:     return Objects.hash(connectorId, columnName);
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @Override public boolean equals(Object obj) {
1:0e93a3f:     if (this == obj) {
1:0e93a3f:       return true;
1:0e93a3f:     }
1:0e93a3f:     if ((obj == null) || (getClass() != obj.getClass())) {
1:0e93a3f:       return false;
1:0e93a3f:     }
1:0e93a3f: 
1:0e93a3f:     CarbondataColumnHandle other = (CarbondataColumnHandle) obj;
1:0e93a3f:     return Objects.equals(this.connectorId, other.connectorId) && Objects
1:0e93a3f:         .equals(this.columnName, other.columnName);
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @Override public String toString() {
1:0e93a3f:     return toStringHelper(this).add("connectorId", connectorId).add("columnName", columnName)
1:0e93a3f:         .add("columnType", columnType).add("ordinalPosition", ordinalPosition).toString();
1:0e93a3f:   }
1:9669c0b: 
1:9669c0b:   @JsonProperty public int getScale() {
1:9669c0b:     return scale;
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @JsonProperty public int getPrecision() {
1:9669c0b:     return precision;
1:9669c0b:   }
1:9669c0b: 
1:9669c0b: 
1:9669c0b: 
1:0e93a3f: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
1: 
1: import static java.util.Objects.requireNonNull;
1: 
1: 
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:ccb6560
/////////////////////////////////////////////////////////////////////////
1: import static com.google.common.base.MoreObjects.toStringHelper;
commit:9669c0b
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Used when this column contains decimal data.
1:    */
1:   private int scale;
1: 
1:   private int precision;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:       @JsonProperty("isInvertedIndex") boolean isInvertedIndex,
1:       @JsonProperty("precision") int precision,
1:       @JsonProperty("scale") int scale) {
/////////////////////////////////////////////////////////////////////////
1:     this.precision = precision;
1:     this.scale = scale;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @JsonProperty public int getScale() {
1:     return scale;
1:   }
1: 
1:   @JsonProperty public int getPrecision() {
1:     return precision;
1:   }
1: 
1: 
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:   @JsonCreator public CarbondataColumnHandle(
1:       @JsonProperty("connectorId") String connectorId,
1:       @JsonProperty("columnName") String columnName,
1:       @JsonProperty("columnType") Type columnType,
author:ffpeng90
-------------------------------------------------------------------------------
commit:4422c52
/////////////////////////////////////////////////////////////////////////
author:chenliang613
-------------------------------------------------------------------------------
commit:0e93a3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import com.facebook.presto.spi.ColumnHandle;
1: import com.facebook.presto.spi.ColumnMetadata;
1: import com.facebook.presto.spi.type.Type;
1: import com.fasterxml.jackson.annotation.JsonCreator;
1: import com.fasterxml.jackson.annotation.JsonProperty;
1: 
0: import java.util.Objects;
1: 
0: //import static com.google.common.base.MoreObjects.toStringHelper;
0: import static com.google.common.base.Objects.toStringHelper;
0: import static java.util.Objects.requireNonNull;
1: 
1: public class CarbondataColumnHandle implements ColumnHandle {
1:   private final String connectorId;
1:   private final String columnName;
1: 
1:   public boolean isInvertedIndex() {
1:     return isInvertedIndex;
1:   }
1: 
1:   private final Type columnType;
1:   private final int ordinalPosition;
1:   private final int keyOrdinal;
0:   private final int columnGroupOrdinal;
1: 
0:   private final int columnGroupId;
1:   private final String columnUniqueId;
1:   private final boolean isInvertedIndex;
1: 
1:   public boolean isMeasure() {
1:     return isMeasure;
1:   }
1: 
1:   private final boolean isMeasure;
1: 
1:   public int getKeyOrdinal() {
1:     return keyOrdinal;
1:   }
1: 
0:   public int getColumnGroupOrdinal() {
0:     return columnGroupOrdinal;
1:   }
1: 
0:   public int getColumnGroupId() {
0:     return columnGroupId;
1:   }
1: 
0:   public String getColumnUniqueId() {
0:     return columnUniqueId;
1:   }
1: 
0:   /**
0:    * ordinalPosition of a columnhandle is the -> number of the column in the entire list of columns of this table
0:    * IT DOESNT DEPEND ON THE QUERY (select clm3, clm0, clm1  from tablename)
0:    * The columnhandle of clm3 : has ordinalposition = 3
1:    */
1: 
0:   @JsonCreator public CarbondataColumnHandle(@JsonProperty("connectorId") String connectorId,
0:       @JsonProperty("columnName") String columnName, @JsonProperty("columnType") Type columnType,
1:       @JsonProperty("ordinalPosition") int ordinalPosition,
1:       @JsonProperty("keyOrdinal") int keyOrdinal,
0:       @JsonProperty("columnGroupOrdinal") int columnGroupOrdinal,
1:       @JsonProperty("isMeasure") boolean isMeasure,
0:       @JsonProperty("columnGroupId") int columnGroupId,
1:       @JsonProperty("columnUniqueId") String columnUniqueId,
0:       @JsonProperty("isInvertedIndex") boolean isInvertedIndex) {
1:     this.connectorId = requireNonNull(connectorId, "connectorId is null");
1:     this.columnName = requireNonNull(columnName, "columnName is null");
1:     this.columnType = requireNonNull(columnType, "columnType is null");
1: 
1:     this.ordinalPosition = requireNonNull(ordinalPosition, "ordinalPosition is null");
1:     this.keyOrdinal = requireNonNull(keyOrdinal, "keyOrdinal is null");
0:     this.columnGroupOrdinal = requireNonNull(columnGroupOrdinal, "columnGroupOrdinal is null");
1: 
1:     this.isMeasure = isMeasure;
0:     this.columnGroupId = requireNonNull(columnGroupId, "columnGroupId is null");
1:     this.columnUniqueId = columnUniqueId;//requireNonNull(columnUniqueId, "columnUniqueId is null");
1:     this.isInvertedIndex = requireNonNull(isInvertedIndex, "isInvertedIndex is null");
1:   }
1: 
1:   @JsonProperty public String getConnectorId() {
1:     return connectorId;
1:   }
1: 
1:   @JsonProperty public String getColumnName() {
1:     return columnName;
1:   }
1: 
1:   @JsonProperty public Type getColumnType() {
1:     return columnType;
1:   }
1: 
1:   @JsonProperty public int getOrdinalPosition() {
1:     return ordinalPosition;
1:   }
1: 
1:   public ColumnMetadata getColumnMetadata() {
1:     return new ColumnMetadata(columnName, columnType, null, false);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(connectorId, columnName);
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1:     if ((obj == null) || (getClass() != obj.getClass())) {
1:       return false;
1:     }
1: 
1:     CarbondataColumnHandle other = (CarbondataColumnHandle) obj;
1:     return Objects.equals(this.connectorId, other.connectorId) && Objects
1:         .equals(this.columnName, other.columnName);
1:   }
1: 
1:   @Override public String toString() {
1:     return toStringHelper(this).add("connectorId", connectorId).add("columnName", columnName)
1:         .add("columnType", columnType).add("ordinalPosition", ordinalPosition).toString();
1:   }
1: }
commit:7ee8e27
/////////////////////////////////////////////////////////////////////////
commit:2712330
/////////////////////////////////////////////////////////////////////////
0: public class CarbondataColumnHandle implements ColumnHandle {
0:   private final String connectorId;
0:   private final String columnName;
0:   public boolean isInvertedIndex() {
0:     return isInvertedIndex;
0:   }
0:   private final Type columnType;
0:   private final int ordinalPosition;
0:   private final int keyOrdinal;
0:   private final int columnGroupOrdinal;
0:   private final int columnGroupId;
0:   private final String columnUniqueId;
0:   private final boolean isInvertedIndex;
0:   public boolean isMeasure() {
0:     return isMeasure;
0:   }
0:   private final boolean isMeasure;
0:   public int getKeyOrdinal() {
0:     return keyOrdinal;
0:   }
0:   public int getColumnGroupOrdinal() {
0:     return columnGroupOrdinal;
0:   }
0:   public int getColumnGroupId() {
0:     return columnGroupId;
0:   }
0:   public String getColumnUniqueId() {
0:     return columnUniqueId;
0:   }
0:   @JsonCreator public CarbondataColumnHandle(@JsonProperty("connectorId") String connectorId,
0:       @JsonProperty("columnName") String columnName, @JsonProperty("columnType") Type columnType,
0:       @JsonProperty("ordinalPosition") int ordinalPosition,
0:       @JsonProperty("keyOrdinal") int keyOrdinal,
0:       @JsonProperty("columnGroupOrdinal") int columnGroupOrdinal,
0:       @JsonProperty("isMeasure") boolean isMeasure,
0:       @JsonProperty("columnGroupId") int columnGroupId,
0:       @JsonProperty("columnUniqueId") String columnUniqueId,
0:       @JsonProperty("isInvertedIndex") boolean isInvertedIndex) {
0:     this.connectorId = requireNonNull(connectorId, "connectorId is null");
0:     this.columnName = requireNonNull(columnName, "columnName is null");
0:     this.columnType = requireNonNull(columnType, "columnType is null");
0:     this.ordinalPosition = requireNonNull(ordinalPosition, "ordinalPosition is null");
0:     this.keyOrdinal = requireNonNull(keyOrdinal, "keyOrdinal is null");
0:     this.columnGroupOrdinal = requireNonNull(columnGroupOrdinal, "columnGroupOrdinal is null");
0:     this.isMeasure = isMeasure;
0:     this.columnGroupId = requireNonNull(columnGroupId, "columnGroupId is null");
0:     this.columnUniqueId = columnUniqueId;//requireNonNull(columnUniqueId, "columnUniqueId is null");
0:     this.isInvertedIndex = requireNonNull(isInvertedIndex, "isInvertedIndex is null");
0:   }
0: 
0:   @JsonProperty public String getConnectorId() {
0:     return connectorId;
0:   }
0: 
0:   @JsonProperty public String getColumnName() {
0:     return columnName;
0:   }
0: 
0:   @JsonProperty public Type getColumnType() {
0:     return columnType;
0:   }
0: 
0:   @JsonProperty public int getOrdinalPosition() {
0:     return ordinalPosition;
0:   }
0: 
0:   public ColumnMetadata getColumnMetadata() {
0:     return new ColumnMetadata(columnName, columnType, null, false);
0:   }
0: 
0:   @Override public int hashCode() {
0:     return Objects.hash(connectorId, columnName);
0:   }
0: 
0:   @Override public boolean equals(Object obj) {
0:     if (this == obj) {
0:       return true;
0:     }
0:     if ((obj == null) || (getClass() != obj.getClass())) {
0:       return false;
0:     CarbondataColumnHandle other = (CarbondataColumnHandle) obj;
0:     return Objects.equals(this.connectorId, other.connectorId) && Objects
0:         .equals(this.columnName, other.columnName);
0:   }
0:   @Override public String toString() {
0:     return toStringHelper(this).add("connectorId", connectorId).add("columnName", columnName)
0:         .add("columnType", columnType).add("ordinalPosition", ordinalPosition).toString();
0:   }
commit:9e3818e
/////////////////////////////////////////////////////////////////////////
0: //import static com.google.common.base.MoreObjects.toStringHelper;
0: import static com.google.common.base.Objects.toStringHelper;
commit:32bf296
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *    http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: 
0: package org.apache.carbondata.presto;
commit:9d7dbea
============================================================================