1:a700f83: /*
1:a700f83:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a700f83:  * contributor license agreements.  See the NOTICE file distributed with
1:a700f83:  * this work for additional information regarding copyright ownership.
1:a700f83:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a700f83:  * (the "License"); you may not use this file except in compliance with
1:a700f83:  * the License.  You may obtain a copy of the License at
1:a700f83:  *
1:a700f83:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a700f83:  *
1:a700f83:  * Unless required by applicable law or agreed to in writing, software
1:a700f83:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a700f83:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a700f83:  * See the License for the specific language governing permissions and
1:a700f83:  * limitations under the License.
1:a700f83:  */
1:a700f83: package org.apache.carbondata.hive;
2:a700f83: 
1:a700f83: import java.util.ArrayList;
1:a700f83: import java.util.Arrays;
1:a700f83: import java.util.HashMap;
1:a700f83: import java.util.List;
1:a700f83: 
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.StructField;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
1:5ff2c50: import org.apache.hadoop.hive.serde2.typeinfo.CharTypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
1:a700f83: import org.apache.hadoop.io.ArrayWritable;
1:a700f83: 
1:d408a8d: class CarbonObjectInspector extends SettableStructObjectInspector {
1:a700f83:   private final TypeInfo typeInfo;
1:a700f83:   private final List<StructField> fields;
1:a700f83:   private final HashMap<String, StructFieldImpl> fieldsByName;
1:a700f83: 
1:a700f83:   public CarbonObjectInspector(final StructTypeInfo rowTypeInfo) {
1:a700f83: 
1:a700f83:     typeInfo = rowTypeInfo;
1:d408a8d:     List<String> fieldNames = rowTypeInfo.getAllStructFieldNames();
1:d408a8d:     List<TypeInfo> fieldInfos = rowTypeInfo.getAllStructFieldTypeInfos();
1:a700f83:     fields = new ArrayList<StructField>(fieldNames.size());
1:a700f83:     fieldsByName = new HashMap<String, StructFieldImpl>();
1:a700f83: 
1:a700f83:     for (int i = 0; i < fieldNames.size(); ++i) {
1:a700f83:       final String name = fieldNames.get(i);
1:a700f83:       final TypeInfo fieldInfo = fieldInfos.get(i);
1:a700f83: 
1:a700f83:       final StructFieldImpl field = new StructFieldImpl(name, getObjectInspector(fieldInfo), i);
1:a700f83:       fields.add(field);
1:a700f83:       fieldsByName.put(name, field);
3:a700f83:     }
1:a700f83:   }
1:a700f83: 
1:d408a8d:   private ObjectInspector getObjectInspector(final TypeInfo typeInfo) {
1:a700f83:     if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.intTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableIntObjectInspector;
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableLongObjectInspector;
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
1:a700f83:     } else if (typeInfo instanceof DecimalTypeInfo) {
1:d408a8d:       return PrimitiveObjectInspectorFactory
1:d408a8d:           .getPrimitiveWritableObjectInspector((DecimalTypeInfo) typeInfo);
1:a700f83:     } else if (typeInfo.getCategory().equals(Category.STRUCT)) {
1:a700f83:       return new CarbonObjectInspector((StructTypeInfo) typeInfo);
1:a700f83:     } else if (typeInfo.getCategory().equals(Category.LIST)) {
1:a700f83:       final TypeInfo subTypeInfo = ((ListTypeInfo) typeInfo).getListElementTypeInfo();
1:a700f83:       return new CarbonArrayInspector(getObjectInspector(subTypeInfo));
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.shortTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableShortObjectInspector;
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;
1:a700f83:     } else if (typeInfo.equals(TypeInfoFactory.dateTypeInfo)) {
1:a700f83:       return PrimitiveObjectInspectorFactory.writableDateObjectInspector;
1:d408a8d:     } else if (((CharTypeInfo) typeInfo).getPrimitiveCategory().name().equals("CHAR")) {
1:5ff2c50:       return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
2:a700f83:     } else {
1:a700f83:       throw new UnsupportedOperationException("Unknown field type: " + typeInfo);
1:a700f83:     }
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Category getCategory() {
1:a700f83:     return Category.STRUCT;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public String getTypeName() {
1:a700f83:     return typeInfo.getTypeName();
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public List<? extends StructField> getAllStructFieldRefs() {
1:a700f83:     return fields;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object getStructFieldData(final Object data, final StructField fieldRef) {
1:a700f83:     if (data == null) {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83: 
1:a700f83:     if (data instanceof ArrayWritable) {
1:a700f83:       final ArrayWritable arr = (ArrayWritable) data;
1:a700f83:       return arr.get()[((StructFieldImpl) fieldRef).getIndex()];
1:a700f83:     }
1:a700f83: 
1:a700f83:     boolean isArray = !(data instanceof List);
1:d408a8d:     int listSize = isArray ? ((Object[]) data).length : ((List) data).size();
1:d408a8d:     int fieldID = fieldRef.getFieldID();
1:d408a8d:     return fieldID >= listSize ?
1:d408a8d:         null :
1:d408a8d:         (isArray ? ((Object[]) data)[fieldID] : ((List) data).get(fieldID));
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public StructField getStructFieldRef(final String name) {
1:a700f83:     return fieldsByName.get(name);
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public List<Object> getStructFieldsDataAsList(final Object data) {
1:a700f83:     if (data == null) {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83: 
1:a700f83:     if (data instanceof ArrayWritable) {
1:a700f83:       final ArrayWritable arr = (ArrayWritable) data;
1:a700f83:       final Object[] arrWritable = arr.get();
1:a700f83:       return new ArrayList<Object>(Arrays.asList(arrWritable));
1:a700f83:     }
1:a700f83: 
1:a700f83:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object create() {
1:a700f83:     final ArrayList<Object> list = new ArrayList<Object>(fields.size());
1:a700f83:     for (int i = 0; i < fields.size(); ++i) {
1:a700f83:       list.add(null);
1:a700f83:     }
1:a700f83:     return list;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object setStructFieldData(Object struct, StructField field, Object fieldValue) {
1:a700f83:     final ArrayList<Object> list = (ArrayList<Object>) struct;
1:a700f83:     list.set(((StructFieldImpl) field).getIndex(), fieldValue);
1:a700f83:     return list;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public boolean equals(Object obj) {
1:a700f83:     if (obj == null) {
2:a700f83:       return false;
1:a700f83:     }
1:a700f83:     if (getClass() != obj.getClass()) {
1:a700f83:       return false;
1:a700f83:     }
1:a700f83:     final CarbonObjectInspector other = (CarbonObjectInspector) obj;
1:d408a8d:     return !(this.typeInfo != other.typeInfo && (this.typeInfo == null || !this.typeInfo
1:d408a8d:         .equals(other.typeInfo)));
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public int hashCode() {
1:a700f83:     int hash = 5;
1:a700f83:     hash = 29 * hash + (this.typeInfo != null ? this.typeInfo.hashCode() : 0);
1:a700f83:     return hash;
1:a700f83:   }
1:a700f83: 
1:2d24e18:   private static class StructFieldImpl implements StructField {
1:a700f83: 
1:a700f83:     private final String name;
1:a700f83:     private final ObjectInspector inspector;
1:a700f83:     private final int index;
1:a700f83: 
1:a700f83:     public StructFieldImpl(final String name, final ObjectInspector inspector, final int index) {
1:a700f83:       this.name = name;
1:a700f83:       this.inspector = inspector;
1:a700f83:       this.index = index;
1:a700f83:     }
1:a700f83: 
1:d408a8d:     @Override public String getFieldComment() {
1:a700f83:       return "";
1:a700f83:     }
1:a700f83: 
1:d408a8d:     @Override public String getFieldName() {
1:a700f83:       return name;
1:a700f83:     }
1:a700f83: 
1:a700f83:     public int getIndex() {
1:a700f83:       return index;
1:a700f83:     }
1:a700f83: 
1:d408a8d:     @Override public ObjectInspector getFieldObjectInspector() {
1:a700f83:       return inspector;
1:a700f83:     }
1:a700f83: 
1:d408a8d:     @Override public int getFieldID() {
1:a700f83:       return index;
1:a700f83:     }
1:a700f83:   }
1:a700f83: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:2d24e18
/////////////////////////////////////////////////////////////////////////
1:   private static class StructFieldImpl implements StructField {
author:chenliang613
-------------------------------------------------------------------------------
commit:d408a8d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: class CarbonObjectInspector extends SettableStructObjectInspector {
1:     List<String> fieldNames = rowTypeInfo.getAllStructFieldNames();
1:     List<TypeInfo> fieldInfos = rowTypeInfo.getAllStructFieldTypeInfos();
/////////////////////////////////////////////////////////////////////////
1:   private ObjectInspector getObjectInspector(final TypeInfo typeInfo) {
/////////////////////////////////////////////////////////////////////////
1:       return PrimitiveObjectInspectorFactory
1:           .getPrimitiveWritableObjectInspector((DecimalTypeInfo) typeInfo);
/////////////////////////////////////////////////////////////////////////
1:     } else if (((CharTypeInfo) typeInfo).getPrimitiveCategory().name().equals("CHAR")) {
1:   @Override public Category getCategory() {
1:   @Override public String getTypeName() {
1:   @Override public List<? extends StructField> getAllStructFieldRefs() {
1:   @Override public Object getStructFieldData(final Object data, final StructField fieldRef) {
/////////////////////////////////////////////////////////////////////////
1:     int listSize = isArray ? ((Object[]) data).length : ((List) data).size();
1:     int fieldID = fieldRef.getFieldID();
1:     return fieldID >= listSize ?
1:         null :
1:         (isArray ? ((Object[]) data)[fieldID] : ((List) data).get(fieldID));
1:   @Override public StructField getStructFieldRef(final String name) {
1:   @Override public List<Object> getStructFieldsDataAsList(final Object data) {
/////////////////////////////////////////////////////////////////////////
1:   @Override public Object create() {
/////////////////////////////////////////////////////////////////////////
1:   @Override public Object setStructFieldData(Object struct, StructField field, Object fieldValue) {
1:   @Override public boolean equals(Object obj) {
/////////////////////////////////////////////////////////////////////////
1:     return !(this.typeInfo != other.typeInfo && (this.typeInfo == null || !this.typeInfo
1:         .equals(other.typeInfo)));
1:   @Override public int hashCode() {
/////////////////////////////////////////////////////////////////////////
1:     @Override public String getFieldComment() {
1:     @Override public String getFieldName() {
/////////////////////////////////////////////////////////////////////////
1:     @Override public ObjectInspector getFieldObjectInspector() {
1:     @Override public int getFieldID() {
author:anubhav100
-------------------------------------------------------------------------------
commit:5ff2c50
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.hive.serde2.typeinfo.CharTypeInfo;
/////////////////////////////////////////////////////////////////////////
0:           (DecimalTypeInfo) typeInfo);
/////////////////////////////////////////////////////////////////////////
0:     } else if (((CharTypeInfo) typeInfo).getPrimitiveCategory()
0:         .name().equals("CHAR")) {
1:       return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
/////////////////////////////////////////////////////////////////////////
0:           (isArray ? ((Object[]) ((Object[]) data))[fieldID] : ((List) data).get(fieldID));
author:cenyuhai
-------------------------------------------------------------------------------
commit:a700f83
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.hive;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.List;
1: 
1: 
1: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.SettableStructObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.StructField;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
1: import org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
1: import org.apache.hadoop.io.ArrayWritable;
1: 
0: public class CarbonObjectInspector extends SettableStructObjectInspector {
1:   private final TypeInfo typeInfo;
0:   private final List<TypeInfo> fieldInfos;
0:   private final List<String> fieldNames;
1:   private final List<StructField> fields;
1:   private final HashMap<String, StructFieldImpl> fieldsByName;
1: 
1:   public CarbonObjectInspector(final StructTypeInfo rowTypeInfo) {
1: 
1:     typeInfo = rowTypeInfo;
0:     fieldNames = rowTypeInfo.getAllStructFieldNames();
0:     fieldInfos = rowTypeInfo.getAllStructFieldTypeInfos();
1:     fields = new ArrayList<StructField>(fieldNames.size());
1:     fieldsByName = new HashMap<String, StructFieldImpl>();
1: 
1:     for (int i = 0; i < fieldNames.size(); ++i) {
1:       final String name = fieldNames.get(i);
1:       final TypeInfo fieldInfo = fieldInfos.get(i);
1: 
1:       final StructFieldImpl field = new StructFieldImpl(name, getObjectInspector(fieldInfo), i);
1:       fields.add(field);
1:       fieldsByName.put(name, field);
1:     }
1:   }
1: 
0:   public ObjectInspector getObjectInspector(final TypeInfo typeInfo) {
1:     if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
1:     } else if (typeInfo.equals(TypeInfoFactory.intTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableIntObjectInspector;
1:     } else if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableLongObjectInspector;
1:     } else if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableStringObjectInspector;
1:     } else if (typeInfo instanceof DecimalTypeInfo) {
0:       return PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(
0:         (DecimalTypeInfo) typeInfo);
1:     } else if (typeInfo.getCategory().equals(Category.STRUCT)) {
1:       return new CarbonObjectInspector((StructTypeInfo) typeInfo);
1:     } else if (typeInfo.getCategory().equals(Category.LIST)) {
1:       final TypeInfo subTypeInfo = ((ListTypeInfo) typeInfo).getListElementTypeInfo();
1:       return new CarbonArrayInspector(getObjectInspector(subTypeInfo));
1:     } else if (typeInfo.equals(TypeInfoFactory.shortTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableShortObjectInspector;
1:     } else if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;
1:     } else if (typeInfo.equals(TypeInfoFactory.dateTypeInfo)) {
1:       return PrimitiveObjectInspectorFactory.writableDateObjectInspector;
1:     } else {
1:       throw new UnsupportedOperationException("Unknown field type: " + typeInfo);
1:     }
1:   }
1: 
0:   @Override
0:   public Category getCategory() {
1:     return Category.STRUCT;
1:   }
1: 
0:   @Override
0:   public String getTypeName() {
1:     return typeInfo.getTypeName();
1:   }
1: 
0:   @Override
0:   public List<? extends StructField> getAllStructFieldRefs() {
1:     return fields;
1:   }
1: 
0:   @Override
0:   public Object getStructFieldData(final Object data, final StructField fieldRef) {
1:     if (data == null) {
1:       return null;
1:     }
1: 
1:     if (data instanceof ArrayWritable) {
1:       final ArrayWritable arr = (ArrayWritable) data;
1:       return arr.get()[((StructFieldImpl) fieldRef).getIndex()];
1:     }
1: 
1:     boolean isArray = !(data instanceof List);
0:     if (!isArray && !(data instanceof List)) {
0:       return data;
1:     } else {
0:       int listSize = isArray ? ((Object[]) ((Object[]) data)).length : ((List) data).size();
0:       int fieldID = fieldRef.getFieldID();
0:       return fieldID >= listSize ? null :
0:         (isArray ? ((Object[]) ((Object[]) data))[fieldID] : ((List) data).get(fieldID));
1:     }
1:   }
1: 
0:   @Override
0:   public StructField getStructFieldRef(final String name) {
1:     return fieldsByName.get(name);
1:   }
1: 
0:   @Override
0:   public List<Object> getStructFieldsDataAsList(final Object data) {
1:     if (data == null) {
1:       return null;
1:     }
1: 
1:     if (data instanceof ArrayWritable) {
1:       final ArrayWritable arr = (ArrayWritable) data;
1:       final Object[] arrWritable = arr.get();
1:       return new ArrayList<Object>(Arrays.asList(arrWritable));
1:     }
1: 
1:     throw new UnsupportedOperationException("Cannot inspect " + data.getClass().getCanonicalName());
1:   }
1: 
0:   @Override
0:   public Object create() {
1:     final ArrayList<Object> list = new ArrayList<Object>(fields.size());
1:     for (int i = 0; i < fields.size(); ++i) {
1:       list.add(null);
1:     }
1:     return list;
1:   }
1: 
0:   @Override
0:   public Object setStructFieldData(Object struct, StructField field, Object fieldValue) {
1:     final ArrayList<Object> list = (ArrayList<Object>) struct;
1:     list.set(((StructFieldImpl) field).getIndex(), fieldValue);
1:     return list;
1:   }
1: 
0:   @Override
0:   public boolean equals(Object obj) {
1:     if (obj == null) {
1:       return false;
1:     }
1:     if (getClass() != obj.getClass()) {
1:       return false;
1:     }
1:     final CarbonObjectInspector other = (CarbonObjectInspector) obj;
0:     if (this.typeInfo != other.typeInfo &&
0:         (this.typeInfo == null || !this.typeInfo.equals(other.typeInfo))) {
1:       return false;
1:     }
0:     return true;
1:   }
1: 
0:   @Override
0:   public int hashCode() {
1:     int hash = 5;
1:     hash = 29 * hash + (this.typeInfo != null ? this.typeInfo.hashCode() : 0);
1:     return hash;
1:   }
1: 
0:   class StructFieldImpl implements StructField {
1: 
1:     private final String name;
1:     private final ObjectInspector inspector;
1:     private final int index;
1: 
1:     public StructFieldImpl(final String name, final ObjectInspector inspector, final int index) {
1:       this.name = name;
1:       this.inspector = inspector;
1:       this.index = index;
1:     }
1: 
0:     @Override
0:     public String getFieldComment() {
1:       return "";
1:     }
1: 
0:     @Override
0:     public String getFieldName() {
1:       return name;
1:     }
1: 
1:     public int getIndex() {
1:       return index;
1:     }
1: 
0:     @Override
0:     public ObjectInspector getFieldObjectInspector() {
1:       return inspector;
1:     }
1: 
0:     @Override
0:     public int getFieldID() {
1:       return index;
1:     }
1:   }
1: }
============================================================================