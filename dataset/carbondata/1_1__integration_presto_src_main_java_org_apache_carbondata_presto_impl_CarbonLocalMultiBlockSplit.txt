1:01b48fc: /*
1:01b48fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:01b48fc:  * contributor license agreements.  See the NOTICE file distributed with
1:01b48fc:  * this work for additional information regarding copyright ownership.
1:01b48fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:01b48fc:  * (the "License"); you may not use this file except in compliance with
1:01b48fc:  * the License.  You may obtain a copy of the License at
1:01b48fc:  *
1:01b48fc:  *    http://www.apache.org/licenses/LICENSE-2.0
1:01b48fc:  *
1:01b48fc:  * Unless required by applicable law or agreed to in writing, software
1:01b48fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01b48fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01b48fc:  * See the License for the specific language governing permissions and
1:01b48fc:  * limitations under the License.
1:01b48fc:  */
1:01b48fc: 
1:01b48fc: package org.apache.carbondata.presto.impl;
1:01b48fc: 
1:01b48fc: import java.util.List;
1:01b48fc: import java.util.stream.Collectors;
1:01b48fc: 
1:01b48fc: import org.apache.carbondata.core.statusmanager.FileFormat;
1:01b48fc: import org.apache.carbondata.hadoop.CarbonInputSplit;
1:01b48fc: import org.apache.carbondata.hadoop.CarbonMultiBlockSplit;
1:01b48fc: 
1:01b48fc: import com.fasterxml.jackson.annotation.JsonCreator;
1:01b48fc: import com.fasterxml.jackson.annotation.JsonProperty;
1:01b48fc: 
1:01b48fc: /**
1:01b48fc:  * CarbonLocalInputSplit represents a block, it contains a set of blocklet.
1:01b48fc:  */
1:01b48fc: public class CarbonLocalMultiBlockSplit {
1:01b48fc: 
1:01b48fc:   private static final long serialVersionUID = 3520344046772190207L;
1:01b48fc: 
1:01b48fc:   /*
1:01b48fc:   * Splits (HDFS Blocks) for task to scan.
1:01b48fc:   */
1:01b48fc:   private List<CarbonLocalInputSplit> splitList;
1:01b48fc: 
1:01b48fc:   /*
1:01b48fc:    * The locations of all wrapped splits
1:01b48fc:    */
1:01b48fc:   private String[] locations;
1:01b48fc: 
1:01b48fc:   private FileFormat fileFormat = FileFormat.COLUMNAR_V3;
1:01b48fc: 
1:01b48fc:   private long length;
1:01b48fc: 
1:01b48fc:   @JsonProperty public long getLength() {
1:01b48fc:     return length;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   @JsonProperty public String[] getLocations() {
1:01b48fc:     return locations;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   @JsonProperty public List<CarbonLocalInputSplit> getSplitList() {
1:01b48fc:     return splitList;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   @JsonProperty public FileFormat getFileFormat() {
1:01b48fc:     return fileFormat;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   @JsonCreator public CarbonLocalMultiBlockSplit(
1:01b48fc:       @JsonProperty("splitList") List<CarbonLocalInputSplit> splitList,
1:01b48fc:       @JsonProperty("locations") String[] locations) {
1:01b48fc:     this.splitList = splitList;
1:01b48fc:     this.locations = locations;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc:   public static CarbonMultiBlockSplit convertSplit(
1:01b48fc:       CarbonLocalMultiBlockSplit carbonLocalMultiBlockSplit) {
1:01b48fc:     List<CarbonInputSplit> carbonInputSplitList =
1:01b48fc:         carbonLocalMultiBlockSplit.getSplitList().stream().map(CarbonLocalInputSplit::convertSplit)
1:01b48fc:             .collect(Collectors.toList());
1:01b48fc: 
1:01b48fc:     CarbonMultiBlockSplit carbonMultiBlockSplit =
1:01b48fc:         new CarbonMultiBlockSplit(carbonInputSplitList, carbonLocalMultiBlockSplit.getLocations());
1:01b48fc: 
1:01b48fc:     return carbonMultiBlockSplit;
1:01b48fc:   }
1:01b48fc: 
1:01b48fc: }
============================================================================
author:Bhavya
-------------------------------------------------------------------------------
commit:01b48fc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.impl;
1: 
1: import java.util.List;
1: import java.util.stream.Collectors;
1: 
1: import org.apache.carbondata.core.statusmanager.FileFormat;
1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1: import org.apache.carbondata.hadoop.CarbonMultiBlockSplit;
1: 
1: import com.fasterxml.jackson.annotation.JsonCreator;
1: import com.fasterxml.jackson.annotation.JsonProperty;
1: 
1: /**
1:  * CarbonLocalInputSplit represents a block, it contains a set of blocklet.
1:  */
1: public class CarbonLocalMultiBlockSplit {
1: 
1:   private static final long serialVersionUID = 3520344046772190207L;
1: 
1:   /*
1:   * Splits (HDFS Blocks) for task to scan.
1:   */
1:   private List<CarbonLocalInputSplit> splitList;
1: 
1:   /*
1:    * The locations of all wrapped splits
1:    */
1:   private String[] locations;
1: 
1:   private FileFormat fileFormat = FileFormat.COLUMNAR_V3;
1: 
1:   private long length;
1: 
1:   @JsonProperty public long getLength() {
1:     return length;
1:   }
1: 
1:   @JsonProperty public String[] getLocations() {
1:     return locations;
1:   }
1: 
1:   @JsonProperty public List<CarbonLocalInputSplit> getSplitList() {
1:     return splitList;
1:   }
1: 
1:   @JsonProperty public FileFormat getFileFormat() {
1:     return fileFormat;
1:   }
1: 
1:   @JsonCreator public CarbonLocalMultiBlockSplit(
1:       @JsonProperty("splitList") List<CarbonLocalInputSplit> splitList,
1:       @JsonProperty("locations") String[] locations) {
1:     this.splitList = splitList;
1:     this.locations = locations;
1:   }
1: 
1:   public static CarbonMultiBlockSplit convertSplit(
1:       CarbonLocalMultiBlockSplit carbonLocalMultiBlockSplit) {
1:     List<CarbonInputSplit> carbonInputSplitList =
1:         carbonLocalMultiBlockSplit.getSplitList().stream().map(CarbonLocalInputSplit::convertSplit)
1:             .collect(Collectors.toList());
1: 
1:     CarbonMultiBlockSplit carbonMultiBlockSplit =
1:         new CarbonMultiBlockSplit(carbonInputSplitList, carbonLocalMultiBlockSplit.getLocations());
1: 
1:     return carbonMultiBlockSplit;
1:   }
1: 
1: }
============================================================================