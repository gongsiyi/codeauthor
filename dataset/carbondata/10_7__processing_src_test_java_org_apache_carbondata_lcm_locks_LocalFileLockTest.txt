1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.lcm.locks;
2:cd6a4ff: 
1:fce12a8: import java.io.File;
1:cb10d03: import java.lang.reflect.Field;
1:cb10d03: import java.util.UUID;
1:fce12a8: 
1:cb10d03: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cb10d03: import org.apache.carbondata.core.locks.CarbonLockFactory;
1:cb10d03: import org.apache.carbondata.core.locks.ICarbonLock;
1:1155d4d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:ce09aaa: import org.apache.carbondata.core.locks.LocalFileLock;
1:ce09aaa: import org.apache.carbondata.core.locks.LockUsage;
1:fce12a8: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: import org.junit.After;
1:e6b6090: import org.junit.Assert;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Test class to test the functionality of the local file locking.
1:cd6a4ff:  */
1:cd6a4ff: public class LocalFileLockTest {
1:cd6a4ff: 
1:cb10d03:   private  String rootPath;
1:cb10d03: 
1:cb10d03:   private Class<?> secretClass = CarbonLockFactory.class;
1:cb10d03: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws java.lang.Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cb10d03:     rootPath = new File(this.getClass().getResource("/").getPath()
1:fce12a8:         + "../../..").getCanonicalPath();
1:fce12a8:     String storeLocation = rootPath + "/target/store";
1:fce12a8:     CarbonProperties.getInstance()
1:fce12a8:         .addProperty("carbon.storelocation", storeLocation);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @throws java.lang.Exception
1:cd6a4ff:    */
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cb10d03:     Field f = secretClass.getDeclaredField("lockPath");
1:cb10d03:     f.setAccessible(true);
1:cb10d03:     f.set(secretClass, "");
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Test public void testingLocalFileLockingByAcquiring2Locks() {
1:cd6a4ff: 
1:1155d4d:     AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier
1:1155d4d:         .from(CarbonProperties.getInstance().getProperty("carbon.storelocation"), "databaseName",
1:cb10d03:             "tableName", UUID.randomUUID().toString());
1:cd6a4ff:     LocalFileLock localLock1 =
1:cb10d03:         new LocalFileLock(absoluteTableIdentifier.getTablePath(),
1:cd6a4ff:             LockUsage.METADATA_LOCK);
1:cd6a4ff:     Assert.assertTrue(localLock1.lock());
1:cd6a4ff:     LocalFileLock localLock2 =
1:cb10d03:         new LocalFileLock(absoluteTableIdentifier.getTablePath(),
1:cd6a4ff:             LockUsage.METADATA_LOCK);
1:cd6a4ff:     Assert.assertTrue(!localLock2.lock());
1:cd6a4ff: 
1:cd6a4ff:     Assert.assertTrue(localLock1.unlock());
1:cd6a4ff:     Assert.assertTrue(localLock2.lock());
1:859d71c:     Assert.assertTrue(localLock2.unlock());
1:cd6a4ff:   }
1:cd6a4ff: 
1:cb10d03:   @Test public void testConfigurablePathForLock() throws Exception {
1:cb10d03:     try {
1:cb10d03:       Field f = secretClass.getDeclaredField("lockPath");
1:cb10d03:       f.setAccessible(true);
1:cb10d03:       f.set(secretClass, rootPath + "/target/");
1:cb10d03:       AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier
1:cb10d03:           .from(CarbonProperties.getInstance().getProperty("carbon.storelocation"), "databaseName",
1:cb10d03:               "tableName", "1");
1:cb10d03:       ICarbonLock carbonLock = CarbonLockFactory.getCarbonLockObj(absoluteTableIdentifier, LockUsage.TABLE_STATUS_LOCK);
1:cb10d03:       carbonLock.lockWithRetries();
1:cb10d03:       assert (new File(rootPath + "/target/1/LockFiles/tablestatus.lock").exists());
1:cb10d03:       assert (!new File(absoluteTableIdentifier.getTablePath() + "/LockFiles").exists());
1:cb10d03:     } finally {
1:cb10d03:       tearDown();
1:cb10d03:     }
1:cb10d03:   }
1:cb10d03: 
1:cd6a4ff: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
1: import java.util.UUID;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.locks.CarbonLockFactory;
1: import org.apache.carbondata.core.locks.ICarbonLock;
/////////////////////////////////////////////////////////////////////////
1:   private  String rootPath;
1: 
1:   private Class<?> secretClass = CarbonLockFactory.class;
1: 
1:     rootPath = new File(this.getClass().getResource("/").getPath()
/////////////////////////////////////////////////////////////////////////
1:     Field f = secretClass.getDeclaredField("lockPath");
1:     f.setAccessible(true);
1:     f.set(secretClass, "");
1:             "tableName", UUID.randomUUID().toString());
1:         new LocalFileLock(absoluteTableIdentifier.getTablePath(),
1:         new LocalFileLock(absoluteTableIdentifier.getTablePath(),
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testConfigurablePathForLock() throws Exception {
1:     try {
1:       Field f = secretClass.getDeclaredField("lockPath");
1:       f.setAccessible(true);
1:       f.set(secretClass, rootPath + "/target/");
1:       AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier
1:           .from(CarbonProperties.getInstance().getProperty("carbon.storelocation"), "databaseName",
1:               "tableName", "1");
1:       ICarbonLock carbonLock = CarbonLockFactory.getCarbonLockObj(absoluteTableIdentifier, LockUsage.TABLE_STATUS_LOCK);
1:       carbonLock.lockWithRetries();
1:       assert (new File(rootPath + "/target/1/LockFiles/tablestatus.lock").exists());
1:       assert (!new File(absoluteTableIdentifier.getTablePath() + "/LockFiles").exists());
1:     } finally {
1:       tearDown();
1:     }
1:   }
1: 
author:xuchuanyin
-------------------------------------------------------------------------------
commit:859d71c
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertTrue(localLock2.unlock());
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
/////////////////////////////////////////////////////////////////////////
1:     AbsoluteTableIdentifier absoluteTableIdentifier = AbsoluteTableIdentifier
1:         .from(CarbonProperties.getInstance().getProperty("carbon.storelocation"), "databaseName",
0:             "tableName");
0:         new LocalFileLock(absoluteTableIdentifier,
0:         new LocalFileLock(absoluteTableIdentifier,
author:chenliang613
-------------------------------------------------------------------------------
commit:fce12a8
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: 
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
0:     String rootPath = new File(this.getClass().getResource("/").getPath()
1:         + "../../..").getCanonicalPath();
1:     String storeLocation = rootPath + "/target/store";
1:     CarbonProperties.getInstance()
1:         .addProperty("carbon.storelocation", storeLocation);
author:ravipesala
-------------------------------------------------------------------------------
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.lcm.locks;
1: 
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.pentaho.di.core.util.Assert;
1: 
1: /**
1:  * Test class to test the functionality of the local file locking.
1:  *
0:  * @author Administrator
1:  */
1: public class LocalFileLockTest {
1: 
1:   /**
1:    * @throws java.lang.Exception
1:    */
1:   @Before public void setUp() throws Exception {
1:   }
1: 
1:   /**
1:    * @throws java.lang.Exception
1:    */
1:   @After public void tearDown() throws Exception {
1:   }
1: 
1:   @Test public void testingLocalFileLockingByAcquiring2Locks() {
1: 
0: 	CarbonTableIdentifier carbonTableIdentifier = new CarbonTableIdentifier("databaseName", "tableName", "tableId");
1:     LocalFileLock localLock1 =
0:         new LocalFileLock(carbonTableIdentifier,
1:             LockUsage.METADATA_LOCK);
1:     Assert.assertTrue(localLock1.lock());
1:     LocalFileLock localLock2 =
0:         new LocalFileLock(carbonTableIdentifier,
1:             LockUsage.METADATA_LOCK);
1:     Assert.assertTrue(!localLock2.lock());
1: 
1:     Assert.assertTrue(localLock1.unlock());
1:     Assert.assertTrue(localLock2.lock());
1: 
1:   }
1: 
1: }
author:Manohar
-------------------------------------------------------------------------------
commit:6650c63
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.locks.LocalFileLock;
1: import org.apache.carbondata.core.locks.LockUsage;
author:ravikiran23
-------------------------------------------------------------------------------
commit:0d42f52
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.locks.LocalFileLock;
0: import org.apache.carbondata.locks.LockUsage;
============================================================================