1:285ce72: /*
1:285ce72:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:285ce72:  * contributor license agreements.  See the NOTICE file distributed with
1:285ce72:  * this work for additional information regarding copyright ownership.
1:285ce72:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:285ce72:  * (the "License"); you may not use this file except in compliance with
1:285ce72:  * the License.  You may obtain a copy of the License at
1:285ce72:  *
1:285ce72:  *    http://www.apache.org/licenses/LICENSE-2.0
1:285ce72:  *
1:285ce72:  * Unless required by applicable law or agreed to in writing, software
1:285ce72:  * distributed under the License is distributed on an "AS IS" BASIS,
1:285ce72:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:285ce72:  * See the License for the specific language governing permissions and
1:285ce72:  * limitations under the License.
1:285ce72:  */
1:285ce72: 
1:285ce72: package org.apache.carbondata.core.util.path;
1:285ce72: 
1:285ce72: import java.io.FileNotFoundException;
1:285ce72: import java.io.IOException;
1:285ce72: 
1:285ce72: import org.apache.carbondata.common.logging.LogService;
1:285ce72: import org.apache.carbondata.common.logging.LogServiceFactory;
1:285ce72: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:285ce72: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:285ce72: import org.apache.carbondata.core.util.CarbonProperties;
1:285ce72: 
1:285ce72: import org.apache.hadoop.fs.FileSystem;
1:285ce72: import org.apache.hadoop.fs.Path;
1:285ce72: import org.apache.hadoop.fs.viewfs.ViewFileSystem;
1:285ce72: import org.apache.hadoop.hdfs.DistributedFileSystem;
1:285ce72: import org.apache.hadoop.hdfs.server.namenode.LeaseExpiredException;
1:285ce72: 
1:285ce72: /**
1:285ce72:  * Implementation for HDFS utility methods
1:285ce72:  */
1:285ce72: public class HDFSLeaseUtils {
1:285ce72: 
1:285ce72:   private static final int CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN = 1;
1:285ce72:   private static final int CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX = 50;
1:285ce72:   private static final String CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT = "5";
1:285ce72:   private static final int CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN = 1000;
1:285ce72:   private static final int CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX = 10000;
1:285ce72:   private static final String CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT = "1000";
1:285ce72: 
1:285ce72:   /**
1:285ce72:    * LOGGER
1:285ce72:    */
1:285ce72:   private static final LogService LOGGER =
1:285ce72:       LogServiceFactory.getLogService(HDFSLeaseUtils.class.getName());
1:285ce72: 
1:285ce72:   /**
1:285ce72:    * This method will validate whether the exception thrown if for lease recovery from HDFS
1:285ce72:    *
1:285ce72:    * @param message
1:285ce72:    * @return
1:285ce72:    */
1:285ce72:   public static boolean checkExceptionMessageForLeaseRecovery(String message) {
1:285ce72:     // depending on the scenario few more cases can be added for validating lease recovery exception
1:285ce72:     if (null != message && message.contains("Failed to APPEND_FILE")) {
1:285ce72:       return true;
1:285ce72:     }
1:285ce72:     return false;
1:285ce72:   }
1:285ce72: 
1:285ce72:   /**
1:285ce72:    * This method will make attempts to recover lease on a file using the
1:285ce72:    * distributed file system utility.
1:285ce72:    *
1:285ce72:    * @param filePath
1:285ce72:    * @return
1:285ce72:    * @throws IOException
1:285ce72:    */
1:285ce72:   public static boolean recoverFileLease(String filePath) throws IOException {
1:285ce72:     LOGGER.info("Trying to recover lease on file: " + filePath);
1:285ce72:     FileFactory.FileType fileType = FileFactory.getFileType(filePath);
1:285ce72:     switch (fileType) {
1:285ce72:       case ALLUXIO:
1:285ce72:       case HDFS:
1:733bb51:       case S3:
1:285ce72:         Path path = FileFactory.getPath(filePath);
1:285ce72:         FileSystem fs = FileFactory.getFileSystem(path);
1:285ce72:         return recoverLeaseOnFile(filePath, path, (DistributedFileSystem) fs);
1:285ce72:       case VIEWFS:
1:285ce72:         path = FileFactory.getPath(filePath);
1:285ce72:         fs = FileFactory.getFileSystem(path);
1:285ce72:         ViewFileSystem viewFileSystem = (ViewFileSystem) fs;
1:285ce72:         Path targetFileSystemPath = viewFileSystem.resolvePath(path);
1:285ce72:         FileSystem targetFileSystem = FileFactory.getFileSystem(targetFileSystemPath);
1:285ce72:         if (targetFileSystem instanceof DistributedFileSystem) {
1:285ce72:           return recoverLeaseOnFile(filePath, path, (DistributedFileSystem) targetFileSystem);
1:285ce72:         } else {
1:285ce72:           LOGGER.error(
1:285ce72:               "Invalid file type. Lease recovery is not supported on filesystem with file: "
1:285ce72:                   + filePath);
1:285ce72:           return false;
1:285ce72:         }
1:285ce72:       default:
1:285ce72:         LOGGER.error("Invalid file type. Lease recovery is not supported on filesystem with file: "
1:285ce72:             + filePath);
1:285ce72:         return false;
1:285ce72:     }
1:285ce72:   }
1:285ce72: 
1:285ce72:   /**
1:285ce72:    * Recovers lease on a file
1:285ce72:    *
1:285ce72:    * @param filePath
1:285ce72:    * @param path
1:285ce72:    * @param fs
1:285ce72:    * @return
1:285ce72:    * @throws IOException
1:285ce72:    */
1:285ce72:   private static boolean recoverLeaseOnFile(String filePath, Path path, DistributedFileSystem fs)
1:285ce72:       throws IOException {
1:285ce72:     int maxAttempts = getLeaseRecoveryRetryCount();
1:285ce72:     int retryInterval = getLeaseRecoveryRetryInterval();
1:285ce72:     boolean leaseRecovered = false;
1:285ce72:     IOException ioException = null;
1:285ce72:     for (int retryCount = 1; retryCount <= maxAttempts; retryCount++) {
1:285ce72:       try {
1:910d496:         leaseRecovered = fs.recoverLease(path);
1:285ce72:         if (!leaseRecovered) {
1:285ce72:           try {
1:285ce72:             LOGGER.info(
1:285ce72:                 "Failed to recover lease after attempt " + retryCount + " . Will try again after "
1:285ce72:                     + retryInterval + " ms...");
1:285ce72:             Thread.sleep(retryInterval);
1:285ce72:           } catch (InterruptedException e) {
1:285ce72:             LOGGER.error(e,
1:285ce72:                 "Interrupted exception occurred while recovering lease for file : " + filePath);
1:285ce72:           }
1:285ce72:         }
1:285ce72:       } catch (IOException e) {
1:285ce72:         if (e instanceof LeaseExpiredException && e.getMessage().contains("File does not exist")) {
1:285ce72:           LOGGER.error("The given file does not exist at path " + filePath);
1:285ce72:           throw e;
1:285ce72:         } else if (e instanceof FileNotFoundException) {
1:285ce72:           LOGGER.error("The given file does not exist at path " + filePath);
1:285ce72:           throw e;
1:285ce72:         } else {
1:285ce72:           LOGGER.error("Recover lease threw exception : " + e.getMessage());
1:285ce72:           ioException = e;
1:285ce72:         }
1:285ce72:       }
1:285ce72:       LOGGER.info("Retrying again after interval of " + retryInterval + " ms...");
1:285ce72:     }
1:285ce72:     if (leaseRecovered) {
1:285ce72:       LOGGER.info("Successfully able to recover lease on file: " + filePath);
1:285ce72:       return true;
1:285ce72:     } else {
1:285ce72:       LOGGER.error(
1:285ce72:           "Failed to recover lease on file: " + filePath + " after retrying for " + maxAttempts
1:285ce72:               + " at an interval of " + retryInterval);
1:285ce72:       if (null != ioException) {
1:285ce72:         throw ioException;
1:285ce72:       } else {
1:285ce72:         return false;
1:285ce72:       }
1:285ce72:     }
1:285ce72:   }
1:285ce72: 
1:285ce72:   private static int getLeaseRecoveryRetryCount() {
1:285ce72:     String retryMaxAttempts = CarbonProperties.getInstance()
1:285ce72:         .getProperty(CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT,
1:285ce72:             CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:285ce72:     int retryCount = 0;
1:285ce72:     try {
1:285ce72:       retryCount = Integer.parseInt(retryMaxAttempts);
1:285ce72:       if (retryCount < CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN
1:285ce72:           || retryCount > CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX) {
1:285ce72:         retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:285ce72:         LOGGER.warn(
1:285ce72:             "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT
1:285ce72:                 + " is not in allowed range. Allowed range is >="
1:285ce72:                 + CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN + " and <="
1:285ce72:                 + CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX + ". Therefore considering default value: "
1:285ce72:                 + retryCount);
1:285ce72:       }
1:285ce72:     } catch (NumberFormatException ne) {
1:285ce72:       retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:285ce72:       LOGGER.warn("value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT
1:285ce72:           + " is incorrect. Therefore considering default value: " + retryCount);
1:285ce72:     }
1:285ce72:     return retryCount;
1:285ce72:   }
1:285ce72: 
1:285ce72:   private static int getLeaseRecoveryRetryInterval() {
1:285ce72:     String retryMaxAttempts = CarbonProperties.getInstance()
1:285ce72:         .getProperty(CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL,
1:285ce72:             CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:285ce72:     int retryCount = 0;
1:285ce72:     try {
1:285ce72:       retryCount = Integer.parseInt(retryMaxAttempts);
1:285ce72:       if (retryCount < CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN
1:285ce72:           || retryCount > CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX) {
1:285ce72:         retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:285ce72:         LOGGER.warn(
1:285ce72:             "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL
1:285ce72:                 + " is not in allowed range. Allowed range is >="
1:285ce72:                 + CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN + " and <="
1:285ce72:                 + CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX
1:285ce72:                 + ". Therefore considering default value (ms): " + retryCount);
1:285ce72:       }
1:285ce72:     } catch (NumberFormatException ne) {
1:285ce72:       retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:285ce72:       LOGGER.warn(
1:285ce72:           "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL
1:285ce72:               + " is incorrect. Therefore considering default value (ms): " + retryCount);
1:285ce72:     }
1:285ce72:     return retryCount;
1:285ce72:   }
1:285ce72: 
1:285ce72: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:910d496
/////////////////////////////////////////////////////////////////////////
1:         leaseRecovered = fs.recoverLease(path);
author:Jacky Li
-------------------------------------------------------------------------------
commit:733bb51
/////////////////////////////////////////////////////////////////////////
1:       case S3:
author:manishgupta88
-------------------------------------------------------------------------------
commit:285ce72
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util.path;
1: 
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.fs.viewfs.ViewFileSystem;
1: import org.apache.hadoop.hdfs.DistributedFileSystem;
1: import org.apache.hadoop.hdfs.server.namenode.LeaseExpiredException;
1: 
1: /**
1:  * Implementation for HDFS utility methods
1:  */
1: public class HDFSLeaseUtils {
1: 
1:   private static final int CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN = 1;
1:   private static final int CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX = 50;
1:   private static final String CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT = "5";
1:   private static final int CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN = 1000;
1:   private static final int CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX = 10000;
1:   private static final String CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT = "1000";
1: 
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(HDFSLeaseUtils.class.getName());
1: 
1:   /**
1:    * This method will validate whether the exception thrown if for lease recovery from HDFS
1:    *
1:    * @param message
1:    * @return
1:    */
1:   public static boolean checkExceptionMessageForLeaseRecovery(String message) {
1:     // depending on the scenario few more cases can be added for validating lease recovery exception
1:     if (null != message && message.contains("Failed to APPEND_FILE")) {
1:       return true;
1:     }
1:     return false;
1:   }
1: 
1:   /**
1:    * This method will make attempts to recover lease on a file using the
1:    * distributed file system utility.
1:    *
1:    * @param filePath
1:    * @return
1:    * @throws IOException
1:    */
1:   public static boolean recoverFileLease(String filePath) throws IOException {
1:     LOGGER.info("Trying to recover lease on file: " + filePath);
1:     FileFactory.FileType fileType = FileFactory.getFileType(filePath);
1:     switch (fileType) {
1:       case ALLUXIO:
1:       case HDFS:
1:         Path path = FileFactory.getPath(filePath);
1:         FileSystem fs = FileFactory.getFileSystem(path);
1:         return recoverLeaseOnFile(filePath, path, (DistributedFileSystem) fs);
1:       case VIEWFS:
1:         path = FileFactory.getPath(filePath);
1:         fs = FileFactory.getFileSystem(path);
1:         ViewFileSystem viewFileSystem = (ViewFileSystem) fs;
1:         Path targetFileSystemPath = viewFileSystem.resolvePath(path);
1:         FileSystem targetFileSystem = FileFactory.getFileSystem(targetFileSystemPath);
1:         if (targetFileSystem instanceof DistributedFileSystem) {
1:           return recoverLeaseOnFile(filePath, path, (DistributedFileSystem) targetFileSystem);
1:         } else {
1:           LOGGER.error(
1:               "Invalid file type. Lease recovery is not supported on filesystem with file: "
1:                   + filePath);
1:           return false;
1:         }
1:       default:
1:         LOGGER.error("Invalid file type. Lease recovery is not supported on filesystem with file: "
1:             + filePath);
1:         return false;
1:     }
1:   }
1: 
1:   /**
1:    * Recovers lease on a file
1:    *
1:    * @param filePath
1:    * @param path
1:    * @param fs
1:    * @return
1:    * @throws IOException
1:    */
1:   private static boolean recoverLeaseOnFile(String filePath, Path path, DistributedFileSystem fs)
1:       throws IOException {
0:     DistributedFileSystem dfs = fs;
1:     int maxAttempts = getLeaseRecoveryRetryCount();
1:     int retryInterval = getLeaseRecoveryRetryInterval();
1:     boolean leaseRecovered = false;
1:     IOException ioException = null;
1:     for (int retryCount = 1; retryCount <= maxAttempts; retryCount++) {
1:       try {
0:         leaseRecovered = dfs.recoverLease(path);
1:         if (!leaseRecovered) {
1:           try {
1:             LOGGER.info(
1:                 "Failed to recover lease after attempt " + retryCount + " . Will try again after "
1:                     + retryInterval + " ms...");
1:             Thread.sleep(retryInterval);
1:           } catch (InterruptedException e) {
1:             LOGGER.error(e,
1:                 "Interrupted exception occurred while recovering lease for file : " + filePath);
1:           }
1:         }
1:       } catch (IOException e) {
1:         if (e instanceof LeaseExpiredException && e.getMessage().contains("File does not exist")) {
1:           LOGGER.error("The given file does not exist at path " + filePath);
1:           throw e;
1:         } else if (e instanceof FileNotFoundException) {
1:           LOGGER.error("The given file does not exist at path " + filePath);
1:           throw e;
1:         } else {
1:           LOGGER.error("Recover lease threw exception : " + e.getMessage());
1:           ioException = e;
1:         }
1:       }
1:       LOGGER.info("Retrying again after interval of " + retryInterval + " ms...");
1:     }
1:     if (leaseRecovered) {
1:       LOGGER.info("Successfully able to recover lease on file: " + filePath);
1:       return true;
1:     } else {
1:       LOGGER.error(
1:           "Failed to recover lease on file: " + filePath + " after retrying for " + maxAttempts
1:               + " at an interval of " + retryInterval);
1:       if (null != ioException) {
1:         throw ioException;
1:       } else {
1:         return false;
1:       }
1:     }
1:   }
1: 
1:   private static int getLeaseRecoveryRetryCount() {
1:     String retryMaxAttempts = CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT,
1:             CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:     int retryCount = 0;
1:     try {
1:       retryCount = Integer.parseInt(retryMaxAttempts);
1:       if (retryCount < CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN
1:           || retryCount > CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX) {
1:         retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:         LOGGER.warn(
1:             "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT
1:                 + " is not in allowed range. Allowed range is >="
1:                 + CARBON_LEASE_RECOVERY_RETRY_COUNT_MIN + " and <="
1:                 + CARBON_LEASE_RECOVERY_RETRY_COUNT_MAX + ". Therefore considering default value: "
1:                 + retryCount);
1:       }
1:     } catch (NumberFormatException ne) {
1:       retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_COUNT_DEFAULT);
1:       LOGGER.warn("value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_COUNT
1:           + " is incorrect. Therefore considering default value: " + retryCount);
1:     }
1:     return retryCount;
1:   }
1: 
1:   private static int getLeaseRecoveryRetryInterval() {
1:     String retryMaxAttempts = CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL,
1:             CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:     int retryCount = 0;
1:     try {
1:       retryCount = Integer.parseInt(retryMaxAttempts);
1:       if (retryCount < CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN
1:           || retryCount > CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX) {
1:         retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:         LOGGER.warn(
1:             "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL
1:                 + " is not in allowed range. Allowed range is >="
1:                 + CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MIN + " and <="
1:                 + CARBON_LEASE_RECOVERY_RETRY_INTERVAL_MAX
1:                 + ". Therefore considering default value (ms): " + retryCount);
1:       }
1:     } catch (NumberFormatException ne) {
1:       retryCount = Integer.parseInt(CARBON_LEASE_RECOVERY_RETRY_INTERVAL_DEFAULT);
1:       LOGGER.warn(
1:           "value configured for " + CarbonCommonConstants.CARBON_LEASE_RECOVERY_RETRY_INTERVAL
1:               + " is incorrect. Therefore considering default value (ms): " + retryCount);
1:     }
1:     return retryCount;
1:   }
1: 
1: }
============================================================================