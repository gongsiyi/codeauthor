1:bcef656: /*
1:bcef656:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bcef656:  * contributor license agreements.  See the NOTICE file distributed with
1:bcef656:  * this work for additional information regarding copyright ownership.
1:bcef656:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bcef656:  * (the "License"); you may not use this file except in compliance with
1:bcef656:  * the License.  You may obtain a copy of the License at
1:bcef656:  *
1:bcef656:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bcef656:  *
1:bcef656:  * Unless required by applicable law or agreed to in writing, software
1:bcef656:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bcef656:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bcef656:  * See the License for the specific language governing permissions and
1:bcef656:  * limitations under the License.
1:bcef656:  */
1:bcef656: package org.apache.spark.sql;
1:bcef656: 
1:bcef656: import org.apache.spark.memory.MemoryMode;
1:bcef656: import org.apache.spark.sql.execution.vectorized.OnHeapColumnVector;
1:bcef656: import org.apache.spark.sql.execution.vectorized.OffHeapColumnVector;
1:bcef656: import org.apache.spark.sql.execution.vectorized.WritableColumnVector;
1:bcef656: import org.apache.spark.sql.types.StructType;
1:bcef656: import org.apache.spark.sql.vectorized.ColumnarBatch;
1:bcef656: 
1:bcef656: public class ColumnVectorFactory {
1:bcef656: 
1:bcef656: 
1:bcef656:     public static WritableColumnVector[] getColumnVector(MemoryMode memMode, StructType outputSchema, int rowNums) {
1:bcef656: 
1:bcef656: 
1:bcef656:         WritableColumnVector[] writableColumnVectors = null;
1:bcef656:         switch (memMode) {
1:bcef656:             case ON_HEAP:
1:bcef656:                 writableColumnVectors = OnHeapColumnVector
1:bcef656:                         .allocateColumns(rowNums, outputSchema);
1:bcef656:                 break;
1:bcef656:             case OFF_HEAP:
1:bcef656:                 writableColumnVectors = OffHeapColumnVector
1:bcef656:                         .allocateColumns(rowNums, outputSchema);
1:bcef656:                 break;
1:bcef656:         }
1:bcef656:         return writableColumnVectors;
1:bcef656:     }
1:bcef656: }
============================================================================
author:sandeep-katta
-------------------------------------------------------------------------------
commit:74c3eb1
author:sujith71955
-------------------------------------------------------------------------------
commit:bcef656
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.spark.sql;
1: 
1: import org.apache.spark.memory.MemoryMode;
1: import org.apache.spark.sql.execution.vectorized.OnHeapColumnVector;
1: import org.apache.spark.sql.execution.vectorized.OffHeapColumnVector;
1: import org.apache.spark.sql.execution.vectorized.WritableColumnVector;
1: import org.apache.spark.sql.types.StructType;
1: import org.apache.spark.sql.vectorized.ColumnarBatch;
1: 
1: public class ColumnVectorFactory {
1: 
1: 
1:     public static WritableColumnVector[] getColumnVector(MemoryMode memMode, StructType outputSchema, int rowNums) {
1: 
1: 
1:         WritableColumnVector[] writableColumnVectors = null;
1:         switch (memMode) {
1:             case ON_HEAP:
1:                 writableColumnVectors = OnHeapColumnVector
1:                         .allocateColumns(rowNums, outputSchema);
1:                 break;
1:             case OFF_HEAP:
1:                 writableColumnVectors = OffHeapColumnVector
1:                         .allocateColumns(rowNums, outputSchema);
1:                 break;
1:         }
1:         return writableColumnVectors;
1:     }
1: }
============================================================================