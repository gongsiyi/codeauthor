1:daa6465: /*
1:daa6465:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:daa6465:  * contributor license agreements.  See the NOTICE file distributed with
1:daa6465:  * this work for additional information regarding copyright ownership.
1:daa6465:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:daa6465:  * (the "License"); you may not use this file except in compliance with
1:daa6465:  * the License.  You may obtain a copy of the License at
1:daa6465:  *
1:daa6465:  *    http://www.apache.org/licenses/LICENSE-2.0
1:daa6465:  *
1:daa6465:  * Unless required by applicable law or agreed to in writing, software
1:daa6465:  * distributed under the License is distributed on an "AS IS" BASIS,
1:daa6465:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:daa6465:  * See the License for the specific language governing permissions and
1:daa6465:  * limitations under the License.
1:daa6465:  */
2:daa6465: 
1:daa6465: package org.apache.carbondata.core.scan.model;
1:daa6465: 
1:daa6465: import java.util.ArrayList;
1:daa6465: import java.util.List;
1:daa6465: 
1:daa6465: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:daa6465: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:daa6465: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:daa6465: 
1:daa6465: /**
1:daa6465:  * Contains projection columns in the query
1:daa6465:  */
1:daa6465: public class QueryProjection {
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * List of dimensions.
1:daa6465:    * Ex : select employee_name,department_name,sum(salary) from employee, then employee_name
1:daa6465:    * and department_name are dimensions
1:daa6465:    * If there is no dimensions asked in query then it would be remained as empty.
1:daa6465:    */
1:daa6465:   private List<ProjectionDimension> dimensions =
1:daa6465:       new ArrayList<ProjectionDimension>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * List of measures.
1:daa6465:    * Ex : select employee_name,department_name,sum(salary) from employee, then sum(salary)
1:daa6465:    * would be measure.
1:daa6465:    * If there is no dimensions asked in query then it would be remained as empty.
1:daa6465:    */
1:daa6465:   private List<ProjectionMeasure> measures =
1:daa6465:       new ArrayList<ProjectionMeasure>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:daa6465:   /**
1:daa6465:    * Constructor created with database name and table name.
1:daa6465:    *
1:daa6465:    */
1:daa6465:   public QueryProjection() {
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the dimensions
1:daa6465:    */
1:daa6465:   public List<ProjectionDimension> getDimensions() {
1:daa6465:     return dimensions;
1:daa6465:   }
1:daa6465: 
1:daa6465:   public void addDimension(CarbonDimension dimension, int queryOrdinal) {
1:daa6465:     ProjectionDimension queryDimension = new ProjectionDimension(dimension);
1:daa6465:     queryDimension.setOrdinal(queryOrdinal);
1:daa6465:     this.dimensions.add(queryDimension);
1:daa6465:   }
1:daa6465: 
1:daa6465:   /**
1:daa6465:    * @return the measures
1:daa6465:    */
1:daa6465:   public List<ProjectionMeasure> getMeasures() {
1:daa6465:     return measures;
1:daa6465:   }
1:daa6465: 
1:daa6465:   public void addMeasure(CarbonMeasure measure, int queryOrdinal) {
1:daa6465:     ProjectionMeasure queryMeasure = new ProjectionMeasure(measure);
1:daa6465:     queryMeasure.setOrdinal(queryOrdinal);
1:daa6465:     this.measures.add(queryMeasure);
1:daa6465:   }
1:daa6465: 
1:daa6465: }
============================================================================
author:Indhumathi27
-------------------------------------------------------------------------------
commit:afcaecf
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.model;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1: 
1: /**
1:  * Contains projection columns in the query
1:  */
1: public class QueryProjection {
1: 
1:   /**
1:    * List of dimensions.
1:    * Ex : select employee_name,department_name,sum(salary) from employee, then employee_name
1:    * and department_name are dimensions
1:    * If there is no dimensions asked in query then it would be remained as empty.
1:    */
1:   private List<ProjectionDimension> dimensions =
1:       new ArrayList<ProjectionDimension>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1: 
1:   /**
1:    * List of measures.
1:    * Ex : select employee_name,department_name,sum(salary) from employee, then sum(salary)
1:    * would be measure.
1:    * If there is no dimensions asked in query then it would be remained as empty.
1:    */
1:   private List<ProjectionMeasure> measures =
1:       new ArrayList<ProjectionMeasure>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1: 
1:   /**
1:    * Constructor created with database name and table name.
1:    *
1:    */
1:   public QueryProjection() {
1:   }
1: 
1:   /**
1:    * @return the dimensions
1:    */
1:   public List<ProjectionDimension> getDimensions() {
1:     return dimensions;
1:   }
1: 
1:   public void addDimension(CarbonDimension dimension, int queryOrdinal) {
1:     ProjectionDimension queryDimension = new ProjectionDimension(dimension);
1:     queryDimension.setOrdinal(queryOrdinal);
1:     this.dimensions.add(queryDimension);
1:   }
1: 
1:   /**
1:    * @return the measures
1:    */
1:   public List<ProjectionMeasure> getMeasures() {
1:     return measures;
1:   }
1: 
1:   public void addMeasure(CarbonMeasure measure, int queryOrdinal) {
1:     ProjectionMeasure queryMeasure = new ProjectionMeasure(measure);
1:     queryMeasure.setOrdinal(queryOrdinal);
1:     this.measures.add(queryMeasure);
1:   }
1: 
1: }
============================================================================