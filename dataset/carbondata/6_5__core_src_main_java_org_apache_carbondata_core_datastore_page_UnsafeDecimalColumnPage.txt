1:6f20437: /*
1:6f20437:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f20437:  * contributor license agreements.  See the NOTICE file distributed with
1:6f20437:  * this work for additional information regarding copyright ownership.
1:6f20437:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f20437:  * (the "License"); you may not use this file except in compliance with
1:6f20437:  * the License.  You may obtain a copy of the License at
1:6f20437:  *
1:6f20437:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6f20437:  *
1:6f20437:  * Unless required by applicable law or agreed to in writing, software
1:6f20437:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f20437:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f20437:  * See the License for the specific language governing permissions and
1:6f20437:  * limitations under the License.
1:6f20437:  */
2:6f20437: 
1:6f20437: package org.apache.carbondata.core.datastore.page;
1:6f20437: 
1:6f20437: import java.math.BigDecimal;
1:6f20437: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:6f20437: import org.apache.carbondata.core.memory.CarbonUnsafe;
1:6f20437: import org.apache.carbondata.core.memory.MemoryException;
1:6f20437: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:6f20437: import org.apache.carbondata.core.util.ByteUtil;
1:6f20437: 
1:6f20437: /**
1:6f20437:  * Represents a columnar data for decimal data type column for one page
1:6f20437:  */
1:6f20437: public class UnsafeDecimalColumnPage extends DecimalColumnPage {
1:6f20437: 
1:8f08c4a:   UnsafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize)
1:6f20437:       throws MemoryException {
1:8f08c4a:     this(columnPageEncoderMeta, pageSize, (int) (pageSize * DEFAULT_ROW_SIZE * FACTOR));
3:6f20437:   }
1:6f20437: 
1:8f08c4a:   UnsafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize, int capacity)
1:8f08c4a:       throws MemoryException {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:6f20437:     this.capacity = capacity;
2:6f20437:     initMemory();
1:6f20437:   }
1:6f20437: 
1:6f20437:   private void initMemory() throws MemoryException {
1:8f08c4a:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE ||
1:8f08c4a:         columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT ||
1:8f08c4a:         columnPageEncoderMeta.getStoreDataType() == DataTypes.INT ||
1:8f08c4a:         columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
1:8f08c4a:       int size = pageSize << columnPageEncoderMeta.getStoreDataType().getSizeBits();
1:956833e:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT_INT) {
1:956833e:       int size = pageSize * 3;
1:956833e:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
1:8f08c4a:     } else if (DataTypes.isDecimal(columnPageEncoderMeta.getStoreDataType())) {
1:956833e:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
1:8f08c4a:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE_ARRAY) {
1:f209e8e:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
1:956833e:     } else {
1:8f08c4a:       throw new UnsupportedOperationException(
1:8f08c4a:           "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:6f20437:     }
1:f209e8e:     baseAddress = memoryBlock.getBaseObject();
1:f209e8e:     baseOffset = memoryBlock.getBaseOffset();
1:6f20437:   }
1:6f20437: 
2:6f20437:   @Override
1:6f20437:   public void setBytePage(byte[] byteData) {
1:6f20437:     CarbonUnsafe.getUnsafe()
1:6f20437:         .copyMemory(byteData, CarbonUnsafe.BYTE_ARRAY_OFFSET, baseAddress, baseOffset,
1:6f20437:             byteData.length << byteBits);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setShortPage(short[] shortData) {
1:6f20437:     CarbonUnsafe.getUnsafe()
1:6f20437:         .copyMemory(shortData, CarbonUnsafe.SHORT_ARRAY_OFFSET, baseAddress, baseOffset,
1:6f20437:             shortData.length << shortBits);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setShortIntPage(byte[] shortIntData) {
1:6f20437:     CarbonUnsafe.getUnsafe()
1:6f20437:         .copyMemory(shortIntData, CarbonUnsafe.BYTE_ARRAY_OFFSET, baseAddress, baseOffset,
1:6f20437:             shortIntData.length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setIntPage(int[] intData) {
1:6f20437:     CarbonUnsafe.getUnsafe()
1:6f20437:         .copyMemory(intData, CarbonUnsafe.INT_ARRAY_OFFSET, baseAddress, baseOffset,
1:6f20437:             intData.length << intBits);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setLongPage(long[] longData) {
1:6f20437:     CarbonUnsafe.getUnsafe()
1:6f20437:         .copyMemory(longData, CarbonUnsafe.LONG_ARRAY_OFFSET, baseAddress, baseOffset,
1:6f20437:             longData.length << longBits);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setByteArrayPage(byte[][] byteArray) {
1:6f20437:     if (totalLength != 0) {
1:6f20437:       throw new IllegalStateException("page is not empty");
1:6f20437:     }
1:6f20437:     for (int i = 0; i < byteArray.length; i++) {
1:6f20437:       putBytes(i, byteArray[i]);
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void freeMemory() {
1:6f20437:     if (memoryBlock != null) {
1:6f20437:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:6f20437:       memoryBlock = null;
1:6f20437:       baseAddress = null;
1:6f20437:       baseOffset = 0;
1:8925947:       super.freeMemory();
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putByte(int rowId, byte value) {
1:7ef9164:     long offset = (long)rowId << byteBits;
1:6f20437:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset, value);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putShort(int rowId, short value) {
1:7ef9164:     long offset = (long)rowId << shortBits;
1:6f20437:     CarbonUnsafe.getUnsafe().putShort(baseAddress, baseOffset + offset, value);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putShortInt(int rowId, int value) {
1:6f20437:     byte[] data = ByteUtil.to3Bytes(value);
1:6f20437:     long offset = rowId * 3L;
1:6f20437:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset, data[0]);
1:6f20437:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset + 1, data[1]);
1:6f20437:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset + 2, data[2]);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putInt(int rowId, int value) {
1:7ef9164:     long offset = (long)rowId << intBits;
1:6f20437:     CarbonUnsafe.getUnsafe().putInt(baseAddress, baseOffset + offset, value);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putLong(int rowId, long value) {
1:7ef9164:     long offset = (long)rowId << longBits;
1:6f20437:     CarbonUnsafe.getUnsafe().putLong(baseAddress, baseOffset + offset, value);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putBytesAtRow(int rowId, byte[] bytes) {
1:6f20437:     putBytes(rowId, bytes, 0, bytes.length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:6f20437:     try {
1:6f20437:       ensureMemory(length);
1:6f20437:     } catch (MemoryException e) {
1:6f20437:       throw new RuntimeException(e);
1:6f20437:     }
1:6f20437:     CarbonUnsafe.getUnsafe().copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET + offset, baseAddress,
1:8925947:         baseOffset + rowOffset.getInt(rowId), length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putDecimal(int rowId, BigDecimal decimal) {
1:6f20437:     switch (decimalConverter.getDecimalConverterType()) {
1:6f20437:       case DECIMAL_INT:
1:6f20437:         putInt(rowId, (int) decimalConverter.convert(decimal));
9:6f20437:         break;
1:6f20437:       case DECIMAL_LONG:
1:6f20437:         putLong(rowId, (long) decimalConverter.convert(decimal));
1:6f20437:         break;
3:6f20437:       default:
1:6f20437:         putBytes(rowId, (byte[]) decimalConverter.convert(decimal));
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte getByte(int rowId) {
1:7ef9164:     long offset = (long)rowId << byteBits;
1:6f20437:     return CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte[] getBytes(int rowId) {
1:8925947:     int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:956833e:     byte[] bytes = new byte[length];
1:8925947:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
1:6f20437:         bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:6f20437:     return bytes;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public short getShort(int rowId) {
1:7ef9164:     long offset = (long) rowId << shortBits;
1:6f20437:     return CarbonUnsafe.getUnsafe().getShort(baseAddress, baseOffset + offset);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public int getShortInt(int rowId) {
1:6f20437:     long offset = rowId * 3L;
1:6f20437:     byte[] data = new byte[3];
1:6f20437:     data[0] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset);
1:6f20437:     data[1] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset + 1);
1:6f20437:     data[2] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset + 2);
1:6f20437:     return ByteUtil.valueOf3Bytes(data, 0);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public int getInt(int rowId) {
1:7ef9164:     long offset = (long)rowId << intBits;
1:6f20437:     return CarbonUnsafe.getUnsafe().getInt(baseAddress, baseOffset + offset);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public long getLong(int rowId) {
1:7ef9164:     long offset = (long) rowId << longBits;
1:6f20437:     return CarbonUnsafe.getUnsafe().getLong(baseAddress, baseOffset + offset);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
1:8925947:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId), dest,
1:6f20437:         CarbonUnsafe.BYTE_ARRAY_OFFSET + destOffset, length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void convertValue(ColumnPageValueConverter codec) {
1:6f20437:     convertValueForDecimalType(codec);
1:6f20437:   }
1:6f20437: 
1:6f20437:   private void convertValueForDecimalType(ColumnPageValueConverter codec) {
1:6f20437:     switch (decimalConverter.getDecimalConverterType()) {
1:6f20437:       case DECIMAL_INT:
1:6f20437:         for (int i = 0; i < pageSize; i++) {
1:7ef9164:           long offset = (long)i << intBits;
1:6f20437:           codec.encode(i, CarbonUnsafe.getUnsafe().getInt(baseAddress, baseOffset + offset));
1:6f20437:         }
1:6f20437:         break;
1:6f20437:       case DECIMAL_LONG:
1:6f20437:         for (int i = 0; i < pageSize; i++) {
1:7ef9164:           long offset = (long)i << longBits;
1:6f20437:           codec.encode(i, CarbonUnsafe.getUnsafe().getLong(baseAddress, baseOffset + offset));
1:6f20437:         }
1:6f20437:         break;
1:6f20437:       default:
1:8f08c4a:         throw new UnsupportedOperationException("not support value conversion on "
1:8f08c4a:             + columnPageEncoderMeta.getStoreDataType() + " page");
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   UnsafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize)
1:     this(columnPageEncoderMeta, pageSize, (int) (pageSize * DEFAULT_ROW_SIZE * FACTOR));
1:   UnsafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize, int capacity)
1:       throws MemoryException {
1:     super(columnPageEncoderMeta, pageSize);
1:     if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE ||
1:         columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT ||
1:         columnPageEncoderMeta.getStoreDataType() == DataTypes.INT ||
1:         columnPageEncoderMeta.getStoreDataType() == DataTypes.LONG) {
1:       int size = pageSize << columnPageEncoderMeta.getStoreDataType().getSizeBits();
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.SHORT_INT) {
1:     } else if (DataTypes.isDecimal(columnPageEncoderMeta.getStoreDataType())) {
1:     } else if (columnPageEncoderMeta.getStoreDataType() == DataTypes.BYTE_ARRAY) {
1:       throw new UnsupportedOperationException(
1:           "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
/////////////////////////////////////////////////////////////////////////
1:         throw new UnsupportedOperationException("not support value conversion on "
1:             + columnPageEncoderMeta.getStoreDataType() + " page");
author:Manhua
-------------------------------------------------------------------------------
commit:7551cc6
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8925947
/////////////////////////////////////////////////////////////////////////
1:       super.freeMemory();
/////////////////////////////////////////////////////////////////////////
1:         baseOffset + rowOffset.getInt(rowId), length);
/////////////////////////////////////////////////////////////////////////
1:     int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
1:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId),
/////////////////////////////////////////////////////////////////////////
0:       int length = rowOffset.getInt(rowId + 1) - rowOffset.getInt(rowId);
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId), bytes,
/////////////////////////////////////////////////////////////////////////
1:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.getInt(rowId), dest,
commit:e710339
/////////////////////////////////////////////////////////////////////////
0:         baseOffset + rowOffset.get(rowId), length);
/////////////////////////////////////////////////////////////////////////
0:     int length = rowOffset.get(rowId + 1) - rowOffset.get(rowId);
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId),
/////////////////////////////////////////////////////////////////////////
0:       int length = rowOffset.get(rowId + 1) - rowOffset.get(rowId);
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId), bytes,
/////////////////////////////////////////////////////////////////////////
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset.get(rowId), dest,
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     long offset = (long)rowId << byteBits;
1:     long offset = (long)rowId << shortBits;
/////////////////////////////////////////////////////////////////////////
1:     long offset = (long)rowId << intBits;
1:     long offset = (long)rowId << longBits;
/////////////////////////////////////////////////////////////////////////
1:     long offset = (long)rowId << byteBits;
/////////////////////////////////////////////////////////////////////////
1:     long offset = (long) rowId << shortBits;
/////////////////////////////////////////////////////////////////////////
1:     long offset = (long)rowId << intBits;
1:     long offset = (long) rowId << longBits;
/////////////////////////////////////////////////////////////////////////
1:           long offset = (long)i << intBits;
1:           long offset = (long)i << longBits;
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0:     } else if (DataTypes.isDecimal(dataType)) {
0:     } else if (dataType == DataTypes.BYTE_ARRAY) {
1:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
1:     baseAddress = memoryBlock.getBaseObject();
1:     baseOffset = memoryBlock.getBaseOffset();
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.BYTE ||
0:         dataType == DataTypes.SHORT ||
0:         dataType == DataTypes.INT ||
0:         dataType == DataTypes.LONG) {
0:       int size = pageSize << dataType.getSizeBits();
1:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
0:       baseAddress = memoryBlock.getBaseObject();
0:       baseOffset = memoryBlock.getBaseOffset();
0:     } else if (dataType == DataTypes.SHORT_INT) {
1:       int size = pageSize * 3;
1:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
0:       baseAddress = memoryBlock.getBaseObject();
0:       baseOffset = memoryBlock.getBaseOffset();
0:     } else if (dataType == DataTypes.DECIMAL) {
1:       memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
0:       baseAddress = memoryBlock.getBaseObject();
0:       baseOffset = memoryBlock.getBaseOffset();
1:     } else {
0:       throw new UnsupportedOperationException("invalid data type: " + dataType);
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.BYTE) {
0:       value = getByte(rowId);
0:     } else if (dataType == DataTypes.SHORT) {
0:       value = getShort(rowId);
0:     } else if (dataType == DataTypes.SHORT_INT) {
0:       value = getShortInt(rowId);
0:     } else if (dataType == DataTypes.INT) {
0:       value = getInt(rowId);
0:     } else if (dataType == DataTypes.LONG) {
0:       value = getLong(rowId);
0:     } else {
0:       int length = rowOffset[rowId + 1] - rowOffset[rowId];
1:       byte[] bytes = new byte[length];
0:       CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId], bytes,
0:           CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
0:       return decimalConverter.getDecimal(bytes);
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.math.BigDecimal;
1: 
0: import org.apache.carbondata.core.datastore.TableSpec;
1: import org.apache.carbondata.core.memory.CarbonUnsafe;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.memory.UnsafeMemoryManager;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Represents a columnar data for decimal data type column for one page
1:  */
1: public class UnsafeDecimalColumnPage extends DecimalColumnPage {
1: 
0:   UnsafeDecimalColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize)
1:       throws MemoryException {
0:     super(columnSpec, dataType, pageSize);
0:     capacity = (int) (pageSize * DEFAULT_ROW_SIZE * FACTOR);
1:     initMemory();
1:   }
1: 
0:   UnsafeDecimalColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize,
0:       int capacity) throws MemoryException {
0:     super(columnSpec, dataType, pageSize);
1:     this.capacity = capacity;
1:     initMemory();
1:   }
1: 
1:   private void initMemory() throws MemoryException {
0:     switch (dataType) {
0:       case BYTE:
0:       case SHORT:
0:       case INT:
0:       case LONG:
0:         int size = pageSize << dataType.getSizeBits();
0:         memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
0:         baseAddress = memoryBlock.getBaseObject();
0:         baseOffset = memoryBlock.getBaseOffset();
1:         break;
0:       case SHORT_INT:
0:         size = pageSize * 3;
0:         memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, size);
0:         baseAddress = memoryBlock.getBaseObject();
0:         baseOffset = memoryBlock.getBaseOffset();
1:         break;
0:       case DECIMAL:
0:         memoryBlock = UnsafeMemoryManager.allocateMemoryWithRetry(taskId, (long) (capacity));
0:         baseAddress = memoryBlock.getBaseObject();
0:         baseOffset = memoryBlock.getBaseOffset();
1:         break;
1:       default:
0:         throw new UnsupportedOperationException("invalid data type: " + dataType);
1:     }
1:   }
1: 
1:   @Override
1:   public void setBytePage(byte[] byteData) {
1:     CarbonUnsafe.getUnsafe()
1:         .copyMemory(byteData, CarbonUnsafe.BYTE_ARRAY_OFFSET, baseAddress, baseOffset,
1:             byteData.length << byteBits);
1:   }
1: 
1:   @Override
1:   public void setShortPage(short[] shortData) {
1:     CarbonUnsafe.getUnsafe()
1:         .copyMemory(shortData, CarbonUnsafe.SHORT_ARRAY_OFFSET, baseAddress, baseOffset,
1:             shortData.length << shortBits);
1:   }
1: 
1:   @Override
1:   public void setShortIntPage(byte[] shortIntData) {
1:     CarbonUnsafe.getUnsafe()
1:         .copyMemory(shortIntData, CarbonUnsafe.BYTE_ARRAY_OFFSET, baseAddress, baseOffset,
1:             shortIntData.length);
1:   }
1: 
1:   @Override
1:   public void setIntPage(int[] intData) {
1:     CarbonUnsafe.getUnsafe()
1:         .copyMemory(intData, CarbonUnsafe.INT_ARRAY_OFFSET, baseAddress, baseOffset,
1:             intData.length << intBits);
1:   }
1: 
1:   @Override
1:   public void setLongPage(long[] longData) {
1:     CarbonUnsafe.getUnsafe()
1:         .copyMemory(longData, CarbonUnsafe.LONG_ARRAY_OFFSET, baseAddress, baseOffset,
1:             longData.length << longBits);
1:   }
1: 
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
1:     if (totalLength != 0) {
1:       throw new IllegalStateException("page is not empty");
1:     }
1:     for (int i = 0; i < byteArray.length; i++) {
1:       putBytes(i, byteArray[i]);
1:     }
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1:     if (memoryBlock != null) {
1:       UnsafeMemoryManager.INSTANCE.freeMemory(taskId, memoryBlock);
1:       memoryBlock = null;
1:       baseAddress = null;
1:       baseOffset = 0;
1:     }
1:   }
1: 
1:   @Override
1:   public void putByte(int rowId, byte value) {
0:     long offset = rowId << byteBits;
1:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset, value);
1:   }
1: 
1:   @Override
1:   public void putShort(int rowId, short value) {
0:     long offset = rowId << shortBits;
1:     CarbonUnsafe.getUnsafe().putShort(baseAddress, baseOffset + offset, value);
1:   }
1: 
1:   @Override
1:   public void putShortInt(int rowId, int value) {
1:     byte[] data = ByteUtil.to3Bytes(value);
1:     long offset = rowId * 3L;
1:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset, data[0]);
1:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset + 1, data[1]);
1:     CarbonUnsafe.getUnsafe().putByte(baseAddress, baseOffset + offset + 2, data[2]);
1:   }
1: 
1:   @Override
1:   public void putInt(int rowId, int value) {
0:     long offset = rowId << intBits;
1:     CarbonUnsafe.getUnsafe().putInt(baseAddress, baseOffset + offset, value);
1:   }
1: 
1:   @Override
1:   public void putLong(int rowId, long value) {
0:     long offset = rowId << longBits;
1:     CarbonUnsafe.getUnsafe().putLong(baseAddress, baseOffset + offset, value);
1:   }
1: 
1:   @Override
1:   public void putBytesAtRow(int rowId, byte[] bytes) {
1:     putBytes(rowId, bytes, 0, bytes.length);
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:     try {
1:       ensureMemory(length);
1:     } catch (MemoryException e) {
1:       throw new RuntimeException(e);
1:     }
1:     CarbonUnsafe.getUnsafe().copyMemory(bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET + offset, baseAddress,
0:         baseOffset + rowOffset[rowId], length);
1:   }
1: 
1:   @Override
1:   public void putDecimal(int rowId, BigDecimal decimal) {
1:     switch (decimalConverter.getDecimalConverterType()) {
1:       case DECIMAL_INT:
1:         putInt(rowId, (int) decimalConverter.convert(decimal));
1:         break;
1:       case DECIMAL_LONG:
1:         putLong(rowId, (long) decimalConverter.convert(decimal));
1:         break;
1:       default:
1:         putBytes(rowId, (byte[]) decimalConverter.convert(decimal));
1:     }
1:   }
1: 
1:   @Override
1:   public byte getByte(int rowId) {
0:     long offset = rowId << byteBits;
1:     return CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset);
1:   }
1: 
1:   @Override
1:   public byte[] getBytes(int rowId) {
0:     int length = rowOffset[rowId + 1] - rowOffset[rowId];
0:     byte[] bytes = new byte[length];
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId],
1:         bytes, CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
1:     return bytes;
1:   }
1: 
1:   @Override
1:   public short getShort(int rowId) {
0:     long offset = rowId << shortBits;
1:     return CarbonUnsafe.getUnsafe().getShort(baseAddress, baseOffset + offset);
1:   }
1: 
1:   @Override
1:   public int getShortInt(int rowId) {
1:     long offset = rowId * 3L;
1:     byte[] data = new byte[3];
1:     data[0] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset);
1:     data[1] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset + 1);
1:     data[2] = CarbonUnsafe.getUnsafe().getByte(baseAddress, baseOffset + offset + 2);
1:     return ByteUtil.valueOf3Bytes(data, 0);
1:   }
1: 
1:   @Override
1:   public int getInt(int rowId) {
0:     long offset = rowId << intBits;
1:     return CarbonUnsafe.getUnsafe().getInt(baseAddress, baseOffset + offset);
1:   }
1: 
1:   @Override
1:   public long getLong(int rowId) {
0:     long offset = rowId << longBits;
1:     return CarbonUnsafe.getUnsafe().getLong(baseAddress, baseOffset + offset);
1:   }
1: 
1:   @Override
0:   public BigDecimal getDecimal(int rowId) {
0:     long value;
0:     switch (dataType) {
0:       case BYTE:
0:         value = getByte(rowId);
1:         break;
0:       case SHORT:
0:         value = getShort(rowId);
1:         break;
0:       case SHORT_INT:
0:         value = getShortInt(rowId);
1:         break;
0:       case INT:
0:         value = getInt(rowId);
1:         break;
0:       case LONG:
0:         value = getLong(rowId);
1:         break;
1:       default:
0:         int length = rowOffset[rowId + 1] - rowOffset[rowId];
0:         byte[] bytes = new byte[length];
0:         CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId], bytes,
0:             CarbonUnsafe.BYTE_ARRAY_OFFSET, length);
0:         return decimalConverter.getDecimal(bytes);
1:     }
0:     return decimalConverter.getDecimal(value);
1:   }
1: 
1:   @Override
1:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
0:     CarbonUnsafe.getUnsafe().copyMemory(baseAddress, baseOffset + rowOffset[rowId], dest,
1:         CarbonUnsafe.BYTE_ARRAY_OFFSET + destOffset, length);
1:   }
1: 
1:   @Override
1:   public void convertValue(ColumnPageValueConverter codec) {
1:     convertValueForDecimalType(codec);
1:   }
1: 
1:   private void convertValueForDecimalType(ColumnPageValueConverter codec) {
1:     switch (decimalConverter.getDecimalConverterType()) {
1:       case DECIMAL_INT:
1:         for (int i = 0; i < pageSize; i++) {
0:           long offset = i << intBits;
1:           codec.encode(i, CarbonUnsafe.getUnsafe().getInt(baseAddress, baseOffset + offset));
1:         }
1:         break;
1:       case DECIMAL_LONG:
1:         for (int i = 0; i < pageSize; i++) {
0:           long offset = i << longBits;
1:           codec.encode(i, CarbonUnsafe.getUnsafe().getLong(baseAddress, baseOffset + offset));
1:         }
1:         break;
1:       default:
0:         throw new UnsupportedOperationException(
0:             "not support value conversion on " + dataType + " page");
1:     }
1:   }
1: 
1: }
============================================================================