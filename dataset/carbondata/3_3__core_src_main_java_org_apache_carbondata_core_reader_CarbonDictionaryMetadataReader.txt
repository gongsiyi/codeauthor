1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.reader;
1:cd6a4ff: 
1:cd6a4ff: import java.io.Closeable;
1:cd6a4ff: import java.io.IOException;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * dictionary metadata reader interface which declares methods to read dictionary metadata
1:cd6a4ff:  */
1:cd6a4ff: public interface CarbonDictionaryMetadataReader extends Closeable {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read complete metadata file.
1:cd6a4ff:    * Applicable scenarios:
1:cd6a4ff:    * 1. Query execution. Whenever a query is executed then to read the dictionary file
1:cd6a4ff:    * and define the query scope first dictionary metadata has to be read first.
1:cd6a4ff:    * 2. If dictionary file is read using start and end offset then using this meta list
1:cd6a4ff:    * we can count the total number of dictionary chunks present between the 2 offsets
1:cd6a4ff:    *
1:cd6a4ff:    * @return list of all dictionary meta chunks which contains information for each segment
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   List<CarbonDictionaryColumnMetaChunk> read() throws IOException;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to read only the last entry of dictionary meta chunk.
1:cd6a4ff:    * Applicable scenarios :
1:cd6a4ff:    * 1. Global dictionary generation for incremental load. In this case only the
1:cd6a4ff:    * last dictionary chunk meta entry has to be read to calculate min, max surrogate
1:cd6a4ff:    * key and start and end offset for the new dictionary chunk.
1:cd6a4ff:    * 2. Truncate operation. While writing dictionary file in case of incremental load
1:cd6a4ff:    * dictionary file needs to be validated for any inconsistency. Here end offset of last
1:cd6a4ff:    * dictionary chunk meta is validated with file size.
1:cd6a4ff:    *
1:cd6a4ff:    * @return last segment entry for dictionary chunk
1:cd6a4ff:    * @throws IOException if an I/O error occurs
1:cd6a4ff:    */
1:cd6a4ff:   CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk() throws IOException;
1:377dee9: 
1:377dee9:   /**
1:377dee9:    * This method will be used to read the last dictionary meta chunk ending at end_Offset.
1:377dee9:    * Applicable scenarios :
1:377dee9:    * 1. When loading into LRU cache, we need to calculate the size of Object in memory,for
1:377dee9:    * this we need the number of records already loaded into LRU cache, so that we can calculate
1:377dee9:    * the memory required for incremental load
1:377dee9:    *
1:377dee9:    * @return last segment entry for dictionary chunk
1:377dee9:    * @throws IOException if an I/O error occurs
1:377dee9:    */
1:377dee9:   CarbonDictionaryColumnMetaChunk readEntryOfDictionaryMetaChunk(long end_Offset)
1:377dee9:           throws IOException;
1:cd6a4ff: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:377dee9
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This method will be used to read the last dictionary meta chunk ending at end_Offset.
1:    * Applicable scenarios :
1:    * 1. When loading into LRU cache, we need to calculate the size of Object in memory,for
1:    * this we need the number of records already loaded into LRU cache, so that we can calculate
1:    * the memory required for incremental load
1:    *
1:    * @return last segment entry for dictionary chunk
1:    * @throws IOException if an I/O error occurs
1:    */
1:   CarbonDictionaryColumnMetaChunk readEntryOfDictionaryMetaChunk(long end_Offset)
1:           throws IOException;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.reader;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.util.List;
1: 
1: /**
1:  * dictionary metadata reader interface which declares methods to read dictionary metadata
1:  */
1: public interface CarbonDictionaryMetadataReader extends Closeable {
1: 
1:   /**
1:    * This method will be used to read complete metadata file.
1:    * Applicable scenarios:
1:    * 1. Query execution. Whenever a query is executed then to read the dictionary file
1:    * and define the query scope first dictionary metadata has to be read first.
1:    * 2. If dictionary file is read using start and end offset then using this meta list
1:    * we can count the total number of dictionary chunks present between the 2 offsets
1:    *
1:    * @return list of all dictionary meta chunks which contains information for each segment
1:    * @throws IOException if an I/O error occurs
1:    */
1:   List<CarbonDictionaryColumnMetaChunk> read() throws IOException;
1: 
1:   /**
1:    * This method will be used to read only the last entry of dictionary meta chunk.
1:    * Applicable scenarios :
1:    * 1. Global dictionary generation for incremental load. In this case only the
1:    * last dictionary chunk meta entry has to be read to calculate min, max surrogate
1:    * key and start and end offset for the new dictionary chunk.
1:    * 2. Truncate operation. While writing dictionary file in case of incremental load
1:    * dictionary file needs to be validated for any inconsistency. Here end offset of last
1:    * dictionary chunk meta is validated with file size.
1:    *
1:    * @return last segment entry for dictionary chunk
1:    * @throws IOException if an I/O error occurs
1:    */
1:   CarbonDictionaryColumnMetaChunk readLastEntryOfDictionaryMetaChunk() throws IOException;
1: }
============================================================================