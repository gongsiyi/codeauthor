1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
1:c2e4eb2: 
1:cd6a4ff: package org.apache.carbondata.hadoop.util;
1:874764f: 
1:5f6a56c: import java.io.IOException;
1:4c48148: import java.text.SimpleDateFormat;
1:cd6a4ff: import java.util.List;
1:4c48148: import java.util.Locale;
8:cd6a4ff: 
1:531ecdf: import org.apache.carbondata.common.logging.LogService;
1:531ecdf: import org.apache.carbondata.common.logging.LogServiceFactory;
1:5ab0957: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:3ff574d: import org.apache.carbondata.core.constants.CarbonCommonConstantsInternal;
1:2018048: import org.apache.carbondata.core.datamap.DataMapJob;
1:2018048: import org.apache.carbondata.core.datamap.DataMapUtil;
1:3ff574d: import org.apache.carbondata.core.exception.InvalidConfigurationException;
1:3ff574d: import org.apache.carbondata.core.indexstore.PartitionSpec;
1:ce09aaa: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:3ff574d: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:3ff574d: import org.apache.carbondata.core.scan.expression.Expression;
1:3ff574d: import org.apache.carbondata.core.util.CarbonProperties;
1:3ff574d: import org.apache.carbondata.core.util.CarbonSessionInfo;
1:3ff574d: import org.apache.carbondata.core.util.ThreadLocalSessionInfo;
1:3ff574d: import org.apache.carbondata.hadoop.CarbonProjection;
1:3ff574d: import org.apache.carbondata.hadoop.api.CarbonInputFormat;
1:b681244: import org.apache.carbondata.hadoop.api.CarbonTableInputFormat;
1:cd6a4ff: 
1:5ab0957: import org.apache.hadoop.conf.Configuration;
1:5f6a56c: import org.apache.hadoop.fs.Path;
1:5f6a56c: import org.apache.hadoop.mapreduce.Job;
1:4c48148: import org.apache.hadoop.mapreduce.JobID;
1:5f6a56c: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1:cd6a4ff: 
1:531ecdf: /**
1:cd6a4ff:  * Utility class
1:531ecdf:  */
1:cd6a4ff: public class CarbonInputFormatUtil {
1:cd6a4ff: 
1:531ecdf:   /**
1:531ecdf:    * Attribute for Carbon LOGGER.
1:531ecdf:    */
1:531ecdf:   private static final LogService LOGGER =
1:531ecdf:       LogServiceFactory.getLogService(CarbonProperties.class.getName());
1:531ecdf: 
1:b681244:   public static <V> CarbonTableInputFormat<V> createCarbonInputFormat(
1:b681244:       AbsoluteTableIdentifier identifier,
1:5f6a56c:       Job job) throws IOException {
1:b681244:     CarbonTableInputFormat<V> carbonInputFormat = new CarbonTableInputFormat<>();
1:daa6465:     CarbonTableInputFormat.setDatabaseName(
1:daa6465:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getDatabaseName());
1:daa6465:     CarbonTableInputFormat.setTableName(
1:daa6465:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
1:5f6a56c:     FileInputFormat.addInputPath(job, new Path(identifier.getTablePath()));
1:531ecdf:     setDataMapJobIfConfigured(job.getConfiguration());
1:5f6a56c:     return carbonInputFormat;
1:c2e4eb2:   }
1:4c48148: 
1:874764f:   public static <V> CarbonTableInputFormat<V> createCarbonTableInputFormat(
1:874764f:       AbsoluteTableIdentifier identifier, List<String> partitionId, Job job) throws IOException {
1:874764f:     CarbonTableInputFormat<V> carbonTableInputFormat = new CarbonTableInputFormat<>();
1:daa6465:     CarbonTableInputFormat.setPartitionIdList(
1:daa6465:         job.getConfiguration(), partitionId);
1:daa6465:     CarbonTableInputFormat.setDatabaseName(
1:daa6465:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getDatabaseName());
1:daa6465:     CarbonTableInputFormat.setTableName(
1:daa6465:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
1:874764f:     FileInputFormat.addInputPath(job, new Path(identifier.getTablePath()));
1:531ecdf:     setDataMapJobIfConfigured(job.getConfiguration());
1:874764f:     return carbonTableInputFormat;
1:4c48148:   }
1:4c48148: 
1:3ff574d:   public static <V> CarbonTableInputFormat<V> createCarbonTableInputFormat(
1:3ff574d:       Job job,
1:3ff574d:       CarbonTable carbonTable,
1:3ff574d:       String[] projectionColumns,
1:3ff574d:       Expression filterExpression,
1:3ff574d:       List<PartitionSpec> partitionNames,
1:3ff574d:       DataMapJob dataMapJob) throws IOException, InvalidConfigurationException {
1:3ff574d:     Configuration conf = job.getConfiguration();
1:3ff574d:     CarbonInputFormat.setTableInfo(conf, carbonTable.getTableInfo());
1:3ff574d:     CarbonInputFormat.setDatabaseName(conf, carbonTable.getTableInfo().getDatabaseName());
1:3ff574d:     CarbonInputFormat.setTableName(conf, carbonTable.getTableInfo().getFactTable().getTableName());
1:3ff574d:     if (partitionNames != null) {
1:3ff574d:       CarbonInputFormat.setPartitionsToPrune(conf, partitionNames);
1:3ff574d:     }
1:b7b8073:     CarbonInputFormat
1:b7b8073:         .setTransactionalTable(conf, carbonTable.getTableInfo().isTransactionalTable());
1:3ff574d:     CarbonProjection columnProjection = new CarbonProjection(projectionColumns);
1:3ff574d:     return createInputFormat(conf, carbonTable.getAbsoluteTableIdentifier(),
1:3ff574d:         filterExpression, columnProjection, dataMapJob);
1:3ff574d:   }
1:3ff574d: 
1:3ff574d:   private static <V> CarbonTableInputFormat<V> createInputFormat(
1:3ff574d:       Configuration conf,
1:3ff574d:       AbsoluteTableIdentifier identifier,
1:3ff574d:       Expression filterExpression,
1:3ff574d:       CarbonProjection columnProjection,
1:3ff574d:       DataMapJob dataMapJob) throws InvalidConfigurationException, IOException {
1:3ff574d:     CarbonTableInputFormat<V> format = new CarbonTableInputFormat<>();
1:3ff574d:     CarbonInputFormat.setTablePath(
1:3ff574d:         conf,
1:3ff574d:         identifier.appendWithLocalPrefix(identifier.getTablePath()));
1:3ff574d:     CarbonInputFormat.setQuerySegment(conf, identifier);
1:3ff574d:     CarbonInputFormat.setFilterPredicates(conf, filterExpression);
1:3ff574d:     CarbonInputFormat.setColumnProjection(conf, columnProjection);
1:531ecdf:     if (dataMapJob != null) {
1:2018048:       DataMapUtil.setDataMapJob(conf, dataMapJob);
1:531ecdf:     } else {
1:531ecdf:       setDataMapJobIfConfigured(conf);
1:3ff574d:     }
1:3ff574d:     // when validate segments is disabled in thread local update it to CarbonTableInputFormat
1:3ff574d:     CarbonSessionInfo carbonSessionInfo = ThreadLocalSessionInfo.getCarbonSessionInfo();
1:3ff574d:     if (carbonSessionInfo != null) {
1:3ff574d:       String tableUniqueKey = identifier.getDatabaseName() + "." + identifier.getTableName();
1:3ff574d:       String validateInputSegmentsKey = CarbonCommonConstants.VALIDATE_CARBON_INPUT_SEGMENTS +
1:3ff574d:           tableUniqueKey;
1:3ff574d:       CarbonInputFormat.setValidateSegmentsToAccess(
1:3ff574d:           conf,
1:3ff574d:           Boolean.valueOf(carbonSessionInfo.getThreadParams().getProperty(
1:3ff574d:               validateInputSegmentsKey, "true")));
1:3ff574d:       String queryOnPreAggStreamingKey = CarbonCommonConstantsInternal.QUERY_ON_PRE_AGG_STREAMING +
1:3ff574d:           tableUniqueKey;
1:3ff574d:       boolean queryOnPreAggStreaming = Boolean.valueOf(carbonSessionInfo.getThreadParams()
1:3ff574d:           .getProperty(queryOnPreAggStreamingKey, "false"));
1:3ff574d:       String inputSegmentsKey = CarbonCommonConstants.CARBON_INPUT_SEGMENTS + tableUniqueKey;
1:3ff574d:       CarbonInputFormat.setValidateSegmentsToAccess(conf,
1:3ff574d:           Boolean.valueOf(carbonSessionInfo.getThreadParams()
1:3ff574d:               .getProperty(validateInputSegmentsKey, "true")));
1:3ff574d:       CarbonInputFormat.setQuerySegment(
1:3ff574d:           conf,
1:3ff574d:           carbonSessionInfo.getThreadParams().getProperty(
1:3ff574d:               inputSegmentsKey,
1:3ff574d:               CarbonProperties.getInstance().getProperty(inputSegmentsKey, "*")));
1:3ff574d:       if (queryOnPreAggStreaming) {
1:3ff574d:         CarbonInputFormat.setAccessStreamingSegments(conf, true);
1:3ff574d:         carbonSessionInfo.getThreadParams().removeProperty(queryOnPreAggStreamingKey);
1:3ff574d:         carbonSessionInfo.getThreadParams().removeProperty(inputSegmentsKey);
1:3ff574d:         carbonSessionInfo.getThreadParams().removeProperty(validateInputSegmentsKey);
1:3ff574d:       }
1:3ff574d:     }
1:3ff574d:     return format;
1:531ecdf:   }
1:3ff574d: 
1:531ecdf:   /**
1:531ecdf:    * This method set DataMapJob if configured
1:531ecdf:    *
1:531ecdf:    * @param conf
1:531ecdf:    * @throws IOException
1:531ecdf:    */
1:531ecdf:   public static void setDataMapJobIfConfigured(Configuration conf) throws IOException {
1:531ecdf:     String className = "org.apache.carbondata.spark.rdd.SparkDataMapJob";
1:2018048:     DataMapUtil.setDataMapJob(conf, DataMapUtil.createDataMapJob(className));
1:531ecdf:   }
1:531ecdf: 
1:4c48148:   public static String createJobTrackerID(java.util.Date date) {
1:4c48148:     return new SimpleDateFormat("yyyyMMddHHmmss", Locale.US).format(date);
1:531ecdf:   }
1:531ecdf: 
1:4c48148:   public static JobID getJobId(java.util.Date date, int batch) {
1:4c48148:     String jobtrackerID = createJobTrackerID(date);
1:4c48148:     return new JobID(jobtrackerID, batch);
1:4c48148:   }
1:5ab0957: 
1:3ff574d: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:akashrn5
-------------------------------------------------------------------------------
commit:2018048
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapJob;
1: import org.apache.carbondata.core.datamap.DataMapUtil;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       DataMapUtil.setDataMapJob(conf, dataMapJob);
/////////////////////////////////////////////////////////////////////////
1:     DataMapUtil.setDataMapJob(conf, DataMapUtil.createDataMapJob(className));
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Attribute for Carbon LOGGER.
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonProperties.class.getName());
1: 
/////////////////////////////////////////////////////////////////////////
1:     setDataMapJobIfConfigured(job.getConfiguration());
/////////////////////////////////////////////////////////////////////////
1:     setDataMapJobIfConfigured(job.getConfiguration());
/////////////////////////////////////////////////////////////////////////
1:     if (dataMapJob != null) {
1:     } else {
1:       setDataMapJobIfConfigured(conf);
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method set DataMapJob if configured
1:    *
1:    * @param conf
1:    * @throws IOException
1:    */
1:   public static void setDataMapJobIfConfigured(Configuration conf) throws IOException {
1:     String className = "org.apache.carbondata.spark.rdd.SparkDataMapJob";
0:     CarbonTableInputFormat.setDataMapJob(conf, createDataMapJob(className));
1:   }
1: 
1:   /**
0:    * Creates instance for the DataMap Job class
1:    *
0:    * @param className
0:    * @return
1:    */
0:   public static Object createDataMapJob(String className) {
0:     try {
0:       return Class.forName(className).getDeclaredConstructors()[0].newInstance();
0:     } catch (Exception e) {
0:       LOGGER.error(e);
0:       return null;
1:     }
1:   }
1: 
commit:d3a09e2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.scan.filter.TableProvider;
/////////////////////////////////////////////////////////////////////////
0:       AbsoluteTableIdentifier absoluteTableIdentifier, TableProvider tableProvider) {
0:       return filterExpressionProcessor
0:           .getFilterResolver(filterExpression, absoluteTableIdentifier, tableProvider);
author:sounakr
-------------------------------------------------------------------------------
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:     CarbonInputFormat
1:         .setTransactionalTable(conf, carbonTable.getTableInfo().isTransactionalTable());
commit:4c48148
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.mapreduce.JobID;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static String createJobTrackerID(java.util.Date date) {
1:     return new SimpleDateFormat("yyyyMMddHHmmss", Locale.US).format(date);
1:   }
1: 
1:   public static JobID getJobId(java.util.Date date, int batch) {
1:     String jobtrackerID = createJobTrackerID(date);
1:     return new JobID(jobtrackerID, batch);
1:   }
commit:c2e4eb2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.scan.filter.intf.FilterOptimizer;
0: import org.apache.carbondata.core.scan.filter.intf.FilterOptimizerBasic;
0: import org.apache.carbondata.core.scan.filter.optimizer.RangeFilterOptmizer;
/////////////////////////////////////////////////////////////////////////
1: 
0:     if (null != filterExpression) {
0:       // Optimize Filter Expression and fit RANGE filters is conditions apply.
0:       FilterOptimizer rangeFilterOptimizer =
0:           new RangeFilterOptmizer(new FilterOptimizerBasic(), filterExpression);
0:       rangeFilterOptimizer.optimizeFilter();
1:     }
author:Jacky Li
-------------------------------------------------------------------------------
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstantsInternal;
1: import org.apache.carbondata.core.exception.InvalidConfigurationException;
1: import org.apache.carbondata.core.indexstore.PartitionSpec;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.util.CarbonSessionInfo;
1: import org.apache.carbondata.core.util.ThreadLocalSessionInfo;
1: import org.apache.carbondata.hadoop.CarbonProjection;
1: import org.apache.carbondata.hadoop.api.CarbonInputFormat;
0: import org.apache.carbondata.hadoop.api.DataMapJob;
/////////////////////////////////////////////////////////////////////////
1:   public static <V> CarbonTableInputFormat<V> createCarbonTableInputFormat(
1:       Job job,
1:       CarbonTable carbonTable,
1:       String[] projectionColumns,
1:       Expression filterExpression,
1:       List<PartitionSpec> partitionNames,
1:       DataMapJob dataMapJob) throws IOException, InvalidConfigurationException {
1:     Configuration conf = job.getConfiguration();
1:     CarbonInputFormat.setTableInfo(conf, carbonTable.getTableInfo());
1:     CarbonInputFormat.setDatabaseName(conf, carbonTable.getTableInfo().getDatabaseName());
1:     CarbonInputFormat.setTableName(conf, carbonTable.getTableInfo().getFactTable().getTableName());
1:     if (partitionNames != null) {
1:       CarbonInputFormat.setPartitionsToPrune(conf, partitionNames);
1:     }
0:     CarbonInputFormat.setUnmanagedTable(conf, carbonTable.getTableInfo().isUnManagedTable());
1:     CarbonProjection columnProjection = new CarbonProjection(projectionColumns);
1:     return createInputFormat(conf, carbonTable.getAbsoluteTableIdentifier(),
1:         filterExpression, columnProjection, dataMapJob);
1:   }
1: 
1:   private static <V> CarbonTableInputFormat<V> createInputFormat(
1:       Configuration conf,
1:       AbsoluteTableIdentifier identifier,
1:       Expression filterExpression,
1:       CarbonProjection columnProjection,
1:       DataMapJob dataMapJob) throws InvalidConfigurationException, IOException {
1:     CarbonTableInputFormat<V> format = new CarbonTableInputFormat<>();
1:     CarbonInputFormat.setTablePath(
1:         conf,
1:         identifier.appendWithLocalPrefix(identifier.getTablePath()));
1:     CarbonInputFormat.setQuerySegment(conf, identifier);
1:     CarbonInputFormat.setFilterPredicates(conf, filterExpression);
1:     CarbonInputFormat.setColumnProjection(conf, columnProjection);
0:     if (dataMapJob != null &&
0:         Boolean.valueOf(CarbonProperties.getInstance().getProperty(
0:             CarbonCommonConstants.USE_DISTRIBUTED_DATAMAP,
0:             CarbonCommonConstants.USE_DISTRIBUTED_DATAMAP_DEFAULT))) {
0:       CarbonInputFormat.setDataMapJob(conf, dataMapJob);
1:     }
1:     // when validate segments is disabled in thread local update it to CarbonTableInputFormat
1:     CarbonSessionInfo carbonSessionInfo = ThreadLocalSessionInfo.getCarbonSessionInfo();
1:     if (carbonSessionInfo != null) {
1:       String tableUniqueKey = identifier.getDatabaseName() + "." + identifier.getTableName();
1:       String validateInputSegmentsKey = CarbonCommonConstants.VALIDATE_CARBON_INPUT_SEGMENTS +
1:           tableUniqueKey;
1:       CarbonInputFormat.setValidateSegmentsToAccess(
1:           conf,
1:           Boolean.valueOf(carbonSessionInfo.getThreadParams().getProperty(
1:               validateInputSegmentsKey, "true")));
1:       String queryOnPreAggStreamingKey = CarbonCommonConstantsInternal.QUERY_ON_PRE_AGG_STREAMING +
1:           tableUniqueKey;
1:       boolean queryOnPreAggStreaming = Boolean.valueOf(carbonSessionInfo.getThreadParams()
1:           .getProperty(queryOnPreAggStreamingKey, "false"));
1:       String inputSegmentsKey = CarbonCommonConstants.CARBON_INPUT_SEGMENTS + tableUniqueKey;
1:       CarbonInputFormat.setValidateSegmentsToAccess(conf,
1:           Boolean.valueOf(carbonSessionInfo.getThreadParams()
1:               .getProperty(validateInputSegmentsKey, "true")));
1:       CarbonInputFormat.setQuerySegment(
1:           conf,
1:           carbonSessionInfo.getThreadParams().getProperty(
1:               inputSegmentsKey,
1:               CarbonProperties.getInstance().getProperty(inputSegmentsKey, "*")));
1:       if (queryOnPreAggStreaming) {
1:         CarbonInputFormat.setAccessStreamingSegments(conf, true);
1:         carbonSessionInfo.getThreadParams().removeProperty(queryOnPreAggStreamingKey);
1:         carbonSessionInfo.getThreadParams().removeProperty(inputSegmentsKey);
1:         carbonSessionInfo.getThreadParams().removeProperty(validateInputSegmentsKey);
1:       }
1:     }
1:     return format;
1:   }
1: 
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:daa6465
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     CarbonTableInputFormat.setDatabaseName(
1:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getDatabaseName());
1:     CarbonTableInputFormat.setTableName(
1:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
/////////////////////////////////////////////////////////////////////////
1:     CarbonTableInputFormat.setPartitionIdList(
1:         job.getConfiguration(), partitionId);
1:     CarbonTableInputFormat.setDatabaseName(
1:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getDatabaseName());
1:     CarbonTableInputFormat.setTableName(
1:         job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
/////////////////////////////////////////////////////////////////////////
0:           new RangeFilterOptmizer(filterExpression);
commit:5fc7f06
/////////////////////////////////////////////////////////////////////////
0:     String factTableName = carbonTable.getTableName();
/////////////////////////////////////////////////////////////////////////
0:         carbonTable.getDimensionByTableName(carbonTable.getTableName());
0:         carbonTable.getMeasureByTableName(carbonTable.getTableName());
author:SangeetaGulia
-------------------------------------------------------------------------------
commit:5ab0957
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1: 
0:   public static void setS3Configurations(Configuration hadoopConf) {
0:     FileFactory.getConfiguration()
0:         .set("fs.s3a.access.key", hadoopConf.get("fs.s3a.access.key", ""));
0:     FileFactory.getConfiguration()
0:         .set("fs.s3a.secret.key", hadoopConf.get("fs.s3a.secret.key", ""));
0:     FileFactory.getConfiguration()
0:         .set("fs.s3a.endpoint", hadoopConf.get("fs.s3a.endpoint", ""));
0:     FileFactory.getConfiguration().set(CarbonCommonConstants.S3_ACCESS_KEY,
0:         hadoopConf.get(CarbonCommonConstants.S3_ACCESS_KEY, ""));
0:     FileFactory.getConfiguration().set(CarbonCommonConstants.S3_SECRET_KEY,
0:         hadoopConf.get(CarbonCommonConstants.S3_SECRET_KEY, ""));
0:     FileFactory.getConfiguration().set(CarbonCommonConstants.S3N_ACCESS_KEY,
0:         hadoopConf.get(CarbonCommonConstants.S3N_ACCESS_KEY, ""));
0:     FileFactory.getConfiguration().set(CarbonCommonConstants.S3N_SECRET_KEY,
0:         hadoopConf.get(CarbonCommonConstants.S3N_SECRET_KEY, ""));
0:   }
author:rahulforallp
-------------------------------------------------------------------------------
commit:34cb551
/////////////////////////////////////////////////////////////////////////
0:     QueryModel.processFilterExpression(carbonTable, filterExpression, isFilterDimensions,
0:         isFilterMeasures);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:     carbonInputFormat.setDatabaseName(job.getConfiguration(),
0:         identifier.getCarbonTableIdentifier().getDatabaseName());
0:     carbonInputFormat
0:         .setTableName(job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
/////////////////////////////////////////////////////////////////////////
0:     carbonTableInputFormat.setDatabaseName(job.getConfiguration(),
0:         identifier.getCarbonTableIdentifier().getDatabaseName());
0:     carbonTableInputFormat
0:         .setTableName(job.getConfiguration(), identifier.getCarbonTableIdentifier().getTableName());
author:QiangCai
-------------------------------------------------------------------------------
commit:d7393da
/////////////////////////////////////////////////////////////////////////
0:   public static void processFilterExpression(Expression filterExpression, CarbonTable carbonTable,
0:       boolean[] isFilterDimensions, boolean[] isFilterMeasures) {
0:     QueryModel.processFilterExpression(filterExpression, dimensions, measures,
0:         isFilterDimensions, isFilterMeasures);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
1:   public static <V> CarbonTableInputFormat<V> createCarbonTableInputFormat(
1:       AbsoluteTableIdentifier identifier, List<String> partitionId, Job job) throws IOException {
1:     CarbonTableInputFormat<V> carbonTableInputFormat = new CarbonTableInputFormat<>();
0:     carbonTableInputFormat.setPartitionIdList(job.getConfiguration(), partitionId);
1:     FileInputFormat.addInputPath(job, new Path(identifier.getTablePath()));
1:     return carbonTableInputFormat;
0:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.hadoop.api.CarbonTableInputFormat;
/////////////////////////////////////////////////////////////////////////
1:   public static <V> CarbonTableInputFormat<V> createCarbonInputFormat(
1:       AbsoluteTableIdentifier identifier,
1:     CarbonTableInputFormat<V> carbonInputFormat = new CarbonTableInputFormat<>();
commit:f093093
/////////////////////////////////////////////////////////////////////////
0:     if (columns != null) {
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.hadoop.util;
1: 
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.carbon.AbsoluteTableIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonMeasure;
0: import org.apache.carbondata.scan.expression.Expression;
0: import org.apache.carbondata.scan.filter.FilterExpressionProcessor;
0: import org.apache.carbondata.scan.filter.resolver.FilterResolverIntf;
0: import org.apache.carbondata.scan.model.CarbonQueryPlan;
0: import org.apache.carbondata.scan.model.QueryDimension;
0: import org.apache.carbondata.scan.model.QueryMeasure;
0: import org.apache.carbondata.scan.model.QueryModel;
1: 
0: /**
1:  * Utility class
1:  */
1: public class CarbonInputFormatUtil {
1: 
0:   public static CarbonQueryPlan createQueryPlan(CarbonTable carbonTable, String columnString) {
0:     String[] columns = null;
0:     if (columnString != null) {
0:       columns = columnString.split(",");
0:     }
0:     String factTableName = carbonTable.getFactTableName();
0:     CarbonQueryPlan plan = new CarbonQueryPlan(carbonTable.getDatabaseName(), factTableName);
0:     // fill dimensions
0:     // If columns are null, set all dimensions and measures
0:     int i = 0;
0:     List<CarbonMeasure> tableMsrs = carbonTable.getMeasureByTableName(factTableName);
0:     List<CarbonDimension> tableDims = carbonTable.getDimensionByTableName(factTableName);
0:     if (columns == null) {
0:       for (CarbonDimension dimension : tableDims) {
0:         addQueryDimension(plan, i, dimension);
0:         i++;
0:       }
0:       for (CarbonMeasure measure : tableMsrs) {
0:         addQueryMeasure(plan, i, measure);
0:         i++;
0:       }
0:     } else {
0:       for (String column : columns) {
0:         CarbonDimension dimensionByName = carbonTable.getDimensionByName(factTableName, column);
0:         if (dimensionByName != null) {
0:           addQueryDimension(plan, i, dimensionByName);
0:           i++;
0:         } else {
0:           CarbonMeasure measure = carbonTable.getMeasureByName(factTableName, column);
0:           if (measure == null) {
0:             throw new RuntimeException(column + " column not found in the table " + factTableName);
0:           }
0:           addQueryMeasure(plan, i, measure);
0:           i++;
0:         }
0:       }
0:     }
1: 
0:     plan.setLimit(-1);
0:     plan.setQueryId(System.nanoTime() + "");
0:     return plan;
0:   }
1: 
0:   private static void addQueryMeasure(CarbonQueryPlan plan, int order, CarbonMeasure measure) {
0:     QueryMeasure queryMeasure = new QueryMeasure(measure.getColName());
0:     queryMeasure.setQueryOrder(order);
0:     queryMeasure.setMeasure(measure);
0:     plan.addMeasure(queryMeasure);
0:   }
1: 
0:   private static void addQueryDimension(CarbonQueryPlan plan, int order,
0:       CarbonDimension dimension) {
0:     QueryDimension queryDimension = new QueryDimension(dimension.getColName());
0:     queryDimension.setQueryOrder(order);
0:     queryDimension.setDimension(dimension);
0:     plan.addDimension(queryDimension);
0:   }
1: 
0:   public static void processFilterExpression(Expression filterExpression, CarbonTable carbonTable) {
0:     List<CarbonDimension> dimensions =
0:         carbonTable.getDimensionByTableName(carbonTable.getFactTableName());
0:     List<CarbonMeasure> measures =
0:         carbonTable.getMeasureByTableName(carbonTable.getFactTableName());
0:     QueryModel.processFilterExpression(filterExpression, dimensions, measures);
0:   }
1: 
0:   /**
0:    * Resolve the filter expression.
1:    *
0:    * @param filterExpression
0:    * @param absoluteTableIdentifier
0:    * @return
1:    */
0:   public static FilterResolverIntf resolveFilter(Expression filterExpression,
0:       AbsoluteTableIdentifier absoluteTableIdentifier) {
0:     try {
0:       FilterExpressionProcessor filterExpressionProcessor = new FilterExpressionProcessor();
0:       //get resolved filter
0:       return filterExpressionProcessor.getFilterResolver(filterExpression, absoluteTableIdentifier);
0:     } catch (Exception e) {
0:       throw new RuntimeException("Error while resolving filter expression", e);
0:     }
0:   }
1: 
0:   public static String processPath(String path) {
0:     if (path != null && path.startsWith("file:")) {
0:       return path.substring(5, path.length());
0:     }
0:     return path;
0:   }
0: }
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
0: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
0: import org.apache.carbondata.core.scan.expression.Expression;
0: import org.apache.carbondata.core.scan.filter.FilterExpressionProcessor;
0: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
0: import org.apache.carbondata.core.scan.model.CarbonQueryPlan;
0: import org.apache.carbondata.core.scan.model.QueryDimension;
0: import org.apache.carbondata.core.scan.model.QueryMeasure;
0: import org.apache.carbondata.core.scan.model.QueryModel;
commit:18cfba8
/////////////////////////////////////////////////////////////////////////
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
commit:5f6a56c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import org.apache.carbondata.hadoop.CarbonInputFormat;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.mapreduce.Job;
1: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:   public static <V> CarbonInputFormat<V> createCarbonInputFormat(AbsoluteTableIdentifier identifier,
1:       Job job) throws IOException {
0:     CarbonInputFormat<V> carbonInputFormat = new CarbonInputFormat<>();
1:     FileInputFormat.addInputPath(job, new Path(identifier.getTablePath()));
1:     return carbonInputFormat;
0:   }
0: 
============================================================================