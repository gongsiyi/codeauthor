1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
2:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache;
1:cd6a4ff: 
2:cd6a4ff: /**
1:cd6a4ff:  * interface which declares methods which will decide whether to keep
1:cd6a4ff:  * cacheable objects in memory
1:cd6a4ff:  */
1:cd6a4ff: public interface Cacheable {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the timestamp of file based on which decision
1:cd6a4ff:    * the decision will be taken whether to read that file or not
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:54dcd8d:    */
1:cd6a4ff:   long getFileTimeStamp();
1:54dcd8d: 
1:54dcd8d:   /**
1:cd6a4ff:    * This method will return the access count for a column based on which decision will be taken
1:cd6a4ff:    * whether to keep the object in memory
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   int getAccessCount();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will return the memory size of a column
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   long getMemorySize();
1:54dcd8d: 
1:54dcd8d:   /**
1:54dcd8d:    * Method to be used for invalidating the cacheable object. API to be invoked at the time of
1:54dcd8d:    * removing the cacheable object from memory. Example at the of removing the cachebale object
1:54dcd8d:    * from LRU cache
1:54dcd8d:    */
1:54dcd8d:   void invalidate();
1:cd6a4ff: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Method to be used for invalidating the cacheable object. API to be invoked at the time of
1:    * removing the cacheable object from memory. Example at the of removing the cachebale object
1:    * from LRU cache
1:    */
1:   void invalidate();
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * Method to be used for invalidating the cacheable object. API to be invoked at the time of
0:    * removing the cacheable object from memory. Example at the of removing the cachebale object
0:    * from LRU cache
1:    */
0:   void invalidate();
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache;
1: 
1: /**
1:  * interface which declares methods which will decide whether to keep
1:  * cacheable objects in memory
1:  */
1: public interface Cacheable {
1: 
1:   /**
1:    * This method will return the timestamp of file based on which decision
1:    * the decision will be taken whether to read that file or not
1:    *
1:    * @return
1:    */
1:   long getFileTimeStamp();
1: 
1:   /**
1:    * This method will return the access count for a column based on which decision will be taken
1:    * whether to keep the object in memory
1:    *
1:    * @return
1:    */
1:   int getAccessCount();
1: 
1:   /**
1:    * This method will return the memory size of a column
1:    *
1:    * @return
1:    */
1:   long getMemorySize();
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache;
0: 
0: /**
0:  * interface which declares methods which will decide whether to keep
0:  * cacheable objects in memory
0:  */
0: public interface Cacheable {
0: 
0:   /**
0:    * This method will return the timestamp of file based on which decision
0:    * the decision will be taken whether to read that file or not
0:    *
0:    * @return
0:    */
0:   long getFileTimeStamp();
0: 
0:   /**
0:    * This method will return the access count for a column based on which decision will be taken
0:    * whether to keep the object in memory
0:    *
0:    * @return
0:    */
0:   int getAccessCount();
0: 
0:   /**
0:    * This method will return the memory size of a column
0:    *
0:    * @return
0:    */
0:   long getMemorySize();
0: }
============================================================================