1:874764f: /*
1:874764f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:874764f:  * contributor license agreements.  See the NOTICE file distributed with
1:874764f:  * this work for additional information regarding copyright ownership.
1:874764f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:874764f:  * (the "License"); you may not use this file except in compliance with
1:874764f:  * the License.  You may obtain a copy of the License at
1:874764f:  *
1:874764f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:874764f:  *
1:874764f:  * Unless required by applicable law or agreed to in writing, software
1:874764f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:874764f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:874764f:  * See the License for the specific language governing permissions and
1:874764f:  * limitations under the License.
1:874764f:  */
1:349c59c: package org.apache.carbondata.processing.partition.spliter;
1:874764f: 
1:874764f: import java.util.List;
1:874764f: 
1:874764f: import org.apache.carbondata.common.logging.LogService;
1:874764f: import org.apache.carbondata.common.logging.LogServiceFactory;
1:874764f: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:874764f: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
1:874764f: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:874764f: import org.apache.carbondata.core.datastore.row.WriteStepRowUtil;
1:874764f: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:349c59c: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:874764f: import org.apache.carbondata.processing.store.CarbonDataFileAttributes;
1:874764f: import org.apache.carbondata.processing.store.CarbonFactDataHandlerColumnar;
1:874764f: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1:874764f: import org.apache.carbondata.processing.store.CarbonFactHandler;
1:874764f: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:874764f: 
1:cb51b86: public class RowResultProcessor {
1:874764f: 
1:874764f:   private CarbonFactHandler dataHandler;
1:874764f:   private SegmentProperties segmentProperties;
1:874764f: 
1:874764f:   private static final LogService LOGGER =
1:cb51b86:       LogServiceFactory.getLogService(RowResultProcessor.class.getName());
1:874764f: 
1:874764f: 
1:cb51b86:   public RowResultProcessor(CarbonTable carbonTable, CarbonLoadModel loadModel,
1:874764f:       SegmentProperties segProp, String[] tempStoreLocation, Integer bucketId) {
1:874764f:     CarbonDataProcessorUtil.createLocations(tempStoreLocation);
1:874764f:     this.segmentProperties = segProp;
1:5fc7f06:     String tableName = carbonTable.getTableName();
1:8d8b589:     String carbonStoreLocation = CarbonDataProcessorUtil.createCarbonStoreLocation(
1:8d8b589:         loadModel.getDatabaseName(), tableName, loadModel.getSegmentId());
1:874764f:     CarbonFactDataHandlerModel carbonFactDataHandlerModel =
1:874764f:         CarbonFactDataHandlerModel.getCarbonFactDataHandlerModel(loadModel, carbonTable,
1:8d3c774:             segProp, tableName, tempStoreLocation, carbonStoreLocation);
1:874764f:     CarbonDataFileAttributes carbonDataFileAttributes =
1:4430178:         new CarbonDataFileAttributes(Long.parseLong(loadModel.getTaskNo()),
1:874764f:             loadModel.getFactTimeStamp());
1:874764f:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:874764f:     carbonFactDataHandlerModel.setBucketId(bucketId);
1:874764f:     //Note: set compaction flow just to convert decimal type
1:874764f:     carbonFactDataHandlerModel.setCompactionFlow(true);
1:60dfdd3:     carbonFactDataHandlerModel.setSegmentId(loadModel.getSegmentId());
1:874764f:     dataHandler = new CarbonFactDataHandlerColumnar(carbonFactDataHandlerModel);
1:874764f:   }
1:874764f: 
1:874764f:   public boolean execute(List<Object[]> resultList) {
1:cb51b86:     boolean processStatus;
1:874764f:     boolean isDataPresent = false;
1:874764f: 
1:874764f:     try {
1:874764f:       if (!isDataPresent) {
1:874764f:         dataHandler.initialise();
1:874764f:         isDataPresent = true;
1:874764f:       }
1:874764f:       for (Object[] row: resultList) {
1:874764f:         addRow(row);
1:874764f:       }
1:874764f:       if (isDataPresent)
1:874764f:       {
1:874764f:         this.dataHandler.finish();
1:874764f:       }
1:cb51b86:       processStatus = true;
1:f911403:     } catch (CarbonDataWriterException e) {
1:874764f:       LOGGER.error(e, e.getMessage());
1:cb51b86:       LOGGER.error("Exception in executing RowResultProcessor" + e.getMessage());
1:cb51b86:       processStatus = false;
1:874764f:     } finally {
1:874764f:       try {
1:874764f:         if (isDataPresent) {
1:874764f:           this.dataHandler.closeHandler();
1:874764f:         }
1:874764f:       } catch (Exception e) {
1:cb51b86:         LOGGER.error("Exception while closing the handler in RowResultProcessor" + e.getMessage());
1:cb51b86:         processStatus = false;
1:874764f:       }
1:874764f:     }
1:cb51b86:     return processStatus;
1:874764f:   }
1:874764f: 
1:f911403:   private void addRow(Object[] carbonTuple) throws CarbonDataWriterException {
1:874764f:     CarbonRow row = WriteStepRowUtil.fromMergerRow(carbonTuple, segmentProperties);
1:874764f:     try {
1:874764f:       this.dataHandler.addDataToStore(row);
1:874764f:     } catch (CarbonDataWriterException e) {
1:f911403:       throw new CarbonDataWriterException("Exception in adding rows in RowResultProcessor", e);
1:874764f:     }
1:874764f:   }
1:874764f: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } catch (CarbonDataWriterException e) {
/////////////////////////////////////////////////////////////////////////
1:   private void addRow(Object[] carbonTuple) throws CarbonDataWriterException {
1:       throw new CarbonDataWriterException("Exception in adding rows in RowResultProcessor", e);
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:     carbonFactDataHandlerModel.setSegmentId(loadModel.getSegmentId());
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
0:     String carbonStoreLocation = CarbonDataProcessorUtil
0:         .createCarbonStoreLocation(carbonTable.getTablePath(), loadModel.getDatabaseName(),
0:             tableName, loadModel.getPartitionId(), loadModel.getSegmentId());
1:             segProp, tableName, tempStoreLocation, carbonStoreLocation);
commit:4430178
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDataFileAttributes(Long.parseLong(loadModel.getTaskNo()),
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
1:     String carbonStoreLocation = CarbonDataProcessorUtil.createCarbonStoreLocation(
1:         loadModel.getDatabaseName(), tableName, loadModel.getSegmentId());
author:Jacky Li
-------------------------------------------------------------------------------
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
0:             tableName, loadModel.getSegmentId());
commit:5fc7f06
/////////////////////////////////////////////////////////////////////////
1:     String tableName = carbonTable.getTableName();
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.partition.spliter;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
0: import org.apache.carbondata.processing.partition.spliter.exception.AlterPartitionSliceException;
author:lionelcao
-------------------------------------------------------------------------------
commit:cb51b86
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.spliter.exception.AlterPartitionSliceException;
1: public class RowResultProcessor {
1:       LogServiceFactory.getLogService(RowResultProcessor.class.getName());
1:   public RowResultProcessor(CarbonTable carbonTable, CarbonLoadModel loadModel,
/////////////////////////////////////////////////////////////////////////
1:     boolean processStatus;
/////////////////////////////////////////////////////////////////////////
1:       processStatus = true;
0:     } catch (AlterPartitionSliceException e) {
1:       LOGGER.error("Exception in executing RowResultProcessor" + e.getMessage());
1:       processStatus = false;
1:         LOGGER.error("Exception while closing the handler in RowResultProcessor" + e.getMessage());
1:         processStatus = false;
1:     return processStatus;
0:   private void addRow(Object[] carbonTuple) throws AlterPartitionSliceException {
0:       throw new AlterPartitionSliceException("Exception in adding rows in RowResultProcessor", e);
commit:874764f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.processing.spliter;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
1: import org.apache.carbondata.core.datastore.row.WriteStepRowUtil;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.processing.model.CarbonLoadModel;
0: import org.apache.carbondata.processing.spliter.exception.SliceSpliterException;
1: import org.apache.carbondata.processing.store.CarbonDataFileAttributes;
1: import org.apache.carbondata.processing.store.CarbonFactDataHandlerColumnar;
1: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1: import org.apache.carbondata.processing.store.CarbonFactHandler;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: 
0: public class RowResultSpliterProcessor {
1: 
1:   private CarbonFactHandler dataHandler;
1:   private SegmentProperties segmentProperties;
1: 
1:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(RowResultSpliterProcessor.class.getName());
1: 
1: 
0:   public RowResultSpliterProcessor(CarbonTable carbonTable, CarbonLoadModel loadModel,
1:       SegmentProperties segProp, String[] tempStoreLocation, Integer bucketId) {
1:     CarbonDataProcessorUtil.createLocations(tempStoreLocation);
1:     this.segmentProperties = segProp;
0:     String tableName = carbonTable.getFactTableName();
1:     CarbonFactDataHandlerModel carbonFactDataHandlerModel =
1:         CarbonFactDataHandlerModel.getCarbonFactDataHandlerModel(loadModel, carbonTable,
0:             segProp, tableName, tempStoreLocation);
1:     CarbonDataFileAttributes carbonDataFileAttributes =
0:         new CarbonDataFileAttributes(Integer.parseInt(loadModel.getTaskNo()),
1:             loadModel.getFactTimeStamp());
1:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:     carbonFactDataHandlerModel.setBucketId(bucketId);
1:     //Note: set compaction flow just to convert decimal type
1:     carbonFactDataHandlerModel.setCompactionFlow(true);
1:     dataHandler = new CarbonFactDataHandlerColumnar(carbonFactDataHandlerModel);
1:   }
1: 
1:   public boolean execute(List<Object[]> resultList) {
0:     boolean splitStatus;
1:     boolean isDataPresent = false;
1: 
1:     try {
1:       if (!isDataPresent) {
1:         dataHandler.initialise();
1:         isDataPresent = true;
1:       }
1:       for (Object[] row: resultList) {
1:         addRow(row);
1:       }
1:       if (isDataPresent)
1:       {
1:         this.dataHandler.finish();
1:       }
0:       splitStatus = true;
0:     } catch (SliceSpliterException e) {
1:       LOGGER.error(e, e.getMessage());
0:       LOGGER.error("Exception in split partition" + e.getMessage());
0:       splitStatus = false;
1:     } finally {
1:       try {
1:         if (isDataPresent) {
1:           this.dataHandler.closeHandler();
1:         }
1:       } catch (Exception e) {
0:         LOGGER.error("Exception while closing the handler in partition spliter" + e.getMessage());
0:         splitStatus = false;
1:       }
1:     }
0:     return splitStatus;
1:   }
1: 
0:   private void addRow(Object[] carbonTuple) throws SliceSpliterException {
1:     CarbonRow row = WriteStepRowUtil.fromMergerRow(carbonTuple, segmentProperties);
1:     try {
1:       this.dataHandler.addDataToStore(row);
1:     } catch (CarbonDataWriterException e) {
0:       throw new SliceSpliterException("Problem in writing rows when add/split the partition", e);
1:     }
1:   }
1: }
============================================================================