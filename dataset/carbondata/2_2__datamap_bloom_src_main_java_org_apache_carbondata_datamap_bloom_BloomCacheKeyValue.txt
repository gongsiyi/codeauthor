1:047c502: /*
1:047c502:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:047c502:  * contributor license agreements.  See the NOTICE file distributed with
1:047c502:  * this work for additional information regarding copyright ownership.
1:047c502:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:047c502:  * (the "License"); you may not use this file except in compliance with
1:047c502:  * the License.  You may obtain a copy of the License at
1:047c502:  *
1:047c502:  *    http://www.apache.org/licenses/LICENSE-2.0
1:047c502:  *
1:047c502:  * Unless required by applicable law or agreed to in writing, software
1:047c502:  * distributed under the License is distributed on an "AS IS" BASIS,
1:047c502:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:047c502:  * See the License for the specific language governing permissions and
1:047c502:  * limitations under the License.
1:047c502:  */
1:047c502: package org.apache.carbondata.datamap.bloom;
1:047c502: 
1:047c502: import java.io.Serializable;
1:047c502: import java.util.List;
1:047c502: import java.util.Objects;
1:047c502: 
1:047c502: import org.apache.carbondata.core.cache.Cacheable;
1:047c502: 
1:047c502: import org.apache.hadoop.util.bloom.CarbonBloomFilter;
1:047c502: 
1:047c502: /**
1:047c502:  * Key and values of bloom to keep in cache.
1:047c502:  */
1:047c502: public class BloomCacheKeyValue {
1:047c502: 
1:047c502:   public static class CacheKey implements Serializable {
1:047c502: 
1:047c502:     private static final long serialVersionUID = -1478238084352505372L;
1:047c502:     private String shardPath;
1:047c502:     private String indexColumn;
1:047c502: 
1:047c502:     CacheKey(String shardPath, String indexColumn) {
1:047c502:       this.shardPath = shardPath;
1:047c502:       this.indexColumn = indexColumn;
1:047c502:     }
1:047c502: 
1:047c502:     public String getShardPath() {
1:047c502:       return shardPath;
1:047c502:     }
1:047c502: 
1:047c502:     public String getIndexColumn() {
1:047c502:       return indexColumn;
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public String toString() {
1:047c502:       final StringBuilder sb = new StringBuilder("CacheKey{");
1:047c502:       sb.append("shardPath='").append(shardPath).append('\'');
1:047c502:       sb.append(", indexColumn='").append(indexColumn).append('\'');
1:047c502:       sb.append('}');
1:047c502:       return sb.toString();
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public boolean equals(Object o) {
1:047c502:       if (this == o) return true;
1:047c502:       if (!(o instanceof CacheKey)) return false;
1:047c502:       CacheKey cacheKey = (CacheKey) o;
1:047c502:       return Objects.equals(shardPath, cacheKey.shardPath)
1:047c502:           && Objects.equals(indexColumn, cacheKey.indexColumn);
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public int hashCode() {
1:047c502:       return Objects.hash(shardPath, indexColumn);
1:047c502:     }
1:047c502:   }
1:047c502: 
1:047c502:   public static class CacheValue implements Cacheable {
1:047c502: 
1:047c502:     private List<CarbonBloomFilter> bloomFilters;
1:047c502: 
1:047c502:     private int size;
1:047c502: 
1:047c502:     public CacheValue(List<CarbonBloomFilter> bloomFilters) {
1:047c502:       this.bloomFilters = bloomFilters;
1:047c502:       for (CarbonBloomFilter bloomFilter : bloomFilters) {
1:047c502:         size += bloomFilter.getSize();
1:047c502:       }
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public long getFileTimeStamp() {
1:047c502:       return 0;
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public int getAccessCount() {
1:047c502:       return 0;
1:047c502:     }
1:047c502: 
1:047c502:     @Override
1:047c502:     public long getMemorySize() {
1:047c502:       return size;
1:047c502:     }
1:047c502: 
1:54dcd8d:     @Override public void invalidate() {
1:54dcd8d:       bloomFilters = null;
1:54dcd8d:     }
1:54dcd8d: 
1:047c502:     public List<CarbonBloomFilter> getBloomFilters() {
1:047c502:       return bloomFilters;
1:047c502:     }
1:047c502:   }
1:047c502: 
1:047c502: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:54dcd8d
/////////////////////////////////////////////////////////////////////////
1:     @Override public void invalidate() {
1:       bloomFilters = null;
1:     }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:047c502
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.datamap.bloom;
1: 
1: import java.io.Serializable;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: import org.apache.carbondata.core.cache.Cacheable;
1: 
1: import org.apache.hadoop.util.bloom.CarbonBloomFilter;
1: 
1: /**
1:  * Key and values of bloom to keep in cache.
1:  */
1: public class BloomCacheKeyValue {
1: 
1:   public static class CacheKey implements Serializable {
1: 
1:     private static final long serialVersionUID = -1478238084352505372L;
1:     private String shardPath;
1:     private String indexColumn;
1: 
1:     CacheKey(String shardPath, String indexColumn) {
1:       this.shardPath = shardPath;
1:       this.indexColumn = indexColumn;
1:     }
1: 
1:     public String getShardPath() {
1:       return shardPath;
1:     }
1: 
1:     public String getIndexColumn() {
1:       return indexColumn;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:       final StringBuilder sb = new StringBuilder("CacheKey{");
1:       sb.append("shardPath='").append(shardPath).append('\'');
1:       sb.append(", indexColumn='").append(indexColumn).append('\'');
1:       sb.append('}');
1:       return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o) {
1:       if (this == o) return true;
1:       if (!(o instanceof CacheKey)) return false;
1:       CacheKey cacheKey = (CacheKey) o;
1:       return Objects.equals(shardPath, cacheKey.shardPath)
1:           && Objects.equals(indexColumn, cacheKey.indexColumn);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:       return Objects.hash(shardPath, indexColumn);
1:     }
1:   }
1: 
1:   public static class CacheValue implements Cacheable {
1: 
1:     private List<CarbonBloomFilter> bloomFilters;
1: 
1:     private int size;
1: 
1:     public CacheValue(List<CarbonBloomFilter> bloomFilters) {
1:       this.bloomFilters = bloomFilters;
1:       for (CarbonBloomFilter bloomFilter : bloomFilters) {
1:         size += bloomFilter.getSize();
1:       }
1:     }
1: 
1:     @Override
1:     public long getFileTimeStamp() {
1:       return 0;
1:     }
1: 
1:     @Override
1:     public int getAccessCount() {
1:       return 0;
1:     }
1: 
1:     @Override
1:     public long getMemorySize() {
1:       return size;
1:     }
1: 
1:     public List<CarbonBloomFilter> getBloomFilters() {
1:       return bloomFilters;
1:     }
1:   }
1: 
1: }
============================================================================