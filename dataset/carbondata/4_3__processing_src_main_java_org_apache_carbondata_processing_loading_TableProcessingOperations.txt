1:34cb551: /*
1:34cb551:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:34cb551:  * contributor license agreements.  See the NOTICE file distributed with
1:34cb551:  * this work for additional information regarding copyright ownership.
1:34cb551:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:34cb551:  * (the "License"); you may not use this file except in compliance with
1:34cb551:  * the License.  You may obtain a copy of the License at
1:34cb551:  *
1:34cb551:  *    http://www.apache.org/licenses/LICENSE-2.0
1:34cb551:  *
1:34cb551:  * Unless required by applicable law or agreed to in writing, software
1:34cb551:  * distributed under the License is distributed on an "AS IS" BASIS,
1:34cb551:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:34cb551:  * See the License for the specific language governing permissions and
1:34cb551:  * limitations under the License.
1:34cb551:  */
1:34cb551: 
1:34cb551: package org.apache.carbondata.processing.loading;
1:34cb551: 
1:34cb551: import java.io.File;
1:34cb551: import java.io.IOException;
1:34cb551: import java.util.concurrent.Callable;
1:34cb551: import java.util.concurrent.ExecutorService;
1:34cb551: import java.util.concurrent.Executors;
1:34cb551: 
1:34cb551: import org.apache.carbondata.common.logging.LogService;
1:34cb551: import org.apache.carbondata.common.logging.LogServiceFactory;
1:34cb551: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:34cb551: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1:34cb551: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:34cb551: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:34cb551: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1:34cb551: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1:34cb551: import org.apache.carbondata.core.util.CarbonProperties;
1:34cb551: import org.apache.carbondata.core.util.CarbonThreadFactory;
1:34cb551: import org.apache.carbondata.core.util.CarbonUtil;
1:34cb551: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:34cb551: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:34cb551: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:34cb551: import org.apache.carbondata.processing.util.CarbonLoaderUtil;
1:34cb551: 
1:34cb551: import org.apache.commons.lang3.StringUtils;
1:34cb551: 
1:34cb551: public class TableProcessingOperations {
1:34cb551:   private static final LogService LOGGER =
1:34cb551:       LogServiceFactory.getLogService(CarbonLoaderUtil.class.getName());
1:34cb551: 
1:34cb551:   /**
1:34cb551:    *
1:34cb551:    * @param carbonTable
1:34cb551:    * @param isCompactionFlow
1:34cb551:    * @throws IOException
1:34cb551:    */
1:34cb551:   public static void deletePartialLoadDataIfExist(CarbonTable carbonTable,
1:34cb551:       final boolean isCompactionFlow) throws IOException {
1:bf6c471:     String metaDataLocation = carbonTable.getMetadataPath();
1:34cb551:     final LoadMetadataDetails[] details = SegmentStatusManager.readLoadMetadata(metaDataLocation);
1:34cb551: 
1:34cb551:     //delete folder which metadata no exist in tablestatus
1:bf6c471:     String partitionPath = CarbonTablePath.getPartitionDir(carbonTable.getTablePath());
1:bf6c471:     FileFactory.FileType fileType = FileFactory.getFileType(partitionPath);
1:bf6c471:     if (FileFactory.isFileExist(partitionPath, fileType)) {
1:bf6c471:       CarbonFile carbonFile = FileFactory.getCarbonFile(partitionPath, fileType);
1:bf6c471:       CarbonFile[] listFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:bf6c471:         @Override public boolean accept(CarbonFile path) {
1:bf6c471:           String segmentId =
1:60dfdd3:               CarbonTablePath.DataFileUtil.getSegmentIdFromPath(path.getAbsolutePath() + "/dummy");
1:bf6c471:           boolean found = false;
1:bf6c471:           for (int j = 0; j < details.length; j++) {
1:bf6c471:             if (details[j].getLoadName().equals(segmentId)) {
1:bf6c471:               found = true;
1:bf6c471:               break;
5:34cb551:             }
1:bf6c471:           }
1:bf6c471:           return !found;
1:bf6c471:         }
1:bf6c471:       });
1:bf6c471:       for (int k = 0; k < listFiles.length; k++) {
1:60dfdd3:         String segmentId = CarbonTablePath.DataFileUtil
1:60dfdd3:             .getSegmentIdFromPath(listFiles[k].getAbsolutePath() + "/dummy");
1:bf6c471:         if (isCompactionFlow) {
1:bf6c471:           if (segmentId.contains(".")) {
1:bf6c471:             CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
1:bf6c471:           }
1:bf6c471:         } else {
1:bf6c471:           if (!segmentId.contains(".")) {
1:bf6c471:             CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
1:34cb551:           }
1:34cb551:         }
1:34cb551:       }
1:34cb551:     }
1:34cb551:   }
1:34cb551: 
1:34cb551:   /**
1:34cb551:    *
1:34cb551:    * This method will delete the local data load folder location after data load is complete
1:34cb551:    *
1:34cb551:    * @param loadModel
1:34cb551:    * @param isCompactionFlow COMPACTION keyword will be added to path to make path unique if true
1:34cb551:    * @param isAltPartitionFlow Alter_Partition keyword will be added to path to make path unique if
1:34cb551:    *                           true
1:34cb551:    */
1:34cb551:   public static void deleteLocalDataLoadFolderLocation(CarbonLoadModel loadModel,
1:34cb551:       boolean isCompactionFlow, boolean isAltPartitionFlow) {
1:34cb551:     String tableName = loadModel.getTableName();
1:34cb551:     String databaseName = loadModel.getDatabaseName();
1:34cb551:     String tempLocationKey = CarbonDataProcessorUtil
1:34cb551:         .getTempStoreLocationKey(databaseName, tableName, loadModel.getSegmentId(),
1:34cb551:             loadModel.getTaskNo(), isCompactionFlow, isAltPartitionFlow);
1:34cb551:     deleteLocalDataLoadFolderLocation(tempLocationKey, tableName);
1:34cb551:   }
1:34cb551: 
1:34cb551:   /**
1:34cb551:    *
1:34cb551:    * This method will delete the local data load folder location after data load is complete
1:34cb551:    *
1:34cb551:    * @param tempLocationKey temporary location set in carbon properties
1:34cb551:    * @param tableName
1:34cb551:    */
1:34cb551:   public static void deleteLocalDataLoadFolderLocation(String tempLocationKey, String tableName) {
1:34cb551: 
1:34cb551:     // form local store location
1:34cb551:     final String localStoreLocations = CarbonProperties.getInstance().getProperty(tempLocationKey);
1:34cb551:     if (localStoreLocations == null) {
1:34cb551:       throw new RuntimeException("Store location not set for the key " + tempLocationKey);
1:34cb551:     }
1:34cb551:     // submit local folder clean up in another thread so that main thread execution is not blocked
1:34cb551:     ExecutorService localFolderDeletionService = Executors
1:34cb551:         .newFixedThreadPool(1, new CarbonThreadFactory("LocalFolderDeletionPool:" + tableName));
1:34cb551:     try {
1:34cb551:       localFolderDeletionService.submit(new Callable<Void>() {
1:34cb551:         @Override public Void call() throws Exception {
1:34cb551:           long startTime = System.currentTimeMillis();
1:34cb551:           String[] locArray = StringUtils.split(localStoreLocations, File.pathSeparator);
1:34cb551:           for (String loc : locArray) {
1:34cb551:             try {
1:34cb551:               CarbonUtil.deleteFoldersAndFiles(new File(loc));
1:34cb551:             } catch (IOException | InterruptedException e) {
1:34cb551:               LOGGER.error(e, "Failed to delete local data load folder location: " + loc);
1:34cb551:             }
1:34cb551:           }
1:34cb551:           LOGGER.info(
1:34cb551:               "Deleted the local store location: " + localStoreLocations + " : Time taken: " + (
1:34cb551:                   System.currentTimeMillis() - startTime));
1:34cb551:           return null;
1:34cb551:         }
2:34cb551:       });
1:34cb551:     } finally {
1:34cb551:       if (null != localFolderDeletionService) {
1:34cb551:         localFolderDeletionService.shutdown();
1:34cb551:       }
1:34cb551:     }
1:34cb551: 
1:34cb551:   }
1:34cb551: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:               CarbonTablePath.DataFileUtil.getSegmentIdFromPath(path.getAbsolutePath() + "/dummy");
/////////////////////////////////////////////////////////////////////////
1:         String segmentId = CarbonTablePath.DataFileUtil
1:             .getSegmentIdFromPath(listFiles[k].getAbsolutePath() + "/dummy");
author:Jacky Li
-------------------------------------------------------------------------------
commit:982d03f
/////////////////////////////////////////////////////////////////////////
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String metaDataLocation = carbonTable.getMetadataPath();
1:     String partitionPath = CarbonTablePath.getPartitionDir(carbonTable.getTablePath());
1:     FileFactory.FileType fileType = FileFactory.getFileType(partitionPath);
1:     if (FileFactory.isFileExist(partitionPath, fileType)) {
1:       CarbonFile carbonFile = FileFactory.getCarbonFile(partitionPath, fileType);
1:       CarbonFile[] listFiles = carbonFile.listFiles(new CarbonFileFilter() {
1:         @Override public boolean accept(CarbonFile path) {
0:               CarbonTablePath.DataFileUtil.getSegmentId(path.getAbsolutePath() + "/dummy");
1:           boolean found = false;
1:           for (int j = 0; j < details.length; j++) {
1:             if (details[j].getLoadName().equals(segmentId)) {
1:               found = true;
1:               break;
1:           }
1:           return !found;
1:         }
1:       });
1:       for (int k = 0; k < listFiles.length; k++) {
1:         String segmentId =
0:             CarbonTablePath.DataFileUtil.getSegmentId(listFiles[k].getAbsolutePath() + "/dummy");
1:         if (isCompactionFlow) {
1:           if (segmentId.contains(".")) {
1:             CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
1:           }
1:         } else {
1:           if (!segmentId.contains(".")) {
1:             CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
0:       String partitionPath = carbonTablePath.getPartitionDir();
author:kunal642
-------------------------------------------------------------------------------
commit:5e3aec4
/////////////////////////////////////////////////////////////////////////
0:               if (details[j].getLoadName().equals(segmentId)) {
author:rahulforallp
-------------------------------------------------------------------------------
commit:34cb551
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFileFilter;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.util.CarbonThreadFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: import org.apache.carbondata.processing.util.CarbonLoaderUtil;
1: 
1: import org.apache.commons.lang3.StringUtils;
0: import org.apache.spark.annotation.DeveloperApi;
1: 
0: @DeveloperApi
1: public class TableProcessingOperations {
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CarbonLoaderUtil.class.getName());
1: 
1:   /**
1:    *
1:    * @param carbonTable
1:    * @param isCompactionFlow
1:    * @throws IOException
1:    */
1:   public static void deletePartialLoadDataIfExist(CarbonTable carbonTable,
1:       final boolean isCompactionFlow) throws IOException {
0:     String metaDataLocation = carbonTable.getMetaDataFilepath();
1:     final LoadMetadataDetails[] details = SegmentStatusManager.readLoadMetadata(metaDataLocation);
0:     CarbonTablePath carbonTablePath = CarbonStorePath
0:         .getCarbonTablePath(carbonTable.getTablePath(), carbonTable.getCarbonTableIdentifier());
1: 
1:     //delete folder which metadata no exist in tablestatus
0:     for (int i = 0; i < carbonTable.getPartitionCount(); i++) {
0:       final String partitionCount = i + "";
0:       String partitionPath = carbonTablePath.getPartitionDir(partitionCount);
0:       FileFactory.FileType fileType = FileFactory.getFileType(partitionPath);
0:       if (FileFactory.isFileExist(partitionPath, fileType)) {
0:         CarbonFile carbonFile = FileFactory.getCarbonFile(partitionPath, fileType);
0:         CarbonFile[] listFiles = carbonFile.listFiles(new CarbonFileFilter() {
0:           @Override public boolean accept(CarbonFile path) {
0:             String segmentId =
0:                 CarbonTablePath.DataPathUtil.getSegmentId(path.getAbsolutePath() + "/dummy");
0:             boolean found = false;
0:             for (int j = 0; j < details.length; j++) {
0:               if (details[j].getLoadName().equals(segmentId) && details[j].getPartitionCount()
0:                   .equals(partitionCount)) {
0:                 found = true;
0:                 break;
1:               }
1:             }
0:             return !found;
1:           }
1:         });
0:         for (int k = 0; k < listFiles.length; k++) {
0:           String segmentId =
0:               CarbonTablePath.DataPathUtil.getSegmentId(listFiles[k].getAbsolutePath() + "/dummy");
0:           if (isCompactionFlow) {
0:             if (segmentId.contains(".")) {
0:               CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
1:             }
0:           } else {
0:             if (!segmentId.contains(".")) {
0:               CarbonLoaderUtil.deleteStorePath(listFiles[k].getAbsolutePath());
1:             }
1:           }
1:         }
1:       }
1:     }
1:   }
1: 
1:   /**
1:    *
1:    * This method will delete the local data load folder location after data load is complete
1:    *
1:    * @param loadModel
1:    * @param isCompactionFlow COMPACTION keyword will be added to path to make path unique if true
1:    * @param isAltPartitionFlow Alter_Partition keyword will be added to path to make path unique if
1:    *                           true
1:    */
1:   public static void deleteLocalDataLoadFolderLocation(CarbonLoadModel loadModel,
1:       boolean isCompactionFlow, boolean isAltPartitionFlow) {
1:     String tableName = loadModel.getTableName();
1:     String databaseName = loadModel.getDatabaseName();
1:     String tempLocationKey = CarbonDataProcessorUtil
1:         .getTempStoreLocationKey(databaseName, tableName, loadModel.getSegmentId(),
1:             loadModel.getTaskNo(), isCompactionFlow, isAltPartitionFlow);
1:     deleteLocalDataLoadFolderLocation(tempLocationKey, tableName);
1:   }
1: 
1:   /**
1:    *
1:    * This method will delete the local data load folder location after data load is complete
1:    *
1:    * @param tempLocationKey temporary location set in carbon properties
1:    * @param tableName
1:    */
1:   public static void deleteLocalDataLoadFolderLocation(String tempLocationKey, String tableName) {
1: 
1:     // form local store location
1:     final String localStoreLocations = CarbonProperties.getInstance().getProperty(tempLocationKey);
1:     if (localStoreLocations == null) {
1:       throw new RuntimeException("Store location not set for the key " + tempLocationKey);
1:     }
1:     // submit local folder clean up in another thread so that main thread execution is not blocked
1:     ExecutorService localFolderDeletionService = Executors
1:         .newFixedThreadPool(1, new CarbonThreadFactory("LocalFolderDeletionPool:" + tableName));
1:     try {
1:       localFolderDeletionService.submit(new Callable<Void>() {
1:         @Override public Void call() throws Exception {
1:           long startTime = System.currentTimeMillis();
1:           String[] locArray = StringUtils.split(localStoreLocations, File.pathSeparator);
1:           for (String loc : locArray) {
1:             try {
1:               CarbonUtil.deleteFoldersAndFiles(new File(loc));
1:             } catch (IOException | InterruptedException e) {
1:               LOGGER.error(e, "Failed to delete local data load folder location: " + loc);
1:             }
1:           }
1:           LOGGER.info(
1:               "Deleted the local store location: " + localStoreLocations + " : Time taken: " + (
1:                   System.currentTimeMillis() - startTime));
1:           return null;
1:         }
1:       });
1:     } finally {
1:       if (null != localFolderDeletionService) {
1:         localFolderDeletionService.shutdown();
1:       }
1:     }
1: 
1:   }
1: }
============================================================================