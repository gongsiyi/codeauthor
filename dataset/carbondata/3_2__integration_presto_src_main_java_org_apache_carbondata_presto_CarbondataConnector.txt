1:9669c0b: /*
1:9669c0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9669c0b:  * contributor license agreements.  See the NOTICE file distributed with
1:9669c0b:  * this work for additional information regarding copyright ownership.
1:9669c0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9669c0b:  * (the "License"); you may not use this file except in compliance with
1:9669c0b:  * the License.  You may obtain a copy of the License at
1:9669c0b:  *
1:9669c0b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9669c0b:  *
1:9669c0b:  * Unless required by applicable law or agreed to in writing, software
1:9669c0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9669c0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9669c0b:  * See the License for the specific language governing permissions and
1:9669c0b:  * limitations under the License.
1:9669c0b:  */
1:9669c0b: 
1:9669c0b: package org.apache.carbondata.presto;
1:9669c0b: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:9669c0b: import com.facebook.presto.spi.connector.*;
1:9669c0b: import com.facebook.presto.spi.transaction.IsolationLevel;
1:9669c0b: import io.airlift.bootstrap.LifeCycleManager;
1:9669c0b: import io.airlift.log.Logger;
1:9669c0b: 
1:9669c0b: import static com.facebook.presto.spi.transaction.IsolationLevel.READ_COMMITTED;
1:9669c0b: import static com.facebook.presto.spi.transaction.IsolationLevel.checkConnectorSupports;
1:9669c0b: 
1:9669c0b: public class CarbondataConnector implements Connector {
1:9669c0b: 
1:9669c0b:   private static final Logger log = Logger.get(CarbondataConnector.class);
1:9669c0b: 
1:9669c0b:   private final LifeCycleManager lifeCycleManager;
1:e5e74fc:   private final ConnectorMetadata metadata;
1:9669c0b:   private final ConnectorSplitManager splitManager;
1:9669c0b:   private final ClassLoader classLoader;
1:9669c0b:   private final ConnectorPageSourceProvider pageSourceProvider;
1:9669c0b: 
1:e5e74fc:   public CarbondataConnector(LifeCycleManager lifeCycleManager, ConnectorMetadata metadata,
1:2ad621d:       ConnectorSplitManager splitManager,
1:9669c0b:       ClassLoader classLoader, ConnectorPageSourceProvider pageSourceProvider) {
1:9669c0b:     this.lifeCycleManager = requireNonNull(lifeCycleManager, "lifeCycleManager is null");
1:9669c0b:     this.metadata = requireNonNull(metadata, "metadata is null");
1:9669c0b:     this.splitManager = requireNonNull(splitManager, "splitManager is null");
1:9669c0b:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
1:9669c0b:     this.pageSourceProvider = requireNonNull(pageSourceProvider, "pageSourceProvider is null");
2:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @Override public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel,
1:9669c0b:       boolean readOnly) {
1:9669c0b:     checkConnectorSupports(READ_COMMITTED, isolationLevel);
1:ccb6560:     return new CarbondataTransactionHandle();
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @Override public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle) {
1:9669c0b:     return metadata;
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @Override public ConnectorSplitManager getSplitManager() {
1:9669c0b:     return splitManager;
1:9669c0b:   }
1:9669c0b: 
1:9669c0b: 
1:9669c0b:   @Override
1:9669c0b:   public ConnectorPageSourceProvider getPageSourceProvider()
1:9669c0b:   {
1:9669c0b:     return pageSourceProvider;
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @Override public final void shutdown() {
1:9669c0b:     try {
1:9669c0b:       lifeCycleManager.stop();
1:9669c0b:     } catch (Exception e) {
1:9669c0b:       log.error(e, "Error shutting down connector");
1:9669c0b:     }
1:9669c0b:   }
1:9669c0b: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import static java.util.Objects.requireNonNull;
1: 
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
1:       ConnectorSplitManager splitManager,
/////////////////////////////////////////////////////////////////////////
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
1:   private final ConnectorMetadata metadata;
1:   public CarbondataConnector(LifeCycleManager lifeCycleManager, ConnectorMetadata metadata,
/////////////////////////////////////////////////////////////////////////
commit:ccb6560
/////////////////////////////////////////////////////////////////////////
1:     return new CarbondataTransactionHandle();
commit:9669c0b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import com.facebook.presto.spi.connector.*;
1: import com.facebook.presto.spi.transaction.IsolationLevel;
1: import io.airlift.bootstrap.LifeCycleManager;
1: import io.airlift.log.Logger;
1: 
1: import static com.facebook.presto.spi.transaction.IsolationLevel.READ_COMMITTED;
1: import static com.facebook.presto.spi.transaction.IsolationLevel.checkConnectorSupports;
0: import static java.util.Objects.requireNonNull;
1: 
1: public class CarbondataConnector implements Connector {
1: 
1:   private static final Logger log = Logger.get(CarbondataConnector.class);
1: 
1:   private final LifeCycleManager lifeCycleManager;
0:   private final CarbondataMetadata metadata;
1:   private final ConnectorSplitManager splitManager;
0:   private final ConnectorRecordSetProvider recordSetProvider;
1:   private final ClassLoader classLoader;
1:   private final ConnectorPageSourceProvider pageSourceProvider;
1: 
0:   public CarbondataConnector(LifeCycleManager lifeCycleManager, CarbondataMetadata metadata,
0:       ConnectorSplitManager splitManager, ConnectorRecordSetProvider recordSetProvider,
1:       ClassLoader classLoader, ConnectorPageSourceProvider pageSourceProvider) {
1:     this.lifeCycleManager = requireNonNull(lifeCycleManager, "lifeCycleManager is null");
1:     this.metadata = requireNonNull(metadata, "metadata is null");
1:     this.splitManager = requireNonNull(splitManager, "splitManager is null");
0:     this.recordSetProvider = requireNonNull(recordSetProvider, "recordSetProvider is null");
1:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
1:     this.pageSourceProvider = requireNonNull(pageSourceProvider, "pageSourceProvider is null");
1:   }
1: 
1:   @Override public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel,
1:       boolean readOnly) {
1:     checkConnectorSupports(READ_COMMITTED, isolationLevel);
0:     return CarbondataTransactionHandle.INSTANCE;
1:   }
1: 
1:   @Override public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle) {
0:     metadata.putClassLoader(classLoader);
1:     return metadata;
1:   }
1: 
1:   @Override public ConnectorSplitManager getSplitManager() {
1:     return splitManager;
1:   }
1: 
0:   @Override public ConnectorRecordSetProvider getRecordSetProvider() {
0:     return recordSetProvider;
1:   }
1: 
1:   @Override
1:   public ConnectorPageSourceProvider getPageSourceProvider()
1:   {
1:     return pageSourceProvider;
1:   }
1: 
1:   @Override public final void shutdown() {
1:     try {
1:       lifeCycleManager.stop();
1:     } catch (Exception e) {
1:       log.error(e, "Error shutting down connector");
1:     }
1:   }
1: }
author:chenliang613
-------------------------------------------------------------------------------
commit:7ee8e27
/////////////////////////////////////////////////////////////////////////
commit:2712330
/////////////////////////////////////////////////////////////////////////
0: public class CarbondataConnector implements Connector {
0:   private static final Logger log = Logger.get(CarbondataConnector.class);
0:   private final LifeCycleManager lifeCycleManager;
0:   private final CarbondataMetadata metadata;
0:   private final ConnectorSplitManager splitManager;
0:   private final ConnectorRecordSetProvider recordSetProvider;
0:   private final ClassLoader classLoader;
0:   public CarbondataConnector(LifeCycleManager lifeCycleManager, CarbondataMetadata metadata,
0:       ConnectorSplitManager splitManager, ConnectorRecordSetProvider recordSetProvider,
0:       ClassLoader classLoader) {
0:     this.lifeCycleManager = requireNonNull(lifeCycleManager, "lifeCycleManager is null");
0:     this.metadata = requireNonNull(metadata, "metadata is null");
0:     this.splitManager = requireNonNull(splitManager, "splitManager is null");
0:     this.recordSetProvider = requireNonNull(recordSetProvider, "recordSetProvider is null");
0:     this.classLoader = requireNonNull(classLoader, "classLoader is null");
0:   }
0:   @Override public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel,
0:       boolean readOnly) {
0:     checkConnectorSupports(READ_COMMITTED, isolationLevel);
0:     return CarbondataTransactionHandle.INSTANCE;
0:   }
0: 
0:   @Override public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle) {
0:     metadata.putClassLoader(classLoader);
0:     return metadata;
0:   }
0: 
0:   @Override public ConnectorSplitManager getSplitManager() {
0:     return splitManager;
0:   }
0: 
0:   @Override public ConnectorRecordSetProvider getRecordSetProvider() {
0:     return recordSetProvider;
0:   }
0: 
0:   @Override public final void shutdown() {
0:     try {
0:       lifeCycleManager.stop();
0:     } catch (Exception e) {
0:       log.error(e, "Error shutting down connector");
0:   }
commit:32bf296
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *    http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: 
0: package org.apache.carbondata.presto;
commit:9d7dbea
============================================================================