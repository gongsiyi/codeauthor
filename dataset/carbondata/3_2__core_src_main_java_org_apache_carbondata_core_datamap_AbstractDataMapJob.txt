1:531ecdf: /*
1:531ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:531ecdf:  * this work for additional information regarding copyright ownership.
1:531ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531ecdf:  * (the "License"); you may not use this file except in compliance with
1:531ecdf:  * the License.  You may obtain a copy of the License at
1:531ecdf:  *
1:531ecdf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:531ecdf:  * Unless required by applicable law or agreed to in writing, software
1:531ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531ecdf:  * See the License for the specific language governing permissions and
1:531ecdf:  * limitations under the License.
1:531ecdf:  */
3:531ecdf: 
1:2018048: package org.apache.carbondata.core.datamap;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexWrapper;
1:531ecdf: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:531ecdf: 
1:531ecdf: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1:531ecdf: 
1:531ecdf: /**
1:531ecdf:  * abstract class for data map job
1:531ecdf:  */
1:531ecdf: public abstract class AbstractDataMapJob implements DataMapJob {
1:531ecdf: 
1:531ecdf:   @Override public void execute(CarbonTable carbonTable,
1:531ecdf:       FileInputFormat<Void, BlockletDataMapIndexWrapper> format) {
3:531ecdf:   }
1:07a77fa: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:07a77fa
/////////////////////////////////////////////////////////////////////////
1: }
commit:2018048
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datamap;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.hadoop.api;
1: 
0: import java.util.List;
1: 
1: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexWrapper;
0: import org.apache.carbondata.core.indexstore.ExtendedBlocklet;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: 
1: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1: 
1: /**
1:  * abstract class for data map job
1:  */
1: public abstract class AbstractDataMapJob implements DataMapJob {
1: 
1:   @Override public void execute(CarbonTable carbonTable,
1:       FileInputFormat<Void, BlockletDataMapIndexWrapper> format) {
1:   }
1: 
0:   @Override public List<ExtendedBlocklet> execute(DistributableDataMapFormat dataMapFormat,
0:       FilterResolverIntf resolverIntf) {
0:     return null;
1:   }
1: }
============================================================================