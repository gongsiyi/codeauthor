1:9669c0b: /*
1:9669c0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9669c0b:  * contributor license agreements.  See the NOTICE file distributed with
1:9669c0b:  * this work for additional information regarding copyright ownership.
1:9669c0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9669c0b:  * (the "License"); you may not use this file except in compliance with
1:9669c0b:  * the License.  You may obtain a copy of the License at
4:2ad621d:  *
1:9669c0b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2ad621d:  *
1:9669c0b:  * Unless required by applicable law or agreed to in writing, software
1:9669c0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9669c0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9669c0b:  * See the License for the specific language governing permissions and
1:9669c0b:  * limitations under the License.
1:9669c0b:  */
8:9669c0b: 
1:9669c0b: package org.apache.carbondata.presto;
1:2ad621d: 
1:2ad621d: import java.io.IOException;
1:9669c0b: import java.util.List;
1:2ad621d: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:2ad621d: import org.apache.carbondata.common.CarbonIterator;
1:2ad621d: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1:2ad621d: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:2ad621d: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:2ad621d: import org.apache.carbondata.core.scan.executor.QueryExecutor;
1:2ad621d: import org.apache.carbondata.core.scan.executor.QueryExecutorFactory;
1:2ad621d: import org.apache.carbondata.core.scan.executor.exception.QueryExecutionException;
1:2ad621d: import org.apache.carbondata.core.scan.expression.Expression;
1:2ad621d: import org.apache.carbondata.core.scan.model.QueryModel;
1:2ad621d: import org.apache.carbondata.core.scan.result.iterator.AbstractDetailQueryResultIterator;
1:01b48fc: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
1:2ad621d: import org.apache.carbondata.hadoop.CarbonInputSplit;
1:01b48fc: import org.apache.carbondata.hadoop.CarbonMultiBlockSplit;
1:2ad621d: import org.apache.carbondata.hadoop.CarbonProjection;
1:2ad621d: import org.apache.carbondata.hadoop.api.CarbonTableInputFormat;
1:01b48fc: import org.apache.carbondata.presto.impl.CarbonLocalMultiBlockSplit;
1:2ad621d: import org.apache.carbondata.presto.impl.CarbonTableCacheModel;
1:2ad621d: import org.apache.carbondata.presto.impl.CarbonTableReader;
1:2ad621d: 
1:d4a1577: import static org.apache.carbondata.presto.Types.checkType;
1:d4a1577: 
1:9669c0b: import com.facebook.presto.spi.ColumnHandle;
1:9669c0b: import com.facebook.presto.spi.ConnectorPageSource;
1:9669c0b: import com.facebook.presto.spi.ConnectorSession;
1:9669c0b: import com.facebook.presto.spi.ConnectorSplit;
1:9669c0b: import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;
1:9669c0b: import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
1:2ad621d: import com.google.common.collect.ImmutableList;
1:9669c0b: import com.google.inject.Inject;
1:2ad621d: import org.apache.hadoop.conf.Configuration;
1:2ad621d: import org.apache.hadoop.mapred.JobConf;
1:2ad621d: import org.apache.hadoop.mapred.TaskAttemptContextImpl;
1:2ad621d: import org.apache.hadoop.mapred.TaskAttemptID;
1:2ad621d: import org.apache.hadoop.mapreduce.TaskType;
1:2ad621d: 
1:2ad621d: import static com.google.common.base.Preconditions.checkArgument;
1:2ad621d: import static com.google.common.base.Preconditions.checkNotNull;
1:d4a1577: 
1:2ad621d: 
1:9669c0b: /**
1:9669c0b:  * Provider Class for Carbondata Page Source class.
1:9669c0b:  */
1:9669c0b: public class CarbondataPageSourceProvider implements ConnectorPageSourceProvider {
1:2ad621d: 
1:2ad621d:   private String connectorId;
1:2ad621d:   private CarbonTableReader carbonTableReader;
1:01b48fc:   private String queryId ;
1:2ad621d: 
1:2ad621d:   @Inject public CarbondataPageSourceProvider(CarbondataConnectorId connectorId,
1:2ad621d:       CarbonTableReader carbonTableReader) {
1:2ad621d:     this.connectorId = requireNonNull(connectorId, "connectorId is null").toString();
1:2ad621d:     this.carbonTableReader = requireNonNull(carbonTableReader, "carbonTableReader is null");
1:9669c0b:   }
1:2ad621d: 
1:9669c0b:   @Override
1:9669c0b:   public ConnectorPageSource createPageSource(ConnectorTransactionHandle transactionHandle,
1:9669c0b:       ConnectorSession session, ConnectorSplit split, List<ColumnHandle> columns) {
1:01b48fc:     this.queryId = ((CarbondataSplit)split).getQueryId();
1:2ad621d:     CarbonDictionaryDecodeReadSupport readSupport = new CarbonDictionaryDecodeReadSupport();
1:a4c2ef5:     PrestoCarbonVectorizedRecordReader carbonRecordReader =
1:a4c2ef5:         createReader(split, columns, readSupport);
1:a4c2ef5:     return new CarbondataPageSource(carbonRecordReader, columns);
1:9669c0b:   }
1:2ad621d: 
1:2ad621d:   /**
1:2ad621d:    * @param split
1:2ad621d:    * @param columns
1:2ad621d:    * @param readSupport
1:2ad621d:    * @return
1:2ad621d:    */
1:2ad621d:   private PrestoCarbonVectorizedRecordReader createReader(ConnectorSplit split,
1:2ad621d:       List<? extends ColumnHandle> columns, CarbonDictionaryDecodeReadSupport readSupport) {
1:2ad621d: 
1:2ad621d:     CarbondataSplit carbondataSplit =
1:2ad621d:         checkType(split, CarbondataSplit.class, "split is not class CarbondataSplit");
1:2ad621d:     checkArgument(carbondataSplit.getConnectorId().equals(connectorId),
1:2ad621d:         "split is not for this connector");
1:2ad621d:     QueryModel queryModel = createQueryModel(carbondataSplit, columns);
1:2a9604c:     QueryExecutor queryExecutor =
1:2a9604c:         QueryExecutorFactory.getQueryExecutor(queryModel, new Configuration());
1:2ad621d:     try {
1:2ad621d:       CarbonIterator iterator = queryExecutor.execute(queryModel);
1:2ad621d:       readSupport.initialize(queryModel.getProjectionColumns(), queryModel.getTable());
1:d4a1577:       PrestoCarbonVectorizedRecordReader reader =
1:d4a1577:           new PrestoCarbonVectorizedRecordReader(queryExecutor, queryModel,
1:d4a1577:               (AbstractDetailQueryResultIterator) iterator, readSupport);
1:01b48fc:       reader.setTaskId(carbondataSplit.getIndex());
1:01b48fc:       return reader;
1:2ad621d:     } catch (IOException e) {
1:2ad621d:       throw new RuntimeException("Unable to get the Query Model ", e);
1:2ad621d:     } catch (QueryExecutionException e) {
1:2ad621d:       throw new RuntimeException(e.getMessage(), e);
1:2ad621d:     } catch (Exception ex) {
1:2ad621d:       throw new RuntimeException(ex.getMessage(), ex);
1:2ad621d:     }
1:2ad621d:   }
1:2ad621d: 
1:2ad621d:   /**
1:2ad621d:    * @param carbondataSplit
1:2ad621d:    * @param columns
1:2ad621d:    * @return
1:2ad621d:    */
1:2ad621d:   private QueryModel createQueryModel(CarbondataSplit carbondataSplit,
1:2ad621d:       List<? extends ColumnHandle> columns) {
1:2ad621d: 
1:2ad621d:     try {
1:2ad621d:       CarbonProjection carbonProjection = getCarbonProjection(columns);
1:2ad621d:       CarbonTable carbonTable = getCarbonTable(carbondataSplit);
1:2ad621d: 
1:2ad621d:       Configuration conf = new Configuration();
1:2ad621d:       conf.set(CarbonTableInputFormat.INPUT_SEGMENT_NUMBERS, "");
1:2ad621d:       String carbonTablePath = carbonTable.getAbsoluteTableIdentifier().getTablePath();
1:2ad621d: 
1:2ad621d:       conf.set(CarbonTableInputFormat.INPUT_DIR, carbonTablePath);
1:01b48fc:       conf.set("query.id", queryId);
1:2ad621d:       JobConf jobConf = new JobConf(conf);
1:2ad621d:       CarbonTableInputFormat carbonTableInputFormat = createInputFormat(jobConf, carbonTable,
1:2ad621d:           PrestoFilterUtil.parseFilterExpression(carbondataSplit.getConstraints()),
1:2ad621d:           carbonProjection);
1:2ad621d:       TaskAttemptContextImpl hadoopAttemptContext =
1:2ad621d:           new TaskAttemptContextImpl(jobConf, new TaskAttemptID("", 1, TaskType.MAP, 0, 0));
1:01b48fc:       CarbonMultiBlockSplit carbonInputSplit =
1:01b48fc:           CarbonLocalMultiBlockSplit.convertSplit(carbondataSplit.getLocalInputSplit());
1:2ad621d:       QueryModel queryModel =
1:2ad621d:           carbonTableInputFormat.createQueryModel(carbonInputSplit, hadoopAttemptContext);
1:01b48fc:       queryModel.setQueryId(queryId);
1:2ad621d:       queryModel.setVectorReader(true);
1:01b48fc:       queryModel.setStatisticsRecorder(
1:01b48fc:           CarbonTimeStatisticsFactory.createExecutorRecorder(queryModel.getQueryId()));
1:01b48fc: 
1:01b48fc:       List<TableBlockInfo> tableBlockInfoList =
1:01b48fc:           CarbonInputSplit.createBlocks(carbonInputSplit.getAllSplits());
1:2ad621d:       queryModel.setTableBlockInfos(tableBlockInfoList);
1:2ad621d:       return queryModel;
1:2ad621d:     } catch (IOException e) {
1:2ad621d:       throw new RuntimeException("Unable to get the Query Model ", e);
1:2ad621d:     }
1:2ad621d:   }
1:01b48fc: 
1:2ad621d:   /**
1:2ad621d:    * @param conf
1:2ad621d:    * @param carbonTable
1:2ad621d:    * @param filterExpression
1:2ad621d:    * @param projection
1:2ad621d:    * @return
1:2ad621d:    */
1:2ad621d:   private CarbonTableInputFormat<Object> createInputFormat(Configuration conf,
1:2ad621d:       CarbonTable carbonTable, Expression filterExpression, CarbonProjection projection) {
1:2ad621d: 
1:2ad621d:     AbsoluteTableIdentifier identifier = carbonTable.getAbsoluteTableIdentifier();
1:2ad621d:     CarbonTableInputFormat format = new CarbonTableInputFormat<Object>();
1:2ad621d:     try {
1:2ad621d:       CarbonTableInputFormat
1:2ad621d:           .setTablePath(conf, identifier.appendWithLocalPrefix(identifier.getTablePath()));
1:2ad621d:       CarbonTableInputFormat
1:2ad621d:           .setDatabaseName(conf, identifier.getCarbonTableIdentifier().getDatabaseName());
1:2ad621d:       CarbonTableInputFormat
1:2ad621d:           .setTableName(conf, identifier.getCarbonTableIdentifier().getTableName());
1:2ad621d:     } catch (Exception e) {
1:2ad621d:       throw new RuntimeException("Unable to create the CarbonTableInputFormat", e);
1:2ad621d:     }
1:2ad621d:     CarbonTableInputFormat.setFilterPredicates(conf, filterExpression);
1:2ad621d:     CarbonTableInputFormat.setColumnProjection(conf, projection);
1:2ad621d: 
1:2ad621d:     return format;
1:2ad621d:   }
1:2ad621d: 
1:2ad621d:   /**
1:2ad621d:    * @param columns
1:2ad621d:    * @return
1:2ad621d:    */
1:2ad621d:   private CarbonProjection getCarbonProjection(List<? extends ColumnHandle> columns) {
1:2ad621d:     CarbonProjection carbonProjection = new CarbonProjection();
1:2ad621d:     // Convert all columns handles
1:2ad621d:     ImmutableList.Builder<CarbondataColumnHandle> handles = ImmutableList.builder();
1:2ad621d:     for (ColumnHandle handle : columns) {
1:2ad621d:       handles.add(checkType(handle, CarbondataColumnHandle.class, "handle"));
1:2ad621d:       carbonProjection.addColumn(((CarbondataColumnHandle) handle).getColumnName());
1:2ad621d:     }
1:2ad621d:     return carbonProjection;
1:2ad621d:   }
1:2ad621d: 
1:2ad621d:   /**
1:2ad621d:    * @param carbonSplit
1:2ad621d:    * @return
1:2ad621d:    */
1:2ad621d:   private CarbonTable getCarbonTable(CarbondataSplit carbonSplit) {
1:2ad621d:     CarbonTableCacheModel tableCacheModel =
1:2ad621d:         carbonTableReader.getCarbonCache(carbonSplit.getSchemaTableName());
1:2ad621d:     checkNotNull(tableCacheModel, "tableCacheModel should not be null");
1:2ad621d:     checkNotNull(tableCacheModel.carbonTable, "tableCacheModel.carbonTable should not be null");
1:2ad621d:     checkNotNull(tableCacheModel.carbonTable.getTableInfo(),
1:2ad621d:         "tableCacheModel.carbonTable.tableInfo should not be null");
1:2ad621d:     return tableCacheModel.carbonTable;
1:2ad621d:   }
1:2ad621d: 
1:9669c0b: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
1:     QueryExecutor queryExecutor =
1:         QueryExecutorFactory.getQueryExecutor(queryModel, new Configuration());
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import static java.util.Objects.requireNonNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.presto.Types.checkType;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:       PrestoCarbonVectorizedRecordReader reader =
1:           new PrestoCarbonVectorizedRecordReader(queryExecutor, queryModel,
1:               (AbstractDetailQueryResultIterator) iterator, readSupport);
author:sv71294
-------------------------------------------------------------------------------
commit:a4c2ef5
/////////////////////////////////////////////////////////////////////////
1:     PrestoCarbonVectorizedRecordReader carbonRecordReader =
1:         createReader(split, columns, readSupport);
1:     return new CarbondataPageSource(carbonRecordReader, columns);
/////////////////////////////////////////////////////////////////////////
0:           (AbstractDetailQueryResultIterator) iterator, readSupport);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:01b48fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
1: import org.apache.carbondata.hadoop.CarbonMultiBlockSplit;
1: import org.apache.carbondata.presto.impl.CarbonLocalMultiBlockSplit;
/////////////////////////////////////////////////////////////////////////
1:   private String queryId ;
1:     this.queryId = ((CarbondataSplit)split).getQueryId();
/////////////////////////////////////////////////////////////////////////
0:       PrestoCarbonVectorizedRecordReader reader = new PrestoCarbonVectorizedRecordReader(queryExecutor, queryModel,
1:       reader.setTaskId(carbondataSplit.getIndex());
1:       return reader;
/////////////////////////////////////////////////////////////////////////
1:       conf.set("query.id", queryId);
1:       CarbonMultiBlockSplit carbonInputSplit =
1:           CarbonLocalMultiBlockSplit.convertSplit(carbondataSplit.getLocalInputSplit());
1:       queryModel.setQueryId(queryId);
1:       queryModel.setStatisticsRecorder(
1:           CarbonTimeStatisticsFactory.createExecutorRecorder(queryModel.getQueryId()));
1:       List<TableBlockInfo> tableBlockInfoList =
1:           CarbonInputSplit.createBlocks(carbonInputSplit.getAllSplits());
1: 
1: 
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.util.ArrayList;
1: import org.apache.carbondata.common.CarbonIterator;
1: import org.apache.carbondata.core.datastore.block.TableBlockInfo;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.scan.executor.QueryExecutor;
1: import org.apache.carbondata.core.scan.executor.QueryExecutorFactory;
1: import org.apache.carbondata.core.scan.executor.exception.QueryExecutionException;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.model.QueryModel;
1: import org.apache.carbondata.core.scan.result.iterator.AbstractDetailQueryResultIterator;
1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1: import org.apache.carbondata.hadoop.CarbonProjection;
1: import org.apache.carbondata.hadoop.api.CarbonTableInputFormat;
0: import org.apache.carbondata.presto.impl.CarbonLocalInputSplit;
1: import org.apache.carbondata.presto.impl.CarbonTableCacheModel;
1: import org.apache.carbondata.presto.impl.CarbonTableReader;
1: 
1: import com.google.common.collect.ImmutableList;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.mapred.JobConf;
1: import org.apache.hadoop.mapred.TaskAttemptContextImpl;
1: import org.apache.hadoop.mapred.TaskAttemptID;
1: import org.apache.hadoop.mapreduce.TaskType;
1: import static com.google.common.base.Preconditions.checkArgument;
1: import static com.google.common.base.Preconditions.checkNotNull;
0: import static org.apache.carbondata.presto.Types.checkType;
1:   private String connectorId;
1:   private CarbonTableReader carbonTableReader;
1:   @Inject public CarbondataPageSourceProvider(CarbondataConnectorId connectorId,
1:       CarbonTableReader carbonTableReader) {
1:     this.connectorId = requireNonNull(connectorId, "connectorId is null").toString();
1:     this.carbonTableReader = requireNonNull(carbonTableReader, "carbonTableReader is null");
1: 
1:     CarbonDictionaryDecodeReadSupport readSupport = new CarbonDictionaryDecodeReadSupport();
0:     PrestoCarbonVectorizedRecordReader carbonRecordReader = createReader(split, columns, readSupport);
0:     return new CarbondataPageSource(readSupport, carbonRecordReader, columns );
1: 
1: 
1:   /**
1:    *
1:    * @param split
1:    * @param columns
1:    * @param readSupport
1:    * @return
1:    */
1:   private PrestoCarbonVectorizedRecordReader createReader(ConnectorSplit split,
1:       List<? extends ColumnHandle> columns, CarbonDictionaryDecodeReadSupport readSupport) {
1: 
1:     CarbondataSplit carbondataSplit =
1:         checkType(split, CarbondataSplit.class, "split is not class CarbondataSplit");
1:     checkArgument(carbondataSplit.getConnectorId().equals(connectorId),
1:         "split is not for this connector");
1:     QueryModel queryModel = createQueryModel(carbondataSplit, columns);
0:     QueryExecutor queryExecutor = QueryExecutorFactory.getQueryExecutor(queryModel);
1:     try {
1:       CarbonIterator iterator = queryExecutor.execute(queryModel);
1:       readSupport.initialize(queryModel.getProjectionColumns(), queryModel.getTable());
0:       return new PrestoCarbonVectorizedRecordReader(queryExecutor, queryModel,
0:           (AbstractDetailQueryResultIterator) iterator);
1:     } catch (IOException e) {
1:       throw new RuntimeException("Unable to get the Query Model ", e);
1:     } catch (QueryExecutionException e) {
1:       throw new RuntimeException(e.getMessage(), e);
1:     } catch (Exception ex) {
1:       throw new RuntimeException(ex.getMessage(), ex);
1:     }
1:   }
1: 
1:   /**
1:    *
1:    * @param carbondataSplit
1:    * @param columns
1:    * @return
1:    */
1:   private QueryModel createQueryModel(CarbondataSplit carbondataSplit,
1:       List<? extends ColumnHandle> columns) {
1: 
1:     try {
1:       CarbonProjection carbonProjection = getCarbonProjection(columns);
1:       CarbonTable carbonTable = getCarbonTable(carbondataSplit);
1: 
1:       Configuration conf = new Configuration();
1:       conf.set(CarbonTableInputFormat.INPUT_SEGMENT_NUMBERS, "");
1:       String carbonTablePath = carbonTable.getAbsoluteTableIdentifier().getTablePath();
1: 
1:       conf.set(CarbonTableInputFormat.INPUT_DIR, carbonTablePath);
1:       JobConf jobConf = new JobConf(conf);
1:       CarbonTableInputFormat carbonTableInputFormat = createInputFormat(jobConf, carbonTable,
1:           PrestoFilterUtil.parseFilterExpression(carbondataSplit.getConstraints()),
1:           carbonProjection);
1:       TaskAttemptContextImpl hadoopAttemptContext =
1:           new TaskAttemptContextImpl(jobConf, new TaskAttemptID("", 1, TaskType.MAP, 0, 0));
0:       CarbonInputSplit carbonInputSplit =
0:           CarbonLocalInputSplit.convertSplit(carbondataSplit.getLocalInputSplit());
1:       QueryModel queryModel =
1:           carbonTableInputFormat.createQueryModel(carbonInputSplit, hadoopAttemptContext);
1:       queryModel.setVectorReader(true);
1: 
0:       List<CarbonInputSplit> splitList = new ArrayList<>(1);
0:       splitList.add(carbonInputSplit);
0:       List<TableBlockInfo> tableBlockInfoList = CarbonInputSplit.createBlocks(splitList);
1:       queryModel.setTableBlockInfos(tableBlockInfoList);
1: 
1:       return queryModel;
1:     } catch (IOException e) {
1:       throw new RuntimeException("Unable to get the Query Model ", e);
1:     }
1:   }
1: 
1:   /**
1:    *
1:    * @param conf
1:    * @param carbonTable
1:    * @param filterExpression
1:    * @param projection
1:    * @return
1:    */
1:   private CarbonTableInputFormat<Object> createInputFormat(Configuration conf,
1:       CarbonTable carbonTable, Expression filterExpression, CarbonProjection projection) {
1: 
1:     AbsoluteTableIdentifier identifier = carbonTable.getAbsoluteTableIdentifier();
1:     CarbonTableInputFormat format = new CarbonTableInputFormat<Object>();
1:     try {
1:       CarbonTableInputFormat
1:           .setTablePath(conf, identifier.appendWithLocalPrefix(identifier.getTablePath()));
1:       CarbonTableInputFormat
1:           .setDatabaseName(conf, identifier.getCarbonTableIdentifier().getDatabaseName());
1:       CarbonTableInputFormat
1:           .setTableName(conf, identifier.getCarbonTableIdentifier().getTableName());
1:     } catch (Exception e) {
1:       throw new RuntimeException("Unable to create the CarbonTableInputFormat", e);
1:     }
1:     CarbonTableInputFormat.setFilterPredicates(conf, filterExpression);
1:     CarbonTableInputFormat.setColumnProjection(conf, projection);
1: 
1:     return format;
1:   }
1: 
1: 
1:   /**
1:    *
1:    * @param columns
1:    * @return
1:    */
1:   private CarbonProjection getCarbonProjection(List<? extends ColumnHandle> columns) {
1:     CarbonProjection carbonProjection = new CarbonProjection();
1:     // Convert all columns handles
1:     ImmutableList.Builder<CarbondataColumnHandle> handles = ImmutableList.builder();
1:     for (ColumnHandle handle : columns) {
1:       handles.add(checkType(handle, CarbondataColumnHandle.class, "handle"));
1:       carbonProjection.addColumn(((CarbondataColumnHandle) handle).getColumnName());
1:     }
1:     return carbonProjection;
1:   }
1: 
1:   /**
1:    *
1:    * @param carbonSplit
1:    * @return
1:    */
1:   private CarbonTable getCarbonTable(CarbondataSplit carbonSplit) {
1:     CarbonTableCacheModel tableCacheModel =
1:         carbonTableReader.getCarbonCache(carbonSplit.getSchemaTableName());
1:     checkNotNull(tableCacheModel, "tableCacheModel should not be null");
1:     checkNotNull(tableCacheModel.carbonTable, "tableCacheModel.carbonTable should not be null");
1:     checkNotNull(tableCacheModel.carbonTable.getTableInfo(),
1:         "tableCacheModel.carbonTable.tableInfo should not be null");
1:     return tableCacheModel.carbonTable;
1:   }
1: 
1: 
commit:9669c0b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import java.util.List;
1: 
1: import com.facebook.presto.spi.ColumnHandle;
1: import com.facebook.presto.spi.ConnectorPageSource;
1: import com.facebook.presto.spi.ConnectorSession;
1: import com.facebook.presto.spi.ConnectorSplit;
1: import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;
1: import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
1: import com.google.inject.Inject;
1: 
0: import static java.util.Objects.requireNonNull;
1: 
1: /**
1:  * Provider Class for Carbondata Page Source class.
1:  */
1: public class CarbondataPageSourceProvider implements ConnectorPageSourceProvider {
1: 
0:   private CarbondataRecordSetProvider carbondataRecordSetProvider;
1: 
0:   @Inject
0:   public CarbondataPageSourceProvider(CarbondataRecordSetProvider carbondataRecordSetProvider)
0:   {
0:     this.carbondataRecordSetProvider = requireNonNull(carbondataRecordSetProvider, "recordSetProvider is null");
1:   }
1: 
1:   @Override
1:   public ConnectorPageSource createPageSource(ConnectorTransactionHandle transactionHandle,
1:       ConnectorSession session, ConnectorSplit split, List<ColumnHandle> columns) {
0:     return new CarbondataPageSource(carbondataRecordSetProvider.getRecordSet(transactionHandle, session, split, columns));
1:   }
1: }
============================================================================