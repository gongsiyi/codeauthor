1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * The wrapper class wraps the list<list<bye[]>> and provide the iterator to retrieve the chunks
1:cd6a4ff:  * members and expose the getSize API to get size of members in the List<List<byte>> chunks.
1:cd6a4ff:  * Applications Scenario:
1:cd6a4ff:  * For preparing the column Sort info while writing the sort index file.
1:cd6a4ff:  */
1:cd6a4ff: public class DictionaryChunksWrapper implements Iterator<byte[]> {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * list of dictionaryChunks
1:cd6a4ff:    */
1:cd6a4ff:   private List<List<byte[]>> dictionaryChunks;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * size of the list
1:cd6a4ff:    */
1:cd6a4ff:   private int size;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Current index of the list
1:cd6a4ff:    */
1:cd6a4ff:   private int currentIndex;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * variable holds the count of elements already iterated
1:cd6a4ff:    */
1:cd6a4ff:   private int iteratorIndex;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * variable holds the current index of List<List<byte[]>> being traversed
1:cd6a4ff:    */
1:cd6a4ff:   private int outerIndex;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Constructor of DictionaryChunksWrapper
1:cd6a4ff:    *
1:cd6a4ff:    * @param dictionaryChunks
1:cd6a4ff:    */
1:cd6a4ff:   public DictionaryChunksWrapper(List<List<byte[]>> dictionaryChunks) {
1:cd6a4ff:     this.dictionaryChunks = dictionaryChunks;
1:cd6a4ff:     for (List<byte[]> chunk : dictionaryChunks) {
1:cd6a4ff:       this.size += chunk.size();
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Returns {@code true} if the iteration has more elements.
1:cd6a4ff:    * (In other words, returns {@code true} if {@link #next} would
1:cd6a4ff:    * return an element rather than throwing an exception.)
1:cd6a4ff:    *
1:cd6a4ff:    * @return {@code true} if the iteration has more elements
1:cd6a4ff:    */
1:cd6a4ff:   @Override public boolean hasNext() {
1:cd6a4ff:     return (currentIndex < size);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Returns the next element in the iteration.
1:cd6a4ff:    * The method pics the next elements from the first inner list till first is not finished, pics
1:cd6a4ff:    * the second inner list ...
1:cd6a4ff:    *
1:cd6a4ff:    * @return the next element in the iteration
1:cd6a4ff:    */
1:cd6a4ff:   @Override public byte[] next() {
1:cd6a4ff:     if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {
1:cd6a4ff:       iteratorIndex = 0;
1:cd6a4ff:       outerIndex++;
1:cd6a4ff:     }
1:cd6a4ff:     byte[] value = dictionaryChunks.get(outerIndex).get(iteratorIndex);
1:cd6a4ff:     currentIndex++;
1:cd6a4ff:     iteratorIndex++;
1:cd6a4ff:     return value;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Removes from the underlying collection the last element returned
1:cd6a4ff:    * by this iterator (optional operation).  This method can be called
1:cd6a4ff:    * only once per call to {@link #next}.  The behavior of an iterator
1:cd6a4ff:    * is unspecified if the underlying collection is modified while the
1:cd6a4ff:    * iteration is in progress in any way other than by calling this
1:cd6a4ff:    * method.
1:cd6a4ff:    *
1:cd6a4ff:    * @throws UnsupportedOperationException if the {@code remove}
1:cd6a4ff:    *                                       operation is not supported by this iterator
1:cd6a4ff:    * @throws IllegalStateException         if the {@code next} method has not
1:cd6a4ff:    *                                       yet been called, or the {@code remove} method has already
1:cd6a4ff:    *                                       been called after the last call to the {@code next}
1:cd6a4ff:    *                                       method
1:cd6a4ff:    * @implSpec The default implementation throws an instance of
1:cd6a4ff:    * {@link UnsupportedOperationException} and performs no other action.
1:cd6a4ff:    */
1:cd6a4ff:   @Override public void remove() {
1:cd6a4ff:     throw new UnsupportedOperationException("Remove operation not supported");
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * returns the total element size in List<List<byte[]>>
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   public int getSize() {
1:cd6a4ff:     return size;
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * The wrapper class wraps the list<list<bye[]>> and provide the iterator to retrieve the chunks
1:  * members and expose the getSize API to get size of members in the List<List<byte>> chunks.
1:  * Applications Scenario:
1:  * For preparing the column Sort info while writing the sort index file.
1:  */
1: public class DictionaryChunksWrapper implements Iterator<byte[]> {
1: 
1:   /**
1:    * list of dictionaryChunks
1:    */
1:   private List<List<byte[]>> dictionaryChunks;
1: 
1:   /**
1:    * size of the list
1:    */
1:   private int size;
1: 
1:   /**
1:    * Current index of the list
1:    */
1:   private int currentIndex;
1: 
1:   /**
1:    * variable holds the count of elements already iterated
1:    */
1:   private int iteratorIndex;
1: 
1:   /**
1:    * variable holds the current index of List<List<byte[]>> being traversed
1:    */
1:   private int outerIndex;
1: 
1:   /**
1:    * Constructor of DictionaryChunksWrapper
1:    *
1:    * @param dictionaryChunks
1:    */
1:   public DictionaryChunksWrapper(List<List<byte[]>> dictionaryChunks) {
1:     this.dictionaryChunks = dictionaryChunks;
1:     for (List<byte[]> chunk : dictionaryChunks) {
1:       this.size += chunk.size();
1:     }
1:   }
1: 
1:   /**
1:    * Returns {@code true} if the iteration has more elements.
1:    * (In other words, returns {@code true} if {@link #next} would
1:    * return an element rather than throwing an exception.)
1:    *
1:    * @return {@code true} if the iteration has more elements
1:    */
1:   @Override public boolean hasNext() {
1:     return (currentIndex < size);
1:   }
1: 
1:   /**
1:    * Returns the next element in the iteration.
1:    * The method pics the next elements from the first inner list till first is not finished, pics
1:    * the second inner list ...
1:    *
1:    * @return the next element in the iteration
1:    */
1:   @Override public byte[] next() {
1:     if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {
1:       iteratorIndex = 0;
1:       outerIndex++;
1:     }
1:     byte[] value = dictionaryChunks.get(outerIndex).get(iteratorIndex);
1:     currentIndex++;
1:     iteratorIndex++;
1:     return value;
1:   }
1: 
1:   /**
1:    * Removes from the underlying collection the last element returned
1:    * by this iterator (optional operation).  This method can be called
1:    * only once per call to {@link #next}.  The behavior of an iterator
1:    * is unspecified if the underlying collection is modified while the
1:    * iteration is in progress in any way other than by calling this
1:    * method.
1:    *
1:    * @throws UnsupportedOperationException if the {@code remove}
1:    *                                       operation is not supported by this iterator
1:    * @throws IllegalStateException         if the {@code next} method has not
1:    *                                       yet been called, or the {@code remove} method has already
1:    *                                       been called after the last call to the {@code next}
1:    *                                       method
1:    * @implSpec The default implementation throws an instance of
1:    * {@link UnsupportedOperationException} and performs no other action.
1:    */
1:   @Override public void remove() {
1:     throw new UnsupportedOperationException("Remove operation not supported");
1:   }
1: 
1:   /**
1:    * returns the total element size in List<List<byte[]>>
1:    *
1:    * @return
1:    */
1:   public int getSize() {
1:     return size;
1:   }
1: }
============================================================================