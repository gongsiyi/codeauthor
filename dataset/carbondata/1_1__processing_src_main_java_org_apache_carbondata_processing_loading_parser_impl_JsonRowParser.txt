1:5804d75: /*
1:5804d75:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5804d75:  * contributor license agreements.  See the NOTICE file distributed with
1:5804d75:  * this work for additional information regarding copyright ownership.
1:5804d75:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5804d75:  * (the "License"); you may not use this file except in compliance with
1:5804d75:  * the License.  You may obtain a copy of the License at
1:5804d75:  *
1:5804d75:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5804d75:  *
1:5804d75:  * Unless required by applicable law or agreed to in writing, software
1:5804d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5804d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5804d75:  * See the License for the specific language governing permissions and
1:5804d75:  * limitations under the License.
1:5804d75:  */
1:5804d75: package org.apache.carbondata.processing.loading.parser.impl;
2:5804d75: 
1:5804d75: import java.io.IOException;
1:5804d75: import java.util.ArrayList;
1:5804d75: import java.util.List;
1:5804d75: import java.util.Map;
1:f5c7a19: import java.util.TreeMap;
1:5804d75: 
1:5804d75: import org.apache.carbondata.core.metadata.datatype.DataType;
1:5804d75: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:5804d75: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:5804d75: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:5804d75: import org.apache.carbondata.processing.loading.DataField;
1:5804d75: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
1:5804d75: import org.apache.carbondata.processing.loading.complexobjects.StructObject;
1:5804d75: import org.apache.carbondata.processing.loading.parser.RowParser;
1:5804d75: 
1:5804d75: import org.apache.htrace.fasterxml.jackson.core.type.TypeReference;
1:5804d75: import org.apache.htrace.fasterxml.jackson.databind.ObjectMapper;
1:5804d75: 
1:5804d75: public class JsonRowParser implements RowParser {
1:5804d75: 
1:5804d75:   private DataField[] dataFields;
1:5804d75: 
1:5804d75:   public JsonRowParser(DataField[] dataFields) {
1:5804d75:     this.dataFields = dataFields;
4:5804d75:   }
1:5804d75: 
1:5804d75:   @Override public Object[] parseRow(Object[] row) {
1:5804d75:     try {
1:5804d75:       return convertJsonToNoDictionaryToBytes((String) row[0]);
1:5804d75:     } catch (IOException e) {
1:5804d75:       throw new RuntimeException(e);
1:5804d75:     }
1:5804d75:   }
1:5804d75: 
1:5804d75:   private Object[] convertJsonToNoDictionaryToBytes(String jsonString)
1:5804d75:       throws IOException {
1:5804d75:     ObjectMapper objectMapper = new ObjectMapper();
1:5804d75:     try {
1:5804d75:       Map<String, Object> jsonNodeMap =
1:5804d75:           objectMapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {
1:5804d75:           });
1:653efee:       if (jsonNodeMap == null) {
1:653efee:         return null;
1:653efee:       }
1:f5c7a19:       Map<String, Object> jsonNodeMapCaseInsensitive = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
1:f5c7a19:       jsonNodeMapCaseInsensitive.putAll(jsonNodeMap);
1:f5c7a19:       return jsonToCarbonRecord(jsonNodeMapCaseInsensitive, dataFields);
1:5804d75:     } catch (IOException e) {
1:5804d75:       throw new IOException("Failed to parse Json String: " + e.getMessage());
1:5804d75:     }
1:5804d75:   }
1:5804d75: 
1:5804d75:   private Object[] jsonToCarbonRecord(Map<String, Object> jsonNodeMap, DataField[] dataFields) {
1:5804d75:     List<Object> fields = new ArrayList<>();
1:5804d75:     for (DataField dataField : dataFields) {
1:5804d75:       Object field = jsonToCarbonObject(jsonNodeMap, dataField.getColumn());
1:653efee:       fields.add(field);
1:5804d75:     }
1:5804d75:     // use this array object to form carbonRow
1:5804d75:     return fields.toArray();
1:5804d75:   }
1:5804d75: 
1:5804d75:   private Object jsonToCarbonObject(Map<String, Object> jsonNodeMap, CarbonColumn column) {
1:5804d75:     DataType type = column.getDataType();
1:5804d75:     if (DataTypes.isArrayType(type)) {
1:5804d75:       CarbonDimension carbonDimension = (CarbonDimension) column;
1:5804d75:       ArrayList array = (ArrayList) jsonNodeMap.get(extractChildColumnName(column));
1:653efee:       if ((array == null) || (array.size() == 0)) {
1:653efee:         return null;
1:653efee:       }
1:5804d75:       // stored as array in carbonObject
1:653efee:       Object[] arrayChildObjects = new Object[array.size()];
1:653efee:       for (int i = 0; i < array.size(); i++) {
1:653efee:         // array column will have only one child, hence get(0).
1:653efee:         // But data can have n elements, hence the loop.
1:653efee:         CarbonDimension childCol = carbonDimension.getListOfChildDimensions().get(0);
1:5804d75:         arrayChildObjects[i] = jsonChildElementToCarbonChildElement(array.get(i), childCol);
1:5804d75:       }
1:5804d75:       return new ArrayObject(arrayChildObjects);
1:5804d75:     } else if (DataTypes.isStructType(type)) {
1:5804d75:       CarbonDimension carbonDimension = (CarbonDimension) column;
2:5804d75:       int size = carbonDimension.getNumberOfChild();
1:5804d75:       Map<String, Object> jsonMap =
1:5804d75:           (Map<String, Object>) jsonNodeMap.get(extractChildColumnName(column));
1:653efee:       if (jsonMap == null) {
1:653efee:         return null;
1:653efee:       }
1:5804d75:       Object[] structChildObjects = new Object[size];
3:5804d75:       for (int i = 0; i < size; i++) {
2:5804d75:         CarbonDimension childCol = carbonDimension.getListOfChildDimensions().get(i);
1:5804d75:         Object childObject =
1:5804d75:             jsonChildElementToCarbonChildElement(jsonMap.get(extractChildColumnName(childCol)),
1:5804d75:                 childCol);
1:653efee:         structChildObjects[i] = childObject;
1:5804d75:       }
1:5804d75:       return new StructObject(structChildObjects);
1:5804d75:     } else {
1:5804d75:       // primitive type
1:653efee:       if (jsonNodeMap.get(extractChildColumnName(column)) == null) {
1:653efee:         return null;
1:653efee:       }
1:5804d75:       return jsonNodeMap.get(extractChildColumnName(column)).toString();
1:5804d75:     }
1:5804d75:   }
1:5804d75: 
1:5804d75:   private Object jsonChildElementToCarbonChildElement(Object childObject,
1:5804d75:       CarbonDimension column) {
1:653efee:     if (childObject == null) {
1:653efee:       return null;
1:653efee:     }
1:5804d75:     DataType type = column.getDataType();
1:5804d75:     if (DataTypes.isArrayType(type)) {
1:5804d75:       ArrayList array = (ArrayList) childObject;
1:653efee:       if (array.size() == 0) {
1:653efee:         // handling empty array
1:653efee:         return null;
1:653efee:       }
1:5804d75:       // stored as array in carbonObject
1:653efee:       Object[] arrayChildObjects = new Object[array.size()];
1:653efee:       for (int i = 0; i < array.size(); i++) {
1:653efee:         // array column will have only one child, hence get(0).
1:653efee:         // But data can have n elements, hence the loop.
1:653efee:         CarbonDimension childCol = column.getListOfChildDimensions().get(0);
1:5804d75:         arrayChildObjects[i] = jsonChildElementToCarbonChildElement(array.get(i), childCol);
1:5804d75:       }
1:5804d75:       return new ArrayObject(arrayChildObjects);
1:5804d75:     } else if (DataTypes.isStructType(type)) {
1:5804d75:       Map<String, Object> childFieldsMap = (Map<String, Object>) childObject;
2:5804d75:       int size = column.getNumberOfChild();
1:5804d75:       Object[] structChildObjects = new Object[size];
1:5804d75:       for (int i = 0; i < size; i++) {
2:5804d75:         CarbonDimension childCol = column.getListOfChildDimensions().get(i);
1:5804d75:         Object child = jsonChildElementToCarbonChildElement(
1:5804d75:             childFieldsMap.get(extractChildColumnName(childCol)), childCol);
1:653efee:         structChildObjects[i] = child;
1:5804d75:       }
1:5804d75:       return new StructObject(structChildObjects);
1:5804d75:     } else {
1:5804d75:       // primitive type
1:5804d75:       return childObject.toString();
1:5804d75:     }
1:5804d75:   }
1:653efee: 
1:5804d75:   private static String extractChildColumnName(CarbonColumn column) {
1:5804d75:     String columnName = column.getColName();
1:5804d75:     if (columnName.contains(".")) {
1:5804d75:       // complex type child column names can be like following
1:5804d75:       // a) struct type --> parent.child
1:5804d75:       // b) array type --> parent.val.val...child [If create table flow]
1:5804d75:       // c) array type --> parent.val0.val1...child [If SDK flow]
1:5804d75:       // But json data's key is only child column name. So, extracting below
1:5804d75:       String[] splits = columnName.split("\\.");
1:5804d75:       columnName = splits[splits.length - 1];
1:5804d75:     }
1:5804d75:     return columnName;
1:5804d75:   }
1:5804d75: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:f5c7a19
/////////////////////////////////////////////////////////////////////////
1: import java.util.TreeMap;
/////////////////////////////////////////////////////////////////////////
1:       Map<String, Object> jsonNodeMapCaseInsensitive = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
1:       jsonNodeMapCaseInsensitive.putAll(jsonNodeMap);
1:       return jsonToCarbonRecord(jsonNodeMapCaseInsensitive, dataFields);
commit:653efee
/////////////////////////////////////////////////////////////////////////
1:       if (jsonNodeMap == null) {
1:         return null;
1:       }
/////////////////////////////////////////////////////////////////////////
1:       fields.add(field);
/////////////////////////////////////////////////////////////////////////
1:       if ((array == null) || (array.size() == 0)) {
1:         return null;
1:       }
1:       Object[] arrayChildObjects = new Object[array.size()];
1:       for (int i = 0; i < array.size(); i++) {
1:         // array column will have only one child, hence get(0).
1:         // But data can have n elements, hence the loop.
1:         CarbonDimension childCol = carbonDimension.getListOfChildDimensions().get(0);
/////////////////////////////////////////////////////////////////////////
1:       if (jsonMap == null) {
1:         return null;
1:       }
1:         structChildObjects[i] = childObject;
1:       if (jsonNodeMap.get(extractChildColumnName(column)) == null) {
1:         return null;
1:       }
1:     if (childObject == null) {
1:       return null;
1:     }
1:       if (array.size() == 0) {
1:         // handling empty array
1:         return null;
1:       }
1:       Object[] arrayChildObjects = new Object[array.size()];
1:       for (int i = 0; i < array.size(); i++) {
1:         // array column will have only one child, hence get(0).
1:         // But data can have n elements, hence the loop.
1:         CarbonDimension childCol = column.getListOfChildDimensions().get(0);
/////////////////////////////////////////////////////////////////////////
1:         structChildObjects[i] = child;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:5804d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.loading.parser.impl;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.complexobjects.ArrayObject;
1: import org.apache.carbondata.processing.loading.complexobjects.StructObject;
1: import org.apache.carbondata.processing.loading.parser.RowParser;
1: 
1: import org.apache.htrace.fasterxml.jackson.core.type.TypeReference;
1: import org.apache.htrace.fasterxml.jackson.databind.ObjectMapper;
1: 
1: public class JsonRowParser implements RowParser {
1: 
1:   private DataField[] dataFields;
1: 
1:   public JsonRowParser(DataField[] dataFields) {
1:     this.dataFields = dataFields;
1:   }
1: 
1:   @Override public Object[] parseRow(Object[] row) {
1:     try {
1:       return convertJsonToNoDictionaryToBytes((String) row[0]);
1:     } catch (IOException e) {
1:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   private Object[] convertJsonToNoDictionaryToBytes(String jsonString)
1:       throws IOException {
1:     ObjectMapper objectMapper = new ObjectMapper();
1:     try {
1:       Map<String, Object> jsonNodeMap =
1:           objectMapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {
1:           });
0:       return jsonToCarbonRecord(jsonNodeMap, dataFields);
1:     } catch (IOException e) {
1:       throw new IOException("Failed to parse Json String: " + e.getMessage());
1:     }
1:   }
1: 
1:   private Object[] jsonToCarbonRecord(Map<String, Object> jsonNodeMap, DataField[] dataFields) {
1:     List<Object> fields = new ArrayList<>();
1:     for (DataField dataField : dataFields) {
1:       Object field = jsonToCarbonObject(jsonNodeMap, dataField.getColumn());
0:       if (field != null) {
0:         fields.add(field);
1:       }
1:     }
1:     // use this array object to form carbonRow
1:     return fields.toArray();
1:   }
1: 
1:   private Object jsonToCarbonObject(Map<String, Object> jsonNodeMap, CarbonColumn column) {
1:     DataType type = column.getDataType();
1:     if (DataTypes.isArrayType(type)) {
1:       CarbonDimension carbonDimension = (CarbonDimension) column;
1:       int size = carbonDimension.getNumberOfChild();
1:       ArrayList array = (ArrayList) jsonNodeMap.get(extractChildColumnName(column));
1:       // stored as array in carbonObject
0:       Object[] arrayChildObjects = new Object[size];
1:       for (int i = 0; i < size; i++) {
1:         CarbonDimension childCol = carbonDimension.getListOfChildDimensions().get(i);
1:         arrayChildObjects[i] = jsonChildElementToCarbonChildElement(array.get(i), childCol);
1:       }
1:       return new ArrayObject(arrayChildObjects);
1:     } else if (DataTypes.isStructType(type)) {
1:       CarbonDimension carbonDimension = (CarbonDimension) column;
1:       int size = carbonDimension.getNumberOfChild();
1:       Map<String, Object> jsonMap =
1:           (Map<String, Object>) jsonNodeMap.get(extractChildColumnName(column));
1:       Object[] structChildObjects = new Object[size];
1:       for (int i = 0; i < size; i++) {
1:         CarbonDimension childCol = carbonDimension.getListOfChildDimensions().get(i);
1:         Object childObject =
1:             jsonChildElementToCarbonChildElement(jsonMap.get(extractChildColumnName(childCol)),
1:                 childCol);
0:         if (childObject != null) {
0:           structChildObjects[i] = childObject;
1:         }
1:       }
1:       return new StructObject(structChildObjects);
1:     } else {
1:       // primitive type
1:       return jsonNodeMap.get(extractChildColumnName(column)).toString();
1:     }
1:   }
1: 
1:   private Object jsonChildElementToCarbonChildElement(Object childObject,
1:       CarbonDimension column) {
1:     DataType type = column.getDataType();
1:     if (DataTypes.isArrayType(type)) {
1:       int size = column.getNumberOfChild();
1:       ArrayList array = (ArrayList) childObject;
1:       // stored as array in carbonObject
0:       Object[] arrayChildObjects = new Object[size];
1:       for (int i = 0; i < size; i++) {
1:         CarbonDimension childCol = column.getListOfChildDimensions().get(i);
1:         arrayChildObjects[i] = jsonChildElementToCarbonChildElement(array.get(i), childCol);
1:       }
1:       return new ArrayObject(arrayChildObjects);
1:     } else if (DataTypes.isStructType(type)) {
1:       Map<String, Object> childFieldsMap = (Map<String, Object>) childObject;
1:       int size = column.getNumberOfChild();
1:       Object[] structChildObjects = new Object[size];
1:       for (int i = 0; i < size; i++) {
1:         CarbonDimension childCol = column.getListOfChildDimensions().get(i);
1:         Object child = jsonChildElementToCarbonChildElement(
1:             childFieldsMap.get(extractChildColumnName(childCol)), childCol);
0:         if (child != null) {
0:           structChildObjects[i] = child;
1:         }
1:       }
1:       return new StructObject(structChildObjects);
1:     } else {
1:       // primitive type
1:       return childObject.toString();
1:     }
1:   }
1:   private static String extractChildColumnName(CarbonColumn column) {
1:     String columnName = column.getColName();
1:     if (columnName.contains(".")) {
1:       // complex type child column names can be like following
1:       // a) struct type --> parent.child
1:       // b) array type --> parent.val.val...child [If create table flow]
1:       // c) array type --> parent.val0.val1...child [If SDK flow]
1:       // But json data's key is only child column name. So, extracting below
1:       String[] splits = columnName.split("\\.");
1:       columnName = splits[splits.length - 1];
1:     }
1:     return columnName;
1:   }
1: 
1: }
============================================================================