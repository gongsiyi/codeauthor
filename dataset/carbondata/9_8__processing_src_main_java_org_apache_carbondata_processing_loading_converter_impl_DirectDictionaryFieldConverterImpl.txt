1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
2:d96f09a: 
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
1:d96f09a: 
1:496cde4: import java.util.List;
1:496cde4: 
1:cd7c210: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:d96f09a: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1:d96f09a: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryKeyGeneratorFactory;
1:85dc4ff: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:349c59c: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:4a79a86: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:d96f09a: 
1:d96f09a: public class DirectDictionaryFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1:d96f09a: 
1:d96f09a:   private DirectDictionaryGenerator directDictionaryGenerator;
1:d96f09a: 
1:d96f09a:   private int index;
1:d96f09a: 
1:496cde4:   private String nullFormat;
1:496cde4: 
1:496cde4:   private CarbonColumn column;
1:3251c89:   private boolean isEmptyBadRecord;
1:496cde4: 
1:3251c89:   public DirectDictionaryFieldConverterImpl(DataField dataField, String nullFormat, int index,
1:3251c89:       boolean isEmptyBadRecord) {
1:496cde4:     this.nullFormat = nullFormat;
1:496cde4:     this.column = dataField.getColumn();
1:85dc4ff:     if (dataField.getColumn().getDataType() == DataTypes.DATE && dataField.getDateFormat() != null
1:85dc4ff:         && !dataField.getDateFormat().isEmpty()) {
1:496cde4:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:496cde4:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType(),
1:496cde4:               dataField.getDateFormat());
1:496cde4: 
1:85dc4ff:     } else if (dataField.getColumn().getDataType() == DataTypes.TIMESTAMP
1:85dc4ff:         && dataField.getTimestampFormat() != null && !dataField.getTimestampFormat().isEmpty()) {
1:85dc4ff:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:85dc4ff:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType(),
1:85dc4ff:               dataField.getTimestampFormat());
1:496cde4:     } else {
1:496cde4:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:496cde4:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType());
1:496cde4:     }
1:d96f09a:     this.index = index;
1:3251c89:     this.isEmptyBadRecord = isEmptyBadRecord;
1:d96f09a:   }
1:85dc4ff: 
1:d96f09a:   @Override
1:496cde4:   public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
1:496cde4:     String value = row.getString(index);
1:cd7c210:     row.update(convert(value, logHolder), index);
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   @Override
1:cd7c210:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:cd7c210:       throws RuntimeException {
1:cd7c210:     String literalValue = (String) value;
1:cd7c210:     if (literalValue == null) {
1:dc83b2a:       logHolder.setReason(
1:dc83b2a:           CarbonDataProcessorUtil.prepareFailureReason(column.getColName(), column.getDataType()));
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:cd7c210:     } else if (literalValue.equals(nullFormat)) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:496cde4:     } else {
1:cd7c210:       int key = directDictionaryGenerator.generateDirectSurrogateKey(literalValue);
1:cd7c210:       if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
1:cd7c210:         if ((literalValue.length() > 0) || (literalValue.length() == 0 && isEmptyBadRecord)) {
1:4a79a86:           String message = logHolder.getColumnMessageMap().get(column.getColName());
1:4a79a86:           if (null == message) {
1:dc83b2a:             message = CarbonDataProcessorUtil.prepareFailureReason(
1:dc83b2a:                 column.getColName(), column.getDataType());
1:4a79a86:             logHolder.getColumnMessageMap().put(column.getColName(), message);
1:4a79a86:           }
1:4a79a86:           logHolder.setReason(message);
1:3251c89:         }
1:496cde4:       }
1:cd7c210:       return key;
1:496cde4:     }
1:d96f09a:   }
1:d96f09a: 
1:f79b9ea:   /**
1:f79b9ea:    * Method to clean the dictionary cache. In this instance nothing to clear.
1:f79b9ea:    */
1:f79b9ea:   @Override public void clear() {
1:f79b9ea:   }
1:f79b9ea: 
1:d96f09a:   @Override
1:496cde4:   public void fillColumnCardinality(List<Integer> cardinality) {
1:496cde4:     cardinality.add(Integer.MAX_VALUE);
1:d96f09a:   }
1:d96f09a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:     row.update(convert(value, logHolder), index);
1:   }
1: 
1:   @Override
1:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:       throws RuntimeException {
1:     String literalValue = (String) value;
1:     if (literalValue == null) {
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:     } else if (literalValue.equals(nullFormat)) {
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:       int key = directDictionaryGenerator.generateDirectSurrogateKey(literalValue);
1:       if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
1:         if ((literalValue.length() > 0) || (literalValue.length() == 0 && isEmptyBadRecord)) {
/////////////////////////////////////////////////////////////////////////
1:       return key;
author:kunal642
-------------------------------------------------------------------------------
commit:6b70b7e
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Method to clean the dictionary cache. In this instance nothing to clear.
1:    */
1:   @Override public void clear() {
1:   }
1: 
author:akashrn5
-------------------------------------------------------------------------------
commit:85dc4ff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (dataField.getColumn().getDataType() == DataTypes.DATE && dataField.getDateFormat() != null
1:         && !dataField.getDateFormat().isEmpty()) {
1:     } else if (dataField.getColumn().getDataType() == DataTypes.TIMESTAMP
1:         && dataField.getTimestampFormat() != null && !dataField.getTimestampFormat().isEmpty()) {
1:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType(),
1:               dataField.getTimestampFormat());
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
/////////////////////////////////////////////////////////////////////////
1:       logHolder.setReason(
1:           CarbonDataProcessorUtil.prepareFailureReason(column.getColName(), column.getDataType()));
/////////////////////////////////////////////////////////////////////////
1:             message = CarbonDataProcessorUtil.prepareFailureReason(
1:                 column.getColName(), column.getDataType());
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
0:       logHolder.setReason(CarbonDataProcessorUtil
0:           .prepareFailureReason(column.getColName(), column.getDataType()));
/////////////////////////////////////////////////////////////////////////
1:           String message = logHolder.getColumnMessageMap().get(column.getColName());
1:           if (null == message) {
0:             message = CarbonDataProcessorUtil
0:                 .prepareFailureReason(column.getColName(), column.getDataType());
1:             logHolder.getColumnMessageMap().put(column.getColName(), message);
1:           }
1:           logHolder.setReason(message);
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:   private boolean isEmptyBadRecord;
1:   public DirectDictionaryFieldConverterImpl(DataField dataField, String nullFormat, int index,
1:       boolean isEmptyBadRecord) {
/////////////////////////////////////////////////////////////////////////
1:     this.isEmptyBadRecord = isEmptyBadRecord;
/////////////////////////////////////////////////////////////////////////
0:         if ((value.length() > 0) || (value.length() == 0 && isEmptyBadRecord)) {
0:           logHolder.setReason(
0:               "The value " + " \"" + row.getString(index) + "\"" + " with column name " + column
0:                   .getColName() + " and column data type " + column.getDataType()
0:                   + " is not a valid " + column.getDataType() + " type.");
1:         }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonColumn;
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
/////////////////////////////////////////////////////////////////////////
1:   private String nullFormat;
1: 
1:   private CarbonColumn column;
1: 
0:   public DirectDictionaryFieldConverterImpl(DataField dataField, String nullFormat, int index) {
1:     this.nullFormat = nullFormat;
1:     this.column = dataField.getColumn();
0:     if (dataField.getDateFormat() != null && !dataField.getDateFormat().isEmpty()) {
1:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType(),
1:               dataField.getDateFormat());
1: 
1:     } else {
1:       this.directDictionaryGenerator = DirectDictionaryKeyGeneratorFactory
1:           .getDirectDictionaryGenerator(dataField.getColumn().getDataType());
1:     }
1:   public void convert(CarbonRow row, BadRecordLogHolder logHolder) {
1:     String value = row.getString(index);
0:     if (value == null) {
0:       logHolder.setReason(
0:           "The value " + " \"" + row.getString(index) + "\"" + " with column name " + column
0:               .getColName() + " and column data type " + column.getDataType() + " is not a valid "
0:               + column.getDataType() + " type.");
0:       row.update(1, index);
0:     } else if (value.equals(nullFormat)) {
0:       row.update(1, index);
1:     } else {
0:       int key = directDictionaryGenerator.generateDirectSurrogateKey(value);
0:       if (key == 1) {
0:         logHolder.setReason(
0:             "The value " + " \"" + row.getString(index) + "\"" + " with column name " + column
0:                 .getColName() + " and column data type " + column.getDataType() + " is not a valid "
0:                 + column.getDataType() + " type.");
1:       }
0:       row.update(key, index);
1:     }
1:   public void fillColumnCardinality(List<Integer> cardinality) {
1:     cardinality.add(Integer.MAX_VALUE);
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryKeyGeneratorFactory;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: public class DirectDictionaryFieldConverterImpl extends AbstractDictionaryFieldConverterImpl {
1: 
1:   private DirectDictionaryGenerator directDictionaryGenerator;
1: 
1:   private int index;
1: 
0:   public DirectDictionaryFieldConverterImpl(DataField dataField, int index) {
0:     DirectDictionaryGenerator directDictionaryGenerator =
0:         DirectDictionaryKeyGeneratorFactory
0:             .getDirectDictionaryGenerator(dataField.getColumn().getDataType());
0:     this.directDictionaryGenerator = directDictionaryGenerator;
1:     this.index = index;
1:   }
1: 
1:   @Override
0:   public void convert(CarbonRow row) {
0:     row.update(directDictionaryGenerator.generateDirectSurrogateKey(row.getString(index)), index);
1:   }
1: 
1:   @Override
0:   public int getColumnCardinality() {
0:     return Integer.MAX_VALUE;
1:   }
1: }
============================================================================