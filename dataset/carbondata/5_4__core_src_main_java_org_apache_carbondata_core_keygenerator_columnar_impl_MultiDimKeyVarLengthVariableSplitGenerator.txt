1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.columnar.impl;
4:cd6a4ff: 
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: import java.util.HashSet;
1:cd6a4ff: import java.util.Iterator;
1:cd6a4ff: import java.util.List;
1:eaadc88: import java.util.Objects;
1:cd6a4ff: import java.util.Set;
1:cd6a4ff: import java.util.TreeSet;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.columnar.ColumnarSplitter;
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
1:cd6a4ff: 
1:cd6a4ff: public class MultiDimKeyVarLengthVariableSplitGenerator extends MultiDimKeyVarLengthGenerator
1:cd6a4ff:     implements ColumnarSplitter {
1:cd6a4ff: 
1:cd6a4ff:   private static final long serialVersionUID = 1L;
1:cd6a4ff: 
1:cd6a4ff:   private int[] dimensionsToSplit;
1:cd6a4ff: 
1:cd6a4ff:   private int[] blockKeySize;
1:cd6a4ff: 
1:cd6a4ff:   public MultiDimKeyVarLengthVariableSplitGenerator(int[] lens, int[] dimSplit) {
1:cd6a4ff:     super(lens);
1:cd6a4ff:     this.dimensionsToSplit = dimSplit;
1:cd6a4ff:     initialise();
1:cd6a4ff: 
7:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private void initialise() {
1:cd6a4ff:     int s = 0;
1:cd6a4ff:     List<Set<Integer>> splitList =
1:cd6a4ff:         new ArrayList<Set<Integer>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:cd6a4ff:     Set<Integer> split = new TreeSet<Integer>();
1:cd6a4ff:     splitList.add(split);
1:cd6a4ff:     int dimSplitIndx = 0;
1:cd6a4ff: 
1:cd6a4ff:     for (int i = 0; i < byteRangesForKeys.length; i++) {
1:cd6a4ff:       if (s == dimensionsToSplit[dimSplitIndx]) {
1:cd6a4ff:         s = 0;
1:cd6a4ff:         split = new TreeSet<Integer>();
1:cd6a4ff:         splitList.add(split);
1:cd6a4ff:         dimSplitIndx++;
1:cd6a4ff:       }
1:cd6a4ff:       for (int j = 0; j < byteRangesForKeys[i].length; j++) {
1:cd6a4ff:         for (int j2 = byteRangesForKeys[i][0]; j2 <= byteRangesForKeys[i][1]; j2++) {
1:cd6a4ff:           split.add(j2);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:       s++;
1:cd6a4ff: 
1:cd6a4ff:     }
1:cd6a4ff:     List<Integer>[] splits = new List[splitList.size()];
1:cd6a4ff:     int i = 0;
1:cd6a4ff:     for (Set<Integer> splitLocal : splitList) {
1:910d496:       List<Integer> range = new ArrayList<Integer>(splitLocal);
1:cd6a4ff:       splits[i++] = range;
1:cd6a4ff:     }
1:cd6a4ff:     for (int j = 1; j < splits.length; j++) {
1:eaadc88:       if (Objects.equals(splits[j - 1].get(splits[j - 1].size() - 1), splits[j].get(0))) {
1:cd6a4ff:         splits[j].remove(0);
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     int[][] splitDimArray = new int[splits.length][];
1:cd6a4ff:     for (int j = 0; j < splits.length; j++) {
1:cd6a4ff:       int[] a = convertToArray(splits[j]);
1:cd6a4ff:       splitDimArray[j] = a.length > 0 ? new int[] { a[0], a[a.length - 1] } : a;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     int[][] dimBlockArray = new int[byteRangesForKeys.length][];
1:cd6a4ff:     Set<Integer>[] dimBlockSet = new Set[dimBlockArray.length];
1:cd6a4ff:     for (int k = 0; k < byteRangesForKeys.length; k++) {
1:cd6a4ff:       int[] dimRange = byteRangesForKeys[k];
1:cd6a4ff:       Set<Integer> dimBlockPosSet = new TreeSet<Integer>();
1:cd6a4ff:       dimBlockSet[k] = dimBlockPosSet;
1:cd6a4ff:       for (int j = 0; j < splitDimArray.length; j++) {
1:cd6a4ff:         if (dimRange[0] >= splitDimArray[j][0] && dimRange[0] <= splitDimArray[j][1]) {
1:cd6a4ff:           dimBlockPosSet.add(j);
1:cd6a4ff:         }
1:cd6a4ff:         if (dimRange[1] >= splitDimArray[j][0] && dimRange[1] <= splitDimArray[j][1]) {
1:cd6a4ff:           dimBlockPosSet.add(j);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff: 
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     for (int j = 0; j < dimBlockSet.length; j++) {
1:cd6a4ff:       dimBlockArray[j] = convertToArray(dimBlockSet[j]);
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     blockKeySize = new int[splitDimArray.length];
1:cd6a4ff: 
1:cd6a4ff:     for (int j = 0; j < blockKeySize.length; j++) {
1:cd6a4ff:       blockKeySize[j] =
1:cd6a4ff:           splitDimArray[j].length > 0 ? splitDimArray[j][1] - splitDimArray[j][0] + 1 : 0;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int[] convertToArray(List<Integer> list) {
1:cd6a4ff:     int[] ints = new int[list.size()];
1:cd6a4ff:     for (int i = 0; i < ints.length; i++) {
1:cd6a4ff:       ints[i] = list.get(i);
1:cd6a4ff:     }
1:cd6a4ff:     return ints;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private int[] convertToArray(Set<Integer> set) {
1:cd6a4ff:     int[] ints = new int[set.size()];
1:cd6a4ff:     int i = 0;
1:cd6a4ff:     for (Iterator iterator = set.iterator(); iterator.hasNext(); ) {
1:cd6a4ff:       ints[i++] = (Integer) iterator.next();
1:cd6a4ff:     }
1:cd6a4ff:     return ints;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[][] splitKey(byte[] key) {
1:cd6a4ff:     byte[][] split = new byte[blockKeySize.length][];
1:cd6a4ff:     int copyIndex = 0;
1:cd6a4ff:     for (int i = 0; i < split.length; i++) {
1:cd6a4ff:       split[i] = new byte[blockKeySize[i]];
1:cd6a4ff:       System.arraycopy(key, copyIndex, split[i], 0, split[i].length);
1:cd6a4ff:       copyIndex += blockKeySize[i];
1:cd6a4ff:     }
1:cd6a4ff:     return split;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[][] generateAndSplitKey(long[] keys) throws KeyGenException {
1:cd6a4ff:     return splitKey(generateKey(keys));
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[][] generateAndSplitKey(int[] keys) throws KeyGenException {
1:cd6a4ff:     return splitKey(generateKey(keys));
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public long[] getKeyArray(byte[][] key) {
1:cd6a4ff:     byte[] fullKey = new byte[getKeySizeInBytes()];
1:cd6a4ff:     int copyIndex = 0;
1:cd6a4ff:     for (int i = 0; i < key.length; i++) {
1:cd6a4ff:       System.arraycopy(key[i], 0, fullKey, copyIndex, key[i].length);
1:cd6a4ff:       copyIndex += key[i].length;
1:cd6a4ff:     }
1:cd6a4ff:     return getKeyArray(fullKey);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[] getKeyByteArray(byte[][] key) {
1:cd6a4ff:     byte[] fullKey = new byte[getKeySizeInBytes()];
1:cd6a4ff:     int copyIndex = 0;
1:cd6a4ff:     for (int i = 0; i < key.length; i++) {
1:cd6a4ff:       System.arraycopy(key[i], 0, fullKey, copyIndex, key[i].length);
1:cd6a4ff:       copyIndex += key[i].length;
1:cd6a4ff:     }
1:cd6a4ff:     return fullKey;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int[] getBlockKeySize() {
1:cd6a4ff:     return blockKeySize;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int getKeySizeByBlock(int[] blockIndexes) {
1:cd6a4ff:     Set<Integer> selectedRanges = new HashSet<>();
1:cd6a4ff:     for (int i = 0; i < blockIndexes.length; i++) {
1:cd6a4ff:       int[] byteRange = byteRangesForKeys[blockIndexes[i]];
1:cd6a4ff:       for (int j = byteRange[0]; j <= byteRange[1]; j++) {
1:cd6a4ff:         selectedRanges.add(j);
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return selectedRanges.size();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public boolean equals(Object obj) {
1:256dbed:     if (!(obj instanceof MultiDimKeyVarLengthVariableSplitGenerator)) {
1:cd6a4ff:       return false;
1:cd6a4ff:     }
1:cd6a4ff:     MultiDimKeyVarLengthVariableSplitGenerator o = (MultiDimKeyVarLengthVariableSplitGenerator)obj;
1:cd6a4ff:     return Arrays.equals(o.dimensionsToSplit, dimensionsToSplit) && super.equals(obj);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int hashCode() {
1:cd6a4ff:     return super.hashCode() + Arrays.hashCode(dimensionsToSplit);
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:910d496
/////////////////////////////////////////////////////////////////////////
1:       List<Integer> range = new ArrayList<Integer>(splitLocal);
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:     if (!(obj instanceof MultiDimKeyVarLengthVariableSplitGenerator)) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (Objects.equals(splits[j - 1].get(splits[j - 1].size() - 1), splits[j].get(0))) {
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.keygenerator.columnar.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.TreeSet;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: import org.apache.carbondata.core.keygenerator.columnar.ColumnarSplitter;
1: import org.apache.carbondata.core.keygenerator.mdkey.MultiDimKeyVarLengthGenerator;
1: 
1: public class MultiDimKeyVarLengthVariableSplitGenerator extends MultiDimKeyVarLengthGenerator
1:     implements ColumnarSplitter {
1: 
0:   /**
1:    *
1:    */
1:   private static final long serialVersionUID = 1L;
1: 
1:   private int[] dimensionsToSplit;
1: 
1:   private int[] blockKeySize;
1: 
1:   public MultiDimKeyVarLengthVariableSplitGenerator(int[] lens, int[] dimSplit) {
1:     super(lens);
1:     this.dimensionsToSplit = dimSplit;
1:     initialise();
1: 
1:   }
1: 
1:   private void initialise() {
1:     int s = 0;
1:     List<Set<Integer>> splitList =
1:         new ArrayList<Set<Integer>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:     Set<Integer> split = new TreeSet<Integer>();
1:     splitList.add(split);
1:     int dimSplitIndx = 0;
1: 
1:     for (int i = 0; i < byteRangesForKeys.length; i++) {
1:       if (s == dimensionsToSplit[dimSplitIndx]) {
1:         s = 0;
1:         split = new TreeSet<Integer>();
1:         splitList.add(split);
1:         dimSplitIndx++;
1:       }
1:       for (int j = 0; j < byteRangesForKeys[i].length; j++) {
1:         for (int j2 = byteRangesForKeys[i][0]; j2 <= byteRangesForKeys[i][1]; j2++) {
1:           split.add(j2);
1:         }
1:       }
1:       s++;
1: 
1:     }
1:     List<Integer>[] splits = new List[splitList.size()];
1:     int i = 0;
1:     for (Set<Integer> splitLocal : splitList) {
0:       List<Integer> range = new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
0:       for (Integer index : splitLocal) {
0:         range.add(index);
1:       }
1:       splits[i++] = range;
1:     }
1:     for (int j = 1; j < splits.length; j++) {
0:       if (splits[j - 1].get(splits[j - 1].size() - 1) == splits[j].get(0)) {
1:         splits[j].remove(0);
1:       }
1:     }
1:     int[][] splitDimArray = new int[splits.length][];
1:     for (int j = 0; j < splits.length; j++) {
1:       int[] a = convertToArray(splits[j]);
1:       splitDimArray[j] = a.length > 0 ? new int[] { a[0], a[a.length - 1] } : a;
1:     }
1: 
1:     int[][] dimBlockArray = new int[byteRangesForKeys.length][];
1:     Set<Integer>[] dimBlockSet = new Set[dimBlockArray.length];
1:     for (int k = 0; k < byteRangesForKeys.length; k++) {
1:       int[] dimRange = byteRangesForKeys[k];
1:       Set<Integer> dimBlockPosSet = new TreeSet<Integer>();
1:       dimBlockSet[k] = dimBlockPosSet;
1:       for (int j = 0; j < splitDimArray.length; j++) {
1:         if (dimRange[0] >= splitDimArray[j][0] && dimRange[0] <= splitDimArray[j][1]) {
1:           dimBlockPosSet.add(j);
1:         }
1:         if (dimRange[1] >= splitDimArray[j][0] && dimRange[1] <= splitDimArray[j][1]) {
1:           dimBlockPosSet.add(j);
1:         }
1:       }
1: 
1:     }
1: 
1:     for (int j = 0; j < dimBlockSet.length; j++) {
1:       dimBlockArray[j] = convertToArray(dimBlockSet[j]);
1:     }
1: 
0:     int[][] splitDimArrayLocalIndexes = new int[splitDimArray.length][];
0:     for (int j = 0; j < splitDimArrayLocalIndexes.length; j++) {
0:       splitDimArrayLocalIndexes[j] = splitDimArray[j].length > 0 ?
0:           new int[] { 0, splitDimArray[j][1] - splitDimArray[j][0] } :
0:           new int[0];
1:     }
1: 
0:     int[][][] byteRangesForDims = new int[byteRangesForKeys.length][][];
0:     for (int j = 0; j < byteRangesForKeys.length; j++) {
0:       if (dimBlockArray[j].length > 1) {
0:         int[] bArray1 = splitDimArrayLocalIndexes[dimBlockArray[j][0]];
0:         byteRangesForDims[j] = new int[2][2];
0:         byteRangesForDims[j][0] =
0:             new int[] { bArray1[bArray1.length - 1], bArray1[bArray1.length - 1] };
0:         byteRangesForDims[j][1] = new int[] { 0,
0:             (byteRangesForKeys[j][byteRangesForKeys[j].length - 1] - byteRangesForKeys[j][0]) - 1 };
0:       } else {
0:         byteRangesForDims[j] = new int[1][1];
0:         int[] bArray1 = splitDimArray[dimBlockArray[j][0]];
0:         byteRangesForDims[j][0] = new int[] { byteRangesForKeys[j][0] - bArray1[0],
0:             byteRangesForKeys[j][1] - bArray1[0] };
1:       }
1:     }
1:     blockKeySize = new int[splitDimArray.length];
1: 
1:     for (int j = 0; j < blockKeySize.length; j++) {
1:       blockKeySize[j] =
1:           splitDimArray[j].length > 0 ? splitDimArray[j][1] - splitDimArray[j][0] + 1 : 0;
1:     }
1: 
1:   }
1: 
1:   private int[] convertToArray(List<Integer> list) {
1:     int[] ints = new int[list.size()];
1:     for (int i = 0; i < ints.length; i++) {
1:       ints[i] = list.get(i);
1:     }
1:     return ints;
1:   }
1: 
1:   private int[] convertToArray(Set<Integer> set) {
1:     int[] ints = new int[set.size()];
1:     int i = 0;
1:     for (Iterator iterator = set.iterator(); iterator.hasNext(); ) {
1:       ints[i++] = (Integer) iterator.next();
1:     }
1:     return ints;
1:   }
1: 
1:   @Override public byte[][] splitKey(byte[] key) {
1:     byte[][] split = new byte[blockKeySize.length][];
1:     int copyIndex = 0;
1:     for (int i = 0; i < split.length; i++) {
1:       split[i] = new byte[blockKeySize[i]];
1:       System.arraycopy(key, copyIndex, split[i], 0, split[i].length);
1:       copyIndex += blockKeySize[i];
1:     }
1:     return split;
1:   }
1: 
1:   @Override public byte[][] generateAndSplitKey(long[] keys) throws KeyGenException {
1:     return splitKey(generateKey(keys));
1:   }
1: 
1:   @Override public byte[][] generateAndSplitKey(int[] keys) throws KeyGenException {
1:     return splitKey(generateKey(keys));
1:   }
1: 
1:   @Override public long[] getKeyArray(byte[][] key) {
1:     byte[] fullKey = new byte[getKeySizeInBytes()];
1:     int copyIndex = 0;
1:     for (int i = 0; i < key.length; i++) {
1:       System.arraycopy(key[i], 0, fullKey, copyIndex, key[i].length);
1:       copyIndex += key[i].length;
1:     }
1:     return getKeyArray(fullKey);
1:   }
1: 
1:   @Override public byte[] getKeyByteArray(byte[][] key) {
1:     byte[] fullKey = new byte[getKeySizeInBytes()];
1:     int copyIndex = 0;
1:     for (int i = 0; i < key.length; i++) {
1:       System.arraycopy(key[i], 0, fullKey, copyIndex, key[i].length);
1:       copyIndex += key[i].length;
1:     }
1:     return fullKey;
1:   }
1: 
0:   @Override public byte[] getKeyByteArray(byte[][] key, int[] columnIndexes) {
0:     return null;
1:   }
1: 
0:   @Override public long[] getKeyArray(byte[][] key, int[] columnIndexes) {
0:     return null;
1:   }
1: 
1:   public int[] getBlockKeySize() {
1:     return blockKeySize;
1:   }
1: 
1:   @Override public int getKeySizeByBlock(int[] blockIndexes) {
1:     Set<Integer> selectedRanges = new HashSet<>();
1:     for (int i = 0; i < blockIndexes.length; i++) {
1:       int[] byteRange = byteRangesForKeys[blockIndexes[i]];
1:       for (int j = byteRange[0]; j <= byteRange[1]; j++) {
1:         selectedRanges.add(j);
1:       }
1:     }
1:     return selectedRanges.size();
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
0:     if(!(obj instanceof MultiDimKeyVarLengthVariableSplitGenerator)) {
1:       return false;
1:     }
1:     MultiDimKeyVarLengthVariableSplitGenerator o = (MultiDimKeyVarLengthVariableSplitGenerator)obj;
1:     return Arrays.equals(o.dimensionsToSplit, dimensionsToSplit) && super.equals(obj);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return super.hashCode() + Arrays.hashCode(dimensionsToSplit);
1:   }
1: }
============================================================================