1:11661eb: /*
1:11661eb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11661eb:  * contributor license agreements.  See the NOTICE file distributed with
1:11661eb:  * this work for additional information regarding copyright ownership.
1:11661eb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11661eb:  * (the "License"); you may not use this file except in compliance with
1:11661eb:  * the License.  You may obtain a copy of the License at
1:11661eb:  *
1:11661eb:  *    http://www.apache.org/licenses/LICENSE-2.0
1:11661eb:  *
1:11661eb:  * Unless required by applicable law or agreed to in writing, software
1:11661eb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:11661eb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11661eb:  * See the License for the specific language governing permissions and
1:11661eb:  * limitations under the License.
1:11661eb:  */
1:11661eb: 
1:11661eb: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1:11661eb: 
1:11661eb: import java.io.IOException;
1:11661eb: import java.util.ArrayList;
1:11661eb: import java.util.List;
1:11661eb: import java.util.Map;
1:11661eb: 
1:11661eb: import org.apache.carbondata.core.datastore.compression.Compressor;
1:11661eb: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:11661eb: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:11661eb: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1:11661eb: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1:11661eb: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1:11661eb: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1:11661eb: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:11661eb: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:11661eb: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:11661eb: import org.apache.carbondata.core.memory.MemoryException;
1:11661eb: import org.apache.carbondata.core.metadata.datatype.DataType;
1:11661eb: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:11661eb: import org.apache.carbondata.format.Encoding;
1:11661eb: 
1:11661eb: /**
1:11661eb:  * Codec for floating point (float, double) data type page.
1:11661eb:  * This codec will calculate delta of page max value and page value and converts to Integer value,
1:11661eb:  * and do type casting of the diff to make storage minimum.
1:11661eb:  */
1:11661eb: public class AdaptiveDeltaFloatingCodec extends AdaptiveCodec {
1:11661eb: 
1:11661eb:   private ColumnPage encodedPage;
1:11661eb:   private Double factor;
1:11661eb:   private long max;
1:11661eb: 
1:11661eb:   public static ColumnPageCodec newInstance(DataType srcDataType, DataType targetDataType,
1:11661eb:       SimpleStatsResult stats) {
1:11661eb:     return new AdaptiveDeltaFloatingCodec(srcDataType, targetDataType, stats);
1:11661eb:   }
1:11661eb: 
1:11661eb:   public AdaptiveDeltaFloatingCodec(DataType srcDataType, DataType targetDataType,
1:11661eb:       SimpleStatsResult stats) {
1:11661eb:     super(srcDataType, targetDataType, stats);
1:11661eb:     this.factor = Math.pow(10, stats.getDecimalCount());
1:11661eb:     this.max = (long) (Math.pow(10, stats.getDecimalCount()) * (double) stats.getMax());
1:11661eb:   }
1:11661eb: 
1:11661eb:   @Override
1:11661eb:   public String getName() {
1:11661eb:     return "AdaptiveDeltaFloatingCodec";
1:11661eb:   }
1:11661eb: 
1:11661eb:   @Override
1:11661eb:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:11661eb:     return new ColumnPageEncoder() {
1:11661eb:       @Override
1:11661eb:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:11661eb:         if (encodedPage != null) {
1:11661eb:           throw new IllegalStateException("already encoded");
1:11661eb:         }
1:8f08c4a:         encodedPage = ColumnPage.newPage(
1:8f08c4a:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:8f08c4a:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:11661eb:             input.getPageSize());
1:11661eb:         input.convertValue(converter);
1:8f08c4a:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:             input.getColumnCompressorName());
1:11661eb:         byte[] result = encodedPage.compress(compressor);
1:11661eb:         encodedPage.freeMemory();
1:11661eb:         return result;
1:11661eb:       }
1:11661eb: 
1:11661eb:       @Override
1:11661eb:       protected List<Encoding> getEncodingList() {
1:11661eb:         List<Encoding> encodings = new ArrayList<Encoding>();
1:11661eb:         encodings.add(Encoding.ADAPTIVE_DELTA_FLOATING);
1:11661eb:         return encodings;
1:11661eb:       }
1:11661eb: 
1:11661eb:       @Override
1:11661eb:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:11661eb:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
1:8f08c4a:             inputPage.getColumnCompressorName());
1:11661eb:       }
1:11661eb: 
1:11661eb:     };
1:11661eb:   }
1:11661eb: 
1:11661eb:   @Override
1:11661eb:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:11661eb:     return new ColumnPageDecoder() {
1:11661eb:       @Override
1:11661eb:       public ColumnPage decode(byte[] input, int offset, int length)
1:11661eb:           throws MemoryException, IOException {
1:43285bb:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length, false);
1:11661eb:         return LazyColumnPage.newPage(page, converter);
1:11661eb:       }
1:43285bb: 
1:43285bb:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:43285bb:           throws MemoryException, IOException {
1:43285bb:         return decode(input, offset, length);
1:43285bb:       }
1:11661eb:     };
1:11661eb:   }
1:11661eb: 
1:11661eb:   // encoded value = (10 power of decimal) * (page value)
1:11661eb:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, byte value) {
1:11661eb:       // this codec is for floating point type only
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, short value) {
1:11661eb:       // this codec is for floating point type only
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, int value) {
1:11661eb:       // this codec is for floating point type only
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, long value) {
1:11661eb:       // this codec is for floating point type only
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, float value) {
1:11661eb:       if (targetDataType.equals(DataTypes.BYTE)) {
2:11661eb:         encodedPage.putByte(rowId, (byte) (max - (value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.SHORT)) {
2:11661eb:         encodedPage.putShort(rowId, (short) (max - (value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.SHORT_INT)) {
2:11661eb:         encodedPage.putShortInt(rowId, (int) (max - (value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.INT)) {
2:11661eb:         encodedPage.putInt(rowId, (int) (max - (value * factor)));
1:11661eb:       } else {
1:11661eb:         throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:       }
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public void encode(int rowId, double value) {
1:11661eb:       if (targetDataType.equals(DataTypes.BYTE)) {
1:08b8af7:         encodedPage.putByte(rowId, (byte) (max - Math.round(value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.SHORT)) {
1:08b8af7:         encodedPage.putShort(rowId, (short) (max - Math.round(value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.SHORT_INT)) {
1:08b8af7:         encodedPage.putShortInt(rowId, (int) (max - Math.round(value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.INT)) {
1:08b8af7:         encodedPage.putInt(rowId, (int) (max - Math.round(value * factor)));
1:11661eb:       } else if (targetDataType.equals(DataTypes.DOUBLE)) {
1:11661eb:         encodedPage.putDouble(rowId, value);
1:11661eb:       } else {
1:11661eb:         throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:       }
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public long decodeLong(byte value) {
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public long decodeLong(short value) {
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public long decodeLong(int value) {
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(byte value) {
1:11661eb:       return (max - value) / factor;
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(short value) {
1:11661eb:       return (max - value) / factor;
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(int value) {
1:11661eb:       return (max - value) / factor;
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(long value) {
1:11661eb:       return (max - value) / factor;
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(float value) {
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb: 
1:11661eb:     @Override
1:11661eb:     public double decodeDouble(double value) {
1:11661eb:       throw new RuntimeException("internal error: " + debugInfo());
1:11661eb:     }
1:11661eb:   };
1:11661eb: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:         encodedPage = ColumnPage.newPage(
1:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:             input.getColumnCompressorName());
/////////////////////////////////////////////////////////////////////////
1:             inputPage.getColumnCompressorName());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length, false);
1: 
1:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:           throws MemoryException, IOException {
1:         return decode(input, offset, length);
1:       }
author:sounakr
-------------------------------------------------------------------------------
commit:08b8af7
/////////////////////////////////////////////////////////////////////////
1:         encodedPage.putByte(rowId, (byte) (max - Math.round(value * factor)));
1:         encodedPage.putShort(rowId, (short) (max - Math.round(value * factor)));
1:         encodedPage.putShortInt(rowId, (int) (max - Math.round(value * factor)));
1:         encodedPage.putInt(rowId, (int) (max - Math.round(value * factor)));
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:11661eb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageCodec;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.format.Encoding;
1: 
1: /**
1:  * Codec for floating point (float, double) data type page.
1:  * This codec will calculate delta of page max value and page value and converts to Integer value,
1:  * and do type casting of the diff to make storage minimum.
1:  */
1: public class AdaptiveDeltaFloatingCodec extends AdaptiveCodec {
1: 
1:   private ColumnPage encodedPage;
1:   private Double factor;
1:   private long max;
1: 
1:   public static ColumnPageCodec newInstance(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
1:     return new AdaptiveDeltaFloatingCodec(srcDataType, targetDataType, stats);
1:   }
1: 
1:   public AdaptiveDeltaFloatingCodec(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
1:     super(srcDataType, targetDataType, stats);
1:     this.factor = Math.pow(10, stats.getDecimalCount());
1:     this.max = (long) (Math.pow(10, stats.getDecimalCount()) * (double) stats.getMax());
1:   }
1: 
1:   @Override
1:   public String getName() {
1:     return "AdaptiveDeltaFloatingCodec";
1:   }
1: 
1:   @Override
1:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
0:     final Compressor compressor = CompressorFactory.getInstance().getCompressor();
1:     return new ColumnPageEncoder() {
1:       @Override
1:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:         if (encodedPage != null) {
1:           throw new IllegalStateException("already encoded");
1:         }
0:         encodedPage = ColumnPage.newPage(input.getColumnSpec(), targetDataType,
1:             input.getPageSize());
1:         input.convertValue(converter);
1:         byte[] result = encodedPage.compress(compressor);
1:         encodedPage.freeMemory();
1:         return result;
1:       }
1: 
1:       @Override
1:       protected List<Encoding> getEncodingList() {
1:         List<Encoding> encodings = new ArrayList<Encoding>();
1:         encodings.add(Encoding.ADAPTIVE_DELTA_FLOATING);
1:         return encodings;
1:       }
1: 
1:       @Override
1:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
0:             compressor.getName());
1:       }
1: 
1:     };
1:   }
1: 
1:   @Override
1:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:     return new ColumnPageDecoder() {
1:       @Override
1:       public ColumnPage decode(byte[] input, int offset, int length)
1:           throws MemoryException, IOException {
0:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length);
1:         return LazyColumnPage.newPage(page, converter);
1:       }
1:     };
1:   }
1: 
1:   // encoded value = (10 power of decimal) * (page value)
1:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:     @Override
1:     public void encode(int rowId, byte value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, short value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, int value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, long value) {
1:       // this codec is for floating point type only
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, float value) {
1:       if (targetDataType.equals(DataTypes.BYTE)) {
1:         encodedPage.putByte(rowId, (byte) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.SHORT)) {
1:         encodedPage.putShort(rowId, (short) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.SHORT_INT)) {
1:         encodedPage.putShortInt(rowId, (int) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.INT)) {
1:         encodedPage.putInt(rowId, (int) (max - (value * factor)));
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, double value) {
1:       if (targetDataType.equals(DataTypes.BYTE)) {
1:         encodedPage.putByte(rowId, (byte) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.SHORT)) {
1:         encodedPage.putShort(rowId, (short) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.SHORT_INT)) {
1:         encodedPage.putShortInt(rowId, (int) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.INT)) {
1:         encodedPage.putInt(rowId, (int) (max - (value * factor)));
1:       } else if (targetDataType.equals(DataTypes.DOUBLE)) {
1:         encodedPage.putDouble(rowId, value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public long decodeLong(byte value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public long decodeLong(short value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public long decodeLong(int value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public double decodeDouble(byte value) {
1:       return (max - value) / factor;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(short value) {
1:       return (max - value) / factor;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(int value) {
1:       return (max - value) / factor;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(long value) {
1:       return (max - value) / factor;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(float value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public double decodeDouble(double value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1:   };
1: }
============================================================================