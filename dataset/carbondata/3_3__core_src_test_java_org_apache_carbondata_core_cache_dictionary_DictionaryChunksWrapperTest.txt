1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.util.ArrayList;
1:cd6a4ff: import java.util.List;
1:cd6a4ff: 
1:cd6a4ff: import org.junit.After;
1:cd6a4ff: import org.junit.Assert;
1:cd6a4ff: import org.junit.Before;
1:cd6a4ff: import org.junit.Test;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Test class for dictionary chuck wrapper
1:cd6a4ff:  */
1:cd6a4ff: public class DictionaryChunksWrapperTest {
1:cd6a4ff: 
1:cd6a4ff:   private List<List<byte[]>> dictionaryChuncks;
1:cd6a4ff:   private DictionaryChunksWrapper dictionaryChunksWrapper;
1:cd6a4ff:   private List<byte[]> expectedData;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * init resources
1:cd6a4ff:    *
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Before public void setUp() throws Exception {
1:cd6a4ff:     dictionaryChuncks = prepareData();
1:cd6a4ff:     expectedData = prepareExpectedData();
1:cd6a4ff:     dictionaryChunksWrapper = new DictionaryChunksWrapper(dictionaryChuncks);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method returns the list<List<byte[]>>
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private List<List<byte[]>> prepareData() {
1:cd6a4ff:     List<List<byte[]>> dictionaryChunks = new ArrayList<>();
1:cd6a4ff:     List<byte[]> chunks = new ArrayList<>();
1:cd6a4ff:     chunks.add("d".getBytes());
1:cd6a4ff:     chunks.add("b".getBytes());
1:cd6a4ff:     chunks.add("c".getBytes());
1:cd6a4ff:     chunks.add("a".getBytes());
1:6828c4f:     dictionaryChunks.add(new ArrayList<byte[]>());
1:cd6a4ff:     dictionaryChunks.add(chunks);
1:cd6a4ff:     return dictionaryChunks;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   private List<byte[]> prepareExpectedData() {
1:cd6a4ff:     List<byte[]> chunks = new ArrayList<>();
1:cd6a4ff:     chunks.add("d".getBytes());
1:cd6a4ff:     chunks.add("b".getBytes());
1:cd6a4ff:     chunks.add("c".getBytes());
1:cd6a4ff:     chunks.add("a".getBytes());
1:cd6a4ff:     return chunks;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * release resources
1:cd6a4ff:    *
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @After public void tearDown() throws Exception {
1:cd6a4ff:     dictionaryChunksWrapper = null;
1:cd6a4ff:     expectedData = null;
1:cd6a4ff:     dictionaryChuncks = null;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The test the next method
1:cd6a4ff:    *
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Test public void testNext() throws Exception {
1:cd6a4ff:     List<byte[]> actual = new ArrayList<>();
1:cd6a4ff:     while (dictionaryChunksWrapper.hasNext()) {
1:cd6a4ff:       actual.add(dictionaryChunksWrapper.next());
1:cd6a4ff:     }
1:cd6a4ff:     Assert.assertEquals(expectedData.size(), actual.size());
1:cd6a4ff:     for (int i = 0; i < expectedData.size(); i++) {
1:cd6a4ff:       Assert.assertArrayEquals(actual.get(i), expectedData.get(i));
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * The method validate the size
1:cd6a4ff:    *
1:cd6a4ff:    * @throws Exception
1:cd6a4ff:    */
1:cd6a4ff:   @Test public void getSize() throws Exception {
1:cd6a4ff:     int size = dictionaryChunksWrapper.getSize();
1:6828c4f:     Assert.assertEquals(4, size);
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test(expected = UnsupportedOperationException.class) public void testRemove() {
1:6828c4f:     dictionaryChunksWrapper.remove();
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kunal642
-------------------------------------------------------------------------------
commit:6828c4f
/////////////////////////////////////////////////////////////////////////
1:     dictionaryChunks.add(new ArrayList<byte[]>());
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertEquals(4, size);
1:   }
1: 
1:   @Test(expected = UnsupportedOperationException.class) public void testRemove() {
1:     dictionaryChunksWrapper.remove();
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test class for dictionary chuck wrapper
1:  */
1: public class DictionaryChunksWrapperTest {
1: 
1:   private List<List<byte[]>> dictionaryChuncks;
1:   private DictionaryChunksWrapper dictionaryChunksWrapper;
1:   private List<byte[]> expectedData;
1: 
1:   /**
1:    * init resources
1:    *
1:    * @throws Exception
1:    */
1:   @Before public void setUp() throws Exception {
1:     dictionaryChuncks = prepareData();
1:     expectedData = prepareExpectedData();
1:     dictionaryChunksWrapper = new DictionaryChunksWrapper(dictionaryChuncks);
1:   }
1: 
1:   /**
1:    * The method returns the list<List<byte[]>>
1:    *
1:    * @return
1:    */
1:   private List<List<byte[]>> prepareData() {
1:     List<List<byte[]>> dictionaryChunks = new ArrayList<>();
1:     List<byte[]> chunks = new ArrayList<>();
1:     chunks.add("d".getBytes());
1:     chunks.add("b".getBytes());
1:     chunks.add("c".getBytes());
1:     chunks.add("a".getBytes());
1:     dictionaryChunks.add(chunks);
1:     return dictionaryChunks;
1:   }
1: 
1:   private List<byte[]> prepareExpectedData() {
1:     List<byte[]> chunks = new ArrayList<>();
1:     chunks.add("d".getBytes());
1:     chunks.add("b".getBytes());
1:     chunks.add("c".getBytes());
1:     chunks.add("a".getBytes());
1:     return chunks;
1:   }
1: 
1:   /**
1:    * release resources
1:    *
1:    * @throws Exception
1:    */
1:   @After public void tearDown() throws Exception {
1:     dictionaryChunksWrapper = null;
1:     expectedData = null;
1:     dictionaryChuncks = null;
1:   }
1: 
1:   /**
1:    * The test the next method
1:    *
1:    * @throws Exception
1:    */
1:   @Test public void testNext() throws Exception {
1:     List<byte[]> actual = new ArrayList<>();
1:     while (dictionaryChunksWrapper.hasNext()) {
1:       actual.add(dictionaryChunksWrapper.next());
1:     }
1:     Assert.assertEquals(expectedData.size(), actual.size());
1:     for (int i = 0; i < expectedData.size(); i++) {
1:       Assert.assertArrayEquals(actual.get(i), expectedData.get(i));
1:     }
1:   }
1: 
1:   /**
1:    * The method validate the size
1:    *
1:    * @throws Exception
1:    */
1:   @Test public void getSize() throws Exception {
1:     int size = dictionaryChunksWrapper.getSize();
0:     Assert.assertEquals("", 4, size);
1:   }
1: }
============================================================================