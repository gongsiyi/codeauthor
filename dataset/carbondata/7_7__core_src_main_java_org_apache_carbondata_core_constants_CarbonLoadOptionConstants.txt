1:39644b5: /*
1:39644b5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39644b5:  * contributor license agreements.  See the NOTICE file distributed with
1:39644b5:  * this work for additional information regarding copyright ownership.
1:39644b5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39644b5:  * (the "License"); you may not use this file except in compliance with
1:39644b5:  * the License.  You may obtain a copy of the License at
1:39644b5:  *
1:39644b5:  *    http://www.apache.org/licenses/LICENSE-2.0
1:39644b5:  *
1:39644b5:  * Unless required by applicable law or agreed to in writing, software
1:39644b5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39644b5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39644b5:  * See the License for the specific language governing permissions and
1:39644b5:  * limitations under the License.
1:39644b5:  */
1:39644b5: 
1:39644b5: package org.apache.carbondata.core.constants;
1:39644b5: 
1:39644b5: import org.apache.carbondata.core.util.CarbonProperty;
1:39644b5: 
1:39644b5: /**
1:39644b5:  * Load options constant
1:39644b5:  */
1:39644b5: public final class CarbonLoadOptionConstants {
1:39644b5:   /**
1:39644b5:    * option to enable and disable the logger
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE =
1:39644b5:       "carbon.options.bad.records.logger.enable";
1:39644b5: 
1:39644b5:   public static String CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE_DEFAULT = "false";
1:39644b5:   /**
1:39644b5:    * property to pass the bad records action
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_BAD_RECORDS_ACTION =
1:39644b5:       "carbon.options.bad.records.action";
1:39644b5:   /**
1:39644b5:    * load option to specify weather empty data to be treated as bad record
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD =
1:39644b5:       "carbon.options.is.empty.data.bad.record";
1:39644b5:   public static final String CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD_DEFAULT = "false";
1:39644b5: 
1:39644b5:   /**
1:40f0608:    * option to specify whether to skip empty lines in load
1:40f0608:    */
1:40f0608:   @CarbonProperty public static final String CARBON_OPTIONS_SKIP_EMPTY_LINE =
1:40f0608:       "carbon.options.is.empty.data.bad.record";
1:40f0608: 
1:40f0608:   /**
1:85dc4ff:    * option to specify the dateFormat in load option for all date columns in table
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_DATEFORMAT =
1:39644b5:       "carbon.options.dateformat";
1:39644b5:   public static final String CARBON_OPTIONS_DATEFORMAT_DEFAULT = "";
1:85dc4ff: 
1:85dc4ff:   /**
1:85dc4ff:    * option to specify the timestampFormat in load option for all timestamp columns in table
1:85dc4ff:    */
1:85dc4ff:   @CarbonProperty
1:85dc4ff:   public static final String CARBON_OPTIONS_TIMESTAMPFORMAT =
1:85dc4ff:           "carbon.options.timestampformat";
1:85dc4ff:   public static final String CARBON_OPTIONS_TIMESTAMPFORMAT_DEFAULT = "";
1:39644b5:   /**
1:39644b5:    * option to specify the sort_scope
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_SORT_SCOPE =
1:39644b5:       "carbon.options.sort.scope";
1:39644b5:   /**
1:39644b5:    * option to specify the batch sort size inmb
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_BATCH_SORT_SIZE_INMB =
1:39644b5:       "carbon.options.batch.sort.size.inmb";
1:39644b5:   /**
1:39644b5:    * Option to enable/ disable single_pass
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_SINGLE_PASS =
1:39644b5:       "carbon.options.single.pass";
1:39644b5:   public static final String CARBON_OPTIONS_SINGLE_PASS_DEFAULT = "false";
1:39644b5: 
1:39644b5:   /**
1:39644b5:    * specify bad record path option
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_BAD_RECORD_PATH =
1:39644b5:       "carbon.options.bad.record.path";
1:39644b5:   /**
1:39644b5:    * specify bad record path option
1:39644b5:    */
1:39644b5:   @CarbonProperty
1:39644b5:   public static final String CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS =
1:39644b5:       "carbon.options.global.sort.partitions";
1:39644b5: 
1:2e04c35:   /**
1:6f10c41:    * specify serialization null format, it is used describe which character in side the csv file
1:6f10c41:    * is treated as null.
1:6f10c41:    */
1:6f10c41:   @CarbonProperty
1:6f10c41:   public static final String CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT =
1:6f10c41:       "carbon.options.serialization.null.format";
1:6f10c41: 
1:6f10c41:   public static final String CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT_DEFAULT = "\\N";
1:6f10c41: 
1:6f10c41:   /**
1:2e04c35:    *  Max number of dictionary values that can be given with external dictionary
1:2e04c35:    */
1:2e04c35:   public static final int MAX_EXTERNAL_DICTIONARY_SIZE = 10000000;
1:2e04c35: 
1:9a423c2:   /**
1:9a423c2:    * enable block size based block allocation while loading data. By default, carbondata assigns
1:9a423c2:    * blocks to node based on block number. If this option is set to `true`, carbondata will
1:9a423c2:    * consider block size first and make sure that all the nodes will process almost equal size of
1:9a423c2:    * data. This option is especially useful when you encounter skewed data.
1:9a423c2:    */
1:9a423c2:   @CarbonProperty
1:9a423c2:   public static final String ENABLE_CARBON_LOAD_SKEWED_DATA_OPTIMIZATION
1:9a423c2:       = "carbon.load.skewedDataOptimization.enabled";
1:9a423c2:   public static final String ENABLE_CARBON_LOAD_SKEWED_DATA_OPTIMIZATION_DEFAULT = "false";
1:d5396b1: 
1:d5396b1:   /**
1:d5396b1:    * field delimiter for each field in one bound
1:d5396b1:    */
1:d5396b1:   public static final String SORT_COLUMN_BOUNDS_FIELD_DELIMITER = ",";
1:d5396b1: 
1:d5396b1:   /**
1:d5396b1:    * row delimiter for each sort column bounds
1:d5396b1:    */
1:d5396b1:   public static final String SORT_COLUMN_BOUNDS_ROW_DELIMITER = ";";
1:4119062: 
1:4119062:   @CarbonProperty
1:4119062:   public static final String ENABLE_CARBON_LOAD_DIRECT_WRITE_HDFS
1:4119062:       = "carbon.load.directWriteHdfs.enabled";
1:4119062:   public static final String ENABLE_CARBON_LOAD_DIRECT_WRITE_HDFS_DEFAULT = "false";
1:b439b00: 
1:b439b00:   /**
1:b439b00:    * If the sort memory is insufficient, spill inmemory pages to disk.
1:b439b00:    * The total amount of pages is at most the specified percentage of total sort memory. Default
1:b439b00:    * value 0 means that no pages will be spilled and the newly incoming pages will be spilled,
1:8cb37dd:    * whereas value 100 means that all pages will be spilled and newly incoming pages will be loaded
1:8cb37dd:    * into sort memory, valid value is from 0 to 100.
1:b439b00:    */
1:b439b00:   @CarbonProperty
1:b439b00:   public static final String CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE
1:8cb37dd:       = "carbon.load.sortmemory.spill.percentage";
1:b439b00:   public static final String CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE_DEFAULT = "0";
1:685087e: 
1:685087e:   /**
1:685087e:    *  if loading data is too small, the original loading method will produce many small files.
1:685087e:    *  enable set the node load minimum amount of data,avoid producing many small files.
1:685087e:    *  This option is especially useful when you encounter a lot of small amounts of data.
1:685087e:    */
1:685087e:   @CarbonProperty
1:685087e:   public static final String ENABLE_CARBON_LOAD_NODE_DATA_MIN_SIZE
1:685087e:       = "carbon.load.min.size.enabled";
1:685087e:   public static final String ENABLE_CARBON_LOAD_NODE_DATA_MIN_SIZE_DEFAULT = "false";
1:39644b5: }
============================================================================
author:ndwangsen
-------------------------------------------------------------------------------
commit:8cb37dd
/////////////////////////////////////////////////////////////////////////
1:    * whereas value 100 means that all pages will be spilled and newly incoming pages will be loaded
1:    * into sort memory, valid value is from 0 to 100.
1:       = "carbon.load.sortmemory.spill.percentage";
commit:685087e
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    *  if loading data is too small, the original loading method will produce many small files.
1:    *  enable set the node load minimum amount of data,avoid producing many small files.
1:    *  This option is especially useful when you encounter a lot of small amounts of data.
1:    */
1:   @CarbonProperty
1:   public static final String ENABLE_CARBON_LOAD_NODE_DATA_MIN_SIZE
1:       = "carbon.load.min.size.enabled";
1:   public static final String ENABLE_CARBON_LOAD_NODE_DATA_MIN_SIZE_DEFAULT = "false";
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b439b00
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * If the sort memory is insufficient, spill inmemory pages to disk.
1:    * The total amount of pages is at most the specified percentage of total sort memory. Default
1:    * value 0 means that no pages will be spilled and the newly incoming pages will be spilled,
0:    * whereas value 1 means that all pages will be spilled and newly incoming pages will be loaded
0:    * into sort memory.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE
0:       = "carbon.load.sortMemory.spill.percentage";
1:   public static final String CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE_DEFAULT = "0";
commit:4119062
/////////////////////////////////////////////////////////////////////////
1: 
1:   @CarbonProperty
1:   public static final String ENABLE_CARBON_LOAD_DIRECT_WRITE_HDFS
1:       = "carbon.load.directWriteHdfs.enabled";
1:   public static final String ENABLE_CARBON_LOAD_DIRECT_WRITE_HDFS_DEFAULT = "false";
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * field delimiter for each field in one bound
1:    */
1:   public static final String SORT_COLUMN_BOUNDS_FIELD_DELIMITER = ",";
1: 
1:   /**
1:    * row delimiter for each sort column bounds
1:    */
1:   public static final String SORT_COLUMN_BOUNDS_ROW_DELIMITER = ";";
commit:9a423c2
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * enable block size based block allocation while loading data. By default, carbondata assigns
1:    * blocks to node based on block number. If this option is set to `true`, carbondata will
1:    * consider block size first and make sure that all the nodes will process almost equal size of
1:    * data. This option is especially useful when you encounter skewed data.
1:    */
1:   @CarbonProperty
1:   public static final String ENABLE_CARBON_LOAD_SKEWED_DATA_OPTIMIZATION
1:       = "carbon.load.skewedDataOptimization.enabled";
1:   public static final String ENABLE_CARBON_LOAD_SKEWED_DATA_OPTIMIZATION_DEFAULT = "false";
author:ravipesala
-------------------------------------------------------------------------------
commit:6f10c41
/////////////////////////////////////////////////////////////////////////
1:    * specify serialization null format, it is used describe which character in side the csv file
1:    * is treated as null.
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT =
1:       "carbon.options.serialization.null.format";
1: 
1:   public static final String CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT_DEFAULT = "\\N";
1: 
1:   /**
author:dhatchayani
-------------------------------------------------------------------------------
commit:40f0608
/////////////////////////////////////////////////////////////////////////
1:    * option to specify whether to skip empty lines in load
1:    */
1:   @CarbonProperty public static final String CARBON_OPTIONS_SKIP_EMPTY_LINE =
1:       "carbon.options.is.empty.data.bad.record";
1: 
1:   /**
author:akashrn5
-------------------------------------------------------------------------------
commit:85dc4ff
/////////////////////////////////////////////////////////////////////////
1:    * option to specify the dateFormat in load option for all date columns in table
1: 
1:   /**
1:    * option to specify the timestampFormat in load option for all timestamp columns in table
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_TIMESTAMPFORMAT =
1:           "carbon.options.timestampformat";
1:   public static final String CARBON_OPTIONS_TIMESTAMPFORMAT_DEFAULT = "";
author:kunal642
-------------------------------------------------------------------------------
commit:2e04c35
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    *  Max number of dictionary values that can be given with external dictionary
1:    */
1:   public static final int MAX_EXTERNAL_DICTIONARY_SIZE = 10000000;
1: 
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:39644b5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.constants;
1: 
1: import org.apache.carbondata.core.util.CarbonProperty;
1: 
1: /**
1:  * Load options constant
1:  */
1: public final class CarbonLoadOptionConstants {
1:   /**
1:    * option to enable and disable the logger
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE =
1:       "carbon.options.bad.records.logger.enable";
1: 
1:   public static String CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE_DEFAULT = "false";
1:   /**
1:    * property to pass the bad records action
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_BAD_RECORDS_ACTION =
1:       "carbon.options.bad.records.action";
1:   /**
1:    * load option to specify weather empty data to be treated as bad record
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD =
1:       "carbon.options.is.empty.data.bad.record";
1:   public static final String CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD_DEFAULT = "false";
1: 
1:   /**
0:    * option to specify the load option
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_DATEFORMAT =
1:       "carbon.options.dateformat";
1:   public static final String CARBON_OPTIONS_DATEFORMAT_DEFAULT = "";
1:   /**
1:    * option to specify the sort_scope
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_SORT_SCOPE =
1:       "carbon.options.sort.scope";
1:   /**
1:    * option to specify the batch sort size inmb
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_BATCH_SORT_SIZE_INMB =
1:       "carbon.options.batch.sort.size.inmb";
1:   /**
1:    * Option to enable/ disable single_pass
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_SINGLE_PASS =
1:       "carbon.options.single.pass";
1:   public static final String CARBON_OPTIONS_SINGLE_PASS_DEFAULT = "false";
1: 
1:   /**
1:    * specify bad record path option
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_BAD_RECORD_PATH =
1:       "carbon.options.bad.record.path";
1:   /**
1:    * specify bad record path option
1:    */
1:   @CarbonProperty
1:   public static final String CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS =
1:       "carbon.options.global.sort.partitions";
1: 
1: }
============================================================================