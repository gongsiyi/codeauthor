1:6828c4f: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:6828c4f:  *
1:6828c4f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6828c4f:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:6828c4f:  */
1:6828c4f: package org.apache.carbondata.core.cache;
1:6828c4f: 
1:6828c4f: import mockit.Mock;
1:6828c4f: import mockit.MockUp;
1:6828c4f: import org.junit.AfterClass;
1:6828c4f: import org.junit.BeforeClass;
1:6828c4f: import org.junit.Test;
1:6828c4f: 
1:6828c4f: import static org.junit.Assert.assertFalse;
1:6828c4f: import static org.junit.Assert.assertNull;
1:6828c4f: import static org.junit.Assert.assertTrue;
1:6828c4f: 
1:6828c4f: public class CarbonLRUCacheTest {
1:6828c4f: 
1:6828c4f:   private static CarbonLRUCache carbonLRUCache;
1:6828c4f:   private static Cacheable cacheable;
1:6828c4f: 
1:6828c4f:   @BeforeClass public static void setUp() {
1:6828c4f:     carbonLRUCache = new CarbonLRUCache("prop1", "2");
1:6828c4f:     cacheable = new MockUp<Cacheable>() {
1:6828c4f:       @SuppressWarnings("unused") @Mock long getMemorySize() {
1:6828c4f:         return 15L;
1:6828c4f:       }
1:6828c4f:     }.getMockInstance();
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testPut() {
1:6828c4f:     boolean result = carbonLRUCache.put("Column1", cacheable, 10L);
1:6828c4f:     assertTrue(result);
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testPutWhenSizeIsNotAvailable() {
1:6828c4f:     boolean result = carbonLRUCache.put("Column2", cacheable, 11111110L);
1:6828c4f:     assertFalse(result);
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testPutWhenKeysHaveToBeRemoved() {
1:6828c4f:     boolean result = carbonLRUCache.put("Column3", cacheable, 2097153L);
1:6828c4f:     assertTrue(result);
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @Test public void testRemove() {
1:6828c4f:     carbonLRUCache.remove("Column2");
1:6828c4f:     assertNull(carbonLRUCache.get("Column2"));
1:6828c4f:   }
1:6828c4f: 
1:6828c4f:   @AfterClass public static void cleanUp() {
1:6828c4f:     carbonLRUCache.clear();
1:6828c4f:     assertNull(carbonLRUCache.get("Column1"));
1:6828c4f:   }
1:6828c4f: 
1:6828c4f: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:kunal642
-------------------------------------------------------------------------------
commit:6828c4f
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.cache;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CarbonLRUCacheTest {
1: 
1:   private static CarbonLRUCache carbonLRUCache;
1:   private static Cacheable cacheable;
1: 
1:   @BeforeClass public static void setUp() {
1:     carbonLRUCache = new CarbonLRUCache("prop1", "2");
1:     cacheable = new MockUp<Cacheable>() {
1:       @SuppressWarnings("unused") @Mock long getMemorySize() {
1:         return 15L;
1:       }
1:     }.getMockInstance();
1:   }
1: 
1:   @Test public void testPut() {
1:     boolean result = carbonLRUCache.put("Column1", cacheable, 10L);
1:     assertTrue(result);
1:   }
1: 
1:   @Test public void testPutWhenSizeIsNotAvailable() {
1:     boolean result = carbonLRUCache.put("Column2", cacheable, 11111110L);
1:     assertFalse(result);
1:   }
1: 
1:   @Test public void testPutWhenKeysHaveToBeRemoved() {
1:     boolean result = carbonLRUCache.put("Column3", cacheable, 2097153L);
1:     assertTrue(result);
1:   }
1: 
1:   @Test public void testRemove() {
1:     carbonLRUCache.remove("Column2");
1:     assertNull(carbonLRUCache.get("Column2"));
1:   }
1: 
1:   @AfterClass public static void cleanUp() {
1:     carbonLRUCache.clear();
1:     assertNull(carbonLRUCache.get("Column1"));
1:   }
1: 
1: }
============================================================================