1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
1:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
1:b681244:  */
1:b681244: package org.apache.carbondata.core.indexstore.schema;
1:b681244: 
1:531ecdf: import java.io.Serializable;
1:531ecdf: 
1:b681244: import org.apache.carbondata.core.metadata.datatype.DataType;
1:b681244: 
1:b681244: /**
1:b681244:  * It just have 2 types right now, either fixed or variable.
1:b681244:  */
1:531ecdf: public abstract class CarbonRowSchema implements Serializable {
1:531ecdf: 
1:531ecdf:   private static final long serialVersionUID = -8061282029097686495L;
1:b681244: 
1:b681244:   protected DataType dataType;
1:b681244: 
1:cc0e6f1:   public CarbonRowSchema(DataType dataType) {
1:b681244:     this.dataType = dataType;
1:b681244:   }
1:b681244: 
1:531ecdf:   public void setDataType(DataType dataType) {
1:531ecdf:     this.dataType = dataType;
1:531ecdf:   }
1:531ecdf: 
1:b681244:   /**
1:b681244:    * Either fixed or variable length.
1:b681244:    *
1:b681244:    * @return
1:b681244:    */
1:b681244:   public DataType getDataType() {
1:b681244:     return dataType;
1:b681244:   }
1:b681244: 
1:b681244:   /**
1:b681244:    * Gives length in case of fixed schema other wise returns length
1:b681244:    *
1:b681244:    * @return
1:b681244:    */
1:f911403:   public int getLength() {
1:f911403:     return dataType.getSizeInBytes();
1:f911403:   }
1:b681244: 
1:b681244:   /**
1:b681244:    * schema type
1:b681244:    * @return
1:b681244:    */
1:b681244:   public abstract DataMapSchemaType getSchemaType();
1:b681244: 
1:b681244:   /*
1:b681244:  * It has always fixed length, length cannot be updated later.
1:b681244:  * Usage examples : all primitive types like short, int etc
1:b681244:  */
1:cc0e6f1:   public static class FixedCarbonRowSchema extends CarbonRowSchema {
1:b681244: 
1:b681244:     private int length;
1:b681244: 
1:cc0e6f1:     public FixedCarbonRowSchema(DataType dataType) {
1:b681244:       super(dataType);
1:b681244:     }
1:b681244: 
1:cc0e6f1:     public FixedCarbonRowSchema(DataType dataType, int length) {
1:b681244:       super(dataType);
1:b681244:       this.length = length;
1:b681244:     }
1:b681244: 
1:b681244:     @Override public int getLength() {
1:b681244:       if (length == 0) {
1:b681244:         return dataType.getSizeInBytes();
1:b681244:       } else {
1:b681244:         return length;
1:b681244:       }
1:b681244:     }
1:b681244: 
1:b681244:     @Override public DataMapSchemaType getSchemaType() {
1:b681244:       return DataMapSchemaType.FIXED;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:cc0e6f1:   public static class VariableCarbonRowSchema extends CarbonRowSchema {
1:dc53dee:     private boolean isVarcharType = false;
1:b681244: 
1:cc0e6f1:     public VariableCarbonRowSchema(DataType dataType) {
1:b681244:       super(dataType);
1:b681244:     }
1:b681244: 
1:dc53dee:     public VariableCarbonRowSchema(DataType dataType, boolean isVarcharType) {
1:dc53dee:       super(dataType);
1:dc53dee:       this.isVarcharType = isVarcharType;
1:dc53dee:     }
1:dc53dee: 
1:b681244:     @Override public int getLength() {
1:b681244:       return dataType.getSizeInBytes();
1:b681244:     }
1:b681244: 
1:b681244:     @Override public DataMapSchemaType getSchemaType() {
1:dc53dee:       return isVarcharType ? DataMapSchemaType.VARIABLE_INT : DataMapSchemaType.VARIABLE_SHORT;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:cc0e6f1:   public static class StructCarbonRowSchema extends CarbonRowSchema {
1:b681244: 
1:cc0e6f1:     private CarbonRowSchema[] childSchemas;
1:b681244: 
1:cc0e6f1:     public StructCarbonRowSchema(DataType dataType, CarbonRowSchema[] childSchemas) {
1:b681244:       super(dataType);
1:b681244:       this.childSchemas = childSchemas;
1:b681244:     }
1:b681244: 
1:b681244:     @Override public int getLength() {
1:b681244:       return dataType.getSizeInBytes();
1:b681244:     }
1:b681244: 
1:cc0e6f1:     public CarbonRowSchema[] getChildSchemas() {
1:b681244:       return childSchemas;
1:b681244:     }
1:b681244: 
1:b681244:     @Override public DataMapSchemaType getSchemaType() {
1:b681244:       return DataMapSchemaType.STRUCT;
1:b681244:     }
1:b681244:   }
1:b681244: 
1:b681244:   public enum DataMapSchemaType {
1:dc53dee:     FIXED, VARIABLE_INT, VARIABLE_SHORT, STRUCT
1:b681244:   }
1:b681244: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1:   public int getLength() {
1:     return dataType.getSizeInBytes();
1:   }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:     private boolean isVarcharType = false;
1:     public VariableCarbonRowSchema(DataType dataType, boolean isVarcharType) {
1:       super(dataType);
1:       this.isVarcharType = isVarcharType;
1:     }
1: 
1:       return isVarcharType ? DataMapSchemaType.VARIABLE_INT : DataMapSchemaType.VARIABLE_SHORT;
/////////////////////////////////////////////////////////////////////////
1:     FIXED, VARIABLE_INT, VARIABLE_SHORT, STRUCT
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
1: public abstract class CarbonRowSchema implements Serializable {
1: 
1:   private static final long serialVersionUID = -8061282029097686495L;
/////////////////////////////////////////////////////////////////////////
1:   public void setDataType(DataType dataType) {
1:     this.dataType = dataType;
1:   }
1: 
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
0: public abstract class CarbonRowSchema {
1:   public CarbonRowSchema(DataType dataType) {
/////////////////////////////////////////////////////////////////////////
1:   public static class FixedCarbonRowSchema extends CarbonRowSchema {
1:     public FixedCarbonRowSchema(DataType dataType) {
1:     public FixedCarbonRowSchema(DataType dataType, int length) {
/////////////////////////////////////////////////////////////////////////
1:   public static class VariableCarbonRowSchema extends CarbonRowSchema {
1:     public VariableCarbonRowSchema(DataType dataType) {
/////////////////////////////////////////////////////////////////////////
1:   public static class StructCarbonRowSchema extends CarbonRowSchema {
1:     private CarbonRowSchema[] childSchemas;
1:     public StructCarbonRowSchema(DataType dataType, CarbonRowSchema[] childSchemas) {
/////////////////////////////////////////////////////////////////////////
1:     public CarbonRowSchema[] getChildSchemas() {
author:ravipesala
-------------------------------------------------------------------------------
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore.schema;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * It just have 2 types right now, either fixed or variable.
1:  */
0: public abstract class DataMapSchema {
1: 
1:   protected DataType dataType;
1: 
0:   public DataMapSchema(DataType dataType) {
1:     this.dataType = dataType;
1:   }
1: 
1:   /**
1:    * Either fixed or variable length.
1:    *
1:    * @return
1:    */
1:   public DataType getDataType() {
1:     return dataType;
1:   }
1: 
1:   /**
1:    * Gives length in case of fixed schema other wise returns length
1:    *
1:    * @return
1:    */
0:   public abstract int getLength();
1: 
1:   /**
1:    * schema type
1:    * @return
1:    */
1:   public abstract DataMapSchemaType getSchemaType();
1: 
1:   /*
1:  * It has always fixed length, length cannot be updated later.
1:  * Usage examples : all primitive types like short, int etc
1:  */
0:   public static class FixedDataMapSchema extends DataMapSchema {
1: 
1:     private int length;
1: 
0:     public FixedDataMapSchema(DataType dataType) {
1:       super(dataType);
1:     }
1: 
0:     public FixedDataMapSchema(DataType dataType, int length) {
1:       super(dataType);
1:       this.length = length;
1:     }
1: 
1:     @Override public int getLength() {
1:       if (length == 0) {
1:         return dataType.getSizeInBytes();
1:       } else {
1:         return length;
1:       }
1:     }
1: 
1:     @Override public DataMapSchemaType getSchemaType() {
1:       return DataMapSchemaType.FIXED;
1:     }
1:   }
1: 
0:   public static class VariableDataMapSchema extends DataMapSchema {
1: 
0:     public VariableDataMapSchema(DataType dataType) {
1:       super(dataType);
1:     }
1: 
1:     @Override public int getLength() {
1:       return dataType.getSizeInBytes();
1:     }
1: 
1:     @Override public DataMapSchemaType getSchemaType() {
0:       return DataMapSchemaType.VARIABLE;
1:     }
1:   }
1: 
0:   public static class StructDataMapSchema extends DataMapSchema {
1: 
0:     private DataMapSchema[] childSchemas;
1: 
0:     public StructDataMapSchema(DataType dataType, DataMapSchema[] childSchemas) {
1:       super(dataType);
1:       this.childSchemas = childSchemas;
1:     }
1: 
1:     @Override public int getLength() {
1:       return dataType.getSizeInBytes();
1:     }
1: 
0:     public DataMapSchema[] getChildSchemas() {
1:       return childSchemas;
1:     }
1: 
1:     @Override public DataMapSchemaType getSchemaType() {
1:       return DataMapSchemaType.STRUCT;
1:     }
1:   }
1: 
1:   public enum DataMapSchemaType {
0:     FIXED, VARIABLE, STRUCT
1:   }
1: }
============================================================================