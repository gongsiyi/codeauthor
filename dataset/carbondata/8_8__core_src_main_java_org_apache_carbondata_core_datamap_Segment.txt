1:8d3c774: /*
1:8d3c774:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d3c774:  * contributor license agreements.  See the NOTICE file distributed with
1:8d3c774:  * this work for additional information regarding copyright ownership.
1:8d3c774:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d3c774:  * (the "License"); you may not use this file except in compliance with
1:8d3c774:  * the License.  You may obtain a copy of the License at
1:8d3c774:  *
1:8d3c774:  *    http://www.apache.org/licenses/LICENSE-2.0
1:8d3c774:  *
1:8d3c774:  * Unless required by applicable law or agreed to in writing, software
1:8d3c774:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d3c774:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d3c774:  * See the License for the specific language governing permissions and
1:8d3c774:  * limitations under the License.
1:8d3c774:  */
1:8d3c774: package org.apache.carbondata.core.datamap;
1:8d3c774: 
1:c58eb43: import java.io.IOException;
1:8d3c774: import java.io.Serializable;
1:8d3c774: import java.util.ArrayList;
1:4a47630: import java.util.HashSet;
1:8d3c774: import java.util.List;
1:c58eb43: import java.util.Map;
1:8d3c774: import java.util.Objects;
1:4a47630: import java.util.Set;
1:8d3c774: 
1:f1a6c7c: import org.apache.carbondata.core.mutate.UpdateVO;
1:c58eb43: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
1:74f5d67: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1:f1a6c7c: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
1:74f5d67: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1:74f5d67: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:74f5d67: 
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:8f1a029: 
1:8d3c774: /**
1:8d3c774:  * Represents one load of carbondata
1:8d3c774:  */
1:8d3c774: public class Segment implements Serializable {
1:8d3c774: 
1:8d3c774:   private static final long serialVersionUID = 7044555408162234064L;
1:8d3c774: 
1:8d3c774:   private String segmentNo;
1:8d3c774: 
1:8d3c774:   private String segmentFileName;
1:4a47630: 
1:4a47630:   /**
1:8b33ab2:    * List of index shards which are already got filtered through CG index operation.
1:4a47630:    */
1:8b33ab2:   private Set<String> filteredIndexShardNames = new HashSet<>();
1:8d3c774: 
1:c58eb43:   /**
1:c58eb43:    * Points to the Read Committed Scope of the segment. This is a flavor of
1:c58eb43:    * transactional isolation level which only allows snapshot read of the
1:c58eb43:    * data and make non committed data invisible to the reader.
1:c58eb43:    */
1:c58eb43:   private ReadCommittedScope readCommittedScope;
1:c58eb43: 
1:d0f88a1:   /**
1:d0f88a1:    * keeps all the details about segments
1:d0f88a1:    */
1:d0f88a1:   private LoadMetadataDetails loadMetadataDetails;
1:d0f88a1: 
1:9db662a:   public Segment(String segmentNo) {
1:9db662a:     this.segmentNo = segmentNo;
1:9db662a:   }
1:9db662a: 
1:8f1a029:   public Segment(String segmentNo, ReadCommittedScope readCommittedScope) {
1:8f1a029:     this.segmentNo = segmentNo;
1:8f1a029:     this.readCommittedScope = readCommittedScope;
1:8f1a029:   }
1:8f1a029: 
1:74f5d67:   /**
1:c58eb43:    * ReadCommittedScope will be null. So getCommittedIndexFile will not work and will throw
1:c58eb43:    * a NullPointerException. In case getCommittedIndexFile is need to be accessed then
1:c58eb43:    * use the other constructor and pass proper ReadCommittedScope.
1:d0f88a1:    * @param segmentNo
1:d0f88a1:    * @param segmentFileName
1:c58eb43:    */
1:8d3c774:   public Segment(String segmentNo, String segmentFileName) {
1:8d3c774:     this.segmentNo = segmentNo;
1:8d3c774:     this.segmentFileName = segmentFileName;
1:c58eb43:     this.readCommittedScope = null;
1:8d3c774:   }
1:8d3c774: 
1:c58eb43:   /**
1:c58eb43:    *
1:c58eb43:    * @param segmentNo
1:c58eb43:    * @param segmentFileName
1:d0f88a1:    * @param readCommittedScope
1:d0f88a1:    */
1:c58eb43:   public Segment(String segmentNo, String segmentFileName, ReadCommittedScope readCommittedScope) {
1:c58eb43:     this.segmentNo = segmentNo;
1:c58eb43:     this.segmentFileName = segmentFileName;
1:c58eb43:     this.readCommittedScope = readCommittedScope;
1:c58eb43:   }
1:c58eb43: 
1:c58eb43:   /**
1:c58eb43:    * @param segmentNo
1:c58eb43:    * @param segmentFileName
1:c58eb43:    * @param readCommittedScope
1:c58eb43:    */
1:d0f88a1:   public Segment(String segmentNo, String segmentFileName, ReadCommittedScope readCommittedScope,
1:d0f88a1:       LoadMetadataDetails loadMetadataDetails) {
1:d0f88a1:     this.segmentNo = segmentNo;
1:d0f88a1:     this.segmentFileName = segmentFileName;
1:d0f88a1:     this.readCommittedScope = readCommittedScope;
1:d0f88a1:     this.loadMetadataDetails = loadMetadataDetails;
1:d0f88a1:   }
1:d0f88a1: 
1:d0f88a1:   /**
1:c58eb43:    *
1:c58eb43:    * @return map of Absolute path of index file as key and null as value -- without mergeIndex
1:c58eb43:    * map of AbsolutePath with fileName of MergeIndex parent file as key and mergeIndexFileName
1:c58eb43:    *                                                             as value -- with mergeIndex
1:c58eb43:    * @throws IOException
1:c58eb43:    */
1:c58eb43:   public Map<String, String> getCommittedIndexFile() throws IOException {
1:c58eb43:     return readCommittedScope.getCommittedIndexFile(this);
1:c58eb43:   }
1:c58eb43: 
1:f1a6c7c:   public SegmentRefreshInfo getSegmentRefreshInfo(UpdateVO updateVo)
1:f1a6c7c:       throws IOException {
1:b338459:     return readCommittedScope.getCommittedSegmentRefreshInfo(this, updateVo);
1:f1a6c7c:   }
1:f1a6c7c: 
1:8d3c774:   public String getSegmentNo() {
1:8d3c774:     return segmentNo;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public String getSegmentFileName() {
1:8d3c774:     return segmentFileName;
1:8d3c774:   }
1:8d3c774: 
1:cd7c210:   public void setReadCommittedScope(ReadCommittedScope readCommittedScope) {
1:cd7c210:     this.readCommittedScope = readCommittedScope;
1:cd7c210:   }
1:cd7c210: 
1:c58eb43:   public static List<Segment> toSegmentList(String[] segmentIds,
1:c58eb43:       ReadCommittedScope readCommittedScope) {
1:8d3c774:     List<Segment> list = new ArrayList<>(segmentIds.length);
1:8d3c774:     for (String segmentId : segmentIds) {
1:c58eb43:       list.add(toSegment(segmentId, readCommittedScope));
1:8d3c774:     }
1:8d3c774:     return list;
1:8d3c774:   }
1:8d3c774: 
1:c58eb43:   public static List<Segment> toSegmentList(List<String> segmentIds,
1:c58eb43:       ReadCommittedScope readCommittedScope) {
1:8d3c774:     List<Segment> list = new ArrayList<>(segmentIds.size());
1:8d3c774:     for (String segmentId : segmentIds) {
1:c58eb43:       list.add(toSegment(segmentId, readCommittedScope));
1:8d3c774:     }
1:8d3c774:     return list;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   /**
1:c58eb43:    * readCommittedScope provide Read Snapshot isolation.
1:8d3c774:    * @param segmentId
1:c58eb43:    * @param readCommittedScope
1:8d3c774:    * @return
1:8d3c774:    */
1:c58eb43:   public static Segment toSegment(String segmentId, ReadCommittedScope readCommittedScope) {
1:c58eb43:     // SegmentId can be combination of segmentNo and segmentFileName.
1:8d3c774:     String[] split = segmentId.split("#");
1:8d3c774:     if (split.length > 1) {
1:c58eb43:       return new Segment(split[0], split[1], readCommittedScope);
1:8d3c774:     } else if (split.length > 0) {
1:c58eb43:       return new Segment(split[0], null, readCommittedScope);
1:8d3c774:     }
1:c58eb43:     return new Segment(segmentId, null, readCommittedScope);
1:8d3c774:   }
1:8d3c774: 
1:c58eb43:   /**
1:60dfdd3:    * Converts to segment object
1:60dfdd3:    * @param segmentId
1:60dfdd3:    * @return
1:60dfdd3:    */
1:60dfdd3:   public static Segment toSegment(String segmentId) {
1:60dfdd3:     // SegmentId can be combination of segmentNo and segmentFileName.
1:60dfdd3:     return toSegment(segmentId, null);
1:60dfdd3:   }
1:60dfdd3: 
1:60dfdd3:   /**
1:74f5d67:    * Read the table status and get the segment corresponding to segmentNo
1:74f5d67:    * @param segmentNo
1:74f5d67:    * @param tablePath
1:74f5d67:    * @return
1:74f5d67:    */
1:74f5d67:   public static Segment getSegment(String segmentNo, String tablePath) {
1:74f5d67:     LoadMetadataDetails[] loadMetadataDetails =
1:74f5d67:         SegmentStatusManager.readLoadMetadata(CarbonTablePath.getMetadataPath(tablePath));
1:60dfdd3:     return getSegment(segmentNo, loadMetadataDetails);
1:60dfdd3:   }
1:60dfdd3: 
1:60dfdd3:   /**
1:60dfdd3:    * Get the segment object corresponding to segmentNo
1:60dfdd3:    * @param segmentNo
1:60dfdd3:    * @param loadMetadataDetails
1:60dfdd3:    * @return
1:60dfdd3:    */
1:60dfdd3:   public static Segment getSegment(String segmentNo, LoadMetadataDetails[] loadMetadataDetails) {
1:74f5d67:     for (LoadMetadataDetails details: loadMetadataDetails) {
1:74f5d67:       if (details.getLoadName().equals(segmentNo)) {
1:74f5d67:         return new Segment(details.getLoadName(), details.getSegmentFile());
1:74f5d67:       }
1:74f5d67:     }
1:74f5d67:     return null;
1:4a47630:   }
1:4a47630: 
1:8f1a029:   public Configuration getConfiguration() {
1:8f1a029:     return readCommittedScope.getConfiguration();
1:8f1a029:   }
1:8f1a029: 
1:8b33ab2:   public Set<String> getFilteredIndexShardNames() {
1:8b33ab2:     return filteredIndexShardNames;
1:4a47630:   }
1:4a47630: 
1:8b33ab2:   public void setFilteredIndexShardName(String filteredIndexShardName) {
1:8b33ab2:     this.filteredIndexShardNames.add(filteredIndexShardName);
1:74f5d67:   }
1:74f5d67: 
1:8d3c774:   @Override public boolean equals(Object o) {
1:8d3c774:     if (this == o) return true;
1:8d3c774:     if (o == null || getClass() != o.getClass()) return false;
1:8d3c774:     Segment segment = (Segment) o;
1:8d3c774:     return Objects.equals(segmentNo, segment.segmentNo);
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   @Override public int hashCode() {
1:8d3c774:     return Objects.hash(segmentNo);
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   @Override public String toString() {
1:8d3c774:     if (segmentFileName != null) {
1:8d3c774:       return segmentNo + "#" + segmentFileName;
1:8d3c774:     } else {
1:8d3c774:       return segmentNo;
1:8d3c774:     }
1:8d3c774:   }
1:d0f88a1: 
1:d0f88a1:   public LoadMetadataDetails getLoadMetadataDetails() {
1:d0f88a1:     return loadMetadataDetails;
1:8d3c774:   }
1:d0f88a1: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public Segment(String segmentNo, ReadCommittedScope readCommittedScope) {
1:     this.segmentNo = segmentNo;
1:     this.readCommittedScope = readCommittedScope;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public Configuration getConfiguration() {
1:     return readCommittedScope.getConfiguration();
1:   }
1: 
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:   public void setReadCommittedScope(ReadCommittedScope readCommittedScope) {
1:     this.readCommittedScope = readCommittedScope;
1:   }
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1:    * Converts to segment object
1:    * @param segmentId
1:    * @return
1:    */
1:   public static Segment toSegment(String segmentId) {
1:     // SegmentId can be combination of segmentNo and segmentFileName.
1:     return toSegment(segmentId, null);
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:     return getSegment(segmentNo, loadMetadataDetails);
1:   }
1: 
1:   /**
1:    * Get the segment object corresponding to segmentNo
1:    * @param segmentNo
1:    * @param loadMetadataDetails
1:    * @return
1:    */
1:   public static Segment getSegment(String segmentNo, LoadMetadataDetails[] loadMetadataDetails) {
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
1:    * List of index shards which are already got filtered through CG index operation.
1:   private Set<String> filteredIndexShardNames = new HashSet<>();
/////////////////////////////////////////////////////////////////////////
1:   public Set<String> getFilteredIndexShardNames() {
1:     return filteredIndexShardNames;
1:   public void setFilteredIndexShardName(String filteredIndexShardName) {
1:     this.filteredIndexShardNames.add(filteredIndexShardName);
commit:4a47630
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:    * List of index files which are already got filtered through CG index operation.
1:    */
0:   private Set<String> filteredIndexFiles = new HashSet<>();
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
0:   public Set<String> getFilteredIndexFiles() {
0:     return filteredIndexFiles;
1:   }
1: 
0:   public void setFilteredIndexFile(String filteredIndexFile) {
0:     this.filteredIndexFiles.add(filteredIndexFile);
1:   }
1: 
commit:74f5d67
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.statusmanager.LoadMetadataDetails;
1: import org.apache.carbondata.core.statusmanager.SegmentStatusManager;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Read the table status and get the segment corresponding to segmentNo
1:    * @param segmentNo
1:    * @param tablePath
1:    * @return
1:    */
1:   public static Segment getSegment(String segmentNo, String tablePath) {
1:     LoadMetadataDetails[] loadMetadataDetails =
1:         SegmentStatusManager.readLoadMetadata(CarbonTablePath.getMetadataPath(tablePath));
1:     for (LoadMetadataDetails details: loadMetadataDetails) {
1:       if (details.getLoadName().equals(segmentNo)) {
1:         return new Segment(details.getLoadName(), details.getSegmentFile());
1:       }
1:     }
1:     return null;
1:   }
1: 
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap;
1: 
1: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: /**
1:  * Represents one load of carbondata
1:  */
1: public class Segment implements Serializable {
1: 
1:   private static final long serialVersionUID = 7044555408162234064L;
1: 
1:   private String segmentNo;
1: 
1:   private String segmentFileName;
1: 
1:   public Segment(String segmentNo, String segmentFileName) {
1:     this.segmentNo = segmentNo;
1:     this.segmentFileName = segmentFileName;
1:   }
1: 
1:   public String getSegmentNo() {
1:     return segmentNo;
1:   }
1: 
1:   public String getSegmentFileName() {
1:     return segmentFileName;
1:   }
1: 
0:   public static List<Segment> toSegmentList(String[] segmentIds) {
1:     List<Segment> list = new ArrayList<>(segmentIds.length);
1:     for (String segmentId : segmentIds) {
0:       list.add(toSegment(segmentId));
1:     }
1:     return list;
1:   }
1: 
0:   public static List<Segment> toSegmentList(List<String> segmentIds) {
1:     List<Segment> list = new ArrayList<>(segmentIds.size());
1:     for (String segmentId : segmentIds) {
0:       list.add(toSegment(segmentId));
1:     }
1:     return list;
1:   }
1: 
1:   /**
0:    * SegmentId can be combination of segmentNo and segmentFileName
1:    * @param segmentId
1:    * @return
1:    */
0:   public static Segment toSegment(String segmentId) {
1:     String[] split = segmentId.split("#");
1:     if (split.length > 1) {
0:       return new Segment(split[0], split[1]);
1:     } else if (split.length > 0) {
0:       return new Segment(split[0], null);
1:     }
0:     return new Segment(segmentId, null);
1:   }
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1:     Segment segment = (Segment) o;
1:     return Objects.equals(segmentNo, segment.segmentNo);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return Objects.hash(segmentNo);
1:   }
1: 
1:   @Override public String toString() {
1:     if (segmentFileName != null) {
1:       return segmentNo + "#" + segmentFileName;
1:     } else {
1:       return segmentNo;
1:     }
1:   }
1: }
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
1:     return readCommittedScope.getCommittedSegmentRefreshInfo(this, updateVo);
author:rahulforallp
-------------------------------------------------------------------------------
commit:f1a6c7c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.mutate.UpdateVO;
1: import org.apache.carbondata.core.statusmanager.SegmentRefreshInfo;
/////////////////////////////////////////////////////////////////////////
1:   public SegmentRefreshInfo getSegmentRefreshInfo(UpdateVO updateVo)
1:       throws IOException {
0:     return readCommittedScope.getCommitedSegmentRefreshInfo(this, updateVo);
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   public Segment(String segmentNo) {
1:     this.segmentNo = segmentNo;
1:   }
1: 
author:kumarvishal09
-------------------------------------------------------------------------------
commit:d0f88a1
/////////////////////////////////////////////////////////////////////////
1:    * keeps all the details about segments
1:    */
1:   private LoadMetadataDetails loadMetadataDetails;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:    * @param segmentNo
1:    * @param segmentFileName
1:    * @param readCommittedScope
1:    */
1:   public Segment(String segmentNo, String segmentFileName, ReadCommittedScope readCommittedScope,
1:       LoadMetadataDetails loadMetadataDetails) {
1:     this.segmentNo = segmentNo;
1:     this.segmentFileName = segmentFileName;
1:     this.readCommittedScope = readCommittedScope;
1:     this.loadMetadataDetails = loadMetadataDetails;
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1: 
1:   public LoadMetadataDetails getLoadMetadataDetails() {
1:     return loadMetadataDetails;
1:   }
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Map;
1: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Points to the Read Committed Scope of the segment. This is a flavor of
1:    * transactional isolation level which only allows snapshot read of the
1:    * data and make non committed data invisible to the reader.
1:    */
1:   private ReadCommittedScope readCommittedScope;
1: 
1:   /**
1:    * ReadCommittedScope will be null. So getCommittedIndexFile will not work and will throw
1:    * a NullPointerException. In case getCommittedIndexFile is need to be accessed then
1:    * use the other constructor and pass proper ReadCommittedScope.
1:    * @param segmentNo
1:    * @param segmentFileName
1:    */
1:     this.readCommittedScope = null;
1:   }
1: 
1:   /**
1:    *
1:    * @param segmentNo
1:    * @param segmentFileName
1:    * @param readCommittedScope
1:    */
1:   public Segment(String segmentNo, String segmentFileName, ReadCommittedScope readCommittedScope) {
1:     this.segmentNo = segmentNo;
1:     this.segmentFileName = segmentFileName;
1:     this.readCommittedScope = readCommittedScope;
1:   }
1: 
1:   /**
1:    *
1:    * @return map of Absolute path of index file as key and null as value -- without mergeIndex
1:    * map of AbsolutePath with fileName of MergeIndex parent file as key and mergeIndexFileName
1:    *                                                             as value -- with mergeIndex
1:    * @throws IOException
1:    */
1:   public Map<String, String> getCommittedIndexFile() throws IOException {
1:     return readCommittedScope.getCommittedIndexFile(this);
/////////////////////////////////////////////////////////////////////////
1:   public static List<Segment> toSegmentList(String[] segmentIds,
1:       ReadCommittedScope readCommittedScope) {
1:       list.add(toSegment(segmentId, readCommittedScope));
1:   public static List<Segment> toSegmentList(List<String> segmentIds,
1:       ReadCommittedScope readCommittedScope) {
1:       list.add(toSegment(segmentId, readCommittedScope));
1:    * readCommittedScope provide Read Snapshot isolation.
1:    * @param readCommittedScope
1:   public static Segment toSegment(String segmentId, ReadCommittedScope readCommittedScope) {
1:     // SegmentId can be combination of segmentNo and segmentFileName.
1:       return new Segment(split[0], split[1], readCommittedScope);
1:       return new Segment(split[0], null, readCommittedScope);
1:     return new Segment(segmentId, null, readCommittedScope);
============================================================================