1:496cde4: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:496cde4:  *
1:496cde4:  *    http://www.apache.org/licenses/LICENSE-2.0
1:496cde4:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:496cde4:  */
1:349c59c: package org.apache.carbondata.processing.loading.converter.impl;
1:496cde4: 
1:496cde4: import org.apache.carbondata.common.logging.LogService;
1:496cde4: import org.apache.carbondata.common.logging.LogServiceFactory;
1:3158239: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:496cde4: import org.apache.carbondata.core.util.DataTypeUtil;
1:349c59c: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1:349c59c: import org.apache.carbondata.processing.loading.converter.FieldConverter;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:4a79a86: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:496cde4: 
1:496cde4: /**
1:496cde4:  * Converter for measure
1:496cde4:  */
1:496cde4: public class MeasureFieldConverterImpl implements FieldConverter {
1:496cde4: 
1:496cde4:   private static final LogService LOGGER =
1:496cde4:       LogServiceFactory.getLogService(MeasureFieldConverterImpl.class.getName());
1:496cde4: 
1:496cde4:   private int index;
1:496cde4: 
1:496cde4:   private DataType dataType;
1:496cde4: 
1:496cde4:   private CarbonMeasure measure;
1:496cde4: 
1:496cde4:   private String nullformat;
1:496cde4: 
1:3251c89:   private boolean isEmptyBadRecord;
1:f79b9ea: 
1:dded5d5:   private DataField dataField;
1:dded5d5: 
1:3251c89:   public MeasureFieldConverterImpl(DataField dataField, String nullformat, int index,
1:3251c89:       boolean isEmptyBadRecord) {
1:496cde4:     this.dataType = dataField.getColumn().getDataType();
1:496cde4:     this.measure = (CarbonMeasure) dataField.getColumn();
1:496cde4:     this.nullformat = nullformat;
1:496cde4:     this.index = index;
1:3251c89:     this.isEmptyBadRecord = isEmptyBadRecord;
1:dded5d5:     this.dataField = dataField;
1:496cde4:   }
1:496cde4: 
1:496cde4:   @Override
1:496cde4:   public void convert(CarbonRow row, BadRecordLogHolder logHolder)
1:496cde4:       throws CarbonDataLoadingException {
1:496cde4:     String value = row.getString(index);
1:cd7c210:     row.update(convert(value, logHolder), index);
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   @Override
1:cd7c210:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:cd7c210:       throws RuntimeException {
1:cd7c210:     String literalValue = (String) (value);
1:496cde4:     Object output;
1:cd7c210:     boolean isNull = CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(literalValue);
1:cd7c210:     if (literalValue == null || isNull) {
1:4a79a86:       String message = logHolder.getColumnMessageMap().get(measure.getColName());
1:4a79a86:       if (null == message) {
1:06b0d08:         message = CarbonDataProcessorUtil
1:06b0d08:             .prepareFailureReason(measure.getColName(), measure.getDataType());
1:4a79a86:         logHolder.getColumnMessageMap().put(measure.getColName(), message);
1:4a79a86:       }
1:cd7c210:       return null;
1:cd7c210:     } else if (literalValue.length() == 0) {
1:3251c89:       if (isEmptyBadRecord) {
1:4a79a86:         String message = logHolder.getColumnMessageMap().get(measure.getColName());
1:4a79a86:         if (null == message) {
1:4a79a86:           message = CarbonDataProcessorUtil
2:4a79a86:               .prepareFailureReason(measure.getColName(), measure.getDataType());
1:4a79a86:           logHolder.getColumnMessageMap().put(measure.getColName(), message);
1:4a79a86:         }
1:4a79a86:         logHolder.setReason(message);
1:3251c89:       }
1:cd7c210:       return null;
1:cd7c210:     } else if (literalValue.equals(nullformat)) {
1:cd7c210:       return null;
1:496cde4:     } else {
1:496cde4:       try {
1:dded5d5:         if (dataField.isUseActualData()) {
1:cd7c210:           output =
1:cd7c210:               DataTypeUtil.getMeasureValueBasedOnDataType(literalValue, dataType, measure, true);
1:dded5d5:         } else {
1:cd7c210:           output = DataTypeUtil.getMeasureValueBasedOnDataType(literalValue, dataType, measure);
1:dded5d5:         }
1:cd7c210:         return output;
1:496cde4:       } catch (NumberFormatException e) {
1:877eabd:         if (LOGGER.isDebugEnabled()) {
1:877eabd:           LOGGER.debug("Can not convert value to Numeric type value. Value considered as null.");
1:877eabd:         }
2:496cde4:         logHolder.setReason(
1:4a79a86:             CarbonDataProcessorUtil.prepareFailureReason(measure.getColName(), dataType));
1:cd7c210:         return null;
1:496cde4:       }
1:496cde4:     }
1:496cde4:   }
1:cd7c210: 
1:496cde4: 
1:f79b9ea:   /**
1:f79b9ea:    * Method to clean the dictionary cache. As in this MeasureFieldConverterImpl convert no
1:f79b9ea:    * dictionary caches are acquired so nothing to clear. s
1:f79b9ea:    */
1:f79b9ea:   @Override public void clear() {
1:496cde4:   }
1:f79b9ea: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:     row.update(convert(value, logHolder), index);
1:   }
1: 
1:   @Override
1:   public Object convert(Object value, BadRecordLogHolder logHolder)
1:       throws RuntimeException {
1:     String literalValue = (String) (value);
1:     boolean isNull = CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(literalValue);
1:     if (literalValue == null || isNull) {
1:       return null;
1:     } else if (literalValue.length() == 0) {
/////////////////////////////////////////////////////////////////////////
1:       return null;
1:     } else if (literalValue.equals(nullformat)) {
1:       return null;
1:           output =
1:               DataTypeUtil.getMeasureValueBasedOnDataType(literalValue, dataType, measure, true);
1:           output = DataTypeUtil.getMeasureValueBasedOnDataType(literalValue, dataType, measure);
1:         return output;
1:         return null;
1: 
author:rahulforallp
-------------------------------------------------------------------------------
commit:877eabd
/////////////////////////////////////////////////////////////////////////
1:         if (LOGGER.isDebugEnabled()) {
1:           LOGGER.debug("Can not convert value to Numeric type value. Value considered as null.");
1:         }
author:ravipesala
-------------------------------------------------------------------------------
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
0:           output = DataTypeUtil.getMeasureValueBasedOnDataType(value, dataType, measure, true);
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1:   private DataField dataField;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.dataField = dataField;
/////////////////////////////////////////////////////////////////////////
1:         if (dataField.isUseActualData()) {
0:           output = DataTypeUtil.getConvertedMeasureValueBasedOnDataType(value, dataType, measure);
1:         } else {
0:           output = DataTypeUtil.getMeasureValueBasedOnDataType(value, dataType, measure);
1:         }
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.converter.impl;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonMeasure;
1: import org.apache.carbondata.core.util.DataTypeUtil;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.converter.BadRecordLogHolder;
0: import org.apache.carbondata.processing.newflow.converter.FieldConverter;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: /**
1:  * Converter for measure
1:  */
1: public class MeasureFieldConverterImpl implements FieldConverter {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(MeasureFieldConverterImpl.class.getName());
1: 
1:   private int index;
1: 
1:   private DataType dataType;
1: 
1:   private CarbonMeasure measure;
1: 
1:   private String nullformat;
1: 
0:   public MeasureFieldConverterImpl(DataField dataField, String nullformat, int index) {
1:     this.dataType = dataField.getColumn().getDataType();
1:     this.measure = (CarbonMeasure) dataField.getColumn();
1:     this.nullformat = nullformat;
1:     this.index = index;
1:   }
1: 
1:   @Override
1:   public void convert(CarbonRow row, BadRecordLogHolder logHolder)
1:       throws CarbonDataLoadingException {
1:     String value = row.getString(index);
1:     Object output;
0:     if (value == null) {
1:       logHolder.setReason(
0:           "The value " + " \"" + value + "\"" + " with column name " + measure.getColName()
0:               + " and column data type " + dataType + " is not a valid " + dataType + " type.");
0:       row.update(null, index);
0:     } else if(value.equals(nullformat)) {
0:       row.update(null, index);
1:     } else {
1:       try {
0:         output = DataTypeUtil.getMeasureValueBasedOnDataType(value, dataType, measure);
0:         row.update(output, index);
1:       } catch (NumberFormatException e) {
0:         LOGGER.warn(
0:             "Cant not convert : " + value + " to Numeric type value. Value considered as null.");
1:         logHolder.setReason(
0:             "The value " + " \"" + value + "\"" + " with column name " + measure.getColName()
0:                 + " and column data type " + dataType + " is not a valid " + dataType + " type.");
0:         output = null;
0:         row.update(output, index);
1:       }
1:     }
1: 
1:   }
1: }
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * Method to clean the dictionary cache. As in this MeasureFieldConverterImpl convert no
1:    * dictionary caches are acquired so nothing to clear. s
1:    */
1:   @Override public void clear() {
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.converter.BadRecordLogHolder;
1: import org.apache.carbondata.processing.loading.converter.FieldConverter;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
1:         message = CarbonDataProcessorUtil
1:             .prepareFailureReason(measure.getColName(), measure.getDataType());
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
/////////////////////////////////////////////////////////////////////////
1:       String message = logHolder.getColumnMessageMap().get(measure.getColName());
1:       if (null == message) {
0:         value = CarbonDataProcessorUtil
1:             .prepareFailureReason(measure.getColName(), measure.getDataType());
1:         logHolder.getColumnMessageMap().put(measure.getColName(), message);
1:       }
1:         String message = logHolder.getColumnMessageMap().get(measure.getColName());
1:         if (null == message) {
1:           message = CarbonDataProcessorUtil
1:               .prepareFailureReason(measure.getColName(), measure.getDataType());
1:           logHolder.getColumnMessageMap().put(measure.getColName(), message);
1:         }
1:         logHolder.setReason(message);
/////////////////////////////////////////////////////////////////////////
0:             "Cant not convert value to Numeric type value. Value considered as null.");
1:             CarbonDataProcessorUtil.prepareFailureReason(measure.getColName(), dataType));
commit:3251c89
/////////////////////////////////////////////////////////////////////////
1:   private boolean isEmptyBadRecord;
0: 
1:   public MeasureFieldConverterImpl(DataField dataField, String nullformat, int index,
1:       boolean isEmptyBadRecord) {
1:     this.isEmptyBadRecord = isEmptyBadRecord;
/////////////////////////////////////////////////////////////////////////
0:     if (value == null || isNull) {
0:     } else if (value.length() == 0) {
1:       if (isEmptyBadRecord) {
0:         logHolder.setReason(
0:             "The value " + " \"" + value + "\"" + " with column name " + measure.getColName()
0:                 + " and column data type " + dataType + " is not a valid " + dataType + " type.");
1:       }
0:       row.update(null, index);
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:     } else if (value.equals(nullformat)) {
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:foryou2030
-------------------------------------------------------------------------------
commit:3158239
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
0:     boolean isNull = CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(value);
0:     if (value == null || value.length() == 0 || isNull) {
============================================================================