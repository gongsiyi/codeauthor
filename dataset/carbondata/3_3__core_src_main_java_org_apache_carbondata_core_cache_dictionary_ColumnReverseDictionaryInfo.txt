1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:cd6a4ff:  */
3:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.util.List;
1:cd6a4ff: import java.util.Map;
1:cd6a4ff: import java.util.concurrent.ConcurrentHashMap;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: 
1:cd6a4ff: import net.jpountz.xxhash.XXHash32;
1:cd6a4ff: import net.jpountz.xxhash.XXHashFactory;
1:cd6a4ff: 
3:cd6a4ff: /**
1:cd6a4ff:  * class that implements methods specific for dictionary data look up
1:cd6a4ff:  */
1:cd6a4ff: public class ColumnReverseDictionaryInfo extends AbstractColumnDictionaryInfo {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Map which will maintain mapping of byte array to surrogate key
1:cd6a4ff:    */
1:cd6a4ff:   private Map<DictionaryByteArrayWrapper, Integer> dictionaryByteArrayToSurrogateKeyMap;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * hashing algorithm to calculate hash code
1:cd6a4ff:    */
1:cd6a4ff:   private XXHash32 xxHash32;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * check and initialize xxHash32 if enabled
1:cd6a4ff:    */
1:cd6a4ff:   public ColumnReverseDictionaryInfo() {
1:cd6a4ff:     boolean useXXHash = Boolean.valueOf(CarbonProperties.getInstance()
1:cd6a4ff:         .getProperty(CarbonCommonConstants.ENABLE_XXHASH,
1:cd6a4ff:             CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));
1:cd6a4ff:     if (useXXHash) {
1:cd6a4ff:       xxHash32 = XXHashFactory.fastestInstance().hash32();
3:cd6a4ff:     }
1:cd6a4ff:   }
1:f911403: 
1:f911403:   /**
1:cd6a4ff:    * This method will find and return the surrogate key for a given dictionary value
1:cd6a4ff:    * Applicable scenario:
1:cd6a4ff:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:cd6a4ff:    * that values have to be looked up in the existing dictionary cache.
1:cd6a4ff:    * 2. Filter scenarios where from value surrogate key has to be found.
1:f911403:    *
1:cd6a4ff:    * @param value dictionary value as byte array. It will be treated as key here
1:05b2654:    * @return if found returns key else INVALID_SURROGATE_KEY
1:f911403:    */
1:cd6a4ff:   @Override public int getSurrogateKey(byte[] value) {
1:cd6a4ff:     DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
1:cd6a4ff:         new DictionaryByteArrayWrapper(value, xxHash32);
1:cd6a4ff:     Integer surrogateKeyInMap =
1:cd6a4ff:         dictionaryByteArrayToSurrogateKeyMap.get(dictionaryByteArrayWrapper);
1:cd6a4ff:     if (null == surrogateKeyInMap) {
1:cd6a4ff:       return CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:cd6a4ff:     }
1:cd6a4ff:     return surrogateKeyInMap;
1:cd6a4ff:   }
1:f911403: 
1:f911403:   /**
1:cd6a4ff:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:f911403:    *
1:cd6a4ff:    * @param dictionaryChunk
1:f911403:    */
1:cd6a4ff:   @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk) {
1:cd6a4ff:     dictionaryChunks.add(dictionaryChunk);
1:cd6a4ff:     if (null == dictionaryByteArrayToSurrogateKeyMap) {
1:cd6a4ff:       createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());
1:cd6a4ff:     }
1:cd6a4ff:     addDataToDictionaryMap();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will add the new dictionary data to map
1:cd6a4ff:    */
1:cd6a4ff:   private void addDataToDictionaryMap() {
1:cd6a4ff:     int surrogateKey = dictionaryByteArrayToSurrogateKeyMap.size();
1:cd6a4ff:     List<byte[]> oneDictionaryChunk = dictionaryChunks.get(dictionaryChunks.size() - 1);
1:cd6a4ff:     for (int i = 0; i < oneDictionaryChunk.size(); i++) {
1:cd6a4ff:       // create a wrapper class that will calculate hash code for byte array
1:cd6a4ff:       DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
1:cd6a4ff:           new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i), xxHash32);
1:cd6a4ff:       dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper, ++surrogateKey);
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will create the dictionary map. First time it will
1:cd6a4ff:    * create dictionary map with capacity equal to list of byte arrays
1:cd6a4ff:    *
1:cd6a4ff:    * @param initialMapSize capacity to which map is to be instantiated
1:cd6a4ff:    */
1:cd6a4ff:   private void createDictionaryByteArrayToSurrogateKeyMap(int initialMapSize) {
1:cd6a4ff:     dictionaryByteArrayToSurrogateKeyMap = new ConcurrentHashMap<>(initialMapSize);
1:f911403:   }
1:f911403: 
1:f911403:   /**
1:f911403:    * This method will set the sort order index of a dictionary column.
1:f911403:    * Sort order index if the index of dictionary values after they are sorted.
1:f911403:    *
1:f911403:    * @param sortOrderIndex
1:f911403:    */
1:f911403:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:f911403:   }
1:f911403: 
1:f911403:   /**
1:f911403:    * This method will set the sort reverse index of a dictionary column.
1:f911403:    * Sort reverse index is the index of dictionary values before they are sorted.
1:f911403:    *
1:f911403:    * @param sortReverseOrderIndex
1:f911403:    */
1:f911403:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:f911403:   }
1:f911403: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This method will set the sort order index of a dictionary column.
1:    * Sort order index if the index of dictionary values after they are sorted.
1:    *
1:    * @param sortOrderIndex
1:    */
1:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:   }
1: 
1:   /**
1:    * This method will set the sort reverse index of a dictionary column.
1:    * Sort reverse index is the index of dictionary values before they are sorted.
1:    *
1:    * @param sortReverseOrderIndex
1:    */
1:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:   }
commit:f911403
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
0:    * This method will set the sort order index of a dictionary column.
0:    * Sort order index if the index of dictionary values after they are sorted.
1:    *
0:    * @param sortOrderIndex
1:    */
0:   @Override public void setSortOrderIndex(List<Integer> sortOrderIndex) {
1:   }
1: 
1:   /**
0:    * This method will set the sort reverse index of a dictionary column.
0:    * Sort reverse index is the index of dictionary values before they are sorted.
1:    *
0:    * @param sortReverseOrderIndex
1:    */
0:   @Override public void setSortReverseOrderIndex(List<Integer> sortReverseOrderIndex) {
1:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: import net.jpountz.xxhash.XXHash32;
1: import net.jpountz.xxhash.XXHashFactory;
1: 
1: /**
1:  * class that implements methods specific for dictionary data look up
1:  */
1: public class ColumnReverseDictionaryInfo extends AbstractColumnDictionaryInfo {
1: 
1:   /**
1:    * Map which will maintain mapping of byte array to surrogate key
1:    */
1:   private Map<DictionaryByteArrayWrapper, Integer> dictionaryByteArrayToSurrogateKeyMap;
1: 
1:   /**
1:    * hashing algorithm to calculate hash code
1:    */
1:   private XXHash32 xxHash32;
1: 
1:   /**
1:    * check and initialize xxHash32 if enabled
1:    */
1:   public ColumnReverseDictionaryInfo() {
1:     boolean useXXHash = Boolean.valueOf(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.ENABLE_XXHASH,
1:             CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));
1:     if (useXXHash) {
1:       xxHash32 = XXHashFactory.fastestInstance().hash32();
1:     }
1:   }
1: 
1:   /**
1:    * This method will find and return the surrogate key for a given dictionary value
1:    * Applicable scenario:
1:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
1:    * that values have to be looked up in the existing dictionary cache.
1:    * 2. Filter scenarios where from value surrogate key has to be found.
1:    *
1:    * @param value dictionary value as byte array. It will be treated as key here
0:    * @return if found returns key else 0
1:    */
1:   @Override public int getSurrogateKey(byte[] value) {
1:     DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
1:         new DictionaryByteArrayWrapper(value, xxHash32);
1:     Integer surrogateKeyInMap =
1:         dictionaryByteArrayToSurrogateKeyMap.get(dictionaryByteArrayWrapper);
1:     if (null == surrogateKeyInMap) {
1:       return CarbonCommonConstants.INVALID_SURROGATE_KEY;
1:     }
1:     return surrogateKeyInMap;
1:   }
1: 
1:   /**
1:    * This method will add a new dictionary chunk to existing list of dictionary chunks
1:    *
1:    * @param dictionaryChunk
1:    */
1:   @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk) {
1:     dictionaryChunks.add(dictionaryChunk);
1:     if (null == dictionaryByteArrayToSurrogateKeyMap) {
1:       createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());
1:     }
1:     addDataToDictionaryMap();
1:   }
1: 
1:   /**
1:    * This method will add the new dictionary data to map
1:    */
1:   private void addDataToDictionaryMap() {
1:     int surrogateKey = dictionaryByteArrayToSurrogateKeyMap.size();
1:     List<byte[]> oneDictionaryChunk = dictionaryChunks.get(dictionaryChunks.size() - 1);
1:     for (int i = 0; i < oneDictionaryChunk.size(); i++) {
1:       // create a wrapper class that will calculate hash code for byte array
1:       DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
1:           new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i), xxHash32);
1:       dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper, ++surrogateKey);
1:     }
1:   }
1: 
1:   /**
1:    * This method will create the dictionary map. First time it will
1:    * create dictionary map with capacity equal to list of byte arrays
1:    *
1:    * @param initialMapSize capacity to which map is to be instantiated
1:    */
1:   private void createDictionaryByteArrayToSurrogateKeyMap(int initialMapSize) {
1:     dictionaryByteArrayToSurrogateKeyMap = new ConcurrentHashMap<>(initialMapSize);
1:   }
1: }
commit:05b2654
/////////////////////////////////////////////////////////////////////////
0:    * @return if found returns key else INVALID_SURROGATE_KEY
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.util.List;
0: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
0: 
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonProperties;
0: 
0: import net.jpountz.xxhash.XXHash32;
0: import net.jpountz.xxhash.XXHashFactory;
0: 
0: /**
0:  * class that implements methods specific for dictionary data look up
0:  */
0: public class ColumnReverseDictionaryInfo extends AbstractColumnDictionaryInfo {
0: 
0:   /**
0:    * Map which will maintain mapping of byte array to surrogate key
0:    */
0:   private Map<DictionaryByteArrayWrapper, Integer> dictionaryByteArrayToSurrogateKeyMap;
0: 
0:   /**
0:    * hashing algorithm to calculate hash code
0:    */
0:   private XXHash32 xxHash32;
0: 
0:   /**
0:    * check and initialize xxHash32 if enabled
0:    */
0:   public ColumnReverseDictionaryInfo() {
0:     boolean useXXHash = Boolean.valueOf(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.ENABLE_XXHASH,
0:             CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));
0:     if (useXXHash) {
0:       xxHash32 = XXHashFactory.fastestInstance().hash32();
0:     }
0:   }
0: 
0:   /**
0:    * This method will find and return the surrogate key for a given dictionary value
0:    * Applicable scenario:
0:    * 1. Incremental data load : Dictionary will not be generated for existing values. For
0:    * that values have to be looked up in the existing dictionary cache.
0:    * 2. Filter scenarios where from value surrogate key has to be found.
0:    *
0:    * @param value dictionary value as byte array. It will be treated as key here
0:    * @return if found returns key else 0
0:    */
0:   @Override public int getSurrogateKey(byte[] value) {
0:     DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
0:         new DictionaryByteArrayWrapper(value, xxHash32);
0:     Integer surrogateKeyInMap =
0:         dictionaryByteArrayToSurrogateKeyMap.get(dictionaryByteArrayWrapper);
0:     if (null == surrogateKeyInMap) {
0:       return CarbonCommonConstants.INVALID_SURROGATE_KEY;
0:     }
0:     return surrogateKeyInMap;
0:   }
0: 
0:   /**
0:    * This method will add a new dictionary chunk to existing list of dictionary chunks
0:    *
0:    * @param dictionaryChunk
0:    */
0:   @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk) {
0:     dictionaryChunks.add(dictionaryChunk);
0:     if (null == dictionaryByteArrayToSurrogateKeyMap) {
0:       createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());
0:     }
0:     addDataToDictionaryMap();
0:   }
0: 
0:   /**
0:    * This method will add the new dictionary data to map
0:    */
0:   private void addDataToDictionaryMap() {
0:     int surrogateKey = dictionaryByteArrayToSurrogateKeyMap.size();
0:     List<byte[]> oneDictionaryChunk = dictionaryChunks.get(dictionaryChunks.size() - 1);
0:     for (int i = 0; i < oneDictionaryChunk.size(); i++) {
0:       // create a wrapper class that will calculate hash code for byte array
0:       DictionaryByteArrayWrapper dictionaryByteArrayWrapper =
0:           new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i), xxHash32);
0:       dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper, ++surrogateKey);
0:     }
0:   }
0: 
0:   /**
0:    * This method will create the dictionary map. First time it will
0:    * create dictionary map with capacity equal to list of byte arrays
0:    *
0:    * @param initialMapSize capacity to which map is to be instantiated
0:    */
0:   private void createDictionaryByteArrayToSurrogateKeyMap(int initialMapSize) {
0:     dictionaryByteArrayToSurrogateKeyMap = new ConcurrentHashMap<>(initialMapSize);
0:   }
0: }
============================================================================