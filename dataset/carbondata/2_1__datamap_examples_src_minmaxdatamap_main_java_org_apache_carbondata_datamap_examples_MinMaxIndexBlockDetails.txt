1:ca7e2e3: /*
1:ca7e2e3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ca7e2e3:  * contributor license agreements.  See the NOTICE file distributed with
1:ca7e2e3:  * this work for additional information regarding copyright ownership.
1:ca7e2e3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ca7e2e3:  * (the "License"); you may not use this file except in compliance with
1:ca7e2e3:  * the License.  You may obtain a copy of the License at
1:ca7e2e3:  *
1:ca7e2e3:  *    http://www.apache.org/licenses/LICENSE-2.0
1:ca7e2e3:  *
1:ca7e2e3:  * Unless required by applicable law or agreed to in writing, software
1:ca7e2e3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ca7e2e3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ca7e2e3:  * See the License for the specific language governing permissions and
1:ca7e2e3:  * limitations under the License.
2:ca7e2e3:  */
4:ca7e2e3: 
1:ca7e2e3: package org.apache.carbondata.datamap.examples;
1:ca7e2e3: 
1:ca7e2e3: import java.io.Serializable;
1:ca7e2e3: 
1:ca7e2e3: public class MinMaxIndexBlockDetails implements Serializable {
1:ca7e2e3:   private static final long serialVersionUID = 1206104914911491724L;
1:ca7e2e3: 
2:ca7e2e3:   /**
1:ca7e2e3:    * Min value of a column of one blocklet Bit-Packed
1:ca7e2e3:    */
1:ca7e2e3:   private byte[][] minValues;
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * Max value of a columns of one blocklet Bit-Packed
1:ca7e2e3:    */
1:ca7e2e3:   private byte[][] maxValues;
1:ca7e2e3: 
1:ca7e2e3:   /**
1:ca7e2e3:    * BlockletID of the block.
1:ca7e2e3:    */
1:ca7e2e3:   private Integer BlockletId;
1:ca7e2e3: 
1:ca7e2e3: 
1:ca7e2e3:   public byte[][] getMinValues() {
1:ca7e2e3:     return minValues;
3:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   public void setMinValues(byte[][] minValues) {
1:ca7e2e3:     this.minValues = minValues;
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   public byte[][] getMaxValues() {
1:ca7e2e3:     return maxValues;
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   public void setMaxValues(byte[][] maxValues) {
1:ca7e2e3:     this.maxValues = maxValues;
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   public Integer getBlockletId() {
1:ca7e2e3:     return BlockletId;
1:ca7e2e3:   }
1:ca7e2e3: 
1:ca7e2e3:   public void setBlockletId(Integer blockletId) {
1:ca7e2e3:     BlockletId = blockletId;
1:ca7e2e3:   }
1:ca7e2e3: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:sounakr
-------------------------------------------------------------------------------
commit:ca7e2e3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap.examples;
1: 
1: import java.io.Serializable;
1: 
1: public class MinMaxIndexBlockDetails implements Serializable {
1:   private static final long serialVersionUID = 1206104914911491724L;
1: 
1:   /**
1:    * Min value of a column of one blocklet Bit-Packed
1:    */
1:   private byte[][] minValues;
1: 
1:   /**
1:    * Max value of a columns of one blocklet Bit-Packed
1:    */
1:   private byte[][] maxValues;
1: 
1:   /**
0:    * filePath pointing to the block.
1:    */
0:   private String filePath;
1: 
1:   /**
1:    * BlockletID of the block.
1:    */
1:   private Integer BlockletId;
1: 
1: 
1:   public byte[][] getMinValues() {
1:     return minValues;
1:   }
1: 
1:   public void setMinValues(byte[][] minValues) {
1:     this.minValues = minValues;
1:   }
1: 
1:   public byte[][] getMaxValues() {
1:     return maxValues;
1:   }
1: 
1:   public void setMaxValues(byte[][] maxValues) {
1:     this.maxValues = maxValues;
1:   }
1: 
0:   public String getFilePath() {
0:     return filePath;
1:   }
1: 
0:   public void setFilePath(String filePath) {
0:     this.filePath = filePath;
1:   }
1: 
1:   public Integer getBlockletId() {
1:     return BlockletId;
1:   }
1: 
1:   public void setBlockletId(Integer blockletId) {
1:     BlockletId = blockletId;
1:   }
1: }
============================================================================