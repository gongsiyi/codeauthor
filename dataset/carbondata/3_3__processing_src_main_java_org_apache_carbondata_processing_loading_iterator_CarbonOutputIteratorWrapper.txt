1:91e6f6f: /*
1:91e6f6f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:91e6f6f:  * contributor license agreements.  See the NOTICE file distributed with
1:91e6f6f:  * this work for additional information regarding copyright ownership.
1:91e6f6f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:91e6f6f:  * (the "License"); you may not use this file except in compliance with
1:91e6f6f:  * the License.  You may obtain a copy of the License at
1:91e6f6f:  *
1:91e6f6f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:91e6f6f:  *
1:91e6f6f:  * Unless required by applicable law or agreed to in writing, software
1:91e6f6f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91e6f6f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91e6f6f:  * See the License for the specific language governing permissions and
1:91e6f6f:  * limitations under the License.
1:91e6f6f:  */
5:91e6f6f: 
1:91e6f6f: package org.apache.carbondata.processing.loading.iterator;
1:91e6f6f: 
1:91e6f6f: import java.util.concurrent.ArrayBlockingQueue;
1:a89587e: import java.util.concurrent.TimeUnit;
1:91e6f6f: 
1:91e6f6f: import org.apache.carbondata.common.CarbonIterator;
1:fe436c3: import org.apache.carbondata.core.util.CarbonProperties;
1:91e6f6f: 
1:a89587e: import org.apache.commons.logging.Log;
1:a89587e: import org.apache.commons.logging.LogFactory;
1:a89587e: 
1:91e6f6f: /**
1:91e6f6f:  * It is wrapper class to hold the rows in batches when record writer writes the data and allows
1:91e6f6f:  * to iterate on it during data load. It uses blocking queue to coordinate between read and write.
1:91e6f6f:  */
1:dded5d5: public class CarbonOutputIteratorWrapper extends CarbonIterator<Object[]> {
1:91e6f6f: 
1:a89587e:   private static final Log LOG = LogFactory.getLog(CarbonOutputIteratorWrapper.class);
1:a89587e: 
1:fe436c3:   private boolean close;
1:91e6f6f: 
1:91e6f6f:   /**
1:91e6f6f:    * Number of rows kept in memory at most will be batchSize * queue size
1:91e6f6f:    */
1:fe436c3:   private int batchSize = CarbonProperties.getInstance().getBatchSize();
1:91e6f6f: 
1:91e6f6f:   private RowBatch loadBatch = new RowBatch(batchSize);
1:91e6f6f: 
1:91e6f6f:   private RowBatch readBatch;
1:91e6f6f: 
1:91e6f6f:   private ArrayBlockingQueue<RowBatch> queue = new ArrayBlockingQueue<>(10);
1:91e6f6f: 
1:dded5d5:   public void write(Object[] row) throws InterruptedException {
1:7edef8f:     if (close) {
1:7edef8f:       // already might be closed forcefully
1:7edef8f:       return;
1:7edef8f:     }
1:91e6f6f:     if (!loadBatch.addRow(row)) {
2:91e6f6f:       loadBatch.readyRead();
1:3ff55a2:       queue.put(loadBatch);
1:91e6f6f:       loadBatch = new RowBatch(batchSize);
6:91e6f6f:     }
1:91e6f6f:   }
1:91e6f6f: 
3:91e6f6f:   @Override
1:91e6f6f:   public boolean hasNext() {
1:a89587e:     if (readBatch == null || !readBatch.hasNext()) {
2:91e6f6f:       try {
1:a89587e:         if (!close) {
1:a89587e:           readBatch = queue.poll(5, TimeUnit.MINUTES);
1:a89587e:           if (readBatch == null) {
1:a89587e:             LOG.warn("This scenario should not happen");
1:a89587e:             return false;
1:a89587e:           }
1:a89587e:         } else {
1:a89587e:           readBatch = queue.poll();
1:a89587e:           if (readBatch == null) {
1:a89587e:             return false;
1:a89587e:           }
1:3ff55a2:         }
2:91e6f6f:       } catch (InterruptedException e) {
2:91e6f6f:         throw new RuntimeException(e);
1:a89587e:       }
1:91e6f6f:     }
1:a89587e:     return readBatch.hasNext();
1:a89587e:   }
1:a89587e: 
1:a89587e:   @Override
1:dded5d5:   public Object[] next() {
1:a89587e:     return readBatch.next();
1:a89587e:   }
1:a89587e: 
1:7edef8f:   public void closeWriter(boolean isForceClose) {
1:7edef8f:     if (close) {
1:7edef8f:       // already might be closed forcefully
1:7edef8f:       return;
1:7edef8f:     }
1:a89587e:     try {
1:7edef8f:       if (isForceClose) {
1:fc8510a:         // first make close is set to true, when force close happens because of dead consumer.
1:fc8510a:         // so that, write() method will stop taking input rows.
1:7edef8f:         close = true;
1:fc8510a:         // once write() method stops taking input rows, clear the queue.
1:fc8510a:         // If queue is cleared before close is set to true, then queue will be again filled
1:fc8510a:         // by .write() and it can go to blocking put() forever as consumer is dead.
1:fc8510a:         queue.clear();
1:7edef8f:         return;
1:7edef8f:       }
1:fe436c3:       // below code will ensure that the last RowBatch is consumed properly
1:a89587e:       loadBatch.readyRead();
1:a89587e:       if (loadBatch.size > 0) {
1:a89587e:         queue.put(loadBatch);
1:a89587e:       }
1:a89587e:     } catch (InterruptedException e) {
1:a89587e:       throw new RuntimeException(e);
1:91e6f6f:     }
1:91e6f6f:     close = true;
1:a89587e:     // It is required if the thread waits for take.
1:a89587e:     if (queue.isEmpty()) {
1:a89587e:       if (!queue.offer(new RowBatch(0))) {
1:a89587e:         LOG.warn("The default last element is not added to queue");
1:a89587e:       }
1:a89587e:     }
1:91e6f6f:   }
1:91e6f6f: 
1:dded5d5:   private static class RowBatch extends CarbonIterator<Object[]> {
1:91e6f6f: 
1:91e6f6f:     private int counter;
1:91e6f6f: 
1:dded5d5:     private Object[][] batch;
1:91e6f6f: 
1:91e6f6f:     private int size;
1:91e6f6f: 
1:91e6f6f:     private RowBatch(int size) {
1:dded5d5:       batch = new Object[size][];
1:91e6f6f:       this.size = size;
1:91e6f6f:     }
1:91e6f6f: 
1:91e6f6f:     /**
1:91e6f6f:      * Add row to the batch, it can hold rows till the batch size.
1:91e6f6f:      * @param row
1:91e6f6f:      * @return false if the row cannot be added as batch is full.
1:91e6f6f:      */
1:dded5d5:     public boolean addRow(Object[] row) {
1:91e6f6f:       batch[counter++] = row;
1:91e6f6f:       return counter < size;
1:91e6f6f:     }
1:91e6f6f: 
1:91e6f6f:     public void readyRead() {
1:91e6f6f:       size = counter;
1:91e6f6f:       counter = 0;
1:91e6f6f:     }
1:91e6f6f: 
1:91e6f6f:     @Override
1:91e6f6f:     public boolean hasNext() {
1:91e6f6f:       return counter < size;
1:91e6f6f:     }
1:91e6f6f: 
1:91e6f6f:     @Override
1:dded5d5:     public Object[] next() {
1:91e6f6f:       assert (counter < size);
1:91e6f6f:       return batch[counter++];
1:91e6f6f:     }
1:91e6f6f:   }
1:91e6f6f: 
1:91e6f6f: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:fc8510a
/////////////////////////////////////////////////////////////////////////
1:         // first make close is set to true, when force close happens because of dead consumer.
1:         // so that, write() method will stop taking input rows.
1:         // once write() method stops taking input rows, clear the queue.
1:         // If queue is cleared before close is set to true, then queue will be again filled
1:         // by .write() and it can go to blocking put() forever as consumer is dead.
1:         queue.clear();
commit:7edef8f
/////////////////////////////////////////////////////////////////////////
1:     if (close) {
1:       // already might be closed forcefully
1:       return;
1:     }
/////////////////////////////////////////////////////////////////////////
1:   public void closeWriter(boolean isForceClose) {
1:     if (close) {
1:       // already might be closed forcefully
1:       return;
1:     }
1:       if (isForceClose) {
0:         // unblock the queue.put on the other thread and clear the queue.
0:         queue.clear();
1:         close = true;
1:         return;
1:       }
author:manishgupta88
-------------------------------------------------------------------------------
commit:fe436c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:   private boolean close;
1:   private int batchSize = CarbonProperties.getInstance().getBatchSize();
/////////////////////////////////////////////////////////////////////////
1:       // below code will ensure that the last RowBatch is consumed properly
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1: public class CarbonOutputIteratorWrapper extends CarbonIterator<Object[]> {
/////////////////////////////////////////////////////////////////////////
1:   public void write(Object[] row) throws InterruptedException {
/////////////////////////////////////////////////////////////////////////
1:   public Object[] next() {
/////////////////////////////////////////////////////////////////////////
1:   private static class RowBatch extends CarbonIterator<Object[]> {
1:     private Object[][] batch;
1:       batch = new Object[size][];
/////////////////////////////////////////////////////////////////////////
1:     public boolean addRow(Object[] row) {
/////////////////////////////////////////////////////////////////////////
1:     public Object[] next() {
commit:a89587e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1:   private static final Log LOG = LogFactory.getLog(CarbonOutputIteratorWrapper.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (readBatch == null || !readBatch.hasNext()) {
1:         if (!close) {
1:           readBatch = queue.poll(5, TimeUnit.MINUTES);
1:           if (readBatch == null) {
1:             LOG.warn("This scenario should not happen");
1:             return false;
1:           }
1:         } else {
1:           readBatch = queue.poll();
1:           if (readBatch == null) {
1:             return false;
1:           }
1:     return readBatch.hasNext();
1:   }
1: 
1:   @Override
0:   public String[] next() {
1:     return readBatch.next();
1:   }
1: 
0:   public void closeWriter() {
1:     try {
1:       loadBatch.readyRead();
1:       if (loadBatch.size > 0) {
1:         queue.put(loadBatch);
1:       }
1:     } catch (InterruptedException e) {
1:       throw new RuntimeException(e);
1:     }
1:     // It is required if the thread waits for take.
1:     if (queue.isEmpty()) {
1:       if (!queue.offer(new RowBatch(0))) {
1:         LOG.warn("The default last element is not added to queue");
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3ff55a2
/////////////////////////////////////////////////////////////////////////
0:         if (loadBatch.size > 0) {
1:           queue.put(loadBatch);
1:         }
commit:4430178
/////////////////////////////////////////////////////////////////////////
0:     if (readBatch == null || !readBatch.hasNext()  && !close) {
commit:91e6f6f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.loading.iterator;
1: 
1: import java.util.concurrent.ArrayBlockingQueue;
1: 
1: import org.apache.carbondata.common.CarbonIterator;
1: 
1: /**
1:  * It is wrapper class to hold the rows in batches when record writer writes the data and allows
1:  * to iterate on it during data load. It uses blocking queue to coordinate between read and write.
1:  */
0: public class CarbonOutputIteratorWrapper extends CarbonIterator<String[]> {
1: 
0:   private boolean close = false;
1: 
1:   /**
1:    * Number of rows kept in memory at most will be batchSize * queue size
1:    */
0:   private int batchSize = 1000;
1: 
1:   private RowBatch loadBatch = new RowBatch(batchSize);
1: 
1:   private RowBatch readBatch;
1: 
1:   private ArrayBlockingQueue<RowBatch> queue = new ArrayBlockingQueue<>(10);
1: 
0:   public void write(String[] row) throws InterruptedException {
1:     if (!loadBatch.addRow(row)) {
1:       loadBatch.readyRead();
0:       queue.put(loadBatch);
1:       loadBatch = new RowBatch(batchSize);
1:     }
1:   }
1: 
1:   @Override
1:   public boolean hasNext() {
0:     return !queue.isEmpty() || !close || readBatch != null && readBatch.hasNext();
1:   }
1: 
1:   @Override
0:   public String[] next() {
0:     if (readBatch == null || !readBatch.hasNext()) {
1:       try {
0:         readBatch = queue.take();
1:       } catch (InterruptedException e) {
1:         throw new RuntimeException(e);
1:       }
1:     }
0:     return readBatch.next();
1:   }
1: 
1:   @Override
0:   public void close() {
0:     if (loadBatch.isLoading()) {
1:       try {
1:         loadBatch.readyRead();
0:         queue.put(loadBatch);
1:       } catch (InterruptedException e) {
1:         throw new RuntimeException(e);
1:       }
1:     }
1:     close = true;
1:   }
1: 
0:   private static class RowBatch extends CarbonIterator<String[]> {
1: 
1:     private int counter;
1: 
0:     private String[][] batch;
1: 
1:     private int size;
1: 
0:     private boolean isLoading = true;
1: 
1:     private RowBatch(int size) {
0:       batch = new String[size][];
1:       this.size = size;
1:     }
1: 
1:     /**
1:      * Add row to the batch, it can hold rows till the batch size.
1:      * @param row
1:      * @return false if the row cannot be added as batch is full.
1:      */
0:     public boolean addRow(String[] row) {
1:       batch[counter++] = row;
1:       return counter < size;
1:     }
1: 
1:     public void readyRead() {
1:       size = counter;
1:       counter = 0;
0:       isLoading = false;
1:     }
1: 
0:     public boolean isLoading() {
0:       return isLoading;
1:     }
1: 
1:     @Override
1:     public boolean hasNext() {
1:       return counter < size;
1:     }
1: 
1:     @Override
0:     public String[] next() {
1:       assert (counter < size);
1:       return batch[counter++];
1:     }
1:   }
1: 
1: }
============================================================================