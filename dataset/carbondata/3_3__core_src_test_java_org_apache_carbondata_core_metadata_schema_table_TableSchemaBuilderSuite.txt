1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
1:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.core.metadata.schema.table;
1:1d827c7: 
1:93724ec: import java.util.Arrays;
1:1d827c7: import java.util.List;
1:35a7b5e: import java.util.concurrent.atomic.AtomicInteger;
1:1d827c7: 
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.StructField;
1:1d827c7: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:1d827c7: 
1:1d827c7: import org.junit.Assert;
1:1d827c7: import org.junit.Test;
1:1d827c7: 
1:1d827c7: public class TableSchemaBuilderSuite {
1:1d827c7: 
1:1d827c7:   @Test(expected = NullPointerException.class)
1:1d827c7:   public void testNullField() {
1:1d827c7:     TableSchemaBuilder builder = TableSchema.builder();
1:35a7b5e:     builder.addColumn(null, new AtomicInteger(0), true);
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   @Test
1:1d827c7:   public void testBuilder() {
1:1d827c7:     TableSchemaBuilder builder = TableSchema.builder();
1:35a7b5e:     ColumnSchema columnSchema =
1:35a7b5e:         builder.addColumn(new StructField("a", DataTypes.INT), new AtomicInteger(0), true);
1:93724ec:     builder.setSortColumns(Arrays.asList(columnSchema));
1:35a7b5e:     builder.addColumn(new StructField("b", DataTypes.DOUBLE), new AtomicInteger(0), false);
1:1d827c7:     TableSchema schema = builder.build();
1:1d827c7:     Assert.assertEquals(2, schema.getListOfColumns().size());
1:1d827c7:     List<ColumnSchema> columns = schema.getListOfColumns();
1:1d827c7:     Assert.assertEquals("a", columns.get(0).getColumnName());
1:1d827c7:     Assert.assertEquals("b", columns.get(1).getColumnName());
1:1d827c7:   }
1:1d827c7: 
1:1d827c7:   @Test(expected = IllegalArgumentException.class)
1:1d827c7:   public void testRepeatedColumn() {
1:1d827c7:     TableSchemaBuilder builder = TableSchema.builder();
1:35a7b5e:     ColumnSchema columnSchema =
1:35a7b5e:         builder.addColumn(new StructField("a", DataTypes.INT), new AtomicInteger(0), true);
1:93724ec:     builder.setSortColumns(Arrays.asList(columnSchema));
1:35a7b5e:     builder.addColumn(new StructField("a", DataTypes.DOUBLE), new AtomicInteger(0), false);
1:1d827c7:     TableSchema schema = builder.build();
1:1d827c7:   }
1:1d827c7: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:35a7b5e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     builder.addColumn(null, new AtomicInteger(0), true);
1:     ColumnSchema columnSchema =
1:         builder.addColumn(new StructField("a", DataTypes.INT), new AtomicInteger(0), true);
1:     builder.addColumn(new StructField("b", DataTypes.DOUBLE), new AtomicInteger(0), false);
/////////////////////////////////////////////////////////////////////////
1:     ColumnSchema columnSchema =
1:         builder.addColumn(new StructField("a", DataTypes.INT), new AtomicInteger(0), true);
1:     builder.addColumn(new StructField("a", DataTypes.DOUBLE), new AtomicInteger(0), false);
author:rahulforallp
-------------------------------------------------------------------------------
commit:93724ec
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:     ColumnSchema columnSchema = builder.addColumn(new StructField("a", DataTypes.INT), true);
1:     builder.setSortColumns(Arrays.asList(columnSchema));
/////////////////////////////////////////////////////////////////////////
0:     ColumnSchema columnSchema = builder.addColumn(new StructField("a", DataTypes.INT), true);
1:     builder.setSortColumns(Arrays.asList(columnSchema));
author:Jacky Li
-------------------------------------------------------------------------------
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.datatype.StructField;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class TableSchemaBuilderSuite {
1: 
1:   @Test(expected = NullPointerException.class)
1:   public void testNullField() {
1:     TableSchemaBuilder builder = TableSchema.builder();
0:     builder.addColumn(null, true);
1:   }
1: 
1:   @Test
1:   public void testBuilder() {
1:     TableSchemaBuilder builder = TableSchema.builder();
0:     builder.addColumn(new StructField("a", DataTypes.INT), true);
0:     builder.addColumn(new StructField("b", DataTypes.DOUBLE), false);
1:     TableSchema schema = builder.build();
1:     Assert.assertEquals(2, schema.getListOfColumns().size());
1:     List<ColumnSchema> columns = schema.getListOfColumns();
1:     Assert.assertEquals("a", columns.get(0).getColumnName());
1:     Assert.assertEquals("b", columns.get(1).getColumnName());
1:   }
1: 
1:   @Test(expected = IllegalArgumentException.class)
1:   public void testRepeatedColumn() {
1:     TableSchemaBuilder builder = TableSchema.builder();
0:     builder.addColumn(new StructField("a", DataTypes.INT), true);
0:     builder.addColumn(new StructField("a", DataTypes.DOUBLE), false);
1:     TableSchema schema = builder.build();
1:   }
1: }
============================================================================