1:9aee980: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9aee980:  *
1:9aee980:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9aee980:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:9aee980:  */
1:349c59c: package org.apache.carbondata.processing.loading.sort;
1:9aee980: 
1:9aee980: import java.util.Iterator;
1:9aee980: 
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:349c59c: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1:349c59c: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
1:9aee980: 
1:9aee980: /**
1:9aee980:  * This interface sorts all the data of iterators.
1:9aee980:  * The life cycle of this interface is initialize -> sort -> close
1:9aee980:  */
1:9aee980: public interface Sorter {
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * Initialize sorter with sort parameters.
1:9aee980:    *
1:9aee980:    * @param sortParameters
1:9aee980:    */
1:9aee980:   void initialize(SortParameters sortParameters);
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * Sorts the data of all iterators, this iterators can be
1:9aee980:    * read parallely depends on implementation.
1:9aee980:    *
1:9aee980:    * @param iterators array of iterators to read data.
1:9aee980:    * @return
1:9aee980:    * @throws CarbonDataLoadingException
1:9aee980:    */
1:9aee980:   Iterator<CarbonRowBatch>[] sort(Iterator<CarbonRowBatch>[] iterators)
1:9aee980:       throws CarbonDataLoadingException;
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * Close resources
1:9aee980:    */
1:9aee980:   void close();
1:9aee980: 
1:9aee980: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:9aee980
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.sort;
1: 
1: import java.util.Iterator;
1: 
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRowBatch;
0: import org.apache.carbondata.processing.sortandgroupby.sortdata.SortParameters;
1: 
1: /**
1:  * This interface sorts all the data of iterators.
1:  * The life cycle of this interface is initialize -> sort -> close
1:  */
1: public interface Sorter {
1: 
1:   /**
1:    * Initialize sorter with sort parameters.
1:    *
1:    * @param sortParameters
1:    */
1:   void initialize(SortParameters sortParameters);
1: 
1:   /**
1:    * Sorts the data of all iterators, this iterators can be
1:    * read parallely depends on implementation.
1:    *
1:    * @param iterators array of iterators to read data.
1:    * @return
1:    * @throws CarbonDataLoadingException
1:    */
1:   Iterator<CarbonRowBatch>[] sort(Iterator<CarbonRowBatch>[] iterators)
1:       throws CarbonDataLoadingException;
1: 
1:   /**
1:    * Close resources
1:    */
1:   void close();
1: 
1: }
============================================================================