1:0bbfa85: /*
1:0bbfa85:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0bbfa85:  * contributor license agreements.  See the NOTICE file distributed with
1:0bbfa85:  * this work for additional information regarding copyright ownership.
1:0bbfa85:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0bbfa85:  * (the "License"); you may not use this file except in compliance with
1:0bbfa85:  * the License.  You may obtain a copy of the License at
1:0bbfa85:  *
1:0bbfa85:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0bbfa85:  *
1:0bbfa85:  * Unless required by applicable law or agreed to in writing, software
1:0bbfa85:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0bbfa85:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0bbfa85:  * See the License for the specific language governing permissions and
1:0bbfa85:  * limitations under the License.
1:0bbfa85:  */
1:0bbfa85: package org.apache.carbondata.core.scan.filter.executer;
1:0bbfa85: 
1:0bbfa85: import java.util.BitSet;
1:0bbfa85: 
1:0bbfa85: /**
1:0bbfa85:  * Implementation of this interface will involve block
1:0bbfa85:  * and blocklet pruning based on block/blocklet id where
1:0bbfa85:  * the filter values are present.
1:0bbfa85:  */
1:0bbfa85: public interface ImplicitColumnFilterExecutor {
1:0bbfa85: 
1:0bbfa85:   /**
1:0bbfa85:    * This method will validate the block or blocklet id with the implicit
1:0bbfa85:    * column filter value list and decide whether the required block or
1:0bbfa85:    * blocklet has to be scanned for the data or not
1:0bbfa85:    *
1:0bbfa85:    * @param uniqueBlockPath
1:0bbfa85:    * @return
1:0bbfa85:    */
1:0bbfa85:   BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:0bbfa85:       String uniqueBlockPath);
1:0bbfa85: 
1:0bbfa85:   /**
1:0bbfa85:    * This method will validate the abstract index
1:0bbfa85:    * and decide whether the index is valid for scanning or not.
1:0bbfa85:    * Implicit index is always considered valid as it can be decided at block level.
1:0bbfa85:    *
1:0bbfa85:    * @return
1:0bbfa85:    */
1:0bbfa85:   Boolean isFilterValuesPresentInAbstractIndex(byte[][] maxValue, byte[][] minValue);
1:0bbfa85: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:0bbfa85
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.filter.executer;
1: 
1: import java.util.BitSet;
1: 
1: /**
1:  * Implementation of this interface will involve block
1:  * and blocklet pruning based on block/blocklet id where
1:  * the filter values are present.
1:  */
1: public interface ImplicitColumnFilterExecutor {
1: 
1:   /**
1:    * This method will validate the block or blocklet id with the implicit
1:    * column filter value list and decide whether the required block or
1:    * blocklet has to be scanned for the data or not
1:    *
1:    * @param uniqueBlockPath
1:    * @return
1:    */
1:   BitSet isFilterValuesPresentInBlockOrBlocklet(byte[][] maxValue, byte[][] minValue,
1:       String uniqueBlockPath);
1: 
1:   /**
1:    * This method will validate the abstract index
1:    * and decide whether the index is valid for scanning or not.
1:    * Implicit index is always considered valid as it can be decided at block level.
1:    *
1:    * @return
1:    */
1:   Boolean isFilterValuesPresentInAbstractIndex(byte[][] maxValue, byte[][] minValue);
1: }
============================================================================