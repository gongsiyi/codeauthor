1:5ef67ac: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:5ef67ac:  *
1:5ef67ac:  *    http://www.apache.org/licenses/LICENSE-2.0
1:5ef67ac:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:5ef67ac:  */
3:5ef67ac: 
1:5ef67ac: package org.apache.carbondata.core.keygenerator.mdkey;
1:5ef67ac: 
1:5ef67ac: import org.junit.Before;
1:5ef67ac: import org.junit.Test;
1:5ef67ac: 
1:5ef67ac: import static junit.framework.Assert.assertEquals;
1:5ef67ac: import static org.hamcrest.CoreMatchers.equalTo;
1:5ef67ac: import static org.hamcrest.MatcherAssert.assertThat;
1:5ef67ac: import static org.hamcrest.core.Is.is;
1:5ef67ac: 
1:5ef67ac: public class MultiDimKeyVarLengthGeneratorUnitTest {
1:5ef67ac:   private MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator;
1:5ef67ac: 
1:5ef67ac:   @Before public void setup() {
1:5ef67ac:     int[] lens = new int[] { 1, 2, 3 };
1:5ef67ac:     multiDimKeyVarLengthGenerator = new MultiDimKeyVarLengthGenerator(lens);
3:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithSameInstance() throws Exception {
1:5ef67ac:     int[] lens = new int[] { 1, 2, 3 };
1:5ef67ac:     MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator1 =
1:5ef67ac:         new MultiDimKeyVarLengthGenerator(lens);
1:5ef67ac:     boolean result = multiDimKeyVarLengthGenerator.equals(multiDimKeyVarLengthGenerator1);
1:5ef67ac:     assertEquals(true, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testEqualsWithDifferenceInstance() throws Exception {
1:5ef67ac:     boolean result = multiDimKeyVarLengthGenerator.equals(new Object());
1:5ef67ac:     assertEquals(false, result);
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompareWithSameByteArray() throws Exception {
1:5ef67ac:     byte[] keys = new byte[] { 10, 2, 10, 2, 10, 2, 10, 2, 10, 2 };
1:5ef67ac:     int expected = 0;
1:5ef67ac:     int result = multiDimKeyVarLengthGenerator.compare(keys, keys);
2:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompareWithByteArray1IsGreaterThanByteArray2() throws Exception {
1:5ef67ac:     byte[] byteArray1 = new byte[] { 10, 2, 10 };
1:5ef67ac:     byte[] byteArray2 = new byte[] { 10, 1 };
1:5ef67ac:     int expected = 1;
1:5ef67ac:     int result = multiDimKeyVarLengthGenerator.compare(byteArray1, byteArray2);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: 
1:5ef67ac:   @Test public void testCompareWithByteArray1IsLessThanByteArray2() throws Exception {
1:5ef67ac:     byte[] byteArray1 = new byte[] { 10, 2 };
1:5ef67ac:     byte[] byteArray2 = new byte[] { 10, 1, 30 };
1:5ef67ac:     int expected = 1;
1:5ef67ac:     int result = multiDimKeyVarLengthGenerator.compare(byteArray1, byteArray2);
1:5ef67ac:     assertThat(result, is(equalTo(expected)));
1:5ef67ac:   }
1:5ef67ac: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:15f04c3
/////////////////////////////////////////////////////////////////////////
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Anurag
-------------------------------------------------------------------------------
commit:5ef67ac
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.assertNull;
1: import static org.hamcrest.CoreMatchers.equalTo;
1: import static org.hamcrest.MatcherAssert.assertThat;
1: import static org.hamcrest.core.Is.is;
1: 
1: public class MultiDimKeyVarLengthGeneratorUnitTest {
1:   private MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator;
1: 
1:   @Before public void setup() {
1:     int[] lens = new int[] { 1, 2, 3 };
1:     multiDimKeyVarLengthGenerator = new MultiDimKeyVarLengthGenerator(lens);
1:   }
1: 
0:   @Test public void testGetSubKeyArray() throws Exception {
0:     byte[] key = new byte[] { 1, 102, 20 };
0:     int index = 1;
0:     int size = 2;
0:     long[] expected = new long[] { 0, 1 };
0:     long[] result = multiDimKeyVarLengthGenerator.getSubKeyArray(key, index, size);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
0:   @Test public void testGetSubKeyArrayWithIndexIsLessThanZeroAndSizeIsZero() throws Exception {
0:     byte[] key = new byte[] { 1, 102, 20 };
0:     int index = -1;
0:     int size = 0;
0:     long[] result = multiDimKeyVarLengthGenerator.getSubKeyArray(key, index, size);
0:     assertNull(result);
1:   }
1: 
1:   @Test public void testEqualsWithSameInstance() throws Exception {
1:     int[] lens = new int[] { 1, 2, 3 };
1:     MultiDimKeyVarLengthGenerator multiDimKeyVarLengthGenerator1 =
1:         new MultiDimKeyVarLengthGenerator(lens);
1:     boolean result = multiDimKeyVarLengthGenerator.equals(multiDimKeyVarLengthGenerator1);
1:     assertEquals(true, result);
1:   }
1: 
1:   @Test public void testEqualsWithDifferenceInstance() throws Exception {
1:     boolean result = multiDimKeyVarLengthGenerator.equals(new Object());
1:     assertEquals(false, result);
1:   }
1: 
1:   @Test public void testCompareWithSameByteArray() throws Exception {
1:     byte[] keys = new byte[] { 10, 2, 10, 2, 10, 2, 10, 2, 10, 2 };
1:     int expected = 0;
1:     int result = multiDimKeyVarLengthGenerator.compare(keys, keys);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testCompareWithByteArray1IsGreaterThanByteArray2() throws Exception {
1:     byte[] byteArray1 = new byte[] { 10, 2, 10 };
1:     byte[] byteArray2 = new byte[] { 10, 1 };
1:     int expected = 1;
1:     int result = multiDimKeyVarLengthGenerator.compare(byteArray1, byteArray2);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: 
1:   @Test public void testCompareWithByteArray1IsLessThanByteArray2() throws Exception {
1:     byte[] byteArray1 = new byte[] { 10, 2 };
1:     byte[] byteArray2 = new byte[] { 10, 1, 30 };
1:     int expected = 1;
1:     int result = multiDimKeyVarLengthGenerator.compare(byteArray1, byteArray2);
1:     assertThat(result, is(equalTo(expected)));
1:   }
1: }
============================================================================