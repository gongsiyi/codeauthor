1:56330ae: /*
1:56330ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56330ae:  * contributor license agreements.  See the NOTICE file distributed with
1:56330ae:  * this work for additional information regarding copyright ownership.
1:56330ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56330ae:  * (the "License"); you may not use this file except in compliance with
1:56330ae:  * the License.  You may obtain a copy of the License at
1:56330ae:  *
1:56330ae:  *    http://www.apache.org/licenses/LICENSE-2.0
1:56330ae:  *
1:56330ae:  * Unless required by applicable law or agreed to in writing, software
1:56330ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56330ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56330ae:  * See the License for the specific language governing permissions and
1:56330ae:  * limitations under the License.
1:56330ae:  */
1:56330ae: package org.apache.carbondata.core.datamap.dev.expr;
1:56330ae: 
1:56330ae: import java.io.IOException;
1:56330ae: import java.util.ArrayList;
1:56330ae: import java.util.HashSet;
1:56330ae: import java.util.List;
1:56330ae: import java.util.Set;
1:56330ae: 
1:b338459: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:fc2a7eb: import org.apache.carbondata.core.datamap.DataMapLevel;
1:f9291cd: import org.apache.carbondata.core.datamap.Segment;
1:56330ae: import org.apache.carbondata.core.indexstore.ExtendedBlocklet;
1:56330ae: import org.apache.carbondata.core.indexstore.PartitionSpec;
1:56330ae: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1:56330ae: 
1:56330ae: /**
1:56330ae:  * Or expression for datamaps
1:56330ae:  */
1:56330ae: public class OrDataMapExprWrapper implements DataMapExprWrapper {
1:56330ae: 
1:56330ae:   private DataMapExprWrapper left;
1:56330ae: 
1:56330ae:   private DataMapExprWrapper right;
1:56330ae: 
1:56330ae:   private FilterResolverIntf resolverIntf;
1:56330ae: 
1:56330ae:   public OrDataMapExprWrapper(DataMapExprWrapper left, DataMapExprWrapper right,
1:56330ae:       FilterResolverIntf resolverIntf) {
1:56330ae:     this.left = left;
1:56330ae:     this.right = right;
1:56330ae:     this.resolverIntf = resolverIntf;
1:56330ae:   }
1:56330ae: 
1:280a400:   @Override
1:c58eb43:   public List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune)
1:c58eb43:       throws IOException {
1:c58eb43:     List<ExtendedBlocklet> leftPrune = left.prune(segments, partitionsToPrune);
1:c58eb43:     List<ExtendedBlocklet> rightPrune = right.prune(segments, partitionsToPrune);
1:56330ae:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:56330ae:     andBlocklets.addAll(leftPrune);
1:56330ae:     andBlocklets.addAll(rightPrune);
1:56330ae:     return new ArrayList<>(andBlocklets);
1:56330ae:   }
1:56330ae: 
1:b338459:   @Override
1:b338459:   public List<ExtendedBlocklet> prune(DataMapDistributable distributable,
1:b338459:       List<PartitionSpec> partitionsToPrune)
1:b338459:           throws IOException {
1:b338459:     List<ExtendedBlocklet> leftPrune = left.prune(distributable, partitionsToPrune);
1:b338459:     List<ExtendedBlocklet> rightPrune = right.prune(distributable, partitionsToPrune);
1:b338459:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:b338459:     andBlocklets.addAll(leftPrune);
1:b338459:     andBlocklets.addAll(rightPrune);
1:b338459:     return new ArrayList<>(andBlocklets);
1:b338459:   }
1:b338459: 
1:56330ae:   @Override public List<ExtendedBlocklet> pruneBlocklets(List<ExtendedBlocklet> blocklets)
1:56330ae:       throws IOException {
1:56330ae:     List<ExtendedBlocklet> leftPrune = left.pruneBlocklets(blocklets);
1:56330ae:     List<ExtendedBlocklet> rightPrune = right.pruneBlocklets(blocklets);
1:56330ae:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:56330ae:     andBlocklets.addAll(leftPrune);
1:56330ae:     andBlocklets.addAll(rightPrune);
1:56330ae:     return new ArrayList<>(andBlocklets);
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public List<DataMapDistributableWrapper> toDistributable(List<Segment> segments)
1:56330ae:       throws IOException {
1:56330ae:     List<DataMapDistributableWrapper> wrappers = new ArrayList<>();
1:56330ae:     wrappers.addAll(left.toDistributable(segments));
1:56330ae:     wrappers.addAll(right.toDistributable(segments));
1:56330ae:     return wrappers;
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public FilterResolverIntf getFilterResolverIntf() {
1:56330ae:     return resolverIntf;
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public FilterResolverIntf getFilterResolverIntf(String uniqueId) {
1:56330ae:     FilterResolverIntf leftExp = left.getFilterResolverIntf(uniqueId);
1:56330ae:     FilterResolverIntf rightExp = right.getFilterResolverIntf(uniqueId);
1:56330ae:     if (leftExp != null) {
1:56330ae:       return leftExp;
1:56330ae:     } else if (rightExp != null) {
1:56330ae:       return rightExp;
1:56330ae:     }
1:56330ae:     return null;
1:56330ae:   }
1:56330ae: 
1:56330ae: 
1:03a735b:   @Override public DataMapLevel getDataMapLevel() {
1:03a735b:     return left.getDataMapLevel();
1:03a735b:   }
1:03a735b: 
1:c0de9f1:   @Override
1:c0de9f1:   public DataMapExprWrapper getLeftDataMapWrapper() {
1:c0de9f1:     return left;
1:c0de9f1:   }
1:c0de9f1: 
1:c0de9f1:   @Override
1:c0de9f1:   public DataMapExprWrapper getRightDataMapWrapprt() {
1:c0de9f1:     return right;
1:56330ae:   }
1:56330ae: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:c0de9f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public DataMapExprWrapper getLeftDataMapWrapper() {
1:     return left;
1:   }
1: 
1:   @Override
1:   public DataMapExprWrapper getRightDataMapWrapprt() {
1:     return right;
commit:f9291cd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.Segment;
author:xubo245
-------------------------------------------------------------------------------
commit:b338459
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public List<ExtendedBlocklet> prune(DataMapDistributable distributable,
1:       List<PartitionSpec> partitionsToPrune)
1:           throws IOException {
1:     List<ExtendedBlocklet> leftPrune = left.prune(distributable, partitionsToPrune);
1:     List<ExtendedBlocklet> rightPrune = right.prune(distributable, partitionsToPrune);
1:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:     andBlocklets.addAll(leftPrune);
1:     andBlocklets.addAll(rightPrune);
1:     return new ArrayList<>(andBlocklets);
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:03a735b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
/////////////////////////////////////////////////////////////////////////
1:   @Override public DataMapLevel getDataMapLevel() {
1:     return left.getDataMapLevel();
1:   }
1: 
0:   @Override public DataMapSchema getDataMapSchema() {
0:     return left.getDataMapSchema();
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapLevel;
/////////////////////////////////////////////////////////////////////////
0:   @Override public DataMapLevel getDataMapType() {
author:sounakr
-------------------------------------------------------------------------------
commit:c58eb43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune)
1:       throws IOException {
1:     List<ExtendedBlocklet> leftPrune = left.prune(segments, partitionsToPrune);
1:     List<ExtendedBlocklet> rightPrune = right.prune(segments, partitionsToPrune);
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.readcommitter.ReadCommittedScope;
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public List<ExtendedBlocklet> prune(List<Segment> segments, List<PartitionSpec> partitionsToPrune,
0:       ReadCommittedScope readCommittedScope) throws IOException {
0:     List<ExtendedBlocklet> leftPrune = left.prune(segments, partitionsToPrune, readCommittedScope);
0:     List<ExtendedBlocklet> rightPrune =
0:         right.prune(segments, partitionsToPrune, readCommittedScope);
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev.expr;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
0: import org.apache.carbondata.core.datamap.DataMapType;
0: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.indexstore.ExtendedBlocklet;
1: import org.apache.carbondata.core.indexstore.PartitionSpec;
1: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: 
1: /**
1:  * Or expression for datamaps
1:  */
1: public class OrDataMapExprWrapper implements DataMapExprWrapper {
1: 
1:   private DataMapExprWrapper left;
1: 
1:   private DataMapExprWrapper right;
1: 
1:   private FilterResolverIntf resolverIntf;
1: 
1:   public OrDataMapExprWrapper(DataMapExprWrapper left, DataMapExprWrapper right,
1:       FilterResolverIntf resolverIntf) {
1:     this.left = left;
1:     this.right = right;
1:     this.resolverIntf = resolverIntf;
1:   }
1: 
0:   @Override public List<ExtendedBlocklet> prune(List<Segment> segments,
0:       List<PartitionSpec> partitionsToPrune) throws IOException {
0:     List<ExtendedBlocklet> leftPrune = left.prune(segments, partitionsToPrune);
0:     List<ExtendedBlocklet> rightPrune = right.prune(segments, partitionsToPrune);
1:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:     andBlocklets.addAll(leftPrune);
1:     andBlocklets.addAll(rightPrune);
1:     return new ArrayList<>(andBlocklets);
1:   }
1: 
1:   @Override public List<ExtendedBlocklet> pruneBlocklets(List<ExtendedBlocklet> blocklets)
1:       throws IOException {
1:     List<ExtendedBlocklet> leftPrune = left.pruneBlocklets(blocklets);
1:     List<ExtendedBlocklet> rightPrune = right.pruneBlocklets(blocklets);
1:     Set<ExtendedBlocklet> andBlocklets = new HashSet<>();
1:     andBlocklets.addAll(leftPrune);
1:     andBlocklets.addAll(rightPrune);
1:     return new ArrayList<>(andBlocklets);
1:   }
1: 
1:   @Override public List<DataMapDistributableWrapper> toDistributable(List<Segment> segments)
1:       throws IOException {
1:     List<DataMapDistributableWrapper> wrappers = new ArrayList<>();
1:     wrappers.addAll(left.toDistributable(segments));
1:     wrappers.addAll(right.toDistributable(segments));
1:     return wrappers;
1:   }
1: 
1:   @Override public FilterResolverIntf getFilterResolverIntf() {
1:     return resolverIntf;
1:   }
1: 
1:   @Override public FilterResolverIntf getFilterResolverIntf(String uniqueId) {
1:     FilterResolverIntf leftExp = left.getFilterResolverIntf(uniqueId);
1:     FilterResolverIntf rightExp = right.getFilterResolverIntf(uniqueId);
1:     if (leftExp != null) {
1:       return leftExp;
1:     } else if (rightExp != null) {
1:       return rightExp;
1:     }
1:     return null;
1:   }
1: 
1: 
0:   @Override public DataMapType getDataMapType() {
0:     return left.getDataMapType();
1:   }
1: }
============================================================================