1:531ecdf: /*
1:531ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:531ecdf:  * this work for additional information regarding copyright ownership.
1:531ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531ecdf:  * (the "License"); you may not use this file except in compliance with
1:531ecdf:  * the License.  You may obtain a copy of the License at
1:531ecdf:  *
1:531ecdf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531ecdf:  *
1:531ecdf:  * Unless required by applicable law or agreed to in writing, software
1:531ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531ecdf:  * See the License for the specific language governing permissions and
1:531ecdf:  * limitations under the License.
1:531ecdf:  */
1:531ecdf: 
1:531ecdf: package org.apache.carbondata.core.indexstore.blockletindex;
1:531ecdf: 
1:531ecdf: import java.io.IOException;
1:531ecdf: import java.lang.reflect.Constructor;
1:531ecdf: import java.lang.reflect.InvocationTargetException;
1:531ecdf: import java.lang.reflect.Method;
1:531ecdf: import java.util.ArrayList;
1:531ecdf: import java.util.HashSet;
1:531ecdf: import java.util.List;
1:531ecdf: import java.util.Set;
1:cb10d03: import java.util.UUID;
1:531ecdf: 
1:531ecdf: import org.apache.carbondata.core.cache.Cache;
1:531ecdf: import org.apache.carbondata.core.cache.CacheProvider;
1:531ecdf: import org.apache.carbondata.core.cache.CacheType;
1:531ecdf: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:531ecdf: import org.apache.carbondata.core.datamap.Segment;
1:531ecdf: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexWrapper;
1:531ecdf: import org.apache.carbondata.core.indexstore.TableBlockIndexUniqueIdentifier;
1:5f68a79: import org.apache.carbondata.core.indexstore.TableBlockIndexUniqueIdentifierWrapper;
1:531ecdf: import org.apache.carbondata.core.memory.MemoryException;
1:531ecdf: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:531ecdf: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:531ecdf: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:531ecdf: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1:8f1a029: import org.apache.carbondata.core.readcommitter.TableStatusReadCommittedScope;
1:531ecdf: 
1:531ecdf: import mockit.Deencapsulation;
1:531ecdf: import mockit.Mock;
1:531ecdf: import mockit.MockUp;
1:8f1a029: import org.apache.hadoop.conf.Configuration;
1:531ecdf: import org.junit.Before;
1:531ecdf: import org.junit.Test;
1:531ecdf: 
1:531ecdf: public class TestBlockletDataMapFactory {
1:531ecdf: 
1:531ecdf:   private CarbonTable carbonTable;
1:531ecdf: 
1:531ecdf:   private AbsoluteTableIdentifier absoluteTableIdentifier;
1:531ecdf: 
1:531ecdf:   private TableInfo tableInfo;
1:531ecdf: 
1:531ecdf:   private BlockletDataMapFactory blockletDataMapFactory;
1:531ecdf: 
1:531ecdf:   private TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier;
1:531ecdf: 
1:5f68a79:   private TableBlockIndexUniqueIdentifierWrapper tableBlockIndexUniqueIdentifierWrapper;
1:531ecdf: 
1:5f68a79:   private Cache<TableBlockIndexUniqueIdentifierWrapper, BlockletDataMapIndexWrapper> cache;
1:5f68a79: 
1:531ecdf:   @Before public void setUp()
1:531ecdf:       throws ClassNotFoundException, IllegalAccessException, InvocationTargetException,
1:531ecdf:       InstantiationException {
1:531ecdf:     tableInfo = new TableInfo();
1:531ecdf:     Constructor<?> constructor =
1:531ecdf:         Class.forName("org.apache.carbondata.core.metadata.schema.table.CarbonTable")
1:531ecdf:             .getDeclaredConstructors()[0];
1:531ecdf:     constructor.setAccessible(true);
1:531ecdf:     carbonTable = (CarbonTable) constructor.newInstance();
1:cb10d03:     absoluteTableIdentifier = AbsoluteTableIdentifier
1:cb10d03:         .from("/opt/store/default/carbon_table/", "default", "carbon_table",
1:cb10d03:             UUID.randomUUID().toString());
1:531ecdf:     Deencapsulation.setField(tableInfo, "identifier", absoluteTableIdentifier);
1:531ecdf:     Deencapsulation.setField(carbonTable, "tableInfo", tableInfo);
1:a37a2ff:     new MockUp<CarbonTable>() {
1:a37a2ff:       @Mock
1:a37a2ff:       public AbsoluteTableIdentifier getAbsoluteTableIdentifier(){
1:a37a2ff:         return absoluteTableIdentifier;
1:a37a2ff:       }
1:a37a2ff:     };
1:531ecdf:     blockletDataMapFactory = new BlockletDataMapFactory(carbonTable, new DataMapSchema());
1:531ecdf:     Deencapsulation.setField(blockletDataMapFactory, "cache",
1:531ecdf:         CacheProvider.getInstance().createCache(CacheType.DRIVER_BLOCKLET_DATAMAP));
1:531ecdf:     tableBlockIndexUniqueIdentifier =
1:531ecdf:         new TableBlockIndexUniqueIdentifier("/opt/store/default/carbon_table/Fact/Part0/Segment_0",
1:531ecdf:             "0_batchno0-0-1521012756709.carbonindex", null, "0");
1:5f68a79:     tableBlockIndexUniqueIdentifierWrapper =
1:5f68a79:         new TableBlockIndexUniqueIdentifierWrapper(tableBlockIndexUniqueIdentifier, carbonTable);
1:531ecdf:     cache = CacheProvider.getInstance().createCache(CacheType.DRIVER_BLOCKLET_DATAMAP);
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Test public void addDataMapToCache()
1:531ecdf:       throws IOException, MemoryException, NoSuchMethodException, InvocationTargetException,
1:531ecdf:       IllegalAccessException {
1:6118711:     List<BlockDataMap> dataMaps = new ArrayList<>();
1:531ecdf:     Method method = BlockletDataMapFactory.class
1:5f68a79:         .getDeclaredMethod("cache", TableBlockIndexUniqueIdentifierWrapper.class,
1:531ecdf:             BlockletDataMapIndexWrapper.class);
1:531ecdf:     method.setAccessible(true);
1:5f68a79:     method.invoke(blockletDataMapFactory, tableBlockIndexUniqueIdentifierWrapper,
1:8f1a029:         new BlockletDataMapIndexWrapper(tableBlockIndexUniqueIdentifier.getSegmentId(), dataMaps,
1:8f1a029:             tableBlockIndexUniqueIdentifierWrapper.getConfiguration()));
1:5f68a79:     BlockletDataMapIndexWrapper result = cache.getIfPresent(tableBlockIndexUniqueIdentifierWrapper);
1:531ecdf:     assert null != result;
1:531ecdf:   }
1:531ecdf: 
1:531ecdf:   @Test public void getValidDistributables() throws IOException {
1:531ecdf:     BlockletDataMapDistributable blockletDataMapDistributable = new BlockletDataMapDistributable(
1:531ecdf:         "/opt/store/default/carbon_table/Fact/Part0/Segment_0/0_batchno0-0-1521012756709.carbonindex");
1:8f1a029:     Segment segment = new Segment("0", null, new TableStatusReadCommittedScope(carbonTable
1:8f1a029:         .getAbsoluteTableIdentifier(), new Configuration(false)));
1:531ecdf:     blockletDataMapDistributable.setSegment(segment);
1:531ecdf:     BlockletDataMapDistributable blockletDataMapDistributable1 = new BlockletDataMapDistributable(
1:531ecdf:         "/opt/store/default/carbon_table/Fact/Part0/Segment_0/0_batchno0-0-1521012756701.carbonindex");
1:531ecdf:     blockletDataMapDistributable1.setSegment(segment);
1:531ecdf:     List<DataMapDistributable> dataMapDistributables = new ArrayList<>(2);
1:531ecdf:     dataMapDistributables.add(blockletDataMapDistributable);
1:531ecdf:     dataMapDistributables.add(blockletDataMapDistributable1);
1:531ecdf:     new MockUp<BlockletDataMapFactory>() {
1:531ecdf:       @Mock Set<TableBlockIndexUniqueIdentifier> getTableBlockIndexUniqueIdentifiers(
1:531ecdf:           Segment segment) {
1:531ecdf:         TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier1 =
1:531ecdf:             new TableBlockIndexUniqueIdentifier(
1:531ecdf:                 "/opt/store/default/carbon_table/Fact/Part0/Segment_0",
1:531ecdf:                 "0_batchno0-0-1521012756701.carbonindex", null, "0");
1:531ecdf:         Set<TableBlockIndexUniqueIdentifier> tableBlockIndexUniqueIdentifiers = new HashSet<>(3);
1:531ecdf:         tableBlockIndexUniqueIdentifiers.add(tableBlockIndexUniqueIdentifier);
1:531ecdf:         tableBlockIndexUniqueIdentifiers.add(tableBlockIndexUniqueIdentifier1);
1:531ecdf:         return tableBlockIndexUniqueIdentifiers;
1:531ecdf:       }
1:531ecdf:     };
1:531ecdf:     List<DataMapDistributable> validDistributables =
1:531ecdf:         blockletDataMapFactory.getAllUncachedDistributables(dataMapDistributables);
1:531ecdf:     assert 1 == validDistributables.size();
1:531ecdf:   }
1:531ecdf: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:8f1a029
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.readcommitter.TableStatusReadCommittedScope;
1: import org.apache.hadoop.conf.Configuration;
/////////////////////////////////////////////////////////////////////////
1:         new BlockletDataMapIndexWrapper(tableBlockIndexUniqueIdentifier.getSegmentId(), dataMaps,
1:             tableBlockIndexUniqueIdentifierWrapper.getConfiguration()));
/////////////////////////////////////////////////////////////////////////
1:     Segment segment = new Segment("0", null, new TableStatusReadCommittedScope(carbonTable
1:         .getAbsoluteTableIdentifier(), new Configuration(false)));
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:     absoluteTableIdentifier = AbsoluteTableIdentifier
1:         .from("/opt/store/default/carbon_table/", "default", "carbon_table",
1:             UUID.randomUUID().toString());
author:rahul
-------------------------------------------------------------------------------
commit:e580d64
/////////////////////////////////////////////////////////////////////////
0:         new BlockletDataMapIndexWrapper(tableBlockIndexUniqueIdentifier.getSegmentId(), dataMaps));
author:dhatchayani
-------------------------------------------------------------------------------
commit:a37a2ff
/////////////////////////////////////////////////////////////////////////
1:     new MockUp<CarbonTable>() {
1:       @Mock
1:       public AbsoluteTableIdentifier getAbsoluteTableIdentifier(){
1:         return absoluteTableIdentifier;
1:       }
1:     };
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.indexstore.blockletindex;
1: 
1: import java.io.IOException;
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.carbondata.core.cache.Cache;
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.cache.CacheType;
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexWrapper;
1: import org.apache.carbondata.core.indexstore.TableBlockIndexUniqueIdentifier;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: import org.apache.carbondata.core.metadata.schema.table.TableInfo;
1: 
1: import mockit.Deencapsulation;
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class TestBlockletDataMapFactory {
1: 
1:   private CarbonTable carbonTable;
1: 
1:   private AbsoluteTableIdentifier absoluteTableIdentifier;
1: 
1:   private TableInfo tableInfo;
1: 
1:   private BlockletDataMapFactory blockletDataMapFactory;
1: 
1:   private TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier;
1: 
0:   private Cache<TableBlockIndexUniqueIdentifier, BlockletDataMapIndexWrapper> cache;
1: 
1:   @Before public void setUp()
1:       throws ClassNotFoundException, IllegalAccessException, InvocationTargetException,
1:       InstantiationException {
1:     tableInfo = new TableInfo();
1:     Constructor<?> constructor =
1:         Class.forName("org.apache.carbondata.core.metadata.schema.table.CarbonTable")
1:             .getDeclaredConstructors()[0];
1:     constructor.setAccessible(true);
1:     carbonTable = (CarbonTable) constructor.newInstance();
0:     absoluteTableIdentifier =
0:         AbsoluteTableIdentifier.from("/opt/store/default/carbon_table/", "default", "carbon_table");
1:     Deencapsulation.setField(tableInfo, "identifier", absoluteTableIdentifier);
1:     Deencapsulation.setField(carbonTable, "tableInfo", tableInfo);
1:     blockletDataMapFactory = new BlockletDataMapFactory(carbonTable, new DataMapSchema());
1:     Deencapsulation.setField(blockletDataMapFactory, "cache",
1:         CacheProvider.getInstance().createCache(CacheType.DRIVER_BLOCKLET_DATAMAP));
1:     tableBlockIndexUniqueIdentifier =
1:         new TableBlockIndexUniqueIdentifier("/opt/store/default/carbon_table/Fact/Part0/Segment_0",
1:             "0_batchno0-0-1521012756709.carbonindex", null, "0");
1:     cache = CacheProvider.getInstance().createCache(CacheType.DRIVER_BLOCKLET_DATAMAP);
1:   }
1: 
1:   @Test public void addDataMapToCache()
1:       throws IOException, MemoryException, NoSuchMethodException, InvocationTargetException,
1:       IllegalAccessException {
0:     List<BlockletDataMap> dataMaps = new ArrayList<>();
1:     Method method = BlockletDataMapFactory.class
0:         .getDeclaredMethod("cache", TableBlockIndexUniqueIdentifier.class,
1:             BlockletDataMapIndexWrapper.class);
1:     method.setAccessible(true);
0:     method.invoke(blockletDataMapFactory, tableBlockIndexUniqueIdentifier,
0:         new BlockletDataMapIndexWrapper(dataMaps));
0:     BlockletDataMapIndexWrapper result = cache.getIfPresent(tableBlockIndexUniqueIdentifier);
1:     assert null != result;
1:   }
1: 
1:   @Test public void getValidDistributables() throws IOException {
1:     BlockletDataMapDistributable blockletDataMapDistributable = new BlockletDataMapDistributable(
1:         "/opt/store/default/carbon_table/Fact/Part0/Segment_0/0_batchno0-0-1521012756709.carbonindex");
0:     Segment segment = new Segment("0", null);
1:     blockletDataMapDistributable.setSegment(segment);
1:     BlockletDataMapDistributable blockletDataMapDistributable1 = new BlockletDataMapDistributable(
1:         "/opt/store/default/carbon_table/Fact/Part0/Segment_0/0_batchno0-0-1521012756701.carbonindex");
1:     blockletDataMapDistributable1.setSegment(segment);
1:     List<DataMapDistributable> dataMapDistributables = new ArrayList<>(2);
1:     dataMapDistributables.add(blockletDataMapDistributable);
1:     dataMapDistributables.add(blockletDataMapDistributable1);
1:     new MockUp<BlockletDataMapFactory>() {
1:       @Mock Set<TableBlockIndexUniqueIdentifier> getTableBlockIndexUniqueIdentifiers(
1:           Segment segment) {
1:         TableBlockIndexUniqueIdentifier tableBlockIndexUniqueIdentifier1 =
1:             new TableBlockIndexUniqueIdentifier(
1:                 "/opt/store/default/carbon_table/Fact/Part0/Segment_0",
1:                 "0_batchno0-0-1521012756701.carbonindex", null, "0");
1:         Set<TableBlockIndexUniqueIdentifier> tableBlockIndexUniqueIdentifiers = new HashSet<>(3);
1:         tableBlockIndexUniqueIdentifiers.add(tableBlockIndexUniqueIdentifier);
1:         tableBlockIndexUniqueIdentifiers.add(tableBlockIndexUniqueIdentifier1);
1:         return tableBlockIndexUniqueIdentifiers;
1:       }
1:     };
1:     List<DataMapDistributable> validDistributables =
1:         blockletDataMapFactory.getAllUncachedDistributables(dataMapDistributables);
1:     assert 1 == validDistributables.size();
1:   }
1: }
author:manishgupta88
-------------------------------------------------------------------------------
commit:6118711
/////////////////////////////////////////////////////////////////////////
1:     List<BlockDataMap> dataMaps = new ArrayList<>();
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:5f68a79
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.TableBlockIndexUniqueIdentifierWrapper;
/////////////////////////////////////////////////////////////////////////
1:   private TableBlockIndexUniqueIdentifierWrapper tableBlockIndexUniqueIdentifierWrapper;
1: 
1:   private Cache<TableBlockIndexUniqueIdentifierWrapper, BlockletDataMapIndexWrapper> cache;
/////////////////////////////////////////////////////////////////////////
1:     tableBlockIndexUniqueIdentifierWrapper =
1:         new TableBlockIndexUniqueIdentifierWrapper(tableBlockIndexUniqueIdentifier, carbonTable);
/////////////////////////////////////////////////////////////////////////
1:         .getDeclaredMethod("cache", TableBlockIndexUniqueIdentifierWrapper.class,
1:     method.invoke(blockletDataMapFactory, tableBlockIndexUniqueIdentifierWrapper,
1:     BlockletDataMapIndexWrapper result = cache.getIfPresent(tableBlockIndexUniqueIdentifierWrapper);
============================================================================