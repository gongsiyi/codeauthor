1:779fd08: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:779fd08:  *
1:779fd08:  *    http://www.apache.org/licenses/LICENSE-2.0
1:779fd08:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:779fd08:  */
5:779fd08: 
1:349c59c: package org.apache.carbondata.processing.loading;
1:779fd08: 
1:eaadc88: import java.io.IOException;
1:779fd08: import java.util.Iterator;
1:30f575f: import java.util.concurrent.atomic.AtomicLong;
1:779fd08: 
1:30f575f: import org.apache.carbondata.common.logging.LogService;
1:30f575f: import org.apache.carbondata.common.logging.LogServiceFactory;
1:7f4bd3d: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:349c59c: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1:779fd08: 
1:30f575f: /**
1:779fd08:  * This base abstract class for data loading.
1:779fd08:  * It can do transformation jobs as per the implementation.
1:f63b1ff:  *
1:f63b1ff:  * Life cycle of this class is
1:f63b1ff:  * First initialize() is called to initialize the step
1:f63b1ff:  * then execute() is called to process the step logic and
1:f63b1ff:  * then close() is called to close any resources if any opened in the step.
1:779fd08:  */
1:779fd08: public abstract class AbstractDataLoadProcessorStep {
1:779fd08: 
1:30f575f:   private static final LogService LOGGER =
1:30f575f:       LogServiceFactory.getLogService(AbstractDataLoadProcessorStep.class.getName());
1:30f575f: 
1:779fd08:   protected CarbonDataLoadConfiguration configuration;
1:779fd08: 
1:779fd08:   protected AbstractDataLoadProcessorStep child;
1:779fd08: 
1:30f575f:   protected AtomicLong rowCounter;
1:30f575f: 
1:30f575f:   protected boolean closed;
1:30f575f: 
1:779fd08:   public AbstractDataLoadProcessorStep(CarbonDataLoadConfiguration configuration,
1:779fd08:       AbstractDataLoadProcessorStep child) {
1:779fd08:     this.configuration = configuration;
1:779fd08:     this.child = child;
1:30f575f:     this.rowCounter = new AtomicLong();
1:30f575f:     this.closed = false;
4:779fd08:   }
1:30f575f: 
3:779fd08:   /**
1:779fd08:    * The output meta for this step. The data returns from this step is as per this meta.
1:779fd08:    *
1:779fd08:    */
1:f911403:   public DataField[] getOutput() {
1:f911403:     return child.getOutput();
1:f911403:   }
1:779fd08: 
1:779fd08:   /**
1:f63b1ff:    * Initialization process for this step.
1:779fd08:    *
1:2b66476:    * @throws IOException
1:779fd08:    */
1:2b66476:   public void initialize() throws IOException {
1:30f575f:     if (LOGGER.isInfoEnabled()) {
1:30f575f:       // This thread prints the rows processed in each step for every 10 seconds.
1:30f575f:       new Thread() {
1:30f575f:         @Override public void run() {
1:30f575f:           while (!closed) {
1:30f575f:             try {
1:30f575f:               LOGGER.info("Rows processed in step " + getStepName() + " : " + rowCounter.get());
1:30f575f:               Thread.sleep(10000);
1:30f575f:             } catch (InterruptedException e) {
1:30f575f:               //ignore
1:30f575f:               LOGGER.error(e.getMessage());
1:30f575f:             }
1:30f575f:           }
1:30f575f:         }
1:30f575f:       }.start();
1:30f575f:     }
1:779fd08:   }
1:779fd08: 
1:779fd08:   /**
1:779fd08:    * Tranform the data as per the implementation.
1:779fd08:    *
1:779fd08:    * @return Array of Iterator with data. It can be processed parallel if implementation class wants
2:779fd08:    * @throws CarbonDataLoadingException
1:779fd08:    */
1:f911403:   public abstract Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException;
1:779fd08: 
1:779fd08:   /**
1:779fd08:    * Process the batch of rows as per the step logic.
1:779fd08:    *
1:779fd08:    * @param rowBatch
2:779fd08:    * @return processed row.
1:779fd08:    */
1:779fd08:   protected CarbonRowBatch processRowBatch(CarbonRowBatch rowBatch) {
1:c5aba5f:     CarbonRowBatch newBatch = new CarbonRowBatch(rowBatch.getSize());
1:c5aba5f:     while (rowBatch.hasNext()) {
1:f911403:       newBatch.addRow(null);
1:779fd08:     }
1:779fd08:     return newBatch;
1:779fd08:   }
1:779fd08: 
1:779fd08:   /**
1:30f575f:    * Get the step name for logging purpose.
1:30f575f:    * @return Step name
1:30f575f:    */
1:30f575f:   protected abstract String getStepName();
1:30f575f: 
1:779fd08:   /**
1:7f4bd3d:    * This method registers all writer listeners and returns the listener
1:7f4bd3d:    * @param bucketId bucketId
1:7f4bd3d:    * @return
1:779fd08:    */
1:7f4bd3d:   protected DataMapWriterListener getDataMapWriterListener(int bucketId) {
1:cd7c210:     // todo: this method is useless, will remove it later
1:cd7c210:     return null;
1:779fd08:   }
1:779fd08: 
1:779fd08:   /**
1:f63b1ff:    * Close all resources.This method is called after execute() is finished.
1:f63b1ff:    * It will be called in both success and failure cases.
1:779fd08:    */
1:f63b1ff:   public void close() {
1:30f575f:     if (!closed) {
1:30f575f:       closed = true;
1:612c34e:       LOGGER.info("Total rows processed in step " + this.getStepName() + ": " + rowCounter.get());
1:30f575f:       if (child != null) {
1:30f575f:         child.close();
1:30f575f:       }
1:f63b1ff:     }
1:f63b1ff:   }
1:779fd08: 
1:779fd08: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public DataField[] getOutput() {
1:     return child.getOutput();
1:   }
/////////////////////////////////////////////////////////////////////////
1:   public abstract Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException;
/////////////////////////////////////////////////////////////////////////
1:       newBatch.addRow(null);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // todo: this method is useless, will remove it later
1:     return null;
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
0:             String.valueOf(carbonDataFileAttributes.getFactTimeStamp()),
0:             configuration.getSegmentId()));
commit:30f575f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(AbstractDataLoadProcessorStep.class.getName());
1: 
1:   protected AtomicLong rowCounter;
1: 
1:   protected boolean closed;
1: 
1:     this.rowCounter = new AtomicLong();
1:     this.closed = false;
1: 
1:     if (LOGGER.isInfoEnabled()) {
1:       // This thread prints the rows processed in each step for every 10 seconds.
1:       new Thread() {
1:         @Override public void run() {
1:           while (!closed) {
1:             try {
1:               LOGGER.info("Rows processed in step " + getStepName() + " : " + rowCounter.get());
1:               Thread.sleep(10000);
1:             } catch (InterruptedException e) {
1:               //ignore
1:               LOGGER.error(e.getMessage());
1:             }
1:           }
1:         }
1:       }.start();
1:     }
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Get the step name for logging purpose.
1:    * @return Step name
1:    */
1:   protected abstract String getStepName();
1: 
1:     if (!closed) {
1:       closed = true;
1:       if (child != null) {
1:         child.close();
1:       }
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Life cycle of this class is
1:  * First initialize() is called to initialize the step
1:  * then execute() is called to process the step logic and
1:  * then close() is called to close any resources if any opened in the step.
/////////////////////////////////////////////////////////////////////////
1:    * Initialization process for this step.
0:   public abstract void initialize() throws CarbonDataLoadingException;
/////////////////////////////////////////////////////////////////////////
1:    * Close all resources.This method is called after execute() is finished.
1:    * It will be called in both success and failure cases.
1:   public void close() {
0:     if (child != null) {
0:       child.close();
1:     }
1:   }
commit:779fd08
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow;
1: 
1: import java.util.Iterator;
1: 
0: import org.apache.carbondata.common.CarbonIterator;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
0: import org.apache.carbondata.processing.newflow.row.CarbonRowBatch;
1: 
1: /**
1:  * This base abstract class for data loading.
1:  * It can do transformation jobs as per the implementation.
1:  */
1: public abstract class AbstractDataLoadProcessorStep {
1: 
1:   protected CarbonDataLoadConfiguration configuration;
1: 
1:   protected AbstractDataLoadProcessorStep child;
1: 
1:   public AbstractDataLoadProcessorStep(CarbonDataLoadConfiguration configuration,
1:       AbstractDataLoadProcessorStep child) {
1:     this.configuration = configuration;
1:     this.child = child;
1:   }
1: 
1:   /**
1:    * The output meta for this step. The data returns from this step is as per this meta.
1:    *
1:    */
0:   public abstract DataField[] getOutput();
1: 
1:   /**
0:    * Intialization process for this step.
1:    *
1:    * @throws CarbonDataLoadingException
1:    */
0:   public abstract void intialize() throws CarbonDataLoadingException;
1: 
1:   /**
1:    * Tranform the data as per the implementation.
1:    *
1:    * @return Array of Iterator with data. It can be processed parallel if implementation class wants
1:    * @throws CarbonDataLoadingException
1:    */
0:   public Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException {
0:     Iterator<CarbonRowBatch>[] childIters = child.execute();
0:     Iterator<CarbonRowBatch>[] iterators = new Iterator[childIters.length];
0:     for (int i = 0; i < childIters.length; i++) {
0:       iterators[i] = getIterator(childIters[i]);
1:     }
0:     return iterators;
1:   }
1: 
1:   /**
0:    * Create the iterator using child iterator.
1:    *
0:    * @param childIter
0:    * @return new iterator with step specific processing.
1:    */
0:   protected Iterator<CarbonRowBatch> getIterator(final Iterator<CarbonRowBatch> childIter) {
0:     return new CarbonIterator<CarbonRowBatch>() {
0:       @Override public boolean hasNext() {
0:         return childIter.hasNext();
1:       }
1: 
0:       @Override public CarbonRowBatch next() {
0:         return processRowBatch(childIter.next());
1:       }
0:     };
1:   }
1: 
1:   /**
1:    * Process the batch of rows as per the step logic.
1:    *
1:    * @param rowBatch
1:    * @return processed row.
1:    */
1:   protected CarbonRowBatch processRowBatch(CarbonRowBatch rowBatch) {
0:     CarbonRowBatch newBatch = new CarbonRowBatch();
0:     Iterator<CarbonRow> batchIterator = rowBatch.getBatchIterator();
0:     while (batchIterator.hasNext()) {
0:       newBatch.addRow(processRow(batchIterator.next()));
1:     }
1:     return newBatch;
1:   }
1: 
1:   /**
0:    * Process the row as per the step logic.
1:    *
0:    * @param row
1:    * @return processed row.
1:    */
0:   protected abstract CarbonRow processRow(CarbonRow row);
1: 
1:   /**
0:    * It is called when task is called successfully.
1:    */
0:   public abstract void finish();
1: 
1:   /**
0:    * Closing of resources after step execution can be done here.
1:    */
0:   public abstract void close();
1: 
1: }
author:akashrn5
-------------------------------------------------------------------------------
commit:7f4bd3d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
0: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
0: import org.apache.carbondata.processing.store.CarbonDataFileAttributes;
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * This method registers all writer listeners and returns the listener
1:    * @param bucketId bucketId
1:    * @return
0:    */
1:   protected DataMapWriterListener getDataMapWriterListener(int bucketId) {
0:     CarbonDataFileAttributes carbonDataFileAttributes =
0:         new CarbonDataFileAttributes(Long.parseLong(configuration.getTaskNo()),
0:             (Long) configuration.getDataLoadProperty(DataLoadProcessorConstants.FACT_TIME_STAMP));
0:     DataMapWriterListener listener = new DataMapWriterListener();
0:     listener.registerAllWriter(
0:         configuration.getTableSpec().getCarbonTable(),
0:         configuration.getSegmentId(),
0:         CarbonTablePath.getShardName(
0:             carbonDataFileAttributes.getTaskId(),
0:             bucketId,
0:             0,
0:             String.valueOf(carbonDataFileAttributes.getFactTimeStamp())));
0:     return listener;
0:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
0:   }
0:   /**
0:    * The output meta for this step. The data returns from this step is as per this meta.
0:    *
0:    */
0:   public abstract DataField[] getOutput();
0: 
0:   /**
0:    * Initialization process for this step.
0:    *
1:    * @throws IOException
0:    */
1:   public void initialize() throws IOException {
/////////////////////////////////////////////////////////////////////////
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.row.CarbonRow;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:    * @throws IOException
0:   public abstract void initialize() throws IOException;
author:lucao
-------------------------------------------------------------------------------
commit:612c34e
/////////////////////////////////////////////////////////////////////////
1:       LOGGER.info("Total rows processed in step " + this.getStepName() + ": " + rowCounter.get());
author:QiangCai
-------------------------------------------------------------------------------
commit:c5aba5f
/////////////////////////////////////////////////////////////////////////
1:     CarbonRowBatch newBatch = new CarbonRowBatch(rowBatch.getSize());
1:     while (rowBatch.hasNext()) {
0:       newBatch.addRow(processRow(rowBatch.next()));
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================