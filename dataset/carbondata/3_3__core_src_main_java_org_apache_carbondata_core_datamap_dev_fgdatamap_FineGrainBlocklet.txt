1:d35fbaf: /*
1:d35fbaf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d35fbaf:  * contributor license agreements.  See the NOTICE file distributed with
1:d35fbaf:  * this work for additional information regarding copyright ownership.
1:d35fbaf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d35fbaf:  * (the "License"); you may not use this file except in compliance with
1:d35fbaf:  * the License.  You may obtain a copy of the License at
1:d35fbaf:  *
1:d35fbaf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d35fbaf:  *
1:d35fbaf:  * Unless required by applicable law or agreed to in writing, software
1:d35fbaf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d35fbaf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d35fbaf:  * See the License for the specific language governing permissions and
1:d35fbaf:  * limitations under the License.
1:d35fbaf:  */
1:fc2a7eb: package org.apache.carbondata.core.datamap.dev.fgdatamap;
1:d35fbaf: 
1:d35fbaf: import java.io.DataInput;
1:d35fbaf: import java.io.DataOutput;
1:d35fbaf: import java.io.IOException;
1:d35fbaf: import java.io.Serializable;
1:d35fbaf: import java.util.ArrayList;
1:d35fbaf: import java.util.BitSet;
1:d35fbaf: import java.util.List;
1:d35fbaf: 
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:fc2a7eb: import org.apache.carbondata.common.annotations.InterfaceStability;
1:d35fbaf: import org.apache.carbondata.core.constants.CarbonV3DataFormatConstants;
1:fc2a7eb: 
1:fc2a7eb: import org.apache.carbondata.core.indexstore.Blocklet;
1:d35fbaf: import org.apache.carbondata.core.metadata.schema.table.Writable;
1:d35fbaf: import org.apache.carbondata.core.util.BitSetGroup;
1:d35fbaf: 
1:d35fbaf: /**
1:fc2a7eb:  * Used for returning matched rows after pruned by {@link FineGrainDataMap}
1:d35fbaf:  */
1:fc2a7eb: @InterfaceAudience.Developer("DataMap")
1:fc2a7eb: @InterfaceStability.Evolving
1:d35fbaf: public class FineGrainBlocklet extends Blocklet implements Serializable {
1:d35fbaf: 
1:d35fbaf:   private List<Page> pages;
1:d35fbaf: 
1:9db662a:   /** For FG, pass the shardName instead of file name */
1:9db662a:   public FineGrainBlocklet(String shardName, String blockletId, List<Page> pages) {
1:9db662a:     super(shardName, blockletId);
1:d35fbaf:     this.pages = pages;
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   // For serialization purpose
1:d35fbaf:   public FineGrainBlocklet() {
1:d35fbaf: 
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   public List<Page> getPages() {
1:d35fbaf:     return pages;
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   public static class Page implements Writable,Serializable {
1:d35fbaf: 
1:d35fbaf:     private int pageId;
1:d35fbaf: 
1:d35fbaf:     private int[] rowId;
1:d35fbaf: 
1:d35fbaf:     public BitSet getBitSet() {
1:d35fbaf:       BitSet bitSet =
1:d35fbaf:           new BitSet(CarbonV3DataFormatConstants.NUMBER_OF_ROWS_PER_BLOCKLET_COLUMN_PAGE_DEFAULT);
1:d35fbaf:       for (int row : rowId) {
1:d35fbaf:         bitSet.set(row);
1:d35fbaf:       }
1:d35fbaf:       return bitSet;
1:d35fbaf:     }
1:d35fbaf: 
1:d35fbaf:     @Override public void write(DataOutput out) throws IOException {
1:d35fbaf:       out.writeInt(pageId);
1:d35fbaf:       out.writeInt(rowId.length);
1:d35fbaf:       for (int i = 0; i < rowId.length; i++) {
1:d35fbaf:         out.writeInt(rowId[i]);
1:d35fbaf:       }
1:d35fbaf:     }
1:d35fbaf: 
1:d35fbaf:     @Override public void readFields(DataInput in) throws IOException {
1:d35fbaf:       pageId = in.readInt();
1:d35fbaf:       int length = in.readInt();
1:d35fbaf:       rowId = new int[length];
1:d35fbaf:       for (int i = 0; i < length; i++) {
1:d35fbaf:         rowId[i] = in.readInt();
1:d35fbaf:       }
1:d35fbaf:     }
1:d35fbaf: 
1:d35fbaf:     public void setPageId(int pageId) {
1:d35fbaf:       this.pageId = pageId;
1:d35fbaf:     }
1:d35fbaf: 
1:d35fbaf:     public void setRowId(int[] rowId) {
1:d35fbaf:       this.rowId = rowId;
1:d35fbaf:     }
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   public BitSetGroup getBitSetGroup(int numberOfPages) {
1:d35fbaf:     BitSetGroup bitSetGroup = new BitSetGroup(numberOfPages);
1:d35fbaf:     for (int i = 0; i < pages.size(); i++) {
1:d35fbaf:       bitSetGroup.setBitSet(pages.get(i).getBitSet(), pages.get(i).pageId);
1:d35fbaf:     }
1:d35fbaf:     return bitSetGroup;
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   @Override public void write(DataOutput out) throws IOException {
1:d35fbaf:     super.write(out);
1:d35fbaf:     int size = pages.size();
1:d35fbaf:     out.writeInt(size);
1:d35fbaf:     for (Page page : pages) {
1:d35fbaf:       page.write(out);
1:d35fbaf:     }
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   @Override public void readFields(DataInput in) throws IOException {
1:d35fbaf:     super.readFields(in);
1:d35fbaf:     int size = in.readInt();
1:d35fbaf:     pages = new ArrayList<>(size);
1:d35fbaf:     for (int i = 0; i < size; i++) {
1:d35fbaf:       Page page = new Page();
1:d35fbaf:       page.readFields(in);
1:d35fbaf:       pages.add(page);
1:d35fbaf:     }
1:d35fbaf:   }
1:56330ae: 
1:56330ae:   @Override public boolean equals(Object o) {
1:56330ae:     return super.equals(o);
1:d35fbaf:   }
1:56330ae: 
1:56330ae:   @Override public int hashCode() {
1:56330ae:     return super.hashCode();
1:56330ae:   }
1:56330ae: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   /** For FG, pass the shardName instead of file name */
1:   public FineGrainBlocklet(String shardName, String blockletId, List<Page> pages) {
1:     super(shardName, blockletId);
commit:fc2a7eb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datamap.dev.fgdatamap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.common.annotations.InterfaceStability;
1: 
1: import org.apache.carbondata.core.indexstore.Blocklet;
1:  * Used for returning matched rows after pruned by {@link FineGrainDataMap}
1: @InterfaceAudience.Developer("DataMap")
1: @InterfaceStability.Evolving
author:ravipesala
-------------------------------------------------------------------------------
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:   public FineGrainBlocklet(String taskName, String blockletId, List<Page> pages) {
0:     super(taskName, blockletId);
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.core.indexstore;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.BitSet;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonV3DataFormatConstants;
1: import org.apache.carbondata.core.metadata.schema.table.Writable;
1: import org.apache.carbondata.core.util.BitSetGroup;
1: 
1: /**
0:  * FineGrainBlocklet
1:  */
1: public class FineGrainBlocklet extends Blocklet implements Serializable {
1: 
1:   private List<Page> pages;
1: 
0:   public FineGrainBlocklet(String blockId, String blockletId, List<Page> pages) {
0:     super(blockId, blockletId);
1:     this.pages = pages;
1:   }
1: 
1:   // For serialization purpose
1:   public FineGrainBlocklet() {
1: 
1:   }
1: 
1:   public List<Page> getPages() {
1:     return pages;
1:   }
1: 
1:   public static class Page implements Writable,Serializable {
1: 
1:     private int pageId;
1: 
1:     private int[] rowId;
1: 
1:     public BitSet getBitSet() {
1:       BitSet bitSet =
1:           new BitSet(CarbonV3DataFormatConstants.NUMBER_OF_ROWS_PER_BLOCKLET_COLUMN_PAGE_DEFAULT);
1:       for (int row : rowId) {
1:         bitSet.set(row);
1:       }
1:       return bitSet;
1:     }
1: 
1:     @Override public void write(DataOutput out) throws IOException {
1:       out.writeInt(pageId);
1:       out.writeInt(rowId.length);
1:       for (int i = 0; i < rowId.length; i++) {
1:         out.writeInt(rowId[i]);
1:       }
1:     }
1: 
1:     @Override public void readFields(DataInput in) throws IOException {
1:       pageId = in.readInt();
1:       int length = in.readInt();
1:       rowId = new int[length];
1:       for (int i = 0; i < length; i++) {
1:         rowId[i] = in.readInt();
1:       }
1:     }
1: 
1:     public void setPageId(int pageId) {
1:       this.pageId = pageId;
1:     }
1: 
1:     public void setRowId(int[] rowId) {
1:       this.rowId = rowId;
1:     }
1:   }
1: 
1:   public BitSetGroup getBitSetGroup(int numberOfPages) {
1:     BitSetGroup bitSetGroup = new BitSetGroup(numberOfPages);
1:     for (int i = 0; i < pages.size(); i++) {
1:       bitSetGroup.setBitSet(pages.get(i).getBitSet(), pages.get(i).pageId);
1:     }
1:     return bitSetGroup;
1:   }
1: 
1:   @Override public void write(DataOutput out) throws IOException {
1:     super.write(out);
1:     int size = pages.size();
1:     out.writeInt(size);
1:     for (Page page : pages) {
1:       page.write(out);
1:     }
1:   }
1: 
1:   @Override public void readFields(DataInput in) throws IOException {
1:     super.readFields(in);
1:     int size = in.readInt();
1:     pages = new ArrayList<>(size);
1:     for (int i = 0; i < size; i++) {
1:       Page page = new Page();
1:       page.readFields(in);
1:       pages.add(page);
1:     }
1:   }
1: }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public boolean equals(Object o) {
1:     return super.equals(o);
1:   }
1: 
1:   @Override public int hashCode() {
1:     return super.hashCode();
1:   }
============================================================================