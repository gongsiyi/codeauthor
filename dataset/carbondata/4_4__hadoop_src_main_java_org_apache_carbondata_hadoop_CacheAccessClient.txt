1:d53feef: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d53feef:  *
1:d53feef:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d53feef:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
2:d53feef:  */
1:d53feef: package org.apache.carbondata.hadoop;
2:d53feef: 
1:eaadc88: import java.io.IOException;
1:d53feef: import java.util.ArrayList;
1:673f8c2: import java.util.HashSet;
1:d53feef: import java.util.List;
1:673f8c2: import java.util.Set;
1:d53feef: 
1:d53feef: import org.apache.carbondata.core.cache.Cache;
1:d53feef: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:d53feef: 
2:d53feef: /**
1:d53feef:  * CacheClient : Class used to request the segments cache
1:d53feef:  */
1:d53feef: public class CacheAccessClient<K, V> {
1:d53feef:   /**
1:d53feef:    * List of segments
1:d53feef:    */
1:673f8c2:   private Set<K> segmentSet = new HashSet<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:d53feef: 
1:d53feef:   private Cache<K, V> cache;
1:d53feef: 
1:18cfba8:   public CacheAccessClient(Cache<K, V> cache) {
1:d53feef:     this.cache = cache;
1:d53feef:   }
1:d53feef: 
1:673f8c2:   /**
1:d53feef:    * This method will return the value for the given key. It will not check and load
1:d53feef:    * the data for the given key
1:d53feef:    *
1:d53feef:    * @param key
1:d53feef:    * @return
1:d53feef:    */
1:d53feef:   public V getIfPresent(K key) {
1:d53feef:     V value = cache.getIfPresent(key);
1:d53feef:     if (value != null) {
1:673f8c2:       segmentSet.add(key);
1:d53feef:     }
1:d53feef:     return value;
1:d53feef:   }
1:d53feef: 
1:d53feef:   /**
1:d53feef:    * This method will get the value for the given key. If value does not exist
1:d53feef:    * for the given key, it will check and load the value.
1:d53feef:    *
1:d53feef:    * @param key
1:d53feef:    * @return
1:eaadc88:    * @throws IOException in case memory is not sufficient to load data into memory
1:d53feef:    */
1:eaadc88:   public V get(K key) throws IOException {
1:d53feef:     V value = cache.get(key);
1:d53feef:     if (value != null) {
1:673f8c2:       segmentSet.add(key);
1:d53feef:     }
1:d53feef:     return value;
1:d53feef:   }
1:d53feef: 
1:d53feef:   /**
1:d53feef:    * the method is used to clear access count of the unused segments cacheable object
1:d53feef:    */
1:d53feef:   public void close() {
1:673f8c2:     List<K> segmentArrayList = new ArrayList<>(segmentSet.size());
1:673f8c2:     segmentArrayList.addAll(segmentSet);
1:673f8c2:     cache.clearAccessCount(segmentArrayList);
1:d53feef:     cache = null;
1:d53feef:   }
1:d53feef: 
1:d53feef:   /**
1:d53feef:    * This method will remove the cache for a given key
1:d53feef:    *
1:d53feef:    * @param keys
1:d53feef:    */
1:d53feef:   public void invalidateAll(List<K> keys) {
1:d53feef:     for (K key : keys) {
1:d53feef:       cache.invalidate(key);
1:d53feef:     }
1:d53feef:   }
1:d53feef: 
1:d53feef:   /**
1:673f8c2:    * This method will clear the access count for a given list of segments
1:673f8c2:    *
1:673f8c2:    * @param segmentList
1:673f8c2:    */
1:673f8c2:   public void clearAccessCount(List<K> segmentList) {
1:673f8c2:     cache.clearAccessCount(segmentList);
1:673f8c2:     // remove from segment set so that access count is not decremented again during close operation
1:673f8c2:     segmentSet.removeAll(segmentList);
1:673f8c2:   }
1:673f8c2: 
1:d53feef: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:673f8c2
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:   private Set<K> segmentSet = new HashSet<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
/////////////////////////////////////////////////////////////////////////
1:       segmentSet.add(key);
/////////////////////////////////////////////////////////////////////////
1:       segmentSet.add(key);
/////////////////////////////////////////////////////////////////////////
1:     List<K> segmentArrayList = new ArrayList<>(segmentSet.size());
1:     segmentArrayList.addAll(segmentSet);
1:     cache.clearAccessCount(segmentArrayList);
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method will clear the access count for a given list of segments
1:    *
1:    * @param segmentList
1:    */
1:   public void clearAccessCount(List<K> segmentList) {
1:     cache.clearAccessCount(segmentList);
1:     // remove from segment set so that access count is not decremented again during close operation
1:     segmentSet.removeAll(segmentList);
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:18cfba8
/////////////////////////////////////////////////////////////////////////
1:   public CacheAccessClient(Cache<K, V> cache) {
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * @throws IOException in case memory is not sufficient to load data into memory
1:   public V get(K key) throws IOException {
author:Venkata Ramana G
-------------------------------------------------------------------------------
commit:d53feef
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.hadoop;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.cache.Cache;
0: import org.apache.carbondata.core.carbon.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: 
1: /**
1:  * CacheClient : Class used to request the segments cache
1:  */
1: public class CacheAccessClient<K, V> {
1:   /**
1:    * List of segments
1:    */
0:   private List<K> segmentList = new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1: 
1:   /**
0:    * absolute table identifier
1:    */
0:   private AbsoluteTableIdentifier absoluteTableIdentifier;
1: 
1:   private Cache<K, V> cache;
1: 
0:   public CacheAccessClient(Cache cache) {
1:     this.cache = cache;
1:   }
1: 
1:   /**
1:    * This method will return the value for the given key. It will not check and load
1:    * the data for the given key
1:    *
1:    * @param key
1:    * @return
1:    */
1:   public V getIfPresent(K key) {
1:     V value = cache.getIfPresent(key);
1:     if (value != null) {
0:       segmentList.add(key);
1:     }
1:     return value;
1:   }
1: 
1:   /**
1:    * This method will get the value for the given key. If value does not exist
1:    * for the given key, it will check and load the value.
1:    *
1:    * @param key
1:    * @return
0:    * @throws CarbonUtilException in case memory is not sufficient to load data into memory
1:    */
0:   public V get(K key) throws CarbonUtilException {
1:     V value = cache.get(key);
1:     if (value != null) {
0:       segmentList.add(key);
1:     }
1:     return value;
1:   }
1: 
1:   /**
1:    * the method is used to clear access count of the unused segments cacheable object
1:    */
1:   public void close() {
0:     cache.clearAccessCount(segmentList);
1:     cache = null;
1:   }
1: 
1:   /**
1:    * This method will remove the cache for a given key
1:    *
1:    * @param keys
1:    */
1:   public void invalidateAll(List<K> keys) {
1:     for (K key : keys) {
1:       cache.invalidate(key);
1:     }
1:   }
1: 
1: }
============================================================================