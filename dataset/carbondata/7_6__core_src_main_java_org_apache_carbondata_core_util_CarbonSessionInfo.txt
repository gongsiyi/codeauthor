1:95ce1da: /*
1:95ce1da:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:95ce1da:  * contributor license agreements.  See the NOTICE file distributed with
1:95ce1da:  * this work for additional information regarding copyright ownership.
1:95ce1da:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:95ce1da:  * (the "License"); you may not use this file except in compliance with
1:95ce1da:  * the License.  You may obtain a copy of the License at
1:95ce1da:  *
1:95ce1da:  *    http://www.apache.org/licenses/LICENSE-2.0
1:95ce1da:  *
1:95ce1da:  * Unless required by applicable law or agreed to in writing, software
1:95ce1da:  * distributed under the License is distributed on an "AS IS" BASIS,
1:95ce1da:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:95ce1da:  * See the License for the specific language governing permissions and
1:95ce1da:  * limitations under the License.
1:95ce1da:  */
2:95ce1da: 
1:95ce1da: package org.apache.carbondata.core.util;
1:39644b5: 
1:39644b5: import java.io.Serializable;
1:ab11a48: import java.util.HashMap;
1:80195da: import java.util.Map;
1:80195da: 
1:95ce1da: /**
1:39644b5:  * This class maintains carbon session information details
1:95ce1da:  */
1:80195da: public class CarbonSessionInfo implements Serializable, Cloneable {
1:95ce1da: 
1:ab11a48:   private static final long serialVersionUID = 4335254187209416779L;
1:ab11a48: 
1:39644b5:   // contains carbon session param details
1:39644b5:   private SessionParams sessionParams;
1:80195da:   private SessionParams threadParams;
1:ab11a48:   // use the below field to store the objects which need not be serialized
1:ab11a48:   private transient Map<String, Object> nonSerializableExtraInfo;
1:39644b5: 
1:39644b5:   public SessionParams getSessionParams() {
1:39644b5:     return sessionParams;
2:80195da:   }
1:95ce1da: 
1:39644b5:   public void setSessionParams(SessionParams sessionParams) {
1:39644b5:     this.sessionParams = sessionParams;
1:ab11a48:   }
1:39644b5: 
1:80195da:   public SessionParams getThreadParams() {
1:80195da:     return threadParams;
1:80195da:   }
1:80195da: 
1:80195da:   public void setThreadParams(SessionParams threadParams) {
1:80195da:     this.threadParams = threadParams;
1:80195da:   }
1:80195da: 
1:80195da:   public CarbonSessionInfo() {
1:80195da:     this.sessionParams = new SessionParams();
1:80195da:     this.threadParams = new SessionParams();
1:80195da:   }
1:80195da: 
1:80195da:   public CarbonSessionInfo clone() throws CloneNotSupportedException {
1:80195da:     super.clone();
1:80195da:     CarbonSessionInfo newObj = new CarbonSessionInfo();
1:5508460:     newObj.setSessionParams(sessionParams.clone());
1:5508460:     newObj.setThreadParams(threadParams.clone());
1:359f6e6:     for (Map.Entry<String, Object> entry : getNonSerializableExtraInfo().entrySet()) {
1:359f6e6:       newObj.getNonSerializableExtraInfo().put(entry.getKey(), entry.getValue());
1:80195da:     }
1:80195da:     return newObj;
1:80195da:   }
1:ab11a48: 
1:ab11a48:   public Map<String, Object> getNonSerializableExtraInfo() {
1:ab11a48:     // as the field is transient it can be null if serialized and de serialized again
1:ab11a48:     if (null == nonSerializableExtraInfo) {
1:ab11a48:       nonSerializableExtraInfo = new HashMap<>();
1:ab11a48:     }
1:ab11a48:     return nonSerializableExtraInfo;
1:ab11a48:   }
1:ab11a48: 
1:ab11a48:   public void setNonSerializableExtraInfo(Map<String, Object> nonSerializableExtraInfo) {
1:ab11a48:     this.nonSerializableExtraInfo = nonSerializableExtraInfo;
1:ab11a48:   }
1:80195da: }
============================================================================
author:KanakaKumar
-------------------------------------------------------------------------------
commit:359f6e6
/////////////////////////////////////////////////////////////////////////
1:     for (Map.Entry<String, Object> entry : getNonSerializableExtraInfo().entrySet()) {
1:       newObj.getNonSerializableExtraInfo().put(entry.getKey(), entry.getValue());
author:kunal642
-------------------------------------------------------------------------------
commit:5508460
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     newObj.setSessionParams(sessionParams.clone());
1:     newObj.setThreadParams(threadParams.clone());
author:akashrn5
-------------------------------------------------------------------------------
commit:ab11a48
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = 4335254187209416779L;
1: 
1:   // use the below field to store the objects which need not be serialized
1:   private transient Map<String, Object> nonSerializableExtraInfo;
/////////////////////////////////////////////////////////////////////////
0:     Map<String, Object> nonSerializableExtraInfo = getNonSerializableExtraInfo();
0:     for (Map.Entry<String, Object> entry : nonSerializableExtraInfo.entrySet()) {
0:       nonSerializableExtraInfo.put(entry.getKey(), entry.getValue());
1:     }
0:     newObj.setNonSerializableExtraInfo(nonSerializableExtraInfo);
1: 
1:   public Map<String, Object> getNonSerializableExtraInfo() {
1:     // as the field is transient it can be null if serialized and de serialized again
1:     if (null == nonSerializableExtraInfo) {
1:       nonSerializableExtraInfo = new HashMap<>();
1:     }
1:     return nonSerializableExtraInfo;
1:   }
1: 
1:   public void setNonSerializableExtraInfo(Map<String, Object> nonSerializableExtraInfo) {
1:     this.nonSerializableExtraInfo = nonSerializableExtraInfo;
1:   }
author:rahulforallp
-------------------------------------------------------------------------------
commit:80195da
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.exception.InvalidConfigurationException;
1: public class CarbonSessionInfo implements Serializable, Cloneable {
1:   private SessionParams threadParams;
/////////////////////////////////////////////////////////////////////////
1:   public SessionParams getThreadParams() {
1:     return threadParams;
1:   }
1: 
1:   public void setThreadParams(SessionParams threadParams) {
1:     this.threadParams = threadParams;
1:   }
1: 
1:   public CarbonSessionInfo() {
1:     this.sessionParams = new SessionParams();
1:     this.threadParams = new SessionParams();
1:   }
1: 
1:   public CarbonSessionInfo clone() throws CloneNotSupportedException {
1:     super.clone();
1:     CarbonSessionInfo newObj = new CarbonSessionInfo();
0:     for (Map.Entry<String, String> entry : sessionParams.getAll().entrySet()) {
0:       try {
0:         newObj.getSessionParams().addProperty(entry.getKey(), entry.getValue(), false);
0:       } catch (InvalidConfigurationException ex) {
0:         ex.printStackTrace();
1:       }
1:     }
0:     for (Map.Entry<String, String> entry : threadParams.getAll().entrySet()) {
0:       try {
0:         newObj.getThreadParams().addProperty(entry.getKey(), entry.getValue(), false);
0:       } catch (InvalidConfigurationException ex) {
0:         ex.printStackTrace();
1:       }
1:     }
1:     return newObj;
1:   }
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
0:   private static final long serialVersionUID = 7738818814501121256L;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:39644b5
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
1:  * This class maintains carbon session information details
0: public class CarbonSessionInfo implements Serializable {
1:   // contains carbon session param details
1:   private SessionParams sessionParams;
1: 
1:   public SessionParams getSessionParams() {
1:     return sessionParams;
1:   public void setSessionParams(SessionParams sessionParams) {
1:     this.sessionParams = sessionParams;
1: 
author:Manohar
-------------------------------------------------------------------------------
commit:95ce1da
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: /**
0:  * This class maintains ThreadLocal session params
1:  */
0: public class ThreadLocalSessionParams {
0:   static final InheritableThreadLocal<SessionParams> threadLocal =
0:       new InheritableThreadLocal<SessionParams>();
1: 
0:   public static void setSessionParams(SessionParams sessionParams) {
0:     threadLocal.set(sessionParams);
0:   }
1: 
0:   public static SessionParams getSessionParams() {
0:     return threadLocal.get();
0:   }
0: }
============================================================================