1:4daf063: /*
1:4daf063:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4daf063:  * contributor license agreements.  See the NOTICE file distributed with
1:4daf063:  * this work for additional information regarding copyright ownership.
1:4daf063:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4daf063:  * (the "License"); you may not use this file except in compliance with
1:4daf063:  * the License.  You may obtain a copy of the License at
1:4daf063:  *
1:4daf063:  *    http://www.apache.org/licenses/LICENSE-2.0
1:4daf063:  *
1:4daf063:  * Unless required by applicable law or agreed to in writing, software
1:4daf063:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4daf063:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4daf063:  * See the License for the specific language governing permissions and
1:4daf063:  * limitations under the License.
1:4daf063:  */
1:4daf063: package org.apache.carbondata.core.dictionary.client;
1:4daf063: 
1:4daf063: import java.net.InetSocketAddress;
1:4daf063: 
1:4daf063: import org.apache.carbondata.common.logging.LogService;
1:4daf063: import org.apache.carbondata.common.logging.LogServiceFactory;
1:4daf063: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:4daf063: 
1:4daf063: import io.netty.bootstrap.Bootstrap;
1:4daf063: import io.netty.channel.ChannelInitializer;
1:4daf063: import io.netty.channel.ChannelPipeline;
1:4daf063: import io.netty.channel.nio.NioEventLoopGroup;
1:4daf063: import io.netty.channel.socket.SocketChannel;
1:4daf063: import io.netty.channel.socket.nio.NioSocketChannel;
1:4daf063: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
1:4daf063: 
1:4daf063: /**
1:4daf063:  * Dictionary client to connect to Dictionary server and generate dictionary values
1:4daf063:  */
1:4daf063: public class NonSecureDictionaryClient implements DictionaryClient {
1:4daf063: 
1:4daf063:   private static final LogService LOGGER =
1:4daf063:       LogServiceFactory.getLogService(NonSecureDictionaryClient.class.getName());
1:4daf063: 
1:4daf063:   private NonSecureDictionaryClientHandler nonSecureDictionaryClientHandler =
1:4daf063:       new NonSecureDictionaryClientHandler();
1:4daf063: 
1:4daf063:   private NioEventLoopGroup workerGroup;
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * start dictionary client
1:4daf063:    *
1:4daf063:    * @param address
1:4daf063:    * @param port
1:4daf063:    */
1:4daf063:   @Override public void startClient(String secretKey, String address, int port,
1:4daf063:       boolean encryptSecureServer) {
1:4daf063:     LOGGER.audit("Starting client on " + address + " " + port);
1:4daf063:     long start = System.currentTimeMillis();
1:4daf063:     // Create an Event with 1 thread.
1:4daf063:     workerGroup = new NioEventLoopGroup(1);
1:4daf063:     Bootstrap clientBootstrap = new Bootstrap();
1:4daf063:     clientBootstrap.group(workerGroup).channel(NioSocketChannel.class)
1:4daf063:         .handler(new ChannelInitializer<SocketChannel>() {
1:4daf063:           @Override public void initChannel(SocketChannel ch) throws Exception {
1:4daf063:             ChannelPipeline pipeline = ch.pipeline();
1:4daf063:             // Based on length provided at header, it collects all packets
1:4daf063:             pipeline
1:4daf063:                 .addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
1:4daf063:             pipeline.addLast("NonSecureDictionaryClientHandler", nonSecureDictionaryClientHandler);
1:4daf063:           }
1:4daf063:         });
1:4daf063:     clientBootstrap.connect(new InetSocketAddress(address, port));
1:4daf063:     LOGGER.info(
1:4daf063:         "Dictionary client Started, Total time spent : " + (System.currentTimeMillis() - start));
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * for client request
1:4daf063:    *
1:4daf063:    * @param key
1:4daf063:    * @return
1:4daf063:    */
1:4daf063:   @Override
1:4daf063:   public DictionaryMessage getDictionary(
1:4daf063:       DictionaryMessage key) {
1:4daf063:     return nonSecureDictionaryClientHandler.getDictionary(key);
1:4daf063:   }
1:4daf063: 
1:4daf063:   /**
1:4daf063:    * shutdown dictionary client
1:4daf063:    */
1:4daf063:   @Override public void shutDown() {
1:4daf063:     workerGroup.shutdownGracefully();
1:4daf063:     try {
1:4daf063:       workerGroup.terminationFuture().sync();
1:4daf063:     } catch (InterruptedException e) {
1:4daf063:       LOGGER.error(e);
1:4daf063:     }
1:4daf063:   }
1:4daf063: }
============================================================================
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.client;
1: 
1: import java.net.InetSocketAddress;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1: 
1: import io.netty.bootstrap.Bootstrap;
1: import io.netty.channel.ChannelInitializer;
1: import io.netty.channel.ChannelPipeline;
1: import io.netty.channel.nio.NioEventLoopGroup;
1: import io.netty.channel.socket.SocketChannel;
1: import io.netty.channel.socket.nio.NioSocketChannel;
1: import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
1: 
1: /**
1:  * Dictionary client to connect to Dictionary server and generate dictionary values
1:  */
1: public class NonSecureDictionaryClient implements DictionaryClient {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(NonSecureDictionaryClient.class.getName());
1: 
1:   private NonSecureDictionaryClientHandler nonSecureDictionaryClientHandler =
1:       new NonSecureDictionaryClientHandler();
1: 
1:   private NioEventLoopGroup workerGroup;
1: 
1:   /**
1:    * start dictionary client
1:    *
1:    * @param address
1:    * @param port
1:    */
1:   @Override public void startClient(String secretKey, String address, int port,
1:       boolean encryptSecureServer) {
1:     LOGGER.audit("Starting client on " + address + " " + port);
1:     long start = System.currentTimeMillis();
1:     // Create an Event with 1 thread.
1:     workerGroup = new NioEventLoopGroup(1);
1:     Bootstrap clientBootstrap = new Bootstrap();
1:     clientBootstrap.group(workerGroup).channel(NioSocketChannel.class)
1:         .handler(new ChannelInitializer<SocketChannel>() {
1:           @Override public void initChannel(SocketChannel ch) throws Exception {
1:             ChannelPipeline pipeline = ch.pipeline();
1:             // Based on length provided at header, it collects all packets
1:             pipeline
1:                 .addLast("LengthDecoder", new LengthFieldBasedFrameDecoder(1048576, 0, 2, 0, 2));
1:             pipeline.addLast("NonSecureDictionaryClientHandler", nonSecureDictionaryClientHandler);
1:           }
1:         });
1:     clientBootstrap.connect(new InetSocketAddress(address, port));
1:     LOGGER.info(
1:         "Dictionary client Started, Total time spent : " + (System.currentTimeMillis() - start));
1:   }
1: 
1:   /**
1:    * for client request
1:    *
1:    * @param key
1:    * @return
1:    */
1:   @Override
1:   public DictionaryMessage getDictionary(
1:       DictionaryMessage key) {
1:     return nonSecureDictionaryClientHandler.getDictionary(key);
1:   }
1: 
1:   /**
1:    * shutdown dictionary client
1:    */
1:   @Override public void shutDown() {
1:     workerGroup.shutdownGracefully();
1:     try {
1:       workerGroup.terminationFuture().sync();
1:     } catch (InterruptedException e) {
1:       LOGGER.error(e);
1:     }
1:   }
1: }
============================================================================