1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache;
1:cd6a4ff: 
1:047c502: import java.lang.reflect.Constructor;
1:cd6a4ff: import java.util.HashMap;
1:cd6a4ff: import java.util.Map;
1:cd6a4ff: 
1:b6ab4ef: import org.apache.carbondata.common.logging.LogService;
1:b6ab4ef: import org.apache.carbondata.common.logging.LogServiceFactory;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.ForwardDictionaryCache;
1:cd6a4ff: import org.apache.carbondata.core.cache.dictionary.ReverseDictionaryCache;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b681244: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexStore;
1:b6ab4ef: import org.apache.carbondata.core.util.CarbonProperties;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * Cache provider class which will create a cache based on given type
1:cd6a4ff:  */
1:cd6a4ff: public class CacheProvider {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * cache provider instance
1:cd6a4ff:    */
1:cd6a4ff:   private static CacheProvider cacheProvider = new CacheProvider();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * a map that will hold the entry for cache type to cache object mapping
1:cd6a4ff:    */
1:cd6a4ff:   private Map<CacheType, Cache> cacheTypeToCacheMap =
2:cd6a4ff:       new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * object lock instance to be used in synchronization block
1:cd6a4ff:    */
1:cd6a4ff:   private final Object lock = new Object();
1:cd6a4ff:   /**
1:b6ab4ef:    * LRU cache instance
1:cd6a4ff:    */
1:b6ab4ef:   private CarbonLRUCache carbonLRUCache;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:b6ab4ef:    * instance for CacheProvider LOGGER
1:047c502:    */
1:b6ab4ef:   private static final LogService LOGGER =
1:b6ab4ef:       LogServiceFactory.getLogService(CacheProvider.class.getName());
1:cd6a4ff: 
1:047c502:   /**
1:cd6a4ff:    * private constructor to follow singleton design pattern for this class
1:cd6a4ff:    */
1:cd6a4ff:   private CacheProvider() {
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @return cache provider instance
1:cd6a4ff:    */
1:cd6a4ff:   public static CacheProvider getInstance() {
1:cd6a4ff:     return cacheProvider;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will check if a cache already exists for given cache type and create in case
1:cd6a4ff:    * it is not present in the map
1:cd6a4ff:    *
1:cd6a4ff:    * @param cacheType       type of cache
1:cd6a4ff:    * @param <K>
1:cd6a4ff:    * @param <V>
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:1155d4d:   public <K, V> Cache<K, V> createCache(CacheType cacheType) {
1:cd6a4ff:     //check if lru cache is null, if null create one
1:cd6a4ff:     //check if cache is null for given cache type, if null create one
1:cd6a4ff:     if (!dictionaryCacheAlreadyExists(cacheType)) {
1:cd6a4ff:       synchronized (lock) {
1:cd6a4ff:         if (!dictionaryCacheAlreadyExists(cacheType)) {
1:047c502:           if (null == carbonLRUCache) {
1:047c502:             createLRULevelCacheInstance();
1:cd6a4ff:           }
1:1155d4d:           createDictionaryCacheForGivenType(cacheType);
1:cd6a4ff:         }
1:cd6a4ff:       }
1:cd6a4ff:     }
1:cd6a4ff:     return cacheTypeToCacheMap.get(cacheType);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:047c502:    * This method will check if a cache already exists for given cache type and store
1:047c502:    * if it is not present in the map
1:047c502:    */
1:047c502:   public <K, V> Cache<K, V> createCache(CacheType cacheType, String cacheClassName)
1:047c502:       throws Exception {
1:047c502:     //check if lru cache is null, if null create one
1:047c502:     //check if cache is null for given cache type, if null create one
1:047c502:     if (!dictionaryCacheAlreadyExists(cacheType)) {
1:047c502:       synchronized (lock) {
1:047c502:         if (!dictionaryCacheAlreadyExists(cacheType)) {
1:047c502:           if (null == carbonLRUCache) {
1:047c502:             createLRULevelCacheInstance();
1:047c502:           }
1:047c502:           Class<?> clazz = Class.forName(cacheClassName);
1:047c502:           Constructor<?> constructor = clazz.getConstructors()[0];
1:047c502:           constructor.setAccessible(true);
1:047c502:           Cache cacheObject = (Cache) constructor.newInstance(carbonLRUCache);
1:047c502:           cacheTypeToCacheMap.put(cacheType, cacheObject);
1:047c502:         }
1:047c502:       }
1:047c502:     }
1:047c502:     return cacheTypeToCacheMap.get(cacheType);
1:047c502:   }
1:047c502: 
1:047c502:   /**
1:cd6a4ff:    * This method will create the cache for given cache type
1:cd6a4ff:    *
1:cd6a4ff:    * @param cacheType       type of cache
1:cd6a4ff:    */
1:1155d4d:   private void createDictionaryCacheForGivenType(CacheType cacheType) {
1:cd6a4ff:     Cache cacheObject = null;
1:cd6a4ff:     if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {
1:cd6a4ff:       cacheObject =
1:1155d4d:           new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
1:cd6a4ff:     } else if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {
1:cd6a4ff:       cacheObject =
1:1155d4d:           new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
1:b681244:     } else if (cacheType.equals(cacheType.DRIVER_BLOCKLET_DATAMAP)) {
1:1155d4d:       cacheObject = new BlockletDataMapIndexStore(carbonLRUCache);
1:cd6a4ff:     }
1:cd6a4ff:     cacheTypeToCacheMap.put(cacheType, cacheObject);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will create the lru cache instance based on the given type
1:cd6a4ff:    *
1:cd6a4ff:    */
1:047c502:   private void createLRULevelCacheInstance() {
1:b6ab4ef:     boolean isDriver = Boolean.parseBoolean(CarbonProperties.getInstance()
1:b6ab4ef:         .getProperty(CarbonCommonConstants.IS_DRIVER_INSTANCE, "false"));
1:b6ab4ef:     if (isDriver) {
1:b6ab4ef:       carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
1:b6ab4ef:           CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
1:b6ab4ef:     } else {
1:b6ab4ef:       // if executor cache size is not configured then driver cache conf will be used
1:b6ab4ef:       String executorCacheSize = CarbonProperties.getInstance()
1:b6ab4ef:           .getProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE);
1:b6ab4ef:       if (null != executorCacheSize) {
1:b6ab4ef:         carbonLRUCache =
1:b6ab4ef:             new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE,
1:b6ab4ef:                 CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
1:b6ab4ef:       } else {
1:b6ab4ef:         LOGGER.info(
1:b6ab4ef:             "Executor LRU cache size not configured. Initializing with driver LRU cache size.");
1:b6ab4ef:         carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
1:b6ab4ef:             CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
1:cd6a4ff:       }
1:cd6a4ff:     }
4:047c502:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will check whether the map already has an entry for
1:cd6a4ff:    * given cache type
1:cd6a4ff:    *
2:cd6a4ff:    * @param cacheType
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   private boolean dictionaryCacheAlreadyExists(CacheType cacheType) {
1:cd6a4ff:     return null != cacheTypeToCacheMap.get(cacheType);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to clear the cache
1:cd6a4ff:    */
1:cd6a4ff:   public void dropAllCache() {
1:256dbed:     if (null != carbonLRUCache) {
1:b6ab4ef:       carbonLRUCache.clear();
1:256dbed:       carbonLRUCache = null;
1:cd6a4ff:     }
1:cd6a4ff:     cacheTypeToCacheMap.clear();
1:cd6a4ff:   }
1:047c502: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:047c502
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
1:             createLRULevelCacheInstance();
/////////////////////////////////////////////////////////////////////////
1:    * This method will check if a cache already exists for given cache type and store
1:    * if it is not present in the map
1:    */
1:   public <K, V> Cache<K, V> createCache(CacheType cacheType, String cacheClassName)
1:       throws Exception {
1:     //check if lru cache is null, if null create one
1:     //check if cache is null for given cache type, if null create one
1:     if (!dictionaryCacheAlreadyExists(cacheType)) {
1:       synchronized (lock) {
1:         if (!dictionaryCacheAlreadyExists(cacheType)) {
1:           if (null == carbonLRUCache) {
1:             createLRULevelCacheInstance();
1:           }
1:           Class<?> clazz = Class.forName(cacheClassName);
1:           Constructor<?> constructor = clazz.getConstructors()[0];
1:           constructor.setAccessible(true);
1:           Cache cacheObject = (Cache) constructor.newInstance(carbonLRUCache);
1:           cacheTypeToCacheMap.put(cacheType, cacheObject);
1:         }
1:       }
1:     }
1:     return cacheTypeToCacheMap.get(cacheType);
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:   private void createLRULevelCacheInstance() {
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexStore;
/////////////////////////////////////////////////////////////////////////
1:     } else if (cacheType.equals(cacheType.DRIVER_BLOCKLET_DATAMAP)) {
0:       cacheObject = new BlockletDataMapIndexStore(carbonStorePath, carbonLRUCache);
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
1: import org.apache.carbondata.core.cache.dictionary.ForwardDictionaryCache;
1: import org.apache.carbondata.core.cache.dictionary.ReverseDictionaryCache;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: /**
1:  * Cache provider class which will create a cache based on given type
1:  */
1: public class CacheProvider {
1: 
1:   /**
1:    * cache provider instance
1:    */
1:   private static CacheProvider cacheProvider = new CacheProvider();
1: 
1:   /**
1:    * a map that will hold the entry for cache type to cache object mapping
1:    */
1:   private Map<CacheType, Cache> cacheTypeToCacheMap =
1:       new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1: 
1:   /**
0:    * a map that will hold the mapping of cache type to LRU cache instance
1:    */
0:   private Map<CacheType, CarbonLRUCache> cacheTypeToLRUCacheMap =
1:       new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
1: 
1:   /**
1:    * object lock instance to be used in synchronization block
1:    */
1:   private final Object lock = new Object();
1: 
1:   /**
1:    * private constructor to follow singleton design pattern for this class
1:    */
1:   private CacheProvider() {
1: 
1:   }
1: 
1:   /**
1:    * @return cache provider instance
1:    */
1:   public static CacheProvider getInstance() {
1:     return cacheProvider;
1:   }
1: 
1:   /**
1:    * This method will check if a cache already exists for given cache type and create in case
1:    * it is not present in the map
1:    *
1:    * @param cacheType       type of cache
0:    * @param carbonStorePath store path
1:    * @param <K>
1:    * @param <V>
1:    * @return
1:    */
0:   public <K, V> Cache<K, V> createCache(CacheType cacheType, String carbonStorePath) {
1:     //check if lru cache is null, if null create one
1:     //check if cache is null for given cache type, if null create one
1:     if (!dictionaryCacheAlreadyExists(cacheType)) {
1:       synchronized (lock) {
1:         if (!dictionaryCacheAlreadyExists(cacheType)) {
0:           if (null == cacheTypeToLRUCacheMap.get(cacheType)) {
0:             createLRULevelCacheInstance(cacheType);
1:           }
0:           createDictionaryCacheForGivenType(cacheType, carbonStorePath);
1:         }
1:       }
1:     }
1:     return cacheTypeToCacheMap.get(cacheType);
1:   }
1: 
1:   /**
1:    * This method will create the cache for given cache type
1:    *
1:    * @param cacheType       type of cache
0:    * @param carbonStorePath store path
1:    */
0:   private void createDictionaryCacheForGivenType(CacheType cacheType, String carbonStorePath) {
1:     Cache cacheObject = null;
1:     if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {
1:       cacheObject =
0:           new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonStorePath,
0:               cacheTypeToLRUCacheMap.get(cacheType));
1:     } else if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {
1:       cacheObject =
0:           new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonStorePath,
0:               cacheTypeToLRUCacheMap.get(cacheType));
1:     }
1:     cacheTypeToCacheMap.put(cacheType, cacheObject);
1:   }
1: 
1:   /**
1:    * This method will create the lru cache instance based on the given type
1:    *
1:    * @param cacheType
1:    */
0:   private void createLRULevelCacheInstance(CacheType cacheType) {
0:     CarbonLRUCache carbonLRUCache = null;
0:     // if cache type is dictionary cache, then same lru cache instance has to be shared
0:     // between forward and reverse cache
0:     if (cacheType.equals(CacheType.REVERSE_DICTIONARY) || cacheType
0:         .equals(CacheType.FORWARD_DICTIONARY)) {
0:       carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE,
0:           CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT);
0:       cacheTypeToLRUCacheMap.put(CacheType.REVERSE_DICTIONARY, carbonLRUCache);
0:       cacheTypeToLRUCacheMap.put(CacheType.FORWARD_DICTIONARY, carbonLRUCache);
1:     }
1:   }
1: 
1:   /**
1:    * This method will check whether the map already has an entry for
1:    * given cache type
1:    *
1:    * @param cacheType
1:    * @return
1:    */
1:   private boolean dictionaryCacheAlreadyExists(CacheType cacheType) {
1:     return null != cacheTypeToCacheMap.get(cacheType);
1:   }
1: 
1:   /**
1:    * Below method will be used to clear the cache
1:    */
1:   public void dropAllCache() {
0:     cacheTypeToLRUCacheMap.clear();
1:     cacheTypeToCacheMap.clear();
1:   }
1: }
commit:047c502
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Constructor;
/////////////////////////////////////////////////////////////////////////
0:             createLRULevelCacheInstance();
/////////////////////////////////////////////////////////////////////////
0:    * This method will check if a cache already exists for given cache type and store
0:    * if it is not present in the map
1:    */
0:   public <K, V> Cache<K, V> createCache(CacheType cacheType, String cacheClassName)
0:       throws Exception {
0:     //check if lru cache is null, if null create one
0:     //check if cache is null for given cache type, if null create one
0:     if (!dictionaryCacheAlreadyExists(cacheType)) {
0:       synchronized (lock) {
0:         if (!dictionaryCacheAlreadyExists(cacheType)) {
1:           if (null == carbonLRUCache) {
0:             createLRULevelCacheInstance();
1:           }
0:           Class<?> clazz = Class.forName(cacheClassName);
0:           Constructor<?> constructor = clazz.getConstructors()[0];
0:           constructor.setAccessible(true);
0:           Cache cacheObject = (Cache) constructor.newInstance(carbonLRUCache);
0:           cacheTypeToCacheMap.put(cacheType, cacheObject);
1:         }
1:       }
1:     }
0:     return cacheTypeToCacheMap.get(cacheType);
1:   }
0: 
1:   /**
/////////////////////////////////////////////////////////////////////////
0:   private void createLRULevelCacheInstance() {
commit:b681244
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.indexstore.BlockletDataMapIndexStore;
/////////////////////////////////////////////////////////////////////////
0:     } else if (cacheType.equals(cacheType.DRIVER_BLOCKLET_DATAMAP)) {
0:       cacheObject = new BlockletDataMapIndexStore(carbonStorePath, carbonLRUCache);
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache;
0: 
0: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.apache.carbondata.core.cache.dictionary.Dictionary;
0: import org.apache.carbondata.core.cache.dictionary.DictionaryColumnUniqueIdentifier;
0: import org.apache.carbondata.core.cache.dictionary.ForwardDictionaryCache;
0: import org.apache.carbondata.core.cache.dictionary.ReverseDictionaryCache;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: 
0: /**
0:  * Cache provider class which will create a cache based on given type
0:  */
0: public class CacheProvider {
0: 
0:   /**
0:    * cache provider instance
0:    */
0:   private static CacheProvider cacheProvider = new CacheProvider();
0: 
0:   /**
0:    * a map that will hold the entry for cache type to cache object mapping
0:    */
0:   private Map<CacheType, Cache> cacheTypeToCacheMap =
0:       new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
0: 
0:   /**
0:    * a map that will hold the mapping of cache type to LRU cache instance
0:    */
0:   private Map<CacheType, CarbonLRUCache> cacheTypeToLRUCacheMap =
0:       new HashMap<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);
0: 
0:   /**
0:    * object lock instance to be used in synchronization block
0:    */
0:   private final Object lock = new Object();
0: 
0:   /**
0:    * private constructor to follow singleton design pattern for this class
0:    */
0:   private CacheProvider() {
0: 
0:   }
0: 
0:   /**
0:    * @return cache provider instance
0:    */
0:   public static CacheProvider getInstance() {
0:     return cacheProvider;
0:   }
0: 
0:   /**
0:    * This method will check if a cache already exists for given cache type and create in case
0:    * it is not present in the map
0:    *
0:    * @param cacheType       type of cache
0:    * @param carbonStorePath store path
0:    * @param <K>
0:    * @param <V>
0:    * @return
0:    */
0:   public <K, V> Cache<K, V> createCache(CacheType cacheType, String carbonStorePath) {
0:     //check if lru cache is null, if null create one
0:     //check if cache is null for given cache type, if null create one
0:     if (!dictionaryCacheAlreadyExists(cacheType)) {
0:       synchronized (lock) {
0:         if (!dictionaryCacheAlreadyExists(cacheType)) {
0:           if (null == cacheTypeToLRUCacheMap.get(cacheType)) {
0:             createLRULevelCacheInstance(cacheType);
0:           }
0:           createDictionaryCacheForGivenType(cacheType, carbonStorePath);
0:         }
0:       }
0:     }
0:     return cacheTypeToCacheMap.get(cacheType);
0:   }
0: 
0:   /**
0:    * This method will create the cache for given cache type
0:    *
0:    * @param cacheType       type of cache
0:    * @param carbonStorePath store path
0:    */
0:   private void createDictionaryCacheForGivenType(CacheType cacheType, String carbonStorePath) {
0:     Cache cacheObject = null;
0:     if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {
0:       cacheObject =
0:           new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonStorePath,
0:               cacheTypeToLRUCacheMap.get(cacheType));
0:     } else if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {
0:       cacheObject =
0:           new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonStorePath,
0:               cacheTypeToLRUCacheMap.get(cacheType));
0:     }
0:     cacheTypeToCacheMap.put(cacheType, cacheObject);
0:   }
0: 
0:   /**
0:    * This method will create the lru cache instance based on the given type
0:    *
0:    * @param cacheType
0:    */
0:   private void createLRULevelCacheInstance(CacheType cacheType) {
0:     CarbonLRUCache carbonLRUCache = null;
0:     // if cache type is dictionary cache, then same lru cache instance has to be shared
0:     // between forward and reverse cache
0:     if (cacheType.equals(CacheType.REVERSE_DICTIONARY) || cacheType
0:         .equals(CacheType.FORWARD_DICTIONARY)) {
0:       carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE,
0:           CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT);
0:       cacheTypeToLRUCacheMap.put(CacheType.REVERSE_DICTIONARY, carbonLRUCache);
0:       cacheTypeToLRUCacheMap.put(CacheType.FORWARD_DICTIONARY, carbonLRUCache);
0:     }
0:   }
0: 
0:   /**
0:    * This method will check whether the map already has an entry for
0:    * given cache type
0:    *
0:    * @param cacheType
0:    * @return
0:    */
0:   private boolean dictionaryCacheAlreadyExists(CacheType cacheType) {
0:     return null != cacheTypeToCacheMap.get(cacheType);
0:   }
0: 
0:   /**
0:    * Below method will be used to clear the cache
0:    */
0:   public void dropAllCache() {
0:     cacheTypeToLRUCacheMap.clear();
0:     cacheTypeToCacheMap.clear();
0:   }
0: }
author:kumarvishal09
-------------------------------------------------------------------------------
commit:6178835
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6178835
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
1:   public <K, V> Cache<K, V> createCache(CacheType cacheType) {
/////////////////////////////////////////////////////////////////////////
1:           createDictionaryCacheForGivenType(cacheType);
/////////////////////////////////////////////////////////////////////////
1:   private void createDictionaryCacheForGivenType(CacheType cacheType) {
1:           new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
1:           new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
0:       cacheObject = new BlockIndexStore<TableBlockUniqueIdentifier, AbstractIndex>(carbonLRUCache);
0:           new SegmentTaskIndexStore(carbonLRUCache);
1:       cacheObject = new BlockletDataMapIndexStore(carbonLRUCache);
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.datastore.BlockIndexStore;
0: import org.apache.carbondata.core.carbon.datastore.SegmentTaskIndexStore;
0: import org.apache.carbondata.core.carbon.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.carbon.datastore.block.TableBlockUniqueIdentifier;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * LRU cache instance
0:    */
1:   private CarbonLRUCache carbonLRUCache;
0: 
0:   /**
1:    * instance for CacheProvider LOGGER
0:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CacheProvider.class.getName());
/////////////////////////////////////////////////////////////////////////
0:           if (null == carbonLRUCache) {
/////////////////////////////////////////////////////////////////////////
0:               carbonLRUCache);
0:               carbonLRUCache);
0:     } else if (cacheType.equals(cacheType.EXECUTOR_BTREE)) {
0:       cacheObject = new BlockIndexStore<TableBlockUniqueIdentifier, AbstractIndex>(carbonStorePath,
0:           carbonLRUCache);
0:     } else if (cacheType.equals(cacheType.DRIVER_BTREE)) {
0:       cacheObject =
0:           new SegmentTaskIndexStore<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>(
0:               carbonStorePath, carbonLRUCache);
/////////////////////////////////////////////////////////////////////////
1:     boolean isDriver = Boolean.parseBoolean(CarbonProperties.getInstance()
1:         .getProperty(CarbonCommonConstants.IS_DRIVER_INSTANCE, "false"));
1:     if (isDriver) {
1:       carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
1:           CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
1:     } else {
1:       // if executor cache size is not configured then driver cache conf will be used
1:       String executorCacheSize = CarbonProperties.getInstance()
1:           .getProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE);
1:       if (null != executorCacheSize) {
1:         carbonLRUCache =
1:             new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE,
1:                 CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
1:       } else {
1:         LOGGER.info(
1:             "Executor LRU cache size not configured. Initializing with driver LRU cache size.");
1:         carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
1:             CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
0:       }
/////////////////////////////////////////////////////////////////////////
0:     if(null != carbonLRUCache) {
1:       carbonLRUCache.clear();
0:       carbonLRUCache= null;
0:     }
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:   public <K, V> Cache<K, V> createCache(CacheType cacheType) {
/////////////////////////////////////////////////////////////////////////
0:           createDictionaryCacheForGivenType(cacheType);
/////////////////////////////////////////////////////////////////////////
0:   private void createDictionaryCacheForGivenType(CacheType cacheType) {
0:           new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
0:           new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier, Dictionary>(carbonLRUCache);
0:       cacheObject = new BlockIndexStore<TableBlockUniqueIdentifier, AbstractIndex>(carbonLRUCache);
0:           new SegmentTaskIndexStore(carbonLRUCache);
0:       cacheObject = new BlockletDataMapIndexStore(carbonLRUCache);
commit:b6ab4ef
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.common.logging.LogService;
0: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.datastore.BlockIndexStore;
0: import org.apache.carbondata.core.carbon.datastore.SegmentTaskIndexStore;
0: import org.apache.carbondata.core.carbon.datastore.TableSegmentUniqueIdentifier;
0: import org.apache.carbondata.core.carbon.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.carbon.datastore.block.SegmentTaskIndexWrapper;
0: import org.apache.carbondata.core.carbon.datastore.block.TableBlockUniqueIdentifier;
0: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * LRU cache instance
0:    */
0:   private CarbonLRUCache carbonLRUCache;
0: 
0:   /**
0:    * instance for CacheProvider LOGGER
0:    */
0:   private static final LogService LOGGER =
0:       LogServiceFactory.getLogService(CacheProvider.class.getName());
/////////////////////////////////////////////////////////////////////////
0:           if (null == carbonLRUCache) {
/////////////////////////////////////////////////////////////////////////
0:               carbonLRUCache);
0:               carbonLRUCache);
0:     } else if (cacheType.equals(cacheType.EXECUTOR_BTREE)) {
0:       cacheObject = new BlockIndexStore<TableBlockUniqueIdentifier, AbstractIndex>(carbonStorePath,
0:           carbonLRUCache);
0:     } else if (cacheType.equals(cacheType.DRIVER_BTREE)) {
0:       cacheObject =
0:           new SegmentTaskIndexStore<TableSegmentUniqueIdentifier, SegmentTaskIndexWrapper>(
0:               carbonStorePath, carbonLRUCache);
/////////////////////////////////////////////////////////////////////////
0:     boolean isDriver = Boolean.parseBoolean(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.IS_DRIVER_INSTANCE, "false"));
0:     if (isDriver) {
0:       carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
0:           CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
0:     } else {
0:       // if executor cache size is not configured then driver cache conf will be used
0:       String executorCacheSize = CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE);
0:       if (null != executorCacheSize) {
0:         carbonLRUCache =
0:             new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_EXECUTOR_LRU_CACHE_SIZE,
0:                 CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
0:       } else {
0:         LOGGER.info(
0:             "Executor LRU cache size not configured. Initializing with driver LRU cache size.");
0:         carbonLRUCache = new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_DRIVER_LRU_CACHE_SIZE,
0:             CarbonCommonConstants.CARBON_MAX_LRU_CACHE_SIZE_DEFAULT);
0:       }
/////////////////////////////////////////////////////////////////////////
0:     if(null != carbonLRUCache) {
0:       carbonLRUCache.clear();
0:       carbonLRUCache= null;
0:     }
author:QiangCai
-------------------------------------------------------------------------------
commit:256dbed
/////////////////////////////////////////////////////////////////////////
1:     if (null != carbonLRUCache) {
1:       carbonLRUCache = null;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:256dbed
/////////////////////////////////////////////////////////////////////////
0:     if (null != carbonLRUCache) {
0:       carbonLRUCache = null;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.BlockIndexStore;
0: import org.apache.carbondata.core.datastore.SegmentTaskIndexStore;
0: import org.apache.carbondata.core.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.datastore.block.TableBlockUniqueIdentifier;
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.datastore.BlockIndexStore;
0: import org.apache.carbondata.core.datastore.SegmentTaskIndexStore;
0: import org.apache.carbondata.core.datastore.block.AbstractIndex;
0: import org.apache.carbondata.core.datastore.block.TableBlockUniqueIdentifier;
author:Venkata Ramana G
-------------------------------------------------------------------------------
commit:d53feef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           new SegmentTaskIndexStore(carbonStorePath, carbonLRUCache);
commit:d53feef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           new SegmentTaskIndexStore(carbonStorePath, carbonLRUCache);
============================================================================