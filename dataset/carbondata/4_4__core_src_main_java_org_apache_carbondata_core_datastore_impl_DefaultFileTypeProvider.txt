1:33de599: /*
1:33de599:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:33de599:  * contributor license agreements.  See the NOTICE file distributed with
1:33de599:  * this work for additional information regarding copyright ownership.
1:33de599:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:33de599:  * (the "License"); you may not use this file except in compliance with
1:33de599:  * the License.  You may obtain a copy of the License at
1:33de599:  *
1:33de599:  *    http://www.apache.org/licenses/LICENSE-2.0
1:33de599:  *
1:33de599:  * Unless required by applicable law or agreed to in writing, software
1:33de599:  * distributed under the License is distributed on an "AS IS" BASIS,
1:33de599:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33de599:  * See the License for the specific language governing permissions and
1:33de599:  * limitations under the License.
1:33de599:  */
1:33de599: 
1:33de599: package org.apache.carbondata.core.datastore.impl;
1:33de599: 
1:daa6465: import org.apache.carbondata.core.datastore.FileReader;
1:daa6465: import org.apache.carbondata.core.datastore.filesystem.AlluxioCarbonFile;
1:daa6465: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1:daa6465: import org.apache.carbondata.core.datastore.filesystem.HDFSCarbonFile;
1:daa6465: import org.apache.carbondata.core.datastore.filesystem.LocalCarbonFile;
1:cb10d03: import org.apache.carbondata.core.datastore.filesystem.S3CarbonFile;
1:daa6465: import org.apache.carbondata.core.datastore.filesystem.ViewFSCarbonFile;
1:33de599: 
1:33de599: import org.apache.hadoop.conf.Configuration;
1:33de599: 
1:33b825d: public class DefaultFileTypeProvider implements FileTypeInterface {
1:33de599: 
1:2a9604c:   public FileReader getFileHolder(FileFactory.FileType fileType, Configuration configuration) {
1:33de599:     switch (fileType) {
1:33de599:       case LOCAL:
1:daa6465:         return new FileReaderImpl();
1:33de599:       case HDFS:
1:33de599:       case ALLUXIO:
1:33de599:       case VIEWFS:
3:33de599:       case S3:
1:2a9604c:         return new DFSFileReaderImpl(configuration);
1:33de599:       default:
1:daa6465:         return new FileReaderImpl();
1:33de599:     }
1:33de599:   }
1:33de599: 
1:33de599:   public CarbonFile getCarbonFile(String path, FileFactory.FileType fileType) {
1:33de599:     switch (fileType) {
1:33de599:       case LOCAL:
1:33de599:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:33de599:       case HDFS:
1:33de599:         return new HDFSCarbonFile(path);
1:cb10d03:       case S3:
1:cb10d03:         return new S3CarbonFile(path);
1:33de599:       case ALLUXIO:
1:33de599:         return new AlluxioCarbonFile(path);
1:33de599:       case VIEWFS:
1:33de599:         return new ViewFSCarbonFile(path);
1:33de599:       default:
1:33de599:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:33de599:     }
1:33de599:   }
1:33de599: 
1:33de599:   public CarbonFile getCarbonFile(String path, FileFactory.FileType fileType, Configuration conf) {
1:33de599:     switch (fileType) {
1:33de599:       case LOCAL:
1:33de599:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:33de599:       case HDFS:
1:33de599:         return new HDFSCarbonFile(path, conf);
1:cb10d03:       case S3:
1:cb10d03:         return new S3CarbonFile(path, conf);
1:33de599:       case ALLUXIO:
1:33de599:         return new AlluxioCarbonFile(path);
1:33de599:       case VIEWFS:
1:33de599:         return new ViewFSCarbonFile(path);
1:33de599:       default:
1:33de599:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:33de599:     }
1:33de599:   }
1:33de599: }
============================================================================
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
1:   public FileReader getFileHolder(FileFactory.FileType fileType, Configuration configuration) {
/////////////////////////////////////////////////////////////////////////
1:         return new DFSFileReaderImpl(configuration);
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.filesystem.S3CarbonFile;
/////////////////////////////////////////////////////////////////////////
1:       case S3:
1:         return new S3CarbonFile(path);
/////////////////////////////////////////////////////////////////////////
1:       case S3:
1:         return new S3CarbonFile(path, conf);
author:xubo245
-------------------------------------------------------------------------------
commit:33b825d
/////////////////////////////////////////////////////////////////////////
1: public class DefaultFileTypeProvider implements FileTypeInterface {
author:Jacky Li
-------------------------------------------------------------------------------
commit:daa6465
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.FileReader;
1: import org.apache.carbondata.core.datastore.filesystem.AlluxioCarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.CarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.HDFSCarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.LocalCarbonFile;
1: import org.apache.carbondata.core.datastore.filesystem.ViewFSCarbonFile;
0:   public FileReader getFileHolder(FileFactory.FileType fileType) {
1:         return new FileReaderImpl();
0:         return new DFSFileReaderImpl();
1:         return new FileReaderImpl();
author:Manohar
-------------------------------------------------------------------------------
commit:33de599
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.impl;
1: 
0: import org.apache.carbondata.core.datastore.FileHolder;
0: import org.apache.carbondata.core.datastore.filesystem.*;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: 
0: public class DefaultFileTypeProvider implements FileTypeInerface {
1: 
0:   public FileHolder getFileHolder(FileFactory.FileType fileType) {
1:     switch (fileType) {
1:       case LOCAL:
0:         return new FileHolderImpl();
1:       case HDFS:
1:       case ALLUXIO:
1:       case VIEWFS:
1:       case S3:
0:         return new DFSFileHolderImpl();
1:       default:
0:         return new FileHolderImpl();
1:     }
1:   }
1: 
1:   public CarbonFile getCarbonFile(String path, FileFactory.FileType fileType) {
1:     switch (fileType) {
1:       case LOCAL:
1:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:       case HDFS:
1:       case S3:
1:         return new HDFSCarbonFile(path);
1:       case ALLUXIO:
1:         return new AlluxioCarbonFile(path);
1:       case VIEWFS:
1:         return new ViewFSCarbonFile(path);
1:       default:
1:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:     }
1:   }
1: 
1:   public CarbonFile getCarbonFile(String path, FileFactory.FileType fileType, Configuration conf) {
1:     switch (fileType) {
1:       case LOCAL:
1:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:       case HDFS:
1:       case S3:
1:         return new HDFSCarbonFile(path, conf);
1:       case ALLUXIO:
1:         return new AlluxioCarbonFile(path);
1:       case VIEWFS:
1:         return new ViewFSCarbonFile(path);
1:       default:
1:         return new LocalCarbonFile(FileFactory.getUpdatedFilePath(path, fileType));
1:     }
1:   }
1: }
============================================================================