1:70256e7: /*
1:70256e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:70256e7:  * contributor license agreements.  See the NOTICE file distributed with
1:70256e7:  * this work for additional information regarding copyright ownership.
1:70256e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:70256e7:  * (the "License"); you may not use this file except in compliance with
1:70256e7:  * the License.  You may obtain a copy of the License at
1:70256e7:  *
1:70256e7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:70256e7:  *
1:70256e7:  * Unless required by applicable law or agreed to in writing, software
1:70256e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:70256e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:70256e7:  * See the License for the specific language governing permissions and
1:70256e7:  * limitations under the License.
1:70256e7:  */
1:70256e7: 
1:70256e7: package org.apache.carbondata.core.scan.executor.infos;
1:70256e7: 
1:5da6433: import org.apache.carbondata.core.metadata.datatype.DataType;
1:5da6433: 
1:70256e7: /**
1:70256e7:  * This method will information about the query dimensions whether they exist in particular block
1:70256e7:  * and their default value
1:70256e7:  */
1:70256e7: public class DimensionInfo {
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * flag to check whether a given dimension exists in a given block
1:70256e7:    */
1:70256e7:   private boolean[] dimensionExists;
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * maintains default value for each dimension
1:70256e7:    */
1:70256e7:   private Object[] defaultValues;
1:70256e7: 
1:70256e7:   /**
1:6b3b16c:    * flag to check whether there exist a dictionary column in the query which
1:6b3b16c:    * does not exist in the current block
1:6b3b16c:    */
1:6b3b16c:   private boolean isDictionaryColumnAdded;
1:6b3b16c: 
1:6b3b16c:   /**
1:6b3b16c:    * flag to check whether there exist a no dictionary column in the query which
1:6b3b16c:    * does not exist in the current block
1:6b3b16c:    */
1:6b3b16c:   private boolean isNoDictionaryColumnAdded;
1:6b3b16c: 
1:6b3b16c:   /**
1:6b3b16c:    * count of dictionary column not existing in the current block
1:6b3b16c:    */
1:6b3b16c:   private int newDictionaryColumnCount;
1:6b3b16c: 
1:6b3b16c:   /**
1:6b3b16c:    * count of no dictionary columns not existing in the current block
1:6b3b16c:    */
1:6b3b16c:   private int newNoDictionaryColumnCount;
1:5da6433:   /**
1:5da6433:   * maintains the block datatype
1:5da6433:   */
1:5da6433:   public DataType[] dataType;
1:6b3b16c: 
1:6b3b16c:   /**
1:70256e7:    * @param dimensionExists
1:70256e7:    * @param defaultValues
1:70256e7:    */
1:70256e7:   public DimensionInfo(boolean[] dimensionExists, Object[] defaultValues) {
1:70256e7:     this.dimensionExists = dimensionExists;
1:70256e7:     this.defaultValues = defaultValues;
1:70256e7:   }
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * @return
1:70256e7:    */
1:70256e7:   public boolean[] getDimensionExists() {
1:70256e7:     return dimensionExists;
1:70256e7:   }
1:70256e7: 
1:70256e7:   /**
1:70256e7:    * @return
1:70256e7:    */
1:70256e7:   public Object[] getDefaultValues() {
1:70256e7:     return defaultValues;
1:70256e7:   }
1:6b3b16c: 
1:6b3b16c:   public boolean isDictionaryColumnAdded() {
1:6b3b16c:     return isDictionaryColumnAdded;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public void setDictionaryColumnAdded(boolean dictionaryColumnAdded) {
1:6b3b16c:     isDictionaryColumnAdded = dictionaryColumnAdded;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public boolean isNoDictionaryColumnAdded() {
1:6b3b16c:     return isNoDictionaryColumnAdded;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public void setNoDictionaryColumnAdded(boolean noDictionaryColumnAdded) {
1:6b3b16c:     isNoDictionaryColumnAdded = noDictionaryColumnAdded;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public int getNewDictionaryColumnCount() {
1:6b3b16c:     return newDictionaryColumnCount;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public void setNewDictionaryColumnCount(int newDictionaryColumnCount) {
1:6b3b16c:     this.newDictionaryColumnCount = newDictionaryColumnCount;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public int getNewNoDictionaryColumnCount() {
1:6b3b16c:     return newNoDictionaryColumnCount;
1:6b3b16c:   }
1:6b3b16c: 
1:6b3b16c:   public void setNewNoDictionaryColumnCount(int newNoDictionaryColumnCount) {
1:6b3b16c:     this.newNoDictionaryColumnCount = newNoDictionaryColumnCount;
1:6b3b16c:   }
1:70256e7: }
============================================================================
author:Jatin
-------------------------------------------------------------------------------
commit:5da6433
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:   * maintains the block datatype
1:   */
1:   public DataType[] dataType;
author:manishgupta88
-------------------------------------------------------------------------------
commit:6b3b16c
/////////////////////////////////////////////////////////////////////////
1:    * flag to check whether there exist a dictionary column in the query which
1:    * does not exist in the current block
1:    */
1:   private boolean isDictionaryColumnAdded;
1: 
1:   /**
1:    * flag to check whether there exist a no dictionary column in the query which
1:    * does not exist in the current block
1:    */
1:   private boolean isNoDictionaryColumnAdded;
1: 
1:   /**
1:    * count of dictionary column not existing in the current block
1:    */
1:   private int newDictionaryColumnCount;
1: 
1:   /**
1:    * count of no dictionary columns not existing in the current block
1:    */
1:   private int newNoDictionaryColumnCount;
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isDictionaryColumnAdded() {
1:     return isDictionaryColumnAdded;
1:   }
1: 
1:   public void setDictionaryColumnAdded(boolean dictionaryColumnAdded) {
1:     isDictionaryColumnAdded = dictionaryColumnAdded;
1:   }
1: 
1:   public boolean isNoDictionaryColumnAdded() {
1:     return isNoDictionaryColumnAdded;
1:   }
1: 
1:   public void setNoDictionaryColumnAdded(boolean noDictionaryColumnAdded) {
1:     isNoDictionaryColumnAdded = noDictionaryColumnAdded;
1:   }
1: 
1:   public int getNewDictionaryColumnCount() {
1:     return newDictionaryColumnCount;
1:   }
1: 
1:   public void setNewDictionaryColumnCount(int newDictionaryColumnCount) {
1:     this.newDictionaryColumnCount = newDictionaryColumnCount;
1:   }
1: 
1:   public int getNewNoDictionaryColumnCount() {
1:     return newNoDictionaryColumnCount;
1:   }
1: 
1:   public void setNewNoDictionaryColumnCount(int newNoDictionaryColumnCount) {
1:     this.newNoDictionaryColumnCount = newNoDictionaryColumnCount;
1:   }
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.executor.infos;
1: 
1: /**
1:  * This method will information about the query dimensions whether they exist in particular block
1:  * and their default value
1:  */
1: public class DimensionInfo {
1: 
1:   /**
1:    * flag to check whether a given dimension exists in a given block
1:    */
1:   private boolean[] dimensionExists;
1: 
1:   /**
1:    * maintains default value for each dimension
1:    */
1:   private Object[] defaultValues;
1: 
1:   /**
1:    * @param dimensionExists
1:    * @param defaultValues
1:    */
1:   public DimensionInfo(boolean[] dimensionExists, Object[] defaultValues) {
1:     this.dimensionExists = dimensionExists;
1:     this.defaultValues = defaultValues;
1:   }
1: 
1:   /**
1:    * @return
1:    */
1:   public boolean[] getDimensionExists() {
1:     return dimensionExists;
1:   }
1: 
1:   /**
1:    * @return
1:    */
1:   public Object[] getDefaultValues() {
1:     return defaultValues;
1:   }
1: }
============================================================================