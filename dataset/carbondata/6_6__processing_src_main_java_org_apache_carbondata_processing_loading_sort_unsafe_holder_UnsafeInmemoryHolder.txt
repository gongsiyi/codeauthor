1:f1f9348: /*
1:f1f9348:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f9348:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f9348:  * this work for additional information regarding copyright ownership.
1:f1f9348:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f9348:  * (the "License"); you may not use this file except in compliance with
1:f1f9348:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:f1f9348:  * Unless required by applicable law or agreed to in writing, software
1:f1f9348:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f9348:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f9348:  * See the License for the specific language governing permissions and
1:f1f9348:  * limitations under the License.
1:f1f9348:  */
1:41347d8: 
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.holder;
3:f1f9348: 
1:f1f9348: import org.apache.carbondata.common.logging.LogService;
1:f1f9348: import org.apache.carbondata.common.logging.LogServiceFactory;
1:2b41f14: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:2b41f14: import org.apache.carbondata.processing.sort.sortdata.IntermediateSortTempRowComparator;
1:f1f9348: 
1:f1f9348: public class UnsafeInmemoryHolder implements SortTempChunkHolder {
1:f1f9348: 
1:f1f9348:   private static final LogService LOGGER =
1:f1f9348:       LogServiceFactory.getLogService(UnsafeInmemoryHolder.class.getName());
1:f1f9348: 
1:f1f9348:   private int counter;
1:f1f9348: 
1:f1f9348:   private int actualSize;
1:f1f9348: 
1:f1f9348:   private UnsafeCarbonRowPage rowPage;
1:f1f9348: 
1:2b41f14:   private IntermediateSortTempRow currentRow;
1:f1f9348: 
1:f1f9348:   private long address;
1:8d8b589: 
1:2b41f14:   private IntermediateSortTempRowComparator comparator;
1:f1f9348: 
1:2b41f14:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage) {
1:f1f9348:     this.actualSize = rowPage.getBuffer().getActualSize();
1:f1f9348:     this.rowPage = rowPage;
1:873c3de:     LOGGER.info("Processing unsafe inmemory rows page with size : " + actualSize);
1:2b41f14:     this.comparator = new IntermediateSortTempRowComparator(
1:2b41f14:         rowPage.getTableFieldStat().getIsSortColNoDictFlags());
1:f27efb3:     this.rowPage.setReadConvertedNoSortField();
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public boolean hasNext() {
1:f1f9348:     if (counter < actualSize) {
1:f1f9348:       return true;
1:f1f9348:     }
1:f1f9348:     return false;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void readRow() {
1:f1f9348:     address = rowPage.getBuffer().get(counter);
1:2b41f14:     currentRow = rowPage.getRow(address + rowPage.getDataBlock().getBaseOffset());
1:f1f9348:     counter++;
1:f1f9348:   }
1:f1f9348: 
1:2b41f14:   public IntermediateSortTempRow getRow() {
1:f1f9348:     return currentRow;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   @Override public int compareTo(SortTempChunkHolder o) {
1:f1f9348:     return comparator.compare(currentRow, o.getRow());
1:f1f9348:   }
1:f1f9348: 
1:06b0d08:   @Override public boolean equals(Object obj) {
1:06b0d08:     if (this == obj) {
1:06b0d08:       return true;
1:06b0d08:     }
1:06b0d08: 
1:06b0d08:     if (!(obj instanceof UnsafeInmemoryHolder)) {
1:06b0d08:       return false;
1:06b0d08:     }
1:06b0d08: 
1:06b0d08:     UnsafeInmemoryHolder o = (UnsafeInmemoryHolder)obj;
1:06b0d08: 
1:06b0d08:     return this == o;
1:06b0d08:   }
1:06b0d08: 
1:06b0d08:   @Override public int hashCode() {
1:06b0d08:     return super.hashCode();
1:06b0d08:   }
1:06b0d08: 
1:f1f9348:   public int numberOfRows() {
1:f1f9348:     return actualSize;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void close() {
1:f1f9348:     rowPage.freeMemory();
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:f27efb3
/////////////////////////////////////////////////////////////////////////
1:     this.rowPage.setReadConvertedNoSortField();
author:Jacky Li
-------------------------------------------------------------------------------
commit:873c3de
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.info("Processing unsafe inmemory rows page with size : " + actualSize);
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.holder;
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.sort.sortdata.NewRowComparator;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1: import org.apache.carbondata.processing.sort.sortdata.IntermediateSortTempRowComparator;
/////////////////////////////////////////////////////////////////////////
1:   private IntermediateSortTempRow currentRow;
1:   private IntermediateSortTempRowComparator comparator;
1:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage) {
1:     this.comparator = new IntermediateSortTempRowComparator(
1:         rowPage.getTableFieldStat().getIsSortColNoDictFlags());
/////////////////////////////////////////////////////////////////////////
1:     currentRow = rowPage.getRow(address + rowPage.getDataBlock().getBaseOffset());
1:   public IntermediateSortTempRow getRow() {
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.sort.sortdata.NewRowComparator;
/////////////////////////////////////////////////////////////////////////
0:   private Object[] currentRow;
0:   private NewRowComparator comparator;
0:   private int columnSize;
1: 
0:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage, int columnSize,
0:       int numberOfSortColumns) {
0:     this.comparator = new NewRowComparator(rowPage.getNoDictionarySortColumnMapping());
0:     this.columnSize = columnSize;
/////////////////////////////////////////////////////////////////////////
0:     currentRow = new Object[columnSize];
0:     rowPage.getRow(address + rowPage.getDataBlock().getBaseOffset(), currentRow);
0:   public Object[] getRow() {
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
0: import org.apache.carbondata.processing.sort.sortdata.IntermediateSortTempRowComparator;
/////////////////////////////////////////////////////////////////////////
0:   private IntermediateSortTempRow currentRow;
0:   private IntermediateSortTempRowComparator comparator;
0:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage) {
0:     this.comparator = new IntermediateSortTempRowComparator(
0:         rowPage.getTableFieldStat().getIsSortColNoDictFlags());
/////////////////////////////////////////////////////////////////////////
0:     currentRow = rowPage.getRow(address + rowPage.getDataBlock().getBaseOffset());
0:   public IntermediateSortTempRow getRow() {
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
1:   @Override public boolean equals(Object obj) {
1:     if (this == obj) {
1:       return true;
1:     }
1: 
1:     if (!(obj instanceof UnsafeInmemoryHolder)) {
1:       return false;
1:     }
1: 
1:     UnsafeInmemoryHolder o = (UnsafeInmemoryHolder)obj;
1: 
1:     return this == o;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return super.hashCode();
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
0:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage, int columnSize,
0:       int numberOfSortColumns) {
0:     this.comparator = new NewRowComparator(rowPage.getNoDictionarySortColumnMapping());
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1: 
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.sort.unsafe.holder;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.sortandgroupby.sortdata.NewRowComparator;
1: 
1: public class UnsafeInmemoryHolder implements SortTempChunkHolder {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(UnsafeInmemoryHolder.class.getName());
1: 
1:   private int counter;
1: 
1:   private int actualSize;
1: 
1:   private UnsafeCarbonRowPage rowPage;
1: 
0:   private Object[] currentRow;
1: 
1:   private long address;
1: 
0:   private NewRowComparator comparator;
1: 
0:   private int columnSize;
1: 
0:   public UnsafeInmemoryHolder(UnsafeCarbonRowPage rowPage, int columnSize) {
1:     this.actualSize = rowPage.getBuffer().getActualSize();
1:     this.rowPage = rowPage;
0:     LOGGER.audit("Processing unsafe inmemory rows page with size : " + actualSize);
0:     this.comparator = new NewRowComparator(rowPage.getNoDictionaryDimensionMapping());
0:     this.columnSize = columnSize;
1:   }
1: 
1:   public boolean hasNext() {
1:     if (counter < actualSize) {
1:       return true;
1:     }
1:     return false;
1:   }
1: 
1:   public void readRow() {
0:     currentRow = new Object[columnSize];
1:     address = rowPage.getBuffer().get(counter);
0:     rowPage.getRow(address + rowPage.getDataBlock().getBaseOffset(), currentRow);
1:     counter++;
1:   }
1: 
0:   public Object[] getRow() {
1:     return currentRow;
1:   }
1: 
1:   @Override public int compareTo(SortTempChunkHolder o) {
1:     return comparator.compare(currentRow, o.getRow());
1:   }
1: 
1:   public int numberOfRows() {
1:     return actualSize;
1:   }
1: 
1:   public void close() {
1:     rowPage.freeMemory();
1:   }
1: }
============================================================================