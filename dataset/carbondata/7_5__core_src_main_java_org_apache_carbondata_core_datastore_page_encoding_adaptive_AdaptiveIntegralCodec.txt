1:edda248: /*
1:edda248:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:edda248:  * contributor license agreements.  See the NOTICE file distributed with
1:edda248:  * this work for additional information regarding copyright ownership.
1:edda248:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:edda248:  * (the "License"); you may not use this file except in compliance with
1:edda248:  * the License.  You may obtain a copy of the License at
1:edda248:  *
1:edda248:  *    http://www.apache.org/licenses/LICENSE-2.0
1:edda248:  *
1:edda248:  * Unless required by applicable law or agreed to in writing, software
1:edda248:  * distributed under the License is distributed on an "AS IS" BASIS,
1:edda248:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:edda248:  * See the License for the specific language governing permissions and
1:edda248:  * limitations under the License.
1:edda248:  */
2:edda248: 
1:e6a4f64: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1:edda248: 
1:eadfea7: import java.io.IOException;
1:e6a4f64: import java.util.ArrayList;
1:e6a4f64: import java.util.List;
1:e6a4f64: import java.util.Map;
1:eadfea7: 
1:edda248: import org.apache.carbondata.core.datastore.compression.Compressor;
1:e6a4f64: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:edda248: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1:edda248: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1:e6a4f64: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:bc3e684: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
1:7359601: import org.apache.carbondata.core.memory.MemoryException;
1:edda248: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:e6a4f64: import org.apache.carbondata.format.Encoding;
1:edda248: 
1:edda248: /**
1:edda248:  * Codec for integer (byte, short, int, long) data type page.
1:e6a4f64:  * This converter will do type casting on page data to make storage minimum.
1:edda248:  */
1:e6a4f64: public class AdaptiveIntegralCodec extends AdaptiveCodec {
1:edda248: 
1:edda248:   private ColumnPage encodedPage;
1:edda248: 
1:e6a4f64:   public AdaptiveIntegralCodec(DataType srcDataType, DataType targetDataType,
1:e6a4f64:       SimpleStatsResult stats) {
1:e6a4f64:     super(srcDataType, targetDataType, stats);
4:edda248:   }
1:edda248: 
1:edda248:   @Override
1:edda248:   public String getName() {
1:bc3e684:     return "AdaptiveIntegralCodec";
1:edda248:   }
1:edda248: 
1:edda248:   @Override
1:e6a4f64:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
1:e6a4f64:     return new ColumnPageEncoder() {
1:e6a4f64:       @Override
1:e6a4f64:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:e6a4f64:         if (encodedPage != null) {
1:e6a4f64:           throw new IllegalStateException("already encoded");
1:e6a4f64:         }
1:8f08c4a:         encodedPage = ColumnPage.newPage(
1:8f08c4a:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:8f08c4a:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:8c1ddbf:             input.getPageSize());
1:8f08c4a:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:             input.getColumnCompressorName());
1:e6a4f64:         input.convertValue(converter);
1:e6a4f64:         byte[] result = encodedPage.compress(compressor);
1:e6a4f64:         encodedPage.freeMemory();
1:e6a4f64:         return result;
1:e6a4f64:       }
1:e6a4f64: 
1:e6a4f64:       @Override
1:e6a4f64:       protected List<Encoding> getEncodingList() {
1:e6a4f64:         List<Encoding> encodings = new ArrayList<Encoding>();
1:e6a4f64:         encodings.add(Encoding.ADAPTIVE_INTEGRAL);
1:e6a4f64:         return encodings;
1:e6a4f64:       }
1:e6a4f64: 
1:e6a4f64:       @Override
1:e6a4f64:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
1:8c1ddbf:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
1:8f08c4a:             inputPage.getColumnCompressorName());
1:e6a4f64:       }
1:e6a4f64: 
1:e6a4f64:     };
1:edda248:   }
1:edda248: 
1:edda248:   @Override
1:8c1ddbf:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
1:e6a4f64:     return new ColumnPageDecoder() {
1:e6a4f64:       @Override
1:e6a4f64:       public ColumnPage decode(byte[] input, int offset, int length)
1:e6a4f64:           throws MemoryException, IOException {
1:6f20437:         ColumnPage page = null;
1:f209e8e:         if (DataTypes.isDecimal(meta.getSchemaDataType())) {
1:956833e:           page = ColumnPage.decompressDecimalPage(meta, input, offset, length);
1:956833e:         } else {
1:43285bb:           page = ColumnPage.decompress(meta, input, offset, length, false);
1:6f20437:         }
1:e6a4f64:         return LazyColumnPage.newPage(page, converter);
1:e6a4f64:       }
1:43285bb: 
1:43285bb:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:43285bb:           throws MemoryException, IOException {
1:43285bb:         return decode(input, offset, length);
1:43285bb:       }
1:e6a4f64:     };
1:edda248:   }
1:edda248: 
1:edda248:   // encoded value = (type cast page value to target data type)
1:e6a4f64:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
1:edda248:     @Override
1:edda248:     public void encode(int rowId, byte value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public void encode(int rowId, short value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, (byte) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:956833e:         encodedPage.putShort(rowId, value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public void encode(int rowId, int value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, (byte) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:956833e:         encodedPage.putShort(rowId, (short) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:956833e:         encodedPage.putShortInt(rowId, value);
1:956833e:       } else if (targetDataType == DataTypes.INT) {
1:956833e:         encodedPage.putInt(rowId, value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public void encode(int rowId, long value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, (byte) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:956833e:         encodedPage.putShort(rowId, (short) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:956833e:         encodedPage.putShortInt(rowId, (int) value);
1:956833e:       } else if (targetDataType == DataTypes.INT) {
1:956833e:         encodedPage.putInt(rowId, (int) value);
1:956833e:       } else if (targetDataType == DataTypes.LONG) {
1:956833e:         encodedPage.putLong(rowId, (long) value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public void encode(int rowId, float value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, (byte) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:956833e:         encodedPage.putShort(rowId, (short) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:956833e:         encodedPage.putShortInt(rowId, (int) value);
1:956833e:       } else if (targetDataType == DataTypes.INT) {
1:956833e:         encodedPage.putInt(rowId, (int) value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public void encode(int rowId, double value) {
1:956833e:       if (targetDataType == DataTypes.BYTE) {
1:956833e:         encodedPage.putByte(rowId, (byte) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT) {
1:956833e:         encodedPage.putShort(rowId, (short) value);
1:956833e:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:956833e:         encodedPage.putShortInt(rowId, (int) value);
1:956833e:       } else if (targetDataType == DataTypes.INT) {
1:956833e:         encodedPage.putInt(rowId, (int) value);
1:956833e:       } else if (targetDataType == DataTypes.LONG) {
1:956833e:         encodedPage.putLong(rowId, (long) value);
1:956833e:       } else {
1:956833e:         throw new RuntimeException("internal error: " + debugInfo());
1:edda248:       }
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public long decodeLong(byte value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public long decodeLong(short value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public long decodeLong(int value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(byte value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(short value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(int value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(long value) {
1:edda248:       return value;
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(float value) {
7:edda248:       throw new RuntimeException("internal error: " + debugInfo());
1:edda248:     }
1:edda248: 
1:edda248:     @Override
1:edda248:     public double decodeDouble(double value) {
1:edda248:       throw new RuntimeException("internal error: " + debugInfo());
1:edda248:     }
1:edda248:   };
1:edda248: 
1:edda248: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:         encodedPage = ColumnPage.newPage(
1:             new ColumnPageEncoderMeta(input.getColumnPageEncoderMeta().getColumnSpec(),
1:                 targetDataType, input.getColumnPageEncoderMeta().getCompressorName()),
1:         Compressor compressor = CompressorFactory.getInstance().getCompressor(
1:             input.getColumnCompressorName());
/////////////////////////////////////////////////////////////////////////
1:             inputPage.getColumnCompressorName());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:43285bb
/////////////////////////////////////////////////////////////////////////
1:           page = ColumnPage.decompress(meta, input, offset, length, false);
1: 
1:       @Override public ColumnPage decode(byte[] input, int offset, int length, boolean isLVEncoded)
1:           throws MemoryException, IOException {
1:         return decode(input, offset, length);
1:       }
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
1:         if (DataTypes.isDecimal(meta.getSchemaDataType())) {
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:         if (meta.getSchemaDataType() == DataTypes.DECIMAL) {
1:           page = ColumnPage.decompressDecimalPage(meta, input, offset, length);
1:         } else {
0:           page = ColumnPage.decompress(meta, input, offset, length);
/////////////////////////////////////////////////////////////////////////
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) value);
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) value);
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) value);
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, value);
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) value);
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) value);
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, (int) value);
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, (int) value);
1:       } else if (targetDataType == DataTypes.LONG) {
1:         encodedPage.putLong(rowId, (long) value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) value);
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) value);
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, (int) value);
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, (int) value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
1:       if (targetDataType == DataTypes.BYTE) {
1:         encodedPage.putByte(rowId, (byte) value);
1:       } else if (targetDataType == DataTypes.SHORT) {
1:         encodedPage.putShort(rowId, (short) value);
1:       } else if (targetDataType == DataTypes.SHORT_INT) {
1:         encodedPage.putShortInt(rowId, (int) value);
1:       } else if (targetDataType == DataTypes.INT) {
1:         encodedPage.putInt(rowId, (int) value);
1:       } else if (targetDataType == DataTypes.LONG) {
1:         encodedPage.putLong(rowId, (long) value);
1:       } else {
1:         throw new RuntimeException("internal error: " + debugInfo());
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
0:         encodedPage = ColumnPage.newPage(input.getColumnSpec(), targetDataType,
1:             input.getPageSize());
/////////////////////////////////////////////////////////////////////////
1:         return new ColumnPageEncoderMeta(inputPage.getColumnSpec(), targetDataType, stats,
0:             compressor.getName());
1:   public ColumnPageDecoder createDecoder(final ColumnPageEncoderMeta meta) {
0:         ColumnPage page = ColumnPage.decompress(meta, input, offset, length);
commit:892f120
/////////////////////////////////////////////////////////////////////////
0:         return new AdaptiveIntegralEncoderMeta(compressor.getName(), targetDataType, stats);
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.datastore.page.encoding.adaptive;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPageValueConverter;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoder;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1: import org.apache.carbondata.format.Encoding;
1:  * This converter will do type casting on page data to make storage minimum.
1: public class AdaptiveIntegralCodec extends AdaptiveCodec {
1:   public AdaptiveIntegralCodec(DataType srcDataType, DataType targetDataType,
1:       SimpleStatsResult stats) {
1:     super(srcDataType, targetDataType, stats);
/////////////////////////////////////////////////////////////////////////
1:   public ColumnPageEncoder createEncoder(Map<String, String> parameter) {
0:     final Compressor compressor = CompressorFactory.getInstance().getCompressor();
1:     return new ColumnPageEncoder() {
1:       @Override
1:       protected byte[] encodeData(ColumnPage input) throws MemoryException, IOException {
1:         if (encodedPage != null) {
1:           throw new IllegalStateException("already encoded");
1:         }
0:         encodedPage = ColumnPage.newPage(targetDataType, input.getPageSize());
1:         input.convertValue(converter);
1:         byte[] result = encodedPage.compress(compressor);
1:         encodedPage.freeMemory();
1:         return result;
1:       }
1: 
1:       @Override
1:       protected List<Encoding> getEncodingList() {
1:         List<Encoding> encodings = new ArrayList<Encoding>();
1:         encodings.add(Encoding.ADAPTIVE_INTEGRAL);
1:         return encodings;
1:       }
1: 
1:       @Override
1:       protected ColumnPageEncoderMeta getEncoderMeta(ColumnPage inputPage) {
0:         return new AdaptiveIntegralEncoderMeta(targetDataType, stats, compressor.getName());
1:       }
1: 
1:     };
0:   public ColumnPageDecoder createDecoder(ColumnPageEncoderMeta meta) {
0:     AdaptiveIntegralEncoderMeta codecMeta = (AdaptiveIntegralEncoderMeta) meta;
0:     final Compressor compressor = CompressorFactory.getInstance().getCompressor(
0:         codecMeta.getCompressorName());
0:     final DataType targetDataType = codecMeta.getTargetDataType();
1:     return new ColumnPageDecoder() {
1:       @Override
1:       public ColumnPage decode(byte[] input, int offset, int length)
1:           throws MemoryException, IOException {
0:         ColumnPage page = ColumnPage.decompress(compressor, targetDataType, input, offset, length);
1:         return LazyColumnPage.newPage(page, converter);
1:       }
1:     };
1:   private ColumnPageValueConverter converter = new ColumnPageValueConverter() {
author:manishgupta88
-------------------------------------------------------------------------------
commit:ad25ffc
/////////////////////////////////////////////////////////////////////////
0:         case INT:
0:           encodedPage.putInt(rowId, value);
0:           break;
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1:         ColumnPage page = null;
0:         switch (meta.getSchemaDataType()) {
0:           case DECIMAL:
0:             page = ColumnPage.decompressDecimalPage(meta, input, offset, length);
0:             break;
0:           default:
0:             page = ColumnPage.decompress(meta, input, offset, length);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         case LONG:
0:           encodedPage.putLong(rowId, (long) value);
0:           break;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
0:     assert meta instanceof AdaptiveIntegralEncoderMeta;
commit:7422690
/////////////////////////////////////////////////////////////////////////
0:     ColumnPage page = ColumnPage.decompress(compressor, targetDataType, input, offset, length,
0:         stats.getScale(), stats.getPrecision());
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.statistics.SimpleStatsResult;
0: import org.apache.carbondata.core.metadata.CodecMetaFactory;
0: class AdaptiveIntegralCodec extends AdaptiveCompressionCodec {
0:       SimpleStatsResult stats, Compressor compressor) {
0:     return new AdaptiveIntegralCodec(srcDataType, targetDataType, stats, compressor);
0:   private AdaptiveIntegralCodec(DataType srcDataType, DataType targetDataType,
0:       SimpleStatsResult stats, Compressor compressor) {
1:     return "AdaptiveIntegralCodec";
0:   public EncodedColumnPage encode(ColumnPage input) throws MemoryException, IOException {
0:     return new EncodedMeasurePage(input.getPageSize(), result,
0:         CodecMetaFactory.createMeta(stats, targetDataType),
0:         ((SimpleStatsResult)input.getStatistics()).getNullBits());
0:     ColumnPage page = ColumnPage.decompress(compressor, targetDataType, input, offset, length);
0:     return LazyColumnPage.newPage(page, codec);
commit:eadfea7
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public byte[] encode(ColumnPage input) throws MemoryException, IOException {
0:     encodedPage = ColumnPage.newPage(targetDataType, input.getPageSize());
0:     input.encode(codec);
0:     byte[] result = encodedPage.compress(compressor);
0:     encodedPage.freeMemory();
0:     return result;
commit:7d386a4
/////////////////////////////////////////////////////////////////////////
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId, value);
0:           break;
/////////////////////////////////////////////////////////////////////////
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId, (int) value);
0:           break;
/////////////////////////////////////////////////////////////////////////
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId, (int) value);
0:           break;
/////////////////////////////////////////////////////////////////////////
0:         case SHORT_INT:
0:           encodedPage.putShortInt(rowId, (int) value);
0:           break;
commit:7359601
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.memory.MemoryException;
/////////////////////////////////////////////////////////////////////////
0:   public byte[] encode(ColumnPage input) throws MemoryException {
0:       byte[] result = encodedPage.compress(compressor);
0:       encodedPage.freeMemory();
0:       return result;
0:   public ColumnPage decode(byte[] input, int offset, int length) throws MemoryException {
commit:edda248
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.core.datastore.page.encoding;
1: 
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.LazyColumnPage;
0: import org.apache.carbondata.core.datastore.page.PrimitiveCodec;
0: import org.apache.carbondata.core.datastore.page.statistics.ColumnPageStatsVO;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: 
1: /**
1:  * Codec for integer (byte, short, int, long) data type page.
0:  * This codec will do type casting on page data to make storage minimum.
1:  */
0: class AdaptiveIntegerCodec extends AdaptiveCompressionCodec {
1: 
1:   private ColumnPage encodedPage;
1: 
0:   public static ColumnPageCodec newInstance(DataType srcDataType, DataType targetDataType,
0:       ColumnPageStatsVO stats, Compressor compressor) {
0:     return new AdaptiveIntegerCodec(srcDataType, targetDataType, stats, compressor);
1:   }
1: 
0:   private AdaptiveIntegerCodec(DataType srcDataType, DataType targetDataType,
0:       ColumnPageStatsVO stats, Compressor compressor) {
0:     super(srcDataType, targetDataType, stats, compressor);
1:   }
1: 
1:   @Override
1:   public String getName() {
0:     return "AdaptiveIntegerCodec";
1:   }
1: 
1:   @Override
0:   public byte[] encode(ColumnPage input) {
0:     if (srcDataType.equals(targetDataType)) {
0:       return input.compress(compressor);
0:     } else {
0:       encodedPage = ColumnPage.newPage(targetDataType, input.getPageSize());
0:       input.encode(codec);
0:       return encodedPage.compress(compressor);
1:     }
1:   }
1: 
1:   @Override
0:   public ColumnPage decode(byte[] input, int offset, int length) {
0:     if (srcDataType.equals(targetDataType)) {
0:       return ColumnPage.decompress(compressor, targetDataType, input, offset, length);
0:     } else {
0:       ColumnPage page = ColumnPage.decompress(compressor, targetDataType, input, offset, length);
0:       return LazyColumnPage.newPage(page, codec);
1:     }
1:   }
1: 
1:   // encoded value = (type cast page value to target data type)
0:   private PrimitiveCodec codec = new PrimitiveCodec() {
1:     @Override
1:     public void encode(int rowId, byte value) {
0:       switch (targetDataType) {
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, short value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId, (byte) value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, int value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId, (byte) value);
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId, (short) value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, long value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId, (byte) value);
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId, (short) value);
0:           break;
0:         case INT:
0:           encodedPage.putInt(rowId, (int) value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, float value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId, (byte) value);
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId, (short) value);
0:           break;
0:         case INT:
0:           encodedPage.putInt(rowId, (int) value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public void encode(int rowId, double value) {
0:       switch (targetDataType) {
0:         case BYTE:
0:           encodedPage.putByte(rowId, (byte) value);
0:           break;
0:         case SHORT:
0:           encodedPage.putShort(rowId, (short) value);
0:           break;
0:         case INT:
0:           encodedPage.putInt(rowId, (int) value);
0:           break;
0:         case LONG:
0:           encodedPage.putLong(rowId, (long) value);
0:           break;
0:         default:
1:           throw new RuntimeException("internal error: " + debugInfo());
1:       }
1:     }
1: 
1:     @Override
1:     public long decodeLong(byte value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public long decodeLong(short value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public long decodeLong(int value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(byte value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(short value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(int value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(long value) {
1:       return value;
1:     }
1: 
1:     @Override
1:     public double decodeDouble(float value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1: 
1:     @Override
1:     public double decodeDouble(double value) {
1:       throw new RuntimeException("internal error: " + debugInfo());
1:     }
1:   };
1: 
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:     encodedPage = ColumnPage
0:         .newPage(targetDataType, input.getPageSize(), stats.getScale(), stats.getPrecision());
/////////////////////////////////////////////////////////////////////////
0:       return ColumnPage
0:           .decompress(compressor, targetDataType, input, offset, length, stats.getScale(),
0:               stats.getPrecision());
0:       ColumnPage page = ColumnPage
0:           .decompress(compressor, targetDataType, input, offset, length, stats.getScale(),
0:               stats.getPrecision());
============================================================================