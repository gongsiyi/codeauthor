1:df5d7a9: /*
1:df5d7a9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df5d7a9:  * contributor license agreements.  See the NOTICE file distributed with
1:df5d7a9:  * this work for additional information regarding copyright ownership.
1:df5d7a9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df5d7a9:  * (the "License"); you may not use this file except in compliance with
1:df5d7a9:  * the License.  You may obtain a copy of the License at
1:df5d7a9:  *
1:df5d7a9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:df5d7a9:  *
1:df5d7a9:  * Unless required by applicable law or agreed to in writing, software
1:df5d7a9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df5d7a9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df5d7a9:  * See the License for the specific language governing permissions and
1:df5d7a9:  * limitations under the License.
1:df5d7a9:  */
3:df5d7a9: 
1:df5d7a9: package org.apache.carbondata.core.scan.model;
1:df5d7a9: 
1:afcaecf: import java.util.ArrayList;
1:afcaecf: import java.util.Collections;
1:afcaecf: import java.util.HashMap;
1:df5d7a9: import java.util.List;
1:afcaecf: import java.util.Map;
1:3ff574d: import java.util.Objects;
1:df5d7a9: 
1:afcaecf: import org.apache.carbondata.common.logging.LogService;
1:afcaecf: import org.apache.carbondata.common.logging.LogServiceFactory;
1:afcaecf: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:df5d7a9: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:df5d7a9: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:df5d7a9: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1:df5d7a9: import org.apache.carbondata.core.scan.expression.Expression;
1:df5d7a9: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1:3ff574d: import org.apache.carbondata.core.util.DataTypeConverter;
1:df5d7a9: 
1:df5d7a9: public class QueryModelBuilder {
1:df5d7a9: 
1:3ff574d:   private CarbonTable table;
1:3ff574d:   private QueryProjection projection;
1:3ff574d:   private Expression filterExpression;
1:3ff574d:   private DataTypeConverter dataTypeConverter;
1:3ff574d:   private boolean forcedDetailRawQuery;
1:3ff574d:   private boolean readPageByPage;
1:afcaecf:   /**
1:afcaecf:    * log information
1:afcaecf:    */
1:afcaecf:   private static final LogService LOGGER =
1:afcaecf:       LogServiceFactory.getLogService(QueryModelBuilder.class.getName());
1:df5d7a9: 
1:3ff574d:   public QueryModelBuilder(CarbonTable table) {
1:3ff574d:     this.table = table;
2:df5d7a9:   }
1:df5d7a9: 
1:3ff574d:   public QueryModelBuilder projectColumns(String[] projectionColumns) {
1:3ff574d:     Objects.requireNonNull(projectionColumns);
1:3ff574d:     String factTableName = table.getTableName();
1:df5d7a9:     QueryProjection projection = new QueryProjection();
1:df5d7a9: 
1:3ff574d:     int i = 0;
1:3ff574d:     for (String projectionColumnName : projectionColumns) {
1:3ff574d:       CarbonDimension dimension = table.getDimensionByName(factTableName, projectionColumnName);
1:3ff574d:       if (dimension != null) {
1:afcaecf:         CarbonDimension complexParentDimension = dimension.getComplexParentDimension();
1:afcaecf:         if (null != complexParentDimension && dimension.hasEncoding(Encoding.DICTIONARY)) {
1:afcaecf:           if (!isAlreadyExists(complexParentDimension, projection.getDimensions())) {
1:afcaecf:             projection.addDimension(complexParentDimension, i);
1:afcaecf:             i++;
1:afcaecf:           }
1:afcaecf:         } else {
1:afcaecf:           projection.addDimension(dimension, i);
1:afcaecf:           i++;
1:afcaecf:         }
1:3ff574d:       } else {
1:3ff574d:         CarbonMeasure measure = table.getMeasureByName(factTableName, projectionColumnName);
1:3ff574d:         if (measure == null) {
1:afcaecf:           throw new RuntimeException(
1:afcaecf:               projectionColumnName + " column not found in the table " + factTableName);
1:3ff574d:         }
1:3ff574d:         projection.addMeasure(measure, i);
2:3ff574d:         i++;
1:3ff574d:       }
1:3ff574d:     }
1:afcaecf:     projection = optimizeProjectionForComplexColumns(projection, projectionColumns, factTableName);
1:133ec17:     List<String> projectionDimensionAndMeasures = new ArrayList<>();
1:3ff574d:     this.projection = projection;
1:afcaecf:     for (ProjectionDimension projectionDimension : projection.getDimensions()) {
1:133ec17:       projectionDimensionAndMeasures.add(projectionDimension.getColumnName());
1:afcaecf:     }
1:afcaecf:     for (ProjectionMeasure projectionMeasure : projection.getMeasures()) {
1:133ec17:       projectionDimensionAndMeasures.add(projectionMeasure.getColumnName());
1:afcaecf:     }
1:133ec17:     LOGGER.info("Projection Columns: " + projectionDimensionAndMeasures);
2:3ff574d:     return this;
1:3ff574d:   }
1:3ff574d: 
1:afcaecf:   /**
1:afcaecf:    * For complex dimensions, check if the dimension already exists in the projection list or not
1:afcaecf:    *
1:afcaecf:    * @param dimension
1:afcaecf:    * @param projectionDimensions
1:afcaecf:    * @return
1:afcaecf:    */
1:afcaecf:   private boolean isAlreadyExists(CarbonDimension dimension,
1:afcaecf:       List<ProjectionDimension> projectionDimensions) {
1:afcaecf:     boolean exists = false;
1:afcaecf:     for (ProjectionDimension projectionDimension : projectionDimensions) {
1:afcaecf:       if (dimension.getColName().equals(projectionDimension.getColumnName())) {
1:afcaecf:         exists = true;
1:afcaecf:         break;
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf:     return exists;
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   private QueryProjection optimizeProjectionForComplexColumns(QueryProjection projection,
1:afcaecf:       String[] projectionColumns, String factTableName) {
1:afcaecf:     // Get the List of Complex Column Projection.
1:afcaecf:     // The optimization techniques which can be applied are
1:afcaecf:     // A. Merging in Driver Side
1:afcaecf:     // B. Merging in the result Collector side.
1:afcaecf:     // Merging is driver side cases are
1:afcaecf:     // Driver merging will eliminate one of the CarbonDimension.
1:afcaecf:     // Executor merging will merge the column output in Result Collector.
1:afcaecf:     // In this routine we are going to do driver merging and leave executor merging.
1:afcaecf:     Map<Integer, List<Integer>> complexColumnMap = new HashMap<>();
1:afcaecf:     List<ProjectionDimension> carbonDimensions = projection.getDimensions();
1:afcaecf:     // Traverse and find out if the top most parent of projection column is already there
1:afcaecf:     List<CarbonDimension> projectionDimenesionToBeMerged = new ArrayList<>();
1:afcaecf:     for (ProjectionDimension projectionDimension : carbonDimensions) {
1:afcaecf:       CarbonDimension complexParentDimension =
1:afcaecf:           projectionDimension.getDimension().getComplexParentDimension();
1:afcaecf:       if (null != complexParentDimension && isAlreadyExists(complexParentDimension,
1:afcaecf:           carbonDimensions)) {
1:afcaecf:         projectionDimenesionToBeMerged.add(projectionDimension.getDimension());
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf: 
1:afcaecf:     if (projectionDimenesionToBeMerged.size() != 0) {
1:afcaecf:       projection =
1:afcaecf:           removeMergedDimensions(projectionDimenesionToBeMerged, projectionColumns, factTableName);
1:afcaecf:       carbonDimensions = projection.getDimensions();
1:afcaecf:     }
1:afcaecf: 
1:afcaecf:     for (ProjectionDimension cols : carbonDimensions) {
1:afcaecf:       // get all the Projections with Parent Ordinal Set.
1:afcaecf:       if (null != cols.getDimension().getComplexParentDimension()) {
1:afcaecf:         if (complexColumnMap.get(cols.getDimension().getComplexParentDimension().getOrdinal())
1:afcaecf:             != null) {
1:afcaecf:           List<Integer> childColumns =
1:afcaecf:               complexColumnMap.get(cols.getDimension().getComplexParentDimension().getOrdinal());
1:afcaecf:           childColumns.add(cols.getDimension().getOrdinal());
1:afcaecf:           complexColumnMap
1:afcaecf:               .put(cols.getDimension().getComplexParentDimension().getOrdinal(), childColumns);
1:afcaecf:         } else {
1:afcaecf:           List<Integer> childColumns = new ArrayList<>();
1:afcaecf:           childColumns.add(cols.getDimension().getOrdinal());
1:afcaecf:           complexColumnMap
1:afcaecf:               .put(cols.getDimension().getComplexParentDimension().getOrdinal(), childColumns);
1:afcaecf:         }
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf: 
1:afcaecf:     // Traverse the Map to Find any columns are parent.
1:afcaecf:     for (Map.Entry<Integer, List<Integer>> entry : complexColumnMap.entrySet()) {
1:afcaecf:       List<Integer> childOrdinals = entry.getValue();
1:afcaecf:       if (childOrdinals.size() > 1) {
1:afcaecf:         // In case of more that one child, have to check if the child columns are in the same path
1:afcaecf:         // and have a common parent.
1:afcaecf:         Collections.sort(childOrdinals);
1:afcaecf:         List<CarbonDimension> mergedDimensions = mergeChildColumns(childOrdinals);
1:afcaecf:         if (mergedDimensions.size() > 0) {
1:afcaecf:           projection = removeMergedDimensions(mergedDimensions, projectionColumns, factTableName);
1:afcaecf:         }
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf:     return projection;
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   /**
1:afcaecf:    * Remove the dimensions from the projection list which are merged
1:afcaecf:    *
1:afcaecf:    * @param mergedDimensions
1:afcaecf:    * @param projectionColumns
1:afcaecf:    * @param factTableName
1:afcaecf:    * @return
1:afcaecf:    */
1:afcaecf:   private QueryProjection removeMergedDimensions(List<CarbonDimension> mergedDimensions,
1:afcaecf:       String[] projectionColumns, String factTableName) {
1:afcaecf:     QueryProjection queryProjection = new QueryProjection();
1:afcaecf:     int i = 0;
1:afcaecf:     for (String projectionColumnName : projectionColumns) {
1:afcaecf:       CarbonDimension dimension = table.getDimensionByName(factTableName, projectionColumnName);
1:afcaecf:       if (dimension != null) {
1:afcaecf:         if (!mergedDimensions.contains(dimension)) {
1:afcaecf:           if (!isAlreadyExists(dimension, queryProjection.getDimensions())) {
1:afcaecf:             queryProjection.addDimension(dimension, i);
1:afcaecf:             i++;
1:afcaecf:           }
1:afcaecf:         }
1:afcaecf:       } else {
1:afcaecf:         CarbonMeasure measure = table.getMeasureByName(factTableName, projectionColumnName);
1:afcaecf:         if (measure == null) {
1:afcaecf:           throw new RuntimeException(
1:afcaecf:               projectionColumnName + " column not found in the table " + factTableName);
1:afcaecf:         }
1:afcaecf:         queryProjection.addMeasure(measure, i);
1:afcaecf:         i++;
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf:     return queryProjection;
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   private List<CarbonDimension> mergeChildColumns(List<Integer> childOrdinals) {
1:afcaecf:     // Check If children if they are in the path of not.
1:afcaecf:     List<CarbonDimension> mergedChild = new ArrayList<>();
1:afcaecf:     List<CarbonDimension> dimList = table.getDimensions();
1:afcaecf:     for (int i = 0; i < childOrdinals.size(); i++) {
1:afcaecf:       for (int j = i; j < childOrdinals.size(); j++) {
1:afcaecf:         CarbonDimension parentDimension = getDimensionBasedOnOrdinal(dimList, childOrdinals.get(i));
1:afcaecf:         CarbonDimension childDimension = getDimensionBasedOnOrdinal(dimList, childOrdinals.get(j));
1:afcaecf:         if (!mergedChild.contains(childOrdinals.get(j)) && checkChildsInSamePath(parentDimension,
1:afcaecf:             childDimension)) {
1:afcaecf:           mergedChild.add(childDimension);
1:afcaecf:         }
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf:     return mergedChild;
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   private boolean checkChildsInSamePath(CarbonDimension parentDimension,
1:afcaecf:       CarbonDimension childDimension) {
1:afcaecf:     if (parentDimension.getColName().equals(childDimension.getColName())) {
1:afcaecf:       return false;
1:afcaecf:     } else if (checkForChildColumns(parentDimension, childDimension)) {
1:afcaecf:       return true;
1:afcaecf:     } else {
1:afcaecf:       return false;
1:afcaecf:     }
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   private boolean checkForChildColumns(CarbonDimension parentDimension,
1:afcaecf:       CarbonDimension childDimension) {
1:afcaecf:     boolean output = false;
1:afcaecf:     if (parentDimension.getOrdinal() == childDimension.getOrdinal()) {
1:afcaecf:       output = true;
1:afcaecf:     } else if (parentDimension.getNumberOfChild() > 0) {
1:afcaecf:       for (int i = 0; i < parentDimension.getNumberOfChild() && !output; i++) {
1:afcaecf:         output =
1:afcaecf:             checkForChildColumns(parentDimension.getListOfChildDimensions().get(i), childDimension);
1:afcaecf:       }
1:afcaecf:     } else {
1:afcaecf:       output = false;
1:afcaecf:     }
1:afcaecf:     return output;
1:afcaecf:   }
1:afcaecf: 
1:afcaecf:   private CarbonDimension getDimensionBasedOnOrdinal(List<CarbonDimension> dimList,
1:afcaecf:       Integer ordinal) {
1:afcaecf:     for (CarbonDimension dims : dimList) {
1:afcaecf:       if (dims.getOrdinal() == ordinal) {
1:afcaecf:         return dims;
1:afcaecf:       } else if (dims.getNumberOfChild() > 0) {
1:afcaecf:         CarbonDimension dimensionBasedOnOrdinal =
1:afcaecf:             getDimensionBasedOnOrdinal(dims.getListOfChildDimensions(), ordinal);
1:afcaecf:         if (null != dimensionBasedOnOrdinal) {
1:afcaecf:           return dimensionBasedOnOrdinal;
1:afcaecf:         }
1:afcaecf:       }
1:afcaecf:     }
1:afcaecf:     return null;
1:afcaecf:   }
1:afcaecf: 
1:3ff574d:   public QueryModelBuilder projectAllColumns() {
1:3ff574d:     QueryProjection projection = new QueryProjection();
1:3ff574d:     List<CarbonDimension> dimensions = table.getDimensions();
1:df5d7a9:     for (int i = 0; i < dimensions.size(); i++) {
1:df5d7a9:       projection.addDimension(dimensions.get(i), i);
1:df5d7a9:     }
1:3ff574d:     List<CarbonMeasure> measures = table.getMeasures();
1:df5d7a9:     for (int i = 0; i < measures.size(); i++) {
1:df5d7a9:       projection.addMeasure(measures.get(i), i);
1:3ff574d:     }
1:3ff574d:     this.projection = projection;
1:3ff574d:     return this;
1:df5d7a9:   }
1:3ff574d: 
1:3ff574d:   public QueryModelBuilder filterExpression(Expression filterExpression) {
1:3ff574d:     this.filterExpression = filterExpression;
1:3ff574d:     return this;
1:3ff574d:   }
1:3ff574d: 
1:3ff574d:   public QueryModelBuilder dataConverter(DataTypeConverter dataTypeConverter) {
1:3ff574d:     this.dataTypeConverter = dataTypeConverter;
1:3ff574d:     return this;
1:3ff574d:   }
1:3ff574d: 
1:3ff574d:   public QueryModelBuilder enableForcedDetailRawQuery() {
1:3ff574d:     this.forcedDetailRawQuery = true;
1:3ff574d:     return this;
1:3ff574d:   }
1:3ff574d: 
1:26607fb:   public void enableReadPageByPage() {
1:3ff574d:     this.readPageByPage = true;
1:3ff574d:   }
1:3ff574d: 
1:3ff574d:   public QueryModel build() {
1:3ff574d:     QueryModel queryModel = QueryModel.newInstance(table);
1:3ff574d:     queryModel.setConverter(dataTypeConverter);
1:3ff574d:     queryModel.setForcedDetailRawQuery(forcedDetailRawQuery);
1:3ff574d:     queryModel.setReadPageByPage(readPageByPage);
2:df5d7a9:     queryModel.setProjection(projection);
1:3ff574d: 
1:3894e1d:     if (table.isTransactionalTable()) {
1:3894e1d:       // set the filter to the query model in order to filter blocklet before scan
1:3894e1d:       boolean[] isFilterDimensions = new boolean[table.getDimensionOrdinalMax()];
1:3894e1d:       boolean[] isFilterMeasures = new boolean[table.getAllMeasures().size()];
1:3894e1d:       table.processFilterExpression(filterExpression, isFilterDimensions, isFilterMeasures);
1:3894e1d:       queryModel.setIsFilterDimensions(isFilterDimensions);
1:3894e1d:       queryModel.setIsFilterMeasures(isFilterMeasures);
1:3894e1d:       FilterResolverIntf filterIntf =
1:3894e1d:           CarbonTable.resolveFilter(filterExpression, table.getAbsoluteTableIdentifier());
1:3894e1d:       queryModel.setFilterExpressionResolverTree(filterIntf);
1:3894e1d:     } else {
1:3894e1d:       queryModel.setFilterExpression(filterExpression);
1:3894e1d:     }
2:df5d7a9:     return queryModel;
1:df5d7a9:   }
1:df5d7a9: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:3894e1d
/////////////////////////////////////////////////////////////////////////
1:     if (table.isTransactionalTable()) {
1:       // set the filter to the query model in order to filter blocklet before scan
1:       boolean[] isFilterDimensions = new boolean[table.getDimensionOrdinalMax()];
1:       boolean[] isFilterMeasures = new boolean[table.getAllMeasures().size()];
1:       table.processFilterExpression(filterExpression, isFilterDimensions, isFilterMeasures);
1:       queryModel.setIsFilterDimensions(isFilterDimensions);
1:       queryModel.setIsFilterMeasures(isFilterMeasures);
1:       FilterResolverIntf filterIntf =
1:           CarbonTable.resolveFilter(filterExpression, table.getAbsoluteTableIdentifier());
1:       queryModel.setFilterExpressionResolverTree(filterIntf);
1:     } else {
1:       queryModel.setFilterExpression(filterExpression);
1:     }
author:Indhumathi27
-------------------------------------------------------------------------------
commit:133ec17
/////////////////////////////////////////////////////////////////////////
1:     List<String> projectionDimensionAndMeasures = new ArrayList<>();
1:       projectionDimensionAndMeasures.add(projectionDimension.getColumnName());
1:       projectionDimensionAndMeasures.add(projectionMeasure.getColumnName());
1:     LOGGER.info("Projection Columns: " + projectionDimensionAndMeasures);
commit:afcaecf
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * log information
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(QueryModelBuilder.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         CarbonDimension complexParentDimension = dimension.getComplexParentDimension();
1:         if (null != complexParentDimension && dimension.hasEncoding(Encoding.DICTIONARY)) {
1:           if (!isAlreadyExists(complexParentDimension, projection.getDimensions())) {
1:             projection.addDimension(complexParentDimension, i);
1:             i++;
1:           }
1:         } else {
1:           projection.addDimension(dimension, i);
1:           i++;
1:         }
1:           throw new RuntimeException(
1:               projectionColumnName + " column not found in the table " + factTableName);
1:     projection = optimizeProjectionForComplexColumns(projection, projectionColumns, factTableName);
1:     for (ProjectionDimension projectionDimension : projection.getDimensions()) {
0:       LOGGER.info("Project Columns: " + projectionDimension.getColumnName());
1:     }
1:     for (ProjectionMeasure projectionMeasure : projection.getMeasures()) {
0:       LOGGER.info("Project Columns: " + projectionMeasure.getColumnName());
1:     }
1:   /**
1:    * For complex dimensions, check if the dimension already exists in the projection list or not
1:    *
1:    * @param dimension
1:    * @param projectionDimensions
1:    * @return
1:    */
1:   private boolean isAlreadyExists(CarbonDimension dimension,
1:       List<ProjectionDimension> projectionDimensions) {
1:     boolean exists = false;
1:     for (ProjectionDimension projectionDimension : projectionDimensions) {
1:       if (dimension.getColName().equals(projectionDimension.getColumnName())) {
1:         exists = true;
1:         break;
1:       }
1:     }
1:     return exists;
1:   }
1: 
1:   private QueryProjection optimizeProjectionForComplexColumns(QueryProjection projection,
1:       String[] projectionColumns, String factTableName) {
1:     // Get the List of Complex Column Projection.
1:     // The optimization techniques which can be applied are
1:     // A. Merging in Driver Side
1:     // B. Merging in the result Collector side.
1:     // Merging is driver side cases are
1:     // Driver merging will eliminate one of the CarbonDimension.
1:     // Executor merging will merge the column output in Result Collector.
1:     // In this routine we are going to do driver merging and leave executor merging.
1:     Map<Integer, List<Integer>> complexColumnMap = new HashMap<>();
1:     List<ProjectionDimension> carbonDimensions = projection.getDimensions();
1:     // Traverse and find out if the top most parent of projection column is already there
1:     List<CarbonDimension> projectionDimenesionToBeMerged = new ArrayList<>();
1:     for (ProjectionDimension projectionDimension : carbonDimensions) {
1:       CarbonDimension complexParentDimension =
1:           projectionDimension.getDimension().getComplexParentDimension();
1:       if (null != complexParentDimension && isAlreadyExists(complexParentDimension,
1:           carbonDimensions)) {
1:         projectionDimenesionToBeMerged.add(projectionDimension.getDimension());
1:       }
1:     }
1: 
1:     if (projectionDimenesionToBeMerged.size() != 0) {
1:       projection =
1:           removeMergedDimensions(projectionDimenesionToBeMerged, projectionColumns, factTableName);
1:       carbonDimensions = projection.getDimensions();
1:     }
1: 
1:     for (ProjectionDimension cols : carbonDimensions) {
1:       // get all the Projections with Parent Ordinal Set.
1:       if (null != cols.getDimension().getComplexParentDimension()) {
1:         if (complexColumnMap.get(cols.getDimension().getComplexParentDimension().getOrdinal())
1:             != null) {
1:           List<Integer> childColumns =
1:               complexColumnMap.get(cols.getDimension().getComplexParentDimension().getOrdinal());
1:           childColumns.add(cols.getDimension().getOrdinal());
1:           complexColumnMap
1:               .put(cols.getDimension().getComplexParentDimension().getOrdinal(), childColumns);
1:         } else {
1:           List<Integer> childColumns = new ArrayList<>();
1:           childColumns.add(cols.getDimension().getOrdinal());
1:           complexColumnMap
1:               .put(cols.getDimension().getComplexParentDimension().getOrdinal(), childColumns);
1:         }
1:       }
1:     }
1: 
1:     // Traverse the Map to Find any columns are parent.
1:     for (Map.Entry<Integer, List<Integer>> entry : complexColumnMap.entrySet()) {
1:       List<Integer> childOrdinals = entry.getValue();
1:       if (childOrdinals.size() > 1) {
1:         // In case of more that one child, have to check if the child columns are in the same path
1:         // and have a common parent.
1:         Collections.sort(childOrdinals);
1:         List<CarbonDimension> mergedDimensions = mergeChildColumns(childOrdinals);
1:         if (mergedDimensions.size() > 0) {
1:           projection = removeMergedDimensions(mergedDimensions, projectionColumns, factTableName);
1:         }
1:       }
1:     }
1:     return projection;
1:   }
1: 
1:   /**
1:    * Remove the dimensions from the projection list which are merged
1:    *
1:    * @param mergedDimensions
1:    * @param projectionColumns
1:    * @param factTableName
1:    * @return
1:    */
1:   private QueryProjection removeMergedDimensions(List<CarbonDimension> mergedDimensions,
1:       String[] projectionColumns, String factTableName) {
1:     QueryProjection queryProjection = new QueryProjection();
1:     int i = 0;
1:     for (String projectionColumnName : projectionColumns) {
1:       CarbonDimension dimension = table.getDimensionByName(factTableName, projectionColumnName);
1:       if (dimension != null) {
1:         if (!mergedDimensions.contains(dimension)) {
1:           if (!isAlreadyExists(dimension, queryProjection.getDimensions())) {
1:             queryProjection.addDimension(dimension, i);
1:             i++;
1:           }
1:         }
1:       } else {
1:         CarbonMeasure measure = table.getMeasureByName(factTableName, projectionColumnName);
1:         if (measure == null) {
1:           throw new RuntimeException(
1:               projectionColumnName + " column not found in the table " + factTableName);
1:         }
1:         queryProjection.addMeasure(measure, i);
1:         i++;
1:       }
1:     }
1:     return queryProjection;
1:   }
1: 
1:   private List<CarbonDimension> mergeChildColumns(List<Integer> childOrdinals) {
1:     // Check If children if they are in the path of not.
1:     List<CarbonDimension> mergedChild = new ArrayList<>();
1:     List<CarbonDimension> dimList = table.getDimensions();
1:     for (int i = 0; i < childOrdinals.size(); i++) {
1:       for (int j = i; j < childOrdinals.size(); j++) {
1:         CarbonDimension parentDimension = getDimensionBasedOnOrdinal(dimList, childOrdinals.get(i));
1:         CarbonDimension childDimension = getDimensionBasedOnOrdinal(dimList, childOrdinals.get(j));
1:         if (!mergedChild.contains(childOrdinals.get(j)) && checkChildsInSamePath(parentDimension,
1:             childDimension)) {
1:           mergedChild.add(childDimension);
1:         }
1:       }
1:     }
1:     return mergedChild;
1:   }
1: 
1:   private boolean checkChildsInSamePath(CarbonDimension parentDimension,
1:       CarbonDimension childDimension) {
1:     if (parentDimension.getColName().equals(childDimension.getColName())) {
1:       return false;
1:     } else if (checkForChildColumns(parentDimension, childDimension)) {
1:       return true;
1:     } else {
1:       return false;
1:     }
1:   }
1: 
1:   private boolean checkForChildColumns(CarbonDimension parentDimension,
1:       CarbonDimension childDimension) {
1:     boolean output = false;
1:     if (parentDimension.getOrdinal() == childDimension.getOrdinal()) {
1:       output = true;
1:     } else if (parentDimension.getNumberOfChild() > 0) {
1:       for (int i = 0; i < parentDimension.getNumberOfChild() && !output; i++) {
1:         output =
1:             checkForChildColumns(parentDimension.getListOfChildDimensions().get(i), childDimension);
1:       }
1:     } else {
1:       output = false;
1:     }
1:     return output;
1:   }
1: 
1:   private CarbonDimension getDimensionBasedOnOrdinal(List<CarbonDimension> dimList,
1:       Integer ordinal) {
1:     for (CarbonDimension dims : dimList) {
1:       if (dims.getOrdinal() == ordinal) {
1:         return dims;
1:       } else if (dims.getNumberOfChild() > 0) {
1:         CarbonDimension dimensionBasedOnOrdinal =
1:             getDimensionBasedOnOrdinal(dims.getListOfChildDimensions(), ordinal);
1:         if (null != dimensionBasedOnOrdinal) {
1:           return dimensionBasedOnOrdinal;
1:         }
1:       }
1:     }
1:     return null;
1:   }
1: 
author:dhatchayani
-------------------------------------------------------------------------------
commit:2c0fa10
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     FilterResolverIntf filterIntf = table.resolveFilter(filterExpression);
author:manishgupta88
-------------------------------------------------------------------------------
commit:26607fb
/////////////////////////////////////////////////////////////////////////
1:   public void enableReadPageByPage() {
author:Jacky Li
-------------------------------------------------------------------------------
commit:3ff574d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
0: import org.apache.carbondata.core.scan.filter.SingleTableProvider;
1: import org.apache.carbondata.core.util.DataTypeConverter;
1:   private CarbonTable table;
1:   private QueryProjection projection;
1:   private Expression filterExpression;
1:   private DataTypeConverter dataTypeConverter;
1:   private boolean forcedDetailRawQuery;
1:   private boolean readPageByPage;
1:   public QueryModelBuilder(CarbonTable table) {
1:     this.table = table;
1:   public QueryModelBuilder projectColumns(String[] projectionColumns) {
1:     Objects.requireNonNull(projectionColumns);
1:     String factTableName = table.getTableName();
1:     int i = 0;
1:     for (String projectionColumnName : projectionColumns) {
1:       CarbonDimension dimension = table.getDimensionByName(factTableName, projectionColumnName);
1:       if (dimension != null) {
0:         projection.addDimension(dimension, i);
1:         i++;
1:       } else {
1:         CarbonMeasure measure = table.getMeasureByName(factTableName, projectionColumnName);
1:         if (measure == null) {
0:           throw new RuntimeException(projectionColumnName +
0:               " column not found in the table " + factTableName);
1:         }
1:         projection.addMeasure(measure, i);
1:         i++;
1:       }
1:     }
1: 
1:     this.projection = projection;
1:     return this;
1:   }
1: 
1:   public QueryModelBuilder projectAllColumns() {
1:     QueryProjection projection = new QueryProjection();
1:     List<CarbonDimension> dimensions = table.getDimensions();
1:     List<CarbonMeasure> measures = table.getMeasures();
1:     this.projection = projection;
1:     return this;
1:   }
1:   public QueryModelBuilder filterExpression(Expression filterExpression) {
1:     this.filterExpression = filterExpression;
1:     return this;
1:   }
1: 
1:   public QueryModelBuilder dataConverter(DataTypeConverter dataTypeConverter) {
1:     this.dataTypeConverter = dataTypeConverter;
1:     return this;
1:   }
1: 
1:   public QueryModelBuilder enableForcedDetailRawQuery() {
1:     this.forcedDetailRawQuery = true;
1:     return this;
1:   }
1: 
0:   public QueryModelBuilder enableReadPageByPage() {
1:     this.readPageByPage = true;
1:     return this;
1:   }
1: 
1:   public QueryModel build() {
1:     QueryModel queryModel = QueryModel.newInstance(table);
1:     queryModel.setConverter(dataTypeConverter);
1:     queryModel.setForcedDetailRawQuery(forcedDetailRawQuery);
1:     queryModel.setReadPageByPage(readPageByPage);
1: 
0:     // set the filter to the query model in order to filter blocklet before scan
0:     boolean[] isFilterDimensions = new boolean[table.getDimensionOrdinalMax()];
0:     boolean[] isFilterMeasures = new boolean[table.getAllMeasures().size()];
0:     table.processFilterExpression(filterExpression, isFilterDimensions, isFilterMeasures);
0:     FilterResolverIntf filterIntf =
0:         table.resolveFilter(filterExpression, new SingleTableProvider(table));
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.model;
1: 
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonMeasure;
1: import org.apache.carbondata.core.scan.expression.Expression;
1: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: 
1: public class QueryModelBuilder {
1: 
0:   private CarbonTable carbonTable;
1: 
0:   public QueryModelBuilder(CarbonTable carbonTable) {
0:     this.carbonTable = carbonTable;
1:   }
1: 
0:   public QueryModel build(String[] projectionColumnNames, Expression filterExpression) {
0:     QueryModel queryModel = QueryModel.newInstance(carbonTable);
0:     QueryProjection projection = carbonTable.createProjection(projectionColumnNames);
1:     queryModel.setProjection(projection);
0:     boolean[] isFilterDimensions = new boolean[carbonTable.getDimensionOrdinalMax()];
0:     boolean[] isFilterMeasures = new boolean[carbonTable.getAllMeasures().size()];
0:     carbonTable.processFilterExpression(filterExpression, isFilterDimensions, isFilterMeasures);
0:     queryModel.setIsFilterDimensions(isFilterDimensions);
0:     queryModel.setIsFilterMeasures(isFilterMeasures);
0:     FilterResolverIntf filterIntf = carbonTable.resolveFilter(filterExpression, null);
0:     queryModel.setFilterExpressionResolverTree(filterIntf);
1:     return queryModel;
1:   }
1: 
0:   public QueryModel build(Expression filterExpression) {
1:     QueryProjection projection = new QueryProjection();
1: 
0:     List<CarbonDimension> dimensions = carbonTable.getDimensions();
1:     for (int i = 0; i < dimensions.size(); i++) {
1:       projection.addDimension(dimensions.get(i), i);
1:     }
0:     List<CarbonMeasure> measures = carbonTable.getMeasures();
1:     for (int i = 0; i < measures.size(); i++) {
1:       projection.addMeasure(measures.get(i), i);
1:     }
1: 
0:     QueryModel queryModel = QueryModel.newInstance(carbonTable);
1:     queryModel.setProjection(projection);
0:     boolean[] isFilterDimensions = new boolean[carbonTable.getDimensionOrdinalMax()];
0:     boolean[] isFilterMeasures = new boolean[carbonTable.getAllMeasures().size()];
0:     carbonTable.processFilterExpression(filterExpression, isFilterDimensions, isFilterMeasures);
0:     queryModel.setIsFilterDimensions(isFilterDimensions);
0:     queryModel.setIsFilterMeasures(isFilterMeasures);
0:     FilterResolverIntf filterIntf = carbonTable.resolveFilter(filterExpression, null);
0:     queryModel.setFilterExpressionResolverTree(filterIntf);
1:     return queryModel;
1:   }
1: }
============================================================================