1:56330ae: /*
1:56330ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56330ae:  * contributor license agreements.  See the NOTICE file distributed with
1:56330ae:  * this work for additional information regarding copyright ownership.
1:56330ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56330ae:  * (the "License"); you may not use this file except in compliance with
1:56330ae:  * the License.  You may obtain a copy of the License at
1:56330ae:  *
1:56330ae:  *    http://www.apache.org/licenses/LICENSE-2.0
1:56330ae:  *
1:56330ae:  * Unless required by applicable law or agreed to in writing, software
1:56330ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56330ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56330ae:  * See the License for the specific language governing permissions and
1:56330ae:  * limitations under the License.
1:56330ae:  */
1:56330ae: package org.apache.carbondata.core.datamap.dev.expr;
2:56330ae: 
1:56330ae: import java.io.IOException;
1:56330ae: import java.io.Serializable;
1:56330ae: 
1:56330ae: import org.apache.carbondata.core.datamap.DataMapDistributable;
1:56330ae: 
1:56330ae: import org.apache.hadoop.mapreduce.InputSplit;
1:56330ae: 
1:56330ae: public class DataMapDistributableWrapper extends InputSplit implements Serializable {
1:56330ae: 
1:56330ae:   private String uniqueId;
1:56330ae: 
1:56330ae:   private DataMapDistributable distributable;
1:56330ae: 
1:56330ae:   public DataMapDistributableWrapper(String uniqueId, DataMapDistributable distributable) {
1:56330ae:     this.uniqueId = uniqueId;
2:56330ae:     this.distributable = distributable;
2:56330ae:   }
1:56330ae: 
1:56330ae:   public String getUniqueId() {
1:56330ae:     return uniqueId;
1:56330ae:   }
1:56330ae: 
1:56330ae:   public DataMapDistributable getDistributable() {
1:56330ae:     return distributable;
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public long getLength() throws IOException, InterruptedException {
1:56330ae:     return distributable.getLength();
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public String[] getLocations() throws IOException, InterruptedException {
1:56330ae:     return distributable.getLocations();
1:56330ae:   }
1:56330ae: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.datamap.dev.expr;
1: 
1: import java.io.IOException;
1: import java.io.Serializable;
1: 
1: import org.apache.carbondata.core.datamap.DataMapDistributable;
1: 
1: import org.apache.hadoop.mapreduce.InputSplit;
1: 
1: public class DataMapDistributableWrapper extends InputSplit implements Serializable {
1: 
1:   private String uniqueId;
1: 
1:   private DataMapDistributable distributable;
1: 
1:   public DataMapDistributableWrapper(String uniqueId, DataMapDistributable distributable) {
1:     this.uniqueId = uniqueId;
1:     this.distributable = distributable;
1:   }
1: 
1:   public String getUniqueId() {
1:     return uniqueId;
1:   }
1: 
1:   public DataMapDistributable getDistributable() {
1:     return distributable;
1:   }
1: 
0:   public void setDistributable(DataMapDistributable distributable) {
1:     this.distributable = distributable;
1:   }
1: 
1:   @Override public long getLength() throws IOException, InterruptedException {
1:     return distributable.getLength();
1:   }
1: 
1:   @Override public String[] getLocations() throws IOException, InterruptedException {
1:     return distributable.getLocations();
1:   }
1: }
============================================================================