1:9669c0b: /*
1:9669c0b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9669c0b:  * contributor license agreements.  See the NOTICE file distributed with
1:9669c0b:  * this work for additional information regarding copyright ownership.
1:9669c0b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9669c0b:  * (the "License"); you may not use this file except in compliance with
1:9669c0b:  * the License.  You may obtain a copy of the License at
1:9669c0b:  *
1:9669c0b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9669c0b:  *
1:9669c0b:  * Unless required by applicable law or agreed to in writing, software
1:9669c0b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9669c0b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9669c0b:  * See the License for the specific language governing permissions and
1:9669c0b:  * limitations under the License.
1:9669c0b:  */
2:9669c0b: 
1:9669c0b: package org.apache.carbondata.presto;
1:9669c0b: 
1:d4a1577: import javax.inject.Inject;
1:d4a1577: 
1:d4a1577: import static java.util.Objects.requireNonNull;
1:d4a1577: 
1:9669c0b: import org.apache.carbondata.presto.impl.CarbonTableConfig;
1:9669c0b: import org.apache.carbondata.presto.impl.CarbonTableReader;
1:9669c0b: 
1:9669c0b: import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;
1:9669c0b: import com.facebook.presto.spi.connector.ConnectorSplitManager;
1:9669c0b: import com.facebook.presto.spi.type.Type;
1:9669c0b: import com.facebook.presto.spi.type.TypeManager;
1:9669c0b: import com.fasterxml.jackson.databind.DeserializationContext;
1:9669c0b: import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
1:9669c0b: import com.google.inject.Binder;
1:9669c0b: import com.google.inject.Module;
1:9669c0b: import com.google.inject.Scopes;
1:9669c0b: 
1:9669c0b: import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;
1:9669c0b: import static com.google.common.base.Preconditions.checkArgument;
1:9669c0b: import static io.airlift.configuration.ConfigBinder.configBinder;
1:9669c0b: 
1:9669c0b: public class CarbondataModule implements Module {
1:9669c0b: 
1:9669c0b:   private final String connectorId;
1:9669c0b:   private final TypeManager typeManager;
1:9669c0b: 
1:9669c0b:   public CarbondataModule(String connectorId, TypeManager typeManager) {
1:9669c0b:     this.connectorId = requireNonNull(connectorId, "connector id is null");
1:9669c0b:     this.typeManager = requireNonNull(typeManager, "typeManager is null");
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   @Override public void configure(Binder binder) {
1:9669c0b:     binder.bind(TypeManager.class).toInstance(typeManager);
1:9669c0b: 
1:9669c0b:     binder.bind(CarbondataConnectorId.class).toInstance(new CarbondataConnectorId(connectorId));
1:9669c0b:     binder.bind(CarbondataMetadata.class).in(Scopes.SINGLETON);
1:9669c0b:     binder.bind(CarbonTableReader.class).in(Scopes.SINGLETON);
1:9669c0b:     binder.bind(ConnectorSplitManager.class).to(CarbondataSplitManager.class).in(Scopes.SINGLETON);
1:9669c0b:     binder.bind(ConnectorPageSourceProvider.class).to(CarbondataPageSourceProvider.class)
2:9669c0b:         .in(Scopes.SINGLETON);
1:9669c0b:     binder.bind(CarbondataHandleResolver.class).in(Scopes.SINGLETON);
1:9669c0b:     configBinder(binder).bindConfig(CarbonTableConfig.class);
1:9669c0b:   }
1:9669c0b: 
1:9669c0b:   public static final class TypeDeserializer extends FromStringDeserializer<Type> {
1:9669c0b:     private final TypeManager typeManager;
1:9669c0b: 
1:9669c0b:     @Inject public TypeDeserializer(TypeManager typeManager) {
1:9669c0b:       super(Type.class);
1:9669c0b:       this.typeManager = requireNonNull(typeManager, "typeManager is null");
1:9669c0b:     }
1:9669c0b: 
1:9669c0b:     @Override protected Type _deserialize(String value, DeserializationContext context) {
1:9669c0b:       Type type = typeManager.getType(parseTypeSignature(value));
1:9669c0b:       checkArgument(type != null, "Unknown type %s", value);
1:9669c0b:       return type;
1:9669c0b:     }
1:9669c0b:   }
1:9669c0b: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: 
1: import static java.util.Objects.requireNonNull;
1: 
/////////////////////////////////////////////////////////////////////////
author:Bhavya
-------------------------------------------------------------------------------
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
commit:9669c0b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto;
1: 
1: import org.apache.carbondata.presto.impl.CarbonTableConfig;
1: import org.apache.carbondata.presto.impl.CarbonTableReader;
1: 
1: import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;
0: import com.facebook.presto.spi.connector.ConnectorRecordSetProvider;
1: import com.facebook.presto.spi.connector.ConnectorSplitManager;
1: import com.facebook.presto.spi.type.Type;
1: import com.facebook.presto.spi.type.TypeManager;
1: import com.fasterxml.jackson.databind.DeserializationContext;
1: import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
1: import com.google.inject.Binder;
1: import com.google.inject.Module;
1: import com.google.inject.Scopes;
1: 
0: import javax.inject.Inject;
1: 
1: import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;
1: import static com.google.common.base.Preconditions.checkArgument;
1: import static io.airlift.configuration.ConfigBinder.configBinder;
0: import static java.util.Objects.requireNonNull;
1: 
1: public class CarbondataModule implements Module {
1: 
1:   private final String connectorId;
1:   private final TypeManager typeManager;
1: 
1:   public CarbondataModule(String connectorId, TypeManager typeManager) {
1:     this.connectorId = requireNonNull(connectorId, "connector id is null");
1:     this.typeManager = requireNonNull(typeManager, "typeManager is null");
1:   }
1: 
1:   @Override public void configure(Binder binder) {
1:     binder.bind(TypeManager.class).toInstance(typeManager);
1: 
1:     binder.bind(CarbondataConnectorId.class).toInstance(new CarbondataConnectorId(connectorId));
1:     binder.bind(CarbondataMetadata.class).in(Scopes.SINGLETON);
1:     binder.bind(CarbonTableReader.class).in(Scopes.SINGLETON);
1:     binder.bind(ConnectorSplitManager.class).to(CarbondataSplitManager.class).in(Scopes.SINGLETON);
0:     binder.bind(ConnectorRecordSetProvider.class).to(CarbondataRecordSetProvider.class)
1:         .in(Scopes.SINGLETON);
1:     binder.bind(ConnectorPageSourceProvider.class).to(CarbondataPageSourceProvider.class)
1:         .in(Scopes.SINGLETON);
1:     binder.bind(CarbondataHandleResolver.class).in(Scopes.SINGLETON);
0:     binder.bind(CarbondataRecordSetProvider.class).in(Scopes.SINGLETON);
1:     configBinder(binder).bindConfig(CarbonTableConfig.class);
1:   }
1: 
1:   public static final class TypeDeserializer extends FromStringDeserializer<Type> {
1:     private final TypeManager typeManager;
1: 
1:     @Inject public TypeDeserializer(TypeManager typeManager) {
1:       super(Type.class);
1:       this.typeManager = requireNonNull(typeManager, "typeManager is null");
1:     }
1: 
1:     @Override protected Type _deserialize(String value, DeserializationContext context) {
1:       Type type = typeManager.getType(parseTypeSignature(value));
1:       checkArgument(type != null, "Unknown type %s", value);
1:       return type;
1:     }
1:   }
1: }
author:chenliang613
-------------------------------------------------------------------------------
commit:7ee8e27
/////////////////////////////////////////////////////////////////////////
commit:2712330
/////////////////////////////////////////////////////////////////////////
0:   private final String connectorId;
0:   private final TypeManager typeManager;
0: 
0:   public CarbondataModule(String connectorId, TypeManager typeManager) {
0:     this.connectorId = requireNonNull(connectorId, "connector id is null");
0:     this.typeManager = requireNonNull(typeManager, "typeManager is null");
0:   }
0: 
0:   @Override public void configure(Binder binder) {
0:     binder.bind(TypeManager.class).toInstance(typeManager);
0: 
0:     binder.bind(CarbondataConnectorId.class).toInstance(new CarbondataConnectorId(connectorId));
0:     binder.bind(CarbondataMetadata.class).in(Scopes.SINGLETON);
0:     binder.bind(CarbonTableReader.class).in(Scopes.SINGLETON);
0:     binder.bind(ConnectorSplitManager.class).to(CarbondataSplitManager.class).in(Scopes.SINGLETON);
0:     binder.bind(ConnectorRecordSetProvider.class).to(CarbondataRecordSetProvider.class)
0:         .in(Scopes.SINGLETON);
0:     binder.bind(CarbondataHandleResolver.class).in(Scopes.SINGLETON);
0:     configBinder(binder).bindConfig(CarbonTableConfig.class);
0:   }
0: 
0:   public static final class TypeDeserializer extends FromStringDeserializer<Type> {
0:     @Inject public TypeDeserializer(TypeManager typeManager) {
0:       super(Type.class);
0:       this.typeManager = requireNonNull(typeManager, "typeManager is null");
0:     @Override protected Type _deserialize(String value, DeserializationContext context) {
0:       Type type = typeManager.getType(parseTypeSignature(value));
0:       checkArgument(type != null, "Unknown type %s", value);
0:       return type;
0:   }
commit:32bf296
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *    http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.carbondata.presto;
0: 
0: import org.apache.carbondata.presto.impl.CarbonTableConfig;
0: import org.apache.carbondata.presto.impl.CarbonTableReader;
commit:9d7dbea
============================================================================