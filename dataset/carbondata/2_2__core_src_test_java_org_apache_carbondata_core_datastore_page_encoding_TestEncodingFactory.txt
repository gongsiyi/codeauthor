1:38038ad:  /*
1:38038ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38038ad:  * contributor license agreements.  See the NOTICE file distributed with
1:38038ad:  * this work for additional information regarding copyright ownership.
1:38038ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38038ad:  * (the "License"); you may not use this file except in compliance with
1:38038ad:  * the License.  You may obtain a copy of the License at
1:38038ad:  *
1:38038ad:  *    http://www.apache.org/licenses/LICENSE-2.0
1:38038ad:  *
1:38038ad:  * Unless required by applicable law or agreed to in writing, software
1:38038ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:38038ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:38038ad:  * See the License for the specific language governing permissions and
1:38038ad:  * limitations under the License.
1:38038ad:  */
1:38038ad: 
1:38038ad: package org.apache.carbondata.core.datastore.page.encoding;
1:38038ad: 
1:38038ad: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaIntegralCodec;
1:38038ad: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveIntegralCodec;
1:38038ad: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
1:38038ad: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1:38038ad: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:38038ad: 
1:38038ad: import junit.framework.TestCase;
1:38038ad: import org.junit.Test;
1:38038ad: 
1:38038ad:  /**
1:38038ad:  * The class is meant to test the different type of ColumnPageCodec
1:38038ad:  * base datatype and min and max values.
1:38038ad:  */
1:38038ad: public class TestEncodingFactory extends TestCase {
1:38038ad: 
1:38038ad:   @Test public void testSelectProperDeltaType() {
1:38038ad:     PrimitivePageStatsCollector primitivePageStatsCollector =
1:38038ad:         PrimitivePageStatsCollector.newInstance(DataTypes.LONG);
1:38038ad:     // for Byte
1:38038ad:     primitivePageStatsCollector.update((long) Byte.MAX_VALUE);
1:38038ad:     ColumnPageCodec columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:38038ad:     assert (DataTypes.BYTE == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for Short
1:38038ad:     primitivePageStatsCollector.update((long) Short.MAX_VALUE);
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:38038ad:     assert (DataTypes.SHORT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for int
1:38038ad:     primitivePageStatsCollector.update((long) Integer.MAX_VALUE);
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:38038ad:     assert (DataTypes.INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for long
1:38038ad:     primitivePageStatsCollector.update(Long.MAX_VALUE);
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof DirectCompressCodec);
1:38038ad:     assert ("DirectCompressCodec".equals(columnPageCodec.getName()));
1:38038ad:   }
1:38038ad: 
1:38038ad:   @Test public void testSelectProperDeltaType2() {
1:38038ad:     PrimitivePageStatsCollector primitivePageStatsCollector =
1:38038ad:         PrimitivePageStatsCollector.newInstance(DataTypes.LONG);
1:38038ad:     // for Byte
1:38038ad:     primitivePageStatsCollector.update((long) 200);
1:38038ad:     ColumnPageCodec columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveDeltaIntegralCodec);
1:38038ad:     assert (DataTypes.BYTE == ((AdaptiveDeltaIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for Short
1:38038ad:     primitivePageStatsCollector.update((long) 634767);
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:38038ad:     assert (DataTypes.SHORT_INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for int
1:38038ad:     primitivePageStatsCollector.update((long) (Integer.MAX_VALUE + 200));
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:38038ad:     assert (DataTypes.INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:38038ad:     // for int
1:38038ad:     primitivePageStatsCollector.update(Long.MAX_VALUE);
1:38038ad:     columnPageCodec =
1:438b442:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:38038ad:     assert (columnPageCodec instanceof DirectCompressCodec);
1:38038ad:     assert ("DirectCompressCodec".equals(columnPageCodec.getName()));
1:38038ad:   }
1:38038ad: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:438b442
/////////////////////////////////////////////////////////////////////////
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
/////////////////////////////////////////////////////////////////////////
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
1:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector, false);
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:38038ad
/////////////////////////////////////////////////////////////////////////
1:  /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.encoding;
1: 
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveDeltaIntegralCodec;
1: import org.apache.carbondata.core.datastore.page.encoding.adaptive.AdaptiveIntegralCodec;
1: import org.apache.carbondata.core.datastore.page.encoding.compress.DirectCompressCodec;
1: import org.apache.carbondata.core.datastore.page.statistics.PrimitivePageStatsCollector;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: 
1: import junit.framework.TestCase;
1: import org.junit.Test;
1: 
1:  /**
1:  * The class is meant to test the different type of ColumnPageCodec
1:  * base datatype and min and max values.
1:  */
1: public class TestEncodingFactory extends TestCase {
1: 
1:   @Test public void testSelectProperDeltaType() {
1:     PrimitivePageStatsCollector primitivePageStatsCollector =
1:         PrimitivePageStatsCollector.newInstance(DataTypes.LONG);
1:     // for Byte
1:     primitivePageStatsCollector.update((long) Byte.MAX_VALUE);
1:     ColumnPageCodec columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:     assert (DataTypes.BYTE == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for Short
1:     primitivePageStatsCollector.update((long) Short.MAX_VALUE);
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:     assert (DataTypes.SHORT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for int
1:     primitivePageStatsCollector.update((long) Integer.MAX_VALUE);
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:     assert (DataTypes.INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for long
1:     primitivePageStatsCollector.update(Long.MAX_VALUE);
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof DirectCompressCodec);
1:     assert ("DirectCompressCodec".equals(columnPageCodec.getName()));
1:   }
1: 
1:   @Test public void testSelectProperDeltaType2() {
1:     PrimitivePageStatsCollector primitivePageStatsCollector =
1:         PrimitivePageStatsCollector.newInstance(DataTypes.LONG);
1:     // for Byte
1:     primitivePageStatsCollector.update((long) 200);
1:     ColumnPageCodec columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveDeltaIntegralCodec);
1:     assert (DataTypes.BYTE == ((AdaptiveDeltaIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for Short
1:     primitivePageStatsCollector.update((long) 634767);
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:     assert (DataTypes.SHORT_INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for int
1:     primitivePageStatsCollector.update((long) (Integer.MAX_VALUE + 200));
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof AdaptiveIntegralCodec);
1:     assert (DataTypes.INT == ((AdaptiveIntegralCodec) columnPageCodec).getTargetDataType());
1:     // for int
1:     primitivePageStatsCollector.update(Long.MAX_VALUE);
1:     columnPageCodec =
0:         DefaultEncodingFactory.selectCodecByAlgorithmForIntegral(primitivePageStatsCollector);
1:     assert (columnPageCodec instanceof DirectCompressCodec);
1:     assert ("DirectCompressCodec".equals(columnPageCodec.getName()));
1:   }
1: }
============================================================================