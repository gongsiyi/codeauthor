1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
1:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.util;
1:cd6a4ff: 
1:cd6a4ff: public interface LoadStatistics {
1:e8da880:   //Init PartitionInfo
1:e8da880:   void initPartitionInfo(String PartitionId);
1:cd6a4ff: 
1:cd6a4ff:   //Record the time
1:cd6a4ff:   void recordDicShuffleAndWriteTime();
1:cd6a4ff: 
1:cd6a4ff:   void recordLoadCsvfilesToDfTime();
1:cd6a4ff: 
1:cd6a4ff:   void recordDictionaryValuesTotalTime(String partitionID,
1:cd6a4ff:       Long dictionaryValuesTotalTimeTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   void recordCsvInputStepTime(String partitionID,
1:cd6a4ff:       Long csvInputStepTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   void recordLruCacheLoadTime(double lruCacheLoadTime);
1:cd6a4ff: 
1:cd6a4ff:   void recordGeneratingDictionaryValuesTime(String partitionID,
1:cd6a4ff:       Long generatingDictionaryValuesTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   void recordSortRowsStepTotalTime(String partitionID,
1:cd6a4ff:       Long sortRowsStepTotalTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   void recordMdkGenerateTotalTime(String partitionID,
1:cd6a4ff:       Long mdkGenerateTotalTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   void recordDictionaryValue2MdkAdd2FileTime(String partitionID,
1:cd6a4ff:       Long dictionaryValue2MdkAdd2FileTimePoint);
1:cd6a4ff: 
1:cd6a4ff:   //Record the node blocks information map
1:cd6a4ff:   void recordHostBlockMap(String host, Integer numBlocks);
1:cd6a4ff: 
1:cd6a4ff:   //Record the partition blocks information map
1:cd6a4ff:   void recordPartitionBlockMap(String partitionID, Integer numBlocks);
1:cd6a4ff: 
1:cd6a4ff:   //Record total num of records processed
1:cd6a4ff:   void recordTotalRecords(long totalRecords);
1:cd6a4ff: 
1:cd6a4ff:   //Print the statistics information
1:cd6a4ff:   void printStatisticsInfo(String partitionID);
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e8da880
/////////////////////////////////////////////////////////////////////////
1:   //Init PartitionInfo
1:   void initPartitionInfo(String PartitionId);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.util;
1: 
1: public interface LoadStatistics {
0:   //Init PartitonInfo
0:   void  initPartitonInfo(String PartitionId);
1: 
1:   //Record the time
1:   void recordDicShuffleAndWriteTime();
1: 
1:   void recordLoadCsvfilesToDfTime();
1: 
1:   void recordDictionaryValuesTotalTime(String partitionID,
1:       Long dictionaryValuesTotalTimeTimePoint);
1: 
1:   void recordCsvInputStepTime(String partitionID,
1:       Long csvInputStepTimePoint);
1: 
1:   void recordLruCacheLoadTime(double lruCacheLoadTime);
1: 
1:   void recordGeneratingDictionaryValuesTime(String partitionID,
1:       Long generatingDictionaryValuesTimePoint);
1: 
1:   void recordSortRowsStepTotalTime(String partitionID,
1:       Long sortRowsStepTotalTimePoint);
1: 
1:   void recordMdkGenerateTotalTime(String partitionID,
1:       Long mdkGenerateTotalTimePoint);
1: 
1:   void recordDictionaryValue2MdkAdd2FileTime(String partitionID,
1:       Long dictionaryValue2MdkAdd2FileTimePoint);
1: 
1:   //Record the node blocks information map
1:   void recordHostBlockMap(String host, Integer numBlocks);
1: 
1:   //Record the partition blocks information map
1:   void recordPartitionBlockMap(String partitionID, Integer numBlocks);
1: 
1:   //Record total num of records processed
1:   void recordTotalRecords(long totalRecords);
1: 
1:   //Print the statistics information
1:   void printStatisticsInfo(String partitionID);
1: 
1: }
============================================================================