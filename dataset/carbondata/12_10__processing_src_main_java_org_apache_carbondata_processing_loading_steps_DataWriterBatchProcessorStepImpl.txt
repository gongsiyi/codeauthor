2:b13ead9: /*
1:b13ead9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b13ead9:  * contributor license agreements.  See the NOTICE file distributed with
1:b13ead9:  * this work for additional information regarding copyright ownership.
1:b13ead9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b13ead9:  * (the "License"); you may not use this file except in compliance with
1:b13ead9:  * the License.  You may obtain a copy of the License at
1:b13ead9:  *
1:b13ead9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b13ead9:  *
1:b13ead9:  * Unless required by applicable law or agreed to in writing, software
1:b13ead9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b13ead9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b13ead9:  * See the License for the specific language governing permissions and
1:b13ead9:  * limitations under the License.
2:b13ead9:  */
1:349c59c: package org.apache.carbondata.processing.loading.steps;
12:b13ead9: 
1:b13ead9: import java.io.IOException;
1:b13ead9: import java.util.Iterator;
1:334e647: import java.util.Map;
1:b13ead9: 
1:b13ead9: import org.apache.carbondata.common.logging.LogService;
1:b13ead9: import org.apache.carbondata.common.logging.LogServiceFactory;
1:7158d52: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:334e647: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:b13ead9: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:b13ead9: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
1:334e647: import org.apache.carbondata.core.util.CarbonUtil;
1:5bedd77: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:7f4bd3d: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
1:349c59c: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:349c59c: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:349c59c: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
1:b13ead9: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1:b13ead9: import org.apache.carbondata.processing.store.CarbonFactHandler;
1:b13ead9: import org.apache.carbondata.processing.store.CarbonFactHandlerFactory;
1:b13ead9: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:b13ead9: 
1:b13ead9: /**
1:b13ead9:  * It reads data from batch of sorted files(it could be in-memory/disk based files)
1:b13ead9:  * which are generated in previous sort step. And it writes data to carbondata file.
1:b13ead9:  * It also generates mdk key while writing to carbondata file
1:b13ead9:  */
1:b13ead9: public class DataWriterBatchProcessorStepImpl extends AbstractDataLoadProcessorStep {
1:b13ead9: 
1:b13ead9:   private static final LogService LOGGER =
1:b13ead9:       LogServiceFactory.getLogService(DataWriterBatchProcessorStepImpl.class.getName());
1:b13ead9: 
1:334e647:   private Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap;
1:4a37e05: 
1:4a37e05:   private CarbonFactHandler carbonFactHandler;
1:4a37e05: 
1:b13ead9:   public DataWriterBatchProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:b13ead9:       AbstractDataLoadProcessorStep child) {
1:b13ead9:     super(configuration, child);
1:334e647:     this.localDictionaryGeneratorMap =
1:334e647:         CarbonUtil.getLocalDictionaryModel(configuration.getTableSpec().getCarbonTable());
5:b13ead9:   }
1:b13ead9: 
1:b13ead9:   @Override public void initialize() throws IOException {
1:2b66476:     super.initialize();
1:b13ead9:     child.initialize();
1:b13ead9:   }
1:b13ead9: 
1:5bedd77:   private String[] getStoreLocation(CarbonTableIdentifier tableIdentifier) {
1:5bedd77:     return CarbonDataProcessorUtil.getLocalDataFolderLocation(
1:5bedd77:         tableIdentifier.getDatabaseName(), tableIdentifier.getTableName(),
1:5bedd77:         String.valueOf(configuration.getTaskNo()),
1:5bedd77:         configuration.getSegmentId(), false, false);
1:b13ead9:   }
1:b13ead9: 
1:b13ead9:   @Override public Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException {
1:b13ead9:     Iterator<CarbonRowBatch>[] iterators = child.execute();
1:b13ead9:     CarbonTableIdentifier tableIdentifier =
1:b13ead9:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:b13ead9:     String tableName = tableIdentifier.getTableName();
1:b13ead9:     try {
1:b13ead9:       CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
1:5bedd77:           .recordDictionaryValue2MdkAdd2FileTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:b13ead9:               System.currentTimeMillis());
1:b13ead9:       int i = 0;
1:5bedd77:       String[] storeLocation = getStoreLocation(tableIdentifier);
1:5bedd77:       CarbonDataProcessorUtil.createLocations(storeLocation);
1:b13ead9:       for (Iterator<CarbonRowBatch> iterator : iterators) {
1:b13ead9:         int k = 0;
1:b13ead9:         while (iterator.hasNext()) {
1:b13ead9:           CarbonRowBatch next = iterator.next();
1:0205fa6:           // If no rows from merge sorter, then don't create a file in fact column handler
1:0205fa6:           if (next.hasNext()) {
1:7f4bd3d:             DataMapWriterListener listener = getDataMapWriterListener(0);
1:0205fa6:             CarbonFactDataHandlerModel model = CarbonFactDataHandlerModel
1:f911403:                 .createCarbonFactDataHandlerModel(configuration, storeLocation, i, k++, listener);
1:334e647:             model.setColumnLocalDictGenMap(this.localDictionaryGeneratorMap);
1:4a37e05:             this.carbonFactHandler = CarbonFactHandlerFactory
1:f911403:                 .createCarbonFactHandler(model);
1:4a37e05:             carbonFactHandler.initialise();
1:4a37e05:             processBatch(next, carbonFactHandler);
1:7158d52:             try {
1:7158d52:               finish(tableName, carbonFactHandler);
1:7158d52:             } finally {
1:7158d52:               // we need to make carbonFactHandler =null as finish will call closehandler
1:7158d52:               // even finish throws exception
1:7158d52:               // otherwise close() will call finish method again for same handler.
1:7158d52:               this.carbonFactHandler = null;
1:7158d52:             }
1:0205fa6:           }
1:b13ead9:         }
1:b13ead9:         i++;
1:b13ead9:       }
1:b13ead9:     } catch (Exception e) {
1:b13ead9:       LOGGER.error(e, "Failed for table: " + tableName + " in DataWriterBatchProcessorStepImpl");
1:2e04c35:       if (e.getCause() instanceof BadRecordFoundException) {
1:2e04c35:         throw new BadRecordFoundException(e.getCause().getMessage());
1:2e04c35:       }
1:b13ead9:       throw new CarbonDataLoadingException("There is an unexpected error: " + e.getMessage());
1:b13ead9:     }
2:b13ead9:     return null;
1:b13ead9:   }
1:b13ead9: 
1:b13ead9:   @Override protected String getStepName() {
1:b13ead9:     return "Data Batch Writer";
1:b13ead9:   }
1:b13ead9: 
1:b13ead9:   private void finish(String tableName, CarbonFactHandler dataHandler) {
1:7158d52:     CarbonDataWriterException exception = null;
1:b13ead9:     try {
1:b13ead9:       dataHandler.finish();
1:b13ead9:     } catch (Exception e) {
1:7158d52:       // if throw exception from here dataHandler will not be closed.
1:7158d52:       // so just holding exception and later throwing exception
1:b13ead9:       LOGGER.error(e, "Failed for table: " + tableName + " in  finishing data handler");
1:7158d52:       exception = new CarbonDataWriterException(
1:7158d52:           "Failed for table: " + tableName + " in  finishing data handler", e);
1:b13ead9:     }
1:b13ead9:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordTotalRecords(rowCounter.get());
1:7158d52:     try {
1:7158d52:       processingComplete(dataHandler);
1:7158d52:     } catch (Exception e) {
1:7158d52:       exception = new CarbonDataWriterException(e.getMessage(), e);
1:7158d52:     }
1:b13ead9:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
1:5bedd77:         .recordDictionaryValue2MdkAdd2FileTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:b13ead9:             System.currentTimeMillis());
1:b13ead9:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
1:5bedd77:         .recordMdkGenerateTotalTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:5bedd77:             System.currentTimeMillis());
1:7158d52:     if (null != exception) {
1:7158d52:       throw exception;
1:7158d52:     }
1:b13ead9:   }
1:b13ead9: 
1:b13ead9:   private void processingComplete(CarbonFactHandler dataHandler) {
1:b13ead9:     if (null != dataHandler) {
1:b13ead9:       try {
1:b13ead9:         dataHandler.closeHandler();
1:b13ead9:       } catch (Exception e) {
1:b13ead9:         LOGGER.error(e);
1:b13ead9:         throw new CarbonDataLoadingException(
1:b13ead9:             "There is an unexpected error while closing data handler", e);
1:b13ead9:       }
1:b13ead9:     }
1:b13ead9:   }
1:b13ead9: 
1:353272e:   private void processBatch(CarbonRowBatch batch, CarbonFactHandler dataHandler) throws Exception {
1:b13ead9:     int batchSize = 0;
1:b13ead9:     while (batch.hasNext()) {
1:b13ead9:       CarbonRow row = batch.next();
1:353272e:       dataHandler.addDataToStore(row);
1:b13ead9:       batchSize++;
1:b13ead9:     }
1:0205fa6:     batch.close();
1:b13ead9:     rowCounter.getAndAdd(batchSize);
1:b13ead9:   }
1:4a37e05: 
1:4a37e05:   @Override public void close() {
1:4a37e05:     if (!closed) {
1:4a37e05:       super.close();
1:4a37e05:       if (null != this.carbonFactHandler) {
1:4a37e05:         carbonFactHandler.finish();
1:4a37e05:         carbonFactHandler.closeHandler();
1:4a37e05:       }
1:4a37e05:     }
1:4a37e05:   }
1:b13ead9: }
============================================================================
author:BJangir
-------------------------------------------------------------------------------
commit:7158d52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
/////////////////////////////////////////////////////////////////////////
1:             try {
1:               finish(tableName, carbonFactHandler);
1:             } finally {
1:               // we need to make carbonFactHandler =null as finish will call closehandler
1:               // even finish throws exception
1:               // otherwise close() will call finish method again for same handler.
1:               this.carbonFactHandler = null;
1:             }
/////////////////////////////////////////////////////////////////////////
1:     CarbonDataWriterException exception = null;
1:       // if throw exception from here dataHandler will not be closed.
1:       // so just holding exception and later throwing exception
1:       exception = new CarbonDataWriterException(
1:           "Failed for table: " + tableName + " in  finishing data handler", e);
1:     try {
1:       processingComplete(dataHandler);
1:     } catch (Exception e) {
1:       exception = new CarbonDataWriterException(e.getMessage(), e);
1:     }
1:     if (null != exception) {
1:       throw exception;
1:     }
author:kumarvishal09
-------------------------------------------------------------------------------
commit:4a37e05
/////////////////////////////////////////////////////////////////////////
1: 
1:   private CarbonFactHandler carbonFactHandler;
1: 
/////////////////////////////////////////////////////////////////////////
1:             this.carbonFactHandler = CarbonFactHandlerFactory
1:             carbonFactHandler.initialise();
1:             processBatch(next, carbonFactHandler);
0:             finish(tableName, carbonFactHandler);
0:             this.carbonFactHandler = null;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override public void close() {
1:     if (!closed) {
1:       super.close();
1:       if (null != this.carbonFactHandler) {
1:         carbonFactHandler.finish();
1:         carbonFactHandler.closeHandler();
1:       }
1:     }
1:   }
commit:334e647
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1: import org.apache.carbondata.core.util.CarbonUtil;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, LocalDictionaryGenerator> localDictionaryGeneratorMap;
1:     this.localDictionaryGeneratorMap =
1:         CarbonUtil.getLocalDictionaryModel(configuration.getTableSpec().getCarbonTable());
/////////////////////////////////////////////////////////////////////////
1:             model.setColumnLocalDictGenMap(this.localDictionaryGeneratorMap);
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 .createCarbonFactDataHandlerModel(configuration, storeLocation, i, k++, listener);
1:                 .createCarbonFactHandler(model);
/////////////////////////////////////////////////////////////////////////
author:akashrn5
-------------------------------------------------------------------------------
commit:7f4bd3d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.datamap.DataMapWriterListener;
/////////////////////////////////////////////////////////////////////////
1:             DataMapWriterListener listener = getDataMapWriterListener(0);
0:                 .createCarbonFactDataHandlerModel(configuration, storeLocation, 0, k++, listener);
author:Jacky Li
-------------------------------------------------------------------------------
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
1:   private String[] getStoreLocation(CarbonTableIdentifier tableIdentifier) {
1:     return CarbonDataProcessorUtil.getLocalDataFolderLocation(
1:         tableIdentifier.getDatabaseName(), tableIdentifier.getTableName(),
1:         String.valueOf(configuration.getTaskNo()),
1:         configuration.getSegmentId(), false, false);
/////////////////////////////////////////////////////////////////////////
1:           .recordDictionaryValue2MdkAdd2FileTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:       String[] storeLocation = getStoreLocation(tableIdentifier);
1:       CarbonDataProcessorUtil.createLocations(storeLocation);
0:                 .createCarbonFactDataHandlerModel(configuration, storeLocation, 0, k++);
/////////////////////////////////////////////////////////////////////////
1:         .recordDictionaryValue2MdkAdd2FileTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:         .recordMdkGenerateTotalTime(CarbonTablePath.DEPRECATED_PATITION_ID,
1:             System.currentTimeMillis());
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.steps;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.AbstractDataLoadProcessorStep;
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.exception.BadRecordFoundException;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1: import org.apache.carbondata.processing.loading.row.CarbonRowBatch;
author:kunal642
-------------------------------------------------------------------------------
commit:2e04c35
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.exception.BadRecordFoundException;
/////////////////////////////////////////////////////////////////////////
1:       if (e.getCause() instanceof BadRecordFoundException) {
1:         throw new BadRecordFoundException(e.getCause().getMessage());
1:       }
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
0:             configuration.getSegmentId() + "", false, false);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private String[] getStoreLocation(CarbonTableIdentifier tableIdentifier, String partitionId) {
0:     String[] storeLocation = CarbonDataProcessorUtil
0:     CarbonDataProcessorUtil.createLocations(storeLocation);
/////////////////////////////////////////////////////////////////////////
0:         String[] storeLocation = getStoreLocation(tableIdentifier, String.valueOf(i));
author:manishgupta88
-------------------------------------------------------------------------------
commit:2b66476
/////////////////////////////////////////////////////////////////////////
1:     super.initialize();
author:dhatchayani
-------------------------------------------------------------------------------
commit:0205fa6
/////////////////////////////////////////////////////////////////////////
1:           // If no rows from merge sorter, then don't create a file in fact column handler
1:           if (next.hasNext()) {
1:             CarbonFactDataHandlerModel model = CarbonFactDataHandlerModel
0:                 .createCarbonFactDataHandlerModel(configuration, storeLocation, i, k++);
0:             CarbonFactHandler dataHandler = CarbonFactHandlerFactory
0:                 .createCarbonFactHandler(model, CarbonFactHandlerFactory.FactHandlerType.COLUMNAR);
0:             dataHandler.initialise();
0:             processBatch(next, dataHandler);
0:             finish(tableName, dataHandler);
1:           }
/////////////////////////////////////////////////////////////////////////
1:     batch.close();
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
commit:353272e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           processBatch(next, dataHandler);
/////////////////////////////////////////////////////////////////////////
1:   private void processBatch(CarbonRowBatch batch, CarbonFactHandler dataHandler) throws Exception {
1:       dataHandler.addDataToStore(row);
author:ravipesala
-------------------------------------------------------------------------------
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.steps;
1: 
0: import java.io.File;
1: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.constants.IgnoreDictionary;
0: import org.apache.carbondata.core.datastore.block.SegmentProperties;
0: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1: import org.apache.carbondata.core.util.CarbonTimeStatisticsFactory;
0: import org.apache.carbondata.processing.newflow.AbstractDataLoadProcessorStep;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
0: import org.apache.carbondata.processing.newflow.row.CarbonRowBatch;
1: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1: import org.apache.carbondata.processing.store.CarbonFactHandler;
1: import org.apache.carbondata.processing.store.CarbonFactHandlerFactory;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: 
1: /**
1:  * It reads data from batch of sorted files(it could be in-memory/disk based files)
1:  * which are generated in previous sort step. And it writes data to carbondata file.
1:  * It also generates mdk key while writing to carbondata file
1:  */
1: public class DataWriterBatchProcessorStepImpl extends AbstractDataLoadProcessorStep {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(DataWriterBatchProcessorStepImpl.class.getName());
1: 
0:   private int noDictionaryCount;
1: 
0:   private int complexDimensionCount;
1: 
0:   private int measureCount;
1: 
0:   private int measureIndex = IgnoreDictionary.MEASURES_INDEX_IN_ROW.getIndex();
1: 
0:   private int noDimByteArrayIndex = IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex();
1: 
0:   private int dimsArrayIndex = IgnoreDictionary.DIMENSION_INDEX_IN_ROW.getIndex();
1: 
1:   public DataWriterBatchProcessorStepImpl(CarbonDataLoadConfiguration configuration,
1:       AbstractDataLoadProcessorStep child) {
1:     super(configuration, child);
1:   }
1: 
0:   @Override public DataField[] getOutput() {
0:     return child.getOutput();
1:   }
1: 
1:   @Override public void initialize() throws IOException {
1:     child.initialize();
1:   }
1: 
0:   private String getStoreLocation(CarbonTableIdentifier tableIdentifier, String partitionId) {
0:     String storeLocation = CarbonDataProcessorUtil
0:         .getLocalDataFolderLocation(tableIdentifier.getDatabaseName(),
0:             tableIdentifier.getTableName(), String.valueOf(configuration.getTaskNo()), partitionId,
0:             configuration.getSegmentId() + "", false);
0:     new File(storeLocation).mkdirs();
0:     return storeLocation;
1:   }
1: 
1:   @Override public Iterator<CarbonRowBatch>[] execute() throws CarbonDataLoadingException {
1:     Iterator<CarbonRowBatch>[] iterators = child.execute();
1:     CarbonTableIdentifier tableIdentifier =
1:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:     String tableName = tableIdentifier.getTableName();
1:     try {
0:       CarbonFactDataHandlerModel dataHandlerModel = CarbonFactDataHandlerModel
0:           .createCarbonFactDataHandlerModel(configuration,
0:               getStoreLocation(tableIdentifier, String.valueOf(0)), 0, 0);
0:       noDictionaryCount = dataHandlerModel.getNoDictionaryCount();
0:       complexDimensionCount = configuration.getComplexDimensionCount();
0:       measureCount = dataHandlerModel.getMeasureCount();
1: 
1:       CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
0:           .recordDictionaryValue2MdkAdd2FileTime(configuration.getPartitionId(),
1:               System.currentTimeMillis());
1:       int i = 0;
1:       for (Iterator<CarbonRowBatch> iterator : iterators) {
0:         String storeLocation = getStoreLocation(tableIdentifier, String.valueOf(i));
1:         int k = 0;
1:         while (iterator.hasNext()) {
1:           CarbonRowBatch next = iterator.next();
0:           CarbonFactDataHandlerModel model = CarbonFactDataHandlerModel
0:               .createCarbonFactDataHandlerModel(configuration, storeLocation, i, k++);
0:           CarbonFactHandler dataHandler = CarbonFactHandlerFactory
0:               .createCarbonFactHandler(model, CarbonFactHandlerFactory.FactHandlerType.COLUMNAR);
0:           dataHandler.initialise();
0:           processBatch(next, dataHandler, model.getSegmentProperties());
0:           finish(tableName, dataHandler);
1:         }
1:         i++;
1:       }
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Failed for table: " + tableName + " in DataWriterBatchProcessorStepImpl");
1:       throw new CarbonDataLoadingException("There is an unexpected error: " + e.getMessage());
1:     }
1:     return null;
1:   }
1: 
1:   @Override protected String getStepName() {
1:     return "Data Batch Writer";
1:   }
1: 
1:   private void finish(String tableName, CarbonFactHandler dataHandler) {
1:     try {
1:       dataHandler.finish();
1:     } catch (Exception e) {
1:       LOGGER.error(e, "Failed for table: " + tableName + " in  finishing data handler");
1:     }
1:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordTotalRecords(rowCounter.get());
0:     processingComplete(dataHandler);
1:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
0:         .recordDictionaryValue2MdkAdd2FileTime(configuration.getPartitionId(),
1:             System.currentTimeMillis());
1:     CarbonTimeStatisticsFactory.getLoadStatisticsInstance()
0:         .recordMdkGenerateTotalTime(configuration.getPartitionId(), System.currentTimeMillis());
1:   }
1: 
1:   private void processingComplete(CarbonFactHandler dataHandler) {
1:     if (null != dataHandler) {
1:       try {
1:         dataHandler.closeHandler();
1:       } catch (Exception e) {
1:         LOGGER.error(e);
1:         throw new CarbonDataLoadingException(
1:             "There is an unexpected error while closing data handler", e);
1:       }
1:     }
1:   }
1: 
0:   private void processBatch(CarbonRowBatch batch, CarbonFactHandler dataHandler,
0:       SegmentProperties segmentProperties) throws Exception {
1:     int batchSize = 0;
0:     KeyGenerator keyGenerator = segmentProperties.getDimensionKeyGenerator();
1:     while (batch.hasNext()) {
1:       CarbonRow row = batch.next();
1:       batchSize++;
1:       /*
0:       * The order of the data is as follows,
0:       * Measuredata, nodictionary/complex byte array data, dictionary(MDK generated key)
1:       */
0:       int len;
0:       // adding one for the high cardinality dims byte array.
0:       if (noDictionaryCount > 0 || complexDimensionCount > 0) {
0:         len = measureCount + 1 + 1;
0:       } else {
0:         len = measureCount + 1;
1:       }
0:       Object[] outputRow = new Object[len];;
1: 
0:       int l = 0;
0:       Object[] measures = row.getObjectArray(measureIndex);
0:       for (int i = 0; i < measureCount; i++) {
0:         outputRow[l++] = measures[i];
1:       }
0:       outputRow[l] = row.getObject(noDimByteArrayIndex);
0:       outputRow[len - 1] = keyGenerator.generateKey(row.getIntArray(dimsArrayIndex));
0:       dataHandler.addDataToStore(outputRow);
1:     }
1:     rowCounter.getAndAdd(batchSize);
1:   }
1: 
0:   @Override protected CarbonRow processRow(CarbonRow row) {
1:     return null;
1:   }
1: 
1: }
============================================================================