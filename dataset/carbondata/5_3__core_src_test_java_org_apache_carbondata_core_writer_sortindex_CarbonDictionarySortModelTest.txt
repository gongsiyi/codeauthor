1:d828604: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d828604:  *
1:d828604:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d828604:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d828604:  */
1:d828604: package org.apache.carbondata.core.writer.sortindex;
1:d828604: 
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:d828604: 
1:d828604: import org.junit.Test;
1:d828604: 
1:d828604: import static org.junit.Assert.assertEquals;
1:d828604: import static org.junit.Assert.assertFalse;
1:d828604: import static org.junit.Assert.assertTrue;
1:d828604: 
1:d828604: /**
1:d828604:  * This class tests the Dictionary sort model class that holds the member byte value and corresponding key value.
1:d828604:  */
1:d828604: public class CarbonDictionarySortModelTest {
1:d828604: 
1:d828604:   private CarbonDictionarySortModel carbonDictionarySortModel = null;
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDoubleCase() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "7234");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "5678");
1:d828604:     int expectedResult = 1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDoubleExceptionCase() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "double");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "@NU#LL$!");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDoubleExceptionCaseForOtherObject() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "1234");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "@NU#LL$!");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeBooleanCase() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "memberValue");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "value");
1:d828604:     int expectedResult = -9;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDecimalCase() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "72.34");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:f209e8e:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "56.78");
1:d828604:     int expectedResult = 1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDecimalExceptionCase() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "decimal");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:f209e8e:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "@NU#LL$!");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDecimalExceptionCaseForOtherObject() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:f209e8e:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "@NU#LL$!");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeTimestampCase() {
1:d828604:     carbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2015-09-22 12:08:49");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeTimestampExceptionCase() {
1:d828604:     carbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09 12:00:00");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "@NU#LL$!");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeTimestampExceptionCaseForOtherObject() {
1:d828604:     carbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2014-09-22 12");
1:d828604:     int expectedResult = -1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testHashCode() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:d828604:     int actualResult = carbonDictionarySortModel.hashCode();
1:d828604:     int expectedResult = 46877260;
1:d828604:     assertTrue(actualResult == expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testHashCodeNullCaseForMemberValue() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), null);
1:d828604:     int actualResult = carbonDictionarySortModel.hashCode();
1:d828604:     int expectedResult = 0;
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testEquals() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel = carbonDictionarySortModel;
1:d828604:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:d828604:     assertTrue(result);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testEqualsMemberValueNullCase() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), null);
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "false");
1:d828604:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:d828604:     assertFalse(result);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testEqualsWhenMemberValueDiffers() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "false");
1:d828604:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:d828604:     assertFalse(result);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testEqualsWhenMemberValueIsSame() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:f209e8e:         new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:d828604:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:d828604:     assertTrue(result);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testEqualsForDifferentObjects() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:d828604:     Object testCarbonDictionarySortModel = new Object();
1:d828604:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:d828604:     assertFalse(result);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDoubleExceptionCaseForDifferentObject() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "double");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "1234");
1:d828604:     int expectedResult = 1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeDecimalExceptionCaseForDifferentObject() {
1:f209e8e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.il");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:f209e8e:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "12.89");
1:d828604:     int expectedResult = 1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604:   @Test public void testCompareToForDataTypeTimestampExceptionCaseForDifferentObject() {
1:956833e:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09");
1:d828604:     CarbonDictionarySortModel testCarbonDictionarySortModel =
1:956833e:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
1:d828604:     int expectedResult = 1;
1:d828604:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:d828604:     assertEquals(actualResult, expectedResult);
1:d828604:   }
1:d828604: 
1:d828604: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "72.34");
1:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "56.78");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "decimal");
1:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "@NU#LL$!");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "@NU#LL$!");
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), null);
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "15.24");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), null);
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:         new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.45");
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.createDefaultDecimalType(), "12.il");
1:         new CarbonDictionarySortModel(2, DataTypes.createDefaultDecimalType(), "12.89");
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "7234");
1:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "5678");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "double");
1:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "@NU#LL$!");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "1234");
1:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "@NU#LL$!");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "memberValue");
1:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "value");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "72.34");
0:         new CarbonDictionarySortModel(2, DataTypes.DECIMAL, "56.78");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "decimal");
0:         new CarbonDictionarySortModel(2, DataTypes.DECIMAL, "@NU#LL$!");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "15.24");
0:         new CarbonDictionarySortModel(2, DataTypes.DECIMAL, "@NU#LL$!");
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
1:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2015-09-22 12:08:49");
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09 12:00:00");
1:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "@NU#LL$!");
/////////////////////////////////////////////////////////////////////////
1:         new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
1:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2014-09-22 12");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "15.24");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, null);
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "15.24");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, null);
1:         new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "false");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "12.45");
1:         new CarbonDictionarySortModel(1, DataTypes.BOOLEAN, "false");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "12.45");
0:         new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "12.45");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "12.45");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DOUBLE, "double");
1:         new CarbonDictionarySortModel(2, DataTypes.DOUBLE, "1234");
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.DECIMAL, "12.il");
0:         new CarbonDictionarySortModel(2, DataTypes.DECIMAL, "12.89");
1:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataTypes.TIMESTAMP, "2014-09");
1:         new CarbonDictionarySortModel(2, DataTypes.TIMESTAMP, "2014-09-22 12:00:00");
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
author:Geetika gupta
-------------------------------------------------------------------------------
commit:d828604
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * This class tests the Dictionary sort model class that holds the member byte value and corresponding key value.
1:  */
1: public class CarbonDictionarySortModelTest {
1: 
1:   private CarbonDictionarySortModel carbonDictionarySortModel = null;
1: 
1:   @Test public void testCompareToForDataTypeDoubleCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DOUBLE, "7234");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DOUBLE, "5678");
1:     int expectedResult = 1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDoubleExceptionCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DOUBLE, "double");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DOUBLE, "@NU#LL$!");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDoubleExceptionCaseForOtherObject() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DOUBLE, "1234");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DOUBLE, "@NU#LL$!");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeBooleanCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.BOOLEAN, "memberValue");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DOUBLE, "value");
1:     int expectedResult = -9;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDecimalCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "72.34");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DECIMAL, "56.78");
1:     int expectedResult = 1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDecimalExceptionCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "decimal");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DECIMAL, "@NU#LL$!");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDecimalExceptionCaseForOtherObject() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "15.24");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DECIMAL, "@NU#LL$!");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeTimestampCase() {
1:     carbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.TIMESTAMP, "2014-09-22 12:00:00");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.TIMESTAMP, "2015-09-22 12:08:49");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeTimestampExceptionCase() {
1:     carbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.TIMESTAMP, "2014-09 12:00:00");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.TIMESTAMP, "@NU#LL$!");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeTimestampExceptionCaseForOtherObject() {
1:     carbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.TIMESTAMP, "2014-09-22 12:00:00");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.TIMESTAMP, "2014-09-22 12");
1:     int expectedResult = -1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testHashCode() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "15.24");
1:     int actualResult = carbonDictionarySortModel.hashCode();
1:     int expectedResult = 46877260;
1:     assertTrue(actualResult == expectedResult);
1:   }
1: 
1:   @Test public void testHashCodeNullCaseForMemberValue() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, null);
1:     int actualResult = carbonDictionarySortModel.hashCode();
1:     int expectedResult = 0;
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testEquals() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "15.24");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel = carbonDictionarySortModel;
1:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:     assertTrue(result);
1:   }
1: 
1:   @Test public void testEqualsMemberValueNullCase() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, null);
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.BOOLEAN, "false");
1:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:     assertFalse(result);
1:   }
1: 
1:   @Test public void testEqualsWhenMemberValueDiffers() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "12.45");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.BOOLEAN, "false");
1:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:     assertFalse(result);
1:   }
1: 
1:   @Test public void testEqualsWhenMemberValueIsSame() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "12.45");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(1, DataType.DECIMAL, "12.45");
1:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:     assertTrue(result);
1:   }
1: 
1:   @Test public void testEqualsForDifferentObjects() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "12.45");
1:     Object testCarbonDictionarySortModel = new Object();
1:     boolean result = carbonDictionarySortModel.equals(testCarbonDictionarySortModel);
1:     assertFalse(result);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDoubleExceptionCaseForDifferentObject() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DOUBLE, "double");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DOUBLE, "1234");
1:     int expectedResult = 1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeDecimalExceptionCaseForDifferentObject() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.DECIMAL, "12.il");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.DECIMAL, "12.89");
1:     int expectedResult = 1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1:   @Test public void testCompareToForDataTypeTimestampExceptionCaseForDifferentObject() {
0:     carbonDictionarySortModel = new CarbonDictionarySortModel(1, DataType.TIMESTAMP, "2014-09");
1:     CarbonDictionarySortModel testCarbonDictionarySortModel =
0:         new CarbonDictionarySortModel(2, DataType.TIMESTAMP, "2014-09-22 12:00:00");
1:     int expectedResult = 1;
1:     int actualResult = carbonDictionarySortModel.compareTo(testCarbonDictionarySortModel);
1:     assertEquals(actualResult, expectedResult);
1:   }
1: 
1: }
============================================================================