1:36e14e5: /*
1:36e14e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:36e14e5:  * contributor license agreements.  See the NOTICE file distributed with
1:36e14e5:  * this work for additional information regarding copyright ownership.
1:36e14e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:36e14e5:  * (the "License"); you may not use this file except in compliance with
1:36e14e5:  * the License.  You may obtain a copy of the License at
1:36e14e5:  *
1:36e14e5:  *    http://www.apache.org/licenses/LICENSE-2.0
1:36e14e5:  *
1:36e14e5:  * Unless required by applicable law or agreed to in writing, software
1:36e14e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:36e14e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:36e14e5:  * See the License for the specific language governing permissions and
1:36e14e5:  * limitations under the License.
1:36e14e5:  */
1:b0d24ea: package org.apache.carbondata.core.localdictionary;
1:b0d24ea: 
1:b0d24ea: import java.io.IOException;
1:b0d24ea: import java.nio.ByteBuffer;
1:b0d24ea: import java.util.Arrays;
1:b0d24ea: import java.util.BitSet;
1:b0d24ea: import java.util.List;
1:b0d24ea: 
1:b0d24ea: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b0d24ea: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:b0d24ea: import org.apache.carbondata.core.datastore.page.ColumnPage;
1:b0d24ea: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1:b0d24ea: import org.apache.carbondata.core.datastore.page.encoding.DefaultEncodingFactory;
1:b0d24ea: import org.apache.carbondata.core.datastore.page.encoding.EncodingFactory;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.generator.ColumnLocalDictionaryGenerator;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:b0d24ea: import org.apache.carbondata.core.memory.MemoryException;
1:b0d24ea: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b0d24ea: import org.apache.carbondata.format.Encoding;
1:b0d24ea: import org.apache.carbondata.format.LocalDictionaryChunk;
1:b0d24ea: 
1:b0d24ea: import org.junit.Assert;
1:b0d24ea: import org.junit.Test;
1:b0d24ea: 
1:b0d24ea: public class TestPageLevelDictionary {
1:8f08c4a:   private String compressorName = CompressorFactory.getInstance().getCompressor(
1:8f08c4a:       CarbonCommonConstants.DEFAULT_COMPRESSOR).getName();
1:b0d24ea: 
1:b0d24ea:   @Test public void testPageLevelDictionaryGenerateDataIsGenertingProperDictionaryValues() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:b0d24ea:     String columnName = "column1";
1:b0d24ea:     PageLevelDictionary pageLevelDictionary = new PageLevelDictionary(generator, columnName,
1:8f08c4a:         DataTypes.STRING, false, compressorName);
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 1000; i++) {
1:b0d24ea:         Assert.assertTrue((i + 1) == pageLevelDictionary.getDictionaryValue(("" + i).getBytes()));
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:   }
1:b0d24ea: 
1:b0d24ea:   @Test public void testPageLevelDictionaryContainsOnlyUsedDictionaryValues() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:b0d24ea:     String columnName = "column1";
1:8f08c4a:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(
1:8f08c4a:         generator, columnName, DataTypes.STRING, false, compressorName);
1:b0d24ea:     byte[][] validateData = new byte[500][];
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 500; i++) {
1:b0d24ea:         byte[] data = ("vishal" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         validateData[i - 1] = data;
1:b0d24ea:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:8f08c4a:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(
1:8f08c4a:         generator, columnName, DataTypes.STRING, false, compressorName);
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 500; i++) {
1:b0d24ea:         byte[] data = ("vikas" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:     try {
1:b0d24ea:       LocalDictionaryChunk localDictionaryChunkForBlocklet =
1:b0d24ea:           pageLevelDictionary1.getLocalDictionaryChunkForBlocklet();
1:b0d24ea:       List<Encoding> encodings = localDictionaryChunkForBlocklet.getDictionary_meta().getEncoders();
1:b0d24ea:       EncodingFactory encodingFactory = DefaultEncodingFactory.getInstance();
1:b0d24ea:       List<ByteBuffer> encoderMetas =
1:b0d24ea:           localDictionaryChunkForBlocklet.getDictionary_meta().getEncoder_meta();
1:8f08c4a:       ColumnPageDecoder decoder = encodingFactory.createDecoder(
1:8f08c4a:           encodings, encoderMetas, compressorName);
1:b0d24ea:       ColumnPage decode = decoder.decode(localDictionaryChunkForBlocklet.getDictionary_data(), 0,
1:b0d24ea:           localDictionaryChunkForBlocklet.getDictionary_data().length);
1:b0d24ea:       for (int i = 0; i < 500; i++) {
1:b0d24ea:         Arrays.equals(decode.getBytes(i), validateData[i]);
1:b0d24ea:       }
1:b0d24ea:     } catch (MemoryException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     } catch (IOException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:   }
1:b0d24ea: 
1:b0d24ea:   @Test
1:b0d24ea:   public void testPageLevelDictionaryContainsOnlyUsedDictionaryValuesWhenMultiplePagesUseSameDictionary() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:b0d24ea:     String columnName = "column1";
1:8f08c4a:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(
1:8f08c4a:         generator, columnName, DataTypes.STRING, false, compressorName);
1:b0d24ea:     byte[][] validateData = new byte[10][];
1:b0d24ea:     int index = 0;
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 5; i++) {
1:b0d24ea:         byte[] data = ("vishal" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         validateData[index] = data;
1:b0d24ea:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:b0d24ea:         index++;
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:8f08c4a:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(
1:8f08c4a:         generator, columnName, DataTypes.STRING, false, compressorName);
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 5; i++) {
1:b0d24ea:         byte[] data = ("vikas" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 6; i <= 10; i++) {
1:b0d24ea:         byte[] data = ("vishal" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         validateData[index] = data;
1:b0d24ea:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:b0d24ea:         index++;
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 6; i <= 10; i++) {
1:b0d24ea:         byte[] data = ("vikas" + i).getBytes();
1:b0d24ea:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:b0d24ea:         byteBuffer.putShort((short)data.length);
1:b0d24ea:         byteBuffer.put(data);
1:b0d24ea:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:     try {
1:b0d24ea:       LocalDictionaryChunk localDictionaryChunkForBlocklet =
1:b0d24ea:           pageLevelDictionary1.getLocalDictionaryChunkForBlocklet();
1:b0d24ea:       List<Encoding> encodings = localDictionaryChunkForBlocklet.getDictionary_meta().getEncoders();
1:b0d24ea:       EncodingFactory encodingFactory = DefaultEncodingFactory.getInstance();
1:b0d24ea:       List<ByteBuffer> encoderMetas =
1:b0d24ea:           localDictionaryChunkForBlocklet.getDictionary_meta().getEncoder_meta();
1:8f08c4a:       ColumnPageDecoder decoder = encodingFactory.createDecoder(
1:8f08c4a:           encodings, encoderMetas, compressorName);
1:b0d24ea:       ColumnPage decode = decoder.decode(localDictionaryChunkForBlocklet.getDictionary_data(), 0,
1:b0d24ea:           localDictionaryChunkForBlocklet.getDictionary_data().length);
1:8f08c4a:       BitSet bitSet = BitSet.valueOf(CompressorFactory.getInstance().getCompressor(compressorName)
1:b0d24ea:           .unCompressByte(localDictionaryChunkForBlocklet.getDictionary_values()));
1:b0d24ea:       Assert.assertTrue(bitSet.cardinality()==validateData.length);
1:b0d24ea:       for(int i =0; i<validateData.length;i++) {
1:b0d24ea:         Assert.assertTrue(Arrays.equals(decode.getBytes(i), validateData[i]));
1:b0d24ea:       }
1:b0d24ea:     } catch (MemoryException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     } catch (IOException e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea:   }
1:b0d24ea: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   private String compressorName = CompressorFactory.getInstance().getCompressor(
1:       CarbonCommonConstants.DEFAULT_COMPRESSOR).getName();
1:         DataTypes.STRING, false, compressorName);
/////////////////////////////////////////////////////////////////////////
1:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(
1:         generator, columnName, DataTypes.STRING, false, compressorName);
/////////////////////////////////////////////////////////////////////////
1:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(
1:         generator, columnName, DataTypes.STRING, false, compressorName);
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageDecoder decoder = encodingFactory.createDecoder(
1:           encodings, encoderMetas, compressorName);
/////////////////////////////////////////////////////////////////////////
1:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(
1:         generator, columnName, DataTypes.STRING, false, compressorName);
/////////////////////////////////////////////////////////////////////////
1:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(
1:         generator, columnName, DataTypes.STRING, false, compressorName);
/////////////////////////////////////////////////////////////////////////
1:       ColumnPageDecoder decoder = encodingFactory.createDecoder(
1:           encodings, encoderMetas, compressorName);
1:       BitSet bitSet = BitSet.valueOf(CompressorFactory.getInstance().getCompressor(compressorName)
author:akashrn5
-------------------------------------------------------------------------------
commit:36e14e5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:4935cb1
/////////////////////////////////////////////////////////////////////////
0:         DataTypes.STRING, false);
/////////////////////////////////////////////////////////////////////////
0:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(generator, columnName, DataTypes.STRING, false);
/////////////////////////////////////////////////////////////////////////
0:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(generator, columnName, DataTypes.STRING, false);
/////////////////////////////////////////////////////////////////////////
0:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(generator, columnName, DataTypes.STRING, false);
/////////////////////////////////////////////////////////////////////////
0:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(generator, columnName, DataTypes.STRING, false);
commit:b0d24ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.localdictionary;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.BitSet;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.datastore.page.ColumnPage;
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageDecoder;
1: import org.apache.carbondata.core.datastore.page.encoding.DefaultEncodingFactory;
1: import org.apache.carbondata.core.datastore.page.encoding.EncodingFactory;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: import org.apache.carbondata.core.localdictionary.generator.ColumnLocalDictionaryGenerator;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1: import org.apache.carbondata.core.memory.MemoryException;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.format.Encoding;
1: import org.apache.carbondata.format.LocalDictionaryChunk;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class TestPageLevelDictionary {
1: 
1:   @Test public void testPageLevelDictionaryGenerateDataIsGenertingProperDictionaryValues() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     String columnName = "column1";
1:     PageLevelDictionary pageLevelDictionary = new PageLevelDictionary(generator, columnName,
0:         DataTypes.STRING);
1:     try {
1:       for (int i = 1; i <= 1000; i++) {
1:         Assert.assertTrue((i + 1) == pageLevelDictionary.getDictionaryValue(("" + i).getBytes()));
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
1:   }
1: 
1:   @Test public void testPageLevelDictionaryContainsOnlyUsedDictionaryValues() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     String columnName = "column1";
0:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(generator, columnName, DataTypes.STRING);
1:     byte[][] validateData = new byte[500][];
1:     try {
1:       for (int i = 1; i <= 500; i++) {
1:         byte[] data = ("vishal" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         validateData[i - 1] = data;
1:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
0:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(generator, columnName, DataTypes.STRING);
1:     try {
1:       for (int i = 1; i <= 500; i++) {
1:         byte[] data = ("vikas" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
1:     try {
1:       LocalDictionaryChunk localDictionaryChunkForBlocklet =
1:           pageLevelDictionary1.getLocalDictionaryChunkForBlocklet();
1:       List<Encoding> encodings = localDictionaryChunkForBlocklet.getDictionary_meta().getEncoders();
1:       EncodingFactory encodingFactory = DefaultEncodingFactory.getInstance();
1:       List<ByteBuffer> encoderMetas =
1:           localDictionaryChunkForBlocklet.getDictionary_meta().getEncoder_meta();
0:       ColumnPageDecoder decoder = encodingFactory.createDecoder(encodings, encoderMetas);
1:       ColumnPage decode = decoder.decode(localDictionaryChunkForBlocklet.getDictionary_data(), 0,
1:           localDictionaryChunkForBlocklet.getDictionary_data().length);
1:       for (int i = 0; i < 500; i++) {
1:         Arrays.equals(decode.getBytes(i), validateData[i]);
1:       }
1:     } catch (MemoryException e) {
1:       Assert.assertTrue(false);
1:     } catch (IOException e) {
1:       Assert.assertTrue(false);
1:     }
1:   }
1: 
1:   @Test
1:   public void testPageLevelDictionaryContainsOnlyUsedDictionaryValuesWhenMultiplePagesUseSameDictionary() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     String columnName = "column1";
0:     PageLevelDictionary pageLevelDictionary1 = new PageLevelDictionary(generator, columnName, DataTypes.STRING);
1:     byte[][] validateData = new byte[10][];
1:     int index = 0;
1:     try {
1:       for (int i = 1; i <= 5; i++) {
1:         byte[] data = ("vishal" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         validateData[index] = data;
1:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:         index++;
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
0:     PageLevelDictionary pageLevelDictionary2 = new PageLevelDictionary(generator, columnName, DataTypes.STRING);
1:     try {
1:       for (int i = 1; i <= 5; i++) {
1:         byte[] data = ("vikas" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
1:     try {
1:       for (int i = 6; i <= 10; i++) {
1:         byte[] data = ("vishal" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         validateData[index] = data;
1:         pageLevelDictionary1.getDictionaryValue(byteBuffer.array());
1:         index++;
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
1:     try {
1:       for (int i = 6; i <= 10; i++) {
1:         byte[] data = ("vikas" + i).getBytes();
1:         ByteBuffer byteBuffer = ByteBuffer.allocate(data.length + 2);
1:         byteBuffer.putShort((short)data.length);
1:         byteBuffer.put(data);
1:         pageLevelDictionary2.getDictionaryValue(byteBuffer.array());
1:       }
1:       Assert.assertTrue(true);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(false);
1:     }
1:     try {
1:       LocalDictionaryChunk localDictionaryChunkForBlocklet =
1:           pageLevelDictionary1.getLocalDictionaryChunkForBlocklet();
1:       List<Encoding> encodings = localDictionaryChunkForBlocklet.getDictionary_meta().getEncoders();
1:       EncodingFactory encodingFactory = DefaultEncodingFactory.getInstance();
1:       List<ByteBuffer> encoderMetas =
1:           localDictionaryChunkForBlocklet.getDictionary_meta().getEncoder_meta();
0:       ColumnPageDecoder decoder = encodingFactory.createDecoder(encodings, encoderMetas);
1:       ColumnPage decode = decoder.decode(localDictionaryChunkForBlocklet.getDictionary_data(), 0,
1:           localDictionaryChunkForBlocklet.getDictionary_data().length);
0:       BitSet bitSet = BitSet.valueOf(CompressorFactory.getInstance().getCompressor()
1:           .unCompressByte(localDictionaryChunkForBlocklet.getDictionary_values()));
1:       Assert.assertTrue(bitSet.cardinality()==validateData.length);
1:       for(int i =0; i<validateData.length;i++) {
1:         Assert.assertTrue(Arrays.equals(decode.getBytes(i), validateData[i]));
1:       }
1:     } catch (MemoryException e) {
1:       Assert.assertTrue(false);
1:     } catch (IOException e) {
1:       Assert.assertTrue(false);
1:     }
1:   }
1: }
author:ravipesala
-------------------------------------------------------------------------------
commit:589fe18
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
============================================================================