1:b681244: /*
1:b681244:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b681244:  * contributor license agreements.  See the NOTICE file distributed with
1:b681244:  * this work for additional information regarding copyright ownership.
1:b681244:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b681244:  * (the "License"); you may not use this file except in compliance with
1:b681244:  * the License.  You may obtain a copy of the License at
1:b681244:  *
1:b681244:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b681244:  *
1:b681244:  * Unless required by applicable law or agreed to in writing, software
1:b681244:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b681244:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b681244:  * See the License for the specific language governing permissions and
1:b681244:  * limitations under the License.
1:b681244:  */
1:b681244: package org.apache.carbondata.core.indexstore.row;
1:b681244: 
1:531ecdf: import java.io.Serializable;
1:531ecdf: 
1:cc0e6f1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
1:b681244: 
1:b681244: /**
1:b681244:  * It is just a normal row to store data. Implementation classes could be safe and unsafe.
1:b681244:  * TODO move this class a global row and use across loading after DataType is changed class
1:b681244:  */
1:531ecdf: public abstract class DataMapRow implements Serializable {
1:b681244: 
1:f4a58c5:   /**
1:f4a58c5:    * This is made transient as it is temporary and should not be serialized
1:f4a58c5:    */
1:f4a58c5:   protected transient CarbonRowSchema[] schemas;
1:b681244: 
1:cc0e6f1:   public DataMapRow(CarbonRowSchema[] schemas) {
1:b681244:     this.schemas = schemas;
1:b681244:   }
1:b681244: 
1:b681244:   public abstract byte[] getByteArray(int ordinal);
1:b681244: 
1:b681244:   public abstract DataMapRow getRow(int ordinal);
1:b681244: 
1:b681244:   public abstract void setRow(DataMapRow row, int ordinal);
1:b681244: 
1:b681244:   public abstract void setByteArray(byte[] byteArray, int ordinal);
1:b681244: 
1:b681244:   public abstract int getInt(int ordinal);
1:b681244: 
1:b681244:   public abstract void setInt(int value, int ordinal);
1:b681244: 
1:b681244:   public abstract void setByte(byte value, int ordinal);
1:b681244: 
1:b681244:   public abstract byte getByte(int ordinal);
1:b681244: 
1:b681244:   public abstract void setShort(short value, int ordinal);
1:b681244: 
1:b681244:   public abstract short getShort(int ordinal);
1:b681244: 
1:b681244:   public abstract void setLong(long value, int ordinal);
1:b681244: 
1:b681244:   public abstract long getLong(int ordinal);
1:b681244: 
1:b681244:   public abstract void setFloat(float value, int ordinal);
1:b681244: 
1:b681244:   public abstract float getFloat(int ordinal);
1:b681244: 
1:b681244:   public abstract void setDouble(double value, int ordinal);
1:b681244: 
1:b681244:   public abstract double getDouble(int ordinal);
1:b681244: 
1:79feac9:   public abstract int getLengthInBytes(int ordinal);
1:79feac9: 
1:b681244:   public int getTotalSizeInBytes() {
1:b681244:     int len = 0;
1:b681244:     for (int i = 0; i < schemas.length; i++) {
1:b681244:       len += getSizeInBytes(i);
1:b681244:     }
1:b681244:     return len;
1:b681244:   }
1:b681244: 
1:b681244:   public int getSizeInBytes(int ordinal) {
1:b681244:     switch (schemas[ordinal].getSchemaType()) {
1:b681244:       case FIXED:
1:b681244:         return schemas[ordinal].getLength();
1:dc53dee:       case VARIABLE_SHORT:
1:79feac9:         return getLengthInBytes(ordinal) + 2;
1:dc53dee:       case VARIABLE_INT:
1:dc53dee:         return getLengthInBytes(ordinal) + 4;
1:b681244:       case STRUCT:
1:bd02656:         DataMapRow row = getRow(ordinal);
1:bd02656:         CarbonRowSchema[] childSchemas =
1:bd02656:             ((CarbonRowSchema.StructCarbonRowSchema) schemas[ordinal]).getChildSchemas();
1:bd02656:         // set the child schema. Because schema is transient it can be null
1:bd02656:         row.setSchemas(childSchemas);
1:b681244:         return getRow(ordinal).getTotalSizeInBytes();
1:b681244:       default:
1:b681244:         throw new UnsupportedOperationException("wrong type");
1:b681244:     }
1:b681244:   }
1:b681244: 
1:b681244:   public int getColumnCount() {
1:b681244:     return schemas.length;
1:b681244:   }
1:531ecdf: 
1:531ecdf:   /**
1:531ecdf:    * default implementation
1:531ecdf:    *
1:531ecdf:    * @return
1:531ecdf:    */
1:531ecdf:   public DataMapRow convertToSafeRow() {
1:531ecdf:     return this;
1:531ecdf:   }
1:f4a58c5: 
1:f4a58c5:   public void setSchemas(CarbonRowSchema[] schemas) {
1:f4a58c5:     if (null == this.schemas) {
1:f4a58c5:       this.schemas = schemas;
1:f4a58c5:     }
1:f4a58c5:   }
1:b681244: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:bd02656
/////////////////////////////////////////////////////////////////////////
1:         DataMapRow row = getRow(ordinal);
1:         CarbonRowSchema[] childSchemas =
1:             ((CarbonRowSchema.StructCarbonRowSchema) schemas[ordinal]).getChildSchemas();
1:         // set the child schema. Because schema is transient it can be null
1:         row.setSchemas(childSchemas);
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This is made transient as it is temporary and should not be serialized
1:    */
1:   protected transient CarbonRowSchema[] schemas;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public void setSchemas(CarbonRowSchema[] schemas) {
1:     if (null == this.schemas) {
1:       this.schemas = schemas;
1:     }
1:   }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:       case VARIABLE_SHORT:
1:       case VARIABLE_INT:
1:         return getLengthInBytes(ordinal) + 4;
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: 
1: public abstract class DataMapRow implements Serializable {
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * default implementation
1:    *
1:    * @return
1:    */
1:   public DataMapRow convertToSafeRow() {
1:     return this;
1:   }
author:kunal642
-------------------------------------------------------------------------------
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.indexstore.schema.CarbonRowSchema;
/////////////////////////////////////////////////////////////////////////
0:   protected CarbonRowSchema[] schemas;
1:   public DataMapRow(CarbonRowSchema[] schemas) {
author:Raghunandan S
-------------------------------------------------------------------------------
commit:79feac9
/////////////////////////////////////////////////////////////////////////
1:   public abstract int getLengthInBytes(int ordinal);
1: 
/////////////////////////////////////////////////////////////////////////
1:         return getLengthInBytes(ordinal) + 2;
author:ravipesala
-------------------------------------------------------------------------------
commit:b681244
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore.row;
1: 
0: import org.apache.carbondata.core.indexstore.schema.DataMapSchema;
1: 
1: /**
1:  * It is just a normal row to store data. Implementation classes could be safe and unsafe.
1:  * TODO move this class a global row and use across loading after DataType is changed class
1:  */
0: public abstract class DataMapRow {
1: 
0:   protected DataMapSchema[] schemas;
1: 
0:   public DataMapRow(DataMapSchema[] schemas) {
1:     this.schemas = schemas;
1:   }
1: 
1:   public abstract byte[] getByteArray(int ordinal);
1: 
1:   public abstract DataMapRow getRow(int ordinal);
1: 
1:   public abstract void setRow(DataMapRow row, int ordinal);
1: 
1:   public abstract void setByteArray(byte[] byteArray, int ordinal);
1: 
1:   public abstract int getInt(int ordinal);
1: 
1:   public abstract void setInt(int value, int ordinal);
1: 
1:   public abstract void setByte(byte value, int ordinal);
1: 
1:   public abstract byte getByte(int ordinal);
1: 
1:   public abstract void setShort(short value, int ordinal);
1: 
1:   public abstract short getShort(int ordinal);
1: 
1:   public abstract void setLong(long value, int ordinal);
1: 
1:   public abstract long getLong(int ordinal);
1: 
1:   public abstract void setFloat(float value, int ordinal);
1: 
1:   public abstract float getFloat(int ordinal);
1: 
1:   public abstract void setDouble(double value, int ordinal);
1: 
1:   public abstract double getDouble(int ordinal);
1: 
1:   public int getTotalSizeInBytes() {
1:     int len = 0;
1:     for (int i = 0; i < schemas.length; i++) {
1:       len += getSizeInBytes(i);
1:     }
1:     return len;
1:   }
1: 
1:   public int getSizeInBytes(int ordinal) {
1:     switch (schemas[ordinal].getSchemaType()) {
1:       case FIXED:
1:         return schemas[ordinal].getLength();
0:       case VARIABLE:
0:         return getByteArray(ordinal).length + 2;
1:       case STRUCT:
1:         return getRow(ordinal).getTotalSizeInBytes();
1:       default:
1:         throw new UnsupportedOperationException("wrong type");
1:     }
1:   }
1: 
1:   public int getColumnCount() {
1:     return schemas.length;
1:   }
1: }
============================================================================