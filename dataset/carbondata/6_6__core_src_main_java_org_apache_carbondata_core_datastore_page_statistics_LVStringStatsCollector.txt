1:bc3e684: /*
1:bc3e684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc3e684:  * contributor license agreements.  See the NOTICE file distributed with
1:bc3e684:  * this work for additional information regarding copyright ownership.
1:bc3e684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc3e684:  * (the "License"); you may not use this file except in compliance with
1:bc3e684:  * the License.  You may obtain a copy of the License at
1:bc3e684:  *
1:bc3e684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bc3e684:  *
1:bc3e684:  * Unless required by applicable law or agreed to in writing, software
1:bc3e684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc3e684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc3e684:  * See the License for the specific language governing permissions and
1:bc3e684:  * limitations under the License.
1:bc3e684:  */
7:bc3e684: 
1:bc3e684: package org.apache.carbondata.core.datastore.page.statistics;
1:bc3e684: 
1:4e83509: import java.math.BigDecimal;
1:bc3e684: 
1:bc3e684: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:bc3e684: import org.apache.carbondata.core.util.ByteUtil;
1:bc3e684: 
1:dc53dee: public abstract class LVStringStatsCollector implements ColumnPageStatsCollector {
1:bc3e684: 
1:bc3e684:   private byte[] min, max;
1:bc3e684: 
1:bc3e684:   @Override
1:bc3e684:   public void updateNull(int rowId) {
1:bc3e684: 
1:6c097cb:   }
1:7ef9164: 
1:bc3e684:   @Override
1:bc3e684:   public void update(byte value) {
1:7422690: 
11:bc3e684:   }
1:e6a4f64: 
1:bc3e684:   @Override
1:bc3e684:   public void update(short value) {
1:bc3e684: 
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   @Override
1:bc3e684:   public void update(int value) {
1:bc3e684: 
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   @Override
1:bc3e684:   public void update(long value) {
1:bc3e684: 
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   @Override
1:bc3e684:   public void update(double value) {
1:bc3e684: 
1:bc3e684:   }
1:bc3e684: 
1:bc3e684:   @Override
1:4e83509:   public void update(BigDecimal value) {
1:4e83509: 
1:4e83509:   }
1:4e83509: 
1:dc53dee:   protected abstract byte[] getActualValue(byte[] value);
1:dc53dee: 
1:4e83509:   @Override
1:bc3e684:   public void update(byte[] value) {
1:e6a4f64:     // input value is LV encoded
1:dc53dee:     byte[] newValue = getActualValue(value);
1:dc53dee:     if (min == null) {
2:6c097cb:       min = newValue;
1:7ef9164:     }
1:7ef9164: 
1:7ef9164:     if (null == max) {
2:6c097cb:       max = newValue;
1:7ef9164:     }
1:7ef9164: 
1:7ef9164:     if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(min, newValue) > 0) {
1:7ef9164:       min = newValue;
1:7ef9164:     }
1:7ef9164: 
1:7ef9164:     if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(max, newValue) < 0) {
1:7ef9164:       max = newValue;
1:e6a4f64:     }
1:e6a4f64:   }
1:bc3e684: 
1:bc3e684:   @Override
1:e6a4f64:   public SimpleStatsResult getPageStats() {
1:bc3e684:     return new SimpleStatsResult() {
1:bc3e684: 
1:bc3e684:       @Override public Object getMin() {
1:bc3e684:         return min;
1:bc3e684:       }
1:bc3e684: 
1:bc3e684:       @Override public Object getMax() {
1:bc3e684:         return max;
1:bc3e684:       }
1:bc3e684: 
1:4f7487d:       @Override public int getDecimalCount() {
2:7422690:         return 0;
1:7422690:       }
1:bc3e684: 
1:bc3e684:       @Override public DataType getDataType() {
1:956833e:         return DataTypes.STRING;
1:7422690:       }
1:7422690: 
1:bc3e684:     };
1:bc3e684:   }
1:bc3e684: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1: public abstract class LVStringStatsCollector implements ColumnPageStatsCollector {
/////////////////////////////////////////////////////////////////////////
1:   protected abstract byte[] getActualValue(byte[] value);
1: 
1:     byte[] newValue = getActualValue(value);
1:     if (min == null) {
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1: 
0:     if (null == min) {
1:     }
1: 
1:     if (null == max) {
1:     }
1: 
1:     if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(min, newValue) > 0) {
1:       min = newValue;
1:     }
1: 
1:     if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(max, newValue) < 0) {
1:       max = newValue;
commit:bb0b347
/////////////////////////////////////////////////////////////////////////
0:     int length = (value[0] << 8) + (value[1] & 0xff);
commit:7422690
/////////////////////////////////////////////////////////////////////////
1: 
0:       @Override public int getScale() {
1:         return 0;
1:       }
1: 
0:       @Override public int getPrecision() {
1:         return 0;
1:       }
author:kumarvishal
-------------------------------------------------------------------------------
commit:6c097cb
/////////////////////////////////////////////////////////////////////////
0:     byte[] newValue = null;
0:       newValue = new byte[0];
0:       int length = (value[0] << 8) + (value[1] & 0xff);
0:       assert (length > 0);
0:       newValue = new byte[value.length - 2];
0:       System.arraycopy(value, 2, newValue, 0, newValue.length);
1:     }
0:     if (min == null && max == null) {
1:       min = newValue;
1:       max = newValue;
0:     } else {
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(min, newValue) > 0) {
1:         min = newValue;
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(max, newValue) < 0) {
1:         max = newValue;
author:Jacky Li
-------------------------------------------------------------------------------
commit:f209e8e
/////////////////////////////////////////////////////////////////////////
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:         return DataTypes.STRING;
commit:4f7487d
/////////////////////////////////////////////////////////////////////////
1:       @Override public int getDecimalCount() {
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
0: public class LVStringStatsCollector implements ColumnPageStatsCollector {
0:   public static LVStringStatsCollector newInstance() {
0:     return new LVStringStatsCollector();
0:   private LVStringStatsCollector() {
1: 
/////////////////////////////////////////////////////////////////////////
1:     // input value is LV encoded
0:     assert (value.length >= 2);
0:     if (value.length == 2) {
0:       assert (value[0] == 0 && value[1] == 0);
0:       if (min == null && max == null) {
0:         min = new byte[0];
0:         max = new byte[0];
0:       return;
1:     }
0:     int length = (value[0] << 8) + value[1];
0:     assert (length > 0);
0:     byte[] v = new byte[value.length - 2];
0:     System.arraycopy(value, 2, v, 0, v.length);
0:     if (min == null && max == null) {
0:       min = v;
0:       max = v;
0:     } else {
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(min, v) > 0) {
0:         min = v;
1:       }
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(max, v) < 0) {
0:         max = v;
1:   public SimpleStatsResult getPageStats() {
/////////////////////////////////////////////////////////////////////////
0:         return DataType.STRING;
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:4e83509
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
/////////////////////////////////////////////////////////////////////////
1:   public void update(BigDecimal value) {
1: 
1:   }
1: 
1:   @Override
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page.statistics;
1: 
0: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
0: public class VarLengthPageStatsCollector implements ColumnPageStatsCollector {
1: 
1:   private byte[] min, max;
1: 
0:   public static VarLengthPageStatsCollector newInstance() {
0:     return new VarLengthPageStatsCollector();
1:   }
1: 
0:   private VarLengthPageStatsCollector() {
1:   }
1: 
1:   @Override
1:   public void updateNull(int rowId) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(byte value) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(short value) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(int value) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(long value) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(double value) {
1: 
1:   }
1: 
1:   @Override
1:   public void update(byte[] value) {
0:     if (min == null && max == null) {
0:       min = value;
0:       max = value;
0:     } else {
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(min, value) > 0) {
0:         min = value;
1:       }
0:       if (ByteUtil.UnsafeComparer.INSTANCE.compareTo(max, value) < 0) {
0:         max = value;
1:       }
1:     }
1:   }
1: 
1:   @Override
0:   public Object getPageStats() {
0:     // for binary type, we do not collect its stats
1:     return new SimpleStatsResult() {
1: 
1:       @Override public Object getMin() {
1:         return min;
1:       }
1: 
1:       @Override public Object getMax() {
1:         return max;
1:       }
1: 
0:       @Override public BitSet getNullBits() {
0:         return null;
1:       }
1: 
0:       @Override public int getDecimalPoint() {
0:         return 0;
1:       }
1: 
1:       @Override public DataType getDataType() {
0:         return null;
1:       }
1:     };
1:   }
1: }
============================================================================