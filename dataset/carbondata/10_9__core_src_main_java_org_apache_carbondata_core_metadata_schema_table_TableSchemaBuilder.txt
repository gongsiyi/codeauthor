1:1d827c7: /*
1:1d827c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1d827c7:  * contributor license agreements.  See the NOTICE file distributed with
1:1d827c7:  * this work for additional information regarding copyright ownership.
1:1d827c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1d827c7:  * (the "License"); you may not use this file except in compliance with
1:1d827c7:  * the License.  You may obtain a copy of the License at
1:1d827c7:  *
1:1d827c7:  *    http://www.apache.org/licenses/LICENSE-2.0
1:1d827c7:  *
1:1d827c7:  * Unless required by applicable law or agreed to in writing, software
1:1d827c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1d827c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1d827c7:  * See the License for the specific language governing permissions and
1:1d827c7:  * limitations under the License.
1:1d827c7:  */
1:1d827c7: 
1:1d827c7: package org.apache.carbondata.core.metadata.schema.table;
1:1d827c7: 
1:1d827c7: import java.util.ArrayList;
1:6cb6f83: import java.util.HashMap;
1:1d827c7: import java.util.LinkedList;
1:1d827c7: import java.util.List;
1:6cb6f83: import java.util.Map;
1:1d827c7: import java.util.Objects;
1:1d827c7: import java.util.UUID;
1:35a7b5e: import java.util.concurrent.atomic.AtomicInteger;
1:1d827c7: 
1:6cb6f83: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b1c85fa: import org.apache.carbondata.core.metadata.datatype.ArrayType;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataType;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cf1e4d4: import org.apache.carbondata.core.metadata.datatype.DecimalType;
1:fb6dffe: import org.apache.carbondata.core.metadata.datatype.MapType;
1:1d827c7: import org.apache.carbondata.core.metadata.datatype.StructField;
1:3202cf5: import org.apache.carbondata.core.metadata.datatype.StructType;
1:1d827c7: import org.apache.carbondata.core.metadata.encoder.Encoding;
1:1d827c7: import org.apache.carbondata.core.metadata.schema.SchemaEvolution;
1:1d827c7: import org.apache.carbondata.core.metadata.schema.SchemaEvolutionEntry;
1:1d827c7: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:1d827c7: 
1:1d827c7: /**
1:1d827c7:  * Builder for {@link TableSchema}
1:1d827c7:  */
1:1d827c7: public class TableSchemaBuilder {
1:1d827c7: 
1:1d827c7:   private int ordinal = 0;
1:1d827c7: 
1:1d827c7:   private List<ColumnSchema> sortColumns = new LinkedList<>();
1:1d827c7: 
1:b1c85fa:   private List<ColumnSchema> dimension = new LinkedList<>();
1:1d827c7: 
1:b1c85fa:   private List<ColumnSchema> complex = new LinkedList<>();
1:b1c85fa: 
1:b1c85fa:   private List<ColumnSchema> measures = new LinkedList<>();
1:b1c85fa: 
1:6cb6f83:   private int blockSize;
1:6cb6f83: 
1:cf1e4d4:   private int blockletSize;
1:cf1e4d4: 
1:df5d7a9:   private String tableName;
1:3109d04:   private boolean isLocalDictionaryEnabled;
1:3109d04:   private String localDictionaryThreshold;
1:df5d7a9: 
1:6cb6f83:   public TableSchemaBuilder blockSize(int blockSize) {
1:6cb6f83:     if (blockSize <= 0) {
1:6cb6f83:       throw new IllegalArgumentException("blockSize should be greater than 0");
1:6cb6f83:     }
1:6cb6f83:     this.blockSize = blockSize;
1:6cb6f83:     return this;
1:6cb6f83:   }
1:6cb6f83: 
1:cf1e4d4:   public TableSchemaBuilder blockletSize(int blockletSize) {
1:cf1e4d4:     if (blockletSize <= 0) {
1:cf1e4d4:       throw new IllegalArgumentException("blockletSize should be greater than 0");
1:cf1e4d4:     }
1:cf1e4d4:     this.blockletSize = blockletSize;
1:1d827c7:     return this;
1:cf1e4d4:   }
1:4b98af2: 
1:3109d04:   public TableSchemaBuilder localDictionaryThreshold(int localDictionaryThreshold) {
1:3109d04:     this.localDictionaryThreshold = String.valueOf(localDictionaryThreshold);
1:3109d04:     return this;
1:3109d04:   }
1:3109d04: 
1:3109d04: 
1:3109d04:   public TableSchemaBuilder enableLocalDictionary(boolean enableLocalDictionary) {
1:3109d04:     this.isLocalDictionaryEnabled = enableLocalDictionary;
1:3109d04:     return this;
1:3109d04:   }
1:3109d04: 
1:3109d04: 
1:df5d7a9:   public TableSchemaBuilder tableName(String tableName) {
1:df5d7a9:     Objects.requireNonNull(tableName);
1:df5d7a9:     this.tableName = tableName;
1:df5d7a9:     return this;
1:df5d7a9:   }
1:df5d7a9: 
1:1d827c7:   public TableSchema build() {
1:1d827c7:     TableSchema schema = new TableSchema();
1:df5d7a9:     schema.setTableName(tableName);
1:1d827c7:     schema.setTableId(UUID.randomUUID().toString());
1:1d827c7:     schema.setPartitionInfo(null);
1:1d827c7:     schema.setBucketingInfo(null);
1:1d827c7:     SchemaEvolution schemaEvol = new SchemaEvolution();
1:1d827c7:     schemaEvol.setSchemaEvolutionEntryList(new ArrayList<SchemaEvolutionEntry>());
1:8896a63:     schema.setSchemaEvolution(schemaEvol);
1:1d827c7:     List<ColumnSchema> allColumns = new LinkedList<>(sortColumns);
1:b1c85fa:     allColumns.addAll(dimension);
1:b1c85fa:     allColumns.addAll(complex);
1:b1c85fa:     allColumns.addAll(measures);
1:1d827c7:     schema.setListOfColumns(allColumns);
1:6cb6f83: 
1:6cb6f83:     Map<String, String> property = new HashMap<>();
1:6cb6f83:     if (blockSize > 0) {
1:6cb6f83:       property.put(CarbonCommonConstants.TABLE_BLOCKSIZE, String.valueOf(blockSize));
1:cf1e4d4:     }
1:cf1e4d4:     if (blockletSize > 0) {
1:526e3bf:       property.put(CarbonCommonConstants.TABLE_BLOCKLET_SIZE, String.valueOf(blockletSize));
1:cf1e4d4:     }
1:3109d04: 
1:3109d04:     // Adding local dictionary, applicable only for String(dictionary exclude)
1:3109d04:     if (isLocalDictionaryEnabled) {
1:3109d04:       property.put(CarbonCommonConstants.LOCAL_DICTIONARY_ENABLE,
1:3109d04:           String.valueOf(isLocalDictionaryEnabled));
1:3109d04:       String localdictionaryThreshold = localDictionaryThreshold.equalsIgnoreCase("0") ?
1:3109d04:           CarbonCommonConstants.LOCAL_DICTIONARY_THRESHOLD_DEFAULT :
1:3109d04:           localDictionaryThreshold;
1:3109d04:       property.put(CarbonCommonConstants.LOCAL_DICTIONARY_THRESHOLD, localdictionaryThreshold);
1:3109d04:       for (int index = 0; index < allColumns.size(); index++) {
1:3109d04:         ColumnSchema colSchema = allColumns.get(index);
1:3109d04:         if (colSchema.getDataType() == DataTypes.STRING
1:3109d04:             || colSchema.getDataType() == DataTypes.VARCHAR) {
1:3109d04:           colSchema.setLocalDictColumn(true);
1:3109d04:           allColumns.set(index, colSchema);
1:3109d04:         }
1:3109d04:       }
1:3109d04:     }
1:cf1e4d4:     if (property.size() != 0) {
1:6cb6f83:       schema.setTableProperties(property);
1:6cb6f83:     }
1:1d827c7:     return schema;
1:1d827c7:   }
1:1d827c7: 
1:93724ec:   public void setSortColumns(List<ColumnSchema> sortColumns) {
1:93724ec:     this.sortColumns = sortColumns;
1:b1c85fa:   }
1:5f32647: 
1:35a7b5e:   public ColumnSchema addColumn(StructField field, AtomicInteger valIndex, boolean isSortColumn) {
1:35a7b5e:     return addColumn(field, null, valIndex, isSortColumn, false);
1:b1c85fa:   }
1:cf1e4d4: 
1:35a7b5e:   private ColumnSchema addColumn(StructField field, String parentName, AtomicInteger valIndex,
1:35a7b5e:       boolean isSortColumn, boolean isComplexChild) {
1:1d827c7:     Objects.requireNonNull(field);
1:6b70b7e:     if (isComplexChild) {
1:6b70b7e:       // if field is complex then append parent name to the child field to check
1:6b70b7e:       // if any other field with same name exists
1:6b70b7e:       checkRepeatColumnName(field, parentName);
1:6b70b7e:     } else {
1:1d827c7:       checkRepeatColumnName(field);
1:6b70b7e:     }
1:1d827c7:     ColumnSchema newColumn = new ColumnSchema();
1:b1c85fa:     if (parentName != null) {
1:b1c85fa:       newColumn.setColumnName(parentName + "." + field.getFieldName());
1:ec33c11:     } else {
1:1d827c7:       newColumn.setColumnName(field.getFieldName());
1:ec33c11:     }
1:1d827c7:     newColumn.setDataType(field.getDataType());
1:6cb6f83:     if (isSortColumn ||
1:6cb6f83:         field.getDataType() == DataTypes.STRING ||
1:1345dc6:         field.getDataType() == DataTypes.VARCHAR ||
1:6cb6f83:         field.getDataType() == DataTypes.DATE ||
1:3202cf5:         field.getDataType() == DataTypes.TIMESTAMP ||
1:b1c85fa:         field.getDataType().isComplexType() ||
1:b1c85fa:         (isComplexChild))  {
1:6cb6f83:       newColumn.setDimensionColumn(true);
1:6cb6f83:     } else {
1:6cb6f83:       newColumn.setDimensionColumn(false);
1:6cb6f83:     }
1:b1c85fa:     if (!isComplexChild) {
1:1d827c7:       newColumn.setSchemaOrdinal(ordinal++);
1:ec33c11:     } else {
1:b1c85fa:       // child column should not be counted for schema ordinal
1:b1c85fa:       newColumn.setSchemaOrdinal(-1);
1:b1c85fa:     }
1:1d827c7: 
1:5f32647:     // For NonTransactionalTable, multiple sdk writer output with same column name can be placed in
1:5f32647:     // single folder for query.
1:5f32647:     // That time many places in code, columnId check will fail. To avoid that
1:5f32647:     // keep column ID as same as column name.
1:5f32647:     // Anyhow Alter table is not supported for NonTransactionalTable.
1:5f32647:     // SO, this will not have any impact.
1:5f32647:     newColumn.setColumnUniqueId(field.getFieldName());
1:1d827c7:     newColumn.setColumnReferenceId(newColumn.getColumnUniqueId());
1:6b70b7e:     newColumn.setEncodingList(createEncoding(field.getDataType(), isSortColumn, isComplexChild));
1:3202cf5:     if (field.getDataType().isComplexType()) {
1:fb6dffe:       if (DataTypes.isArrayType(field.getDataType()) || DataTypes.isMapType(field.getDataType())) {
1:b1c85fa:         newColumn.setNumberOfChild(1);
1:1d827c7:       } else {
1:b1c85fa:         newColumn.setNumberOfChild(((StructType) field.getDataType()).getFields().size());
1:1d827c7:       }
1:1d827c7:     }
1:cf1e4d4:     if (DataTypes.isDecimal(field.getDataType())) {
1:cf1e4d4:       DecimalType decimalType = (DecimalType) field.getDataType();
1:cf1e4d4:       newColumn.setPrecision(decimalType.getPrecision());
1:cf1e4d4:       newColumn.setScale(decimalType.getScale());
1:cf1e4d4:     }
1:93724ec:     if (!isSortColumn) {
1:b1c85fa:       if (!newColumn.isDimensionColumn()) {
1:b1c85fa:         measures.add(newColumn);
1:fb6dffe:       } else if (DataTypes.isStructType(field.getDataType()) || DataTypes
1:fb6dffe:           .isArrayType(field.getDataType()) || DataTypes.isMapType(field.getDataType())
1:fb6dffe:           || isComplexChild) {
1:b1c85fa:         complex.add(newColumn);
2:b1c85fa:       } else {
1:b1c85fa:         dimension.add(newColumn);
1:b1c85fa:       }
1:b1c85fa:     }
1:4b98af2:     if (newColumn.isDimensionColumn()) {
1:4b98af2:       newColumn.setUseInvertedIndex(true);
1:4b98af2:     }
1:3202cf5:     if (field.getDataType().isComplexType()) {
1:b1c85fa:       String parentFieldName = newColumn.getColumnName();
1:fb6dffe:       if (DataTypes.isArrayType(field.getDataType())) {
1:35a7b5e:         String colName = getColNameForArray(valIndex);
1:35a7b5e:         addColumn(new StructField(colName, ((ArrayType) field.getDataType()).getElementType()),
1:35a7b5e:             field.getFieldName(), valIndex, false, true);
1:fb6dffe:       } else if (DataTypes.isStructType(field.getDataType())
1:b1c85fa:           && ((StructType) field.getDataType()).getFields().size() > 0) {
1:3202cf5:         // This field has children.
1:3202cf5:         List<StructField> fields = ((StructType) field.getDataType()).getFields();
1:b1c85fa:         for (int i = 0; i < fields.size(); i++) {
1:35a7b5e:           addColumn(fields.get(i), parentFieldName, valIndex, false, true);
1:b1c85fa:         }
1:fb6dffe:       } else if (DataTypes.isMapType(field.getDataType())) {
1:fb6dffe:         String colName = getColNameForArray(valIndex);
1:fb6dffe:         addColumn(new StructField(colName, ((MapType) field.getDataType()).getValueType()),
1:fb6dffe:             parentFieldName, valIndex, false, true);
1:b1c85fa:       }
1:3202cf5:     }
1:dc53dee:     // todo: need more information such as long_string_columns
1:93724ec:     return newColumn;
1:ec33c11:   }
1:1d827c7: 
1:35a7b5e:   private String getColNameForArray(AtomicInteger valIndex) {
1:35a7b5e:     String colName = "val" + valIndex.get();
1:35a7b5e:     valIndex.incrementAndGet();
1:35a7b5e:     return colName;
1:ec33c11:   }
1:cf1e4d4: 
1:1d827c7:   /**
1:1d827c7:    * Throw exception if {@param field} name is repeated
1:1d827c7:    */
1:6b70b7e:   private void checkRepeatColumnName(StructField field, String parentName) {
1:6b70b7e:     checkRepeatColumnName(
1:6b70b7e:         new StructField(parentName + "." + field.getFieldName(), field.getDataType(),
1:6b70b7e:             field.getChildren()));
1:6b70b7e:   }
1:6b70b7e: 
1:1d827c7:   private void checkRepeatColumnName(StructField field) {
1:1d827c7:     for (ColumnSchema column : sortColumns) {
1:1d827c7:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:1d827c7:         throw new IllegalArgumentException("column name already exists");
1:1d827c7:       }
1:1d827c7:     }
1:b1c85fa:     for (ColumnSchema column : dimension) {
1:1d827c7:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:1d827c7:         throw new IllegalArgumentException("column name already exists");
1:1d827c7:       }
1:1d827c7:     }
1:1d827c7: 
1:b1c85fa:     for (ColumnSchema column : complex) {
1:b1c85fa:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:b1c85fa:         throw new IllegalArgumentException("column name already exists");
1:1d827c7:       }
1:b1c85fa:     }
1:ec33c11: 
1:b1c85fa:     for (ColumnSchema column : measures) {
1:b1c85fa:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:b1c85fa:         throw new IllegalArgumentException("column name already exists");
1:b1c85fa:       }
2:3202cf5:     }
1:3202cf5:   }
1:b1c85fa: 
1:6b70b7e:   private List<Encoding> createEncoding(DataType dataType, boolean isSortColumn,
1:6b70b7e:       boolean isComplexChild) {
1:1d827c7:     List<Encoding> encodings = new LinkedList<>();
1:6b70b7e:     if (dataType == DataTypes.DATE && !isComplexChild) {
1:1d827c7:       encodings.add(Encoding.DIRECT_DICTIONARY);
1:6cb6f83:       encodings.add(Encoding.DICTIONARY);
1:1d827c7:     }
2:1d827c7:     if (isSortColumn) {
1:1d827c7:       encodings.add(Encoding.INVERTED_INDEX);
1:1d827c7:     }
1:1d827c7:     return encodings;
1:1d827c7:   }
1:1d827c7: 
1:1d827c7: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:526e3bf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       property.put(CarbonCommonConstants.TABLE_BLOCKLET_SIZE, String.valueOf(blockletSize));
commit:df5d7a9
/////////////////////////////////////////////////////////////////////////
1:   private String tableName;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public TableSchemaBuilder tableName(String tableName) {
1:     Objects.requireNonNull(tableName);
1:     this.tableName = tableName;
1:     return this;
1:   }
1: 
1:     schema.setTableName(tableName);
commit:6cb6f83
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:   private int blockSize;
1: 
1:   public TableSchemaBuilder blockSize(int blockSize) {
1:     if (blockSize <= 0) {
1:       throw new IllegalArgumentException("blockSize should be greater than 0");
1:     }
1:     this.blockSize = blockSize;
1:     return this;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (blockSize > 0) {
1:       Map<String, String> property = new HashMap<>();
1:       property.put(CarbonCommonConstants.TABLE_BLOCKSIZE, String.valueOf(blockSize));
1:       schema.setTableProperties(property);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (isSortColumn ||
1:         field.getDataType() == DataTypes.STRING ||
1:         field.getDataType() == DataTypes.DATE ||
0:         field.getDataType() == DataTypes.TIMESTAMP) {
1:       newColumn.setDimensionColumn(true);
1:     } else {
1:       newColumn.setDimensionColumn(false);
1:     }
0:       newColumn.setSortColumn(true);
/////////////////////////////////////////////////////////////////////////
1:       encodings.add(Encoding.DICTIONARY);
commit:1d827c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema.table;
1: 
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Objects;
1: import java.util.UUID;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.datatype.StructField;
1: import org.apache.carbondata.core.metadata.encoder.Encoding;
1: import org.apache.carbondata.core.metadata.schema.SchemaEvolution;
1: import org.apache.carbondata.core.metadata.schema.SchemaEvolutionEntry;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: 
1: /**
1:  * Builder for {@link TableSchema}
1:  */
1: public class TableSchemaBuilder {
1: 
1:   private int ordinal = 0;
1: 
1:   private List<ColumnSchema> sortColumns = new LinkedList<>();
1: 
0:   private List<ColumnSchema> otherColumns = new LinkedList<>();
1: 
1:   public TableSchema build() {
1:     TableSchema schema = new TableSchema();
1:     schema.setTableId(UUID.randomUUID().toString());
1:     schema.setPartitionInfo(null);
1:     schema.setBucketingInfo(null);
1:     SchemaEvolution schemaEvol = new SchemaEvolution();
1:     schemaEvol.setSchemaEvolutionEntryList(new ArrayList<SchemaEvolutionEntry>());
0:     schema.setSchemaEvalution(schemaEvol);
1:     List<ColumnSchema> allColumns = new LinkedList<>(sortColumns);
0:     allColumns.addAll(otherColumns);
1:     schema.setListOfColumns(allColumns);
1:     return schema;
1:   }
1: 
0:   public TableSchemaBuilder addColumn(StructField field, boolean isSortColumn) {
1:     Objects.requireNonNull(field);
1:     checkRepeatColumnName(field);
1:     ColumnSchema newColumn = new ColumnSchema();
1:     newColumn.setColumnName(field.getFieldName());
1:     newColumn.setDataType(field.getDataType());
0:     newColumn.setDimensionColumn(isSortColumn || field.getDataType() == DataTypes.STRING);
1:     newColumn.setSchemaOrdinal(ordinal++);
0:     newColumn.setColumnar(true);
0:     newColumn.setColumnUniqueId(UUID.randomUUID().toString());
1:     newColumn.setColumnReferenceId(newColumn.getColumnUniqueId());
0:     newColumn.setEncodingList(createEncoding(field.getDataType(), isSortColumn));
1: 
1:     if (isSortColumn) {
0:       sortColumns.add(newColumn);
1:     } else {
0:       otherColumns.add(newColumn);
1:     }
1:     return this;
1:   }
1: 
1:   /**
1:    * Throw exception if {@param field} name is repeated
1:    */
1:   private void checkRepeatColumnName(StructField field) {
1:     for (ColumnSchema column : sortColumns) {
1:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:         throw new IllegalArgumentException("column name already exists");
1:       }
1:     }
0:     for (ColumnSchema column : otherColumns) {
1:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:         throw new IllegalArgumentException("column name already exists");
1:       }
1:     }
1:   }
1: 
0:   private List<Encoding> createEncoding(DataType dataType, boolean isSortColumn) {
1:     List<Encoding> encodings = new LinkedList<>();
0:     if (dataType == DataTypes.TIMESTAMP || dataType == DataTypes.DATE) {
1:       encodings.add(Encoding.DIRECT_DICTIONARY);
1:     }
1:     if (isSortColumn) {
1:       encodings.add(Encoding.INVERTED_INDEX);
1:     }
1:     return encodings;
1:   }
1: 
1: }
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.MapType;
/////////////////////////////////////////////////////////////////////////
1:       if (DataTypes.isArrayType(field.getDataType()) || DataTypes.isMapType(field.getDataType())) {
/////////////////////////////////////////////////////////////////////////
1:       } else if (DataTypes.isStructType(field.getDataType()) || DataTypes
1:           .isArrayType(field.getDataType()) || DataTypes.isMapType(field.getDataType())
1:           || isComplexChild) {
/////////////////////////////////////////////////////////////////////////
1:       if (DataTypes.isArrayType(field.getDataType())) {
1:       } else if (DataTypes.isStructType(field.getDataType())
1:       } else if (DataTypes.isMapType(field.getDataType())) {
1:         String colName = getColNameForArray(valIndex);
1:         addColumn(new StructField(colName, ((MapType) field.getDataType()).getValueType()),
1:             parentFieldName, valIndex, false, true);
commit:35a7b5e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:   public ColumnSchema addColumn(StructField field, AtomicInteger valIndex, boolean isSortColumn) {
1:     return addColumn(field, null, valIndex, isSortColumn, false);
1:   private ColumnSchema addColumn(StructField field, String parentName, AtomicInteger valIndex,
1:       boolean isSortColumn, boolean isComplexChild) {
/////////////////////////////////////////////////////////////////////////
1:         String colName = getColNameForArray(valIndex);
1:         addColumn(new StructField(colName, ((ArrayType) field.getDataType()).getElementType()),
1:             field.getFieldName(), valIndex, false, true);
1:           addColumn(fields.get(i), parentFieldName, valIndex, false, true);
1:   private String getColNameForArray(AtomicInteger valIndex) {
1:     String colName = "val" + valIndex.get();
1:     valIndex.incrementAndGet();
1:     return colName;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:1345dc6
/////////////////////////////////////////////////////////////////////////
1:         field.getDataType() == DataTypes.VARCHAR ||
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:     // todo: need more information such as long_string_columns
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:BJangir
-------------------------------------------------------------------------------
commit:3109d04
/////////////////////////////////////////////////////////////////////////
1:   private boolean isLocalDictionaryEnabled;
1:   private String localDictionaryThreshold;
/////////////////////////////////////////////////////////////////////////
1:   public TableSchemaBuilder localDictionaryThreshold(int localDictionaryThreshold) {
1:     this.localDictionaryThreshold = String.valueOf(localDictionaryThreshold);
1:     return this;
1:   }
1: 
1: 
1:   public TableSchemaBuilder enableLocalDictionary(boolean enableLocalDictionary) {
1:     this.isLocalDictionaryEnabled = enableLocalDictionary;
1:     return this;
1:   }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Adding local dictionary, applicable only for String(dictionary exclude)
1:     if (isLocalDictionaryEnabled) {
1:       property.put(CarbonCommonConstants.LOCAL_DICTIONARY_ENABLE,
1:           String.valueOf(isLocalDictionaryEnabled));
1:       String localdictionaryThreshold = localDictionaryThreshold.equalsIgnoreCase("0") ?
1:           CarbonCommonConstants.LOCAL_DICTIONARY_THRESHOLD_DEFAULT :
1:           localDictionaryThreshold;
1:       property.put(CarbonCommonConstants.LOCAL_DICTIONARY_THRESHOLD, localdictionaryThreshold);
1:       for (int index = 0; index < allColumns.size(); index++) {
1:         ColumnSchema colSchema = allColumns.get(index);
1:         if (colSchema.getDataType() == DataTypes.STRING
1:             || colSchema.getDataType() == DataTypes.VARCHAR) {
1:           colSchema.setLocalDictColumn(true);
1:           allColumns.set(index, colSchema);
1:         }
1:       }
1:     }
author:xubo245
-------------------------------------------------------------------------------
commit:8896a63
/////////////////////////////////////////////////////////////////////////
1:     schema.setSchemaEvolution(schemaEvol);
author:kunal642
-------------------------------------------------------------------------------
commit:6b70b7e
/////////////////////////////////////////////////////////////////////////
1:     if (isComplexChild) {
1:       // if field is complex then append parent name to the child field to check
1:       // if any other field with same name exists
1:       checkRepeatColumnName(field, parentName);
1:     } else {
0:       checkRepeatColumnName(field);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     newColumn.setEncodingList(createEncoding(field.getDataType(), isSortColumn, isComplexChild));
/////////////////////////////////////////////////////////////////////////
1:   private void checkRepeatColumnName(StructField field, String parentName) {
1:     checkRepeatColumnName(
1:         new StructField(parentName + "." + field.getFieldName(), field.getDataType(),
1:             field.getChildren()));
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private List<Encoding> createEncoding(DataType dataType, boolean isSortColumn,
1:       boolean isComplexChild) {
1:     if (dataType == DataTypes.DATE && !isComplexChild) {
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:74ea24d
/////////////////////////////////////////////////////////////////////////
0:     if (!parentFieldName.endsWith(".val")) {
commit:4b98af2
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (newColumn.isDimensionColumn()) {
1:       newColumn.setUseInvertedIndex(true);
1:     }
commit:5f32647
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     // For NonTransactionalTable, multiple sdk writer output with same column name can be placed in
1:     // single folder for query.
1:     // That time many places in code, columnId check will fail. To avoid that
1:     // keep column ID as same as column name.
1:     // Anyhow Alter table is not supported for NonTransactionalTable.
1:     // SO, this will not have any impact.
1:     newColumn.setColumnUniqueId(field.getFieldName());
commit:cf1e4d4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonV3DataFormatConstants;
1: import org.apache.carbondata.core.metadata.datatype.DecimalType;
/////////////////////////////////////////////////////////////////////////
1:   private int blockletSize;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public TableSchemaBuilder blockletSize(int blockletSize) {
1:     if (blockletSize <= 0) {
1:       throw new IllegalArgumentException("blockletSize should be greater than 0");
1:     }
1:     this.blockletSize = blockletSize;
0:     return this;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     Map<String, String> property = new HashMap<>();
1:     }
1:     if (blockletSize > 0) {
0:       property.put(CarbonV3DataFormatConstants.BLOCKLET_SIZE_IN_MB, String.valueOf(blockletSize));
1:     }
0:     // TODO: check other table properties
1:     if (property.size() != 0) {
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (DataTypes.isDecimal(field.getDataType())) {
1:       DecimalType decimalType = (DecimalType) field.getDataType();
1:       newColumn.setPrecision(decimalType.getPrecision());
1:       newColumn.setScale(decimalType.getScale());
1:     }
author:sounakr
-------------------------------------------------------------------------------
commit:ec33c11
/////////////////////////////////////////////////////////////////////////
0:         String colName = getColNameForArray(parentFieldName);
0:         addColumn(new StructField(colName,
/////////////////////////////////////////////////////////////////////////
0:   private String getColNameForArray(String parentFieldName) {
0:     if (!parentFieldName.contains(".val")) {
0:       return "val";
1:     } else {
0:       String[] splits = parentFieldName.split("val");
0:       if (splits.length == 1) {
0:         return "val" + 1;
1:       } else {
0:         return "val" + (Integer.parseInt(parentFieldName
0:             .substring(parentFieldName.lastIndexOf("val") + 3, parentFieldName.length())) + 1);
1:       }
1:     }
1:   }
1: 
commit:b1c85fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.ArrayType;
/////////////////////////////////////////////////////////////////////////
1:   private List<ColumnSchema> dimension = new LinkedList<>();
1: 
1:   private List<ColumnSchema> complex = new LinkedList<>();
1: 
1:   private List<ColumnSchema> measures = new LinkedList<>();
/////////////////////////////////////////////////////////////////////////
1:     allColumns.addAll(dimension);
1:     allColumns.addAll(complex);
1:     allColumns.addAll(measures);
/////////////////////////////////////////////////////////////////////////
0:     return addColumn(field, null, isSortColumn, false);
1:   }
1: 
0:   private ColumnSchema addColumn(StructField field, String parentName, boolean isSortColumn,
0:       boolean isComplexChild) {
1:     if (parentName != null) {
1:       newColumn.setColumnName(parentName + "." + field.getFieldName());
1:     } else {
0:       newColumn.setColumnName(field.getFieldName());
1:     }
1:         field.getDataType().isComplexType() ||
1:         (isComplexChild))  {
1:     if (!isComplexChild) {
0:       newColumn.setSchemaOrdinal(ordinal++);
1:     } else {
1:       // child column should not be counted for schema ordinal
1:       newColumn.setSchemaOrdinal(-1);
1:     }
/////////////////////////////////////////////////////////////////////////
0:       if (field.getDataType().getName().equalsIgnoreCase("ARRAY")) {
1:         newColumn.setNumberOfChild(1);
0:       } else {
1:         newColumn.setNumberOfChild(((StructType) field.getDataType()).getFields().size());
1:       }
/////////////////////////////////////////////////////////////////////////
1:       if (!newColumn.isDimensionColumn()) {
1:         measures.add(newColumn);
0:       } else if (DataTypes.isStructType(field.getDataType()) ||
0:           DataTypes.isArrayType(field.getDataType()) || isComplexChild) {
1:         complex.add(newColumn);
0:       } else {
1:         dimension.add(newColumn);
1:       }
1:       String parentFieldName = newColumn.getColumnName();
0:       if (field.getDataType().getName().equalsIgnoreCase("ARRAY")) {
0:         addColumn(new StructField("val",
0:             ((ArrayType) field.getDataType()).getElementType()), field.getFieldName(), false, true);
0:       } else if (field.getDataType().getName().equalsIgnoreCase("STRUCT")
1:           && ((StructType) field.getDataType()).getFields().size() > 0) {
1:         for (int i = 0; i < fields.size(); i++) {
0:           addColumn(fields.get(i), parentFieldName, false, true);
/////////////////////////////////////////////////////////////////////////
1:     for (ColumnSchema column : dimension) {
1:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:         throw new IllegalArgumentException("column name already exists");
1:       }
1:     }
0: 
1:     for (ColumnSchema column : complex) {
1:       if (column.getColumnName().equalsIgnoreCase(field.getFieldName())) {
1:         throw new IllegalArgumentException("column name already exists");
1:       }
1:     }
0: 
1:     for (ColumnSchema column : measures) {
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.StructType;
/////////////////////////////////////////////////////////////////////////
1:         field.getDataType() == DataTypes.TIMESTAMP ||
0:         DataTypes.isStructType(field.getDataType())) {
/////////////////////////////////////////////////////////////////////////
1:     if (field.getDataType().isComplexType()) {
0:       newColumn.setNumberOfChild(((StructType) field.getDataType()).getFields().size());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (field.getDataType().isComplexType()) {
0:       if (((StructType) field.getDataType()).getFields().size() > 0) {
1:         // This field has children.
1:         List<StructField> fields = ((StructType) field.getDataType()).getFields();
0:         for (int i = 0; i < fields.size(); i ++) {
0:           addColumn(fields.get(i), false);
1:         }
1:       }
1:     }
author:rahulforallp
-------------------------------------------------------------------------------
commit:93724ec
/////////////////////////////////////////////////////////////////////////
1:   public void setSortColumns(List<ColumnSchema> sortColumns) {
1:     this.sortColumns = sortColumns;
0:   }
0: 
0:   public ColumnSchema addColumn(StructField field, boolean isSortColumn) {
/////////////////////////////////////////////////////////////////////////
1:     if (!isSortColumn) {
/////////////////////////////////////////////////////////////////////////
1:     return newColumn;
============================================================================