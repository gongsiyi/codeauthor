1:9fba684: /*
1:9fba684:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9fba684:  * contributor license agreements.  See the NOTICE file distributed with
1:9fba684:  * this work for additional information regarding copyright ownership.
1:9fba684:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9fba684:  * (the "License"); you may not use this file except in compliance with
1:9fba684:  * the License.  You may obtain a copy of the License at
1:9fba684:  *
1:9fba684:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9fba684:  *
1:9fba684:  * Unless required by applicable law or agreed to in writing, software
1:9fba684:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9fba684:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fba684:  * See the License for the specific language governing permissions and
1:9fba684:  * limitations under the License.
1:9fba684:  */
1:9fba684: 
1:9fba684: package org.apache.carbondata.core.datamap.status;
1:9fba684: 
1:9fba684: import java.io.*;
1:9fba684: import java.nio.charset.Charset;
1:9fba684: import java.util.ArrayList;
1:9fba684: import java.util.Arrays;
1:9fba684: import java.util.List;
1:9fba684: 
1:9fba684: import org.apache.carbondata.common.logging.LogService;
1:9fba684: import org.apache.carbondata.common.logging.LogServiceFactory;
1:9fba684: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:9fba684: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:878bbd8: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
1:9fba684: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
1:9fba684: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
1:9fba684: import org.apache.carbondata.core.locks.CarbonLockFactory;
1:9fba684: import org.apache.carbondata.core.locks.CarbonLockUtil;
1:9fba684: import org.apache.carbondata.core.locks.ICarbonLock;
1:9fba684: import org.apache.carbondata.core.locks.LockUsage;
1:9fba684: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1:9fba684: import org.apache.carbondata.core.util.CarbonProperties;
1:9fba684: import org.apache.carbondata.core.util.CarbonUtil;
1:9fba684: 
1:9fba684: import com.google.gson.Gson;
1:9fba684: 
1:9fba684: /**
1:9fba684:  * It saves/serializes the array of {{@link DataMapStatusDetail}} to disk in json format.
1:9fba684:  * It ensures the data consistance while concurrent write through write lock. It saves the status
1:9fba684:  * to the datamapstatus under the system folder.
1:9fba684:  */
1:9fba684: public class DiskBasedDataMapStatusProvider implements DataMapStatusStorageProvider {
1:9fba684: 
1:9fba684:   private static final LogService LOG =
1:9fba684:       LogServiceFactory.getLogService(DiskBasedDataMapStatusProvider.class.getName());
1:9fba684: 
1:9fba684:   private static final String DATAMAP_STATUS_FILE = "datamapstatus";
1:9fba684: 
1:9fba684:   @Override
1:9fba684:   public DataMapStatusDetail[] getDataMapStatusDetails() throws IOException {
1:9fba684:     String statusPath = CarbonProperties.getInstance().getSystemFolderLocation()
1:9fba684:         + CarbonCommonConstants.FILE_SEPARATOR + DATAMAP_STATUS_FILE;
1:9fba684:     Gson gsonObjectToRead = new Gson();
1:9fba684:     DataInputStream dataInputStream = null;
1:9fba684:     BufferedReader buffReader = null;
1:9fba684:     InputStreamReader inStream = null;
1:9fba684:     DataMapStatusDetail[] dataMapStatusDetails;
1:9fba684:     try {
1:9fba684:       if (!FileFactory.isFileExist(statusPath)) {
1:9fba684:         return new DataMapStatusDetail[0];
1:9fba684:       }
1:9fba684:       dataInputStream =
1:9fba684:           FileFactory.getDataInputStream(statusPath, FileFactory.getFileType(statusPath));
1:9fba684:       inStream = new InputStreamReader(dataInputStream,
1:9fba684:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:9fba684:       buffReader = new BufferedReader(inStream);
1:9fba684:       dataMapStatusDetails = gsonObjectToRead.fromJson(buffReader, DataMapStatusDetail[].class);
1:9fba684:     } catch (IOException e) {
1:9fba684:       LOG.error(e, "Failed to read datamap status");
1:9fba684:       throw e;
1:9fba684:     } finally {
1:9fba684:       CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:9fba684:     }
1:9fba684: 
1:9fba684:     // if dataMapStatusDetails is null, return empty array
1:9fba684:     if (null == dataMapStatusDetails) {
1:9fba684:       return new DataMapStatusDetail[0];
1:9fba684:     }
1:9fba684: 
1:9fba684:     return dataMapStatusDetails;
1:9fba684:   }
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * Update or add the status of passed datamaps with the given datamapstatus. If the datamapstatus
1:9fba684:    * given is enabled/disabled then updates/adds the datamap, in case of drop it just removes it
1:9fba684:    * from the file.
1:9fba684:    * This method always overwrites the old file.
1:9fba684:    * @param dataMapSchemas schemas of which are need to be updated in datamap status
1:9fba684:    * @param dataMapStatus  status to be updated for the datamap schemas
1:9fba684:    * @throws IOException
1:9fba684:    */
1:9fba684:   @Override
1:9fba684:   public void updateDataMapStatus(List<DataMapSchema> dataMapSchemas, DataMapStatus dataMapStatus)
1:9fba684:       throws IOException {
1:f2bb9f4:     if (dataMapSchemas == null || dataMapSchemas.size() == 0) {
1:f2bb9f4:       // There is nothing to update
1:f2bb9f4:       return;
1:f2bb9f4:     }
1:9fba684:     ICarbonLock carbonTableStatusLock = getDataMapStatusLock();
1:9fba684:     boolean locked = false;
1:9fba684:     try {
1:9fba684:       locked = carbonTableStatusLock.lockWithRetries();
1:9fba684:       if (locked) {
1:9fba684:         LOG.info("Datamap status lock has been successfully acquired.");
1:9fba684:         DataMapStatusDetail[] dataMapStatusDetails = getDataMapStatusDetails();
1:9fba684:         List<DataMapStatusDetail> dataMapStatusList = Arrays.asList(dataMapStatusDetails);
1:9fba684:         dataMapStatusList = new ArrayList<>(dataMapStatusList);
1:9fba684:         List<DataMapStatusDetail> changedStatusDetails = new ArrayList<>();
1:9fba684:         List<DataMapStatusDetail> newStatusDetails = new ArrayList<>();
1:9fba684:         for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:9fba684:           boolean exists = false;
1:9fba684:           for (DataMapStatusDetail statusDetail : dataMapStatusList) {
1:9fba684:             if (statusDetail.getDataMapName().equals(dataMapSchema.getDataMapName())) {
1:9fba684:               statusDetail.setStatus(dataMapStatus);
1:9fba684:               changedStatusDetails.add(statusDetail);
1:9fba684:               exists = true;
1:9fba684:             }
1:9fba684:           }
1:9fba684:           if (!exists) {
1:9fba684:             newStatusDetails
1:9fba684:                 .add(new DataMapStatusDetail(dataMapSchema.getDataMapName(), dataMapStatus));
1:9fba684:           }
1:9fba684:         }
1:9fba684:         // Add the newly added datamaps to the list.
1:9fba684:         if (newStatusDetails.size() > 0 && dataMapStatus != DataMapStatus.DROPPED) {
1:9fba684:           dataMapStatusList.addAll(newStatusDetails);
1:9fba684:         }
1:9fba684:         // In case of dropped datamap, just remove from the list.
1:9fba684:         if (dataMapStatus == DataMapStatus.DROPPED) {
1:9fba684:           dataMapStatusList.removeAll(changedStatusDetails);
1:9fba684:         }
1:9fba684:         writeLoadDetailsIntoFile(CarbonProperties.getInstance().getSystemFolderLocation()
1:9fba684:                 + CarbonCommonConstants.FILE_SEPARATOR + DATAMAP_STATUS_FILE,
1:9fba684:             dataMapStatusList.toArray(new DataMapStatusDetail[dataMapStatusList.size()]));
1:9fba684:       } else {
1:9fba684:         String errorMsg = "Upadating datamapstatus is failed due to another process taken the lock"
1:9fba684:             + " for updating it";
1:9fba684:         LOG.audit(errorMsg);
1:9fba684:         LOG.error(errorMsg);
1:9fba684:         throw new IOException(errorMsg + " Please try after some time.");
1:9fba684:       }
1:9fba684:     } finally {
1:9fba684:       if (locked) {
1:9fba684:         CarbonLockUtil.fileUnlock(carbonTableStatusLock, LockUsage.DATAMAP_STATUS_LOCK);
1:9fba684:       }
1:9fba684:     }
1:9fba684:   }
1:9fba684: 
1:9fba684:   /**
1:9fba684:    * writes datamap status details
1:9fba684:    *
1:9fba684:    * @param dataMapStatusDetails
1:9fba684:    * @throws IOException
1:9fba684:    */
1:9fba684:   private static void writeLoadDetailsIntoFile(String location,
1:9fba684:       DataMapStatusDetail[] dataMapStatusDetails) throws IOException {
1:878bbd8:     AtomicFileOperations fileWrite = AtomicFileOperationFactory.getAtomicFileOperations(location);
1:9fba684:     BufferedWriter brWriter = null;
1:9fba684:     DataOutputStream dataOutputStream = null;
1:9fba684:     Gson gsonObjectToWrite = new Gson();
1:9fba684:     // write the updated data into the datamap status file.
1:9fba684:     try {
1:9fba684:       dataOutputStream = fileWrite.openForWrite(FileWriteOperation.OVERWRITE);
1:9fba684:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutputStream,
1:9fba684:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1:9fba684: 
1:9fba684:       String metadataInstance = gsonObjectToWrite.toJson(dataMapStatusDetails);
1:9fba684:       brWriter.write(metadataInstance);
1:9fba684:     } catch (IOException ioe) {
1:9fba684:       LOG.error("Error message: " + ioe.getLocalizedMessage());
1:7628571:       fileWrite.setFailed();
1:9fba684:       throw ioe;
1:9fba684:     } finally {
1:9fba684:       if (null != brWriter) {
1:9fba684:         brWriter.flush();
1:9fba684:       }
1:9fba684:       CarbonUtil.closeStreams(brWriter);
1:9fba684:       fileWrite.close();
1:9fba684:     }
1:9fba684: 
1:9fba684:   }
1:9fba684: 
1:9fba684:   private static ICarbonLock getDataMapStatusLock() {
1:9fba684:     return CarbonLockFactory
1:cb10d03:         .getSystemLevelCarbonLockObj(CarbonProperties.getInstance().getSystemFolderLocation(),
1:9fba684:             LockUsage.DATAMAP_STATUS_LOCK);
1:9fba684:   }
1:9fba684: }
============================================================================
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:7628571
/////////////////////////////////////////////////////////////////////////
1:       fileWrite.setFailed();
author:kunal642
-------------------------------------------------------------------------------
commit:878bbd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperationFactory;
/////////////////////////////////////////////////////////////////////////
1:     AtomicFileOperations fileWrite = AtomicFileOperationFactory.getAtomicFileOperations(location);
commit:cb10d03
/////////////////////////////////////////////////////////////////////////
1:         .getSystemLevelCarbonLockObj(CarbonProperties.getInstance().getSystemFolderLocation(),
author:ravipesala
-------------------------------------------------------------------------------
commit:f2bb9f4
/////////////////////////////////////////////////////////////////////////
1:     if (dataMapSchemas == null || dataMapSchemas.size() == 0) {
1:       // There is nothing to update
1:       return;
1:     }
commit:9fba684
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datamap.status;
1: 
1: import java.io.*;
1: import java.nio.charset.Charset;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.fileoperations.AtomicFileOperations;
0: import org.apache.carbondata.core.fileoperations.AtomicFileOperationsImpl;
1: import org.apache.carbondata.core.fileoperations.FileWriteOperation;
1: import org.apache.carbondata.core.locks.CarbonLockFactory;
1: import org.apache.carbondata.core.locks.CarbonLockUtil;
1: import org.apache.carbondata.core.locks.ICarbonLock;
1: import org.apache.carbondata.core.locks.LockUsage;
1: import org.apache.carbondata.core.metadata.schema.table.DataMapSchema;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: 
1: import com.google.gson.Gson;
1: 
1: /**
1:  * It saves/serializes the array of {{@link DataMapStatusDetail}} to disk in json format.
1:  * It ensures the data consistance while concurrent write through write lock. It saves the status
1:  * to the datamapstatus under the system folder.
1:  */
1: public class DiskBasedDataMapStatusProvider implements DataMapStatusStorageProvider {
1: 
1:   private static final LogService LOG =
1:       LogServiceFactory.getLogService(DiskBasedDataMapStatusProvider.class.getName());
1: 
1:   private static final String DATAMAP_STATUS_FILE = "datamapstatus";
1: 
1:   @Override
1:   public DataMapStatusDetail[] getDataMapStatusDetails() throws IOException {
1:     String statusPath = CarbonProperties.getInstance().getSystemFolderLocation()
1:         + CarbonCommonConstants.FILE_SEPARATOR + DATAMAP_STATUS_FILE;
1:     Gson gsonObjectToRead = new Gson();
1:     DataInputStream dataInputStream = null;
1:     BufferedReader buffReader = null;
1:     InputStreamReader inStream = null;
1:     DataMapStatusDetail[] dataMapStatusDetails;
1:     try {
1:       if (!FileFactory.isFileExist(statusPath)) {
1:         return new DataMapStatusDetail[0];
1:       }
1:       dataInputStream =
1:           FileFactory.getDataInputStream(statusPath, FileFactory.getFileType(statusPath));
1:       inStream = new InputStreamReader(dataInputStream,
1:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));
1:       buffReader = new BufferedReader(inStream);
1:       dataMapStatusDetails = gsonObjectToRead.fromJson(buffReader, DataMapStatusDetail[].class);
1:     } catch (IOException e) {
1:       LOG.error(e, "Failed to read datamap status");
1:       throw e;
1:     } finally {
1:       CarbonUtil.closeStreams(buffReader, inStream, dataInputStream);
1:     }
1: 
1:     // if dataMapStatusDetails is null, return empty array
1:     if (null == dataMapStatusDetails) {
1:       return new DataMapStatusDetail[0];
1:     }
1: 
1:     return dataMapStatusDetails;
1:   }
1: 
1:   /**
1:    * Update or add the status of passed datamaps with the given datamapstatus. If the datamapstatus
1:    * given is enabled/disabled then updates/adds the datamap, in case of drop it just removes it
1:    * from the file.
1:    * This method always overwrites the old file.
1:    * @param dataMapSchemas schemas of which are need to be updated in datamap status
1:    * @param dataMapStatus  status to be updated for the datamap schemas
1:    * @throws IOException
1:    */
1:   @Override
1:   public void updateDataMapStatus(List<DataMapSchema> dataMapSchemas, DataMapStatus dataMapStatus)
1:       throws IOException {
1:     ICarbonLock carbonTableStatusLock = getDataMapStatusLock();
1:     boolean locked = false;
1:     try {
1:       locked = carbonTableStatusLock.lockWithRetries();
1:       if (locked) {
1:         LOG.info("Datamap status lock has been successfully acquired.");
1:         DataMapStatusDetail[] dataMapStatusDetails = getDataMapStatusDetails();
1:         List<DataMapStatusDetail> dataMapStatusList = Arrays.asList(dataMapStatusDetails);
1:         dataMapStatusList = new ArrayList<>(dataMapStatusList);
1:         List<DataMapStatusDetail> changedStatusDetails = new ArrayList<>();
1:         List<DataMapStatusDetail> newStatusDetails = new ArrayList<>();
1:         for (DataMapSchema dataMapSchema : dataMapSchemas) {
1:           boolean exists = false;
1:           for (DataMapStatusDetail statusDetail : dataMapStatusList) {
1:             if (statusDetail.getDataMapName().equals(dataMapSchema.getDataMapName())) {
1:               statusDetail.setStatus(dataMapStatus);
1:               changedStatusDetails.add(statusDetail);
1:               exists = true;
1:             }
1:           }
1:           if (!exists) {
1:             newStatusDetails
1:                 .add(new DataMapStatusDetail(dataMapSchema.getDataMapName(), dataMapStatus));
1:           }
1:         }
1:         // Add the newly added datamaps to the list.
1:         if (newStatusDetails.size() > 0 && dataMapStatus != DataMapStatus.DROPPED) {
1:           dataMapStatusList.addAll(newStatusDetails);
1:         }
1:         // In case of dropped datamap, just remove from the list.
1:         if (dataMapStatus == DataMapStatus.DROPPED) {
1:           dataMapStatusList.removeAll(changedStatusDetails);
1:         }
1:         writeLoadDetailsIntoFile(CarbonProperties.getInstance().getSystemFolderLocation()
1:                 + CarbonCommonConstants.FILE_SEPARATOR + DATAMAP_STATUS_FILE,
1:             dataMapStatusList.toArray(new DataMapStatusDetail[dataMapStatusList.size()]));
1:       } else {
1:         String errorMsg = "Upadating datamapstatus is failed due to another process taken the lock"
1:             + " for updating it";
1:         LOG.audit(errorMsg);
1:         LOG.error(errorMsg);
1:         throw new IOException(errorMsg + " Please try after some time.");
1:       }
1:     } finally {
1:       if (locked) {
1:         CarbonLockUtil.fileUnlock(carbonTableStatusLock, LockUsage.DATAMAP_STATUS_LOCK);
1:       }
1:     }
1:   }
1: 
1:   /**
1:    * writes datamap status details
1:    *
1:    * @param dataMapStatusDetails
1:    * @throws IOException
1:    */
1:   private static void writeLoadDetailsIntoFile(String location,
1:       DataMapStatusDetail[] dataMapStatusDetails) throws IOException {
0:     AtomicFileOperations fileWrite =
0:         new AtomicFileOperationsImpl(location, FileFactory.getFileType(location));
1:     BufferedWriter brWriter = null;
1:     DataOutputStream dataOutputStream = null;
1:     Gson gsonObjectToWrite = new Gson();
1:     // write the updated data into the datamap status file.
1:     try {
1:       dataOutputStream = fileWrite.openForWrite(FileWriteOperation.OVERWRITE);
1:       brWriter = new BufferedWriter(new OutputStreamWriter(dataOutputStream,
1:           Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));
1: 
1:       String metadataInstance = gsonObjectToWrite.toJson(dataMapStatusDetails);
1:       brWriter.write(metadataInstance);
1:     } catch (IOException ioe) {
1:       LOG.error("Error message: " + ioe.getLocalizedMessage());
1:       throw ioe;
1:     } finally {
1:       if (null != brWriter) {
1:         brWriter.flush();
1:       }
1:       CarbonUtil.closeStreams(brWriter);
1:       fileWrite.close();
1:     }
1: 
1:   }
1: 
1:   private static ICarbonLock getDataMapStatusLock() {
1:     return CarbonLockFactory
0:         .getCarbonLockObj(CarbonProperties.getInstance().getSystemFolderLocation(),
1:             LockUsage.DATAMAP_STATUS_LOCK);
1:   }
1: }
============================================================================