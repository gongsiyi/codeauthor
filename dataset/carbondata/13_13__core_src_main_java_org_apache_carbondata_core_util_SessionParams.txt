1:39644b5: /*
1:39644b5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39644b5:  * contributor license agreements.  See the NOTICE file distributed with
1:39644b5:  * this work for additional information regarding copyright ownership.
1:39644b5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39644b5:  * (the "License"); you may not use this file except in compliance with
1:39644b5:  * the License.  You may obtain a copy of the License at
1:80195da:  *
1:39644b5:  *    http://www.apache.org/licenses/LICENSE-2.0
2:39644b5:  *
1:39644b5:  * Unless required by applicable law or agreed to in writing, software
1:39644b5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39644b5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39644b5:  * See the License for the specific language governing permissions and
1:39644b5:  * limitations under the License.
1:80195da:  */
3:39644b5: 
1:28e2e17: package org.apache.carbondata.core.util;
1:28e2e17: 
1:28e2e17: import java.io.Serializable;
1:28e2e17: import java.util.HashMap;
1:28e2e17: import java.util.Map;
1:2a9604c: import java.util.concurrent.ConcurrentHashMap;
1:28e2e17: 
1:39644b5: import org.apache.carbondata.common.constants.LoggerAction;
1:39644b5: import org.apache.carbondata.common.logging.LogService;
1:39644b5: import org.apache.carbondata.common.logging.LogServiceFactory;
1:39644b5: import org.apache.carbondata.core.cache.CacheProvider;
1:fd0bdf6: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:fb1516c: import org.apache.carbondata.core.constants.CarbonCommonConstantsInternal;
1:e349820: import org.apache.carbondata.core.constants.CarbonLoadOptionConstants;
1:b08ef00: import org.apache.carbondata.core.datamap.DataMapStoreManager;
1:39644b5: import org.apache.carbondata.core.exception.InvalidConfigurationException;
1:28e2e17: 
1:39644b5: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_MAJOR_COMPACTION_SIZE;
1:638ed1f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_SEARCH_MODE_ENABLE;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.COMPACTION_SEGMENT_LEVEL_THRESHOLD;
1:560bfbe: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_AUTO_LOAD_MERGE;
1:d8bafa3: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_OFFHEAP_SORT;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_UNSAFE_IN_QUERY_EXECUTION;
1:39644b5: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_UNSAFE_SORT;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_VECTOR_READER;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.NUM_CORES_COMPACTING;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonCommonConstants.NUM_CORES_LOADING;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_ACTION;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORD_PATH;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BATCH_SORT_SIZE_INMB;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_DATEFORMAT;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD;
1:6f10c41: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SINGLE_PASS;
1:8c17cee: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SORT_SCOPE;
1:6f10c41: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_TIMESTAMPFORMAT;
1:5a1496f: import static org.apache.carbondata.core.constants.CarbonV3DataFormatConstants.BLOCKLET_SIZE_IN_MB;
1:28e2e17: 
1:28e2e17: /**
1:39644b5:  * This class maintains carbon session params
1:28e2e17:  */
1:5508460: public class SessionParams implements Serializable, Cloneable {
1:28e2e17: 
1:39644b5:   private static final LogService LOGGER =
1:39644b5:       LogServiceFactory.getLogService(CacheProvider.class.getName());
1:ab11a48:   private static final long serialVersionUID = -7801994600594915264L;
1:28e2e17: 
1:28e2e17:   private Map<String, String> sProps;
1:2a9604c:   private ConcurrentHashMap<String, String> addedProps;
1:ab11a48:   // below field to be used when we want the objects to be serialized
1:3a6136d:   private Map<String, Object> extraInfo;
1:28e2e17:   public SessionParams() {
1:28e2e17:     sProps = new HashMap<>();
1:2a9604c:     addedProps = new ConcurrentHashMap<>();
1:3a6136d:     extraInfo = new HashMap<>();
1:3a6136d:   }
1:3a6136d: 
1:3a6136d:   public void setExtraInfo(String key, Object value) {
1:3a6136d:     this.extraInfo.put(key, value);
1:3a6136d:   }
1:3a6136d: 
1:3a6136d:   public Object getExtraInfo(String key) {
1:3a6136d:     return this.extraInfo.get(key);
1:28e2e17:   }
1:28e2e17: 
1:28e2e17:   /**
1:28e2e17:    * This method will be used to get the properties value
1:28e2e17:    *
1:28e2e17:    * @param key
1:28e2e17:    * @return properties value
1:28e2e17:    */
1:28e2e17:   public String getProperty(String key) {
1:39644b5:     return sProps.get(key);
1:28e2e17:   }
1:28e2e17: 
1:cc0e6f1:   public String getProperty(String key, String defaultValue) {
1:cc0e6f1:     if (!sProps.containsKey(key)) {
1:cc0e6f1:       return defaultValue;
1:cc0e6f1:     }
1:cc0e6f1:     return sProps.get(key);
1:cc0e6f1:   }
1:cc0e6f1: 
1:28e2e17:   /**
1:28e2e17:    * This method will be used to add a new property
1:28e2e17:    *
1:28e2e17:    * @param key
1:28e2e17:    * @return properties value
1:28e2e17:    */
1:39644b5:   public SessionParams addProperty(String key, String value) throws InvalidConfigurationException {
1:34cb551:     return addProperty(key, value, true);
1:28e2e17:   }
1:28e2e17: 
1:28e2e17:   /**
1:80195da:    * This method will be used to add a new property
1:28e2e17:    *
1:28e2e17:    * @param key
1:28e2e17:    * @return properties value
1:28e2e17:    */
1:80195da:   public SessionParams addProperty(String key, String value, Boolean doAuditing)
1:80195da:       throws InvalidConfigurationException {
1:80195da:     boolean isValidConf = validateKeyValue(key, value);
1:80195da:     if (isValidConf) {
1:e349820:       if (key.equals(CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_ACTION)) {
1:e349820:         value = value.toUpperCase();
1:e349820:       }
1:80195da:       if (doAuditing) {
1:80195da:         LOGGER.audit("The key " + key + " with value " + value + " added in the session param");
1:28e2e17:       }
1:28e2e17:       sProps.put(key, value);
1:28e2e17:     }
1:28e2e17:     return this;
1:28e2e17:   }
1:28e2e17: 
1:80195da:   public Map<String, String> getAll() {
1:80195da:     return sProps;
1:28e2e17:   }
1:28e2e17: 
1:8c17cee:   public SessionParams addProps(Map<String, String> addedProps) {
1:8c17cee:     this.addedProps.putAll(addedProps);
1:80195da:     return this;
1:28e2e17:   }
1:80195da: 
1:8c17cee:   public Map<String, String> getAddedProps() {
1:8c17cee:     return addedProps;
1:28e2e17:   }
1:80195da: 
1:80195da:   /**
1:39644b5:    * validate the key value to be set using set command
1:80195da:    * @param key
1:39644b5:    * @param value
1:39644b5:    * @return
1:39644b5:    * @throws InvalidConfigurationException
1:39644b5:    */
1:39644b5:   private boolean validateKeyValue(String key, String value) throws InvalidConfigurationException {
1:39644b5:     boolean isValid = false;
1:39644b5:     switch (key) {
1:39644b5:       case ENABLE_UNSAFE_SORT:
1:d8bafa3:       case ENABLE_OFFHEAP_SORT:
1:39644b5:       case CARBON_CUSTOM_BLOCK_DISTRIBUTION:
1:39644b5:       case CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE:
1:39644b5:       case CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD:
1:39644b5:       case CARBON_OPTIONS_SINGLE_PASS:
1:638ed1f:       case CARBON_SEARCH_MODE_ENABLE:
1:5a1496f:       case ENABLE_VECTOR_READER:
1:5a1496f:       case ENABLE_UNSAFE_IN_QUERY_EXECUTION:
1:560bfbe:       case ENABLE_AUTO_LOAD_MERGE:
1:39644b5:         isValid = CarbonUtil.validateBoolean(value);
1:39644b5:         if (!isValid) {
1:39644b5:           throw new InvalidConfigurationException("Invalid value " + value + " for key " + key);
1:80195da:         }
1:39644b5:         break;
1:39644b5:       case CARBON_OPTIONS_BAD_RECORDS_ACTION:
1:39644b5:         try {
1:39644b5:           LoggerAction.valueOf(value.toUpperCase());
1:39644b5:           isValid = true;
1:39644b5:         } catch (IllegalArgumentException iae) {
2:39644b5:           throw new InvalidConfigurationException(
1:5ab3099:               "The key " + key + " can have only either FORCE or IGNORE or REDIRECT or FAIL.");
1:80195da:         }
1:39644b5:         break;
1:39644b5:       case CARBON_OPTIONS_SORT_SCOPE:
1:39644b5:         isValid = CarbonUtil.isValidSortOption(value);
1:39644b5:         if (!isValid) {
1:39644b5:           throw new InvalidConfigurationException("The sort scope " + key
1:39644b5:               + " can have only either BATCH_SORT or LOCAL_SORT or NO_SORT.");
1:80195da:         }
1:39644b5:         break;
1:39644b5:       case CARBON_OPTIONS_BATCH_SORT_SIZE_INMB:
1:39644b5:       case CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS:
1:5a1496f:       case NUM_CORES_LOADING:
1:5a1496f:       case NUM_CORES_COMPACTING:
1:5a1496f:       case BLOCKLET_SIZE_IN_MB:
1:5a1496f:       case CARBON_MAJOR_COMPACTION_SIZE:
1:39644b5:         isValid = CarbonUtil.validateValidIntType(value);
1:39644b5:         if (!isValid) {
1:39644b5:           throw new InvalidConfigurationException(
1:39644b5:               "The configured value for key " + key + " must be valid integer.");
1:80195da:         }
1:39644b5:         break;
1:39644b5:       case CARBON_OPTIONS_BAD_RECORD_PATH:
1:39644b5:         isValid = CarbonUtil.isValidBadStorePath(value);
1:39644b5:         if (!isValid) {
1:39644b5:           throw new InvalidConfigurationException("Invalid bad records location.");
1:8c17cee:         }
1:39644b5:         break;
1:39644b5:       // no validation needed while set for CARBON_OPTIONS_DATEFORMAT
1:39644b5:       case CARBON_OPTIONS_DATEFORMAT:
1:39644b5:         isValid = true;
1:39644b5:         break;
1:6f10c41:       // no validation needed while set for CARBON_OPTIONS_TIMESTAMPFORMAT
1:6f10c41:       case CARBON_OPTIONS_TIMESTAMPFORMAT:
1:6f10c41:         isValid = true;
1:6f10c41:         break;
1:6f10c41:       // no validation needed while set for CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT
1:6f10c41:       case CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT:
1:6f10c41:         isValid = true;
1:6f10c41:         break;
1:5a1496f:       case COMPACTION_SEGMENT_LEVEL_THRESHOLD:
1:5a1496f:         int[] values = CarbonProperties.getInstance().getIntArray(value);
1:5a1496f:         if (values.length != 2) {
1:5a1496f:           throw new InvalidConfigurationException(
1:5a1496f:               "Invalid COMPACTION_SEGMENT_LEVEL_THRESHOLD: " + value);
1:5a1496f:         }
1:5a1496f:         isValid = true;
1:5a1496f:         break;
1:39644b5:       default:
1:fd0bdf6:         if (key.startsWith(CarbonCommonConstants.CARBON_INPUT_SEGMENTS)) {
1:fd0bdf6:           isValid = CarbonUtil.validateRangeOfSegmentList(value);
1:fd0bdf6:           if (!isValid) {
1:fd0bdf6:             throw new InvalidConfigurationException("Invalid CARBON_INPUT_SEGMENT_IDs");
1:fd0bdf6:           }
1:cc0e6f1:         } else if (key.startsWith(CarbonCommonConstants.VALIDATE_CARBON_INPUT_SEGMENTS)) {
1:cc0e6f1:           isValid = true;
1:349be00:         } else if (key.equalsIgnoreCase(CarbonCommonConstants.SUPPORT_DIRECT_QUERY_ON_DATAMAP)) {
1:349be00:           isValid = true;
1:fb1516c:         } else if (key.startsWith(CarbonCommonConstantsInternal.QUERY_ON_PRE_AGG_STREAMING)) {
1:fb1516c:           isValid = true;
1:b08ef00:         } else if (key.startsWith(CarbonCommonConstants.CARBON_DATAMAP_VISIBLE)) {
1:b08ef00:           String[] keyArray = key.split("\\.");
1:b08ef00:           isValid = DataMapStoreManager.getInstance().isDataMapExist(
1:b08ef00:               keyArray[keyArray.length - 3],
1:b08ef00:               keyArray[keyArray.length - 2],
1:b08ef00:               keyArray[keyArray.length - 1]);
1:b08ef00:           if (!isValid) {
1:b08ef00:             throw new InvalidConfigurationException(
1:b08ef00:                 String.format("Invalid configuration of %s, datamap does not exist", key));
1:b08ef00:           }
1:531ecdf:         } else if (key.startsWith(CarbonCommonConstants.CARBON_LOAD_DATAMAPS_PARALLEL)) {
1:531ecdf:           isValid = CarbonUtil.validateBoolean(value);
1:531ecdf:           if (!isValid) {
1:531ecdf:             throw new InvalidConfigurationException("Invalid value " + value + " for key " + key);
1:531ecdf:           }
1:fd0bdf6:         } else {
1:fd0bdf6:           throw new InvalidConfigurationException(
1:fd0bdf6:               "The key " + key + " not supported for dynamic configuration.");
1:fd0bdf6:         }
1:8c17cee:     }
1:39644b5:     return isValid;
6:39644b5:   }
1:8c17cee: 
1:cc0e6f1:   public void removeProperty(String property) {
1:cc0e6f1:     sProps.remove(property);
1:cc0e6f1:   }
1:cc0e6f1: 
1:3a6136d:   public void removeExtraInfo(String key) {
1:3a6136d:     extraInfo.remove(key);
1:3a6136d:   }
2:39644b5:   /**
1:39644b5:    * clear the set properties
2:39644b5:    */
1:39644b5:   public void clear() {
1:39644b5:     sProps.clear();
1:39644b5:   }
1:8c17cee: 
1:5508460:   public SessionParams clone() throws CloneNotSupportedException {
1:5508460:     super.clone();
1:5508460:     SessionParams newObj = new SessionParams();
1:5508460:     newObj.addedProps.putAll(this.addedProps);
1:5508460:     newObj.sProps.putAll(this.sProps);
1:5508460:     newObj.extraInfo.putAll(this.extraInfo);
1:5508460:     return newObj;
1:5508460:   }
1:39644b5: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:560bfbe
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_AUTO_LOAD_MERGE;
/////////////////////////////////////////////////////////////////////////
1:       case ENABLE_AUTO_LOAD_MERGE:
commit:5a1496f
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_MAJOR_COMPACTION_SIZE;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.COMPACTION_SEGMENT_LEVEL_THRESHOLD;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_UNSAFE_IN_QUERY_EXECUTION;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_VECTOR_READER;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.NUM_CORES_COMPACTING;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.NUM_CORES_LOADING;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonV3DataFormatConstants.BLOCKLET_SIZE_IN_MB;
/////////////////////////////////////////////////////////////////////////
1:       case ENABLE_VECTOR_READER:
1:       case ENABLE_UNSAFE_IN_QUERY_EXECUTION:
/////////////////////////////////////////////////////////////////////////
1:       case NUM_CORES_LOADING:
1:       case NUM_CORES_COMPACTING:
1:       case BLOCKLET_SIZE_IN_MB:
1:       case CARBON_MAJOR_COMPACTION_SIZE:
/////////////////////////////////////////////////////////////////////////
1:       case COMPACTION_SEGMENT_LEVEL_THRESHOLD:
1:         int[] values = CarbonProperties.getInstance().getIntArray(value);
1:         if (values.length != 2) {
1:           throw new InvalidConfigurationException(
1:               "Invalid COMPACTION_SEGMENT_LEVEL_THRESHOLD: " + value);
1:         }
1:         isValid = true;
1:         break;
author:kunal642
-------------------------------------------------------------------------------
commit:2a9604c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1:   private ConcurrentHashMap<String, String> addedProps;
1:     addedProps = new ConcurrentHashMap<>();
commit:5508460
/////////////////////////////////////////////////////////////////////////
1: public class SessionParams implements Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
1:   public SessionParams clone() throws CloneNotSupportedException {
1:     super.clone();
1:     SessionParams newObj = new SessionParams();
1:     newObj.addedProps.putAll(this.addedProps);
1:     newObj.sProps.putAll(this.sProps);
1:     newObj.extraInfo.putAll(this.extraInfo);
1:     return newObj;
1:   }
commit:cc0e6f1
/////////////////////////////////////////////////////////////////////////
1:   public String getProperty(String key, String defaultValue) {
1:     if (!sProps.containsKey(key)) {
1:       return defaultValue;
1:     }
1:     return sProps.get(key);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else if (key.startsWith(CarbonCommonConstants.VALIDATE_CARBON_INPUT_SEGMENTS)) {
1:           isValid = true;
/////////////////////////////////////////////////////////////////////////
1:   public void removeProperty(String property) {
1:     sProps.remove(property);
1:   }
1: 
author:xubo245
-------------------------------------------------------------------------------
commit:d8bafa3
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_OFFHEAP_SORT;
/////////////////////////////////////////////////////////////////////////
1:       case ENABLE_OFFHEAP_SORT:
commit:5ab3099
/////////////////////////////////////////////////////////////////////////
1:               "The key " + key + " can have only either FORCE or IGNORE or REDIRECT or FAIL.");
author:dhatchayani
-------------------------------------------------------------------------------
commit:531ecdf
/////////////////////////////////////////////////////////////////////////
1:         } else if (key.startsWith(CarbonCommonConstants.CARBON_LOAD_DATAMAPS_PARALLEL)) {
1:           isValid = CarbonUtil.validateBoolean(value);
1:           if (!isValid) {
1:             throw new InvalidConfigurationException("Invalid value " + value + " for key " + key);
1:           }
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b08ef00
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datamap.DataMapStoreManager;
/////////////////////////////////////////////////////////////////////////
1:         } else if (key.startsWith(CarbonCommonConstants.CARBON_DATAMAP_VISIBLE)) {
1:           String[] keyArray = key.split("\\.");
1:           isValid = DataMapStoreManager.getInstance().isDataMapExist(
1:               keyArray[keyArray.length - 3],
1:               keyArray[keyArray.length - 2],
1:               keyArray[keyArray.length - 1]);
1:           if (!isValid) {
1:             throw new InvalidConfigurationException(
1:                 String.format("Invalid configuration of %s, datamap does not exist", key));
1:           }
author:Manhua
-------------------------------------------------------------------------------
commit:638ed1f
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_SEARCH_MODE_ENABLE;
/////////////////////////////////////////////////////////////////////////
1:       case CARBON_SEARCH_MODE_ENABLE:
author:kumarvishal
-------------------------------------------------------------------------------
commit:fb1516c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstantsInternal;
/////////////////////////////////////////////////////////////////////////
1:         } else if (key.startsWith(CarbonCommonConstantsInternal.QUERY_ON_PRE_AGG_STREAMING)) {
1:           isValid = true;
commit:349be00
/////////////////////////////////////////////////////////////////////////
1:         } else if (key.equalsIgnoreCase(CarbonCommonConstants.SUPPORT_DIRECT_QUERY_ON_DATAMAP)) {
1:           isValid = true;
commit:3a6136d
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, Object> extraInfo;
1:     extraInfo = new HashMap<>();
1:   }
1: 
1:   public void setExtraInfo(String key, Object value) {
1:     this.extraInfo.put(key, value);
1:   }
1: 
1:   public Object getExtraInfo(String key) {
1:     return this.extraInfo.get(key);
/////////////////////////////////////////////////////////////////////////
1:   public void removeExtraInfo(String key) {
1:     extraInfo.remove(key);
1:   }
author:akashrn5
-------------------------------------------------------------------------------
commit:ab11a48
/////////////////////////////////////////////////////////////////////////
1:   private static final long serialVersionUID = -7801994600594915264L;
1:   // below field to be used when we want the objects to be serialized
author:Geetika Gupta
-------------------------------------------------------------------------------
commit:e349820
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonLoadOptionConstants;
/////////////////////////////////////////////////////////////////////////
1:       if (key.equals(CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_ACTION)) {
1:         value = value.toUpperCase();
1:       }
author:ravipesala
-------------------------------------------------------------------------------
commit:6f10c41
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_TIMESTAMPFORMAT;
/////////////////////////////////////////////////////////////////////////
1:       // no validation needed while set for CARBON_OPTIONS_TIMESTAMPFORMAT
1:       case CARBON_OPTIONS_TIMESTAMPFORMAT:
1:         isValid = true;
1:         break;
1:       // no validation needed while set for CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT
1:       case CARBON_OPTIONS_SERIALIZATION_NULL_FORMAT:
1:         isValid = true;
1:         break;
commit:28e2e17
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.core.util;
1: 
1: import java.io.Serializable;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
0:  * Created by root1 on 19/5/17.
1:  */
0: public class SessionParams implements Serializable {
1: 
0:   protected transient CarbonProperties properties;
1: 
1:   private Map<String, String> sProps;
1: 
1:   public SessionParams() {
1:     sProps = new HashMap<>();
0:     properties = CarbonProperties.getInstance();
1:   }
1: 
0:   public SessionParams(SessionParams sessionParams) {
0:     this();
0:     sProps.putAll(sessionParams.sProps);
1:   }
1: 
1:   /**
1:    * This method will be used to get the properties value
1:    *
1:    * @param key
1:    * @return properties value
1:    */
1:   public String getProperty(String key) {
0:     String s = sProps.get(key);
0:     if (key == null) {
0:       s = properties.getProperty(key);
1:     }
0:     return s;
1:   }
1: 
1:   /**
0:    * This method will be used to get the properties value if property is not
0:    * present then it will return tghe default value
1:    *
1:    * @param key
1:    * @return properties value
1:    */
0:   public String getProperty(String key, String defaultValue) {
0:     String value = sProps.get(key);
0:     if (key == null) {
0:       value = properties.getProperty(key, defaultValue);
1:     }
0:     return value;
1:   }
1: 
1:   /**
1:    * This method will be used to add a new property
1:    *
1:    * @param key
1:    * @return properties value
1:    */
0:   public SessionParams addProperty(String key, String value) {
1:     sProps.put(key, value);
1:     return this;
1:   }
1: 
0:   public void setProperties(Map<String, String> newProperties) {
0:     sProps.putAll(newProperties);
1:   }
1: 
1: }
author:rahulforallp
-------------------------------------------------------------------------------
commit:34cb551
/////////////////////////////////////////////////////////////////////////
1:     return addProperty(key, value, true);
commit:80195da
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method will be used to add a new property
1:    *
1:    * @param key
0:    * @return properties value
1:    */
1:   public SessionParams addProperty(String key, String value, Boolean doAuditing)
1:       throws InvalidConfigurationException {
1:     boolean isValidConf = validateKeyValue(key, value);
1:     if (isValidConf) {
1:       if (doAuditing) {
1:         LOGGER.audit("The key " + key + " with value " + value + " added in the session param");
1:       }
0:       sProps.put(key, value);
1:     }
1:     return this;
1:   }
1: 
1:   public Map<String, String> getAll() {
1:     return sProps;
1:   }
1: 
commit:fd0bdf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
/////////////////////////////////////////////////////////////////////////
1:         if (key.startsWith(CarbonCommonConstants.CARBON_INPUT_SEGMENTS)) {
1:           isValid = CarbonUtil.validateRangeOfSegmentList(value);
1:           if (!isValid) {
1:             throw new InvalidConfigurationException("Invalid CARBON_INPUT_SEGMENT_IDs");
1:           }
1:         } else {
1:           throw new InvalidConfigurationException(
1:               "The key " + key + " not supported for dynamic configuration.");
1:         }
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:8c17cee
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_ACTION;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BAD_RECORD_PATH;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_BATCH_SORT_SIZE_INMB;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_DATEFORMAT;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SINGLE_PASS;
1: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.CARBON_OPTIONS_SORT_SCOPE;
/////////////////////////////////////////////////////////////////////////
0:   private Map<String, String> addedProps;
0:     addedProps = new HashMap<>();
/////////////////////////////////////////////////////////////////////////
1:   public SessionParams addProps(Map<String, String> addedProps) {
1:     this.addedProps.putAll(addedProps);
0:     return this;
1:   }
1: 
1:   public Map<String, String> getAddedProps() {
1:     return addedProps;
1:   }
1: 
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:39644b5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.carbondata.common.constants.LoggerAction;
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.cache.CacheProvider;
1: import org.apache.carbondata.core.exception.InvalidConfigurationException;
1: 
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.CARBON_CUSTOM_BLOCK_DISTRIBUTION;
1: import static org.apache.carbondata.core.constants.CarbonCommonConstants.ENABLE_UNSAFE_SORT;
0: import static org.apache.carbondata.core.constants.CarbonLoadOptionConstants.*;
1: 
1:  * This class maintains carbon session params
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(CacheProvider.class.getName());
/////////////////////////////////////////////////////////////////////////
1:     return sProps.get(key);
/////////////////////////////////////////////////////////////////////////
1:   public SessionParams addProperty(String key, String value) throws InvalidConfigurationException {
0:     boolean isValidConf = validateKeyValue(key, value);
0:     if (isValidConf) {
0:       LOGGER.audit("The key " + key + " with value " + value + " added in the session param");
0:       sProps.put(key, value);
1:     }
1:   /**
1:    * validate the key value to be set using set command
0:    * @param key
1:    * @param value
1:    * @return
1:    * @throws InvalidConfigurationException
1:    */
1:   private boolean validateKeyValue(String key, String value) throws InvalidConfigurationException {
1:     boolean isValid = false;
1:     switch (key) {
1:       case ENABLE_UNSAFE_SORT:
1:       case CARBON_CUSTOM_BLOCK_DISTRIBUTION:
1:       case CARBON_OPTIONS_BAD_RECORDS_LOGGER_ENABLE:
1:       case CARBON_OPTIONS_IS_EMPTY_DATA_BAD_RECORD:
1:       case CARBON_OPTIONS_SINGLE_PASS:
1:         isValid = CarbonUtil.validateBoolean(value);
1:         if (!isValid) {
1:           throw new InvalidConfigurationException("Invalid value " + value + " for key " + key);
1:         }
1:         break;
1:       case CARBON_OPTIONS_BAD_RECORDS_ACTION:
1:         try {
1:           LoggerAction.valueOf(value.toUpperCase());
1:           isValid = true;
1:         } catch (IllegalArgumentException iae) {
1:           throw new InvalidConfigurationException(
0:               "The key " + key + " can have only either FORCE or IGNORE or REDIRECT.");
1:         }
1:         break;
1:       case CARBON_OPTIONS_SORT_SCOPE:
1:         isValid = CarbonUtil.isValidSortOption(value);
1:         if (!isValid) {
1:           throw new InvalidConfigurationException("The sort scope " + key
1:               + " can have only either BATCH_SORT or LOCAL_SORT or NO_SORT.");
1:         }
1:         break;
1:       case CARBON_OPTIONS_BATCH_SORT_SIZE_INMB:
1:       case CARBON_OPTIONS_GLOBAL_SORT_PARTITIONS:
1:         isValid = CarbonUtil.validateValidIntType(value);
1:         if (!isValid) {
1:           throw new InvalidConfigurationException(
1:               "The configured value for key " + key + " must be valid integer.");
1:         }
1:         break;
1:       case CARBON_OPTIONS_BAD_RECORD_PATH:
1:         isValid = CarbonUtil.isValidBadStorePath(value);
1:         if (!isValid) {
1:           throw new InvalidConfigurationException("Invalid bad records location.");
1:         }
1:         break;
1:       // no validation needed while set for CARBON_OPTIONS_DATEFORMAT
1:       case CARBON_OPTIONS_DATEFORMAT:
1:         isValid = true;
1:         break;
1:       default:
1:         throw new InvalidConfigurationException(
0:             "The key " + key + " not supported for dynamic configuration.");
1:     }
1:     return isValid;
1:   }
0: 
1:   /**
1:    * clear the set properties
1:    */
1:   public void clear() {
1:     sProps.clear();
============================================================================