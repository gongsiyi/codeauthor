1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
2:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
7:cd6a4ff:  */
1:8d8b589: 
1:349c59c: package org.apache.carbondata.processing.sort.sortdata;
1:9f94529: 
1:cd6a4ff: import java.io.File;
1:cd6a4ff: import java.io.FileFilter;
1:cd6a4ff: import java.util.AbstractQueue;
1:ded8b41: import java.util.ArrayList;
1:ded8b41: import java.util.Arrays;
1:ded8b41: import java.util.List;
1:7ef9164: import java.util.NoSuchElementException;
1:cd6a4ff: import java.util.PriorityQueue;
1:a734add: import java.util.concurrent.Callable;
1:a734add: import java.util.concurrent.ExecutionException;
1:cd6a4ff: import java.util.concurrent.ExecutorService;
1:cd6a4ff: import java.util.concurrent.Executors;
1:a734add: import java.util.concurrent.Future;
1:cd6a4ff: import java.util.concurrent.TimeUnit;
1:496cde4: 
1:9aee980: import org.apache.carbondata.common.CarbonIterator;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogService;
1:cd6a4ff: import org.apache.carbondata.common.logging.LogServiceFactory;
1:cd6a4ff: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:dc83b2a: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
1:cd6a4ff: import org.apache.carbondata.core.util.CarbonProperties;
1:2b41f14: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1:2b41f14: import org.apache.carbondata.processing.loading.sort.SortStepRowHandler;
1:349c59c: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
17:cd6a4ff: 
1:9aee980: public class SingleThreadFinalSortFilesMerger extends CarbonIterator<Object[]> {
7:cd6a4ff:   /**
1:cd6a4ff:    * LOGGER
1:cd6a4ff:    */
1:cd6a4ff:   private static final LogService LOGGER =
1:cd6a4ff:       LogServiceFactory.getLogService(SingleThreadFinalSortFilesMerger.class.getName());
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * lockObject
1:cd6a4ff:    */
1:cd6a4ff:   private static final Object LOCKOBJECT = new Object();
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * fileCounter
1:cd6a4ff:    */
1:cd6a4ff:   private int fileCounter;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * recordHolderHeap
1:cd6a4ff:    */
1:cd6a4ff:   private AbstractQueue<SortTempFileChunkHolder> recordHolderHeapLocal;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * tableName
1:cd6a4ff:    */
1:cd6a4ff:   private String tableName;
1:2b41f14:   private SortParameters sortParameters;
1:2b41f14:   private SortStepRowHandler sortStepRowHandler;
1:cd6a4ff:   /**
1:cd6a4ff:    * tempFileLocation
1:cd6a4ff:    */
1:ded8b41:   private String[] tempFileLocation;
1:cd6a4ff: 
1:a734add:   private int maxThreadForSorting;
1:a734add: 
1:a734add:   private ExecutorService executorService;
1:a734add: 
1:a734add:   private List<Future<Void>> mergerTask;
1:a734add: 
1:ded8b41:   public SingleThreadFinalSortFilesMerger(String[] tempFileLocation, String tableName,
1:c100251:       SortParameters sortParameters) {
1:cd6a4ff:     this.tempFileLocation = tempFileLocation;
1:cd6a4ff:     this.tableName = tableName;
1:c100251:     this.sortParameters = sortParameters;
1:2b41f14:     this.sortStepRowHandler = new SortStepRowHandler(sortParameters);
1:a734add:     try {
1:a734add:       maxThreadForSorting = Integer.parseInt(CarbonProperties.getInstance()
1:a734add:           .getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD,
1:a734add:               CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE));
1:a734add:     } catch (NumberFormatException e) {
1:a734add:       maxThreadForSorting =
1:a734add:           Integer.parseInt(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE);
1:a734add:     }
1:a734add:     this.mergerTask = new ArrayList<>();
2:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to merger the merged files
1:cd6a4ff:    *
1:cd6a4ff:    * @throws CarbonSortKeyAndGroupByException
1:cd6a4ff:    */
1:cd6a4ff:   public void startFinalMerge() throws CarbonDataWriterException {
1:ded8b41:     List<File> filesToMerge = getFilesToMergeSort();
1:2b41f14:     if (filesToMerge.size() == 0) {
1:ded8b41:       LOGGER.info("No file to merge in final merge stage");
1:ded8b41:       return;
1:ded8b41:     }
1:cd6a4ff: 
1:ded8b41:     startSorting(filesToMerge);
1:ded8b41:   }
1:ded8b41: 
1:ded8b41:   private List<File> getFilesToMergeSort() {
1:d5396b1:     final int rangeId = sortParameters.getRangeId();
1:ded8b41:     FileFilter fileFilter = new FileFilter() {
1:cd6a4ff:       public boolean accept(File pathname) {
1:d5396b1:         return pathname.getName().startsWith(tableName + '_' + rangeId);
1:cd6a4ff:       }
1:ded8b41:     };
1:cd6a4ff: 
1:ded8b41:     // get all the merged files
1:ded8b41:     List<File> files = new ArrayList<File>(tempFileLocation.length);
1:2b41f14:     for (String tempLoc : tempFileLocation) {
1:ded8b41:       File[] subFiles = new File(tempLoc).listFiles(fileFilter);
1:2b41f14:       if (null != subFiles && subFiles.length > 0) {
1:ded8b41:         files.addAll(Arrays.asList(subFiles));
1:ded8b41:       }
1:cd6a4ff:     }
1:ded8b41: 
1:ded8b41:     return files;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * Below method will be used to start storing process This method will get
1:cd6a4ff:    * all the temp files present in sort temp folder then it will create the
1:cd6a4ff:    * record holder heap and then it will read first record from each file and
1:cd6a4ff:    * initialize the heap
1:cd6a4ff:    *
1:cd6a4ff:    * @throws CarbonSortKeyAndGroupByException
1:cd6a4ff:    */
1:ded8b41:   private void startSorting(List<File> files) throws CarbonDataWriterException {
1:ded8b41:     this.fileCounter = files.size();
1:cbf8797:     if (fileCounter == 0) {
1:cbf8797:       LOGGER.info("No files to merge sort");
1:cbf8797:       return;
1:cbf8797:     }
1:cd6a4ff: 
1:a734add:     LOGGER.info("Started Final Merge");
1:a734add: 
1:cd6a4ff:     LOGGER.info("Number of temp file: " + this.fileCounter);
1:cd6a4ff: 
1:cd6a4ff:     // create record holder heap
1:ded8b41:     createRecordHolderQueue();
1:cd6a4ff: 
1:cd6a4ff:     // iterate over file list and create chunk holder and add to heap
1:cd6a4ff:     LOGGER.info("Started adding first record from each file");
1:a734add:     this.executorService = Executors.newFixedThreadPool(maxThreadForSorting);
1:cd6a4ff: 
1:cd6a4ff:     for (final File tempFile : files) {
1:cd6a4ff: 
1:a734add:       Callable<Void> callable = new Callable<Void>() {
1:a734add:         @Override public Void call() throws CarbonSortKeyAndGroupByException {
1:06b0d08:             // create chunk holder
1:06b0d08:             SortTempFileChunkHolder sortTempFileChunkHolder =
1:f27efb3:                 new SortTempFileChunkHolder(tempFile, sortParameters, tableName, true);
1:06b0d08:           try {
1:06b0d08:             // initialize
1:06b0d08:             sortTempFileChunkHolder.initialize();
1:06b0d08:             sortTempFileChunkHolder.readRow();
1:06b0d08:           } catch (CarbonSortKeyAndGroupByException ex) {
1:a734add:             sortTempFileChunkHolder.closeStream();
1:a734add:             notifyFailure(ex);
1:06b0d08:           }
1:cd6a4ff:           synchronized (LOCKOBJECT) {
1:cd6a4ff:             recordHolderHeapLocal.add(sortTempFileChunkHolder);
1:cd6a4ff:           }
1:a734add:           return null;
1:cd6a4ff:         }
1:cd6a4ff:       };
1:a734add:       mergerTask.add(executorService.submit(callable));
1:cd6a4ff:     }
1:a734add:     executorService.shutdown();
2:cd6a4ff:     try {
1:a734add:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:cd6a4ff:     } catch (Exception e) {
1:cd6a4ff:       throw new CarbonDataWriterException(e.getMessage(), e);
1:cd6a4ff:     }
1:a734add:     checkFailure();
1:a734add:     LOGGER.info("final merger Heap Size" + this.recordHolderHeapLocal.size());
1:a734add:   }
1:cd6a4ff: 
1:a734add:   private void checkFailure() {
1:a734add:     for (int i = 0; i < mergerTask.size(); i++) {
1:a734add:       try {
1:a734add:         mergerTask.get(i).get();
1:a734add:       } catch (InterruptedException | ExecutionException e) {
1:a734add:         throw new CarbonDataWriterException(e);
1:a734add:       }
1:a734add:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to create the heap which will be used to hold
1:cd6a4ff:    * the chunk of data
1:cd6a4ff:    */
1:ded8b41:   private void createRecordHolderQueue() {
1:cd6a4ff:     // creating record holder heap
1:ded8b41:     this.recordHolderHeapLocal = new PriorityQueue<SortTempFileChunkHolder>(fileCounter);
1:cd6a4ff:   }
1:cd6a4ff: 
1:a734add:   private synchronized void notifyFailure(Throwable throwable) {
1:a734add:     close();
1:a734add:     LOGGER.error(throwable);
1:a734add:   }
1:a734add: 
1:cd6a4ff:   /**
1:2b41f14:    * This method will be used to get the sorted sort temp row from the sort temp files
1:cd6a4ff:    *
1:cd6a4ff:    * @return sorted row
1:cd6a4ff:    * @throws CarbonSortKeyAndGroupByException
1:cd6a4ff:    */
1:9aee980:   public Object[] next() {
1:7ef9164:     if (hasNext()) {
1:7ef9164:       IntermediateSortTempRow sortTempRow = getSortedRecordFromFile();
1:7ef9164:       return sortStepRowHandler.convertIntermediateSortTempRowTo3Parted(sortTempRow);
1:7ef9164:     } else {
1:7ef9164:       throw new NoSuchElementException("No more elements to return");
1:7ef9164:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to get the sorted record from file
1:cd6a4ff:    *
1:cd6a4ff:    * @return sorted record sorted record
1:cd6a4ff:    * @throws CarbonSortKeyAndGroupByException
1:cd6a4ff:    */
1:2b41f14:   private IntermediateSortTempRow getSortedRecordFromFile() throws CarbonDataWriterException {
1:2b41f14:     IntermediateSortTempRow row = null;
1:cd6a4ff: 
1:cd6a4ff:     // poll the top object from heap
1:cd6a4ff:     // heap maintains binary tree which is based on heap condition that will
1:cd6a4ff:     // be based on comparator we are passing the heap
1:cd6a4ff:     // when will call poll it will always delete root of the tree and then
1:cd6a4ff:     // it does trickel down operation complexity is log(n)
1:cd6a4ff:     SortTempFileChunkHolder poll = this.recordHolderHeapLocal.poll();
1:cd6a4ff: 
1:cd6a4ff:     // get the row from chunk
1:cd6a4ff:     row = poll.getRow();
1:cd6a4ff: 
1:cd6a4ff:     // check if there no entry present
1:cd6a4ff:     if (!poll.hasNext()) {
1:cd6a4ff:       // if chunk is empty then close the stream
1:cd6a4ff:       poll.closeStream();
1:cd6a4ff: 
1:cd6a4ff:       // change the file counter
1:cd6a4ff:       --this.fileCounter;
1:cd6a4ff: 
1:cd6a4ff:       // reaturn row
1:cd6a4ff:       return row;
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     // read new row
1:cd6a4ff:     try {
1:cd6a4ff:       poll.readRow();
1:cd6a4ff:     } catch (CarbonSortKeyAndGroupByException e) {
1:a734add:       close();
1:cd6a4ff:       throw new CarbonDataWriterException(e.getMessage(), e);
1:cd6a4ff:     }
1:cd6a4ff: 
2:cd6a4ff:     // add to heap
1:cd6a4ff:     this.recordHolderHeapLocal.add(poll);
1:cd6a4ff: 
1:cd6a4ff:     // return row
1:cd6a4ff:     return row;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will be used to check whether any more element is present or
1:cd6a4ff:    * not
1:cd6a4ff:    *
1:cd6a4ff:    * @return more element is present
1:cd6a4ff:    */
1:cd6a4ff:   public boolean hasNext() {
1:cd6a4ff:     return this.fileCounter > 0;
1:cd6a4ff:   }
1:cd6a4ff: 
1:a734add:   public void close() {
1:a734add:     if (null != executorService && !executorService.isShutdown()) {
1:a734add:       executorService.shutdownNow();
1:a734add:     }
1:cd6a4ff:     if (null != recordHolderHeapLocal) {
1:a734add:       SortTempFileChunkHolder sortTempFileChunkHolder;
1:a734add:       while (!recordHolderHeapLocal.isEmpty()) {
1:a734add:         sortTempFileChunkHolder = recordHolderHeapLocal.poll();
1:a734add:         if (null != sortTempFileChunkHolder) {
1:a734add:           sortTempFileChunkHolder.closeStream();
1:a734add:         }
1:a734add:       }
1:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:67a8a37
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:     if (hasNext()) {
1:       IntermediateSortTempRow sortTempRow = getSortedRecordFromFile();
1:       return sortStepRowHandler.convertIntermediateSortTempRowTo3Parted(sortTempRow);
1:     } else {
1:       throw new NoSuchElementException("No more elements to return");
1:     }
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Runnable runnable = new Runnable() {
0:         @Override public void run() {
1:             // create chunk holder
1:             SortTempFileChunkHolder sortTempFileChunkHolder =
0:                 new SortTempFileChunkHolder(tempFile, dimensionCount, complexDimensionCount,
0:                     measureCount, fileBufferSize, noDictionaryCount, measureDataType,
0:                     isNoDictionaryColumn, isNoDictionarySortColumn);
1:           try {
1:             // initialize
1:             sortTempFileChunkHolder.initialize();
1:             sortTempFileChunkHolder.readRow();
1:           } catch (CarbonSortKeyAndGroupByException ex) {
0:             LOGGER.error(ex);
1:           }
0:       service.execute(runnable);
author:kumarvishal09
-------------------------------------------------------------------------------
commit:f27efb3
/////////////////////////////////////////////////////////////////////////
1:                 new SortTempFileChunkHolder(tempFile, sortParameters, tableName, true);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1:     final int rangeId = sortParameters.getRangeId();
1:         return pathname.getName().startsWith(tableName + '_' + rangeId);
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
1: import org.apache.carbondata.processing.loading.sort.SortStepRowHandler;
/////////////////////////////////////////////////////////////////////////
1:   private SortParameters sortParameters;
1:   private SortStepRowHandler sortStepRowHandler;
/////////////////////////////////////////////////////////////////////////
1:     this.sortStepRowHandler = new SortStepRowHandler(sortParameters);
/////////////////////////////////////////////////////////////////////////
1:     if (filesToMerge.size() == 0) {
/////////////////////////////////////////////////////////////////////////
1:     for (String tempLoc : tempFileLocation) {
1:       if (null != subFiles && subFiles.length > 0) {
/////////////////////////////////////////////////////////////////////////
1:    * This method will be used to get the sorted sort temp row from the sort temp files
0:     IntermediateSortTempRow sortTempRow = getSortedRecordFromFile();
0:     return sortStepRowHandler.convertIntermediateSortTempRowTo3Parted(sortTempRow);
/////////////////////////////////////////////////////////////////////////
1:   private IntermediateSortTempRow getSortedRecordFromFile() throws CarbonDataWriterException {
1:     IntermediateSortTempRow row = null;
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:   private SortParameters sortParameters;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (filesToMerge.size() == 0)
0:     {
/////////////////////////////////////////////////////////////////////////
0:     for (String tempLoc : tempFileLocation)
0:     {
0:       if (null != subFiles && subFiles.length > 0)
0:       {
/////////////////////////////////////////////////////////////////////////
0:    * This method will be used to get the sorted row
0:     return getSortedRecordFromFile();
/////////////////////////////////////////////////////////////////////////
0:   private Object[] getSortedRecordFromFile() throws CarbonDataWriterException {
0:     Object[] row = null;
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.loading.row.IntermediateSortTempRow;
0: import org.apache.carbondata.processing.loading.sort.SortStepRowHandler;
/////////////////////////////////////////////////////////////////////////
0:   private SortParameters sortParameters;
0:   private SortStepRowHandler sortStepRowHandler;
/////////////////////////////////////////////////////////////////////////
0:     this.sortStepRowHandler = new SortStepRowHandler(sortParameters);
/////////////////////////////////////////////////////////////////////////
0:     if (filesToMerge.size() == 0) {
/////////////////////////////////////////////////////////////////////////
0:     for (String tempLoc : tempFileLocation) {
0:       if (null != subFiles && subFiles.length > 0) {
/////////////////////////////////////////////////////////////////////////
0:    * This method will be used to get the sorted sort temp row from the sort temp files
0:     IntermediateSortTempRow sortTempRow = getSortedRecordFromFile();
0:     return sortStepRowHandler.convertIntermediateSortTempRowTo3Parted(sortTempRow);
/////////////////////////////////////////////////////////////////////////
0:   private IntermediateSortTempRow getSortedRecordFromFile() throws CarbonDataWriterException {
0:     IntermediateSortTempRow row = null;
commit:c100251
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private SortParameters sortParameters;
/////////////////////////////////////////////////////////////////////////
1:       SortParameters sortParameters) {
1:     this.sortParameters = sortParameters;
/////////////////////////////////////////////////////////////////////////
0:                 new SortTempFileChunkHolder(tempFile, sortParameters, tableName);
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   private String[] tempFileLocation;
/////////////////////////////////////////////////////////////////////////
1:   public SingleThreadFinalSortFilesMerger(String[] tempFileLocation, String tableName,
/////////////////////////////////////////////////////////////////////////
1:     List<File> filesToMerge = getFilesToMergeSort();
0:     if (filesToMerge.size() == 0)
0:     {
1:       LOGGER.info("No file to merge in final merge stage");
1:       return;
1:     }
1:     startSorting(filesToMerge);
1:   }
1: 
1:   private List<File> getFilesToMergeSort() {
1:     FileFilter fileFilter = new FileFilter() {
1:     };
1:     // get all the merged files
1:     List<File> files = new ArrayList<File>(tempFileLocation.length);
0:     for (String tempLoc : tempFileLocation)
0:     {
1:       File[] subFiles = new File(tempLoc).listFiles(fileFilter);
0:       if (null != subFiles && subFiles.length > 0)
0:       {
1:         files.addAll(Arrays.asList(subFiles));
1:       }
1: 
1:     return files;
/////////////////////////////////////////////////////////////////////////
1:   private void startSorting(List<File> files) throws CarbonDataWriterException {
1:     this.fileCounter = files.size();
/////////////////////////////////////////////////////////////////////////
1:     createRecordHolderQueue();
/////////////////////////////////////////////////////////////////////////
1:   private void createRecordHolderQueue() {
1:     this.recordHolderHeapLocal = new PriorityQueue<SortTempFileChunkHolder>(fileCounter);
author:kumarvishal
-------------------------------------------------------------------------------
commit:a734add
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
1:   private int maxThreadForSorting;
1: 
1:   private ExecutorService executorService;
1: 
1:   private List<Future<Void>> mergerTask;
1: 
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       maxThreadForSorting = Integer.parseInt(CarbonProperties.getInstance()
1:           .getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD,
1:               CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE));
1:     } catch (NumberFormatException e) {
1:       maxThreadForSorting =
1:           Integer.parseInt(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE);
1:     }
1:     this.mergerTask = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.info("Started Final Merge");
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.executorService = Executors.newFixedThreadPool(maxThreadForSorting);
1:       Callable<Void> callable = new Callable<Void>() {
1:         @Override public Void call() throws CarbonSortKeyAndGroupByException {
0:                     isNoDictionaryColumn, isNoDictionarySortColumn, tableName);
1:             sortTempFileChunkHolder.closeStream();
1:             notifyFailure(ex);
1:           return null;
1:       mergerTask.add(executorService.submit(callable));
1:     executorService.shutdown();
1:       executorService.awaitTermination(2, TimeUnit.HOURS);
1:     checkFailure();
1:     LOGGER.info("final merger Heap Size" + this.recordHolderHeapLocal.size());
1:   }
1:   private void checkFailure() {
1:     for (int i = 0; i < mergerTask.size(); i++) {
1:       try {
1:         mergerTask.get(i).get();
1:       } catch (InterruptedException | ExecutionException e) {
1:         throw new CarbonDataWriterException(e);
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:   private synchronized void notifyFailure(Throwable throwable) {
1:     close();
1:     LOGGER.error(throwable);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       close();
/////////////////////////////////////////////////////////////////////////
1:   public void close() {
1:     if (null != executorService && !executorService.isShutdown()) {
1:       executorService.shutdownNow();
1:     }
1:       SortTempFileChunkHolder sortTempFileChunkHolder;
1:       while (!recordHolderHeapLocal.isEmpty()) {
1:         sortTempFileChunkHolder = recordHolderHeapLocal.poll();
1:         if (null != sortTempFileChunkHolder) {
1:           sortTempFileChunkHolder.closeStream();
1:         }
1:       }
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.sort.sortdata;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.exception.CarbonDataWriterException;
commit:98df130
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
0:   private DataType[] measureDataType;
/////////////////////////////////////////////////////////////////////////
0:       DataType[] type, boolean[] isNoDictionaryColumn, boolean[] isNoDictionarySortColumn) {
0:     this.measureDataType = type;
/////////////////////////////////////////////////////////////////////////
0:                   measureCount, fileBufferSize, noDictionaryCount, measureDataType,
0:                   isNoDictionaryColumn, isNoDictionarySortColumn);
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
0:   private boolean[] isNoDictionarySortColumn;
1: 
0:       char[] aggType, boolean[] isNoDictionaryColumn, boolean[] isNoDictionarySortColumn) {
/////////////////////////////////////////////////////////////////////////
0:     this.isNoDictionarySortColumn = isNoDictionarySortColumn;
/////////////////////////////////////////////////////////////////////////
0:                   measureCount, fileBufferSize, noDictionaryCount, aggType, isNoDictionaryColumn,
0:                   isNoDictionarySortColumn);
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:498cf98
/////////////////////////////////////////////////////////////////////////
0:     if (null == fileList || fileList.length == 0) {
author:ravipesala
-------------------------------------------------------------------------------
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       char[] aggType, boolean[] isNoDictionaryColumn) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                   measureCount, fileBufferSize, noDictionaryCount, aggType, isNoDictionaryColumn);
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
1:     if (fileCounter == 0) {
1:       LOGGER.info("No files to merge sort");
1:       return;
1:     }
commit:496cde4
/////////////////////////////////////////////////////////////////////////
0:   private boolean useKettle;
1: 
/////////////////////////////////////////////////////////////////////////
0:       char[] aggType, boolean[] isNoDictionaryColumn, boolean useKettle) {
/////////////////////////////////////////////////////////////////////////
0:     this.useKettle = useKettle;
/////////////////////////////////////////////////////////////////////////
0:                   measureCount, fileBufferSize, noDictionaryCount, aggType, isNoDictionaryColumn,
0:                   useKettle);
commit:9aee980
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.common.CarbonIterator;
/////////////////////////////////////////////////////////////////////////
1: public class SingleThreadFinalSortFilesMerger extends CarbonIterator<Object[]> {
/////////////////////////////////////////////////////////////////////////
1:   public Object[] next() {
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.store;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.util.AbstractQueue;
1: import java.util.PriorityQueue;
0: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.processing.sortandgroupby.exception.CarbonSortKeyAndGroupByException;
0: import org.apache.carbondata.processing.sortandgroupby.sortdata.SortTempFileChunkHolder;
0: import org.apache.carbondata.processing.store.writer.exception.CarbonDataWriterException;
0: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: 
0: public class SingleThreadFinalSortFilesMerger {
1:   /**
1:    * LOGGER
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SingleThreadFinalSortFilesMerger.class.getName());
1: 
1:   /**
1:    * lockObject
1:    */
1:   private static final Object LOCKOBJECT = new Object();
1: 
1:   /**
1:    * fileCounter
1:    */
1:   private int fileCounter;
1: 
1:   /**
0:    * fileBufferSize
1:    */
0:   private int fileBufferSize;
1: 
1:   /**
1:    * recordHolderHeap
1:    */
1:   private AbstractQueue<SortTempFileChunkHolder> recordHolderHeapLocal;
1: 
1:   /**
1:    * tableName
1:    */
1:   private String tableName;
1: 
1:   /**
0:    * measureCount
1:    */
0:   private int measureCount;
1: 
1:   /**
0:    * dimensionCount
1:    */
0:   private int dimensionCount;
1: 
1:   /**
0:    * measure count
1:    */
0:   private int noDictionaryCount;
1: 
1:   /**
0:    * complexDimensionCount
1:    */
0:   private int complexDimensionCount;
1: 
1:   /**
1:    * tempFileLocation
1:    */
0:   private String tempFileLocation;
1: 
0:   private char[] aggType;
1: 
1:   /**
0:    * below code is to check whether dimension
0:    * is of no dictionary type or not
1:    */
0:   private boolean[] isNoDictionaryColumn;
1: 
0:   public SingleThreadFinalSortFilesMerger(String tempFileLocation, String tableName,
0:       int dimensionCount, int complexDimensionCount, int measureCount, int noDictionaryCount,
0:       char[] aggType, boolean[] isNoDictionaryColumn) {
1:     this.tempFileLocation = tempFileLocation;
1:     this.tableName = tableName;
0:     this.dimensionCount = dimensionCount;
0:     this.complexDimensionCount = complexDimensionCount;
0:     this.measureCount = measureCount;
0:     this.aggType = aggType;
0:     this.noDictionaryCount = noDictionaryCount;
0:     this.isNoDictionaryColumn = isNoDictionaryColumn;
1:   }
1: 
1:   /**
1:    * This method will be used to merger the merged files
1:    *
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
1:   public void startFinalMerge() throws CarbonDataWriterException {
0:     // get all the merged files
0:     File file = new File(tempFileLocation);
1: 
0:     File[] fileList = file.listFiles(new FileFilter() {
1:       public boolean accept(File pathname) {
0:         return pathname.getName().startsWith(tableName);
1:       }
0:     });
1: 
0:     if (null == fileList || fileList.length < 0) {
0:       return;
1:     }
0:     startSorting(fileList);
1:   }
1: 
1:   /**
1:    * Below method will be used to start storing process This method will get
1:    * all the temp files present in sort temp folder then it will create the
1:    * record holder heap and then it will read first record from each file and
1:    * initialize the heap
1:    *
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
0:   private void startSorting(File[] files) throws CarbonDataWriterException {
0:     this.fileCounter = files.length;
0:     this.fileBufferSize = CarbonDataProcessorUtil
0:         .getFileBufferSize(this.fileCounter, CarbonProperties.getInstance(),
0:             CarbonCommonConstants.CONSTANT_SIZE_TEN);
1: 
1:     LOGGER.info("Number of temp file: " + this.fileCounter);
1: 
0:     LOGGER.info("File Buffer Size: " + this.fileBufferSize);
1: 
1:     // create record holder heap
0:     createRecordHolderQueue(files);
1: 
1:     // iterate over file list and create chunk holder and add to heap
1:     LOGGER.info("Started adding first record from each file");
0:     int maxThreadForSorting = 0;
1:     try {
0:       maxThreadForSorting = Integer.parseInt(CarbonProperties.getInstance()
0:           .getProperty(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD,
0:               CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE));
0:     } catch (NumberFormatException e) {
0:       maxThreadForSorting =
0:           Integer.parseInt(CarbonCommonConstants.CARBON_MERGE_SORT_READER_THREAD_DEFAULTVALUE);
1:     }
0:     ExecutorService service = Executors.newFixedThreadPool(maxThreadForSorting);
1: 
1:     for (final File tempFile : files) {
1: 
0:       Callable<Void> runnable = new Callable<Void>() {
0:         @Override public Void call() throws CarbonSortKeyAndGroupByException {
0:           // create chunk holder
0:           SortTempFileChunkHolder sortTempFileChunkHolder =
0:               new SortTempFileChunkHolder(tempFile, dimensionCount, complexDimensionCount,
0:                   measureCount, fileBufferSize, noDictionaryCount, aggType, isNoDictionaryColumn);
1: 
0:           // initialize
0:           sortTempFileChunkHolder.initialize();
0:           sortTempFileChunkHolder.readRow();
1: 
1:           synchronized (LOCKOBJECT) {
1:             recordHolderHeapLocal.add(sortTempFileChunkHolder);
1:           }
1: 
1:           // add to heap
0:           return null;
1:         }
1:       };
0:       service.submit(runnable);
1:     }
0:     service.shutdown();
1: 
1:     try {
0:       service.awaitTermination(2, TimeUnit.HOURS);
1:     } catch (Exception e) {
1:       throw new CarbonDataWriterException(e.getMessage(), e);
1:     }
1: 
0:     LOGGER.info("Heap Size" + this.recordHolderHeapLocal.size());
1:   }
1: 
1:   /**
1:    * This method will be used to create the heap which will be used to hold
1:    * the chunk of data
1:    *
0:    * @param listFiles list of temp files
1:    */
0:   private void createRecordHolderQueue(File[] listFiles) {
1:     // creating record holder heap
0:     this.recordHolderHeapLocal = new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);
1:   }
1: 
1:   /**
0:    * This method will be used to get the sorted row
1:    *
1:    * @return sorted row
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
0:   public Object[] next() throws CarbonDataWriterException {
0:     return getSortedRecordFromFile();
1:   }
1: 
1:   /**
1:    * This method will be used to get the sorted record from file
1:    *
1:    * @return sorted record sorted record
1:    * @throws CarbonSortKeyAndGroupByException
1:    */
0:   private Object[] getSortedRecordFromFile() throws CarbonDataWriterException {
0:     Object[] row = null;
1: 
1:     // poll the top object from heap
1:     // heap maintains binary tree which is based on heap condition that will
1:     // be based on comparator we are passing the heap
1:     // when will call poll it will always delete root of the tree and then
1:     // it does trickel down operation complexity is log(n)
1:     SortTempFileChunkHolder poll = this.recordHolderHeapLocal.poll();
1: 
1:     // get the row from chunk
1:     row = poll.getRow();
1: 
1:     // check if there no entry present
1:     if (!poll.hasNext()) {
1:       // if chunk is empty then close the stream
1:       poll.closeStream();
1: 
1:       // change the file counter
1:       --this.fileCounter;
1: 
1:       // reaturn row
1:       return row;
1:     }
1: 
1:     // read new row
1:     try {
1:       poll.readRow();
1:     } catch (CarbonSortKeyAndGroupByException e) {
1:       throw new CarbonDataWriterException(e.getMessage(), e);
1:     }
1: 
1:     // add to heap
1:     this.recordHolderHeapLocal.add(poll);
1: 
1:     // return row
1:     return row;
1:   }
1: 
1:   /**
1:    * This method will be used to check whether any more element is present or
1:    * not
1:    *
1:    * @return more element is present
1:    */
1:   public boolean hasNext() {
1:     return this.fileCounter > 0;
1:   }
1: 
0:   public void clear() {
1:     if (null != recordHolderHeapLocal) {
0:       recordHolderHeapLocal = null;
1:     }
1:   }
1: }
============================================================================