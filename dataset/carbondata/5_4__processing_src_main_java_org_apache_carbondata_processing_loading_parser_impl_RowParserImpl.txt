1:f63b1ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f63b1ff:  *
1:f63b1ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f63b1ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f63b1ff:  */
1:349c59c: package org.apache.carbondata.processing.loading.parser.impl;
1:f63b1ff: 
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:349c59c: import org.apache.carbondata.processing.loading.DataField;
1:349c59c: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1:349c59c: import org.apache.carbondata.processing.loading.parser.CarbonParserFactory;
1:349c59c: import org.apache.carbondata.processing.loading.parser.GenericParser;
1:349c59c: import org.apache.carbondata.processing.loading.parser.RowParser;
1:f63b1ff: 
1:f63b1ff: public class RowParserImpl implements RowParser {
1:f63b1ff: 
1:f63b1ff:   private GenericParser[] genericParsers;
1:f63b1ff: 
1:496cde4:   private int[] outputMapping;
1:496cde4: 
1:496cde4:   private int[] inputMapping;
1:496cde4: 
1:496cde4:   private int numberOfColumns;
1:496cde4: 
1:496cde4:   public RowParserImpl(DataField[] output, CarbonDataLoadConfiguration configuration) {
1:496cde4:     String[] complexDelimiters =
1:496cde4:         (String[]) configuration.getDataLoadProperty(DataLoadProcessorConstants.COMPLEX_DELIMITERS);
1:496cde4:     String nullFormat =
1:496cde4:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:496cde4:             .toString();
1:496cde4:     DataField[] input = getInput(configuration);
1:496cde4:     genericParsers = new GenericParser[input.length];
1:496cde4:     for (int i = 0; i < genericParsers.length; i++) {
1:496cde4:       genericParsers[i] =
1:496cde4:           CarbonParserFactory.createParser(input[i].getColumn(), complexDelimiters, nullFormat);
1:496cde4:     }
1:496cde4:     outputMapping = new int[output.length];
1:496cde4:     for (int i = 0; i < input.length; i++) {
1:496cde4:       for (int j = 0; j < output.length; j++) {
1:496cde4:         if (input[i].getColumn().equals(output[j].getColumn())) {
1:496cde4:           outputMapping[i] = j;
1:496cde4:           break;
1:496cde4:         }
1:496cde4:       }
1:496cde4:     }
1:496cde4:   }
1:496cde4: 
1:496cde4:   public DataField[] getInput(CarbonDataLoadConfiguration configuration) {
1:496cde4:     DataField[] fields = configuration.getDataFields();
1:496cde4:     String[] header = configuration.getHeader();
1:496cde4:     numberOfColumns = header.length;
1:496cde4:     DataField[] input = new DataField[fields.length];
1:496cde4:     inputMapping = new int[input.length];
1:496cde4:     int k = 0;
1:71fe32a:     for (int i = 0; i < fields.length; i++) {
1:71fe32a:       for (int j = 0; j < numberOfColumns; j++) {
1:71fe32a:         if (header[j].equalsIgnoreCase(fields[i].getColumn().getColName())) {
1:71fe32a:           input[k] = fields[i];
1:71fe32a:           inputMapping[k] = j;
1:496cde4:           k++;
1:496cde4:           break;
1:496cde4:         }
1:496cde4:       }
1:496cde4:     }
1:496cde4:     return input;
1:f63b1ff:   }
1:f63b1ff: 
1:f63b1ff:   @Override
1:f63b1ff:   public Object[] parseRow(Object[] row) {
1:560bfbe:     if (row == null) {
1:560bfbe:       return new String[numberOfColumns];
1:560bfbe:     }
1:496cde4:     // If number of columns are less in a row then create new array with same size of header.
1:496cde4:     if (row.length < numberOfColumns) {
1:496cde4:       String[] temp = new String[numberOfColumns];
1:496cde4:       System.arraycopy(row, 0, temp, 0, row.length);
1:496cde4:       row = temp;
1:f63b1ff:     }
1:496cde4:     Object[] out = new Object[genericParsers.length];
1:496cde4:     for (int i = 0; i < genericParsers.length; i++) {
1:496cde4:       Object obj = row[inputMapping[i]];
1:496cde4:       out[outputMapping[i]] = genericParsers[i].parse(obj);
1:496cde4:     }
1:496cde4:     return out;
1:f63b1ff:   }
1:496cde4: 
1:f63b1ff: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:560bfbe
/////////////////////////////////////////////////////////////////////////
1:     if (row == null) {
1:       return new String[numberOfColumns];
1:     }
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.parser.impl;
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1: import org.apache.carbondata.processing.loading.DataField;
1: import org.apache.carbondata.processing.loading.constants.DataLoadProcessorConstants;
1: import org.apache.carbondata.processing.loading.parser.CarbonParserFactory;
1: import org.apache.carbondata.processing.loading.parser.GenericParser;
1: import org.apache.carbondata.processing.loading.parser.RowParser;
author:kumarvishal
-------------------------------------------------------------------------------
commit:71fe32a
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < fields.length; i++) {
1:       for (int j = 0; j < numberOfColumns; j++) {
1:         if (header[j].equalsIgnoreCase(fields[i].getColumn().getColName())) {
1:           input[k] = fields[i];
1:           inputMapping[k] = j;
author:manishgupta88
-------------------------------------------------------------------------------
commit:1cd0450
/////////////////////////////////////////////////////////////////////////
0:     // value of k can be max equivalent to the number of columns in schema
0:     for (int i = 0; i < numberOfColumns && k < fields.length; i++) {
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.newflow.DataField;
0: import org.apache.carbondata.processing.newflow.constants.DataLoadProcessorConstants;
0: import org.apache.carbondata.processing.newflow.parser.CarbonParserFactory;
/////////////////////////////////////////////////////////////////////////
1:   private int[] outputMapping;
1: 
1:   private int[] inputMapping;
1: 
1:   private int numberOfColumns;
1: 
1:   public RowParserImpl(DataField[] output, CarbonDataLoadConfiguration configuration) {
1:     String[] complexDelimiters =
1:         (String[]) configuration.getDataLoadProperty(DataLoadProcessorConstants.COMPLEX_DELIMITERS);
1:     String nullFormat =
1:         configuration.getDataLoadProperty(DataLoadProcessorConstants.SERIALIZATION_NULL_FORMAT)
1:             .toString();
1:     DataField[] input = getInput(configuration);
1:     genericParsers = new GenericParser[input.length];
1:     for (int i = 0; i < genericParsers.length; i++) {
1:       genericParsers[i] =
1:           CarbonParserFactory.createParser(input[i].getColumn(), complexDelimiters, nullFormat);
1:     }
1:     outputMapping = new int[output.length];
1:     for (int i = 0; i < input.length; i++) {
1:       for (int j = 0; j < output.length; j++) {
1:         if (input[i].getColumn().equals(output[j].getColumn())) {
1:           outputMapping[i] = j;
1:           break;
1:         }
1:       }
1:     }
1:   }
1: 
1:   public DataField[] getInput(CarbonDataLoadConfiguration configuration) {
1:     DataField[] fields = configuration.getDataFields();
1:     String[] header = configuration.getHeader();
1:     numberOfColumns = header.length;
1:     DataField[] input = new DataField[fields.length];
1:     inputMapping = new int[input.length];
1:     int k = 0;
0:     for (int i = 0; i < numberOfColumns; i++) {
0:       for (int j = 0; j < fields.length; j++) {
0:         if (header[i].equalsIgnoreCase(fields[j].getColumn().getColName())) {
0:           input[k] = fields[j];
0:           inputMapping[k] = i;
1:           k++;
1:           break;
1:         }
1:       }
1:     }
1:     return input;
1:     // If number of columns are less in a row then create new array with same size of header.
1:     if (row.length < numberOfColumns) {
1:       String[] temp = new String[numberOfColumns];
1:       System.arraycopy(row, 0, temp, 0, row.length);
1:       row = temp;
1:     Object[] out = new Object[genericParsers.length];
1:     for (int i = 0; i < genericParsers.length; i++) {
1:       Object obj = row[inputMapping[i]];
1:       out[outputMapping[i]] = genericParsers[i].parse(obj);
1:     }
1:     return out;
1: 
commit:f63b1ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.parser.impl;
1: 
0: import org.apache.carbondata.processing.newflow.parser.GenericParser;
0: import org.apache.carbondata.processing.newflow.parser.RowParser;
1: 
1: public class RowParserImpl implements RowParser {
1: 
1:   private GenericParser[] genericParsers;
1: 
0:   public RowParserImpl(GenericParser[] genericParsers) {
0:     this.genericParsers = genericParsers;
1:   }
1: 
1:   @Override
1:   public Object[] parseRow(Object[] row) {
0:     for (int i = 0; i < row.length; i++) {
0:       row[i] = genericParsers[i].parse(row[i].toString());
1:     }
0:     return row;
1:   }
1: }
============================================================================