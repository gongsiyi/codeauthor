1:05b2654: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:05b2654:  *
1:05b2654:  *    http://www.apache.org/licenses/LICENSE-2.0
1:05b2654:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:05b2654:  */
1:05b2654: package org.apache.carbondata.core.dictionary.generator;
2:05b2654: 
1:500654e: import java.io.IOException;
1:05b2654: import java.util.Map;
1:eaadc88: import java.util.concurrent.ConcurrentHashMap;
1:eaadc88: import java.util.concurrent.ExecutorService;
1:eaadc88: import java.util.concurrent.Executors;
1:eaadc88: import java.util.concurrent.TimeUnit;
1:05b2654: 
1:05b2654: import org.apache.carbondata.common.logging.LogService;
1:05b2654: import org.apache.carbondata.common.logging.LogServiceFactory;
1:05b2654: import org.apache.carbondata.core.devapi.BiDictionary;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1:05b2654: import org.apache.carbondata.core.devapi.DictionaryGenerator;
1:87dade7: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:05b2654: import org.apache.carbondata.core.util.CarbonProperties;
1:05b2654: 
1:05b2654: /**
1:05b2654:  * Dictionary generation for table.
1:05b2654:  */
1:05b2654: public class TableDictionaryGenerator
1:87dade7:     implements DictionaryGenerator<Integer, DictionaryMessage>, DictionaryWriter {
1:05b2654: 
1:05b2654:   private static final LogService LOGGER =
1:05b2654:           LogServiceFactory.getLogService(TableDictionaryGenerator.class.getName());
1:05b2654: 
1:ee5f65f:   private CarbonTable carbonTable;
1:05b2654:   /**
1:05b2654:    * the map of columnName to dictionaryGenerator
1:05b2654:    */
1:05b2654:   private Map<String, DictionaryGenerator<Integer, String>> columnMap = new ConcurrentHashMap<>();
1:05b2654: 
1:ee5f65f:   public TableDictionaryGenerator(CarbonTable carbonTable) {
1:ee5f65f:     this.carbonTable = carbonTable;
4:05b2654:   }
1:500654e: 
1:87dade7:   @Override
1:87dade7:   public Integer generateKey(DictionaryMessage value)
1:87dade7:       throws DictionaryGenerationException {
1:ee5f65f:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(value.getColumnName());
1:05b2654: 
1:7ef9164:     if (null == dimension) {
1:7ef9164:       throw new DictionaryGenerationException("Dictionary Generation Failed");
1:7ef9164:     }
1:05b2654:     DictionaryGenerator<Integer, String> generator =
1:05b2654:             columnMap.get(dimension.getColumnId());
1:87dade7:     return generator.generateKey(value.getData());
1:05b2654:   }
1:05b2654: 
1:87dade7:   public Integer size(DictionaryMessage key) {
1:ee5f65f:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(key.getColumnName());
1:05b2654: 
1:7ef9164:     if (null == dimension) {
1:7ef9164:       return 0;
1:7ef9164:     }
1:05b2654:     DictionaryGenerator<Integer, String> generator =
1:05b2654:             columnMap.get(dimension.getColumnId());
1:05b2654:     return ((BiDictionary) generator).size();
1:05b2654:   }
1:05b2654: 
1:ee5f65f:   @Override public void writeDictionaryData() {
1:9e9d689:     int numOfCores = CarbonProperties.getInstance().getNumberOfCores();
1:05b2654:     long start = System.currentTimeMillis();
1:05b2654:     ExecutorService executorService = Executors.newFixedThreadPool(numOfCores);
1:500654e:     for (final DictionaryGenerator generator : columnMap.values()) {
1:ee5f65f:       executorService.execute(new WriteDictionaryDataRunnable(generator));
1:05b2654:     }
1:05b2654: 
2:05b2654:     try {
1:05b2654:       executorService.shutdown();
1:05b2654:       executorService.awaitTermination(1, TimeUnit.HOURS);
1:05b2654:     } catch (InterruptedException e) {
1:05b2654:       LOGGER.error("Error loading the dictionary: " + e.getMessage());
1:05b2654:     }
1:873c3de:     LOGGER.info("Total time taken to write dictionary file is: " +
1:05b2654:             (System.currentTimeMillis() - start));
1:05b2654:   }
1:ee5f65f: 
1:ee5f65f:   public void updateGenerator(DictionaryMessage key) {
1:ee5f65f:     CarbonDimension dimension = carbonTable
1:ee5f65f:         .getPrimitiveDimensionByName(key.getColumnName());
1:7ef9164:     if (null != dimension && null == columnMap.get(dimension.getColumnId())) {
1:5b4cf70:       synchronized (columnMap) {
2:5b4cf70:         if (null == columnMap.get(dimension.getColumnId())) {
1:5b4cf70:           columnMap.put(dimension.getColumnId(),
1:ee5f65f:               new IncrementalColumnDictionaryGenerator(dimension, 1, carbonTable));
1:5b4cf70:         }
1:5b4cf70:       }
1:5b4cf70:     }
1:05b2654:   }
1:05b2654: 
1:500654e:   private static class WriteDictionaryDataRunnable implements Runnable {
1:500654e:     private final DictionaryGenerator generator;
1:500654e: 
1:ee5f65f:     public WriteDictionaryDataRunnable(DictionaryGenerator generator) {
1:500654e:       this.generator = generator;
1:500654e:     }
1:500654e: 
1:500654e:     @Override public void run() {
1:500654e:       try {
1:ee5f65f:         ((DictionaryWriter)generator).writeDictionaryData();
1:500654e:       } catch (IOException e) {
1:500654e:         throw new RuntimeException(e);
1:500654e:       }
1:500654e:     }
1:500654e:   }
1:ee5f65f: }
============================================================================
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
commit:500654e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (final DictionaryGenerator generator : columnMap.values()) {
0:       executorService.execute(new WriteDictionaryDataRunnable(generator, tableUniqueName));
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static class WriteDictionaryDataRunnable implements Runnable {
1:     private final DictionaryGenerator generator;
0:     private final String tableUniqueName;
1: 
0:     public WriteDictionaryDataRunnable(DictionaryGenerator generator, String tableUniqueName) {
1:       this.generator = generator;
0:       this.tableUniqueName = tableUniqueName;
1:     }
1: 
1:     @Override public void run() {
1:       try {
0:         ((DictionaryWriter)generator).writeDictionaryData(tableUniqueName);
1:       } catch (IOException e) {
1:         throw new RuntimeException(e);
1:       }
1:     }
1:   }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:     if (null == dimension) {
1:       throw new DictionaryGenerationException("Dictionary Generation Failed");
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (null == dimension) {
1:       return 0;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (null != dimension && null == columnMap.get(dimension.getColumnId())) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:873c3de
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.info("Total time taken to write dictionary file is: " +
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:9e9d689
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int numOfCores = CarbonProperties.getInstance().getNumberOfCores();
author:kunal642
-------------------------------------------------------------------------------
commit:ee5f65f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private CarbonTable carbonTable;
1:   public TableDictionaryGenerator(CarbonTable carbonTable) {
1:     this.carbonTable = carbonTable;
1:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(value.getColumnName());
/////////////////////////////////////////////////////////////////////////
1:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(key.getColumnName());
1:   @Override public void writeDictionaryData() {
/////////////////////////////////////////////////////////////////////////
1:       executorService.execute(new WriteDictionaryDataRunnable(generator));
/////////////////////////////////////////////////////////////////////////
1:   public void updateGenerator(DictionaryMessage key) {
1:     CarbonDimension dimension = carbonTable
1:         .getPrimitiveDimensionByName(key.getColumnName());
1:               new IncrementalColumnDictionaryGenerator(dimension, 1, carbonTable));
/////////////////////////////////////////////////////////////////////////
1:     public WriteDictionaryDataRunnable(DictionaryGenerator generator) {
1:         ((DictionaryWriter)generator).writeDictionaryData();
0:   public String getTableUniqueName() {
0:     return carbonTable.getTableUniqueName();
1:   }
1: 
author:QiangCai
-------------------------------------------------------------------------------
commit:5b4cf70
/////////////////////////////////////////////////////////////////////////
0:     // reuse dictionary generator
1:     if (null == columnMap.get(dimension.getColumnId())) {
1:       synchronized (columnMap) {
1:         if (null == columnMap.get(dimension.getColumnId())) {
1:           columnMap.put(dimension.getColumnId(),
0:               new IncrementalColumnDictionaryGenerator(dimension, 1));
1:         }
1:       }
1:     }
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.generator.key.DictionaryMessage;
/////////////////////////////////////////////////////////////////////////
1:     implements DictionaryGenerator<Integer, DictionaryMessage>, DictionaryWriter {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Integer generateKey(DictionaryMessage value)
1:       throws DictionaryGenerationException {
/////////////////////////////////////////////////////////////////////////
1:     return generator.generateKey(value.getData());
1:   public Integer size(DictionaryMessage key) {
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.dictionary.generator;
1: 
0: import java.util.ArrayList;
0: import java.util.List;
1: import java.util.Map;
0: import java.util.concurrent.*;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonDimension;
0: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.devapi.BiDictionary;
1: import org.apache.carbondata.core.devapi.DictionaryGenerationException;
1: import org.apache.carbondata.core.devapi.DictionaryGenerator;
0: import org.apache.carbondata.core.dictionary.generator.key.DictionaryKey;
1: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: /**
1:  * Dictionary generation for table.
1:  */
1: public class TableDictionaryGenerator
0:     implements DictionaryGenerator<Integer, DictionaryKey>, DictionaryWriter {
1: 
1:   private static final LogService LOGGER =
1:           LogServiceFactory.getLogService(TableDictionaryGenerator.class.getName());
1: 
1:   /**
1:    * the map of columnName to dictionaryGenerator
1:    */
1:   private Map<String, DictionaryGenerator<Integer, String>> columnMap = new ConcurrentHashMap<>();
1: 
0:   public TableDictionaryGenerator(CarbonDimension dimension) {
0:     columnMap.put(dimension.getColumnId(),
0:             new IncrementalColumnDictionaryGenerator(dimension, 1));
1:   }
1: 
0:   @Override public Integer generateKey(DictionaryKey value) throws DictionaryGenerationException {
0:     CarbonMetadata metadata = CarbonMetadata.getInstance();
0:     CarbonTable carbonTable = metadata.getCarbonTable(value.getTableUniqueName());
0:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(
0:             value.getTableUniqueName(), value.getColumnName());
1: 
1:     DictionaryGenerator<Integer, String> generator =
1:             columnMap.get(dimension.getColumnId());
0:     return generator.generateKey(value.getData().toString());
1:   }
1: 
0:   public Integer size(DictionaryKey key) {
0:     CarbonMetadata metadata = CarbonMetadata.getInstance();
0:     CarbonTable carbonTable = metadata.getCarbonTable(key.getTableUniqueName());
0:     CarbonDimension dimension = carbonTable.getPrimitiveDimensionByName(
0:             key.getTableUniqueName(), key.getColumnName());
1: 
1:     DictionaryGenerator<Integer, String> generator =
1:             columnMap.get(dimension.getColumnId());
1:     return ((BiDictionary) generator).size();
1:   }
1: 
0:   @Override public void writeDictionaryData(String tableUniqueName) throws Exception {
0:     int numOfCores = 1;
0:     final String tableName = tableUniqueName;
1:     try {
0:       numOfCores = Integer.parseInt(CarbonProperties.getInstance()
0:               .getProperty(CarbonCommonConstants.NUM_CORES_LOADING,
0:                       CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
0:     } catch (NumberFormatException e) {
0:       numOfCores = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:     }
1:     long start = System.currentTimeMillis();
0:     List<Future<Void>> taskSubmitList =
0:             new ArrayList<>(columnMap.size());
1:     ExecutorService executorService = Executors.newFixedThreadPool(numOfCores);
0:     for (final DictionaryGenerator generator: columnMap.values()) {
0:       taskSubmitList.add(executorService.submit(new Callable<Void>() {
0:         @Override public Void call() throws Exception {
0:           ((DictionaryWriter) (generator)).writeDictionaryData(tableName);
0:           return null;
1:         }
0:       }));
1:     }
1: 
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(1, TimeUnit.HOURS);
1:     } catch (InterruptedException e) {
1:       LOGGER.error("Error loading the dictionary: " + e.getMessage());
1:     }
0:     LOGGER.audit("Total time taken to write dictionary file is: " +
1:             (System.currentTimeMillis() - start));
1:   }
1: 
0:   public void updateGenerator(CarbonDimension dimension) {
0:     columnMap.put(dimension.getColumnId(),
0:             new IncrementalColumnDictionaryGenerator(dimension, 1));
1:   }
1: }
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.CarbonMetadata;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:   @Override public void writeDictionaryData(String tableUniqueName) {
============================================================================