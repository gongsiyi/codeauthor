1:7359601: /*
1:7359601:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7359601:  * contributor license agreements.  See the NOTICE file distributed with
1:7359601:  * this work for additional information regarding copyright ownership.
1:7359601:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7359601:  * (the "License"); you may not use this file except in compliance with
1:7359601:  * the License.  You may obtain a copy of the License at
1:7359601:  *
1:7359601:  *    http://www.apache.org/licenses/LICENSE-2.0
1:7359601:  *
1:7359601:  * Unless required by applicable law or agreed to in writing, software
1:7359601:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7359601:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7359601:  * See the License for the specific language governing permissions and
1:7359601:  * limitations under the License.
1:7359601:  */
1:7359601: 
1:7359601: package org.apache.carbondata.core.datastore.page;
1:7359601: 
1:8c1ddbf: import java.io.ByteArrayOutputStream;
1:8c1ddbf: import java.io.DataOutputStream;
1:8c1ddbf: import java.io.IOException;
1:7359601: import java.math.BigDecimal;
1:e710339: import java.util.ArrayList;
1:e710339: import java.util.List;
1:7359601: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:7359601: 
1:7359601: public class SafeVarLengthColumnPage extends VarLengthColumnPageBase {
1:7359601: 
1:7359601:   // for string and decimal data
1:e710339:   private List<byte[]> byteArrayData;
1:7359601: 
1:8f08c4a:   SafeVarLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:e710339:     byteArrayData = new ArrayList<>();
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void freeMemory() {
1:dded5d5:     byteArrayData = null;
1:8925947:     super.freeMemory();
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void putBytesAtRow(int rowId, byte[] bytes) {
1:e710339:     byteArrayData.add(bytes);
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:e710339:     byteArrayData.add(bytes);
1:7359601:   }
1:7359601: 
1:9e064ee:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:9e064ee:   }
1:9e064ee: 
1:7359601:   @Override
1:7359601:   public BigDecimal getDecimal(int rowId) {
1:8f08c4a:     throw new UnsupportedOperationException(
1:8f08c4a:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:e6a4f64:   public byte[] getBytes(int rowId) {
1:e710339:     return byteArrayData.get(rowId);
1:e6a4f64:   }
1:e6a4f64: 
1:e6a4f64:   @Override
1:7359601:   public void setByteArrayPage(byte[][] byteArray) {
1:e710339:     for (byte[] data : byteArray) {
1:e710339:       byteArrayData.add(data);
1:e710339:     }
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:8c1ddbf:   public byte[] getLVFlattenedBytePage() throws IOException {
1:8c1ddbf:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:8c1ddbf:     DataOutputStream out = new DataOutputStream(stream);
1:8c1ddbf:     for (byte[] byteArrayDatum : byteArrayData) {
1:8c1ddbf:       out.writeInt(byteArrayDatum.length);
1:8c1ddbf:       out.write(byteArrayDatum);
1:8c1ddbf:     }
1:8c1ddbf:     return stream.toByteArray();
1:8c1ddbf:   }
1:8c1ddbf: 
1:8c1ddbf:   @Override
1:6297ea0:   public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:6297ea0:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:6297ea0:     DataOutputStream out = new DataOutputStream(stream);
1:6297ea0:     for (byte[] byteArrayDatum : byteArrayData) {
1:6297ea0:       out.writeShort((short)byteArrayDatum.length);
1:6297ea0:       out.write(byteArrayDatum);
1:6297ea0:     }
1:6297ea0:     return stream.toByteArray();
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:6297ea0:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:6297ea0:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:6297ea0:     DataOutputStream out = new DataOutputStream(stream);
1:6297ea0:     for (byte[] byteArrayDatum : byteArrayData) {
1:6297ea0:       out.write(byteArrayDatum);
1:6297ea0:     }
1:6297ea0:     return stream.toByteArray();
1:6297ea0:   }
1:6297ea0: 
1:6297ea0:   @Override
1:7359601:   public byte[][] getByteArrayPage() {
1:e710339:     return byteArrayData.toArray(new byte[byteArrayData.size()][]);
1:7359601:   }
1:7359601: 
1:7359601:   @Override
1:7359601:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
1:e710339:     System.arraycopy(byteArrayData.get(rowId), 0, dest, destOffset, length);
1:7359601:   }
1:7359601: 
1:7359601: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:   SafeVarLengthColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:     super(columnPageEncoderMeta, pageSize);
/////////////////////////////////////////////////////////////////////////
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
1:     throw new UnsupportedOperationException(
1:         "invalid data type: " + columnPageEncoderMeta.getStoreDataType());
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8925947
/////////////////////////////////////////////////////////////////////////
1:     super.freeMemory();
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   private List<byte[]> byteArrayData;
1:     byteArrayData = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     byteArrayData.add(bytes);
1:     byteArrayData.add(bytes);
/////////////////////////////////////////////////////////////////////////
1:     return byteArrayData.get(rowId);
1:     for (byte[] data : byteArray) {
1:       byteArrayData.add(data);
1:     }
/////////////////////////////////////////////////////////////////////////
1:     return byteArrayData.toArray(new byte[byteArrayData.size()][]);
1:     System.arraycopy(byteArrayData.get(rowId), 0, dest, destOffset, length);
commit:6297ea0
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getComplexChildrenLVFlattenedBytePage() throws IOException {
1:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:     DataOutputStream out = new DataOutputStream(stream);
1:     for (byte[] byteArrayDatum : byteArrayData) {
1:       out.writeShort((short)byteArrayDatum.length);
1:       out.write(byteArrayDatum);
1:     }
1:     return stream.toByteArray();
1:   }
1: 
1:   @Override
1:   public byte[] getComplexParentFlattenedBytePage() throws IOException {
1:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:     DataOutputStream out = new DataOutputStream(stream);
1:     for (byte[] byteArrayDatum : byteArrayData) {
1:       out.write(byteArrayDatum);
1:     }
1:     return stream.toByteArray();
1:   }
1: 
1:   @Override
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1:     byteArrayData = null;
commit:9e064ee
/////////////////////////////////////////////////////////////////////////
0:   SafeVarLengthColumnPage(DataType dataType, int pageSize, int scale, int precision) {
0:     super(dataType, pageSize, scale, precision);
/////////////////////////////////////////////////////////////////////////
1:   @Override public void putDecimal(int rowId, BigDecimal decimal) {
0:     putBytes(rowId, decimalConverter.convert(decimal));
1:   }
1: 
0:     return decimalConverter.getDecimal(bytes);
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
0:     throw new UnsupportedOperationException("invalid data type: " + dataType);
author:Jacky Li
-------------------------------------------------------------------------------
commit:8c1ddbf
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
0: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
0:   SafeVarLengthColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize) {
0:     super(columnSpec, dataType, pageSize);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getLVFlattenedBytePage() throws IOException {
1:     ByteArrayOutputStream stream = new ByteArrayOutputStream();
1:     DataOutputStream out = new DataOutputStream(stream);
1:     for (byte[] byteArrayDatum : byteArrayData) {
1:       out.writeInt(byteArrayDatum.length);
1:       out.write(byteArrayDatum);
1:     }
1:     return stream.toByteArray();
1:   }
1: 
1:   @Override
commit:e6a4f64
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getBytes(int rowId) {
0:     return byteArrayData[rowId];
1:   }
1: 
1:   @Override
author:jackylk
-------------------------------------------------------------------------------
commit:7359601
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.math.BigDecimal;
1: 
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: public class SafeVarLengthColumnPage extends VarLengthColumnPageBase {
1: 
1:   // for string and decimal data
0:   private byte[][] byteArrayData;
1: 
0:   SafeVarLengthColumnPage(DataType dataType, int pageSize) {
0:     super(dataType, pageSize);
0:     byteArrayData = new byte[pageSize][];
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1:   }
1: 
1:   @Override
1:   public void putBytesAtRow(int rowId, byte[] bytes) {
0:     byteArrayData[rowId] = bytes;
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
0:     byteArrayData[rowId] = new byte[length];
0:     System.arraycopy(bytes, offset, byteArrayData[rowId], 0, length);
1:   }
1: 
1:   @Override
1:   public BigDecimal getDecimal(int rowId) {
0:     byte[] bytes = byteArrayData[rowId];
0:     return DataTypeUtil.byteToBigDecimal(bytes);
1:   }
1: 
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
0:     byteArrayData = byteArray;
1:   }
1: 
1:   @Override
1:   public byte[][] getByteArrayPage() {
0:     return byteArrayData;
1:   }
1: 
1:   @Override
1:   void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
0:     System.arraycopy(byteArrayData[rowId], 0, dest, destOffset, length);
1:   }
1: 
1: }
============================================================================