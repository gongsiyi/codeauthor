1:a700f83: /*
1:a700f83:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a700f83:  * contributor license agreements.  See the NOTICE file distributed with
1:a700f83:  * this work for additional information regarding copyright ownership.
1:a700f83:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a700f83:  * (the "License"); you may not use this file except in compliance with
1:a700f83:  * the License.  You may obtain a copy of the License at
1:a700f83:  *
1:a700f83:  *    http://www.apache.org/licenses/LICENSE-2.0
1:a700f83:  *
1:a700f83:  * Unless required by applicable law or agreed to in writing, software
1:a700f83:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a700f83:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a700f83:  * See the License for the specific language governing permissions and
1:a700f83:  * limitations under the License.
1:a700f83:  */
1:a700f83: package org.apache.carbondata.hive;
2:a700f83: 
1:a700f83: import java.util.ArrayList;
1:a700f83: import java.util.Arrays;
1:a700f83: import java.util.Iterator;
1:a700f83: import java.util.List;
1:a700f83: import java.util.Properties;
1:a700f83: import javax.annotation.Nullable;
1:a700f83: 
1:a700f83: import org.apache.hadoop.conf.Configuration;
1:a700f83: import org.apache.hadoop.hive.serde.serdeConstants;
1:a700f83: import org.apache.hadoop.hive.serde2.AbstractSerDe;
1:a700f83: import org.apache.hadoop.hive.serde2.SerDeException;
1:a700f83: import org.apache.hadoop.hive.serde2.SerDeSpec;
1:a700f83: import org.apache.hadoop.hive.serde2.SerDeStats;
1:a700f83: import org.apache.hadoop.hive.serde2.io.DoubleWritable;
1:a700f83: import org.apache.hadoop.hive.serde2.io.ShortWritable;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.StructField;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveDecimalObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.IntObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
1:a700f83: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
1:a700f83: import org.apache.hadoop.io.ArrayWritable;
1:a700f83: import org.apache.hadoop.io.IntWritable;
1:a700f83: import org.apache.hadoop.io.LongWritable;
1:a700f83: import org.apache.hadoop.io.Writable;
1:a700f83: 
1:a700f83: /**
1:a700f83:  * A serde class for Carbondata.
1:a700f83:  * It transparently passes the object to/from the Carbon file reader/writer.
1:a700f83:  */
1:d408a8d: @SerDeSpec(schemaProps = { serdeConstants.LIST_COLUMNS, serdeConstants.LIST_COLUMN_TYPES })
1:d408a8d: class CarbonHiveSerDe extends AbstractSerDe {
1:d408a8d:   private final SerDeStats stats;
1:a700f83:   private ObjectInspector objInspector;
1:a700f83: 
1:a700f83:   private enum LAST_OPERATION {
1:d408a8d:     SERIALIZE, DESERIALIZE, UNKNOWN
1:0da86b6:   }
1:a700f83: 
1:a700f83:   private LAST_OPERATION status;
1:a700f83:   private long serializedSize;
1:a700f83:   private long deserializedSize;
1:a700f83: 
1:a700f83:   public CarbonHiveSerDe() {
1:a700f83:     stats = new SerDeStats();
5:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public void initialize(@Nullable Configuration configuration, Properties tbl)
3:a700f83:       throws SerDeException {
1:a700f83: 
1:a700f83:     final TypeInfo rowTypeInfo;
1:a700f83:     final List<String> columnNames;
1:a700f83:     final List<TypeInfo> columnTypes;
1:a700f83:     // Get column names and sort order
1:25a8ac6:     assert configuration != null;
1:25a8ac6: 
1:a700f83:     final String columnNameProperty = tbl.getProperty(serdeConstants.LIST_COLUMNS);
1:a700f83:     final String columnTypeProperty = tbl.getProperty(serdeConstants.LIST_COLUMN_TYPES);
1:a700f83: 
1:a700f83:     if (columnNameProperty.length() == 0) {
1:a700f83:       columnNames = new ArrayList<String>();
2:a700f83:     } else {
1:a700f83:       columnNames = Arrays.asList(columnNameProperty.split(","));
1:a700f83:     }
1:a700f83:     if (columnTypeProperty.length() == 0) {
1:a700f83:       columnTypes = new ArrayList<TypeInfo>();
1:25a8ac6:     } else {
1:a700f83:       columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);
1:25a8ac6:     }
1:cbe1419: 
1:a700f83: 
1:a700f83: 
1:cbe1419:     // Create row related objects
1:cbe1419:     rowTypeInfo = TypeInfoFactory.getStructTypeInfo(columnNames, columnTypes);
1:cbe1419:     this.objInspector = new CarbonObjectInspector((StructTypeInfo) rowTypeInfo);
1:cbe1419: 
1:cbe1419:     // Stats part
1:cbe1419:     serializedSize = 0;
1:cbe1419:     deserializedSize = 0;
1:cbe1419:     status = LAST_OPERATION.UNKNOWN;
1:25a8ac6:   }
1:25a8ac6: 
1:d408a8d:   @Override public Class<? extends Writable> getSerializedClass() {
1:a700f83:     return ArrayWritable.class;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Writable serialize(Object obj, ObjectInspector objectInspector)
1:d408a8d:       throws SerDeException {
1:a700f83:     if (!objInspector.getCategory().equals(ObjectInspector.Category.STRUCT)) {
1:bc3e684:       throw new SerDeException("Cannot serializeStartKey " + objInspector.getCategory()
1:bc3e684:           + ". Can only serializeStartKey a struct");
1:a700f83:     }
1:a700f83:     serializedSize += ((StructObjectInspector) objInspector).getAllStructFieldRefs().size();
1:a700f83:     status = LAST_OPERATION.SERIALIZE;
1:a700f83:     return createStruct(obj, (StructObjectInspector) objInspector);
1:a700f83:   }
1:a700f83: 
1:d408a8d:   private ArrayWritable createStruct(Object obj, StructObjectInspector inspector)
1:a700f83:       throws SerDeException {
1:a700f83:     List fields = inspector.getAllStructFieldRefs();
1:a700f83:     Writable[] arr = new Writable[fields.size()];
1:a700f83:     for (int i = 0; i < fields.size(); i++) {
1:a700f83:       StructField field = (StructField) fields.get(i);
1:a700f83:       Object subObj = inspector.getStructFieldData(obj, field);
1:a700f83:       ObjectInspector subInspector = field.getFieldObjectInspector();
1:a700f83:       arr[i] = createObject(subObj, subInspector);
1:a700f83:     }
1:a700f83:     return new ArrayWritable(Writable.class, arr);
1:a700f83:   }
1:a700f83: 
1:a700f83:   private ArrayWritable createArray(Object obj, ListObjectInspector inspector)
1:0da86b6:       throws SerDeException {
1:a700f83:     List sourceArray = inspector.getList(obj);
1:a700f83:     ObjectInspector subInspector = inspector.getListElementObjectInspector();
1:a700f83:     List array = new ArrayList();
1:a700f83:     Iterator iterator;
1:a700f83:     if (sourceArray != null) {
1:a700f83:       for (iterator = sourceArray.iterator(); iterator.hasNext(); ) {
1:a700f83:         Object curObj = iterator.next();
1:a700f83:         Writable newObj = createObject(curObj, subInspector);
1:a700f83:         if (newObj != null) {
1:a700f83:           array.add(newObj);
1:a700f83:         }
1:a700f83:       }
1:a700f83:     }
1:a700f83:     if (array.size() > 0) {
1:a700f83:       ArrayWritable subArray = new ArrayWritable(((Writable) array.get(0)).getClass(),
1:a700f83:           (Writable[]) array.toArray(new Writable[array.size()]));
1:a700f83: 
1:d408a8d:       return new ArrayWritable(Writable.class, new Writable[] { subArray });
1:a700f83:     }
1:a700f83:     return null;
1:a700f83:   }
1:a700f83: 
1:a700f83:   private Writable createPrimitive(Object obj, PrimitiveObjectInspector inspector)
1:0da86b6:       throws SerDeException {
1:a700f83:     if (obj == null) {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83:     switch (inspector.getPrimitiveCategory()) {
1:a700f83:       case VOID:
1:a700f83:         return null;
1:a700f83:       case DOUBLE:
1:a700f83:         return new DoubleWritable(((DoubleObjectInspector) inspector).get(obj));
1:a700f83:       case INT:
1:a700f83:         return new IntWritable(((IntObjectInspector) inspector).get(obj));
1:a700f83:       case LONG:
1:a700f83:         return new LongWritable(((LongObjectInspector) inspector).get(obj));
1:a700f83:       case SHORT:
1:a700f83:         return new ShortWritable(((ShortObjectInspector) inspector).get(obj));
1:a700f83:       case TIMESTAMP:
1:a700f83:         return ((TimestampObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:a700f83:       case DATE:
1:a700f83:         return ((DateObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:a700f83:       case STRING:
1:a700f83:         return ((StringObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:5ff2c50:       case CHAR:
1:5ff2c50:         return ((StringObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:a700f83:       case DECIMAL:
1:a700f83:         return ((HiveDecimalObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:a700f83:     }
1:a700f83:     throw new SerDeException("Unknown primitive : " + inspector.getPrimitiveCategory());
1:a700f83:   }
1:a700f83: 
1:a700f83:   private Writable createObject(Object obj, ObjectInspector inspector) throws SerDeException {
1:a700f83:     switch (inspector.getCategory()) {
1:a700f83:       case STRUCT:
1:a700f83:         return createStruct(obj, (StructObjectInspector) inspector);
1:a700f83:       case LIST:
1:a700f83:         return createArray(obj, (ListObjectInspector) inspector);
1:a700f83:       case PRIMITIVE:
1:a700f83:         return createPrimitive(obj, (PrimitiveObjectInspector) inspector);
1:a700f83:     }
1:a700f83:     throw new SerDeException("Unknown data type" + inspector.getCategory());
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public SerDeStats getSerDeStats() {
1:a700f83:     // must be different
1:a700f83:     assert (status != LAST_OPERATION.UNKNOWN);
1:a700f83:     if (status == LAST_OPERATION.SERIALIZE) {
1:a700f83:       stats.setRawDataSize(serializedSize);
1:a700f83:     } else {
1:a700f83:       stats.setRawDataSize(deserializedSize);
1:a700f83:     }
1:a700f83:     return stats;
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public Object deserialize(Writable writable) throws SerDeException {
1:a700f83:     status = LAST_OPERATION.DESERIALIZE;
1:a700f83:     if (writable instanceof ArrayWritable) {
1:a700f83:       deserializedSize += ((StructObjectInspector) objInspector).getAllStructFieldRefs().size();
1:a700f83:       return writable;
1:a700f83:     } else {
1:a700f83:       return null;
1:a700f83:     }
1:a700f83:   }
1:a700f83: 
1:d408a8d:   @Override public ObjectInspector getObjectInspector() throws SerDeException {
1:a700f83:     return objInspector;
1:0da86b6:   }
1:a700f83: }
============================================================================
author:jackylk
-------------------------------------------------------------------------------
commit:bc3e684
/////////////////////////////////////////////////////////////////////////
1:       throw new SerDeException("Cannot serializeStartKey " + objInspector.getCategory()
1:           + ". Can only serializeStartKey a struct");
author:Bhavya
-------------------------------------------------------------------------------
commit:cbe1419
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Create row related objects
1:     rowTypeInfo = TypeInfoFactory.getStructTypeInfo(columnNames, columnTypes);
1:     this.objInspector = new CarbonObjectInspector((StructTypeInfo) rowTypeInfo);
1: 
1:     // Stats part
1:     serializedSize = 0;
1:     deserializedSize = 0;
1:     status = LAST_OPERATION.UNKNOWN;
author:chenliang613
-------------------------------------------------------------------------------
commit:d408a8d
/////////////////////////////////////////////////////////////////////////
1: @SerDeSpec(schemaProps = { serdeConstants.LIST_COLUMNS, serdeConstants.LIST_COLUMN_TYPES })
1: class CarbonHiveSerDe extends AbstractSerDe {
1:   private final SerDeStats stats;
1:     SERIALIZE, DESERIALIZE, UNKNOWN
/////////////////////////////////////////////////////////////////////////
1:   @Override public void initialize(@Nullable Configuration configuration, Properties tbl)
/////////////////////////////////////////////////////////////////////////
1:   @Override public Class<? extends Writable> getSerializedClass() {
1:   @Override public Writable serialize(Object obj, ObjectInspector objectInspector)
1:       throws SerDeException {
/////////////////////////////////////////////////////////////////////////
1:   private ArrayWritable createStruct(Object obj, StructObjectInspector inspector)
/////////////////////////////////////////////////////////////////////////
1:       return new ArrayWritable(Writable.class, new Writable[] { subArray });
/////////////////////////////////////////////////////////////////////////
1:   @Override public SerDeStats getSerDeStats() {
/////////////////////////////////////////////////////////////////////////
1:   @Override public Object deserialize(Writable writable) throws SerDeException {
/////////////////////////////////////////////////////////////////////////
1:   @Override public ObjectInspector getObjectInspector() throws SerDeException {
author:anubhav100
-------------------------------------------------------------------------------
commit:0da86b6
/////////////////////////////////////////////////////////////////////////
0:     if (colIds != null && !colIds.equals("")) {
/////////////////////////////////////////////////////////////////////////
1:     }
0:     else {
/////////////////////////////////////////////////////////////////////////
0:           + ". Can only serialize a struct");
/////////////////////////////////////////////////////////////////////////
1:       throws SerDeException {
/////////////////////////////////////////////////////////////////////////
1:       throws SerDeException {
/////////////////////////////////////////////////////////////////////////
1: }
commit:5ff2c50
/////////////////////////////////////////////////////////////////////////
1:       case CHAR:
1:         return ((StringObjectInspector) inspector).getPrimitiveWritableObject(obj);
commit:25a8ac6
/////////////////////////////////////////////////////////////////////////
0:     final List<String> reqColNames;
1:     assert configuration != null;
0:     final String colIds = configuration.get("hive.io.file.readcolumn.ids");
1: 
/////////////////////////////////////////////////////////////////////////
0:     if (colIds != null) {
0:       reqColNames = new ArrayList<String>();
0:       String[] arraySelectedColId = colIds.split(",");
0:       List<TypeInfo> reqColTypes = new ArrayList<TypeInfo>();
0:       for (String anArrayColId : arraySelectedColId) {
0:         reqColNames.add(columnNames.get(Integer.parseInt(anArrayColId)));
0:         reqColTypes.add(columnTypes.get(Integer.parseInt(anArrayColId)));
1:       }
0:       // Create row related objects
0:       rowTypeInfo = TypeInfoFactory.getStructTypeInfo(reqColNames, reqColTypes);
0:       this.objInspector = new CarbonObjectInspector((StructTypeInfo) rowTypeInfo);
1:     } else {
0:       // Create row related objects
0:       rowTypeInfo = TypeInfoFactory.getStructTypeInfo(columnNames, columnTypes);
0:       this.objInspector = new CarbonObjectInspector((StructTypeInfo) rowTypeInfo);
1: 
0:       // Stats part
0:       serializedSize = 0;
0:       deserializedSize = 0;
0:       status = LAST_OPERATION.UNKNOWN;
1:     }
author:cenyuhai
-------------------------------------------------------------------------------
commit:a700f83
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.hive;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Properties;
1: import javax.annotation.Nullable;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.hive.serde.serdeConstants;
1: import org.apache.hadoop.hive.serde2.AbstractSerDe;
1: import org.apache.hadoop.hive.serde2.SerDeException;
1: import org.apache.hadoop.hive.serde2.SerDeSpec;
1: import org.apache.hadoop.hive.serde2.SerDeStats;
1: import org.apache.hadoop.hive.serde2.io.DoubleWritable;
1: import org.apache.hadoop.hive.serde2.io.ShortWritable;
1: import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.StructField;
1: import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.HiveDecimalObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.IntObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.LongObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.ShortObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;
1: import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;
1: import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
1: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
1: import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
1: import org.apache.hadoop.io.ArrayWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Writable;
1: 
1: 
1: /**
1:  * A serde class for Carbondata.
1:  * It transparently passes the object to/from the Carbon file reader/writer.
1:  */
0: @SerDeSpec(schemaProps = {serdeConstants.LIST_COLUMNS, serdeConstants.LIST_COLUMN_TYPES})
0: public class CarbonHiveSerDe extends AbstractSerDe {
0:   private SerDeStats stats;
1:   private ObjectInspector objInspector;
1: 
1:   private enum LAST_OPERATION {
0:     SERIALIZE,
0:     DESERIALIZE,
0:     UNKNOWN
1:   }
1: 
1:   private LAST_OPERATION status;
1:   private long serializedSize;
1:   private long deserializedSize;
1: 
1:   public CarbonHiveSerDe() {
1:     stats = new SerDeStats();
1:   }
1: 
0:   @Override
0:   public void initialize(@Nullable Configuration configuration, Properties tbl)
1:       throws SerDeException {
1: 
1:     final TypeInfo rowTypeInfo;
1:     final List<String> columnNames;
1:     final List<TypeInfo> columnTypes;
1:     // Get column names and sort order
1:     final String columnNameProperty = tbl.getProperty(serdeConstants.LIST_COLUMNS);
1:     final String columnTypeProperty = tbl.getProperty(serdeConstants.LIST_COLUMN_TYPES);
1: 
1:     if (columnNameProperty.length() == 0) {
1:       columnNames = new ArrayList<String>();
1:     } else {
1:       columnNames = Arrays.asList(columnNameProperty.split(","));
1:     }
1:     if (columnTypeProperty.length() == 0) {
1:       columnTypes = new ArrayList<TypeInfo>();
1:     } else {
1:       columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);
1:     }
0:     // Create row related objects
0:     rowTypeInfo = TypeInfoFactory.getStructTypeInfo(columnNames, columnTypes);
0:     this.objInspector = new CarbonObjectInspector((StructTypeInfo) rowTypeInfo);
1: 
0:     // Stats part
0:     serializedSize = 0;
0:     deserializedSize = 0;
0:     status = LAST_OPERATION.UNKNOWN;
1:   }
1: 
0:   @Override
0:   public Class<? extends Writable> getSerializedClass() {
1:     return ArrayWritable.class;
1:   }
1: 
0:   @Override
0:   public Writable serialize(Object obj, ObjectInspector objectInspector) throws SerDeException {
1:     if (!objInspector.getCategory().equals(ObjectInspector.Category.STRUCT)) {
0:       throw new SerDeException("Cannot serialize " + objInspector.getCategory()
0:         + ". Can only serialize a struct");
1:     }
1:     serializedSize += ((StructObjectInspector) objInspector).getAllStructFieldRefs().size();
1:     status = LAST_OPERATION.SERIALIZE;
1:     return createStruct(obj, (StructObjectInspector) objInspector);
1:   }
1: 
0:   public ArrayWritable createStruct(Object obj, StructObjectInspector inspector)
1:       throws SerDeException {
1:     List fields = inspector.getAllStructFieldRefs();
1:     Writable[] arr = new Writable[fields.size()];
1:     for (int i = 0; i < fields.size(); i++) {
1:       StructField field = (StructField) fields.get(i);
1:       Object subObj = inspector.getStructFieldData(obj, field);
1:       ObjectInspector subInspector = field.getFieldObjectInspector();
1:       arr[i] = createObject(subObj, subInspector);
1:     }
1:     return new ArrayWritable(Writable.class, arr);
1:   }
1: 
1:   private ArrayWritable createArray(Object obj, ListObjectInspector inspector)
1:     throws SerDeException {
1:     List sourceArray = inspector.getList(obj);
1:     ObjectInspector subInspector = inspector.getListElementObjectInspector();
1:     List array = new ArrayList();
1:     Iterator iterator;
1:     if (sourceArray != null) {
1:       for (iterator = sourceArray.iterator(); iterator.hasNext(); ) {
1:         Object curObj = iterator.next();
1:         Writable newObj = createObject(curObj, subInspector);
1:         if (newObj != null) {
1:           array.add(newObj);
1:         }
1:       }
1:     }
1:     if (array.size() > 0) {
1:       ArrayWritable subArray = new ArrayWritable(((Writable) array.get(0)).getClass(),
1:           (Writable[]) array.toArray(new Writable[array.size()]));
1: 
0:       return new ArrayWritable(Writable.class, new Writable[]{subArray});
1:     }
1:     return null;
1:   }
1: 
1:   private Writable createPrimitive(Object obj, PrimitiveObjectInspector inspector)
1:     throws SerDeException {
1:     if (obj == null) {
1:       return null;
1:     }
1:     switch (inspector.getPrimitiveCategory()) {
1:       case VOID:
1:         return null;
1:       case DOUBLE:
1:         return new DoubleWritable(((DoubleObjectInspector) inspector).get(obj));
1:       case INT:
1:         return new IntWritable(((IntObjectInspector) inspector).get(obj));
1:       case LONG:
1:         return new LongWritable(((LongObjectInspector) inspector).get(obj));
1:       case SHORT:
1:         return new ShortWritable(((ShortObjectInspector) inspector).get(obj));
1:       case TIMESTAMP:
1:         return ((TimestampObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:       case DATE:
1:         return ((DateObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:       case STRING:
1:         return ((StringObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:       case DECIMAL:
1:         return ((HiveDecimalObjectInspector) inspector).getPrimitiveWritableObject(obj);
1:     }
1:     throw new SerDeException("Unknown primitive : " + inspector.getPrimitiveCategory());
1:   }
1: 
1:   private Writable createObject(Object obj, ObjectInspector inspector) throws SerDeException {
1:     switch (inspector.getCategory()) {
1:       case STRUCT:
1:         return createStruct(obj, (StructObjectInspector) inspector);
1:       case LIST:
1:         return createArray(obj, (ListObjectInspector) inspector);
1:       case PRIMITIVE:
1:         return createPrimitive(obj, (PrimitiveObjectInspector) inspector);
1:     }
1:     throw new SerDeException("Unknown data type" + inspector.getCategory());
1:   }
1: 
0:   @Override
0:   public SerDeStats getSerDeStats() {
1:     // must be different
1:     assert (status != LAST_OPERATION.UNKNOWN);
1:     if (status == LAST_OPERATION.SERIALIZE) {
1:       stats.setRawDataSize(serializedSize);
1:     } else {
1:       stats.setRawDataSize(deserializedSize);
1:     }
1:     return stats;
1:   }
1: 
0:   @Override
0:   public Object deserialize(Writable writable) throws SerDeException {
1:     status = LAST_OPERATION.DESERIALIZE;
1:     if (writable instanceof ArrayWritable) {
1:       deserializedSize += ((StructObjectInspector) objInspector).getAllStructFieldRefs().size();
1:       return writable;
1:     } else {
1:       return null;
1:     }
1:   }
1: 
0:   @Override
0:   public ObjectInspector getObjectInspector() throws SerDeException {
1:     return objInspector;
1:   }
1: }
============================================================================