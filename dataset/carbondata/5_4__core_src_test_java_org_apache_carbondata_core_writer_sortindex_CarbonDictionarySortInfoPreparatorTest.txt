1:d828604: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
3:d828604:  *
1:d828604:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d828604:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d828604:  */
1:d828604: package org.apache.carbondata.core.writer.sortindex;
1:d828604: 
1:d828604: import java.util.ArrayList;
1:d828604: import java.util.List;
1:d828604: 
1:d828604: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:d828604: import org.apache.carbondata.core.cache.dictionary.DictionaryChunksWrapper;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:d828604: 
1:d828604: import mockit.Mock;
1:d828604: import mockit.MockUp;
1:d828604: import org.junit.BeforeClass;
1:d828604: import org.junit.Test;
1:d828604: 
1:d828604: import static org.junit.Assert.assertEquals;
1:d828604: 
1:d828604: /**
1:d828604:  * The class tests the CarbonDictionarySortInfoPreparator class that prepares the column sort info ie sortIndex
1:d828604:  * and inverted sort index info
1:d828604:  */
1:d828604: public class CarbonDictionarySortInfoPreparatorTest {
1:d828604: 
1:d828604:   private static CarbonDictionarySortInfoPreparator carbonDictionarySortInfoPreparator = null;
1:d828604: 
1:d828604:   @BeforeClass public static void setUp() {
1:d828604:     carbonDictionarySortInfoPreparator = new CarbonDictionarySortInfoPreparator();
1:d828604:   }
1:d828604: 
1:d828604:   /**
1:d828604:    * Tests the getDictionarySortInfo method
1:d828604:    */
1:eaadc88:   @Test public void testGetDictionarySortInfo() {
1:d828604: 
1:d828604:     List<String> newDistinctValues = new ArrayList<>();
1:d828604:     newDistinctValues.add("abc");
1:d828604:     newDistinctValues.add("xyz");
1:d828604:     Dictionary dictionary = new MockUp<Dictionary>() {
1:d828604:       @Mock public DictionaryChunksWrapper getDictionaryChunks() {
1:d828604:         List<byte[]> data = new ArrayList<>();
1:d828604:         data.add(new byte[] { 1, 2 });
1:d828604:         List<List<byte[]>> dictionaryChunks = new ArrayList<>();
1:d828604:         dictionaryChunks.add(data);
1:d828604:         return new DictionaryChunksWrapper(dictionaryChunks);
1:d828604:       }
1:d828604:     }.getMockInstance();
1:d828604: 
1:d828604:     new MockUp<DictionaryChunksWrapper>() {
1:d828604:       @Mock public int getSize() {
1:d828604:         return 1;
1:d828604:       }
1:d828604:     };
1:d828604: 
1:d828604:     CarbonDictionarySortInfo carbonDictionarySortInfo = carbonDictionarySortInfoPreparator
1:933e30c:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.STRING);
1:d828604:     int expectedGetSortIndexValue = 1;
1:d828604:     int expectedGetSortInvertedIndexLength = 3;
1:d828604:     int actualGetSortIndexValue = carbonDictionarySortInfo.getSortIndex().get(0);
1:d828604:     int actualGetSortInvertedIndexLength = carbonDictionarySortInfo.getSortIndexInverted().size();
1:d828604:     assertEquals(actualGetSortIndexValue, expectedGetSortIndexValue);
1:d828604:     assertEquals(actualGetSortInvertedIndexLength, expectedGetSortInvertedIndexLength);
1:d828604:   }
1:d828604: 
1:d828604:   /**
1:d828604:    * Tests getDictionarySortInfo when dictionary is null
1:d828604:    */
1:eaadc88:   @Test public void testGetDictionarySortInfoDictionaryNullCase() {
1:d828604: 
1:d828604:     List<String> newDistinctValues = new ArrayList<>();
1:d828604:     newDistinctValues.add("abc");
1:d828604:     newDistinctValues.add("xyz");
1:d828604:     Dictionary dictionary = null;
1:d828604:     CarbonDictionarySortInfo carbonDictionarySortInfo = carbonDictionarySortInfoPreparator
1:933e30c:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.createDefaultArrayType());
1:d828604:     int expectedGetSortIndexValue = 1;
1:d828604:     int expectedGetSortInvertedIndexLength = 2;
1:d828604:     int actualGetSortIndexValue = carbonDictionarySortInfo.getSortIndex().get(0);
1:d828604:     int actualGetSortInvertedIndexLength = carbonDictionarySortInfo.getSortIndexInverted().size();
1:d828604:     assertEquals(actualGetSortIndexValue, expectedGetSortIndexValue);
1:d828604:     assertEquals(actualGetSortInvertedIndexLength, expectedGetSortInvertedIndexLength);
1:d828604:   }
1:d828604: 
1:d828604: }
============================================================================
author:xubo245
-------------------------------------------------------------------------------
commit:e2a2d99
/////////////////////////////////////////////////////////////////////////
author:Jacky Li
-------------------------------------------------------------------------------
commit:933e30c
/////////////////////////////////////////////////////////////////////////
1:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.STRING);
/////////////////////////////////////////////////////////////////////////
1:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.createDefaultArrayType());
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.ARRAY);
/////////////////////////////////////////////////////////////////////////
0:         .getDictionarySortInfo(newDistinctValues, dictionary, DataTypes.ARRAY);
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataType;
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testGetDictionarySortInfo() {
/////////////////////////////////////////////////////////////////////////
1:   @Test public void testGetDictionarySortInfoDictionaryNullCase() {
author:Geetika gupta
-------------------------------------------------------------------------------
commit:d828604
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.writer.sortindex;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.cache.dictionary.DictionaryChunksWrapper;
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
0: import org.apache.carbondata.core.util.CarbonUtilException;
1: 
1: import mockit.Mock;
1: import mockit.MockUp;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: /**
1:  * The class tests the CarbonDictionarySortInfoPreparator class that prepares the column sort info ie sortIndex
1:  * and inverted sort index info
1:  */
1: public class CarbonDictionarySortInfoPreparatorTest {
1: 
1:   private static CarbonDictionarySortInfoPreparator carbonDictionarySortInfoPreparator = null;
1: 
1:   @BeforeClass public static void setUp() {
1:     carbonDictionarySortInfoPreparator = new CarbonDictionarySortInfoPreparator();
1:   }
1: 
1:   /**
1:    * Tests the getDictionarySortInfo method
1:    *
0:    * @throws CarbonUtilException
1:    */
0:   @Test public void testGetDictionarySortInfo() throws CarbonUtilException {
1: 
1:     List<String> newDistinctValues = new ArrayList<>();
1:     newDistinctValues.add("abc");
1:     newDistinctValues.add("xyz");
1:     Dictionary dictionary = new MockUp<Dictionary>() {
1:       @Mock public DictionaryChunksWrapper getDictionaryChunks() {
1:         List<byte[]> data = new ArrayList<>();
1:         data.add(new byte[] { 1, 2 });
1:         List<List<byte[]>> dictionaryChunks = new ArrayList<>();
1:         dictionaryChunks.add(data);
1:         return new DictionaryChunksWrapper(dictionaryChunks);
1:       }
1:     }.getMockInstance();
1: 
1:     new MockUp<DictionaryChunksWrapper>() {
1:       @Mock public int getSize() {
1:         return 1;
1:       }
1:     };
1: 
1:     CarbonDictionarySortInfo carbonDictionarySortInfo = carbonDictionarySortInfoPreparator
0:         .getDictionarySortInfo(newDistinctValues, dictionary, DataType.ARRAY);
1:     int expectedGetSortIndexValue = 1;
1:     int expectedGetSortInvertedIndexLength = 3;
1:     int actualGetSortIndexValue = carbonDictionarySortInfo.getSortIndex().get(0);
1:     int actualGetSortInvertedIndexLength = carbonDictionarySortInfo.getSortIndexInverted().size();
1:     assertEquals(actualGetSortIndexValue, expectedGetSortIndexValue);
1:     assertEquals(actualGetSortInvertedIndexLength, expectedGetSortInvertedIndexLength);
1:   }
1: 
1:   /**
1:    * Tests getDictionarySortInfo when dictionary is null
1:    *
0:    * @throws CarbonUtilException
1:    */
0:   @Test public void testGetDictionarySortInfoDictionaryNullCase() throws CarbonUtilException {
1: 
1:     List<String> newDistinctValues = new ArrayList<>();
1:     newDistinctValues.add("abc");
1:     newDistinctValues.add("xyz");
1:     Dictionary dictionary = null;
1:     CarbonDictionarySortInfo carbonDictionarySortInfo = carbonDictionarySortInfoPreparator
0:         .getDictionarySortInfo(newDistinctValues, dictionary, DataType.ARRAY);
1:     int expectedGetSortIndexValue = 1;
1:     int expectedGetSortInvertedIndexLength = 2;
1:     int actualGetSortIndexValue = carbonDictionarySortInfo.getSortIndex().get(0);
1:     int actualGetSortInvertedIndexLength = carbonDictionarySortInfo.getSortIndexInverted().size();
1:     assertEquals(actualGetSortIndexValue, expectedGetSortIndexValue);
1:     assertEquals(actualGetSortInvertedIndexLength, expectedGetSortInvertedIndexLength);
1:   }
1: 
1: }
============================================================================