1:531dcd2: /*
1:531dcd2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:531dcd2:  * contributor license agreements.  See the NOTICE file distributed with
1:531dcd2:  * this work for additional information regarding copyright ownership.
1:531dcd2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:531dcd2:  * (the "License"); you may not use this file except in compliance with
1:531dcd2:  * the License.  You may obtain a copy of the License at
1:531dcd2:  *
1:531dcd2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:531dcd2:  *
1:531dcd2:  * Unless required by applicable law or agreed to in writing, software
1:531dcd2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:531dcd2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:531dcd2:  * See the License for the specific language governing permissions and
1:531dcd2:  * limitations under the License.
1:531dcd2:  */
4:531dcd2: 
1:531dcd2: package org.apache.carbondata.presto.readers;
1:531dcd2: 
1:6add19a: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1:a4c2ef5: import org.apache.carbondata.core.metadata.datatype.DataType;
1:6add19a: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:a4c2ef5: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1:6add19a: import org.apache.carbondata.core.util.DataTypeUtil;
1:531dcd2: 
1:531dcd2: import com.facebook.presto.spi.block.Block;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilder;
1:531dcd2: import com.facebook.presto.spi.block.BlockBuilderStatus;
1:a4c2ef5: import com.facebook.presto.spi.type.BigintType;
1:531dcd2: import com.facebook.presto.spi.type.Type;
1:531dcd2: 
1:a4c2ef5: public class LongStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:531dcd2: 
1:a4c2ef5:   protected int batchSize;
1:a4c2ef5: 
1:a4c2ef5:   protected Type type = BigintType.BIGINT;
1:a4c2ef5: 
1:a4c2ef5:   protected BlockBuilder builder;
1:a4c2ef5: 
1:6add19a:   private Dictionary dictionary;
1:531dcd2: 
1:a4c2ef5:   public LongStreamReader(int batchSize, DataType dataType, Dictionary dictionary) {
1:a4c2ef5:     super(batchSize, dataType);
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:6add19a:     this.dictionary = dictionary;
1:2ad621d:   }
1:2ad621d: 
1:a4c2ef5:   @Override public Block buildBlock() {
1:531dcd2:     return builder.build();
1:2ad621d:   }
1:531dcd2: 
1:a4c2ef5:   @Override public void setBatchSize(int batchSize) {
1:a4c2ef5:     this.batchSize = batchSize;
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void putInt(int rowId, int value) {
1:a4c2ef5:     Object data = DataTypeUtil
1:a4c2ef5:         .getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value), DataTypes.LONG);
1:a4c2ef5:     if (data != null) {
1:a4c2ef5:       type.writeLong(builder, (Long) data);
1:a4c2ef5:     } else {
1:a4c2ef5:       builder.appendNull();
1:2ad621d:     }
1:1551a7c:   }
1:1551a7c: 
1:a4c2ef5:   @Override public void putLong(int rowId, long value) {
1:a4c2ef5:     type.writeLong(builder, value);
4:1551a7c:   }
1:1551a7c: 
1:a4c2ef5:   @Override public void putNull(int rowId) {
1:a4c2ef5:     builder.appendNull();
1:a4c2ef5:   }
1:a4c2ef5: 
1:a4c2ef5:   @Override public void reset() {
1:a4c2ef5:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:a4c2ef5:   }
1:1551a7c: }
============================================================================
author:sv71294
-------------------------------------------------------------------------------
commit:a4c2ef5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.scan.result.vector.impl.CarbonColumnVectorImpl;
1: import com.facebook.presto.spi.type.BigintType;
1: public class LongStreamReader extends CarbonColumnVectorImpl implements PrestoVectorBlockBuilder {
1:   protected int batchSize;
1: 
1:   protected Type type = BigintType.BIGINT;
1: 
1:   protected BlockBuilder builder;
1: 
1:   public LongStreamReader(int batchSize, DataType dataType, Dictionary dictionary) {
1:     super(batchSize, dataType);
1:     this.batchSize = batchSize;
1:     this.builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   @Override public Block buildBlock() {
1:   @Override public void setBatchSize(int batchSize) {
1:     this.batchSize = batchSize;
1:   }
1: 
1:   @Override public void putInt(int rowId, int value) {
1:     Object data = DataTypeUtil
1:         .getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value), DataTypes.LONG);
1:     if (data != null) {
1:       type.writeLong(builder, (Long) data);
1:     } else {
1:       builder.appendNull();
1:   @Override public void putLong(int rowId, long value) {
1:     type.writeLong(builder, value);
1:   @Override public void putNull(int rowId) {
1:     builder.appendNull();
1:   }
1: 
1:   @Override public void reset() {
1:     builder = type.createBlockBuilder(new BlockBuilderStatus(), batchSize);
1:   }
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
0:         if (isDictionary) {
/////////////////////////////////////////////////////////////////////////
0:       for (int i = 0; i < numberOfRows; i++) {
0:         type.writeLong(builder, (Long) streamData[i]);
author:Bhavya
-------------------------------------------------------------------------------
commit:2ad621d
/////////////////////////////////////////////////////////////////////////
0:         if(isDictionary) {
0:           populateDictionaryVector(type, numberOfRows, builder);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         type.writeLong(builder, (long) columnVector.getData(i));
1:     }
1:   }
1: 
0:   private void populateDictionaryVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
/////////////////////////////////////////////////////////////////////////
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
0:         type.writeLong(builder, (Long)columnVector.getData(i));
0:       type.writeLong(builder, (Long)columnVector.getData(i));
commit:1551a7c
/////////////////////////////////////////////////////////////////////////
0:         if(columnVector.anyNullsSet()) {
0:           handleNullInVector(type, numberOfRows, builder);
1:         }
0:         else {
0:           populateVector(type, numberOfRows, builder);
/////////////////////////////////////////////////////////////////////////
0:   private void handleNullInVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       if (columnVector.isNullAt(i)) {
0:         builder.appendNull();
0:       } else {
0:         type.writeLong(builder, columnVector.getLong(i));
1:       }
1:     }
1:   }
1: 
0:   private void populateVector(Type type, int numberOfRows, BlockBuilder builder) {
0:     for (int i = 0; i < numberOfRows; i++) {
0:       type.writeLong(builder, columnVector.getLong(i));
1:     }
1:   }
1: 
commit:531dcd2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.readers;
1: 
0: import java.io.IOException;
1: 
1: import com.facebook.presto.spi.block.Block;
1: import com.facebook.presto.spi.block.BlockBuilder;
1: import com.facebook.presto.spi.block.BlockBuilderStatus;
1: import com.facebook.presto.spi.type.Type;
1: 
0: public class LongStreamReader extends AbstractStreamReader {
1: 
0:   public LongStreamReader() {
1: 
0:   }
1: 
0:   public Block readBlock(Type type) throws IOException {
0:     int numberOfRows = 0;
0:     BlockBuilder builder = null;
0:     if (isVectorReader) {
0:       numberOfRows = batchSize;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (columnVector != null) {
0:         for (int i = 0; i < numberOfRows; i++) {
0:           if (columnVector.isNullAt(i)) {
0:             builder.appendNull();
0:           } else {
0:             type.writeLong(builder, columnVector.getLong(i));
0:           }
0:         }
0:       }
1: 
0:     } else {
0:       numberOfRows = streamData.length;
0:       builder = type.createBlockBuilder(new BlockBuilderStatus(), numberOfRows);
0:       if (streamData != null) {
0:         for (int i = 0; i < numberOfRows; i++) {
0:           type.writeLong(builder, (Long) streamData[i]);
0:         }
0:       }
0:     }
1: 
1:     return builder.build();
0:   }
1: 
0: }
author:anubhav100
-------------------------------------------------------------------------------
commit:6add19a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.cache.dictionary.Dictionary;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.util.DataTypeUtil;
0: 
/////////////////////////////////////////////////////////////////////////
0:   private boolean isDictionary;
1:   private Dictionary dictionary;
0: 
0:   public LongStreamReader(boolean isDictionary, Dictionary dictionary) {
0:     this.isDictionary = isDictionary;
1:     this.dictionary = dictionary;
0:   }
0: 
0:     int numberOfRows;
0:     BlockBuilder builder;
0:         if (columnVector.anyNullsSet()) {
0:         } else {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         type.writeLong(builder, (Long) columnVector.getData(i));
0:       if (isDictionary) {
0:         int value = (int) columnVector.getData(i);
0:         Object data = DataTypeUtil
0:             .getDataBasedOnDataType(dictionary.getDictionaryValueForKey(value), DataTypes.LONG);
0:         if (data != null) {
0:           type.writeLong(builder, (Long) data);
0:         } else {
0:           builder.appendNull();
0:         }
0:       } else {
0:         type.writeLong(builder, (long) columnVector.getData(i));
0:       }
============================================================================