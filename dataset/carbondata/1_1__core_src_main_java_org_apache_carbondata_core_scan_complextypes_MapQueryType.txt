1:fb6dffe: /*
1:fb6dffe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fb6dffe:  * contributor license agreements.  See the NOTICE file distributed with
1:fb6dffe:  * this work for additional information regarding copyright ownership.
1:fb6dffe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fb6dffe:  * (the "License"); you may not use this file except in compliance with
1:fb6dffe:  * the License.  You may obtain a copy of the License at
1:fb6dffe:  *
1:fb6dffe:  *    http://www.apache.org/licenses/LICENSE-2.0
1:fb6dffe:  *
1:fb6dffe:  * Unless required by applicable law or agreed to in writing, software
1:fb6dffe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb6dffe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb6dffe:  * See the License for the specific language governing permissions and
1:fb6dffe:  * limitations under the License.
1:fb6dffe:  */
1:fb6dffe: package org.apache.carbondata.core.scan.complextypes;
1:fb6dffe: 
1:fb6dffe: import java.nio.ByteBuffer;
1:fb6dffe: 
1:fb6dffe: import org.apache.carbondata.core.util.DataTypeUtil;
1:fb6dffe: 
1:fb6dffe: /**
1:fb6dffe:  * handles querying map data type columns
1:fb6dffe:  */
1:fb6dffe: public class MapQueryType extends ArrayQueryType {
1:fb6dffe: 
1:fb6dffe:   public MapQueryType(String name, String parentname, int blockIndex) {
1:fb6dffe:     super(name, parentname, blockIndex);
1:fb6dffe:   }
1:fb6dffe: 
1:fb6dffe:   /**
1:fb6dffe:    * Map data is internally stored as Array<Struct<key,Value>>. So first the data is filled in the
1:fb6dffe:    * stored format and then each record is separated out to fill key and value separately. This is
1:fb6dffe:    * because for spark integration it expects the data as ArrayBasedMapData(keyArray, valueArray)
1:fb6dffe:    * and for SDK it will be an object array in the same format as returned to spark
1:fb6dffe:    *
1:fb6dffe:    * @param dataBuffer
1:fb6dffe:    * @return
1:fb6dffe:    */
1:fb6dffe:   @Override
1:fb6dffe:   public Object getDataBasedOnDataType(ByteBuffer dataBuffer) {
1:fb6dffe:     Object[] data = fillData(dataBuffer);
1:fb6dffe:     if (data == null) {
1:fb6dffe:       return null;
1:fb6dffe:     }
1:fb6dffe:     Object[] keyArray = new Object[data.length];
1:fb6dffe:     Object[] valueArray = new Object[data.length];
1:fb6dffe:     for (int i = 0; i < data.length; i++) {
1:fb6dffe:       Object[] keyValue = DataTypeUtil.getDataTypeConverter().unwrapGenericRowToObject(data[i]);
1:fb6dffe:       keyArray[i] = keyValue[0];
1:fb6dffe:       valueArray[i] = keyValue[1];
1:fb6dffe:     }
1:fb6dffe:     return DataTypeUtil.getDataTypeConverter().wrapWithArrayBasedMapData(keyArray, valueArray);
1:fb6dffe:   }
1:fb6dffe: 
1:fb6dffe: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:fb6dffe
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.complextypes;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: /**
1:  * handles querying map data type columns
1:  */
1: public class MapQueryType extends ArrayQueryType {
1: 
1:   public MapQueryType(String name, String parentname, int blockIndex) {
1:     super(name, parentname, blockIndex);
1:   }
1: 
1:   /**
1:    * Map data is internally stored as Array<Struct<key,Value>>. So first the data is filled in the
1:    * stored format and then each record is separated out to fill key and value separately. This is
1:    * because for spark integration it expects the data as ArrayBasedMapData(keyArray, valueArray)
1:    * and for SDK it will be an object array in the same format as returned to spark
1:    *
1:    * @param dataBuffer
1:    * @return
1:    */
1:   @Override
1:   public Object getDataBasedOnDataType(ByteBuffer dataBuffer) {
1:     Object[] data = fillData(dataBuffer);
1:     if (data == null) {
1:       return null;
1:     }
1:     Object[] keyArray = new Object[data.length];
1:     Object[] valueArray = new Object[data.length];
1:     for (int i = 0; i < data.length; i++) {
1:       Object[] keyValue = DataTypeUtil.getDataTypeConverter().unwrapGenericRowToObject(data[i]);
1:       keyArray[i] = keyValue[0];
1:       valueArray[i] = keyValue[1];
1:     }
1:     return DataTypeUtil.getDataTypeConverter().wrapWithArrayBasedMapData(keyArray, valueArray);
1:   }
1: 
1: }
============================================================================