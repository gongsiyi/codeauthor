1:779fd08: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:41347d8:  *
1:41347d8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:41347d8:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:779fd08:  */
1:779fd08: 
1:349c59c: package org.apache.carbondata.processing.loading;
1:0a09472: 
1:70256e7: import java.util.ArrayList;
1:779fd08: import java.util.HashMap;
1:70256e7: import java.util.List;
1:779fd08: import java.util.Map;
1:779fd08: 
1:dc83b2a: import org.apache.carbondata.core.datastore.TableSpec;
1:4daf063: import org.apache.carbondata.core.dictionary.service.DictionaryServiceProvider;
1:353272e: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1:353272e: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
1:ce09aaa: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1:353272e: import org.apache.carbondata.core.metadata.datatype.DataType;
1:ce09aaa: import org.apache.carbondata.core.metadata.schema.BucketingInfo;
1:d5396b1: import org.apache.carbondata.core.metadata.schema.SortColumnRangeInfo;
1:353272e: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:349c59c: import org.apache.carbondata.processing.loading.converter.DictionaryCardinalityFinder;
1:779fd08: 
1:779fd08: public class CarbonDataLoadConfiguration {
1:779fd08: 
1:779fd08:   private DataField[] dataFields;
1:779fd08: 
1:779fd08:   private AbsoluteTableIdentifier tableIdentifier;
1:779fd08: 
1:779fd08:   private String[] header;
1:779fd08: 
1:779fd08:   private String segmentId;
1:779fd08: 
1:779fd08:   private String taskNo;
1:cbf8797: 
1:cbf8797:   private BucketingInfo bucketingInfo;
1:0a09472: 
1:779fd08:   private Map<String, Object> dataLoadProperties = new HashMap<>();
1:779fd08: 
1:05b2654:   /**
1:05b2654:    *  Use one pass to generate dictionary
1:05b2654:    */
1:05b2654:   private boolean useOnePass;
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * dictionary server host
1:05b2654:    */
1:05b2654:   private String dictionaryServerHost;
1:05b2654: 
1:05b2654:   /**
1:05b2654:    * dictionary sever port
1:05b2654:    */
1:05b2654:   private int dictionaryServerPort;
1:05b2654: 
1:4daf063:   /**
1:4daf063:    * dictionary server secret key
1:4daf063:    */
1:4daf063:   private String dictionaryServerSecretKey;
1:779fd08: 
1:4daf063:   /**
1:4daf063:    * Dictionary Service Provider.
1:4daf063:    */
1:4daf063:   private DictionaryServiceProvider dictionaryServiceProvider;
1:779fd08: 
1:4daf063:   /**
1:4daf063:    * Secure Mode or not.
1:4daf063:    */
1:4daf063:   private Boolean dictionaryEncryptServerSecure;
1:779fd08: 
1:8100d94:   private boolean preFetch;
1:8100d94: 
1:70256e7:   private int dimensionCount;
1:779fd08: 
1:70256e7:   private int measureCount;
1:4daf063: 
1:353272e:   private int noDictionaryCount;
1:4daf063: 
1:3202cf5:   private int complexDictionaryColumnCount;
1:3202cf5: 
1:3202cf5:   private int complexNonDictionaryColumnCount;
1:4daf063: 
1:fc1af96:   /**
1:fc1af96:    * schema updated time stamp to be used for restructure scenarios
1:fc1af96:    */
1:fc1af96:   private long schemaUpdatedTimeStamp;
1:353272e: 
1:b13ead9:   private DictionaryCardinalityFinder cardinalityFinder;
1:b13ead9: 
1:9f94529:   private int numberOfSortColumns;
1:353272e: 
1:9f94529:   private int numberOfNoDictSortColumns;
1:9f94529: 
1:dc83b2a:   // contains metadata used in write step of loading process
1:dc83b2a:   private TableSpec tableSpec;
1:dc83b2a: 
1:a89587e:   /**
1:a89587e:    * Number of thread cores to use while writing data files
1:a89587e:    */
1:a89587e:   private short writingCoresCount;
1:a89587e: 
1:d5396b1:   private SortColumnRangeInfo sortColumnRangeInfo;
1:d5396b1: 
1:b7b8073:   private boolean carbonTransactionalTable;
1:280a400: 
1:8d3c774:   /**
1:8d3c774:    * Flder path to where data should be written for this load.
1:8d3c774:    */
1:8d3c774:   private String dataWritePath;
1:8d3c774: 
1:7a1d12a:   private String parentTablePath;
1:7a1d12a: 
1:8f08c4a:   /**
1:8f08c4a:    * name of compressor to be used to compress column page
1:8f08c4a:    */
1:8f08c4a:   private String columnCompressor;
1:8f08c4a: 
1:05b2654:   public CarbonDataLoadConfiguration() {
1:05b2654:   }
1:0a09472: 
1:7a1d12a:   public String getParentTablePath() {
1:7a1d12a:     return parentTablePath;
1:7a1d12a:   }
1:7a1d12a: 
1:7a1d12a:   public void setParentTablePath(String parentTablePath) {
1:7a1d12a:     this.parentTablePath = parentTablePath;
1:7a1d12a:   }
1:7a1d12a: 
1:779fd08:   public void setDataFields(DataField[] dataFields) {
1:779fd08:     this.dataFields = dataFields;
1:05b2654: 
1:353272e:     // set counts for each column category
1:353272e:     for (DataField dataField : dataFields) {
1:353272e:       CarbonColumn column = dataField.getColumn();
1:353272e:       if (column.isDimension()) {
1:353272e:         dimensionCount++;
1:3202cf5:         if (column.isComplex()) {
1:3202cf5:           if (!dataField.hasDictionaryEncoding()) {
1:3202cf5:             complexNonDictionaryColumnCount++;
1:3202cf5:           } else {
1:3202cf5:             complexDictionaryColumnCount++;
1:0a09472:           }
1:3202cf5:         } else if (!dataField.hasDictionaryEncoding()) {
1:353272e:           noDictionaryCount++;
1:3202cf5:         }
1:779fd08:       }
1:3202cf5: 
1:353272e:       if (column.isMeasure()) {
1:70256e7:         measureCount++;
1:779fd08:       }
1:779fd08:     }
1:779fd08:   }
1:779fd08: 
1:779fd08:   public DataField[] getDataFields() {
1:779fd08:     return dataFields;
1:779fd08:   }
1:353272e: 
1:779fd08:   public int getDimensionCount() {
1:70256e7:     return dimensionCount;
1:779fd08:   }
1:353272e: 
1:779fd08:   public int getNoDictionaryCount() {
1:353272e:     return noDictionaryCount;
1:779fd08:   }
1:779fd08: 
1:3202cf5:   public int getComplexDictionaryColumnCount() {
1:3202cf5:     return complexDictionaryColumnCount;
1:779fd08:   }
1:353272e: 
1:779fd08:   public int getMeasureCount() {
1:353272e:     return measureCount;
1:779fd08:   }
1:779fd08: 
1:9f94529:   public void setNumberOfSortColumns(int numberOfSortColumns) {
1:9f94529:     this.numberOfSortColumns = numberOfSortColumns;
1:779fd08:   }
1:779fd08: 
1:9f94529:   public int getNumberOfSortColumns() {
1:9f94529:     return this.numberOfSortColumns;
1:779fd08:   }
1:779fd08: 
1:9f94529:   public boolean isSortTable() {
1:9f94529:     return this.numberOfSortColumns > 0;
1:779fd08:   }
1:779fd08: 
1:9f94529:   public void setNumberOfNoDictSortColumns(int numberOfNoDictSortColumns) {
1:9f94529:     this.numberOfNoDictSortColumns = numberOfNoDictSortColumns;
1:779fd08:   }
1:779fd08: 
1:9f94529:   public int getNumberOfNoDictSortColumns() {
1:9f94529:     return this.numberOfNoDictSortColumns;
1:779fd08:   }
1:353272e: 
1:779fd08:   public String[] getHeader() {
1:779fd08:     return header;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public void setHeader(String[] header) {
1:779fd08:     this.header = header;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public AbsoluteTableIdentifier getTableIdentifier() {
1:779fd08:     return tableIdentifier;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public void setTableIdentifier(AbsoluteTableIdentifier tableIdentifier) {
1:779fd08:     this.tableIdentifier = tableIdentifier;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public String getSegmentId() {
1:779fd08:     return segmentId;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public void setSegmentId(String segmentId) {
1:779fd08:     this.segmentId = segmentId;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public String getTaskNo() {
1:779fd08:     return taskNo;
1:779fd08:   }
1:779fd08: 
1:779fd08:   public void setTaskNo(String taskNo) {
1:779fd08:     this.taskNo = taskNo;
1:0a09472:   }
1:0a09472: 
1:779fd08:   public void setDataLoadProperty(String key, Object value) {
1:779fd08:     dataLoadProperties.put(key, value);
1:353272e:   }
1:353272e: 
1:779fd08:   public Object getDataLoadProperty(String key) {
1:779fd08:     return dataLoadProperties.get(key);
1:353272e:   }
1:cbf8797: 
1:cbf8797:   public BucketingInfo getBucketingInfo() {
1:cbf8797:     return bucketingInfo;
1:cbf8797:   }
1:cbf8797: 
1:cbf8797:   public void setBucketingInfo(BucketingInfo bucketingInfo) {
1:cbf8797:     this.bucketingInfo = bucketingInfo;
1:cbf8797:   }
1:05b2654: 
1:05b2654:   public boolean getUseOnePass() {
1:05b2654:     return useOnePass;
1:05b2654:   }
1:05b2654: 
1:05b2654:   public void setUseOnePass(boolean useOnePass) {
1:05b2654:     this.useOnePass = useOnePass;
1:05b2654:   }
1:05b2654: 
1:05b2654:   public String getDictionaryServerHost() {
1:05b2654:     return dictionaryServerHost;
1:05b2654:   }
1:05b2654: 
1:05b2654:   public void setDictionaryServerHost(String dictionaryServerHost) {
1:05b2654:     this.dictionaryServerHost = dictionaryServerHost;
1:05b2654:   }
1:05b2654: 
1:05b2654:   public int getDictionaryServerPort() {
1:05b2654:     return dictionaryServerPort;
1:05b2654:   }
1:05b2654: 
1:05b2654:   public void setDictionaryServerPort(int dictionaryServerPort) {
1:05b2654:     this.dictionaryServerPort = dictionaryServerPort;
1:05b2654:   }
1:8100d94: 
1:4daf063:   public String getDictionaryServerSecretKey() {
1:4daf063:     return dictionaryServerSecretKey;
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void setDictionaryServerSecretKey(String dictionaryServerSecretKey) {
1:4daf063:     this.dictionaryServerSecretKey = dictionaryServerSecretKey;
1:4daf063:   }
1:4daf063: 
1:4daf063:   public DictionaryServiceProvider getDictionaryServiceProvider() {
1:4daf063:     return dictionaryServiceProvider;
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void setDictionaryServiceProvider(DictionaryServiceProvider dictionaryServiceProvider) {
1:4daf063:     this.dictionaryServiceProvider = dictionaryServiceProvider;
1:4daf063:   }
1:4daf063: 
1:4daf063:   public Boolean getDictionaryEncryptServerSecure() {
1:4daf063:     return dictionaryEncryptServerSecure;
1:4daf063:   }
1:4daf063: 
1:4daf063:   public void setDictionaryEncryptServerSecure(Boolean dictionaryEncryptServerSecure) {
1:4daf063:     this.dictionaryEncryptServerSecure = dictionaryEncryptServerSecure;
1:4daf063:   }
1:4daf063: 
1:8100d94:   public boolean isPreFetch() {
1:8100d94:     return preFetch;
1:8100d94:   }
1:8100d94: 
1:8100d94:   public void setPreFetch(boolean preFetch) {
1:8100d94:     this.preFetch = preFetch;
1:8100d94:   }
1:353272e: 
1:fc1af96:   public long getSchemaUpdatedTimeStamp() {
1:fc1af96:     return schemaUpdatedTimeStamp;
1:353272e:   }
1:9f94529: 
1:fc1af96:   public void setSchemaUpdatedTimeStamp(long schemaUpdatedTimeStamp) {
1:fc1af96:     this.schemaUpdatedTimeStamp = schemaUpdatedTimeStamp;
1:353272e:   }
1:b13ead9: 
1:b13ead9:   public DictionaryCardinalityFinder getCardinalityFinder() {
1:b13ead9:     return cardinalityFinder;
1:b13ead9:   }
1:b13ead9: 
1:b13ead9:   public void setCardinalityFinder(DictionaryCardinalityFinder cardinalityFinder) {
1:b13ead9:     this.cardinalityFinder = cardinalityFinder;
1:b13ead9:   }
1:353272e: 
1:353272e:   public DataType[] getMeasureDataType() {
1:353272e:     List<Integer> measureIndexes = new ArrayList<>(dataFields.length);
1:353272e:     int measureCount = 0;
4:779fd08:     for (int i = 0; i < dataFields.length; i++) {
1:353272e:       if (!dataFields[i].getColumn().isDimension()) {
1:353272e:         measureIndexes.add(i);
1:353272e:         measureCount++;
1:779fd08:       }
1:779fd08:     }
1:779fd08: 
1:353272e:     DataType[] type = new DataType[measureCount];
1:353272e:     for (int i = 0; i < type.length; i++) {
1:353272e:       type[i] = dataFields[measureIndexes.get(i)].getColumn().getDataType();
1:779fd08:     }
1:353272e:     return type;
1:779fd08:   }
1:779fd08: 
1:353272e:   public int[] calcDimensionLengths() {
1:353272e:     int[] dimLensWithComplex = getCardinalityFinder().getCardinality();
1:353272e:     if (!isSortTable()) {
1:353272e:       for (int i = 0; i < dimLensWithComplex.length; i++) {
1:353272e:         if (dimLensWithComplex[i] != 0) {
1:353272e:           dimLensWithComplex[i] = Integer.MAX_VALUE;
1:779fd08:         }
1:779fd08:       }
1:779fd08:     }
1:353272e:     List<Integer> dimsLenList = new ArrayList<Integer>();
1:353272e:     for (int eachDimLen : dimLensWithComplex) {
1:353272e:       if (eachDimLen != 0) dimsLenList.add(eachDimLen);
1:779fd08:     }
1:353272e:     int[] dimLens = new int[dimsLenList.size()];
1:353272e:     for (int i = 0; i < dimsLenList.size(); i++) {
1:353272e:       dimLens[i] = dimsLenList.get(i);
1:353272e:     }
1:353272e:     return dimLens;
1:353272e:   }
1:779fd08: 
1:353272e:   public KeyGenerator[] createKeyGeneratorForComplexDimension() {
1:353272e:     int[] dimLens = calcDimensionLengths();
1:353272e:     KeyGenerator[] complexKeyGenerators = new KeyGenerator[dimLens.length];
1:353272e:     for (int i = 0; i < dimLens.length; i++) {
1:353272e:       complexKeyGenerators[i] =
1:353272e:           KeyGeneratorFactory.getKeyGenerator(new int[] { dimLens[i] });
10:353272e:     }
1:353272e:     return complexKeyGenerators;
1:353272e:   }
1:dc83b2a: 
1:dc83b2a:   public TableSpec getTableSpec() {
1:dc83b2a:     return tableSpec;
1:dc83b2a:   }
1:dc83b2a: 
1:dc83b2a:   public void setTableSpec(TableSpec tableSpec) {
1:dc83b2a:     this.tableSpec = tableSpec;
1:dc83b2a:   }
1:4daf063: 
1:a89587e:   public short getWritingCoresCount() {
1:a89587e:     return writingCoresCount;
1:a89587e:   }
1:4daf063: 
1:a89587e:   public void setWritingCoresCount(short writingCoresCount) {
1:a89587e:     this.writingCoresCount = writingCoresCount;
1:a89587e:   }
1:8d3c774: 
1:8d3c774:   public String getDataWritePath() {
1:8d3c774:     return dataWritePath;
1:8d3c774:   }
1:8d3c774: 
1:8d3c774:   public void setDataWritePath(String dataWritePath) {
1:8d3c774:     this.dataWritePath = dataWritePath;
1:8d3c774:   }
1:d5396b1: 
1:d5396b1:   public SortColumnRangeInfo getSortColumnRangeInfo() {
1:d5396b1:     return sortColumnRangeInfo;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public void setSortColumnRangeInfo(SortColumnRangeInfo sortColumnRangeInfo) {
1:d5396b1:     this.sortColumnRangeInfo = sortColumnRangeInfo;
1:d5396b1:   }
1:280a400: 
1:b7b8073:   public boolean isCarbonTransactionalTable() {
1:b7b8073:     return carbonTransactionalTable;
1:280a400:   }
1:280a400: 
1:b7b8073:   public void setCarbonTransactionalTable(boolean carbonTransactionalTable) {
1:b7b8073:     this.carbonTransactionalTable = carbonTransactionalTable;
1:280a400:   }
1:3202cf5: 
1:3202cf5:   public int getComplexNonDictionaryColumnCount() {
1:3202cf5:     return complexNonDictionaryColumnCount;
1:3202cf5:   }
1:3202cf5: 
1:8f08c4a:   public String getColumnCompressor() {
1:8f08c4a:     return columnCompressor;
1:8f08c4a:   }
1:8f08c4a: 
1:8f08c4a:   public void setColumnCompressor(String columnCompressor) {
1:8f08c4a:     this.columnCompressor = columnCompressor;
1:8f08c4a:   }
1:353272e: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * name of compressor to be used to compress column page
1:    */
1:   private String columnCompressor;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public String getColumnCompressor() {
1:     return columnCompressor;
1:   }
1: 
1:   public void setColumnCompressor(String columnCompressor) {
1:     this.columnCompressor = columnCompressor;
1:   }
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.SortColumnRangeInfo;
/////////////////////////////////////////////////////////////////////////
1:   private SortColumnRangeInfo sortColumnRangeInfo;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public SortColumnRangeInfo getSortColumnRangeInfo() {
1:     return sortColumnRangeInfo;
1:   }
1: 
1:   public void setSortColumnRangeInfo(SortColumnRangeInfo sortColumnRangeInfo) {
1:     this.sortColumnRangeInfo = sortColumnRangeInfo;
1:   }
author:kunal642
-------------------------------------------------------------------------------
commit:7a1d12a
/////////////////////////////////////////////////////////////////////////
1:   private String parentTablePath;
1: 
1:   public String getParentTablePath() {
1:     return parentTablePath;
1:   }
1: 
1:   public void setParentTablePath(String parentTablePath) {
1:     this.parentTablePath = parentTablePath;
1:   }
1: 
commit:0a09472
/////////////////////////////////////////////////////////////////////////
0:   private String numberOfColumns;
1: 
0:   private String maxColumns;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public void setMaxColumns(String maxColumns) {
0:     this.maxColumns = maxColumns;
1:   }
1: 
0:   public void setNumberOfColumns(int numberOfColumns) {
0:     this.numberOfColumns = String.valueOf(numberOfColumns);
1:   }
1: 
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1:   private int complexDictionaryColumnCount;
1: 
1:   private int complexNonDictionaryColumnCount;
/////////////////////////////////////////////////////////////////////////
1:         if (column.isComplex()) {
1:           if (!dataField.hasDictionaryEncoding()) {
1:             complexNonDictionaryColumnCount++;
1:           } else {
1:             complexDictionaryColumnCount++;
1:           }
1:         } else if (!dataField.hasDictionaryEncoding()) {
1: 
/////////////////////////////////////////////////////////////////////////
1:   public int getComplexDictionaryColumnCount() {
1:     return complexDictionaryColumnCount;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public int getComplexNonDictionaryColumnCount() {
1:     return complexNonDictionaryColumnCount;
1:   }
1: 
commit:b7b8073
/////////////////////////////////////////////////////////////////////////
1:   private boolean carbonTransactionalTable;
/////////////////////////////////////////////////////////////////////////
1:   public boolean isCarbonTransactionalTable() {
1:     return carbonTransactionalTable;
1:   public void setCarbonTransactionalTable(boolean carbonTransactionalTable) {
1:     this.carbonTransactionalTable = carbonTransactionalTable;
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:280a400
/////////////////////////////////////////////////////////////////////////
0:   private boolean carbonUnmanagedTable;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:   public boolean isCarbonUnmanagedTable() {
0:     return carbonUnmanagedTable;
1:   }
1: 
0:   public void setCarbonUnmanagedTable(boolean carbonUnmanagedTable) {
0:     this.carbonUnmanagedTable = carbonUnmanagedTable;
1:   }
author:Jacky Li
-------------------------------------------------------------------------------
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.converter.DictionaryCardinalityFinder;
author:ravipesala
-------------------------------------------------------------------------------
commit:8d3c774
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Flder path to where data should be written for this load.
1:    */
1:   private String dataWritePath;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getDataWritePath() {
1:     return dataWritePath;
1:   }
1: 
1:   public void setDataWritePath(String dataWritePath) {
1:     this.dataWritePath = dataWritePath;
1:   }
commit:a89587e
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Number of thread cores to use while writing data files
1:    */
1:   private short writingCoresCount;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public short getWritingCoresCount() {
1:     return writingCoresCount;
1:   }
1:   public void setWritingCoresCount(short writingCoresCount) {
1:     this.writingCoresCount = writingCoresCount;
1:   }
commit:b13ead9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.processing.newflow.converter.DictionaryCardinalityFinder;
/////////////////////////////////////////////////////////////////////////
1:   private DictionaryCardinalityFinder cardinalityFinder;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public DictionaryCardinalityFinder getCardinalityFinder() {
1:     return cardinalityFinder;
1:   }
1: 
1:   public void setCardinalityFinder(DictionaryCardinalityFinder cardinalityFinder) {
1:     this.cardinalityFinder = cardinalityFinder;
1:   }
commit:8100d94
/////////////////////////////////////////////////////////////////////////
1:   private boolean preFetch;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean isPreFetch() {
1:     return preFetch;
1:   }
1: 
1:   public void setPreFetch(boolean preFetch) {
1:     this.preFetch = preFetch;
1:   }
commit:05b2654
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    *  Use one pass to generate dictionary
1:    */
1:   private boolean useOnePass;
1: 
1:   /**
1:    * dictionary server host
1:    */
1:   private String dictionaryServerHost;
1: 
1:   /**
1:    * dictionary sever port
1:    */
1:   private int dictionaryServerPort;
1: 
1:   public CarbonDataLoadConfiguration() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public boolean getUseOnePass() {
1:     return useOnePass;
1:   }
1: 
1:   public void setUseOnePass(boolean useOnePass) {
1:     this.useOnePass = useOnePass;
1:   }
1: 
1:   public String getDictionaryServerHost() {
1:     return dictionaryServerHost;
1:   }
1: 
1:   public void setDictionaryServerHost(String dictionaryServerHost) {
1:     this.dictionaryServerHost = dictionaryServerHost;
1:   }
1: 
1:   public int getDictionaryServerPort() {
1:     return dictionaryServerPort;
1:   }
1: 
1:   public void setDictionaryServerPort(int dictionaryServerPort) {
1:     this.dictionaryServerPort = dictionaryServerPort;
1:   }
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.metadata.schema.BucketingInfo;
/////////////////////////////////////////////////////////////////////////
1:   private BucketingInfo bucketingInfo;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public BucketingInfo getBucketingInfo() {
1:     return bucketingInfo;
1:   }
1: 
1:   public void setBucketingInfo(BucketingInfo bucketingInfo) {
1:     this.bucketingInfo = bucketingInfo;
1:   }
commit:779fd08
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.carbondata.core.carbon.AbsoluteTableIdentifier;
1: 
1: public class CarbonDataLoadConfiguration {
1: 
1:   private DataField[] dataFields;
1: 
1:   private AbsoluteTableIdentifier tableIdentifier;
1: 
1:   private String[] header;
1: 
0:   private String partitionId;
1: 
1:   private String segmentId;
1: 
1:   private String taskNo;
1: 
1:   private Map<String, Object> dataLoadProperties = new HashMap<>();
1: 
1:   public int getDimensionCount() {
0:     int dimCount = 0;
1:     for (int i = 0; i < dataFields.length; i++) {
0:       if (dataFields[i].getColumn().isDimesion()) {
0:         dimCount++;
1:       }
1:     }
0:     return dimCount;
1:   }
1: 
1:   public int getNoDictionaryCount() {
0:     int dimCount = 0;
1:     for (int i = 0; i < dataFields.length; i++) {
0:       if (dataFields[i].getColumn().isDimesion() && !dataFields[i].hasDictionaryEncoding()) {
0:         dimCount++;
1:       }
1:     }
0:     return dimCount;
1:   }
1: 
0:   public int getComplexDimensionCount() {
0:     int dimCount = 0;
1:     for (int i = 0; i < dataFields.length; i++) {
0:       if (dataFields[i].getColumn().isComplex()) {
0:         dimCount++;
1:       }
1:     }
0:     return dimCount;
1:   }
1: 
1:   public int getMeasureCount() {
0:     int msrCount = 0;
1:     for (int i = 0; i < dataFields.length; i++) {
0:       if (!dataFields[i].getColumn().isDimesion()) {
0:         msrCount++;
1:       }
1:     }
0:     return msrCount;
1:   }
1: 
1:   public DataField[] getDataFields() {
1:     return dataFields;
1:   }
1: 
1:   public void setDataFields(DataField[] dataFields) {
1:     this.dataFields = dataFields;
1:   }
1: 
1:   public String[] getHeader() {
1:     return header;
1:   }
1: 
1:   public void setHeader(String[] header) {
1:     this.header = header;
1:   }
1: 
1:   public AbsoluteTableIdentifier getTableIdentifier() {
1:     return tableIdentifier;
1:   }
1: 
1:   public void setTableIdentifier(AbsoluteTableIdentifier tableIdentifier) {
1:     this.tableIdentifier = tableIdentifier;
1:   }
1: 
0:   public String getPartitionId() {
0:     return partitionId;
1:   }
1: 
0:   public void setPartitionId(String partitionId) {
0:     this.partitionId = partitionId;
1:   }
1: 
1:   public String getSegmentId() {
1:     return segmentId;
1:   }
1: 
1:   public void setSegmentId(String segmentId) {
1:     this.segmentId = segmentId;
1:   }
1: 
1:   public String getTaskNo() {
1:     return taskNo;
1:   }
1: 
1:   public void setTaskNo(String taskNo) {
1:     this.taskNo = taskNo;
1:   }
1: 
1:   public void setDataLoadProperty(String key, Object value) {
1:     dataLoadProperties.put(key, value);
1:   }
1: 
0:   public Object getDataLoadProperty(String key, Object defaultValue) {
0:     Object value = dataLoadProperties.get(key);
0:     if (value == null) {
0:       value = defaultValue;
1:     }
0:     return value;
1:   }
1: 
1:   public Object getDataLoadProperty(String key) {
1:     return dataLoadProperties.get(key);
1:   }
1: }
author:sounak
-------------------------------------------------------------------------------
commit:4daf063
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.dictionary.service.DictionaryServiceProvider;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * dictionary server secret key
1:    */
1:   private String dictionaryServerSecretKey;
1: 
1:   /**
1:    * Dictionary Service Provider.
1:    */
1:   private DictionaryServiceProvider dictionaryServiceProvider;
1: 
1:   /**
1:    * Secure Mode or not.
1:    */
1:   private Boolean dictionaryEncryptServerSecure;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public String getDictionaryServerSecretKey() {
1:     return dictionaryServerSecretKey;
1:   }
1: 
1:   public void setDictionaryServerSecretKey(String dictionaryServerSecretKey) {
1:     this.dictionaryServerSecretKey = dictionaryServerSecretKey;
1:   }
1: 
1:   public DictionaryServiceProvider getDictionaryServiceProvider() {
1:     return dictionaryServiceProvider;
1:   }
1: 
1:   public void setDictionaryServiceProvider(DictionaryServiceProvider dictionaryServiceProvider) {
1:     this.dictionaryServiceProvider = dictionaryServiceProvider;
1:   }
1: 
1:   public Boolean getDictionaryEncryptServerSecure() {
1:     return dictionaryEncryptServerSecure;
1:   }
1: 
1:   public void setDictionaryEncryptServerSecure(Boolean dictionaryEncryptServerSecure) {
1:     this.dictionaryEncryptServerSecure = dictionaryEncryptServerSecure;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.TableSpec;
/////////////////////////////////////////////////////////////////////////
1:   // contains metadata used in write step of loading process
1:   private TableSpec tableSpec;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   public TableSpec getTableSpec() {
1:     return tableSpec;
1:   }
1: 
1:   public void setTableSpec(TableSpec tableSpec) {
1:     this.tableSpec = tableSpec;
1:   }
commit:353272e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.keygenerator.KeyGenerator;
1: import org.apache.carbondata.core.keygenerator.factory.KeyGeneratorFactory;
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private int noDictionaryCount;
1: 
0:   private int complexColumnCount;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public void setDataFields(DataField[] dataFields) {
0:     this.dataFields = dataFields;
1:     // set counts for each column category
1:     for (DataField dataField : dataFields) {
1:       CarbonColumn column = dataField.getColumn();
1:       if (column.isDimension()) {
1:         dimensionCount++;
0:         if (!dataField.hasDictionaryEncoding()) {
1:           noDictionaryCount++;
1:         }
1:       }
0:       if (column.isComplex()) {
0:         complexColumnCount++;
1:       }
1:       if (column.isMeasure()) {
1:   }
1: 
0:   public DataField[] getDataFields() {
0:     return dataFields;
/////////////////////////////////////////////////////////////////////////
1:     return noDictionaryCount;
1:   }
1: 
0:   public int getComplexColumnCount() {
0:     return complexColumnCount;
1:   }
1: 
0:   public int getMeasureCount() {
1:     return measureCount;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:   public DataType[] getMeasureDataType() {
1:     List<Integer> measureIndexes = new ArrayList<>(dataFields.length);
1:     int measureCount = 0;
0:     for (int i = 0; i < dataFields.length; i++) {
1:       if (!dataFields[i].getColumn().isDimension()) {
1:         measureIndexes.add(i);
1:         measureCount++;
1:       }
1:     }
1: 
1:     DataType[] type = new DataType[measureCount];
1:     for (int i = 0; i < type.length; i++) {
1:       type[i] = dataFields[measureIndexes.get(i)].getColumn().getDataType();
1:     }
1:     return type;
1:   }
1: 
1:   public int[] calcDimensionLengths() {
1:     int[] dimLensWithComplex = getCardinalityFinder().getCardinality();
1:     if (!isSortTable()) {
1:       for (int i = 0; i < dimLensWithComplex.length; i++) {
1:         if (dimLensWithComplex[i] != 0) {
1:           dimLensWithComplex[i] = Integer.MAX_VALUE;
1:         }
1:       }
1:     }
1:     List<Integer> dimsLenList = new ArrayList<Integer>();
1:     for (int eachDimLen : dimLensWithComplex) {
1:       if (eachDimLen != 0) dimsLenList.add(eachDimLen);
1:     }
1:     int[] dimLens = new int[dimsLenList.size()];
1:     for (int i = 0; i < dimsLenList.size(); i++) {
1:       dimLens[i] = dimsLenList.get(i);
1:     }
1:     return dimLens;
1:   }
1: 
1:   public KeyGenerator[] createKeyGeneratorForComplexDimension() {
1:     int[] dimLens = calcDimensionLengths();
1:     KeyGenerator[] complexKeyGenerators = new KeyGenerator[dimLens.length];
1:     for (int i = 0; i < dimLens.length; i++) {
1:       complexKeyGenerators[i] =
1:           KeyGeneratorFactory.getKeyGenerator(new int[] { dimLens[i] });
1:     }
1:     return complexKeyGenerators;
1:   }
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.AbsoluteTableIdentifier;
1: import org.apache.carbondata.core.metadata.schema.BucketingInfo;
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:   private int numberOfSortColumns;
1: 
1:   private int numberOfNoDictSortColumns;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void setNumberOfSortColumns(int numberOfSortColumns) {
1:     this.numberOfSortColumns = numberOfSortColumns;
0:   }
0: 
1:   public int getNumberOfSortColumns() {
1:     return this.numberOfSortColumns;
0:   }
0: 
1:   public boolean isSortTable() {
1:     return this.numberOfSortColumns > 0;
0:   }
0: 
1:   public void setNumberOfNoDictSortColumns(int numberOfNoDictSortColumns) {
1:     this.numberOfNoDictSortColumns = numberOfNoDictSortColumns;
0:   }
0: 
1:   public int getNumberOfNoDictSortColumns() {
1:     return this.numberOfNoDictSortColumns;
0:   }
0: 
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:manishgupta88
-------------------------------------------------------------------------------
commit:fc1af96
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * schema updated time stamp to be used for restructure scenarios
1:    */
1:   private long schemaUpdatedTimeStamp;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:   public long getSchemaUpdatedTimeStamp() {
1:     return schemaUpdatedTimeStamp;
0:   }
0: 
1:   public void setSchemaUpdatedTimeStamp(long schemaUpdatedTimeStamp) {
1:     this.schemaUpdatedTimeStamp = schemaUpdatedTimeStamp;
0:   }
commit:70256e7
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:   private DataField[] dimensionFields;
0: 
0:   private DataField[] measureFields;
0: 
/////////////////////////////////////////////////////////////////////////
1:   private int dimensionCount;
0: 
1:   private int measureCount;
0: 
0:   private void initDimensionFields() {
0:     List<Integer> dimensionIndexes = new ArrayList<>(dataFields.length);
0:         dimensionIndexes.add(i);
0:         dimensionCount++;
0:     dimensionFields = new DataField[dimensionCount];
0:     for (int i = 0; i < dimensionCount; i++) {
0:       dimensionFields[i] = dataFields[dimensionIndexes.get(i)];
0:     }
0:   }
0: 
0:   private void initMeasureFields() {
0:     List<Integer> measureIndexes = new ArrayList<>(dataFields.length);
0:     for (int i = 0; i < dataFields.length; i++) {
0:       if (!dataFields[i].getColumn().isDimesion()) {
0:         measureIndexes.add(i);
1:         measureCount++;
0:       }
0:     }
0:     measureFields = new DataField[measureCount];
0:     for (int i = 0; i < measureCount; i++) {
0:       measureFields[i] = dataFields[measureIndexes.get(i)];
0:     }
0:   }
0: 
0:   public int getDimensionCount() {
1:     return dimensionCount;
/////////////////////////////////////////////////////////////////////////
0:     return measureCount;
/////////////////////////////////////////////////////////////////////////
0:     initDimensionFields();
0:     initMeasureFields();
/////////////////////////////////////////////////////////////////////////
0: 
0:   public DataField[] getDimensionFields() {
0:     return dimensionFields;
0:   }
0: 
0:   public DataField[] getMeasureFields() {
0:     return measureFields;
0:   }
============================================================================