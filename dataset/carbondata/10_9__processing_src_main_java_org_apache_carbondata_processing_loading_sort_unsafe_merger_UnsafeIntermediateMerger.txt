1:f1f9348: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:f1f9348:  *
1:f1f9348:  *    http://www.apache.org/licenses/LICENSE-2.0
1:f1f9348:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:f1f9348:  */
1:349c59c: package org.apache.carbondata.processing.loading.sort.unsafe.merger;
1:b439b00: 
1:f1f9348: import java.io.File;
1:f1f9348: import java.util.ArrayList;
1:b439b00: import java.util.Iterator;
1:f1f9348: import java.util.List;
1:ded8b41: import java.util.Random;
1:a734add: import java.util.concurrent.ExecutionException;
1:f1f9348: import java.util.concurrent.ExecutorService;
1:f1f9348: import java.util.concurrent.Executors;
1:a734add: import java.util.concurrent.Future;
1:f1f9348: import java.util.concurrent.TimeUnit;
5:f1f9348: 
1:f1f9348: import org.apache.carbondata.common.logging.LogService;
1:f1f9348: import org.apache.carbondata.common.logging.LogServiceFactory;
1:f1f9348: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b439b00: import org.apache.carbondata.core.memory.UnsafeSortMemoryManager;
1:b439b00: import org.apache.carbondata.core.util.CarbonProperties;
1:a734add: import org.apache.carbondata.core.util.CarbonThreadFactory;
1:349c59c: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1:349c59c: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
1:349c59c: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
1:7ef9164: 
1:f1f9348: /**
1:f1f9348:  * It does mergesort intermediate files to big file.
1:f1f9348:  */
1:f1f9348: public class UnsafeIntermediateMerger {
1:f1f9348: 
1:f1f9348:   private static final LogService LOGGER =
1:f1f9348:       LogServiceFactory.getLogService(UnsafeIntermediateMerger.class.getName());
1:f1f9348: 
1:f1f9348:   /**
1:f1f9348:    * executorService
1:f1f9348:    */
1:f1f9348:   private ExecutorService executorService;
1:f1f9348:   /**
1:f1f9348:    * rowPages
1:f1f9348:    */
1:f1f9348:   private List<UnsafeCarbonRowPage> rowPages;
1:f1f9348: 
1:f1f9348:   private List<UnsafeInMemoryIntermediateDataMerger> mergedPages;
1:f1f9348: 
1:f1f9348:   private SortParameters parameters;
1:f1f9348: 
1:f1f9348:   private final Object lockObject = new Object();
1:f1f9348: 
1:f1f9348:   private List<File> procFiles;
1:f1f9348: 
1:a734add:   private List<Future<Void>> mergerTask;
1:b439b00:   /**
1:b439b00:    * size to be spilled in sort memory
1:b439b00:    */
1:b439b00:   private long spillSizeInSortMemory;
1:a734add: 
1:f1f9348:   public UnsafeIntermediateMerger(SortParameters parameters) {
1:f1f9348:     this.parameters = parameters;
1:f1f9348:     // processed file list
1:f1f9348:     this.rowPages = new ArrayList<UnsafeCarbonRowPage>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:f1f9348:     this.mergedPages = new ArrayList<>();
1:a734add:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores(),
1:a734add:         new CarbonThreadFactory("UnsafeIntermediatePool:" + parameters.getTableName()));
1:8e54f1e:     this.procFiles = new ArrayList<>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:a734add:     this.mergerTask = new ArrayList<>();
1:b439b00: 
1:8cb37dd:     Integer spillPercentage = CarbonProperties.getInstance().getSortMemorySpillPercentage();
1:b439b00:     this.spillSizeInSortMemory =
1:b439b00:         UnsafeSortMemoryManager.INSTANCE.getUsableMemory() * spillPercentage / 100;
1:c3bc1ba:     // get memory chunk size
1:c3bc1ba:     long inMemoryChunkSizeInMB = CarbonProperties.getInstance().getSortMemoryChunkSizeInMB();
1:c3bc1ba:     if (spillSizeInSortMemory < inMemoryChunkSizeInMB * 1024 * 1024) {
1:c3bc1ba:       LOGGER.warn("the configure spill size is " + spillSizeInSortMemory +
1:c3bc1ba:           " less than the page size " + inMemoryChunkSizeInMB * 1024 * 1024 +
1:c3bc1ba:           ",so no merge and spill in-memory pages to disk");
1:c3bc1ba:     }
1:c3bc1ba: 
1:b439b00:   }
1:f1f9348: 
1:f1f9348:   public void addDataChunkToMerge(UnsafeCarbonRowPage rowPage) {
1:f1f9348:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:f1f9348:     // intermediate merging of sort temp files will be triggered
1:7ef9164:     synchronized (lockObject) {
1:f1f9348:       rowPages.add(rowPage);
7:f1f9348:     }
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void addFileToMerge(File sortTempFile) {
1:f1f9348:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:f1f9348:     // intermediate merging of sort temp files will be triggered
4:f1f9348:     synchronized (lockObject) {
1:f1f9348:       procFiles.add(sortTempFile);
1:f1f9348:     }
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void startFileMergingIfPossible() {
1:8e54f1e:     File[] fileList;
1:8e54f1e:     if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:8e54f1e:       synchronized (lockObject) {
1:f1f9348:         fileList = procFiles.toArray(new File[procFiles.size()]);
1:f1f9348:         this.procFiles = new ArrayList<File>();
1:7ef9164:       }
1:8e54f1e:       if (LOGGER.isDebugEnabled()) {
1:8e54f1e:         LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:8e54f1e:       }
1:f1f9348:       startIntermediateMerging(fileList);
1:7ef9164:     }
1:4a79a86:   }
1:f1f9348: 
1:f1f9348:   /**
2:f1f9348:    * Below method will be used to start the intermediate file merging
1:f1f9348:    *
1:f1f9348:    * @param intermediateFiles
1:f1f9348:    */
1:f1f9348:   private void startIntermediateMerging(File[] intermediateFiles) {
1:ded8b41:     //pick a temp location randomly
1:ded8b41:     String[] tempFileLocations = parameters.getTempFileLocation();
1:ded8b41:     String targetLocation = tempFileLocations[new Random().nextInt(tempFileLocations.length)];
1:ded8b41: 
1:d5396b1:     File file = new File(targetLocation + File.separator + parameters.getTableName()
1:d5396b1:         + '_' + parameters.getRangeId() + '_' + System.nanoTime()
1:d5396b1:         + CarbonCommonConstants.MERGERD_EXTENSION);
1:f1f9348:     UnsafeIntermediateFileMerger merger =
1:f1f9348:         new UnsafeIntermediateFileMerger(parameters, intermediateFiles, file);
1:a734add:     mergerTask.add(executorService.submit(merger));
1:f1f9348:   }
1:f1f9348: 
1:b439b00:   public void tryTriggerInmemoryMerging(boolean spillDisk)
1:b439b00:       throws CarbonSortKeyAndGroupByException {
1:b439b00:     List<UnsafeCarbonRowPage> pages2Merge = new ArrayList<>();
1:b439b00:     int totalRows2Merge = 0;
1:b439b00:     synchronized (lockObject) {
1:b439b00:       long sizeAdded = 0;
1:b439b00:       for (Iterator<UnsafeCarbonRowPage> iter = rowPages.iterator(); iter.hasNext(); ) {
1:b439b00:         UnsafeCarbonRowPage page = iter.next();
1:b439b00:         if (!spillDisk || sizeAdded + page.getDataBlock().size() < this.spillSizeInSortMemory) {
1:b439b00:           pages2Merge.add(page);
1:c3bc1ba:           sizeAdded += page.getDataBlock().size();
1:b439b00:           totalRows2Merge += page.getBuffer().getActualSize();
1:b439b00:           iter.remove();
1:b439b00:         } else {
1:b439b00:           break;
1:b439b00:         }
1:f1f9348:       }
1:f1f9348:     }
1:b439b00:     if (pages2Merge.size() > 1) {
1:7ef9164:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug("Sumitting request for intermediate merging of in-memory pages : "
1:b439b00:             + pages2Merge.size());
1:4a79a86:       }
1:b439b00:       startIntermediateMerging(pages2Merge.toArray(new UnsafeCarbonRowPage[pages2Merge.size()]),
1:b439b00:           totalRows2Merge, spillDisk);
1:b439b00:     }
1:b439b00:   }
1:b439b00: 
1:b439b00:   public void startInmemoryMergingIfPossible() throws CarbonSortKeyAndGroupByException {
1:b439b00:     if (rowPages.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:b439b00:       tryTriggerInmemoryMerging(false);
1:f1f9348:     }
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   /**
1:b439b00:    * Below method will be used to start the intermediate inmemory merging
1:f1f9348:    *
1:b439b00:    * @param rowPages pages to be merged
1:b439b00:    * @param totalRows total rows in all pages
1:b439b00:    * @param spillDisk whether to spill the merged result to disk
1:f1f9348:    */
1:b439b00:   private void startIntermediateMerging(UnsafeCarbonRowPage[] rowPages, int totalRows,
1:b439b00:       boolean spillDisk) throws CarbonSortKeyAndGroupByException {
1:f1f9348:     UnsafeInMemoryIntermediateDataMerger merger =
1:b439b00:         new UnsafeInMemoryIntermediateDataMerger(rowPages, totalRows, parameters, spillDisk);
1:f1f9348:     mergedPages.add(merger);
1:b439b00:     mergerTask.add(executorService.submit(merger));
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void finish() throws CarbonSortKeyAndGroupByException {
1:b439b00:     try {
1:f1f9348:       executorService.shutdown();
1:f1f9348:       executorService.awaitTermination(2, TimeUnit.DAYS);
1:f1f9348:     } catch (InterruptedException e) {
1:f1f9348:       throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ", e);
1:f1f9348:     }
1:a734add:     checkForFailure();
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public void close() {
1:a734add:     if (!executorService.isShutdown()) {
1:f1f9348:       executorService.shutdownNow();
1:f1f9348:     }
1:f1f9348:     rowPages.clear();
1:f1f9348:     rowPages = null;
1:f1f9348:   }
1:f1f9348: 
1:a734add:   private void checkForFailure() throws CarbonSortKeyAndGroupByException {
1:a734add:     for (int i = 0; i < mergerTask.size(); i++) {
1:a734add:       try {
1:a734add:         mergerTask.get(i).get();
1:a734add:       } catch (InterruptedException | ExecutionException e) {
1:a734add:         LOGGER.error(e, e.getMessage());
1:a734add:         throw new CarbonSortKeyAndGroupByException(e.getMessage(), e);
1:a734add:       }
1:a734add:     }
1:a734add:   }
1:a734add: 
1:f1f9348:   public List<UnsafeCarbonRowPage> getRowPages() {
1:f1f9348:     return rowPages;
1:f1f9348:   }
1:f1f9348: 
1:f1f9348:   public List<UnsafeInMemoryIntermediateDataMerger> getMergedPages() {
1:f1f9348:     return mergedPages;
1:f1f9348:   }
1:f1f9348: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8e54f1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     this.procFiles = new ArrayList<>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
/////////////////////////////////////////////////////////////////////////
1:     File[] fileList;
1:     if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:       synchronized (lockObject) {
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:       }
author:sraghunandan
-------------------------------------------------------------------------------
commit:f911403
/////////////////////////////////////////////////////////////////////////
author:ndwangsen
-------------------------------------------------------------------------------
commit:c3bc1ba
/////////////////////////////////////////////////////////////////////////
1:     // get memory chunk size
1:     long inMemoryChunkSizeInMB = CarbonProperties.getInstance().getSortMemoryChunkSizeInMB();
1:     if (spillSizeInSortMemory < inMemoryChunkSizeInMB * 1024 * 1024) {
1:       LOGGER.warn("the configure spill size is " + spillSizeInSortMemory +
1:           " less than the page size " + inMemoryChunkSizeInMB * 1024 * 1024 +
1:           ",so no merge and spill in-memory pages to disk");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:           sizeAdded += page.getDataBlock().size();
commit:8cb37dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Integer spillPercentage = CarbonProperties.getInstance().getSortMemorySpillPercentage();
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.collections.list.SynchronizedList;
1: 
/////////////////////////////////////////////////////////////////////////
0:     this.procFiles =
0:         SynchronizedList.decorate(new ArrayList<File>(CarbonCommonConstants.CONSTANT_SIZE_TEN));
/////////////////////////////////////////////////////////////////////////
0:     File[] fileList = null;
1:     synchronized (lockObject) {
0:       if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:         if (LOGGER.isDebugEnabled()) {
0:           LOGGER
0:               .debug("Submitting request for intermediate merging no of files: " + fileList.length);
1:         }
1:     }
0:     if (null != fileList) {
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
0:     executorService.execute(merger);
/////////////////////////////////////////////////////////////////////////
0:     executorService.execute(merger);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:b439b00
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.constants.CarbonLoadOptionConstants;
1: import org.apache.carbondata.core.memory.UnsafeSortMemoryManager;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * size to be spilled in sort memory
1:    */
1:   private long spillSizeInSortMemory;
/////////////////////////////////////////////////////////////////////////
1: 
0:     Integer spillPercentage;
1:     try {
0:       String spillPercentageStr = CarbonProperties.getInstance().getProperty(
0:           CarbonLoadOptionConstants.CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE,
0:           CarbonLoadOptionConstants.CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE_DEFAULT);
0:       spillPercentage = Integer.valueOf(spillPercentageStr);
0:     } catch (NumberFormatException e) {
0:       spillPercentage = Integer.valueOf(
0:           CarbonLoadOptionConstants.CARBON_LOAD_SORT_MEMORY_SPILL_PERCENTAGE_DEFAULT);
1:     }
1: 
1:     this.spillSizeInSortMemory =
1:         UnsafeSortMemoryManager.INSTANCE.getUsableMemory() * spillPercentage / 100;
/////////////////////////////////////////////////////////////////////////
1:   public void tryTriggerInmemoryMerging(boolean spillDisk)
1:       throws CarbonSortKeyAndGroupByException {
1:     List<UnsafeCarbonRowPage> pages2Merge = new ArrayList<>();
1:     int totalRows2Merge = 0;
1:     synchronized (lockObject) {
1:       long sizeAdded = 0;
1:       for (Iterator<UnsafeCarbonRowPage> iter = rowPages.iterator(); iter.hasNext(); ) {
1:         UnsafeCarbonRowPage page = iter.next();
1:         if (!spillDisk || sizeAdded + page.getDataBlock().size() < this.spillSizeInSortMemory) {
1:           pages2Merge.add(page);
1:           totalRows2Merge += page.getBuffer().getActualSize();
1:           iter.remove();
1:         } else {
1:           break;
1:     }
1:     if (pages2Merge.size() > 1) {
1:             + pages2Merge.size());
1:       startIntermediateMerging(pages2Merge.toArray(new UnsafeCarbonRowPage[pages2Merge.size()]),
1:           totalRows2Merge, spillDisk);
1:     }
1:   }
1: 
1:   public void startInmemoryMergingIfPossible() throws CarbonSortKeyAndGroupByException {
1:     if (rowPages.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:       tryTriggerInmemoryMerging(false);
1:    * Below method will be used to start the intermediate inmemory merging
1:    * @param rowPages pages to be merged
1:    * @param totalRows total rows in all pages
1:    * @param spillDisk whether to spill the merged result to disk
1:   private void startIntermediateMerging(UnsafeCarbonRowPage[] rowPages, int totalRows,
1:       boolean spillDisk) throws CarbonSortKeyAndGroupByException {
1:         new UnsafeInMemoryIntermediateDataMerger(rowPages, totalRows, parameters, spillDisk);
1:     mergerTask.add(executorService.submit(merger));
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1:     File file = new File(targetLocation + File.separator + parameters.getTableName()
1:         + '_' + parameters.getRangeId() + '_' + System.nanoTime()
1:         + CarbonCommonConstants.MERGERD_EXTENSION);
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     //pick a temp location randomly
1:     String[] tempFileLocations = parameters.getTempFileLocation();
1:     String targetLocation = tempFileLocations[new Random().nextInt(tempFileLocations.length)];
1: 
0:         targetLocation + File.separator + parameters.getTableName() + System
author:kumarvishal
-------------------------------------------------------------------------------
commit:a734add
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
1: import org.apache.carbondata.core.util.CarbonThreadFactory;
/////////////////////////////////////////////////////////////////////////
1:   private List<Future<Void>> mergerTask;
1: 
1:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores(),
1:         new CarbonThreadFactory("UnsafeIntermediatePool:" + parameters.getTableName()));
1:     this.mergerTask = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     mergerTask.add(executorService.submit(merger));
/////////////////////////////////////////////////////////////////////////
1:     checkForFailure();
1:     if (!executorService.isShutdown()) {
1:   private void checkForFailure() throws CarbonSortKeyAndGroupByException {
1:     for (int i = 0; i < mergerTask.size(); i++) {
1:       try {
1:         mergerTask.get(i).get();
1:       } catch (InterruptedException | ExecutionException e) {
1:         LOGGER.error(e, e.getMessage());
1:         throw new CarbonSortKeyAndGroupByException(e.getMessage(), e);
1:       }
1:     }
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.sort.unsafe.merger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.sort.unsafe.UnsafeCarbonRowPage;
1: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
1: import org.apache.carbondata.processing.sort.sortdata.SortParameters;
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
0:       if (LOGGER.isDebugEnabled()) {
0:         LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:       }
/////////////////////////////////////////////////////////////////////////
0:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Sumitting request for intermediate merging of in-memory pages : "
0:             + localRowPages.length);
1:       }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:f1f9348
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.newflow.sort.unsafe.merger;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.processing.newflow.sort.unsafe.UnsafeCarbonRowPage;
0: import org.apache.carbondata.processing.sortandgroupby.exception.CarbonSortKeyAndGroupByException;
0: import org.apache.carbondata.processing.sortandgroupby.sortdata.SortParameters;
1: 
1: /**
1:  * It does mergesort intermediate files to big file.
1:  */
1: public class UnsafeIntermediateMerger {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(UnsafeIntermediateMerger.class.getName());
1: 
1:   /**
1:    * executorService
1:    */
1:   private ExecutorService executorService;
1:   /**
1:    * rowPages
1:    */
1:   private List<UnsafeCarbonRowPage> rowPages;
1: 
1:   private List<UnsafeInMemoryIntermediateDataMerger> mergedPages;
1: 
1:   private SortParameters parameters;
1: 
1:   private final Object lockObject = new Object();
1: 
0:   private boolean offHeap;
1: 
1:   private List<File> procFiles;
1: 
1:   public UnsafeIntermediateMerger(SortParameters parameters) {
1:     this.parameters = parameters;
1:     // processed file list
1:     this.rowPages = new ArrayList<UnsafeCarbonRowPage>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:     this.mergedPages = new ArrayList<>();
0:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores());
0:     this.offHeap = Boolean.parseBoolean(CarbonProperties.getInstance()
0:         .getProperty(CarbonCommonConstants.ENABLE_OFFHEAP_SORT,
0:             CarbonCommonConstants.ENABLE_OFFHEAP_SORT_DEFAULT));
0:     this.procFiles = new ArrayList<File>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:   }
1: 
1:   public void addDataChunkToMerge(UnsafeCarbonRowPage rowPage) {
1:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:     // intermediate merging of sort temp files will be triggered
1:     synchronized (lockObject) {
1:       rowPages.add(rowPage);
1:     }
1:   }
1: 
1:   public void addFileToMerge(File sortTempFile) {
1:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:     // intermediate merging of sort temp files will be triggered
1:     synchronized (lockObject) {
1:       procFiles.add(sortTempFile);
1:     }
1:   }
1: 
1:   public void startFileMergingIfPossible() {
0:     File[] fileList;
0:     if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:       synchronized (lockObject) {
1:         fileList = procFiles.toArray(new File[procFiles.size()]);
1:         this.procFiles = new ArrayList<File>();
1:       }
0:       LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:       startIntermediateMerging(fileList);
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to start the intermediate file merging
1:    *
1:    * @param intermediateFiles
1:    */
1:   private void startIntermediateMerging(File[] intermediateFiles) {
0:     File file = new File(
0:         parameters.getTempFileLocation() + File.separator + parameters.getTableName() + System
0:             .nanoTime() + CarbonCommonConstants.MERGERD_EXTENSION);
1:     UnsafeIntermediateFileMerger merger =
1:         new UnsafeIntermediateFileMerger(parameters, intermediateFiles, file);
0:     executorService.submit(merger);
1:   }
1: 
0:   public void startInmemoryMergingIfPossible() throws CarbonSortKeyAndGroupByException {
0:     UnsafeCarbonRowPage[] localRowPages;
0:     if (rowPages.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
0:       int totalRows = 0;
1:       synchronized (lockObject) {
0:         totalRows = getTotalNumberOfRows(rowPages);
0:         if (totalRows <= 0) {
0:           return;
1:         }
0:         localRowPages = rowPages.toArray(new UnsafeCarbonRowPage[rowPages.size()]);
0:         this.rowPages = new ArrayList<>();
1:       }
0:       LOGGER.debug("Sumitting request for intermediate merging of in-memory pages : "
0:           + localRowPages.length);
0:       startIntermediateMerging(localRowPages, totalRows);
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to start the intermediate file merging
1:    *
0:    * @param rowPages
1:    */
0:   private void startIntermediateMerging(UnsafeCarbonRowPage[] rowPages, int totalRows)
0:       throws CarbonSortKeyAndGroupByException {
1:     UnsafeInMemoryIntermediateDataMerger merger =
0:         new UnsafeInMemoryIntermediateDataMerger(rowPages, totalRows);
1:     mergedPages.add(merger);
0:     executorService.submit(merger);
1:   }
1: 
0:   private int getTotalNumberOfRows(List<UnsafeCarbonRowPage> unsafeCarbonRowPages) {
0:     int totalSize = 0;
0:     for (UnsafeCarbonRowPage unsafeCarbonRowPage : unsafeCarbonRowPages) {
0:       totalSize += unsafeCarbonRowPage.getBuffer().getActualSize();
1:     }
0:     return totalSize;
1:   }
1: 
1:   public void finish() throws CarbonSortKeyAndGroupByException {
0:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(2, TimeUnit.DAYS);
1:     } catch (InterruptedException e) {
1:       throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ", e);
1:     }
1:   }
1: 
1:   public void close() {
0:     if (executorService.isShutdown()) {
1:       executorService.shutdownNow();
1:     }
1:     rowPages.clear();
1:     rowPages = null;
1:   }
1: 
1:   public List<UnsafeCarbonRowPage> getRowPages() {
1:     return rowPages;
1:   }
1: 
1:   public List<UnsafeInMemoryIntermediateDataMerger> getMergedPages() {
1:     return mergedPages;
1:   }
1: }
============================================================================