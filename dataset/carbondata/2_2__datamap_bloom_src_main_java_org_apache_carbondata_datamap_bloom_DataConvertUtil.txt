1:cd7c210: /*
1:cd7c210:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd7c210:  * contributor license agreements.  See the NOTICE file distributed with
1:cd7c210:  * this work for additional information regarding copyright ownership.
1:cd7c210:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd7c210:  * (the "License"); you may not use this file except in compliance with
1:cd7c210:  * the License.  You may obtain a copy of the License at
1:cd7c210:  *
1:cd7c210:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd7c210:  *
1:cd7c210:  * Unless required by applicable law or agreed to in writing, software
1:cd7c210:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd7c210:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd7c210:  * See the License for the specific language governing permissions and
1:cd7c210:  * limitations under the License.
1:cd7c210:  */
1:cd7c210: 
1:cd7c210: package org.apache.carbondata.datamap.bloom;
1:cd7c210: 
1:a7c4b48: import java.math.BigDecimal;
1:a7c4b48: 
1:cd7c210: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:a7c4b48: import org.apache.carbondata.core.metadata.datatype.DataType;
1:a7c4b48: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:cd7c210: 
1:cd7c210: public class DataConvertUtil {
1:cd7c210:   /**
1:cd7c210:    * get raw bytes from LV structure, L is short encoded
1:cd7c210:    */
1:cd7c210:   public static byte[] getRawBytes(byte[] lvData) {
1:cd7c210:     byte[] indexValue = new byte[lvData.length - CarbonCommonConstants.SHORT_SIZE_IN_BYTE];
1:cd7c210:     System.arraycopy(lvData, CarbonCommonConstants.SHORT_SIZE_IN_BYTE,
1:cd7c210:         indexValue, 0, lvData.length - CarbonCommonConstants.SHORT_SIZE_IN_BYTE);
1:cd7c210:     return indexValue;
1:cd7c210:   }
1:cd7c210: 
1:cd7c210:   /**
1:cd7c210:    * get raw bytes from LV structure, L is int encoded
1:cd7c210:    */
1:cd7c210:   public static byte[] getRawBytesForVarchar(byte[] lvData) {
1:cd7c210:     byte[] indexValue = new byte[lvData.length - CarbonCommonConstants.INT_SIZE_IN_BYTE];
1:cd7c210:     System.arraycopy(lvData, CarbonCommonConstants.INT_SIZE_IN_BYTE,
1:cd7c210:         indexValue, 0, lvData.length - CarbonCommonConstants.INT_SIZE_IN_BYTE);
1:cd7c210:     return indexValue;
1:cd7c210:   }
1:a7c4b48: 
1:a7c4b48:   /**
1:a7c4b48:    * return default null value based on datatype. This method refers to ColumnPage.putNull
1:7551cc6:    *
1:7551cc6:    * Note: since we can not mark NULL with corresponding data type in bloom datamap
1:7551cc6:    * we set/get a `NullValue` for NULL, such that pruning using bloom filter
1:7551cc6:    * will have false positive case if filter value is the `NullValue`.
1:7551cc6:    * This should not affect the correctness of result
1:a7c4b48:    */
1:7551cc6:   public static Object getNullValueForMeasure(DataType dataType, int scale) {
1:a7c4b48:     if (dataType == DataTypes.BOOLEAN) {
1:a7c4b48:       return false;
1:7551cc6:     } else if (dataType == DataTypes.BYTE) {
1:7551cc6:       return (byte) 0;
1:7551cc6:     } else if (dataType == DataTypes.SHORT) {
1:7551cc6:       return (short) 0;
1:7551cc6:     } else if (dataType == DataTypes.INT) {
1:a7c4b48:       return 0;
1:7551cc6:     } else if (dataType == DataTypes.LONG) {
1:7551cc6:       return 0L;
1:7551cc6:     } else if (dataType == DataTypes.DOUBLE) {
1:7551cc6:       return 0.0;
1:7551cc6:     } else if (DataTypes.isDecimal(dataType)) {
1:7551cc6:       // keep consistence with `DecimalConverter.getDecimal` in loading process
1:7551cc6:       return BigDecimal.valueOf(0, scale);
1:7551cc6:     } else {
1:7551cc6:       throw new IllegalArgumentException("unsupported data type: " + dataType);
1:a7c4b48:     }
1:a7c4b48:   }
1:cd7c210: }
============================================================================
author:Manhua
-------------------------------------------------------------------------------
commit:7551cc6
/////////////////////////////////////////////////////////////////////////
1:    *
1:    * Note: since we can not mark NULL with corresponding data type in bloom datamap
1:    * we set/get a `NullValue` for NULL, such that pruning using bloom filter
1:    * will have false positive case if filter value is the `NullValue`.
1:    * This should not affect the correctness of result
1:   public static Object getNullValueForMeasure(DataType dataType, int scale) {
1:     } else if (dataType == DataTypes.BYTE) {
1:       return (byte) 0;
1:     } else if (dataType == DataTypes.SHORT) {
1:       return (short) 0;
1:     } else if (dataType == DataTypes.INT) {
1:     } else if (dataType == DataTypes.LONG) {
1:       return 0L;
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       return 0.0;
1:     } else if (DataTypes.isDecimal(dataType)) {
1:       // keep consistence with `DecimalConverter.getDecimal` in loading process
1:       return BigDecimal.valueOf(0, scale);
1:     } else {
1:       throw new IllegalArgumentException("unsupported data type: " + dataType);
author:xuchuanyin
-------------------------------------------------------------------------------
commit:a7c4b48
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigDecimal;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * return default null value based on datatype. This method refers to ColumnPage.putNull
1:    */
0:   public static Object getNullValueForMeasure(DataType dataType) {
1:     if (dataType == DataTypes.BOOLEAN) {
1:       return false;
0:     } else if (DataTypes.isDecimal(dataType)) {
0:       return BigDecimal.ZERO;
0:     } else {
1:       return 0;
1:     }
1:   }
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.datamap.bloom;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: 
1: public class DataConvertUtil {
1:   /**
1:    * get raw bytes from LV structure, L is short encoded
1:    */
1:   public static byte[] getRawBytes(byte[] lvData) {
1:     byte[] indexValue = new byte[lvData.length - CarbonCommonConstants.SHORT_SIZE_IN_BYTE];
1:     System.arraycopy(lvData, CarbonCommonConstants.SHORT_SIZE_IN_BYTE,
1:         indexValue, 0, lvData.length - CarbonCommonConstants.SHORT_SIZE_IN_BYTE);
1:     return indexValue;
1:   }
1: 
1:   /**
1:    * get raw bytes from LV structure, L is int encoded
1:    */
1:   public static byte[] getRawBytesForVarchar(byte[] lvData) {
1:     byte[] indexValue = new byte[lvData.length - CarbonCommonConstants.INT_SIZE_IN_BYTE];
1:     System.arraycopy(lvData, CarbonCommonConstants.INT_SIZE_IN_BYTE,
1:         indexValue, 0, lvData.length - CarbonCommonConstants.INT_SIZE_IN_BYTE);
1:     return indexValue;
1:   }
1: }
============================================================================