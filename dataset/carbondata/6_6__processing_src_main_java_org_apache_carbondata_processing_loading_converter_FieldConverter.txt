1:d96f09a: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d96f09a:  *
1:d96f09a:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d96f09a:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d96f09a:  */
1:d96f09a: 
1:349c59c: package org.apache.carbondata.processing.loading.converter;
1:d96f09a: 
1:dc83b2a: import org.apache.carbondata.core.datastore.row.CarbonRow;
1:349c59c: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
1:d96f09a: 
1:d96f09a: /**
1:d96f09a:  * This interface converts/transforms the column field.
1:d96f09a:  */
1:d96f09a: public interface FieldConverter {
1:d96f09a: 
1:d96f09a:   /**
1:d96f09a:    * It converts the column field and updates the data in same location/index in row.
1:d96f09a:    * @param row
1:496cde4:    * @return the status whether it could be loaded or not, usually when record is added
1:496cde4:    * to bad records then it returns false.
1:d96f09a:    * @throws CarbonDataLoadingException
1:d96f09a:    */
1:496cde4:   void convert(CarbonRow row, BadRecordLogHolder logHolder) throws CarbonDataLoadingException;
1:f79b9ea: 
1:f79b9ea:   /**
1:cd7c210:    * It convert the literal value to carbon internal value
1:cd7c210:    */
1:cd7c210:   Object convert(Object value, BadRecordLogHolder logHolder) throws RuntimeException;
1:cd7c210: 
1:cd7c210:   /**
1:f79b9ea:    * This method clears all the dictionary caches being acquired.
1:f79b9ea:    */
1:f79b9ea:   void clear();
1:d96f09a: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:    * It convert the literal value to carbon internal value
1:    */
1:   Object convert(Object value, BadRecordLogHolder logHolder) throws RuntimeException;
1: 
1:   /**
author:sounakr
-------------------------------------------------------------------------------
commit:f79b9ea
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * This method clears all the dictionary caches being acquired.
1:    */
1:   void clear();
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.loading.converter;
1: import org.apache.carbondata.processing.loading.exception.CarbonDataLoadingException;
author:jackylk
-------------------------------------------------------------------------------
commit:dc83b2a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.row.CarbonRow;
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:496cde4
/////////////////////////////////////////////////////////////////////////
1:    * @return the status whether it could be loaded or not, usually when record is added
1:    * to bad records then it returns false.
1:   void convert(CarbonRow row, BadRecordLogHolder logHolder) throws CarbonDataLoadingException;
commit:d96f09a
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
0: package org.apache.carbondata.processing.newflow.converter;
1: 
0: import org.apache.carbondata.processing.newflow.exception.CarbonDataLoadingException;
0: import org.apache.carbondata.processing.newflow.row.CarbonRow;
1: 
1: /**
1:  * This interface converts/transforms the column field.
1:  */
1: public interface FieldConverter {
1: 
1:   /**
1:    * It converts the column field and updates the data in same location/index in row.
1:    * @param row
1:    * @throws CarbonDataLoadingException
1:    */
0:   void convert(CarbonRow row) throws CarbonDataLoadingException;
1: }
============================================================================