1:e5e74fc: /*
1:e5e74fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e5e74fc:  * contributor license agreements.  See the NOTICE file distributed with
1:e5e74fc:  * this work for additional information regarding copyright ownership.
1:e5e74fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e5e74fc:  * (the "License"); you may not use this file except in compliance with
1:e5e74fc:  * the License.  You may obtain a copy of the License at
1:e5e74fc:  *
1:e5e74fc:  *    http://www.apache.org/licenses/LICENSE-2.0
1:e5e74fc:  *
1:e5e74fc:  * Unless required by applicable law or agreed to in writing, software
1:e5e74fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5e74fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5e74fc:  * See the License for the specific language governing permissions and
1:e5e74fc:  * limitations under the License.
1:e5e74fc:  */
1:e5e74fc: package org.apache.carbondata.core.scan.result.vector.impl;
3:e5e74fc: 
1:e5e74fc: import java.math.BigDecimal;
1:e5e74fc: import java.util.Arrays;
1:e5e74fc: import java.util.BitSet;
1:e5e74fc: 
1:e5e74fc: import org.apache.carbondata.core.metadata.datatype.DataType;
1:e5e74fc: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:e5e74fc: import org.apache.carbondata.core.metadata.datatype.DecimalType;
1:e5e74fc: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1:3a4b881: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
1:e5e74fc: 
1:e5e74fc: public class CarbonColumnVectorImpl implements CarbonColumnVector {
1:e5e74fc: 
1:e5e74fc:   private Object[] data;
1:e5e74fc: 
1:e5e74fc:   private int[] ints;
1:e5e74fc: 
1:e5e74fc:   private long[] longs;
1:e5e74fc: 
1:e5e74fc:   private BigDecimal[] decimals;
1:e5e74fc: 
1:e5e74fc:   private byte[] byteArr;
1:e5e74fc: 
1:e5e74fc:   private byte[][] bytes;
1:e5e74fc: 
1:e5e74fc:   private float[] floats;
1:e5e74fc: 
1:e5e74fc:   private double[] doubles;
1:e5e74fc: 
1:e5e74fc:   private short[] shorts;
1:e5e74fc: 
1:e5e74fc:   private BitSet nullBytes;
1:e5e74fc: 
1:e5e74fc:   private DataType dataType;
1:e5e74fc: 
1:1f54c47:   private DataType blockDataType;
1:1f54c47: 
1:e5e74fc:   /**
1:e5e74fc:    * True if there is at least one NULL byte set. This is an optimization for the writer, to skip
1:e5e74fc:    * having to clear NULL bits.
1:e5e74fc:    */
1:e5e74fc:   protected boolean anyNullsSet;
1:e5e74fc: 
1:3a4b881:   private CarbonDictionary carbonDictionary;
1:3a4b881: 
1:3a4b881:   private CarbonColumnVector dictionaryVector;
1:e5e74fc: 
1:e5e74fc:   public CarbonColumnVectorImpl(int batchSize, DataType dataType) {
1:e5e74fc:     nullBytes = new BitSet(batchSize);
1:e5e74fc:     this.dataType = dataType;
1:e5e74fc:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:e5e74fc:       byteArr = new byte[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.SHORT) {
1:e5e74fc:       shorts = new short[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.INT) {
1:e5e74fc:       ints = new int[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:e5e74fc:       longs = new long[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.FLOAT) {
1:e5e74fc:       floats = new float[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.DOUBLE) {
1:e5e74fc:       doubles = new double[batchSize];
1:e5e74fc:     } else if (dataType instanceof DecimalType) {
1:e5e74fc:       decimals = new BigDecimal[batchSize];
1:e5e74fc:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
1:3a4b881:       dictionaryVector = new CarbonColumnVectorImpl(batchSize, DataTypes.INT);
1:e5e74fc:       bytes = new byte[batchSize][];
1:e5e74fc:     } else {
1:e5e74fc:       data = new Object[batchSize];
1:e5e74fc:     }
1:e5e74fc: 
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putBoolean(int rowId, boolean value) {
1:e5e74fc:     byteArr[rowId] =  (byte)((value) ? 1 : 0);
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putFloat(int rowId, float value) {
1:e5e74fc:     floats[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putShort(int rowId, short value) {
1:e5e74fc:     shorts[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putShorts(int rowId, int count, short value) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       shorts[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putInt(int rowId, int value) {
1:e5e74fc:     ints[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putInts(int rowId, int count, int value) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       ints[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putLong(int rowId, long value) {
1:e5e74fc:     longs[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putLongs(int rowId, int count, long value) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       longs[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putDecimal(int rowId, BigDecimal  value, int precision) {
1:e5e74fc:     decimals[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putDecimals(int rowId, int count, BigDecimal value, int precision) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       decimals[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putDouble(int rowId, double value) {
1:e5e74fc:     doubles[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putDoubles(int rowId, int count, double value) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       doubles[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putBytes(int rowId, byte[] value) {
1:e5e74fc:     bytes[rowId] = value;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putBytes(int rowId, int count, byte[] value) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       bytes[i + rowId] = value;
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:e5e74fc:     bytes[rowId] = new byte[length];
1:e5e74fc:     System.arraycopy(value, offset, bytes[rowId], 0, length);
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putNull(int rowId) {
1:e5e74fc:     nullBytes.set(rowId);
1:e5e74fc:     anyNullsSet = true;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putNulls(int rowId, int count) {
1:e5e74fc:     for (int i = 0; i < count; ++i) {
1:e5e74fc:       nullBytes.set(rowId + i);
1:e5e74fc:     }
1:e5e74fc:     anyNullsSet = true;
1:e5e74fc:   }
1:e5e74fc: 
1:3a4b881:   @Override public void putNotNull(int rowId) {
1:3a4b881: 
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public void putNotNull(int rowId, int count) {
1:3a4b881: 
1:3a4b881:   }
1:e5e74fc: 
1:e5e74fc:   public boolean isNullAt(int rowId) {
1:e5e74fc:     return nullBytes.get(rowId);
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc: 
1:e5e74fc:   @Override public boolean isNull(int rowId) {
1:e5e74fc:     return nullBytes.get(rowId);
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void putObject(int rowId, Object obj) {
1:e5e74fc:     data[rowId] = obj;
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public Object getData(int rowId) {
1:e5e74fc:     if (nullBytes.get(rowId)) {
1:e5e74fc:       return null;
1:e5e74fc:     }
1:e5e74fc:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:e5e74fc:       return  byteArr[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.SHORT) {
1:e5e74fc:       return shorts[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.INT) {
1:e5e74fc:       return ints[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:e5e74fc:       return longs[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.FLOAT) {
1:e5e74fc:       return floats[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.DOUBLE) {
1:e5e74fc:       return doubles[rowId];
1:e5e74fc:     } else if (dataType instanceof DecimalType) {
1:e5e74fc:       return decimals[rowId];
1:e5e74fc:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
1:3a4b881:       if (null != carbonDictionary) {
1:3a4b881:         int dictKey = (Integer) dictionaryVector.getData(rowId);
1:3a4b881:         return carbonDictionary.getDictionaryValue(dictKey);
1:3a4b881:       }
1:3a4b881:       return bytes[rowId];
1:e5e74fc:     } else {
1:e5e74fc:       return data[rowId];
1:e5e74fc:     }
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public void reset() {
1:e5e74fc:     nullBytes.clear();
1:e5e74fc:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:e5e74fc:       Arrays.fill(byteArr, (byte) 0);
1:e5e74fc:     } else if (dataType == DataTypes.SHORT) {
1:e5e74fc:       Arrays.fill(shorts, (short) 0);
1:e5e74fc:     } else if (dataType == DataTypes.INT) {
1:e5e74fc:       Arrays.fill(ints, 0);
1:e5e74fc:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:e5e74fc:       Arrays.fill(longs, 0);
1:e5e74fc:     } else if (dataType == DataTypes.FLOAT) {
1:e5e74fc:       Arrays.fill(floats, 0);
1:e5e74fc:     } else if (dataType == DataTypes.DOUBLE) {
1:e5e74fc:       Arrays.fill(doubles, 0);
1:e5e74fc:     } else if (dataType instanceof DecimalType) {
1:e5e74fc:       Arrays.fill(decimals, null);
1:e5e74fc:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
1:e5e74fc:       Arrays.fill(bytes, null);
1:3a4b881:       this.dictionaryVector.reset();
1:e5e74fc:     } else {
1:e5e74fc:       Arrays.fill(data, null);
1:e5e74fc:     }
1:e5e74fc: 
1:e5e74fc:   }
1:e5e74fc: 
1:e5e74fc:   @Override public DataType getType() {
1:e5e74fc:     return dataType;
1:e5e74fc:   }
1:e5e74fc: 
1:1f54c47:   @Override
1:1f54c47:   public DataType getBlockDataType() {
1:1f54c47:     return blockDataType;
1:1f54c47:   }
1:1f54c47: 
1:1f54c47:   @Override
1:1f54c47:   public void setBlockDataType(DataType blockDataType) {
1:1f54c47:     this.blockDataType = blockDataType;
1:1f54c47:   }
1:1f54c47: 
1:e5e74fc:   @Override public void setFilteredRowsExist(boolean filteredRowsExist) {
1:e5e74fc: 
1:e5e74fc:   }
1:e5e74fc: 
1:3a4b881:   @Override public void setDictionary(CarbonDictionary dictionary) {
1:3a4b881:     this.carbonDictionary = dictionary;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public boolean hasDictionary() {
1:3a4b881:     return null != this.carbonDictionary;
1:3a4b881:   }
1:3a4b881: 
1:3a4b881:   @Override public CarbonColumnVector getDictionaryVector() {
1:3a4b881:     return dictionaryVector;
1:3a4b881:   }
1:3a4b881: 
1:e5e74fc:   /**
1:e5e74fc:    * Returns true if any of the nulls indicator are set for this column. This can be used
1:e5e74fc:    * as an optimization to prevent setting nulls.
1:e5e74fc:    */
1:e5e74fc:   public final boolean anyNullsSet() { return anyNullsSet; }
1:e5e74fc: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:3a4b881
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.scan.result.vector.CarbonDictionary;
/////////////////////////////////////////////////////////////////////////
1:   private CarbonDictionary carbonDictionary;
1: 
1:   private CarbonColumnVector dictionaryVector;
/////////////////////////////////////////////////////////////////////////
1:       dictionaryVector = new CarbonColumnVectorImpl(batchSize, DataTypes.INT);
/////////////////////////////////////////////////////////////////////////
1:   @Override public void putNotNull(int rowId) {
1: 
1:   }
1: 
1:   @Override public void putNotNull(int rowId, int count) {
1: 
1:   }
/////////////////////////////////////////////////////////////////////////
1:       if (null != carbonDictionary) {
1:         int dictKey = (Integer) dictionaryVector.getData(rowId);
1:         return carbonDictionary.getDictionaryValue(dictKey);
1:       }
1:       return bytes[rowId];
/////////////////////////////////////////////////////////////////////////
1:       this.dictionaryVector.reset();
/////////////////////////////////////////////////////////////////////////
1:   @Override public void setDictionary(CarbonDictionary dictionary) {
1:     this.carbonDictionary = dictionary;
1:   }
1: 
1:   @Override public boolean hasDictionary() {
1:     return null != this.carbonDictionary;
1:   }
1: 
1:   @Override public CarbonColumnVector getDictionaryVector() {
1:     return dictionaryVector;
1:   }
1: 
author:manishgupta88
-------------------------------------------------------------------------------
commit:1f54c47
/////////////////////////////////////////////////////////////////////////
1:   private DataType blockDataType;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public DataType getBlockDataType() {
1:     return blockDataType;
1:   }
1: 
1:   @Override
1:   public void setBlockDataType(DataType blockDataType) {
1:     this.blockDataType = blockDataType;
1:   }
1: 
author:Bhavya
-------------------------------------------------------------------------------
commit:e5e74fc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.scan.result.vector.impl;
1: 
1: import java.math.BigDecimal;
1: import java.util.Arrays;
1: import java.util.BitSet;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1: import org.apache.carbondata.core.metadata.datatype.DecimalType;
1: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
1: 
1: 
1: 
1: public class CarbonColumnVectorImpl implements CarbonColumnVector {
1: 
1:   private Object[] data;
1: 
1:   private int[] ints;
1: 
1:   private long[] longs;
1: 
1:   private BigDecimal[] decimals;
1: 
1:   private byte[] byteArr;
1: 
1:   private byte[][] bytes;
1: 
1:   private float[] floats;
1: 
1:   private double[] doubles;
1: 
1:   private short[] shorts;
1: 
1:   private BitSet nullBytes;
1: 
1:   private DataType dataType;
1: 
1:   /**
1:    * True if there is at least one NULL byte set. This is an optimization for the writer, to skip
1:    * having to clear NULL bits.
1:    */
1:   protected boolean anyNullsSet;
1: 
1: 
1:   public CarbonColumnVectorImpl(int batchSize, DataType dataType) {
1:     nullBytes = new BitSet(batchSize);
1:     this.dataType = dataType;
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:       byteArr = new byte[batchSize];
1:     } else if (dataType == DataTypes.SHORT) {
1:       shorts = new short[batchSize];
1:     } else if (dataType == DataTypes.INT) {
1:       ints = new int[batchSize];
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:       longs = new long[batchSize];
1:     } else if (dataType == DataTypes.FLOAT) {
1:       floats = new float[batchSize];
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       doubles = new double[batchSize];
1:     } else if (dataType instanceof DecimalType) {
1:       decimals = new BigDecimal[batchSize];
1:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
1:       bytes = new byte[batchSize][];
1:     } else {
1:       data = new Object[batchSize];
1:     }
1: 
1:   }
1: 
1:   @Override public void putBoolean(int rowId, boolean value) {
1:     byteArr[rowId] =  (byte)((value) ? 1 : 0);
1:   }
1: 
1:   @Override public void putFloat(int rowId, float value) {
1:     floats[rowId] = value;
1:   }
1: 
1:   @Override public void putShort(int rowId, short value) {
1:     shorts[rowId] = value;
1:   }
1: 
1:   @Override public void putShorts(int rowId, int count, short value) {
1:     for (int i = 0; i < count; ++i) {
1:       shorts[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putInt(int rowId, int value) {
1:     ints[rowId] = value;
1:   }
1: 
1:   @Override public void putInts(int rowId, int count, int value) {
1:     for (int i = 0; i < count; ++i) {
1:       ints[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putLong(int rowId, long value) {
1:     longs[rowId] = value;
1:   }
1: 
1:   @Override public void putLongs(int rowId, int count, long value) {
1:     for (int i = 0; i < count; ++i) {
1:       longs[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putDecimal(int rowId, BigDecimal  value, int precision) {
1:     decimals[rowId] = value;
1:   }
1: 
1:   @Override public void putDecimals(int rowId, int count, BigDecimal value, int precision) {
1:     for (int i = 0; i < count; ++i) {
1:       decimals[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putDouble(int rowId, double value) {
1:     doubles[rowId] = value;
1:   }
1: 
1:   @Override public void putDoubles(int rowId, int count, double value) {
1:     for (int i = 0; i < count; ++i) {
1:       doubles[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putBytes(int rowId, byte[] value) {
1:     bytes[rowId] = value;
1:   }
1: 
1:   @Override public void putBytes(int rowId, int count, byte[] value) {
1:     for (int i = 0; i < count; ++i) {
1:       bytes[i + rowId] = value;
1:     }
1:   }
1: 
1:   @Override public void putBytes(int rowId, int offset, int length, byte[] value) {
1:     bytes[rowId] = new byte[length];
1:     System.arraycopy(value, offset, bytes[rowId], 0, length);
1:   }
1: 
1:   @Override public void putNull(int rowId) {
1:     nullBytes.set(rowId);
1:     anyNullsSet = true;
1:   }
1: 
1:   @Override public void putNulls(int rowId, int count) {
1:     for (int i = 0; i < count; ++i) {
1:       nullBytes.set(rowId + i);
1:     }
1:     anyNullsSet = true;
1:   }
1: 
1: 
1:   public boolean isNullAt(int rowId) {
1:     return nullBytes.get(rowId);
1:   }
1: 
1: 
1:   @Override public boolean isNull(int rowId) {
1:     return nullBytes.get(rowId);
1:   }
1: 
1:   @Override public void putObject(int rowId, Object obj) {
1:     data[rowId] = obj;
1:   }
1: 
1:   @Override public Object getData(int rowId) {
1:     if (nullBytes.get(rowId)) {
1:       return null;
1:     }
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:       return  byteArr[rowId];
1:     } else if (dataType == DataTypes.SHORT) {
1:       return shorts[rowId];
1:     } else if (dataType == DataTypes.INT) {
1:       return ints[rowId];
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:       return longs[rowId];
1:     } else if (dataType == DataTypes.FLOAT) {
1:       return floats[rowId];
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       return doubles[rowId];
1:     } else if (dataType instanceof DecimalType) {
1:       return decimals[rowId];
1:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
0:       return  bytes[rowId];
1:     } else {
1:       return data[rowId];
1:     }
1:   }
1: 
1:   @Override public void reset() {
1:     nullBytes.clear();
1:     if (dataType == DataTypes.BOOLEAN || dataType == DataTypes.BYTE) {
1:       Arrays.fill(byteArr, (byte) 0);
1:     } else if (dataType == DataTypes.SHORT) {
1:       Arrays.fill(shorts, (short) 0);
1:     } else if (dataType == DataTypes.INT) {
1:       Arrays.fill(ints, 0);
1:     } else if (dataType == DataTypes.LONG || dataType == DataTypes.TIMESTAMP) {
1:       Arrays.fill(longs, 0);
1:     } else if (dataType == DataTypes.FLOAT) {
1:       Arrays.fill(floats, 0);
1:     } else if (dataType == DataTypes.DOUBLE) {
1:       Arrays.fill(doubles, 0);
1:     } else if (dataType instanceof DecimalType) {
1:       Arrays.fill(decimals, null);
1:     } else if (dataType == DataTypes.STRING || dataType == DataTypes.BYTE_ARRAY) {
1:       Arrays.fill(bytes, null);
1:     } else {
1:       Arrays.fill(data, null);
1:     }
1: 
1:   }
1: 
1:   @Override public DataType getType() {
1:     return dataType;
1:   }
1: 
1:   @Override public void setFilteredRowsExist(boolean filteredRowsExist) {
1: 
1:   }
1: 
1:   /**
1:    * Returns true if any of the nulls indicator are set for this column. This can be used
1:    * as an optimization to prevent setting nulls.
1:    */
1:   public final boolean anyNullsSet() { return anyNullsSet; }
1: }
author:lucao
-------------------------------------------------------------------------------
commit:d246dae
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
0: package org.apache.carbondata.core.scan.result.vector.impl;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.scan.result.vector.CarbonColumnVector;
commit:1d5b5fc
============================================================================