1:6f20437: /*
1:6f20437:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f20437:  * contributor license agreements.  See the NOTICE file distributed with
1:6f20437:  * this work for additional information regarding copyright ownership.
1:6f20437:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f20437:  * (the "License"); you may not use this file except in compliance with
1:6f20437:  * the License.  You may obtain a copy of the License at
1:6f20437:  *
1:6f20437:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6f20437:  *
1:6f20437:  * Unless required by applicable law or agreed to in writing, software
1:6f20437:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f20437:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f20437:  * See the License for the specific language governing permissions and
1:6f20437:  * limitations under the License.
1:6f20437:  */
3:6f20437: 
1:6f20437: package org.apache.carbondata.core.datastore.page;
1:6f20437: 
1:6f20437: import java.math.BigDecimal;
1:6f20437: 
1:8f08c4a: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
1:6f20437: import org.apache.carbondata.core.util.ByteUtil;
1:6f20437: 
1:6f20437: /**
1:6f20437:  * Represent a columnar data in one page for one column of decimal data type
1:6f20437:  */
1:6f20437: public class SafeDecimalColumnPage extends DecimalColumnPage {
1:6f20437: 
1:6f20437:   // Only one of following fields will be used
1:6f20437:   private byte[] byteData;
1:6f20437:   private short[] shortData;
1:6f20437:   private int[] intData;
1:6f20437:   private long[] longData;
1:6f20437:   private byte[] shortIntData;
1:6f20437:   private byte[][] byteArrayData;
1:6f20437: 
1:8f08c4a:   SafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:8f08c4a:     super(columnPageEncoderMeta, pageSize);
1:6f20437:     byteArrayData = new byte[pageSize][];
3:6f20437:   }
1:6f20437: 
2:6f20437:   @Override
1:6f20437:   public void setBytePage(byte[] byteData) {
1:6f20437:     this.byteData = byteData;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setShortPage(short[] shortData) {
1:6f20437:     this.shortData = shortData;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setShortIntPage(byte[] shortIntData) {
1:6f20437:     this.shortIntData = shortIntData;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setIntPage(int[] intData) {
1:6f20437:     this.intData = intData;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setLongPage(long[] longData) {
1:6f20437:     this.longData = longData;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void setByteArrayPage(byte[][] byteArray) {
1:6f20437:     byteArrayData = byteArray;
1:6f20437:   }
1:6f20437: 
1:6f20437:   /**
1:6f20437:    * Set byte value at rowId
1:6f20437:    */
1:6f20437:   @Override
1:6f20437:   public void putByte(int rowId, byte value) {
1:6f20437:     byteData[rowId] = value;
1:6f20437:   }
1:6f20437: 
1:6f20437:   /**
1:6f20437:    * Set short value at rowId
1:6f20437:    */
1:6f20437:   @Override
1:6f20437:   public void putShort(int rowId, short value) {
1:6f20437:     shortData[rowId] = value;
1:6f20437:   }
1:6f20437: 
1:6f20437:   /**
1:6f20437:    * Set integer value at rowId
1:6f20437:    */
1:6f20437:   @Override
1:6f20437:   public void putInt(int rowId, int value) {
1:6f20437:     intData[rowId] = value;
1:6f20437:   }
1:6f20437: 
1:6f20437:   /**
1:6f20437:    * Set long value at rowId
1:6f20437:    */
1:6f20437:   @Override
1:6f20437:   public void putLong(int rowId, long value) {
1:6f20437:     longData[rowId] = value;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   void putBytesAtRow(int rowId, byte[] bytes) {
1:6f20437:     byteArrayData[rowId] = bytes;
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putDecimal(int rowId, BigDecimal decimal) {
1:6f20437:     switch (decimalConverter.getDecimalConverterType()) {
1:6f20437:       case DECIMAL_INT:
1:6f20437:         if (null == intData) {
1:6f20437:           intData = new int[pageSize];
1:6f20437:         }
1:6f20437:         putInt(rowId, (int) decimalConverter.convert(decimal));
6:6f20437:         break;
1:6f20437:       case DECIMAL_LONG:
1:6f20437:         if (null == longData) {
1:6f20437:           longData = new long[pageSize];
1:6f20437:         }
1:6f20437:         putLong(rowId, (long) decimalConverter.convert(decimal));
1:6f20437:         break;
2:6f20437:       default:
1:6f20437:         putBytes(rowId, (byte[]) decimalConverter.convert(decimal));
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putShortInt(int rowId, int value) {
1:6f20437:     byte[] converted = ByteUtil.to3Bytes(value);
1:6f20437:     System.arraycopy(converted, 0, shortIntData, rowId * 3, 3);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:6f20437:     byteArrayData[rowId] = new byte[length];
1:6f20437:     System.arraycopy(bytes, offset, byteArrayData[rowId], 0, length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte getByte(int rowId) {
1:6f20437:     return byteData[rowId];
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public byte[] getBytes(int rowId) {
1:6f20437:     return byteArrayData[rowId];
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public short getShort(int rowId) {
1:6f20437:     return shortData[rowId];
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public int getShortInt(int rowId) {
1:6f20437:     return ByteUtil.valueOf3Bytes(shortIntData, rowId * 3);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public int getInt(int rowId) {
1:6f20437:     return intData[rowId];
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public long getLong(int rowId) {
1:6f20437:     return longData[rowId];
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
1:6f20437:     System.arraycopy(byteArrayData[rowId], 0, dest, destOffset, length);
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void convertValue(ColumnPageValueConverter codec) {
1:6f20437:     switch (decimalConverter.getDecimalConverterType()) {
1:6f20437:       case DECIMAL_INT:
1:6f20437:         for (int i = 0; i < pageSize; i++) {
1:6f20437:           codec.encode(i, intData[i]);
1:6f20437:         }
1:6f20437:         break;
1:6f20437:       case DECIMAL_LONG:
1:6f20437:         for (int i = 0; i < pageSize; i++) {
1:6f20437:           codec.encode(i, longData[i]);
1:6f20437:         }
1:6f20437:         break;
1:6f20437:       default:
1:8f08c4a:         throw new UnsupportedOperationException("not support value conversion on "
1:8f08c4a:             + columnPageEncoderMeta.getStoreDataType() + " page");
1:6f20437:     }
1:6f20437:   }
1:6f20437: 
1:6f20437:   @Override
1:6f20437:   public void freeMemory() {
1:dded5d5:     byteArrayData = null;
1:8925947:     super.freeMemory();
1:6f20437:   }
1:6f20437: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.datastore.page.encoding.ColumnPageEncoderMeta;
/////////////////////////////////////////////////////////////////////////
1:   SafeDecimalColumnPage(ColumnPageEncoderMeta columnPageEncoderMeta, int pageSize) {
1:     super(columnPageEncoderMeta, pageSize);
/////////////////////////////////////////////////////////////////////////
1:         throw new UnsupportedOperationException("not support value conversion on "
1:             + columnPageEncoderMeta.getStoreDataType() + " page");
author:Manhua
-------------------------------------------------------------------------------
commit:7551cc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:kumarvishal09
-------------------------------------------------------------------------------
commit:8925947
/////////////////////////////////////////////////////////////////////////
1:     super.freeMemory();
author:ravipesala
-------------------------------------------------------------------------------
commit:dded5d5
/////////////////////////////////////////////////////////////////////////
1:     byteArrayData = null;
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
0:     if (dataType == DataTypes.BYTE) {
0:       value = getByte(rowId);
0:     } else if (dataType == DataTypes.SHORT) {
0:       value = getShort(rowId);
0:     } else if (dataType == DataTypes.SHORT_INT) {
0:       value = getShortInt(rowId);
0:     } else if (dataType == DataTypes.INT) {
0:       value = getInt(rowId);
0:     } else if (dataType == DataTypes.LONG) {
0:       value = getLong(rowId);
0:     } else {
0:       byte[] bytes = byteArrayData[rowId];
0:       return decimalConverter.getDecimal(bytes);
author:manishgupta88
-------------------------------------------------------------------------------
commit:6f20437
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.datastore.page;
1: 
1: import java.math.BigDecimal;
1: 
0: import org.apache.carbondata.core.datastore.TableSpec;
0: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Represent a columnar data in one page for one column of decimal data type
1:  */
1: public class SafeDecimalColumnPage extends DecimalColumnPage {
1: 
1:   // Only one of following fields will be used
1:   private byte[] byteData;
1:   private short[] shortData;
1:   private int[] intData;
1:   private long[] longData;
1:   private byte[] shortIntData;
1:   private byte[][] byteArrayData;
1: 
0:   SafeDecimalColumnPage(TableSpec.ColumnSpec columnSpec, DataType dataType, int pageSize) {
0:     super(columnSpec, dataType, pageSize);
1:     byteArrayData = new byte[pageSize][];
1:   }
1: 
1:   @Override
1:   public void setBytePage(byte[] byteData) {
1:     this.byteData = byteData;
1:   }
1: 
1:   @Override
1:   public void setShortPage(short[] shortData) {
1:     this.shortData = shortData;
1:   }
1: 
1:   @Override
1:   public void setShortIntPage(byte[] shortIntData) {
1:     this.shortIntData = shortIntData;
1:   }
1: 
1:   @Override
1:   public void setIntPage(int[] intData) {
1:     this.intData = intData;
1:   }
1: 
1:   @Override
1:   public void setLongPage(long[] longData) {
1:     this.longData = longData;
1:   }
1: 
1:   @Override
1:   public void setByteArrayPage(byte[][] byteArray) {
1:     byteArrayData = byteArray;
1:   }
1: 
1:   /**
1:    * Set byte value at rowId
1:    */
1:   @Override
1:   public void putByte(int rowId, byte value) {
1:     byteData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set short value at rowId
1:    */
1:   @Override
1:   public void putShort(int rowId, short value) {
1:     shortData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set integer value at rowId
1:    */
1:   @Override
1:   public void putInt(int rowId, int value) {
1:     intData[rowId] = value;
1:   }
1: 
1:   /**
1:    * Set long value at rowId
1:    */
1:   @Override
1:   public void putLong(int rowId, long value) {
1:     longData[rowId] = value;
1:   }
1: 
1:   @Override
1:   void putBytesAtRow(int rowId, byte[] bytes) {
1:     byteArrayData[rowId] = bytes;
1:   }
1: 
1:   @Override
1:   public void putDecimal(int rowId, BigDecimal decimal) {
1:     switch (decimalConverter.getDecimalConverterType()) {
1:       case DECIMAL_INT:
1:         if (null == intData) {
1:           intData = new int[pageSize];
1:         }
1:         putInt(rowId, (int) decimalConverter.convert(decimal));
1:         break;
1:       case DECIMAL_LONG:
1:         if (null == longData) {
1:           longData = new long[pageSize];
1:         }
1:         putLong(rowId, (long) decimalConverter.convert(decimal));
1:         break;
1:       default:
1:         putBytes(rowId, (byte[]) decimalConverter.convert(decimal));
1:     }
1:   }
1: 
1:   @Override
1:   public void putShortInt(int rowId, int value) {
1:     byte[] converted = ByteUtil.to3Bytes(value);
1:     System.arraycopy(converted, 0, shortIntData, rowId * 3, 3);
1:   }
1: 
1:   @Override
1:   public void putBytes(int rowId, byte[] bytes, int offset, int length) {
1:     byteArrayData[rowId] = new byte[length];
1:     System.arraycopy(bytes, offset, byteArrayData[rowId], 0, length);
1:   }
1: 
1:   @Override
1:   public byte getByte(int rowId) {
1:     return byteData[rowId];
1:   }
1: 
1:   @Override
1:   public byte[] getBytes(int rowId) {
1:     return byteArrayData[rowId];
1:   }
1: 
1:   @Override
1:   public short getShort(int rowId) {
1:     return shortData[rowId];
1:   }
1: 
1:   @Override
1:   public int getShortInt(int rowId) {
1:     return ByteUtil.valueOf3Bytes(shortIntData, rowId * 3);
1:   }
1: 
1:   @Override
1:   public int getInt(int rowId) {
1:     return intData[rowId];
1:   }
1: 
1:   @Override
1:   public long getLong(int rowId) {
1:     return longData[rowId];
1:   }
1: 
1:   @Override
0:   public BigDecimal getDecimal(int rowId) {
0:     long value;
0:     switch (dataType) {
0:       case BYTE:
0:         value = getByte(rowId);
1:         break;
0:       case SHORT:
0:         value = getShort(rowId);
1:         break;
0:       case SHORT_INT:
0:         value = getShortInt(rowId);
1:         break;
0:       case INT:
0:         value = getInt(rowId);
1:         break;
0:       case LONG:
0:         value = getLong(rowId);
1:         break;
1:       default:
0:         byte[] bytes = byteArrayData[rowId];
0:         return decimalConverter.getDecimal(bytes);
1:     }
0:     return decimalConverter.getDecimal(value);
1:   }
1: 
1:   @Override
1:   public void copyBytes(int rowId, byte[] dest, int destOffset, int length) {
1:     System.arraycopy(byteArrayData[rowId], 0, dest, destOffset, length);
1:   }
1: 
1:   @Override
1:   public void convertValue(ColumnPageValueConverter codec) {
1:     switch (decimalConverter.getDecimalConverterType()) {
1:       case DECIMAL_INT:
1:         for (int i = 0; i < pageSize; i++) {
1:           codec.encode(i, intData[i]);
1:         }
1:         break;
1:       case DECIMAL_LONG:
1:         for (int i = 0; i < pageSize; i++) {
1:           codec.encode(i, longData[i]);
1:         }
1:         break;
1:       default:
0:         throw new UnsupportedOperationException(
0:             "not support value conversion on " + dataType + " page");
1:     }
1:   }
1: 
1:   @Override
1:   public void freeMemory() {
1: 
1:   }
1: }
============================================================================