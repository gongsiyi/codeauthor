1:21a72bf: /*
1:21a72bf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:21a72bf:  * contributor license agreements.  See the NOTICE file distributed with
1:21a72bf:  * this work for additional information regarding copyright ownership.
1:21a72bf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:21a72bf:  * (the "License"); you may not use this file except in compliance with
1:21a72bf:  * the License.  You may obtain a copy of the License at
1:21a72bf:  *
1:21a72bf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:21a72bf:  *
1:21a72bf:  * Unless required by applicable law or agreed to in writing, software
1:21a72bf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21a72bf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21a72bf:  * See the License for the specific language governing permissions and
1:21a72bf:  * limitations under the License.
1:21a72bf:  */
1:21a72bf: 
1:21a72bf: package org.apache.carbondata.core.stream;
1:21a72bf: 
1:21a72bf: import java.io.File;
1:21a72bf: import java.io.IOException;
1:21a72bf: import java.util.ArrayList;
1:21a72bf: import java.util.BitSet;
1:21a72bf: import java.util.List;
1:21a72bf: 
1:21a72bf: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:21a72bf: import org.apache.carbondata.core.datamap.Segment;
1:21a72bf: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1:21a72bf: import org.apache.carbondata.core.datastore.impl.FileFactory;
1:21a72bf: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:21a72bf: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1:21a72bf: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1:21a72bf: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1:21a72bf: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1:21a72bf: import org.apache.carbondata.core.scan.filter.FilterUtil;
1:21a72bf: import org.apache.carbondata.core.scan.filter.executer.FilterExecuter;
1:21a72bf: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1:21a72bf: import org.apache.carbondata.core.util.CarbonMetadataUtil;
1:21a72bf: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:21a72bf: import org.apache.carbondata.format.BlockIndex;
1:21a72bf: 
1:21a72bf: @InterfaceAudience.Internal
1:21a72bf: public class StreamPruner {
1:21a72bf: 
1:21a72bf:   private CarbonTable carbonTable;
1:21a72bf:   private FilterExecuter filterExecuter;
1:21a72bf: 
1:0528a79:   private int totalFileNums = 0;
1:0528a79: 
1:21a72bf:   public StreamPruner(CarbonTable carbonTable) {
1:21a72bf:     this.carbonTable = carbonTable;
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   public void init(FilterResolverIntf filterExp) {
1:21a72bf:     if (filterExp != null) {
1:21a72bf:       // cache all columns
1:21a72bf:       List<CarbonColumn> minMaxCacheColumns = new ArrayList<>();
1:21a72bf:       for (CarbonDimension dimension : carbonTable.getDimensions()) {
1:21a72bf:         if (!dimension.isComplex()) {
1:21a72bf:           minMaxCacheColumns.add(dimension);
1:21a72bf:         }
1:21a72bf:       }
1:21a72bf:       minMaxCacheColumns.addAll(carbonTable.getMeasures());
1:21a72bf:       // prepare cardinality of all dimensions
1:21a72bf:       List<ColumnSchema> listOfColumns =
1:21a72bf:           carbonTable.getTableInfo().getFactTable().getListOfColumns();
1:21a72bf:       int[] columnCardinality = new int[listOfColumns.size()];
1:21a72bf:       for (int index = 0; index < columnCardinality.length; index++) {
1:21a72bf:         columnCardinality[index] = Integer.MAX_VALUE;
1:21a72bf:       }
1:21a72bf:       // initial filter executor
1:21a72bf:       SegmentProperties segmentProperties =
1:21a72bf:           new SegmentProperties(listOfColumns, columnCardinality);
1:21a72bf:       filterExecuter = FilterUtil.getFilterExecuterTree(
1:21a72bf:           filterExp, segmentProperties, null, minMaxCacheColumns);
1:21a72bf:     }
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   public List<StreamFile> prune(List<Segment> segments) throws IOException {
1:21a72bf:     if (filterExecuter == null) {
1:21a72bf:       // if filter is null, list all steam files
1:21a72bf:       return listAllStreamFiles(segments, false);
1:21a72bf:     } else {
1:21a72bf:       List<StreamFile> streamFileList = new ArrayList<>();
1:21a72bf:       for (StreamFile streamFile : listAllStreamFiles(segments, true)) {
1:21a72bf:         if (isScanRequire(streamFile)) {
1:21a72bf:           // if stream file is required to scan
1:21a72bf:           streamFileList.add(streamFile);
1:21a72bf:           streamFile.setMinMaxIndex(null);
1:21a72bf:         }
1:21a72bf:       }
1:21a72bf:       return streamFileList;
1:21a72bf:     }
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   private boolean isScanRequire(StreamFile streamFile) {
1:21a72bf:     // backward compatibility, old stream file without min/max index
1:21a72bf:     if (streamFile.getMinMaxIndex() == null) {
1:21a72bf:       return true;
1:21a72bf:     }
1:21a72bf:     byte[][] maxValue = streamFile.getMinMaxIndex().getMaxValues();
1:21a72bf:     byte[][] minValue = streamFile.getMinMaxIndex().getMinValues();
1:21a72bf:     BitSet bitSet = filterExecuter.isScanRequired(maxValue, minValue);
1:21a72bf:     if (!bitSet.isEmpty()) {
1:21a72bf:       return true;
1:21a72bf:     } else {
1:21a72bf:       return false;
1:21a72bf:     }
1:21a72bf:   }
1:21a72bf: 
1:21a72bf:   // TODO optimize and move the code to StreamSegment , but it's in the streaming module.
1:21a72bf:   private List<StreamFile> listAllStreamFiles(List<Segment> segments, boolean withMinMax)
1:21a72bf:       throws IOException {
1:21a72bf:     List<StreamFile> streamFileList = new ArrayList<>();
1:21a72bf:     for (Segment segment : segments) {
1:21a72bf:       String segmentDir = CarbonTablePath.getSegmentPath(
1:21a72bf:           carbonTable.getAbsoluteTableIdentifier().getTablePath(), segment.getSegmentNo());
1:21a72bf:       String indexFile = CarbonTablePath.getCarbonStreamIndexFilePath(segmentDir);
1:21a72bf:       FileFactory.FileType fileType = FileFactory.getFileType(indexFile);
1:21a72bf:       if (FileFactory.isFileExist(indexFile, fileType)) {
1:21a72bf:         CarbonIndexFileReader indexReader = new CarbonIndexFileReader();
1:21a72bf:         indexReader.openThriftReader(indexFile);
1:21a72bf:         try {
1:21a72bf:           while (indexReader.hasNext()) {
1:21a72bf:             BlockIndex blockIndex = indexReader.readBlockIndexInfo();
1:21a72bf:             String filePath = segmentDir + File.separator + blockIndex.getFile_name();
1:21a72bf:             long length = blockIndex.getFile_size();
1:21a72bf:             StreamFile streamFile = new StreamFile(segment.getSegmentNo(), filePath, length);
1:21a72bf:             streamFileList.add(streamFile);
1:21a72bf:             if (withMinMax) {
1:21a72bf:               if (blockIndex.getBlock_index() != null
1:21a72bf:                   && blockIndex.getBlock_index().getMin_max_index() != null) {
1:21a72bf:                 streamFile.setMinMaxIndex(CarbonMetadataUtil
1:21a72bf:                     .convertExternalMinMaxIndex(blockIndex.getBlock_index().getMin_max_index()));
1:21a72bf:               }
1:21a72bf:             }
1:21a72bf:           }
1:21a72bf:         } finally {
1:21a72bf:           indexReader.closeThriftReader();
1:21a72bf:         }
1:21a72bf:       }
1:21a72bf:     }
1:0528a79:     totalFileNums = streamFileList.size();
1:21a72bf:     return streamFileList;
1:21a72bf:   }
1:0528a79: 
1:0528a79:   public int getTotalFileNums() {
1:0528a79:     return totalFileNums;
1:0528a79:   }
1:21a72bf: }
============================================================================
author:QiangCai
-------------------------------------------------------------------------------
commit:0528a79
/////////////////////////////////////////////////////////////////////////
1:   private int totalFileNums = 0;
1: 
/////////////////////////////////////////////////////////////////////////
1:     totalFileNums = streamFileList.size();
1: 
1:   public int getTotalFileNums() {
1:     return totalFileNums;
1:   }
commit:21a72bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.stream;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.BitSet;
1: import java.util.List;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: import org.apache.carbondata.core.datamap.Segment;
1: import org.apache.carbondata.core.datastore.block.SegmentProperties;
1: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonColumn;
1: import org.apache.carbondata.core.metadata.schema.table.column.CarbonDimension;
1: import org.apache.carbondata.core.metadata.schema.table.column.ColumnSchema;
1: import org.apache.carbondata.core.reader.CarbonIndexFileReader;
1: import org.apache.carbondata.core.scan.filter.FilterUtil;
1: import org.apache.carbondata.core.scan.filter.executer.FilterExecuter;
1: import org.apache.carbondata.core.scan.filter.resolver.FilterResolverIntf;
1: import org.apache.carbondata.core.util.CarbonMetadataUtil;
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
1: import org.apache.carbondata.format.BlockIndex;
1: 
1: @InterfaceAudience.Internal
1: public class StreamPruner {
1: 
1:   private CarbonTable carbonTable;
1:   private FilterExecuter filterExecuter;
1: 
1:   public StreamPruner(CarbonTable carbonTable) {
1:     this.carbonTable = carbonTable;
1:   }
1: 
1:   public void init(FilterResolverIntf filterExp) {
1:     if (filterExp != null) {
1:       // cache all columns
1:       List<CarbonColumn> minMaxCacheColumns = new ArrayList<>();
1:       for (CarbonDimension dimension : carbonTable.getDimensions()) {
1:         if (!dimension.isComplex()) {
1:           minMaxCacheColumns.add(dimension);
1:         }
1:       }
1:       minMaxCacheColumns.addAll(carbonTable.getMeasures());
1:       // prepare cardinality of all dimensions
1:       List<ColumnSchema> listOfColumns =
1:           carbonTable.getTableInfo().getFactTable().getListOfColumns();
1:       int[] columnCardinality = new int[listOfColumns.size()];
1:       for (int index = 0; index < columnCardinality.length; index++) {
1:         columnCardinality[index] = Integer.MAX_VALUE;
1:       }
1:       // initial filter executor
1:       SegmentProperties segmentProperties =
1:           new SegmentProperties(listOfColumns, columnCardinality);
1:       filterExecuter = FilterUtil.getFilterExecuterTree(
1:           filterExp, segmentProperties, null, minMaxCacheColumns);
1:     }
1:   }
1: 
1:   public List<StreamFile> prune(List<Segment> segments) throws IOException {
1:     if (filterExecuter == null) {
1:       // if filter is null, list all steam files
1:       return listAllStreamFiles(segments, false);
1:     } else {
1:       List<StreamFile> streamFileList = new ArrayList<>();
1:       for (StreamFile streamFile : listAllStreamFiles(segments, true)) {
1:         if (isScanRequire(streamFile)) {
1:           // if stream file is required to scan
1:           streamFileList.add(streamFile);
1:           streamFile.setMinMaxIndex(null);
1:         }
1:       }
1:       return streamFileList;
1:     }
1:   }
1: 
1:   private boolean isScanRequire(StreamFile streamFile) {
1:     // backward compatibility, old stream file without min/max index
1:     if (streamFile.getMinMaxIndex() == null) {
1:       return true;
1:     }
1:     byte[][] maxValue = streamFile.getMinMaxIndex().getMaxValues();
1:     byte[][] minValue = streamFile.getMinMaxIndex().getMinValues();
1:     BitSet bitSet = filterExecuter.isScanRequired(maxValue, minValue);
1:     if (!bitSet.isEmpty()) {
1:       return true;
1:     } else {
1:       return false;
1:     }
1:   }
1: 
1:   // TODO optimize and move the code to StreamSegment , but it's in the streaming module.
1:   private List<StreamFile> listAllStreamFiles(List<Segment> segments, boolean withMinMax)
1:       throws IOException {
1:     List<StreamFile> streamFileList = new ArrayList<>();
1:     for (Segment segment : segments) {
1:       String segmentDir = CarbonTablePath.getSegmentPath(
1:           carbonTable.getAbsoluteTableIdentifier().getTablePath(), segment.getSegmentNo());
1:       String indexFile = CarbonTablePath.getCarbonStreamIndexFilePath(segmentDir);
1:       FileFactory.FileType fileType = FileFactory.getFileType(indexFile);
1:       if (FileFactory.isFileExist(indexFile, fileType)) {
1:         CarbonIndexFileReader indexReader = new CarbonIndexFileReader();
1:         indexReader.openThriftReader(indexFile);
1:         try {
1:           while (indexReader.hasNext()) {
1:             BlockIndex blockIndex = indexReader.readBlockIndexInfo();
1:             String filePath = segmentDir + File.separator + blockIndex.getFile_name();
1:             long length = blockIndex.getFile_size();
1:             StreamFile streamFile = new StreamFile(segment.getSegmentNo(), filePath, length);
1:             streamFileList.add(streamFile);
1:             if (withMinMax) {
1:               if (blockIndex.getBlock_index() != null
1:                   && blockIndex.getBlock_index().getMin_max_index() != null) {
1:                 streamFile.setMinMaxIndex(CarbonMetadataUtil
1:                     .convertExternalMinMaxIndex(blockIndex.getBlock_index().getMin_max_index()));
1:               }
1:             }
1:           }
1:         } finally {
1:           indexReader.closeThriftReader();
1:         }
1:       }
1:     }
1:     return streamFileList;
1:   }
1: }
============================================================================