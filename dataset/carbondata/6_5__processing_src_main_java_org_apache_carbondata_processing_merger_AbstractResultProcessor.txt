1:cc59b24: /*
1:cc59b24:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cc59b24:  * contributor license agreements.  See the NOTICE file distributed with
1:cc59b24:  * this work for additional information regarding copyright ownership.
1:cc59b24:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cc59b24:  * (the "License"); you may not use this file except in compliance with
1:cc59b24:  * the License.  You may obtain a copy of the License at
1:cc59b24:  *
1:cc59b24:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cc59b24:  *
1:cc59b24:  * Unless required by applicable law or agreed to in writing, software
1:cc59b24:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cc59b24:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cc59b24:  * See the License for the specific language governing permissions and
1:cc59b24:  * limitations under the License.
1:cc59b24:  */
1:cc59b24: 
1:cc59b24: package org.apache.carbondata.processing.merger;
1:cc59b24: 
1:60dfdd3: import java.io.IOException;
1:cc59b24: import java.util.List;
1:cc59b24: 
1:cc59b24: import org.apache.carbondata.core.mutate.CarbonUpdateUtil;
1:cc59b24: import org.apache.carbondata.core.scan.result.iterator.RawResultIterator;
1:349c59c: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
1:cc59b24: import org.apache.carbondata.processing.store.CarbonDataFileAttributes;
1:cc59b24: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1:cc59b24: 
1:7978b97: /**
1:cc59b24:  * This class contains the common methods required for result processing during compaction based on
1:cc59b24:  * restructure and normal scenarios
1:cc59b24:  */
1:cc59b24: public abstract class AbstractResultProcessor {
1:cc59b24: 
1:cc59b24:   /**
1:cc59b24:    * This method will perform the desired tasks of merging the selected slices
1:cc59b24:    *
1:cc59b24:    * @param resultIteratorList
1:cc59b24:    * @return
1:cc59b24:    */
1:f1d8464:   public abstract boolean execute(List<RawResultIterator> resultIteratorList) throws Exception;
1:cc59b24: 
1:cc59b24:   /**
1:7978b97:    * This method will be sued to clean up the resources and close all the spawned threads to avoid
1:7978b97:    * any kind of memory or thread leak
1:7978b97:    */
1:7978b97:   public abstract void close();
1:7978b97: 
1:cc59b24:   protected void setDataFileAttributesInModel(CarbonLoadModel loadModel,
1:60dfdd3:       CompactionType compactionType, CarbonFactDataHandlerModel carbonFactDataHandlerModel)
1:60dfdd3:       throws IOException {
1:cc59b24:     CarbonDataFileAttributes carbonDataFileAttributes;
1:f8e0585:     if (compactionType == CompactionType.IUD_UPDDEL_DELTA) {
1:60dfdd3:       long taskNo = CarbonUpdateUtil.getLatestTaskIdForSegment(loadModel.getSegment(),
1:bf6c471:           loadModel.getTablePath());
1:cc59b24:       // Increase the Task Index as in IUD_UPDDEL_DELTA_COMPACTION the new file will
1:cc59b24:       // be written in same segment. So the TaskNo should be incremented by 1 from max val.
1:4430178:       long index = taskNo + 1;
1:cc59b24:       carbonDataFileAttributes = new CarbonDataFileAttributes(index, loadModel.getFactTimeStamp());
1:cc59b24:     } else {
1:cc59b24:       carbonDataFileAttributes =
1:4430178:           new CarbonDataFileAttributes(Long.parseLong(loadModel.getTaskNo()),
1:cc59b24:               loadModel.getFactTimeStamp());
1:cc59b24:     }
1:cc59b24:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:cc59b24:   }
1:cc59b24: 
1:cc59b24: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:60dfdd3
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:       CompactionType compactionType, CarbonFactDataHandlerModel carbonFactDataHandlerModel)
1:       throws IOException {
1:       long taskNo = CarbonUpdateUtil.getLatestTaskIdForSegment(loadModel.getSegment(),
commit:4430178
/////////////////////////////////////////////////////////////////////////
0:       long taskNo = CarbonUpdateUtil.getLatestTaskIdForSegment(loadModel.getSegmentId(),
1:       long index = taskNo + 1;
1:           new CarbonDataFileAttributes(Long.parseLong(loadModel.getTaskNo()),
author:rahulforallp
-------------------------------------------------------------------------------
commit:f1d8464
/////////////////////////////////////////////////////////////////////////
1:   public abstract boolean execute(List<RawResultIterator> resultIteratorList) throws Exception;
author:manishgupta88
-------------------------------------------------------------------------------
commit:7978b97
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * This method will be sued to clean up the resources and close all the spawned threads to avoid
1:    * any kind of memory or thread leak
1:    */
1:   public abstract void close();
1: 
commit:cc59b24
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.processing.merger;
1: 
1: import java.util.List;
1: 
0: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1: import org.apache.carbondata.core.mutate.CarbonUpdateUtil;
1: import org.apache.carbondata.core.scan.result.iterator.RawResultIterator;
0: import org.apache.carbondata.core.util.path.CarbonStorePath;
0: import org.apache.carbondata.processing.model.CarbonLoadModel;
1: import org.apache.carbondata.processing.store.CarbonDataFileAttributes;
1: import org.apache.carbondata.processing.store.CarbonFactDataHandlerModel;
1: 
1: /**
1:  * This class contains the common methods required for result processing during compaction based on
1:  * restructure and normal scenarios
1:  */
1: public abstract class AbstractResultProcessor {
1: 
1:   /**
1:    * This method will perform the desired tasks of merging the selected slices
1:    *
1:    * @param resultIteratorList
1:    * @return
1:    */
0:   public abstract boolean execute(List<RawResultIterator> resultIteratorList);
1: 
1:   protected void setDataFileAttributesInModel(CarbonLoadModel loadModel,
0:       CompactionType compactionType, CarbonTable carbonTable,
0:       CarbonFactDataHandlerModel carbonFactDataHandlerModel) {
1:     CarbonDataFileAttributes carbonDataFileAttributes;
0:     if (compactionType == CompactionType.IUD_UPDDEL_DELTA_COMPACTION) {
0:       int taskNo = CarbonUpdateUtil.getLatestTaskIdForSegment(loadModel.getSegmentId(),
0:           CarbonStorePath.getCarbonTablePath(loadModel.getStorePath(),
0:               carbonTable.getCarbonTableIdentifier()));
1:       // Increase the Task Index as in IUD_UPDDEL_DELTA_COMPACTION the new file will
1:       // be written in same segment. So the TaskNo should be incremented by 1 from max val.
0:       int index = taskNo + 1;
1:       carbonDataFileAttributes = new CarbonDataFileAttributes(index, loadModel.getFactTimeStamp());
1:     } else {
1:       carbonDataFileAttributes =
0:           new CarbonDataFileAttributes(Integer.parseInt(loadModel.getTaskNo()),
1:               loadModel.getFactTimeStamp());
1:     }
1:     carbonFactDataHandlerModel.setCarbonDataFileAttributes(carbonDataFileAttributes);
1:   }
1: 
1: }
author:Jacky Li
-------------------------------------------------------------------------------
commit:bf6c471
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       CompactionType compactionType, CarbonFactDataHandlerModel carbonFactDataHandlerModel) {
1:           loadModel.getTablePath());
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.model.CarbonLoadModel;
author:QiangCai
-------------------------------------------------------------------------------
commit:f8e0585
/////////////////////////////////////////////////////////////////////////
1:     if (compactionType == CompactionType.IUD_UPDDEL_DELTA) {
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:1155d4d
/////////////////////////////////////////////////////////////////////////
0:           CarbonStorePath.getCarbonTablePath(loadModel.getTablePath(),
============================================================================