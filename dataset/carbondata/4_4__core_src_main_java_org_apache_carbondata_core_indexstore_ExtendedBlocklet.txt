1:28f78b2: /*
1:28f78b2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:28f78b2:  * contributor license agreements.  See the NOTICE file distributed with
1:28f78b2:  * this work for additional information regarding copyright ownership.
1:28f78b2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:28f78b2:  * (the "License"); you may not use this file except in compliance with
1:28f78b2:  * the License.  You may obtain a copy of the License at
1:28f78b2:  *
1:28f78b2:  *    http://www.apache.org/licenses/LICENSE-2.0
1:28f78b2:  *
1:28f78b2:  * Unless required by applicable law or agreed to in writing, software
1:28f78b2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:28f78b2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:28f78b2:  * See the License for the specific language governing permissions and
1:28f78b2:  * limitations under the License.
2:28f78b2:  */
1:28f78b2: package org.apache.carbondata.core.indexstore;
5:28f78b2: 
2:28f78b2: /**
1:28f78b2:  * Detailed blocklet information
1:28f78b2:  */
1:28f78b2: public class ExtendedBlocklet extends Blocklet {
1:28f78b2: 
1:28f78b2:   private String segmentId;
1:28f78b2: 
1:28f78b2:   private BlockletDetailInfo detailInfo;
1:28f78b2: 
1:28f78b2:   private long length;
1:28f78b2: 
1:28f78b2:   private String[] location;
1:d35fbaf: 
1:d35fbaf:   private String dataMapWriterPath;
1:d35fbaf: 
1:56330ae:   private String dataMapUniqueId;
1:56330ae: 
1:9db662a:   public ExtendedBlocklet(String filePath, String blockletId) {
1:9db662a:     super(filePath, blockletId);
1:28f78b2:   }
1:28f78b2: 
1:f4a58c5:   public ExtendedBlocklet(String filePath, String blockletId,
1:f4a58c5:       boolean compareBlockletIdForObjectMatching) {
1:f4a58c5:     super(filePath, blockletId, compareBlockletIdForObjectMatching);
1:f4a58c5:   }
1:f4a58c5: 
1:28f78b2:   public BlockletDetailInfo getDetailInfo() {
1:28f78b2:     return detailInfo;
1:28f78b2:   }
1:28f78b2: 
1:28f78b2:   public void setDetailInfo(BlockletDetailInfo detailInfo) {
1:28f78b2:     this.detailInfo = detailInfo;
1:28f78b2:   }
1:28f78b2: 
1:41b0074:   public void setLocation(String[] location) {
1:41b0074:     this.location = location;
1:28f78b2:   }
1:28f78b2: 
1:41b0074:   public String[] getLocations() {
1:28f78b2:     return location;
1:28f78b2:   }
1:28f78b2: 
1:41b0074:   public long getLength() {
1:28f78b2:     return length;
1:28f78b2:   }
1:28f78b2: 
1:28f78b2:   public String getSegmentId() {
1:28f78b2:     return segmentId;
1:28f78b2:   }
1:28f78b2: 
1:28f78b2:   public void setSegmentId(String segmentId) {
1:28f78b2:     this.segmentId = segmentId;
1:28f78b2:   }
1:d35fbaf: 
1:d35fbaf:   public String getPath() {
1:9db662a:     return getFilePath();
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   public String getDataMapWriterPath() {
1:d35fbaf:     return dataMapWriterPath;
1:d35fbaf:   }
1:d35fbaf: 
1:d35fbaf:   public void setDataMapWriterPath(String dataMapWriterPath) {
1:d35fbaf:     this.dataMapWriterPath = dataMapWriterPath;
1:d35fbaf:   }
1:56330ae: 
1:56330ae:   public String getDataMapUniqueId() {
1:56330ae:     return dataMapUniqueId;
1:56330ae:   }
1:56330ae: 
1:56330ae:   public void setDataMapUniqueId(String dataMapUniqueId) {
1:56330ae:     this.dataMapUniqueId = dataMapUniqueId;
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public boolean equals(Object o) {
1:56330ae:     if (this == o) return true;
1:56330ae:     if (o == null || getClass() != o.getClass()) return false;
1:56330ae:     if (!super.equals(o)) {
1:56330ae:       return false;
1:56330ae:     }
1:56330ae: 
1:56330ae:     ExtendedBlocklet that = (ExtendedBlocklet) o;
1:56330ae: 
1:56330ae:     return segmentId != null ? segmentId.equals(that.segmentId) : that.segmentId == null;
1:56330ae:   }
1:56330ae: 
1:56330ae:   @Override public int hashCode() {
1:56330ae:     int result = super.hashCode();
1:56330ae:     result = 31 * result + (segmentId != null ? segmentId.hashCode() : 0);
1:56330ae:     return result;
1:56330ae:   }
1:28f78b2: }
============================================================================
author:manishgupta88
-------------------------------------------------------------------------------
commit:f4a58c5
/////////////////////////////////////////////////////////////////////////
1:   public ExtendedBlocklet(String filePath, String blockletId,
1:       boolean compareBlockletIdForObjectMatching) {
1:     super(filePath, blockletId, compareBlockletIdForObjectMatching);
1:   }
1: 
author:Jacky Li
-------------------------------------------------------------------------------
commit:9db662a
/////////////////////////////////////////////////////////////////////////
1:   public ExtendedBlocklet(String filePath, String blockletId) {
1:     super(filePath, blockletId);
/////////////////////////////////////////////////////////////////////////
1:     return getFilePath();
author:ravipesala
-------------------------------------------------------------------------------
commit:8b33ab2
/////////////////////////////////////////////////////////////////////////
0:     return getTaskName();
commit:d35fbaf
/////////////////////////////////////////////////////////////////////////
0:   private String path;
1: 
1:   private String dataMapWriterPath;
1: 
0:     this.path = path;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getPath() {
0:     return path;
1:   }
1: 
1:   public String getDataMapWriterPath() {
1:     return dataMapWriterPath;
1:   }
1: 
1:   public void setDataMapWriterPath(String dataMapWriterPath) {
1:     this.dataMapWriterPath = dataMapWriterPath;
1:   }
commit:41b0074
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public void setLocation(String[] location) {
1:     this.location = location;
1:   public String[] getLocations() {
1:   public long getLength() {
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:56330ae
/////////////////////////////////////////////////////////////////////////
1:   private String dataMapUniqueId;
1: 
/////////////////////////////////////////////////////////////////////////
0:     return getBlockId();
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getDataMapUniqueId() {
1:     return dataMapUniqueId;
1:   }
1: 
1:   public void setDataMapUniqueId(String dataMapUniqueId) {
1:     this.dataMapUniqueId = dataMapUniqueId;
1:   }
1: 
1:   @Override public boolean equals(Object o) {
1:     if (this == o) return true;
1:     if (o == null || getClass() != o.getClass()) return false;
1:     if (!super.equals(o)) {
1:       return false;
1:     }
1: 
1:     ExtendedBlocklet that = (ExtendedBlocklet) o;
1: 
1:     return segmentId != null ? segmentId.equals(that.segmentId) : that.segmentId == null;
1:   }
1: 
1:   @Override public int hashCode() {
1:     int result = super.hashCode();
1:     result = 31 * result + (segmentId != null ? segmentId.hashCode() : 0);
1:     return result;
1:   }
commit:28f78b2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.indexstore;
1: 
0: import java.io.IOException;
1: 
0: import org.apache.carbondata.core.datastore.impl.FileFactory;
1: 
0: import org.apache.hadoop.fs.FileSystem;
0: import org.apache.hadoop.fs.LocatedFileStatus;
0: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.fs.RemoteIterator;
1: 
1: /**
1:  * Detailed blocklet information
1:  */
1: public class ExtendedBlocklet extends Blocklet {
1: 
1:   private String segmentId;
1: 
1:   private BlockletDetailInfo detailInfo;
1: 
1:   private long length;
1: 
1:   private String[] location;
1: 
0:   public ExtendedBlocklet(String path, String blockletId) {
0:     super(path, blockletId);
1:   }
1: 
1:   public BlockletDetailInfo getDetailInfo() {
1:     return detailInfo;
1:   }
1: 
1:   public void setDetailInfo(BlockletDetailInfo detailInfo) {
1:     this.detailInfo = detailInfo;
1:   }
1: 
1:   /**
0:    * It gets the hdfs block locations and length for this blocklet. It is used internally to get the
0:    * locations for allocating tasks.
0:    * @throws IOException
1:    */
0:   public void updateLocations() throws IOException {
0:     Path path = new Path(getPath());
0:     FileSystem fs = path.getFileSystem(FileFactory.getConfiguration());
0:     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(path);
0:     LocatedFileStatus fileStatus = iter.next();
0:     location = fileStatus.getBlockLocations()[0].getHosts();
0:     length = fileStatus.getLen();
1:   }
1: 
0:   public String[] getLocations() throws IOException {
1:     return location;
1:   }
1: 
0:   public long getLength() throws IOException {
1:     return length;
1:   }
1: 
1:   public String getSegmentId() {
1:     return segmentId;
1:   }
1: 
1:   public void setSegmentId(String segmentId) {
1:     this.segmentId = segmentId;
1:   }
1: }
============================================================================