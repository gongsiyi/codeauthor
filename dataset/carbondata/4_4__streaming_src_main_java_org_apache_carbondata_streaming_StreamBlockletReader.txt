1:d7393da: /*
1:d7393da:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d7393da:  * contributor license agreements.  See the NOTICE file distributed with
1:d7393da:  * this work for additional information regarding copyright ownership.
1:d7393da:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d7393da:  * (the "License"); you may not use this file except in compliance with
1:d7393da:  * the License.  You may obtain a copy of the License at
1:d7393da:  *
1:d7393da:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d7393da:  *
1:d7393da:  * Unless required by applicable law or agreed to in writing, software
1:d7393da:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d7393da:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d7393da:  * See the License for the specific language governing permissions and
1:d7393da:  * limitations under the License.
1:d7393da:  */
1:d7393da: 
1:c723947: package org.apache.carbondata.streaming;
1:d7393da: 
1:d7393da: import java.io.EOFException;
1:d7393da: import java.io.IOException;
1:d7393da: import java.io.InputStream;
1:d7393da: 
1:d7393da: import org.apache.carbondata.core.datastore.compression.Compressor;
1:d7393da: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1:d7393da: import org.apache.carbondata.core.util.CarbonUtil;
1:d7393da: import org.apache.carbondata.format.BlockletHeader;
1:d7393da: 
1:d7393da: /**
1:d7393da:  * stream blocklet reader
1:d7393da:  */
1:d7393da: public class StreamBlockletReader {
1:d7393da: 
1:d7393da:   private byte[] buffer;
1:d7393da:   private int offset;
1:d7393da:   private final byte[] syncMarker;
1:d7393da:   private final byte[] syncBuffer;
1:d7393da:   private final int syncLen;
1:d7393da:   private long pos = 0;
1:d7393da:   private final InputStream in;
1:d7393da:   private final long limitStart;
1:d7393da:   private final long limitEnd;
1:d7393da:   private boolean isAlreadySync = false;
1:8f08c4a:   private Compressor compressor;
1:d7393da:   private int rowNums = 0;
1:d7393da:   private int rowIndex = 0;
1:d7393da:   private boolean isHeaderPresent;
1:d7393da: 
1:bcef656:   public StreamBlockletReader(byte[] syncMarker, InputStream in, long limit,
1:8f08c4a:       boolean isHeaderPresent, String compressorName) {
1:d7393da:     this.syncMarker = syncMarker;
1:59eff88:     syncLen = syncMarker.length;
1:59eff88:     syncBuffer = new byte[syncLen];
1:d7393da:     this.in = in;
1:59eff88:     limitStart = limit;
1:59eff88:     limitEnd = limitStart + syncLen;
1:d7393da:     this.isHeaderPresent = isHeaderPresent;
1:8f08c4a:     this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
1:d7393da:   }
1:d7393da: 
1:d7393da:   private void ensureCapacity(int capacity) {
1:d7393da:     if (buffer == null || capacity > buffer.length) {
1:d7393da:       buffer = new byte[capacity];
1:d7393da:     }
1:d7393da:   }
1:d7393da: 
1:d7393da:   /**
1:d7393da:    * find the first position of sync_marker in input stream
1:d7393da:    */
1:d7393da:   private boolean sync() throws IOException {
1:59eff88:     if (!readBytesFromStream(syncBuffer, 0, syncLen)) {
1:d7393da:       return false;
1:d7393da:     }
1:d7393da:     boolean skipHeader = false;
1:d7393da:     for (int i = 0; i < limitStart; i++) {
1:d7393da:       int j = 0;
1:d7393da:       for (; j < syncLen; j++) {
1:d7393da:         if (syncMarker[j] != syncBuffer[(i + j) % syncLen]) break;
1:d7393da:       }
1:d7393da:       if (syncLen == j) {
1:d7393da:         if (isHeaderPresent) {
1:d7393da:           if (skipHeader) {
1:d7393da:             return true;
1:d7393da:           } else {
1:d7393da:             skipHeader = true;
1:d7393da:           }
1:d7393da:         } else {
1:d7393da:           return true;
1:d7393da:         }
1:d7393da:       }
1:d7393da:       int value = in.read();
1:d7393da:       if (-1 == value) {
1:d7393da:         return false;
1:d7393da:       }
1:d7393da:       syncBuffer[i % syncLen] = (byte) value;
1:d7393da:       pos++;
1:d7393da:     }
1:d7393da:     return false;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public BlockletHeader readBlockletHeader() throws IOException {
1:d7393da:     int len = readIntFromStream();
1:d7393da:     byte[] b = new byte[len];
1:59eff88:     if (!readBytesFromStream(b, 0, len)) {
1:59eff88:       throw new EOFException("Failed to read blocklet header");
1:59eff88:     }
1:d7393da:     BlockletHeader header = CarbonUtil.readBlockletHeader(b);
1:d7393da:     rowNums = header.getBlocklet_info().getNum_rows();
1:d7393da:     rowIndex = 0;
1:d7393da:     return header;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public void readBlockletData(BlockletHeader header) throws IOException {
1:d7393da:     ensureCapacity(header.getBlocklet_length());
1:d7393da:     offset = 0;
1:d7393da:     int len = readIntFromStream();
1:d7393da:     byte[] b = new byte[len];
1:59eff88:     if (!readBytesFromStream(b, 0, len)) {
1:59eff88:       throw new EOFException("Failed to read blocklet data");
1:59eff88:     }
1:d7393da:     compressor.rawUncompress(b, buffer);
1:d7393da:   }
1:d7393da: 
1:bcef656:   public void skipBlockletData(boolean reset) throws IOException {
1:d7393da:     int len = readIntFromStream();
1:d7393da:     skip(len);
1:d7393da:     pos += len;
1:d7393da:     if (reset) {
1:d7393da:       this.rowNums = 0;
1:d7393da:       this.rowIndex = 0;
1:d7393da:     }
1:d7393da:   }
1:d7393da: 
1:d7393da:   private void skip(int len) throws IOException {
1:d7393da:     long remaining = len;
1:d7393da:     do {
1:d7393da:       long skipLen = in.skip(remaining);
1:d7393da:       remaining -= skipLen;
1:d7393da:     } while (remaining > 0);
1:d7393da:   }
1:d7393da: 
1:d7393da:   /**
1:d7393da:    * find the next blocklet
1:d7393da:    */
1:bcef656:   public boolean nextBlocklet() throws IOException {
1:d7393da:     if (pos >= limitStart) {
1:d7393da:       return false;
1:d7393da:     }
1:d7393da:     if (isAlreadySync) {
1:59eff88:       if (!readBytesFromStream(syncBuffer, 0, syncLen)) {
1:d7393da:         return false;
1:d7393da:       }
1:d7393da:     } else {
1:d7393da:       isAlreadySync = true;
1:d7393da:       if (!sync()) {
1:d7393da:         return false;
1:d7393da:       }
1:d7393da:     }
1:d7393da: 
1:d7393da:     return pos < limitEnd;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public boolean hasNext() throws IOException {
1:d7393da:     return rowIndex < rowNums;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public void nextRow() {
1:d7393da:     rowIndex++;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public int readIntFromStream() throws IOException {
1:d7393da:     int ch1 = in.read();
1:d7393da:     int ch2 = in.read();
1:d7393da:     int ch3 = in.read();
1:d7393da:     int ch4 = in.read();
1:d7393da:     if ((ch1 | ch2 | ch3 | ch4) < 0) throw new EOFException();
1:d7393da:     pos += 4;
1:d7393da:     return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));
1:d7393da:   }
1:d7393da: 
1:59eff88:   /**
1:59eff88:    * Reads <code>len</code> bytes of data from the input stream into
1:59eff88:    * an array of bytes.
1:59eff88:    * @return <code>true</code> if reading data successfully, or
1:59eff88:    * <code>false</code> if there is no more data because the end of the stream has been reached.
1:59eff88:    */
1:bcef656:   public boolean readBytesFromStream(byte[] b, int offset, int len) throws IOException {
1:59eff88:     int readLen = in.read(b, offset, len);
1:59eff88:     if (readLen < 0) {
1:59eff88:       return false;
1:d7393da:     }
1:59eff88:     pos += readLen;
1:59eff88:     if (readLen < len) {
1:59eff88:       return readBytesFromStream(b, offset + readLen, len - readLen);
1:59eff88:     } else {
1:59eff88:       return true;
1:59eff88:     }
1:d7393da:   }
1:d7393da: 
1:bcef656:   public boolean readBoolean() {
1:d7393da:     return (buffer[offset++]) != 0;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public short readShort() {
1:d7393da:     short v =  (short) ((buffer[offset + 1] & 255) +
1:d7393da:         ((buffer[offset]) << 8));
1:d7393da:     offset += 2;
1:d7393da:     return v;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public byte[] copy(int len) {
1:d7393da:     byte[] b = new byte[len];
1:d7393da:     System.arraycopy(buffer, offset, b, 0, len);
1:d7393da:     return b;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public int readInt() {
1:d7393da:     int v = ((buffer[offset + 3] & 255) +
1:d7393da:         ((buffer[offset + 2] & 255) << 8) +
1:d7393da:         ((buffer[offset + 1] & 255) << 16) +
1:d7393da:         ((buffer[offset]) << 24));
1:d7393da:     offset += 4;
1:d7393da:     return v;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public long readLong() {
1:d7393da:     long v = ((long)(buffer[offset + 7] & 255)) +
1:d7393da:         ((long) (buffer[offset + 6] & 255) << 8) +
1:d7393da:         ((long) (buffer[offset + 5] & 255) << 16) +
1:d7393da:         ((long) (buffer[offset + 4] & 255) << 24) +
1:d7393da:         ((long) (buffer[offset + 3] & 255) << 32) +
1:d7393da:         ((long) (buffer[offset + 2] & 255) << 40) +
1:d7393da:         ((long) (buffer[offset + 1] & 255) << 48) +
1:d7393da:         ((long) (buffer[offset]) << 56);
1:d7393da:     offset += 8;
1:d7393da:     return v;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public double readDouble() {
1:d7393da:     return Double.longBitsToDouble(readLong());
1:d7393da:   }
1:d7393da: 
1:bcef656:   public byte[] readBytes(int len) {
1:d7393da:     byte[] b = new byte[len];
1:d7393da:     System.arraycopy(buffer, offset, b, 0, len);
1:d7393da:     offset += len;
1:d7393da:     return b;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public void skipBytes(int len) {
1:d7393da:     offset += len;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public int getRowNums() {
1:d7393da:     return rowNums;
1:d7393da:   }
1:d7393da: 
1:bcef656:   public void close() {
1:d7393da:     CarbonUtil.closeStreams(in);
1:d7393da:   }
1:d7393da: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:8f08c4a
/////////////////////////////////////////////////////////////////////////
1:   private Compressor compressor;
1:       boolean isHeaderPresent, String compressorName) {
/////////////////////////////////////////////////////////////////////////
1:     this.compressor = CompressorFactory.getInstance().getCompressor(compressorName);
author:sujith71955
-------------------------------------------------------------------------------
commit:bcef656
/////////////////////////////////////////////////////////////////////////
1:   public StreamBlockletReader(byte[] syncMarker, InputStream in, long limit,
0:       boolean isHeaderPresent) {
/////////////////////////////////////////////////////////////////////////
1:   public BlockletHeader readBlockletHeader() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public void readBlockletData(BlockletHeader header) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public void skipBlockletData(boolean reset) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public boolean nextBlocklet() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public boolean hasNext() throws IOException {
1:   public void nextRow() {
1:   public int readIntFromStream() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public boolean readBytesFromStream(byte[] b, int offset, int len) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public boolean readBoolean() {
1:   public short readShort() {
1:   public byte[] copy(int len) {
1:   public int readInt() {
/////////////////////////////////////////////////////////////////////////
1:   public long readLong() {
/////////////////////////////////////////////////////////////////////////
1:   public double readDouble() {
1:   public byte[] readBytes(int len) {
1:   public void skipBytes(int len) {
1:   public int getRowNums() {
1:   public void close() {
author:Jacky Li
-------------------------------------------------------------------------------
commit:c723947
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.streaming;
author:QiangCai
-------------------------------------------------------------------------------
commit:59eff88
/////////////////////////////////////////////////////////////////////////
1:     syncLen = syncMarker.length;
1:     syncBuffer = new byte[syncLen];
1:     limitStart = limit;
1:     limitEnd = limitStart + syncLen;
/////////////////////////////////////////////////////////////////////////
1:     if (!readBytesFromStream(syncBuffer, 0, syncLen)) {
/////////////////////////////////////////////////////////////////////////
1:     if (!readBytesFromStream(b, 0, len)) {
1:       throw new EOFException("Failed to read blocklet header");
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (!readBytesFromStream(b, 0, len)) {
1:       throw new EOFException("Failed to read blocklet data");
1:     }
/////////////////////////////////////////////////////////////////////////
1:       if (!readBytesFromStream(syncBuffer, 0, syncLen)) {
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Reads <code>len</code> bytes of data from the input stream into
1:    * an array of bytes.
1:    * @return <code>true</code> if reading data successfully, or
1:    * <code>false</code> if there is no more data because the end of the stream has been reached.
1:    */
0:   boolean readBytesFromStream(byte[] b, int offset, int len) throws IOException {
1:     int readLen = in.read(b, offset, len);
1:     if (readLen < 0) {
1:       return false;
1:     pos += readLen;
1:     if (readLen < len) {
1:       return readBytesFromStream(b, offset + readLen, len - readLen);
1:     } else {
1:       return true;
1:     }
commit:d7393da
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.carbondata.hadoop.streaming;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import org.apache.carbondata.core.datastore.compression.Compressor;
1: import org.apache.carbondata.core.datastore.compression.CompressorFactory;
1: import org.apache.carbondata.core.util.CarbonUtil;
1: import org.apache.carbondata.format.BlockletHeader;
1: 
1: /**
1:  * stream blocklet reader
1:  */
1: public class StreamBlockletReader {
1: 
1:   private byte[] buffer;
1:   private int offset;
1:   private final byte[] syncMarker;
1:   private final byte[] syncBuffer;
1:   private final int syncLen;
1:   private long pos = 0;
1:   private final InputStream in;
1:   private final long limitStart;
1:   private final long limitEnd;
1:   private boolean isAlreadySync = false;
0:   private Compressor compressor = CompressorFactory.getInstance().getCompressor();
1:   private int rowNums = 0;
1:   private int rowIndex = 0;
1:   private boolean isHeaderPresent;
1: 
0:   StreamBlockletReader(byte[] syncMarker, InputStream in, long limit, boolean isHeaderPresent) {
1:     this.syncMarker = syncMarker;
0:     this.syncLen = syncMarker.length;
0:     this.syncBuffer = new byte[syncMarker.length];
1:     this.in = in;
0:     this.limitStart = limit;
0:     this.limitEnd = limitStart + syncLen;
1:     this.isHeaderPresent = isHeaderPresent;
1:   }
1: 
1:   private void ensureCapacity(int capacity) {
1:     if (buffer == null || capacity > buffer.length) {
1:       buffer = new byte[capacity];
1:     }
1:   }
1: 
1:   /**
1:    * find the first position of sync_marker in input stream
1:    */
1:   private boolean sync() throws IOException {
0:     int len = in.read(syncBuffer);
0:     if (len < syncLen) {
1:       return false;
1:     }
0:     pos += syncLen;
1:     boolean skipHeader = false;
1:     for (int i = 0; i < limitStart; i++) {
1:       int j = 0;
1:       for (; j < syncLen; j++) {
1:         if (syncMarker[j] != syncBuffer[(i + j) % syncLen]) break;
1:       }
1:       if (syncLen == j) {
1:         if (isHeaderPresent) {
1:           if (skipHeader) {
1:             return true;
1:           } else {
1:             skipHeader = true;
1:           }
1:         } else {
1:           return true;
1:         }
1:       }
1:       int value = in.read();
1:       if (-1 == value) {
1:         return false;
1:       }
1:       syncBuffer[i % syncLen] = (byte) value;
1:       pos++;
1:     }
1:     return false;
1:   }
1: 
0:   BlockletHeader readBlockletHeader() throws IOException {
1:     int len = readIntFromStream();
1:     byte[] b = new byte[len];
0:     readBytesFromStream(b);
1:     BlockletHeader header = CarbonUtil.readBlockletHeader(b);
1:     rowNums = header.getBlocklet_info().getNum_rows();
1:     rowIndex = 0;
1:     return header;
1:   }
1: 
0:   void readBlockletData(BlockletHeader header) throws IOException {
1:     ensureCapacity(header.getBlocklet_length());
1:     offset = 0;
1:     int len = readIntFromStream();
1:     byte[] b = new byte[len];
0:     readBytesFromStream(b);
1:     compressor.rawUncompress(b, buffer);
1:   }
1: 
0:   void skipBlockletData(boolean reset) throws IOException {
1:     int len = readIntFromStream();
1:     skip(len);
1:     pos += len;
1:     if (reset) {
1:       this.rowNums = 0;
1:       this.rowIndex = 0;
1:     }
1:   }
1: 
1:   private void skip(int len) throws IOException {
1:     long remaining = len;
1:     do {
1:       long skipLen = in.skip(remaining);
1:       remaining -= skipLen;
1:     } while (remaining > 0);
1:   }
1: 
1:   /**
1:    * find the next blocklet
1:    */
0:   boolean nextBlocklet() throws IOException {
1:     if (pos >= limitStart) {
1:       return false;
1:     }
1:     if (isAlreadySync) {
0:       int v = in.read(syncBuffer);
0:       if (v < syncLen) {
1:         return false;
1:       }
0:       pos += syncLen;
1:     } else {
1:       isAlreadySync = true;
1:       if (!sync()) {
1:         return false;
1:       }
1:     }
1: 
1:     return pos < limitEnd;
1:   }
1: 
0:   boolean hasNext() throws IOException {
1:     return rowIndex < rowNums;
1:   }
1: 
0:   void nextRow() {
1:     rowIndex++;
1:   }
1: 
0:   int readIntFromStream() throws IOException {
1:     int ch1 = in.read();
1:     int ch2 = in.read();
1:     int ch3 = in.read();
1:     int ch4 = in.read();
1:     if ((ch1 | ch2 | ch3 | ch4) < 0) throw new EOFException();
1:     pos += 4;
1:     return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));
1:   }
1: 
0:   void readBytesFromStream(byte[] b) throws IOException {
0:     int len = in.read(b, 0, b.length);
0:     if (len < b.length) {
0:       throw new EOFException();
1:     }
0:     pos += b.length;
1:   }
1: 
0:   boolean readBoolean() {
1:     return (buffer[offset++]) != 0;
1:   }
1: 
0:   short readShort() {
1:     short v =  (short) ((buffer[offset + 1] & 255) +
1:         ((buffer[offset]) << 8));
1:     offset += 2;
1:     return v;
1:   }
1: 
0:   byte[] copy(int len) {
1:     byte[] b = new byte[len];
1:     System.arraycopy(buffer, offset, b, 0, len);
1:     return b;
1:   }
1: 
0:   int readInt() {
1:     int v = ((buffer[offset + 3] & 255) +
1:         ((buffer[offset + 2] & 255) << 8) +
1:         ((buffer[offset + 1] & 255) << 16) +
1:         ((buffer[offset]) << 24));
1:     offset += 4;
1:     return v;
1:   }
1: 
0:   long readLong() {
1:     long v = ((long)(buffer[offset + 7] & 255)) +
1:         ((long) (buffer[offset + 6] & 255) << 8) +
1:         ((long) (buffer[offset + 5] & 255) << 16) +
1:         ((long) (buffer[offset + 4] & 255) << 24) +
1:         ((long) (buffer[offset + 3] & 255) << 32) +
1:         ((long) (buffer[offset + 2] & 255) << 40) +
1:         ((long) (buffer[offset + 1] & 255) << 48) +
1:         ((long) (buffer[offset]) << 56);
1:     offset += 8;
1:     return v;
1:   }
1: 
0:   double readDouble() {
1:     return Double.longBitsToDouble(readLong());
1:   }
1: 
0:   byte[] readBytes(int len) {
1:     byte[] b = new byte[len];
1:     System.arraycopy(buffer, offset, b, 0, len);
1:     offset += len;
1:     return b;
1:   }
1: 
0:   void skipBytes(int len) {
1:     offset += len;
1:   }
1: 
0:   int getRowNums() {
1:     return rowNums;
1:   }
1: 
0:   void close() {
1:     CarbonUtil.closeStreams(in);
1:   }
1: }
============================================================================