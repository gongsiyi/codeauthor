1:2b41f14: /*
1:2b41f14:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b41f14:  * contributor license agreements.  See the NOTICE file distributed with
1:2b41f14:  * this work for additional information regarding copyright ownership.
1:2b41f14:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b41f14:  * (the "License"); you may not use this file except in compliance with
1:2b41f14:  * the License.  You may obtain a copy of the License at
1:2b41f14:  *
1:2b41f14:  *    http://www.apache.org/licenses/LICENSE-2.0
1:2b41f14:  *
1:2b41f14:  * Unless required by applicable law or agreed to in writing, software
1:2b41f14:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b41f14:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b41f14:  * See the License for the specific language governing permissions and
1:2b41f14:  * limitations under the License.
2:2b41f14:  */
1:2b41f14: package org.apache.carbondata.processing.loading.row;
11:2b41f14: 
2:2b41f14: /**
1:2b41f14:  * During sort procedure, each row will be written to sort temp file in this logic format.
1:2b41f14:  * an intermediate sort temp row consists 3 parts:
1:2b41f14:  * dictSort, noDictSort, noSortDimsAndMeasures(dictNoSort, noDictNoSort, measure)
1:2b41f14:  */
1:2b41f14: public class IntermediateSortTempRow {
1:2b41f14:   private int[] dictSortDims;
1:2b41f14:   private byte[][] noDictSortDims;
1:f27efb3:   /**
1:f27efb3:    * this will be used for intermediate merger when
1:f27efb3:    * no sort field and measure field will not be
1:f27efb3:    * used for sorting
1:f27efb3:    */
1:2b41f14:   private byte[] noSortDimsAndMeasures;
1:f27efb3:   /**
1:f27efb3:    * for final merger keep the measures
1:f27efb3:    */
1:f27efb3:   private Object[] measures;
1:2b41f14: 
1:2b41f14:   public IntermediateSortTempRow(int[] dictSortDims, byte[][] noDictSortDims,
1:2b41f14:       byte[] noSortDimsAndMeasures) {
1:2b41f14:     this.dictSortDims = dictSortDims;
1:2b41f14:     this.noDictSortDims = noDictSortDims;
1:2b41f14:     this.noSortDimsAndMeasures = noSortDimsAndMeasures;
1:11fb422:   }
1:11fb422: 
1:f27efb3:   public IntermediateSortTempRow(int[] dictSortDims, byte[][] noDictSortDims,
1:f27efb3:       Object[] measures) {
1:f27efb3:     this.dictSortDims = dictSortDims;
1:f27efb3:     this.noDictSortDims = noDictSortDims;
1:f27efb3:     this.measures = measures;
1:f27efb3:   }
1:f27efb3: 
1:2b41f14:   public int[] getDictSortDims() {
1:2b41f14:     return dictSortDims;
1:dc53dee:   }
1:dc53dee: 
1:f27efb3:   public Object[] getMeasures() {
1:f27efb3:     return measures;
1:f27efb3:   }
1:f27efb3: 
1:2b41f14:   public byte[][] getNoDictSortDims() {
1:2b41f14:     return noDictSortDims;
10:2b41f14:   }
1:2b41f14: 
1:2b41f14:   public byte[] getNoSortDimsAndMeasures() {
1:2b41f14:     return noSortDimsAndMeasures;
1:2b41f14:   }
1:2b41f14: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:f27efb3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * this will be used for intermediate merger when
1:    * no sort field and measure field will not be
1:    * used for sorting
1:    */
1:   /**
1:    * for final merger keep the measures
1:    */
1:   private Object[] measures;
/////////////////////////////////////////////////////////////////////////
1:   public IntermediateSortTempRow(int[] dictSortDims, byte[][] noDictSortDims,
1:       Object[] measures) {
1:     this.dictSortDims = dictSortDims;
1:     this.noDictSortDims = noDictSortDims;
1:     this.measures = measures;
1:   }
1: 
1:   public Object[] getMeasures() {
1:     return measures;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
author:Manhua
-------------------------------------------------------------------------------
commit:11fb422
/////////////////////////////////////////////////////////////////////////
0:    * @param outNoDictNoSort stores all no-dict & no-sort fields,
0:    *                        including complex and varchar fields
0:    * @param varcharDimCnt number of varchar column
0:    * @param complexDimCnt number of complex column
0:   public void unpackNoSortFromBytes(int[] outDictNoSort, byte[][] outNoDictNoSort,
0:       Object[] outMeasures, DataType[] dataTypes, int varcharDimCnt, int complexDimCnt) {
/////////////////////////////////////////////////////////////////////////
0:     // read no_dict_no_sort
0:     int noDictNoSortCnt = outNoDictNoSort.length - varcharDimCnt - complexDimCnt;
0:       outNoDictNoSort[i] = bytes;
/////////////////////////////////////////////////////////////////////////
0:       outNoDictNoSort[i + noDictNoSortCnt] = bytes;
1:     }
1: 
0:     // read complex dims
0:     for (int i = 0; i < complexDimCnt; i++) {
0:       short len = rowBuffer.getShort();
0:       byte[] bytes = new byte[len];
0:       rowBuffer.get(bytes);
0:       outNoDictNoSort[i + noDictNoSortCnt + varcharDimCnt] = bytes;
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
0:    * @param outNoDictNoSortAndVarcharDims stores the no-dict & no-sort fields,
0:  *                                    including complex and varchar fields
0:   public void unpackNoSortFromBytes(int[] outDictNoSort, byte[][] outNoDictNoSortAndVarcharDims,
0:       Object[] outMeasures, DataType[] dataTypes, int varcharDimCnt) {
/////////////////////////////////////////////////////////////////////////
0:     int noDictNoSortCnt = outNoDictNoSortAndVarcharDims.length - varcharDimCnt;
0:       outNoDictNoSortAndVarcharDims[i] = bytes;
1:     }
1: 
0:     // read varchar dims
0:     for (int i = 0; i < varcharDimCnt; i++) {
0:       int len = rowBuffer.getInt();
0:       byte[] bytes = new byte[len];
0:       rowBuffer.get(bytes);
0:       outNoDictNoSortAndVarcharDims[i + noDictNoSortCnt] = bytes;
commit:2b41f14
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.processing.loading.row;
1: 
0: import java.nio.ByteBuffer;
1: 
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: /**
1:  * During sort procedure, each row will be written to sort temp file in this logic format.
1:  * an intermediate sort temp row consists 3 parts:
1:  * dictSort, noDictSort, noSortDimsAndMeasures(dictNoSort, noDictNoSort, measure)
1:  */
1: public class IntermediateSortTempRow {
1:   private int[] dictSortDims;
1:   private byte[][] noDictSortDims;
1:   private byte[] noSortDimsAndMeasures;
1: 
1:   public IntermediateSortTempRow(int[] dictSortDims, byte[][] noDictSortDims,
1:       byte[] noSortDimsAndMeasures) {
1:     this.dictSortDims = dictSortDims;
1:     this.noDictSortDims = noDictSortDims;
1:     this.noSortDimsAndMeasures = noSortDimsAndMeasures;
1:   }
1: 
1:   public int[] getDictSortDims() {
1:     return dictSortDims;
1:   }
1: 
1:   public byte[][] getNoDictSortDims() {
1:     return noDictSortDims;
1:   }
1: 
1:   public byte[] getNoSortDimsAndMeasures() {
1:     return noSortDimsAndMeasures;
1:   }
1: 
1:   /**
0:    * deserialize from bytes array to get the no sort fields
0:    * @param outDictNoSort stores the dict & no-sort fields
0:    * @param outNoDictNoSort stores the no-dict & no-sort fields, including complex
0:    * @param outMeasures stores the measure fields
0:    * @param dataTypes data type for the measure
1:    */
0:   public void unpackNoSortFromBytes(int[] outDictNoSort, byte[][] outNoDictNoSort,
0:       Object[] outMeasures, DataType[] dataTypes) {
0:     ByteBuffer rowBuffer = ByteBuffer.wrap(noSortDimsAndMeasures);
0:     // read dict_no_sort
0:     int dictNoSortCnt = outDictNoSort.length;
0:     for (int i = 0; i < dictNoSortCnt; i++) {
0:       outDictNoSort[i] = rowBuffer.getInt();
1:     }
1: 
0:     // read no_dict_no_sort (including complex)
0:     int noDictNoSortCnt = outNoDictNoSort.length;
0:     for (int i = 0; i < noDictNoSortCnt; i++) {
0:       short len = rowBuffer.getShort();
0:       byte[] bytes = new byte[len];
0:       rowBuffer.get(bytes);
0:       outNoDictNoSort[i] = bytes;
1:     }
1: 
0:     // read measure
0:     int measureCnt = outMeasures.length;
0:     DataType tmpDataType;
0:     Object tmpContent;
0:     for (short idx = 0 ; idx < measureCnt; idx++) {
0:       if ((byte) 0 == rowBuffer.get()) {
0:         outMeasures[idx] = null;
0:         continue;
1:       }
1: 
0:       tmpDataType = dataTypes[idx];
0:       if (DataTypes.BOOLEAN == tmpDataType) {
0:         if ((byte) 1 == rowBuffer.get()) {
0:           tmpContent = true;
0:         } else {
0:           tmpContent = false;
1:         }
0:       } else if (DataTypes.SHORT == tmpDataType) {
0:         tmpContent = rowBuffer.getShort();
0:       } else if (DataTypes.INT == tmpDataType) {
0:         tmpContent = rowBuffer.getInt();
0:       } else if (DataTypes.LONG == tmpDataType) {
0:         tmpContent = rowBuffer.getLong();
0:       } else if (DataTypes.DOUBLE == tmpDataType) {
0:         tmpContent = rowBuffer.getDouble();
0:       } else if (DataTypes.isDecimal(tmpDataType)) {
0:         short len = rowBuffer.getShort();
0:         byte[] decimalBytes = new byte[len];
0:         rowBuffer.get(decimalBytes);
0:         tmpContent = DataTypeUtil.byteToBigDecimal(decimalBytes);
0:       } else {
0:         throw new IllegalArgumentException("Unsupported data type: " + tmpDataType);
1:       }
0:       outMeasures[idx] = tmpContent;
1:     }
1:   }
1: 
1: 
1: }
commit:8d8b589
/////////////////////////////////////////////////////////////////////////
commit:21704cf
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.carbondata.processing.loading.row;
0: 
0: import java.nio.ByteBuffer;
0: 
0: import org.apache.carbondata.core.metadata.datatype.DataType;
0: import org.apache.carbondata.core.metadata.datatype.DataTypes;
0: import org.apache.carbondata.core.util.DataTypeUtil;
0: 
0: /**
0:  * During sort procedure, each row will be written to sort temp file in this logic format.
0:  * an intermediate sort temp row consists 3 parts:
0:  * dictSort, noDictSort, noSortDimsAndMeasures(dictNoSort, noDictNoSort, measure)
0:  */
0: public class IntermediateSortTempRow {
0:   private int[] dictSortDims;
0:   private byte[][] noDictSortDims;
0:   private byte[] noSortDimsAndMeasures;
0: 
0:   public IntermediateSortTempRow(int[] dictSortDims, byte[][] noDictSortDims,
0:       byte[] noSortDimsAndMeasures) {
0:     this.dictSortDims = dictSortDims;
0:     this.noDictSortDims = noDictSortDims;
0:     this.noSortDimsAndMeasures = noSortDimsAndMeasures;
0:   }
0: 
0:   public int[] getDictSortDims() {
0:     return dictSortDims;
0:   }
0: 
0:   public byte[][] getNoDictSortDims() {
0:     return noDictSortDims;
0:   }
0: 
0:   public byte[] getNoSortDimsAndMeasures() {
0:     return noSortDimsAndMeasures;
0:   }
0: 
0:   /**
0:    * deserialize from bytes array to get the no sort fields
0:    * @param outDictNoSort stores the dict & no-sort fields
0:    * @param outNoDictNoSort stores the no-dict & no-sort fields, including complex
0:    * @param outMeasures stores the measure fields
0:    * @param dataTypes data type for the measure
0:    */
0:   public void unpackNoSortFromBytes(int[] outDictNoSort, byte[][] outNoDictNoSort,
0:       Object[] outMeasures, DataType[] dataTypes) {
0:     ByteBuffer rowBuffer = ByteBuffer.wrap(noSortDimsAndMeasures);
0:     // read dict_no_sort
0:     int dictNoSortCnt = outDictNoSort.length;
0:     for (int i = 0; i < dictNoSortCnt; i++) {
0:       outDictNoSort[i] = rowBuffer.getInt();
0:     }
0: 
0:     // read no_dict_no_sort (including complex)
0:     int noDictNoSortCnt = outNoDictNoSort.length;
0:     for (int i = 0; i < noDictNoSortCnt; i++) {
0:       short len = rowBuffer.getShort();
0:       byte[] bytes = new byte[len];
0:       rowBuffer.get(bytes);
0:       outNoDictNoSort[i] = bytes;
0:     }
0: 
0:     // read measure
0:     int measureCnt = outMeasures.length;
0:     DataType tmpDataType;
0:     Object tmpContent;
0:     for (short idx = 0 ; idx < measureCnt; idx++) {
0:       if ((byte) 0 == rowBuffer.get()) {
0:         outMeasures[idx] = null;
0:         continue;
0:       }
0: 
0:       tmpDataType = dataTypes[idx];
0:       if (DataTypes.BOOLEAN == tmpDataType) {
0:         if ((byte) 1 == rowBuffer.get()) {
0:           tmpContent = true;
0:         } else {
0:           tmpContent = false;
0:         }
0:       } else if (DataTypes.SHORT == tmpDataType) {
0:         tmpContent = rowBuffer.getShort();
0:       } else if (DataTypes.INT == tmpDataType) {
0:         tmpContent = rowBuffer.getInt();
0:       } else if (DataTypes.LONG == tmpDataType) {
0:         tmpContent = rowBuffer.getLong();
0:       } else if (DataTypes.DOUBLE == tmpDataType) {
0:         tmpContent = rowBuffer.getDouble();
0:       } else if (DataTypes.isDecimal(tmpDataType)) {
0:         short len = rowBuffer.getShort();
0:         byte[] decimalBytes = new byte[len];
0:         rowBuffer.get(decimalBytes);
0:         tmpContent = DataTypeUtil.byteToBigDecimal(decimalBytes);
0:       } else {
0:         throw new IllegalArgumentException("Unsupported data type: " + tmpDataType);
0:       }
0:       outMeasures[idx] = tmpContent;
0:     }
0:   }
0: 
0: 
0: }
============================================================================