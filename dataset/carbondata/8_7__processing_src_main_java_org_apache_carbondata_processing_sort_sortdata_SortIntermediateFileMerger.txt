1:9aee980: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9aee980:  *
1:9aee980:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9aee980:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:9aee980:  */
1:349c59c: package org.apache.carbondata.processing.sort.sortdata;
1:9aee980: 
1:9aee980: import java.io.File;
1:9aee980: import java.util.ArrayList;
1:9aee980: import java.util.List;
1:66d0b39: import java.util.Random;
1:a734add: import java.util.concurrent.ExecutionException;
1:9aee980: import java.util.concurrent.ExecutorService;
1:9aee980: import java.util.concurrent.Executors;
1:a734add: import java.util.concurrent.Future;
1:9aee980: import java.util.concurrent.TimeUnit;
1:9aee980: 
1:9aee980: import org.apache.carbondata.common.logging.LogService;
1:9aee980: import org.apache.carbondata.common.logging.LogServiceFactory;
1:9aee980: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:a734add: import org.apache.carbondata.core.util.CarbonThreadFactory;
1:349c59c: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
1:9aee980: 
1:9aee980: /**
1:9aee980:  * It does mergesort intermediate files to big file.
1:9aee980:  */
1:9aee980: public class SortIntermediateFileMerger {
1:9aee980: 
1:9aee980:   private static final LogService LOGGER =
1:9aee980:       LogServiceFactory.getLogService(SortIntermediateFileMerger.class.getName());
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * executorService
1:9aee980:    */
1:9aee980:   private ExecutorService executorService;
1:9aee980:   /**
1:9aee980:    * procFiles
1:9aee980:    */
1:9aee980:   private List<File> procFiles;
1:9aee980: 
1:9aee980:   private SortParameters parameters;
1:9aee980: 
1:9aee980:   private final Object lockObject = new Object();
1:9aee980: 
1:a734add:   private List<Future<Void>> mergerTask;
1:a734add: 
1:9aee980:   public SortIntermediateFileMerger(SortParameters parameters) {
1:9aee980:     this.parameters = parameters;
1:9aee980:     // processed file list
1:9aee980:     this.procFiles = new ArrayList<File>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
1:a734add:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores(),
1:a734add:         new CarbonThreadFactory("SafeIntermediateMergerPool:" + parameters.getTableName()));
1:a734add:     mergerTask = new ArrayList<>();
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void addFileToMerge(File sortTempFile) {
1:9aee980:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:9aee980:     // intermediate merging of sort temp files will be triggered
1:9aee980:     synchronized (lockObject) {
1:9aee980:       procFiles.add(sortTempFile);
1:9aee980:     }
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void startMergingIfPossible() {
1:9aee980:     File[] fileList;
1:9aee980:     if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:9aee980:       synchronized (lockObject) {
1:9aee980:         fileList = procFiles.toArray(new File[procFiles.size()]);
1:9aee980:         this.procFiles = new ArrayList<File>();
1:9aee980:       }
1:4a79a86:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:4a79a86:       }
1:9aee980:       startIntermediateMerging(fileList);
1:9aee980:     }
1:9aee980:   }
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * Below method will be used to start the intermediate file merging
1:9aee980:    *
1:9aee980:    * @param intermediateFiles
1:9aee980:    */
1:9aee980:   private void startIntermediateMerging(File[] intermediateFiles) {
1:66d0b39:     int index = new Random().nextInt(parameters.getTempFileLocation().length);
1:66d0b39:     String chosenTempDir = parameters.getTempFileLocation()[index];
1:d5396b1:     File file = new File(chosenTempDir + File.separator + parameters.getTableName()
1:d5396b1:         + '_' + parameters.getRangeId() + '_' + System.nanoTime()
1:d5396b1:         + CarbonCommonConstants.MERGERD_EXTENSION);
1:9aee980:     IntermediateFileMerger merger = new IntermediateFileMerger(parameters, intermediateFiles, file);
1:a734add:     mergerTask.add(executorService.submit(merger));
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void finish() throws CarbonSortKeyAndGroupByException {
1:9aee980:     try {
1:9aee980:       executorService.shutdown();
1:9aee980:       executorService.awaitTermination(2, TimeUnit.DAYS);
1:9aee980:     } catch (InterruptedException e) {
1:9aee980:       throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ", e);
1:9aee980:     }
1:9aee980:     procFiles.clear();
1:9aee980:     procFiles = null;
1:a734add:     checkForFailure();
1:a734add:   }
1:a734add: 
1:a734add:   private void checkForFailure() throws CarbonSortKeyAndGroupByException {
1:a734add:     for (int i = 0; i < mergerTask.size(); i++) {
1:a734add:       try {
1:a734add:         mergerTask.get(i).get();
1:a734add:       } catch (InterruptedException | ExecutionException e) {
1:a734add:         LOGGER.error(e, e.getMessage());
1:a734add:         throw new CarbonSortKeyAndGroupByException(e);
1:a734add:       }
1:a734add:     }
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void close() {
1:a734add:     if (!executorService.isShutdown()) {
1:9aee980:       executorService.shutdownNow();
1:9aee980:     }
1:9aee980:   }
1:9aee980: 
1:9aee980: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1:     File file = new File(chosenTempDir + File.separator + parameters.getTableName()
1:         + '_' + parameters.getRangeId() + '_' + System.nanoTime()
1:         + CarbonCommonConstants.MERGERD_EXTENSION);
author:kumarvishal
-------------------------------------------------------------------------------
commit:a734add
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
1: import org.apache.carbondata.core.util.CarbonThreadFactory;
/////////////////////////////////////////////////////////////////////////
1:   private List<Future<Void>> mergerTask;
1: 
1:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores(),
1:         new CarbonThreadFactory("SafeIntermediateMergerPool:" + parameters.getTableName()));
1:     mergerTask = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     mergerTask.add(executorService.submit(merger));
/////////////////////////////////////////////////////////////////////////
1:     checkForFailure();
1:   }
1: 
1:   private void checkForFailure() throws CarbonSortKeyAndGroupByException {
1:     for (int i = 0; i < mergerTask.size(); i++) {
1:       try {
1:         mergerTask.get(i).get();
1:       } catch (InterruptedException | ExecutionException e) {
1:         LOGGER.error(e, e.getMessage());
1:         throw new CarbonSortKeyAndGroupByException(e);
1:       }
1:     }
1:     if (!executorService.isShutdown()) {
author:Jacky Li
-------------------------------------------------------------------------------
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.sort.sortdata;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.sort.exception.CarbonSortKeyAndGroupByException;
author:Raghunandan S
-------------------------------------------------------------------------------
commit:06b0d08
/////////////////////////////////////////////////////////////////////////
0:     executorService.execute(merger);
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:66d0b39
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     int index = new Random().nextInt(parameters.getTempFileLocation().length);
1:     String chosenTempDir = parameters.getTempFileLocation()[index];
0:         chosenTempDir + File.separator + parameters.getTableName() + System
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:       }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:9aee980
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.sortandgroupby.sortdata;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
0: import org.apache.carbondata.processing.sortandgroupby.exception.CarbonSortKeyAndGroupByException;
1: 
1: /**
1:  * It does mergesort intermediate files to big file.
1:  */
1: public class SortIntermediateFileMerger {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SortIntermediateFileMerger.class.getName());
1: 
1:   /**
1:    * executorService
1:    */
1:   private ExecutorService executorService;
1:   /**
1:    * procFiles
1:    */
1:   private List<File> procFiles;
1: 
1:   private SortParameters parameters;
1: 
1:   private final Object lockObject = new Object();
1: 
1:   public SortIntermediateFileMerger(SortParameters parameters) {
1:     this.parameters = parameters;
1:     // processed file list
1:     this.procFiles = new ArrayList<File>(CarbonCommonConstants.CONSTANT_SIZE_TEN);
0:     this.executorService = Executors.newFixedThreadPool(parameters.getNumberOfCores());
1:   }
1: 
1:   public void addFileToMerge(File sortTempFile) {
1:     // add sort temp filename to and arrayList. When the list size reaches 20 then
1:     // intermediate merging of sort temp files will be triggered
1:     synchronized (lockObject) {
1:       procFiles.add(sortTempFile);
1:     }
1:   }
1: 
1:   public void startMergingIfPossible() {
1:     File[] fileList;
1:     if (procFiles.size() >= parameters.getNumberOfIntermediateFileToBeMerged()) {
1:       synchronized (lockObject) {
1:         fileList = procFiles.toArray(new File[procFiles.size()]);
1:         this.procFiles = new ArrayList<File>();
1:       }
0:       LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
1:       startIntermediateMerging(fileList);
1:     }
1:   }
1: 
1:   /**
1:    * Below method will be used to start the intermediate file merging
1:    *
1:    * @param intermediateFiles
1:    */
1:   private void startIntermediateMerging(File[] intermediateFiles) {
0:     File file = new File(
0:         parameters.getTempFileLocation() + File.separator + parameters.getTableName() + System
0:             .nanoTime() + CarbonCommonConstants.MERGERD_EXTENSION);
1:     IntermediateFileMerger merger = new IntermediateFileMerger(parameters, intermediateFiles, file);
0:     executorService.submit(merger);
1:   }
1: 
1:   public void finish() throws CarbonSortKeyAndGroupByException {
1:     try {
1:       executorService.shutdown();
1:       executorService.awaitTermination(2, TimeUnit.DAYS);
1:     } catch (InterruptedException e) {
1:       throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ", e);
1:     }
1:     procFiles.clear();
1:     procFiles = null;
1:   }
1: 
1:   public void close() {
0:     if (executorService.isShutdown()) {
1:       executorService.shutdownNow();
1:     }
1:   }
1: 
1: }
============================================================================