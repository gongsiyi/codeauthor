1:d73f4bf: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:d73f4bf:  *
1:d73f4bf:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d73f4bf:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:d73f4bf:  */
1:d73f4bf: package org.apache.carbondata.core.keygenerator.directdictionary.timestamp;
4:d73f4bf: 
1:d73f4bf: import java.text.ParseException;
1:d73f4bf: import java.text.SimpleDateFormat;
1:d73f4bf: import java.util.Date;
1:ea04fce: import java.util.TimeZone;
1:d73f4bf: 
1:d73f4bf: import org.apache.carbondata.common.logging.LogService;
1:d73f4bf: import org.apache.carbondata.common.logging.LogServiceFactory;
1:d73f4bf: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:d73f4bf: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
1:ce09aaa: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:d73f4bf: 
1:d73f4bf: /**
1:d73f4bf:  * The class provides the method to generate dictionary key and getting the actual value from
1:d73f4bf:  * the dictionaryKey for direct dictionary column for TIMESTAMP type.
1:d73f4bf:  */
1:d73f4bf: public class DateDirectDictionaryGenerator implements DirectDictionaryGenerator {
1:d73f4bf: 
1:c33e5b2:   private static final int cutOffDate = Integer.MAX_VALUE >> 1;
1:ea04fce:   private static final long SECONDS_PER_DAY = 60 * 60 * 24L;
1:4030cfb:   public static final long MILLIS_PER_DAY = SECONDS_PER_DAY * 1000L;
1:d73f4bf: 
1:d73f4bf:   private ThreadLocal<SimpleDateFormat> simpleDateFormatLocal = new ThreadLocal<>();
1:d73f4bf: 
1:d73f4bf:   private String dateFormat;
1:d73f4bf: 
1:d73f4bf:   /**
1:425f820:    * min value supported for date type column
1:425f820:    */
1:425f820:   private static final long MIN_VALUE;
1:425f820:   /**
1:425f820:    * MAx value supported for date type column
1:425f820:    */
1:425f820:   private static final long MAX_VALUE;
1:425f820:   /**
1:d73f4bf:    * Logger instance
1:d73f4bf:    */
1:d73f4bf:   private static final LogService LOGGER =
1:d73f4bf:       LogServiceFactory.getLogService(DateDirectDictionaryGenerator.class.getName());
1:d73f4bf: 
1:425f820:   static {
1:425f820:     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
1:425f820:     df.setTimeZone(TimeZone.getTimeZone("GMT"));
1:425f820:     long minValue = 0;
1:425f820:     long maxValue = 0;
1:425f820:     try {
1:425f820:       minValue = df.parse("0001-01-01").getTime();
1:425f820:       maxValue = df.parse("9999-12-31").getTime();
1:425f820:     } catch (ParseException e) {
1:425f820:       // the Exception will not occur as constant value is being parsed
1:425f820:     }
1:425f820:     MIN_VALUE = minValue;
1:425f820:     MAX_VALUE = maxValue;
1:425f820:   }
1:d73f4bf:   public DateDirectDictionaryGenerator(String dateFormat) {
1:d73f4bf:     this.dateFormat = dateFormat;
1:d73f4bf:     initialize();
1:d73f4bf:   }
1:d73f4bf: 
1:d73f4bf:   /**
1:d73f4bf:    * The method take member String as input and converts
1:d73f4bf:    * and returns the dictionary key
1:d73f4bf:    *
1:d73f4bf:    * @param memberStr date format string
1:d73f4bf:    * @return dictionary value
1:d73f4bf:    */
1:d73f4bf:   @Override public int generateDirectSurrogateKey(String memberStr) {
1:d73f4bf:     if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:d73f4bf:         .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:d73f4bf:     }
1:d73f4bf:     return getDirectSurrogateForMember(memberStr);
1:d73f4bf:   }
1:d73f4bf: 
1:d73f4bf:   /**
1:d73f4bf:    * The method take member String as input and converts
1:d73f4bf:    * and returns the dictionary key
1:d73f4bf:    *
1:d73f4bf:    * @param memberStr date format string
1:d73f4bf:    * @return dictionary value
1:d73f4bf:    */
1:d73f4bf:   public int generateDirectSurrogateKey(String memberStr, String format) {
1:d73f4bf:     if (null == format) {
1:d73f4bf:       return generateDirectSurrogateKeyForNonTimestampType(memberStr);
1:d73f4bf:     } else {
1:d73f4bf:       if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:d73f4bf:           .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
1:cd7c210:         return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:d73f4bf:       }
1:d73f4bf:       return getDirectSurrogateForMember(memberStr);
1:d73f4bf:     }
1:d73f4bf:   }
1:d73f4bf: 
1:d73f4bf:   private int getDirectSurrogateForMember(String memberStr) {
1:d73f4bf:     Date dateToStr = null;
1:d73f4bf:     try {
1:d73f4bf:       SimpleDateFormat simpleDateFormat = simpleDateFormatLocal.get();
1:d73f4bf:       if (null == simpleDateFormat) {
1:d73f4bf:         initialize();
1:d73f4bf:         simpleDateFormat = simpleDateFormatLocal.get();
1:d73f4bf:       }
1:d73f4bf:       dateToStr = simpleDateFormat.parse(memberStr);
1:d73f4bf:     } catch (ParseException e) {
1:4a79a86:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug("Cannot convert value to Time/Long type value. Value considered as null." + e
1:4a79a86:             .getMessage());
1:4a79a86:       }
1:d73f4bf:       dateToStr = null;
1:d73f4bf:     }
1:d73f4bf:     //adding +2 to reserve the first cuttOffDiff value for null or empty date
1:d73f4bf:     if (null == dateToStr) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:d73f4bf:     } else {
1:d73f4bf:       return generateKey(dateToStr.getTime());
1:d73f4bf:     }
1:d73f4bf:   }
1:d73f4bf: 
1:d73f4bf:   /**
1:d73f4bf:    * The method take dictionary key as input and returns the
1:d73f4bf:    *
1:d73f4bf:    * @param key
1:d73f4bf:    * @return member value/actual value Date
1:d73f4bf:    */
1:d73f4bf:   @Override public Object getValueFromSurrogate(int key) {
1:cd7c210:     if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
1:d73f4bf:       return null;
1:d73f4bf:     }
1:d73f4bf:     return key - cutOffDate;
1:d73f4bf:   }
1:d73f4bf: 
1:d73f4bf:   private int generateDirectSurrogateKeyForNonTimestampType(String memberStr) {
1:d73f4bf:     long timeValue = -1;
1:d73f4bf:     try {
1:500654e:       timeValue = Long.parseLong(memberStr) / 1000;
1:d73f4bf:     } catch (NumberFormatException e) {
1:4a79a86:       if (LOGGER.isDebugEnabled()) {
1:4a79a86:         LOGGER.debug(
1:4a79a86:             "Cannot convert value to Long type value. Value considered as null." + e.getMessage());
1:4a79a86:       }
1:d73f4bf:     }
1:d73f4bf:     if (timeValue == -1) {
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:d73f4bf:     } else {
1:d73f4bf:       return generateKey(timeValue);
1:d73f4bf:     }
1:d73f4bf:   }
1:d73f4bf: 
1:2f23486:   public int generateKey(long timeValue) {
1:425f820:     if (timeValue < MIN_VALUE || timeValue > MAX_VALUE) {
1:425f820:       if (LOGGER.isDebugEnabled()) {
1:425f820:         LOGGER.debug("Value for date type column is not in valid range. Value considered as null.");
1:425f820:       }
1:cd7c210:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
1:425f820:     }
1:4030cfb:     return (int) Math.floor((double) timeValue / MILLIS_PER_DAY) + cutOffDate;
1:d73f4bf:   }
1:d73f4bf: 
1:ea04fce:   public void initialize() {
1:d73f4bf:     if (simpleDateFormatLocal.get() == null) {
1:d73f4bf:       simpleDateFormatLocal.set(new SimpleDateFormat(dateFormat));
1:d73f4bf:       simpleDateFormatLocal.get().setLenient(false);
1:4030cfb:       simpleDateFormatLocal.get().setTimeZone(TimeZone.getTimeZone("GMT"));
1:d73f4bf:     }
1:d73f4bf:   }
1:d73f4bf: 
1:376d69f:   @Override public DataType getReturnType() {
1:956833e:     return DataTypes.INT;
1:d73f4bf:   }
1:d73f4bf: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:cd7c210
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:         return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:     if (key == CarbonCommonConstants.DIRECT_DICT_VALUE_NULL) {
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
/////////////////////////////////////////////////////////////////////////
1:       return CarbonCommonConstants.DIRECT_DICT_VALUE_NULL;
author:kunal642
-------------------------------------------------------------------------------
commit:2f23486
/////////////////////////////////////////////////////////////////////////
1:   public int generateKey(long timeValue) {
author:mohammadshahidkhan
-------------------------------------------------------------------------------
commit:425f820
/////////////////////////////////////////////////////////////////////////
1:    * min value supported for date type column
1:    */
1:   private static final long MIN_VALUE;
1:   /**
1:    * MAx value supported for date type column
1:    */
1:   private static final long MAX_VALUE;
1:   /**
1:   static {
1:     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
1:     df.setTimeZone(TimeZone.getTimeZone("GMT"));
1:     long minValue = 0;
1:     long maxValue = 0;
1:     try {
1:       minValue = df.parse("0001-01-01").getTime();
1:       maxValue = df.parse("9999-12-31").getTime();
1:     } catch (ParseException e) {
1:       // the Exception will not occur as constant value is being parsed
1:     }
1:     MIN_VALUE = minValue;
1:     MAX_VALUE = maxValue;
1:   }
/////////////////////////////////////////////////////////////////////////
1:     if (timeValue < MIN_VALUE || timeValue > MAX_VALUE) {
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Value for date type column is not in valid range. Value considered as null.");
1:       }
0:       return 1;
1:     }
commit:4a79a86
/////////////////////////////////////////////////////////////////////////
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug("Cannot convert value to Time/Long type value. Value considered as null." + e
1:             .getMessage());
1:       }
/////////////////////////////////////////////////////////////////////////
1:       if (LOGGER.isDebugEnabled()) {
1:         LOGGER.debug(
1:             "Cannot convert value to Long type value. Value considered as null." + e.getMessage());
1:       }
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return DataTypes.INT;
author:Ravindra Pesala
-------------------------------------------------------------------------------
commit:4030cfb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static final long MILLIS_PER_DAY = SECONDS_PER_DAY * 1000L;
/////////////////////////////////////////////////////////////////////////
1:     return (int) Math.floor((double) timeValue / MILLIS_PER_DAY) + cutOffDate;
1:       simpleDateFormatLocal.get().setTimeZone(TimeZone.getTimeZone("GMT"));
author:sraghunandan
-------------------------------------------------------------------------------
commit:500654e
/////////////////////////////////////////////////////////////////////////
1:       timeValue = Long.parseLong(memberStr) / 1000;
author:QiangCai
-------------------------------------------------------------------------------
commit:81149f6
/////////////////////////////////////////////////////////////////////////
0:     return (int) Math.floor((double) milli / MILLIS_PER_DAY) + cutOffDate;
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:d73f4bf
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.carbondata.core.keygenerator.directdictionary.timestamp;
1: 
1: import java.text.ParseException;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.keygenerator.directdictionary.DirectDictionaryGenerator;
0: import org.apache.carbondata.core.util.CarbonProperties;
1: 
1: /**
1:  * The class provides the method to generate dictionary key and getting the actual value from
1:  * the dictionaryKey for direct dictionary column for TIMESTAMP type.
1:  */
1: public class DateDirectDictionaryGenerator implements DirectDictionaryGenerator {
1: 
0:   static final int cutOffDate = Integer.MAX_VALUE >> 1;
0:   static final long SECONDS_PER_DAY = 60 * 60 * 24L;
0:   static final long  MILLIS_PER_DAY = SECONDS_PER_DAY * 1000L;
1: 
1: 
1:   private ThreadLocal<SimpleDateFormat> simpleDateFormatLocal = new ThreadLocal<>();
1: 
1:   private String dateFormat;
1: 
1:   /**
1:    * Logger instance
1:    */
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(DateDirectDictionaryGenerator.class.getName());
1: 
1: 
1:   public DateDirectDictionaryGenerator(String dateFormat) {
1:     this.dateFormat = dateFormat;
1:     initialize();
1:   }
1: 
0:   public DateDirectDictionaryGenerator() {
0:     this(CarbonProperties.getInstance()
0:             .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
0:                     CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:   }
1: 
1:   /**
1:    * The method take member String as input and converts
1:    * and returns the dictionary key
1:    *
1:    * @param memberStr date format string
1:    * @return dictionary value
1:    */
1:   @Override public int generateDirectSurrogateKey(String memberStr) {
1:     if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:         .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
0:       return 1;
1:     }
1:     return getDirectSurrogateForMember(memberStr);
1:   }
1: 
1:   /**
1:    * The method take member String as input and converts
1:    * and returns the dictionary key
1:    *
1:    * @param memberStr date format string
1:    * @return dictionary value
1:    */
1:   public int generateDirectSurrogateKey(String memberStr, String format) {
1:     if (null == format) {
1:       return generateDirectSurrogateKeyForNonTimestampType(memberStr);
1:     } else {
1:       if (null == memberStr || memberStr.trim().isEmpty() || memberStr
1:           .equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {
0:         return 1;
1:       }
1:       return getDirectSurrogateForMember(memberStr);
1:     }
1:   }
1: 
1:   private int getDirectSurrogateForMember(String memberStr) {
1:     Date dateToStr = null;
1:     try {
1:       SimpleDateFormat simpleDateFormat = simpleDateFormatLocal.get();
1:       if (null == simpleDateFormat) {
1:         initialize();
1:         simpleDateFormat = simpleDateFormatLocal.get();
1:       }
1:       dateToStr = simpleDateFormat.parse(memberStr);
1:     } catch (ParseException e) {
0:       LOGGER.debug(
0:           "Cannot convert " + memberStr + " to Time/Long type value. Value considered as null." + e
0:               .getMessage());
1:       dateToStr = null;
1:     }
1:     //adding +2 to reserve the first cuttOffDiff value for null or empty date
1:     if (null == dateToStr) {
0:       return 1;
1:     } else {
1:       return generateKey(dateToStr.getTime());
1:     }
1:   }
1: 
1:   /**
1:    * The method take dictionary key as input and returns the
1:    *
1:    * @param key
1:    * @return member value/actual value Date
1:    */
1:   @Override public Object getValueFromSurrogate(int key) {
0:     if (key == 1) {
1:       return null;
1:     }
1:     return key - cutOffDate;
1:   }
1: 
1:   private int generateDirectSurrogateKeyForNonTimestampType(String memberStr) {
1:     long timeValue = -1;
1:     try {
0:       timeValue = Long.valueOf(memberStr) / 1000;
1:     } catch (NumberFormatException e) {
0:       LOGGER.debug(
0:           "Cannot convert " + memberStr + " Long type value. Value considered as null." + e
0:               .getMessage());
1:     }
1:     if (timeValue == -1) {
0:       return 1;
1:     } else {
1:       return generateKey(timeValue);
1:     }
1:   }
1: 
0:   private int generateKey(long timeValue) {
0:     int key = (int)Math.floor((double)timeValue / MILLIS_PER_DAY) + cutOffDate;
0:     return key;
1:   }
1: 
0:   public void initialize(){
1:     if (simpleDateFormatLocal.get() == null) {
1:       simpleDateFormatLocal.set(new SimpleDateFormat(dateFormat));
1:       simpleDateFormatLocal.get().setLenient(false);
1:     }
1:   }
1: 
1: }
author:kumarvishal
-------------------------------------------------------------------------------
commit:c33e5b2
/////////////////////////////////////////////////////////////////////////
1:   private static final int cutOffDate = Integer.MAX_VALUE >> 1;
/////////////////////////////////////////////////////////////////////////
0:     return key - cutOffDate;
/////////////////////////////////////////////////////////////////////////
0:     int key = (int) Math.floor((double) milli / MILLIS_PER_DAY) + cutOffDate;
commit:ea04fce
/////////////////////////////////////////////////////////////////////////
0: import java.util.Calendar;
1: import java.util.TimeZone;
/////////////////////////////////////////////////////////////////////////
1:   private static final long SECONDS_PER_DAY = 60 * 60 * 24L;
0:   private static final long MILLIS_PER_DAY = SECONDS_PER_DAY * 1000L;
0:   //Java TimeZone has no mention of thread safety. Use thread local instance to be safe.
0:   private ThreadLocal<TimeZone> threadLocalLocalTimeZone = new ThreadLocal() {
0:     @Override protected TimeZone initialValue() {
0:       return Calendar.getInstance().getTimeZone();
0:     }
0:   };
/////////////////////////////////////////////////////////////////////////
0:     this(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
0:         CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
/////////////////////////////////////////////////////////////////////////
0:     return key;
/////////////////////////////////////////////////////////////////////////
0:       LOGGER.debug("Cannot convert " + memberStr + " Long type value. Value considered as null." + e
0:           .getMessage());
/////////////////////////////////////////////////////////////////////////
0:     long milli = timeValue + threadLocalLocalTimeZone.get().getOffset(timeValue);
0:     int key = (int) Math.floor((double) milli / MILLIS_PER_DAY);
1:   public void initialize() {
author:jackylk
-------------------------------------------------------------------------------
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
author:ravipesala
-------------------------------------------------------------------------------
commit:376d69f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.carbondata.core.carbon.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
1:   @Override public DataType getReturnType() {
0:     return DataType.INT;
0:   }
============================================================================