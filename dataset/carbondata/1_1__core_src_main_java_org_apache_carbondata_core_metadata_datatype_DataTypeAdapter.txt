1:03ddcc8: /*
1:03ddcc8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:03ddcc8:  * contributor license agreements.  See the NOTICE file distributed with
1:03ddcc8:  * this work for additional information regarding copyright ownership.
1:03ddcc8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:03ddcc8:  * (the "License"); you may not use this file except in compliance with
1:03ddcc8:  * the License.  You may obtain a copy of the License at
1:03ddcc8:  *
1:03ddcc8:  *    http://www.apache.org/licenses/LICENSE-2.0
1:03ddcc8:  *
1:03ddcc8:  * Unless required by applicable law or agreed to in writing, software
1:03ddcc8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:03ddcc8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:03ddcc8:  * See the License for the specific language governing permissions and
1:03ddcc8:  * limitations under the License.
1:03ddcc8:  */
1:03ddcc8: 
1:03ddcc8: package org.apache.carbondata.core.metadata.datatype;
1:03ddcc8: 
1:03ddcc8: import java.io.IOException;
1:03ddcc8: 
1:03ddcc8: import org.apache.carbondata.core.util.DataTypeUtil;
1:03ddcc8: 
1:03ddcc8: import com.google.gson.Gson;
1:03ddcc8: import com.google.gson.TypeAdapter;
1:03ddcc8: import com.google.gson.stream.JsonReader;
1:03ddcc8: import com.google.gson.stream.JsonToken;
1:03ddcc8: import com.google.gson.stream.JsonWriter;
1:03ddcc8: 
1:03ddcc8: /**
1:03ddcc8:  * This class is added to support backward compatibility with table info object, where DATATYPE
1:03ddcc8:  * is string in old version(1.2) and OBJECT in new version(1.3)
1:03ddcc8:  */
1:03ddcc8: public class DataTypeAdapter extends TypeAdapter<Object> {
1:03ddcc8: 
1:03ddcc8:   private Gson fallBack_original = new Gson();
1:03ddcc8: 
1:03ddcc8:   @Override public void write(JsonWriter jsonWriter, Object o) throws IOException {
1:03ddcc8:   }
1:03ddcc8: 
1:03ddcc8:   @Override public Object read(JsonReader jsonReader) throws IOException {
1:03ddcc8:     JsonToken token = jsonReader.peek();
1:03ddcc8:     if (token == JsonToken.STRING) {
1:03ddcc8:       return DataTypeUtil.valueOf(jsonReader.nextString());
1:03ddcc8:     } else {
1:03ddcc8:       // use original deserializer logic
1:03ddcc8:       return fallBack_original.fromJson(jsonReader, DataType.class);
1:03ddcc8:     }
1:03ddcc8:   }
1:03ddcc8: 
1:03ddcc8: }
============================================================================
author:akashrn5
-------------------------------------------------------------------------------
commit:03ddcc8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.datatype;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.carbondata.core.util.DataTypeUtil;
1: 
1: import com.google.gson.Gson;
1: import com.google.gson.TypeAdapter;
1: import com.google.gson.stream.JsonReader;
1: import com.google.gson.stream.JsonToken;
1: import com.google.gson.stream.JsonWriter;
1: 
1: /**
1:  * This class is added to support backward compatibility with table info object, where DATATYPE
1:  * is string in old version(1.2) and OBJECT in new version(1.3)
1:  */
1: public class DataTypeAdapter extends TypeAdapter<Object> {
1: 
1:   private Gson fallBack_original = new Gson();
1: 
1:   @Override public void write(JsonWriter jsonWriter, Object o) throws IOException {
1:   }
1: 
1:   @Override public Object read(JsonReader jsonReader) throws IOException {
1:     JsonToken token = jsonReader.peek();
1:     if (token == JsonToken.STRING) {
1:       return DataTypeUtil.valueOf(jsonReader.nextString());
1:     } else {
1:       // use original deserializer logic
1:       return fallBack_original.fromJson(jsonReader, DataType.class);
1:     }
1:   }
1: 
1: }
============================================================================