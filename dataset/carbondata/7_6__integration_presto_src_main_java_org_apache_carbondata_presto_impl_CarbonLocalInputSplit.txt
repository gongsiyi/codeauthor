1:0e93a3f: /*
1:0e93a3f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0e93a3f:  * contributor license agreements.  See the NOTICE file distributed with
1:0e93a3f:  * this work for additional information regarding copyright ownership.
1:0e93a3f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0e93a3f:  * (the "License"); you may not use this file except in compliance with
1:0e93a3f:  * the License.  You may obtain a copy of the License at
1:0e93a3f:  *
1:0e93a3f:  *    http://www.apache.org/licenses/LICENSE-2.0
1:0e93a3f:  *
1:0e93a3f:  * Unless required by applicable law or agreed to in writing, software
1:0e93a3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0e93a3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0e93a3f:  * See the License for the specific language governing permissions and
1:0e93a3f:  * limitations under the License.
1:0e93a3f:  */
1:9c83bd1: 
1:0e93a3f: package org.apache.carbondata.presto.impl;
6:0e93a3f: 
1:6094af6: import java.io.IOException;
1:b699ee6: import java.util.List;
1:b699ee6: 
1:9c83bd1: import org.apache.carbondata.core.indexstore.BlockletDetailInfo;
1:9c83bd1: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1:9c83bd1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1:0e93a3f: 
1:d4a1577: import com.fasterxml.jackson.annotation.JsonCreator;
1:d4a1577: import com.fasterxml.jackson.annotation.JsonProperty;
1:d4a1577: import com.google.gson.Gson;
1:d4a1577: 
1:d4a1577: import org.apache.hadoop.fs.Path;
1:d4a1577: 
1:b699ee6: /**
1:b699ee6:  * CarbonLocalInputSplit represents a block, it contains a set of blocklet.
1:b699ee6:  */
1:0e93a3f: public class CarbonLocalInputSplit {
1:9c83bd1: 
1:0e93a3f:   private static final long serialVersionUID = 3520344046772190207L;
1:0e93a3f:   private String segmentId;
1:0e93a3f:   private String path;
1:b699ee6:   private long start; // the start offset of the block in a carbondata file.
1:b699ee6:   private long length; // the length of the block.
1:b699ee6:   private List<String> locations;// locations are the locations for different replicas.
1:0e93a3f:   private short version;
1:9c83bd1:   private String[] deleteDeltaFiles;
1:01b48fc:   private String blockletId;
1:9c83bd1: 
1:9c83bd1: 
1:9c83bd1:   private String detailInfo;
1:0e93a3f: 
1:0e93a3f:   /**
1:0e93a3f:    * Number of BlockLets in a block
1:0e93a3f:    */
1:0e93a3f:   private int numberOfBlocklets = 0;
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public short getVersion() {
1:0e93a3f:     return version;
1:0e93a3f:   }
1:9c83bd1: 
1:0e93a3f:   @JsonProperty public List<String> getLocations() {
1:0e93a3f:     return locations;
1:0e93a3f:   }
1:7ef9164: 
1:0e93a3f:   @JsonProperty public long getLength() {
1:0e93a3f:     return length;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public long getStart() {
1:0e93a3f:     return start;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public String getPath() {
1:0e93a3f:     return path;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public String getSegmentId() {
1:0e93a3f:     return segmentId;
1:0e93a3f:   }
1:0e93a3f: 
1:0e93a3f:   @JsonProperty public int getNumberOfBlocklets() {
1:0e93a3f:     return numberOfBlocklets;
1:0e93a3f:   }
1:0e93a3f: 
1:9c83bd1:   @JsonProperty public String[] getDeleteDeltaFiles() {
1:9c83bd1:     return deleteDeltaFiles;
1:9c83bd1:   }
1:9c83bd1: 
1:9c83bd1:   @JsonProperty public String getDetailInfo() {
1:9c83bd1:     return detailInfo;
1:9c83bd1:   }
1:9c83bd1: 
1:01b48fc:   @JsonProperty public String getBlockletId() {
1:01b48fc:     return blockletId;
1:01b48fc:   }
1:01b48fc: 
1:9c83bd1:   public void setDetailInfo(BlockletDetailInfo blockletDetailInfo) {
1:9c83bd1:     Gson gson = new Gson();
1:9c83bd1:     detailInfo = gson.toJson(blockletDetailInfo);
1:9c83bd1: 
1:9c83bd1:   }
1:9c83bd1: 
1:0e93a3f:   @JsonCreator public CarbonLocalInputSplit(@JsonProperty("segmentId") String segmentId,
1:0e93a3f:       @JsonProperty("path") String path, @JsonProperty("start") long start,
1:0e93a3f:       @JsonProperty("length") long length, @JsonProperty("locations") List<String> locations,
1:0e93a3f:       @JsonProperty("numberOfBlocklets") int numberOfBlocklets/*,
1:0e93a3f:                                  @JsonProperty("tableBlockInfo") TableBlockInfo tableBlockInfo*/,
1:9c83bd1:       @JsonProperty("version") short version,
1:9c83bd1:       @JsonProperty("deleteDeltaFiles") String[] deleteDeltaFiles,
1:01b48fc:       @JsonProperty("blockletId") String blockletId,
1:9c83bd1:       @JsonProperty("detailInfo") String detailInfo
1:9c83bd1:   ) {
1:0e93a3f:     this.path = path;
1:0e93a3f:     this.start = start;
1:0e93a3f:     this.length = length;
1:0e93a3f:     this.segmentId = segmentId;
1:0e93a3f:     this.locations = locations;
1:0e93a3f:     this.numberOfBlocklets = numberOfBlocklets;
1:0e93a3f:     //this.tableBlockInfo = tableBlockInfo;
1:0e93a3f:     this.version = version;
1:9c83bd1:     this.deleteDeltaFiles = deleteDeltaFiles;
1:01b48fc:     this.blockletId = blockletId;
1:9c83bd1:     this.detailInfo = detailInfo;
1:9c83bd1: 
1:0e93a3f:   }
1:9c83bd1: 
1:7ef9164:   public static CarbonInputSplit convertSplit(CarbonLocalInputSplit carbonLocalInputSplit) {
1:01b48fc:     CarbonInputSplit inputSplit = new CarbonInputSplit(carbonLocalInputSplit.getSegmentId(),
1:01b48fc:         carbonLocalInputSplit.getBlockletId(), new Path(carbonLocalInputSplit.getPath()),
1:01b48fc:         carbonLocalInputSplit.getStart(), carbonLocalInputSplit.getLength(),
1:01b48fc:         carbonLocalInputSplit.getLocations()
1:01b48fc:             .toArray(new String[carbonLocalInputSplit.getLocations().size()]),
1:7ef9164:         carbonLocalInputSplit.getNumberOfBlocklets(),
1:7ef9164:         ColumnarFormatVersion.valueOf(carbonLocalInputSplit.getVersion()),
1:9c83bd1:         carbonLocalInputSplit.getDeleteDeltaFiles());
1:9c83bd1:     Gson gson = new Gson();
1:7ef9164:     BlockletDetailInfo blockletDetailInfo =
1:7ef9164:         gson.fromJson(carbonLocalInputSplit.detailInfo, BlockletDetailInfo.class);
1:7ef9164:     if (null == blockletDetailInfo) {
1:7ef9164:       throw new RuntimeException("Could not read blocklet details");
1:7ef9164:     }
1:6094af6:     try {
1:6094af6:       blockletDetailInfo.readColumnSchema(blockletDetailInfo.getColumnSchemaBinary());
1:6094af6:     } catch (IOException e) {
1:6094af6:       throw new RuntimeException(e);
1:6094af6:     }
1:9c83bd1:     inputSplit.setDetailInfo(blockletDetailInfo);
1:9c83bd1:     return inputSplit;
1:9c83bd1:   }
1:01b48fc: 
1:01b48fc: 
1:0e93a3f: }
============================================================================
author:ajantha-bhat
-------------------------------------------------------------------------------
commit:d4a1577
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.fasterxml.jackson.annotation.JsonCreator;
1: import com.fasterxml.jackson.annotation.JsonProperty;
1: import com.google.gson.Gson;
1: 
1: import org.apache.hadoop.fs.Path;
1: 
author:Bhavya
-------------------------------------------------------------------------------
commit:01b48fc
/////////////////////////////////////////////////////////////////////////
1:   private String blockletId;
/////////////////////////////////////////////////////////////////////////
1:   @JsonProperty public String getBlockletId() {
1:     return blockletId;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       @JsonProperty("blockletId") String blockletId,
/////////////////////////////////////////////////////////////////////////
1:     this.blockletId = blockletId;
1:     CarbonInputSplit inputSplit = new CarbonInputSplit(carbonLocalInputSplit.getSegmentId(),
1:         carbonLocalInputSplit.getBlockletId(), new Path(carbonLocalInputSplit.getPath()),
1:         carbonLocalInputSplit.getStart(), carbonLocalInputSplit.getLength(),
1:         carbonLocalInputSplit.getLocations()
1:             .toArray(new String[carbonLocalInputSplit.getLocations().size()]),
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:9c83bd1
/////////////////////////////////////////////////////////////////////////
0: import com.google.gson.Gson;
0: import org.apache.hadoop.fs.Path;
1: import org.apache.carbondata.core.indexstore.BlockletDetailInfo;
1: import org.apache.carbondata.core.metadata.ColumnarFormatVersion;
1: import org.apache.carbondata.hadoop.CarbonInputSplit;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private String[] deleteDeltaFiles;
1: 
1: 
1:   private String detailInfo;
/////////////////////////////////////////////////////////////////////////
1:   @JsonProperty public String[] getDeleteDeltaFiles() {
1:     return deleteDeltaFiles;
1:   }
1: 
1:   @JsonProperty public String getDetailInfo() {
1:     return detailInfo;
1:   }
1: 
1:   public void setDetailInfo(BlockletDetailInfo blockletDetailInfo) {
1:     Gson gson = new Gson();
1:     detailInfo = gson.toJson(blockletDetailInfo);
1: 
1:   }
1: 
1:       @JsonProperty("version") short version,
1:       @JsonProperty("deleteDeltaFiles") String[] deleteDeltaFiles,
1:       @JsonProperty("detailInfo") String detailInfo
1:       ) {
/////////////////////////////////////////////////////////////////////////
1:     this.deleteDeltaFiles = deleteDeltaFiles;
1:     this.detailInfo = detailInfo;
1: 
1: 
0:   public static  CarbonInputSplit convertSplit(CarbonLocalInputSplit carbonLocalInputSplit) {
0:     CarbonInputSplit inputSplit = new CarbonInputSplit(carbonLocalInputSplit.getSegmentId(),
0:         new Path(carbonLocalInputSplit.getPath()), carbonLocalInputSplit.getStart(),
0:         carbonLocalInputSplit.getLength(), carbonLocalInputSplit.getLocations()
0:         .toArray(new String[carbonLocalInputSplit.getLocations().size()]),
0:         carbonLocalInputSplit.getNumberOfBlocklets(), ColumnarFormatVersion.valueOf(carbonLocalInputSplit.getVersion()),
1:         carbonLocalInputSplit.getDeleteDeltaFiles());
1:     Gson gson = new Gson();
0:     BlockletDetailInfo blockletDetailInfo = gson.fromJson(carbonLocalInputSplit.detailInfo, BlockletDetailInfo.class);
1:     inputSplit.setDetailInfo(blockletDetailInfo);
1:     return inputSplit;
1:   }
1: 
1: 
author:Raghunandan S
-------------------------------------------------------------------------------
commit:7ef9164
/////////////////////////////////////////////////////////////////////////
1:   public static CarbonInputSplit convertSplit(CarbonLocalInputSplit carbonLocalInputSplit) {
1:         carbonLocalInputSplit.getNumberOfBlocklets(),
1:         ColumnarFormatVersion.valueOf(carbonLocalInputSplit.getVersion()),
1:     BlockletDetailInfo blockletDetailInfo =
1:         gson.fromJson(carbonLocalInputSplit.detailInfo, BlockletDetailInfo.class);
1: 
1:     if (null == blockletDetailInfo) {
1:       throw new RuntimeException("Could not read blocklet details");
1:     }
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:6094af6
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       blockletDetailInfo.readColumnSchema(blockletDetailInfo.getColumnSchemaBinary());
1:     } catch (IOException e) {
1:       throw new RuntimeException(e);
1:     }
author:anubhav100
-------------------------------------------------------------------------------
commit:0c8fa59
/////////////////////////////////////////////////////////////////////////
0:   ) {
/////////////////////////////////////////////////////////////////////////
0:     CarbonInputSplit inputSplit = new CarbonInputSplit(carbonLocalInputSplit.getSegmentId(), "0",
author:bianhq
-------------------------------------------------------------------------------
commit:b699ee6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: /**
1:  * CarbonLocalInputSplit represents a block, it contains a set of blocklet.
1:  */
1:   private long start; // the start offset of the block in a carbondata file.
1:   private long length; // the length of the block.
1:   private List<String> locations;// locations are the locations for different replicas.
author:chenliang613
-------------------------------------------------------------------------------
commit:0e93a3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.presto.impl;
1: 
0: import java.util.List;
1: 
0: import com.fasterxml.jackson.annotation.JsonCreator;
0: import com.fasterxml.jackson.annotation.JsonProperty;
1: 
1: public class CarbonLocalInputSplit {
1: 
1:   private static final long serialVersionUID = 3520344046772190207L;
1:   private String segmentId;
1:   private String path;
0:   private long start;
0:   private long length;
0:   private List<String> locations;
1:   private short version;
1: 
1:   /**
1:    * Number of BlockLets in a block
1:    */
1:   private int numberOfBlocklets = 0;
1: 
1:   @JsonProperty public short getVersion() {
1:     return version;
1:   }
1: 
1:   @JsonProperty public List<String> getLocations() {
1:     return locations;
1:   }
1: 
1:   @JsonProperty public long getLength() {
1:     return length;
1:   }
1: 
1:   @JsonProperty public long getStart() {
1:     return start;
1:   }
1: 
1:   @JsonProperty public String getPath() {
1:     return path;
1:   }
1: 
1:   @JsonProperty public String getSegmentId() {
1:     return segmentId;
1:   }
1: 
1:   @JsonProperty public int getNumberOfBlocklets() {
1:     return numberOfBlocklets;
1:   }
1: 
1:   @JsonCreator public CarbonLocalInputSplit(@JsonProperty("segmentId") String segmentId,
1:       @JsonProperty("path") String path, @JsonProperty("start") long start,
1:       @JsonProperty("length") long length, @JsonProperty("locations") List<String> locations,
1:       @JsonProperty("numberOfBlocklets") int numberOfBlocklets/*,
1:                                  @JsonProperty("tableBlockInfo") TableBlockInfo tableBlockInfo*/,
0:       @JsonProperty("version") short version) {
1:     this.path = path;
1:     this.start = start;
1:     this.length = length;
1:     this.segmentId = segmentId;
1:     this.locations = locations;
1:     this.numberOfBlocklets = numberOfBlocklets;
1:     //this.tableBlockInfo = tableBlockInfo;
1:     this.version = version;
1:   }
1: }
commit:7ee8e27
/////////////////////////////////////////////////////////////////////////
commit:2712330
/////////////////////////////////////////////////////////////////////////
0:   private static final long serialVersionUID = 3520344046772190207L;
0:   private String segmentId;
0:   private String path;
0:   private long start;
0:   private long length;
0:   private List<String> locations;
0:   private short version;
0:   /**
0:    * Number of BlockLets in a block
0:    */
0:   private int numberOfBlocklets = 0;
0:   @JsonProperty public short getVersion() {
0:     return version;
0:   }
0:   @JsonProperty public List<String> getLocations() {
0:     return locations;
0:   }
0:   @JsonProperty public long getLength() {
0:     return length;
0:   }
0:   @JsonProperty public long getStart() {
0:     return start;
0:   }
0:   @JsonProperty public String getPath() {
0:     return path;
0:   }
0:   @JsonProperty public String getSegmentId() {
0:     return segmentId;
0:   }
0:   @JsonProperty public int getNumberOfBlocklets() {
0:     return numberOfBlocklets;
0:   }
0:   @JsonCreator public CarbonLocalInputSplit(@JsonProperty("segmentId") String segmentId,
0:       @JsonProperty("path") String path, @JsonProperty("start") long start,
0:       @JsonProperty("length") long length, @JsonProperty("locations") List<String> locations,
0:       @JsonProperty("numberOfBlocklets") int numberOfBlocklets/*,
0:       @JsonProperty("version") short version) {
0:     this.path = path;
0:     this.start = start;
0:     this.length = length;
0:     this.segmentId = segmentId;
0:     this.locations = locations;
0:     this.numberOfBlocklets = numberOfBlocklets;
0:     //this.tableBlockInfo = tableBlockInfo;
0:     this.version = version;
0:   }
commit:32bf296
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *    http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: 
0: package org.apache.carbondata.presto.impl;
0: 
0: import java.util.List;
commit:9d7dbea
============================================================================