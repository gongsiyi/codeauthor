1:d5396b1: /*
1:d5396b1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5396b1:  * contributor license agreements.  See the NOTICE file distributed with
1:d5396b1:  * this work for additional information regarding copyright ownership.
1:d5396b1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5396b1:  * (the "License"); you may not use this file except in compliance with
1:d5396b1:  * the License.  You may obtain a copy of the License at
1:d5396b1:  *
1:d5396b1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:d5396b1:  *
1:d5396b1:  * Unless required by applicable law or agreed to in writing, software
1:d5396b1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5396b1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5396b1:  * See the License for the specific language governing permissions and
1:d5396b1:  * limitations under the License.
1:d5396b1:  */
1:d5396b1: 
1:d5396b1: package org.apache.carbondata.core.metadata.schema;
1:d5396b1: 
1:d5396b1: import java.io.Serializable;
1:d5396b1: import java.util.Arrays;
1:d5396b1: 
1:d5396b1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1:d5396b1: 
1:d5396b1: /**
1:d5396b1:  * column ranges specified by sort column bounds
1:d5396b1:  */
1:d5396b1: @InterfaceAudience.Internal
1:d5396b1: public class SortColumnRangeInfo implements ColumnRangeInfo, Serializable {
1:d5396b1:   private static final long serialVersionUID = 1L;
1:d5396b1:   // indices for the sort columns in the raw row
1:d5396b1:   private int[] sortColumnIndex;
1:d5396b1:   // is the sort column no dictionary encoded
1:d5396b1:   private boolean[] isSortColumnNoDict;
1:d5396b1:   // each literal sort column bounds specified by user
1:d5396b1:   private String[] userSpecifiedRanges;
1:d5396b1:   // separator for the field values in each bound
1:d5396b1:   private String separator;
1:d5396b1:   // number of value ranges for the columns
1:d5396b1:   private int numOfRanges;
1:d5396b1: 
1:d5396b1:   public SortColumnRangeInfo(int[] sortColumnIndex, boolean[] isSortColumnNoDict,
1:d5396b1:       String[] userSpecifiedRanges, String separator) {
1:d5396b1:     this.sortColumnIndex = sortColumnIndex;
1:d5396b1:     this.isSortColumnNoDict = isSortColumnNoDict;
1:d5396b1:     this.userSpecifiedRanges = userSpecifiedRanges;
1:d5396b1:     this.separator = separator;
1:d5396b1:     this.numOfRanges = userSpecifiedRanges.length + 1;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public int[] getSortColumnIndex() {
1:d5396b1:     return sortColumnIndex;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public boolean[] getIsSortColumnNoDict() {
1:d5396b1:     return isSortColumnNoDict;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public String[] getUserSpecifiedRanges() {
1:d5396b1:     return userSpecifiedRanges;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public String getSeparator() {
1:d5396b1:     return separator;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   @Override
1:d5396b1:   public int getNumOfRanges() {
1:d5396b1:     return numOfRanges;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   @Override
1:d5396b1:   public String toString() {
1:d5396b1:     final StringBuilder sb = new StringBuilder("SortColumnRangeInfo{");
1:d5396b1:     sb.append("sortColumnIndex=").append(Arrays.toString(sortColumnIndex));
1:d5396b1:     sb.append(", isSortColumnNoDict=").append(Arrays.toString(isSortColumnNoDict));
1:d5396b1:     sb.append(", userSpecifiedRanges=").append(Arrays.toString(userSpecifiedRanges));
1:d5396b1:     sb.append(", separator='").append(separator).append('\'');
1:d5396b1:     sb.append(", numOfRanges=").append(numOfRanges);
1:d5396b1:     sb.append('}');
1:d5396b1:     return sb.toString();
1:d5396b1:   }
1:d5396b1: }
============================================================================
author:xuchuanyin
-------------------------------------------------------------------------------
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.metadata.schema;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.common.annotations.InterfaceAudience;
1: 
1: /**
1:  * column ranges specified by sort column bounds
1:  */
1: @InterfaceAudience.Internal
1: public class SortColumnRangeInfo implements ColumnRangeInfo, Serializable {
1:   private static final long serialVersionUID = 1L;
1:   // indices for the sort columns in the raw row
1:   private int[] sortColumnIndex;
1:   // is the sort column no dictionary encoded
1:   private boolean[] isSortColumnNoDict;
1:   // each literal sort column bounds specified by user
1:   private String[] userSpecifiedRanges;
1:   // separator for the field values in each bound
1:   private String separator;
1:   // number of value ranges for the columns
1:   private int numOfRanges;
1: 
1:   public SortColumnRangeInfo(int[] sortColumnIndex, boolean[] isSortColumnNoDict,
1:       String[] userSpecifiedRanges, String separator) {
1:     this.sortColumnIndex = sortColumnIndex;
1:     this.isSortColumnNoDict = isSortColumnNoDict;
1:     this.userSpecifiedRanges = userSpecifiedRanges;
1:     this.separator = separator;
1:     this.numOfRanges = userSpecifiedRanges.length + 1;
1:   }
1: 
1:   public int[] getSortColumnIndex() {
1:     return sortColumnIndex;
1:   }
1: 
1:   public boolean[] getIsSortColumnNoDict() {
1:     return isSortColumnNoDict;
1:   }
1: 
1:   public String[] getUserSpecifiedRanges() {
1:     return userSpecifiedRanges;
1:   }
1: 
1:   public String getSeparator() {
1:     return separator;
1:   }
1: 
1:   @Override
1:   public int getNumOfRanges() {
1:     return numOfRanges;
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     final StringBuilder sb = new StringBuilder("SortColumnRangeInfo{");
1:     sb.append("sortColumnIndex=").append(Arrays.toString(sortColumnIndex));
1:     sb.append(", isSortColumnNoDict=").append(Arrays.toString(isSortColumnNoDict));
1:     sb.append(", userSpecifiedRanges=").append(Arrays.toString(userSpecifiedRanges));
1:     sb.append(", separator='").append(separator).append('\'');
1:     sb.append(", numOfRanges=").append(numOfRanges);
1:     sb.append('}');
1:     return sb.toString();
1:   }
1: }
============================================================================