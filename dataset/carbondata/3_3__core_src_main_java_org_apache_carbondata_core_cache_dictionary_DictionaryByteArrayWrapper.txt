1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
2:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.cache.dictionary;
1:cd6a4ff: 
1:cd6a4ff: import java.util.Arrays;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.util.ByteUtil;
1:cd6a4ff: 
1:cd6a4ff: import net.jpountz.xxhash.XXHash32;
1:cd6a4ff: 
1:cd6a4ff: /**
1:cd6a4ff:  * class that holds the byte array and overrides equals and hashcode method which
1:cd6a4ff:  * will be useful for object comparison
1:cd6a4ff:  */
1:cd6a4ff: public class DictionaryByteArrayWrapper {
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * dictionary value as byte array
1:cd6a4ff:    */
1:cd6a4ff:   private byte[] data;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * hashing algorithm to calculate hash code
1:cd6a4ff:    */
1:cd6a4ff:   private XXHash32 xxHash32;
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param data
1:cd6a4ff:    */
1:cd6a4ff:   public DictionaryByteArrayWrapper(byte[] data) {
1:cd6a4ff:     this.data = data;
2:cd6a4ff:   }
1:e710339: 
1:cd6a4ff:   /**
1:cd6a4ff:    * @param data
1:cd6a4ff:    * @param xxHash32
1:cd6a4ff:    */
1:cd6a4ff:   public DictionaryByteArrayWrapper(byte[] data, XXHash32 xxHash32) {
1:cd6a4ff:     this(data);
1:cd6a4ff:     this.xxHash32 = xxHash32;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will compare 2 DictionaryByteArrayWrapper objects
1:cd6a4ff:    *
1:cd6a4ff:    * @param other
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public boolean equals(Object other) {
1:cd6a4ff:     if (this == other) {
1:cd6a4ff:       return true;
1:cd6a4ff:     }
1:cd6a4ff:     if (other == null || getClass() != other.getClass()) {
1:cd6a4ff:       return false;
1:cd6a4ff:     }
1:cd6a4ff:     DictionaryByteArrayWrapper otherObjectToCompare = (DictionaryByteArrayWrapper) other;
1:cd6a4ff:     if (data.length != otherObjectToCompare.data.length) {
1:cd6a4ff:       return false;
1:cd6a4ff:     }
1:cd6a4ff:     return ByteUtil.UnsafeComparer.INSTANCE.equals(data, otherObjectToCompare.data);
1:cd6a4ff: 
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   /**
1:cd6a4ff:    * This method will calculate the hash code for given data
1:cd6a4ff:    *
1:cd6a4ff:    * @return
1:cd6a4ff:    */
1:cd6a4ff:   @Override public int hashCode() {
1:cd6a4ff:     if (null != xxHash32) {
1:cd6a4ff:       return xxHash32.hash(data, 0, data.length, 0);
1:cd6a4ff:     }
1:cd6a4ff:     int result = Arrays.hashCode(data);
1:cd6a4ff:     result = 31 * result;
1:cd6a4ff:     return result;
1:cd6a4ff:   }
1:e710339: 
1:e710339:   public byte[] getData() {
1:e710339:     return data;
1:e710339:   }
1:e710339: }
============================================================================
author:kumarvishal09
-------------------------------------------------------------------------------
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: 
1:   public byte[] getData() {
1:     return data;
1:   }
commit:e710339
/////////////////////////////////////////////////////////////////////////
1: 
0:   public byte[] getData() {
0:     return data;
1:   }
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:41347d8
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.cache.dictionary;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: import net.jpountz.xxhash.XXHash32;
1: 
1: /**
1:  * class that holds the byte array and overrides equals and hashcode method which
1:  * will be useful for object comparison
1:  */
1: public class DictionaryByteArrayWrapper {
1: 
1:   /**
1:    * dictionary value as byte array
1:    */
1:   private byte[] data;
1: 
1:   /**
1:    * hashing algorithm to calculate hash code
1:    */
1:   private XXHash32 xxHash32;
1: 
1:   /**
1:    * @param data
1:    */
1:   public DictionaryByteArrayWrapper(byte[] data) {
1:     this.data = data;
1:   }
1: 
1:   /**
1:    * @param data
1:    * @param xxHash32
1:    */
1:   public DictionaryByteArrayWrapper(byte[] data, XXHash32 xxHash32) {
1:     this(data);
1:     this.xxHash32 = xxHash32;
1:   }
1: 
1:   /**
1:    * This method will compare 2 DictionaryByteArrayWrapper objects
1:    *
1:    * @param other
1:    * @return
1:    */
1:   @Override public boolean equals(Object other) {
1:     if (this == other) {
1:       return true;
1:     }
1:     if (other == null || getClass() != other.getClass()) {
1:       return false;
1:     }
1:     DictionaryByteArrayWrapper otherObjectToCompare = (DictionaryByteArrayWrapper) other;
1:     if (data.length != otherObjectToCompare.data.length) {
1:       return false;
1:     }
1:     return ByteUtil.UnsafeComparer.INSTANCE.equals(data, otherObjectToCompare.data);
1: 
1:   }
1: 
1:   /**
1:    * This method will calculate the hash code for given data
1:    *
1:    * @return
1:    */
1:   @Override public int hashCode() {
1:     if (null != xxHash32) {
1:       return xxHash32.hash(data, 0, data.length, 0);
1:     }
1:     int result = Arrays.hashCode(data);
1:     result = 31 * result;
1:     return result;
1:   }
1: }
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *    http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.carbondata.core.cache.dictionary;
0: 
0: import java.util.Arrays;
0: 
0: import org.apache.carbondata.core.util.ByteUtil;
0: 
0: import net.jpountz.xxhash.XXHash32;
0: 
0: /**
0:  * class that holds the byte array and overrides equals and hashcode method which
0:  * will be useful for object comparison
0:  */
0: public class DictionaryByteArrayWrapper {
0: 
0:   /**
0:    * dictionary value as byte array
0:    */
0:   private byte[] data;
0: 
0:   /**
0:    * hashing algorithm to calculate hash code
0:    */
0:   private XXHash32 xxHash32;
0: 
0:   /**
0:    * @param data
0:    */
0:   public DictionaryByteArrayWrapper(byte[] data) {
0:     this.data = data;
0:   }
0: 
0:   /**
0:    * @param data
0:    * @param xxHash32
0:    */
0:   public DictionaryByteArrayWrapper(byte[] data, XXHash32 xxHash32) {
0:     this(data);
0:     this.xxHash32 = xxHash32;
0:   }
0: 
0:   /**
0:    * This method will compare 2 DictionaryByteArrayWrapper objects
0:    *
0:    * @param other
0:    * @return
0:    */
0:   @Override public boolean equals(Object other) {
0:     if (this == other) {
0:       return true;
0:     }
0:     if (other == null || getClass() != other.getClass()) {
0:       return false;
0:     }
0:     DictionaryByteArrayWrapper otherObjectToCompare = (DictionaryByteArrayWrapper) other;
0:     if (data.length != otherObjectToCompare.data.length) {
0:       return false;
0:     }
0:     return ByteUtil.UnsafeComparer.INSTANCE.equals(data, otherObjectToCompare.data);
0: 
0:   }
0: 
0:   /**
0:    * This method will calculate the hash code for given data
0:    *
0:    * @return
0:    */
0:   @Override public int hashCode() {
0:     if (null != xxHash32) {
0:       return xxHash32.hash(data, 0, data.length, 0);
0:     }
0:     int result = Arrays.hashCode(data);
0:     result = 31 * result;
0:     return result;
0:   }
0: }
============================================================================