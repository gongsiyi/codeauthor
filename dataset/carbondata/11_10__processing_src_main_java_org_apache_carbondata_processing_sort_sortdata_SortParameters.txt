1:9aee980: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:9aee980:  *
1:9aee980:  *    http://www.apache.org/licenses/LICENSE-2.0
1:9aee980:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
3:9aee980:  */
1:349c59c: package org.apache.carbondata.processing.sort.sortdata;
10:9aee980: 
1:9aee980: import java.io.File;
1:82741c1: import java.io.Serializable;
1:9aee980: 
1:9aee980: import org.apache.carbondata.common.logging.LogService;
1:9aee980: import org.apache.carbondata.common.logging.LogServiceFactory;
1:9aee980: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:ce09aaa: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
1:98df130: import org.apache.carbondata.core.metadata.datatype.DataType;
1:89ddf5a: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
1:9aee980: import org.apache.carbondata.core.util.CarbonProperties;
1:5bedd77: import org.apache.carbondata.core.util.path.CarbonTablePath;
1:349c59c: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
1:9aee980: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1:9aee980: 
1:ded8b41: import org.apache.commons.lang3.StringUtils;
1:ded8b41: 
1:82741c1: public class SortParameters implements Serializable {
1:9aee980: 
1:9aee980:   private static final LogService LOGGER =
1:9aee980:       LogServiceFactory.getLogService(SortParameters.class.getName());
1:496cde4:   /**
1:9aee980:    * tempFileLocation
1:496cde4:    */
1:ded8b41:   private String[] tempFileLocation;
3:9aee980:   /**
1:9aee980:    * sortBufferSize
1:9aee980:    */
1:9aee980:   private int sortBufferSize;
1:9aee980:   /**
1:9aee980:    * measure count
1:9aee980:    */
1:9aee980:   private int measureColCount;
1:9aee980:   /**
1:9aee980:    * measure count
1:9aee980:    */
1:9aee980:   private int dimColCount;
1:9aee980:   /**
1:9aee980:    * measure count
1:9aee980:    */
1:9aee980:   private int complexDimColCount;
1:9aee980:   /**
1:9aee980:    * fileBufferSize
1:9aee980:    */
1:9aee980:   private int fileBufferSize;
1:9aee980:   /**
1:9aee980:    * numberOfIntermediateFileToBeMerged
1:9aee980:    */
1:9aee980:   private int numberOfIntermediateFileToBeMerged;
1:9aee980:   /**
1:9aee980:    * fileWriteBufferSize
1:9aee980:    */
1:9aee980:   private int fileWriteBufferSize;
1:9aee980:   /**
1:9aee980:    * observer
1:9aee980:    */
1:9aee980:   private SortObserver observer;
1:c100251:   private String sortTempCompressorName;
1:9aee980:   /**
1:9aee980:    * prefetch
1:9aee980:    */
1:9aee980:   private boolean prefetch;
1:9aee980:   /**
1:9aee980:    * bufferSize
1:9aee980:    */
1:9aee980:   private int bufferSize;
1:9aee980: 
1:9aee980:   private String databaseName;
1:9aee980: 
1:9aee980:   private String tableName;
1:9aee980: 
1:98df130:   private DataType[] measureDataType;
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * To know how many columns are of high cardinality.
1:9aee980:    */
1:9aee980:   private int noDictionaryCount;
1:9aee980:   /**
1:9aee980:    * partitionID
1:9aee980:    */
1:9aee980:   private String partitionID;
1:9aee980:   /**
1:9aee980:    * Id of the load folder
1:9aee980:    */
1:9aee980:   private String segmentId;
1:9aee980:   /**
1:9aee980:    * task id, each spark task has a unique id
1:9aee980:    */
1:9aee980:   private String taskNo;
1:9aee980: 
1:9aee980:   /**
1:9aee980:    * This will tell whether dimension is dictionary or not.
1:9aee980:    */
1:9aee980:   private boolean[] noDictionaryDimnesionColumn;
1:9aee980: 
1:9f94529:   private boolean[] noDictionarySortColumn;
1:dc53dee:   /**
1:dc53dee:    * whether dimension is varchar data type.
1:dc53dee:    * since all dimensions are string, we use an array of boolean instead of datatypes
1:dc53dee:    */
1:dc53dee:   private boolean[] isVarcharDimensionColumn;
1:9f94529:   private int numberOfSortColumns;
1:9aee980: 
1:9f94529:   private int numberOfNoDictSortColumns;
1:9aee980: 
1:9aee980:   private int numberOfCores;
1:496cde4: 
1:3807b2f:   private int batchSortSizeinMb;
1:d5396b1:   private int rangeId = 0;
1:3807b2f: 
1:cbf8797:   public SortParameters getCopy() {
1:cbf8797:     SortParameters parameters = new SortParameters();
1:cbf8797:     parameters.tempFileLocation = tempFileLocation;
1:cbf8797:     parameters.sortBufferSize = sortBufferSize;
1:cbf8797:     parameters.measureColCount = measureColCount;
1:cbf8797:     parameters.dimColCount = dimColCount;
1:cbf8797:     parameters.complexDimColCount = complexDimColCount;
1:cbf8797:     parameters.fileBufferSize = fileBufferSize;
1:cbf8797:     parameters.numberOfIntermediateFileToBeMerged = numberOfIntermediateFileToBeMerged;
1:cbf8797:     parameters.fileWriteBufferSize = fileWriteBufferSize;
1:cbf8797:     parameters.observer = observer;
1:c100251:     parameters.sortTempCompressorName = sortTempCompressorName;
1:cbf8797:     parameters.prefetch = prefetch;
1:cbf8797:     parameters.bufferSize = bufferSize;
1:cbf8797:     parameters.databaseName = databaseName;
1:cbf8797:     parameters.tableName = tableName;
1:98df130:     parameters.measureDataType = measureDataType;
1:cbf8797:     parameters.noDictionaryCount = noDictionaryCount;
1:cbf8797:     parameters.partitionID = partitionID;
1:cbf8797:     parameters.segmentId = segmentId;
1:cbf8797:     parameters.taskNo = taskNo;
1:cbf8797:     parameters.noDictionaryDimnesionColumn = noDictionaryDimnesionColumn;
1:dc53dee:     parameters.isVarcharDimensionColumn = isVarcharDimensionColumn;
1:9f94529:     parameters.noDictionarySortColumn = noDictionarySortColumn;
1:9f94529:     parameters.numberOfSortColumns = numberOfSortColumns;
1:9f94529:     parameters.numberOfNoDictSortColumns = numberOfNoDictSortColumns;
1:cbf8797:     parameters.numberOfCores = numberOfCores;
1:3807b2f:     parameters.batchSortSizeinMb = batchSortSizeinMb;
1:d5396b1:     parameters.rangeId = rangeId;
1:cbf8797:     return parameters;
1:cbf8797:   }
1:cbf8797: 
1:ded8b41:   public String[] getTempFileLocation() {
1:9aee980:     return tempFileLocation;
7:9aee980:   }
1:9aee980: 
1:ded8b41:   public void setTempFileLocation(String[] tempFileLocation) {
1:9aee980:     this.tempFileLocation = tempFileLocation;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getSortBufferSize() {
1:9aee980:     return sortBufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setSortBufferSize(int sortBufferSize) {
1:9aee980:     this.sortBufferSize = sortBufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getMeasureColCount() {
1:9aee980:     return measureColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setMeasureColCount(int measureColCount) {
1:9aee980:     this.measureColCount = measureColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getDimColCount() {
1:9aee980:     return dimColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setDimColCount(int dimColCount) {
1:9aee980:     this.dimColCount = dimColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getComplexDimColCount() {
1:9aee980:     return complexDimColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setComplexDimColCount(int complexDimColCount) {
1:9aee980:     this.complexDimColCount = complexDimColCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getNumberOfIntermediateFileToBeMerged() {
1:9aee980:     return numberOfIntermediateFileToBeMerged;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setNumberOfIntermediateFileToBeMerged(int numberOfIntermediateFileToBeMerged) {
1:9aee980:     this.numberOfIntermediateFileToBeMerged = numberOfIntermediateFileToBeMerged;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getFileWriteBufferSize() {
1:9aee980:     return fileWriteBufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setFileWriteBufferSize(int fileWriteBufferSize) {
1:9aee980:     this.fileWriteBufferSize = fileWriteBufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public SortObserver getObserver() {
1:9aee980:     return observer;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setObserver(SortObserver observer) {
1:9aee980:     this.observer = observer;
1:9aee980:   }
1:9aee980: 
1:c100251:   public String getSortTempCompressorName() {
1:c100251:     return sortTempCompressorName;
1:9aee980:   }
1:9aee980: 
1:c100251:   public void setSortTempCompressorName(String sortTempCompressorName) {
1:c100251:     this.sortTempCompressorName = sortTempCompressorName;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public boolean isPrefetch() {
1:9aee980:     return prefetch;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setPrefetch(boolean prefetch) {
1:9aee980:     this.prefetch = prefetch;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getBufferSize() {
1:9aee980:     return bufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setBufferSize(int bufferSize) {
1:9aee980:     this.bufferSize = bufferSize;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public String getDatabaseName() {
1:9aee980:     return databaseName;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setDatabaseName(String databaseName) {
1:9aee980:     this.databaseName = databaseName;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public String getTableName() {
1:9aee980:     return tableName;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setTableName(String tableName) {
1:9aee980:     this.tableName = tableName;
1:9aee980:   }
1:9aee980: 
1:98df130:   public DataType[] getMeasureDataType() {
1:98df130:     return measureDataType;
1:9aee980:   }
1:9aee980: 
1:98df130:   public void setMeasureDataType(DataType[] measureDataType) {
1:98df130:     this.measureDataType = measureDataType;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public int getNoDictionaryCount() {
1:9aee980:     return noDictionaryCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setNoDictionaryCount(int noDictionaryCount) {
1:9aee980:     this.noDictionaryCount = noDictionaryCount;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public String getPartitionID() {
1:9aee980:     return partitionID;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setPartitionID(String partitionID) {
1:9aee980:     this.partitionID = partitionID;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public String getSegmentId() {
1:9aee980:     return segmentId;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setSegmentId(String segmentId) {
1:9aee980:     this.segmentId = segmentId;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public String getTaskNo() {
1:9aee980:     return taskNo;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setTaskNo(String taskNo) {
1:9aee980:     this.taskNo = taskNo;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public boolean[] getNoDictionaryDimnesionColumn() {
1:9aee980:     return noDictionaryDimnesionColumn;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setNoDictionaryDimnesionColumn(boolean[] noDictionaryDimnesionColumn) {
1:9aee980:     this.noDictionaryDimnesionColumn = noDictionaryDimnesionColumn;
1:9aee980:   }
1:9aee980: 
1:dc53dee:   public boolean[] getIsVarcharDimensionColumn() {
1:dc53dee:     return isVarcharDimensionColumn;
1:dc53dee:   }
1:dc53dee: 
1:dc53dee:   public void setIsVarcharDimensionColumn(boolean[] isVarcharDimensionColumn) {
1:dc53dee:     this.isVarcharDimensionColumn = isVarcharDimensionColumn;
1:dc53dee:   }
1:dc53dee: 
1:9aee980:   public int getNumberOfCores() {
1:9aee980:     return numberOfCores;
1:9aee980:   }
1:9aee980: 
1:9aee980:   public void setNumberOfCores(int numberOfCores) {
1:9aee980:     this.numberOfCores = numberOfCores;
1:496cde4:   }
1:496cde4: 
1:9f94529:   public int getNumberOfSortColumns() {
1:9f94529:     return numberOfSortColumns;
1:496cde4:   }
1:496cde4: 
1:9f94529:   public void setNumberOfSortColumns(int numberOfSortColumns) {
1:9f94529:     this.numberOfSortColumns = Math.min(numberOfSortColumns, this.dimColCount);
1:9aee980:   }
1:9aee980: 
1:9f94529:   public boolean[] getNoDictionarySortColumn() {
1:9f94529:     return noDictionarySortColumn;
1:9aee980:   }
1:9aee980: 
1:9f94529:   public void setNoDictionarySortColumn(boolean[] noDictionarySortColumn) {
1:9f94529:     this.noDictionarySortColumn = noDictionarySortColumn;
1:9aee980:   }
1:9aee980: 
1:9f94529:   public int getNumberOfNoDictSortColumns() {
1:9f94529:     return numberOfNoDictSortColumns;
1:9aee980:   }
1:9aee980: 
1:9f94529:   public void setNumberOfNoDictSortColumns(int numberOfNoDictSortColumns) {
1:9f94529:     this.numberOfNoDictSortColumns = Math.min(numberOfNoDictSortColumns, noDictionaryCount);
1:9aee980:   }
1:9aee980: 
1:3807b2f:   public int getBatchSortSizeinMb() {
1:3807b2f:     return batchSortSizeinMb;
1:3807b2f:   }
1:3807b2f: 
1:3807b2f:   public void setBatchSortSizeinMb(int batchSortSizeinMb) {
1:3807b2f:     this.batchSortSizeinMb = batchSortSizeinMb;
1:3807b2f:   }
1:3807b2f: 
1:9aee980:   public static SortParameters createSortParameters(CarbonDataLoadConfiguration configuration) {
1:9aee980:     SortParameters parameters = new SortParameters();
1:9aee980:     CarbonTableIdentifier tableIdentifier =
1:9aee980:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:9aee980:     CarbonProperties carbonProperties = CarbonProperties.getInstance();
1:9aee980:     parameters.setDatabaseName(tableIdentifier.getDatabaseName());
1:9aee980:     parameters.setTableName(tableIdentifier.getTableName());
1:5bedd77:     parameters.setPartitionID("0");
1:9aee980:     parameters.setSegmentId(configuration.getSegmentId());
1:9aee980:     parameters.setTaskNo(configuration.getTaskNo());
1:9aee980:     parameters.setMeasureColCount(configuration.getMeasureCount());
1:9aee980:     parameters.setDimColCount(
1:3202cf5:         configuration.getDimensionCount() - (configuration.getComplexDictionaryColumnCount()
1:3202cf5:             + configuration.getComplexNonDictionaryColumnCount()));
1:9aee980:     parameters.setNoDictionaryCount(configuration.getNoDictionaryCount());
1:3202cf5:     parameters.setComplexDimColCount(configuration.getComplexDictionaryColumnCount() + configuration
1:3202cf5:         .getComplexNonDictionaryColumnCount());
1:9aee980:     parameters.setNoDictionaryDimnesionColumn(
1:9aee980:         CarbonDataProcessorUtil.getNoDictionaryMapping(configuration.getDataFields()));
1:dc53dee:     parameters.setIsVarcharDimensionColumn(
1:dc53dee:         CarbonDataProcessorUtil.getIsVarcharColumnMapping(configuration.getDataFields()));
1:3807b2f:     parameters.setBatchSortSizeinMb(CarbonDataProcessorUtil.getBatchSortSizeinMb(configuration));
1:3807b2f: 
1:9f94529:     parameters.setNumberOfSortColumns(configuration.getNumberOfSortColumns());
1:9f94529:     parameters.setNumberOfNoDictSortColumns(configuration.getNumberOfNoDictSortColumns());
1:89ddf5a:     setNoDictionarySortColumnMapping(parameters);
1:9aee980:     parameters.setObserver(new SortObserver());
1:9aee980:     // get sort buffer size
1:9aee980:     parameters.setSortBufferSize(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.SORT_SIZE,
1:9aee980:             CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL)));
1:9aee980:     LOGGER.info("Sort size for table: " + parameters.getSortBufferSize());
1:9aee980:     // set number of intermedaite file to merge
1:9aee980:     parameters.setNumberOfIntermediateFileToBeMerged(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT,
1:9aee980:             CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE)));
1:9aee980: 
1:9aee980:     LOGGER.info("Number of intermediate file to be merged: " + parameters
1:9aee980:         .getNumberOfIntermediateFileToBeMerged());
1:9aee980: 
1:9aee980: 
1:5bedd77:     String[] carbonDataDirectoryPath = CarbonDataProcessorUtil.getLocalDataFolderLocation(
1:5bedd77:         tableIdentifier.getDatabaseName(), tableIdentifier.getTableName(),
1:5bedd77:         configuration.getTaskNo(), configuration.getSegmentId(), false, false);
1:ded8b41:     String[] sortTempDirs = CarbonDataProcessorUtil.arrayAppend(carbonDataDirectoryPath,
1:ded8b41:         File.separator, CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
1:ded8b41: 
1:ded8b41:     parameters.setTempFileLocation(sortTempDirs);
1:ded8b41:     LOGGER.info("temp file location: " + StringUtils.join(parameters.getTempFileLocation(), ","));
1:9aee980: 
1:9e9d689:     int numberOfCores = carbonProperties.getNumberOfCores() / 2;
1:e527c05:     // In case of loading from partition we should use the cores specified by it
1:e527c05:     if (configuration.getWritingCoresCount() > 0) {
1:e527c05:       numberOfCores = configuration.getWritingCoresCount();
1:e527c05:     }
1:87dade7:     parameters.setNumberOfCores(numberOfCores > 0 ? numberOfCores : 1);
1:9aee980: 
1:9aee980:     parameters.setFileWriteBufferSize(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE,
1:9aee980:             CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE)));
1:9aee980: 
1:c100251:     parameters.setSortTempCompressorName(CarbonProperties.getInstance().getSortTempCompressor());
1:c100251:     if (!parameters.sortTempCompressorName.isEmpty()) {
1:c100251:       LOGGER.info(" Compression " + parameters.sortTempCompressorName
1:c100251:           + " will be used for writing the sort temp File");
1:9aee980:     }
1:9aee980: 
2:9aee980:     parameters.setPrefetch(CarbonCommonConstants.CARBON_PREFETCH_IN_MERGE_VALUE);
1:c5aba5f:     parameters.setBufferSize(Integer.parseInt(carbonProperties.getProperty(
1:c5aba5f:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE,
1:c5aba5f:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE_DEFAULT)));
1:9aee980: 
1:353272e:     DataType[] measureDataType = configuration.getMeasureDataType();
1:98df130:     parameters.setMeasureDataType(measureDataType);
1:9aee980:     return parameters;
1:9aee980:   }
1:9aee980: 
1:d5396b1:   public int getRangeId() {
1:d5396b1:     return rangeId;
1:d5396b1:   }
1:d5396b1: 
1:d5396b1:   public void setRangeId(int rangeId) {
1:d5396b1:     this.rangeId = rangeId;
1:d5396b1:   }
1:d5396b1: 
1:9aee980:   /**
1:89ddf5a:    * this method will set the boolean mapping for no dictionary sort columns
1:89ddf5a:    *
1:89ddf5a:    * @param parameters
1:9aee980:    */
1:89ddf5a:   private static void setNoDictionarySortColumnMapping(SortParameters parameters) {
1:89ddf5a:     if (parameters.getNumberOfSortColumns() == parameters.getNoDictionaryDimnesionColumn().length) {
1:89ddf5a:       parameters.setNoDictionarySortColumn(parameters.getNoDictionaryDimnesionColumn());
1:89ddf5a:     } else {
1:89ddf5a:       boolean[] noDictionarySortColumnTemp = new boolean[parameters.getNumberOfSortColumns()];
1:89ddf5a:       System
1:89ddf5a:           .arraycopy(parameters.getNoDictionaryDimnesionColumn(), 0, noDictionarySortColumnTemp, 0,
1:89ddf5a:               parameters.getNumberOfSortColumns());
1:89ddf5a:       parameters.setNoDictionarySortColumn(noDictionarySortColumnTemp);
1:9aee980:     }
1:9aee980:   }
1:9aee980: 
1:89ddf5a:   public static SortParameters createSortParameters(CarbonTable carbonTable, String databaseName,
1:89ddf5a:       String tableName, int dimColCount, int complexDimColCount, int measureColCount,
1:5bedd77:       int noDictionaryCount, String segmentId, String taskNo,
1:dc53dee:       boolean[] noDictionaryColMaping, boolean[] isVarcharDimensionColumn,
1:dc53dee:       boolean isCompactionFlow) {
1:9aee980:     SortParameters parameters = new SortParameters();
1:9aee980:     CarbonProperties carbonProperties = CarbonProperties.getInstance();
1:9aee980:     parameters.setDatabaseName(databaseName);
1:9aee980:     parameters.setTableName(tableName);
1:5bedd77:     parameters.setPartitionID(CarbonTablePath.DEPRECATED_PATITION_ID);
1:9aee980:     parameters.setSegmentId(segmentId);
1:9aee980:     parameters.setTaskNo(taskNo);
1:9aee980:     parameters.setMeasureColCount(measureColCount);
1:9aee980:     parameters.setDimColCount(dimColCount - complexDimColCount);
1:89ddf5a:     parameters.setNumberOfSortColumns(carbonTable.getNumberOfSortColumns());
1:9aee980:     parameters.setNoDictionaryCount(noDictionaryCount);
1:89ddf5a:     parameters.setNumberOfNoDictSortColumns(carbonTable.getNumberOfNoDictSortColumns());
1:9aee980:     parameters.setComplexDimColCount(complexDimColCount);
1:9aee980:     parameters.setNoDictionaryDimnesionColumn(noDictionaryColMaping);
1:dc53dee:     parameters.setIsVarcharDimensionColumn(isVarcharDimensionColumn);
1:9aee980:     parameters.setObserver(new SortObserver());
1:9aee980:     // get sort buffer size
1:9aee980:     parameters.setSortBufferSize(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.SORT_SIZE,
1:9aee980:             CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL)));
1:9aee980:     LOGGER.info("Sort size for table: " + parameters.getSortBufferSize());
1:9aee980:     // set number of intermedaite file to merge
1:9aee980:     parameters.setNumberOfIntermediateFileToBeMerged(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT,
1:9aee980:             CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE)));
1:9aee980: 
1:9aee980:     LOGGER.info("Number of intermediate file to be merged: " + parameters
1:9aee980:         .getNumberOfIntermediateFileToBeMerged());
1:9aee980: 
1:ded8b41:     String[] carbonDataDirectoryPath = CarbonDataProcessorUtil
1:5bedd77:         .getLocalDataFolderLocation(databaseName, tableName, taskNo, segmentId,
1:874764f:             isCompactionFlow, false);
1:ded8b41:     String[] sortTempDirs = CarbonDataProcessorUtil.arrayAppend(carbonDataDirectoryPath,
1:ded8b41:         File.separator, CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
1:ded8b41:     parameters.setTempFileLocation(sortTempDirs);
1:ded8b41:     LOGGER.info("temp file location: " + StringUtils.join(parameters.getTempFileLocation(), ","));
1:9aee980: 
1:9e9d689:     int numberOfCores = carbonProperties.getNumberOfCores() / 2;
1:87dade7:     parameters.setNumberOfCores(numberOfCores > 0 ? numberOfCores : 1);
1:9aee980: 
1:9aee980:     parameters.setFileWriteBufferSize(Integer.parseInt(carbonProperties
1:9aee980:         .getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE,
1:9aee980:             CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE)));
1:9aee980: 
1:c100251:     parameters.setSortTempCompressorName(CarbonProperties.getInstance().getSortTempCompressor());
1:c100251:     if (!parameters.sortTempCompressorName.isEmpty()) {
1:c100251:       LOGGER.info(" Compression " + parameters.sortTempCompressorName
1:c100251:           + " will be used for writing the sort temp File");
1:9aee980:     }
1:9aee980: 
1:c5aba5f:     parameters.setPrefetch(CarbonCommonConstants. CARBON_PREFETCH_IN_MERGE_VALUE);
1:c5aba5f:     parameters.setBufferSize(Integer.parseInt(carbonProperties.getProperty(
1:c5aba5f:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE,
1:c5aba5f:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE_DEFAULT)));
1:9aee980: 
1:98df130:     DataType[] type = CarbonDataProcessorUtil
1:98df130:         .getMeasureDataType(parameters.getMeasureColCount(), parameters.getDatabaseName(),
1:496cde4:             parameters.getTableName());
1:98df130:     parameters.setMeasureDataType(type);
1:89ddf5a:     setNoDictionarySortColumnMapping(parameters);
1:9aee980:     return parameters;
1:9aee980:   }
1:9aee980: 
1:9aee980: }
============================================================================
author:Raghunandan S
-------------------------------------------------------------------------------
commit:67a8a37
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:xuchuanyin
-------------------------------------------------------------------------------
commit:dc53dee
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * whether dimension is varchar data type.
1:    * since all dimensions are string, we use an array of boolean instead of datatypes
1:    */
1:   private boolean[] isVarcharDimensionColumn;
/////////////////////////////////////////////////////////////////////////
1:     parameters.isVarcharDimensionColumn = isVarcharDimensionColumn;
/////////////////////////////////////////////////////////////////////////
1:   public boolean[] getIsVarcharDimensionColumn() {
1:     return isVarcharDimensionColumn;
1:   }
1: 
1:   public void setIsVarcharDimensionColumn(boolean[] isVarcharDimensionColumn) {
1:     this.isVarcharDimensionColumn = isVarcharDimensionColumn;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     parameters.setIsVarcharDimensionColumn(
1:         CarbonDataProcessorUtil.getIsVarcharColumnMapping(configuration.getDataFields()));
/////////////////////////////////////////////////////////////////////////
1:       boolean[] noDictionaryColMaping, boolean[] isVarcharDimensionColumn,
1:       boolean isCompactionFlow) {
/////////////////////////////////////////////////////////////////////////
1:     parameters.setIsVarcharDimensionColumn(isVarcharDimensionColumn);
commit:d5396b1
/////////////////////////////////////////////////////////////////////////
1:   private int rangeId = 0;
/////////////////////////////////////////////////////////////////////////
1:     parameters.rangeId = rangeId;
/////////////////////////////////////////////////////////////////////////
1:   public int getRangeId() {
1:     return rangeId;
1:   }
1: 
1:   public void setRangeId(int rangeId) {
1:     this.rangeId = rangeId;
1:   }
1: 
commit:c100251
/////////////////////////////////////////////////////////////////////////
1:   private String sortTempCompressorName;
/////////////////////////////////////////////////////////////////////////
1:     parameters.sortTempCompressorName = sortTempCompressorName;
/////////////////////////////////////////////////////////////////////////
1:   public String getSortTempCompressorName() {
1:     return sortTempCompressorName;
1:   public void setSortTempCompressorName(String sortTempCompressorName) {
1:     this.sortTempCompressorName = sortTempCompressorName;
/////////////////////////////////////////////////////////////////////////
1:     parameters.setSortTempCompressorName(CarbonProperties.getInstance().getSortTempCompressor());
1:     if (!parameters.sortTempCompressorName.isEmpty()) {
1:       LOGGER.info(" Compression " + parameters.sortTempCompressorName
1:           + " will be used for writing the sort temp File");
/////////////////////////////////////////////////////////////////////////
1:     parameters.setSortTempCompressorName(CarbonProperties.getInstance().getSortTempCompressor());
1:     if (!parameters.sortTempCompressorName.isEmpty()) {
1:       LOGGER.info(" Compression " + parameters.sortTempCompressorName
1:           + " will be used for writing the sort temp File");
commit:ded8b41
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private String[] tempFileLocation;
/////////////////////////////////////////////////////////////////////////
1:   public String[] getTempFileLocation() {
1:   public void setTempFileLocation(String[] tempFileLocation) {
/////////////////////////////////////////////////////////////////////////
1:     String[] carbonDataDirectoryPath = CarbonDataProcessorUtil
1:     String[] sortTempDirs = CarbonDataProcessorUtil.arrayAppend(carbonDataDirectoryPath,
1:         File.separator, CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
1: 
1:     parameters.setTempFileLocation(sortTempDirs);
1:     LOGGER.info("temp file location: " + StringUtils.join(parameters.getTempFileLocation(), ","));
/////////////////////////////////////////////////////////////////////////
0:     String[] carbonDataDirectoryPath = CarbonDataProcessorUtil
1:     String[] sortTempDirs = CarbonDataProcessorUtil.arrayAppend(carbonDataDirectoryPath,
1:         File.separator, CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
1:     parameters.setTempFileLocation(sortTempDirs);
1:     LOGGER.info("temp file location: " + StringUtils.join(parameters.getTempFileLocation(), ","));
author:sounakr
-------------------------------------------------------------------------------
commit:3202cf5
/////////////////////////////////////////////////////////////////////////
1:         configuration.getDimensionCount() - (configuration.getComplexDictionaryColumnCount()
1:             + configuration.getComplexNonDictionaryColumnCount()));
1:     parameters.setComplexDimColCount(configuration.getComplexDictionaryColumnCount() + configuration
1:         .getComplexNonDictionaryColumnCount());
author:Jacky Li
-------------------------------------------------------------------------------
commit:5bedd77
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.path.CarbonTablePath;
/////////////////////////////////////////////////////////////////////////
1:     parameters.setPartitionID("0");
/////////////////////////////////////////////////////////////////////////
1:     String[] carbonDataDirectoryPath = CarbonDataProcessorUtil.getLocalDataFolderLocation(
1:         tableIdentifier.getDatabaseName(), tableIdentifier.getTableName(),
1:         configuration.getTaskNo(), configuration.getSegmentId(), false, false);
/////////////////////////////////////////////////////////////////////////
1:       int noDictionaryCount, String segmentId, String taskNo,
1:     parameters.setPartitionID(CarbonTablePath.DEPRECATED_PATITION_ID);
/////////////////////////////////////////////////////////////////////////
1:         .getLocalDataFolderLocation(databaseName, tableName, taskNo, segmentId,
commit:349c59c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.carbondata.processing.sort.sortdata;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.processing.loading.CarbonDataLoadConfiguration;
author:ravipesala
-------------------------------------------------------------------------------
commit:e527c05
/////////////////////////////////////////////////////////////////////////
1:     // In case of loading from partition we should use the cores specified by it
1:     if (configuration.getWritingCoresCount() > 0) {
1:       numberOfCores = configuration.getWritingCoresCount();
1:     }
commit:3807b2f
/////////////////////////////////////////////////////////////////////////
1:   private int batchSortSizeinMb;
1: 
/////////////////////////////////////////////////////////////////////////
1:     parameters.batchSortSizeinMb = batchSortSizeinMb;
/////////////////////////////////////////////////////////////////////////
1:   public int getBatchSortSizeinMb() {
1:     return batchSortSizeinMb;
1:   }
1: 
1:   public void setBatchSortSizeinMb(int batchSortSizeinMb) {
1:     this.batchSortSizeinMb = batchSortSizeinMb;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     parameters.setBatchSortSizeinMb(CarbonDataProcessorUtil.getBatchSortSizeinMb(configuration));
1: 
commit:e6b6090
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:87dade7
/////////////////////////////////////////////////////////////////////////
1:     parameters.setNumberOfCores(numberOfCores > 0 ? numberOfCores : 1);
/////////////////////////////////////////////////////////////////////////
1:     parameters.setNumberOfCores(numberOfCores > 0 ? numberOfCores : 1);
commit:cbf8797
/////////////////////////////////////////////////////////////////////////
1:   public SortParameters getCopy() {
1:     SortParameters parameters = new SortParameters();
1:     parameters.tempFileLocation = tempFileLocation;
1:     parameters.sortBufferSize = sortBufferSize;
1:     parameters.measureColCount = measureColCount;
1:     parameters.dimColCount = dimColCount;
1:     parameters.complexDimColCount = complexDimColCount;
1:     parameters.fileBufferSize = fileBufferSize;
1:     parameters.numberOfIntermediateFileToBeMerged = numberOfIntermediateFileToBeMerged;
1:     parameters.fileWriteBufferSize = fileWriteBufferSize;
1:     parameters.observer = observer;
0:     parameters.sortTempFileNoOFRecordsInCompression = sortTempFileNoOFRecordsInCompression;
0:     parameters.isSortFileCompressionEnabled = isSortFileCompressionEnabled;
1:     parameters.prefetch = prefetch;
1:     parameters.bufferSize = bufferSize;
1:     parameters.databaseName = databaseName;
1:     parameters.tableName = tableName;
0:     parameters.aggType = aggType;
1:     parameters.noDictionaryCount = noDictionaryCount;
1:     parameters.partitionID = partitionID;
1:     parameters.segmentId = segmentId;
1:     parameters.taskNo = taskNo;
1:     parameters.noDictionaryDimnesionColumn = noDictionaryDimnesionColumn;
1:     parameters.numberOfCores = numberOfCores;
0:     parameters.useKettle = useKettle;
1:     return parameters;
1:   }
1: 
commit:496cde4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * TODO Temporary conf , it will be removed after kettle removal.
1:    */
0:   private boolean useKettle = true;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public boolean isUseKettle() {
0:     return useKettle;
1:   }
1: 
0:   public void setUseKettle(boolean useKettle) {
0:     this.useKettle = useKettle;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     char[] aggType = CarbonDataProcessorUtil
0:         .getAggType(parameters.getMeasureColCount(), parameters.getDatabaseName(),
1:             parameters.getTableName());
0:     parameters.setUseKettle(false);
/////////////////////////////////////////////////////////////////////////
0:     char[] aggType = CarbonDataProcessorUtil
0:         .getAggType(parameters.getMeasureColCount(), parameters.getDatabaseName(),
0:             parameters.getTableName());
commit:9aee980
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.carbondata.processing.sortandgroupby.sortdata;
1: 
1: import java.io.File;
0: import java.util.Arrays;
0: import java.util.List;
1: 
1: import org.apache.carbondata.common.logging.LogService;
1: import org.apache.carbondata.common.logging.LogServiceFactory;
0: import org.apache.carbondata.core.carbon.CarbonTableIdentifier;
0: import org.apache.carbondata.core.carbon.metadata.CarbonMetadata;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.CarbonTable;
0: import org.apache.carbondata.core.carbon.metadata.schema.table.column.CarbonMeasure;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
0: import org.apache.carbondata.core.util.DataTypeUtil;
0: import org.apache.carbondata.processing.newflow.CarbonDataLoadConfiguration;
0: import org.apache.carbondata.processing.schema.metadata.SortObserver;
1: import org.apache.carbondata.processing.util.CarbonDataProcessorUtil;
1: 
0: public class SortParameters {
1: 
1:   private static final LogService LOGGER =
1:       LogServiceFactory.getLogService(SortParameters.class.getName());
1:   /**
1:    * tempFileLocation
1:    */
0:   private String tempFileLocation;
1:   /**
1:    * sortBufferSize
1:    */
1:   private int sortBufferSize;
1:   /**
1:    * measure count
1:    */
1:   private int measureColCount;
1:   /**
1:    * measure count
1:    */
1:   private int dimColCount;
1:   /**
1:    * measure count
1:    */
1:   private int complexDimColCount;
1:   /**
1:    * fileBufferSize
1:    */
1:   private int fileBufferSize;
1:   /**
1:    * numberOfIntermediateFileToBeMerged
1:    */
1:   private int numberOfIntermediateFileToBeMerged;
1:   /**
1:    * fileWriteBufferSize
1:    */
1:   private int fileWriteBufferSize;
1:   /**
1:    * observer
1:    */
1:   private SortObserver observer;
1:   /**
0:    * sortTempFileNoOFRecordsInCompression
1:    */
0:   private int sortTempFileNoOFRecordsInCompression;
1:   /**
0:    * isSortTempFileCompressionEnabled
1:    */
0:   private boolean isSortFileCompressionEnabled;
1:   /**
1:    * prefetch
1:    */
1:   private boolean prefetch;
1:   /**
1:    * bufferSize
1:    */
1:   private int bufferSize;
1: 
1:   private String databaseName;
1: 
1:   private String tableName;
1: 
0:   private char[] aggType;
1: 
1:   /**
1:    * To know how many columns are of high cardinality.
1:    */
1:   private int noDictionaryCount;
1:   /**
1:    * partitionID
1:    */
1:   private String partitionID;
1:   /**
1:    * Id of the load folder
1:    */
1:   private String segmentId;
1:   /**
1:    * task id, each spark task has a unique id
1:    */
1:   private String taskNo;
1: 
1:   /**
1:    * This will tell whether dimension is dictionary or not.
1:    */
1:   private boolean[] noDictionaryDimnesionColumn;
1: 
1:   private int numberOfCores;
1: 
0:   public String getTempFileLocation() {
1:     return tempFileLocation;
1:   }
1: 
0:   public void setTempFileLocation(String tempFileLocation) {
1:     this.tempFileLocation = tempFileLocation;
1:   }
1: 
1:   public int getSortBufferSize() {
1:     return sortBufferSize;
1:   }
1: 
1:   public void setSortBufferSize(int sortBufferSize) {
1:     this.sortBufferSize = sortBufferSize;
1:   }
1: 
1:   public int getMeasureColCount() {
1:     return measureColCount;
1:   }
1: 
1:   public void setMeasureColCount(int measureColCount) {
1:     this.measureColCount = measureColCount;
1:   }
1: 
1:   public int getDimColCount() {
1:     return dimColCount;
1:   }
1: 
1:   public void setDimColCount(int dimColCount) {
1:     this.dimColCount = dimColCount;
1:   }
1: 
1:   public int getComplexDimColCount() {
1:     return complexDimColCount;
1:   }
1: 
1:   public void setComplexDimColCount(int complexDimColCount) {
1:     this.complexDimColCount = complexDimColCount;
1:   }
1: 
0:   public int getFileBufferSize() {
0:     return fileBufferSize;
1:   }
1: 
0:   public void setFileBufferSize(int fileBufferSize) {
0:     this.fileBufferSize = fileBufferSize;
1:   }
1: 
1:   public int getNumberOfIntermediateFileToBeMerged() {
1:     return numberOfIntermediateFileToBeMerged;
1:   }
1: 
1:   public void setNumberOfIntermediateFileToBeMerged(int numberOfIntermediateFileToBeMerged) {
1:     this.numberOfIntermediateFileToBeMerged = numberOfIntermediateFileToBeMerged;
1:   }
1: 
1:   public int getFileWriteBufferSize() {
1:     return fileWriteBufferSize;
1:   }
1: 
1:   public void setFileWriteBufferSize(int fileWriteBufferSize) {
1:     this.fileWriteBufferSize = fileWriteBufferSize;
1:   }
1: 
1:   public SortObserver getObserver() {
1:     return observer;
1:   }
1: 
1:   public void setObserver(SortObserver observer) {
1:     this.observer = observer;
1:   }
1: 
0:   public int getSortTempFileNoOFRecordsInCompression() {
0:     return sortTempFileNoOFRecordsInCompression;
1:   }
1: 
0:   public void setSortTempFileNoOFRecordsInCompression(int sortTempFileNoOFRecordsInCompression) {
0:     this.sortTempFileNoOFRecordsInCompression = sortTempFileNoOFRecordsInCompression;
1:   }
1: 
0:   public boolean isSortFileCompressionEnabled() {
0:     return isSortFileCompressionEnabled;
1:   }
1: 
0:   public void setSortFileCompressionEnabled(boolean sortFileCompressionEnabled) {
0:     isSortFileCompressionEnabled = sortFileCompressionEnabled;
1:   }
1: 
1:   public boolean isPrefetch() {
1:     return prefetch;
1:   }
1: 
1:   public void setPrefetch(boolean prefetch) {
1:     this.prefetch = prefetch;
1:   }
1: 
1:   public int getBufferSize() {
1:     return bufferSize;
1:   }
1: 
1:   public void setBufferSize(int bufferSize) {
1:     this.bufferSize = bufferSize;
1:   }
1: 
1:   public String getDatabaseName() {
1:     return databaseName;
1:   }
1: 
1:   public void setDatabaseName(String databaseName) {
1:     this.databaseName = databaseName;
1:   }
1: 
1:   public String getTableName() {
1:     return tableName;
1:   }
1: 
1:   public void setTableName(String tableName) {
1:     this.tableName = tableName;
1:   }
1: 
0:   public char[] getAggType() {
0:     return aggType;
1:   }
1: 
0:   public void setAggType(char[] aggType) {
0:     this.aggType = aggType;
1:   }
1: 
1:   public int getNoDictionaryCount() {
1:     return noDictionaryCount;
1:   }
1: 
1:   public void setNoDictionaryCount(int noDictionaryCount) {
1:     this.noDictionaryCount = noDictionaryCount;
1:   }
1: 
1:   public String getPartitionID() {
1:     return partitionID;
1:   }
1: 
1:   public void setPartitionID(String partitionID) {
1:     this.partitionID = partitionID;
1:   }
1: 
1:   public String getSegmentId() {
1:     return segmentId;
1:   }
1: 
1:   public void setSegmentId(String segmentId) {
1:     this.segmentId = segmentId;
1:   }
1: 
1:   public String getTaskNo() {
1:     return taskNo;
1:   }
1: 
1:   public void setTaskNo(String taskNo) {
1:     this.taskNo = taskNo;
1:   }
1: 
1:   public boolean[] getNoDictionaryDimnesionColumn() {
1:     return noDictionaryDimnesionColumn;
1:   }
1: 
1:   public void setNoDictionaryDimnesionColumn(boolean[] noDictionaryDimnesionColumn) {
1:     this.noDictionaryDimnesionColumn = noDictionaryDimnesionColumn;
1:   }
1: 
1:   public int getNumberOfCores() {
1:     return numberOfCores;
1:   }
1: 
1:   public void setNumberOfCores(int numberOfCores) {
1:     this.numberOfCores = numberOfCores;
1:   }
1: 
1:   public static SortParameters createSortParameters(CarbonDataLoadConfiguration configuration) {
1:     SortParameters parameters = new SortParameters();
1:     CarbonTableIdentifier tableIdentifier =
1:         configuration.getTableIdentifier().getCarbonTableIdentifier();
1:     CarbonProperties carbonProperties = CarbonProperties.getInstance();
1:     parameters.setDatabaseName(tableIdentifier.getDatabaseName());
1:     parameters.setTableName(tableIdentifier.getTableName());
0:     parameters.setPartitionID(configuration.getPartitionId());
1:     parameters.setSegmentId(configuration.getSegmentId());
1:     parameters.setTaskNo(configuration.getTaskNo());
1:     parameters.setMeasureColCount(configuration.getMeasureCount());
1:     parameters.setDimColCount(
0:         configuration.getDimensionCount() - configuration.getComplexDimensionCount());
1:     parameters.setNoDictionaryCount(configuration.getNoDictionaryCount());
0:     parameters.setComplexDimColCount(configuration.getComplexDimensionCount());
1:     parameters.setNoDictionaryDimnesionColumn(
1:         CarbonDataProcessorUtil.getNoDictionaryMapping(configuration.getDataFields()));
1:     parameters.setObserver(new SortObserver());
1:     // get sort buffer size
1:     parameters.setSortBufferSize(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.SORT_SIZE,
1:             CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL)));
1:     LOGGER.info("Sort size for table: " + parameters.getSortBufferSize());
1:     // set number of intermedaite file to merge
1:     parameters.setNumberOfIntermediateFileToBeMerged(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT,
1:             CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE)));
1: 
1:     LOGGER.info("Number of intermediate file to be merged: " + parameters
1:         .getNumberOfIntermediateFileToBeMerged());
1: 
0:     // get file buffer size
0:     parameters.setFileBufferSize(CarbonDataProcessorUtil
0:         .getFileBufferSize(parameters.getNumberOfIntermediateFileToBeMerged(), carbonProperties,
0:             CarbonCommonConstants.CONSTANT_SIZE_TEN));
1: 
0:     LOGGER.info("File Buffer Size: " + parameters.getFileBufferSize());
1: 
0:     String carbonDataDirectoryPath = CarbonDataProcessorUtil
0:         .getLocalDataFolderLocation(tableIdentifier.getDatabaseName(),
0:             tableIdentifier.getTableName(), configuration.getTaskNo(),
0:             configuration.getPartitionId(), configuration.getSegmentId(), false);
0:     parameters.setTempFileLocation(
0:         carbonDataDirectoryPath + File.separator + CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
0:     LOGGER.info("temp file location" + parameters.getTempFileLocation());
1: 
0:     int numberOfCores;
0:     try {
0:       numberOfCores = Integer.parseInt(carbonProperties
0:           .getProperty(CarbonCommonConstants.NUM_CORES_LOADING,
0:               CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
0:       numberOfCores = numberOfCores / 2;
0:     } catch (NumberFormatException exc) {
0:       numberOfCores = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:     }
0:     parameters.setNumberOfCores(numberOfCores);
1: 
1:     parameters.setFileWriteBufferSize(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE,
1:             CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE)));
1: 
0:     parameters.setSortFileCompressionEnabled(Boolean.parseBoolean(carbonProperties
0:         .getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,
0:             CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE)));
1: 
0:     int sortTempFileNoOFRecordsInCompression;
0:     try {
0:       sortTempFileNoOFRecordsInCompression = Integer.parseInt(carbonProperties
0:           .getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,
0:               CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));
0:       if (sortTempFileNoOFRecordsInCompression < 1) {
0:         LOGGER.error("Invalid value for: "
0:             + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION
0:             + ":Only Positive Integer value(greater than zero) is allowed.Default value will "
0:             + "be used");
1: 
0:         sortTempFileNoOFRecordsInCompression = Integer.parseInt(
0:             CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);
1:       }
0:     } catch (NumberFormatException e) {
0:       LOGGER.error(
0:           "Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION
0:               + ", only Positive Integer value is allowed. Default value will be used");
1: 
0:       sortTempFileNoOFRecordsInCompression = Integer
0:           .parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);
1:     }
0:     parameters.setSortTempFileNoOFRecordsInCompression(sortTempFileNoOFRecordsInCompression);
1: 
0:     if (parameters.isSortFileCompressionEnabled()) {
0:       LOGGER.info("Compression will be used for writing the sort temp File");
1:     }
1: 
1:     parameters.setPrefetch(CarbonCommonConstants.CARBON_PREFETCH_IN_MERGE_VALUE);
0:     parameters.setBufferSize(CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE);
1: 
0:     char[] aggType = new char[parameters.getMeasureColCount()];
0:     Arrays.fill(aggType, 'n');
0:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(
0:         parameters.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + parameters
0:             .getTableName());
0:     List<CarbonMeasure> measures = carbonTable.getMeasureByTableName(parameters.getTableName());
0:     for (int i = 0; i < aggType.length; i++) {
0:       aggType[i] = DataTypeUtil.getAggType(measures.get(i).getDataType());
1:     }
0:     parameters.setAggType(aggType);
1:     return parameters;
1:   }
1: 
0:   public static SortParameters createSortParameters(String databaseName, String tableName,
0:       int dimColCount, int complexDimColCount, int measureColCount, SortObserver observer,
0:       int noDictionaryCount, String partitionID, String segmentId, String taskNo,
0:       boolean[] noDictionaryColMaping) {
1:     SortParameters parameters = new SortParameters();
1:     CarbonProperties carbonProperties = CarbonProperties.getInstance();
1:     parameters.setDatabaseName(databaseName);
1:     parameters.setTableName(tableName);
0:     parameters.setPartitionID(partitionID);
1:     parameters.setSegmentId(segmentId);
1:     parameters.setTaskNo(taskNo);
1:     parameters.setMeasureColCount(measureColCount);
1:     parameters.setDimColCount(dimColCount - complexDimColCount);
1:     parameters.setNoDictionaryCount(noDictionaryCount);
1:     parameters.setComplexDimColCount(complexDimColCount);
1:     parameters.setNoDictionaryDimnesionColumn(noDictionaryColMaping);
1:     parameters.setObserver(new SortObserver());
1:     // get sort buffer size
1:     parameters.setSortBufferSize(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.SORT_SIZE,
1:             CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL)));
1:     LOGGER.info("Sort size for table: " + parameters.getSortBufferSize());
1:     // set number of intermedaite file to merge
1:     parameters.setNumberOfIntermediateFileToBeMerged(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT,
1:             CarbonCommonConstants.SORT_INTERMEDIATE_FILES_LIMIT_DEFAULT_VALUE)));
1: 
1:     LOGGER.info("Number of intermediate file to be merged: " + parameters
1:         .getNumberOfIntermediateFileToBeMerged());
1: 
0:     // get file buffer size
0:     parameters.setFileBufferSize(CarbonDataProcessorUtil
0:         .getFileBufferSize(parameters.getNumberOfIntermediateFileToBeMerged(), carbonProperties,
0:             CarbonCommonConstants.CONSTANT_SIZE_TEN));
1: 
0:     LOGGER.info("File Buffer Size: " + parameters.getFileBufferSize());
1: 
0:     String carbonDataDirectoryPath = CarbonDataProcessorUtil
0:         .getLocalDataFolderLocation(databaseName, tableName, taskNo, partitionID, segmentId, false);
0:     parameters.setTempFileLocation(
0:         carbonDataDirectoryPath + File.separator + CarbonCommonConstants.SORT_TEMP_FILE_LOCATION);
0:     LOGGER.info("temp file location" + parameters.getTempFileLocation());
1: 
0:     int numberOfCores;
0:     try {
0:       numberOfCores = Integer.parseInt(carbonProperties
0:           .getProperty(CarbonCommonConstants.NUM_CORES_LOADING,
0:               CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));
0:       numberOfCores = numberOfCores / 2;
0:     } catch (NumberFormatException exc) {
0:       numberOfCores = Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);
1:     }
0:     parameters.setNumberOfCores(numberOfCores);
1: 
1:     parameters.setFileWriteBufferSize(Integer.parseInt(carbonProperties
1:         .getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE,
1:             CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE)));
1: 
0:     parameters.setSortFileCompressionEnabled(Boolean.parseBoolean(carbonProperties
0:         .getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,
0:             CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE)));
1: 
0:     int sortTempFileNoOFRecordsInCompression;
0:     try {
0:       sortTempFileNoOFRecordsInCompression = Integer.parseInt(carbonProperties
0:           .getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,
0:               CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));
0:       if (sortTempFileNoOFRecordsInCompression < 1) {
0:         LOGGER.error("Invalid value for: "
0:             + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION
0:             + ":Only Positive Integer value(greater than zero) is allowed.Default value will "
0:             + "be used");
1: 
0:         sortTempFileNoOFRecordsInCompression = Integer.parseInt(
0:             CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);
1:       }
0:     } catch (NumberFormatException e) {
0:       LOGGER.error(
0:           "Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION
0:               + ", only Positive Integer value is allowed. Default value will be used");
1: 
0:       sortTempFileNoOFRecordsInCompression = Integer
0:           .parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);
1:     }
0:     parameters.setSortTempFileNoOFRecordsInCompression(sortTempFileNoOFRecordsInCompression);
1: 
0:     if (parameters.isSortFileCompressionEnabled()) {
0:       LOGGER.info("Compression will be used for writing the sort temp File");
1:     }
1: 
1:     parameters.setPrefetch(CarbonCommonConstants.CARBON_PREFETCH_IN_MERGE_VALUE);
0:     parameters.setBufferSize(CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE);
1: 
0:     char[] aggType = new char[parameters.getMeasureColCount()];
0:     Arrays.fill(aggType, 'n');
0:     CarbonTable carbonTable = CarbonMetadata.getInstance().getCarbonTable(
0:         parameters.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + parameters
0:             .getTableName());
0:     List<CarbonMeasure> measures = carbonTable.getMeasureByTableName(parameters.getTableName());
0:     for (int i = 0; i < aggType.length; i++) {
0:       aggType[i] = DataTypeUtil.getAggType(measures.get(i).getDataType());
1:     }
0:     parameters.setAggType(aggType);
1:     return parameters;
1:   }
1: 
1: }
author:Zhang Zhichao
-------------------------------------------------------------------------------
commit:9e9d689
/////////////////////////////////////////////////////////////////////////
1:     int numberOfCores = carbonProperties.getNumberOfCores() / 2;
/////////////////////////////////////////////////////////////////////////
1:     int numberOfCores = carbonProperties.getNumberOfCores() / 2;
author:lionelcao
-------------------------------------------------------------------------------
commit:874764f
/////////////////////////////////////////////////////////////////////////
0:             configuration.getPartitionId(), configuration.getSegmentId(), false, false);
/////////////////////////////////////////////////////////////////////////
1:             isCompactionFlow, false);
author:Yadong Qi
-------------------------------------------------------------------------------
commit:82741c1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public class SortParameters implements Serializable {
author:jackylk
-------------------------------------------------------------------------------
commit:353272e
/////////////////////////////////////////////////////////////////////////
0:         configuration.getDimensionCount() - configuration.getComplexColumnCount());
0:     parameters.setComplexDimColCount(configuration.getComplexColumnCount());
/////////////////////////////////////////////////////////////////////////
1:     DataType[] measureDataType = configuration.getMeasureDataType();
commit:98df130
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataType;
/////////////////////////////////////////////////////////////////////////
1:   private DataType[] measureDataType;
/////////////////////////////////////////////////////////////////////////
1:     parameters.measureDataType = measureDataType;
/////////////////////////////////////////////////////////////////////////
1:   public DataType[] getMeasureDataType() {
1:     return measureDataType;
1:   public void setMeasureDataType(DataType[] measureDataType) {
1:     this.measureDataType = measureDataType;
/////////////////////////////////////////////////////////////////////////
0:     DataType[] measureDataType = CarbonDataProcessorUtil
0:         .getMeasureDataType(configuration.getMeasureCount(), configuration.getMeasureFields());
1:     parameters.setMeasureDataType(measureDataType);
/////////////////////////////////////////////////////////////////////////
1:     DataType[] type = CarbonDataProcessorUtil
1:         .getMeasureDataType(parameters.getMeasureColCount(), parameters.getDatabaseName(),
1:     parameters.setMeasureDataType(type);
commit:ce09aaa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.CarbonTableIdentifier;
commit:3fe6903
/////////////////////////////////////////////////////////////////////////
0:       int dimColCount, int complexDimColCount, int measureColCount, int noDictionaryCount,
0:       String partitionID, String segmentId, String taskNo,
author:manishgupta88
-------------------------------------------------------------------------------
commit:89ddf5a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.schema.table.CarbonTable;
/////////////////////////////////////////////////////////////////////////
1:     setNoDictionarySortColumnMapping(parameters);
/////////////////////////////////////////////////////////////////////////
0:   /**
1:    * this method will set the boolean mapping for no dictionary sort columns
1:    *
1:    * @param parameters
0:    */
1:   private static void setNoDictionarySortColumnMapping(SortParameters parameters) {
1:     if (parameters.getNumberOfSortColumns() == parameters.getNoDictionaryDimnesionColumn().length) {
1:       parameters.setNoDictionarySortColumn(parameters.getNoDictionaryDimnesionColumn());
1:     } else {
1:       boolean[] noDictionarySortColumnTemp = new boolean[parameters.getNumberOfSortColumns()];
1:       System
1:           .arraycopy(parameters.getNoDictionaryDimnesionColumn(), 0, noDictionarySortColumnTemp, 0,
1:               parameters.getNumberOfSortColumns());
1:       parameters.setNoDictionarySortColumn(noDictionarySortColumnTemp);
0:     }
0:   }
0: 
1:   public static SortParameters createSortParameters(CarbonTable carbonTable, String databaseName,
1:       String tableName, int dimColCount, int complexDimColCount, int measureColCount,
0:       int noDictionaryCount, String partitionID, String segmentId, String taskNo,
0:       boolean[] noDictionaryColMaping, boolean isCompactionFlow) {
/////////////////////////////////////////////////////////////////////////
1:     parameters.setNumberOfSortColumns(carbonTable.getNumberOfSortColumns());
1:     parameters.setNumberOfNoDictSortColumns(carbonTable.getNumberOfNoDictSortColumns());
/////////////////////////////////////////////////////////////////////////
1:     setNoDictionarySortColumnMapping(parameters);
commit:f890d00
/////////////////////////////////////////////////////////////////////////
0:       String partitionID, String segmentId, String taskNo, boolean[] noDictionaryColMaping,
0:       boolean isCompactionFlow) {
/////////////////////////////////////////////////////////////////////////
0:         .getLocalDataFolderLocation(databaseName, tableName, taskNo, partitionID, segmentId,
0:             isCompactionFlow);
commit:cc59b24
/////////////////////////////////////////////////////////////////////////
0:       String partitionID, String segmentId, String taskNo, boolean[] noDictionaryColMaping) {
commit:70256e7
/////////////////////////////////////////////////////////////////////////
0:         .getAggType(configuration.getMeasureCount(), configuration.getMeasureFields());
author:QiangCai
-------------------------------------------------------------------------------
commit:9f94529
/////////////////////////////////////////////////////////////////////////
1:   private boolean[] noDictionarySortColumn;
0: 
1:   private int numberOfSortColumns;
0: 
1:   private int numberOfNoDictSortColumns;
0: 
/////////////////////////////////////////////////////////////////////////
1:     parameters.noDictionarySortColumn = noDictionarySortColumn;
1:     parameters.numberOfSortColumns = numberOfSortColumns;
1:     parameters.numberOfNoDictSortColumns = numberOfNoDictSortColumns;
/////////////////////////////////////////////////////////////////////////
1:   public int getNumberOfSortColumns() {
1:     return numberOfSortColumns;
0:   }
0: 
1:   public void setNumberOfSortColumns(int numberOfSortColumns) {
1:     this.numberOfSortColumns = Math.min(numberOfSortColumns, this.dimColCount);
0:   }
0: 
1:   public boolean[] getNoDictionarySortColumn() {
1:     return noDictionarySortColumn;
0:   }
0: 
1:   public void setNoDictionarySortColumn(boolean[] noDictionarySortColumn) {
1:     this.noDictionarySortColumn = noDictionarySortColumn;
0:   }
0: 
1:   public int getNumberOfNoDictSortColumns() {
1:     return numberOfNoDictSortColumns;
0:   }
0: 
1:   public void setNumberOfNoDictSortColumns(int numberOfNoDictSortColumns) {
1:     this.numberOfNoDictSortColumns = Math.min(numberOfNoDictSortColumns, noDictionaryCount);
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:     parameters.setNumberOfSortColumns(configuration.getNumberOfSortColumns());
1:     parameters.setNumberOfNoDictSortColumns(configuration.getNumberOfNoDictSortColumns());
0:     if (parameters.getNumberOfSortColumns() == parameters.getNoDictionaryDimnesionColumn().length) {
0:       parameters.setNoDictionarySortColumn(parameters.getNoDictionaryDimnesionColumn());
0:     } else {
0:       boolean[] noDictionarySortColumnTemp = new boolean[parameters.getNumberOfSortColumns()];
0:       System.arraycopy(parameters.getNoDictionaryDimnesionColumn(), 0,
0:           noDictionarySortColumnTemp, 0, parameters.getNumberOfSortColumns());
0:       parameters.setNoDictionarySortColumn(noDictionarySortColumnTemp);
0:     }
commit:c5aba5f
/////////////////////////////////////////////////////////////////////////
1:     parameters.setBufferSize(Integer.parseInt(carbonProperties.getProperty(
1:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE,
1:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE_DEFAULT)));
/////////////////////////////////////////////////////////////////////////
1:     parameters.setPrefetch(CarbonCommonConstants. CARBON_PREFETCH_IN_MERGE_VALUE);
1:     parameters.setBufferSize(Integer.parseInt(carbonProperties.getProperty(
1:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE,
1:         CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE_DEFAULT)));
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================