1:b0d24ea: /*
1:b0d24ea:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b0d24ea:  * contributor license agreements.  See the NOTICE file distributed with
1:b0d24ea:  * this work for additional information regarding copyright ownership.
1:b0d24ea:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b0d24ea:  * (the "License"); you may not use this file except in compliance with
1:b0d24ea:  * the License.  You may obtain a copy of the License at
1:b0d24ea:  *
1:b0d24ea:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b0d24ea:  *
1:b0d24ea:  * Unless required by applicable law or agreed to in writing, software
1:b0d24ea:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b0d24ea:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b0d24ea:  * See the License for the specific language governing permissions and
1:b0d24ea:  * limitations under the License.
1:b0d24ea:  */
1:b0d24ea: package org.apache.carbondata.core.localdictionary;
1:b0d24ea: 
1:589fe18: import java.nio.ByteBuffer;
1:b0d24ea: import java.util.Arrays;
1:b0d24ea: 
1:b0d24ea: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.generator.ColumnLocalDictionaryGenerator;
1:b0d24ea: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1:b0d24ea: 
1:b0d24ea: import org.junit.Assert;
1:b0d24ea: import org.junit.Test;
1:b0d24ea: 
1:b0d24ea: public class TestLocalDictionaryGenerator {
1:b0d24ea: 
1:b0d24ea:   @Test
1:b0d24ea:   public void testColumnLocalDictionaryGeneratorWithValidDataWithinThreshold() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 1000; i++) {
1:b0d24ea:         generator.generateDictionary(("" + i).getBytes());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     } catch (Exception e) {
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     }
1:b0d24ea: 
1:b0d24ea:     int dictionaryValue = 2;
1:b0d24ea:     for (int i = 1; i <= 1000; i++) {
1:b0d24ea:       byte[] dictionaryKeyBasedOnValue = generator.getDictionaryKeyBasedOnValue(dictionaryValue);
1:b0d24ea:       Assert
1:b0d24ea:           .assertTrue(Arrays.equals(dictionaryKeyBasedOnValue, ("" + i).getBytes()));
1:b0d24ea:       dictionaryValue++;
1:b0d24ea:     }
1:b0d24ea:   }
1:b0d24ea: 
1:b0d24ea:   @Test
1:b0d24ea:   public void testColumnLocalDictionaryGeneratorWhenThresholdReached_ExceptionShouldBeThrown() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:b0d24ea:     try {
1:b0d24ea:       for (int i = 1; i <= 10000; i++) {
1:b0d24ea:         generator.generateDictionary(("" + i).getBytes());
1:b0d24ea:       }
1:b0d24ea:       Assert.assertTrue(false);
1:b0d24ea:     } catch (DictionaryThresholdReachedException e) {
1:b0d24ea:       Assert.assertTrue(true);
1:b0d24ea:     }
1:b0d24ea:     Assert.assertTrue(generator.isThresholdReached());
1:b0d24ea:   }
1:b0d24ea: 
1:b0d24ea:   @Test
1:b0d24ea:   public void testColumnLocalDictionaryGeneratorForNullValueIsPresentWithoutAddingAnyData() {
1:589fe18:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:589fe18:     ByteBuffer byteBuffer = ByteBuffer.allocate(
1:589fe18:         2 + CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:589fe18:     byteBuffer.putShort((short)CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:589fe18:     byteBuffer.put(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY);
1:589fe18: 
1:b0d24ea:     Assert.assertTrue(Arrays.equals(generator.getDictionaryKeyBasedOnValue(1),
1:589fe18:         byteBuffer.array()));
1:b0d24ea:   }
1:b0d24ea: }
============================================================================
author:ravipesala
-------------------------------------------------------------------------------
commit:589fe18
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
/////////////////////////////////////////////////////////////////////////
1:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000, 2);
1:     ByteBuffer byteBuffer = ByteBuffer.allocate(
1:         2 + CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:     byteBuffer.putShort((short)CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY.length);
1:     byteBuffer.put(CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY);
1: 
1:         byteBuffer.array()));
author:akashrn5
-------------------------------------------------------------------------------
commit:b0d24ea
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.carbondata.core.localdictionary;
1: 
1: import java.util.Arrays;
1: 
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.localdictionary.exception.DictionaryThresholdReachedException;
1: import org.apache.carbondata.core.localdictionary.generator.ColumnLocalDictionaryGenerator;
1: import org.apache.carbondata.core.localdictionary.generator.LocalDictionaryGenerator;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class TestLocalDictionaryGenerator {
1: 
1:   @Test
1:   public void testColumnLocalDictionaryGeneratorWithValidDataWithinThreshold() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     try {
1:       for (int i = 1; i <= 1000; i++) {
1:         generator.generateDictionary(("" + i).getBytes());
1:       }
1:       Assert.assertTrue(true);
1:     } catch (Exception e) {
1:       Assert.assertTrue(false);
1:     }
1: 
1:     int dictionaryValue = 2;
1:     for (int i = 1; i <= 1000; i++) {
1:       byte[] dictionaryKeyBasedOnValue = generator.getDictionaryKeyBasedOnValue(dictionaryValue);
1:       Assert
1:           .assertTrue(Arrays.equals(dictionaryKeyBasedOnValue, ("" + i).getBytes()));
1:       dictionaryValue++;
1:     }
1:   }
1: 
1:   @Test
1:   public void testColumnLocalDictionaryGeneratorWhenThresholdReached_ExceptionShouldBeThrown() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     try {
1:       for (int i = 1; i <= 10000; i++) {
1:         generator.generateDictionary(("" + i).getBytes());
1:       }
1:       Assert.assertTrue(false);
1:     } catch (DictionaryThresholdReachedException e) {
1:       Assert.assertTrue(true);
1:     }
1:     Assert.assertTrue(generator.isThresholdReached());
1:   }
1: 
1:   @Test
1:   public void testColumnLocalDictionaryGeneratorForNullValueIsPresentWithoutAddingAnyData() {
0:     LocalDictionaryGenerator generator = new ColumnLocalDictionaryGenerator(1000);
1:     Assert.assertTrue(Arrays.equals(generator.getDictionaryKeyBasedOnValue(1),
0:         CarbonCommonConstants.MEMBER_DEFAULT_VAL_ARRAY));
1:   }
1: }
============================================================================