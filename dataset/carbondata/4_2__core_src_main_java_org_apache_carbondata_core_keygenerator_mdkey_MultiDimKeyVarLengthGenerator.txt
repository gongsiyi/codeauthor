1:cd6a4ff: /*
1:41347d8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41347d8:  * contributor license agreements.  See the NOTICE file distributed with
1:41347d8:  * this work for additional information regarding copyright ownership.
1:41347d8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41347d8:  * (the "License"); you may not use this file except in compliance with
1:41347d8:  * the License.  You may obtain a copy of the License at
1:cd6a4ff:  *
1:cd6a4ff:  *    http://www.apache.org/licenses/LICENSE-2.0
1:cd6a4ff:  *
1:41347d8:  * Unless required by applicable law or agreed to in writing, software
1:41347d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41347d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41347d8:  * See the License for the specific language governing permissions and
1:41347d8:  * limitations under the License.
1:cd6a4ff:  */
4:cd6a4ff: 
1:cd6a4ff: package org.apache.carbondata.core.keygenerator.mdkey;
1:cd6a4ff: 
1:cd6a4ff: import org.apache.carbondata.core.keygenerator.KeyGenException;
1:cd6a4ff: 
1:cd6a4ff: public class MultiDimKeyVarLengthGenerator extends AbstractKeyGenerator {
1:cd6a4ff: 
1:cd6a4ff:   private static final long serialVersionUID = 9134778127271586515L;
1:cd6a4ff:   /**
1:cd6a4ff:    *
1:cd6a4ff:    */
1:cd6a4ff:   protected int[][] byteRangesForKeys;
1:cd6a4ff:   private Bits bits;
1:cd6a4ff: 
1:cd6a4ff:   public MultiDimKeyVarLengthGenerator(int[] lens) {
1:cd6a4ff:     bits = new Bits(lens);
1:cd6a4ff:     byteRangesForKeys = new int[lens.length][];
1:cd6a4ff:     int keys = lens.length;
1:cd6a4ff:     for (int i = 0; i < keys; i++) {
1:cd6a4ff:       byteRangesForKeys[i] = bits.getKeyByteOffsets(i);
5:cd6a4ff:     }
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[] generateKey(long[] keys) throws KeyGenException {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getBytes(keys);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public byte[] generateKey(int[] keys) throws KeyGenException {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getBytes(keys);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public long[] getKeyArray(byte[] key) {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getKeyArray(key, 0);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public long[] getKeyArray(byte[] key, int offset) {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getKeyArray(key, offset);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public long getKey(byte[] key, int index) {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getKeyArray(key, 0)[index];
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   public int getKeySizeInBytes() {
1:cd6a4ff:     return bits.getByteSize();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int[] getKeyByteOffsets(int index) {
1:cd6a4ff:     return byteRangesForKeys[index];
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int getDimCount() {
1:cd6a4ff: 
1:cd6a4ff:     return bits.getDimCount();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public boolean equals(Object obj) {
1:cd6a4ff:     if (obj instanceof MultiDimKeyVarLengthGenerator) {
1:cd6a4ff:       MultiDimKeyVarLengthGenerator other = (MultiDimKeyVarLengthGenerator) obj;
1:cd6a4ff:       return bits.equals(other.bits);
1:cd6a4ff:     }
1:cd6a4ff: 
1:cd6a4ff:     return false;
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public int hashCode() {
1:cd6a4ff:     return bits.hashCode();
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff:   @Override public long[] getKeyArray(byte[] key, int[] maskedByteRanges) {
1:cd6a4ff:     return bits.getKeyArray(key, maskedByteRanges);
1:cd6a4ff:   }
1:cd6a4ff: 
1:cd6a4ff: }
============================================================================
author:dhatchayani
-------------------------------------------------------------------------------
commit:d25fee2
/////////////////////////////////////////////////////////////////////////
author:QiangCai
-------------------------------------------------------------------------------
commit:41347d8
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:jackylk
-------------------------------------------------------------------------------
commit:eaadc88
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:ravipesala
-------------------------------------------------------------------------------
commit:cd6a4ff
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
1: package org.apache.carbondata.core.keygenerator.mdkey;
1: 
1: import org.apache.carbondata.core.keygenerator.KeyGenException;
1: 
1: public class MultiDimKeyVarLengthGenerator extends AbstractKeyGenerator {
1: 
1:   private static final long serialVersionUID = 9134778127271586515L;
1:   /**
1:    *
1:    */
1:   protected int[][] byteRangesForKeys;
1:   private Bits bits;
0:   private int startAndEndKeySizeWithPrimitives;
1: 
1:   public MultiDimKeyVarLengthGenerator(int[] lens) {
1:     bits = new Bits(lens);
1:     byteRangesForKeys = new int[lens.length][];
1:     int keys = lens.length;
1:     for (int i = 0; i < keys; i++) {
1:       byteRangesForKeys[i] = bits.getKeyByteOffsets(i);
1:     }
1:   }
1: 
1:   @Override public byte[] generateKey(long[] keys) throws KeyGenException {
1: 
1:     return bits.getBytes(keys);
1:   }
1: 
1:   @Override public byte[] generateKey(int[] keys) throws KeyGenException {
1: 
1:     return bits.getBytes(keys);
1:   }
1: 
1:   @Override public long[] getKeyArray(byte[] key) {
1: 
1:     return bits.getKeyArray(key, 0);
1:   }
1: 
1:   @Override public long[] getKeyArray(byte[] key, int offset) {
1: 
1:     return bits.getKeyArray(key, offset);
1:   }
1: 
1:   @Override public long getKey(byte[] key, int index) {
1: 
1:     return bits.getKeyArray(key, 0)[index];
1:   }
1: 
1:   public int getKeySizeInBytes() {
1:     return bits.getByteSize();
1:   }
1: 
0:   @Override public long[] getSubKeyArray(byte[] key, int index, int size) {
0:     if (index < 0 || size == 0) {
0:       return null;
1:     }
0:     long[] keys = bits.getKeyArray(key, 0);
0:     long[] rtn = new long[size];
0:     System.arraycopy(keys, index, rtn, 0, size);
0:     return rtn;
1:   }
1: 
1:   @Override public int[] getKeyByteOffsets(int index) {
1:     return byteRangesForKeys[index];
1:   }
1: 
1:   @Override public int getDimCount() {
1: 
1:     return bits.getDimCount();
1:   }
1: 
1:   @Override public boolean equals(Object obj) {
1:     if (obj instanceof MultiDimKeyVarLengthGenerator) {
1:       MultiDimKeyVarLengthGenerator other = (MultiDimKeyVarLengthGenerator) obj;
1:       return bits.equals(other.bits);
1:     }
1: 
1:     return false;
1:   }
1: 
1:   @Override public int hashCode() {
1:     return bits.hashCode();
1:   }
1: 
1:   @Override public long[] getKeyArray(byte[] key, int[] maskedByteRanges) {
1:     return bits.getKeyArray(key, maskedByteRanges);
1:   }
1: 
0:   @Override public int getStartAndEndKeySizeWithOnlyPrimitives() {
0:     return startAndEndKeySizeWithPrimitives;
1:   }
1: 
0:   @Override
0:   public void setStartAndEndKeySizeWithOnlyPrimitives(int startAndEndKeySizeWithPrimitives) {
0:     this.startAndEndKeySizeWithPrimitives = startAndEndKeySizeWithPrimitives;
1:   }
1: 
1: }
============================================================================