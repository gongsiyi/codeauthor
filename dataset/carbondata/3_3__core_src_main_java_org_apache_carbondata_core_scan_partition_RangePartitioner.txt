1:b6b93f0: /*
1:b6b93f0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b6b93f0:  * contributor license agreements.  See the NOTICE file distributed with
1:b6b93f0:  * this work for additional information regarding copyright ownership.
1:b6b93f0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b6b93f0:  * (the "License"); you may not use this file except in compliance with
1:b6b93f0:  * the License.  You may obtain a copy of the License at
1:b6b93f0:  *
1:b6b93f0:  *    http://www.apache.org/licenses/LICENSE-2.0
1:b6b93f0:  *
1:b6b93f0:  * Unless required by applicable law or agreed to in writing, software
1:b6b93f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6b93f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6b93f0:  * See the License for the specific language governing permissions and
1:b6b93f0:  * limitations under the License.
1:b6b93f0:  */
10:b6b93f0: 
1:b6b93f0: package org.apache.carbondata.core.scan.partition;
1:b6b93f0: 
1:71934e9: import java.text.SimpleDateFormat;
1:b6b93f0: import java.util.List;
1:b6b93f0: 
1:71934e9: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1:b6b93f0: import org.apache.carbondata.core.metadata.datatype.DataType;
1:956833e: import org.apache.carbondata.core.metadata.datatype.DataTypes;
1:b6b93f0: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1:b6b93f0: import org.apache.carbondata.core.util.ByteUtil;
1:71934e9: import org.apache.carbondata.core.util.CarbonProperties;
1:6488bc0: import org.apache.carbondata.core.util.comparator.Comparator;
1:6488bc0: import org.apache.carbondata.core.util.comparator.SerializableComparator;
1:b6b93f0: 
1:b6b93f0: /**
1:b6b93f0:  * Range Partitioner
1:b6b93f0:  */
1:b6b93f0: public class RangePartitioner implements Partitioner {
1:b6b93f0: 
1:b6b93f0:   private int numPartitions;
1:b6b93f0:   private Object[] bounds;
1:b6b93f0:   private SerializableComparator comparator;
1:b6b93f0: 
1:71934e9:   private SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:       .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:71934e9:           CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1:71934e9: 
1:71934e9:   private SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:71934e9:       .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:71934e9:           CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1:71934e9: 
1:b6b93f0:   public RangePartitioner(PartitionInfo partitionInfo) {
1:b6b93f0:     List<String> values = partitionInfo.getRangeInfo();
1:b6b93f0:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:b6b93f0:     numPartitions = values.size();
1:b6b93f0:     bounds = new Object[numPartitions];
1:956833e:     if (partitionColumnDataType == DataTypes.STRING) {
1:b6b93f0:       for (int i = 0; i < numPartitions; i++) {
1:b6b93f0:         bounds[i] = ByteUtil.toBytes(values.get(i));
15:b6b93f0:       }
1:b6b93f0:     } else {
1:b6b93f0:       for (int i = 0; i < numPartitions; i++) {
1:71934e9:         bounds[i] = PartitionUtil.getDataBasedOnDataType(values.get(i), partitionColumnDataType,
1:71934e9:             timestampFormatter, dateFormatter);
1:b6b93f0:       }
1:b6b93f0:     }
1:6488bc0:     comparator = Comparator.getComparator(partitionColumnDataType);
1:b6b93f0:   }
1:b6b93f0: 
1:b6b93f0:   /**
1:b6b93f0:    * number of partitions
1:b6b93f0:    * add extra default partition
1:71934e9:    *
1:b6b93f0:    * @return
1:b6b93f0:    */
1:b6b93f0:   @Override public int numPartitions() {
1:b6b93f0:     return numPartitions + 1;
1:b6b93f0:   }
1:b6b93f0: 
1:b6b93f0:   @Override public int getPartition(Object key) {
1:b6b93f0:     if (key == null) {
1:6488bc0:       return 0;
1:b6b93f0:     } else {
1:b6b93f0:       for (int i = 0; i < numPartitions; i++) {
1:6488bc0:         if (comparator.compare(key, bounds[i]) < 0) {
1:6488bc0:           return i + 1;
1:b6b93f0:         }
1:b6b93f0:       }
1:6488bc0:       return 0;
1:b6b93f0:     }
1:b6b93f0:   }
1:b6b93f0: }
============================================================================
author:Jacky Li
-------------------------------------------------------------------------------
commit:956833e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.metadata.datatype.DataTypes;
/////////////////////////////////////////////////////////////////////////
1:     if (partitionColumnDataType == DataTypes.STRING) {
author:lionelcao
-------------------------------------------------------------------------------
commit:6488bc0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.carbondata.core.util.comparator.Comparator;
1: import org.apache.carbondata.core.util.comparator.SerializableComparator;
/////////////////////////////////////////////////////////////////////////
1:     comparator = Comparator.getComparator(partitionColumnDataType);
/////////////////////////////////////////////////////////////////////////
1:       return 0;
1:         if (comparator.compare(key, bounds[i]) < 0) {
1:           return i + 1;
1:       return 0;
author:QiangCai
-------------------------------------------------------------------------------
commit:71934e9
/////////////////////////////////////////////////////////////////////////
1: import java.text.SimpleDateFormat;
1: import org.apache.carbondata.core.constants.CarbonCommonConstants;
1: import org.apache.carbondata.core.util.CarbonProperties;
/////////////////////////////////////////////////////////////////////////
1:   private SimpleDateFormat timestampFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:       .getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,
1:           CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));
1: 
1:   private SimpleDateFormat dateFormatter = new SimpleDateFormat(CarbonProperties.getInstance()
1:       .getProperty(CarbonCommonConstants.CARBON_DATE_FORMAT,
1:           CarbonCommonConstants.CARBON_DATE_DEFAULT_FORMAT));
1: 
/////////////////////////////////////////////////////////////////////////
1:         bounds[i] = PartitionUtil.getDataBasedOnDataType(values.get(i), partitionColumnDataType,
1:             timestampFormatter, dateFormatter);
/////////////////////////////////////////////////////////////////////////
1:    *
commit:b6b93f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.carbondata.core.scan.partition;
1: 
0: import java.io.Serializable;
0: import java.math.BigDecimal;
1: import java.util.List;
1: 
1: import org.apache.carbondata.core.metadata.datatype.DataType;
1: import org.apache.carbondata.core.metadata.schema.PartitionInfo;
1: import org.apache.carbondata.core.util.ByteUtil;
1: 
1: /**
1:  * Range Partitioner
1:  */
1: public class RangePartitioner implements Partitioner {
1: 
1:   private int numPartitions;
1:   private Object[] bounds;
1:   private SerializableComparator comparator;
1: 
1:   public RangePartitioner(PartitionInfo partitionInfo) {
1:     List<String> values = partitionInfo.getRangeInfo();
1:     DataType partitionColumnDataType = partitionInfo.getColumnSchemaList().get(0).getDataType();
1:     numPartitions = values.size();
1:     bounds = new Object[numPartitions];
0:     if (partitionColumnDataType == DataType.STRING) {
1:       for (int i = 0; i < numPartitions; i++) {
1:         bounds[i] = ByteUtil.toBytes(values.get(i));
1:       }
1:     } else {
1:       for (int i = 0; i < numPartitions; i++) {
0:         bounds[i] = PartitionUtil.getDataBasedOnDataType(values.get(i), partitionColumnDataType);
1:       }
1:     }
1: 
0:     switch (partitionColumnDataType) {
0:       case INT:
0:         comparator = new IntSerializableComparator();
0:         break;
0:       case SHORT:
0:         comparator = new ShortSerializableComparator();
0:         break;
0:       case DOUBLE:
0:         comparator = new DoubleSerializableComparator();
0:         break;
0:       case LONG:
0:       case DATE:
0:       case TIMESTAMP:
0:         comparator = new LongSerializableComparator();
0:         break;
0:       case DECIMAL:
0:         comparator = new BigDecimalSerializableComparator();
0:         break;
0:       default:
0:         comparator = new ByteArraySerializableComparator();
1:     }
1:   }
1: 
1:   /**
1:    * number of partitions
1:    * add extra default partition
1:    * @return
1:    */
1:   @Override public int numPartitions() {
1:     return numPartitions + 1;
1:   }
1: 
1:   @Override public int getPartition(Object key) {
1:     if (key == null) {
0:       return numPartitions;
1:     } else {
1:       for (int i = 0; i < numPartitions; i++) {
0:         if (comparator.compareTo(key, bounds[i])) {
0:           return i;
1:         }
1:       }
0:       return numPartitions;
1:     }
1:   }
1: 
0:   interface SerializableComparator extends Serializable {
0:     boolean compareTo(Object key1, Object key2);
1:   }
1: 
0:   class ByteArraySerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return ByteUtil.compare((byte[]) key1, (byte[]) key2) < 0;
1:     }
1:   }
1: 
0:   class IntSerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return (int) key1 - (int) key2 < 0;
1:     }
1:   }
1: 
0:   class ShortSerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return (short) key1 - (short) key2 < 0;
1:     }
1:   }
1: 
0:   class DoubleSerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return (double) key1 - (double) key2 < 0;
1:     }
1:   }
1: 
0:   class LongSerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return (long) key1 - (long) key2 < 0;
1:     }
1:   }
1: 
0:   class BigDecimalSerializableComparator implements SerializableComparator {
0:     @Override public boolean compareTo(Object key1, Object key2) {
0:       return ((BigDecimal) key1).compareTo((BigDecimal) key2) < 0;
1:     }
1:   }
1: 
1: }
============================================================================