1:3cd7500: /*
1:3cd7500:  * Licensed to the Apache Software Foundation (ASF) under one
1:3cd7500:  * or more contributor license agreements.  See the NOTICE file
1:3cd7500:  * distributed with this work for additional information
1:3cd7500:  * regarding copyright ownership.  The ASF licenses this file
1:3cd7500:  * to you under the Apache License, Version 2.0 (the
1:3cd7500:  * "License"); you may not use this file except in compliance
1:3cd7500:  * with the License.  You may obtain a copy of the License at
1:3cd7500:  *
1:3cd7500:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3cd7500:  *
1:3cd7500:  * Unless required by applicable law or agreed to in writing, software
1:3cd7500:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3cd7500:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3cd7500:  * See the License for the specific language governing permissions and
1:3cd7500:  * limitations under the License.
1:3cd7500:  */
1:3cd7500: package org.apache.cassandra.tools.nodetool;
1:3cd7500: 
1:3cd7500: import io.airlift.command.Command;
1:3cd7500: 
1:3cd7500: import java.util.List;
1:3cd7500: 
1:3cd7500: import javax.management.openmbean.CompositeData;
1:3cd7500: import javax.management.openmbean.TabularData;
1:3cd7500: 
1:3cd7500: import org.apache.cassandra.tools.NodeProbe;
1:3cd7500: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:3cd7500: 
1:3cd7500: @Command(name = "failuredetector", description = "Shows the failure detector information for the cluster")
1:3cd7500: public class FailureDetectorInfo extends NodeToolCmd
1:3cd7500: {
1:3cd7500:     @Override
1:3cd7500:     public void execute(NodeProbe probe)
1:3cd7500:     {
1:3cd7500:         TabularData data = probe.getFailureDetectorPhilValues();
1:b154622:         System.out.printf("%10s,%16s%n", "Endpoint", "Phi");
1:3cd7500:         for (Object o : data.keySet())
1:3cd7500:         {
1:3cd7500:             @SuppressWarnings({ "rawtypes", "unchecked" })
1:3cd7500:             CompositeData datum = data.get(((List) o).toArray(new Object[((List) o).size()]));
1:b154622:             System.out.printf("%10s,%16.8f%n",datum.get("Endpoint"), datum.get("PHI"));
1:3cd7500:         }
1:3cd7500:     }
1:3cd7500: }
1:3cd7500: 
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:b154622
/////////////////////////////////////////////////////////////////////////
1:         System.out.printf("%10s,%16s%n", "Endpoint", "Phi");
1:             System.out.printf("%10s,%16.8f%n",datum.get("Endpoint"), datum.get("PHI"));
author:Ron Kuris
-------------------------------------------------------------------------------
commit:3cd7500
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import io.airlift.command.Command;
1: 
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "failuredetector", description = "Shows the failure detector information for the cluster")
1: public class FailureDetectorInfo extends NodeToolCmd
1: {
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         TabularData data = probe.getFailureDetectorPhilValues();
0:         System.out.printf("%10s,%16s\n", "Endpoint", "Phi");
1:         for (Object o : data.keySet())
1:         {
1:             @SuppressWarnings({ "rawtypes", "unchecked" })
1:             CompositeData datum = data.get(((List) o).toArray(new Object[((List) o).size()]));
0:             System.out.printf("%10s,%16.8f\n",datum.get("Endpoint"), datum.get("PHI"));
1:         }
1:     }
1: }
1: 
============================================================================