1:7536429: package org.apache.cassandra.stress.generate;
1:0bc9841: /*
1:0bc9841:  * 
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  * 
1:0bc9841:  */
4:7536429: 
1:7536429: 
1:7536429: import java.nio.ByteBuffer;
1:47d3b7e: import java.util.*;
1:47d3b7e: import java.util.stream.Collectors;
1:7536429: 
1:7536429: import com.google.common.collect.Iterables;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.generate.values.Generator;
1:7536429: 
1:7536429: public class PartitionGenerator
3:7536429: {
1:7536429: 
1:0580fb2:     public static enum Order
1:0580fb2:     {
1:0580fb2:         ARBITRARY, SHUFFLED, SORTED
1:0580fb2:     }
1:0580fb2: 
1:7536429:     public final double maxRowCount;
1:0580fb2:     public final double minRowCount;
1:7536429:     final List<Generator> partitionKey;
1:7536429:     final List<Generator> clusteringComponents;
1:7536429:     final List<Generator> valueComponents;
1:6c579a0:     final int[] clusteringDescendantAverages;
1:6c579a0:     final int[] clusteringComponentAverages;
1:7536429: 
1:7536429:     private final Map<String, Integer> indexMap;
1:0580fb2:     final Order order;
1:7536429: 
1:6c579a0:     public PartitionGenerator(List<Generator> partitionKey, List<Generator> clusteringComponents, List<Generator> valueComponents, Order order)
1:7536429:     {
1:7536429:         this.partitionKey = partitionKey;
1:7536429:         this.clusteringComponents = clusteringComponents;
1:7536429:         this.valueComponents = valueComponents;
1:0580fb2:         this.order = order;
1:6c579a0:         this.clusteringDescendantAverages = new int[clusteringComponents.size()];
1:6c579a0:         this.clusteringComponentAverages = new int[clusteringComponents.size()];
1:6c579a0:         for (int i = 0 ; i < clusteringComponentAverages.length ; i++)
1:6c579a0:             clusteringComponentAverages[i] = (int) clusteringComponents.get(i).clusteringDistribution.average();
1:6c579a0:         for (int i = clusteringDescendantAverages.length - 1 ; i >= 0 ; i--)
1:6c579a0:             clusteringDescendantAverages[i] = (int) (i < (clusteringDescendantAverages.length - 1) ? clusteringComponentAverages[i + 1] * clusteringDescendantAverages[i + 1] : 1);
1:7536429:         double maxRowCount = 1d;
1:0580fb2:         double minRowCount = 1d;
1:7536429:         for (Generator component : clusteringComponents)
1:0580fb2:         {
1:7536429:             maxRowCount *= component.clusteringDistribution.maxValue();
1:0580fb2:             minRowCount *= component.clusteringDistribution.minValue();
1:0580fb2:         }
1:7536429:         this.maxRowCount = maxRowCount;
1:0580fb2:         this.minRowCount = minRowCount;
1:47d3b7e:         this.indexMap = new LinkedHashMap<>();
1:7536429:         int i = 0;
1:7536429:         for (Generator generator : partitionKey)
1:7536429:             indexMap.put(generator.name, --i);
1:7536429:         i = 0;
1:7536429:         for (Generator generator : Iterables.concat(clusteringComponents, valueComponents))
1:7536429:             indexMap.put(generator.name, i++);
3:7536429:     }
1:7536429: 
1:0580fb2:     public boolean permitNulls(int index)
1:0580fb2:     {
1:0580fb2:         return !(index < 0 || index < clusteringComponents.size());
1:0580fb2:     }
1:0580fb2: 
1:7536429:     public int indexOf(String name)
1:7536429:     {
1:7536429:         Integer i = indexMap.get(name);
1:7536429:         if (i == null)
1:7536429:             throw new NoSuchElementException();
1:7536429:         return i;
1:7536429:     }
1:7536429: 
1:7536429:     public ByteBuffer convert(int c, Object v)
1:7536429:     {
1:7536429:         if (c < 0)
1:7536429:             return partitionKey.get(-1-c).type.decompose(v);
1:7536429:         if (c < clusteringComponents.size())
1:7536429:             return clusteringComponents.get(c).type.decompose(v);
1:7536429:         return valueComponents.get(c - clusteringComponents.size()).type.decompose(v);
1:7536429:     }
1:3bee990: 
1:3bee990:     public Object convert(int c, ByteBuffer v)
1:3bee990:     {
1:3bee990:         if (c < 0)
1:3bee990:             return partitionKey.get(-1-c).type.compose(v);
1:3bee990:         if (c < clusteringComponents.size())
1:3bee990:             return clusteringComponents.get(c).type.compose(v);
1:3bee990:         return valueComponents.get(c - clusteringComponents.size()).type.compose(v);
1:3bee990:     }
1:47d3b7e: 
1:47d3b7e:     public List<String> getColumnNames()
1:47d3b7e:     {
1:47d3b7e:         return indexMap.keySet().stream().collect(Collectors.toList());
1:47d3b7e:     }
1:7536429: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1:         this.indexMap = new LinkedHashMap<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public List<String> getColumnNames()
1:     {
1:         return indexMap.keySet().stream().collect(Collectors.toList());
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Object convert(int c, ByteBuffer v)
1:     {
1:         if (c < 0)
1:             return partitionKey.get(-1-c).type.compose(v);
1:         if (c < clusteringComponents.size())
1:             return clusteringComponents.get(c).type.compose(v);
1:         return valueComponents.get(c - clusteringComponents.size()).type.compose(v);
1:     }
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     final int[] clusteringDescendantAverages;
1:     final int[] clusteringComponentAverages;
1:     public PartitionGenerator(List<Generator> partitionKey, List<Generator> clusteringComponents, List<Generator> valueComponents, Order order)
1:         this.clusteringDescendantAverages = new int[clusteringComponents.size()];
1:         this.clusteringComponentAverages = new int[clusteringComponents.size()];
1:         for (int i = 0 ; i < clusteringComponentAverages.length ; i++)
1:             clusteringComponentAverages[i] = (int) clusteringComponents.get(i).clusteringDistribution.average();
1:         for (int i = clusteringDescendantAverages.length - 1 ; i >= 0 ; i--)
1:             clusteringDescendantAverages[i] = (int) (i < (clusteringDescendantAverages.length - 1) ? clusteringComponentAverages[i + 1] * clusteringDescendantAverages[i + 1] : 1);
/////////////////////////////////////////////////////////////////////////
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.Operation;
1:     public static enum Order
1:     {
1:         ARBITRARY, SHUFFLED, SORTED
1:     }
1: 
1:     public final double minRowCount;
1:     final Order order;
0:     final SeedManager seeds;
/////////////////////////////////////////////////////////////////////////
0:     public PartitionGenerator(List<Generator> partitionKey, List<Generator> clusteringComponents, List<Generator> valueComponents, Order order, SeedManager seeds)
1:         this.order = order;
0:         this.seeds = seeds;
1:         double minRowCount = 1d;
1:         {
1:             minRowCount *= component.clusteringDistribution.minValue();
1:         }
1:         this.minRowCount = minRowCount;
/////////////////////////////////////////////////////////////////////////
1:     public boolean permitNulls(int index)
1:     {
1:         return !(index < 0 || index < clusteringComponents.size());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public Partition generate(Operation op)
0:         Seed seed = seeds.next(op);
0:         if (seed == null)
0:             return null;
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.generate;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.NoSuchElementException;
1: 
1: import com.google.common.collect.Iterables;
1: 
1: import org.apache.cassandra.stress.generate.values.Generator;
1: 
1: public class PartitionGenerator
1: {
1: 
1:     public final double maxRowCount;
1:     final List<Generator> partitionKey;
1:     final List<Generator> clusteringComponents;
1:     final List<Generator> valueComponents;
0:     final int[] clusteringChildAverages;
1: 
1:     private final Map<String, Integer> indexMap;
1: 
0:     final List<Partition> recyclable = new ArrayList<>();
0:     int partitionsInUse = 0;
1: 
0:     public void reset()
1:     {
0:         partitionsInUse = 0;
1:     }
1: 
0:     public PartitionGenerator(List<Generator> partitionKey, List<Generator> clusteringComponents, List<Generator> valueComponents)
1:     {
1:         this.partitionKey = partitionKey;
1:         this.clusteringComponents = clusteringComponents;
1:         this.valueComponents = valueComponents;
0:         this.clusteringChildAverages = new int[clusteringComponents.size()];
0:         for (int i = clusteringChildAverages.length - 1 ; i >= 0 ; i--)
0:             clusteringChildAverages[i] = (int) (i < (clusteringChildAverages.length - 1) ? clusteringComponents.get(i + 1).clusteringDistribution.average() * clusteringChildAverages[i + 1] : 1);
1:         double maxRowCount = 1d;
1:         for (Generator component : clusteringComponents)
1:             maxRowCount *= component.clusteringDistribution.maxValue();
1:         this.maxRowCount = maxRowCount;
0:         this.indexMap = new HashMap<>();
1:         int i = 0;
1:         for (Generator generator : partitionKey)
1:             indexMap.put(generator.name, --i);
1:         i = 0;
1:         for (Generator generator : Iterables.concat(clusteringComponents, valueComponents))
1:             indexMap.put(generator.name, i++);
1:     }
1: 
1:     public int indexOf(String name)
1:     {
1:         Integer i = indexMap.get(name);
1:         if (i == null)
1:             throw new NoSuchElementException();
1:         return i;
1:     }
1: 
0:     public Partition generate(long seed)
1:     {
0:         if (recyclable.size() <= partitionsInUse || recyclable.get(partitionsInUse) == null)
0:             recyclable.add(new Partition(this));
1: 
0:         Partition partition = recyclable.get(partitionsInUse++);
0:         partition.setSeed(seed);
0:         return partition;
1:     }
1: 
1:     public ByteBuffer convert(int c, Object v)
1:     {
1:         if (c < 0)
1:             return partitionKey.get(-1-c).type.decompose(v);
1:         if (c < clusteringComponents.size())
1:             return clusteringComponents.get(c).type.decompose(v);
1:         return valueComponents.get(c - clusteringComponents.size()).type.decompose(v);
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
0: 
============================================================================