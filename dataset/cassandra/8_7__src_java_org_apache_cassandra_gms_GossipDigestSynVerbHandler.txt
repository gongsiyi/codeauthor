1:5ab5e1b: /*
1:5ab5e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ab5e1b:  * or more contributor license agreements.  See the NOTICE file
1:5ab5e1b:  * distributed with this work for additional information
1:5ab5e1b:  * regarding copyright ownership.  The ASF licenses this file
1:5ab5e1b:  * to you under the Apache License, Version 2.0 (the
1:5ab5e1b:  * "License"); you may not use this file except in compliance
1:5ab5e1b:  * with the License.  You may obtain a copy of the License at
3:5ab5e1b:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5ab5e1b:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:5ab5e1b:  */
1:07cf56f: package org.apache.cassandra.gms;
1:5ab5e1b: 
1:1e616a1: import java.net.InetAddress;
1:1e616a1: import java.util.*;
12:1e616a1: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:ef25537: import org.apache.cassandra.config.DatabaseDescriptor;
1:ef25537: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:ef25537: import org.apache.cassandra.net.MessagingService;
1:ef25537: 
1:9471e8d: public class GossipDigestSynVerbHandler implements IVerbHandler<GossipDigestSyn>
1:07fb48e: {
1:b207956:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestSynVerbHandler.class);
1:08dbbd6: 
1:1936648:     public void doVerb(MessageIn<GossipDigestSyn> message, int id)
1:0525ae2:     {
1:a06be23:         InetAddress from = message.from;
1:910b663:         if (logger.isTraceEnabled())
1:910b663:             logger.trace("Received a GossipDigestSynMessage from {}", from);
1:2bc5f0c:         if (!Gossiper.instance.isEnabled() && !Gossiper.instance.isInShadowRound())
5:1e616a1:         {
1:910b663:             if (logger.isTraceEnabled())
1:910b663:                 logger.trace("Ignoring GossipDigestSynMessage because gossip is disabled");
1:08dbbd6:             return;
1:08dbbd6:         }
1:08dbbd6: 
1:9471e8d:         GossipDigestSyn gDigestMessage = message.payload;
1:a06be23:         /* If the message is from a different cluster throw it away. */
1:a06be23:         if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName()))
1:08dbbd6:         {
1:cd6aa2d:             logger.warn("ClusterName mismatch from {} {}!={}", from, gDigestMessage.clusterId, DatabaseDescriptor.getClusterName());
1:07fb48e:             return;
1:07fb48e:         }
1:08dbbd6: 
1:0525ae2:         if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName()))
1:a06be23:         {
1:cd6aa2d:             logger.warn("Partitioner mismatch from {} {}!={}", from, gDigestMessage.partioner, DatabaseDescriptor.getPartitionerName());
1:a06be23:             return;
1:a06be23:         }
1:a06be23: 
1:a06be23:         List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests();
1:2bc5f0c: 
1:2bc5f0c:         // if the syn comes from a peer performing a shadow round and this node is
1:2bc5f0c:         // also currently in a shadow round, send back a minimal ack. This node must
1:2bc5f0c:         // be in the sender's seed list and doing this allows the sender to
1:2bc5f0c:         // differentiate between seeds from which it is partitioned and those which
1:2bc5f0c:         // are in their shadow round
1:2bc5f0c:         if (!Gossiper.instance.isEnabled() && Gossiper.instance.isInShadowRound())
1:2bc5f0c:         {
1:2bc5f0c:             // a genuine syn (as opposed to one from a node currently
1:2bc5f0c:             // doing a shadow round) will always contain > 0 digests
1:2bc5f0c:             if (gDigestList.size() > 0)
1:2bc5f0c:             {
1:2bc5f0c:                 logger.debug("Ignoring non-empty GossipDigestSynMessage because currently in gossip shadow round");
1:2bc5f0c:                 return;
1:2bc5f0c:             }
1:2bc5f0c: 
1:2bc5f0c:             logger.debug("Received a shadow round syn from {}. Gossip is disabled but " +
1:2bc5f0c:                          "currently also in shadow round, responding with a minimal ack", from);
1:2bc5f0c:             MessagingService.instance()
1:2bc5f0c:                             .sendOneWay(new MessageOut<>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
1:2bc5f0c:                                                          new GossipDigestAck(new ArrayList<>(), new HashMap<>()),
1:2bc5f0c:                                                          GossipDigestAck.serializer),
1:2bc5f0c:                                         from);
1:2bc5f0c:             return;
1:2bc5f0c:         }
1:2bc5f0c: 
1:a06be23:         if (logger.isTraceEnabled())
1:0a03819:         {
1:0a03819:             StringBuilder sb = new StringBuilder();
1:b207956:             for (GossipDigest gDigest : gDigestList)
1:0a03819:             {
1:0a03819:                 sb.append(gDigest);
1:0a03819:                 sb.append(" ");
1:0a03819:             }
1:b74c2ad:             logger.trace("Gossip syn digests are : {}", sb);
1:0a03819:         }
1:a06be23: 
1:a06be23:         doSort(gDigestList);
1:a06be23: 
1:a06be23:         List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>();
1:a06be23:         Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
1:a06be23:         Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap);
1:351d43e:         logger.trace("sending {} digests and {} deltas", deltaGossipDigestList.size(), deltaEpStateMap.size());
1:9471e8d:         MessageOut<GossipDigestAck> gDigestAckMessage = new MessageOut<GossipDigestAck>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
1:b207956:                                                                                         new GossipDigestAck(deltaGossipDigestList, deltaEpStateMap),
1:b207956:                                                                                         GossipDigestAck.serializer);
1:a06be23:         if (logger.isTraceEnabled())
1:a06be23:             logger.trace("Sending a GossipDigestAckMessage to {}", from);
1:a06be23:         MessagingService.instance().sendOneWay(gDigestAckMessage, from);
1:0525ae2:     }
1:a06be23: 
1:1e616a1:     /*
1:1e616a1:      * First construct a map whose key is the endpoint in the GossipDigest and the value is the
1:1e616a1:      * GossipDigest itself. Then build a list of version differences i.e difference between the
1:1e616a1:      * version in the GossipDigest and the version in the local state for a given InetAddress.
1:1e616a1:      * Sort this list. Now loop through the sorted list and retrieve the GossipDigest corresponding
1:1e616a1:      * to the endpoint from the map that was initially constructed.
1:1e616a1:     */
1:1e616a1:     private void doSort(List<GossipDigest> gDigestList)
1:1e616a1:     {
1:1e616a1:         /* Construct a map of endpoint to GossipDigest. */
1:1e616a1:         Map<InetAddress, GossipDigest> epToDigestMap = new HashMap<InetAddress, GossipDigest>();
1:b207956:         for (GossipDigest gDigest : gDigestList)
1:1e616a1:         {
1:1e616a1:             epToDigestMap.put(gDigest.getEndpoint(), gDigest);
5:1e616a1:         }
1:0525ae2: 
1:1e616a1:         /*
1:1e616a1:          * These digests have their maxVersion set to the difference of the version
1:1e616a1:          * of the local EndpointState and the version found in the GossipDigest.
1:1e616a1:         */
1:38ee718:         List<GossipDigest> diffDigests = new ArrayList<GossipDigest>(gDigestList.size());
1:b207956:         for (GossipDigest gDigest : gDigestList)
1:1e616a1:         {
1:1e616a1:             InetAddress ep = gDigest.getEndpoint();
1:1e616a1:             EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(ep);
1:b207956:             int version = (epState != null) ? Gossiper.instance.getMaxEndpointStateVersion(epState) : 0;
1:b207956:             int diffVersion = Math.abs(version - gDigest.getMaxVersion());
1:b207956:             diffDigests.add(new GossipDigest(ep, gDigest.getGeneration(), diffVersion));
1:1e616a1:         }
1:1e616a1: 
1:1e616a1:         gDigestList.clear();
1:1e616a1:         Collections.sort(diffDigests);
1:1e616a1:         int size = diffDigests.size();
1:1e616a1:         /*
1:1e616a1:          * Report the digests in descending order. This takes care of the endpoints
1:1e616a1:          * that are far behind w.r.t this local endpoint
1:1e616a1:         */
1:b207956:         for (int i = size - 1; i >= 0; --i)
1:1e616a1:         {
1:b207956:             gDigestList.add(epToDigestMap.get(diffDigests.get(i).getEndpoint()));
1:1e616a1:         }
1:1e616a1:     }
1:1e616a1: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2bc5f0c
/////////////////////////////////////////////////////////////////////////
1:         if (!Gossiper.instance.isEnabled() && !Gossiper.instance.isInShadowRound())
/////////////////////////////////////////////////////////////////////////
1: 
1:         // if the syn comes from a peer performing a shadow round and this node is
1:         // also currently in a shadow round, send back a minimal ack. This node must
1:         // be in the sender's seed list and doing this allows the sender to
1:         // differentiate between seeds from which it is partitioned and those which
1:         // are in their shadow round
1:         if (!Gossiper.instance.isEnabled() && Gossiper.instance.isInShadowRound())
1:         {
1:             // a genuine syn (as opposed to one from a node currently
1:             // doing a shadow round) will always contain > 0 digests
1:             if (gDigestList.size() > 0)
1:             {
1:                 logger.debug("Ignoring non-empty GossipDigestSynMessage because currently in gossip shadow round");
1:                 return;
1:             }
1: 
1:             logger.debug("Received a shadow round syn from {}. Gossip is disabled but " +
1:                          "currently also in shadow round, responding with a minimal ack", from);
1:             MessagingService.instance()
1:                             .sendOneWay(new MessageOut<>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
1:                                                          new GossipDigestAck(new ArrayList<>(), new HashMap<>()),
1:                                                          GossipDigestAck.serializer),
1:                                         from);
1:             return;
1:         }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:c579842
commit:9bcdd0f
commit:cefaa4e
/////////////////////////////////////////////////////////////////////////
commit:d4f2354
commit:ea1beda
commit:08dbbd6
/////////////////////////////////////////////////////////////////////////
1:         
1:         
1:         
0:         if (!Gossiper.instance.shouldAckAfterShutdown(from))
1:         {
0:             logger.debug("Temporarily ignoring SYN from shutdown node {}", from);
1:             return;
1:         }
commit:cd0cbd3
commit:9adb31c
commit:0c3424e
commit:47edb3c
/////////////////////////////////////////////////////////////////////////
commit:659296b
commit:f084119
commit:351d43e
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("sending {} digests and {} deltas", deltaGossipDigestList.size(), deltaEpStateMap.size());
commit:ee85c8e
commit:76ad645
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.checkSeedContact(from);
commit:01883da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream dis = new DataInputStream( new FastByteArrayInputStream(bytes) );
commit:0a03819
/////////////////////////////////////////////////////////////////////////
0:             if (logger_.isTraceEnabled())
1:             {
1:                 StringBuilder sb = new StringBuilder();
0:                 for ( GossipDigest gDigest : gDigestList )
1:                 {
1:                     sb.append(gDigest);
1:                     sb.append(" ");
1:                 }
0:                 logger_.trace("Gossip syn digests are : " + sb.toString());
1:             }
commit:07fb48e
/////////////////////////////////////////////////////////////////////////
0:         if (!Gossiper.instance.isEnabled())
1:         {
0:             if (logger_.isTraceEnabled())
0:                 logger_.trace("Ignoring GossipDigestSynMessage because gossip is disabled");
1:             return;
1:         }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b74c2ad
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Gossip syn digests are : {}", sb);
commit:cd6aa2d
/////////////////////////////////////////////////////////////////////////
1:             logger.warn("ClusterName mismatch from {} {}!={}", from, gDigestMessage.clusterId, DatabaseDescriptor.getClusterName());
1:             logger.warn("Partitioner mismatch from {} {}!={}", from, gDigestMessage.partioner, DatabaseDescriptor.getPartitionerName());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn<GossipDigestSyn> message, int id)
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(GossipDigestSynVerbHandler.class);
/////////////////////////////////////////////////////////////////////////
0:             logger.warn("ClusterName mismatch from " + from + " " + gDigestMessage.clusterId + "!=" + DatabaseDescriptor.getClusterName());
0:             logger.warn("Partitioner mismatch from " + from + " " + gDigestMessage.partioner + "!=" + DatabaseDescriptor.getPartitionerName());
/////////////////////////////////////////////////////////////////////////
1:             for (GossipDigest gDigest : gDigestList)
/////////////////////////////////////////////////////////////////////////
1:                                                                                         new GossipDigestAck(deltaGossipDigestList, deltaEpStateMap),
1:                                                                                         GossipDigestAck.serializer);
/////////////////////////////////////////////////////////////////////////
1:         for (GossipDigest gDigest : gDigestList)
/////////////////////////////////////////////////////////////////////////
1:         for (GossipDigest gDigest : gDigestList)
1:             int version = (epState != null) ? Gossiper.instance.getMaxEndpointStateVersion(epState) : 0;
1:             int diffVersion = Math.abs(version - gDigest.getMaxVersion());
1:             diffDigests.add(new GossipDigest(ep, gDigest.getGeneration(), diffVersion));
/////////////////////////////////////////////////////////////////////////
1:         for (int i = size - 1; i >= 0; --i)
1:             gDigestList.add(epToDigestMap.get(diffDigests.get(i).getEndpoint()));
commit:1cc0f1f
/////////////////////////////////////////////////////////////////////////
commit:2dc4448
/////////////////////////////////////////////////////////////////////////
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class GossipDigestSynVerbHandler implements IVerbHandler<GossipDigestSyn>
0:     public void doVerb(MessageIn<GossipDigestSyn> message, String id)
/////////////////////////////////////////////////////////////////////////
1:         GossipDigestSyn gDigestMessage = message.payload;
/////////////////////////////////////////////////////////////////////////
1:         MessageOut<GossipDigestAck> gDigestAckMessage = new MessageOut<GossipDigestAck>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
0:                                                                                                       new GossipDigestAck(deltaGossipDigestList, deltaEpStateMap),
0:                                                                                                       GossipDigestAck.serializer());
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class GossipDigestSynVerbHandler implements IVerbHandler<GossipDigestSynMessage>
0:     public void doVerb(MessageIn<GossipDigestSynMessage> message, String id)
1:         InetAddress from = message.from;
/////////////////////////////////////////////////////////////////////////
0:         GossipDigestSynMessage gDigestMessage = message.payload;
1:         /* If the message is from a different cluster throw it away. */
1:         if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName()))
0:             logger.warn("ClusterName mismatch from " + from + " " + gDigestMessage.clusterId  + "!=" + DatabaseDescriptor.getClusterName());
1:             return;
1: 
1:         List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests();
1:         if (logger.isTraceEnabled())
0:             StringBuilder sb = new StringBuilder();
0:             for ( GossipDigest gDigest : gDigestList )
1:             {
0:                 sb.append(gDigest);
0:                 sb.append(" ");
1:             }
0:             logger.trace("Gossip syn digests are : " + sb.toString());
0:         /* Notify the Failure Detector */
0:         Gossiper.instance.notifyFailureDetector(gDigestList);
1: 
1:         doSort(gDigestList);
1: 
1:         List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>();
1:         Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
1:         Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap);
1: 
0:         MessageOut<GossipDigestAckMessage> gDigestAckMessage = new MessageOut<GossipDigestAckMessage>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
0:                                                                                                       new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap),
0:                                                                                                       GossipDigestAckMessage.serializer());
1:         if (logger.isTraceEnabled())
1:             logger.trace("Sending a GossipDigestAckMessage to {}", from);
1:         MessagingService.instance().sendOneWay(gDigestAckMessage, from);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             MessageOut<GossipDigestAckMessage> gDigestAckMessage = new MessageOut<GossipDigestAckMessage>(MessagingService.Verb.GOSSIP_DIGEST_ACK,
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:             MessageOut<GossipDigestAckMessage> gDigestAckMessage = new MessageOut<GossipDigestAckMessage>(StorageService.Verb.GOSSIP_DIGEST_ACK,
0:                                                                                                           new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap),
0:                                                                                                           GossipDigestAckMessage.serializer());
commit:38ee718
/////////////////////////////////////////////////////////////////////////
1:         List<GossipDigest> diffDigests = new ArrayList<GossipDigest>(gDigestList.size());
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendOneWay(gDigestAckMessage, from);
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
1: 
commit:5ab5e1b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:0525ae2
/////////////////////////////////////////////////////////////////////////
1:         if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName()))
1:         {
0:             logger.warn("Partitioner mismatch from " + from + " " + gDigestMessage.partioner  + "!=" + DatabaseDescriptor.getPartitionerName());
0:             return;
1:         }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
0:                                                                                                       GossipDigestAck.serializer);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5f43a69
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger = LoggerFactory.getLogger( GossipDigestSynVerbHandler.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.gms;
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger = LoggerFactory.getLogger( GossipDigestSynVerbHandler.class);
1:         if (logger.isTraceEnabled())
1:             logger.trace("Received a GossipDigestSynMessage from {}", from);
1:             if (logger.isTraceEnabled())
1:                 logger.trace("Ignoring GossipDigestSynMessage because gossip is disabled");
/////////////////////////////////////////////////////////////////////////
0:             if ( !gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName()) )
0:                 logger.warn("ClusterName mismatch from " + from + " " + gDigestMessage.clusterId  + "!=" + DatabaseDescriptor.getClusterName());
0:             if (logger.isTraceEnabled())
/////////////////////////////////////////////////////////////////////////
0:                 logger.trace("Gossip syn digests are : " + sb.toString());
/////////////////////////////////////////////////////////////////////////
0:             if (logger.isTraceEnabled())
0:                 logger.trace("Sending a GossipDigestAckMessage to {}", from);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             GossipDigestSynMessage gDigestMessage = GossipDigestSynMessage.serializer().deserialize(dis, message.getVersion());
commit:5d02c51
/////////////////////////////////////////////////////////////////////////
0:             Message gDigestAckMessage = Gossiper.instance.makeGossipDigestAckMessage(gDigestAck, message.getVersion());
commit:1e616a1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.*;
1: 
0: public class GossipDigestSynVerbHandler implements IVerbHandler
1: {
0:     private static Logger logger_ = LoggerFactory.getLogger( GossipDigestSynVerbHandler.class);
1: 
0:     public void doVerb(Message message)
1:     {
0:         InetAddress from = message.getFrom();
0:         if (logger_.isTraceEnabled())
0:             logger_.trace("Received a GossipDigestSynMessage from {}", from);
1: 
0:         byte[] bytes = message.getMessageBody();
0:         DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
1: 
0:         try
1:         {
0:             GossipDigestSynMessage gDigestMessage = GossipDigestSynMessage.serializer().deserialize(dis);
0:             /* If the message is from a different cluster throw it away. */
0:             if ( !gDigestMessage.clusterId_.equals(DatabaseDescriptor.getClusterName()) )
1:             {
0:                 logger_.warn("ClusterName mismatch from " + from + " " + gDigestMessage.clusterId_  + "!=" + DatabaseDescriptor.getClusterName());
0:                 return;
1:             }
1: 
0:             List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests();
0:             /* Notify the Failure Detector */
0:             Gossiper.instance.notifyFailureDetector(gDigestList);
1: 
0:             doSort(gDigestList);
1: 
0:             List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>();
0:             Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>();
0:             Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap);
1: 
0:             GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap);
0:             Message gDigestAckMessage = Gossiper.instance.makeGossipDigestAckMessage(gDigestAck);
0:             if (logger_.isTraceEnabled())
0:                 logger_.trace("Sending a GossipDigestAckMessage to {}", from);
0:             MessagingService.instance.sendOneWay(gDigestAckMessage, from);
1:         }
0:         catch (IOException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /*
1:      * First construct a map whose key is the endpoint in the GossipDigest and the value is the
1:      * GossipDigest itself. Then build a list of version differences i.e difference between the
1:      * version in the GossipDigest and the version in the local state for a given InetAddress.
1:      * Sort this list. Now loop through the sorted list and retrieve the GossipDigest corresponding
1:      * to the endpoint from the map that was initially constructed.
1:     */
1:     private void doSort(List<GossipDigest> gDigestList)
1:     {
1:         /* Construct a map of endpoint to GossipDigest. */
1:         Map<InetAddress, GossipDigest> epToDigestMap = new HashMap<InetAddress, GossipDigest>();
0:         for ( GossipDigest gDigest : gDigestList )
1:         {
1:             epToDigestMap.put(gDigest.getEndpoint(), gDigest);
1:         }
1: 
1:         /*
1:          * These digests have their maxVersion set to the difference of the version
1:          * of the local EndpointState and the version found in the GossipDigest.
1:         */
0:         List<GossipDigest> diffDigests = new ArrayList<GossipDigest>();
0:         for ( GossipDigest gDigest : gDigestList )
1:         {
1:             InetAddress ep = gDigest.getEndpoint();
1:             EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(ep);
0:             int version = (epState != null) ? Gossiper.instance.getMaxEndpointStateVersion( epState ) : 0;
0:             int diffVersion = Math.abs(version - gDigest.getMaxVersion() );
0:             diffDigests.add( new GossipDigest(ep, gDigest.getGeneration(), diffVersion) );
1:         }
1: 
1:         gDigestList.clear();
1:         Collections.sort(diffDigests);
1:         int size = diffDigests.size();
1:         /*
1:          * Report the digests in descending order. This takes care of the endpoints
1:          * that are far behind w.r.t this local endpoint
1:         */
0:         for ( int i = size - 1; i >= 0; --i )
1:         {
0:             gDigestList.add( epToDigestMap.get(diffDigests.get(i).getEndpoint()) );
1:         }
1:     }
1: }
============================================================================