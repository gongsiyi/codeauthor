1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.db;
10:066ef58: 
1:787f9d6: import java.io.IOException;
1:066ef58: 
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:021ec71: import org.apache.cassandra.net.MessagingService;
1:066ef58: 
1:066ef58: /*
1:bc3597d:  * This empty response is sent by a replica to inform the coordinator that the write succeeded
1:066ef58:  */
1:53a177a: public final class WriteResponse
7:066ef58: {
1:53a177a:     public static final Serializer serializer = new Serializer();
1:066ef58: 
1:53a177a:     private static final WriteResponse instance = new WriteResponse();
1:53a177a: 
1:53a177a:     private WriteResponse()
1:066ef58:     {
8:066ef58:     }
1:84eeb28: 
1:53a177a:     public static MessageOut<WriteResponse> createMessage()
1:53a177a:     {
1:53a177a:         return new MessageOut<>(MessagingService.Verb.REQUEST_RESPONSE, instance, serializer);
1:53a177a:     }
1:53a177a: 
1:53a177a:     public static class Serializer implements IVersionedSerializer<WriteResponse>
1:fd2ddb5:     {
1:75508ec:         public void serialize(WriteResponse wm, DataOutputPlus out, int version) throws IOException
1:fd2ddb5:         {
1:fd2ddb5:         }
1:066ef58: 
1:03f72ac:         public WriteResponse deserialize(DataInputPlus in, int version) throws IOException
1:066ef58:         {
1:53a177a:             return instance;
1:fd2ddb5:         }
1:066ef58: 
1:84eeb28:         public long serializedSize(WriteResponse response, int version)
1:84eeb28:         {
1:fd2ddb5:             return 0;
1:84eeb28:         }
1:066ef58:     }
1:066ef58: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: public final class WriteResponse
1:     public static final Serializer serializer = new Serializer();
1:     private static final WriteResponse instance = new WriteResponse();
1: 
1:     private WriteResponse()
1:     public static MessageOut<WriteResponse> createMessage()
1:     {
1:         return new MessageOut<>(MessagingService.Verb.REQUEST_RESPONSE, instance, serializer);
1:     }
1: 
1:     public static class Serializer implements IVersionedSerializer<WriteResponse>
/////////////////////////////////////////////////////////////////////////
1:             return instance;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public WriteResponse deserialize(DataInputPlus in, int version) throws IOException
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(WriteResponse wm, DataOutputPlus out, int version) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:bc3597d
/////////////////////////////////////////////////////////////////////////
1:  * This empty response is sent by a replica to inform the coordinator that the write succeeded
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(WriteResponse wm, DataOutput out, int version) throws IOException
0:                 out.writeUTF("");
0:                 ByteBufferUtil.writeWithShortLength(ByteBufferUtil.EMPTY_BYTE_BUFFER, out);
0:                 out.writeBoolean(true);
0:         public WriteResponse deserialize(DataInput in, int version) throws IOException
0:                 in.readUTF();
0:                 ByteBufferUtil.readWithShortLength(in);
0:                 in.readBoolean();
commit:fd2ddb5
/////////////////////////////////////////////////////////////////////////
0:             if (version < MessagingService.VERSION_12)
1:             {
0:                 dos.writeUTF("");
0:                 ByteBufferUtil.writeWithShortLength(ByteBufferUtil.EMPTY_BYTE_BUFFER, dos);
0:                 dos.writeBoolean(true);
1:             }
0:             if (version < MessagingService.VERSION_12)
1:             {
0:                 dis.readUTF();
0:                 ByteBufferUtil.readWithShortLength(dis);
0:                 dis.readBoolean();
1:             }
0:             return new WriteResponse();
0:             if (version < MessagingService.VERSION_12)
0:                 return sizes.sizeof("") + sizes.sizeof((short) 0) + sizes.sizeof(true);
1:             return 0;
commit:70554b2
/////////////////////////////////////////////////////////////////////////
0:             TypeSizes sizes = TypeSizes.NATIVE;
0:             int size = sizes.sizeof(response.table());
0:             size += sizes.sizeof((short) keySize) + keySize;
0:             size += sizes.sizeof(response.isSuccess());
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0:             TypeSizes typeSizes = TypeSizes.NATIVE;
commit:021ec71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0:         return new MessageOut<WriteResponse>(MessagingService.Verb.REQUEST_RESPONSE, this, serializer);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     public MessageOut<WriteResponse> createMessage()
0:         return new MessageOut<WriteResponse>(StorageService.Verb.REQUEST_RESPONSE, this, serializer);
commit:787f9d6
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     public static Message makeWriteResponseMessage(Message original, WriteResponse respose) throws IOException
0:         byte[] bytes = FBUtilities.serialize(respose, WriteResponse.serializer(), original.getVersion());
0:         return original.getReply(FBUtilities.getBroadcastAddress(), bytes, original.getVersion());
/////////////////////////////////////////////////////////////////////////
0:             int size = DBConstants.shortSize + FBUtilities.encodedUTF8Length(response.table());
0:             size += DBConstants.shortSize + response.key().remaining();
0:             size += DBConstants.boolSize;
0:             return size;
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
0:     public static class WriteResponseSerializer implements IVersionedSerializer<WriteResponse>
0:         public void serialize(WriteResponse wm, DataOutput dos, int version) throws IOException
0:         public WriteResponse deserialize(DataInput dis, int version) throws IOException
1: 
1:         public long serializedSize(WriteResponse response, int version)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
commit:fe57cc5
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0: 	private final ByteBuffer key_;
0: 	public WriteResponse(String table, ByteBuffer key, boolean bVal) {
/////////////////////////////////////////////////////////////////////////
0: 	public ByteBuffer key()
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer key = FBUtilities.readShortByteArray(dis);
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray());
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.Serializable;
1: 
0: import javax.xml.bind.annotation.XmlElement;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.StorageService;
1: 
1: 
1: /*
0:  * This message is sent back the row mutation verb handler 
0:  * and basically specifies if the write succeeded or not for a particular 
0:  * key in a table
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
0: public class WriteResponse 
1: {
0:     private static WriteResponseSerializer serializer_ = new WriteResponseSerializer();
1: 
0:     public static WriteResponseSerializer serializer()
1:     {
0:         return serializer_;
1:     }
1: 
0:     public static Message makeWriteResponseMessage(Message original, WriteResponse writeResponseMessage) throws IOException
1:     {
0:     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream( bos );
0:         WriteResponse.serializer().serialize(writeResponseMessage, dos);
0:         return original.getReply(StorageService.getLocalStorageEndPoint(), bos.toByteArray());
1:     }
1: 
0: 	private final String table_;
0: 	private final String key_;
0: 	private final boolean status_;
1: 
0: 	public WriteResponse(String table, String key, boolean bVal) {
0: 		table_ = table;
0: 		key_ = key;
0: 		status_ = bVal;
1: 	}
1: 
0: 	public String table()
1: 	{
0: 		return table_;
1: 	}
1: 
0: 	public String key()
1: 	{
0: 		return key_;
1: 	}
1: 
0: 	public boolean isSuccess()
1: 	{
0: 		return status_;
1: 	}
1: 
0:     public static class WriteResponseSerializer implements ICompactSerializer<WriteResponse>
1:     {
0:         public void serialize(WriteResponse wm, DataOutputStream dos) throws IOException
1:         {
0:             dos.writeUTF(wm.table());
0:             dos.writeUTF(wm.key());
0:             dos.writeBoolean(wm.isSuccess());
1:         }
1: 
0:         public WriteResponse deserialize(DataInputStream dis) throws IOException
1:         {
0:             String table = dis.readUTF();
0:             String key = dis.readUTF();
0:             boolean status = dis.readBoolean();
0:             return new WriteResponse(table, key, status);
1:         }
1:     }
1: }
commit:4e3a440
/////////////////////////////////////////////////////////////////////////
0:  * and basically specifies if the write succeeded or not for a particular 
commit:71739ef
commit:21c1d6b
/////////////////////////////////////////////////////////////////////////
0: public class WriteResponse 
0:     private static WriteResponseSerializer serializer_ = new WriteResponseSerializer();
0:     public static WriteResponseSerializer serializer()
0: 
0:     public static Message makeWriteResponseMessage(Message original, WriteResponse writeResponseMessage) throws IOException
0:         WriteResponse.serializer().serialize(writeResponseMessage, dos);
0:         return original.getReply(StorageService.getLocalStorageEndPoint(), bos.toByteArray());
0: 	private final String table_;
0: 	private final String key_;
0: 	private final boolean status_;
/////////////////////////////////////////////////////////////////////////
0: 	public String table()
0: 	public String key()
0: 
0:     public static class WriteResponseSerializer implements ICompactSerializer<WriteResponse>
0:         public void serialize(WriteResponse wm, DataOutputStream dos) throws IOException
0:         {
0:             dos.writeUTF(wm.table());
0:             dos.writeUTF(wm.key());
0:             dos.writeBoolean(wm.isSuccess());
0:         }
0: 
0:         public WriteResponse deserialize(DataInputStream dis) throws IOException
0:         {
0:             String table = dis.readUTF();
0:             String key = dis.readUTF();
0:             boolean status = dis.readBoolean();
0:             return new WriteResponse(table, key, status);
0:         }
0: }
commit:2ee9f9e
/////////////////////////////////////////////////////////////////////////
0: public class WriteResponse implements Serializable
0: private static ICompactSerializer<WriteResponse> serializer_;
0: 
0:         serializer_ = new WriteResponseSerializer();
0:     static ICompactSerializer<WriteResponse> serializer()
0:     public static Message makeWriteResponseMessage(WriteResponse writeResponse) throws IOException
0:         WriteResponse.serializer().serialize(writeResponse, dos);
/////////////////////////////////////////////////////////////////////////
0: 	private WriteResponse() {
0: 	public WriteResponse(String table, String key, boolean bVal) {
/////////////////////////////////////////////////////////////////////////
0: class WriteResponseSerializer implements ICompactSerializer<WriteResponse>
0: 	public void serialize(WriteResponse wm, DataOutputStream dos) throws IOException
0:     public WriteResponse deserialize(DataInputStream dis) throws IOException
0:     	return new WriteResponse(table, key, status);
commit:8f56a96
/////////////////////////////////////////////////////////////////////////
0: public class WriteResponse implements Serializable
0: private static ICompactSerializer<WriteResponse> serializer_;
0: 
0:         serializer_ = new WriteResponseSerializer();
0:     static ICompactSerializer<WriteResponse> serializer()
0:     public static Message makeWriteResponseMessage(WriteResponse writeResponse) throws IOException
0:         WriteResponse.serializer().serialize(writeResponse, dos);
/////////////////////////////////////////////////////////////////////////
0: 	private WriteResponse() {
0: 	public WriteResponse(String table, String key, boolean bVal) {
/////////////////////////////////////////////////////////////////////////
0: class WriteResponseSerializer implements ICompactSerializer<WriteResponse>
0: 	public void serialize(WriteResponse wm, DataOutputStream dos) throws IOException
0:     public WriteResponse deserialize(DataInputStream dis) throws IOException
0:     	return new WriteResponse(table, key, status);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:997ab95
/////////////////////////////////////////////////////////////////////////
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
0:     public static final WriteResponseSerializer serializer = new WriteResponseSerializer();
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0:             DBTypeSizes typeSizes = DBTypeSizes.NATIVE;
0:             int utfSize = FBUtilities.encodedUTF8Length(response.table());
0:             int keySize = response.key().remaining();
0:             int size = typeSizes.sizeof((short) utfSize) + utfSize;
0:             size += typeSizes.sizeof((short) keySize) + keySize;
0:             size += typeSizes.sizeof(response.isSuccess());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  * This message is sent back the row mutation verb handler
0:  * and basically specifies if the write succeeded or not for a particular
0: public class WriteResponse
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * This message is sent back the row mutation verb handler
0:  * and basically specifies if the write succeeded or not for a particular
0: public class WriteResponse
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final WriteResponseSerializer serializer = new WriteResponseSerializer();
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:f95fc45
/////////////////////////////////////////////////////////////////////////
0:             int size = DBConstants.SHORT_SIZE + FBUtilities.encodedUTF8Length(response.table());
0:             size += DBConstants.SHORT_SIZE + response.key().remaining();
0:             size += DBConstants.BOOL_SIZE;
commit:686139a
/////////////////////////////////////////////////////////////////////////
0:     private final String table;
0:     private final ByteBuffer key;
0:     private final boolean status;
0:     public WriteResponse(String table, ByteBuffer key, boolean bVal)
0:     {
0:         this.table = table;
0:         this.key = key;
0:         this.status = bVal;
0:     }
0:     public String table()
0:     {
0:         return table;
0:     }
0:     public ByteBuffer key()
0:     {
0:         return key;
0:     }
0:     public boolean isSuccess()
0:     {
0:         return status;
0:     }
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static WriteResponseSerializer serializer = new WriteResponseSerializer();
0:         return serializer;
/////////////////////////////////////////////////////////////////////////
0: 	private final String table;
0: 	private final ByteBuffer key;
0: 	private final boolean status;
0: 		this.table = table;
0: 		this.key = key;
0: 		this.status = bVal;
0: 		return table;
0: 		return key;
0: 		return status;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
0:     	FastByteArrayOutputStream bos = new FastByteArrayOutputStream();
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         return original.getReply(FBUtilities.getBroadcastAddress(), bos.toByteArray(), original.getVersion());
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:         WriteResponse.serializer().serialize(writeResponseMessage, dos, original.getVersion());
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(WriteResponse wm, DataOutputStream dos, int version) throws IOException
0:         public WriteResponse deserialize(DataInputStream dis, int version) throws IOException
commit:6ab2b23
/////////////////////////////////////////////////////////////////////////
0:         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
commit:434564d
/////////////////////////////////////////////////////////////////////////
0: 	private final byte[] key_;
0: 	public WriteResponse(String table, byte[] key, boolean bVal) {
/////////////////////////////////////////////////////////////////////////
0: 	public byte[] key()
/////////////////////////////////////////////////////////////////////////
0:             FBUtilities.writeShortByteArray(wm.key(), dos);
0:             byte[] key = FBUtilities.readShortByteArray(dis);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             ByteBufferUtil.writeWithShortLength(wm.key(), dos);
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:964dd9b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db;
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.Serializable;
0: 
0: import javax.xml.bind.annotation.XmlElement;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.StorageService;
0: 
0: 
0: /*
0:  * This message is sent back the row mutation verb handler 
0:  * and basically specifes if the write succeeded or not for a particular 
0:  * key in a table
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: public class WriteResponseMessage implements Serializable
0: {
0: private static ICompactSerializer<WriteResponseMessage> serializer_;	
0: 	
0:     static
0:     {
0:         serializer_ = new WriteResponseMessageSerializer();
0:     }
0: 
0:     static ICompactSerializer<WriteResponseMessage> serializer()
0:     {
0:         return serializer_;
0:     }
0: 	
0:     public static Message makeWriteResponseMessage(WriteResponseMessage writeResponseMessage) throws IOException
0:     {
0:     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream( bos );
0:         WriteResponseMessage.serializer().serialize(writeResponseMessage, dos);
0:         Message message = new Message(StorageService.getLocalStorageEndPoint(), MessagingService.responseStage_, MessagingService.responseVerbHandler_, new Object[]{bos.toByteArray()});         
0:         return message;
0:     }
0:     
0: 	@XmlElement(name = "Table")
0: 	private String table_;
0: 
0: 	@XmlElement(name = "key")
0: 	private String key_;
0: 	
0: 	@XmlElement(name = "Status")
0: 	private boolean status_;
0: 	
0: 	private WriteResponseMessage() {
0: 	}
0: 
0: 	public WriteResponseMessage(String table, String key, boolean bVal) {
0: 		table_ = table;
0: 		key_ = key;
0: 		status_ = bVal;
0: 	}
0: 
0: 	public String table() 
0: 	{
0: 		return table_;
0: 	}
0: 
0: 	public String key() 
0: 	{
0: 		return key_;
0: 	}
0: 	
0: 	public boolean isSuccess()
0: 	{
0: 		return status_;
0: 	}
0: }
0: 
0: class WriteResponseMessageSerializer implements ICompactSerializer<WriteResponseMessage>
0: {
0: 	public void serialize(WriteResponseMessage wm, DataOutputStream dos) throws IOException
0: 	{
0: 		dos.writeUTF(wm.table());
0: 		dos.writeUTF(wm.key());
0: 		dos.writeBoolean(wm.isSuccess());
0: 	}
0: 	
0:     public WriteResponseMessage deserialize(DataInputStream dis) throws IOException
0:     {
0:     	String table = dis.readUTF();
0:     	String key = dis.readUTF();
0:     	boolean status = dis.readBoolean();
0:     	return new WriteResponseMessage(table, key, status);
0:     }
0: }
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db;
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.io.Serializable;
0: 
0: import javax.xml.bind.annotation.XmlElement;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.StorageService;
0: 
0: 
0: /*
0:  * This message is sent back the row mutation verb handler 
0:  * and basically specifes if the write succeeded or not for a particular 
0:  * key in a table
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: public class WriteResponseMessage implements Serializable
0: {
0: private static ICompactSerializer<WriteResponseMessage> serializer_;	
0: 	
0:     static
0:     {
0:         serializer_ = new WriteResponseMessageSerializer();
0:     }
0: 
0:     static ICompactSerializer<WriteResponseMessage> serializer()
0:     {
0:         return serializer_;
0:     }
0: 	
0:     public static Message makeWriteResponseMessage(WriteResponseMessage writeResponseMessage) throws IOException
0:     {
0:     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream( bos );
0:         WriteResponseMessage.serializer().serialize(writeResponseMessage, dos);
0:         Message message = new Message(StorageService.getLocalStorageEndPoint(), MessagingService.responseStage_, MessagingService.responseVerbHandler_, new Object[]{bos.toByteArray()});         
0:         return message;
0:     }
0:     
0: 	@XmlElement(name = "Table")
0: 	private String table_;
0: 
0: 	@XmlElement(name = "key")
0: 	private String key_;
0: 	
0: 	@XmlElement(name = "Status")
0: 	private boolean status_;
0: 	
0: 	private WriteResponseMessage() {
0: 	}
0: 
0: 	public WriteResponseMessage(String table, String key, boolean bVal) {
0: 		table_ = table;
0: 		key_ = key;
0: 		status_ = bVal;
0: 	}
0: 
0: 	public String table() 
0: 	{
0: 		return table_;
0: 	}
0: 
0: 	public String key() 
0: 	{
0: 		return key_;
0: 	}
0: 	
0: 	public boolean isSuccess()
0: 	{
0: 		return status_;
0: 	}
0: }
0: 
0: class WriteResponseMessageSerializer implements ICompactSerializer<WriteResponseMessage>
0: {
0: 	public void serialize(WriteResponseMessage wm, DataOutputStream dos) throws IOException
0: 	{
0: 		dos.writeUTF(wm.table());
0: 		dos.writeUTF(wm.key());
0: 		dos.writeBoolean(wm.isSuccess());
0: 	}
0: 	
0:     public WriteResponseMessage deserialize(DataInputStream dis) throws IOException
0:     {
0:     	String table = dis.readUTF();
0:     	String key = dis.readUTF();
0:     	boolean status = dis.readBoolean();
0:     	return new WriteResponseMessage(table, key, status);
0:     }
0: }
============================================================================