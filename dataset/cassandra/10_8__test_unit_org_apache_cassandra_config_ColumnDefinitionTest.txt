1:42de601: package org.apache.cassandra.config;
1:94cc9a4: /*
1:07cdfd0:  *
1:94cc9a4:  * Licensed to the Apache Software Foundation (ASF) under one
1:94cc9a4:  * or more contributor license agreements.  See the NOTICE file
1:94cc9a4:  * distributed with this work for additional information
1:94cc9a4:  * regarding copyright ownership.  The ASF licenses this file
1:94cc9a4:  * to you under the Apache License, Version 2.0 (the
1:94cc9a4:  * "License"); you may not use this file except in compliance
1:94cc9a4:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:94cc9a4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:94cc9a4:  * Unless required by applicable law or agreed to in writing,
1:94cc9a4:  * software distributed under the License is distributed on an
1:94cc9a4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:94cc9a4:  * KIND, either express or implied.  See the License for the
1:94cc9a4:  * specific language governing permissions and limitations
1:94cc9a4:  * under the License.
1:07cdfd0:  *
1:94cc9a4:  */
4:42de601: 
1:8b09061: import org.junit.Assert;
1:9797511: import org.junit.BeforeClass;
1:42de601: import org.junit.Test;
1:ebc7278: 
1:5f5905d: import org.apache.cassandra.db.marshal.*;
1:a94b173: import org.apache.cassandra.thrift.ThriftConversion;
1:8358669: import org.apache.cassandra.utils.ByteBufferUtil;
1:e7a385a: 
1:42de601: public class ColumnDefinitionTest
1:42de601: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:42de601:     @Test
1:42de601:     public void testSerializeDeserialize() throws Exception
1:42de601:     {
1:a991b64:         CFMetaData cfm = CFMetaData.Builder.create("ks", "cf", true, false, false)
1:a991b64:                          .addPartitionKey("pkey", AsciiType.instance)
1:a991b64:                          .addClusteringColumn("name", AsciiType.instance)
1:a991b64:                          .addRegularColumn("val", AsciiType.instance)
1:a991b64:                          .build();
1:5f5905d: 
1:06c130e:         ColumnDefinition cd0 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance);
1:2457599:         ColumnDefinition cd1 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinition1"), LongType.instance);
1:972812c: 
1:5f5905d:         testSerializeDeserialize(cfm, cd0);
1:5f5905d:         testSerializeDeserialize(cfm, cd1);
1:42de601:     }
1:42de601: 
1:5f5905d:     protected void testSerializeDeserialize(CFMetaData cfm, ColumnDefinition cd) throws Exception
1:42de601:     {
1:06c130e:         ColumnDefinition newCd = ThriftConversion.fromThrift(cfm.ksName, cfm.cfName, cfm.comparator.subtype(0), null, ThriftConversion.toThrift(cfm, cd));
1:8b09061:         Assert.assertNotSame(cd, newCd);
1:8b09061:         Assert.assertEquals(cd.hashCode(), newCd.hashCode());
1:8b09061:         Assert.assertEquals(cd, newCd);
1:42de601:     }
1:42de601: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition cd0 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance);
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition newCd = ThriftConversion.fromThrift(cfm.ksName, cfm.cfName, cfm.comparator.subtype(0), null, ThriftConversion.toThrift(cfm, cd));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition cd0 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance)
1:         ColumnDefinition cd1 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinition1"), LongType.instance);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData cfm = CFMetaData.Builder.create("ks", "cf", true, false, false)
1:                          .addPartitionKey("pkey", AsciiType.instance)
1:                          .addClusteringColumn("name", AsciiType.instance)
1:                          .addRegularColumn("val", AsciiType.instance)
1:                          .build();
0:         ColumnDefinition cd0 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance, null)
0:         ColumnDefinition cd1 = ColumnDefinition.staticDef(cfm, ByteBufferUtil.bytes("TestColumnDefinition1"), LongType.instance, null);
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ThriftConversion.fromThrift(cfm.ksName, cfm.cfName, cfm.comparator.subtype(0), null, ThriftConversion.toThrift(cd));
commit:706afc3
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ColumnDefinition.fromThrift(cfm.ksName, cfm.cfName, cfm.comparator.asAbstractType(), null, cd.toThrift());
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData cfm = CFMetaData.denseCFMetaData("ks", "cf", UTF8Type.instance);
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.ColumnFamilyType;
1: import org.apache.cassandra.db.marshal.*;
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData cfm = new CFMetaData("ks", "cf", ColumnFamilyType.Standard, UTF8Type.instance);
1: 
0:         ColumnDefinition cd0 = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance, null)
0:         ColumnDefinition cd1 = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("TestColumnDefinition1"), LongType.instance, null);
1:         testSerializeDeserialize(cfm, cd0);
1:         testSerializeDeserialize(cfm, cd1);
1:     protected void testSerializeDeserialize(CFMetaData cfm, ColumnDefinition cd) throws Exception
0:         ColumnDefinition newCd = ColumnDefinition.fromThrift(cfm, cd.toThrift());
commit:a950b92
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition cd0 = ColumnDefinition.regularDef(ByteBufferUtil.bytes("TestColumnDefinitionName0"), BytesType.instance, null)
0:                                                .setIndex("random index name 0", IndexType.KEYS, null);
0:         ColumnDefinition cd1 = ColumnDefinition.regularDef(ByteBufferUtil.bytes("TestColumnDefinition1"), LongType.instance, null);
commit:3a005df
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ColumnDefinition.fromThrift(cd.toThrift(), false);
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:                                                     "random index name 0",
0:                                                     null);
0:                                                     null,
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a94b173
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.thrift.ThriftConversion;
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ThriftConversion.fromThrift(cfm.ksName, cfm.cfName, cfm.comparator.asAbstractType(), null, ThriftConversion.toThrift(cd));
commit:4e52e0d
/////////////////////////////////////////////////////////////////////////
author:Dave Brosius
-------------------------------------------------------------------------------
commit:8b09061
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertNotSame(cd, newCd);
1:         Assert.assertEquals(cd.hashCode(), newCd.hashCode());
1:         Assert.assertEquals(cd, newCd);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:37b0793
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ColumnDefinition.fromThrift(cd.toThrift());
commit:38e3e85
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ColumnDefinition.fromAvro(cd.toAvro());
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:16d7385
/////////////////////////////////////////////////////////////////////////
0:                                                     null,
0:                                                     null,
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:ebc7278
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.cassandra.db.marshal.BytesType;
0: import org.apache.cassandra.db.marshal.LongType;
/////////////////////////////////////////////////////////////////////////
0:                                                     BytesType.instance,
0:                                                     LongType.instance,
commit:7405e8f
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition newCd = ColumnDefinition.inflate(cd.deflate());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8358669
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
0:         ColumnDefinition cd0 = new ColumnDefinition(ByteBufferUtil.bytes("TestColumnDefinitionName0"),
0:         ColumnDefinition cd1 = new ColumnDefinition(ByteBufferUtil.bytes("TestColumnDefinition1"),
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition cd0 = new ColumnDefinition(ByteBuffer.wrap("TestColumnDefinitionName0".getBytes("UTF8")),
0:         ColumnDefinition cd1 = new ColumnDefinition(ByteBuffer.wrap("TestColumnDefinition1".getBytes("UTF8")),
commit:972812c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.IndexType;
1: 
/////////////////////////////////////////////////////////////////////////
0:                                                     IndexType.KEYS,
commit:2e06336
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition cd0 = new ColumnDefinition("TestColumnDefinitionName0".getBytes("UTF8"),
0:                                                     "BytesType",
0:                                                     "random index type 0",
0:                                                     "random index name 0");
0:         ColumnDefinition cd1 = new ColumnDefinition("TestColumnDefinition1".getBytes("UTF8"),
0:                                                     "LongType",
0:                                                     null,
0:                                                     null);
commit:42de601
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.config;
1: 
1: import org.junit.Test;
1: 
1: public class ColumnDefinitionTest
1: {
1:     @Test
1:     public void testSerializeDeserialize() throws Exception
1:     {
0:         ColumnDefinition cd0 = new ColumnDefinition(
0:                 "TestColumnDefinitionName0".getBytes("UTF8"),
0:                 "org.apache.cassandra.config.RandomClass0",
0:                 "random index name 0",
0:                 "random index type 0");
1: 
0:         ColumnDefinition cd1 = new ColumnDefinition(
0:                 "TestColumnDefinition1".getBytes("UTF8"),
0:                 "org.apache.cassandra.config.RandomClass1",
0:                 null,
0:                 null);
1: 
0:         testSerializeDeserialize(cd0);
0:         testSerializeDeserialize(cd1);
1:     }
1: 
0:     protected void testSerializeDeserialize(ColumnDefinition cd) throws Exception
1:     {
0:         ColumnDefinition newCd = ColumnDefinition.deserialize(ColumnDefinition.serialize(cd));
0:         assert cd != newCd;
0:         assert cd.hashCode() == newCd.hashCode();
0:         assert cd.equals(newCd);
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:94cc9a4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
0: 
============================================================================