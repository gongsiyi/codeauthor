1:269c5d4: /*
1:269c5d4:  * Licensed to the Apache Software Foundation (ASF) under one
1:269c5d4:  * or more contributor license agreements.  See the NOTICE file
1:269c5d4:  * distributed with this work for additional information
1:269c5d4:  * regarding copyright ownership.  The ASF licenses this file
1:269c5d4:  * to you under the Apache License, Version 2.0 (the
1:269c5d4:  * "License"); you may not use this file except in compliance
1:269c5d4:  * with the License.  You may obtain a copy of the License at
1:269c5d4:  *
1:269c5d4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:269c5d4:  *
1:269c5d4:  * Unless required by applicable law or agreed to in writing, software
1:269c5d4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:269c5d4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:269c5d4:  * See the License for the specific language governing permissions and
1:269c5d4:  * limitations under the License.
1:269c5d4:  */
1:269c5d4: package org.apache.cassandra.cql3.functions;
1:269c5d4: 
1:269c5d4: import java.math.BigDecimal;
1:269c5d4: import java.math.BigInteger;
1:269c5d4: import java.util.Date;
1:269c5d4: 
1:269c5d4: import org.apache.cassandra.cql3.CQLTester;
1:269c5d4: import org.apache.cassandra.serializers.SimpleDateSerializer;
1:269c5d4: import org.apache.cassandra.utils.UUIDGen;
1:269c5d4: import org.joda.time.DateTime;
1:269c5d4: import org.joda.time.DateTimeZone;
1:269c5d4: import org.joda.time.format.DateTimeFormat;
1:269c5d4: import org.junit.Test;
1:269c5d4: 
1:269c5d4: public class CastFctsTest extends CQLTester
1:269c5d4: {
1:269c5d4:     @Test
1:269c5d4:     public void testInvalidQueries() throws Throwable
1:269c5d4:     {
1:269c5d4:         createTable("CREATE TABLE %s (a int primary key, b text, c double)");
1:269c5d4: 
1:269c5d4:         assertInvalidSyntaxMessage("no viable alternative at input '(' (... b, c) VALUES ([CAST](...)",
1:269c5d4:                                    "INSERT INTO %s (a, b, c) VALUES (CAST(? AS int), ?, ?)", 1.6, "test", 6.3);
1:269c5d4: 
1:269c5d4:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:269c5d4:                 + " SET c = [cast](...)",
1:269c5d4:                                    "UPDATE %s SET c = cast(? as double) WHERE a = ?", 1, 1);
1:269c5d4: 
1:269c5d4:         assertInvalidSyntaxMessage("no viable alternative at input '(' (...= ? WHERE a = [CAST] (...)",
1:269c5d4:                                    "UPDATE %s SET c = ? WHERE a = CAST (? AS INT)", 1, 2.0);
1:269c5d4: 
1:269c5d4:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:269c5d4:                 + " WHERE a = [CAST] (...)",
1:269c5d4:                                    "DELETE FROM %s WHERE a = CAST (? AS INT)", 1, 2.0);
1:269c5d4: 
1:269c5d4:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:269c5d4:                 + " WHERE a = [CAST] (...)",
1:269c5d4:                                    "SELECT * FROM %s WHERE a = CAST (? AS INT)", 1, 2.0);
1:269c5d4: 
1:269c5d4:         assertInvalidMessage("a cannot be cast to boolean", "SELECT CAST(a AS boolean) FROM %s");
1:269c5d4:     }
1:269c5d4: 
1:269c5d4:     @Test
1:269c5d4:     public void testNumericCastsInSelectionClause() throws Throwable
1:269c5d4:     {
1:269c5d4:         createTable("CREATE TABLE %s (a tinyint primary key,"
1:269c5d4:                                    + " b smallint,"
1:269c5d4:                                    + " c int,"
1:269c5d4:                                    + " d bigint,"
1:269c5d4:                                    + " e float,"
1:269c5d4:                                    + " f double,"
1:269c5d4:                                    + " g decimal,"
1:269c5d4:                                    + " h varint,"
1:269c5d4:                                    + " i int)");
1:269c5d4: 
1:269c5d4:         execute("INSERT INTO %s (a, b, c, d, e, f, g, h) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
1:269c5d4:                 (byte) 1, (short) 2, 3, 4L, 5.2F, 6.3, BigDecimal.valueOf(6.3), BigInteger.valueOf(4));
1:269c5d4: 
1:269c5d4:         assertColumnNames(execute("SELECT CAST(b AS int), CAST(c AS int), CAST(d AS double) FROM %s"),
1:269c5d4:                           "cast(b as int)",
1:269c5d4:                           "c",
1:269c5d4:                           "cast(d as double)");
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS tinyint), " +
1:269c5d4:                 "CAST(b AS tinyint), " +
1:269c5d4:                 "CAST(c AS tinyint), " +
1:269c5d4:                 "CAST(d AS tinyint), " +
1:269c5d4:                 "CAST(e AS tinyint), " +
1:269c5d4:                 "CAST(f AS tinyint), " +
1:269c5d4:                 "CAST(g AS tinyint), " +
1:269c5d4:                 "CAST(h AS tinyint), " +
1:269c5d4:                 "CAST(i AS tinyint) FROM %s"),
1:269c5d4:                    row((byte) 1, (byte) 2, (byte) 3, (byte) 4L, (byte) 5, (byte) 6, (byte) 6, (byte) 4, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS smallint), " +
1:269c5d4:                 "CAST(b AS smallint), " +
1:269c5d4:                 "CAST(c AS smallint), " +
1:269c5d4:                 "CAST(d AS smallint), " +
1:269c5d4:                 "CAST(e AS smallint), " +
1:269c5d4:                 "CAST(f AS smallint), " +
1:269c5d4:                 "CAST(g AS smallint), " +
1:269c5d4:                 "CAST(h AS smallint), " +
1:269c5d4:                 "CAST(i AS smallint) FROM %s"),
1:269c5d4:                    row((short) 1, (short) 2, (short) 3, (short) 4L, (short) 5, (short) 6, (short) 6, (short) 4, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS int), " +
1:269c5d4:                 "CAST(b AS int), " +
1:269c5d4:                 "CAST(c AS int), " +
1:269c5d4:                 "CAST(d AS int), " +
1:269c5d4:                 "CAST(e AS int), " +
1:269c5d4:                 "CAST(f AS int), " +
1:269c5d4:                 "CAST(g AS int), " +
1:269c5d4:                 "CAST(h AS int), " +
1:269c5d4:                 "CAST(i AS int) FROM %s"),
1:269c5d4:                    row(1, 2, 3, 4, 5, 6, 6, 4, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS bigint), " +
1:269c5d4:                 "CAST(b AS bigint), " +
1:269c5d4:                 "CAST(c AS bigint), " +
1:269c5d4:                 "CAST(d AS bigint), " +
1:269c5d4:                 "CAST(e AS bigint), " +
1:269c5d4:                 "CAST(f AS bigint), " +
1:269c5d4:                 "CAST(g AS bigint), " +
1:269c5d4:                 "CAST(h AS bigint), " +
1:269c5d4:                 "CAST(i AS bigint) FROM %s"),
1:269c5d4:                    row(1L, 2L, 3L, 4L, 5L, 6L, 6L, 4L, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS float), " +
1:269c5d4:                 "CAST(b AS float), " +
1:269c5d4:                 "CAST(c AS float), " +
1:269c5d4:                 "CAST(d AS float), " +
1:269c5d4:                 "CAST(e AS float), " +
1:269c5d4:                 "CAST(f AS float), " +
1:269c5d4:                 "CAST(g AS float), " +
1:269c5d4:                 "CAST(h AS float), " +
1:269c5d4:                 "CAST(i AS float) FROM %s"),
1:269c5d4:                    row(1.0F, 2.0F, 3.0F, 4.0F, 5.2F, 6.3F, 6.3F, 4.0F, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS double), " +
1:269c5d4:                 "CAST(b AS double), " +
1:269c5d4:                 "CAST(c AS double), " +
1:269c5d4:                 "CAST(d AS double), " +
1:269c5d4:                 "CAST(e AS double), " +
1:269c5d4:                 "CAST(f AS double), " +
1:269c5d4:                 "CAST(g AS double), " +
1:269c5d4:                 "CAST(h AS double), " +
1:269c5d4:                 "CAST(i AS double) FROM %s"),
1:269c5d4:                    row(1.0, 2.0, 3.0, 4.0, (double) 5.2F, 6.3, 6.3, 4.0, null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS decimal), " +
1:269c5d4:                 "CAST(b AS decimal), " +
1:269c5d4:                 "CAST(c AS decimal), " +
1:269c5d4:                 "CAST(d AS decimal), " +
1:269c5d4:                 "CAST(e AS decimal), " +
1:269c5d4:                 "CAST(f AS decimal), " +
1:269c5d4:                 "CAST(g AS decimal), " +
1:269c5d4:                 "CAST(h AS decimal), " +
1:269c5d4:                 "CAST(i AS decimal) FROM %s"),
1:269c5d4:                    row(BigDecimal.valueOf(1.0),
1:269c5d4:                        BigDecimal.valueOf(2.0),
1:269c5d4:                        BigDecimal.valueOf(3.0),
1:269c5d4:                        BigDecimal.valueOf(4.0),
1:269c5d4:                        BigDecimal.valueOf(5.2F),
1:269c5d4:                        BigDecimal.valueOf(6.3),
1:269c5d4:                        BigDecimal.valueOf(6.3),
1:269c5d4:                        BigDecimal.valueOf(4.0),
1:269c5d4:                        null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS ascii), " +
1:269c5d4:                 "CAST(b AS ascii), " +
1:269c5d4:                 "CAST(c AS ascii), " +
1:269c5d4:                 "CAST(d AS ascii), " +
1:269c5d4:                 "CAST(e AS ascii), " +
1:269c5d4:                 "CAST(f AS ascii), " +
1:269c5d4:                 "CAST(g AS ascii), " +
1:269c5d4:                 "CAST(h AS ascii), " +
1:269c5d4:                 "CAST(i AS ascii) FROM %s"),
1:269c5d4:                    row("1",
1:269c5d4:                        "2",
1:269c5d4:                        "3",
1:269c5d4:                        "4",
1:269c5d4:                        "5.2",
1:269c5d4:                        "6.3",
1:269c5d4:                        "6.3",
1:269c5d4:                        "4",
1:269c5d4:                        null));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS text), " +
1:269c5d4:                 "CAST(b AS text), " +
1:269c5d4:                 "CAST(c AS text), " +
1:269c5d4:                 "CAST(d AS text), " +
1:269c5d4:                 "CAST(e AS text), " +
1:269c5d4:                 "CAST(f AS text), " +
1:269c5d4:                 "CAST(g AS text), " +
1:269c5d4:                 "CAST(h AS text), " +
1:269c5d4:                 "CAST(i AS text) FROM %s"),
1:269c5d4:                    row("1",
1:269c5d4:                        "2",
1:269c5d4:                        "3",
1:269c5d4:                        "4",
1:269c5d4:                        "5.2",
1:269c5d4:                        "6.3",
1:269c5d4:                        "6.3",
1:269c5d4:                        "4",
1:269c5d4:                        null));
1:269c5d4:     }
1:269c5d4: 
1:269c5d4:     @Test
1:269c5d4:     public void testTimeCastsInSelectionClause() throws Throwable
1:269c5d4:     {
1:269c5d4:         createTable("CREATE TABLE %s (a timeuuid primary key, b timestamp, c date, d time)");
1:269c5d4: 
1:269c5d4:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:269c5d4:                 .withZone(DateTimeZone.UTC)
1:269c5d4:                 .parseDateTime("2015-05-21 11:03:02");
1:269c5d4: 
1:269c5d4:         DateTime date = DateTimeFormat.forPattern("yyyy-MM-dd")
1:269c5d4:                 .withZone(DateTimeZone.UTC)
1:269c5d4:                 .parseDateTime("2015-05-21");
1:269c5d4: 
1:269c5d4:         long timeInMillis = dateTime.getMillis();
1:269c5d4: 
1:269c5d4:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, '2015-05-21 11:03:02+00', '2015-05-21', '11:03:02')",
1:269c5d4:                 UUIDGen.getTimeUUID(timeInMillis));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS timestamp), " +
1:269c5d4:                            "CAST(b AS timestamp), " +
1:269c5d4:                            "CAST(c AS timestamp) FROM %s"),
1:269c5d4:                    row(new Date(dateTime.getMillis()), new Date(dateTime.getMillis()), new Date(date.getMillis())));
1:269c5d4: 
1:269c5d4:         int timeInMillisToDay = SimpleDateSerializer.timeInMillisToDay(date.getMillis());
1:269c5d4:         assertRows(execute("SELECT CAST(a AS date), " +
1:269c5d4:                            "CAST(b AS date), " +
1:269c5d4:                            "CAST(c AS date) FROM %s"),
1:269c5d4:                    row(timeInMillisToDay, timeInMillisToDay, timeInMillisToDay));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(b AS text), " +
1:269c5d4:                            "CAST(c AS text), " +
1:269c5d4:                            "CAST(d AS text) FROM %s"),
1:269c5d4:                    row("2015-05-21T11:03:02.000Z", "2015-05-21", "11:03:02.000000000"));
1:269c5d4:     }
1:269c5d4: 
1:269c5d4:     @Test
1:269c5d4:     public void testOtherTypeCastsInSelectionClause() throws Throwable
1:269c5d4:     {
1:269c5d4:         createTable("CREATE TABLE %s (a ascii primary key,"
1:269c5d4:                                    + " b inet,"
1:269c5d4:                                    + " c boolean)");
1:269c5d4: 
1:269c5d4:         execute("INSERT INTO %s (a, b, c) VALUES (?, '127.0.0.1', ?)",
1:269c5d4:                 "test", true);
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS text), " +
1:269c5d4:                 "CAST(b AS text), " +
1:269c5d4:                 "CAST(c AS text) FROM %s"),
1:269c5d4:                    row("test", "127.0.0.1", "true"));
1:269c5d4:     }
1:269c5d4: 
1:269c5d4:     @Test
1:269c5d4:     public void testCastsWithReverseOrder() throws Throwable
1:269c5d4:     {
1:269c5d4:         createTable("CREATE TABLE %s (a int,"
1:269c5d4:                                    + " b smallint,"
1:269c5d4:                                    + " c double,"
1:269c5d4:                                    + " primary key (a, b)) WITH CLUSTERING ORDER BY (b DESC);");
1:269c5d4: 
1:269c5d4:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",
1:269c5d4:                 1, (short) 2, 6.3);
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(a AS tinyint), " +
1:269c5d4:                 "CAST(b AS tinyint), " +
1:269c5d4:                 "CAST(c AS tinyint) FROM %s"),
1:269c5d4:                    row((byte) 1, (byte) 2, (byte) 6));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(CAST(a AS tinyint) AS smallint), " +
1:269c5d4:                 "CAST(CAST(b AS tinyint) AS smallint), " +
1:269c5d4:                 "CAST(CAST(c AS tinyint) AS smallint) FROM %s"),
1:269c5d4:                    row((short) 1, (short) 2, (short) 6));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(CAST(CAST(a AS tinyint) AS double) AS text), " +
1:269c5d4:                 "CAST(CAST(CAST(b AS tinyint) AS double) AS text), " +
1:269c5d4:                 "CAST(CAST(CAST(c AS tinyint) AS double) AS text) FROM %s"),
1:269c5d4:                    row("1.0", "2.0", "6.0"));
1:269c5d4: 
1:269c5d4:         String f = createFunction(KEYSPACE, "int",
1:269c5d4:                                   "CREATE FUNCTION %s(val int) " +
1:269c5d4:                                           "RETURNS NULL ON NULL INPUT " +
1:269c5d4:                                           "RETURNS double " +
1:269c5d4:                                           "LANGUAGE java " +
1:269c5d4:                                           "AS 'return (double)val;'");
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT " + f + "(CAST(b AS int)) FROM %s"),
1:269c5d4:                    row((double) 2));
1:269c5d4: 
1:269c5d4:         assertRows(execute("SELECT CAST(" + f + "(CAST(b AS int)) AS text) FROM %s"),
1:269c5d4:                    row("2.0"));
1:269c5d4:     }
1:485c23d: 
1:485c23d:     @Test
1:485c23d:     public void testCounterCastsInSelectionClause() throws Throwable
1:485c23d:     {
1:485c23d:         createTable("CREATE TABLE %s (a int primary key, b counter)");
1:485c23d: 
1:485c23d:         execute("UPDATE %s SET b = b + 2 WHERE a = 1");
1:485c23d: 
1:485c23d:         assertRows(execute("SELECT CAST(b AS tinyint), " +
1:485c23d:                 "CAST(b AS smallint), " +
1:485c23d:                 "CAST(b AS int), " +
1:485c23d:                 "CAST(b AS bigint), " +
1:485c23d:                 "CAST(b AS float), " +
1:485c23d:                 "CAST(b AS double), " +
1:485c23d:                 "CAST(b AS decimal), " +
1:485c23d:                 "CAST(b AS ascii), " +
1:485c23d:                 "CAST(b AS text) FROM %s"),
1:485c23d:                    row((byte) 2, (short) 2, 2, 2L, 2.0F, 2.0, BigDecimal.valueOf(2.0), "2", "2"));
1:485c23d:     }
1:269c5d4: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:485c23d
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testCounterCastsInSelectionClause() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int primary key, b counter)");
1: 
1:         execute("UPDATE %s SET b = b + 2 WHERE a = 1");
1: 
1:         assertRows(execute("SELECT CAST(b AS tinyint), " +
1:                 "CAST(b AS smallint), " +
1:                 "CAST(b AS int), " +
1:                 "CAST(b AS bigint), " +
1:                 "CAST(b AS float), " +
1:                 "CAST(b AS double), " +
1:                 "CAST(b AS decimal), " +
1:                 "CAST(b AS ascii), " +
1:                 "CAST(b AS text) FROM %s"),
1:                    row((byte) 2, (short) 2, 2, 2L, 2.0F, 2.0, BigDecimal.valueOf(2.0), "2", "2"));
1:     }
author:blerer
-------------------------------------------------------------------------------
commit:269c5d4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.Date;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.serializers.SimpleDateSerializer;
1: import org.apache.cassandra.utils.UUIDGen;
1: import org.joda.time.DateTime;
1: import org.joda.time.DateTimeZone;
1: import org.joda.time.format.DateTimeFormat;
1: import org.junit.Test;
1: 
1: public class CastFctsTest extends CQLTester
1: {
1:     @Test
1:     public void testInvalidQueries() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int primary key, b text, c double)");
1: 
1:         assertInvalidSyntaxMessage("no viable alternative at input '(' (... b, c) VALUES ([CAST](...)",
1:                                    "INSERT INTO %s (a, b, c) VALUES (CAST(? AS int), ?, ?)", 1.6, "test", 6.3);
1: 
1:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:                 + " SET c = [cast](...)",
1:                                    "UPDATE %s SET c = cast(? as double) WHERE a = ?", 1, 1);
1: 
1:         assertInvalidSyntaxMessage("no viable alternative at input '(' (...= ? WHERE a = [CAST] (...)",
1:                                    "UPDATE %s SET c = ? WHERE a = CAST (? AS INT)", 1, 2.0);
1: 
1:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:                 + " WHERE a = [CAST] (...)",
1:                                    "DELETE FROM %s WHERE a = CAST (? AS INT)", 1, 2.0);
1: 
1:         assertInvalidSyntaxMessage("no viable alternative at input '(' (..." + KEYSPACE + "." + currentTable()
1:                 + " WHERE a = [CAST] (...)",
1:                                    "SELECT * FROM %s WHERE a = CAST (? AS INT)", 1, 2.0);
1: 
1:         assertInvalidMessage("a cannot be cast to boolean", "SELECT CAST(a AS boolean) FROM %s");
1:     }
1: 
1:     @Test
1:     public void testNumericCastsInSelectionClause() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a tinyint primary key,"
1:                                    + " b smallint,"
1:                                    + " c int,"
1:                                    + " d bigint,"
1:                                    + " e float,"
1:                                    + " f double,"
1:                                    + " g decimal,"
1:                                    + " h varint,"
1:                                    + " i int)");
1: 
1:         execute("INSERT INTO %s (a, b, c, d, e, f, g, h) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
1:                 (byte) 1, (short) 2, 3, 4L, 5.2F, 6.3, BigDecimal.valueOf(6.3), BigInteger.valueOf(4));
1: 
1:         assertColumnNames(execute("SELECT CAST(b AS int), CAST(c AS int), CAST(d AS double) FROM %s"),
1:                           "cast(b as int)",
1:                           "c",
1:                           "cast(d as double)");
1: 
1:         assertRows(execute("SELECT CAST(a AS tinyint), " +
1:                 "CAST(b AS tinyint), " +
1:                 "CAST(c AS tinyint), " +
1:                 "CAST(d AS tinyint), " +
1:                 "CAST(e AS tinyint), " +
1:                 "CAST(f AS tinyint), " +
1:                 "CAST(g AS tinyint), " +
1:                 "CAST(h AS tinyint), " +
1:                 "CAST(i AS tinyint) FROM %s"),
1:                    row((byte) 1, (byte) 2, (byte) 3, (byte) 4L, (byte) 5, (byte) 6, (byte) 6, (byte) 4, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS smallint), " +
1:                 "CAST(b AS smallint), " +
1:                 "CAST(c AS smallint), " +
1:                 "CAST(d AS smallint), " +
1:                 "CAST(e AS smallint), " +
1:                 "CAST(f AS smallint), " +
1:                 "CAST(g AS smallint), " +
1:                 "CAST(h AS smallint), " +
1:                 "CAST(i AS smallint) FROM %s"),
1:                    row((short) 1, (short) 2, (short) 3, (short) 4L, (short) 5, (short) 6, (short) 6, (short) 4, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS int), " +
1:                 "CAST(b AS int), " +
1:                 "CAST(c AS int), " +
1:                 "CAST(d AS int), " +
1:                 "CAST(e AS int), " +
1:                 "CAST(f AS int), " +
1:                 "CAST(g AS int), " +
1:                 "CAST(h AS int), " +
1:                 "CAST(i AS int) FROM %s"),
1:                    row(1, 2, 3, 4, 5, 6, 6, 4, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS bigint), " +
1:                 "CAST(b AS bigint), " +
1:                 "CAST(c AS bigint), " +
1:                 "CAST(d AS bigint), " +
1:                 "CAST(e AS bigint), " +
1:                 "CAST(f AS bigint), " +
1:                 "CAST(g AS bigint), " +
1:                 "CAST(h AS bigint), " +
1:                 "CAST(i AS bigint) FROM %s"),
1:                    row(1L, 2L, 3L, 4L, 5L, 6L, 6L, 4L, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS float), " +
1:                 "CAST(b AS float), " +
1:                 "CAST(c AS float), " +
1:                 "CAST(d AS float), " +
1:                 "CAST(e AS float), " +
1:                 "CAST(f AS float), " +
1:                 "CAST(g AS float), " +
1:                 "CAST(h AS float), " +
1:                 "CAST(i AS float) FROM %s"),
1:                    row(1.0F, 2.0F, 3.0F, 4.0F, 5.2F, 6.3F, 6.3F, 4.0F, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS double), " +
1:                 "CAST(b AS double), " +
1:                 "CAST(c AS double), " +
1:                 "CAST(d AS double), " +
1:                 "CAST(e AS double), " +
1:                 "CAST(f AS double), " +
1:                 "CAST(g AS double), " +
1:                 "CAST(h AS double), " +
1:                 "CAST(i AS double) FROM %s"),
1:                    row(1.0, 2.0, 3.0, 4.0, (double) 5.2F, 6.3, 6.3, 4.0, null));
1: 
1:         assertRows(execute("SELECT CAST(a AS decimal), " +
1:                 "CAST(b AS decimal), " +
1:                 "CAST(c AS decimal), " +
1:                 "CAST(d AS decimal), " +
1:                 "CAST(e AS decimal), " +
1:                 "CAST(f AS decimal), " +
1:                 "CAST(g AS decimal), " +
1:                 "CAST(h AS decimal), " +
1:                 "CAST(i AS decimal) FROM %s"),
1:                    row(BigDecimal.valueOf(1.0),
1:                        BigDecimal.valueOf(2.0),
1:                        BigDecimal.valueOf(3.0),
1:                        BigDecimal.valueOf(4.0),
1:                        BigDecimal.valueOf(5.2F),
1:                        BigDecimal.valueOf(6.3),
1:                        BigDecimal.valueOf(6.3),
1:                        BigDecimal.valueOf(4.0),
1:                        null));
1: 
1:         assertRows(execute("SELECT CAST(a AS ascii), " +
1:                 "CAST(b AS ascii), " +
1:                 "CAST(c AS ascii), " +
1:                 "CAST(d AS ascii), " +
1:                 "CAST(e AS ascii), " +
1:                 "CAST(f AS ascii), " +
1:                 "CAST(g AS ascii), " +
1:                 "CAST(h AS ascii), " +
1:                 "CAST(i AS ascii) FROM %s"),
1:                    row("1",
1:                        "2",
1:                        "3",
1:                        "4",
1:                        "5.2",
1:                        "6.3",
1:                        "6.3",
1:                        "4",
1:                        null));
1: 
1:         assertRows(execute("SELECT CAST(a AS text), " +
1:                 "CAST(b AS text), " +
1:                 "CAST(c AS text), " +
1:                 "CAST(d AS text), " +
1:                 "CAST(e AS text), " +
1:                 "CAST(f AS text), " +
1:                 "CAST(g AS text), " +
1:                 "CAST(h AS text), " +
1:                 "CAST(i AS text) FROM %s"),
1:                    row("1",
1:                        "2",
1:                        "3",
1:                        "4",
1:                        "5.2",
1:                        "6.3",
1:                        "6.3",
1:                        "4",
1:                        null));
1:     }
1: 
1:     @Test
1:     public void testTimeCastsInSelectionClause() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a timeuuid primary key, b timestamp, c date, d time)");
1: 
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         DateTime date = DateTimeFormat.forPattern("yyyy-MM-dd")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21");
1: 
1:         long timeInMillis = dateTime.getMillis();
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, '2015-05-21 11:03:02+00', '2015-05-21', '11:03:02')",
1:                 UUIDGen.getTimeUUID(timeInMillis));
1: 
1:         assertRows(execute("SELECT CAST(a AS timestamp), " +
1:                            "CAST(b AS timestamp), " +
1:                            "CAST(c AS timestamp) FROM %s"),
1:                    row(new Date(dateTime.getMillis()), new Date(dateTime.getMillis()), new Date(date.getMillis())));
1: 
1:         int timeInMillisToDay = SimpleDateSerializer.timeInMillisToDay(date.getMillis());
1:         assertRows(execute("SELECT CAST(a AS date), " +
1:                            "CAST(b AS date), " +
1:                            "CAST(c AS date) FROM %s"),
1:                    row(timeInMillisToDay, timeInMillisToDay, timeInMillisToDay));
1: 
1:         assertRows(execute("SELECT CAST(b AS text), " +
1:                            "CAST(c AS text), " +
1:                            "CAST(d AS text) FROM %s"),
1:                    row("2015-05-21T11:03:02.000Z", "2015-05-21", "11:03:02.000000000"));
1:     }
1: 
1:     @Test
1:     public void testOtherTypeCastsInSelectionClause() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a ascii primary key,"
1:                                    + " b inet,"
1:                                    + " c boolean)");
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, '127.0.0.1', ?)",
1:                 "test", true);
1: 
1:         assertRows(execute("SELECT CAST(a AS text), " +
1:                 "CAST(b AS text), " +
1:                 "CAST(c AS text) FROM %s"),
1:                    row("test", "127.0.0.1", "true"));
1:     }
1: 
1:     @Test
1:     public void testCastsWithReverseOrder() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int,"
1:                                    + " b smallint,"
1:                                    + " c double,"
1:                                    + " primary key (a, b)) WITH CLUSTERING ORDER BY (b DESC);");
1: 
1:         execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",
1:                 1, (short) 2, 6.3);
1: 
1:         assertRows(execute("SELECT CAST(a AS tinyint), " +
1:                 "CAST(b AS tinyint), " +
1:                 "CAST(c AS tinyint) FROM %s"),
1:                    row((byte) 1, (byte) 2, (byte) 6));
1: 
1:         assertRows(execute("SELECT CAST(CAST(a AS tinyint) AS smallint), " +
1:                 "CAST(CAST(b AS tinyint) AS smallint), " +
1:                 "CAST(CAST(c AS tinyint) AS smallint) FROM %s"),
1:                    row((short) 1, (short) 2, (short) 6));
1: 
1:         assertRows(execute("SELECT CAST(CAST(CAST(a AS tinyint) AS double) AS text), " +
1:                 "CAST(CAST(CAST(b AS tinyint) AS double) AS text), " +
1:                 "CAST(CAST(CAST(c AS tinyint) AS double) AS text) FROM %s"),
1:                    row("1.0", "2.0", "6.0"));
1: 
1:         String f = createFunction(KEYSPACE, "int",
1:                                   "CREATE FUNCTION %s(val int) " +
1:                                           "RETURNS NULL ON NULL INPUT " +
1:                                           "RETURNS double " +
1:                                           "LANGUAGE java " +
1:                                           "AS 'return (double)val;'");
1: 
1:         assertRows(execute("SELECT " + f + "(CAST(b AS int)) FROM %s"),
1:                    row((double) 2));
1: 
1:         assertRows(execute("SELECT CAST(" + f + "(CAST(b AS int)) AS text) FROM %s"),
1:                    row("2.0"));
1:     }
1: }
============================================================================