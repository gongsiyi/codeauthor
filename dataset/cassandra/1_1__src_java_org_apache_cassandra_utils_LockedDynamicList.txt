1:17dd4cc: /*
1:17dd4cc:  * Licensed to the Apache Software Foundation (ASF) under one
1:17dd4cc:  * or more contributor license agreements.  See the NOTICE file
1:17dd4cc:  * distributed with this work for additional information
1:17dd4cc:  * regarding copyright ownership.  The ASF licenses this file
1:17dd4cc:  * to you under the Apache License, Version 2.0 (the
1:17dd4cc:  * "License"); you may not use this file except in compliance
1:17dd4cc:  * with the License.  You may obtain a copy of the License at
1:17dd4cc:  *
1:17dd4cc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:17dd4cc:  *
1:17dd4cc:  * Unless required by applicable law or agreed to in writing, software
1:17dd4cc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:17dd4cc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:17dd4cc:  * See the License for the specific language governing permissions and
1:17dd4cc:  * limitations under the License.
1:17dd4cc:  */
1:17dd4cc: package org.apache.cassandra.utils;
1:17dd4cc: 
1:17dd4cc: import java.util.concurrent.locks.ReadWriteLock;
1:17dd4cc: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:17dd4cc: 
1:17dd4cc: // simple thread-unsafe skiplist that permits indexing/removal by position, insertion at the end
1:17dd4cc: // (though easily extended to insertion at any position, not necessary here)
1:17dd4cc: // we use it for sampling items by position for visiting writes in the pool of pending writes
1:17dd4cc: public class LockedDynamicList<E> extends DynamicList<E>
1:17dd4cc: {
1:17dd4cc: 
1:17dd4cc:     private final ReadWriteLock lock = new ReentrantReadWriteLock();
1:17dd4cc: 
1:17dd4cc:     public LockedDynamicList(int maxExpectedSize)
1:17dd4cc:     {
1:17dd4cc:         super(maxExpectedSize);
1:17dd4cc:     }
1:17dd4cc: 
1:17dd4cc:     // add the value to the end of the list, and return the associated Node that permits efficient removal
1:17dd4cc:     // regardless of its future position in the list from other modifications
1:17dd4cc:     public Node<E> append(E value, int maxSize)
1:17dd4cc:     {
1:17dd4cc:         lock.writeLock().lock();
1:17dd4cc:         try
1:17dd4cc:         {
1:17dd4cc:             return super.append(value, maxSize);
1:17dd4cc:         }
1:17dd4cc:         finally
1:17dd4cc:         {
1:17dd4cc:             lock.writeLock().unlock();
1:17dd4cc:         }
1:17dd4cc:     }
1:17dd4cc: 
1:17dd4cc:     // remove the provided node and its associated value from the list
1:17dd4cc:     public void remove(Node<E> node)
1:17dd4cc:     {
1:17dd4cc:         lock.writeLock().lock();
1:17dd4cc:         try
1:17dd4cc:         {
1:17dd4cc:             super.remove(node);
1:17dd4cc:         }
1:17dd4cc:         finally
1:17dd4cc:         {
1:17dd4cc:             lock.writeLock().unlock();
1:17dd4cc:         }
1:17dd4cc:     }
1:17dd4cc: 
1:17dd4cc:     // retrieve the item at the provided index, or return null if the index is past the end of the list
1:17dd4cc:     public E get(int index)
1:17dd4cc:     {
1:17dd4cc:         lock.readLock().lock();
1:17dd4cc:         try
1:17dd4cc:         {
1:17dd4cc:             return super.get(index);
1:17dd4cc:         }
1:17dd4cc:         finally
1:17dd4cc:         {
1:17dd4cc:             lock.readLock().unlock();
1:17dd4cc:         }
1:17dd4cc:     }
1:17dd4cc: 
1:17dd4cc:     public int size()
1:17dd4cc:     {
1:17dd4cc:         lock.readLock().lock();
1:17dd4cc:         try
1:17dd4cc:         {
1:17dd4cc:             return super.size();
1:17dd4cc:         }
1:17dd4cc:         finally
1:17dd4cc:         {
1:17dd4cc:             lock.readLock().unlock();
1:17dd4cc:         }
1:17dd4cc:     }
1:17dd4cc: }
============================================================================
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.locks.ReadWriteLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
1: // simple thread-unsafe skiplist that permits indexing/removal by position, insertion at the end
1: // (though easily extended to insertion at any position, not necessary here)
1: // we use it for sampling items by position for visiting writes in the pool of pending writes
1: public class LockedDynamicList<E> extends DynamicList<E>
1: {
1: 
1:     private final ReadWriteLock lock = new ReentrantReadWriteLock();
1: 
1:     public LockedDynamicList(int maxExpectedSize)
1:     {
1:         super(maxExpectedSize);
1:     }
1: 
1:     // add the value to the end of the list, and return the associated Node that permits efficient removal
1:     // regardless of its future position in the list from other modifications
1:     public Node<E> append(E value, int maxSize)
1:     {
1:         lock.writeLock().lock();
1:         try
1:         {
1:             return super.append(value, maxSize);
1:         }
1:         finally
1:         {
1:             lock.writeLock().unlock();
1:         }
1:     }
1: 
1:     // remove the provided node and its associated value from the list
1:     public void remove(Node<E> node)
1:     {
1:         lock.writeLock().lock();
1:         try
1:         {
1:             super.remove(node);
1:         }
1:         finally
1:         {
1:             lock.writeLock().unlock();
1:         }
1:     }
1: 
1:     // retrieve the item at the provided index, or return null if the index is past the end of the list
1:     public E get(int index)
1:     {
1:         lock.readLock().lock();
1:         try
1:         {
1:             return super.get(index);
1:         }
1:         finally
1:         {
1:             lock.readLock().unlock();
1:         }
1:     }
1: 
1:     public int size()
1:     {
1:         lock.readLock().lock();
1:         try
1:         {
1:             return super.size();
1:         }
1:         finally
1:         {
1:             lock.readLock().unlock();
1:         }
1:     }
1: }
============================================================================