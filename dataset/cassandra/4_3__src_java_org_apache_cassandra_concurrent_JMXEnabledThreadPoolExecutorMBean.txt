1:88edbed: /*
1:88edbed:  * Licensed to the Apache Software Foundation (ASF) under one
1:88edbed:  * or more contributor license agreements.  See the NOTICE file
1:88edbed:  * distributed with this work for additional information
1:88edbed:  * regarding copyright ownership.  The ASF licenses this file
1:88edbed:  * to you under the Apache License, Version 2.0 (the
1:88edbed:  * "License"); you may not use this file except in compliance
1:88edbed:  * with the License.  You may obtain a copy of the License at
1:88edbed:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:88edbed:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:88edbed:  */
1:3ed4e05: package org.apache.cassandra.concurrent;
1:8219195: 
1:8896a70: 
1:8896a70: public interface JMXEnabledThreadPoolExecutorMBean
1:3ed4e05: {
1:8219195:     /**
1:8219195:      * Returns core pool size of thread pool.
1:8219195:      */
1:8219195:     public int getCoreThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize core pool size of the thread pool.
1:8219195:      */
1:8219195:     public void setCoreThreads(int number);
1:8219195: 
1:8219195:     /**
1:8219195:      * Returns maximum pool size of thread pool.
1:8219195:      */
1:8219195:     public int getMaximumThreads();
1:8219195: 
1:8219195:     /**
1:8219195:      * Allows user to resize maximum size of the thread pool.
1:8219195:      */
1:8219195:     public void setMaximumThreads(int number);
1:c0df773: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: 
1: public interface JMXEnabledThreadPoolExecutorMBean
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8219195
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns core pool size of thread pool.
1:      */
1:     public int getCoreThreads();
1: 
1:     /**
1:      * Allows user to resize core pool size of the thread pool.
1:      */
1:     public void setCoreThreads(int number);
1: 
1:     /**
1:      * Returns maximum pool size of thread pool.
1:      */
1:     public int getMaximumThreads();
1: 
1:     /**
1:      * Allows user to resize maximum size of the thread pool.
1:      */
1:     public void setMaximumThreads(int number);
commit:b4c7f55
/////////////////////////////////////////////////////////////////////////
0: public interface JMXEnabledThreadPoolExecutorMBean extends IExecutorMBean
commit:c0df773
/////////////////////////////////////////////////////////////////////////
0: public interface DebuggableThreadPoolExecutorMBean extends IExecutorMBean
1: }
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
1: */
commit:3ed4e05
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
0: 
0: public interface DebuggableThreadPoolExecutorMBean
1: {
0:     public long getPendingTasks();
0: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * @see org.apache.cassandra.metrics.ThreadPoolMetrics
0:  */
0: @Deprecated
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
commit:80bfd0b
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Get the number of tasks that had blocked before being accepted (or
0:      * rejected).
0:      */
0:     public int getTotalBlockedTasks();
0: 
0:     /**
0:      * Get the number of tasks currently blocked, waiting to be accepted by
0:      * the executor (because all threads are busy and the backing queue is full).
0:      */
0:     public int getCurrentlyBlockedTasks();
0: }
============================================================================