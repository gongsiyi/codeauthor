1:88edbed: /*
1:88edbed: * Licensed to the Apache Software Foundation (ASF) under one
1:88edbed: * or more contributor license agreements.  See the NOTICE file
1:88edbed: * distributed with this work for additional information
1:88edbed: * regarding copyright ownership.  The ASF licenses this file
1:88edbed: * to you under the Apache License, Version 2.0 (the
1:88edbed: * "License"); you may not use this file except in compliance
1:88edbed: * with the License.  You may obtain a copy of the License at
1:88edbed: *
1:88edbed: *    http://www.apache.org/licenses/LICENSE-2.0
1:88edbed: *
1:88edbed: * Unless required by applicable law or agreed to in writing,
1:88edbed: * software distributed under the License is distributed on an
1:88edbed: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:88edbed: * KIND, either express or implied.  See the License for the
1:88edbed: * specific language governing permissions and limitations
1:88edbed: * under the License.
1:88edbed: */
1:0c0c6e5: package org.apache.cassandra.utils;
7:0c0c6e5: 
1:e7a385a: import java.nio.ByteBuffer;
1:97fc5cb: 
1:18d8f26: import org.apache.cassandra.db.BufferDecoratedKey;
1:18d8f26: import org.apache.cassandra.db.CachedHashDecoratedKey;
1:18d8f26: import org.apache.cassandra.dht.Murmur3Partitioner.LongToken;
1:18d8f26: import org.apache.cassandra.utils.IFilter.FilterKey;
1:18d8f26: 
1:6cb811b: public class FilterTestHelper
5:0c0c6e5: {
1:0c0c6e5:     // used by filter subclass tests
1:0c0c6e5: 
1:0c0c6e5:     static final double MAX_FAILURE_RATE = 0.1;
1:5e4c5ce:     public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(15, MAX_FAILURE_RATE);
1:0c0c6e5:     static final int ELEMENTS = 10000;
1:0c0c6e5: 
1:18d8f26:     static final FilterKey bytes(String s)
1:18d8f26:     {
1:18d8f26:         return new BufferDecoratedKey(new LongToken(0L), ByteBufferUtil.bytes(s));
1:18d8f26:     }
1:18d8f26:     
1:18d8f26:     static final FilterKey wrap(ByteBuffer buf)
1:18d8f26:     {
1:18d8f26:         return new BufferDecoratedKey(new LongToken(0L), buf);
1:18d8f26:     }
1:18d8f26: 
1:18d8f26:     static final FilterKey wrapCached(ByteBuffer buf)
1:18d8f26:     {
1:18d8f26:         return new CachedHashDecoratedKey(new LongToken(0L), buf);
1:18d8f26:     }
1:18d8f26: 
1:e7a385a:     static final ResetableIterator<ByteBuffer> intKeys()
1:0c0c6e5:     {
1:0c0c6e5:         return new KeyGenerator.IntGenerator(ELEMENTS);
5:0c0c6e5:     }
1:0c0c6e5: 
1:e7a385a:     static final ResetableIterator<ByteBuffer> randomKeys()
1:0c0c6e5:     {
1:0c0c6e5:         return new KeyGenerator.RandomStringGenerator(314159, ELEMENTS);
1:0c0c6e5:     }
1:0c0c6e5: 
1:e7a385a:     static final ResetableIterator<ByteBuffer> randomKeys2()
1:0c0c6e5:     {
1:0c0c6e5:         return new KeyGenerator.RandomStringGenerator(271828, ELEMENTS);
1:0c0c6e5:     }
1:0c0c6e5: 
1:a15500e:     public static double testFalsePositives(IFilter f, ResetableIterator<ByteBuffer> keys, ResetableIterator<ByteBuffer> otherkeys)
1:0c0c6e5:     {
1:0c0c6e5:         assert keys.size() == otherkeys.size();
1:0c0c6e5: 
2:0c0c6e5:         while (keys.hasNext())
1:0c0c6e5:         {
1:18d8f26:             f.add(wrap(keys.next()));
1:0c0c6e5:         }
1:0c0c6e5: 
1:0c0c6e5:         int fp = 0;
1:0c0c6e5:         while (otherkeys.hasNext())
1:0c0c6e5:         {
1:18d8f26:             if (f.isPresent(wrap(otherkeys.next())))
1:0c0c6e5:             {
1:0c0c6e5:                 fp++;
1:0c0c6e5:             }
1:0c0c6e5:         }
1:0c0c6e5: 
1:0c0c6e5:         double fp_ratio = fp / (keys.size() * BloomCalculations.probs[spec.bucketsPerElement][spec.K]);
1:0c0c6e5:         assert fp_ratio < 1.03 : fp_ratio;
1:d765b24:         return fp_ratio;
1:0c0c6e5:     }
1:0c0c6e5: 
1:6cb811b:     public void testTrue()
1:0c0c6e5:     {
1:6cb811b:       assert true;
1:0c0c6e5:     }
1:0c0c6e5: 
1:0c0c6e5: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.BufferDecoratedKey;
1: import org.apache.cassandra.db.CachedHashDecoratedKey;
1: import org.apache.cassandra.dht.Murmur3Partitioner.LongToken;
1: import org.apache.cassandra.utils.IFilter.FilterKey;
1: 
/////////////////////////////////////////////////////////////////////////
1:     static final FilterKey bytes(String s)
1:     {
1:         return new BufferDecoratedKey(new LongToken(0L), ByteBufferUtil.bytes(s));
1:     }
1:     
1:     static final FilterKey wrap(ByteBuffer buf)
1:     {
1:         return new BufferDecoratedKey(new LongToken(0L), buf);
1:     }
1: 
1:     static final FilterKey wrapCached(ByteBuffer buf)
1:     {
1:         return new CachedHashDecoratedKey(new LongToken(0L), buf);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             f.add(wrap(keys.next()));
1:             if (f.isPresent(wrap(otherkeys.next())))
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a15500e
/////////////////////////////////////////////////////////////////////////
1:     public static double testFalsePositives(IFilter f, ResetableIterator<ByteBuffer> keys, ResetableIterator<ByteBuffer> otherkeys)
commit:6cb811b
/////////////////////////////////////////////////////////////////////////
1: public class FilterTestHelper
/////////////////////////////////////////////////////////////////////////
1:     public void testTrue()
1:       assert true;
commit:8358669
/////////////////////////////////////////////////////////////////////////
0:         f.add(ByteBufferUtil.bytes("a"));
0:         assert f2.isPresent(ByteBufferUtil.bytes("a"));
0:         assert !f2.isPresent(ByteBufferUtil.bytes("b"));
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: import org.junit.Test;
0:     public void testManyHashes(Iterator<ByteBuffer> keys)
/////////////////////////////////////////////////////////////////////////
1:     static final ResetableIterator<ByteBuffer> intKeys()
1:     static final ResetableIterator<ByteBuffer> randomKeys()
1:     static final ResetableIterator<ByteBuffer> randomKeys2()
0:     public static void testFalsePositives(Filter f, ResetableIterator<ByteBuffer> keys, ResetableIterator<ByteBuffer> otherkeys)
/////////////////////////////////////////////////////////////////////////
0:         f.add(ByteBuffer.wrap("a".getBytes()));
0:         assert f2.isPresent(ByteBuffer.wrap("a".getBytes()));
0:         assert !f2.isPresent(ByteBuffer.wrap("b".getBytes()));
commit:5e4c5ce
/////////////////////////////////////////////////////////////////////////
1:     public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(15, MAX_FAILURE_RATE);
commit:dc6e4fe
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputBuffer;
commit:1cb0794
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ByteArrayInputStream in = new ByteArrayInputStream(out.getData(), 0, out.getLength());
0:         Filter f2 = f.getSerializer().deserialize(new DataInputStream(in));
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
commit:97fc5cb
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.HashSet;
0: import org.junit.Test;
1: 
commit:afd3c27
commit:0c0c6e5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
0: import java.util.Iterator;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.io.IOException;
1: 
0: import org.testng.annotations.Test;
0: import org.apache.cassandra.io.DataInputBuffer;
0: import org.apache.cassandra.io.DataOutputBuffer;
1: 
0: public class FilterTest
1: {
0:     public void testManyHashes(Iterator<String> keys)
1:     {
0:         int MAX_HASH_COUNT = 128;
0:         Set<Integer> hashes = new HashSet<Integer>();
0:         int collisions = 0;
1:         while (keys.hasNext())
1:         {
0:             hashes.clear();
0:             for (int hashIndex : Filter.getHashBuckets(keys.next(), MAX_HASH_COUNT, 1024 * 1024))
1:             {
0:                 hashes.add(hashIndex);
1:             }
0:             collisions += (MAX_HASH_COUNT - hashes.size());
1:         }
0:         assert collisions <= 100;
1:     }
1: 
0:     @Test
0:     public void testManyRandom()
1:     {
0:         testManyHashes(randomKeys());
1:     }
1: 
1:     // used by filter subclass tests
1: 
1:     static final double MAX_FAILURE_RATE = 0.1;
0:     public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBucketsAndK(MAX_FAILURE_RATE);
1:     static final int ELEMENTS = 10000;
1: 
0:     static final ResetableIterator<String> intKeys()
1:     {
1:         return new KeyGenerator.IntGenerator(ELEMENTS);
1:     }
1: 
0:     static final ResetableIterator<String> randomKeys()
1:     {
1:         return new KeyGenerator.RandomStringGenerator(314159, ELEMENTS);
1:     }
1: 
0:     static final ResetableIterator<String> randomKeys2()
1:     {
1:         return new KeyGenerator.RandomStringGenerator(271828, ELEMENTS);
1:     }
1: 
0:     public static void testFalsePositives(Filter f, ResetableIterator<String> keys, ResetableIterator<String> otherkeys)
1:     {
1:         assert keys.size() == otherkeys.size();
1: 
1:         while (keys.hasNext())
1:         {
0:             f.add(keys.next());
1:         }
1: 
1:         int fp = 0;
1:         while (otherkeys.hasNext())
1:         {
0:             if (f.isPresent(otherkeys.next()))
1:             {
1:                 fp++;
1:             }
1:         }
1: 
1:         double fp_ratio = fp / (keys.size() * BloomCalculations.probs[spec.bucketsPerElement][spec.K]);
1:         assert fp_ratio < 1.03 : fp_ratio;
1:     }
1: 
0:     public static Filter testSerialize(Filter f) throws IOException
1:     {
0:         f.add("a");
0:         DataOutputBuffer out = new DataOutputBuffer();
0:         f.getSerializer().serialize(f, out);
1: 
0:         DataInputBuffer in = new DataInputBuffer();
0:         in.reset(out.getData(), out.getLength());
0:         Filter f2 = f.getSerializer().deserialize(in);
1: 
0:         assert f2.isPresent("a");
0:         assert !f2.isPresent("b");
0:         return f2;
1:     }
1: 
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
0:     public static double testFalsePositives(Filter f, ResetableIterator<ByteBuffer> keys, ResetableIterator<ByteBuffer> otherkeys)
/////////////////////////////////////////////////////////////////////////
1:         return fp_ratio;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:790cca1
/////////////////////////////////////////////////////////////////////////
0:     public void testManyHashes(Iterator<byte[]> keys)
/////////////////////////////////////////////////////////////////////////
0:     static final ResetableIterator<byte[]> intKeys()
0:     static final ResetableIterator<byte[]> randomKeys()
0:     static final ResetableIterator<byte[]> randomKeys2()
0:     public static void testFalsePositives(Filter f, ResetableIterator<byte[]> keys, ResetableIterator<byte[]> otherkeys)
/////////////////////////////////////////////////////////////////////////
0:         f.add("a".getBytes());
0:         assert f2.isPresent("a".getBytes());
0:         assert !f2.isPresent("b".getBytes());
============================================================================