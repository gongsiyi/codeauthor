1:3615da5: /*
1:3615da5:  * Licensed to the Apache Software Foundation (ASF) under one
1:3615da5:  * or more contributor license agreements.  See the NOTICE file
1:3615da5:  * distributed with this work for additional information
1:3615da5:  * regarding copyright ownership.  The ASF licenses this file
1:3615da5:  * to you under the Apache License, Version 2.0 (the
1:3615da5:  * "License"); you may not use this file except in compliance
1:3615da5:  * with the License.  You may obtain a copy of the License at
1:3615da5:  *
1:3615da5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3615da5:  *
1:3615da5:  * Unless required by applicable law or agreed to in writing, software
1:3615da5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3615da5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3615da5:  * See the License for the specific language governing permissions and
1:3615da5:  * limitations under the License.
1:3615da5:  */
1:3615da5: package org.apache.cassandra.db.partition;
2:3615da5: 
1:2683806: import org.apache.cassandra.UpdateBuilder;
1:3615da5: import org.apache.cassandra.config.CFMetaData;
1:3615da5: import org.apache.cassandra.cql3.CQLTester;
1:3615da5: import org.apache.cassandra.db.RowUpdateBuilder;
1:3615da5: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:3615da5: import org.apache.cassandra.utils.FBUtilities;
1:3615da5: import org.junit.Test;
1:3615da5: 
1:3615da5: import junit.framework.Assert;
1:3615da5: 
1:3615da5: public class PartitionUpdateTest extends CQLTester
1:3615da5: {
1:3615da5:     @Test
1:3615da5:     public void testOperationCount()
1:3615da5:     {
1:3615da5:         createTable("CREATE TABLE %s (key text, clustering int, a int, s int static, PRIMARY KEY(key, clustering))");
1:3615da5:         CFMetaData cfm = currentTableMetadata();
1:3615da5: 
1:2683806:         UpdateBuilder builder = UpdateBuilder.create(cfm, "key0");
1:2683806:         Assert.assertEquals(0, builder.build().operationCount());
1:2683806:         Assert.assertEquals(1, builder.newRow(1).add("a", 1).build().operationCount());
1:3615da5: 
1:2683806:         builder = UpdateBuilder.create(cfm, "key0");
1:2683806:         Assert.assertEquals(1, builder.newRow().add("s", 1).build().operationCount());
1:3615da5: 
1:2683806:         builder = UpdateBuilder.create(cfm, "key0");
1:2683806:         builder.newRow().add("s", 1);
1:2683806:         builder.newRow(1).add("a", 1);
1:2683806:         Assert.assertEquals(2, builder.build().operationCount());
1:3615da5:     }
1:3615da5: 
1:3615da5:     @Test
1:3615da5:     public void testOperationCountWithCompactTable()
1:3615da5:     {
1:3615da5:         createTable("CREATE TABLE %s (key text PRIMARY KEY, a int) WITH COMPACT STORAGE");
1:3615da5:         CFMetaData cfm = currentTableMetadata();
1:3615da5: 
1:3615da5:         PartitionUpdate update = new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), "key0").add("a", 1)
2:3615da5:                                                                                                  .buildUpdate();
3:3615da5:         Assert.assertEquals(1, update.operationCount());
1:3615da5: 
1:3615da5:         update = new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), "key0").buildUpdate();
2:3615da5:         Assert.assertEquals(0, update.operationCount());
1:3615da5:     }
1:3615da5: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.UpdateBuilder;
/////////////////////////////////////////////////////////////////////////
1:         UpdateBuilder builder = UpdateBuilder.create(cfm, "key0");
1:         Assert.assertEquals(0, builder.build().operationCount());
1:         Assert.assertEquals(1, builder.newRow(1).add("a", 1).build().operationCount());
1:         builder = UpdateBuilder.create(cfm, "key0");
1:         Assert.assertEquals(1, builder.newRow().add("s", 1).build().operationCount());
1:         builder = UpdateBuilder.create(cfm, "key0");
1:         builder.newRow().add("s", 1);
1:         builder.newRow(1).add("a", 1);
1:         Assert.assertEquals(2, builder.build().operationCount());
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:3615da5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partition;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: 
1: public class PartitionUpdateTest extends CQLTester
1: {
1:     @Test
1:     public void testOperationCount()
1:     {
1:         createTable("CREATE TABLE %s (key text, clustering int, a int, s int static, PRIMARY KEY(key, clustering))");
1:         CFMetaData cfm = currentTableMetadata();
1: 
0:         long timestamp = FBUtilities.timestampMicros();
0:         PartitionUpdate update = new RowUpdateBuilder(cfm, timestamp, "key0").clustering(1).add("a", 1).buildUpdate();
1:         Assert.assertEquals(1, update.operationCount());
1: 
0:         update = new RowUpdateBuilder(cfm, timestamp, "key0").buildUpdate();
1:         Assert.assertEquals(0, update.operationCount());
1: 
0:         update = new RowUpdateBuilder(cfm, timestamp, "key0").add("s", 1).buildUpdate();
1:         Assert.assertEquals(1, update.operationCount());
1: 
0:         update = new RowUpdateBuilder(cfm, timestamp, "key0").add("s", 1).buildUpdate();
0:         update = new RowUpdateBuilder(update, timestamp, cfm.params.defaultTimeToLive).clustering(1)
0:                                                                                       .add("a", 1)
1:                                                                                       .buildUpdate();
0:         Assert.assertEquals(2, update.operationCount());
1:     }
1: 
1:     @Test
1:     public void testOperationCountWithCompactTable()
1:     {
1:         createTable("CREATE TABLE %s (key text PRIMARY KEY, a int) WITH COMPACT STORAGE");
1:         CFMetaData cfm = currentTableMetadata();
1: 
1:         PartitionUpdate update = new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), "key0").add("a", 1)
1:                                                                                                  .buildUpdate();
1:         Assert.assertEquals(1, update.operationCount());
1: 
1:         update = new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), "key0").buildUpdate();
1:         Assert.assertEquals(0, update.operationCount());
1:     }
1: }
============================================================================