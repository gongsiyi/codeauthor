1:810c2d5: /*
1:810c2d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:810c2d5:  * or more contributor license agreements.  See the NOTICE file
1:810c2d5:  * distributed with this work for additional information
1:810c2d5:  * regarding copyright ownership.  The ASF licenses this file
1:810c2d5:  * to you under the Apache License, Version 2.0 (the
1:810c2d5:  * "License"); you may not use this file except in compliance
1:810c2d5:  * with the License.  You may obtain a copy of the License at
1:810c2d5:  *
1:810c2d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:810c2d5:  *
1:810c2d5:  * Unless required by applicable law or agreed to in writing, software
1:810c2d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810c2d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810c2d5:  * See the License for the specific language governing permissions and
1:810c2d5:  * limitations under the License.
1:810c2d5:  */
1:810c2d5: package org.apache.cassandra.repair;
1:810c2d5: 
1:810c2d5: import java.net.InetAddress;
1:810c2d5: 
1:810c2d5: import com.google.common.util.concurrent.AbstractFuture;
1:810c2d5: 
1:810c2d5: import org.apache.cassandra.exceptions.RepairException;
1:810c2d5: import org.apache.cassandra.net.MessagingService;
1:810c2d5: import org.apache.cassandra.repair.messages.ValidationRequest;
1:0dd50a6: import org.apache.cassandra.utils.MerkleTrees;
1:810c2d5: 
1:810c2d5: /**
1:810c2d5:  * ValidationTask sends {@link ValidationRequest} to a replica.
1:810c2d5:  * When a replica sends back message, task completes.
1:810c2d5:  */
1:810c2d5: public class ValidationTask extends AbstractFuture<TreeResponse> implements Runnable
1:810c2d5: {
1:810c2d5:     private final RepairJobDesc desc;
1:810c2d5:     private final InetAddress endpoint;
1:810c2d5:     private final int gcBefore;
1:810c2d5: 
1:810c2d5:     public ValidationTask(RepairJobDesc desc, InetAddress endpoint, int gcBefore)
1:810c2d5:     {
1:810c2d5:         this.desc = desc;
1:810c2d5:         this.endpoint = endpoint;
1:810c2d5:         this.gcBefore = gcBefore;
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     /**
1:810c2d5:      * Send ValidationRequest to replica
1:810c2d5:      */
1:810c2d5:     public void run()
1:810c2d5:     {
1:810c2d5:         ValidationRequest request = new ValidationRequest(desc, gcBefore);
1:810c2d5:         MessagingService.instance().sendOneWay(request.createMessage(), endpoint);
1:810c2d5:     }
1:810c2d5: 
1:810c2d5:     /**
1:0dd50a6:      * Receive MerkleTrees from replica node.
1:810c2d5:      *
1:0dd50a6:      * @param trees MerkleTrees that is sent from replica. Null if validation failed on replica node.
1:810c2d5:      */
1:0dd50a6:     public void treesReceived(MerkleTrees trees)
1:810c2d5:     {
1:0dd50a6:         if (trees == null)
1:810c2d5:         {
1:810c2d5:             setException(new RepairException(desc, "Validation failed in " + endpoint));
1:810c2d5:         }
1:810c2d5:         else
1:810c2d5:         {
1:0dd50a6:             set(new TreeResponse(endpoint, trees));
1:810c2d5:         }
1:810c2d5:     }
1:810c2d5: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Marcus Olsson
-------------------------------------------------------------------------------
commit:0dd50a6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import org.apache.cassandra.dht.Range;
0: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.utils.MerkleTrees;
/////////////////////////////////////////////////////////////////////////
1:      * Receive MerkleTrees from replica node.
1:      * @param trees MerkleTrees that is sent from replica. Null if validation failed on replica node.
1:     public void treesReceived(MerkleTrees trees)
1:         if (trees == null)
1:             set(new TreeResponse(endpoint, trees));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
1: import java.net.InetAddress;
1: 
1: import com.google.common.util.concurrent.AbstractFuture;
1: 
1: import org.apache.cassandra.exceptions.RepairException;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.repair.messages.ValidationRequest;
0: import org.apache.cassandra.utils.MerkleTree;
1: 
1: /**
1:  * ValidationTask sends {@link ValidationRequest} to a replica.
1:  * When a replica sends back message, task completes.
1:  */
1: public class ValidationTask extends AbstractFuture<TreeResponse> implements Runnable
1: {
1:     private final RepairJobDesc desc;
1:     private final InetAddress endpoint;
1:     private final int gcBefore;
1: 
1:     public ValidationTask(RepairJobDesc desc, InetAddress endpoint, int gcBefore)
1:     {
1:         this.desc = desc;
1:         this.endpoint = endpoint;
1:         this.gcBefore = gcBefore;
1:     }
1: 
1:     /**
1:      * Send ValidationRequest to replica
1:      */
1:     public void run()
1:     {
1:         ValidationRequest request = new ValidationRequest(desc, gcBefore);
1:         MessagingService.instance().sendOneWay(request.createMessage(), endpoint);
1:     }
1: 
1:     /**
0:      * Receive MerkleTree from replica node.
1:      *
0:      * @param tree MerkleTree that is sent from replica. Null if validation failed on replica node.
1:      */
0:     public void treeReceived(MerkleTree tree)
1:     {
0:         if (tree == null)
1:         {
1:             setException(new RepairException(desc, "Validation failed in " + endpoint));
1:         }
1:         else
1:         {
0:             set(new TreeResponse(endpoint, tree));
1:         }
1:     }
1: }
============================================================================