1:e48ff29: /*
1:e48ff29:  * Licensed to the Apache Software Foundation (ASF) under one
1:e48ff29:  * or more contributor license agreements.  See the NOTICE file
1:e48ff29:  * distributed with this work for additional information
1:e48ff29:  * regarding copyright ownership.  The ASF licenses this file
1:e48ff29:  * to you under the Apache License, Version 2.0 (the
1:e48ff29:  * "License"); you may not use this file except in compliance
1:e48ff29:  * with the License.  You may obtain a copy of the License at
1:e48ff29:  *
1:e48ff29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e48ff29:  *
1:e48ff29:  * Unless required by applicable law or agreed to in writing, software
1:e48ff29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e48ff29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e48ff29:  * See the License for the specific language governing permissions and
1:e48ff29:  * limitations under the License.
1:e48ff29:  */
1:e48ff29: package org.apache.cassandra.service.pager;
2:e48ff29: 
1:a991b64: import org.apache.cassandra.db.ConsistencyLevel;
1:557bbbc: import org.apache.cassandra.db.ReadExecutionController;
1:4205011: import org.apache.cassandra.db.filter.DataLimits;
1:6094974: import org.apache.cassandra.db.EmptyIterators;
1:a991b64: import org.apache.cassandra.db.partitions.PartitionIterator;
1:e48ff29: import org.apache.cassandra.exceptions.RequestExecutionException;
1:e48ff29: import org.apache.cassandra.exceptions.RequestValidationException;
1:a991b64: import org.apache.cassandra.service.ClientState;
1:e48ff29: 
1:e48ff29: /**
1:e48ff29:  * Perform a query, paging it by page of a given size.
1:e48ff29:  *
1:e48ff29:  * This is essentially an iterator of pages. Each call to fetchPage() will
1:e48ff29:  * return the next page (i.e. the next list of rows) and isExhausted()
1:e48ff29:  * indicates whether there is more page to fetch. The pageSize will
1:e48ff29:  * either be in term of cells or in term of CQL3 row, depending on the
1:e48ff29:  * parameters of the command we page.
1:e48ff29:  *
1:e48ff29:  * Please note that the pager might page within rows, so there is no guarantee
1:e48ff29:  * that successive pages won't return the same row (though with different
1:e48ff29:  * columns every time).
1:e48ff29:  *
1:e48ff29:  * Also, there is no guarantee that fetchPage() won't return an empty list,
1:e48ff29:  * even if isExhausted() return false (but it is guaranteed to return an empty
1:e48ff29:  * list *if* isExhausted() return true). Indeed, isExhausted() does *not*
1:54bf92f:  * trigger a query so in some (fairly rare) case we might not know the paging
1:e48ff29:  * is done even though it is.
1:e48ff29:  */
1:e48ff29: public interface QueryPager
1:e48ff29: {
1:557bbbc:     QueryPager EMPTY = new QueryPager()
1:a991b64:     {
1:557bbbc:         public ReadExecutionController executionController()
1:a991b64:         {
1:557bbbc:             return ReadExecutionController.empty();
1:a991b64:         }
1:a991b64: 
1:aa83c94:         public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
1:a991b64:         {
1:6094974:             return EmptyIterators.partition();
1:a991b64:         }
1:a991b64: 
1:557bbbc:         public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException
1:a991b64:         {
1:6094974:             return EmptyIterators.partition();
1:a991b64:         }
1:a991b64: 
1:a991b64:         public boolean isExhausted()
1:a991b64:         {
1:a991b64:             return true;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public int maxRemaining()
1:a991b64:         {
1:a991b64:             return 0;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public PagingState state()
1:a991b64:         {
1:a991b64:             return null;
1:a991b64:         }
1:4205011: 
1:4205011:         public QueryPager withUpdatedLimit(DataLimits newLimits)
1:4205011:         {
1:4205011:             throw new UnsupportedOperationException();
1:4205011:         }
1:a991b64:     };
1:a991b64: 
1:e48ff29:     /**
1:e48ff29:      * Fetches the next page.
1:e48ff29:      *
1:e48ff29:      * @param pageSize the maximum number of elements to return in the next page.
1:a991b64:      * @param consistency the consistency level to achieve for the query.
1:a991b64:      * @param clientState the {@code ClientState} for the query. In practice, this can be null unless
1:a991b64:      * {@code consistency} is a serial consistency.
1:e48ff29:      * @return the page of result.
1:e48ff29:      */
1:aa83c94:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException;
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Starts a new read operation.
1:a991b64:      * <p>
1:a991b64:      * This must be called before {@link fetchPageInternal} and passed to it to protect the read.
1:a991b64:      * The returned object <b>must</b> be closed on all path and it is thus strongly advised to
1:a991b64:      * use it in a try-with-ressource construction.
1:a991b64:      *
1:a991b64:      * @return a newly started order group for this {@code QueryPager}.
1:a991b64:      */
1:557bbbc:     public ReadExecutionController executionController();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Fetches the next page internally (in other, this does a local query).
1:a991b64:      *
1:a991b64:      * @param pageSize the maximum number of elements to return in the next page.
1:557bbbc:      * @param executionController the {@code ReadExecutionController} protecting the read.
1:a991b64:      * @return the page of result.
1:a991b64:      */
1:557bbbc:     public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException;
1:e48ff29: 
1:e48ff29:     /**
1:e48ff29:      * Whether or not this pager is exhausted, i.e. whether or not a call to
1:e48ff29:      * fetchPage may return more result.
1:e48ff29:      *
1:e48ff29:      * @return whether the pager is exhausted.
1:e48ff29:      */
1:e48ff29:     public boolean isExhausted();
1:e48ff29: 
1:e48ff29:     /**
1:e48ff29:      * The maximum number of cells/CQL3 row that we may still have to return.
1:e48ff29:      * In other words, that's the initial user limit minus what we've already
1:e48ff29:      * returned (note that it's not how many we *will* return, just the upper
1:e48ff29:      * limit on it).
1:e48ff29:      */
1:e48ff29:     public int maxRemaining();
1:e48ff29: 
1:e48ff29:     /**
1:b068a9c:      * Get the current state of the pager. The state can allow to restart the
1:b068a9c:      * paging on another host from where we are at this point.
1:b068a9c:      *
1:b068a9c:      * @return the current paging state. Will return null if paging is at the
1:b068a9c:      * beginning. If the pager is exhausted, the result is undefined.
1:e48ff29:      */
1:b068a9c:     public PagingState state();
1:4205011: 
1:4205011:     /**
1:4205011:      * Creates a new <code>QueryPager</code> that use the new limits.
1:4205011:      *
1:4205011:      * @param newLimits the new limits
1:4205011:      * @return a new <code>QueryPager</code> that use the new limits
1:4205011:      */
1:4205011:     public QueryPager withUpdatedLimit(DataLimits newLimits);
1:e48ff29: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:         public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
/////////////////////////////////////////////////////////////////////////
1:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime) throws RequestValidationException, RequestExecutionException;
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.filter.DataLimits;
/////////////////////////////////////////////////////////////////////////
1: 
1:         public QueryPager withUpdatedLimit(DataLimits newLimits)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Creates a new <code>QueryPager</code> that use the new limits.
1:      *
1:      * @param newLimits the new limits
1:      * @return a new <code>QueryPager</code> that use the new limits
1:      */
1:     public QueryPager withUpdatedLimit(DataLimits newLimits);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:928e4c2
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.EmptyIterators;
/////////////////////////////////////////////////////////////////////////
1:             return EmptyIterators.partition();
1:             return EmptyIterators.partition();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ReadExecutionController;
/////////////////////////////////////////////////////////////////////////
1:     QueryPager EMPTY = new QueryPager()
1:         public ReadExecutionController executionController()
1:             return ReadExecutionController.empty();
/////////////////////////////////////////////////////////////////////////
1:         public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException
/////////////////////////////////////////////////////////////////////////
1:     public ReadExecutionController executionController();
1:      * @param executionController the {@code ReadExecutionController} protecting the read.
1:     public PartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController) throws RequestValidationException, RequestExecutionException;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.db.ReadOrderGroup;
1: import org.apache.cassandra.db.partitions.PartitionIterator;
0: import org.apache.cassandra.db.partitions.PartitionIterators;
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
0:     public static final QueryPager EMPTY = new QueryPager()
1:     {
0:         public ReadOrderGroup startOrderGroup()
1:         {
0:             return ReadOrderGroup.emptyGroup();
1:         }
1: 
0:         public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState) throws RequestValidationException, RequestExecutionException
1:         {
0:             return PartitionIterators.EMPTY;
1:         }
1: 
0:         public PartitionIterator fetchPageInternal(int pageSize, ReadOrderGroup orderGroup) throws RequestValidationException, RequestExecutionException
1:         {
0:             return PartitionIterators.EMPTY;
1:         }
1: 
1:         public boolean isExhausted()
1:         {
1:             return true;
1:         }
1: 
1:         public int maxRemaining()
1:         {
1:             return 0;
1:         }
1: 
1:         public PagingState state()
1:         {
1:             return null;
1:         }
1:     };
1: 
1:      * @param consistency the consistency level to achieve for the query.
1:      * @param clientState the {@code ClientState} for the query. In practice, this can be null unless
1:      * {@code consistency} is a serial consistency.
0:     public PartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState) throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Starts a new read operation.
1:      * <p>
1:      * This must be called before {@link fetchPageInternal} and passed to it to protect the read.
1:      * The returned object <b>must</b> be closed on all path and it is thus strongly advised to
1:      * use it in a try-with-ressource construction.
1:      *
1:      * @return a newly started order group for this {@code QueryPager}.
1:      */
0:     public ReadOrderGroup startOrderGroup();
1: 
1:     /**
1:      * Fetches the next page internally (in other, this does a local query).
1:      *
1:      * @param pageSize the maximum number of elements to return in the next page.
0:      * @param orderGroup the {@code ReadOrderGroup} protecting the read.
1:      * @return the page of result.
1:      */
0:     public PartitionIterator fetchPageInternal(int pageSize, ReadOrderGroup orderGroup) throws RequestValidationException, RequestExecutionException;
commit:54bf92f
/////////////////////////////////////////////////////////////////////////
1:  * trigger a query so in some (fairly rare) case we might not know the paging
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
1:      * Get the current state of the pager. The state can allow to restart the
1:      * paging on another host from where we are at this point.
1:      *
1:      * @return the current paging state. Will return null if paging is at the
1:      * beginning. If the pager is exhausted, the result is undefined.
1:     public PagingState state();
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service.pager;
1: 
0: import java.util.List;
1: 
0: import org.apache.cassandra.db.Row;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: 
1: /**
1:  * Perform a query, paging it by page of a given size.
1:  *
1:  * This is essentially an iterator of pages. Each call to fetchPage() will
1:  * return the next page (i.e. the next list of rows) and isExhausted()
1:  * indicates whether there is more page to fetch. The pageSize will
1:  * either be in term of cells or in term of CQL3 row, depending on the
1:  * parameters of the command we page.
1:  *
1:  * Please note that the pager might page within rows, so there is no guarantee
1:  * that successive pages won't return the same row (though with different
1:  * columns every time).
1:  *
1:  * Also, there is no guarantee that fetchPage() won't return an empty list,
1:  * even if isExhausted() return false (but it is guaranteed to return an empty
1:  * list *if* isExhausted() return true). Indeed, isExhausted() does *not*
0:  * trigger a query so in some (failry rare) case we might not know the paging
1:  * is done even though it is.
1:  */
1: public interface QueryPager
1: {
1:     /**
1:      * Fetches the next page.
1:      *
1:      * @param pageSize the maximum number of elements to return in the next page.
1:      * @return the page of result.
1:      */
0:     public List<Row> fetchPage(int pageSize) throws RequestValidationException, RequestExecutionException;
1: 
1:     /**
1:      * Whether or not this pager is exhausted, i.e. whether or not a call to
1:      * fetchPage may return more result.
1:      *
1:      * @return whether the pager is exhausted.
1:      */
1:     public boolean isExhausted();
1: 
1:     /**
1:      * The maximum number of cells/CQL3 row that we may still have to return.
1:      * In other words, that's the initial user limit minus what we've already
1:      * returned (note that it's not how many we *will* return, just the upper
1:      * limit on it).
1:      */
1:     public int maxRemaining();
1: 
1:     /**
0:      * The timestamp used by the last page.
1:      */
0:     public long timestamp();
1: }
============================================================================