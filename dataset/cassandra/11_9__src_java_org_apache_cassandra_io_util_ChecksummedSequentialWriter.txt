1:48727b4: /*
1:48727b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:48727b4:  * or more contributor license agreements.  See the NOTICE file
1:48727b4:  * distributed with this work for additional information
1:48727b4:  * regarding copyright ownership.  The ASF licenses this file
1:48727b4:  * to you under the Apache License, Version 2.0 (the
1:48727b4:  * "License"); you may not use this file except in compliance
1:48727b4:  * with the License.  You may obtain a copy of the License at
1:48727b4:  *
1:48727b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:48727b4:  *
1:48727b4:  * Unless required by applicable law or agreed to in writing, software
1:48727b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:48727b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48727b4:  * See the License for the specific language governing permissions and
1:48727b4:  * limitations under the License.
1:48727b4:  */
1:2e00ba8: package org.apache.cassandra.io.util;
3:2e00ba8: 
1:2e00ba8: import java.io.File;
1:bc7941c: import java.nio.ByteBuffer;
1:fb22109: import java.util.Optional;
1:3adfd15: 
1:2e00ba8: public class ChecksummedSequentialWriter extends SequentialWriter
1:2e00ba8: {
1:fb22109:     private static final SequentialWriterOption CRC_WRITER_OPTION = SequentialWriterOption.newBuilder()
1:fb22109:                                                                                           .bufferSize(8 * 1024)
1:fb22109:                                                                                           .build();
1:2e00ba8: 
1:fb22109:     private final SequentialWriter crcWriter;
1:fb22109:     private final ChecksumWriter crcMetadata;
1:fb22109:     private final Optional<File> digestFile;
1:fb22109: 
1:fb22109:     public ChecksummedSequentialWriter(File file, File crcPath, File digestFile, SequentialWriterOption option)
1:2e00ba8:     {
1:fb22109:         super(file, option);
1:fb22109:         crcWriter = new SequentialWriter(crcPath, CRC_WRITER_OPTION);
1:fb22109:         crcMetadata = new ChecksumWriter(crcWriter);
1:bc7941c:         crcMetadata.writeChunkSize(buffer.capacity());
1:fb22109:         this.digestFile = Optional.ofNullable(digestFile);
1:2e00ba8:     }
1:2e00ba8: 
1:29687a8:     @Override
1:2e00ba8:     protected void flushData()
1:2e00ba8:     {
1:2e00ba8:         super.flushData();
1:bc7941c:         ByteBuffer toAppend = buffer.duplicate();
1:bc7941c:         toAppend.position(0);
1:bc7941c:         toAppend.limit(buffer.position());
1:2d7909d:         crcMetadata.appendDirect(toAppend, false);
1:2e00ba8:     }
1:2e00ba8: 
1:8704006:     protected class TransactionalProxy extends SequentialWriter.TransactionalProxy
1:2e00ba8:     {
1:8704006:         @Override
1:8704006:         protected Throwable doCommit(Throwable accumulate)
1:8704006:         {
1:c163d0b:             return super.doCommit(crcWriter.commit(accumulate));
1:8704006:         }
1:8704006: 
1:8704006:         @Override
1:8704006:         protected Throwable doAbort(Throwable accumulate)
1:8704006:         {
1:8704006:             return super.doAbort(crcWriter.abort(accumulate));
1:8704006:         }
1:8704006: 
1:8704006:         @Override
1:8704006:         protected void doPrepare()
1:8704006:         {
1:8704006:             syncInternal();
1:fb22109:             digestFile.ifPresent(crcMetadata::writeFullChecksum);
1:fb22109:             crcWriter.prepareToCommit();
1:8704006:         }
1:2e00ba8:     }
1:2e00ba8: 
1:8704006:     @Override
1:8704006:     protected SequentialWriter.TransactionalProxy txnProxy()
1:2e00ba8:     {
1:8704006:         return new TransactionalProxy();
1:2e00ba8:     }
1:2e00ba8: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1: import java.util.Optional;
1:     private static final SequentialWriterOption CRC_WRITER_OPTION = SequentialWriterOption.newBuilder()
1:                                                                                           .bufferSize(8 * 1024)
1:                                                                                           .build();
1:     private final SequentialWriter crcWriter;
1:     private final ChecksumWriter crcMetadata;
1:     private final Optional<File> digestFile;
1: 
1:     public ChecksummedSequentialWriter(File file, File crcPath, File digestFile, SequentialWriterOption option)
1:         super(file, option);
1:         crcWriter = new SequentialWriter(crcPath, CRC_WRITER_OPTION);
1:         crcMetadata = new ChecksumWriter(crcWriter);
1:         this.digestFile = Optional.ofNullable(digestFile);
/////////////////////////////////////////////////////////////////////////
1:             digestFile.ifPresent(crcMetadata::writeFullChecksum);
1:             crcWriter.prepareToCommit();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c163d0b
/////////////////////////////////////////////////////////////////////////
1:             return super.doCommit(crcWriter.commit(accumulate));
/////////////////////////////////////////////////////////////////////////
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:29687a8
/////////////////////////////////////////////////////////////////////////
0:         crcMetadata = new DataIntegrityMetadata.ChecksumWriter(crcWriter);
1:     @Override
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.compress.BufferType;
1: 
/////////////////////////////////////////////////////////////////////////
0:         super(file, bufferSize, BufferType.ON_HEAP);
0:         crcWriter = new SequentialWriter(crcPath, 8 * 1024, BufferType.ON_HEAP);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected class TransactionalProxy extends SequentialWriter.TransactionalProxy
1:         @Override
1:         protected Throwable doCommit(Throwable accumulate)
1:         {
0:             return crcWriter.commit(accumulate);
1:         }
1: 
1:         @Override
1:         protected Throwable doAbort(Throwable accumulate)
1:         {
1:             return super.doAbort(crcWriter.abort(accumulate));
1:         }
1: 
1:         @Override
1:         protected void doPrepare()
1:         {
1:             syncInternal();
0:             if (descriptor != null)
0:                 crcMetadata.writeFullChecksum(descriptor);
0:             crcWriter.setDescriptor(descriptor).prepareToCommit();
0:             // we must cleanup our file handles during prepareCommit for Windows compatibility as we cannot rename an open file;
0:             // TODO: once we stop file renaming, remove this for clarity
0:             releaseFileHandle();
1:         }
1:     @Override
1:     protected SequentialWriter.TransactionalProxy txnProxy()
1:         return new TransactionalProxy();
commit:55750e0
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:2d7909d
/////////////////////////////////////////////////////////////////////////
1:         crcMetadata.appendDirect(toAppend, false);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         super(file, bufferSize, false);
0:         crcWriter = new SequentialWriter(crcPath, 8 * 1024, false);
1:         crcMetadata.writeChunkSize(buffer.capacity());
1:         ByteBuffer toAppend = buffer.duplicate();
1:         toAppend.position(0);
1:         toAppend.limit(buffer.position());
0:         crcMetadata.appendDirect(toAppend);
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:0e62131
/////////////////////////////////////////////////////////////////////////
0:         crcMetadata.append(buffer, 0, validBufferBytes, false);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:48727b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:belliottsmith
-------------------------------------------------------------------------------
commit:4e95953
/////////////////////////////////////////////////////////////////////////
0:     public ChecksummedSequentialWriter(File file, int bufferSize, File crcPath)
0:         super(file, bufferSize);
0:         crcWriter = new SequentialWriter(crcPath, 8 * 1024);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:2e00ba8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.File;
1: 
0: import org.apache.cassandra.io.sstable.Descriptor;
1: 
1: public class ChecksummedSequentialWriter extends SequentialWriter
1: {
0:     private final SequentialWriter crcWriter;
0:     private final DataIntegrityMetadata.ChecksumWriter crcMetadata;
1: 
0:     public ChecksummedSequentialWriter(File file, int bufferSize, boolean skipIOCache, File crcPath)
1:     {
0:         super(file, bufferSize, skipIOCache);
0:         crcWriter = new SequentialWriter(crcPath, 8 * 1024, true);
0:         crcMetadata = new DataIntegrityMetadata.ChecksumWriter(crcWriter.stream);
0:         crcMetadata.writeChunkSize(buffer.length);
1:     }
1: 
1:     protected void flushData()
1:     {
1:         super.flushData();
0:         crcMetadata.append(buffer, 0, validBufferBytes);
1:     }
1: 
0:     public void writeFullChecksum(Descriptor descriptor)
1:     {
0:         crcMetadata.writeFullChecksum(descriptor);
1:     }
1: 
0:     public void close()
1:     {
0:         super.close();
0:         crcWriter.close();
1:     }
1: }
============================================================================