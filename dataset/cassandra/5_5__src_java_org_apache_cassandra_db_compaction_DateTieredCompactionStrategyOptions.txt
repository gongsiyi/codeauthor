1:77dae50: /*
1:77dae50:  * Licensed to the Apache Software Foundation (ASF) under one
1:77dae50:  * or more contributor license agreements.  See the NOTICE file
1:77dae50:  * distributed with this work for additional information
1:77dae50:  * regarding copyright ownership.  The ASF licenses this file
1:77dae50:  * to you under the Apache License, Version 2.0 (the
1:77dae50:  * "License"); you may not use this file except in compliance
1:77dae50:  * with the License.  You may obtain a copy of the License at
1:77dae50:  *
1:77dae50:  *     http://www.apache.org/licenses/LICENSE-2.0
1:77dae50:  *
1:77dae50:  * Unless required by applicable law or agreed to in writing, software
1:77dae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:77dae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77dae50:  * See the License for the specific language governing permissions and
1:77dae50:  * limitations under the License.
1:77dae50:  */
1:77dae50: package org.apache.cassandra.db.compaction;
1:77dae50: 
1:77dae50: import java.util.Map;
1:77dae50: import java.util.concurrent.TimeUnit;
1:77dae50: 
1:b8408f0: import org.slf4j.Logger;
1:b8408f0: import org.slf4j.LoggerFactory;
1:b8408f0: 
1:77dae50: import org.apache.cassandra.exceptions.ConfigurationException;
1:77dae50: 
1:77dae50: public final class DateTieredCompactionStrategyOptions
1:77dae50: {
1:be24013:     private static final Logger logger = LoggerFactory.getLogger(DateTieredCompactionStrategyOptions.class);
1:77dae50:     protected static final TimeUnit DEFAULT_TIMESTAMP_RESOLUTION = TimeUnit.MICROSECONDS;
1:99617a5:     @Deprecated
1:99617a5:     protected static final double DEFAULT_MAX_SSTABLE_AGE_DAYS = 365*1000;
1:5784309:     protected static final long DEFAULT_BASE_TIME_SECONDS = 60;
1:99617a5:     protected static final long DEFAULT_MAX_WINDOW_SIZE_SECONDS = TimeUnit.SECONDS.convert(1, TimeUnit.DAYS);
1:99617a5: 
1:17042f1:     protected static final int DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS = 60 * 10;
1:77dae50:     protected static final String TIMESTAMP_RESOLUTION_KEY = "timestamp_resolution";
1:99617a5:     @Deprecated
1:77dae50:     protected static final String MAX_SSTABLE_AGE_KEY = "max_sstable_age_days";
1:77dae50:     protected static final String BASE_TIME_KEY = "base_time_seconds";
1:17042f1:     protected static final String EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY = "expired_sstable_check_frequency_seconds";
1:99617a5:     protected static final String MAX_WINDOW_SIZE_KEY = "max_window_size_seconds";
1:77dae50: 
1:99617a5:     @Deprecated
1:77dae50:     protected final long maxSSTableAge;
1:e16d8a7:     protected final TimeUnit timestampResolution;
1:77dae50:     protected final long baseTime;
1:17042f1:     protected final long expiredSSTableCheckFrequency;
1:99617a5:     protected final long maxWindowSize;
1:77dae50: 
1:77dae50:     public DateTieredCompactionStrategyOptions(Map<String, String> options)
1:77dae50:     {
1:77dae50:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:e16d8a7:         timestampResolution = optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);
1:b8408f0:         if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)
1:b8408f0:             logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?", timestampResolution.toString());
1:77dae50:         optionValue = options.get(MAX_SSTABLE_AGE_KEY);
1:93769b3:         double fractionalDays = optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double.parseDouble(optionValue);
1:93769b3:         maxSSTableAge = Math.round(fractionalDays * timestampResolution.convert(1, TimeUnit.DAYS));
1:77dae50:         optionValue = options.get(BASE_TIME_KEY);
1:77dae50:         baseTime = timestampResolution.convert(optionValue == null ? DEFAULT_BASE_TIME_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:17042f1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:17042f1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:99617a5:         optionValue = options.get(MAX_WINDOW_SIZE_KEY);
1:99617a5:         maxWindowSize = timestampResolution.convert(optionValue == null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:77dae50:     }
1:77dae50: 
1:77dae50:     public DateTieredCompactionStrategyOptions()
1:77dae50:     {
1:99617a5:         maxSSTableAge = Math.round(DEFAULT_MAX_SSTABLE_AGE_DAYS * DEFAULT_TIMESTAMP_RESOLUTION.convert((long) DEFAULT_MAX_SSTABLE_AGE_DAYS, TimeUnit.DAYS));
1:e16d8a7:         timestampResolution = DEFAULT_TIMESTAMP_RESOLUTION;
1:e16d8a7:         baseTime = timestampResolution.convert(DEFAULT_BASE_TIME_SECONDS, TimeUnit.SECONDS);
1:17042f1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS, TimeUnit.SECONDS);
1:e16d8a7:         maxWindowSize = timestampResolution.convert(1, TimeUnit.DAYS);
1:77dae50:     }
1:77dae50: 
1:77dae50:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws  ConfigurationException
1:77dae50:     {
1:77dae50:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:77dae50:         try
1:77dae50:         {
1:77dae50:             if (optionValue != null)
1:77dae50:                 TimeUnit.valueOf(optionValue);
1:77dae50:         }
1:77dae50:         catch (IllegalArgumentException e)
1:77dae50:         {
1:77dae50:             throw new ConfigurationException(String.format("timestamp_resolution %s is not valid", optionValue));
1:77dae50:         }
1:77dae50: 
1:77dae50:         optionValue = options.get(MAX_SSTABLE_AGE_KEY);
1:77dae50:         try
1:77dae50:         {
1:93769b3:             double maxSStableAge = optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double.parseDouble(optionValue);
1:77dae50:             if (maxSStableAge < 0)
1:77dae50:             {
1:93769b3:                 throw new ConfigurationException(String.format("%s must be non-negative: %.2f", MAX_SSTABLE_AGE_KEY, maxSStableAge));
1:77dae50:             }
1:77dae50:         }
1:77dae50:         catch (NumberFormatException e)
1:77dae50:         {
1:77dae50:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MAX_SSTABLE_AGE_KEY), e);
1:77dae50:         }
1:77dae50: 
1:77dae50:         optionValue = options.get(BASE_TIME_KEY);
1:77dae50:         try
1:77dae50:         {
1:77dae50:             long baseTime = optionValue == null ? DEFAULT_BASE_TIME_SECONDS : Long.parseLong(optionValue);
1:77dae50:             if (baseTime <= 0)
1:77dae50:             {
1:77dae50:                 throw new ConfigurationException(String.format("%s must be greater than 0, but was %d", BASE_TIME_KEY, baseTime));
1:77dae50:             }
1:77dae50:         }
1:77dae50:         catch (NumberFormatException e)
1:77dae50:         {
1:77dae50:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, BASE_TIME_KEY), e);
1:77dae50:         }
1:77dae50: 
1:17042f1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:17042f1:         try
1:17042f1:         {
1:17042f1:             long expiredCheckFrequency = optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue);
1:17042f1:             if (expiredCheckFrequency < 0)
1:17042f1:             {
1:17042f1:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, expiredCheckFrequency));
1:17042f1:             }
1:17042f1:         }
1:17042f1:         catch (NumberFormatException e)
1:17042f1:         {
1:17042f1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY), e);
1:17042f1:         }
1:17042f1: 
1:99617a5:         optionValue = options.get(MAX_WINDOW_SIZE_KEY);
1:99617a5:         try
1:99617a5:         {
1:99617a5:             long maxWindowSize = optionValue == null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long.parseLong(optionValue);
1:99617a5:             if (maxWindowSize < 0)
1:99617a5:             {
1:99617a5:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", MAX_WINDOW_SIZE_KEY, maxWindowSize));
1:99617a5:             }
1:99617a5:         }
1:99617a5:         catch (NumberFormatException e)
1:99617a5:         {
1:99617a5:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MAX_WINDOW_SIZE_KEY), e);
1:99617a5:         }
1:99617a5: 
1:99617a5: 
1:77dae50:         uncheckedOptions.remove(MAX_SSTABLE_AGE_KEY);
1:77dae50:         uncheckedOptions.remove(BASE_TIME_KEY);
1:77dae50:         uncheckedOptions.remove(TIMESTAMP_RESOLUTION_KEY);
1:17042f1:         uncheckedOptions.remove(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:99617a5:         uncheckedOptions.remove(MAX_WINDOW_SIZE_KEY);
1:77dae50: 
1:77dae50:         return uncheckedOptions;
1:77dae50:     }
1:77dae50: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:be24013
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(DateTieredCompactionStrategyOptions.class);
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:e16d8a7
/////////////////////////////////////////////////////////////////////////
1:     protected final TimeUnit timestampResolution;
/////////////////////////////////////////////////////////////////////////
1:         timestampResolution = optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);
/////////////////////////////////////////////////////////////////////////
1:         timestampResolution = DEFAULT_TIMESTAMP_RESOLUTION;
1:         baseTime = timestampResolution.convert(DEFAULT_BASE_TIME_SECONDS, TimeUnit.SECONDS);
1:         maxWindowSize = timestampResolution.convert(1, TimeUnit.DAYS);
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:b8408f0
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0:     private static final Logger logger = LoggerFactory.getLogger(DateTieredCompactionStrategy.class);
/////////////////////////////////////////////////////////////////////////
1:         if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)
1:             logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?", timestampResolution.toString());
commit:99617a5
/////////////////////////////////////////////////////////////////////////
1:     @Deprecated
1:     protected static final double DEFAULT_MAX_SSTABLE_AGE_DAYS = 365*1000;
1:     protected static final long DEFAULT_MAX_WINDOW_SIZE_SECONDS = TimeUnit.SECONDS.convert(1, TimeUnit.DAYS);
1: 
1:     @Deprecated
1:     protected static final String MAX_WINDOW_SIZE_KEY = "max_window_size_seconds";
1:     @Deprecated
1:     protected final long maxWindowSize;
/////////////////////////////////////////////////////////////////////////
1:         optionValue = options.get(MAX_WINDOW_SIZE_KEY);
1:         maxWindowSize = timestampResolution.convert(optionValue == null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:         maxSSTableAge = Math.round(DEFAULT_MAX_SSTABLE_AGE_DAYS * DEFAULT_TIMESTAMP_RESOLUTION.convert((long) DEFAULT_MAX_SSTABLE_AGE_DAYS, TimeUnit.DAYS));
0:         maxWindowSize = DEFAULT_TIMESTAMP_RESOLUTION.convert(1, TimeUnit.DAYS);
/////////////////////////////////////////////////////////////////////////
1:         optionValue = options.get(MAX_WINDOW_SIZE_KEY);
1:         try
1:         {
1:             long maxWindowSize = optionValue == null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long.parseLong(optionValue);
1:             if (maxWindowSize < 0)
1:             {
1:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", MAX_WINDOW_SIZE_KEY, maxWindowSize));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MAX_WINDOW_SIZE_KEY), e);
1:         }
1: 
1: 
1:         uncheckedOptions.remove(MAX_WINDOW_SIZE_KEY);
commit:17042f1
/////////////////////////////////////////////////////////////////////////
1:     protected static final int DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS = 60 * 10;
1:     protected static final String EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY = "expired_sstable_check_frequency_seconds";
1:     protected final long expiredSSTableCheckFrequency;
/////////////////////////////////////////////////////////////////////////
1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:         expiredSSTableCheckFrequency = TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         optionValue = options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
1:         try
1:         {
1:             long expiredCheckFrequency = optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue);
1:             if (expiredCheckFrequency < 0)
1:             {
1:                 throw new ConfigurationException(String.format("%s must not be negative, but was %d", EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, expiredCheckFrequency));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY), e);
1:         }
1: 
1:         uncheckedOptions.remove(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);
commit:93769b3
/////////////////////////////////////////////////////////////////////////
0:     protected static final double DEFAULT_MAX_SSTABLE_AGE_DAYS = 365;
/////////////////////////////////////////////////////////////////////////
1:         double fractionalDays = optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double.parseDouble(optionValue);
1:         maxSSTableAge = Math.round(fractionalDays * timestampResolution.convert(1, TimeUnit.DAYS));
0:         maxSSTableAge = Math.round(DEFAULT_MAX_SSTABLE_AGE_DAYS * DEFAULT_TIMESTAMP_RESOLUTION.convert(1, TimeUnit.DAYS));
/////////////////////////////////////////////////////////////////////////
1:             double maxSStableAge = optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double.parseDouble(optionValue);
1:                 throw new ConfigurationException(String.format("%s must be non-negative: %.2f", MAX_SSTABLE_AGE_KEY, maxSStableAge));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5784309
/////////////////////////////////////////////////////////////////////////
1:     protected static final long DEFAULT_BASE_TIME_SECONDS = 60;
author:Bjorn Hegerfors
-------------------------------------------------------------------------------
commit:77dae50
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
1: 
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: public final class DateTieredCompactionStrategyOptions
1: {
1:     protected static final TimeUnit DEFAULT_TIMESTAMP_RESOLUTION = TimeUnit.MICROSECONDS;
0:     protected static final long DEFAULT_MAX_SSTABLE_AGE_DAYS = 365;
0:     protected static final long DEFAULT_BASE_TIME_SECONDS = 60 * 60;
1:     protected static final String TIMESTAMP_RESOLUTION_KEY = "timestamp_resolution";
1:     protected static final String MAX_SSTABLE_AGE_KEY = "max_sstable_age_days";
1:     protected static final String BASE_TIME_KEY = "base_time_seconds";
1: 
1:     protected final long maxSSTableAge;
1:     protected final long baseTime;
1: 
1:     public DateTieredCompactionStrategyOptions(Map<String, String> options)
1:     {
1:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
0:         TimeUnit timestampResolution = optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);
1:         optionValue = options.get(MAX_SSTABLE_AGE_KEY);
0:         maxSSTableAge = timestampResolution.convert(optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Long.parseLong(optionValue), TimeUnit.DAYS);
1:         optionValue = options.get(BASE_TIME_KEY);
1:         baseTime = timestampResolution.convert(optionValue == null ? DEFAULT_BASE_TIME_SECONDS : Long.parseLong(optionValue), TimeUnit.SECONDS);
1:     }
1: 
1:     public DateTieredCompactionStrategyOptions()
1:     {
0:         maxSSTableAge = DEFAULT_TIMESTAMP_RESOLUTION.convert(DEFAULT_MAX_SSTABLE_AGE_DAYS, TimeUnit.DAYS);
0:         baseTime = DEFAULT_TIMESTAMP_RESOLUTION.convert(DEFAULT_BASE_TIME_SECONDS, TimeUnit.SECONDS);
1:     }
1: 
1:     public static Map<String, String> validateOptions(Map<String, String> options, Map<String, String> uncheckedOptions) throws  ConfigurationException
1:     {
1:         String optionValue = options.get(TIMESTAMP_RESOLUTION_KEY);
1:         try
1:         {
1:             if (optionValue != null)
1:                 TimeUnit.valueOf(optionValue);
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             throw new ConfigurationException(String.format("timestamp_resolution %s is not valid", optionValue));
1:         }
1: 
1:         optionValue = options.get(MAX_SSTABLE_AGE_KEY);
1:         try
1:         {
0:             long maxSStableAge = optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Long.parseLong(optionValue);
1:             if (maxSStableAge < 0)
1:             {
0:                 throw new ConfigurationException(String.format("%s must be non-negative: %d", MAX_SSTABLE_AGE_KEY, maxSStableAge));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, MAX_SSTABLE_AGE_KEY), e);
1:         }
1: 
1:         optionValue = options.get(BASE_TIME_KEY);
1:         try
1:         {
1:             long baseTime = optionValue == null ? DEFAULT_BASE_TIME_SECONDS : Long.parseLong(optionValue);
1:             if (baseTime <= 0)
1:             {
1:                 throw new ConfigurationException(String.format("%s must be greater than 0, but was %d", BASE_TIME_KEY, baseTime));
1:             }
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s", optionValue, BASE_TIME_KEY), e);
1:         }
1: 
1:         uncheckedOptions.remove(MAX_SSTABLE_AGE_KEY);
1:         uncheckedOptions.remove(BASE_TIME_KEY);
1:         uncheckedOptions.remove(TIMESTAMP_RESOLUTION_KEY);
1: 
1:         return uncheckedOptions;
1:     }
1: }
============================================================================