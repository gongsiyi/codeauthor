1:94cc9a4: /*
1:94cc9a4:  * Licensed to the Apache Software Foundation (ASF) under one
1:94cc9a4:  * or more contributor license agreements.  See the NOTICE file
1:94cc9a4:  * distributed with this work for additional information
1:94cc9a4:  * regarding copyright ownership.  The ASF licenses this file
1:94cc9a4:  * to you under the Apache License, Version 2.0 (the
1:94cc9a4:  * "License"); you may not use this file except in compliance
1:94cc9a4:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:94cc9a4:  */
1:07cf56f: package org.apache.cassandra.utils;
1:2fd3268: 
1:c924ce5: import java.io.File;
1:55db039: import java.util.concurrent.TimeUnit;
4:c924ce5: 
1:c924ce5: import org.slf4j.Logger;
1:c924ce5: import org.slf4j.LoggerFactory;
1:55db039: 
1:4397c34: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:c924ce5: 
1:c924ce5: public class ResourceWatcher
1:c924ce5: {
1:c924ce5:     public static void watch(String resource, Runnable callback, int period)
1:c924ce5:     {
1:4397c34:         ScheduledExecutors.scheduledTasks.scheduleWithFixedDelay(new WatchedResource(resource, callback), period, period, TimeUnit.MILLISECONDS);
1:c924ce5:     }
1:07cdfd0: 
1:55db039:     public static class WatchedResource implements Runnable
1:c924ce5:     {
1:5a6e2b0:         private static final Logger logger = LoggerFactory.getLogger(WatchedResource.class);
1:5a6e2b0:         private final String resource;
1:5a6e2b0:         private final Runnable callback;
1:c924ce5:         private long lastLoaded;
1:c924ce5: 
1:c924ce5:         public WatchedResource(String resource, Runnable callback)
1:c924ce5:         {
1:c924ce5:             this.resource = resource;
1:c924ce5:             this.callback = callback;
1:c924ce5:             lastLoaded = 0;
1:c924ce5:         }
1:c924ce5: 
1:c924ce5:         public void run()
1:c924ce5:         {
1:c924ce5:             try
1:c924ce5:             {
1:c924ce5:                 String filename = FBUtilities.resourceToFile(resource);
1:c924ce5:                 long lastModified = new File(filename).lastModified();
1:c924ce5:                 if (lastModified > lastLoaded)
1:c924ce5:                 {
1:c924ce5:                     callback.run();
1:c924ce5:                     lastLoaded = lastModified;
1:c924ce5:                 }
1:c924ce5:             }
1:c924ce5:             catch (Throwable t)
1:c924ce5:             {
1:1452134:                 JVMStabilityInspector.inspectThrowable(t);
1:c924ce5:                 logger.error(String.format("Timed run of %s failed.", callback.getClass()), t);
1:c924ce5:             }
1:c924ce5:         }
1:c924ce5:     }
1:c924ce5: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:4397c34
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:         ScheduledExecutors.scheduledTasks.scheduleWithFixedDelay(new WatchedResource(resource, callback), period, period, TimeUnit.MILLISECONDS);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:1452134
/////////////////////////////////////////////////////////////////////////
1:                 JVMStabilityInspector.inspectThrowable(t);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:         private static final Logger logger = LoggerFactory.getLogger(WatchedResource.class);
1:         private final String resource;
1:         private final Runnable callback;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.utils;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:55db039
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
0: import org.apache.cassandra.service.StorageService;
1: 
0:         StorageService.scheduledTasks.scheduleWithFixedDelay(new WatchedResource(resource, callback), period, period, TimeUnit.MILLISECONDS);
1:     public static class WatchedResource implements Runnable
commit:c924ce5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
1: 
1: import java.io.File;
0: import java.util.Timer;
0: import java.util.TimerTask;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ResourceWatcher
1: {
0:     private static Timer timer = new Timer("RESOURCE-WATCHER");
1: 
1:     public static void watch(String resource, Runnable callback, int period)
1:     {
0:         timer.schedule(new WatchedResource(resource, callback), period, period);
1:     }
1:     
0:     public static class WatchedResource extends TimerTask
1:     {
0:         private static Logger logger = LoggerFactory.getLogger(WatchedResource.class);
0:         private String resource;
0:         private Runnable callback;
1:         private long lastLoaded;
1: 
1:         public WatchedResource(String resource, Runnable callback)
1:         {
1:             this.resource = resource;
1:             this.callback = callback;
1:             lastLoaded = 0;
1:         }
1: 
1:         public void run()
1:         {
1:             try
1:             {
1:                 String filename = FBUtilities.resourceToFile(resource);
1:                 long lastModified = new File(filename).lastModified();
1:                 if (lastModified > lastLoaded)
1:                 {
1:                     callback.run();
1:                     lastLoaded = lastModified;
1:                 }
1:             }
1:             catch (Throwable t)
1:             {
1:                 logger.error(String.format("Timed run of %s failed.", callback.getClass()), t);
1:             }
1:         }
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:94cc9a4
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================