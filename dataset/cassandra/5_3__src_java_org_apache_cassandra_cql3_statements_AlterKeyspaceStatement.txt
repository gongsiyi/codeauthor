1:2ce7b9b: /*
1:2ce7b9b:  * Licensed to the Apache Software Foundation (ASF) under one
1:2ce7b9b:  * or more contributor license agreements.  See the NOTICE file
1:2ce7b9b:  * distributed with this work for additional information
1:2ce7b9b:  * regarding copyright ownership.  The ASF licenses this file
1:2ce7b9b:  * to you under the Apache License, Version 2.0 (the
1:2ce7b9b:  * "License"); you may not use this file except in compliance
1:2ce7b9b:  * with the License.  You may obtain a copy of the License at
1:2ce7b9b:  *
1:2ce7b9b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2ce7b9b:  *
1:2ce7b9b:  * Unless required by applicable law or agreed to in writing, software
1:2ce7b9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ce7b9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ce7b9b:  * See the License for the specific language governing permissions and
1:2ce7b9b:  * limitations under the License.
1:2ce7b9b:  */
1:2ce7b9b: package org.apache.cassandra.cql3.statements;
2:2ce7b9b: 
1:2ce7b9b: import org.apache.cassandra.auth.Permission;
1:2ce7b9b: import org.apache.cassandra.config.Schema;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:1e126da: import org.apache.cassandra.exceptions.*;
1:31e3f61: import org.apache.cassandra.locator.LocalStrategy;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:2ce7b9b: import org.apache.cassandra.service.ClientState;
1:2ce7b9b: import org.apache.cassandra.service.MigrationManager;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:2ce7b9b: 
1:2ce7b9b: public class AlterKeyspaceStatement extends SchemaAlteringStatement
5:2ce7b9b: {
1:2ce7b9b:     private final String name;
1:31e3f61:     private final KeyspaceAttributes attrs;
1:2ce7b9b: 
1:31e3f61:     public AlterKeyspaceStatement(String name, KeyspaceAttributes attrs)
1:2ce7b9b:     {
1:2ce7b9b:         super();
1:2ce7b9b:         this.name = name;
1:2ce7b9b:         this.attrs = attrs;
5:2ce7b9b:     }
1:11f7d72: 
1:11f7d72:     @Override
1:11f7d72:     public String keyspace()
1:11f7d72:     {
1:11f7d72:         return name;
1:11f7d72:     }
1:11f7d72: 
1:1e126da:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:11f7d72:     {
1:2ce7b9b:         state.hasKeyspaceAccess(name, Permission.ALTER);
1:11f7d72:     }
1:2ce7b9b: 
1:1e126da:     public void validate(ClientState state) throws RequestValidationException
1:2ce7b9b:     {
1:a89597d:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name);
2:2ce7b9b:         if (ksm == null)
1:2ce7b9b:             throw new InvalidRequestException("Unknown keyspace " + name);
1:9797511:         if (SchemaConstants.isSystemKeyspace(ksm.name))
1:2ce7b9b:             throw new InvalidRequestException("Cannot alter system keyspace");
1:2ce7b9b: 
1:2ce7b9b:         attrs.validate();
1:2ce7b9b: 
1:2ce7b9b:         if (attrs.getReplicationStrategyClass() == null && !attrs.getReplicationOptions().isEmpty())
1:1e126da:             throw new ConfigurationException("Missing replication strategy class");
1:2ce7b9b: 
1:31e3f61:         if (attrs.getReplicationStrategyClass() != null)
1:2ce7b9b:         {
1:c315745:             // The strategy is validated through KSMetaData.validate() in announceKeyspaceUpdate below.
1:c315745:             // However, for backward compatibility with thrift, this doesn't validate unexpected options yet,
1:c315745:             // so doing proper validation here.
1:31e3f61:             KeyspaceParams params = attrs.asAlteredKeyspaceParams(ksm.params);
1:31e3f61:             params.validate(name);
1:31e3f61:             if (params.replication.klass.equals(LocalStrategy.class))
1:31e3f61:                 throw new ConfigurationException("Unable to use given strategy class: LocalStrategy is reserved for internal use.");
1:2ce7b9b:         }
1:2ce7b9b:     }
1:2ce7b9b: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:2ce7b9b:     {
1:a89597d:         KeyspaceMetadata oldKsm = Schema.instance.getKSMetaData(name);
1:2ce7b9b:         // In the (very) unlikely case the keyspace was dropped since validate()
1:31e3f61:         if (oldKsm == null)
1:2ce7b9b:             throw new InvalidRequestException("Unknown keyspace " + name);
1:2ce7b9b: 
1:a89597d:         KeyspaceMetadata newKsm = oldKsm.withSwapped(attrs.asAlteredKeyspaceParams(oldKsm.params));
1:31e3f61:         MigrationManager.announceKeyspaceUpdate(newKsm, isLocalOnly);
1:2fe6de6:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, keyspace());
1:2ce7b9b:     }
1:2ce7b9b: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         if (SchemaConstants.isSystemKeyspace(ksm.name))
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
/////////////////////////////////////////////////////////////////////////
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
1:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, keyspace());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws RequestValidationException
0:         MigrationManager.announceKeyspaceUpdate(attrs.asKSMetadataUpdate(ksm), isLocalOnly);
commit:3d93a3c
commit:c315745
/////////////////////////////////////////////////////////////////////////
1:             // The strategy is validated through KSMetaData.validate() in announceKeyspaceUpdate below.
1:             // However, for backward compatibility with thrift, this doesn't validate unexpected options yet,
1:             // so doing proper validation here.
0:             AbstractReplicationStrategy.validateReplicationStrategy(name,
0:                                                                     attrs.getReplicationStrategyClass(),
0:                                                                     StorageService.instance.getTokenMetadata(),
0:                                                                     DatabaseDescriptor.getEndpointSnitch(),
0:                                                                     attrs.getReplicationOptions());
commit:11f7d72
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String keyspace()
1:     {
1:         return name;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         return ResultMessage.SchemaChange.Change.UPDATED;
1:     }
commit:2ce7b9b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.cql3.KSPropDefs;
0: import org.apache.cassandra.db.Table;
0: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.thrift.SchemaDisagreementException;
1: 
1: public class AlterKeyspaceStatement extends SchemaAlteringStatement
1: {
1:     private final String name;
0:     private final KSPropDefs attrs;
1: 
0:     public AlterKeyspaceStatement(String name, KSPropDefs attrs)
1:     {
1:         super();
1:         this.name = name;
1:         this.attrs = attrs;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws InvalidRequestException
1:     {
1:         state.hasKeyspaceAccess(name, Permission.ALTER);
1:     }
1: 
0:     @Override
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException
1:     {
0:         super.validate(state);
1: 
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name);
1:         if (ksm == null)
1:             throw new InvalidRequestException("Unknown keyspace " + name);
0:         if (ksm.name.equalsIgnoreCase(Table.SYSTEM_TABLE))
1:             throw new InvalidRequestException("Cannot alter system keyspace");
1: 
0:         try
1:         {
1:             attrs.validate();
1: 
1:             if (attrs.getReplicationStrategyClass() == null && !attrs.getReplicationOptions().isEmpty())
1:             {
0:                 throw new InvalidRequestException("Missing replication strategy class");
1:             }
0:             else if (attrs.getReplicationStrategyClass() != null)
1:             {
0:                 // trial run to let ARS validate class + per-class options
0:                 AbstractReplicationStrategy.createReplicationStrategy(name,
0:                                                                       AbstractReplicationStrategy.getClass(attrs.getReplicationStrategyClass()),
0:                                                                       StorageService.instance.getTokenMetadata(),
0:                                                                       DatabaseDescriptor.getEndpointSnitch(),
0:                                                                       attrs.getReplicationOptions());
1:             }
1:         }
0:         catch (ConfigurationException e)
1:         {
0:             throw new InvalidRequestException(e.getMessage());
1:         }
1:     }
1: 
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
1:     {
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name);
1:         // In the (very) unlikely case the keyspace was dropped since validate()
1:         if (ksm == null)
1:             throw new InvalidRequestException("Unknown keyspace " + name);
1: 
0:         MigrationManager.announceKeyspaceUpdate(attrs.asKSMetadataUpdate(ksm));
1:     }
1: }
commit:1e126da
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.cql3.statements;
0: 
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.cql3.KSPropDefs;
0: import org.apache.cassandra.db.Table;
1: import org.apache.cassandra.exceptions.*;
0: import org.apache.cassandra.locator.AbstractReplicationStrategy;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.service.MigrationManager;
0: import org.apache.cassandra.service.StorageService;
0: 
0: public class AlterKeyspaceStatement extends SchemaAlteringStatement
0: {
0:     private final String name;
0:     private final KSPropDefs attrs;
0: 
0:     public AlterKeyspaceStatement(String name, KSPropDefs attrs)
0:     {
0:         super();
0:         this.name = name;
0:         this.attrs = attrs;
0:     }
0: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
0:     {
0:         state.hasKeyspaceAccess(name, Permission.ALTER);
0:     }
0: 
0:     @Override
1:     public void validate(ClientState state) throws RequestValidationException
0:     {
0:         super.validate(state);
0: 
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name);
0:         if (ksm == null)
0:             throw new InvalidRequestException("Unknown keyspace " + name);
0:         if (ksm.name.equalsIgnoreCase(Table.SYSTEM_KS))
0:             throw new InvalidRequestException("Cannot alter system keyspace");
0: 
0:         attrs.validate();
0: 
0:         if (attrs.getReplicationStrategyClass() == null && !attrs.getReplicationOptions().isEmpty())
0:         {
1:             throw new ConfigurationException("Missing replication strategy class");
0:         }
0:         else if (attrs.getReplicationStrategyClass() != null)
0:         {
0:             // trial run to let ARS validate class + per-class options
0:             AbstractReplicationStrategy.createReplicationStrategy(name,
0:                                                                   AbstractReplicationStrategy.getClass(attrs.getReplicationStrategyClass()),
0:                                                                   StorageService.instance.getTokenMetadata(),
0:                                                                   DatabaseDescriptor.getEndpointSnitch(),
0:                                                                   attrs.getReplicationOptions());
0:         }
0:     }
0: 
0:     public void announceMigration() throws RequestValidationException
0:     {
0:         KSMetaData ksm = Schema.instance.getKSMetaData(name);
0:         // In the (very) unlikely case the keyspace was dropped since validate()
0:         if (ksm == null)
0:             throw new InvalidRequestException("Unknown keyspace " + name);
0: 
0:         MigrationManager.announceKeyspaceUpdate(attrs.asKSMetadataUpdate(ksm));
0:     }
0: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:7d6c876
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (Schema.isSystemKeyspace(ksm.name))
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = Schema.instance.getKSMetaData(name);
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata oldKsm = Schema.instance.getKSMetaData(name);
1:         KeyspaceMetadata newKsm = oldKsm.withSwapped(attrs.asAlteredKeyspaceParams(oldKsm.params));
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.locator.LocalStrategy;
1: import org.apache.cassandra.schema.KeyspaceParams;
1:     private final KeyspaceAttributes attrs;
1:     public AlterKeyspaceStatement(String name, KeyspaceAttributes attrs)
/////////////////////////////////////////////////////////////////////////
0: 
1:         if (attrs.getReplicationStrategyClass() != null)
1:             KeyspaceParams params = attrs.asAlteredKeyspaceParams(ksm.params);
1:             params.validate(name);
1:             if (params.replication.klass.equals(LocalStrategy.class))
1:                 throw new ConfigurationException("Unable to use given strategy class: LocalStrategy is reserved for internal use.");
0:         KSMetaData oldKsm = Schema.instance.getKSMetaData(name);
1:         if (oldKsm == null)
0:         KSMetaData newKsm = oldKsm.withSwapped(attrs.asAlteredKeyspaceParams(oldKsm.params));
1:         MigrationManager.announceKeyspaceUpdate(newKsm, isLocalOnly);
commit:611d1ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
0:         if (ksm.name.equalsIgnoreCase(SystemKeyspace.NAME))
commit:be9a70e
/////////////////////////////////////////////////////////////////////////
commit:663bdfb
/////////////////////////////////////////////////////////////////////////
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
0:         if (ksm.name.equalsIgnoreCase(Keyspace.SYSTEM_KS))
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:664efd4
commit:e4d5eda
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration() throws RequestValidationException
/////////////////////////////////////////////////////////////////////////
0:         return true;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f32110c
/////////////////////////////////////////////////////////////////////////
0:         state.hasKeyspaceAccess(name, Permission.WRITE);
============================================================================