1:c75ee41: /*
1:c75ee41: * Licensed to the Apache Software Foundation (ASF) under one
1:c75ee41: * or more contributor license agreements.  See the NOTICE file
1:c75ee41: * distributed with this work for additional information
1:c75ee41: * regarding copyright ownership.  The ASF licenses this file
1:c75ee41: * to you under the Apache License, Version 2.0 (the
1:c75ee41: * "License"); you may not use this file except in compliance
1:c75ee41: * with the License.  You may obtain a copy of the License at
6:c75ee41: *
1:c75ee41: *    http://www.apache.org/licenses/LICENSE-2.0
1:c75ee41: *
1:c75ee41: * Unless required by applicable law or agreed to in writing,
1:c75ee41: * software distributed under the License is distributed on an
1:c75ee41: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c75ee41: * KIND, either express or implied.  See the License for the
1:c75ee41: * specific language governing permissions and limitations
1:c75ee41: * under the License.
2:c75ee41: */
1:c75ee41: package org.apache.cassandra.utils.concurrent;
6:c75ee41: 
2:c75ee41: /**
1:61384c5:  * An object that needs ref counting does the two following:
1:c75ee41:  *   - defines a Tidy object that will cleanup once it's gone,
1:c75ee41:  *     (this must retain no references to the object we're tracking (only its resources and how to clean up))
1:61384c5:  * Then, one of two options:
1:61384c5:  * 1) Construct a Ref directly pointing to it, and always use this Ref; or
1:61384c5:  * 2)
1:c75ee41:  *   - implements RefCounted
1:61384c5:  *   - encapsulates a Ref, we'll call selfRef, to which it proxies all calls to RefCounted behaviours
1:61384c5:  *   - users must ensure no references to the selfRef leak, or are retained outside of a method scope.
1:61384c5:  *     (to ensure the selfRef is collected with the object, so that leaks may be detected and corrected)
1:c75ee41:  */
1:61384c5: public interface RefCounted<T>
3:c75ee41: {
1:c75ee41:     /**
1:c75ee41:      * @return the a new Ref() to the managed object, incrementing its refcount, or null if it is already released
1:c75ee41:      */
1:61384c5:     public Ref<T> tryRef();
1:c75ee41: 
1:61384c5:     public Ref<T> ref();
1:c75ee41: 
1:c75ee41:     public static interface Tidy
1:c75ee41:     {
1:61384c5:         void tidy() throws Exception;
1:c75ee41:         String name();
3:c75ee41:     }
1:c75ee41: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:61384c5
/////////////////////////////////////////////////////////////////////////
1:  * An object that needs ref counting does the two following:
1:  * Then, one of two options:
1:  * 1) Construct a Ref directly pointing to it, and always use this Ref; or
1:  * 2)
1:  *   - encapsulates a Ref, we'll call selfRef, to which it proxies all calls to RefCounted behaviours
1:  *   - users must ensure no references to the selfRef leak, or are retained outside of a method scope.
1:  *     (to ensure the selfRef is collected with the object, so that leaks may be detected and corrected)
1: public interface RefCounted<T>
1:     public Ref<T> tryRef();
1:     public Ref<T> ref();
1:         void tidy() throws Exception;
commit:c75ee41
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
0: import java.lang.ref.PhantomReference;
0: import java.lang.ref.ReferenceQueue;
0: import java.util.*;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.ConcurrentLinkedQueue;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.atomic.AtomicInteger;
0: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1: 
0: import com.google.common.collect.ImmutableMap;
0: import com.google.common.collect.Iterators;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.concurrent.NamedThreadFactory;
1: 
1: /**
0:  * An object that needs ref counting does the following:
1:  *   - defines a Tidy object that will cleanup once it's gone,
1:  *     (this must retain no references to the object we're tracking (only its resources and how to clean up))
1:  *   - implements RefCounted
0:  *   - encapsulates a RefCounted.Impl, to which it proxies all calls to RefCounted behaviours
0:  *   - ensures no external access to the encapsulated Impl, and permits no references to it to leak
0:  *   - users must ensure no references to the sharedRef leak, or are retained outside of a method scope either.
0:  *     (to ensure the sharedRef is collected with the object, so that leaks may be detected and corrected)
1:  *
0:  * This class' functionality is achieved by what may look at first glance like a complex web of references,
0:  * but boils down to:
1:  *
0:  * Target --> Impl --> sharedRef --> [RefState] <--> RefCountedState --> Tidy
0:  *                                        ^                ^
0:  *                                        |                |
0:  * Ref -----------------------------------                 |
0:  *                                                         |
0:  * Global -------------------------------------------------
1:  *
0:  * So that, if Target is collected, Impl is collected and, hence, so is sharedRef.
1:  *
0:  * Once ref or sharedRef are collected, the paired RefState's release method is called, which if it had
0:  * not already been called will update RefCountedState and log an error.
1:  *
0:  * Once the RefCountedState has been completely released, the Tidy method is called and it removes the global reference
0:  * to itself so it may also be collected.
1:  */
0: public interface RefCounted
1: {
1: 
1:     /**
1:      * @return the a new Ref() to the managed object, incrementing its refcount, or null if it is already released
1:      */
0:     public Ref tryRef();
1: 
1:     /**
0:      * @return the shared Ref that is created at instantiation of the RefCounted instance.
0:      * Once released, if no other refs are extant the object will be tidied; references to
0:      * this object should never be retained outside of a method's scope
1:      */
0:     public Ref sharedRef();
1: 
1:     public static interface Tidy
1:     {
0:         void tidy();
1:         String name();
1:     }
1: 
0:     public static class Impl
1:     {
0:         public static RefCounted get(Tidy tidy)
1:         {
0:             return new RefCountedImpl(tidy);
1:         }
1:     }
1: }
============================================================================