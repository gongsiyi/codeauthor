1:18d8f26: /*
1:18d8f26:  * Licensed to the Apache Software Foundation (ASF) under one
1:18d8f26:  * or more contributor license agreements.  See the NOTICE file
1:18d8f26:  * distributed with this work for additional information
1:18d8f26:  * regarding copyright ownership.  The ASF licenses this file
1:18d8f26:  * to you under the Apache License, Version 2.0 (the
1:18d8f26:  * "License"); you may not use this file except in compliance
1:18d8f26:  * with the License.  You may obtain a copy of the License at
1:18d8f26:  *
1:18d8f26:  *     http://www.apache.org/licenses/LICENSE-2.0
1:18d8f26:  *
1:18d8f26:  * Unless required by applicable law or agreed to in writing, software
1:18d8f26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:18d8f26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:18d8f26:  * See the License for the specific language governing permissions and
1:18d8f26:  * limitations under the License.
1:18d8f26:  */
1:18d8f26: package org.apache.cassandra.db;
1:18d8f26: 
1:18d8f26: import java.nio.ByteBuffer;
1:18d8f26: 
1:18d8f26: import org.apache.cassandra.dht.Token;
1:18d8f26: 
1:18d8f26: public class CachedHashDecoratedKey extends BufferDecoratedKey
1:18d8f26: {
1:18d8f26:     long hash0;
1:18d8f26:     long hash1;
1:18d8f26:     volatile boolean hashCached;
1:18d8f26: 
1:18d8f26:     public CachedHashDecoratedKey(Token token, ByteBuffer key)
1:18d8f26:     {
1:18d8f26:         super(token, key);
1:18d8f26:         hashCached = false;
1:18d8f26:     }
1:18d8f26: 
1:18d8f26:     @Override
1:18d8f26:     public void filterHash(long[] dest)
1:18d8f26:     {
1:18d8f26:         if (hashCached)
1:18d8f26:         {
1:18d8f26:             dest[0] = hash0;
1:18d8f26:             dest[1] = hash1;
1:18d8f26:         }
1:18d8f26:         else
1:18d8f26:         {
1:18d8f26:             super.filterHash(dest);
1:18d8f26:             hash0 = dest[0];
1:18d8f26:             hash1 = dest[1];
1:18d8f26:             hashCached = true;
1:18d8f26:         }
1:18d8f26:     }
1:18d8f26: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.dht.Token;
1: 
1: public class CachedHashDecoratedKey extends BufferDecoratedKey
1: {
1:     long hash0;
1:     long hash1;
1:     volatile boolean hashCached;
1: 
1:     public CachedHashDecoratedKey(Token token, ByteBuffer key)
1:     {
1:         super(token, key);
1:         hashCached = false;
1:     }
1: 
1:     @Override
1:     public void filterHash(long[] dest)
1:     {
1:         if (hashCached)
1:         {
1:             dest[0] = hash0;
1:             dest[1] = hash1;
1:         }
1:         else
1:         {
1:             super.filterHash(dest);
1:             hash0 = dest[0];
1:             hash1 = dest[1];
1:             hashCached = true;
1:         }
1:     }
1: }
============================================================================