1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
3:c5a8190: 
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:c5a8190: import java.util.Set;
1:c5a8190: import javax.management.openmbean.TabularData;
1:c5a8190: 
1:b6661ac: import io.airlift.command.Command;
1:b6661ac: 
1:c5a8190: import org.apache.cassandra.io.util.FileUtils;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:b6661ac: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1:c5a8190: 
1:c5a8190: @Command(name = "listsnapshots", description = "Lists all the snapshots along with the size on disk and true size.")
1:c5a8190: public class ListSnapshots extends NodeToolCmd
1:c5a8190: {
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:c5a8190:         try
1:c5a8190:         {
1:c5a8190:             System.out.println("Snapshot Details: ");
1:c5a8190: 
1:c5a8190:             final Map<String,TabularData> snapshotDetails = probe.getSnapshotDetails();
1:c5a8190:             if (snapshotDetails.isEmpty())
1:c5a8190:             {
1:c5a8190:                 System.out.printf("There are no snapshots");
1:c5a8190:                 return;
1:c5a8190:             }
1:c5a8190: 
1:c5a8190:             final long trueSnapshotsSize = probe.trueSnapshotsSize();
1:b6661ac:             TableBuilder table = new TableBuilder();
1:c5a8190:             // display column names only once
1:c5a8190:             final List<String> indexNames = snapshotDetails.entrySet().iterator().next().getValue().getTabularType().getIndexNames();
1:b6661ac:             table.add(indexNames.toArray(new String[indexNames.size()]));
1:c5a8190: 
1:c5a8190:             for (final Map.Entry<String, TabularData> snapshotDetail : snapshotDetails.entrySet())
1:c5a8190:             {
1:c5a8190:                 Set<?> values = snapshotDetail.getValue().keySet();
1:c5a8190:                 for (Object eachValue : values)
1:c5a8190:                 {
1:c5a8190:                     final List<?> value = (List<?>) eachValue;
1:b6661ac:                     table.add(value.toArray(new String[value.size()]));
1:c5a8190:                 }
1:c5a8190:             }
1:b6661ac:             table.printTo(System.out);
1:c5a8190: 
1:c5a8190:             System.out.println("\nTotal TrueDiskSpaceUsed: " + FileUtils.stringifyFileSize(trueSnapshotsSize) + "\n");
1:c5a8190:         }
1:c5a8190:         catch (Exception e)
1:c5a8190:         {
1:c5a8190:             throw new RuntimeException("Error during list snapshot", e);
1:c5a8190:         }
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b6661ac
/////////////////////////////////////////////////////////////////////////
1: import io.airlift.command.Command;
1: 
1: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
/////////////////////////////////////////////////////////////////////////
1:             TableBuilder table = new TableBuilder();
1:             table.add(indexNames.toArray(new String[indexNames.size()]));
/////////////////////////////////////////////////////////////////////////
1:                     table.add(value.toArray(new String[value.size()]));
1:             table.printTo(System.out);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
0: import io.airlift.command.Command;
1: 
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "listsnapshots", description = "Lists all the snapshots along with the size on disk and true size.")
1: public class ListSnapshots extends NodeToolCmd
1: {
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         try
1:         {
1:             System.out.println("Snapshot Details: ");
1: 
1:             final Map<String,TabularData> snapshotDetails = probe.getSnapshotDetails();
1:             if (snapshotDetails.isEmpty())
1:             {
1:                 System.out.printf("There are no snapshots");
1:                 return;
1:             }
1: 
1:             final long trueSnapshotsSize = probe.trueSnapshotsSize();
0:             final String format = "%-20s%-29s%-29s%-19s%-19s%n";
1:             // display column names only once
1:             final List<String> indexNames = snapshotDetails.entrySet().iterator().next().getValue().getTabularType().getIndexNames();
0:             System.out.printf(format, (Object[]) indexNames.toArray(new String[indexNames.size()]));
1: 
1:             for (final Map.Entry<String, TabularData> snapshotDetail : snapshotDetails.entrySet())
1:             {
1:                 Set<?> values = snapshotDetail.getValue().keySet();
1:                 for (Object eachValue : values)
1:                 {
1:                     final List<?> value = (List<?>) eachValue;
0:                     System.out.printf(format, value.toArray(new Object[value.size()]));
1:                 }
1:             }
1: 
1:             System.out.println("\nTotal TrueDiskSpaceUsed: " + FileUtils.stringifyFileSize(trueSnapshotsSize) + "\n");
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException("Error during list snapshot", e);
1:         }
1:     }
1: }
============================================================================