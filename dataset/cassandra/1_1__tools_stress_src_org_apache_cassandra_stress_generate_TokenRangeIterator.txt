1:f27ab29: /*
1:f27ab29:  * Licensed to the Apache Software Foundation (ASF) under one
1:f27ab29:  * or more contributor license agreements.  See the NOTICE file
1:f27ab29:  * distributed with this work for additional information
1:f27ab29:  * regarding copyright ownership.  The ASF licenses this file
1:f27ab29:  * to you under the Apache License, Version 2.0 (the
1:f27ab29:  * "License"); you may not use this file except in compliance
1:f27ab29:  * with the License.  You may obtain a copy of the License at
1:f27ab29:  *
1:f27ab29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f27ab29:  *
1:f27ab29:  * Unless required by applicable law or agreed to in writing, software
1:f27ab29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f27ab29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f27ab29:  * See the License for the specific language governing permissions and
1:f27ab29:  * limitations under the License.
1:f27ab29:  */
1:f27ab29: 
1:f27ab29: package org.apache.cassandra.stress.generate;
1:f27ab29: 
1:f27ab29: import java.util.Set;
1:f27ab29: import java.util.TreeSet;
1:f27ab29: import java.util.concurrent.ConcurrentLinkedQueue;
1:f27ab29: 
1:f27ab29: import com.datastax.driver.core.TokenRange;
1:f27ab29: import org.apache.cassandra.stress.settings.StressSettings;
1:f27ab29: 
1:f27ab29: public class TokenRangeIterator
1:f27ab29: {
1:f27ab29:     private final Set<TokenRange> tokenRanges;
1:f27ab29:     private final ConcurrentLinkedQueue<TokenRange> pendingRanges;
1:f27ab29:     private final boolean wrap;
1:f27ab29: 
1:f27ab29:     public TokenRangeIterator(StressSettings settings, Set<TokenRange> tokenRanges)
1:f27ab29:     {
1:f27ab29:         this.tokenRanges = maybeSplitRanges(tokenRanges, settings.tokenRange.splitFactor);
1:f27ab29:         this.pendingRanges = new ConcurrentLinkedQueue<>(this.tokenRanges);
1:f27ab29:         this.wrap = settings.tokenRange.wrap;
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     private static Set<TokenRange> maybeSplitRanges(Set<TokenRange> tokenRanges, int splitFactor)
1:f27ab29:     {
1:f27ab29:         if (splitFactor <= 1)
1:f27ab29:             return tokenRanges;
1:f27ab29: 
1:f27ab29:         Set<TokenRange> ret = new TreeSet<>();
1:f27ab29:         for (TokenRange range : tokenRanges)
1:f27ab29:             ret.addAll(range.splitEvenly(splitFactor));
1:f27ab29: 
1:f27ab29:         return ret;
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public void update()
1:f27ab29:     {
1:f27ab29:         // we may race and add to the queue twice but no bad consequence so it's fine if that happens
1:f27ab29:         // as ultimately only the permits determine when to stop if wrap is true
1:f27ab29:         if (wrap && pendingRanges.isEmpty())
1:f27ab29:             pendingRanges.addAll(tokenRanges);
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public TokenRange next()
1:f27ab29:     {
1:f27ab29:         return pendingRanges.poll();
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public boolean exhausted()
1:f27ab29:     {
1:f27ab29:         return pendingRanges.isEmpty();
1:f27ab29:     }
1:f27ab29: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress.generate;
1: 
1: import java.util.Set;
1: import java.util.TreeSet;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: 
1: import com.datastax.driver.core.TokenRange;
1: import org.apache.cassandra.stress.settings.StressSettings;
1: 
1: public class TokenRangeIterator
1: {
1:     private final Set<TokenRange> tokenRanges;
1:     private final ConcurrentLinkedQueue<TokenRange> pendingRanges;
1:     private final boolean wrap;
1: 
1:     public TokenRangeIterator(StressSettings settings, Set<TokenRange> tokenRanges)
1:     {
1:         this.tokenRanges = maybeSplitRanges(tokenRanges, settings.tokenRange.splitFactor);
1:         this.pendingRanges = new ConcurrentLinkedQueue<>(this.tokenRanges);
1:         this.wrap = settings.tokenRange.wrap;
1:     }
1: 
1:     private static Set<TokenRange> maybeSplitRanges(Set<TokenRange> tokenRanges, int splitFactor)
1:     {
1:         if (splitFactor <= 1)
1:             return tokenRanges;
1: 
1:         Set<TokenRange> ret = new TreeSet<>();
1:         for (TokenRange range : tokenRanges)
1:             ret.addAll(range.splitEvenly(splitFactor));
1: 
1:         return ret;
1:     }
1: 
1:     public void update()
1:     {
1:         // we may race and add to the queue twice but no bad consequence so it's fine if that happens
1:         // as ultimately only the permits determine when to stop if wrap is true
1:         if (wrap && pendingRanges.isEmpty())
1:             pendingRanges.addAll(tokenRanges);
1:     }
1: 
1:     public TokenRange next()
1:     {
1:         return pendingRanges.poll();
1:     }
1: 
1:     public boolean exhausted()
1:     {
1:         return pendingRanges.isEmpty();
1:     }
1: }
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.stress.generate;
0: 
0: import java.util.Set;
0: import java.util.TreeSet;
0: import java.util.concurrent.ConcurrentLinkedQueue;
0: 
0: import com.datastax.driver.core.TokenRange;
0: import org.apache.cassandra.stress.settings.StressSettings;
0: 
0: public class TokenRangeIterator
0: {
0:     private final Set<TokenRange> tokenRanges;
0:     private final ConcurrentLinkedQueue<TokenRange> pendingRanges;
0:     private final boolean wrap;
0: 
0:     public TokenRangeIterator(StressSettings settings, Set<TokenRange> tokenRanges)
0:     {
0:         this.tokenRanges = maybeSplitRanges(tokenRanges, settings.tokenRange.splitFactor);
0:         this.pendingRanges = new ConcurrentLinkedQueue<>(this.tokenRanges);
0:         this.wrap = settings.tokenRange.wrap;
0:     }
0: 
0:     private static Set<TokenRange> maybeSplitRanges(Set<TokenRange> tokenRanges, int splitFactor)
0:     {
0:         if (splitFactor <= 1)
0:             return tokenRanges;
0: 
0:         Set<TokenRange> ret = new TreeSet<>();
0:         for (TokenRange range : tokenRanges)
0:             ret.addAll(range.splitEvenly(splitFactor));
0: 
0:         return ret;
0:     }
0: 
0:     public void update()
0:     {
0:         // we may race and add to the queue twice but no bad consequence so it's fine if that happens
0:         // as ultimately only the permits determine when to stop if wrap is true
0:         if (wrap && pendingRanges.isEmpty())
0:             pendingRanges.addAll(tokenRanges);
0:     }
0: 
0:     public TokenRange next()
0:     {
0:         return pendingRanges.poll();
0:     }
0: 
0:     public boolean exhausted()
0:     {
0:         return pendingRanges.isEmpty();
0:     }
0: }
============================================================================