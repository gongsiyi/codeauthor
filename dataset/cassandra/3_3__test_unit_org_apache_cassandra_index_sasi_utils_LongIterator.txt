1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.IOException;
1:72790dc: import java.util.ArrayList;
1:72790dc: import java.util.Collections;
1:72790dc: import java.util.Iterator;
1:72790dc: import java.util.List;
1:72790dc: 
1:5c4d5c7: import com.carrotsearch.hppc.LongOpenHashSet;
1:5c4d5c7: import com.carrotsearch.hppc.LongSet;
1:72790dc: import org.apache.cassandra.db.DecoratedKey;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.KeyOffsets;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.RowKey;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: 
1:72790dc: public class LongIterator extends RangeIterator<Long, Token>
1:72790dc: {
1:72790dc:     private final List<LongToken> tokens;
1:72790dc:     private int currentIdx = 0;
1:72790dc: 
1:72790dc:     public LongIterator(long[] tokens)
1:72790dc:     {
1:72790dc:         super(tokens.length == 0 ? null : tokens[0], tokens.length == 0 ? null : tokens[tokens.length - 1], tokens.length);
1:72790dc:         this.tokens = new ArrayList<>(tokens.length);
1:72790dc:         for (long token : tokens)
1:72790dc:             this.tokens.add(new LongToken(token));
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Override
1:72790dc:     protected Token computeNext()
1:5c4d5c7:     {
1:72790dc:         if (currentIdx >= tokens.size())
1:72790dc:             return endOfData();
1:5c4d5c7: 
1:72790dc:         return tokens.get(currentIdx++);
1:5c4d5c7:     }
1:72790dc: 
1:5c4d5c7:     @Override
1:72790dc:     protected void performSkipTo(Long nextToken)
1:72790dc:     {
1:72790dc:         for (int i = currentIdx == 0 ? 0 : currentIdx - 1; i < tokens.size(); i++)
1:72790dc:         {
1:72790dc:             LongToken token = tokens.get(i);
1:72790dc:             if (token.get().compareTo(nextToken) >= 0)
1:72790dc:             {
1:72790dc:                 currentIdx = i;
1:72790dc:                 break;
1:72790dc:             }
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     @Override
1:72790dc:     public void close() throws IOException
1:72790dc:     {}
1:72790dc: 
1:72790dc:     public static class LongToken extends Token
1:72790dc:     {
1:72790dc:         public LongToken(long token)
1:72790dc:         {
1:72790dc:             super(token);
1:72790dc:         }
1:72790dc: 
1:72790dc:         @Override
1:72790dc:         public void merge(CombinedValue<Long> other)
1:72790dc:         {
1:72790dc:             // no-op
1:72790dc:         }
1:72790dc: 
1:72790dc:         @Override
1:7d857b4:         public KeyOffsets getOffsets()
1:72790dc:         {
1:7d857b4:             return new KeyOffsets(4);
1:72790dc:         }
1:72790dc: 
1:72790dc:         @Override
1:7d857b4:         public Iterator<RowKey> iterator()
1:72790dc:         {
1:72790dc:             return Collections.emptyIterator();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static List<Long> convert(RangeIterator<Long, Token> tokens)
1:72790dc:     {
1:72790dc:         List<Long> results = new ArrayList<>();
1:72790dc:         while (tokens.hasNext())
1:72790dc:             results.add(tokens.next().get());
1:72790dc: 
1:72790dc:         return results;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static List<Long> convert(final long... nums)
1:72790dc:     {
1:72790dc:         return new ArrayList<Long>(nums.length)
1:72790dc:         {{
1:72790dc:                 for (long n : nums)
1:72790dc:                     add(n);
1:72790dc:         }};
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.KeyOffsets;
1: import org.apache.cassandra.index.sasi.disk.RowKey;
/////////////////////////////////////////////////////////////////////////
1:         public KeyOffsets getOffsets()
1:             return new KeyOffsets(4);
1:         public Iterator<RowKey> iterator()
author:Jordan West
-------------------------------------------------------------------------------
commit:5c4d5c7
/////////////////////////////////////////////////////////////////////////
1: import com.carrotsearch.hppc.LongOpenHashSet;
1: import com.carrotsearch.hppc.LongSet;
/////////////////////////////////////////////////////////////////////////
0:         public LongSet getOffsets()
1:         {
0:             return new LongOpenHashSet(4);
1:         }
1: 
1:         @Override
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: 
1: public class LongIterator extends RangeIterator<Long, Token>
1: {
1:     private final List<LongToken> tokens;
1:     private int currentIdx = 0;
1: 
1:     public LongIterator(long[] tokens)
1:     {
1:         super(tokens.length == 0 ? null : tokens[0], tokens.length == 0 ? null : tokens[tokens.length - 1], tokens.length);
1:         this.tokens = new ArrayList<>(tokens.length);
1:         for (long token : tokens)
1:             this.tokens.add(new LongToken(token));
1:     }
1: 
1:     @Override
1:     protected Token computeNext()
1:     {
1:         if (currentIdx >= tokens.size())
1:             return endOfData();
1: 
1:         return tokens.get(currentIdx++);
1:     }
1: 
1:     @Override
1:     protected void performSkipTo(Long nextToken)
1:     {
1:         for (int i = currentIdx == 0 ? 0 : currentIdx - 1; i < tokens.size(); i++)
1:         {
1:             LongToken token = tokens.get(i);
1:             if (token.get().compareTo(nextToken) >= 0)
1:             {
1:                 currentIdx = i;
1:                 break;
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void close() throws IOException
1:     {}
1: 
1:     public static class LongToken extends Token
1:     {
1:         public LongToken(long token)
1:         {
1:             super(token);
1:         }
1: 
1:         @Override
1:         public void merge(CombinedValue<Long> other)
1:         {
1:             // no-op
1:         }
1: 
1:         @Override
0:         public Iterator<DecoratedKey> iterator()
1:         {
1:             return Collections.emptyIterator();
1:         }
1:     }
1: 
1:     public static List<Long> convert(RangeIterator<Long, Token> tokens)
1:     {
1:         List<Long> results = new ArrayList<>();
1:         while (tokens.hasNext())
1:             results.add(tokens.next().get());
1: 
1:         return results;
1:     }
1: 
1:     public static List<Long> convert(final long... nums)
1:     {
1:         return new ArrayList<Long>(nums.length)
1:         {{
1:                 for (long n : nums)
1:                     add(n);
1:         }};
1:     }
1: }
============================================================================