1:07cf56f: /*
1:2e1b1a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1b1a5:  * or more contributor license agreements.  See the NOTICE file
1:2e1b1a5:  * distributed with this work for additional information
1:2e1b1a5:  * regarding copyright ownership.  The ASF licenses this file
1:2e1b1a5:  * to you under the Apache License, Version 2.0 (the
1:2e1b1a5:  * "License"); you may not use this file except in compliance
1:2e1b1a5:  * with the License.  You may obtain a copy of the License at
1:2e1b1a5:  *
1:2e1b1a5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1b1a5:  *
1:2e1b1a5:  * Unless required by applicable law or agreed to in writing, software
1:2e1b1a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1b1a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1b1a5:  * See the License for the specific language governing permissions and
1:2e1b1a5:  * limitations under the License.
1:2e1b1a5:  */
1:2e1b1a5: package org.apache.cassandra.gms;
2:2e1b1a5: 
1:2e1b1a5: import java.net.InetAddress;
1:2e1b1a5: 
1:2e1b1a5: /**
1:7a4a709:  * This is called by an instance of the IEndpointStateChangePublisher to notify
1:2e1b1a5:  * interested parties about changes in the the state associated with any endpoint.
1:2e1b1a5:  * For instance if node A figures there is a changes in state for an endpoint B
1:2e1b1a5:  * it notifies all interested parties of this change. It is upto to the registered
1:2e1b1a5:  * instance to decide what he does with this change. Not all modules maybe interested
1:2e1b1a5:  * in all state changes.
1:2e1b1a5:  */
1:2e1b1a5: public interface IEndpointStateChangeSubscriber
1:2e1b1a5: {
1:2e1b1a5:     /**
1:2e1b1a5:      * Use to inform interested parties about the change in the state
1:2e1b1a5:      * for specified endpoint
1:2e1b1a5:      *
1:2e1b1a5:      * @param endpoint endpoint for which the state change occurred.
1:b207956:      * @param epState  state that actually changed for the above endpoint.
1:2e1b1a5:      */
1:2e1b1a5:     public void onJoin(InetAddress endpoint, EndpointState epState);
1:5eddf18:     
1:5eddf18:     public void beforeChange(InetAddress endpoint, EndpointState currentState, ApplicationState newStateKey, VersionedValue newValue);
1:2e1b1a5: 
1:89fbc1b:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value);
1:2e1b1a5: 
1:2e1b1a5:     public void onAlive(InetAddress endpoint, EndpointState state);
1:2e1b1a5: 
1:2e1b1a5:     public void onDead(InetAddress endpoint, EndpointState state);
1:5dbdf3a: 
1:5dbdf3a:     public void onRemove(InetAddress endpoint);
1:2e1b1a5: 
1:2e1b1a5:     /**
1:8db7000:      * Called whenever a node is restarted.
1:8db7000:      * Note that there is no guarantee when that happens that the node was
1:8db7000:      * previously marked down. It will have only if {@code state.isAlive() == false}
1:8db7000:      * as {@code state} is from before the restarted node is marked up.
1:8db7000:      */
1:8db7000:     public void onRestart(InetAddress endpoint, EndpointState state);
1:2e1b1a5: }
============================================================================
author:Brandon Williams
-------------------------------------------------------------------------------
commit:5eddf18
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void beforeChange(InetAddress endpoint, EndpointState currentState, ApplicationState newStateKey, VersionedValue newValue);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:      * @param epState  state that actually changed for the above endpoint.
commit:89fbc1b
/////////////////////////////////////////////////////////////////////////
1:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value);
commit:5dbdf3a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void onRemove(InetAddress endpoint);
commit:7a4a709
/////////////////////////////////////////////////////////////////////////
1:  * This is called by an instance of the IEndpointStateChangePublisher to notify
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
1: import java.net.InetAddress;
1: 
1: /**
0:  * This is called by an instance of the IEndPointStateChangePublisher to notify
1:  * interested parties about changes in the the state associated with any endpoint.
1:  * For instance if node A figures there is a changes in state for an endpoint B
1:  * it notifies all interested parties of this change. It is upto to the registered
1:  * instance to decide what he does with this change. Not all modules maybe interested 
1:  * in all state changes.
1:  */
1: 
1: public interface IEndpointStateChangeSubscriber
1: {
1:     /**
1:      * Use to inform interested parties about the change in the state
1:      * for specified endpoint
1:      * 
1:      * @param endpoint endpoint for which the state change occurred.
0:      * @param epState state that actually changed for the above endpoint.
1:      */
1:     public void onJoin(InetAddress endpoint, EndpointState epState);
1: 
0:     public void onChange(InetAddress endpoint, String stateName, ApplicationState state);
1: 
1:     public void onAlive(InetAddress endpoint, EndpointState state);
1: 
1:     public void onDead(InetAddress endpoint, EndpointState state);
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:63a8bfe
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  * instance to decide what he does with this change. Not all modules maybe interested
/////////////////////////////////////////////////////////////////////////
0:      *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * instance to decide what he does with this change. Not all modules maybe interested
/////////////////////////////////////////////////////////////////////////
0:      *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:8db7000
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * Called whenever a node is restarted.
1:      * Note that there is no guarantee when that happens that the node was
1:      * previously marked down. It will have only if {@code state.isAlive() == false}
1:      * as {@code state} is from before the restarted node is marked up.
1:      */
1:     public void onRestart(InetAddress endpoint, EndpointState state);
============================================================================