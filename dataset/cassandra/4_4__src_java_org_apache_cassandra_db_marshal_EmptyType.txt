1:91bdf7f: /*
1:91bdf7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:91bdf7f:  * or more contributor license agreements.  See the NOTICE file
1:91bdf7f:  * distributed with this work for additional information
1:91bdf7f:  * regarding copyright ownership.  The ASF licenses this file
1:91bdf7f:  * to you under the Apache License, Version 2.0 (the
1:91bdf7f:  * "License"); you may not use this file except in compliance
1:91bdf7f:  * with the License.  You may obtain a copy of the License at
1:91bdf7f:  *
1:91bdf7f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:91bdf7f:  *
1:91bdf7f:  * Unless required by applicable law or agreed to in writing, software
1:91bdf7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91bdf7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91bdf7f:  * See the License for the specific language governing permissions and
1:91bdf7f:  * limitations under the License.
1:91bdf7f:  */
1:91bdf7f: package org.apache.cassandra.db.marshal;
2:91bdf7f: 
1:91bdf7f: import java.nio.ByteBuffer;
1:91bdf7f: 
1:340df43: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.EmptySerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:91bdf7f: import org.apache.cassandra.utils.ByteBufferUtil;
1:91bdf7f: 
1:91bdf7f: /**
1:91bdf7f:  * A type that only accept empty data.
1:91bdf7f:  * It is only useful as a value validation type, not as a comparator since column names can't be empty.
1:91bdf7f:  */
1:91bdf7f: public class EmptyType extends AbstractType<Void>
3:91bdf7f: {
1:91bdf7f:     public static final EmptyType instance = new EmptyType();
1:91bdf7f: 
1:07594ee:     private EmptyType() {super(ComparisonType.CUSTOM);} // singleton
1:91bdf7f: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:91bdf7f:     {
1:91bdf7f:         return 0;
1:e9c6742:     }
1:e9c6742: 
1:91bdf7f:     public String getString(ByteBuffer bytes)
1:e9c6742:     {
1:91bdf7f:         return "";
3:91bdf7f:     }
1:91bdf7f: 
1:91bdf7f:     public ByteBuffer fromString(String source) throws MarshalException
1:91bdf7f:     {
1:91bdf7f:         if (!source.isEmpty())
1:91bdf7f:             throw new MarshalException(String.format("'%s' is not empty", source));
1:91bdf7f: 
2:91bdf7f:         return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:91bdf7f:     }
1:91bdf7f: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:91bdf7f:     {
1:c7b02d1:         if (!(parsed instanceof String))
1:c7b02d1:             throw new MarshalException(String.format("Expected an empty string, but got: %s", parsed));
1:c7b02d1:         if (!((String) parsed).isEmpty())
1:c7b02d1:             throw new MarshalException(String.format("'%s' is not empty", parsed));
1:91bdf7f: 
1:c7b02d1:         return new Constants.Value(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:91bdf7f:     }
1:91bdf7f: 
1:340df43:     @Override
1:340df43:     public CQL3Type asCQL3Type()
1:340df43:     {
1:340df43:         return CQL3Type.Native.EMPTY;
1:340df43:     }
1:340df43: 
1:fc8b76f:     public TypeSerializer<Void> getSerializer()
1:91bdf7f:     {
1:e9c6742:         return EmptySerializer.instance;
1:91bdf7f:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 0;
1:a991b64:     }
1:91bdf7f: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.CQL3Type;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.EMPTY;
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     private EmptyType() {super(ComparisonType.CUSTOM);} // singleton
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 0;
1:     }
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.EmptySerializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<Void> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.EmptySerializer;
0: import org.apache.cassandra.type.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         EmptySerializer.instance.validate(bytes);
1:     }
1: 
0:     public AbstractSerializer<Void> asComposer()
1:     {
1:         return EmptySerializer.instance;
commit:91bdf7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * A type that only accept empty data.
1:  * It is only useful as a value validation type, not as a comparator since column names can't be empty.
1:  */
1: public class EmptyType extends AbstractType<Void>
1: {
1:     public static final EmptyType instance = new EmptyType();
1: 
0:     private EmptyType() {} // singleton
1: 
0:     public Void compose(ByteBuffer bytes)
1:     {
0:         return null;
1:     }
1: 
0:     public ByteBuffer decompose(Void value)
1:     {
1:         return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         return 0;
1:     }
1: 
1:     public String getString(ByteBuffer bytes)
1:     {
1:         return "";
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         if (!source.isEmpty())
1:             throw new MarshalException(String.format("'%s' is not empty", source));
1: 
1:         return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         if (bytes.remaining() > 0)
0:             throw new MarshalException("EmptyType only accept empty values");
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
0:     {
1:         if (!(parsed instanceof String))
1:             throw new MarshalException(String.format("Expected an empty string, but got: %s", parsed));
1:         if (!((String) parsed).isEmpty())
1:             throw new MarshalException(String.format("'%s' is not empty", parsed));
0: 
1:         return new Constants.Value(ByteBufferUtil.EMPTY_BYTE_BUFFER);
0:     }
0: 
============================================================================