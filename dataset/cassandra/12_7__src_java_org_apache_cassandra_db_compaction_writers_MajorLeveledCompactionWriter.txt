1:910170c: /*
1:910170c:  * Licensed to the Apache Software Foundation (ASF) under one
1:910170c:  * or more contributor license agreements.  See the NOTICE file
1:910170c:  * distributed with this work for additional information
1:910170c:  * regarding copyright ownership.  The ASF licenses this file
1:910170c:  * to you under the Apache License, Version 2.0 (the
1:910170c:  * "License"); you may not use this file except in compliance
1:910170c:  * with the License.  You may obtain a copy of the License at
1:910170c:  *
1:910170c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:910170c:  *
1:910170c:  * Unless required by applicable law or agreed to in writing, software
1:910170c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:910170c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:910170c:  * See the License for the specific language governing permissions and
1:910170c:  * limitations under the License.
1:910170c:  */
1:910170c: package org.apache.cassandra.db.compaction.writers;
6:910170c: 
1:910170c: import java.util.Set;
1:910170c: 
1:910170c: import org.apache.cassandra.db.ColumnFamilyStore;
1:9ed2727: import org.apache.cassandra.db.Directories;
1:910170c: import org.apache.cassandra.db.RowIndexEntry;
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:a991b64: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:910170c: import org.apache.cassandra.db.compaction.LeveledManifest;
1:e5a76bd: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:910170c: import org.apache.cassandra.io.sstable.Descriptor;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1:910170c: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:910170c: 
1:910170c: public class MajorLeveledCompactionWriter extends CompactionAwareWriter
2:910170c: {
1:910170c:     private final long maxSSTableSize;
1:910170c:     private int currentLevel = 1;
1:910170c:     private long averageEstimatedKeysPerSSTable;
1:910170c:     private long partitionsWritten = 0;
1:910170c:     private long totalWrittenInLevel = 0;
1:910170c:     private int sstablesWritten = 0;
1:e2c6341:     private final long keysPerSSTable;
1:e2c6341:     private Directories.DataDirectory sstableDirectory;
1:9fc14bc:     private final int levelFanoutSize;
1:910170c: 
1:605bcdc:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:9ed2727:                                         Directories directories,
1:605bcdc:                                         LifecycleTransaction txn,
1:605bcdc:                                         Set<SSTableReader> nonExpiredSSTables,
1:605bcdc:                                         long maxSSTableSize)
1:910170c:     {
1:f9a1a80:         this(cfs, directories, txn, nonExpiredSSTables, maxSSTableSize, false);
2:910170c:     }
1:910170c: 
1:f9a1a80:     @Deprecated
1:605bcdc:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:9ed2727:                                         Directories directories,
1:605bcdc:                                         LifecycleTransaction txn,
1:605bcdc:                                         Set<SSTableReader> nonExpiredSSTables,
1:605bcdc:                                         long maxSSTableSize,
1:605bcdc:                                         boolean offline,
1:605bcdc:                                         boolean keepOriginals)
1:910170c:     {
1:f9a1a80:         this(cfs, directories, txn, nonExpiredSSTables, maxSSTableSize, keepOriginals);
1:f9a1a80:     }
1:f9a1a80: 
1:f9a1a80:     @SuppressWarnings("resource")
1:f9a1a80:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:f9a1a80:                                         Directories directories,
1:f9a1a80:                                         LifecycleTransaction txn,
1:f9a1a80:                                         Set<SSTableReader> nonExpiredSSTables,
1:f9a1a80:                                         long maxSSTableSize,
1:f9a1a80:                                         boolean keepOriginals)
1:f9a1a80:     {
1:f9a1a80:         super(cfs, directories, txn, nonExpiredSSTables, keepOriginals);
1:910170c:         this.maxSSTableSize = maxSSTableSize;
1:9fc14bc:         this.levelFanoutSize = cfs.getLevelFanoutSize();
1:e2c6341:         long estimatedSSTables = Math.max(1, SSTableReader.getTotalBytes(nonExpiredSSTables) / maxSSTableSize);
1:e2c6341:         keysPerSSTable = estimatedTotalKeys / estimatedSSTables;
1:910170c:     }
1:910170c: 
1:e2c6341:     @Override
1:9ed2727:     @SuppressWarnings("resource")
1:9ed2727:     public boolean realAppend(UnfilteredRowIterator partition)
1:910170c:     {
1:a991b64:         RowIndexEntry rie = sstableWriter.append(partition);
1:910170c:         partitionsWritten++;
1:0f1e838:         long totalWrittenInCurrentWriter = sstableWriter.currentWriter().getEstimatedOnDiskBytesWritten();
1:0f1e838:         if (totalWrittenInCurrentWriter > maxSSTableSize)
1:910170c:         {
1:0f1e838:             totalWrittenInLevel += totalWrittenInCurrentWriter;
1:9fc14bc:             if (totalWrittenInLevel > LeveledManifest.maxBytesForLevel(currentLevel, levelFanoutSize, maxSSTableSize))
1:910170c:             {
1:910170c:                 totalWrittenInLevel = 0;
1:910170c:                 currentLevel++;
1:910170c:             }
1:e2c6341:             switchCompactionLocation(sstableDirectory);
1:910170c:         }
1:910170c:         return rie != null;
1:e2c6341: 
1:910170c:     }
1:910170c: 
1:e2c6341:     @Override
1:e2c6341:     public void switchCompactionLocation(Directories.DataDirectory location)
1:e2c6341:     {
1:e2c6341:         this.sstableDirectory = location;
1:e2c6341:         averageEstimatedKeysPerSSTable = Math.round(((double) averageEstimatedKeysPerSSTable * sstablesWritten + partitionsWritten) / (sstablesWritten + 1));
1:e2c6341:         sstableWriter.switchWriter(SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(sstableDirectory))),
1:e2c6341:                 keysPerSSTable,
1:e2c6341:                 minRepairedAt,
1:e2c6341:                 cfs.metadata,
1:e2c6341:                 new MetadataCollector(txn.originals(), cfs.metadata.comparator, currentLevel),
1:e2c6341:                 SerializationHeader.make(cfs.metadata, txn.originals()),
1:e2c6341:                 cfs.indexManager.listIndexes(),
1:e2c6341:                 txn));
1:e2c6341:         partitionsWritten = 0;
1:e2c6341:         sstablesWritten = 0;
1:e2c6341: 
1:e2c6341:     }
1:910170c: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:9fc14bc
/////////////////////////////////////////////////////////////////////////
1:     private final int levelFanoutSize;
/////////////////////////////////////////////////////////////////////////
1:         this.levelFanoutSize = cfs.getLevelFanoutSize();
/////////////////////////////////////////////////////////////////////////
1:             if (totalWrittenInLevel > LeveledManifest.maxBytesForLevel(currentLevel, levelFanoutSize, maxSSTableSize))
author:Tom Petracca
-------------------------------------------------------------------------------
commit:0f1e838
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         long totalWrittenInCurrentWriter = sstableWriter.currentWriter().getEstimatedOnDiskBytesWritten();
1:         if (totalWrittenInCurrentWriter > maxSSTableSize)
1:             totalWrittenInLevel += totalWrittenInCurrentWriter;
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:2952500
/////////////////////////////////////////////////////////////////////////
commit:f9a1a80
/////////////////////////////////////////////////////////////////////////
1:         this(cfs, directories, txn, nonExpiredSSTables, maxSSTableSize, false);
1:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:         this(cfs, directories, txn, nonExpiredSSTables, maxSSTableSize, keepOriginals);
1:     }
1: 
1:     @SuppressWarnings("resource")
1:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:                                         Directories directories,
1:                                         LifecycleTransaction txn,
1:                                         Set<SSTableReader> nonExpiredSSTables,
1:                                         long maxSSTableSize,
1:                                         boolean keepOriginals)
1:     {
1:         super(cfs, directories, txn, nonExpiredSSTables, keepOriginals);
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     private final long keysPerSSTable;
1:     private Directories.DataDirectory sstableDirectory;
/////////////////////////////////////////////////////////////////////////
1:         long estimatedSSTables = Math.max(1, SSTableReader.getTotalBytes(nonExpiredSSTables) / maxSSTableSize);
1:         keysPerSSTable = estimatedTotalKeys / estimatedSSTables;
/////////////////////////////////////////////////////////////////////////
1:             switchCompactionLocation(sstableDirectory);
1:     @Override
1:     public void switchCompactionLocation(Directories.DataDirectory location)
1:         this.sstableDirectory = location;
1:         averageEstimatedKeysPerSSTable = Math.round(((double) averageEstimatedKeysPerSSTable * sstablesWritten + partitionsWritten) / (sstablesWritten + 1));
1:         sstableWriter.switchWriter(SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(sstableDirectory))),
1:                 keysPerSSTable,
1:                 minRepairedAt,
1:                 cfs.metadata,
1:                 new MetadataCollector(txn.originals(), cfs.metadata.comparator, currentLevel),
1:                 SerializationHeader.make(cfs.metadata, txn.originals()),
1:                 cfs.indexManager.listIndexes(),
1:                 txn));
1:         partitionsWritten = 0;
1:         sstablesWritten = 0;
1: 
1:     }
1: 
1:     @Override
0:     public List<SSTableReader> finish(long repairedAt)
1:     {
0:         return sstableWriter.setRepairedAt(repairedAt).finish();
commit:910170c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction.writers;
1: 
0: import java.io.File;
0: import java.util.Collections;
0: import java.util.List;
1: import java.util.Set;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.RowIndexEntry;
0: import org.apache.cassandra.db.compaction.AbstractCompactedRow;
0: import org.apache.cassandra.db.compaction.CompactionTask;
1: import org.apache.cassandra.db.compaction.LeveledManifest;
0: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.SSTableRewriter;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1: 
1: public class MajorLeveledCompactionWriter extends CompactionAwareWriter
1: {
0:     private static final Logger logger = LoggerFactory.getLogger(MajorLeveledCompactionWriter.class);
0:     private final SSTableRewriter rewriter;
1:     private final long maxSSTableSize;
0:     private final long expectedWriteSize;
0:     private final Set<SSTableReader> allSSTables;
1:     private int currentLevel = 1;
1:     private long averageEstimatedKeysPerSSTable;
1:     private long partitionsWritten = 0;
1:     private long totalWrittenInLevel = 0;
1:     private int sstablesWritten = 0;
0:     private final boolean skipAncestors;
1: 
0:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables, long maxSSTableSize, boolean offline, OperationType compactionType)
1:     {
0:         super(cfs, nonExpiredSSTables);
1:         this.maxSSTableSize = maxSSTableSize;
0:         this.allSSTables = allSSTables;
0:         rewriter = new SSTableRewriter(cfs, allSSTables, CompactionTask.getMaxDataAge(nonExpiredSSTables), offline);
0:         expectedWriteSize = Math.min(maxSSTableSize, cfs.getExpectedCompactedFileSize(nonExpiredSSTables, compactionType));
0:         long estimatedSSTables = Math.max(1, SSTableReader.getTotalBytes(nonExpiredSSTables) / maxSSTableSize);
0:         long keysPerSSTable = estimatedTotalKeys / estimatedSSTables;
0:         File sstableDirectory = cfs.directories.getLocationForDisk(getWriteDirectory(expectedWriteSize));
0:         skipAncestors = estimatedSSTables * allSSTables.size() > 200000; // magic number, avoid storing too much ancestor information since allSSTables are ancestors to *all* resulting sstables
1: 
0:         if (skipAncestors)
0:             logger.warn("Many sstables involved in compaction, skipping storing ancestor information to avoid running out of memory");
1: 
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getTempSSTablePath(sstableDirectory)),
0:                                                     keysPerSSTable,
0:                                                     minRepairedAt,
0:                                                     cfs.metadata,
0:                                                     cfs.partitioner,
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel, skipAncestors));
0:         rewriter.switchWriter(writer);
1:     }
1: 
0:     @Override
0:     public boolean append(AbstractCompactedRow row)
1:     {
0:         long posBefore = rewriter.currentWriter().getOnDiskFilePointer();
0:         RowIndexEntry rie = rewriter.append(row);
0:         totalWrittenInLevel += rewriter.currentWriter().getOnDiskFilePointer() - posBefore;
1:         partitionsWritten++;
0:         if (rewriter.currentWriter().getOnDiskFilePointer() > maxSSTableSize)
1:         {
0:             if (totalWrittenInLevel > LeveledManifest.maxBytesForLevel(currentLevel, maxSSTableSize))
1:             {
1:                 totalWrittenInLevel = 0;
1:                 currentLevel++;
1:             }
1: 
0:             averageEstimatedKeysPerSSTable = Math.round(((double) averageEstimatedKeysPerSSTable * sstablesWritten + partitionsWritten) / (sstablesWritten + 1));
0:             File sstableDirectory = cfs.directories.getLocationForDisk(getWriteDirectory(expectedWriteSize));
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getTempSSTablePath(sstableDirectory)),
0:                                                         averageEstimatedKeysPerSSTable,
0:                                                         minRepairedAt,
0:                                                         cfs.metadata,
0:                                                         cfs.partitioner,
0:                                                         new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel, skipAncestors));
0:             rewriter.switchWriter(writer);
0:             partitionsWritten = 0;
0:             sstablesWritten++;
1:         }
1:         return rie != null;
1: 
1:     }
1: 
0:     @Override
0:     public void abort()
1:     {
0:         rewriter.abort();
1:     }
1: 
0:     @Override
0:     public List<SSTableReader> finish()
1:     {
0:         return rewriter.finish();
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
0:                                                     cfs.indexManager.listIndexes(),
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
1:                                         Directories directories,
0:         this(cfs, directories, txn, nonExpiredSSTables, maxSSTableSize, false, false);
1:                                         Directories directories,
0:         super(cfs, directories, txn, nonExpiredSSTables, offline, keepOriginals);
1:     public boolean realAppend(UnfilteredRowIterator partition)
/////////////////////////////////////////////////////////////////////////
0:             switchCompactionLocation(getWriteDirectory(expectedWriteSize));
0: 
0:     public void switchCompactionLocation(Directories.DataDirectory directory)
0:     {
0:         File sstableDirectory = getDirectories().getLocationForDisk(directory);
1:         @SuppressWarnings("resource")
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
0:                                                     averageEstimatedKeysPerSSTable,
0:                                                     minRepairedAt,
0:                                                     cfs.metadata,
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel),
0:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
0:                                                     txn);
0:         sstableWriter.switchWriter(writer);
0:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:5726625
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel),
/////////////////////////////////////////////////////////////////////////
0:                                                         new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel),
commit:605bcdc
/////////////////////////////////////////////////////////////////////////
1:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:                                         LifecycleTransaction txn,
1:                                         Set<SSTableReader> nonExpiredSSTables,
1:                                         long maxSSTableSize)
0:         this(cfs, txn, nonExpiredSSTables, maxSSTableSize, false, false);
0:     }
0: 
0:     @SuppressWarnings("resource")
1:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs,
1:                                         LifecycleTransaction txn,
1:                                         Set<SSTableReader> nonExpiredSSTables,
1:                                         long maxSSTableSize,
1:                                         boolean offline,
1:                                         boolean keepOriginals)
0:     {
0:         super(cfs, txn, nonExpiredSSTables, offline, keepOriginals);
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, long maxSSTableSize, boolean offline)
0:         expectedWriteSize = Math.min(maxSSTableSize, cfs.getExpectedCompactedFileSize(nonExpiredSSTables, txn.opType()));
/////////////////////////////////////////////////////////////////////////
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
0:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
0:                                                     txn);
/////////////////////////////////////////////////////////////////////////
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
0:                                                         SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
0:                                                         txn);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                                                     cfs.partitioner,
/////////////////////////////////////////////////////////////////////////
0:                                                         cfs.partitioner,
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
/////////////////////////////////////////////////////////////////////////
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel, skipAncestors),
0:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables));
0:     public boolean append(UnfilteredRowIterator partition)
1:         RowIndexEntry rie = sstableWriter.append(partition);
/////////////////////////////////////////////////////////////////////////
0:                                                         new MetadataCollector(allSSTables, cfs.metadata.comparator, currentLevel, skipAncestors),
0:                                                         SerializationHeader.make(cfs.metadata, nonExpiredSSTables));
/////////////////////////////////////////////////////////////////////////
0: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource")
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
/////////////////////////////////////////////////////////////////////////
0:     public MajorLeveledCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, long maxSSTableSize, boolean offline, OperationType compactionType)
0:         super(cfs, txn, nonExpiredSSTables, offline);
0:         this.allSSTables = txn.originals();
commit:8704006
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super(cfs, allSSTables, nonExpiredSSTables, offline);
/////////////////////////////////////////////////////////////////////////
0:         sstableWriter.switchWriter(writer);
0:         long posBefore = sstableWriter.currentWriter().getOnDiskFilePointer();
0:         RowIndexEntry rie = sstableWriter.append(row);
0:         totalWrittenInLevel += sstableWriter.currentWriter().getOnDiskFilePointer() - posBefore;
0:         if (sstableWriter.currentWriter().getOnDiskFilePointer() > maxSSTableSize)
/////////////////////////////////////////////////////////////////////////
0:             sstableWriter.switchWriter(writer);
============================================================================