1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.net;
1:d43b9ce: 
1:d43b9ce: import java.net.InetAddress;
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: 
1:d43b9ce: import com.google.common.util.concurrent.RateLimiter;
1:d43b9ce: 
1:d43b9ce: import org.apache.cassandra.utils.SlidingTimeRate;
1:d43b9ce: import org.apache.cassandra.utils.TimeSource;
1:d43b9ce: import org.apache.cassandra.utils.concurrent.IntervalLock;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * The rate-based back-pressure state, tracked per replica host.
1:d43b9ce:  * <br/><br/>
1:d43b9ce:  *
1:d43b9ce:  * This back-pressure state is made up of the following attributes:
1:d43b9ce:  * <ul>
1:d43b9ce:  * <li>windowSize: the length of the back-pressure window in milliseconds.</li>
1:d43b9ce:  * <li>incomingRate: the rate of back-pressure supporting incoming messages.</li>
1:d43b9ce:  * <li>outgoingRate: the rate of back-pressure supporting outgoing messages.</li>
1:d43b9ce:  * <li>rateLimiter: the rate limiter to eventually apply to outgoing messages.</li>
1:d43b9ce:  * </ul>
1:d43b9ce:  * <br/>
1:d43b9ce:  * The incomingRate and outgoingRate are updated together when a response is received to guarantee consistency between
1:d43b9ce:  * the two.
1:d43b9ce:  * <br/>
1:d43b9ce:  * It also provides methods to exclusively lock/release back-pressure windows at given intervals;
1:d43b9ce:  * this allows to apply back-pressure even under concurrent modifications. Please also note a read lock is acquired
1:d43b9ce:  * during response processing so that no concurrent rate updates can screw rate computations.
1:d43b9ce:  */
1:d43b9ce: class RateBasedBackPressureState extends IntervalLock implements BackPressureState
1:d43b9ce: {
1:d43b9ce:     private final InetAddress host;
1:d43b9ce:     final SlidingTimeRate incomingRate;
1:d43b9ce:     final SlidingTimeRate outgoingRate;
1:d43b9ce:     final RateLimiter rateLimiter;
1:d43b9ce: 
1:d43b9ce:     RateBasedBackPressureState(InetAddress host, TimeSource timeSource, long windowSize)
1:d43b9ce:     {
1:d43b9ce:         super(timeSource);
1:d43b9ce:         this.host = host;
1:7efe1cc:         this.incomingRate = new SlidingTimeRate(timeSource, windowSize, windowSize / 10, TimeUnit.MILLISECONDS);
1:7efe1cc:         this.outgoingRate = new SlidingTimeRate(timeSource, windowSize, windowSize / 10, TimeUnit.MILLISECONDS);
1:d43b9ce:         this.rateLimiter = RateLimiter.create(Double.POSITIVE_INFINITY);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public void onMessageSent(MessageOut<?> message) {}
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public void onResponseReceived()
1:d43b9ce:     {
1:d43b9ce:         readLock().lock();
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             incomingRate.update(1);
1:d43b9ce:             outgoingRate.update(1);
1:d43b9ce:         }
1:d43b9ce:         finally
1:d43b9ce:         {
1:d43b9ce:             readLock().unlock();
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public void onResponseTimeout()
1:d43b9ce:     {
1:d43b9ce:         readLock().lock();
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             outgoingRate.update(1);
1:d43b9ce:         }
1:d43b9ce:         finally
1:d43b9ce:         {
1:d43b9ce:             readLock().unlock();
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public double getBackPressureRateLimit()
1:d43b9ce:     {
1:d43b9ce:         return rateLimiter.getRate();
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public InetAddress getHost()
1:d43b9ce:     {
1:d43b9ce:         return host;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public boolean equals(Object obj)
1:d43b9ce:     {
1:d43b9ce:         if (obj instanceof RateBasedBackPressureState)
1:d43b9ce:         {
1:d43b9ce:             RateBasedBackPressureState other = (RateBasedBackPressureState) obj;
1:d43b9ce:             return this.host.equals(other.host);
1:d43b9ce:         }
1:d43b9ce:         return false;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public int hashCode()
1:d43b9ce:     {
1:d43b9ce:         return this.host.hashCode();
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public String toString()
1:d43b9ce:     {
1:d43b9ce:         return String.format("[host: %s, incoming rate: %.3f, outgoing rate: %.3f, rate limit: %.3f]",
1:d43b9ce:                              host, incomingRate.get(TimeUnit.SECONDS), outgoingRate.get(TimeUnit.SECONDS), rateLimiter.getRate());
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7efe1cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         this.incomingRate = new SlidingTimeRate(timeSource, windowSize, windowSize / 10, TimeUnit.MILLISECONDS);
1:         this.outgoingRate = new SlidingTimeRate(timeSource, windowSize, windowSize / 10, TimeUnit.MILLISECONDS);
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.net.InetAddress;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.util.concurrent.RateLimiter;
1: 
1: import org.apache.cassandra.utils.SlidingTimeRate;
1: import org.apache.cassandra.utils.TimeSource;
1: import org.apache.cassandra.utils.concurrent.IntervalLock;
1: 
1: /**
1:  * The rate-based back-pressure state, tracked per replica host.
1:  * <br/><br/>
1:  *
1:  * This back-pressure state is made up of the following attributes:
1:  * <ul>
1:  * <li>windowSize: the length of the back-pressure window in milliseconds.</li>
1:  * <li>incomingRate: the rate of back-pressure supporting incoming messages.</li>
1:  * <li>outgoingRate: the rate of back-pressure supporting outgoing messages.</li>
1:  * <li>rateLimiter: the rate limiter to eventually apply to outgoing messages.</li>
1:  * </ul>
1:  * <br/>
1:  * The incomingRate and outgoingRate are updated together when a response is received to guarantee consistency between
1:  * the two.
1:  * <br/>
1:  * It also provides methods to exclusively lock/release back-pressure windows at given intervals;
1:  * this allows to apply back-pressure even under concurrent modifications. Please also note a read lock is acquired
1:  * during response processing so that no concurrent rate updates can screw rate computations.
1:  */
1: class RateBasedBackPressureState extends IntervalLock implements BackPressureState
1: {
1:     private final InetAddress host;
0:     private final long windowSize;
1:     final SlidingTimeRate incomingRate;
1:     final SlidingTimeRate outgoingRate;
1:     final RateLimiter rateLimiter;
1: 
1:     RateBasedBackPressureState(InetAddress host, TimeSource timeSource, long windowSize)
1:     {
1:         super(timeSource);
1:         this.host = host;
0:         this.windowSize = windowSize;
0:         this.incomingRate = new SlidingTimeRate(timeSource, this.windowSize, this.windowSize / 10, TimeUnit.MILLISECONDS);
0:         this.outgoingRate = new SlidingTimeRate(timeSource, this.windowSize, this.windowSize / 10, TimeUnit.MILLISECONDS);
1:         this.rateLimiter = RateLimiter.create(Double.POSITIVE_INFINITY);
1:     }
1: 
1:     @Override
1:     public void onMessageSent(MessageOut<?> message) {}
1: 
1:     @Override
1:     public void onResponseReceived()
1:     {
1:         readLock().lock();
1:         try
1:         {
1:             incomingRate.update(1);
1:             outgoingRate.update(1);
1:         }
1:         finally
1:         {
1:             readLock().unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public void onResponseTimeout()
1:     {
1:         readLock().lock();
1:         try
1:         {
1:             outgoingRate.update(1);
1:         }
1:         finally
1:         {
1:             readLock().unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public double getBackPressureRateLimit()
1:     {
1:         return rateLimiter.getRate();
1:     }
1: 
1:     @Override
1:     public InetAddress getHost()
1:     {
1:         return host;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj)
1:     {
1:         if (obj instanceof RateBasedBackPressureState)
1:         {
1:             RateBasedBackPressureState other = (RateBasedBackPressureState) obj;
1:             return this.host.equals(other.host);
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return this.host.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("[host: %s, incoming rate: %.3f, outgoing rate: %.3f, rate limit: %.3f]",
1:                              host, incomingRate.get(TimeUnit.SECONDS), outgoingRate.get(TimeUnit.SECONDS), rateLimiter.getRate());
1:     }
1: }
============================================================================