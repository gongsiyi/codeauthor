1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:a991b64: 
1:2457599: import java.security.MessageDigest;
1:2457599: import java.util.Comparator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:2457599: import org.apache.cassandra.db.DeletionPurger;
1:2457599: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:2457599: import org.apache.cassandra.serializers.MarshalException;
1:a991b64: 
1:2457599: /**
1:2457599:  * Generic interface for the data of a given column (inside a row).
1:2457599:  *
1:2457599:  * In practice, there is only 2 implementations of this: either {@link Cell} for simple columns
1:2457599:  * or {@code ComplexColumnData} for complex columns.
1:2457599:  */
1:639d4b2: public abstract class ColumnData
5:a991b64: {
1:2457599:     public static final Comparator<ColumnData> comparator = (cd1, cd2) -> cd1.column().compareTo(cd2.column());
1:a991b64: 
1:639d4b2:     protected final ColumnDefinition column;
1:639d4b2:     protected ColumnData(ColumnDefinition column)
1:a991b64:     {
1:a991b64:         this.column = column;
5:a991b64:     }
1:a991b64: 
1:2457599:     /**
1:2457599:      * The column this is data for.
1:2457599:      *
1:2457599:      * @return the column this is a data for.
1:2457599:      */
1:639d4b2:     public final ColumnDefinition column() { return column; }
1:a991b64: 
1:2457599:     /**
1:2457599:      * The size of the data hold by this {@code ColumnData}.
1:2457599:      *
1:2457599:      * @return the size used by the data of this {@code ColumnData}.
1:2457599:      */
1:639d4b2:     public abstract int dataSize();
1:a991b64: 
1:639d4b2:     public abstract long unsharedHeapSizeExcludingData();
1:a991b64: 
1:2457599:     /**
1:2457599:      * Validate the column data.
1:2457599:      *
1:2457599:      * @throws MarshalException if the data is not valid.
1:2457599:      */
1:639d4b2:     public abstract void validate();
1:a991b64: 
1:2457599:     /**
1:2457599:      * Adds the data to the provided digest.
1:2457599:      *
1:2457599:      * @param digest the {@code MessageDigest} to add the data to.
1:2457599:      */
1:639d4b2:     public abstract void digest(MessageDigest digest);
1:2457599: 
1:2457599:     /**
1:2457599:      * Returns a copy of the data where all timestamps for live data have replaced by {@code newTimestamp} and
1:2457599:      * all deletion timestamp by {@code newTimestamp - 1}.
1:2457599:      *
1:2457599:      * This exists for the Paxos path, see {@link PartitionUpdate#updateAllTimestamp} for additional details.
1:2457599:      */
1:639d4b2:     public abstract ColumnData updateAllTimestamp(long newTimestamp);
1:2457599: 
1:639d4b2:     public abstract ColumnData markCounterLocalToBeCleared();
1:2457599: 
1:639d4b2:     public abstract ColumnData purge(DeletionPurger purger, int nowInSec);
1:86ba227: 
1:86ba227:     public abstract long maxTimestamp();
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:86ba227
/////////////////////////////////////////////////////////////////////////
1: 
1:     public abstract long maxTimestamp();
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import java.security.MessageDigest;
1: import java.util.Comparator;
1: import org.apache.cassandra.db.DeletionPurger;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.serializers.MarshalException;
1: /**
1:  * Generic interface for the data of a given column (inside a row).
1:  *
1:  * In practice, there is only 2 implementations of this: either {@link Cell} for simple columns
1:  * or {@code ComplexColumnData} for complex columns.
1:  */
0: public interface ColumnData
1:     public static final Comparator<ColumnData> comparator = (cd1, cd2) -> cd1.column().compareTo(cd2.column());
0:     // A comparator for the cells of the *similar* ColumnData, i.e. one that assumes the cells are all for the same column.
0:     public static final Comparator<Cell> cellComparator = (c1, c2) -> c1.column().cellPathComparator().compare(c1.path(), c2.path());
1:     /**
1:      * The column this is data for.
1:      *
1:      * @return the column this is a data for.
1:      */
0:     public ColumnDefinition column();
1:     /**
1:      * The size of the data hold by this {@code ColumnData}.
1:      *
1:      * @return the size used by the data of this {@code ColumnData}.
1:      */
0:     public int dataSize();
0:     public long unsharedHeapSizeExcludingData();
1:     /**
1:      * Validate the column data.
1:      *
1:      * @throws MarshalException if the data is not valid.
1:      */
0:     public void validate();
1:     /**
1:      * Adds the data to the provided digest.
1:      *
1:      * @param digest the {@code MessageDigest} to add the data to.
1:      */
0:     public void digest(MessageDigest digest);
1: 
1:     /**
1:      * Returns a copy of the data where all timestamps for live data have replaced by {@code newTimestamp} and
1:      * all deletion timestamp by {@code newTimestamp - 1}.
1:      *
1:      * This exists for the Paxos path, see {@link PartitionUpdate#updateAllTimestamp} for additional details.
1:      */
0:     public ColumnData updateAllTimestamp(long newTimestamp);
1: 
0:     public ColumnData markCounterLocalToBeCleared();
1: 
0:     public ColumnData purge(DeletionPurger purger, int nowInSec);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.util.Iterator;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.db.DeletionTime;
1: 
0: public class ColumnData
1: {
0:     private final ColumnDefinition column;
0:     private final Cell cell;
0:     private final Iterator<Cell> cells;
0:     private final DeletionTime complexDeletion;
1: 
0:     ColumnData(ColumnDefinition column, Cell cell, Iterator<Cell> cells, DeletionTime complexDeletion)
1:     {
0:         assert column != null && (cell != null || (column.isComplex() && cells != null && complexDeletion != null));
1: 
1:         this.column = column;
0:         this.cell = cell;
0:         this.cells = cells;
0:         this.complexDeletion = complexDeletion;
1:     }
1: 
0:     public ColumnDefinition column()
1:     {
0:         return column;
1:     }
1: 
0:     public Cell cell()
1:     {
0:         return cell;
1:     }
1: 
0:     public Iterator<Cell> cells()
1:     {
0:         return cells;
1:     }
1: 
0:     public DeletionTime complexDeletion()
1:     {
0:         return complexDeletion;
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
1: public abstract class ColumnData
1:     protected final ColumnDefinition column;
1:     protected ColumnData(ColumnDefinition column)
0:     {
0:         this.column = column;
0:     }
1:     public final ColumnDefinition column() { return column; }
1:     public abstract int dataSize();
1:     public abstract long unsharedHeapSizeExcludingData();
1:     public abstract void validate();
1:     public abstract void digest(MessageDigest digest);
/////////////////////////////////////////////////////////////////////////
1:     public abstract ColumnData updateAllTimestamp(long newTimestamp);
1:     public abstract ColumnData markCounterLocalToBeCleared();
1:     public abstract ColumnData purge(DeletionPurger purger, int nowInSec);
============================================================================