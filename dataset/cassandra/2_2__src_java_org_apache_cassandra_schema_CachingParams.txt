1:b31845c: /*
1:b31845c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b31845c:  * or more contributor license agreements.  See the NOTICE file
1:b31845c:  * distributed with this work for additional information
1:b31845c:  * regarding copyright ownership.  The ASF licenses this file
1:b31845c:  * to you under the Apache License, Version 2.0 (the
1:b31845c:  * "License"); you may not use this file except in compliance
1:b31845c:  * with the License.  You may obtain a copy of the License at
1:b31845c:  *
1:b31845c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b31845c:  *
1:b31845c:  * Unless required by applicable law or agreed to in writing, software
1:b31845c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b31845c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b31845c:  * See the License for the specific language governing permissions and
1:b31845c:  * limitations under the License.
1:b31845c:  */
1:b31845c: package org.apache.cassandra.schema;
1:b31845c: 
1:b31845c: import java.util.HashMap;
1:b31845c: import java.util.Map;
1:b31845c: 
1:c0886d8: import com.google.common.annotations.VisibleForTesting;
1:b31845c: import com.google.common.base.Objects;
1:b31845c: import com.google.common.collect.ImmutableMap;
1:b31845c: import org.apache.commons.lang3.StringUtils;
1:b31845c: 
1:b31845c: import org.apache.cassandra.exceptions.ConfigurationException;
1:b31845c: 
1:b31845c: import static java.lang.String.format;
1:b31845c: 
1:b31845c: // CQL: {'keys' : 'ALL'|'NONE', 'rows_per_partition': '200'|'NONE'|'ALL'}
1:b31845c: public final class CachingParams
1:b31845c: {
1:b31845c:     public enum Option
1:b31845c:     {
1:b31845c:         KEYS,
1:b31845c:         ROWS_PER_PARTITION;
1:b31845c: 
1:b31845c:         @Override
1:b31845c:         public String toString()
1:b31845c:         {
1:b31845c:             return name().toLowerCase();
1:b31845c:         }
1:b31845c:     }
1:b31845c: 
1:b31845c:     private static final String ALL = "ALL";
1:b31845c:     private static final String NONE = "NONE";
1:b31845c: 
1:b31845c:     static final boolean DEFAULT_CACHE_KEYS = true;
1:b31845c:     static final int DEFAULT_ROWS_PER_PARTITION_TO_CACHE = 0;
1:b31845c: 
1:b31845c:     public static final CachingParams CACHE_NOTHING = new CachingParams(false, 0);
1:b31845c:     public static final CachingParams CACHE_KEYS = new CachingParams(true, 0);
1:b31845c:     public static final CachingParams CACHE_EVERYTHING = new CachingParams(true, Integer.MAX_VALUE);
1:b31845c: 
1:c0886d8:     @VisibleForTesting
1:c0886d8:     public static CachingParams DEFAULT = new CachingParams(DEFAULT_CACHE_KEYS, DEFAULT_ROWS_PER_PARTITION_TO_CACHE);
1:b31845c: 
1:b31845c:     final boolean cacheKeys;
1:b31845c:     final int rowsPerPartitionToCache;
1:b31845c: 
1:b31845c:     public CachingParams(boolean cacheKeys, int rowsPerPartitionToCache)
1:b31845c:     {
1:b31845c:         this.cacheKeys = cacheKeys;
1:b31845c:         this.rowsPerPartitionToCache = rowsPerPartitionToCache;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public boolean cacheKeys()
1:b31845c:     {
1:b31845c:         return cacheKeys;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public boolean cacheRows()
1:b31845c:     {
1:b31845c:         return rowsPerPartitionToCache > 0;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public boolean cacheAllRows()
1:b31845c:     {
1:b31845c:         return rowsPerPartitionToCache == Integer.MAX_VALUE;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public int rowsPerPartitionToCache()
1:b31845c:     {
1:b31845c:         return rowsPerPartitionToCache;
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static CachingParams fromMap(Map<String, String> map)
1:b31845c:     {
1:b31845c:         Map<String, String> copy = new HashMap<>(map);
1:b31845c: 
1:b31845c:         String keys = copy.remove(Option.KEYS.toString());
1:b31845c:         boolean cacheKeys = keys != null && keysFromString(keys);
1:b31845c: 
1:b31845c:         String rows = copy.remove(Option.ROWS_PER_PARTITION.toString());
1:b31845c:         int rowsPerPartitionToCache = rows == null
1:b31845c:                                     ? 0
1:b31845c:                                     : rowsPerPartitionFromString(rows);
1:b31845c: 
1:b31845c:         if (!copy.isEmpty())
1:b31845c:         {
1:b31845c:             throw new ConfigurationException(format("Invalid caching sub-options %s: only '%s' and '%s' are allowed",
1:b31845c:                                                     copy.keySet(),
1:b31845c:                                                     Option.KEYS,
1:b31845c:                                                     Option.ROWS_PER_PARTITION));
1:b31845c:         }
1:b31845c: 
1:b31845c:         return new CachingParams(cacheKeys, rowsPerPartitionToCache);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public Map<String, String> asMap()
1:b31845c:     {
1:b31845c:         return ImmutableMap.of(Option.KEYS.toString(),
1:b31845c:                                keysAsString(),
1:b31845c:                                Option.ROWS_PER_PARTITION.toString(),
1:b31845c:                                rowsPerPartitionAsString());
1:b31845c:     }
1:b31845c: 
1:b31845c:     private static boolean keysFromString(String value)
1:b31845c:     {
1:b31845c:         if (value.equalsIgnoreCase(ALL))
1:b31845c:             return true;
1:b31845c: 
1:b31845c:         if (value.equalsIgnoreCase(NONE))
1:b31845c:             return false;
1:b31845c: 
1:b31845c:         throw new ConfigurationException(format("Invalid value '%s' for caching sub-option '%s': only '%s' and '%s' are allowed",
1:b31845c:                                                 value,
1:b31845c:                                                 Option.KEYS,
1:b31845c:                                                 ALL,
1:b31845c:                                                 NONE));
1:b31845c:     }
1:b31845c: 
1:b31845c:     String keysAsString()
1:b31845c:     {
1:b31845c:         return cacheKeys ? ALL : NONE;
1:b31845c:     }
1:b31845c: 
1:b31845c:     private static int rowsPerPartitionFromString(String value)
1:b31845c:     {
1:b31845c:         if (value.equalsIgnoreCase(ALL))
1:b31845c:             return Integer.MAX_VALUE;
1:b31845c: 
1:b31845c:         if (value.equalsIgnoreCase(NONE))
1:b31845c:             return 0;
1:b31845c: 
1:b31845c:         if (StringUtils.isNumeric(value))
1:b31845c:             return Integer.parseInt(value);
1:b31845c: 
1:b31845c:         throw new ConfigurationException(format("Invalid value '%s' for caching sub-option '%s':"
1:b31845c:                                                 + " only '%s', '%s', and integer values are allowed",
1:b31845c:                                                 value,
1:b31845c:                                                 Option.ROWS_PER_PARTITION,
1:b31845c:                                                 ALL,
1:b31845c:                                                 NONE));
1:b31845c:     }
1:b31845c: 
1:b31845c:     String rowsPerPartitionAsString()
1:b31845c:     {
1:b31845c:         if (rowsPerPartitionToCache == 0)
1:b31845c:             return NONE;
1:b31845c:         else if (rowsPerPartitionToCache == Integer.MAX_VALUE)
1:b31845c:             return ALL;
1:b31845c:         else
1:b31845c:             return Integer.toString(rowsPerPartitionToCache);
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public String toString()
1:b31845c:     {
1:b31845c:         return format("{'%s' : '%s', '%s' : '%s'}",
1:b31845c:                       Option.KEYS,
1:b31845c:                       keysAsString(),
1:b31845c:                       Option.ROWS_PER_PARTITION,
1:b31845c:                       rowsPerPartitionAsString());
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public boolean equals(Object o)
1:b31845c:     {
1:b31845c:         if (this == o)
1:b31845c:             return true;
1:b31845c: 
1:b31845c:         if (!(o instanceof CachingParams))
1:b31845c:             return false;
1:b31845c: 
1:b31845c:         CachingParams c = (CachingParams) o;
1:b31845c: 
1:b31845c:         return cacheKeys == c.cacheKeys && rowsPerPartitionToCache == c.rowsPerPartitionToCache;
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public int hashCode()
1:b31845c:     {
1:b31845c:         return Objects.hashCode(cacheKeys, rowsPerPartitionToCache);
1:b31845c:     }
1:b31845c: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c0886d8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
/////////////////////////////////////////////////////////////////////////
1:     @VisibleForTesting
1:     public static CachingParams DEFAULT = new CachingParams(DEFAULT_CACHE_KEYS, DEFAULT_ROWS_PER_PARTITION_TO_CACHE);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.base.Objects;
1: import com.google.common.collect.ImmutableMap;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: import static java.lang.String.format;
1: 
1: // CQL: {'keys' : 'ALL'|'NONE', 'rows_per_partition': '200'|'NONE'|'ALL'}
1: public final class CachingParams
1: {
1:     public enum Option
1:     {
1:         KEYS,
1:         ROWS_PER_PARTITION;
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return name().toLowerCase();
1:         }
1:     }
1: 
1:     private static final String ALL = "ALL";
1:     private static final String NONE = "NONE";
1: 
1:     static final boolean DEFAULT_CACHE_KEYS = true;
1:     static final int DEFAULT_ROWS_PER_PARTITION_TO_CACHE = 0;
1: 
1:     public static final CachingParams CACHE_NOTHING = new CachingParams(false, 0);
1:     public static final CachingParams CACHE_KEYS = new CachingParams(true, 0);
1:     public static final CachingParams CACHE_EVERYTHING = new CachingParams(true, Integer.MAX_VALUE);
1: 
0:     static final CachingParams DEFAULT = new CachingParams(DEFAULT_CACHE_KEYS, DEFAULT_ROWS_PER_PARTITION_TO_CACHE);
1: 
1:     final boolean cacheKeys;
1:     final int rowsPerPartitionToCache;
1: 
1:     public CachingParams(boolean cacheKeys, int rowsPerPartitionToCache)
1:     {
1:         this.cacheKeys = cacheKeys;
1:         this.rowsPerPartitionToCache = rowsPerPartitionToCache;
1:     }
1: 
1:     public boolean cacheKeys()
1:     {
1:         return cacheKeys;
1:     }
1: 
1:     public boolean cacheRows()
1:     {
1:         return rowsPerPartitionToCache > 0;
1:     }
1: 
1:     public boolean cacheAllRows()
1:     {
1:         return rowsPerPartitionToCache == Integer.MAX_VALUE;
1:     }
1: 
1:     public int rowsPerPartitionToCache()
1:     {
1:         return rowsPerPartitionToCache;
1:     }
1: 
1:     public static CachingParams fromMap(Map<String, String> map)
1:     {
1:         Map<String, String> copy = new HashMap<>(map);
1: 
1:         String keys = copy.remove(Option.KEYS.toString());
1:         boolean cacheKeys = keys != null && keysFromString(keys);
1: 
1:         String rows = copy.remove(Option.ROWS_PER_PARTITION.toString());
1:         int rowsPerPartitionToCache = rows == null
1:                                     ? 0
1:                                     : rowsPerPartitionFromString(rows);
1: 
1:         if (!copy.isEmpty())
1:         {
1:             throw new ConfigurationException(format("Invalid caching sub-options %s: only '%s' and '%s' are allowed",
1:                                                     copy.keySet(),
1:                                                     Option.KEYS,
1:                                                     Option.ROWS_PER_PARTITION));
1:         }
1: 
1:         return new CachingParams(cacheKeys, rowsPerPartitionToCache);
1:     }
1: 
1:     public Map<String, String> asMap()
1:     {
1:         return ImmutableMap.of(Option.KEYS.toString(),
1:                                keysAsString(),
1:                                Option.ROWS_PER_PARTITION.toString(),
1:                                rowsPerPartitionAsString());
1:     }
1: 
1:     private static boolean keysFromString(String value)
1:     {
1:         if (value.equalsIgnoreCase(ALL))
1:             return true;
1: 
1:         if (value.equalsIgnoreCase(NONE))
1:             return false;
1: 
1:         throw new ConfigurationException(format("Invalid value '%s' for caching sub-option '%s': only '%s' and '%s' are allowed",
1:                                                 value,
1:                                                 Option.KEYS,
1:                                                 ALL,
1:                                                 NONE));
1:     }
1: 
1:     String keysAsString()
1:     {
1:         return cacheKeys ? ALL : NONE;
1:     }
1: 
1:     private static int rowsPerPartitionFromString(String value)
1:     {
1:         if (value.equalsIgnoreCase(ALL))
1:             return Integer.MAX_VALUE;
1: 
1:         if (value.equalsIgnoreCase(NONE))
1:             return 0;
1: 
1:         if (StringUtils.isNumeric(value))
1:             return Integer.parseInt(value);
1: 
1:         throw new ConfigurationException(format("Invalid value '%s' for caching sub-option '%s':"
1:                                                 + " only '%s', '%s', and integer values are allowed",
1:                                                 value,
1:                                                 Option.ROWS_PER_PARTITION,
1:                                                 ALL,
1:                                                 NONE));
1:     }
1: 
1:     String rowsPerPartitionAsString()
1:     {
1:         if (rowsPerPartitionToCache == 0)
1:             return NONE;
1:         else if (rowsPerPartitionToCache == Integer.MAX_VALUE)
1:             return ALL;
1:         else
1:             return Integer.toString(rowsPerPartitionToCache);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return format("{'%s' : '%s', '%s' : '%s'}",
1:                       Option.KEYS,
1:                       keysAsString(),
1:                       Option.ROWS_PER_PARTITION,
1:                       rowsPerPartitionAsString());
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof CachingParams))
1:             return false;
1: 
1:         CachingParams c = (CachingParams) o;
1: 
1:         return cacheKeys == c.cacheKeys && rowsPerPartitionToCache == c.rowsPerPartitionToCache;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(cacheKeys, rowsPerPartitionToCache);
1:     }
1: }
============================================================================