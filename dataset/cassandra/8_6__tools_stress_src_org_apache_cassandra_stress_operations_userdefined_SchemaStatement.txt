1:7536429: package org.apache.cassandra.stress.operations.userdefined;
1:0bc9841: /*
1:0bc9841:  * 
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  * 
1:0bc9841:  */
8:7536429: 
1:7536429: import java.nio.ByteBuffer;
1:7536429: import java.util.ArrayList;
1:7536429: import java.util.List;
1:7536429: 
1:7536429: import com.datastax.driver.core.BoundStatement;
1:7536429: import com.datastax.driver.core.ColumnDefinitions;
1:b03ce9f: import com.datastax.driver.core.DataType;
1:b03ce9f: import com.datastax.driver.core.LocalDate;
1:7536429: import com.datastax.driver.core.PreparedStatement;
1:7536429: import org.apache.cassandra.db.ConsistencyLevel;
1:7536429: import org.apache.cassandra.stress.generate.Row;
1:f27ab29: import org.apache.cassandra.stress.operations.PartitionOperation;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:7536429: import org.apache.cassandra.stress.settings.StressSettings;
1:4646014: import org.apache.cassandra.stress.util.JavaDriverClient;
1:7536429: 
1:f27ab29: public abstract class SchemaStatement extends PartitionOperation
12:7536429: {
1:0580fb2:     final PreparedStatement statement;
1:7536429:     final Integer thriftId;
1:7536429:     final ConsistencyLevel cl;
1:0580fb2:     final int[] argumentIndex;
1:0580fb2:     final Object[] bindBuffer;
1:b03ce9f:     final ColumnDefinitions definitions;
1:7536429: 
1:6c579a0:     public SchemaStatement(Timer timer, StressSettings settings, DataSpec spec,
1:47d3b7e:                            PreparedStatement statement, List<String> bindNames, Integer thriftId, ConsistencyLevel cl)
1:7536429:     {
1:6c579a0:         super(timer, settings, spec);
1:7536429:         this.statement = statement;
1:7536429:         this.thriftId = thriftId;
1:7536429:         this.cl = cl;
1:47d3b7e:         argumentIndex = new int[bindNames.size()];
1:7536429:         bindBuffer = new Object[argumentIndex.length];
1:47d3b7e:         definitions = statement != null ? statement.getVariables() : null;
1:7536429:         int i = 0;
1:47d3b7e:         for (String name : bindNames)
1:47d3b7e:             argumentIndex[i++] = spec.partitionGenerator.indexOf(name);
1:4646014: 
1:47d3b7e:         if (statement != null)
1:47d3b7e:             statement.setConsistencyLevel(JavaDriverClient.from(cl));
12:7536429:     }
1:7536429: 
1:7536429:     BoundStatement bindRow(Row row)
1:7536429:     {
1:47d3b7e:         assert statement != null;
1:47d3b7e: 
4:7536429:         for (int i = 0 ; i < argumentIndex.length ; i++)
1:0580fb2:         {
1:b03ce9f:             Object value = row.get(argumentIndex[i]);
1:b03ce9f:             if (definitions.getType(i).getName().equals(DataType.date().getName()))
1:b03ce9f:             {
1:b03ce9f:                 // the java driver only accepts com.datastax.driver.core.LocalDate for CQL type "DATE"
1:b03ce9f:                 value= LocalDate.fromDaysSinceEpoch((Integer) value);
1:b03ce9f:             }
1:b03ce9f:             bindBuffer[i] = value;
1:6c579a0:             if (bindBuffer[i] == null && !spec.partitionGenerator.permitNulls(argumentIndex[i]))
1:0580fb2:                 throw new IllegalStateException();
1:0580fb2:         }
2:7536429:         return statement.bind(bindBuffer);
1:7536429:     }
1:7536429: 
1:7536429:     List<ByteBuffer> thriftRowArgs(Row row)
1:7536429:     {
2:7536429:         List<ByteBuffer> args = new ArrayList<>();
1:7536429:         for (int i : argumentIndex)
1:6c579a0:             args.add(spec.partitionGenerator.convert(i, row.get(i)));
2:7536429:         return args;
1:7536429:     }
1:7536429: 
1:7536429:     abstract class Runner implements RunOp
1:7536429:     {
1:7536429:         int partitionCount;
1:7536429:         int rowCount;
1:7536429: 
2:7536429:         @Override
1:7536429:         public int partitionCount()
1:7536429:         {
1:7536429:             return partitionCount;
1:7536429:         }
1:7536429: 
1:7536429:         @Override
1:7536429:         public int rowCount()
1:7536429:         {
1:7536429:             return rowCount;
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                            PreparedStatement statement, List<String> bindNames, Integer thriftId, ConsistencyLevel cl)
1:         argumentIndex = new int[bindNames.size()];
1:         definitions = statement != null ? statement.getVariables() : null;
1:         for (String name : bindNames)
1:             argumentIndex[i++] = spec.partitionGenerator.indexOf(name);
1:         if (statement != null)
1:             statement.setConsistencyLevel(JavaDriverClient.from(cl));
1:         assert statement != null;
1: 
commit:4646014
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.JavaDriverClient;
/////////////////////////////////////////////////////////////////////////
1: 
0:         statement.setConsistencyLevel(JavaDriverClient.from(cl));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.operations.PartitionOperation;
1: public abstract class SchemaStatement extends PartitionOperation
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.operations.PartitionOperation;
0: public abstract class SchemaStatement extends PartitionOperation
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:ZhaoYang
-------------------------------------------------------------------------------
commit:b03ce9f
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.DataType;
1: import com.datastax.driver.core.LocalDate;
/////////////////////////////////////////////////////////////////////////
1:     final ColumnDefinitions definitions;
/////////////////////////////////////////////////////////////////////////
0:         definitions = statement.getVariables();
0:         for (ColumnDefinitions.Definition definition : definitions)
/////////////////////////////////////////////////////////////////////////
1:             Object value = row.get(argumentIndex[i]);
1:             if (definitions.getType(i).getName().equals(DataType.date().getName()))
1:             {
1:                 // the java driver only accepts com.datastax.driver.core.LocalDate for CQL type "DATE"
1:                 value= LocalDate.fromDaysSinceEpoch((Integer) value);
1:             }
1:             bindBuffer[i] = value;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                            PreparedStatement statement, Integer thriftId, ConsistencyLevel cl)
/////////////////////////////////////////////////////////////////////////
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public SchemaStatement(Timer timer, StressSettings settings, DataSpec spec,
1:         super(timer, settings, spec);
/////////////////////////////////////////////////////////////////////////
0:             argumentIndex[i++] = spec.partitionGenerator.indexOf(definition.getName());
/////////////////////////////////////////////////////////////////////////
1:             if (bindBuffer[i] == null && !spec.partitionGenerator.permitNulls(argumentIndex[i]))
/////////////////////////////////////////////////////////////////////////
1:             args.add(spec.partitionGenerator.convert(i, row.get(i)));
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     final PreparedStatement statement;
1:     final int[] argumentIndex;
1:     final Object[] bindBuffer;
/////////////////////////////////////////////////////////////////////////
1:         {
0:             if (bindBuffer[i] == null && !generator.permitNulls(argumentIndex[i]))
1:                 throw new IllegalStateException();
1:         }
/////////////////////////////////////////////////////////////////////////
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.operations.userdefined;
1: 
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
0: import java.util.Random;
1: 
1: import com.datastax.driver.core.BoundStatement;
1: import com.datastax.driver.core.ColumnDefinitions;
1: import com.datastax.driver.core.PreparedStatement;
0: import com.datastax.driver.core.ResultSet;
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.stress.Operation;
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.Partition;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.generate.Row;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.settings.ValidationType;
0: import org.apache.cassandra.stress.util.JavaDriverClient;
0: import org.apache.cassandra.stress.util.ThriftClient;
0: import org.apache.cassandra.stress.util.Timer;
0: import org.apache.cassandra.thrift.CqlResult;
0: import org.apache.cassandra.transport.SimpleClient;
1: 
0: public abstract class SchemaStatement extends Operation
1: {
1: 
0:     final PartitionGenerator generator;
0:     private final PreparedStatement statement;
1:     final Integer thriftId;
1:     final ConsistencyLevel cl;
0:     final ValidationType validationType;
0:     private final int[] argumentIndex;
0:     private final Object[] bindBuffer;
0:     private final Object[][] randomBuffer;
0:     private final Random random = new Random();
1: 
0:     public SchemaStatement(Timer timer, PartitionGenerator generator, StressSettings settings, Distribution partitionCount,
0:                            PreparedStatement statement, Integer thriftId, ConsistencyLevel cl, ValidationType validationType)
1:     {
0:         super(timer, generator, settings, partitionCount);
0:         this.generator = generator;
1:         this.statement = statement;
1:         this.thriftId = thriftId;
1:         this.cl = cl;
0:         this.validationType = validationType;
0:         argumentIndex = new int[statement.getVariables().size()];
1:         bindBuffer = new Object[argumentIndex.length];
0:         randomBuffer = new Object[argumentIndex.length][argumentIndex.length];
1:         int i = 0;
0:         for (ColumnDefinitions.Definition definition : statement.getVariables())
0:             argumentIndex[i++] = generator.indexOf(definition.getName());
1:     }
1: 
0:     private int filLRandom(Partition partition)
1:     {
0:         int c = 0;
0:         for (Row row : partition.iterator(randomBuffer.length).batch(1f))
1:         {
0:             Object[] randomRow = randomBuffer[c++];
1:             for (int i = 0 ; i < argumentIndex.length ; i++)
0:                 randomRow[i] = row.get(argumentIndex[i]);
0:             if (c >= randomBuffer.length)
0:                 break;
1:         }
0:         return c;
1:     }
1: 
0:     BoundStatement bindRandom(Partition partition)
1:     {
0:         int c = filLRandom(partition);
1:         for (int i = 0 ; i < argumentIndex.length ; i++)
1:         {
0:             int argIndex = argumentIndex[i];
0:             bindBuffer[i] = randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i];
1:         }
1:         return statement.bind(bindBuffer);
1:     }
1: 
1:     BoundStatement bindRow(Row row)
1:     {
1:         for (int i = 0 ; i < argumentIndex.length ; i++)
0:             bindBuffer[i] = row.get(argumentIndex[i]);
1:         return statement.bind(bindBuffer);
1:     }
1: 
1:     List<ByteBuffer> thriftRowArgs(Row row)
1:     {
1:         List<ByteBuffer> args = new ArrayList<>();
1:         for (int i : argumentIndex)
0:             args.add(generator.convert(i, row.get(i)));
1:         return args;
1:     }
1: 
0:     List<ByteBuffer> thriftRandomArgs(Partition partition)
1:     {
1:         List<ByteBuffer> args = new ArrayList<>();
0:         int c = filLRandom(partition);
1:         for (int i = 0 ; i < argumentIndex.length ; i++)
1:         {
0:             int argIndex = argumentIndex[i];
0:             args.add(generator.convert(argIndex, randomBuffer[argIndex < 0 ? 0 : random.nextInt(c)][i]));
1:         }
1:         return args;
1:     }
1: 
0:     void validate(ResultSet rs)
1:     {
0:         switch (validationType)
1:         {
0:             case NOT_FAIL:
0:                 return;
0:             case NON_ZERO:
0:                 if (rs.all().size() == 0)
0:                     throw new IllegalStateException("Expected non-zero results");
0:                 break;
0:             default:
0:                 throw new IllegalStateException("Unsupported validation type");
1:         }
1:     }
1: 
0:     void validate(CqlResult rs)
1:     {
0:         switch (validationType)
1:         {
0:             case NOT_FAIL:
0:                 return;
0:             case NON_ZERO:
0:                 if (rs.getRowsSize() == 0)
0:                     throw new IllegalStateException("Expected non-zero results");
0:                 break;
0:             default:
0:                 throw new IllegalStateException("Unsupported validation type");
1:         }
1:     }
1: 
1:     @Override
0:     public void run(SimpleClient client) throws IOException
1:     {
0:         throw new UnsupportedOperationException();
1:     }
1: 
1:     abstract class Runner implements RunOp
1:     {
1:         int partitionCount;
1:         int rowCount;
1: 
1:         @Override
1:         public int partitionCount()
1:         {
1:             return partitionCount;
1:         }
1: 
1:         @Override
1:         public int rowCount()
1:         {
1:             return rowCount;
1:         }
1:     }
1: 
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
0: 
============================================================================