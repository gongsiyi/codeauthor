1:e2a0d75: /*
1:e2a0d75:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2a0d75:  * or more contributor license agreements.  See the NOTICE file
1:e2a0d75:  * distributed with this work for additional information
1:e2a0d75:  * regarding copyright ownership.  The ASF licenses this file
1:e2a0d75:  * to you under the Apache License, Version 2.0 (the
1:e2a0d75:  * "License"); you may not use this file except in compliance
1:e2a0d75:  * with the License.  You may obtain a copy of the License at
1:e2a0d75:  *
1:e2a0d75:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2a0d75:  *
1:e2a0d75:  * Unless required by applicable law or agreed to in writing, software
1:e2a0d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2a0d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2a0d75:  * See the License for the specific language governing permissions and
1:e2a0d75:  * limitations under the License.
1:e2a0d75:  */
1:e2a0d75: 
1:e2a0d75: package org.apache.cassandra.dht.tokenallocator;
1:e2a0d75: 
1:e2a0d75: import java.util.ArrayList;
1:e2a0d75: import java.util.Collection;
1:e2a0d75: import java.util.HashSet;
1:e2a0d75: import java.util.Iterator;
1:e2a0d75: import java.util.List;
1:e2a0d75: import java.util.Map;
1:e2a0d75: import java.util.NavigableMap;
1:e2a0d75: import java.util.PriorityQueue;
1:e2a0d75: import java.util.Queue;
1:e2a0d75: import java.util.Set;
1:e2a0d75: 
1:e2a0d75: import com.google.common.collect.Lists;
1:e2a0d75: import com.google.common.collect.Maps;
1:e2a0d75: import com.google.common.collect.Queues;
1:e2a0d75: 
1:e2a0d75: import org.apache.cassandra.dht.IPartitioner;
1:e2a0d75: import org.apache.cassandra.dht.Token;
1:e2a0d75: 
1:e2a0d75: public class NoReplicationTokenAllocator<Unit> extends TokenAllocatorBase<Unit>
1:e2a0d75: {
1:e2a0d75:     PriorityQueue<Weighted<UnitInfo>> sortedUnits = Queues.newPriorityQueue();
1:e2a0d75:     Map<Unit, PriorityQueue<Weighted<TokenInfo>>> tokensInUnits = Maps.newHashMap();
1:e2a0d75: 
1:e2a0d75:     private static final double MAX_TAKEOVER_RATIO = 0.90;
1:e2a0d75:     private static final double MIN_TAKEOVER_RATIO = 1.0 - MAX_TAKEOVER_RATIO;
1:e2a0d75: 
1:e2a0d75:     public NoReplicationTokenAllocator(NavigableMap<Token, Unit> sortedTokens,
1:e2a0d75:                                        ReplicationStrategy<Unit> strategy,
1:e2a0d75:                                        IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         super(sortedTokens, strategy, partitioner);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * Construct the token ring as a CircularList of TokenInfo,
1:e2a0d75:      * and populate the ownership of the UnitInfo's provided
1:e2a0d75:      */
1:e2a0d75:     private TokenInfo<Unit> createTokenInfos(Map<Unit, UnitInfo<Unit>> units)
1:e2a0d75:     {
1:e2a0d75:         if (units.isEmpty())
1:e2a0d75:             return null;
1:e2a0d75: 
1:e2a0d75:         // build the circular list
1:e2a0d75:         TokenInfo<Unit> prev = null;
1:e2a0d75:         TokenInfo<Unit> first = null;
1:e2a0d75:         for (Map.Entry<Token, Unit> en : sortedTokens.entrySet())
1:e2a0d75:         {
1:e2a0d75:             Token t = en.getKey();
1:e2a0d75:             UnitInfo<Unit> ni = units.get(en.getValue());
1:e2a0d75:             TokenInfo<Unit> ti = new TokenInfo<>(t, ni);
1:e2a0d75:             first = ti.insertAfter(first, prev);
1:e2a0d75:             prev = ti;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         TokenInfo<Unit> curr = first;
1:e2a0d75:         tokensInUnits.clear();
1:e2a0d75:         sortedUnits.clear();
1:e2a0d75:         do
1:e2a0d75:         {
1:e2a0d75:             populateTokenInfoAndAdjustUnit(curr);
1:e2a0d75:             curr = curr.next;
1:e2a0d75:         } while (curr != first);
1:e2a0d75: 
1:e2a0d75:         for (UnitInfo<Unit> unitInfo : units.values())
1:e2a0d75:         {
1:e2a0d75:             sortedUnits.add(new Weighted<UnitInfo>(unitInfo.ownership, unitInfo));
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         return first;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * Used in tests.
1:e2a0d75:      */
1:e2a0d75:     protected void createTokenInfos()
1:e2a0d75:     {
1:e2a0d75:         createTokenInfos(createUnitInfos(Maps.newHashMap()));
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void populateTokenInfoAndAdjustUnit(TokenInfo<Unit> token)
1:e2a0d75:     {
1:e2a0d75:         token.replicationStart = token.prevInRing().token;
1:e2a0d75:         token.replicationThreshold = token.token;
1:e2a0d75:         token.replicatedOwnership = token.replicationStart.size(token.token);
1:e2a0d75:         token.owningUnit.ownership += token.replicatedOwnership;
1:e2a0d75: 
1:e2a0d75:         PriorityQueue<Weighted<TokenInfo>> unitTokens = tokensInUnits.get(token.owningUnit.unit);
1:e2a0d75:         if (unitTokens == null)
1:e2a0d75:         {
1:e2a0d75:             unitTokens = Queues.newPriorityQueue();
1:e2a0d75:             tokensInUnits.put(token.owningUnit.unit, unitTokens);
1:e2a0d75:         }
1:e2a0d75:         unitTokens.add(new Weighted<TokenInfo>(token.replicatedOwnership, token));
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private Collection<Token> generateRandomTokens(UnitInfo<Unit> newUnit, int numTokens, Map<Unit, UnitInfo<Unit>> unitInfos)
1:e2a0d75:     {
1:e2a0d75:         Set<Token> tokens = new HashSet<>(numTokens);
1:e2a0d75:         while (tokens.size() < numTokens)
1:e2a0d75:         {
1:e2a0d75:             Token token = partitioner.getRandomToken();
1:e2a0d75:             if (!sortedTokens.containsKey(token))
1:e2a0d75:             {
1:e2a0d75:                 tokens.add(token);
1:e2a0d75:                 sortedTokens.put(token, newUnit.unit);
1:e2a0d75:             }
1:e2a0d75:         }
1:e2a0d75:         unitInfos.put(newUnit.unit, newUnit);
1:e2a0d75:         createTokenInfos(unitInfos);
1:e2a0d75:         return tokens;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public Collection<Token> addUnit(Unit newUnit, int numTokens)
1:e2a0d75:     {
1:e2a0d75:         assert !tokensInUnits.containsKey(newUnit);
1:e2a0d75: 
1:e2a0d75:         Map<Object, GroupInfo> groups = Maps.newHashMap();
1:e2a0d75:         UnitInfo<Unit> newUnitInfo = new UnitInfo<>(newUnit, 0, groups, strategy);
1:e2a0d75:         Map<Unit, UnitInfo<Unit>> unitInfos = createUnitInfos(groups);
1:e2a0d75: 
1:e2a0d75:         if (unitInfos.isEmpty())
1:e2a0d75:             return generateRandomTokens(newUnitInfo, numTokens, unitInfos);
1:e2a0d75: 
1:e2a0d75:         if (numTokens > sortedTokens.size())
1:e2a0d75:             return generateRandomTokens(newUnitInfo, numTokens, unitInfos);
1:e2a0d75: 
1:e2a0d75:         TokenInfo<Unit> head = createTokenInfos(unitInfos);
1:e2a0d75: 
1:e2a0d75:         // Select the nodes we will work with, extract them from sortedUnits and calculate targetAverage
1:e2a0d75:         double targetAverage = 0.0;
1:e2a0d75:         double sum = 0.0;
1:e2a0d75:         List<Weighted<UnitInfo>> unitsToChange = new ArrayList<>();
1:e2a0d75: 
1:e2a0d75:         for (int i = 0; i < numTokens; i++)
1:e2a0d75:         {
1:e2a0d75:             Weighted<UnitInfo> unit = sortedUnits.peek();
1:e2a0d75: 
1:e2a0d75:             if (unit == null)
1:e2a0d75:                 break;
1:e2a0d75: 
1:e2a0d75:             sum += unit.weight;
1:e2a0d75:             double average = sum / (unitsToChange.size() + 2); // unit and newUnit must be counted
1:e2a0d75:             if (unit.weight <= average)
1:e2a0d75:                 // No point to include later nodes, target can only decrease from here.
1:e2a0d75:                 break;
1:e2a0d75: 
1:e2a0d75:             sortedUnits.remove();
1:e2a0d75:             unitsToChange.add(unit);
1:e2a0d75:             targetAverage = average;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         List<Token> newTokens = Lists.newArrayListWithCapacity(numTokens);
1:e2a0d75: 
1:e2a0d75:         int nr = 0;
1:e2a0d75:         // calculate the tokens
1:e2a0d75:         for (Weighted<UnitInfo> unit : unitsToChange)
1:e2a0d75:         {
1:e2a0d75:             // TODO: Any better ways to assign how many tokens to change in each node?
1:e2a0d75:             int tokensToChange = numTokens / unitsToChange.size() + (nr < numTokens % unitsToChange.size() ? 1 : 0);
1:e2a0d75: 
1:e2a0d75:             Queue<Weighted<TokenInfo>> unitTokens = tokensInUnits.get(unit.value.unit);
1:e2a0d75:             List<Weighted<TokenInfo>> tokens = Lists.newArrayListWithCapacity(tokensToChange);
1:e2a0d75: 
1:e2a0d75:             double workWeight = 0;
1:e2a0d75:             // Extract biggest vnodes and calculate how much weight we can work with.
1:e2a0d75:             for (int i = 0; i < tokensToChange; i++)
1:e2a0d75:             {
1:e2a0d75:                 Weighted<TokenInfo> wt = unitTokens.remove();
1:e2a0d75:                 tokens.add(wt);
1:e2a0d75:                 workWeight += wt.weight;
1:e2a0d75:                 unit.value.ownership -= wt.weight;
1:e2a0d75:             }
1:e2a0d75: 
1:e2a0d75:             double toTakeOver = unit.weight - targetAverage;
1:e2a0d75:             // Split toTakeOver proportionally between the vnodes.
1:e2a0d75:             for (Weighted<TokenInfo> wt : tokens)
1:e2a0d75:             {
1:e2a0d75:                 double slice;
1:e2a0d75:                 Token token;
1:e2a0d75: 
1:e2a0d75:                 if (toTakeOver < workWeight)
1:e2a0d75:                 {
1:e2a0d75:                     // Spread decrease.
1:e2a0d75:                     slice = toTakeOver / workWeight;
1:e2a0d75: 
1:e2a0d75:                     if (slice < MIN_TAKEOVER_RATIO)
1:e2a0d75:                         slice = MIN_TAKEOVER_RATIO;
1:e2a0d75:                     if (slice > MAX_TAKEOVER_RATIO)
1:e2a0d75:                         slice = MAX_TAKEOVER_RATIO;
1:e2a0d75:                 }
1:e2a0d75:                 else
1:e2a0d75:                 {
1:e2a0d75:                     slice = MAX_TAKEOVER_RATIO;
1:e2a0d75:                 }
1:e2a0d75:                 token = partitioner.split(wt.value.prevInRing().token, wt.value.token, slice);
1:e2a0d75: 
1:e2a0d75:                 //Token selected, now change all data
1:e2a0d75:                 sortedTokens.put(token, newUnit);
1:e2a0d75: 
1:e2a0d75:                 TokenInfo<Unit> ti = new TokenInfo<>(token, newUnitInfo);
1:e2a0d75: 
1:e2a0d75:                 ti.insertAfter(head, wt.value.prevInRing());
1:e2a0d75: 
1:e2a0d75:                 populateTokenInfoAndAdjustUnit(ti);
1:e2a0d75:                 populateTokenInfoAndAdjustUnit(wt.value);
1:e2a0d75:                 newTokens.add(token);
1:e2a0d75:             }
1:e2a0d75: 
1:e2a0d75:             // adjust the weight for current unit
1:e2a0d75:             sortedUnits.add(new Weighted<>(unit.value.ownership, unit.value));
1:e2a0d75:             ++nr;
1:e2a0d75:         }
1:e2a0d75:         sortedUnits.add(new Weighted<>(newUnitInfo.ownership, newUnitInfo));
1:e2a0d75: 
1:e2a0d75:         return newTokens;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     /**
1:e2a0d75:      * For testing, remove the given unit preserving correct state of the allocator.
1:e2a0d75:      */
1:e2a0d75:     void removeUnit(Unit n)
1:e2a0d75:     {
1:e2a0d75:         Iterator<Weighted<UnitInfo>> it = sortedUnits.iterator();
1:e2a0d75:         while (it.hasNext())
1:e2a0d75:         {
1:e2a0d75:             if (it.next().value.unit.equals(n))
1:e2a0d75:             {
1:e2a0d75:                 it.remove();
1:e2a0d75:                 break;
1:e2a0d75:             }
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         PriorityQueue<Weighted<TokenInfo>> tokenInfos = tokensInUnits.remove(n);
1:e2a0d75:         Collection<Token> tokens = Lists.newArrayListWithCapacity(tokenInfos.size());
1:e2a0d75:         for (Weighted<TokenInfo> tokenInfo : tokenInfos)
1:e2a0d75:         {
1:e2a0d75:             tokens.add(tokenInfo.value.token);
1:e2a0d75:         }
1:e2a0d75:         sortedTokens.keySet().removeAll(tokens);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public int getReplicas()
1:e2a0d75:     {
1:e2a0d75:         return 1;
1:e2a0d75:     }
1:e2a0d75: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.dht.tokenallocator;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.NavigableMap;
1: import java.util.PriorityQueue;
1: import java.util.Queue;
1: import java.util.Set;
1: 
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Maps;
1: import com.google.common.collect.Queues;
1: 
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Token;
1: 
1: public class NoReplicationTokenAllocator<Unit> extends TokenAllocatorBase<Unit>
1: {
1:     PriorityQueue<Weighted<UnitInfo>> sortedUnits = Queues.newPriorityQueue();
1:     Map<Unit, PriorityQueue<Weighted<TokenInfo>>> tokensInUnits = Maps.newHashMap();
1: 
1:     private static final double MAX_TAKEOVER_RATIO = 0.90;
1:     private static final double MIN_TAKEOVER_RATIO = 1.0 - MAX_TAKEOVER_RATIO;
1: 
1:     public NoReplicationTokenAllocator(NavigableMap<Token, Unit> sortedTokens,
1:                                        ReplicationStrategy<Unit> strategy,
1:                                        IPartitioner partitioner)
1:     {
1:         super(sortedTokens, strategy, partitioner);
1:     }
1: 
1:     /**
1:      * Construct the token ring as a CircularList of TokenInfo,
1:      * and populate the ownership of the UnitInfo's provided
1:      */
1:     private TokenInfo<Unit> createTokenInfos(Map<Unit, UnitInfo<Unit>> units)
1:     {
1:         if (units.isEmpty())
1:             return null;
1: 
1:         // build the circular list
1:         TokenInfo<Unit> prev = null;
1:         TokenInfo<Unit> first = null;
1:         for (Map.Entry<Token, Unit> en : sortedTokens.entrySet())
1:         {
1:             Token t = en.getKey();
1:             UnitInfo<Unit> ni = units.get(en.getValue());
1:             TokenInfo<Unit> ti = new TokenInfo<>(t, ni);
1:             first = ti.insertAfter(first, prev);
1:             prev = ti;
1:         }
1: 
1:         TokenInfo<Unit> curr = first;
1:         tokensInUnits.clear();
1:         sortedUnits.clear();
1:         do
1:         {
1:             populateTokenInfoAndAdjustUnit(curr);
1:             curr = curr.next;
1:         } while (curr != first);
1: 
1:         for (UnitInfo<Unit> unitInfo : units.values())
1:         {
1:             sortedUnits.add(new Weighted<UnitInfo>(unitInfo.ownership, unitInfo));
1:         }
1: 
1:         return first;
1:     }
1: 
1:     /**
1:      * Used in tests.
1:      */
1:     protected void createTokenInfos()
1:     {
1:         createTokenInfos(createUnitInfos(Maps.newHashMap()));
1:     }
1: 
1:     private void populateTokenInfoAndAdjustUnit(TokenInfo<Unit> token)
1:     {
1:         token.replicationStart = token.prevInRing().token;
1:         token.replicationThreshold = token.token;
1:         token.replicatedOwnership = token.replicationStart.size(token.token);
1:         token.owningUnit.ownership += token.replicatedOwnership;
1: 
1:         PriorityQueue<Weighted<TokenInfo>> unitTokens = tokensInUnits.get(token.owningUnit.unit);
1:         if (unitTokens == null)
1:         {
1:             unitTokens = Queues.newPriorityQueue();
1:             tokensInUnits.put(token.owningUnit.unit, unitTokens);
1:         }
1:         unitTokens.add(new Weighted<TokenInfo>(token.replicatedOwnership, token));
1:     }
1: 
1:     private Collection<Token> generateRandomTokens(UnitInfo<Unit> newUnit, int numTokens, Map<Unit, UnitInfo<Unit>> unitInfos)
1:     {
1:         Set<Token> tokens = new HashSet<>(numTokens);
1:         while (tokens.size() < numTokens)
1:         {
1:             Token token = partitioner.getRandomToken();
1:             if (!sortedTokens.containsKey(token))
1:             {
1:                 tokens.add(token);
1:                 sortedTokens.put(token, newUnit.unit);
1:             }
1:         }
1:         unitInfos.put(newUnit.unit, newUnit);
1:         createTokenInfos(unitInfos);
1:         return tokens;
1:     }
1: 
1:     public Collection<Token> addUnit(Unit newUnit, int numTokens)
1:     {
1:         assert !tokensInUnits.containsKey(newUnit);
1: 
1:         Map<Object, GroupInfo> groups = Maps.newHashMap();
1:         UnitInfo<Unit> newUnitInfo = new UnitInfo<>(newUnit, 0, groups, strategy);
1:         Map<Unit, UnitInfo<Unit>> unitInfos = createUnitInfos(groups);
1: 
1:         if (unitInfos.isEmpty())
1:             return generateRandomTokens(newUnitInfo, numTokens, unitInfos);
1: 
1:         if (numTokens > sortedTokens.size())
1:             return generateRandomTokens(newUnitInfo, numTokens, unitInfos);
1: 
1:         TokenInfo<Unit> head = createTokenInfos(unitInfos);
1: 
1:         // Select the nodes we will work with, extract them from sortedUnits and calculate targetAverage
1:         double targetAverage = 0.0;
1:         double sum = 0.0;
1:         List<Weighted<UnitInfo>> unitsToChange = new ArrayList<>();
1: 
1:         for (int i = 0; i < numTokens; i++)
1:         {
1:             Weighted<UnitInfo> unit = sortedUnits.peek();
1: 
1:             if (unit == null)
1:                 break;
1: 
1:             sum += unit.weight;
1:             double average = sum / (unitsToChange.size() + 2); // unit and newUnit must be counted
1:             if (unit.weight <= average)
1:                 // No point to include later nodes, target can only decrease from here.
1:                 break;
1: 
1:             sortedUnits.remove();
1:             unitsToChange.add(unit);
1:             targetAverage = average;
1:         }
1: 
1:         List<Token> newTokens = Lists.newArrayListWithCapacity(numTokens);
1: 
1:         int nr = 0;
1:         // calculate the tokens
1:         for (Weighted<UnitInfo> unit : unitsToChange)
1:         {
1:             // TODO: Any better ways to assign how many tokens to change in each node?
1:             int tokensToChange = numTokens / unitsToChange.size() + (nr < numTokens % unitsToChange.size() ? 1 : 0);
1: 
1:             Queue<Weighted<TokenInfo>> unitTokens = tokensInUnits.get(unit.value.unit);
1:             List<Weighted<TokenInfo>> tokens = Lists.newArrayListWithCapacity(tokensToChange);
1: 
1:             double workWeight = 0;
1:             // Extract biggest vnodes and calculate how much weight we can work with.
1:             for (int i = 0; i < tokensToChange; i++)
1:             {
1:                 Weighted<TokenInfo> wt = unitTokens.remove();
1:                 tokens.add(wt);
1:                 workWeight += wt.weight;
1:                 unit.value.ownership -= wt.weight;
1:             }
1: 
1:             double toTakeOver = unit.weight - targetAverage;
1:             // Split toTakeOver proportionally between the vnodes.
1:             for (Weighted<TokenInfo> wt : tokens)
1:             {
1:                 double slice;
1:                 Token token;
1: 
1:                 if (toTakeOver < workWeight)
1:                 {
1:                     // Spread decrease.
1:                     slice = toTakeOver / workWeight;
1: 
1:                     if (slice < MIN_TAKEOVER_RATIO)
1:                         slice = MIN_TAKEOVER_RATIO;
1:                     if (slice > MAX_TAKEOVER_RATIO)
1:                         slice = MAX_TAKEOVER_RATIO;
1:                 }
1:                 else
1:                 {
1:                     slice = MAX_TAKEOVER_RATIO;
1:                 }
1:                 token = partitioner.split(wt.value.prevInRing().token, wt.value.token, slice);
1: 
1:                 //Token selected, now change all data
1:                 sortedTokens.put(token, newUnit);
1: 
1:                 TokenInfo<Unit> ti = new TokenInfo<>(token, newUnitInfo);
1: 
1:                 ti.insertAfter(head, wt.value.prevInRing());
1: 
1:                 populateTokenInfoAndAdjustUnit(ti);
1:                 populateTokenInfoAndAdjustUnit(wt.value);
1:                 newTokens.add(token);
1:             }
1: 
1:             // adjust the weight for current unit
1:             sortedUnits.add(new Weighted<>(unit.value.ownership, unit.value));
1:             ++nr;
1:         }
1:         sortedUnits.add(new Weighted<>(newUnitInfo.ownership, newUnitInfo));
1: 
1:         return newTokens;
1:     }
1: 
1:     /**
1:      * For testing, remove the given unit preserving correct state of the allocator.
1:      */
1:     void removeUnit(Unit n)
1:     {
1:         Iterator<Weighted<UnitInfo>> it = sortedUnits.iterator();
1:         while (it.hasNext())
1:         {
1:             if (it.next().value.unit.equals(n))
1:             {
1:                 it.remove();
1:                 break;
1:             }
1:         }
1: 
1:         PriorityQueue<Weighted<TokenInfo>> tokenInfos = tokensInUnits.remove(n);
1:         Collection<Token> tokens = Lists.newArrayListWithCapacity(tokenInfos.size());
1:         for (Weighted<TokenInfo> tokenInfo : tokenInfos)
1:         {
1:             tokens.add(tokenInfo.value.token);
1:         }
1:         sortedTokens.keySet().removeAll(tokens);
1:     }
1: 
1:     public int getReplicas()
1:     {
1:         return 1;
1:     }
1: }
============================================================================