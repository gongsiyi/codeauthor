1:e4467a0: /**
1:e4467a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:e4467a0:  * or more contributor license agreements.  See the NOTICE file
1:e4467a0:  * distributed with this work for additional information
1:e4467a0:  * regarding copyright ownership.  The ASF licenses this file
1:e4467a0:  * to you under the Apache License, Version 2.0 (the
1:e4467a0:  * "License"); you may not use this file except in compliance
1:e4467a0:  * with the License.  You may obtain a copy of the License at
1:e4467a0:  * <p/>
1:e4467a0:  * http://www.apache.org/licenses/LICENSE-2.0
1:e4467a0:  * <p/>
1:e4467a0:  * Unless required by applicable law or agreed to in writing, software
1:e4467a0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4467a0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4467a0:  * See the License for the specific language governing permissions and
1:e4467a0:  * limitations under the License.
1:e4467a0:  */
4:e4467a0: 
1:e4467a0: package org.apache.cassandra.stress;
1:e4467a0: 
1:e4467a0: import java.io.BufferedReader;
1:e4467a0: import java.io.File;
1:e4467a0: import java.io.FileInputStream;
1:e4467a0: import java.io.IOException;
1:e4467a0: import java.io.InputStream;
1:e4467a0: import java.io.InputStreamReader;
1:e4467a0: import java.io.PrintWriter;
1:e4467a0: import java.math.BigDecimal;
1:e4467a0: import java.nio.charset.StandardCharsets;
1:e4467a0: import java.nio.file.Files;
1:e4467a0: import java.nio.file.Paths;
1:e4467a0: import java.util.Arrays;
1:e4467a0: import java.util.regex.Matcher;
1:e4467a0: import java.util.regex.Pattern;
1:e4467a0: 
1:e4467a0: import com.google.common.io.ByteStreams;
1:e4467a0: import org.apache.commons.lang3.StringUtils;
1:e73633c: import org.apache.cassandra.stress.report.StressMetrics;
1:e4467a0: import org.apache.cassandra.stress.settings.StressSettings;
1:e4467a0: import org.json.simple.JSONArray;
1:e4467a0: import org.json.simple.JSONObject;
1:e4467a0: import org.json.simple.JSONValue;
1:e4467a0: 
1:e4467a0: 
1:e4467a0: public class StressGraph
3:e4467a0: {
1:e4467a0:     private StressSettings stressSettings;
1:e4467a0:     private enum ReadingMode
1:e4467a0:     {
1:e4467a0:         START,
1:e4467a0:         METRICS,
1:e4467a0:         AGGREGATES,
1:e4467a0:         NEXTITERATION
3:e4467a0:     }
1:e4467a0:     private String[] stressArguments;
1:e4467a0: 
1:e4467a0:     public StressGraph(StressSettings stressSetttings, String[] stressArguments)
1:e4467a0:     {
1:e4467a0:         this.stressSettings = stressSetttings;
1:e4467a0:         this.stressArguments = stressArguments;
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     public void generateGraph()
1:e4467a0:     {
1:e4467a0:         File htmlFile = new File(stressSettings.graph.file);
1:e4467a0:         JSONObject stats;
1:e4467a0:         if (htmlFile.isFile())
1:e4467a0:         {
2:e4467a0:             try
1:e4467a0:             {
1:e4467a0:                 String html = new String(Files.readAllBytes(Paths.get(htmlFile.toURI())), StandardCharsets.UTF_8);
1:e4467a0:                 stats = parseExistingStats(html);
1:e4467a0:             }
1:e4467a0:             catch (IOException e)
1:e4467a0:             {
1:e4467a0:                 throw new RuntimeException("Couldn't load existing stats html.");
1:e4467a0:             }
1:e4467a0:             stats = this.createJSONStats(stats);
1:e4467a0:         }
2:e4467a0:         else
1:e4467a0:         {
1:e4467a0:             stats = this.createJSONStats(null);
1:e4467a0:         }
1:e4467a0: 
1:e4467a0:         try
1:e4467a0:         {
1:e4467a0:             PrintWriter out = new PrintWriter(htmlFile);
1:e4467a0:             String statsBlock = "/* stats start */\nstats = " + stats.toJSONString() + ";\n/* stats end */\n";
1:e4467a0:             String html = getGraphHTML().replaceFirst("/\\* stats start \\*/\n\n/\\* stats end \\*/\n", statsBlock);
1:e4467a0:             out.write(html);
1:e4467a0:             out.close();
1:e4467a0:         }
1:e4467a0:         catch (IOException e)
1:e4467a0:         {
1:e4467a0:             throw new RuntimeException("Couldn't write stats html.");
1:e4467a0:         }
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     private JSONObject parseExistingStats(String html)
1:e4467a0:     {
1:e4467a0:         JSONObject stats;
1:e4467a0: 
1:e4467a0:         Pattern pattern = Pattern.compile("(?s).*/\\* stats start \\*/\\nstats = (.*);\\n/\\* stats end \\*/.*");
1:e4467a0:         Matcher matcher = pattern.matcher(html);
1:e4467a0:         matcher.matches();
1:e4467a0:         stats = (JSONObject) JSONValue.parse(matcher.group(1));
1:e4467a0: 
1:e4467a0:         return stats;
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     private String getGraphHTML()
1:e4467a0:     {
1:e4467a0:         InputStream graphHTMLRes = StressGraph.class.getClassLoader().getResourceAsStream("org/apache/cassandra/stress/graph/graph.html");
1:e4467a0:         String graphHTML;
1:e4467a0:         try
1:e4467a0:         {
1:e4467a0:             graphHTML = new String(ByteStreams.toByteArray(graphHTMLRes));
1:e4467a0:         }
1:e4467a0:         catch (IOException e)
1:e4467a0:         {
1:e4467a0:             throw new RuntimeException(e);
1:e4467a0:         }
1:e4467a0:         return graphHTML;
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     /** Parse log and append to stats array */
1:e4467a0:     private JSONArray parseLogStats(InputStream log, JSONArray stats) {
1:e4467a0:         BufferedReader reader = new BufferedReader(new InputStreamReader(log));
1:e4467a0:         JSONObject json = new JSONObject();
1:e4467a0:         JSONArray intervals = new JSONArray();
1:e4467a0:         boolean runningMultipleThreadCounts = false;
1:e4467a0:         String currentThreadCount = null;
1:e4467a0:         Pattern threadCountMessage = Pattern.compile("Running ([A-Z]+) with ([0-9]+) threads .*");
1:e4467a0:         ReadingMode mode = ReadingMode.START;
1:e4467a0: 
1:e4467a0:         try
1:e4467a0:         {
1:e4467a0:             String line;
1:e4467a0:             while ((line = reader.readLine()) != null)
1:e4467a0:             {
1:e4467a0:                 // Detect if we are running multiple thread counts:
1:e4467a0:                 if (line.startsWith("Thread count was not specified"))
1:e4467a0:                     runningMultipleThreadCounts = true;
1:e4467a0: 
1:4675b20:                 if (runningMultipleThreadCounts)
1:e4467a0:                 {
1:4675b20:                     // Detect thread count:
1:4675b20:                     Matcher tc = threadCountMessage.matcher(line);
1:4675b20:                     if (tc.matches())
1:e4467a0:                     {
1:e4467a0:                         currentThreadCount = tc.group(2);
1:e4467a0:                     }
1:e4467a0:                 }
1:4675b20:                 
1:e4467a0:                 // Detect mode changes
1:e4467a0:                 if (line.equals(StressMetrics.HEAD))
1:e4467a0:                 {
1:e4467a0:                     mode = ReadingMode.METRICS;
1:e4467a0:                     continue;
1:e4467a0:                 }
1:e4467a0:                 else if (line.equals("Results:"))
1:e4467a0:                 {
1:e4467a0:                     mode = ReadingMode.AGGREGATES;
1:e4467a0:                     continue;
1:e4467a0:                 }
1:e4467a0:                 else if (mode == ReadingMode.AGGREGATES && line.equals(""))
1:e4467a0:                 {
1:e4467a0:                     mode = ReadingMode.NEXTITERATION;
1:e4467a0:                 }
1:e4467a0:                 else if (line.equals("END") || line.equals("FAILURE"))
1:e4467a0:                 {
1:e4467a0:                     break;
1:e4467a0:                 }
1:e4467a0: 
1:e4467a0:                 // Process lines
1:e4467a0:                 if (mode == ReadingMode.METRICS)
1:e4467a0:                 {
1:e4467a0:                     JSONArray metrics = new JSONArray();
1:e4467a0:                     String[] parts = line.split(",");
1:e4467a0:                     if (parts.length != StressMetrics.HEADMETRICS.length)
1:e4467a0:                     {
1:e4467a0:                         continue;
1:e4467a0:                     }
1:e4467a0:                     for (String m : parts)
1:e4467a0:                     {
1:e4467a0:                         try
1:e4467a0:                         {
1:e4467a0:                             metrics.add(new BigDecimal(m.trim()));
1:e4467a0:                         }
1:e4467a0:                         catch (NumberFormatException e)
1:e4467a0:                         {
1:e4467a0:                             metrics.add(null);
1:e4467a0:                         }
1:e4467a0:                     }
1:e4467a0:                     intervals.add(metrics);
1:e4467a0:                 }
1:e4467a0:                 else if (mode == ReadingMode.AGGREGATES)
1:e4467a0:                 {
1:e4467a0:                     String[] parts = line.split(":",2);
1:e4467a0:                     if (parts.length != 2)
1:e4467a0:                     {
1:e4467a0:                         continue;
1:e4467a0:                     }
1:f42e235:                     // the graphing js expects lower case names
1:f42e235:                     json.put(parts[0].trim().toLowerCase(), parts[1].trim());
1:e4467a0:                 }
1:e4467a0:                 else if (mode == ReadingMode.NEXTITERATION)
1:e4467a0:                 {
1:e4467a0:                     //Wrap up the results of this test and append to the array.
1:e4467a0:                     json.put("metrics", Arrays.asList(StressMetrics.HEADMETRICS));
1:e4467a0:                     json.put("test", stressSettings.graph.operation);
1:e4467a0:                     if (currentThreadCount == null)
1:e4467a0:                         json.put("revision", stressSettings.graph.revision);
1:e4467a0:                     else
1:e4467a0:                         json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount));
1:e4467a0:                     json.put("command", StringUtils.join(stressArguments, " "));
1:e4467a0:                     json.put("intervals", intervals);
2:e4467a0:                     stats.add(json);
1:e4467a0: 
1:e4467a0:                     //Start fresh for next iteration:
2:e4467a0:                     json = new JSONObject();
1:e4467a0:                     intervals = new JSONArray();
1:e4467a0:                     mode = ReadingMode.START;
1:e4467a0:                 }
1:e4467a0:             }
1:e4467a0:         }
1:e4467a0:         catch (IOException e)
1:e4467a0:         {
1:e4467a0:             throw new RuntimeException("Couldn't read from temporary stress log file");
1:e4467a0:         }
1:f42e235:         if (json.size() != 0) stats.add(json);
1:e4467a0:         return stats;
1:e4467a0:     }
1:e4467a0: 
1:e4467a0:     private JSONObject createJSONStats(JSONObject json)
1:e4467a0:     {
1:bcbb53b:         try (InputStream logStream = new FileInputStream(stressSettings.graph.temporaryLogFile))
1:e4467a0:         {
1:bcbb53b:             JSONArray stats;
1:bcbb53b:             if (json == null)
1:bcbb53b:             {
1:bcbb53b:                 json = new JSONObject();
1:bcbb53b:                 stats = new JSONArray();
1:bcbb53b:             }
1:bcbb53b:             else
1:bcbb53b:             {
1:bcbb53b:                 stats = (JSONArray) json.get("stats");
1:bcbb53b:             }
1:e4467a0: 
1:bcbb53b:             stats = parseLogStats(logStream, stats);
1:bcbb53b: 
1:bcbb53b:             json.put("title", stressSettings.graph.title);
1:bcbb53b:             json.put("stats", stats);
1:bcbb53b:             return json;
1:e4467a0:         }
1:bcbb53b:         catch (IOException e)
1:e4467a0:         {
1:e4467a0:             throw new RuntimeException(e);
1:e4467a0:         }
1:e4467a0:     }
1:e4467a0: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1:                     // the graphing js expects lower case names
1:                     json.put(parts[0].trim().toLowerCase(), parts[1].trim());
/////////////////////////////////////////////////////////////////////////
1:         if (json.size() != 0) stats.add(json);
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.StressMetrics;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:bcbb53b
/////////////////////////////////////////////////////////////////////////
1:         try (InputStream logStream = new FileInputStream(stressSettings.graph.temporaryLogFile))
1:             JSONArray stats;
1:             if (json == null)
1:             {
1:                 json = new JSONObject();
1:                 stats = new JSONArray();
1:             }
1:             else
1:             {
1:                 stats = (JSONArray) json.get("stats");
1:             }
1:             stats = parseLogStats(logStream, stats);
1: 
1:             json.put("title", stressSettings.graph.title);
1:             json.put("stats", stats);
1:             return json;
1:         catch (IOException e)
commit:4675b20
/////////////////////////////////////////////////////////////////////////
1:                 if (runningMultipleThreadCounts)
1:                     // Detect thread count:
1:                     Matcher tc = threadCountMessage.matcher(line);
1:                     if (tc.matches())
1:                 
author:Ryan McGuire
-------------------------------------------------------------------------------
commit:e4467a0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.PrintWriter;
1: import java.math.BigDecimal;
1: import java.nio.charset.StandardCharsets;
1: import java.nio.file.Files;
1: import java.nio.file.Paths;
1: import java.util.Arrays;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import com.google.common.io.ByteStreams;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: import org.apache.cassandra.stress.settings.StressSettings;
1: import org.json.simple.JSONArray;
1: import org.json.simple.JSONObject;
1: import org.json.simple.JSONValue;
1: 
1: 
1: public class StressGraph
1: {
1:     private StressSettings stressSettings;
1:     private enum ReadingMode
1:     {
1:         START,
1:         METRICS,
1:         AGGREGATES,
1:         NEXTITERATION
1:     }
1:     private String[] stressArguments;
1: 
1:     public StressGraph(StressSettings stressSetttings, String[] stressArguments)
1:     {
1:         this.stressSettings = stressSetttings;
1:         this.stressArguments = stressArguments;
1:     }
1: 
1:     public void generateGraph()
1:     {
1:         File htmlFile = new File(stressSettings.graph.file);
1:         JSONObject stats;
1:         if (htmlFile.isFile())
1:         {
1:             try
1:             {
1:                 String html = new String(Files.readAllBytes(Paths.get(htmlFile.toURI())), StandardCharsets.UTF_8);
1:                 stats = parseExistingStats(html);
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException("Couldn't load existing stats html.");
1:             }
1:             stats = this.createJSONStats(stats);
1:         }
1:         else
1:         {
1:             stats = this.createJSONStats(null);
1:         }
1: 
1:         try
1:         {
1:             PrintWriter out = new PrintWriter(htmlFile);
1:             String statsBlock = "/* stats start */\nstats = " + stats.toJSONString() + ";\n/* stats end */\n";
1:             String html = getGraphHTML().replaceFirst("/\\* stats start \\*/\n\n/\\* stats end \\*/\n", statsBlock);
1:             out.write(html);
1:             out.close();
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException("Couldn't write stats html.");
1:         }
1:     }
1: 
1:     private JSONObject parseExistingStats(String html)
1:     {
1:         JSONObject stats;
1: 
1:         Pattern pattern = Pattern.compile("(?s).*/\\* stats start \\*/\\nstats = (.*);\\n/\\* stats end \\*/.*");
1:         Matcher matcher = pattern.matcher(html);
1:         matcher.matches();
1:         stats = (JSONObject) JSONValue.parse(matcher.group(1));
1: 
1:         return stats;
1:     }
1: 
1:     private String getGraphHTML()
1:     {
1:         InputStream graphHTMLRes = StressGraph.class.getClassLoader().getResourceAsStream("org/apache/cassandra/stress/graph/graph.html");
1:         String graphHTML;
1:         try
1:         {
1:             graphHTML = new String(ByteStreams.toByteArray(graphHTMLRes));
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         return graphHTML;
1:     }
1: 
1:     /** Parse log and append to stats array */
1:     private JSONArray parseLogStats(InputStream log, JSONArray stats) {
1:         BufferedReader reader = new BufferedReader(new InputStreamReader(log));
1:         JSONObject json = new JSONObject();
1:         JSONArray intervals = new JSONArray();
1:         boolean runningMultipleThreadCounts = false;
1:         String currentThreadCount = null;
1:         Pattern threadCountMessage = Pattern.compile("Running ([A-Z]+) with ([0-9]+) threads .*");
1:         ReadingMode mode = ReadingMode.START;
1: 
1:         try
1:         {
1:             String line;
1:             while ((line = reader.readLine()) != null)
1:             {
1:                 // Detect if we are running multiple thread counts:
1:                 if (line.startsWith("Thread count was not specified"))
1:                     runningMultipleThreadCounts = true;
1: 
0:                 // Detect thread count:
0:                 Matcher tc = threadCountMessage.matcher(line);
0:                 if (tc.matches())
1:                 {
0:                     if (runningMultipleThreadCounts)
1:                     {
1:                         currentThreadCount = tc.group(2);
1:                     }
1:                 }
1: 
1:                 // Detect mode changes
1:                 if (line.equals(StressMetrics.HEAD))
1:                 {
1:                     mode = ReadingMode.METRICS;
1:                     continue;
1:                 }
1:                 else if (line.equals("Results:"))
1:                 {
1:                     mode = ReadingMode.AGGREGATES;
1:                     continue;
1:                 }
1:                 else if (mode == ReadingMode.AGGREGATES && line.equals(""))
1:                 {
1:                     mode = ReadingMode.NEXTITERATION;
1:                 }
1:                 else if (line.equals("END") || line.equals("FAILURE"))
1:                 {
1:                     break;
1:                 }
1: 
1:                 // Process lines
1:                 if (mode == ReadingMode.METRICS)
1:                 {
1:                     JSONArray metrics = new JSONArray();
1:                     String[] parts = line.split(",");
1:                     if (parts.length != StressMetrics.HEADMETRICS.length)
1:                     {
1:                         continue;
1:                     }
1:                     for (String m : parts)
1:                     {
1:                         try
1:                         {
1:                             metrics.add(new BigDecimal(m.trim()));
1:                         }
1:                         catch (NumberFormatException e)
1:                         {
1:                             metrics.add(null);
1:                         }
1:                     }
1:                     intervals.add(metrics);
1:                 }
1:                 else if (mode == ReadingMode.AGGREGATES)
1:                 {
1:                     String[] parts = line.split(":",2);
1:                     if (parts.length != 2)
1:                     {
1:                         continue;
1:                     }
0:                     json.put(parts[0].trim(), parts[1].trim());
1:                 }
1:                 else if (mode == ReadingMode.NEXTITERATION)
1:                 {
1:                     //Wrap up the results of this test and append to the array.
1:                     json.put("metrics", Arrays.asList(StressMetrics.HEADMETRICS));
1:                     json.put("test", stressSettings.graph.operation);
1:                     if (currentThreadCount == null)
1:                         json.put("revision", stressSettings.graph.revision);
1:                     else
1:                         json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount));
1:                     json.put("command", StringUtils.join(stressArguments, " "));
1:                     json.put("intervals", intervals);
1:                     stats.add(json);
1: 
1:                     //Start fresh for next iteration:
1:                     json = new JSONObject();
1:                     intervals = new JSONArray();
1:                     mode = ReadingMode.START;
1:                 }
1:             }
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException("Couldn't read from temporary stress log file");
1:         }
1:         stats.add(json);
1:         return stats;
1:     }
1: 
1:     private JSONObject createJSONStats(JSONObject json)
1:     {
0:         JSONArray stats;
0:         if (json == null)
1:         {
1:             json = new JSONObject();
0:             stats = new JSONArray();
1:         }
1:         else
1:         {
0:             stats = (JSONArray) json.get("stats");
1:         }
1: 
1:         try
1:         {
0:             stats = parseLogStats(new FileInputStream(stressSettings.graph.temporaryLogFile), stats);
1:         }
0:         catch (FileNotFoundException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1: 
0:         json.put("title", stressSettings.graph.title);
0:         json.put("stats", stats);
0:         return json;
1:     }
1: }
============================================================================