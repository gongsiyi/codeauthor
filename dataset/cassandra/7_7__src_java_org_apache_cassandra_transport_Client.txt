1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport;
2:6d3a3ee: 
1:6d3a3ee: import java.io.BufferedReader;
1:6d3a3ee: import java.io.IOException;
1:6d3a3ee: import java.io.InputStreamReader;
1:6d3a3ee: import java.nio.ByteBuffer;
1:ce206e2: import java.nio.charset.StandardCharsets;
1:879b694: import java.util.*;
1:6d3a3ee: 
1:6d3a3ee: import com.google.common.base.Splitter;
1:6d3a3ee: 
1:879b694: import org.apache.cassandra.auth.PasswordAuthenticator;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:bfd73be: import org.apache.cassandra.cql3.QueryOptions;
1:297f530: import org.apache.cassandra.db.ConsistencyLevel;
1:119c726: import org.apache.cassandra.db.marshal.Int32Type;
1:119c726: import org.apache.cassandra.db.marshal.UTF8Type;
1:e48ff29: import org.apache.cassandra.transport.messages.*;
1:ccca5f1: import org.apache.cassandra.utils.Hex;
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:bfd73be: import org.apache.cassandra.utils.MD5Digest;
1:401b46b: 
1:119c726: import static org.apache.cassandra.config.EncryptionOptions.ClientEncryptionOptions;
1:6d3a3ee: 
1:6d3a3ee: public class Client extends SimpleClient
5:6d3a3ee: {
1:f6217ae:     private final SimpleEventHandler eventHandler = new SimpleEventHandler();
1:f6217ae: 
1:e0adc16:     public Client(String host, int port, ProtocolVersion version, ClientEncryptionOptions encryptionOptions)
1:6d3a3ee:     {
1:f6217ae:         super(host, port, version, encryptionOptions);
1:f6217ae:         setEventHandler(eventHandler);
5:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     public void run() throws IOException
1:6d3a3ee:     {
1:6d3a3ee:         // Start the connection attempt.
1:6d3a3ee:         System.out.print("Connecting...");
1:6d3a3ee:         establishConnection();
1:6d3a3ee:         System.out.println();
1:6d3a3ee: 
1:6d3a3ee:         // Read commands from the stdin.
1:6d3a3ee:         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
1:6d3a3ee:         for (;;)
1:6d3a3ee:         {
1:f6217ae:             Event event;
1:f6217ae:             while ((event = eventHandler.queue.poll()) != null)
1:f6217ae:             {
1:f6217ae:                 System.out.println("<< " + event);
1:f6217ae:             }
1:f6217ae: 
1:6d3a3ee:             System.out.print(">> ");
1:6d3a3ee:             System.out.flush();
1:6d3a3ee:             String line = in.readLine();
1:68d2526:             if (line == null)
1:68d2526:             {
1:6d3a3ee:                 break;
1:6d3a3ee:             }
1:6d3a3ee:             Message.Request req = parseLine(line.trim());
1:6d3a3ee:             if (req == null)
1:6d3a3ee:             {
1:6d3a3ee:                 System.out.println("! Error parsing line.");
1:6d3a3ee:                 continue;
1:6d3a3ee:             }
1:6d3a3ee: 
2:6d3a3ee:             try
1:6d3a3ee:             {
1:6d3a3ee:                 Message.Response resp = execute(req);
1:6d3a3ee:                 System.out.println("-> " + resp);
1:6d3a3ee:             }
1:6d3a3ee:             catch (Exception e)
1:6d3a3ee:             {
1:f25da97:                 JVMStabilityInspector.inspectThrowable(e);
1:6d3a3ee:                 System.err.println("ERROR: " + e.getMessage());
1:6d3a3ee:             }
1:6d3a3ee:         }
1:6d3a3ee: 
1:6d3a3ee:         close();
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     private Message.Request parseLine(String line)
1:6d3a3ee:     {
1:6d3a3ee:         Splitter splitter = Splitter.on(' ').trimResults().omitEmptyStrings();
1:6d3a3ee:         Iterator<String> iter = splitter.split(line).iterator();
1:6d3a3ee:         if (!iter.hasNext())
3:6d3a3ee:             return null;
1:6d3a3ee:         String msgType = iter.next().toUpperCase();
1:6d3a3ee:         if (msgType.equals("STARTUP"))
1:6d3a3ee:         {
1:f171179:             Map<String, String> options = new HashMap<String, String>();
1:f171179:             options.put(StartupMessage.CQL_VERSION, "3.0.0");
2:6d3a3ee:             while (iter.hasNext())
1:6d3a3ee:             {
2:6d3a3ee:                String next = iter.next();
1:6d3a3ee:                if (next.toLowerCase().equals("snappy"))
1:6d3a3ee:                {
1:f171179:                    options.put(StartupMessage.COMPRESSION, "snappy");
1:6d3a3ee:                    connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
1:6d3a3ee:                }
1:6d3a3ee:             }
1:f171179:             return new StartupMessage(options);
1:6d3a3ee:         }
1:6d3a3ee:         else if (msgType.equals("QUERY"))
1:6d3a3ee:         {
1:e48ff29:             line = line.substring(6);
1:e48ff29:             // Ugly hack to allow setting a page size, but that's playground code anyway
1:e48ff29:             String query = line;
1:e48ff29:             int pageSize = -1;
1:e48ff29:             if (line.matches(".+ !\\d+$"))
1:e48ff29:             {
1:e48ff29:                 int idx = line.lastIndexOf('!');
1:e48ff29:                 query = line.substring(0, idx-1);
1:e48ff29:                 try
1:e48ff29:                 {
1:e48ff29:                     pageSize = Integer.parseInt(line.substring(idx+1, line.length()));
1:e48ff29:                 }
1:e48ff29:                 catch (NumberFormatException e)
1:e48ff29:                 {
1:e48ff29:                     return null;
1:e48ff29:                 }
1:e48ff29:             }
1:e0adc16:             return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null, version));
1:e48ff29:         }
1:6d3a3ee:         else if (msgType.equals("PREPARE"))
1:e48ff29:         {
1:6d3a3ee:             String query = line.substring(8);
1:6d3a3ee:             return new PrepareMessage(query);
1:e48ff29:         }
1:6d3a3ee:         else if (msgType.equals("EXECUTE"))
1:e48ff29:         {
1:e48ff29:             try
1:e48ff29:             {
1:ccca5f1:                 byte[] id = Hex.hexToBytes(iter.next());
1:6d3a3ee:                 List<ByteBuffer> values = new ArrayList<ByteBuffer>();
1:6d3a3ee:                 while(iter.hasNext())
1:6d3a3ee:                 {
1:6d3a3ee:                     String next = iter.next();
1:6d3a3ee:                     ByteBuffer bb;
1:6d3a3ee:                     try
1:6d3a3ee:                     {
1:6d3a3ee:                         int v = Integer.parseInt(next);
1:6d3a3ee:                         bb = Int32Type.instance.decompose(v);
1:e48ff29:                     }
1:e48ff29:                     catch (NumberFormatException e)
1:6d3a3ee:                     {
1:6d3a3ee:                         bb = UTF8Type.instance.decompose(next);
1:6d3a3ee:                     }
1:6d3a3ee:                     values.add(bb);
1:6d3a3ee:                 }
1:9872b74:                 return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.forInternalCalls(ConsistencyLevel.ONE, values));
1:6d3a3ee:             }
1:6d3a3ee:             catch (Exception e)
1:6d3a3ee:             {
1:e48ff29:                 return null;
1:6d3a3ee:             }
1:6d3a3ee:         }
1:6d3a3ee:         else if (msgType.equals("OPTIONS"))
1:6d3a3ee:         {
1:6d3a3ee:             return new OptionsMessage();
1:6d3a3ee:         }
1:6d3a3ee:         else if (msgType.equals("CREDENTIALS"))
1:6d3a3ee:         {
1:401b46b:             System.err.println("[WARN] CREDENTIALS command is deprecated, use AUTHENTICATE instead");
1:6d3a3ee:             CredentialsMessage msg = new CredentialsMessage();
1:401b46b:             msg.credentials.putAll(readCredentials(iter));
1:6d3a3ee:             return msg;
1:6d3a3ee:         }
1:401b46b:         else if (msgType.equals("AUTHENTICATE"))
1:401b46b:         {
1:401b46b:             Map<String, String> credentials = readCredentials(iter);
1:879b694:             if(!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY))
1:401b46b:             {
1:401b46b:                 System.err.println("[ERROR] Authentication requires both 'username' and 'password'");
1:401b46b:                 return null;
1:401b46b:             }
1:4960355:             return new AuthResponse(encodeCredentialsForSasl(credentials));
1:401b46b:         }
1:f199fa3:         else if (msgType.equals("REGISTER"))
1:f199fa3:         {
1:f199fa3:             String type = line.substring(9).toUpperCase();
1:f199fa3:             try
1:f199fa3:             {
1:f199fa3:                 return new RegisterMessage(Collections.singletonList(Enum.valueOf(Event.Type.class, type)));
1:f199fa3:             }
1:f199fa3:             catch (IllegalArgumentException e)
1:f199fa3:             {
1:f199fa3:                 System.err.println("[ERROR] Unknown event type: " + type);
1:f199fa3:                 return null;
1:f199fa3:             }
1:f199fa3:         }
1:6d3a3ee:         return null;
1:6d3a3ee:     }
1:6d3a3ee: 
1:401b46b:     private Map<String, String> readCredentials(Iterator<String> iter)
1:401b46b:     {
1:401b46b:         final Map<String, String> credentials = new HashMap<String, String>();
1:401b46b:         while (iter.hasNext())
1:401b46b:         {
1:401b46b:             String next = iter.next();
1:401b46b:             String[] kv = next.split("=");
1:401b46b:             if (kv.length != 2)
1:401b46b:             {
1:401b46b:                 System.err.println("[ERROR] Default authentication requires username & password");
1:401b46b:                 return null;
1:401b46b:             }
1:401b46b:             credentials.put(kv[0], kv[1]);
1:401b46b:         }
1:401b46b:         return credentials;
1:401b46b:     }
1:401b46b: 
1:401b46b:     private byte[] encodeCredentialsForSasl(Map<String, String> credentials)
1:401b46b:     {
1:879b694:         byte[] username = credentials.get(PasswordAuthenticator.USERNAME_KEY).getBytes(StandardCharsets.UTF_8);
1:879b694:         byte[] password = credentials.get(PasswordAuthenticator.PASSWORD_KEY).getBytes(StandardCharsets.UTF_8);
1:401b46b:         byte[] initialResponse = new byte[username.length + password.length + 2];
1:401b46b:         initialResponse[0] = 0;
1:401b46b:         System.arraycopy(username, 0, initialResponse, 1, username.length);
1:401b46b:         initialResponse[username.length + 1] = 0;
1:401b46b:         System.arraycopy(password, 0, initialResponse, username.length + 2, password.length);
1:401b46b:         return initialResponse;
1:401b46b:     }
1:401b46b: 
1:6d3a3ee:     public static void main(String[] args) throws Exception
1:6d3a3ee:     {
1:9797511:         DatabaseDescriptor.clientInitialization();
1:f6217ae: 
1:6d3a3ee:         // Print usage if no argument is specified.
1:f6217ae:         if (args.length < 2 || args.length > 3)
1:6d3a3ee:         {
1:f6217ae:             System.err.println("Usage: " + Client.class.getSimpleName() + " <host> <port> [<version>]");
1:6d3a3ee:             return;
1:6d3a3ee:         }
1:6d3a3ee: 
1:6d3a3ee:         // Parse options.
1:6d3a3ee:         String host = args[0];
1:6d3a3ee:         int port = Integer.parseInt(args[1]);
1:e0adc16:         ProtocolVersion version = args.length == 3 ? ProtocolVersion.decode(Integer.parseInt(args[2])) : ProtocolVersion.CURRENT;
1:6d3a3ee: 
1:119c726:         ClientEncryptionOptions encryptionOptions = new ClientEncryptionOptions();
1:f6217ae:         System.out.println("CQL binary protocol console " + host + "@" + port + " using native protocol version " + version);
1:6d3a3ee: 
1:f6217ae:         new Client(host, port, version, encryptionOptions).run();
1:6d3a3ee:         System.exit(0);
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:     public Client(String host, int port, ProtocolVersion version, ClientEncryptionOptions encryptionOptions)
/////////////////////////////////////////////////////////////////////////
1:             return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null, version));
/////////////////////////////////////////////////////////////////////////
1:         ProtocolVersion version = args.length == 3 ? ProtocolVersion.decode(Integer.parseInt(args[2])) : ProtocolVersion.CURRENT;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:             if (line == null)
1:             {
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.clientInitialization();
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.Config;
/////////////////////////////////////////////////////////////////////////
1:     private final SimpleEventHandler eventHandler = new SimpleEventHandler();
1: 
0:     public Client(String host, int port, int version, ClientEncryptionOptions encryptionOptions)
1:         super(host, port, version, encryptionOptions);
1:         setEventHandler(eventHandler);
/////////////////////////////////////////////////////////////////////////
1:             Event event;
1:             while ((event = eventHandler.queue.poll()) != null)
1:             {
1:                 System.out.println("<< " + event);
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
0:         Config.setClientMode(true);
1: 
1:         if (args.length < 2 || args.length > 3)
1:             System.err.println("Usage: " + Client.class.getSimpleName() + " <host> <port> [<version>]");
0:         int version = args.length == 3 ? Integer.parseInt(args[2]) : Server.CURRENT_VERSION;
1:         System.out.println("CQL binary protocol console " + host + "@" + port + " using native protocol version " + version);
1:         new Client(host, port, version, encryptionOptions).run();
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.cassandra.auth.PasswordAuthenticator;
/////////////////////////////////////////////////////////////////////////
1:             if(!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY))
/////////////////////////////////////////////////////////////////////////
1:         byte[] username = credentials.get(PasswordAuthenticator.USERNAME_KEY).getBytes(StandardCharsets.UTF_8);
1:         byte[] password = credentials.get(PasswordAuthenticator.PASSWORD_KEY).getBytes(StandardCharsets.UTF_8);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
/////////////////////////////////////////////////////////////////////////
1:                 JVMStabilityInspector.inspectThrowable(e);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9872b74
/////////////////////////////////////////////////////////////////////////
0:             return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null));
/////////////////////////////////////////////////////////////////////////
1:                 return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.forInternalCalls(ConsistencyLevel.ONE, values));
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.utils.MD5Digest;
/////////////////////////////////////////////////////////////////////////
0:             return new QueryMessage(query, new QueryOptions(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null));
/////////////////////////////////////////////////////////////////////////
0:                 return new ExecuteMessage(MD5Digest.wrap(id), new QueryOptions(ConsistencyLevel.ONE, values));
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
commit:dad2f11
/////////////////////////////////////////////////////////////////////////
0:             return new QueryMessage(query, ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), pageSize);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.messages.*;
/////////////////////////////////////////////////////////////////////////
1:             line = line.substring(6);
1:             // Ugly hack to allow setting a page size, but that's playground code anyway
1:             String query = line;
1:             int pageSize = -1;
1:             if (line.matches(".+ !\\d+$"))
1:             {
1:                 int idx = line.lastIndexOf('!');
1:                 query = line.substring(0, idx-1);
1:                 try
1:                 {
1:                     pageSize = Integer.parseInt(line.substring(idx+1, line.length()));
1:                 }
1:                 catch (NumberFormatException e)
1:                 {
1:                     return null;
1:                 }
1:             }
0:             return new QueryMessage(query, Collections.<ByteBuffer>emptyList(), ConsistencyLevel.ONE, pageSize);
1:         }
0:         else if (msgType.equals("NEXT"))
1:         {
0:             line = line.substring(5);
1:             try
1:             {
0:                 int pageSize = Integer.parseInt(line);
0:                 return new NextMessage(pageSize);
1:             }
1:             catch (NumberFormatException e)
1:             {
1:                 return null;
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 return new ExecuteMessage(id, values, ConsistencyLevel.ONE, -1);
commit:4960355
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.AuthResponse;
/////////////////////////////////////////////////////////////////////////
1:             return new AuthResponse(encodeCredentialsForSasl(credentials));
commit:401b46b
/////////////////////////////////////////////////////////////////////////
0: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.IAuthenticator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.SaslResponse;
1: 
/////////////////////////////////////////////////////////////////////////
1:             System.err.println("[WARN] CREDENTIALS command is deprecated, use AUTHENTICATE instead");
1:             msg.credentials.putAll(readCredentials(iter));
1:         else if (msgType.equals("AUTHENTICATE"))
1:         {
1:             Map<String, String> credentials = readCredentials(iter);
0:             if(!credentials.containsKey(IAuthenticator.USERNAME_KEY) || !credentials.containsKey(IAuthenticator.PASSWORD_KEY))
1:             {
1:                 System.err.println("[ERROR] Authentication requires both 'username' and 'password'");
1:                 return null;
1:             }
0:             return new SaslResponse(encodeCredentialsForSasl(credentials));
1:         }
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, String> readCredentials(Iterator<String> iter)
1:     {
1:         final Map<String, String> credentials = new HashMap<String, String>();
1:         while (iter.hasNext())
1:         {
1:             String next = iter.next();
1:             String[] kv = next.split("=");
1:             if (kv.length != 2)
1:             {
1:                 System.err.println("[ERROR] Default authentication requires username & password");
1:                 return null;
1:             }
1:             credentials.put(kv[0], kv[1]);
1:         }
1:         return credentials;
1:     }
1: 
1:     private byte[] encodeCredentialsForSasl(Map<String, String> credentials)
1:     {
0:         byte[] username = credentials.get(IAuthenticator.USERNAME_KEY).getBytes(Charset.forName("UTF-8"));
0:         byte[] password = credentials.get(IAuthenticator.PASSWORD_KEY).getBytes(Charset.forName("UTF-8"));
1:         byte[] initialResponse = new byte[username.length + password.length + 2];
1:         initialResponse[0] = 0;
1:         System.arraycopy(username, 0, initialResponse, 1, username.length);
1:         initialResponse[username.length + 1] = 0;
1:         System.arraycopy(password, 0, initialResponse, username.length + 2, password.length);
1:         return initialResponse;
1:     }
1: 
commit:119c726
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.UTF8Type;
0: import org.apache.cassandra.transport.messages.CredentialsMessage;
0: import org.apache.cassandra.transport.messages.ExecuteMessage;
0: import org.apache.cassandra.transport.messages.OptionsMessage;
0: import org.apache.cassandra.transport.messages.PrepareMessage;
0: import org.apache.cassandra.transport.messages.QueryMessage;
0: import org.apache.cassandra.transport.messages.RegisterMessage;
0: import org.apache.cassandra.transport.messages.StartupMessage;
1: import static org.apache.cassandra.config.EncryptionOptions.ClientEncryptionOptions;
0:     public Client(String host, int port, ClientEncryptionOptions encryptionOptions)
0:         super(host, port, encryptionOptions);
/////////////////////////////////////////////////////////////////////////
1:         ClientEncryptionOptions encryptionOptions = new ClientEncryptionOptions();
0:         new Client(host, port, encryptionOptions).run();
commit:297f530
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.transport.messages.*;
/////////////////////////////////////////////////////////////////////////
0:             return new QueryMessage(query, ConsistencyLevel.ONE);
/////////////////////////////////////////////////////////////////////////
0:                 return new ExecuteMessage(id, values, ConsistencyLevel.ONE);
commit:ccca5f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
1:                 byte[] id = Hex.hexToBytes(iter.next());
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
1:         else if (msgType.equals("REGISTER"))
1:         {
1:             String type = line.substring(9).toUpperCase();
1:             try
1:             {
1:                 return new RegisterMessage(Collections.singletonList(Enum.valueOf(Event.Type.class, type)));
1:             }
1:             catch (IllegalArgumentException e)
1:             {
1:                 System.err.println("[ERROR] Unknown event type: " + type);
1:                 return null;
1:             }
1:         }
commit:f171179
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>();
1:             options.put(StartupMessage.CQL_VERSION, "3.0.0");
1:                    options.put(StartupMessage.COMPRESSION, "snappy");
1:             return new StartupMessage(options);
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
0: import java.net.InetSocketAddress;
1: import java.nio.ByteBuffer;
0: import java.util.concurrent.Executors;
0: import java.util.*;
1: 
1: import com.google.common.base.Splitter;
1: 
0: import org.jboss.netty.bootstrap.ClientBootstrap;
0: import org.jboss.netty.channel.Channel;
0: import org.jboss.netty.channel.Channels;
0: import org.jboss.netty.channel.ChannelFuture;
0: import org.jboss.netty.channel.ChannelHandlerContext;
0: import org.jboss.netty.channel.ChannelPipeline;
0: import org.jboss.netty.channel.ChannelPipelineFactory;
0: import org.jboss.netty.channel.MessageEvent;
0: import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
0: import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
1: 
0: import org.apache.cassandra.transport.messages.*;
0: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.utils.SimpleCondition;
1: 
1: public class Client extends SimpleClient
1: {
0:     public Client(String host, int port)
1:     {
0:         super(host, port);
1:     }
1: 
1:     public void run() throws IOException
1:     {
1:         // Start the connection attempt.
1:         System.out.print("Connecting...");
1:         establishConnection();
1:         System.out.println();
1: 
1:         // Read commands from the stdin.
1:         BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
1:         for (;;)
1:         {
1:             System.out.print(">> ");
1:             System.out.flush();
1:             String line = in.readLine();
0:             if (line == null) {
1:                 break;
1:             }
1:             Message.Request req = parseLine(line.trim());
1:             if (req == null)
1:             {
1:                 System.out.println("! Error parsing line.");
1:                 continue;
1:             }
1: 
1:             try
1:             {
1:                 Message.Response resp = execute(req);
1:                 System.out.println("-> " + resp);
1:             }
1:             catch (Exception e)
1:             {
1:                 System.err.println("ERROR: " + e.getMessage());
1:             }
1:         }
1: 
1:         close();
1:     }
1: 
1:     private Message.Request parseLine(String line)
1:     {
1:         Splitter splitter = Splitter.on(' ').trimResults().omitEmptyStrings();
1:         Iterator<String> iter = splitter.split(line).iterator();
1:         if (!iter.hasNext())
1:             return null;
1:         String msgType = iter.next().toUpperCase();
1:         if (msgType.equals("STARTUP"))
1:         {
0:             EnumMap<StartupMessage.Option, Object> options = new EnumMap<StartupMessage.Option, Object>(StartupMessage.Option.class);
1:             while (iter.hasNext())
1:             {
1:                String next = iter.next();
1:                if (next.toLowerCase().equals("snappy"))
1:                {
0:                    options.put(StartupMessage.Option.COMPRESSION, "snappy");
1:                    connection.setCompressor(FrameCompressor.SnappyCompressor.instance);
1:                }
1:             }
0:             return new StartupMessage("3.0.0", options);
1:         }
1:         else if (msgType.equals("QUERY"))
1:         {
0:             String query = line.substring(6);
0:             return new QueryMessage(query);
1:         }
1:         else if (msgType.equals("PREPARE"))
1:         {
1:             String query = line.substring(8);
1:             return new PrepareMessage(query);
1:         }
1:         else if (msgType.equals("EXECUTE"))
1:         {
1:             try
1:             {
0:                 int id = Integer.parseInt(iter.next());
1:                 List<ByteBuffer> values = new ArrayList<ByteBuffer>();
1:                 while(iter.hasNext())
1:                 {
1:                     String next = iter.next();
1:                     ByteBuffer bb;
1:                     try
1:                     {
1:                         int v = Integer.parseInt(next);
1:                         bb = Int32Type.instance.decompose(v);
1:                     }
0:                     catch (NumberFormatException e)
1:                     {
1:                         bb = UTF8Type.instance.decompose(next);
1:                     }
1:                     values.add(bb);
1:                 }
0:                 return new ExecuteMessage(id, values);
1:             }
1:             catch (Exception e)
1:             {
1:                 return null;
1:             }
1:         }
1:         else if (msgType.equals("OPTIONS"))
1:         {
1:             return new OptionsMessage();
1:         }
1:         else if (msgType.equals("CREDENTIALS"))
1:         {
1:             CredentialsMessage msg = new CredentialsMessage();
1:             while (iter.hasNext())
1:             {
1:                 String next = iter.next();
0:                 String[] kv = next.split("=");
0:                 if (kv.length != 2)
1:                     return null;
0:                 msg.credentials.put(kv[0], kv[1]);
1:             }
1:             return msg;
1:         }
1:         return null;
1:     }
1: 
1:     public static void main(String[] args) throws Exception
1:     {
1:         // Print usage if no argument is specified.
0:         if (args.length != 2)
1:         {
0:             System.err.println("Usage: " + Client.class.getSimpleName() + " <host> <port>");
1:             return;
1:         }
1: 
1:         // Parse options.
1:         String host = args[0];
1:         int port = Integer.parseInt(args[1]);
1: 
0:         System.out.println("CQL binary protocol console " + host + "@" + port);
1: 
0:         new Client(host, port).run();
1:         System.exit(0);
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ce206e2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
0:         byte[] username = credentials.get(IAuthenticator.USERNAME_KEY).getBytes(StandardCharsets.UTF_8);
0:         byte[] password = credentials.get(IAuthenticator.PASSWORD_KEY).getBytes(StandardCharsets.UTF_8);
============================================================================