1:107545b: /*
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing, software
1:107545b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:107545b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:107545b:  * See the License for the specific language governing permissions and
1:107545b:  * limitations under the License.
1:107545b:  */
1:107545b: package org.apache.cassandra.db.marshal;
4:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: 
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:107545b: import org.apache.cassandra.serializers.TimeSerializer;
1:107545b: import org.apache.cassandra.cql3.CQL3Type;
1:107545b: import org.apache.cassandra.serializers.TypeSerializer;
1:107545b: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:107545b: 
1:107545b: /**
1:107545b:  * Nanosecond resolution time values
1:107545b:  */
1:107545b: public class TimeType extends AbstractType<Long>
4:107545b: {
1:107545b:     public static final TimeType instance = new TimeType();
1:07594ee:     private TimeType() {super(ComparisonType.BYTE_ORDER);} // singleton
1:107545b: 
1:107545b:     public ByteBuffer fromString(String source) throws MarshalException
1:107545b:     {
1:107545b:         return decompose(TimeSerializer.timeStringToLong(source));
4:107545b:     }
1:107545b: 
1:4a5c282:     @Override
1:107545b:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:107545b:     {
1:107545b:         return this == otherType || otherType == LongType.instance;
1:107545b:     }
1:107545b: 
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(fromString((String) parsed));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a string representation of a time value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
2:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return '"' + TimeSerializer.instance.toString(TimeSerializer.instance.deserialize(buffer)) + '"';
1:c7b02d1:     }
1:c7b02d1: 
1:4a5c282:     @Override
1:107545b:     public CQL3Type asCQL3Type()
1:107545b:     {
1:107545b:         return CQL3Type.Native.TIME;
1:107545b:     }
1:107545b: 
1:107545b:     public TypeSerializer<Long> getSerializer()
1:107545b:     {
1:107545b:         return TimeSerializer.instance;
1:107545b:     }
1:107545b: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:8cb5a20
commit:3ec7d8c
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     private TimeType() {super(ComparisonType.BYTE_ORDER);} // singleton
/////////////////////////////////////////////////////////////////////////
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:4a5c282
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a string representation of a time value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return '"' + TimeSerializer.instance.toString(TimeSerializer.instance.deserialize(buffer)) + '"';
1:     }
1: 
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.serializers.TimeSerializer;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * Nanosecond resolution time values
1:  */
1: public class TimeType extends AbstractType<Long>
1: {
1:     public static final TimeType instance = new TimeType();
0:     private TimeType() {} // singleton
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         return decompose(TimeSerializer.timeStringToLong(source));
1:     }
1: 
0:     public boolean isByteOrderComparable()
1:     {
0:         return true;
1:     }
1: 
0:     @Override
0:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
0:         return super.isCompatibleWith(previous);
1:     }
1: 
0:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:     {
1:         return this == otherType || otherType == LongType.instance;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.TIME;
1:     }
1: 
1:     public TypeSerializer<Long> getSerializer()
1:     {
1:         return TimeSerializer.instance;
1:     }
1: }
============================================================================