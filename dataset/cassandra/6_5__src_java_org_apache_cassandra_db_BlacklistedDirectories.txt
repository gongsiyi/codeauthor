1:44f5998: /*
1:44f5998:  * Licensed to the Apache Software Foundation (ASF) under one
1:44f5998:  * or more contributor license agreements.  See the NOTICE file
1:44f5998:  * distributed with this work for additional information
1:44f5998:  * regarding copyright ownership.  The ASF licenses this file
1:44f5998:  * to you under the Apache License, Version 2.0 (the
1:44f5998:  * "License"); you may not use this file except in compliance
1:44f5998:  * with the License.  You may obtain a copy of the License at
1:44f5998:  *
1:44f5998:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44f5998:  *
1:44f5998:  * Unless required by applicable law or agreed to in writing, software
1:44f5998:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44f5998:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44f5998:  * See the License for the specific language governing permissions and
1:44f5998:  * limitations under the License.
1:44f5998:  */
1:44f5998: package org.apache.cassandra.db;
1:44f5998: 
1:44f5998: import org.slf4j.Logger;
1:44f5998: import org.slf4j.LoggerFactory;
1:44f5998: 
1:44f5998: import java.io.File;
1:de7aed5: import java.lang.management.ManagementFactory;
1:de7aed5: import java.util.Collections;
1:44f5998: import java.util.Set;
1:44f5998: import java.util.concurrent.CopyOnWriteArraySet;
1:44f5998: 
1:de7aed5: import javax.management.MBeanServer;
1:de7aed5: import javax.management.ObjectName;
1:de7aed5: 
1:904cb5d: import com.google.common.annotations.VisibleForTesting;
1:904cb5d: 
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:f25da97: 
1:de7aed5: public class BlacklistedDirectories implements BlacklistedDirectoriesMBean
1:44f5998: {
1:de7aed5:     public static final String MBEAN_NAME = "org.apache.cassandra.db:type=BlacklistedDirectories";
1:44f5998:     private static final Logger logger = LoggerFactory.getLogger(BlacklistedDirectories.class);
1:5dc145f:     private static final BlacklistedDirectories instance = new BlacklistedDirectories();
1:44f5998: 
1:de7aed5:     private final Set<File> unreadableDirectories = new CopyOnWriteArraySet<File>();
1:de7aed5:     private final Set<File> unwritableDirectories = new CopyOnWriteArraySet<File>();
1:de7aed5: 
1:de7aed5:     private BlacklistedDirectories()
1:de7aed5:     {
1:de7aed5:         // Register this instance with JMX
1:de7aed5:         try
1:de7aed5:         {
1:de7aed5:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:de7aed5:             mbs.registerMBean(this, new ObjectName(MBEAN_NAME));
1:de7aed5:         }
1:de7aed5:         catch (Exception e)
1:de7aed5:         {
1:f25da97:             JVMStabilityInspector.inspectThrowable(e);
1:cd6aa2d:             logger.error("error registering MBean {}", MBEAN_NAME, e);
1:de7aed5:             //Allow the server to start even if the bean can't be registered
1:de7aed5:         }
1:de7aed5:     }
1:de7aed5: 
1:de7aed5:     public Set<File> getUnreadableDirectories()
1:de7aed5:     {
1:de7aed5:         return Collections.unmodifiableSet(unreadableDirectories);
1:de7aed5:     }
1:de7aed5: 
1:de7aed5:     public Set<File> getUnwritableDirectories()
1:de7aed5:     {
1:de7aed5:         return Collections.unmodifiableSet(unwritableDirectories);
1:de7aed5:     }
1:44f5998: 
1:e2c6341:     public void markUnreadable(String path)
1:e2c6341:     {
1:e2c6341:         maybeMarkUnreadable(new File(path));
1:e2c6341:     }
1:e2c6341: 
1:e2c6341:     public void markUnwritable(String path)
1:e2c6341:     {
1:e2c6341:         maybeMarkUnwritable(new File(path));
1:e2c6341:     }
1:e2c6341: 
1:44f5998:     /**
1:44f5998:      * Adds parent directory of the file (or the file itself, if it is a directory)
1:44f5998:      * to the set of unreadable directories.
1:44f5998:      *
1:44f5998:      * @return the blacklisted directory or null if nothing has been added to the list.
1:44f5998:      */
1:44f5998:     public static File maybeMarkUnreadable(File path)
1:44f5998:     {
1:44f5998:         File directory = getDirectory(path);
1:de7aed5:         if (instance.unreadableDirectories.add(directory))
1:44f5998:         {
1:44f5998:             logger.warn("Blacklisting {} for reads", directory);
1:44f5998:             return directory;
1:44f5998:         }
1:44f5998:         return null;
1:44f5998:     }
1:44f5998: 
1:44f5998:     /**
1:44f5998:      * Adds parent directory of the file (or the file itself, if it is a directory)
1:44f5998:      * to the set of unwritable directories.
1:44f5998:      *
1:44f5998:      * @return the blacklisted directory or null if nothing has been added to the list.
1:44f5998:      */
1:44f5998:     public static File maybeMarkUnwritable(File path)
1:44f5998:     {
1:44f5998:         File directory = getDirectory(path);
1:de7aed5:         if (instance.unwritableDirectories.add(directory))
1:44f5998:         {
1:44f5998:             logger.warn("Blacklisting {} for writes", directory);
1:44f5998:             return directory;
1:44f5998:         }
1:44f5998:         return null;
1:44f5998:     }
1:44f5998: 
1:44f5998:     /**
1:904cb5d:      * Testing only!
1:904cb5d:      * Clear the set of unwritable directories.
1:904cb5d:      */
1:904cb5d:     @VisibleForTesting
1:904cb5d:     public static void clearUnwritableUnsafe()
1:904cb5d:     {
1:904cb5d:         instance.unwritableDirectories.clear();
1:904cb5d:     }
1:904cb5d: 
1:904cb5d: 
1:904cb5d:     /**
1:44f5998:      * Tells whether or not the directory is blacklisted for reads.
1:44f5998:      * @return whether or not the directory is blacklisted for reads.
1:44f5998:      */
1:44f5998:     public static boolean isUnreadable(File directory)
1:44f5998:     {
1:de7aed5:         return instance.unreadableDirectories.contains(directory);
1:44f5998:     }
1:44f5998: 
1:44f5998:     /**
1:44f5998:      * Tells whether or not the directory is blacklisted for writes.
1:44f5998:      * @return whether or not the directory is blacklisted for reads.
1:44f5998:      */
1:44f5998:     public static boolean isUnwritable(File directory)
1:44f5998:     {
1:de7aed5:         return instance.unwritableDirectories.contains(directory);
1:44f5998:     }
1:44f5998: 
1:44f5998:     private static File getDirectory(File file)
1:44f5998:     {
1:44f5998:         if (file.isDirectory())
1:44f5998:             return file;
1:44f5998: 
1:44f5998:         if (file.isFile())
1:44f5998:             return file.getParentFile();
1:44f5998: 
1:44f5998:         // the file with path cannot be read - try determining the directory manually.
1:44f5998:         if (file.getPath().endsWith(".db"))
1:44f5998:             return file.getParentFile();
1:44f5998: 
1:1583769:         // We may not be able to determine if it's a file or a directory if
1:1583769:         // we were called because we couldn't create the file/directory.
1:1583769:         return file;
1:44f5998:     }
1:44f5998: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:7b10217
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Testing only!
1:      * Clear the set of unwritable directories.
1:      */
1:     @VisibleForTesting
1:     public static void clearUnwritableUnsafe()
1:     {
1:         instance.unwritableDirectories.clear();
1:     }
1: 
1: 
1:     /**
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1:     public void markUnreadable(String path)
1:     {
1:         maybeMarkUnreadable(new File(path));
1:     }
1: 
1:     public void markUnwritable(String path)
1:     {
1:         maybeMarkUnwritable(new File(path));
1:     }
1: 
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: 
/////////////////////////////////////////////////////////////////////////
1:             JVMStabilityInspector.inspectThrowable(e);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:cd6aa2d
/////////////////////////////////////////////////////////////////////////
1:             logger.error("error registering MBean {}", MBEAN_NAME, e);
commit:5dc145f
/////////////////////////////////////////////////////////////////////////
1:     private static final BlacklistedDirectories instance = new BlacklistedDirectories();
commit:de7aed5
/////////////////////////////////////////////////////////////////////////
1: import java.lang.management.ManagementFactory;
1: import java.util.Collections;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: public class BlacklistedDirectories implements BlacklistedDirectoriesMBean
1:     public static final String MBEAN_NAME = "org.apache.cassandra.db:type=BlacklistedDirectories";
0:     private static final BlacklistedDirectories instance = new BlacklistedDirectories();
1:     private final Set<File> unreadableDirectories = new CopyOnWriteArraySet<File>();
1:     private final Set<File> unwritableDirectories = new CopyOnWriteArraySet<File>();
1: 
1:     private BlacklistedDirectories()
1:     {
1:         // Register this instance with JMX
1:         try
1:         {
1:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:             mbs.registerMBean(this, new ObjectName(MBEAN_NAME));
1:         }
1:         catch (Exception e)
1:         {
0:             logger.error("error registering MBean " + MBEAN_NAME, e);
1:             //Allow the server to start even if the bean can't be registered
1:         }
1:     }
1: 
1:     public Set<File> getUnreadableDirectories()
1:     {
1:         return Collections.unmodifiableSet(unreadableDirectories);
1:     }
1: 
1:     public Set<File> getUnwritableDirectories()
1:     {
1:         return Collections.unmodifiableSet(unwritableDirectories);
1:     }
/////////////////////////////////////////////////////////////////////////
1:         if (instance.unreadableDirectories.add(directory))
/////////////////////////////////////////////////////////////////////////
1:         if (instance.unwritableDirectories.add(directory))
/////////////////////////////////////////////////////////////////////////
1:         return instance.unreadableDirectories.contains(directory);
/////////////////////////////////////////////////////////////////////////
1:         return instance.unwritableDirectories.contains(directory);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1583769
/////////////////////////////////////////////////////////////////////////
1:         // We may not be able to determine if it's a file or a directory if
1:         // we were called because we couldn't create the file/directory.
1:         return file;
commit:44f5998
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.File;
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArraySet;
1: 
0: public class BlacklistedDirectories
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(BlacklistedDirectories.class);
1: 
0:     private static Set<File> unreadableDirectories = new CopyOnWriteArraySet<File>();
0:     private static Set<File> unwritableDirectories = new CopyOnWriteArraySet<File>();
1: 
1:     /**
1:      * Adds parent directory of the file (or the file itself, if it is a directory)
1:      * to the set of unreadable directories.
1:      *
1:      * @return the blacklisted directory or null if nothing has been added to the list.
1:      */
1:     public static File maybeMarkUnreadable(File path)
1:     {
1:         File directory = getDirectory(path);
0:         if (unreadableDirectories.add(directory))
1:         {
1:             logger.warn("Blacklisting {} for reads", directory);
1:             return directory;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * Adds parent directory of the file (or the file itself, if it is a directory)
1:      * to the set of unwritable directories.
1:      *
1:      * @return the blacklisted directory or null if nothing has been added to the list.
1:      */
1:     public static File maybeMarkUnwritable(File path)
1:     {
1:         File directory = getDirectory(path);
0:         if (unwritableDirectories.add(directory))
1:         {
1:             logger.warn("Blacklisting {} for writes", directory);
1:             return directory;
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * Tells whether or not the directory is blacklisted for reads.
1:      * @return whether or not the directory is blacklisted for reads.
1:      */
1:     public static boolean isUnreadable(File directory)
1:     {
0:         return unreadableDirectories.contains(directory);
1:     }
1: 
1:     /**
1:      * Tells whether or not the directory is blacklisted for writes.
1:      * @return whether or not the directory is blacklisted for reads.
1:      */
1:     public static boolean isUnwritable(File directory)
1:     {
0:         return unwritableDirectories.contains(directory);
1:     }
1: 
1:     private static File getDirectory(File file)
1:     {
1:         if (file.isDirectory())
1:             return file;
1: 
1:         if (file.isFile())
1:             return file.getParentFile();
1: 
1:         // the file with path cannot be read - try determining the directory manually.
1:         if (file.getPath().endsWith(".db"))
1:             return file.getParentFile();
1: 
0:         throw new IllegalStateException("Unable to parse directory from path " + file);
1:     }
1: }
============================================================================