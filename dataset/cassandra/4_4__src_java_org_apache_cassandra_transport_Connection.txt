1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport;
10:6d3a3ee: 
1:cbf304e: import io.netty.channel.Channel;
1:cbf304e: import io.netty.util.AttributeKey;
1:6d3a3ee: 
1:f199fa3: public class Connection
12:6d3a3ee: {
1:cbf304e:     static final AttributeKey<Connection> attributeKey = AttributeKey.valueOf("CONN");
1:cbf304e: 
1:5a18e37:     private final Channel channel;
1:e0adc16:     private final ProtocolVersion version;
1:f199fa3:     private final Tracker tracker;
1:6d3a3ee: 
1:5a18e37:     private volatile FrameCompressor frameCompressor;
1:5a18e37: 
1:e0adc16:     public Connection(Channel channel, ProtocolVersion version, Tracker tracker)
1:f199fa3:     {
1:5a18e37:         this.channel = channel;
1:5a18e37:         this.version = version;
1:f199fa3:         this.tracker = tracker;
1:5a18e37: 
1:5a18e37:         tracker.addConnection(channel, this);
1:f199fa3:     }
1:6d3a3ee: 
1:6d3a3ee:     public void setCompressor(FrameCompressor compressor)
1:f6217ae:     {
1:6d3a3ee:         this.frameCompressor = compressor;
11:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     public FrameCompressor getCompressor()
1:6d3a3ee:     {
1:6d3a3ee:         return frameCompressor;
1:6d3a3ee:     }
1:6d3a3ee: 
1:f199fa3:     public Tracker getTracker()
1:f199fa3:     {
1:f199fa3:         return tracker;
1:f199fa3:     }
1:f199fa3: 
1:e0adc16:     public ProtocolVersion getVersion()
1:f199fa3:     {
1:5a18e37:         return version;
1:f199fa3:     }
1:f199fa3: 
1:f199fa3:     public Channel channel()
1:f199fa3:     {
1:f199fa3:         return channel;
1:f6217ae:     }
1:f6217ae: 
1:6d3a3ee:     public interface Factory
1:6d3a3ee:     {
1:e0adc16:         Connection newConnection(Channel channel, ProtocolVersion version);
1:f199fa3:     }
1:f6217ae: 
1:6d3a3ee:     public interface Tracker
1:6d3a3ee:     {
1:f6217ae:         void addConnection(Channel ch, Connection connection);
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:     private final ProtocolVersion version;
1:     public Connection(Channel channel, ProtocolVersion version, Tracker tracker)
/////////////////////////////////////////////////////////////////////////
1:     public ProtocolVersion getVersion()
/////////////////////////////////////////////////////////////////////////
1:         Connection newConnection(Channel channel, ProtocolVersion version);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e4eba25
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.EventMessage;
/////////////////////////////////////////////////////////////////////////
0:     public void sendIfRegistered(Event event)
1:     {
0:         if (getTracker().isRegistered(event.type, channel))
0:             channel.writeAndFlush(new EventMessage(event));
1:     }
1: 
0:         Connection newConnection(Channel channel, int version);
1:         void addConnection(Channel ch, Connection connection);
1: 
0:         boolean isRegistered(Event.Type type, Channel ch);
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.channel.Channel;
1: import io.netty.util.AttributeKey;
1:     static final AttributeKey<Connection> attributeKey = AttributeKey.valueOf("CONN");
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
1:     private final Channel channel;
0:     private final int version;
1:     private volatile FrameCompressor frameCompressor;
1: 
0:     public Connection(Channel channel, int version, Tracker tracker)
1:         this.channel = channel;
1:         this.version = version;
1: 
1:         tracker.addConnection(channel, this);
/////////////////////////////////////////////////////////////////////////
0:     public int getVersion()
1:         return version;
/////////////////////////////////////////////////////////////////////////
0:         public Connection newConnection(Channel channel, int version);
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
1: public class Connection
0:     private volatile FrameCompressor frameCompressor;
0:     private volatile Channel channel;
1:     private final Tracker tracker;
0:     public Connection(Tracker tracker)
1:     {
1:         this.tracker = tracker;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public Tracker getTracker()
1:     {
1:         return tracker;
1:     }
1: 
0:     public void registerChannel(Channel ch)
1:     {
0:         channel = ch;
0:         tracker.addConnection(ch, this);
1:     }
1: 
1:     public Channel channel()
1:     {
1:         return channel;
1:     }
0:         public Connection newConnection(Tracker tracker);
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport;
1: 
0: import org.jboss.netty.channel.Channel;
1: 
0: import org.apache.cassandra.service.ClientState;
1: 
0: public abstract class Connection
1: {
0:     public static final Factory SERVER_FACTORY = new Factory()
1:     {
0:         public Connection newConnection()
1:         {
0:             return new ServerConnection();
1:         }
0:     };
1: 
0:     private FrameCompressor frameCompressor;
1: 
1:     public void setCompressor(FrameCompressor compressor)
1:     {
1:         this.frameCompressor = compressor;
1:     }
1: 
1:     public FrameCompressor getCompressor()
1:     {
1:         return frameCompressor;
1:     }
1: 
0:     public abstract void validateNewMessage(Message.Type type);
0:     public abstract void applyStateTransition(Message.Type requestType, Message.Type responseType);
0:     public abstract ClientState clientState();
1: 
1:     public interface Factory
1:     {
0:         public Connection newConnection();
1:     }
1: 
0:     private static class ServerConnection extends Connection
1:     {
0:         private enum State { UNINITIALIZED, AUTHENTICATION, READY; }
1: 
0:         private final ClientState clientState;
0:         private State state;
1: 
0:         public ServerConnection()
1:         {
0:             this.clientState = new ClientState();
0:             this.state = State.UNINITIALIZED;
1:         }
1: 
0:         public ClientState clientState()
1:         {
0:             return clientState;
1:         }
1: 
0:         public void validateNewMessage(Message.Type type)
1:         {
0:             switch (state)
1:             {
0:                 case UNINITIALIZED:
0:                     if (type != Message.Type.STARTUP && type != Message.Type.OPTIONS)
0:                         throw new ProtocolException(String.format("Unexpected message %s, expecting STARTUP or OPTIONS", type));
0:                     break;
0:                 case AUTHENTICATION:
0:                     if (type != Message.Type.CREDENTIALS)
0:                         throw new ProtocolException(String.format("Unexpected message %s, needs authentication through CREDENTIALS message", type));
0:                     break;
0:                 case READY:
0:                     if (type == Message.Type.STARTUP)
0:                         throw new ProtocolException("Unexpected message STARTUP, the connection is already initialized");
0:                     break;
0:                 default:
0:                     throw new AssertionError();
1:             }
1:         }
1: 
0:         public void applyStateTransition(Message.Type requestType, Message.Type responseType)
1:         {
0:             switch (state)
1:             {
0:                 case UNINITIALIZED:
0:                     if (requestType == Message.Type.STARTUP)
1:                     {
0:                         if (responseType == Message.Type.AUTHENTICATE)
0:                             state = State.AUTHENTICATION;
0:                         else if (responseType == Message.Type.READY)
0:                             state = State.READY;
1:                     }
0:                     break;
0:                 case AUTHENTICATION:
0:                     assert requestType == Message.Type.CREDENTIALS;
0:                     if (responseType == Message.Type.READY)
0:                         state = State.READY;
0:                 case READY:
0:                     break;
0:                 default:
0:                     throw new AssertionError();
1:             }
1:         }
1:     }
1: 
1:     public interface Tracker
1:     {
0:         public void addConnection(Channel ch, Connection connection);
0:         public void closeAll();
1:     }
1: }
============================================================================