1:07cf56f: /*
1:2e1b1a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e1b1a5:  * or more contributor license agreements.  See the NOTICE file
1:2e1b1a5:  * distributed with this work for additional information
1:2e1b1a5:  * regarding copyright ownership.  The ASF licenses this file
1:2e1b1a5:  * to you under the Apache License, Version 2.0 (the
1:2e1b1a5:  * "License"); you may not use this file except in compliance
1:2e1b1a5:  * with the License.  You may obtain a copy of the License at
1:2e1b1a5:  *
1:2e1b1a5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e1b1a5:  *
1:2e1b1a5:  * Unless required by applicable law or agreed to in writing, software
1:2e1b1a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e1b1a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e1b1a5:  * See the License for the specific language governing permissions and
1:2e1b1a5:  * limitations under the License.
2:2e1b1a5:  */
1:2e1b1a5: package org.apache.cassandra.gms;
26:2e1b1a5: 
1:84eeb28: import java.io.*;
1:9a90e98: import java.util.Collections;
1:9a90e98: import java.util.EnumMap;
1:89fbc1b: import java.util.Map;
1:9a90e98: import java.util.Set;
1:9a90e98: import java.util.concurrent.atomic.AtomicReference;
1:89fbc1b: 
1:2e1b1a5: import org.slf4j.Logger;
1:2e1b1a5: import org.slf4j.LoggerFactory;
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:45d8fc5: /**
1:7a4a709:  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndpointState
1:2e1b1a5:  * instance. Any state for a given endpoint can be retrieved from this instance.
1:45d8fc5:  */
1:0a03819: 
1:b207956: 
1:2e1b1a5: public class EndpointState
17:2e1b1a5: {
1:5a6e2b0:     protected static final Logger logger = LoggerFactory.getLogger(EndpointState.class);
1:f6f5e0e: 
1:587cb58:     public final static IVersionedSerializer<EndpointState> serializer = new EndpointStateSerializer();
1:45d8fc5: 
1:0a03819:     private volatile HeartBeatState hbState;
1:9a90e98:     private final AtomicReference<Map<ApplicationState, VersionedValue>> applicationState;
1:2e1b1a5: 
1:2e1b1a5:     /* fields below do not get serialized */
1:0a03819:     private volatile long updateTimestamp;
1:0a03819:     private volatile boolean isAlive;
1:2e1b1a5: 
1:0a03819:     EndpointState(HeartBeatState initialHbState)
1:2e1b1a5:     {
1:9a90e98:         this(initialHbState, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     EndpointState(HeartBeatState initialHbState, Map<ApplicationState, VersionedValue> states)
1:9a90e98:     {
1:0a03819:         hbState = initialHbState;
1:9a90e98:         applicationState = new AtomicReference<Map<ApplicationState, VersionedValue>>(new EnumMap<>(states));
1:1d2c122:         updateTimestamp = System.nanoTime();
1:0a03819:         isAlive = true;
1:2199a87:     }
1:2199a87: 
1:2e1b1a5:     HeartBeatState getHeartBeatState()
1:2199a87:     {
1:0a03819:         return hbState;
1:84eeb28:     }
1:42be16f: 
1:0a03819:     void setHeartBeatState(HeartBeatState newHbState)
1:2199a87:     {
1:2e1b1a5:         updateTimestamp();
1:0a03819:         hbState = newHbState;
15:2e1b1a5:     }
1:84eeb28: 
1:89fbc1b:     public VersionedValue getApplicationState(ApplicationState key)
1:84eeb28:     {
1:9a90e98:         return applicationState.get().get(key);
1:2e1b1a5:     }
1:89fbc1b: 
1:9a90e98:     public Set<Map.Entry<ApplicationState, VersionedValue>> states()
1:2e1b1a5:     {
1:9a90e98:         return applicationState.get().entrySet();
1:2e1b1a5:     }
1:7dffa83: 
1:9a90e98:     public void addApplicationState(ApplicationState key, VersionedValue value)
1:2e1b1a5:     {
1:9a90e98:         addApplicationStates(Collections.singletonMap(key, value));
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     public void addApplicationStates(Map<ApplicationState, VersionedValue> values)
1:9a90e98:     {
1:9a90e98:         addApplicationStates(values.entrySet());
1:9a90e98:     }
1:9a90e98: 
1:9a90e98:     public void addApplicationStates(Set<Map.Entry<ApplicationState, VersionedValue>> values)
1:9a90e98:     {
1:9a90e98:         while (true)
1:9a90e98:         {
1:9a90e98:             Map<ApplicationState, VersionedValue> orig = applicationState.get();
1:9a90e98:             Map<ApplicationState, VersionedValue> copy = new EnumMap<>(orig);
1:9a90e98: 
1:9a90e98:             for (Map.Entry<ApplicationState, VersionedValue> value : values)
1:9a90e98:                 copy.put(value.getKey(), value.getValue());
1:9a90e98: 
1:9a90e98:             if (applicationState.compareAndSet(orig, copy))
1:9a90e98:                 return;
1:9a90e98:         }
1:2e1b1a5:     }
1:45d8fc5: 
1:2e1b1a5:     /* getters and setters */
1:1d2c122:     /**
1:1d2c122:      * @return System.nanoTime() when state was updated last time.
1:1d2c122:      */
1:62cc775:     public long getUpdateTimestamp()
1:2e1b1a5:     {
1:0a03819:         return updateTimestamp;
1:2e1b1a5:     }
1:45d8fc5: 
1:45d8fc5:     void updateTimestamp()
1:2e1b1a5:     {
1:1d2c122:         updateTimestamp = System.nanoTime();
1:2e1b1a5:     }
1:2e1b1a5: 
1:2e1b1a5:     public boolean isAlive()
1:2e1b1a5:     {
1:0a03819:         return isAlive;
1:2e1b1a5:     }
1:2e1b1a5: 
1:0a03819:     void markAlive()
1:0a03819:     {
1:0a03819:         isAlive = true;
1:0a03819:     }
1:0a03819: 
1:0a03819:     void markDead()
1:2e1b1a5:     {
1:0a03819:         isAlive = false;
1:2199a87:     }
1:2199a87: 
1:ff5ed7a:     public boolean isRpcReady()
1:ff5ed7a:     {
1:ff5ed7a:         VersionedValue rpcState = getApplicationState(ApplicationState.RPC_READY);
1:ff5ed7a:         return rpcState != null && Boolean.parseBoolean(rpcState.value);
1:ff5ed7a:     }
1:ff5ed7a: 
1:ff5ed7a:     public String getStatus()
1:ff5ed7a:     {
1:ff5ed7a:         VersionedValue status = getApplicationState(ApplicationState.STATUS);
1:ff5ed7a:         if (status == null)
1:ff5ed7a:             return "";
1:ff5ed7a: 
1:ff5ed7a:         String[] pieces = status.value.split(VersionedValue.DELIMITER_STR, -1);
1:ff5ed7a:         assert (pieces.length > 0);
1:ff5ed7a:         return pieces[0];
1:ff5ed7a:     }
1:ff5ed7a: 
1:42be16f:     public String toString()
1:42be16f:     {
1:9a90e98:         return "EndpointState: HeartBeatState = " + hbState + ", AppStateMap = " + applicationState.get();
1:42be16f:     }
1:2e1b1a5: }
1:2e1b1a5: 
1:84eeb28: class EndpointStateSerializer implements IVersionedSerializer<EndpointState>
1:2e1b1a5: {
1:75508ec:     public void serialize(EndpointState epState, DataOutputPlus out, int version) throws IOException
1:2e1b1a5:     {
1:2e1b1a5:         /* serialize the HeartBeatState */
1:2e1b1a5:         HeartBeatState hbState = epState.getHeartBeatState();
1:60d9c7f:         HeartBeatState.serializer.serialize(hbState, out, version);
1:2e1b1a5: 
1:2e1b1a5:         /* serialize the map of ApplicationState objects */
1:9a90e98:         Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();
1:9a90e98:         out.writeInt(states.size());
1:9a90e98:         for (Map.Entry<ApplicationState, VersionedValue> state : states)
1:7dffa83:         {
1:9a90e98:             VersionedValue value = state.getValue();
1:9a90e98:             out.writeInt(state.getKey().ordinal());
1:60d9c7f:             VersionedValue.serializer.serialize(value, out, version);
1:2e1b1a5:         }
1:2e1b1a5:     }
1:2e1b1a5: 
1:03f72ac:     public EndpointState deserialize(DataInputPlus in, int version) throws IOException
1:2e1b1a5:     {
1:60d9c7f:         HeartBeatState hbState = HeartBeatState.serializer.deserialize(in, version);
1:2e1b1a5: 
1:60d9c7f:         int appStateSize = in.readInt();
1:9a90e98:         Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:b207956:         for (int i = 0; i < appStateSize; ++i)
1:2e1b1a5:         {
1:60d9c7f:             int key = in.readInt();
1:60d9c7f:             VersionedValue value = VersionedValue.serializer.deserialize(in, version);
1:9a90e98:             states.put(Gossiper.STATES[key], value);
1:2e1b1a5:         }
1:9a90e98: 
1:9a90e98:         return new EndpointState(hbState, states);
1:2e1b1a5:     }
1:2e1b1a5: 
1:5b9fc26:     public long serializedSize(EndpointState epState, int version)
1:5b9fc26:     {
1:587cb58:         long size = HeartBeatState.serializer.serializedSize(epState.getHeartBeatState(), version);
1:9a90e98:         Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();
1:9a90e98:         size += TypeSizes.sizeof(states.size());
1:9a90e98:         for (Map.Entry<ApplicationState, VersionedValue> state : states)
1:2e1b1a5:         {
1:9a90e98:             VersionedValue value = state.getValue();
1:9a90e98:             size += TypeSizes.sizeof(state.getKey().ordinal());
1:5b9fc26:             size += VersionedValue.serializer.serializedSize(value, version);
1:5b9fc26:         }
1:5b9fc26:         return size;
1:2e1b1a5:     }
1:2e1b1a5: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:9a90e98
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicReference<Map<ApplicationState, VersionedValue>> applicationState;
/////////////////////////////////////////////////////////////////////////
1:         this(initialHbState, new EnumMap<ApplicationState, VersionedValue>(ApplicationState.class));
1:     }
1: 
1:     EndpointState(HeartBeatState initialHbState, Map<ApplicationState, VersionedValue> states)
1:     {
1:         applicationState = new AtomicReference<Map<ApplicationState, VersionedValue>>(new EnumMap<>(states));
/////////////////////////////////////////////////////////////////////////
1:         return applicationState.get().get(key);
1:     public Set<Map.Entry<ApplicationState, VersionedValue>> states()
1:         return applicationState.get().entrySet();
1:     public void addApplicationState(ApplicationState key, VersionedValue value)
1:         addApplicationStates(Collections.singletonMap(key, value));
1:     }
1: 
1:     public void addApplicationStates(Map<ApplicationState, VersionedValue> values)
1:     {
1:         addApplicationStates(values.entrySet());
1:     }
1: 
1:     public void addApplicationStates(Set<Map.Entry<ApplicationState, VersionedValue>> values)
1:     {
1:         while (true)
1:         {
1:             Map<ApplicationState, VersionedValue> orig = applicationState.get();
1:             Map<ApplicationState, VersionedValue> copy = new EnumMap<>(orig);
1: 
1:             for (Map.Entry<ApplicationState, VersionedValue> value : values)
1:                 copy.put(value.getKey(), value.getValue());
1: 
1:             if (applicationState.compareAndSet(orig, copy))
1:                 return;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         return "EndpointState: HeartBeatState = " + hbState + ", AppStateMap = " + applicationState.get();
/////////////////////////////////////////////////////////////////////////
1:         Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();
1:         out.writeInt(states.size());
1:         for (Map.Entry<ApplicationState, VersionedValue> state : states)
1:             VersionedValue value = state.getValue();
1:             out.writeInt(state.getKey().ordinal());
/////////////////////////////////////////////////////////////////////////
1:         Map<ApplicationState, VersionedValue> states = new EnumMap<>(ApplicationState.class);
1:             states.put(Gossiper.STATES[key], value);
1: 
1:         return new EndpointState(hbState, states);
1:         Set<Map.Entry<ApplicationState, VersionedValue>> states = epState.states();
1:         size += TypeSizes.sizeof(states.size());
1:         for (Map.Entry<ApplicationState, VersionedValue> state : states)
1:             VersionedValue value = state.getValue();
1:             size += TypeSizes.sizeof(state.getKey().ordinal());
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public EndpointState deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         size += TypeSizes.sizeof(epState.applicationState.size());
0:             size += TypeSizes.sizeof(entry.getKey().ordinal());
author:Brandon Williams
-------------------------------------------------------------------------------
commit:ff5ed7a
/////////////////////////////////////////////////////////////////////////
1:     public boolean isRpcReady()
1:     {
1:         VersionedValue rpcState = getApplicationState(ApplicationState.RPC_READY);
1:         return rpcState != null && Boolean.parseBoolean(rpcState.value);
1:     }
1: 
1:     public String getStatus()
1:     {
1:         VersionedValue status = getApplicationState(ApplicationState.STATUS);
1:         if (status == null)
1:             return "";
1: 
1:         String[] pieces = status.value.split(VersionedValue.DELIMITER_STR, -1);
1:         assert (pieces.length > 0);
1:         return pieces[0];
1:     }
1: 
commit:1376b8e
commit:2199a87
/////////////////////////////////////////////////////////////////////////
0:     private volatile boolean hasPendingEcho;
0:         hasPendingEcho = false;
/////////////////////////////////////////////////////////////////////////
0:     public boolean hasPendingEcho()
1:     {
0:         return hasPendingEcho;
1:     }
1: 
0:     public void markPendingEcho(boolean val)
1:     {
0:         hasPendingEcho = val;
1:     }
1: 
commit:db59808
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0a03819
/////////////////////////////////////////////////////////////////////////
1: 
0:     private final static ICompactSerializer<EndpointState> serializer = new EndpointStateSerializer();
1:     private volatile HeartBeatState hbState;
0:     final Map<ApplicationState, VersionedValue> applicationState = new NonBlockingHashMap<ApplicationState, VersionedValue>();
1:     private volatile long updateTimestamp;
1:     private volatile boolean isAlive;
0:     private volatile boolean hasToken;
0:         return serializer;
1:     EndpointState(HeartBeatState initialHbState)
1:         hbState = initialHbState;
0:         updateTimestamp = System.currentTimeMillis();
1:         isAlive = true;
0:         hasToken = false;
1:         return hbState;
1:     void setHeartBeatState(HeartBeatState newHbState)
1:         hbState = newHbState;
0:         return applicationState.get(key);
/////////////////////////////////////////////////////////////////////////
0:         return applicationState;
0:         applicationState.put(key, value);
1:         return updateTimestamp;
0:         updateTimestamp = System.currentTimeMillis();
1:         return isAlive;
1:     void markAlive()
1:     {
1:         isAlive = true;
1:     }
1: 
1:     void markDead()
1:         isAlive = false;
0:         hasToken = value;
0:         return hasToken;
0:     private static Logger logger = LoggerFactory.getLogger(EndpointStateSerializer.class);
/////////////////////////////////////////////////////////////////////////
0:         int size = epState.applicationState.size();
0:         for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())
commit:f6f5e0e
/////////////////////////////////////////////////////////////////////////
0:     protected static Logger logger = LoggerFactory.getLogger(EndpointState.class);
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:763130b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(EndpointState epState, DataOutputPlus out, int version) throws IOException
author:Jason Brown
-------------------------------------------------------------------------------
commit:1daa8e4
commit:42be16f
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
0:         return "EndpointState: HeartBeatState = " + hbState + ", AppStateMap = " + applicationState;
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
1:         updateTimestamp = System.nanoTime();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return System.nanoTime() when state was updated last time.
1:      */
/////////////////////////////////////////////////////////////////////////
1:         updateTimestamp = System.nanoTime();
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(EndpointState epState, DataOutput out, int version) throws IOException
1:         HeartBeatState.serializer.serialize(hbState, out, version);
0:         out.writeInt(size);
0:             out.writeInt(entry.getKey().ordinal());
1:             VersionedValue.serializer.serialize(value, out, version);
0:     public EndpointState deserialize(DataInput in, int version) throws IOException
1:         HeartBeatState hbState = HeartBeatState.serializer.deserialize(in, version);
1:         int appStateSize = in.readInt();
1:             int key = in.readInt();
1:             VersionedValue value = VersionedValue.serializer.deserialize(in, version);
commit:b207956
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < appStateSize; ++i)
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         size += TypeSizes.NATIVE.sizeof(epState.applicationState.size());
0:             size += TypeSizes.NATIVE.sizeof(entry.getKey().ordinal());
commit:5b9fc26
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
/////////////////////////////////////////////////////////////////////////
1:     public long serializedSize(EndpointState epState, int version)
0:         long size = HeartBeatState.serializer().serializedSize(epState.getHeartBeatState(), version);
0:         size += DBTypeSizes.NATIVE.sizeof(epState.applicationState.size());
0:         for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())
1:         {
0:             VersionedValue value = entry.getValue();
0:             size += DBTypeSizes.NATIVE.sizeof(entry.getKey().ordinal());
1:             size += VersionedValue.serializer.serializedSize(value, version);
1:         }
1:         return size;
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
0:     private final static IVersionedSerializer<EndpointState> serializer = new EndpointStateSerializer();
/////////////////////////////////////////////////////////////////////////
0:     public static IVersionedSerializer<EndpointState> serializer()
/////////////////////////////////////////////////////////////////////////
1: class EndpointStateSerializer implements IVersionedSerializer<EndpointState>
0:     public void serialize(EndpointState epState, DataOutput dos, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             dos.writeInt(entry.getKey().ordinal());
0:             VersionedValue.serializer.serialize(value, dos, version);
0:     public EndpointState deserialize(DataInput dis, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1: 
0:     public long serializedSize(EndpointState endpointState, int version)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
commit:62cc775
/////////////////////////////////////////////////////////////////////////
1:     public long getUpdateTimestamp()
commit:6933070
commit:152ee37
/////////////////////////////////////////////////////////////////////////
0:     void setHasToken(boolean value)
0:     boolean hasToken()
commit:ae7dbe3
commit:050d129
/////////////////////////////////////////////////////////////////////////
0:     public boolean hasToken()
commit:89fbc1b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1: 
/////////////////////////////////////////////////////////////////////////
0:     final Map<ApplicationState, VersionedValue> applicationState_ = new NonBlockingHashMap<ApplicationState, VersionedValue>();
/////////////////////////////////////////////////////////////////////////
1:     public VersionedValue getApplicationState(ApplicationState key)
/////////////////////////////////////////////////////////////////////////
0:     public Map<ApplicationState, VersionedValue> getApplicationStateMap()
0:     void addApplicationState(ApplicationState key, VersionedValue value)
0:         applicationState_.put(key, value);
1: 
/////////////////////////////////////////////////////////////////////////
0:         for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState_.entrySet())
0:             VersionedValue value = entry.getValue();
0:             if (value != null)
0:                 dos.writeInt(entry.getKey().ordinal());
0:                 VersionedValue.serializer.serialize(value, dos);
/////////////////////////////////////////////////////////////////////////
0:             int key = dis.readInt();
0:             VersionedValue value = VersionedValue.serializer.deserialize(dis);
0:             epState.addApplicationState(Gossiper.STATES[key], value);
commit:629fa9e
/////////////////////////////////////////////////////////////////////////
0:                 ApplicationState.serializer.serialize(appState, dos);
/////////////////////////////////////////////////////////////////////////
0:             ApplicationState appState = ApplicationState.serializer.deserialize(dis);
commit:7dffa83
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         for (String key : epState.applicationState_.keySet())
1:         {
0:             ApplicationState appState = epState.applicationState_.get(key);
0:             if (appState != null)
0:                 dos.writeUTF(key);
0:                 ApplicationState.serializer().serialize(appState, dos);
/////////////////////////////////////////////////////////////////////////
1: 
0:             String key = dis.readUTF();
commit:45d8fc5
/////////////////////////////////////////////////////////////////////////
0: import org.cliffc.high_scale_lib.NonBlockingHashMap;
/////////////////////////////////////////////////////////////////////////
0:     private final static ICompactSerializer<EndpointState> serializer_ = new EndpointStateSerializer();
1: 
0:     volatile HeartBeatState hbState_;
0:     final Map<String, ApplicationState> applicationState_ = new NonBlockingHashMap<String, ApplicationState>();
0:     volatile long updateTimestamp_;
0:     volatile boolean isAlive_;
0:     volatile boolean isAGossiper_;
0:     volatile boolean hasToken_;
/////////////////////////////////////////////////////////////////////////
0:     void setHeartBeatState(HeartBeatState hbState)
1: 
1: 
1:     /**
0:      * TODO replace this with operations that don't expose private state
1:      */
0:     @Deprecated
/////////////////////////////////////////////////////////////////////////
1:     void updateTimestamp()
/////////////////////////////////////////////////////////////////////////
0:     void isAlive(boolean value)
/////////////////////////////////////////////////////////////////////////
0:     void isAGossiper(boolean value)
0:     public void setHasToken(boolean value)
/////////////////////////////////////////////////////////////////////////
commit:7a4a709
/////////////////////////////////////////////////////////////////////////
1:  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndpointState
/////////////////////////////////////////////////////////////////////////
0:         serializer_ = new EndpointStateSerializer();
/////////////////////////////////////////////////////////////////////////
0: class EndpointStateSerializer implements ICompactSerializer<EndpointState>
0:     private static Logger logger_ = LoggerFactory.getLogger(EndpointStateSerializer.class);
/////////////////////////////////////////////////////////////////////////
0:                     logger_.info("@@@@ Breaking out to respect the MTU size in EndpointState serializer. Estimate is {} @@@@", estimate);;
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.*;
0: import org.apache.cassandra.io.ICompactSerializer;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: /**
0:  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndPointState
1:  * instance. Any state for a given endpoint can be retrieved from this instance.
1:  */
1: 
1: public class EndpointState
1: {
0:     private static ICompactSerializer<EndpointState> serializer_;
0:     static
1:     {
0:         serializer_ = new EndPointStateSerializer();
1:     }
1:     
0:     HeartBeatState hbState_;
0:     Map<String, ApplicationState> applicationState_ = new Hashtable<String, ApplicationState>();
1:     
1:     /* fields below do not get serialized */
0:     long updateTimestamp_;
0:     boolean isAlive_;
0:     boolean isAGossiper_;
1: 
0:     // whether this endpoint has token associated with it or not. Initially set false for all
0:     // endpoints. After certain time of inactivity, gossiper will examine if this node has a
0:     // token or not and will set this true if token is found. If there is no token, this is a
0:     // fat client and will be removed automatically from gossip.
0:     boolean hasToken_;
1: 
0:     public static ICompactSerializer<EndpointState> serializer()
1:     {
0:         return serializer_;
1:     }
1:     
0:     EndpointState(HeartBeatState hbState)
1:     { 
0:         hbState_ = hbState; 
0:         updateTimestamp_ = System.currentTimeMillis(); 
0:         isAlive_ = true; 
0:         isAGossiper_ = false;
0:         hasToken_ = false;
1:     }
1:         
1:     HeartBeatState getHeartBeatState()
1:     {
0:         return hbState_;
1:     }
1:     
0:     synchronized void setHeartBeatState(HeartBeatState hbState)
1:     {
1:         updateTimestamp();
0:         hbState_ = hbState;
1:     }
1:     
0:     public ApplicationState getApplicationState(String key)
1:     {
0:         return applicationState_.get(key);
1:     }
1:     
0:     public Map<String, ApplicationState> getApplicationStateMap()
1:     {
0:         return applicationState_;
1:     }
1:     
0:     void addApplicationState(String key, ApplicationState appState)
1:     {
0:         applicationState_.put(key, appState);        
1:     }
1:     
1:     /* getters and setters */
0:     long getUpdateTimestamp()
1:     {
0:         return updateTimestamp_;
1:     }
1:     
0:     synchronized void updateTimestamp()
1:     {
0:         updateTimestamp_ = System.currentTimeMillis();
1:     }
1:     
1:     public boolean isAlive()
1:     {        
0:         return isAlive_;
1:     }
1: 
0:     synchronized void isAlive(boolean value)
1:     {        
0:         isAlive_ = value;        
1:     }
1: 
1:     
0:     boolean isAGossiper()
1:     {        
0:         return isAGossiper_;
1:     }
1: 
0:     synchronized void isAGossiper(boolean value)
1:     {                
0:         //isAlive_ = false;
0:         isAGossiper_ = value;        
1:     }
1: 
0:     public synchronized void setHasToken(boolean value)
1:     {
0:         hasToken_ = value;
1:     }
1: 
0:     public boolean getHasToken()
1:     {
0:         return hasToken_;
1:     }
1: 
0:     public List<Map.Entry<String,ApplicationState>> getSortedApplicationStates()
1:     {
0:         ArrayList<Map.Entry<String, ApplicationState>> entries = new ArrayList<Map.Entry<String, ApplicationState>>();
0:         entries.addAll(applicationState_.entrySet());
0:         Collections.sort(entries, new Comparator<Map.Entry<String, ApplicationState>>()
1:         {
0:             public int compare(Map.Entry<String, ApplicationState> lhs, Map.Entry<String, ApplicationState> rhs)
1:             {
0:                 return lhs.getValue().compareTo(rhs.getValue());
1:             }
0:         });
1: 
0:         return entries;
1:     }
1: 
1: }
1: 
0: class EndPointStateSerializer implements ICompactSerializer<EndpointState>
1: {
0:     private static Logger logger_ = LoggerFactory.getLogger(EndPointStateSerializer.class);
1:     
0:     public void serialize(EndpointState epState, DataOutputStream dos) throws IOException
1:     {
0:         /* These are for estimating whether we overshoot the MTU limit */
0:         int estimate = 0;
1: 
1:         /* serialize the HeartBeatState */
1:         HeartBeatState hbState = epState.getHeartBeatState();
0:         HeartBeatState.serializer().serialize(hbState, dos);
1: 
1:         /* serialize the map of ApplicationState objects */
0:         int size = epState.applicationState_.size();
0:         dos.writeInt(size);
0:         if ( size > 0 )
1:         {   
0:             Set<String> keys = epState.applicationState_.keySet();
0:             for( String key : keys )
1:             {
0:                 if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
1:                 {
0:                     logger_.info("@@@@ Breaking out to respect the MTU size in EndPointState serializer. Estimate is {} @@@@", estimate);;
0:                     break;
1:                 }
1:             
0:                 ApplicationState appState = epState.applicationState_.get(key);
0:                 if ( appState != null )
1:                 {
0:                     int pre = dos.size();
0:                     dos.writeUTF(key);
0:                     ApplicationState.serializer().serialize(appState, dos);                    
0:                     int post = dos.size();
0:                     estimate = post - pre;
1:                 }                
1:             }
1:         }
1:     }
1: 
0:     public EndpointState deserialize(DataInputStream dis) throws IOException
1:     {
0:         HeartBeatState hbState = HeartBeatState.serializer().deserialize(dis);
0:         EndpointState epState = new EndpointState(hbState);
1: 
0:         int appStateSize = dis.readInt();
0:         for ( int i = 0; i < appStateSize; ++i )
1:         {
0:             if ( dis.available() == 0 )
1:             {
0:                 break;
1:             }
1:             
0:             String key = dis.readUTF();    
0:             ApplicationState appState = ApplicationState.serializer().deserialize(dis);            
0:             epState.addApplicationState(key, appState);            
1:         }
0:         return epState;
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7588f74
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public final static IVersionedSerializer<EndpointState> serializer = new EndpointStateSerializer();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         HeartBeatState.serializer.serialize(hbState, dos, version);
/////////////////////////////////////////////////////////////////////////
0:         HeartBeatState hbState = HeartBeatState.serializer.deserialize(dis, version);
/////////////////////////////////////////////////////////////////////////
1:         long size = HeartBeatState.serializer.serializedSize(epState.getHeartBeatState(), version);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     {
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     {
/////////////////////////////////////////////////////////////////////////
0:     {
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     {
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     {
/////////////////////////////////////////////////////////////////////////
0:     {
/////////////////////////////////////////////////////////////////////////
0: 
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     protected static final Logger logger = LoggerFactory.getLogger(EndpointState.class);
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger = LoggerFactory.getLogger(EndpointStateSerializer.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(EndpointState epState, DataOutputStream dos, int version) throws IOException
0:         HeartBeatState.serializer().serialize(hbState, dos, version);
/////////////////////////////////////////////////////////////////////////
0:                 VersionedValue.serializer.serialize(value, dos, version);
0:     public EndpointState deserialize(DataInputStream dis, int version) throws IOException
0:         HeartBeatState hbState = HeartBeatState.serializer().deserialize(dis, version);
/////////////////////////////////////////////////////////////////////////
0:             VersionedValue value = VersionedValue.serializer.deserialize(dis, version);
============================================================================