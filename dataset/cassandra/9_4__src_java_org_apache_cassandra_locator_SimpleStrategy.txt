1:88edbed: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:07cf56f:  */
1:066ef58: package org.apache.cassandra.locator;
1:34e241a: 
1:34e241a: import java.net.InetAddress;
1:e98eb1c: import java.util.ArrayList;
1:c315745: import java.util.Collections;
1:c315745: import java.util.Collection;
1:e98eb1c: import java.util.Iterator;
1:e98eb1c: import java.util.List;
1:e98eb1c: import java.util.Map;
1:720c49a: 
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:066ef58: import org.apache.cassandra.dht.Token;
1:fd66ccf: 
3:847f3b0: 
1:066ef58: /**
1:066ef58:  * This class returns the nodes responsible for a given
1:066ef58:  * key but does not respect rack awareness. Basically
1:0789a58:  * returns the RF nodes that lie right next to each other
1:066ef58:  * on the ring.
1:066ef58:  */
1:916c810: public class SimpleStrategy extends AbstractReplicationStrategy
1:8c7bc2f: {
1:0e96e58:     public SimpleStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
4:847f3b0:     {
1:0e96e58:         super(keyspaceName, tokenMetadata, snitch, configOptions);
4:847f3b0:     }
1:0789a58: 
1:ce9179e:     public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:8c7bc2f:     {
1:df8a933:         int replicas = getReplicationFactor();
1:d8755b3:         ArrayList<Token> tokens = metadata.sortedTokens();
1:ce9179e:         List<InetAddress> endpoints = new ArrayList<InetAddress>(replicas);
1:7dbbca6: 
1:720c49a:         if (tokens.isEmpty())
1:720c49a:             return endpoints;
1:df8a933: 
1:847f3b0:         // Add the token at the index by default
1:389bac7:         Iterator<Token> iter = TokenMetadata.ringIterator(tokens, token, false);
1:6877a05:         while (endpoints.size() < replicas && iter.hasNext())
1:8c7bc2f:         {
1:e85afdc:             InetAddress ep = metadata.getEndpoint(iter.next());
1:e85afdc:             if (!endpoints.contains(ep))
1:e85afdc:                 endpoints.add(ep);
1:8c7bc2f:         }
1:924c7e5:         return endpoints;
1:8c7bc2f:     }
1:6877a05: 
1:8c7bc2f:     public int getReplicationFactor()
1:8c7bc2f:     {
1:8c7bc2f:         return Integer.parseInt(this.configOptions.get("replication_factor"));
1:8c7bc2f:     }
1:8c7bc2f: 
1:8c7bc2f:     public void validateOptions() throws ConfigurationException
1:8c7bc2f:     {
1:dc94f37:         String rf = configOptions.get("replication_factor");
1:dc94f37:         if (rf == null)
2:8c7bc2f:             throw new ConfigurationException("SimpleStrategy requires a replication_factor strategy option.");
1:dc94f37:         validateReplicationFactor(rf);
1:8c7bc2f:     }
1:c315745: 
1:c315745:     public Collection<String> recognizedOptions()
1:c315745:     {
1:c315745:         return Collections.<String>singleton("replication_factor");
1:c315745:     }
1:8c7bc2f: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:     public SimpleStrategy(String keyspaceName, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
1:         super(keyspaceName, tokenMetadata, snitch, configOptions);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c315745
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Collection<String> recognizedOptions()
1:     {
1:         return Collections.<String>singleton("replication_factor");
1:     }
commit:5267112
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Table;
commit:dc94f37
/////////////////////////////////////////////////////////////////////////
0:         validateExpectedOptions(Arrays.<String>asList("replication_factor"));
1:         String rf = configOptions.get("replication_factor");
1:         if (rf == null)
1:         validateReplicationFactor(rf);
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Eric Evans
-------------------------------------------------------------------------------
commit:e85afdc
/////////////////////////////////////////////////////////////////////////
1:             InetAddress ep = metadata.getEndpoint(iter.next());
1:             if (!endpoints.contains(ep))
1:                 endpoints.add(ep);
commit:df8a933
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:     public RackUnawareStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
0:         super(table, tokenMetadata, snitch, configOptions);
0:     public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:         int replicas = getReplicationFactor();
/////////////////////////////////////////////////////////////////////////
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1bb2f32
commit:fd66ccf
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         warnOnUnexpectedOptions(Arrays.<String>asList("replication_factor"));
commit:b803c37
commit:921f499
/////////////////////////////////////////////////////////////////////////
0:         if (configOptions == null || configOptions.get("replication_factor") == null)
0:         validateReplicationFactor(configOptions.get("replication_factor"));
commit:8c7bc2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public int getReplicationFactor()
1:     {
1:         return Integer.parseInt(this.configOptions.get("replication_factor"));
1:     }
1: 
1:     public void validateOptions() throws ConfigurationException
1:     {
0:         if (this.configOptions == null)
1:         {
1:             throw new ConfigurationException("SimpleStrategy requires a replication_factor strategy option.");
1:         }
0:         if (this.configOptions.get("replication_factor") == null)
1:         {
1:             throw new ConfigurationException("SimpleStrategy requires a replication_factor strategy option.");
1:         }
0:         int rf = Integer.parseInt(this.configOptions.get("replication_factor"));
0:         if (rf < 0)
1:         {
0:             throw new ConfigurationException("Replication factor for SimpleStrategy must be non-negative, "+rf+" given.");
1:         }
1:     }
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
commit:389bac7
/////////////////////////////////////////////////////////////////////////
1:         Iterator<Token> iter = TokenMetadata.ringIterator(tokens, token, false);
commit:ce9179e
/////////////////////////////////////////////////////////////////////////
1:     public List<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata)
1:         List<InetAddress> endpoints = new ArrayList<InetAddress>(replicas);
commit:916c810
/////////////////////////////////////////////////////////////////////////
1: public class SimpleStrategy extends AbstractReplicationStrategy
0:     public SimpleStrategy(String table, TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, String> configOptions)
commit:0789a58
/////////////////////////////////////////////////////////////////////////
1:  * returns the RF nodes that lie right next to each other
/////////////////////////////////////////////////////////////////////////
0:         int replicas = getReplicationFactor(table);
/////////////////////////////////////////////////////////////////////////
0:         if (endpoints.size() < replicas)
0:             throw new IllegalStateException(String.format("replication factor (%s) exceeds number of endpoints (%s)", replicas, endpoints.size()));
1:         
commit:d8755b3
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Token> tokens = metadata.sortedTokens();
commit:34e241a
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.net.InetAddress;
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:     public Set<InetAddress> calculateNaturalEndpoints(Token token, TokenMetadata metadata, String table)
0:         Set<InetAddress> endpoints = new HashSet<InetAddress>(replicas);
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, IEndpointSnitch snitch)
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
0:             endpoints.add(metadata.getEndpoint(iter.next()));
commit:6877a05
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:         int replicas = DatabaseDescriptor.getReplicationFactor(table);
0:         List<Token> tokens = metadata.sortedTokens();
0:         ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(replicas);
0:         Iterator<Token> iter = TokenMetadata.ringIterator(tokens, token);
1:         while (endpoints.size() < replicas && iter.hasNext())
0:             endpoints.add(metadata.getEndPoint(iter.next()));
1: 
commit:720c49a
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(tokenList.size());
1: 
1:         if (tokens.isEmpty())
1:             return endpoints;
/////////////////////////////////////////////////////////////////////////
commit:93c5afa
/////////////////////////////////////////////////////////////////////////
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner, int replicas)
0:         super(tokenMetadata, partitioner, replicas);
commit:b3b5893
/////////////////////////////////////////////////////////////////////////
0:         if (index < 0)
/////////////////////////////////////////////////////////////////////////
0:         tokenList.add((Token) tokens.get(index));
0:         startIndex = (index + 1) % totalNodes;
0:         for (int i = startIndex, count = 1; count < totalNodes && tokenList.size() < replicas_; ++count, i = (i + 1) % totalNodes)
0:             assert !tokenList.contains(tokens.get(i));
0:             tokenList.add((Token) tokens.get(i));
commit:3678daa
/////////////////////////////////////////////////////////////////////////
0:     // TODO this doesn't need to worry about bootstrap tokens being in the normal tokens map
0:     public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata)
0:         List tokens = new ArrayList<Token>(metadata.sortedTokens());
/////////////////////////////////////////////////////////////////////////
0:         for (Token t : tokenList)
0:             endpoints.add(metadata.getEndPoint(t));
commit:924c7e5
/////////////////////////////////////////////////////////////////////////
0:     public ArrayList<InetAddress> getNaturalEndpoints(Token token, Map<Token, InetAddress> tokenToEndPointMap)
/////////////////////////////////////////////////////////////////////////
0:         ArrayList<InetAddress> endpoints = new ArrayList<InetAddress>(tokenList.size());
0:             endpoints.add(tokenToEndPointMap.get(t));
1:         return endpoints;
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:     public InetAddress[] getReadStorageEndPoints(Token token, Map<Token, InetAddress> tokenToEndPointMap)
/////////////////////////////////////////////////////////////////////////
0:         List<InetAddress> list = new ArrayList<InetAddress>();
0:         return list.toArray(new InetAddress[list.size()]);
commit:d5eaa4e
/////////////////////////////////////////////////////////////////////////
0:         return retrofitPorts(list).toArray(new EndPoint[list.size()]);
commit:7dbbca6
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         List<EndPoint> list = new ArrayList<EndPoint>();
0:         for (Token t: tokenList)
0:             list.add(tokenToEndPointMap.get(t));
0:         retrofitPorts(list);
0:         return list.toArray(new EndPoint[list.size()]);
commit:eb83251
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class RackUnawareStrategy extends AbstractReplicationStrategy
0:     public EndPoint[] getReadStorageEndPoints(Token token)
0:         return getReadStorageEndPoints(token, tokenMetadata_.cloneTokenEndPointMap());
0:     public EndPoint[] getWriteStorageEndPoints(Token token)
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getReadStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap)
/////////////////////////////////////////////////////////////////////////
commit:847f3b0
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getStorageEndPointsForWrite(Token token)
1:     {
0:         Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
0:         Map<Token, EndPoint> bootstrapTokensToEndpointMap = tokenMetadata_.cloneBootstrapNodes();
0:         List<Token> tokenList = getStorageTokens(token, tokenToEndPointMap, bootstrapTokensToEndpointMap);
0:         List<EndPoint> list = new ArrayList<EndPoint>();
0:         for (Token t: tokenList)
1:         {
0:             EndPoint e = tokenToEndPointMap.get(t);
0:             if (e == null) 
0:                 e = bootstrapTokensToEndpointMap.get(t); 
0:             assert e != null;
0:             list.add(e);
1:         }
0:         retrofitPorts(list);
0:         return list.toArray(new EndPoint[list.size()]);            
1:     }
1:     
0:         List<Token> tokenList = getStorageTokens(token, tokenToEndPointMap, null);
0:         for (Token t: tokenList)
0:             list.add(tokenToEndPointMap.get(t));
0:         retrofitPorts(list);
0:         return list.toArray(new EndPoint[list.size()]);
1:     }
1: 
0:     private List<Token> getStorageTokens(Token token, Map<Token, EndPoint> tokenToEndPointMap, Map<Token, EndPoint> bootStrapTokenToEndPointMap)
1:     {
0:         int startIndex;
0:         List<Token> tokenList = new ArrayList<Token>();
0:         List<Token> bsTokens = null;
1:         
0:         if (bootStrapTokenToEndPointMap != null)
1:         {
0:             bsTokens = new ArrayList<Token>(bootStrapTokenToEndPointMap.keySet());
0:             tokens.addAll(bsTokens);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // Add the token at the index by default
0:         tokenList.add((Token)tokens.get(index));
0:         if (bsTokens == null || !bsTokens.contains(tokens.get(index)))
0:             foundCount++;
0:             if(!tokenList.contains(tokens.get(i)))
0:                 tokenList.add((Token)tokens.get(i));
0:                 //Don't count bootstrapping tokens towards the count
0:                 if (bsTokens==null || !bsTokens.contains(tokens.get(i)))
0:                     foundCount++;
0:         return tokenList;
/////////////////////////////////////////////////////////////////////////
commit:e959b2c
/////////////////////////////////////////////////////////////////////////
0:             results.put(key, getStorageEndPoints(partitioner_.getToken(key)));
commit:8a9c25a
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getStorageEndPoints(Token token)
0:         return getStorageEndPoints(token, tokenMetadata_.cloneTokenEndPointMap());            
0:     public EndPoint[] getStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap)
/////////////////////////////////////////////////////////////////////////
0:         list.add(tokenToEndPointMap.get(tokens.get(index)));
/////////////////////////////////////////////////////////////////////////
0:     public Map<String, EndPoint[]> getStorageEndPoints(String[] keys)
0:             results.put(key, getStorageEndPoints(partitioner_.getInitialToken(key)));
0: }
commit:70ce402
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getStorageEndPoints(Token token, int offset)
0:         return getStorageEndPoints(token, tokenMetadata_.cloneTokenEndPointMap(), offset);            
0:     public EndPoint[] getStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap, int offset)
/////////////////////////////////////////////////////////////////////////
0:         int realIndex = (index + offset) % totalNodes;
0:         list.add(tokenToEndPointMap.get(tokens.get(realIndex)));
/////////////////////////////////////////////////////////////////////////
0:     public Map<String, EndPoint[]> getStorageEndPoints(String[] keys, int offset)
0:             results.put(key, getStorageEndPoints(partitioner_.getInitialToken(key), offset));
0: }
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.locator;
0: 
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: 
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.dht.IPartitioner;
0: import org.apache.cassandra.net.EndPoint;
0: 
1: /**
1:  * This class returns the nodes responsible for a given
1:  * key but does not respect rack awareness. Basically
0:  * returns the 3 nodes that lie right next to each other
1:  * on the ring.
1:  */
0: public class RackUnawareStrategy extends AbstractStrategy
0: {
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner, int replicas, int storagePort)
0:     {
0:         super(tokenMetadata, partitioner, replicas, storagePort);
0:     }
0: 
0:     public EndPoint[] getStorageEndPoints(Token token)
0:     {
0:         return getStorageEndPoints(token, tokenMetadata_.cloneTokenEndPointMap());            
0:     }
0:     
0:     public EndPoint[] getStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap)
0:     {
0:         int startIndex;
0:         List<EndPoint> list = new ArrayList<EndPoint>();
0:         int foundCount = 0;
0:         List tokens = new ArrayList<Token>(tokenToEndPointMap.keySet());
0:         Collections.sort(tokens);
0:         int index = Collections.binarySearch(tokens, token);
0:         if(index < 0)
0:         {
0:             index = (index + 1) * (-1);
0:             if (index >= tokens.size())
0:                 index = 0;
0:         }
0:         int totalNodes = tokens.size();
0:         // Add the node at the index by default
0:         list.add(tokenToEndPointMap.get(tokens.get(index)));
0:         foundCount++;
0:         startIndex = (index + 1)%totalNodes;
0:         // If we found N number of nodes we are good. This loop will just exit. Otherwise just
0:         // loop through the list and add until we have N nodes.
0:         for (int i = startIndex, count = 1; count < totalNodes && foundCount < replicas_; ++count, i = (i+1)%totalNodes)
0:         {
0:             if( ! list.contains(tokenToEndPointMap.get(tokens.get(i))))
0:             {
0:                 list.add(tokenToEndPointMap.get(tokens.get(i)));
0:                 foundCount++;
0:             }
0:         }
0:         retrofitPorts(list);
0:         return list.toArray(new EndPoint[list.size()]);
0:     }
0:             
0:     public Map<String, EndPoint[]> getStorageEndPoints(String[] keys)
0:     {
0:     	Map<String, EndPoint[]> results = new HashMap<String, EndPoint[]>();
0: 
0:         for ( String key : keys )
0:         {
0:             results.put(key, getStorageEndPoints(partitioner_.getInitialToken(key)));
0:         }
0: 
0:         return results;
0:     }
0: }
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
commit:71739ef
commit:bfb2e95
/////////////////////////////////////////////////////////////////////////
0:             results.put(key, getStorageEndPoints(partitioner_.getInitialToken(key)));
commit:ec7f04b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.IPartitioner;
/////////////////////////////////////////////////////////////////////////
0: {
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, IPartitioner partitioner, int replicas, int storagePort)
0:         super(tokenMetadata, partitioner, replicas, storagePort);
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         for (int i = startIndex, count = 1; count < totalNodes && foundCount < replicas_; ++count, i = (i+1)%totalNodes)
/////////////////////////////////////////////////////////////////////////
0:             results.put(key, getStorageEndPoints(partitioner_.getTokenForKey(key)));
commit:907d92e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.Token;
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getStorageEndPoints(Token token)
0:     public EndPoint[] getStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap)
0:         List tokens = new ArrayList<Token>(tokenToEndPointMap.keySet());
/////////////////////////////////////////////////////////////////////////
0:             results.put(key, getStorageEndPoints(StorageService.token(key)));
commit:2e9466c
/////////////////////////////////////////////////////////////////////////
0:         int startIndex;
/////////////////////////////////////////////////////////////////////////
0:         return list.toArray(new EndPoint[list.size()]);
0:     {
0: 
0:             results.put(key, getStorageEndPoints(token));
0: 
commit:63a748c
/////////////////////////////////////////////////////////////////////////
0:             
commit:dd61d51
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.Token;
/////////////////////////////////////////////////////////////////////////
0:     public EndPoint[] getStorageEndPoints(Token token)
0:     public EndPoint[] getStorageEndPoints(Token token, Map<Token, EndPoint> tokenToEndPointMap)
0:         List tokens = new ArrayList<Token>(tokenToEndPointMap.keySet());
commit:8ce795a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:771695a
/////////////////////////////////////////////////////////////////////////
0:         Set<InetAddress> endpoints = new HashSet<InetAddress>(replicas);
commit:e0d4419
/////////////////////////////////////////////////////////////////////////
0: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
0:         Set<InetAddress> endpoints = new LinkedHashSet<InetAddress>(replicas);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:3577fd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, IEndPointSnitch snitch)
0:         super(tokenMetadata, snitch);
0:     public ArrayList<InetAddress> getNaturalEndpoints(Token token, TokenMetadata metadata, String table)
/////////////////////////////////////////////////////////////////////////
0:         final int replicas = DatabaseDescriptor.getReplicationFactor(table);
0:         for (int i = startIndex, count = 1; count < totalNodes && tokenList.size() < replicas; ++count, i = (i + 1) % totalNodes)
commit:dcaf84e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata, int replicas)
0:         super(tokenMetadata, replicas);
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:bd884e4
/////////////////////////////////////////////////////////////////////////
0: import java.math.BigInteger;
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import org.apache.cassandra.dht.Range;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     private Map<Range, List<EndPoint>> rangeToEndPointMap_;
0:     
0:     public EndPoint[] getStorageEndPoints(BigInteger token)
0:     public EndPoint[] getStorageEndPoints(BigInteger token, Map<BigInteger, EndPoint> tokenToEndPointMap)
0:         List<BigInteger> tokens = new ArrayList<BigInteger>(tokenToEndPointMap.keySet());
/////////////////////////////////////////////////////////////////////////
0:     
0:     private void doInitialization()
0:     {
0:         if ( !initialized_.get() )
0:         {
0:             /* construct the mapping from the ranges to the replicas responsible for them */
0:             rangeToEndPointMap_ = StorageService.instance().getRangeToEndPointMap();            
0:             initialized_.set(true);
0:         }
0:     }
0:     
0:     /**
0:      * This method determines which range in the array actually contains
0:      * the hash of the key
0:      * @param ranges
0:      * @param key
0:      * @return
0:      */
0:     private int findRangeIndexForKey(Range[] ranges, String key)
0:     {
0:         int index = 0;
0:         BigInteger hash = StorageService.hash(key);
0:         for ( int i = 0; i < ranges.length; ++i )
0:         {
0:             if ( ranges[i].contains(hash) )
0:             {
0:                 index = i;
0:                 break;
0:             }
0:         }
0:         
0:         return index;
0:     }
0:     
0:     public Map<String, EndPoint[]> getStorageEndPoints(String[] keys)
0:     {              
0:         Arrays.sort(keys);
0:         Range[] ranges = StorageService.instance().getAllRanges();
0:         
0:     	Map<String, EndPoint[]> results = new HashMap<String, EndPoint[]>();
0:     	List<EndPoint> list = new ArrayList<EndPoint>();
0:     	int startIndex = 0 ;
0:     	int foundCount = 0;
0:     	
0:     	Map<BigInteger, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
0:     	int N = DatabaseDescriptor.getReplicationFactor();
0:         List<BigInteger> tokens = new ArrayList<BigInteger>(tokenToEndPointMap.keySet());
0:         Collections.sort(tokens);
0:         for ( String key : keys )
0:         {
0:         	BigInteger token = StorageService.hash(key);
0:         	int index = Collections.binarySearch(tokens, token);
0:             if(index < 0)
0:             {
0:                 index = (index + 1) * (-1);
0:                 if (index >= tokens.size())
0:                     index = 0;
0:             }
0:             int totalNodes = tokens.size();
0:             // Add the node at the index by default
0:             list.add(tokenToEndPointMap.get(tokens.get(index)));
0:             foundCount++;
0:             startIndex = (index + 1)%totalNodes;
0:             // If we found N number of nodes we are good. This loop will just exit. Otherwise just
0:             // loop through the list and add until we have N nodes.
0:             for (int i = startIndex, count = 1; count < totalNodes && foundCount < N; ++count, i = (i+1)%totalNodes)
0:             {
0:                 if( ! list.contains(tokenToEndPointMap.get(tokens.get(i))))
0:                 {
0:                     list.add(tokenToEndPointMap.get(tokens.get(i)));
0:                     foundCount++;
0:                     continue;
0:                 }
0:             }
0:             retrofitPorts(list);
0:             results.put(key, list.toArray(new EndPoint[0]));
0:         }
0:         
0:         return results;
0:     }
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
0: 
0: import java.math.BigInteger;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.dht.Range;
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.service.StorageService;
0: 
0: 
0: /**
0:  * This class returns the nodes responsible for a given
0:  * key but does not respect rack awareness. Basically
0:  * returns the 3 nodes that lie right next to each other
0:  * on the ring.
0:  */
0: public class RackUnawareStrategy extends AbstractStrategy
0: {   
0:     /* Use this flag to check if initialization is in order. */
0:     private AtomicBoolean initialized_ = new AtomicBoolean(false);
0:     private Map<Range, List<EndPoint>> rangeToEndPointMap_;
0:     
0:     public RackUnawareStrategy(TokenMetadata tokenMetadata)
0:     {
0:         super(tokenMetadata);
0:     }
0:     
0:     public EndPoint[] getStorageEndPoints(BigInteger token)
0:     {
0:         return getStorageEndPoints(token, tokenMetadata_.cloneTokenEndPointMap());            
0:     }
0:     
0:     public EndPoint[] getStorageEndPoints(BigInteger token, Map<BigInteger, EndPoint> tokenToEndPointMap)
0:     {
0:         int startIndex = 0 ;
0:         List<EndPoint> list = new ArrayList<EndPoint>();
0:         int foundCount = 0;
0:         int N = DatabaseDescriptor.getReplicationFactor();
0:         List<BigInteger> tokens = new ArrayList<BigInteger>(tokenToEndPointMap.keySet());
0:         Collections.sort(tokens);
0:         int index = Collections.binarySearch(tokens, token);
0:         if(index < 0)
0:         {
0:             index = (index + 1) * (-1);
0:             if (index >= tokens.size())
0:                 index = 0;
0:         }
0:         int totalNodes = tokens.size();
0:         // Add the node at the index by default
0:         list.add(tokenToEndPointMap.get(tokens.get(index)));
0:         foundCount++;
0:         startIndex = (index + 1)%totalNodes;
0:         // If we found N number of nodes we are good. This loop will just exit. Otherwise just
0:         // loop through the list and add until we have N nodes.
0:         for (int i = startIndex, count = 1; count < totalNodes && foundCount < N; ++count, i = (i+1)%totalNodes)
0:         {
0:             if( ! list.contains(tokenToEndPointMap.get(tokens.get(i))))
0:             {
0:                 list.add(tokenToEndPointMap.get(tokens.get(i)));
0:                 foundCount++;
0:                 continue;
0:             }
0:         }
0:         retrofitPorts(list);
0:         return list.toArray(new EndPoint[0]);
0:     }
0:     
0:     private void doInitialization()
0:     {
0:         if ( !initialized_.get() )
0:         {
0:             /* construct the mapping from the ranges to the replicas responsible for them */
0:             rangeToEndPointMap_ = StorageService.instance().getRangeToEndPointMap();            
0:             initialized_.set(true);
0:         }
0:     }
0:     
0:     /**
0:      * This method determines which range in the array actually contains
0:      * the hash of the key
0:      * @param ranges
0:      * @param key
0:      * @return
0:      */
0:     private int findRangeIndexForKey(Range[] ranges, String key)
0:     {
0:         int index = 0;
0:         BigInteger hash = StorageService.hash(key);
0:         for ( int i = 0; i < ranges.length; ++i )
0:         {
0:             if ( ranges[i].contains(hash) )
0:             {
0:                 index = i;
0:                 break;
0:             }
0:         }
0:         
0:         return index;
0:     }
0:     
0:     public Map<String, EndPoint[]> getStorageEndPoints(String[] keys)
0:     {              
0:         Arrays.sort(keys);
0:         Range[] ranges = StorageService.instance().getAllRanges();
0:         
0:     	Map<String, EndPoint[]> results = new HashMap<String, EndPoint[]>();
0:     	List<EndPoint> list = new ArrayList<EndPoint>();
0:     	int startIndex = 0 ;
0:     	int foundCount = 0;
0:     	
0:     	Map<BigInteger, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
0:     	int N = DatabaseDescriptor.getReplicationFactor();
0:         List<BigInteger> tokens = new ArrayList<BigInteger>(tokenToEndPointMap.keySet());
0:         Collections.sort(tokens);
0:         for ( String key : keys )
0:         {
0:         	BigInteger token = StorageService.hash(key);
0:         	int index = Collections.binarySearch(tokens, token);
0:             if(index < 0)
0:             {
0:                 index = (index + 1) * (-1);
0:                 if (index >= tokens.size())
0:                     index = 0;
0:             }
0:             int totalNodes = tokens.size();
0:             // Add the node at the index by default
0:             list.add(tokenToEndPointMap.get(tokens.get(index)));
0:             foundCount++;
0:             startIndex = (index + 1)%totalNodes;
0:             // If we found N number of nodes we are good. This loop will just exit. Otherwise just
0:             // loop through the list and add until we have N nodes.
0:             for (int i = startIndex, count = 1; count < totalNodes && foundCount < N; ++count, i = (i+1)%totalNodes)
0:             {
0:                 if( ! list.contains(tokenToEndPointMap.get(tokens.get(i))))
0:                 {
0:                     list.add(tokenToEndPointMap.get(tokens.get(i)));
0:                     foundCount++;
0:                     continue;
0:                 }
0:             }
0:             retrofitPorts(list);
0:             results.put(key, list.toArray(new EndPoint[0]));
0:         }
0:         
0:         return results;
0:     }
0: }
============================================================================