1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import static java.lang.String.format;
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:c5a8190: @Command(name = "proxyhistograms", description = "Print statistic histograms for network operations")
1:c5a8190: public class ProxyHistograms extends NodeToolCmd
1:c5a8190: {
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:83f4e61:         String[] percentiles = {"50%", "75%", "95%", "98%", "99%", "Min", "Max"};
1:c5a8190:         double[] readLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("Read"));
1:c5a8190:         double[] writeLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("Write"));
1:c5a8190:         double[] rangeLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("RangeSlice"));
1:83f4e61:         double[] casReadLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("CASRead"));
1:83f4e61:         double[] casWriteLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("CASWrite"));
1:83f4e61:         double[] viewWriteLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("ViewWrite"));
1:c5a8190: 
1:c5a8190:         System.out.println("proxy histograms");
1:83f4e61:         System.out.println(format("%-10s%19s%19s%19s%19s%19s%19s",
1:83f4e61:                 "Percentile", "Read Latency", "Write Latency", "Range Latency", "CAS Read Latency", "CAS Write Latency", "View Write Latency"));
1:83f4e61:         System.out.println(format("%-10s%19s%19s%19s%19s%19s%19s",
1:83f4e61:                 "", "(micros)", "(micros)", "(micros)", "(micros)", "(micros)", "(micros)"));
1:c5a8190:         for (int i = 0; i < percentiles.length; i++)
1:c5a8190:         {
1:83f4e61:             System.out.println(format("%-10s%19.2f%19.2f%19.2f%19.2f%19.2f%19.2f",
1:c5a8190:                     percentiles[i],
1:c5a8190:                     readLatency[i],
1:c5a8190:                     writeLatency[i],
1:83f4e61:                     rangeLatency[i],
1:83f4e61:                     casReadLatency[i],
1:83f4e61:                     casWriteLatency[i],
1:83f4e61:                     viewWriteLatency[i]));
2:c5a8190:         }
1:c5a8190:         System.out.println();
1:83f4e61:     }
1:c5a8190: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:83f4e61
/////////////////////////////////////////////////////////////////////////
1:         String[] percentiles = {"50%", "75%", "95%", "98%", "99%", "Min", "Max"};
1:         double[] casReadLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("CASRead"));
1:         double[] casWriteLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("CASWrite"));
1:         double[] viewWriteLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("ViewWrite"));
1:         System.out.println(format("%-10s%19s%19s%19s%19s%19s%19s",
1:                 "Percentile", "Read Latency", "Write Latency", "Range Latency", "CAS Read Latency", "CAS Write Latency", "View Write Latency"));
1:         System.out.println(format("%-10s%19s%19s%19s%19s%19s%19s",
1:                 "", "(micros)", "(micros)", "(micros)", "(micros)", "(micros)", "(micros)"));
1:             System.out.println(format("%-10s%19.2f%19.2f%19.2f%19.2f%19.2f%19.2f",
1:                     rangeLatency[i],
1:                     casReadLatency[i],
1:                     casWriteLatency[i],
1:                     viewWriteLatency[i]));
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import static java.lang.String.format;
1: import io.airlift.command.Command;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "proxyhistograms", description = "Print statistic histograms for network operations")
1: public class ProxyHistograms extends NodeToolCmd
1: {
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
0:         String[] percentiles = new String[]{"50%", "75%", "95%", "98%", "99%", "Min", "Max"};
1:         double[] readLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("Read"));
1:         double[] writeLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("Write"));
1:         double[] rangeLatency = probe.metricPercentilesAsArray(probe.getProxyMetric("RangeSlice"));
1: 
1:         System.out.println("proxy histograms");
0:         System.out.println(format("%-10s%18s%18s%18s",
0:                 "Percentile", "Read Latency", "Write Latency", "Range Latency"));
0:         System.out.println(format("%-10s%18s%18s%18s",
0:                 "", "(micros)", "(micros)", "(micros)"));
1:         for (int i = 0; i < percentiles.length; i++)
1:         {
0:             System.out.println(format("%-10s%18.2f%18.2f%18.2f",
1:                     percentiles[i],
1:                     readLatency[i],
1:                     writeLatency[i],
0:                     rangeLatency[i]));
1:         }
1:         System.out.println();
1:     }
1: }
============================================================================