1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport.messages;
3:6d3a3ee: 
1:45b4fd8: import java.util.UUID;
1:45b4fd8: 
1:45b4fd8: import com.google.common.collect.ImmutableMap;
1:cbf304e: import io.netty.buffer.ByteBuf;
1:6d3a3ee: 
1:789aa72: import org.apache.cassandra.service.ClientState;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:45b4fd8: import org.apache.cassandra.tracing.Tracing;
1:6d3a3ee: import org.apache.cassandra.transport.*;
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:45b4fd8: import org.apache.cassandra.utils.UUIDGen;
1:6d3a3ee: 
1:6d3a3ee: public class PrepareMessage extends Message.Request
2:6d3a3ee: {
1:6d3a3ee:     public static final Message.Codec<PrepareMessage> codec = new Message.Codec<PrepareMessage>()
1:6d3a3ee:     {
1:e0adc16:         public PrepareMessage decode(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:         {
1:6d3a3ee:             String query = CBUtil.readLongString(body);
1:6d3a3ee:             return new PrepareMessage(query);
2:6d3a3ee:         }
1:6d3a3ee: 
1:e0adc16:         public void encode(PrepareMessage msg, ByteBuf dest, ProtocolVersion version)
1:6d3a3ee:         {
1:f8be23a:             CBUtil.writeLongString(msg.query, dest);
1:f8be23a:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(PrepareMessage msg, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             return CBUtil.sizeOfLongString(msg.query);
1:6d3a3ee:         }
1:6d3a3ee:     };
1:6d3a3ee: 
1:6d3a3ee:     private final String query;
1:6d3a3ee: 
1:6d3a3ee:     public PrepareMessage(String query)
1:6d3a3ee:     {
1:6d3a3ee:         super(Message.Type.PREPARE);
1:6d3a3ee:         this.query = query;
1:6d3a3ee:     }
1:6d3a3ee: 
1:aa83c94:     public Message.Response execute(QueryState state, long queryStartNanoTime)
1:6d3a3ee:     {
1:6d3a3ee:         try
1:6d3a3ee:         {
1:45b4fd8:             UUID tracingId = null;
1:45b4fd8:             if (isTracingRequested())
1:45b4fd8:             {
1:7442fc0:                 tracingId = UUIDGen.getTimeUUID();
1:45b4fd8:                 state.prepareTracingSession(tracingId);
1:45b4fd8:             }
1:45b4fd8: 
1:45b4fd8:             if (state.traceNextQuery())
1:45b4fd8:             {
1:e4eba25:                 state.createTracingSession();
1:814bd32:                 Tracing.instance.begin("Preparing CQL3 query", state.getClientAddress(), ImmutableMap.of("query", query));
1:45b4fd8:             }
1:45b4fd8: 
1:789aa72:             Message.Response response = ClientState.getCQLQueryHandler().prepare(query, state, getCustomPayload());
1:45b4fd8: 
1:45b4fd8:             if (tracingId != null)
1:45b4fd8:                 response.setTracingId(tracingId);
1:45b4fd8: 
1:45b4fd8:             return response;
1:6d3a3ee:         }
1:6d3a3ee:         catch (Exception e)
1:6d3a3ee:         {
1:f25da97:             JVMStabilityInspector.inspectThrowable(e);
1:6d3a3ee:             return ErrorMessage.fromException(e);
1:6d3a3ee:         }
1:45b4fd8:         finally
1:45b4fd8:         {
1:15df669:             Tracing.instance.stopSession();
1:45b4fd8:         }
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     @Override
1:6d3a3ee:     public String toString()
1:6d3a3ee:     {
1:6d3a3ee:         return "PREPARE " + query;
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         public PrepareMessage decode(ByteBuf body, ProtocolVersion version)
1:         public void encode(PrepareMessage msg, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(PrepareMessage msg, ProtocolVersion version)
commit:814bd32
/////////////////////////////////////////////////////////////////////////
1:                 Tracing.instance.begin("Preparing CQL3 query", state.getClientAddress(), ImmutableMap.of("query", query));
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Message.Response execute(QueryState state, long queryStartNanoTime)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e4eba25
/////////////////////////////////////////////////////////////////////////
1:                 state.createTracingSession();
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
0:                 state.createTracingSession(connection);
commit:789aa72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
1:             Message.Response response = ClientState.getCQLQueryHandler().prepare(query, state, getCustomPayload());
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:0705e8a
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
/////////////////////////////////////////////////////////////////////////
1:             JVMStabilityInspector.inspectThrowable(e);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:eefa14f
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:         public void encode(PrepareMessage msg, ChannelBuffer dest, int version)
1:             CBUtil.writeLongString(msg.query, dest);
1:         }
1: 
0:         public int encodedSize(PrepareMessage msg, int version)
1:         {
1:             return CBUtil.sizeOfLongString(msg.query);
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(PrepareMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:                 tracingId = UUIDGen.getTimeUUID();
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.tracing.Tracing;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
0:     public Message.Response execute(QueryState state)
1:             UUID tracingId = null;
1:             if (isTracingRequested())
1:             {
0:                 tracingId = UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress());
1:                 state.prepareTracingSession(tracingId);
1:             }
1: 
1:             if (state.traceNextQuery())
1:             {
0:                 state.createTracingSession();
0:                 Tracing.instance().begin("Preparing CQL3 query", ImmutableMap.of("query", query));
1:             }
1: 
0:             Message.Response response = QueryProcessor.prepare(query, state.getClientState(), false);
1: 
1:             if (tracingId != null)
1:                 response.setTracingId(tracingId);
1: 
1:             return response;
1:         finally
1:         {
0:             Tracing.instance().stopSession();
1:         }
commit:ccca5f1
/////////////////////////////////////////////////////////////////////////
0:             return QueryProcessor.prepare(query, ((ServerConnection)connection).clientState(), false);
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
0:             return QueryProcessor.prepare(query, ((ServerConnection)connection).clientState());
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
0: import java.util.EnumMap;
0: import java.util.Map;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
0: import org.apache.cassandra.cql3.QueryProcessor;
1: import org.apache.cassandra.transport.*;
0: import org.apache.cassandra.thrift.InvalidRequestException;
1: 
1: public class PrepareMessage extends Message.Request
1: {
1:     public static final Message.Codec<PrepareMessage> codec = new Message.Codec<PrepareMessage>()
1:     {
0:         public PrepareMessage decode(ChannelBuffer body)
1:         {
1:             String query = CBUtil.readLongString(body);
1:             return new PrepareMessage(query);
1:         }
1: 
0:         public ChannelBuffer encode(PrepareMessage msg)
1:         {
0:             return CBUtil.longStringToCB(msg.query);
1:         }
1:     };
1: 
1:     private final String query;
1: 
1:     public PrepareMessage(String query)
1:     {
1:         super(Message.Type.PREPARE);
1:         this.query = query;
1:     }
1: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
0:     public Message.Response execute()
1:     {
1:         try
1:         {
0:             return QueryProcessor.prepare(query, connection.clientState());
1:         }
1:         catch (Exception e)
1:         {
1:             return ErrorMessage.fromException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "PREPARE " + query;
1:     }
1: }
author:beobal
-------------------------------------------------------------------------------
commit:485feef
/////////////////////////////////////////////////////////////////////////
0:             Message.Response response = state.getClientState().getCQLQueryHandler().prepare(query, state);
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public PrepareMessage decode(ByteBuf body, int version)
0:         public void encode(PrepareMessage msg, ByteBuf dest, int version)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:15df669
/////////////////////////////////////////////////////////////////////////
0:                 Tracing.instance.begin("Preparing CQL3 query", ImmutableMap.of("query", query));
/////////////////////////////////////////////////////////////////////////
1:             Tracing.instance.stopSession();
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public PrepareMessage decode(ChannelBuffer body, int version)
============================================================================