1:5790b4a: /*
1:5790b4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5790b4a:  * or more contributor license agreements.  See the NOTICE file
1:5790b4a:  * distributed with this work for additional information
1:5790b4a:  * regarding copyright ownership.  The ASF licenses this file
1:5790b4a:  * to you under the Apache License, Version 2.0 (the
1:5790b4a:  * "License"); you may not use this file except in compliance
1:5790b4a:  * with the License.  You may obtain a copy of the License at
1:5790b4a:  *
1:5790b4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5790b4a:  *
1:5790b4a:  * Unless required by applicable law or agreed to in writing, software
1:5790b4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5790b4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5790b4a:  * See the License for the specific language governing permissions and
1:5790b4a:  * limitations under the License.
1:5790b4a:  */
2:5790b4a: 
1:5790b4a: package org.apache.cassandra.cql3.functions;
1:5790b4a: 
1:5790b4a: import java.security.AccessControlException;
1:5790b4a: import java.security.AllPermission;
1:5790b4a: import java.security.CodeSource;
1:5790b4a: import java.security.Permission;
1:5790b4a: import java.security.PermissionCollection;
1:5790b4a: import java.security.Permissions;
1:5790b4a: import java.security.Policy;
1:5790b4a: import java.security.ProtectionDomain;
1:5790b4a: import java.util.Collections;
1:5790b4a: import java.util.Enumeration;
1:5790b4a: 
1:8f15eb1: import org.slf4j.Logger;
1:8f15eb1: import org.slf4j.LoggerFactory;
1:8f15eb1: 
1:8f15eb1: import ch.qos.logback.classic.LoggerContext;
1:8f15eb1: import ch.qos.logback.classic.spi.TurboFilterList;
1:8f15eb1: import ch.qos.logback.classic.turbo.ReconfigureOnChangeFilter;
1:8f15eb1: import ch.qos.logback.classic.turbo.TurboFilter;
1:8f15eb1: 
1:5790b4a: /**
1:5790b4a:  * Custom {@link SecurityManager} and {@link Policy} implementation that only performs access checks
1:5790b4a:  * if explicitly enabled.
1:5790b4a:  * <p>
1:5790b4a:  * This implementation gives no measurable performance panalty
1:5790b4a:  * (see <a href="http://cstar.datastax.com/tests/id/1d461628-12ba-11e5-918f-42010af0688f">see cstar test</a>).
1:5790b4a:  * This is better than the penalty of 1 to 3 percent using a standard {@code SecurityManager} with an <i>allow all</i> policy.
1:5790b4a:  * </p>
1:5790b4a:  */
1:5790b4a: public final class ThreadAwareSecurityManager extends SecurityManager
1:5790b4a: {
1:5790b4a:     static final PermissionCollection noPermissions = new PermissionCollection()
1:5790b4a:     {
1:5790b4a:         public void add(Permission permission)
1:5790b4a:         {
1:5790b4a:             throw new UnsupportedOperationException();
1:5790b4a:         }
1:5790b4a: 
1:5790b4a:         public boolean implies(Permission permission)
1:5790b4a:         {
1:5790b4a:             return false;
1:5790b4a:         }
1:5790b4a: 
1:5790b4a:         public Enumeration<Permission> elements()
1:5790b4a:         {
1:5790b4a:             return Collections.emptyEnumeration();
1:5790b4a:         }
1:5790b4a:     };
1:5790b4a: 
1:3ae01dd:     private static final RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION = new RuntimePermission("accessDeclaredMembers");
1:3ae01dd:     private static final RuntimePermission MODIFY_THREAD_PERMISSION = new RuntimePermission("modifyThread");
1:3ae01dd:     private static final RuntimePermission MODIFY_THREADGROUP_PERMISSION = new RuntimePermission("modifyThreadGroup");
1:3ae01dd: 
1:5790b4a:     private static volatile boolean installed;
1:5790b4a: 
1:5790b4a:     public static void install()
1:5790b4a:     {
1:5790b4a:         if (installed)
1:5790b4a:             return;
1:5790b4a:         System.setSecurityManager(new ThreadAwareSecurityManager());
1:8f15eb1: 
1:8f15eb1:         Logger l = LoggerFactory.getLogger(ThreadAwareSecurityManager.class);
1:8f15eb1:         ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) l;
1:8f15eb1:         LoggerContext ctx = logbackLogger.getLoggerContext();
1:8f15eb1: 
1:8f15eb1:         TurboFilterList turboFilterList = ctx.getTurboFilterList();
1:8f15eb1:         for (int i = 0; i < turboFilterList.size(); i++)
1:8f15eb1:         {
1:8f15eb1:             TurboFilter turboFilter = turboFilterList.get(i);
1:8f15eb1:             if (turboFilter instanceof ReconfigureOnChangeFilter)
1:8f15eb1:             {
1:8f15eb1:                 ReconfigureOnChangeFilter reconfigureOnChangeFilter = (ReconfigureOnChangeFilter) turboFilter;
1:8f15eb1:                 turboFilterList.set(i, new SMAwareReconfigureOnChangeFilter(reconfigureOnChangeFilter));
1:8f15eb1:                 break;
1:8f15eb1:             }
1:8f15eb1:         }
1:8f15eb1: 
1:5790b4a:         installed = true;
1:5790b4a:     }
1:5790b4a: 
1:8f15eb1:     /**
1:8f15eb1:      * The purpose of this class is
1:8f15eb1:      */
1:8f15eb1:     private static class SMAwareReconfigureOnChangeFilter extends ReconfigureOnChangeFilter
1:8f15eb1:     {
1:8f15eb1:         SMAwareReconfigureOnChangeFilter(ReconfigureOnChangeFilter reconfigureOnChangeFilter)
1:8f15eb1:         {
1:8f15eb1:             setRefreshPeriod(reconfigureOnChangeFilter.getRefreshPeriod());
1:8f15eb1:         }
1:8f15eb1: 
1:8f15eb1:         protected boolean changeDetected(long now)
1:8f15eb1:         {
1:8f15eb1:             if (isSecuredThread())
1:8f15eb1:                 return false;
1:8f15eb1:             return super.changeDetected(now);
1:8f15eb1:         }
1:8f15eb1:     }
1:8f15eb1: 
1:5790b4a:     static
1:5790b4a:     {
1:5790b4a:         //
1:5790b4a:         // Use own security policy to be easier (and faster) since the C* has no fine grained permissions.
1:5790b4a:         // Either code has access to everything or code has access to nothing (UDFs).
1:5790b4a:         // This also removes the burden to maintain and configure policy files for production, unit tests etc.
1:5790b4a:         //
1:5790b4a:         // Note: a permission is only granted, if there is no objector. This means that
1:5790b4a:         // AccessController/AccessControlContext collect all applicable ProtectionDomains - only if none of these
1:5790b4a:         // applicable ProtectionDomains denies access, the permission is granted.
1:5790b4a:         // A ProtectionDomain can have its origin at an oridinary code-source or provided via a
1:5790b4a:         // AccessController.doPrivileded() call.
1:5790b4a:         //
1:5790b4a:         Policy.setPolicy(new Policy()
1:5790b4a:         {
1:5790b4a:             public PermissionCollection getPermissions(CodeSource codesource)
1:5790b4a:             {
1:5790b4a:                 // contract of getPermissions() methods is to return a _mutable_ PermissionCollection
1:5790b4a: 
1:5790b4a:                 Permissions perms = new Permissions();
1:5790b4a: 
1:5790b4a:                 if (codesource == null || codesource.getLocation() == null)
1:5790b4a:                     return perms;
1:5790b4a: 
1:5790b4a:                 switch (codesource.getLocation().getProtocol())
1:5790b4a:                 {
1:5790b4a:                     case "file":
1:5790b4a:                         // All JARs and class files reside on the file system - we can safely
1:5790b4a:                         // assume that these classes are "good".
1:5790b4a:                         perms.add(new AllPermission());
1:5790b4a:                         return perms;
1:5790b4a:                 }
1:5790b4a: 
1:5790b4a:                 return perms;
1:5790b4a:             }
1:5790b4a: 
1:5790b4a:             public PermissionCollection getPermissions(ProtectionDomain domain)
1:5790b4a:             {
1:5790b4a:                 return getPermissions(domain.getCodeSource());
1:5790b4a:             }
1:5790b4a: 
1:5790b4a:             public boolean implies(ProtectionDomain domain, Permission permission)
1:5790b4a:             {
1:5790b4a:                 CodeSource codesource = domain.getCodeSource();
1:5790b4a:                 if (codesource == null || codesource.getLocation() == null)
1:5790b4a:                     return false;
1:5790b4a: 
1:5790b4a:                 switch (codesource.getLocation().getProtocol())
1:5790b4a:                 {
1:5790b4a:                     case "file":
1:5790b4a:                         // All JARs and class files reside on the file system - we can safely
1:5790b4a:                         // assume that these classes are "good".
1:5790b4a:                         return true;
1:5790b4a:                 }
1:5790b4a: 
1:5790b4a:                 return false;
1:5790b4a:             }
1:5790b4a:         });
1:5790b4a:     }
1:5790b4a: 
1:3ae01dd:     private static final ThreadLocal<Boolean> initializedThread = new ThreadLocal<>();
1:3ae01dd: 
1:5790b4a:     private ThreadAwareSecurityManager()
1:5790b4a:     {
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     private static boolean isSecuredThread()
1:5790b4a:     {
1:3ae01dd:         ThreadGroup tg = Thread.currentThread().getThreadGroup();
1:3ae01dd:         if (!(tg instanceof SecurityThreadGroup))
1:3ae01dd:             return false;
1:3ae01dd:         Boolean threadInitialized = initializedThread.get();
1:3ae01dd:         if (threadInitialized == null)
1:3ae01dd:         {
1:3ae01dd:             initializedThread.set(false);
1:3ae01dd:             ((SecurityThreadGroup) tg).initializeThread();
1:3ae01dd:             initializedThread.set(true);
1:3ae01dd:             threadInitialized = true;
1:3ae01dd:         }
1:3ae01dd:         return threadInitialized;
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     public void checkAccess(Thread t)
1:5790b4a:     {
1:3ae01dd:         // need to override since the default implementation only checks the permission if the current thread's
1:3ae01dd:         // in the root-thread-group
1:5790b4a: 
2:5790b4a:         if (isSecuredThread())
1:3ae01dd:             throw new AccessControlException("access denied: " + MODIFY_THREAD_PERMISSION, MODIFY_THREAD_PERMISSION);
1:5790b4a:         super.checkAccess(t);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     public void checkAccess(ThreadGroup g)
1:5790b4a:     {
1:3ae01dd:         // need to override since the default implementation only checks the permission if the current thread's
1:3ae01dd:         // in the root-thread-group
1:5790b4a: 
1:5790b4a:         if (isSecuredThread())
1:3ae01dd:             throw new AccessControlException("access denied: " + MODIFY_THREADGROUP_PERMISSION, MODIFY_THREADGROUP_PERMISSION);
1:5790b4a:         super.checkAccess(g);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     public void checkPermission(Permission perm)
1:5790b4a:     {
1:3ae01dd:         if (!isSecuredThread())
1:3ae01dd:             return;
1:3ae01dd: 
1:3ae01dd:         // required by JavaDriver 2.2.0-rc3 and 3.0.0-a2 or newer
1:3ae01dd:         // code in com.datastax.driver.core.CodecUtils uses Guava stuff, which in turns requires this permission
1:3ae01dd:         if (CHECK_MEMBER_ACCESS_PERMISSION.equals(perm))
1:3ae01dd:             return;
1:3ae01dd: 
1:3ae01dd:         super.checkPermission(perm);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     public void checkPermission(Permission perm, Object context)
1:5790b4a:     {
1:5790b4a:         if (isSecuredThread())
1:5790b4a:             super.checkPermission(perm, context);
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     public void checkPackageAccess(String pkg)
1:5790b4a:     {
1:3ae01dd:         if (!isSecuredThread())
1:3ae01dd:             return;
1:3ae01dd: 
1:3ae01dd:         if (!((SecurityThreadGroup) Thread.currentThread().getThreadGroup()).isPackageAllowed(pkg))
1:5790b4a:         {
1:3ae01dd:             RuntimePermission perm = new RuntimePermission("accessClassInPackage." + pkg);
1:3ae01dd:             throw new AccessControlException("access denied: " + perm, perm);
1:5790b4a:         }
1:3ae01dd: 
1:3ae01dd:         super.checkPackageAccess(pkg);
1:5790b4a:     }
1:5790b4a: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:8f15eb1
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import ch.qos.logback.classic.LoggerContext;
1: import ch.qos.logback.classic.spi.TurboFilterList;
1: import ch.qos.logback.classic.turbo.ReconfigureOnChangeFilter;
1: import ch.qos.logback.classic.turbo.TurboFilter;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Logger l = LoggerFactory.getLogger(ThreadAwareSecurityManager.class);
1:         ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) l;
1:         LoggerContext ctx = logbackLogger.getLoggerContext();
1: 
1:         TurboFilterList turboFilterList = ctx.getTurboFilterList();
1:         for (int i = 0; i < turboFilterList.size(); i++)
1:         {
1:             TurboFilter turboFilter = turboFilterList.get(i);
1:             if (turboFilter instanceof ReconfigureOnChangeFilter)
1:             {
1:                 ReconfigureOnChangeFilter reconfigureOnChangeFilter = (ReconfigureOnChangeFilter) turboFilter;
1:                 turboFilterList.set(i, new SMAwareReconfigureOnChangeFilter(reconfigureOnChangeFilter));
1:                 break;
1:             }
1:         }
1: 
1:     /**
1:      * The purpose of this class is
1:      */
1:     private static class SMAwareReconfigureOnChangeFilter extends ReconfigureOnChangeFilter
1:     {
1:         SMAwareReconfigureOnChangeFilter(ReconfigureOnChangeFilter reconfigureOnChangeFilter)
1:         {
1:             setRefreshPeriod(reconfigureOnChangeFilter.getRefreshPeriod());
1:         }
1: 
1:         protected boolean changeDetected(long now)
1:         {
1:             if (isSecuredThread())
1:                 return false;
1:             return super.changeDetected(now);
1:         }
1:     }
1: 
commit:3ae01dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION = new RuntimePermission("accessDeclaredMembers");
1:     private static final RuntimePermission MODIFY_THREAD_PERMISSION = new RuntimePermission("modifyThread");
1:     private static final RuntimePermission MODIFY_THREADGROUP_PERMISSION = new RuntimePermission("modifyThreadGroup");
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<Boolean> initializedThread = new ThreadLocal<>();
1: 
1:         ThreadGroup tg = Thread.currentThread().getThreadGroup();
1:         if (!(tg instanceof SecurityThreadGroup))
1:             return false;
1:         Boolean threadInitialized = initializedThread.get();
1:         if (threadInitialized == null)
1:         {
1:             initializedThread.set(false);
1:             ((SecurityThreadGroup) tg).initializeThread();
1:             initializedThread.set(true);
1:             threadInitialized = true;
1:         }
1:         return threadInitialized;
1:         // need to override since the default implementation only checks the permission if the current thread's
1:         // in the root-thread-group
1:             throw new AccessControlException("access denied: " + MODIFY_THREAD_PERMISSION, MODIFY_THREAD_PERMISSION);
1:         // need to override since the default implementation only checks the permission if the current thread's
1:         // in the root-thread-group
1:             throw new AccessControlException("access denied: " + MODIFY_THREADGROUP_PERMISSION, MODIFY_THREADGROUP_PERMISSION);
1:         if (!isSecuredThread())
1:             return;
1: 
1:         // required by JavaDriver 2.2.0-rc3 and 3.0.0-a2 or newer
1:         // code in com.datastax.driver.core.CodecUtils uses Guava stuff, which in turns requires this permission
1:         if (CHECK_MEMBER_ACCESS_PERMISSION.equals(perm))
1:             return;
1: 
1:         super.checkPermission(perm);
/////////////////////////////////////////////////////////////////////////
1:         if (!isSecuredThread())
1:             return;
1: 
1:         if (!((SecurityThreadGroup) Thread.currentThread().getThreadGroup()).isPackageAllowed(pkg))
1:             RuntimePermission perm = new RuntimePermission("accessClassInPackage." + pkg);
1:             throw new AccessControlException("access denied: " + perm, perm);
1: 
1:         super.checkPackageAccess(pkg);
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.security.AccessControlException;
1: import java.security.AllPermission;
1: import java.security.CodeSource;
1: import java.security.Permission;
1: import java.security.PermissionCollection;
1: import java.security.Permissions;
1: import java.security.Policy;
1: import java.security.ProtectionDomain;
1: import java.util.Collections;
1: import java.util.Enumeration;
0: import java.util.Set;
1: 
0: import sun.security.util.SecurityConstants;
1: 
1: /**
1:  * Custom {@link SecurityManager} and {@link Policy} implementation that only performs access checks
1:  * if explicitly enabled.
1:  * <p>
1:  * This implementation gives no measurable performance panalty
1:  * (see <a href="http://cstar.datastax.com/tests/id/1d461628-12ba-11e5-918f-42010af0688f">see cstar test</a>).
1:  * This is better than the penalty of 1 to 3 percent using a standard {@code SecurityManager} with an <i>allow all</i> policy.
1:  * </p>
1:  */
1: public final class ThreadAwareSecurityManager extends SecurityManager
1: {
1:     static final PermissionCollection noPermissions = new PermissionCollection()
1:     {
1:         public void add(Permission permission)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public boolean implies(Permission permission)
1:         {
1:             return false;
1:         }
1: 
1:         public Enumeration<Permission> elements()
1:         {
1:             return Collections.emptyEnumeration();
1:         }
1:     };
1: 
1:     private static volatile boolean installed;
1: 
1:     public static void install()
1:     {
1:         if (installed)
1:             return;
1:         System.setSecurityManager(new ThreadAwareSecurityManager());
1:         installed = true;
1:     }
1: 
1:     static
1:     {
1:         //
1:         // Use own security policy to be easier (and faster) since the C* has no fine grained permissions.
1:         // Either code has access to everything or code has access to nothing (UDFs).
1:         // This also removes the burden to maintain and configure policy files for production, unit tests etc.
1:         //
1:         // Note: a permission is only granted, if there is no objector. This means that
1:         // AccessController/AccessControlContext collect all applicable ProtectionDomains - only if none of these
1:         // applicable ProtectionDomains denies access, the permission is granted.
1:         // A ProtectionDomain can have its origin at an oridinary code-source or provided via a
1:         // AccessController.doPrivileded() call.
1:         //
1:         Policy.setPolicy(new Policy()
1:         {
1:             public PermissionCollection getPermissions(CodeSource codesource)
1:             {
1:                 // contract of getPermissions() methods is to return a _mutable_ PermissionCollection
1: 
1:                 Permissions perms = new Permissions();
1: 
1:                 if (codesource == null || codesource.getLocation() == null)
1:                     return perms;
1: 
1:                 switch (codesource.getLocation().getProtocol())
1:                 {
1:                     case "file":
1:                         // All JARs and class files reside on the file system - we can safely
1:                         // assume that these classes are "good".
1:                         perms.add(new AllPermission());
1:                         return perms;
1:                 }
1: 
1:                 return perms;
1:             }
1: 
1:             public PermissionCollection getPermissions(ProtectionDomain domain)
1:             {
1:                 return getPermissions(domain.getCodeSource());
1:             }
1: 
1:             public boolean implies(ProtectionDomain domain, Permission permission)
1:             {
1:                 CodeSource codesource = domain.getCodeSource();
1:                 if (codesource == null || codesource.getLocation() == null)
1:                     return false;
1: 
1:                 switch (codesource.getLocation().getProtocol())
1:                 {
1:                     case "file":
1:                         // All JARs and class files reside on the file system - we can safely
1:                         // assume that these classes are "good".
1:                         return true;
1:                 }
1: 
1:                 return false;
1:             }
1:         });
1:     }
1: 
1:     private ThreadAwareSecurityManager()
1:     {
1:     }
1: 
1:     private static boolean isSecuredThread()
1:     {
0:         return Thread.currentThread().getThreadGroup() instanceof SecurityThreadGroup;
1:     }
1: 
1:     public void checkAccess(Thread t)
1:     {
0:         // need to override since the default implementation is kind of ...
1: 
1:         if (isSecuredThread())
0:             throw new AccessControlException("access denied: " + SecurityConstants.MODIFY_THREAD_PERMISSION, SecurityConstants.MODIFY_THREAD_PERMISSION);
1:         super.checkAccess(t);
1:     }
1: 
1:     public void checkAccess(ThreadGroup g)
1:     {
0:         // need to override since the default implementation is kind of ...
1: 
1:         if (isSecuredThread())
0:             throw new AccessControlException("access denied: " + SecurityConstants.MODIFY_THREADGROUP_PERMISSION, SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
1:         super.checkAccess(g);
1:     }
1: 
1:     public void checkPermission(Permission perm)
1:     {
1:         if (isSecuredThread())
0:             super.checkPermission(perm);
1:     }
1: 
1:     public void checkPermission(Permission perm, Object context)
1:     {
1:         if (isSecuredThread())
1:             super.checkPermission(perm, context);
1:     }
1: 
1:     public void checkPackageAccess(String pkg)
1:     {
0:         ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();
0:         if (threadGroup instanceof SecurityThreadGroup)
1:         {
0:             Set<String> allowedPackages = ((SecurityThreadGroup) threadGroup).getAllowedPackages();
0:             if (allowedPackages != null && !allowedPackages.contains(pkg))
0:                 throw new AccessControlException("access denied: " + new RuntimePermission("accessClassInPackage." + pkg), new RuntimePermission("accessClassInPackage." + pkg));
0:             super.checkPackageAccess(pkg);
1:         }
1:     }
1: }
============================================================================