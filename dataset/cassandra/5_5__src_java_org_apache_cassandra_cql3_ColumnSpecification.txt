1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.cql3;
3:dca37a6: 
1:e8a0d0a: import com.google.common.base.MoreObjects;
1:f32cff8: import com.google.common.base.Objects;
1:a90de7c: 
1:6d3a3ee: import org.apache.cassandra.db.marshal.AbstractType;
1:65a7088: import org.apache.cassandra.db.marshal.ReversedType;
1:f32cff8: 
1:dca37a6: import java.util.Collection;
1:dca37a6: import java.util.Iterator;
1:dca37a6: 
1:6d3a3ee: public class ColumnSpecification
3:6d3a3ee: {
1:6d3a3ee:     public final String ksName;
1:6d3a3ee:     public final String cfName;
1:6d3a3ee:     public final ColumnIdentifier name;
1:6d3a3ee:     public final AbstractType<?> type;
1:dca37a6: 
1:6d3a3ee:     public ColumnSpecification(String ksName, String cfName, ColumnIdentifier name, AbstractType<?> type)
1:dca37a6:     {
1:6d3a3ee:         this.ksName = ksName;
1:6d3a3ee:         this.cfName = cfName;
1:6d3a3ee:         this.name = name;
1:6d3a3ee:         this.type = type;
3:6d3a3ee:     }
1:7e53db0: 
1:7e53db0:     /**
1:7e53db0:      * Returns a new <code>ColumnSpecification</code> for the same column but with the specified alias.
1:7e53db0:      *
1:7e53db0:      * @param alias the column alias
1:7e53db0:      * @return a new <code>ColumnSpecification</code> for the same column but with the specified alias.
1:7e53db0:      */
1:7e53db0:     public ColumnSpecification withAlias(ColumnIdentifier alias)
1:7e53db0:     {
1:7e53db0:         return new ColumnSpecification(ksName, cfName, alias, type);
1:7e53db0:     }
1:65a7088: 
1:65a7088:     public boolean isReversedType()
1:65a7088:     {
1:65a7088:         return type instanceof ReversedType;
1:65a7088:     }
1:f32cff8: 
1:dca37a6:     /**
1:dca37a6:      * Returns true if all ColumnSpecifications are in the same table, false otherwise.
1:dca37a6:      */
1:dca37a6:     public static boolean allInSameTable(Collection<ColumnSpecification> names)
1:f32cff8:     {
1:dca37a6:         if (names == null || names.isEmpty())
1:f32cff8:             return false;
1:f32cff8: 
1:dca37a6:         Iterator<ColumnSpecification> iter = names.iterator();
1:dca37a6:         ColumnSpecification first = iter.next();
1:dca37a6:         while (iter.hasNext())
1:dca37a6:         {
1:dca37a6:             ColumnSpecification name = iter.next();
1:dca37a6:             if (!name.ksName.equals(first.ksName) || !name.cfName.equals(first.cfName))
1:f32cff8:                 return false;
1:f32cff8:         }
1:dca37a6:         return true;
1:dca37a6:     }
1:f32cff8: 
1:dca37a6:     @Override
1:dca37a6:     public boolean equals(Object other)
1:dca37a6:     {
1:dca37a6:         if (!(other instanceof ColumnSpecification))
3:dca37a6:             return false;
1:f32cff8: 
1:dca37a6:         ColumnSpecification that = (ColumnSpecification) other;
1:dca37a6:         return this.ksName.equals(that.ksName) &&
1:dca37a6:                this.cfName.equals(that.cfName) &&
1:dca37a6:                this.name.equals(that.name) &&
1:dca37a6:                this.type.equals(that.type);
1:dca37a6:     }
1:dca37a6: 
1:f32cff8:     public int hashCode()
1:f32cff8:     {
1:f32cff8:         return Objects.hashCode(ksName, cfName, name, type);
1:f32cff8:     }
1:a90de7c: 
1:a90de7c:     @Override
1:a90de7c:     public String toString()
1:a90de7c:     {
1:e8a0d0a:         return MoreObjects.toStringHelper(this)
1:e8a0d0a:                           .add("name", name)
1:e8a0d0a:                           .add("type", type)
1:e8a0d0a:                           .toString();
1:a90de7c:     }
1:dca37a6: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e8a0d0a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.MoreObjects;
/////////////////////////////////////////////////////////////////////////
1:         return MoreObjects.toStringHelper(this)
1:                           .add("name", name)
1:                           .add("type", type)
1:                           .toString();
author:blerer
-------------------------------------------------------------------------------
commit:a90de7c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return Objects.toStringHelper(this)
0:                       .add("name", name)
0:                       .add("type", type)
0:                       .toString();
1:     }
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.ReversedType;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isReversedType()
1:     {
1:         return type instanceof ReversedType;
1:     }
commit:7e53db0
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns a new <code>ColumnSpecification</code> for the same column but with the specified alias.
1:      *
1:      * @param alias the column alias
1:      * @return a new <code>ColumnSpecification</code> for the same column but with the specified alias.
1:      */
1:     public ColumnSpecification withAlias(ColumnIdentifier alias)
1:     {
1:         return new ColumnSpecification(ksName, cfName, alias, type);
1:     }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:1f8516d
commit:0452e74
commit:f32cff8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Objects;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean equals(Object obj)
1:     {
0:         if (null == obj)
1:             return false;
1: 
0:         if(!(obj instanceof ColumnSpecification))
1:             return false;
1: 
0:         ColumnSpecification other = (ColumnSpecification)obj;
0:         return Objects.equal(ksName, other.ksName)
0:             && Objects.equal(cfName, other.cfName)
0:             && Objects.equal(name, other.name)
0:             && Objects.equal(type, other.type);
1:     }
1: 
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(ksName, cfName, name, type);
1:     }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:dca37a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     /**
1:      * Returns true if all ColumnSpecifications are in the same table, false otherwise.
1:      */
1:     public static boolean allInSameTable(Collection<ColumnSpecification> names)
1:     {
1:         if (names == null || names.isEmpty())
1:             return false;
1: 
1:         Iterator<ColumnSpecification> iter = names.iterator();
1:         ColumnSpecification first = iter.next();
1:         while (iter.hasNext())
1:         {
1:             ColumnSpecification name = iter.next();
1:             if (!name.ksName.equals(first.ksName) || !name.cfName.equals(first.cfName))
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if (!(other instanceof ColumnSpecification))
1:             return false;
1: 
1:         ColumnSpecification that = (ColumnSpecification) other;
1:         return this.ksName.equals(that.ksName) &&
1:                this.cfName.equals(that.cfName) &&
1:                this.name.equals(that.name) &&
1:                this.type.equals(that.type);
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
0: 
1: import org.apache.cassandra.db.marshal.AbstractType;
0: 
1: public class ColumnSpecification
1: {
1:     public final String ksName;
1:     public final String cfName;
1:     public final ColumnIdentifier name;
1:     public final AbstractType<?> type;
0: 
1:     public ColumnSpecification(String ksName, String cfName, ColumnIdentifier name, AbstractType<?> type)
1:     {
1:         this.ksName = ksName;
1:         this.cfName = cfName;
1:         this.name = name;
1:         this.type = type;
1:     }
0: 
0:     @Override
0:     public String toString()
1:     {
0:         // Not fully conventional, but convenient (for error message to users in particular)
0:         return name.toString();
1:     }
1: }
============================================================================