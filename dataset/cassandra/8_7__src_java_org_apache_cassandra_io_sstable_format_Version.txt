1:0368e97: /*
1:0368e97:  * Licensed to the Apache Software Foundation (ASF) under one
1:0368e97:  * or more contributor license agreements.  See the NOTICE file
1:0368e97:  * distributed with this work for additional information
1:0368e97:  * regarding copyright ownership.  The ASF licenses this file
1:0368e97:  * to you under the Apache License, Version 2.0 (the
1:0368e97:  * "License"); you may not use this file except in compliance
1:0368e97:  * with the License.  You may obtain a copy of the License at
1:0368e97:  *
1:0368e97:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0368e97:  *
1:0368e97:  * Unless required by applicable law or agreed to in writing, software
1:0368e97:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0368e97:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0368e97:  * See the License for the specific language governing permissions and
1:0368e97:  * limitations under the License.
1:0368e97:  */
1:0368e97: package org.apache.cassandra.io.sstable.format;
2:0368e97: 
1:23fd75f: import java.util.regex.Pattern;
1:23fd75f: 
1:5baf28d: import org.apache.cassandra.utils.ChecksumType;
1:5baf28d: 
1:0368e97: /**
1:0368e97:  * A set of feature flags associated with a SSTable format
1:0368e97:  *
1:0368e97:  * versions are denoted as [major][minor].  Minor versions must be forward-compatible:
1:0368e97:  * new fields are allowed in e.g. the metadata component, but fields can't be removed
1:0368e97:  * or have their size changed.
1:0368e97:  *
1:0368e97:  * Minor versions were introduced with version "hb" for Cassandra 1.0.3; prior to that,
1:0368e97:  * we always incremented the major version.
1:0368e97:  *
1:0368e97:  */
1:0368e97: public abstract class Version
1:0368e97: {
1:23fd75f:     private static final Pattern VALIDATION = Pattern.compile("[a-z]+");
1:23fd75f: 
1:0368e97:     protected final String version;
1:0368e97:     protected final SSTableFormat format;
1:0368e97:     protected Version(SSTableFormat format, String version)
1:0368e97:     {
1:0368e97:         this.format = format;
1:0368e97:         this.version = version;
1:0368e97:     }
1:0368e97: 
1:0368e97:     public abstract boolean isLatestVersion();
1:0368e97: 
1:0368e97:     public abstract boolean hasSamplingLevel();
1:0368e97: 
1:0368e97:     public abstract boolean hasNewStatsFile();
1:0368e97: 
1:5baf28d:     public abstract ChecksumType compressedChecksumType();
1:5baf28d: 
1:5baf28d:     public abstract ChecksumType uncompressedChecksumType();
1:0368e97: 
1:0368e97:     public abstract boolean hasRepairedAt();
1:0368e97: 
1:0368e97:     public abstract boolean tracksLegacyCounterShards();
1:0368e97: 
1:0368e97:     public abstract boolean hasNewFileName();
1:0368e97: 
1:a991b64:     public abstract boolean storeRows();
1:a991b64: 
1:a991b64:     public abstract int correspondingMessagingVersion(); // Only use by storage that 'storeRows' so far
1:a991b64: 
1:23fd75f:     public abstract boolean hasOldBfHashOrder();
1:23fd75f: 
1:5726625:     public abstract boolean hasCompactionAncestors();
1:5726625: 
1:ce63ccc:     public abstract boolean hasBoundaries();
1:ce63ccc: 
1:849a438:     public abstract boolean hasCommitLogLowerBound();
1:849a438: 
1:904cb5d:     public abstract boolean hasCommitLogIntervals();
1:904cb5d: 
1:0368e97:     public String getVersion()
1:0368e97:     {
1:0368e97:         return version;
1:0368e97:     }
1:0368e97: 
1:0368e97:     public SSTableFormat getSSTableFormat()
1:0368e97:     {
1:0368e97:         return format;
1:0368e97:     }
1:0368e97: 
1:0368e97:     /**
1:0368e97:      * @param ver SSTable version
1:0368e97:      * @return True if the given version string matches the format.
1:0368e97:      * @see #version
1:0368e97:      */
1:0368e97:     public static boolean validate(String ver)
1:0368e97:     {
1:23fd75f:         return ver != null && VALIDATION.matcher(ver).matches();
1:0368e97:     }
1:0368e97: 
1:0368e97:     abstract public boolean isCompatible();
1:a991b64:     abstract public boolean isCompatibleForStreaming();
1:0368e97: 
1:0368e97:     @Override
1:0368e97:     public String toString()
1:0368e97:     {
1:0368e97:         return version;
1:0368e97:     }
1:0368e97: 
1:0368e97: 
1:0368e97:     @Override
1:0368e97:     public boolean equals(Object o)
1:0368e97:     {
1:0368e97:         if (this == o) return true;
1:0368e97:         if (o == null || getClass() != o.getClass()) return false;
1:0368e97: 
1:0368e97:         Version version1 = (Version) o;
1:0368e97: 
1:0368e97:         if (version != null ? !version.equals(version1.version) : version1.version != null) return false;
1:0368e97: 
1:0368e97:         return true;
1:0368e97:     }
1:0368e97: 
1:0368e97:     @Override
1:0368e97:     public int hashCode()
1:0368e97:     {
1:0368e97:         return version != null ? version.hashCode() : 0;
1:0368e97:     }
1:0368e97: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean hasCommitLogIntervals();
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:78a3d2b
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean storeRows();
1: 
1:     public abstract int correspondingMessagingVersion(); // Only use by storage that 'storeRows' so far
1: 
/////////////////////////////////////////////////////////////////////////
1:     abstract public boolean isCompatibleForStreaming();
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:849a438
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean hasCommitLogLowerBound();
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean hasBoundaries();
1: 
commit:5726625
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean hasCompactionAncestors();
1: 
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ChecksumType;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public abstract ChecksumType compressedChecksumType();
1: 
1:     public abstract ChecksumType uncompressedChecksumType();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static final Pattern VALIDATION = Pattern.compile("[a-z]+");
1: 
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean hasOldBfHashOrder();
1: 
/////////////////////////////////////////////////////////////////////////
1:         return ver != null && VALIDATION.matcher(ver).matches();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.format;
1: 
1: /**
1:  * A set of feature flags associated with a SSTable format
1:  *
1:  * versions are denoted as [major][minor].  Minor versions must be forward-compatible:
1:  * new fields are allowed in e.g. the metadata component, but fields can't be removed
1:  * or have their size changed.
1:  *
1:  * Minor versions were introduced with version "hb" for Cassandra 1.0.3; prior to that,
1:  * we always incremented the major version.
1:  *
1:  */
1: public abstract class Version
1: {
1:     protected final String version;
1:     protected final SSTableFormat format;
1:     protected Version(SSTableFormat format, String version)
1:     {
1:         this.format = format;
1:         this.version = version;
1:     }
1: 
1:     public abstract boolean isLatestVersion();
1: 
0:     public abstract boolean hasPostCompressionAdlerChecksums();
1: 
1:     public abstract boolean hasSamplingLevel();
1: 
1:     public abstract boolean hasNewStatsFile();
1: 
0:     public abstract boolean hasAllAdlerChecksums();
1: 
1:     public abstract boolean hasRepairedAt();
1: 
1:     public abstract boolean tracksLegacyCounterShards();
1: 
1:     public abstract boolean hasNewFileName();
1: 
1:     public String getVersion()
1:     {
1:         return version;
1:     }
1: 
1:     public SSTableFormat getSSTableFormat()
1:     {
1:         return format;
1:     }
1: 
1:     /**
1:      * @param ver SSTable version
1:      * @return True if the given version string matches the format.
1:      * @see #version
1:      */
1:     public static boolean validate(String ver)
1:     {
0:         return ver != null && ver.matches("[a-z]+");
1:     }
1: 
1:     abstract public boolean isCompatible();
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return version;
1:     }
1: 
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         Version version1 = (Version) o;
1: 
1:         if (version != null ? !version.equals(version1.version) : version1.version != null) return false;
1: 
1:         return true;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return version != null ? version.hashCode() : 0;
1:     }
1: }
============================================================================