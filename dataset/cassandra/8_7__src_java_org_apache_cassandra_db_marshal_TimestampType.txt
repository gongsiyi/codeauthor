1:9ec7b80: /*
1:9ec7b80:  * Licensed to the Apache Software Foundation (ASF) under one
1:9ec7b80:  * or more contributor license agreements.  See the NOTICE file
1:9ec7b80:  * distributed with this work for additional information
1:9ec7b80:  * regarding copyright ownership.  The ASF licenses this file
1:9ec7b80:  * to you under the Apache License, Version 2.0 (the
1:9ec7b80:  * "License"); you may not use this file except in compliance
1:9ec7b80:  * with the License.  You may obtain a copy of the License at
1:9ec7b80:  *
1:9ec7b80:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9ec7b80:  *
1:9ec7b80:  * Unless required by applicable law or agreed to in writing, software
1:9ec7b80:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ec7b80:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ec7b80:  * See the License for the specific language governing permissions and
1:9ec7b80:  * limitations under the License.
1:9ec7b80:  */
1:9ec7b80: package org.apache.cassandra.db.marshal;
3:9ec7b80: 
1:9ec7b80: import java.nio.ByteBuffer;
1:9ec7b80: import java.util.Date;
1:9ec7b80: 
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:9ec7b80: import org.slf4j.Logger;
1:9ec7b80: import org.slf4j.LoggerFactory;
1:9ec7b80: import org.apache.cassandra.cql3.CQL3Type;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.TimestampSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:9ec7b80: import org.apache.cassandra.utils.ByteBufferUtil;
1:9ec7b80: 
1:9ec7b80: /**
1:9ec7b80:  * Type for date-time values.
1:9ec7b80:  *
1:9ec7b80:  * This is meant as a replacement for DateType, as DateType wrongly compare
1:9ec7b80:  * pre-unix-epoch dates, sorting them *after* post-unix-epoch ones (due to it's
1:9ec7b80:  * use of unsigned bytes comparison).
1:9ec7b80:  */
1:9ec7b80: public class TimestampType extends AbstractType<Date>
6:9ec7b80: {
1:9ec7b80:     private static final Logger logger = LoggerFactory.getLogger(TimestampType.class);
1:9ec7b80: 
1:9ec7b80:     public static final TimestampType instance = new TimestampType();
1:9ec7b80: 
1:07594ee:     private TimestampType() {super(ComparisonType.CUSTOM);} // singleton
1:9ec7b80: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:9ec7b80:     {
1:4df4f79:         return true;
6:9ec7b80:     }
1:9ec7b80: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:9ec7b80:     {
1:9ec7b80:         return LongType.compareLongs(o1, o2);
1:9ec7b80:     }
1:9ec7b80: 
1:9ec7b80:     public ByteBuffer fromString(String source) throws MarshalException
1:9ec7b80:     {
1:9ec7b80:       // Return an empty ByteBuffer for an empty string.
1:9ec7b80:       if (source.isEmpty())
1:9ec7b80:           return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:9ec7b80: 
1:2635632:       return ByteBufferUtil.bytes(TimestampSerializer.dateStringToTimestamp(source));
1:9ec7b80:     }
1:9ec7b80: 
1:c08aaab:     public ByteBuffer fromTimeInMillis(long millis) throws MarshalException
1:9ec7b80:     {
1:c08aaab:         return ByteBufferUtil.bytes(millis);
1:9ec7b80:     }
1:9ec7b80: 
1:9da742d:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:9ec7b80:     {
1:c7b02d1:         if (parsed instanceof Long)
1:c7b02d1:             return new Constants.Value(ByteBufferUtil.bytes((Long) parsed));
1:9ec7b80: 
2:9ec7b80:         try
1:9ec7b80:         {
1:c7b02d1:             return new Constants.Value(TimestampType.instance.fromString((String) parsed));
1:9ec7b80:         }
1:c7b02d1:         catch (ClassCastException exc)
1:9ec7b80:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a long or a datestring representation of a timestamp value, but got a %s: %s",
1:c7b02d1:                     parsed.getClass().getSimpleName(), parsed));
1:9ec7b80:         }
1:9ec7b80:     }
1:9ec7b80: 
1:9ec7b80:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:9ec7b80:     {
1:ebbd516:         return '"' + TimestampSerializer.getJsonDateFormatter().format(TimestampSerializer.instance.deserialize(buffer)) + '"';
1:9ec7b80:     }
1:9ec7b80: 
1:c7b02d1:     @Override
1:9ec7b80:     public boolean isCompatibleWith(AbstractType<?> previous)
1:9ec7b80:     {
1:9ec7b80:         if (super.isCompatibleWith(previous))
1:9ec7b80:             return true;
1:9ec7b80: 
1:9ec7b80:         if (previous instanceof DateType)
1:9ec7b80:         {
1:9ec7b80:             logger.warn("Changing from DateType to TimestampType is allowed, but be wary that they sort differently for pre-unix-epoch timestamps "
1:9ec7b80:                       + "(negative timestamp values) and thus this change will corrupt your data if you have such negative timestamp. So unless you "
1:9ec7b80:                       + "know that you don't have *any* pre-unix-epoch timestamp you should change back to DateType");
1:9ec7b80:             return true;
1:9ec7b80:         }
1:9ec7b80: 
1:9ec7b80:         return false;
1:9ec7b80:     }
1:9ec7b80: 
1:c7b02d1:     @Override
1:9da742d:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
1:9ec7b80:     {
1:9da742d:         return this == otherType || otherType == DateType.instance || otherType == LongType.instance;
1:9ec7b80:     }
1:9ec7b80: 
1:9ec7b80:     public CQL3Type asCQL3Type()
1:9ec7b80:     {
1:9ec7b80:         return CQL3Type.Native.TIMESTAMP;
1:9ec7b80:     }
1:9ec7b80: 
1:fc8b76f:     public TypeSerializer<Date> getSerializer()
1:9ec7b80:     {
1:9ec7b80:         return TimestampSerializer.instance;
1:9ec7b80:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 8;
1:a991b64:     }
1:9ec7b80: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:8e35f84
commit:ebbd516
/////////////////////////////////////////////////////////////////////////
1:         return '"' + TimestampSerializer.getJsonDateFormatter().format(TimestampSerializer.instance.deserialize(buffer)) + '"';
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     private TimestampType() {super(ComparisonType.CUSTOM);} // singleton
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 8;
1:     }
commit:2635632
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       return ByteBufferUtil.bytes(TimestampSerializer.dateStringToTimestamp(source));
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.TimestampSerializer;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<Date> getSerializer()
commit:9ec7b80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
0: import java.text.ParseException;
1: import java.util.Date;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
0: import org.apache.cassandra.type.TimestampSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.commons.lang.time.DateUtils;
1: 
1: /**
1:  * Type for date-time values.
1:  *
1:  * This is meant as a replacement for DateType, as DateType wrongly compare
1:  * pre-unix-epoch dates, sorting them *after* post-unix-epoch ones (due to it's
1:  * use of unsigned bytes comparison).
1:  */
1: public class TimestampType extends AbstractType<Date>
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(TimestampType.class);
1: 
1:     public static final TimestampType instance = new TimestampType();
1: 
0:     private TimestampType() {} // singleton
1: 
0:     public Date compose(ByteBuffer bytes)
1:     {
0:         return TimestampSerializer.instance.serialize(bytes);
1:     }
1: 
0:     public ByteBuffer decompose(Date value)
1:     {
0:         return TimestampSerializer.instance.deserialize(value);
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         return LongType.compareLongs(o1, o2);
1:     }
1: 
0:     public String getString(ByteBuffer bytes)
1:     {
0:         return TimestampSerializer.instance.getString(bytes);
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:       // Return an empty ByteBuffer for an empty string.
1:       if (source.isEmpty())
1:           return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
0:       return ByteBufferUtil.bytes(dateStringToTimestamp(source));
1:     }
1: 
0:     public static long dateStringToTimestamp(String source) throws MarshalException
1:     {
0:       long millis;
1: 
0:       if (source.toLowerCase().equals("now"))
1:       {
0:           millis = System.currentTimeMillis();
1:       }
0:       // Milliseconds since epoch?
0:       else if (source.matches("^\\d+$"))
1:       {
1:           try
1:           {
0:               millis = Long.parseLong(source);
1:           }
0:           catch (NumberFormatException e)
1:           {
0:               throw new MarshalException(String.format("unable to make long (for date) from: '%s'", source), e);
1:           }
1:       }
0:       // Last chance, attempt to parse as date-time string
0:       else
1:       {
1:           try
1:           {
0:               millis = DateUtils.parseDateStrictly(source, TimestampSerializer.iso8601Patterns).getTime();
1:           }
0:           catch (ParseException e1)
1:           {
0:               throw new MarshalException(String.format("unable to coerce '%s' to a  formatted date (long)", source), e1);
1:           }
1:       }
1: 
0:       return millis;
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         TimestampSerializer.instance.validate(bytes);
1:     }
1: 
1:     @Override
1:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
1:         if (super.isCompatibleWith(previous))
1:             return true;
1: 
1:         if (previous instanceof DateType)
1:         {
1:             logger.warn("Changing from DateType to TimestampType is allowed, but be wary that they sort differently for pre-unix-epoch timestamps "
1:                       + "(negative timestamp values) and thus this change will corrupt your data if you have such negative timestamp. So unless you "
1:                       + "know that you don't have *any* pre-unix-epoch timestamp you should change back to DateType");
1:             return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.TIMESTAMP;
1:     }
1: 
0:     public AbstractSerializer<Date> asComposer()
1:     {
1:         return TimestampSerializer.instance;
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:c08aaab
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromTimeInMillis(long millis) throws MarshalException
0:     {
1:         return ByteBufferUtil.bytes(millis);
0:     }
0: 
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
0:     {
1:         return true;
0:     }
0: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
0:     {
1:         if (parsed instanceof Long)
1:             return new Constants.Value(ByteBufferUtil.bytes((Long) parsed));
0: 
0:         try
0:         {
1:             return new Constants.Value(TimestampType.instance.fromString((String) parsed));
0:         }
1:         catch (ClassCastException exc)
0:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a long or a datestring representation of a timestamp value, but got a %s: %s",
1:                     parsed.getClass().getSimpleName(), parsed));
0:         }
0:     }
0: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
0:     {
0:         return '"' + TimestampSerializer.TO_JSON_FORMAT.format(TimestampSerializer.instance.deserialize(buffer)) + '"';
0:     }
0: 
1:     @Override
commit:9da742d
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> otherType)
0:     {
1:         return this == otherType || otherType == DateType.instance || otherType == LongType.instance;
0:     }
0: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:28caff5
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
0:     private static final Pattern timestampPattern = Pattern.compile("^-?\\d+$");
0: 
/////////////////////////////////////////////////////////////////////////
0:       else if (timestampPattern.matcher(source).matches())
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang3.time.DateUtils;
============================================================================