1:07cf56f: /*
1:2d9d248:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d9d248:  * or more contributor license agreements.  See the NOTICE file
1:2d9d248:  * distributed with this work for additional information
1:2d9d248:  * regarding copyright ownership.  The ASF licenses this file
1:2d9d248:  * to you under the Apache License, Version 2.0 (the
1:2d9d248:  * "License"); you may not use this file except in compliance
1:2d9d248:  * with the License.  You may obtain a copy of the License at
1:2d9d248:  *
1:2d9d248:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2d9d248:  *
1:2d9d248:  * Unless required by applicable law or agreed to in writing, software
1:2d9d248:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2d9d248:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d9d248:  * See the License for the specific language governing permissions and
1:2d9d248:  * limitations under the License.
1:2d9d248:  */
1:2d9d248: package org.apache.cassandra.dht;
1:9a3fa88: 
1:07893d7: import org.apache.cassandra.config.CFMetaData;
1:07893d7: import org.apache.cassandra.config.Schema;
1:07893d7: import org.apache.cassandra.db.BufferDecoratedKey;
1:07893d7: import org.apache.cassandra.db.DecoratedKey;
1:07893d7: import org.apache.cassandra.db.marshal.AbstractType;
1:07893d7: import org.apache.cassandra.db.marshal.BytesType;
1:07893d7: import org.apache.cassandra.exceptions.ConfigurationException;
1:07893d7: import org.apache.cassandra.service.StorageService;
1:07893d7: import org.apache.cassandra.utils.ByteBufferUtil;
1:07893d7: import org.apache.cassandra.utils.FBUtilities;
1:07893d7: import org.apache.cassandra.utils.Hex;
1:4b54b8a: import org.apache.cassandra.utils.ObjectSizes;
1:07893d7: import org.apache.cassandra.utils.Pair;
1:4b54b8a: 
1:07893d7: import org.apache.commons.lang3.ArrayUtils;
1:07893d7: 
1:07893d7: import java.math.BigInteger;
1:e7a385a: import java.nio.ByteBuffer;
1:07893d7: import java.util.ArrayList;
1:07893d7: import java.util.Arrays;
1:07893d7: import java.util.HashMap;
1:07893d7: import java.util.List;
1:07893d7: import java.util.Map;
1:07893d7: import java.util.Random;
1:47d3b7e: import java.util.concurrent.ThreadLocalRandom;
1:e7a385a: 
1:07893d7: public class ByteOrderedPartitioner implements IPartitioner
2:2d9d248: {
1:07893d7:     public static final BytesToken MINIMUM = new BytesToken(ArrayUtils.EMPTY_BYTE_ARRAY);
1:07893d7: 
1:07893d7:     public static final BigInteger BYTE_MASK = new BigInteger("255");
1:07893d7: 
1:4b54b8a:     private static final long EMPTY_SIZE = ObjectSizes.measure(MINIMUM);
1:4b54b8a: 
1:07893d7:     public static final ByteOrderedPartitioner instance = new ByteOrderedPartitioner();
1:07893d7: 
1:07893d7:     public static class BytesToken extends Token
1:07893d7:     {
1:07893d7:         static final long serialVersionUID = -2630749093733680626L;
1:07893d7: 
1:07893d7:         final byte[] token;
1:07893d7: 
1:07893d7:         public BytesToken(ByteBuffer token)
1:07893d7:         {
1:07893d7:             this(ByteBufferUtil.getArray(token));
1:07893d7:         }
1:69f77cb: 
1:07893d7:         public BytesToken(byte[] token)
1:69f77cb:         {
1:07893d7:             this.token = token;
1:07893d7:         }
1:07893d7: 
1:4b54b8a:         @Override
1:07893d7:         public String toString()
1:07893d7:         {
1:07893d7:             return Hex.bytesToHex(token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         public int compareTo(Token other)
1:07893d7:         {
1:07893d7:             BytesToken o = (BytesToken) other;
1:07893d7:             return FBUtilities.compareUnsigned(token, o.token, 0, 0, token.length, o.token.length);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public int hashCode()
1:07893d7:         {
1:07893d7:             final int prime = 31;
1:07893d7:             return prime + Arrays.hashCode(token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public boolean equals(Object obj)
1:07893d7:         {
1:07893d7:             if (this == obj)
1:07893d7:                 return true;
1:07893d7:             if (!(obj instanceof BytesToken))
1:07893d7:                 return false;
1:07893d7:             BytesToken other = (BytesToken) obj;
1:07893d7: 
1:07893d7:             return Arrays.equals(token, other.token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public IPartitioner getPartitioner()
1:07893d7:         {
1:07893d7:             return instance;
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public long getHeapSize()
1:07893d7:         {
1:07893d7:             return EMPTY_SIZE + ObjectSizes.sizeOfArray(token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public Object getTokenValue()
1:07893d7:         {
1:07893d7:             return token;
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:9a3fa88:         public double size(Token next)
1:07893d7:         {
1:9a3fa88:             throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:9a3fa88:                                                                   getClass().getSimpleName()));
1:07893d7:         }
1:07893d7: 
2:9a3fa88:         @Override
1:9a3fa88:         public Token increaseSlightly()
1:9a3fa88:         {
1:9a3fa88:             throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:9a3fa88:                                                                   getClass().getSimpleName()));
1:9a3fa88:         }
1:9a3fa88:     }
1:9a3fa88: 
1:e7a385a:     public BytesToken getToken(ByteBuffer key)
1:9a3fa88:     {
1:e7a385a:         if (key.remaining() == 0)
1:2d9d248:             return MINIMUM;
1:2d9d248:         return new BytesToken(key);
1:4b54b8a:     }
1:4b54b8a: 
1:07893d7:     public DecoratedKey decorateKey(ByteBuffer key)
1:4b54b8a:     {
1:07893d7:         return new BufferDecoratedKey(getToken(key), key);
1:07893d7:     }
1:07893d7: 
1:07893d7:     public BytesToken midpoint(Token lt, Token rt)
1:07893d7:     {
1:07893d7:         BytesToken ltoken = (BytesToken) lt;
1:07893d7:         BytesToken rtoken = (BytesToken) rt;
1:07893d7: 
1:07893d7:         int sigbytes = Math.max(ltoken.token.length, rtoken.token.length);
1:07893d7:         BigInteger left = bigForBytes(ltoken.token, sigbytes);
1:07893d7:         BigInteger right = bigForBytes(rtoken.token, sigbytes);
1:07893d7: 
1:07893d7:         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(left, right, 8*sigbytes);
1:07893d7:         return new BytesToken(bytesForBig(midpair.left, sigbytes, midpair.right));
1:07893d7:     }
1:07893d7: 
1:e2a0d75:     public Token split(Token left, Token right, double ratioToLeft)
1:e2a0d75:     {
1:e2a0d75:         throw new UnsupportedOperationException();
1:e2a0d75:     }
1:e2a0d75: 
1:07893d7:     /**
1:07893d7:      * Convert a byte array containing the most significant of 'sigbytes' bytes
1:07893d7:      * representing a big-endian magnitude into a BigInteger.
1:07893d7:      */
1:07893d7:     private BigInteger bigForBytes(byte[] bytes, int sigbytes)
1:07893d7:     {
1:07893d7:         byte[] b;
1:07893d7:         if (sigbytes != bytes.length)
1:07893d7:         {
1:07893d7:             b = new byte[sigbytes];
1:07893d7:             System.arraycopy(bytes, 0, b, 0, bytes.length);
1:07893d7:         } else
1:07893d7:             b = bytes;
1:07893d7:         return new BigInteger(1, b);
1:07893d7:     }
1:07893d7: 
1:07893d7:     /**
1:07893d7:      * Convert a (positive) BigInteger into a byte array representing its magnitude.
1:07893d7:      * If remainder is true, an additional byte with the high order bit enabled
1:07893d7:      * will be added to the end of the array
1:07893d7:      */
1:07893d7:     private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder)
1:07893d7:     {
1:07893d7:         byte[] bytes = new byte[sigbytes + (remainder ? 1 : 0)];
1:07893d7:         if (remainder)
1:07893d7:         {
1:07893d7:             // remaining bit is the most significant in the last byte
1:07893d7:             bytes[sigbytes] |= 0x80;
1:07893d7:         }
1:07893d7:         // bitmask for a single byte
1:07893d7:         for (int i = 0; i < sigbytes; i++)
1:07893d7:         {
1:07893d7:             int maskpos = 8 * (sigbytes - (i + 1));
1:07893d7:             // apply bitmask and get byte value
1:07893d7:             bytes[i] = (byte)(big.and(BYTE_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFF);
1:07893d7:         }
1:07893d7:         return bytes;
1:07893d7:     }
1:07893d7: 
1:07893d7:     public BytesToken getMinimumToken()
1:07893d7:     {
1:07893d7:         return MINIMUM;
1:07893d7:     }
1:07893d7: 
1:07893d7:     public BytesToken getRandomToken()
1:07893d7:     {
1:47d3b7e:        return getRandomToken(ThreadLocalRandom.current());
1:47d3b7e:     }
1:47d3b7e: 
1:47d3b7e:     public BytesToken getRandomToken(Random random)
1:47d3b7e:     {
1:07893d7:         byte[] buffer = new byte[16];
1:47d3b7e:         random.nextBytes(buffer);
1:07893d7:         return new BytesToken(buffer);
1:07893d7:     }
1:07893d7: 
1:68d2526:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() 
1:68d2526:     {
1:07893d7:         public ByteBuffer toByteArray(Token token)
1:07893d7:         {
1:07893d7:             BytesToken bytesToken = (BytesToken) token;
1:07893d7:             return ByteBuffer.wrap(bytesToken.token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         public Token fromByteArray(ByteBuffer bytes)
1:07893d7:         {
1:07893d7:             return new BytesToken(bytes);
1:07893d7:         }
1:07893d7: 
1:07893d7:         public String toString(Token token)
1:07893d7:         {
1:07893d7:             BytesToken bytesToken = (BytesToken) token;
1:07893d7:             return Hex.bytesToHex(bytesToken.token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         public void validate(String token) throws ConfigurationException
1:07893d7:         {
1:07893d7:             try
1:07893d7:             {
1:07893d7:                 if (token.length() % 2 == 1)
1:07893d7:                     token = "0" + token;
1:07893d7:                 Hex.hexToBytes(token);
1:07893d7:             }
1:07893d7:             catch (NumberFormatException e)
1:07893d7:             {
1:07893d7:                 throw new ConfigurationException("Token " + token + " contains non-hex digits");
1:07893d7:             }
1:07893d7:         }
1:07893d7: 
1:07893d7:         public Token fromString(String string)
1:07893d7:         {
1:07893d7:             if (string.length() % 2 == 1)
1:07893d7:                 string = "0" + string;
1:07893d7:             return new BytesToken(Hex.hexToBytes(string));
1:07893d7:         }
1:07893d7:     };
1:07893d7: 
1:07893d7:     public Token.TokenFactory getTokenFactory()
1:07893d7:     {
1:07893d7:         return tokenFactory;
1:07893d7:     }
1:07893d7: 
1:07893d7:     public boolean preservesOrder()
1:07893d7:     {
1:07893d7:         return true;
1:07893d7:     }
1:07893d7: 
1:07893d7:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
1:07893d7:     {
1:07893d7:         // allTokens will contain the count and be returned, sorted_ranges is shorthand for token<->token math.
1:07893d7:         Map<Token, Float> allTokens = new HashMap<Token, Float>();
1:07893d7:         List<Range<Token>> sortedRanges = new ArrayList<Range<Token>>(sortedTokens.size());
1:07893d7: 
1:07893d7:         // this initializes the counts to 0 and calcs the ranges in order.
1:07893d7:         Token lastToken = sortedTokens.get(sortedTokens.size() - 1);
1:07893d7:         for (Token node : sortedTokens)
1:07893d7:         {
1:07893d7:             allTokens.put(node, new Float(0.0));
1:07893d7:             sortedRanges.add(new Range<Token>(lastToken, node));
1:07893d7:             lastToken = node;
1:07893d7:         }
1:07893d7: 
1:07893d7:         for (String ks : Schema.instance.getKeyspaces())
1:07893d7:         {
1:a3a8dbc:             for (CFMetaData cfmd : Schema.instance.getTablesAndViews(ks))
1:07893d7:             {
1:07893d7:                 for (Range<Token> r : sortedRanges)
1:07893d7:                 {
1:07893d7:                     // Looping over every KS:CF:Range, get the splits size and add it to the count
1:07893d7:                     allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
1:07893d7:                 }
1:07893d7:             }
1:07893d7:         }
1:07893d7: 
1:07893d7:         // Sum every count up and divide count/total for the fractional ownership.
1:07893d7:         Float total = new Float(0.0);
1:07893d7:         for (Float f : allTokens.values())
1:07893d7:             total += f;
1:07893d7:         for (Map.Entry<Token, Float> row : allTokens.entrySet())
1:07893d7:             allTokens.put(row.getKey(), row.getValue() / total);
1:07893d7: 
1:07893d7:         return allTokens;
1:07893d7:     }
1:07893d7: 
1:07893d7:     public AbstractType<?> getTokenValidator()
1:07893d7:     {
1:69f77cb:         return BytesType.instance;
1:69f77cb:     }
1:0a08525: 
1:0a08525:     public AbstractType<?> partitionOrdering()
1:0a08525:     {
1:0a08525:         return BytesType.instance;
1:0a08525:     }
2:2d9d248: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:     public Token split(Token left, Token right, double ratioToLeft)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() 
1:     {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadLocalRandom;
/////////////////////////////////////////////////////////////////////////
1:        return getRandomToken(ThreadLocalRandom.current());
1:     }
1: 
1:     public BytesToken getRandomToken(Random random)
1:     {
1:         random.nextBytes(buffer);
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1:             for (CFMetaData cfmd : Schema.instance.getTablesAndViews(ks))
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1: 
1:     public AbstractType<?> partitionOrdering()
1:     {
1:         return BytesType.instance;
1:     }
commit:6e1033b
/////////////////////////////////////////////////////////////////////////
0:             for (CFMetaData cfmd : Schema.instance.getTables(ks))
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ObjectSizes;
1: 
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(MINIMUM);
1: 
1: 
1:     @Override
0:     public long getHeapSizeOf(BytesToken token)
1:     {
0:         return EMPTY_SIZE + ObjectSizes.sizeOfArray(token.token);
1:     }
commit:c1f3c9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ef25537
/////////////////////////////////////////////////////////////////////////
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
1:     public BytesToken getToken(ByteBuffer key)
1:         if (key.remaining() == 0)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
1: 
0:     public AbstractType<?> partitionOrdering()
1:     {
1:         return BytesType.instance;
1:     }
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.BufferDecoratedKey;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.Hex;
1: import org.apache.cassandra.utils.Pair;
1: import org.apache.commons.lang3.ArrayUtils;
1: 
1: import java.math.BigInteger;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Random;
1: public class ByteOrderedPartitioner implements IPartitioner
1:     public static final BytesToken MINIMUM = new BytesToken(ArrayUtils.EMPTY_BYTE_ARRAY);
1: 
1:     public static final BigInteger BYTE_MASK = new BigInteger("255");
1: 
1:     public static final ByteOrderedPartitioner instance = new ByteOrderedPartitioner();
1: 
1:     public static class BytesToken extends Token
1:     {
1:         static final long serialVersionUID = -2630749093733680626L;
1: 
1:         final byte[] token;
1: 
1:         public BytesToken(ByteBuffer token)
1:         {
1:             this(ByteBufferUtil.getArray(token));
1:         }
1: 
1:         public BytesToken(byte[] token)
1:         {
1:             this.token = token;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return Hex.bytesToHex(token);
1:         }
1: 
1:         public int compareTo(Token other)
1:         {
1:             BytesToken o = (BytesToken) other;
1:             return FBUtilities.compareUnsigned(token, o.token, 0, 0, token.length, o.token.length);
1:         }
1: 
1:         @Override
1:         public int hashCode()
1:         {
1:             final int prime = 31;
1:             return prime + Arrays.hashCode(token);
1:         }
1: 
1:         @Override
1:         public boolean equals(Object obj)
1:         {
1:             if (this == obj)
1:                 return true;
1:             if (!(obj instanceof BytesToken))
1:                 return false;
1:             BytesToken other = (BytesToken) obj;
1: 
1:             return Arrays.equals(token, other.token);
1:         }
1: 
1:         @Override
1:         public IPartitioner getPartitioner()
1:         {
1:             return instance;
1:         }
1: 
1:         @Override
1:         public long getHeapSize()
1:         {
1:             return EMPTY_SIZE + ObjectSizes.sizeOfArray(token);
1:         }
1: 
1:         @Override
1:         public Object getTokenValue()
1:         {
1:             return token;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public DecoratedKey decorateKey(ByteBuffer key)
1:         return new BufferDecoratedKey(getToken(key), key);
1:     }
1: 
1:     public BytesToken midpoint(Token lt, Token rt)
1:     {
1:         BytesToken ltoken = (BytesToken) lt;
1:         BytesToken rtoken = (BytesToken) rt;
1: 
1:         int sigbytes = Math.max(ltoken.token.length, rtoken.token.length);
1:         BigInteger left = bigForBytes(ltoken.token, sigbytes);
1:         BigInteger right = bigForBytes(rtoken.token, sigbytes);
1: 
1:         Pair<BigInteger,Boolean> midpair = FBUtilities.midpoint(left, right, 8*sigbytes);
1:         return new BytesToken(bytesForBig(midpair.left, sigbytes, midpair.right));
1:     }
1: 
1:     /**
1:      * Convert a byte array containing the most significant of 'sigbytes' bytes
1:      * representing a big-endian magnitude into a BigInteger.
1:      */
1:     private BigInteger bigForBytes(byte[] bytes, int sigbytes)
1:     {
1:         byte[] b;
1:         if (sigbytes != bytes.length)
1:         {
1:             b = new byte[sigbytes];
1:             System.arraycopy(bytes, 0, b, 0, bytes.length);
1:         } else
1:             b = bytes;
1:         return new BigInteger(1, b);
1:     }
1: 
1:     /**
1:      * Convert a (positive) BigInteger into a byte array representing its magnitude.
1:      * If remainder is true, an additional byte with the high order bit enabled
1:      * will be added to the end of the array
1:      */
1:     private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder)
1:     {
1:         byte[] bytes = new byte[sigbytes + (remainder ? 1 : 0)];
1:         if (remainder)
1:         {
1:             // remaining bit is the most significant in the last byte
1:             bytes[sigbytes] |= 0x80;
1:         }
1:         // bitmask for a single byte
1:         for (int i = 0; i < sigbytes; i++)
1:         {
1:             int maskpos = 8 * (sigbytes - (i + 1));
1:             // apply bitmask and get byte value
1:             bytes[i] = (byte)(big.and(BYTE_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFF);
1:         }
1:         return bytes;
1:     }
1: 
1:     public BytesToken getMinimumToken()
1:     {
1:         return MINIMUM;
1:     }
1: 
1:     public BytesToken getRandomToken()
1:     {
0:         Random r = new Random();
1:         byte[] buffer = new byte[16];
0:         r.nextBytes(buffer);
1:         return new BytesToken(buffer);
1:     }
1: 
0:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory() {
1:         public ByteBuffer toByteArray(Token token)
1:         {
1:             BytesToken bytesToken = (BytesToken) token;
1:             return ByteBuffer.wrap(bytesToken.token);
1:         }
1: 
1:         public Token fromByteArray(ByteBuffer bytes)
1:         {
1:             return new BytesToken(bytes);
1:         }
1: 
1:         public String toString(Token token)
1:         {
1:             BytesToken bytesToken = (BytesToken) token;
1:             return Hex.bytesToHex(bytesToken.token);
1:         }
1: 
1:         public void validate(String token) throws ConfigurationException
1:         {
1:             try
1:             {
1:                 if (token.length() % 2 == 1)
1:                     token = "0" + token;
1:                 Hex.hexToBytes(token);
1:             }
1:             catch (NumberFormatException e)
1:             {
1:                 throw new ConfigurationException("Token " + token + " contains non-hex digits");
1:             }
1:         }
1: 
1:         public Token fromString(String string)
1:         {
1:             if (string.length() % 2 == 1)
1:                 string = "0" + string;
1:             return new BytesToken(Hex.hexToBytes(string));
1:         }
1:     };
1: 
1:     public Token.TokenFactory getTokenFactory()
1:     {
1:         return tokenFactory;
1:     }
1: 
1:     public boolean preservesOrder()
1:     {
1:         return true;
1:     }
1: 
1:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
1:     {
1:         // allTokens will contain the count and be returned, sorted_ranges is shorthand for token<->token math.
1:         Map<Token, Float> allTokens = new HashMap<Token, Float>();
1:         List<Range<Token>> sortedRanges = new ArrayList<Range<Token>>(sortedTokens.size());
1: 
1:         // this initializes the counts to 0 and calcs the ranges in order.
1:         Token lastToken = sortedTokens.get(sortedTokens.size() - 1);
1:         for (Token node : sortedTokens)
1:         {
1:             allTokens.put(node, new Float(0.0));
1:             sortedRanges.add(new Range<Token>(lastToken, node));
1:             lastToken = node;
1:         }
1: 
1:         for (String ks : Schema.instance.getKeyspaces())
1:         {
0:             for (CFMetaData cfmd : Schema.instance.getKSMetaData(ks).cfMetaData().values())
1:             {
1:                 for (Range<Token> r : sortedRanges)
1:                 {
1:                     // Looping over every KS:CF:Range, get the splits size and add it to the count
1:                     allTokens.put(r.right, allTokens.get(r.right) + StorageService.instance.getSplits(ks, cfmd.cfName, r, 1).size());
1:                 }
1:             }
1:         }
1: 
1:         // Sum every count up and divide count/total for the fractional ownership.
1:         Float total = new Float(0.0);
1:         for (Float f : allTokens.values())
1:             total += f;
1:         for (Map.Entry<Token, Float> row : allTokens.entrySet())
1:             allTokens.put(row.getKey(), row.getValue() / total);
1: 
1:         return allTokens;
1:     }
1: 
1:     public AbstractType<?> getTokenValidator()
1:     {
0:         return BytesType.instance;
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
0:     public long getHeapSizeOf(Token token)
0:         return EMPTY_SIZE + ObjectSizes.sizeOfArray(((BytesToken) token).token);
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public double size(Token next)
1:         {
1:             throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:                                                                   getClass().getSimpleName()));
1:         }
1: 
1:         @Override
1:         public Token increaseSlightly()
1:         {
1:             throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:                                                                   getClass().getSimpleName()));
1:         }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:2564647
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens){ throw new UnsupportedOperationException(); }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:a07e71c
/////////////////////////////////////////////////////////////////////////
commit:2d9d248
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.dht;
0: 
0: import java.math.BigInteger;
0: import java.text.Collator;
0: import java.util.Arrays;
0: import java.util.Comparator;
0: import java.util.Locale;
0: import java.util.Random;
0: 
0: import org.apache.commons.lang.ArrayUtils;
0: 
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.Pair;
0: 
0: public class ByteOrderedPartitioner extends AbstractByteOrderedPartitioner
1: {
0:     public BytesToken getToken(byte[] key)
1:     {
0:         if (key.length == 0)
1:             return MINIMUM;
1:         return new BytesToken(key);
1:     }
1: }
============================================================================