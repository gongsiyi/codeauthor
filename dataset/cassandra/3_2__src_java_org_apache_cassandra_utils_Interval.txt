1:4d34917: /*
1:4d34917:  * Licensed to the Apache Software Foundation (ASF) under one
1:4d34917:  * or more contributor license agreements.  See the NOTICE file
1:4d34917:  * distributed with this work for additional information
1:4d34917:  * regarding copyright ownership.  The ASF licenses this file
1:4d34917:  * to you under the Apache License, Version 2.0 (the
1:4d34917:  * "License"); you may not use this file except in compliance
1:4d34917:  * with the License.  You may obtain a copy of the License at
1:4d34917:  *
1:4d34917:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4d34917:  *
1:4d34917:  * Unless required by applicable law or agreed to in writing, software
1:4d34917:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4d34917:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4d34917:  * See the License for the specific language governing permissions and
1:4d34917:  * limitations under the License.
1:4d34917:  */
1:4d34917: package org.apache.cassandra.utils;
1:8b3221a: 
1:4d34917: import com.google.common.base.Objects;
2:4d34917: 
1:4d34917: public class Interval<C, D>
1:4d34917: {
1:4d34917:     public final C min;
1:4d34917:     public final C max;
1:4d34917:     public final D data;
1:4d34917: 
1:4d34917:     public Interval(C min, C max, D data)
1:4d34917:     {
1:4d34917:         this.min = min;
1:4d34917:         this.max = max;
1:4d34917:         this.data = data;
1:4d34917:     }
1:4d34917: 
1:4d34917:     public static <C, D> Interval<C, D> create(C min, C max)
1:4d34917:     {
1:4d34917:         return create(min, max, null);
1:4d34917:     }
1:4d34917: 
1:4d34917:     public static <C, D> Interval<C, D> create(C min, C max, D data)
1:4d34917:     {
1:4d34917:         return new Interval(min, max, data);
1:4d34917:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public String toString()
1:4d34917:     {
1:4d34917:         return String.format("[%s, %s]%s", min, max, data == null ? "" : (String.format("(%s)", data)));
1:4d34917:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public final int hashCode()
1:4d34917:     {
1:4d34917:         return Objects.hashCode(min, max, data);
1:4d34917:     }
1:4d34917: 
1:4d34917:     @Override
1:4d34917:     public final boolean equals(Object o)
1:4d34917:     {
1:4d34917:         if(!(o instanceof Interval))
1:4d34917:             return false;
1:4d34917: 
1:4d34917:         Interval that = (Interval)o;
1:4d34917:         // handles nulls properly
1:4d34917:         return Objects.equal(min, that.min) && Objects.equal(max, that.max) && Objects.equal(data, that.data);
1:4d34917:     }
1:52ddfe4: 
1:52ddfe4:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> minOrdering
1:52ddfe4:     = new AsymmetricOrdering<Interval<Comparable, Object>, Comparable>()
1:52ddfe4:     {
1:52ddfe4:         public int compareAsymmetric(Interval<Comparable, Object> left, Comparable right)
1:52ddfe4:         {
1:52ddfe4:             return left.min.compareTo(right);
1:52ddfe4:         }
1:52ddfe4: 
1:52ddfe4:         public int compare(Interval<Comparable, Object> i1, Interval<Comparable, Object> i2)
1:52ddfe4:         {
1:52ddfe4:             return i1.min.compareTo(i2.min);
1:52ddfe4:         }
1:52ddfe4:     };
1:52ddfe4: 
1:52ddfe4:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> maxOrdering
1:52ddfe4:     = new AsymmetricOrdering<Interval<Comparable, Object>, Comparable>()
1:52ddfe4:     {
1:52ddfe4:         public int compareAsymmetric(Interval<Comparable, Object> left, Comparable right)
1:52ddfe4:         {
1:52ddfe4:             return left.max.compareTo(right);
1:52ddfe4:         }
1:52ddfe4: 
1:52ddfe4:         public int compare(Interval<Comparable, Object> i1, Interval<Comparable, Object> i2)
1:52ddfe4:         {
1:52ddfe4:             return i1.max.compareTo(i2.max);
1:52ddfe4:         }
1:52ddfe4:     };
1:52ddfe4: 
1:52ddfe4:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> reverseMaxOrdering = maxOrdering.reverse();
1:52ddfe4: 
1:52ddfe4:     public static <C extends Comparable<? super C>, V> AsymmetricOrdering<Interval<C, V>, C> minOrdering()
1:52ddfe4:     {
1:52ddfe4:         return (AsymmetricOrdering) minOrdering;
1:52ddfe4:     }
1:52ddfe4: 
1:52ddfe4:     public static <C extends Comparable<? super C>, V> AsymmetricOrdering<Interval<C, V>, C> maxOrdering()
1:52ddfe4:     {
1:52ddfe4:         return (AsymmetricOrdering) maxOrdering;
1:52ddfe4:     }
1:4d34917: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8b3221a
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
1: 
commit:52ddfe4
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> minOrdering
1:     = new AsymmetricOrdering<Interval<Comparable, Object>, Comparable>()
1:     {
1:         public int compareAsymmetric(Interval<Comparable, Object> left, Comparable right)
1:         {
1:             return left.min.compareTo(right);
1:         }
1: 
1:         public int compare(Interval<Comparable, Object> i1, Interval<Comparable, Object> i2)
1:         {
1:             return i1.min.compareTo(i2.min);
1:         }
1:     };
1: 
1:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> maxOrdering
1:     = new AsymmetricOrdering<Interval<Comparable, Object>, Comparable>()
1:     {
1:         public int compareAsymmetric(Interval<Comparable, Object> left, Comparable right)
1:         {
1:             return left.max.compareTo(right);
1:         }
1: 
1:         public int compare(Interval<Comparable, Object> i1, Interval<Comparable, Object> i2)
1:         {
1:             return i1.max.compareTo(i2.max);
1:         }
1:     };
1: 
1:     private static final AsymmetricOrdering<Interval<Comparable, Object>, Comparable> reverseMaxOrdering = maxOrdering.reverse();
1: 
1:     public static <C extends Comparable<? super C>, V> AsymmetricOrdering<Interval<C, V>, C> minOrdering()
1:     {
1:         return (AsymmetricOrdering) minOrdering;
1:     }
1: 
1:     public static <C extends Comparable<? super C>, V> AsymmetricOrdering<Interval<C, V>, C> maxOrdering()
1:     {
1:         return (AsymmetricOrdering) maxOrdering;
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4d34917
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import com.google.common.base.Objects;
1: 
1: public class Interval<C, D>
1: {
1:     public final C min;
1:     public final C max;
1:     public final D data;
1: 
1:     public Interval(C min, C max, D data)
1:     {
1:         this.min = min;
1:         this.max = max;
1:         this.data = data;
1:     }
1: 
1:     public static <C, D> Interval<C, D> create(C min, C max)
1:     {
1:         return create(min, max, null);
1:     }
1: 
1:     public static <C, D> Interval<C, D> create(C min, C max, D data)
1:     {
1:         return new Interval(min, max, data);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("[%s, %s]%s", min, max, data == null ? "" : (String.format("(%s)", data)));
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         return Objects.hashCode(min, max, data);
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof Interval))
1:             return false;
1: 
1:         Interval that = (Interval)o;
1:         // handles nulls properly
1:         return Objects.equal(min, that.min) && Objects.equal(max, that.max) && Objects.equal(data, that.data);
1:     }
1: }
============================================================================