1:5baf28d: /*
1:5baf28d:  * Licensed to the Apache Software Foundation (ASF) under one
1:5baf28d:  * or more contributor license agreements.  See the NOTICE file
1:5baf28d:  * distributed with this work for additional information
1:5baf28d:  * regarding copyright ownership.  The ASF licenses this file
1:5baf28d:  * to you under the Apache License, Version 2.0 (the
1:5baf28d:  * "License"); you may not use this file except in compliance
1:5baf28d:  * with the License.  You may obtain a copy of the License at
1:5baf28d:  *
1:5baf28d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5baf28d:  *
1:5baf28d:  * Unless required by applicable law or agreed to in writing, software
1:5baf28d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5baf28d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5baf28d:  * See the License for the specific language governing permissions and
1:5baf28d:  * limitations under the License.
1:5baf28d:  */
1:5baf28d: package org.apache.cassandra.utils;
3:5baf28d: 
1:5baf28d: import java.nio.ByteBuffer;
1:5baf28d: import java.util.zip.Checksum;
1:5baf28d: import java.util.zip.CRC32;
1:5baf28d: import java.util.zip.Adler32;
1:5baf28d: 
1:dc9ed46: import io.netty.util.concurrent.FastThreadLocal;
1:dc9ed46: 
1:5baf28d: public enum ChecksumType
1:5baf28d: {
1:30bb255:     Adler32
1:5baf28d:     {
1:5baf28d: 
1:5baf28d:         @Override
1:5baf28d:         public Checksum newInstance()
1:5baf28d:         {
1:5baf28d:             return new Adler32();
1:30bb255:         }
1:5baf28d: 
1:5baf28d:         @Override
1:5baf28d:         public void update(Checksum checksum, ByteBuffer buf)
1:5baf28d:         {
1:5baf28d:             ((Adler32)checksum).update(buf);
2:5baf28d:         }
1:5baf28d: 
1:5baf28d:     },
1:30bb255:     CRC32
1:5baf28d:     {
1:5baf28d: 
1:5baf28d:         @Override
1:5baf28d:         public Checksum newInstance()
1:5baf28d:         {
1:5baf28d:             return new CRC32();
1:5baf28d:         }
1:5baf28d: 
1:5baf28d:         @Override
1:5baf28d:         public void update(Checksum checksum, ByteBuffer buf)
1:5baf28d:         {
1:5baf28d:             ((CRC32)checksum).update(buf);
1:5baf28d:         }
1:5baf28d: 
1:5baf28d:     };
1:30bb255: 
1:5baf28d:     public abstract Checksum newInstance();
1:5baf28d:     public abstract void update(Checksum checksum, ByteBuffer buf);
1:30bb255: 
1:dc9ed46:     private FastThreadLocal<Checksum> instances = new FastThreadLocal<Checksum>()
1:30bb255:     {
1:dc9ed46:         protected Checksum initialValue() throws Exception
1:dc9ed46:         {
1:dc9ed46:             return newInstance();
1:dc9ed46:         }
1:dc9ed46:     };
1:30bb255: 
1:30bb255:     public long of(ByteBuffer buf)
1:30bb255:     {
1:30bb255:         Checksum checksum = instances.get();
1:30bb255:         checksum.reset();
1:30bb255:         update(checksum, buf);
1:30bb255:         return checksum.getValue();
1:30bb255:     }
1:30bb255: 
1:30bb255:     public long of(byte[] data, int off, int len)
1:30bb255:     {
1:30bb255:         Checksum checksum = instances.get();
1:30bb255:         checksum.reset();
1:30bb255:         checksum.update(data, off, len);
1:30bb255:         return checksum.getValue();
1:30bb255:     }
1:5baf28d: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocal;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private FastThreadLocal<Checksum> instances = new FastThreadLocal<Checksum>()
1:         protected Checksum initialValue() throws Exception
1:         {
1:             return newInstance();
1:         }
1:     };
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:     Adler32
/////////////////////////////////////////////////////////////////////////
1:     CRC32
/////////////////////////////////////////////////////////////////////////
1: 
0:     private ThreadLocal<Checksum> instances = ThreadLocal.withInitial(this::newInstance);
1: 
0:     public Checksum threadLocalInstance()
1:     {
0:         return instances.get();
1:     }
1: 
1:     public long of(ByteBuffer buf)
1:     {
1:         Checksum checksum = instances.get();
1:         checksum.reset();
1:         update(checksum, buf);
1:         return checksum.getValue();
1:     }
1: 
1:     public long of(byte[] data, int off, int len)
1:     {
1:         Checksum checksum = instances.get();
1:         checksum.reset();
1:         checksum.update(data, off, len);
1:         return checksum.getValue();
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.zip.Checksum;
1: import java.util.zip.CRC32;
1: import java.util.zip.Adler32;
1: 
1: public enum ChecksumType
1: {
0:     Adler32()
1:     {
1: 
1:         @Override
1:         public Checksum newInstance()
1:         {
1:             return new Adler32();
1:         }
1: 
1:         @Override
1:         public void update(Checksum checksum, ByteBuffer buf)
1:         {
1:             ((Adler32)checksum).update(buf);
1:         }
1: 
1:     },
0:     CRC32()
1:     {
1: 
1:         @Override
1:         public Checksum newInstance()
1:         {
1:             return new CRC32();
1:         }
1: 
1:         @Override
1:         public void update(Checksum checksum, ByteBuffer buf)
1:         {
1:             ((CRC32)checksum).update(buf);
1:         }
1: 
1:     };
1: 
1:     public abstract Checksum newInstance();
1: 
1:     public abstract void update(Checksum checksum, ByteBuffer buf);
1: }
============================================================================