1:fe37e06: /*
1:fe37e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:fe37e06:  * or more contributor license agreements.  See the NOTICE file
1:fe37e06:  * distributed with this work for additional information
1:fe37e06:  * regarding copyright ownership.  The ASF licenses this file
1:fe37e06:  * to you under the Apache License, Version 2.0 (the
1:fe37e06:  * "License"); you may not use this file except in compliance
1:fe37e06:  * with the License.  You may obtain a copy of the License at
1:fe37e06:  *
1:fe37e06:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fe37e06:  *
1:fe37e06:  * Unless required by applicable law or agreed to in writing, software
1:fe37e06:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fe37e06:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fe37e06:  * See the License for the specific language governing permissions and
1:fe37e06:  * limitations under the License.
1:fe37e06:  */
1:fe37e06: package org.apache.cassandra.cql3;
1:fe37e06: 
1:fe37e06: import java.util.Random;
1:fe37e06: 
1:fe37e06: import org.junit.Test;
1:fe37e06: 
1:fe37e06: import org.apache.cassandra.Util;
1:fe37e06: import org.apache.cassandra.db.*;
1:fe37e06: import org.apache.cassandra.db.marshal.Int32Type;
1:fe37e06: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:ef5bbed: import org.apache.cassandra.io.util.FileDataInput;
1:fe37e06: import org.apache.cassandra.utils.ByteBufferUtil;
1:fe37e06: 
1:fe37e06: public class TombstonesWithIndexedSSTableTest extends CQLTester
1:fe37e06: {
1:fe37e06:     @Test
1:fe37e06:     public void testTombstoneBoundariesInIndexCached() throws Throwable
1:fe37e06:     {
1:fe37e06:         testTombstoneBoundariesInIndex("ALL");
1:fe37e06:     }
1:fe37e06: 
1:fe37e06:     @Test
1:fe37e06:     public void testTombstoneBoundariesInIndexNotCached() throws Throwable
1:fe37e06:     {
1:fe37e06:         testTombstoneBoundariesInIndex("NONE");
1:fe37e06:     }
1:fe37e06: 
1:fe37e06:     public void testTombstoneBoundariesInIndex(String cacheKeys) throws Throwable
1:fe37e06:     {
1:fe37e06:         // That test reproduces the bug from CASSANDRA-11158 where a range tombstone boundary in the column index would
1:fe37e06:         // cause an assertion failure.
1:fe37e06: 
1:fe37e06:         int ROWS = 1000;
1:fe37e06:         int VALUE_LENGTH = 100;
1:fe37e06: 
1:fe37e06:         createTable("CREATE TABLE %s (k int, t int, s text static, v text, PRIMARY KEY (k, t)) WITH caching = { 'keys' : '" + cacheKeys + "' }");
1:fe37e06: 
1:fe37e06:         // We create a partition that is big enough that the underlying sstable will be indexed
1:fe37e06:         // For that, we use a large-ish number of row, and a value that isn't too small.
1:fe37e06:         String text = makeRandomString(VALUE_LENGTH);
1:fe37e06:         for (int i = 0; i < ROWS; i++)
1:fe37e06:             execute("INSERT INTO %s(k, t, v) VALUES (?, ?, ?)", 0, i, text + i);
1:fe37e06: 
1:fe37e06:         DecoratedKey dk = Util.dk(ByteBufferUtil.bytes(0));
1:fe37e06:         int minDeleted = ROWS;
1:fe37e06:         int maxDeleted = 0;
1:fe37e06: 
1:fe37e06:         // Place some range deletions around an indexed location to get a tombstone boundary as the index's firstName.
1:fe37e06:         // Because we insert a tombstone before it, the index position may move, so repeat procedure until the index
1:fe37e06:         // boundary hits a tombstone boundary.
1:fe37e06:         deletionLoop:
1:fe37e06:         while (true)
1:fe37e06:         {
1:fe37e06:             flush();
1:fe37e06:             compact();
1:fe37e06: 
1:fe37e06:             int indexedRow = -1;
1:fe37e06:             for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())
1:fe37e06:             {
1:fe37e06:                 // The line below failed with key caching off (CASSANDRA-11158)
1:fe37e06:                 @SuppressWarnings("unchecked")
1:ef5bbed:                 RowIndexEntry indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
1:fe37e06:                 if (indexEntry != null && indexEntry.isIndexed())
1:fe37e06:                 {
1:ef5bbed:                     try (FileDataInput reader = sstable.openIndexReader())
1:ef5bbed:                     {
1:ef5bbed:                         RowIndexEntry.IndexInfoRetriever infoRetriever = indexEntry.openWithIndex(sstable.getIndexFile());
1:ef5bbed:                         ClusteringPrefix firstName = infoRetriever.columnsIndex(1).firstName;
1:fe37e06:                         if (firstName.kind().isBoundary())
1:fe37e06:                             break deletionLoop;
1:fe37e06:                         indexedRow = Int32Type.instance.compose(firstName.get(0));
1:fe37e06:                     }
1:fe37e06:                 }
1:ef5bbed:             }
1:fe37e06:             assert indexedRow >= 0;
1:fe37e06:             minDeleted = Math.min(minDeleted, indexedRow - 2);
1:fe37e06:             maxDeleted = Math.max(maxDeleted, indexedRow + 5);
1:fe37e06: 
1:fe37e06:             execute("DELETE FROM %s WHERE k = 0 AND t >= ? AND t < ?", indexedRow - 2, indexedRow + 3);
1:fe37e06:             execute("DELETE FROM %s WHERE k = 0 AND t >= ? AND t < ?", indexedRow, indexedRow + 5);
1:fe37e06:         }
1:fe37e06: 
1:fe37e06:         flush();
1:fe37e06:         // The line below failed with key caching on (CASSANDRA-11158)
1:fe37e06:         compact();
1:fe37e06: 
1:fe37e06:         assertRowCount(execute("SELECT s FROM %s WHERE k = ?", 0), ROWS - (maxDeleted - minDeleted));
1:fe37e06:         assertRowCount(execute("SELECT s FROM %s WHERE k = ? ORDER BY t DESC", 0), ROWS - (maxDeleted - minDeleted));
1:fe37e06: 
1:fe37e06:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ?", 0), 1);
1:fe37e06:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ? ORDER BY t DESC", 0), 1);
1:fe37e06:     }
1:fe37e06: 
1:fe37e06:     public static String makeRandomString(int length)
1:fe37e06:     {
1:fe37e06:         Random random = new Random();
1:fe37e06:         char[] chars = new char[length];
1:fe37e06:         for (int i = 0; i < length; ++i)
1:fe37e06:             chars[i++] = (char) ('a' + random.nextInt('z' - 'a' + 1));
1:fe37e06:         return new String(chars);
1:fe37e06:     }
1:fe37e06: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
commit:fe37e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Random;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.Int32Type;
0: import org.apache.cassandra.io.sstable.IndexHelper;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class TombstonesWithIndexedSSTableTest extends CQLTester
1: {
1:     @Test
1:     public void testTombstoneBoundariesInIndexCached() throws Throwable
1:     {
1:         testTombstoneBoundariesInIndex("ALL");
1:     }
1: 
1:     @Test
1:     public void testTombstoneBoundariesInIndexNotCached() throws Throwable
1:     {
1:         testTombstoneBoundariesInIndex("NONE");
1:     }
1: 
1:     public void testTombstoneBoundariesInIndex(String cacheKeys) throws Throwable
1:     {
1:         // That test reproduces the bug from CASSANDRA-11158 where a range tombstone boundary in the column index would
1:         // cause an assertion failure.
1: 
1:         int ROWS = 1000;
1:         int VALUE_LENGTH = 100;
1: 
1:         createTable("CREATE TABLE %s (k int, t int, s text static, v text, PRIMARY KEY (k, t)) WITH caching = { 'keys' : '" + cacheKeys + "' }");
1: 
1:         // We create a partition that is big enough that the underlying sstable will be indexed
1:         // For that, we use a large-ish number of row, and a value that isn't too small.
1:         String text = makeRandomString(VALUE_LENGTH);
1:         for (int i = 0; i < ROWS; i++)
1:             execute("INSERT INTO %s(k, t, v) VALUES (?, ?, ?)", 0, i, text + i);
1: 
1:         DecoratedKey dk = Util.dk(ByteBufferUtil.bytes(0));
1:         int minDeleted = ROWS;
1:         int maxDeleted = 0;
1: 
1:         // Place some range deletions around an indexed location to get a tombstone boundary as the index's firstName.
1:         // Because we insert a tombstone before it, the index position may move, so repeat procedure until the index
1:         // boundary hits a tombstone boundary.
1:         deletionLoop:
1:         while (true)
1:         {
1:             flush();
1:             compact();
1: 
1:             int indexedRow = -1;
1:             for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())
1:             {
1:                 // The line below failed with key caching off (CASSANDRA-11158)
1:                 @SuppressWarnings("unchecked")
0:                 RowIndexEntry<IndexHelper.IndexInfo> indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
1:                 if (indexEntry != null && indexEntry.isIndexed())
1:                 {
0:                     ClusteringPrefix firstName = indexEntry.columnsIndex().get(1).firstName;
1:                     if (firstName.kind().isBoundary())
1:                         break deletionLoop;
1:                     indexedRow = Int32Type.instance.compose(firstName.get(0));
1:                 }
1:             }
1:             assert indexedRow >= 0;
1:             minDeleted = Math.min(minDeleted, indexedRow - 2);
1:             maxDeleted = Math.max(maxDeleted, indexedRow + 5);
1: 
1:             execute("DELETE FROM %s WHERE k = 0 AND t >= ? AND t < ?", indexedRow - 2, indexedRow + 3);
1:             execute("DELETE FROM %s WHERE k = 0 AND t >= ? AND t < ?", indexedRow, indexedRow + 5);
1:         }
1: 
1:         flush();
1:         // The line below failed with key caching on (CASSANDRA-11158)
1:         compact();
1: 
1:         assertRowCount(execute("SELECT s FROM %s WHERE k = ?", 0), ROWS - (maxDeleted - minDeleted));
1:         assertRowCount(execute("SELECT s FROM %s WHERE k = ? ORDER BY t DESC", 0), ROWS - (maxDeleted - minDeleted));
1: 
1:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ?", 0), 1);
1:         assertRowCount(execute("SELECT DISTINCT s FROM %s WHERE k = ? ORDER BY t DESC", 0), 1);
1:     }
1: 
0:     // Creates a random string
1:     public static String makeRandomString(int length)
1:     {
1:         Random random = new Random();
1:         char[] chars = new char[length];
1:         for (int i = 0; i < length; ++i)
1:             chars[i++] = (char) ('a' + random.nextInt('z' - 'a' + 1));
1:         return new String(chars);
1:     }
1: }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.FileDataInput;
/////////////////////////////////////////////////////////////////////////
1:                 RowIndexEntry indexEntry = sstable.getPosition(dk, SSTableReader.Operator.EQ);
1:                     try (FileDataInput reader = sstable.openIndexReader())
1:                     {
1:                         RowIndexEntry.IndexInfoRetriever infoRetriever = indexEntry.openWithIndex(sstable.getIndexFile());
1:                         ClusteringPrefix firstName = infoRetriever.columnsIndex(1).firstName;
0:                         if (firstName.kind().isBoundary())
0:                             break deletionLoop;
0:                         indexedRow = Int32Type.instance.compose(firstName.get(0));
1:                     }
============================================================================