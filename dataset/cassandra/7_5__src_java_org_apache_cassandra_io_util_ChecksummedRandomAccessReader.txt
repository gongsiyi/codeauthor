1:fa6205c: /*
1:fa6205c:  * Licensed to the Apache Software Foundation (ASF) under one
1:fa6205c:  * or more contributor license agreements.  See the NOTICE file
1:fa6205c:  * distributed with this work for additional information
1:fa6205c:  * regarding copyright ownership.  The ASF licenses this file
1:fa6205c:  * to you under the Apache License, Version 2.0 (the
1:fa6205c:  * "License"); you may not use this file except in compliance
1:fa6205c:  * with the License.  You may obtain a copy of the License at
1:fa6205c:  *
1:fa6205c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fa6205c:  *
1:fa6205c:  * Unless required by applicable law or agreed to in writing, software
1:fa6205c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fa6205c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fa6205c:  * See the License for the specific language governing permissions and
1:fa6205c:  * limitations under the License.
1:fa6205c:  */
1:fa6205c: package org.apache.cassandra.io.util;
1:30bb255: 
1:fa6205c: import java.io.File;
1:fa6205c: import java.io.IOException;
1:30bb255: 
1:30bb255: import org.apache.cassandra.utils.ChecksumType;
1:ce63ccc: 
1:b4133f3: public final class ChecksummedRandomAccessReader
5:30bb255: {
1:05660a5:     @SuppressWarnings("resource") // The Rebufferer owns both the channel and the validator and handles closing both.
1:b4133f3:     public static RandomAccessReader open(File file, File crcFile) throws IOException
1:30bb255:     {
1:b4133f3:         ChannelProxy channel = new ChannelProxy(file);
1:b4133f3:         try
1:30bb255:         {
1:b4133f3:             DataIntegrityMetadata.ChecksumValidator validator = new DataIntegrityMetadata.ChecksumValidator(ChecksumType.CRC32,
1:b4133f3:                                                                                                             RandomAccessReader.open(crcFile),
1:b4133f3:                                                                                                             file.getPath());
1:b4133f3:             Rebufferer rebufferer = new ChecksummedRebufferer(channel, validator);
1:b4133f3:             return new RandomAccessReader.RandomAccessReaderWithOwnChannel(rebufferer);
1:b4133f3:         }
1:b4133f3:         catch (Throwable t)
1:b4133f3:         {
1:b4133f3:             channel.close();
1:b4133f3:             throw t;
4:30bb255:         }
1:30bb255:     }
1:30bb255: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:05660a5
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // The Rebufferer owns both the channel and the validator and handles closing both.
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: public final class ChecksummedRandomAccessReader
1:     public static RandomAccessReader open(File file, File crcFile) throws IOException
1:         ChannelProxy channel = new ChannelProxy(file);
1:         try
1:             DataIntegrityMetadata.ChecksumValidator validator = new DataIntegrityMetadata.ChecksumValidator(ChecksumType.CRC32,
1:                                                                                                             RandomAccessReader.open(crcFile),
1:                                                                                                             file.getPath());
1:             Rebufferer rebufferer = new ChecksummedRebufferer(channel, validator);
1:             return new RandomAccessReader.RandomAccessReaderWithOwnChannel(rebufferer);
1:         }
1:         catch (Throwable t)
1:         {
1:             channel.close();
1:             throw t;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator;
1: import org.apache.cassandra.utils.ChecksumType;
0: public class ChecksummedRandomAccessReader
/////////////////////////////////////////////////////////////////////////
0:     static class ChecksummedRebufferer extends BufferManagingRebufferer
0:         private final DataIntegrityMetadata.ChecksumValidator validator;
0:         public ChecksummedRebufferer(ChannelProxy channel, ChecksumValidator validator)
0:             super(new SimpleChunkReader(channel, channel.size(), BufferType.ON_HEAP, validator.chunkSize));
0:             this.validator = validator;
0:         @Override
0:         public BufferHolder rebuffer(long desiredPosition)
1:         {
0:             if (desiredPosition != offset + buffer.position())
0:                 validator.seek(desiredPosition);
0:             // align with buffer size, as checksums were computed in chunks of buffer size each.
0:             offset = alignedPosition(desiredPosition);
0:             source.readChunk(offset, buffer);
1: 
0:             try
1:             {
0:                 validator.validate(ByteBufferUtil.getArray(buffer), 0, buffer.remaining());
1:             }
0:             catch (IOException e)
1:             {
0:                 throw new CorruptFileException(e, channel().filePath());
1:             }
1: 
0:             return this;
0:         @Override
0:         public void close()
1:         {
0:             try
1:             {
0:                 source.close();
1:             }
0:             finally
1:             {
0:                 validator.close();
1:             }
1:         }
0:         @Override
0:         long alignedPosition(long desiredPosition)
1:         {
0:             return (desiredPosition / buffer.capacity()) * buffer.capacity();
1:         }
/////////////////////////////////////////////////////////////////////////
0:             this.validator = new DataIntegrityMetadata.ChecksumValidator(ChecksumType.CRC32,
0:         }
0:         @Override
0:         protected Rebufferer createRebufferer()
0:         {
0:             return new ChecksummedRebufferer(channel, validator);
0:             // Always own and close the channel.
0:             return buildWithChannel();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.Throwables;
0:         public final String filePath;
0:         public CorruptFileException(Exception cause, String filePath)
0:             this.filePath = filePath;
0:     private ChecksummedRandomAccessReader(Builder builder)
0:         super(builder);
0:         this.validator = builder.validator;
0:     protected void reBufferStandard()
/////////////////////////////////////////////////////////////////////////
0:             throw new CorruptFileException(e, channel.filePath());
0:     protected void reBufferMmap()
0:     {
0:         throw new AssertionError("Unsupported operation");
0:     }
1: 
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:         Throwables.perform(channel.filePath(), Throwables.FileOpType.READ,
0:                            super::close,
0:                            validator::close,
0:                            channel::close);
0:     }
0: 
0:     public static final class Builder extends RandomAccessReader.Builder
0:     {
0:         private final DataIntegrityMetadata.ChecksumValidator validator;
0: 
0:         @SuppressWarnings("resource")
0:         public Builder(File file, File crcFile) throws IOException
0:             super(new ChannelProxy(file));
0:             this.validator = new DataIntegrityMetadata.ChecksumValidator(new CRC32(),
0:                                                                          RandomAccessReader.open(crcFile),
0:                                                                          file.getPath());
0: 
0:             super.bufferSize(validator.chunkSize)
0:                  .bufferType(BufferType.ON_HEAP);
0: 
0:         @Override
0:         public RandomAccessReader build()
0:             return new ChecksummedRandomAccessReader(this);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0ff2a5b
commit:85d550f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         public CorruptFileException(Exception cause, File file)
0:         {
0:             super(cause);
/////////////////////////////////////////////////////////////////////////
0:     protected ChecksummedRandomAccessReader(File file, ChannelProxy channel, DataIntegrityMetadata.ChecksumValidator validator)
0:     {
/////////////////////////////////////////////////////////////////////////
0:             @SuppressWarnings("resource")
0:             DataIntegrityMetadata.ChecksumValidator validator =
0:                 new DataIntegrityMetadata.ChecksumValidator(new Adler32(), crcReader, file.getPath());
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
commit:a472aa9
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:5baf28d
/////////////////////////////////////////////////////////////////////////
0: import java.util.zip.CRC32;
/////////////////////////////////////////////////////////////////////////
0:         DataIntegrityMetadata.ChecksumValidator validator = new DataIntegrityMetadata.ChecksumValidator(new CRC32(),
author:Daniel Chia
-------------------------------------------------------------------------------
commit:fa6205c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.io.util;
0: 
1: import java.io.File;
1: import java.io.IOException;
0: import java.util.zip.Adler32;
0: 
0: import org.apache.cassandra.io.compress.BufferType;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: 
0: public class ChecksummedRandomAccessReader extends RandomAccessReader
0: {
0:     @SuppressWarnings("serial")
0:     public static class CorruptFileException extends RuntimeException
0:     {
0:         public final File file;
0: 
0:         public CorruptFileException(Exception cause, File file) {
0:             this.file = file;
0:         }
0:     }
0: 
0:     private final DataIntegrityMetadata.ChecksumValidator validator;
0:     private final File file;
0: 
0:     protected ChecksummedRandomAccessReader(File file, ChannelProxy channel, DataIntegrityMetadata.ChecksumValidator validator) throws IOException {
0:         super(channel, validator.chunkSize, -1, BufferType.ON_HEAP, null);
0:         this.validator = validator;
0:         this.file = file;
0:     }
0: 
0:     public static ChecksummedRandomAccessReader open(File file, File crcFile) throws IOException
0:     {
0:         try (ChannelProxy channel = new ChannelProxy(file))
0:         {
0:             RandomAccessReader crcReader = RandomAccessReader.open(crcFile);
0:             DataIntegrityMetadata.ChecksumValidator validator = new DataIntegrityMetadata.ChecksumValidator(new Adler32(),
0:                                                                                                             crcReader,
0:                                                                                                             file.getPath());
0:             return new ChecksummedRandomAccessReader(file, channel, validator);
0:         }
0:     }
0: 
0:     protected void reBuffer()
0:     {
0:         long desiredPosition = current();
0:         // align with buffer size, as checksums were computed in chunks of buffer size each.
0:         bufferOffset = (desiredPosition / buffer.capacity()) * buffer.capacity();
0: 
0:         buffer.clear();
0: 
0:         long position = bufferOffset;
0:         while (buffer.hasRemaining())
0:         {
0:             int n = channel.read(buffer, position);
0:             if (n < 0)
0:                 break;
0:             position += n;
0:         }
0: 
0:         buffer.flip();
0: 
0:         try
0:         {
0:             validator.validate(ByteBufferUtil.getArray(buffer), 0, buffer.remaining());
0:         }
0:         catch (IOException e)
0:         {
0:             throw new CorruptFileException(e, file);
0:         }
0: 
0:         buffer.position((int) (desiredPosition - bufferOffset));
0:     }
0: 
0:     public void seek(long newPosition)
0:     {
0:         validator.seek(newPosition);
0:         super.seek(newPosition);
0:     }
0: 
0:     public void close()
0:     {
0:         super.close();
0:         validator.close();
0:     }
0: }
============================================================================