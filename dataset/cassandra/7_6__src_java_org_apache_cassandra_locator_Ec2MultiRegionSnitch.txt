1:d01f8dd: /*
1:d01f8dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:d01f8dd:  * or more contributor license agreements.  See the NOTICE file
1:d01f8dd:  * distributed with this work for additional information
1:d01f8dd:  * regarding copyright ownership.  The ASF licenses this file
1:d01f8dd:  * to you under the Apache License, Version 2.0 (the
1:d01f8dd:  * "License"); you may not use this file except in compliance
1:d01f8dd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:d01f8dd:  */
1:07cf56f: package org.apache.cassandra.locator;
1:0162447: 
1:7dfef3e: import java.io.IOException;
1:7dfef3e: import java.net.InetAddress;
1:0162447: 
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:7dfef3e: import org.apache.cassandra.config.DatabaseDescriptor;
1:7dfef3e: import org.apache.cassandra.gms.ApplicationState;
1:7dfef3e: import org.apache.cassandra.gms.Gossiper;
1:7dfef3e: import org.apache.cassandra.service.StorageService;
1:07cdfd0: 
1:7dfef3e: /**
1:7dfef3e:  * 1) Snitch will automatically set the public IP by querying the AWS API
1:07cdfd0:  *
1:7dfef3e:  * 2) Snitch will set the private IP as a Gossip application state.
1:07cdfd0:  *
1:ded233e:  * 3) Uses a helper class that implements IESCS and will reset the public IP connection if it is within the
1:7dfef3e:  * same region to communicate via private IP.
4:07cdfd0:  *
1:7dfef3e:  * Operational: All the nodes in this cluster needs to be able to (modify the
1:7dfef3e:  * Security group settings in AWS) communicate via Public IP's.
1:7dfef3e:  */
1:ded233e: public class Ec2MultiRegionSnitch extends Ec2Snitch
1:7dc2eb9: {
1:7dfef3e:     private static final String PUBLIC_IP_QUERY_URL = "http://169.254.169.254/latest/meta-data/public-ipv4";
1:7dfef3e:     private static final String PRIVATE_IP_QUERY_URL = "http://169.254.169.254/latest/meta-data/local-ipv4";
1:7dc2eb9:     private final String localPrivateAddress;
1:07cdfd0: 
1:7dfef3e:     public Ec2MultiRegionSnitch() throws IOException, ConfigurationException
1:7dc2eb9:     {
1:7dfef3e:         super();
1:9c564f1:         InetAddress localPublicAddress = InetAddress.getByName(awsApiCall(PUBLIC_IP_QUERY_URL));
1:db9bc69:         logger.info("EC2Snitch using publicIP as identifier: {}", localPublicAddress);
1:7dc2eb9:         localPrivateAddress = awsApiCall(PRIVATE_IP_QUERY_URL);
1:7dfef3e:         // use the Public IP to broadcast Address to other nodes.
1:7dc2eb9:         DatabaseDescriptor.setBroadcastAddress(localPublicAddress);
1:91f7387:         if (DatabaseDescriptor.getBroadcastRpcAddress() == null)
1:91f7387:         {
1:91f7387:             logger.info("broadcast_rpc_address unset, broadcasting public IP as rpc_address: {}", localPublicAddress);
1:91f7387:             DatabaseDescriptor.setBroadcastRpcAddress(localPublicAddress);
1:91f7387:         }
1:7dc2eb9:     }
1:7dc2eb9: 
1:9c564f1:     @Override
1:7dfef3e:     public void gossiperStarting()
1:998fe96:     {
1:7dfef3e:         super.gossiperStarting();
1:7dc2eb9:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP, StorageService.instance.valueFactory.internalIP(localPrivateAddress));
1:ded233e:         Gossiper.instance.register(new ReconnectableSnitchHelper(this, ec2region, true));
1:7dc2eb9:     }
1:998fe96: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:91f7387
/////////////////////////////////////////////////////////////////////////
1:         if (DatabaseDescriptor.getBroadcastRpcAddress() == null)
1:         {
1:             logger.info("broadcast_rpc_address unset, broadcasting public IP as rpc_address: {}", localPublicAddress);
1:             DatabaseDescriptor.setBroadcastRpcAddress(localPublicAddress);
1:         }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9c564f1
/////////////////////////////////////////////////////////////////////////
1:         InetAddress localPublicAddress = InetAddress.getByName(awsApiCall(PUBLIC_IP_QUERY_URL));
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:db9bc69
/////////////////////////////////////////////////////////////////////////
1:         logger.info("EC2Snitch using publicIP as identifier: {}", localPublicAddress);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:893c11f
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setBroadcastRpcAddress(localPublicAddress);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ded233e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * 3) Uses a helper class that implements IESCS and will reset the public IP connection if it is within the
1: public class Ec2MultiRegionSnitch extends Ec2Snitch
/////////////////////////////////////////////////////////////////////////
1:         Gossiper.instance.register(new ReconnectableSnitchHelper(this, ec2region, true));
commit:e75e33f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * 3) Uses a helper class that implements IESCS and will reset the public IP connection if it is within the
0: public class Ec2MultiRegionSnitch extends Ec2Snitch
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.register(new ReconnectableSnitchHelper(this, ec2region, true));
commit:7dc2eb9
/////////////////////////////////////////////////////////////////////////
0:     private final InetAddress localPublicAddress;
1:     private final String localPrivateAddress;
0:         localPublicAddress = InetAddress.getByName(awsApiCall(PUBLIC_IP_QUERY_URL));
0:         logger.info("EC2Snitch using publicIP as identifier: " + localPublicAddress);
1:         localPrivateAddress = awsApiCall(PRIVATE_IP_QUERY_URL);
1:         DatabaseDescriptor.setBroadcastAddress(localPublicAddress);
0:             reconnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
0:             reconnect(endpoint, value);
0:             reconnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
/////////////////////////////////////////////////////////////////////////
0:     private void reconnect(InetAddress publicAddress, VersionedValue localAddressValue)
0:             reconnect(publicAddress, InetAddress.getByName(localAddressValue.value));
/////////////////////////////////////////////////////////////////////////
0:     private void reconnect(InetAddress publicAddress, InetAddress localAddress)
1:     {
0:         if (getDatacenter(publicAddress).equals(getDatacenter(localPublicAddress))
0:             && MessagingService.instance().getVersion(publicAddress) == MessagingService.current_version
0:             && !MessagingService.instance().getConnectionPool(publicAddress).endPoint().equals(localAddress))
1:         {
0:             MessagingService.instance().getConnectionPool(publicAddress).reset(localAddress);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", localAddress, publicAddress));
1:         }
1:     }
1: 
1:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP, StorageService.instance.valueFactory.internalIP(localPrivateAddress));
commit:5b4a7f2
commit:9a6d0c7
commit:0162447
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
author:Jason Brown
-------------------------------------------------------------------------------
commit:998fe96
/////////////////////////////////////////////////////////////////////////
0:         try
0:             InetAddress localEc2IP = InetAddress.getByName(versionedValue.value);
0:             if (getDatacenter(endpoint).equals(getDatacenter(public_ip))
0:                 && MessagingService.instance().getVersion(endpoint) == MessagingService.current_version
0:                 && !MessagingService.instance().getConnectionPool(endpoint).endPoint().equals(localEc2IP))
0:                 MessagingService.instance().getConnectionPool(endpoint).reset(localEc2IP);
0:                 logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", localEc2IP, endpoint));
1:         }
0:         catch (UnknownHostException e)
1:         {
0:             logger.error("Error in getting the IP address resolved: ", e);
commit:72b1a1b
/////////////////////////////////////////////////////////////////////////
0:         if (getDatacenter(endpoint).equals(getDatacenter(public_ip))
0:             && MessagingService.instance().getVersion(endpoint) == MessagingService.current_version)
0:             try
0:             {
0:                 InetAddress remoteIP = InetAddress.getByName(versionedValue.value);
0:                 MessagingService.instance().getConnectionPool(endpoint).reset(remoteIP);
0:                 logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", remoteIP, endpoint));
0:             }
0:             catch (UnknownHostException e)
0:             {
0:                 logger.error("Error in getting the IP address resolved: ", e);
0:             }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.locator;
commit:d01f8dd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:8db7000
/////////////////////////////////////////////////////////////////////////
0:     public void onRestart(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing
0:     }
0: 
0:     @Override
author:Brandon Williams
-------------------------------------------------------------------------------
commit:7dfef3e
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.locator;
0: 
1: import java.io.IOException;
1: import java.net.InetAddress;
0: import java.net.UnknownHostException;
0: 
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.gms.ApplicationState;
0: import org.apache.cassandra.gms.EndpointState;
1: import org.apache.cassandra.gms.Gossiper;
0: import org.apache.cassandra.gms.IEndpointStateChangeSubscriber;
0: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.service.StorageService;
0: 
1: /**
1:  * 1) Snitch will automatically set the public IP by querying the AWS API
0:  * 
1:  * 2) Snitch will set the private IP as a Gossip application state.
0:  * 
0:  * 3) Snitch implements IESCS and will reset the connection if it is within the
1:  * same region to communicate via private IP.
0:  * 
0:  * Implements Ec2Snitch to inherit its functionality and extend it for
0:  * Multi-Region.
0:  * 
1:  * Operational: All the nodes in this cluster needs to be able to (modify the
1:  * Security group settings in AWS) communicate via Public IP's.
1:  */
0: public class Ec2MultiRegionSnitch extends Ec2Snitch implements IEndpointStateChangeSubscriber
0: {
1:     private static final String PUBLIC_IP_QUERY_URL = "http://169.254.169.254/latest/meta-data/public-ipv4";
1:     private static final String PRIVATE_IP_QUERY_URL = "http://169.254.169.254/latest/meta-data/local-ipv4";
0:     private final InetAddress public_ip;
0:     private final String private_ip;
0: 
1:     public Ec2MultiRegionSnitch() throws IOException, ConfigurationException
0:     {
1:         super();
0:         public_ip = InetAddress.getByName(awsApiCall(PUBLIC_IP_QUERY_URL));
0:         logger.info("EC2Snitch using publicIP as identifier: " + public_ip);
0:         private_ip = awsApiCall(PRIVATE_IP_QUERY_URL);
1:         // use the Public IP to broadcast Address to other nodes.
0:         DatabaseDescriptor.setBroadcastAddress(public_ip);
0:     }
0:     
0:     @Override
0:     public void onJoin(InetAddress endpoint, EndpointState epState)
0:     {
0:         if (epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     @Override
0:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
0:     {
0:         if (state == ApplicationState.INTERNAL_IP)
0:             reConnect(endpoint, value);
0:     }
0: 
0:     @Override
0:     public void onAlive(InetAddress endpoint, EndpointState state)
0:     {
0:         if (state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     @Override
0:     public void onDead(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing
0:     }
0: 
0:     @Override
0:     public void onRemove(InetAddress endpoint)
0:     {
0:         // do nothing.
0:     }
0: 
0:     private void reConnect(InetAddress endpoint, VersionedValue versionedValue)
0:     {
0:         if (!getDatacenter(endpoint).equals(getDatacenter(public_ip)))
0:             return; // do nothing return back...
0:         
0:         try
0:         {
0:             InetAddress remoteIP = InetAddress.getByName(versionedValue.value);
0:             MessagingService.instance().getConnectionPool(endpoint).reset(remoteIP);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the %s", remoteIP, endpoint));
0:         } catch (UnknownHostException e)
0:         {
0:             logger.error("Error in getting the IP address resolved: ", e);
0:         }
0:     }
0:     
1:     public void gossiperStarting()
0:     {
1:         super.gossiperStarting();
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP, StorageService.instance.valueFactory.internalIP(private_ip));
0:         Gossiper.instance.register(this);
0:     }
0: }
============================================================================