1:810c2d5: /*
1:810c2d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:810c2d5:  * or more contributor license agreements.  See the NOTICE file
1:810c2d5:  * distributed with this work for additional information
1:810c2d5:  * regarding copyright ownership.  The ASF licenses this file
1:810c2d5:  * to you under the Apache License, Version 2.0 (the
1:810c2d5:  * "License"); you may not use this file except in compliance
1:810c2d5:  * with the License.  You may obtain a copy of the License at
1:810c2d5:  *
1:810c2d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:810c2d5:  *
1:810c2d5:  * Unless required by applicable law or agreed to in writing, software
1:810c2d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810c2d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810c2d5:  * See the License for the specific language governing permissions and
1:810c2d5:  * limitations under the License.
1:810c2d5:  */
1:a991b64: 
1:810c2d5: package org.apache.cassandra.repair;
1:810c2d5: 
1:810c2d5: import java.io.IOException;
1:810c2d5: import java.net.InetAddress;
1:0dd50a6: import java.util.Arrays;
1:810c2d5: import java.util.Set;
1:810c2d5: import java.util.UUID;
1:810c2d5: import java.util.concurrent.ExecutionException;
1:810c2d5: 
1:810c2d5: import com.google.common.collect.Sets;
1:9797511: import org.junit.BeforeClass;
1:810c2d5: import org.junit.Test;
1:810c2d5: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:810c2d5: import org.apache.cassandra.dht.IPartitioner;
1:810c2d5: import org.apache.cassandra.dht.Murmur3Partitioner;
1:810c2d5: import org.apache.cassandra.dht.Range;
1:810c2d5: import org.apache.cassandra.dht.Token;
1:810c2d5: import org.apache.cassandra.gms.Gossiper;
1:810c2d5: import org.apache.cassandra.service.ActiveRepairService;
1:810c2d5: import org.apache.cassandra.utils.ByteBufferUtil;
1:810c2d5: import org.apache.cassandra.utils.UUIDGen;
1:810c2d5: 
1:810c2d5: import static org.junit.Assert.assertEquals;
1:810c2d5: import static org.junit.Assert.fail;
1:810c2d5: 
1:810c2d5: public class RepairSessionTest
1:810c2d5: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:810c2d5:     @Test
1:810c2d5:     public void testConviction() throws Exception
1:810c2d5:     {
1:810c2d5:         InetAddress remote = InetAddress.getByName("127.0.0.2");
1:810c2d5:         Gossiper.instance.initializeNodeUnsafe(remote, UUID.randomUUID(), 1);
1:810c2d5: 
1:810c2d5:         // Set up RepairSession
1:810c2d5:         UUID parentSessionId = UUIDGen.getTimeUUID();
1:810c2d5:         UUID sessionId = UUID.randomUUID();
1:07893d7:         IPartitioner p = Murmur3Partitioner.instance;
1:07893d7:         Range<Token> repairRange = new Range<>(p.getToken(ByteBufferUtil.bytes(0)), p.getToken(ByteBufferUtil.bytes(100)));
1:810c2d5:         Set<InetAddress> endpoints = Sets.newHashSet(remote);
1:b29736c:         RepairSession session = new RepairSession(parentSessionId, sessionId, Arrays.asList(repairRange), "Keyspace1", RepairParallelism.SEQUENTIAL, endpoints, ActiveRepairService.UNREPAIRED_SSTABLE, false, "Standard1");
1:810c2d5: 
1:810c2d5:         // perform convict
1:810c2d5:         session.convict(remote, Double.MAX_VALUE);
1:810c2d5: 
1:810c2d5:         // RepairSession should throw ExecutorException with the cause of IOException when getting its value
1:810c2d5:         try
1:810c2d5:         {
1:810c2d5:             session.get();
1:810c2d5:             fail();
1:810c2d5:         }
1:810c2d5:         catch (ExecutionException ex)
1:810c2d5:         {
1:810c2d5:             assertEquals(IOException.class, ex.getCause().getClass());
1:810c2d5:         }
1:810c2d5:     }
1:810c2d5: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:b29736c
/////////////////////////////////////////////////////////////////////////
1:         RepairSession session = new RepairSession(parentSessionId, sessionId, Arrays.asList(repairRange), "Keyspace1", RepairParallelism.SEQUENTIAL, endpoints, ActiveRepairService.UNREPAIRED_SSTABLE, false, "Standard1");
author:Marcus Olsson
-------------------------------------------------------------------------------
commit:0dd50a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:         RepairSession session = new RepairSession(parentSessionId, sessionId, Arrays.asList(repairRange), "Keyspace1", RepairParallelism.SEQUENTIAL, endpoints, ActiveRepairService.UNREPAIRED_SSTABLE, "Standard1");
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:c023d49
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.Set;
1: import java.util.UUID;
1: import java.util.concurrent.ExecutionException;
1: 
1: import com.google.common.collect.Sets;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.service.ActiveRepairService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: public class RepairSessionTest
1: {
1:     @Test
1:     public void testConviction() throws Exception
1:     {
1:         InetAddress remote = InetAddress.getByName("127.0.0.2");
1:         Gossiper.instance.initializeNodeUnsafe(remote, UUID.randomUUID(), 1);
1: 
1:         // Set up RepairSession
1:         UUID parentSessionId = UUIDGen.getTimeUUID();
1:         UUID sessionId = UUID.randomUUID();
0:         IPartitioner p = new Murmur3Partitioner();
0:         Range<Token> repairRange = new Range<>(p.getToken(ByteBufferUtil.bytes(0)), p.getToken(ByteBufferUtil.bytes(100)), p);
1:         Set<InetAddress> endpoints = Sets.newHashSet(remote);
0:         RepairSession session = new RepairSession(parentSessionId, sessionId, repairRange, "Keyspace1", true, endpoints, ActiveRepairService.UNREPAIRED_SSTABLE, "Standard1");
1: 
1:         // perform convict
1:         session.convict(remote, Double.MAX_VALUE);
1: 
1:         // RepairSession should throw ExecutorException with the cause of IOException when getting its value
1:         try
1:         {
1:             session.get();
1:             fail();
1:         }
1:         catch (ExecutionException ex)
1:         {
1:             assertEquals(IOException.class, ex.getCause().getClass());
1:         }
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:         IPartitioner p = Murmur3Partitioner.instance;
1:         Range<Token> repairRange = new Range<>(p.getToken(ByteBufferUtil.bytes(0)), p.getToken(ByteBufferUtil.bytes(100)));
============================================================================