1:5c4d5c7: /*
1:5c4d5c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:5c4d5c7:  * or more contributor license agreements.  See the NOTICE file
1:5c4d5c7:  * distributed with this work for additional information
1:5c4d5c7:  * regarding copyright ownership.  The ASF licenses this file
1:5c4d5c7:  * to you under the Apache License, Version 2.0 (the
1:5c4d5c7:  * "License"); you may not use this file except in compliance
1:5c4d5c7:  * with the License.  You may obtain a copy of the License at
1:5c4d5c7:  *
1:5c4d5c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5c4d5c7:  *
1:5c4d5c7:  * Unless required by applicable law or agreed to in writing, software
1:5c4d5c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5c4d5c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5c4d5c7:  * See the License for the specific language governing permissions and
1:5c4d5c7:  * limitations under the License.
1:5c4d5c7:  */
1:5c4d5c7: package org.apache.cassandra.index.sasi.disk;
3:5c4d5c7: 
1:5c4d5c7: import java.nio.ByteBuffer;
1:5c4d5c7: import java.util.*;
1:5c4d5c7: 
1:7d857b4: import com.carrotsearch.hppc.cursors.LongObjectCursor;
1:7d857b4: import org.apache.cassandra.dht.*;
1:7d857b4: import org.apache.cassandra.utils.*;
1:5c4d5c7: 
1:5c4d5c7: public class DynamicTokenTreeBuilder extends AbstractTokenTreeBuilder
1:5c4d5c7: {
1:5c4d5c7: 
1:7d857b4:     private final SortedMap<Long, KeyOffsets> tokens = new TreeMap<>();
1:5c4d5c7: 
1:5c4d5c7:     public DynamicTokenTreeBuilder()
1:5c4d5c7:     {}
1:5c4d5c7: 
1:5c4d5c7:     public DynamicTokenTreeBuilder(TokenTreeBuilder data)
1:5c4d5c7:     {
1:5c4d5c7:         add(data);
1:5c4d5c7:     }
1:5c4d5c7: 
1:7d857b4:     public DynamicTokenTreeBuilder(SortedMap<Long, KeyOffsets> data)
1:5c4d5c7:     {
1:5c4d5c7:         add(data);
1:5c4d5c7:     }
1:5c4d5c7: 
1:7d857b4:     public void add(Long token, long partitionOffset, long rowOffset)
1:5c4d5c7:     {
1:7d857b4:         KeyOffsets found = tokens.get(token);
2:5c4d5c7:         if (found == null)
1:7d857b4:             tokens.put(token, (found = new KeyOffsets(2)));
1:5c4d5c7: 
1:7d857b4:         found.put(partitionOffset, rowOffset);
1:5c4d5c7:     }
1:5c4d5c7: 
1:7d857b4:     public void add(Iterator<Pair<Long, KeyOffsets>> data)
1:5c4d5c7:     {
1:5c4d5c7:         while (data.hasNext())
1:5c4d5c7:         {
1:7d857b4:             Pair<Long, KeyOffsets> entry = data.next();
1:7d857b4:             for (LongObjectCursor<long[]> cursor : entry.right)
1:7d857b4:                 for (long l : cursor.value)
1:7d857b4:                     add(entry.left, cursor.key, l);
1:5c4d5c7:         }
1:5c4d5c7:     }
1:5c4d5c7: 
1:7d857b4:     public void add(SortedMap<Long, KeyOffsets> data)
1:5c4d5c7:     {
1:7d857b4:         for (Map.Entry<Long, KeyOffsets> newEntry : data.entrySet())
1:5c4d5c7:         {
1:7d857b4:             for (LongObjectCursor<long[]> cursor : newEntry.getValue())
1:7d857b4:                 for (long l : cursor.value)
1:7d857b4:                     add(newEntry.getKey(), cursor.key, l);
1:5c4d5c7:         }
1:5c4d5c7:     }
1:5c4d5c7: 
1:7d857b4:     public Iterator<Pair<Long, KeyOffsets>> iterator()
1:5c4d5c7:     {
1:7d857b4:         final Iterator<Map.Entry<Long, KeyOffsets>> iterator = tokens.entrySet().iterator();
1:7d857b4:         return new AbstractIterator<Pair<Long, KeyOffsets>>()
1:5c4d5c7:         {
1:7d857b4:             protected Pair<Long, KeyOffsets> computeNext()
1:5c4d5c7:             {
1:5c4d5c7:                 if (!iterator.hasNext())
1:5c4d5c7:                     return endOfData();
1:5c4d5c7: 
1:7d857b4:                 Map.Entry<Long, KeyOffsets> entry = iterator.next();
1:5c4d5c7:                 return Pair.create(entry.getKey(), entry.getValue());
1:5c4d5c7:             }
1:5c4d5c7:         };
1:5c4d5c7:     }
1:5c4d5c7: 
1:5c4d5c7:     public boolean isEmpty()
1:5c4d5c7:     {
1:5c4d5c7:         return tokens.size() == 0;
1:5c4d5c7:     }
1:5c4d5c7: 
1:5c4d5c7:     protected void constructTree()
1:5c4d5c7:     {
1:5c4d5c7:         tokenCount = tokens.size();
1:5c4d5c7:         treeMinToken = tokens.firstKey();
1:5c4d5c7:         treeMaxToken = tokens.lastKey();
1:5c4d5c7:         numBlocks = 1;
1:5c4d5c7: 
1:5c4d5c7:         // special case the tree that only has a single block in it (so we don't create a useless root)
1:5c4d5c7:         if (tokenCount <= TOKENS_PER_BLOCK)
1:5c4d5c7:         {
1:5c4d5c7:             leftmostLeaf = new DynamicLeaf(tokens);
1:5c4d5c7:             rightmostLeaf = leftmostLeaf;
1:5c4d5c7:             root = leftmostLeaf;
1:5c4d5c7:         }
1:5c4d5c7:         else
1:5c4d5c7:         {
1:5c4d5c7:             root = new InteriorNode();
1:5c4d5c7:             rightmostParent = (InteriorNode) root;
1:5c4d5c7: 
1:5c4d5c7:             int i = 0;
1:5c4d5c7:             Leaf lastLeaf = null;
1:5c4d5c7:             Long firstToken = tokens.firstKey();
1:5c4d5c7:             Long finalToken = tokens.lastKey();
1:5c4d5c7:             Long lastToken;
1:5c4d5c7:             for (Long token : tokens.keySet())
1:5c4d5c7:             {
1:5c4d5c7:                 if (i == 0 || (i % TOKENS_PER_BLOCK != 0 && i != (tokenCount - 1)))
1:5c4d5c7:                 {
1:5c4d5c7:                     i++;
1:5c4d5c7:                     continue;
1:5c4d5c7:                 }
1:5c4d5c7: 
1:5c4d5c7:                 lastToken = token;
1:5c4d5c7:                 Leaf leaf = (i != (tokenCount - 1) || token.equals(finalToken)) ?
1:5c4d5c7:                         new DynamicLeaf(tokens.subMap(firstToken, lastToken)) : new DynamicLeaf(tokens.tailMap(firstToken));
1:5c4d5c7: 
1:5c4d5c7:                 if (i == TOKENS_PER_BLOCK)
1:5c4d5c7:                     leftmostLeaf = leaf;
1:5c4d5c7:                 else
1:5c4d5c7:                     lastLeaf.next = leaf;
1:5c4d5c7: 
1:5c4d5c7:                 rightmostParent.add(leaf);
1:5c4d5c7:                 lastLeaf = leaf;
1:5c4d5c7:                 rightmostLeaf = leaf;
1:5c4d5c7:                 firstToken = lastToken;
1:5c4d5c7:                 i++;
1:5c4d5c7:                 numBlocks++;
1:5c4d5c7: 
1:5c4d5c7:                 if (token.equals(finalToken))
1:5c4d5c7:                 {
1:5c4d5c7:                     Leaf finalLeaf = new DynamicLeaf(tokens.tailMap(token));
1:5c4d5c7:                     lastLeaf.next = finalLeaf;
1:5c4d5c7:                     rightmostParent.add(finalLeaf);
1:5c4d5c7:                     rightmostLeaf = finalLeaf;
1:5c4d5c7:                     numBlocks++;
1:5c4d5c7:                 }
1:5c4d5c7:             }
1:5c4d5c7: 
1:5c4d5c7:         }
1:5c4d5c7:     }
1:5c4d5c7: 
1:5c4d5c7:     private class DynamicLeaf extends Leaf
1:5c4d5c7:     {
1:7d857b4:         private final SortedMap<Long, KeyOffsets> tokens;
1:5c4d5c7: 
1:7d857b4:         DynamicLeaf(SortedMap<Long, KeyOffsets> data)
1:5c4d5c7:         {
1:5c4d5c7:             super(data.firstKey(), data.lastKey());
1:5c4d5c7:             tokens = data;
1:5c4d5c7:         }
1:5c4d5c7: 
1:5c4d5c7:         public int tokenCount()
1:5c4d5c7:         {
1:5c4d5c7:             return tokens.size();
1:5c4d5c7:         }
1:5c4d5c7: 
1:5c4d5c7:         public boolean isSerializable()
1:5c4d5c7:         {
1:5c4d5c7:             return true;
1:5c4d5c7:         }
1:5c4d5c7: 
1:5c4d5c7:         protected void serializeData(ByteBuffer buf)
1:5c4d5c7:         {
1:7d857b4:             for (Map.Entry<Long, KeyOffsets> entry : tokens.entrySet())
1:5c4d5c7:                 createEntry(entry.getKey(), entry.getValue()).serialize(buf);
1:5c4d5c7:         }
1:5c4d5c7: 
1:5c4d5c7:     }
1:5c4d5c7: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import com.carrotsearch.hppc.cursors.LongObjectCursor;
1: import org.apache.cassandra.dht.*;
1: import org.apache.cassandra.utils.*;
1:     private final SortedMap<Long, KeyOffsets> tokens = new TreeMap<>();
/////////////////////////////////////////////////////////////////////////
1:     public DynamicTokenTreeBuilder(SortedMap<Long, KeyOffsets> data)
1:     public void add(Long token, long partitionOffset, long rowOffset)
1:         KeyOffsets found = tokens.get(token);
1:             tokens.put(token, (found = new KeyOffsets(2)));
1:         found.put(partitionOffset, rowOffset);
1:     public void add(Iterator<Pair<Long, KeyOffsets>> data)
1:             Pair<Long, KeyOffsets> entry = data.next();
1:             for (LongObjectCursor<long[]> cursor : entry.right)
1:                 for (long l : cursor.value)
1:                     add(entry.left, cursor.key, l);
1:     public void add(SortedMap<Long, KeyOffsets> data)
1:         for (Map.Entry<Long, KeyOffsets> newEntry : data.entrySet())
1:             for (LongObjectCursor<long[]> cursor : newEntry.getValue())
1:                 for (long l : cursor.value)
1:                     add(newEntry.getKey(), cursor.key, l);
1:     public Iterator<Pair<Long, KeyOffsets>> iterator()
1:         final Iterator<Map.Entry<Long, KeyOffsets>> iterator = tokens.entrySet().iterator();
1:         return new AbstractIterator<Pair<Long, KeyOffsets>>()
1:             protected Pair<Long, KeyOffsets> computeNext()
1:                 Map.Entry<Long, KeyOffsets> entry = iterator.next();
/////////////////////////////////////////////////////////////////////////
1:         private final SortedMap<Long, KeyOffsets> tokens;
1:         DynamicLeaf(SortedMap<Long, KeyOffsets> data)
/////////////////////////////////////////////////////////////////////////
1:             for (Map.Entry<Long, KeyOffsets> entry : tokens.entrySet())
author:Jordan West
-------------------------------------------------------------------------------
commit:5c4d5c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.disk;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
0: import org.apache.cassandra.utils.AbstractIterator;
0: import org.apache.cassandra.utils.Pair;
1: 
0: import com.carrotsearch.hppc.LongOpenHashSet;
0: import com.carrotsearch.hppc.LongSet;
0: import com.carrotsearch.hppc.cursors.LongCursor;
1: 
1: public class DynamicTokenTreeBuilder extends AbstractTokenTreeBuilder
1: {
0:     private final SortedMap<Long, LongSet> tokens = new TreeMap<>();
1: 
1: 
1:     public DynamicTokenTreeBuilder()
1:     {}
1: 
1:     public DynamicTokenTreeBuilder(TokenTreeBuilder data)
1:     {
1:         add(data);
1:     }
1: 
0:     public DynamicTokenTreeBuilder(SortedMap<Long, LongSet> data)
1:     {
1:         add(data);
1:     }
1: 
0:     public void add(Long token, long keyPosition)
1:     {
0:         LongSet found = tokens.get(token);
1:         if (found == null)
0:             tokens.put(token, (found = new LongOpenHashSet(2)));
1: 
0:         found.add(keyPosition);
1:     }
1: 
0:     public void add(Iterator<Pair<Long, LongSet>> data)
1:     {
1:         while (data.hasNext())
1:         {
0:             Pair<Long, LongSet> entry = data.next();
0:             for (LongCursor l : entry.right)
0:                 add(entry.left, l.value);
1:         }
1:     }
1: 
0:     public void add(SortedMap<Long, LongSet> data)
1:     {
0:         for (Map.Entry<Long, LongSet> newEntry : data.entrySet())
1:         {
0:             LongSet found = tokens.get(newEntry.getKey());
1:             if (found == null)
0:                 tokens.put(newEntry.getKey(), (found = new LongOpenHashSet(4)));
1: 
0:             for (LongCursor offset : newEntry.getValue())
0:                 found.add(offset.value);
1:         }
1:     }
1: 
0:     public Iterator<Pair<Long, LongSet>> iterator()
1:     {
0:         final Iterator<Map.Entry<Long, LongSet>> iterator = tokens.entrySet().iterator();
0:         return new AbstractIterator<Pair<Long, LongSet>>()
1:         {
0:             protected Pair<Long, LongSet> computeNext()
1:             {
1:                 if (!iterator.hasNext())
1:                     return endOfData();
1: 
0:                 Map.Entry<Long, LongSet> entry = iterator.next();
1:                 return Pair.create(entry.getKey(), entry.getValue());
1:             }
1:         };
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return tokens.size() == 0;
1:     }
1: 
1:     protected void constructTree()
1:     {
1:         tokenCount = tokens.size();
1:         treeMinToken = tokens.firstKey();
1:         treeMaxToken = tokens.lastKey();
1:         numBlocks = 1;
1: 
1:         // special case the tree that only has a single block in it (so we don't create a useless root)
1:         if (tokenCount <= TOKENS_PER_BLOCK)
1:         {
1:             leftmostLeaf = new DynamicLeaf(tokens);
1:             rightmostLeaf = leftmostLeaf;
1:             root = leftmostLeaf;
1:         }
1:         else
1:         {
1:             root = new InteriorNode();
1:             rightmostParent = (InteriorNode) root;
1: 
1:             int i = 0;
1:             Leaf lastLeaf = null;
1:             Long firstToken = tokens.firstKey();
1:             Long finalToken = tokens.lastKey();
1:             Long lastToken;
1:             for (Long token : tokens.keySet())
1:             {
1:                 if (i == 0 || (i % TOKENS_PER_BLOCK != 0 && i != (tokenCount - 1)))
1:                 {
1:                     i++;
1:                     continue;
1:                 }
1: 
1:                 lastToken = token;
1:                 Leaf leaf = (i != (tokenCount - 1) || token.equals(finalToken)) ?
1:                         new DynamicLeaf(tokens.subMap(firstToken, lastToken)) : new DynamicLeaf(tokens.tailMap(firstToken));
1: 
1:                 if (i == TOKENS_PER_BLOCK)
1:                     leftmostLeaf = leaf;
1:                 else
1:                     lastLeaf.next = leaf;
1: 
1:                 rightmostParent.add(leaf);
1:                 lastLeaf = leaf;
1:                 rightmostLeaf = leaf;
1:                 firstToken = lastToken;
1:                 i++;
1:                 numBlocks++;
1: 
1:                 if (token.equals(finalToken))
1:                 {
1:                     Leaf finalLeaf = new DynamicLeaf(tokens.tailMap(token));
1:                     lastLeaf.next = finalLeaf;
1:                     rightmostParent.add(finalLeaf);
1:                     rightmostLeaf = finalLeaf;
1:                     numBlocks++;
1:                 }
1:             }
1: 
1:         }
1:     }
1: 
1:     private class DynamicLeaf extends Leaf
1:     {
0:         private final SortedMap<Long, LongSet> tokens;
1: 
0:         DynamicLeaf(SortedMap<Long, LongSet> data)
1:         {
1:             super(data.firstKey(), data.lastKey());
1:             tokens = data;
1:         }
1: 
1:         public int tokenCount()
1:         {
1:             return tokens.size();
1:         }
1: 
1:         public boolean isSerializable()
1:         {
1:             return true;
1:         }
1: 
1:         protected void serializeData(ByteBuffer buf)
1:         {
0:             for (Map.Entry<Long, LongSet> entry : tokens.entrySet())
1:                 createEntry(entry.getKey(), entry.getValue()).serialize(buf);
1:         }
1: 
1:     }
1: }
============================================================================