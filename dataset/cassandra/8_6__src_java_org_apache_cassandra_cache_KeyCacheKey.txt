1:07cf56f: /*
1:295aedb:  * Licensed to the Apache Software Foundation (ASF) under one
1:295aedb:  * or more contributor license agreements.  See the NOTICE file
1:295aedb:  * distributed with this work for additional information
1:295aedb:  * regarding copyright ownership.  The ASF licenses this file
1:295aedb:  * to you under the Apache License, Version 2.0 (the
1:295aedb:  * "License"); you may not use this file except in compliance
1:295aedb:  * with the License.  You may obtain a copy of the License at
2:295aedb:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:295aedb:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:295aedb:  */
1:295aedb: package org.apache.cassandra.cache;
7:295aedb: 
1:295aedb: import java.nio.ByteBuffer;
1:63f6c84: import java.util.Arrays;
1:295aedb: 
1:295aedb: import org.apache.cassandra.io.sstable.Descriptor;
1:63f6c84: import org.apache.cassandra.utils.ByteBufferUtil;
1:da93a1c: import org.apache.cassandra.utils.ObjectSizes;
1:e889ee4: import org.apache.cassandra.utils.Pair;
1:63f6c84: 
1:e889ee4: public class KeyCacheKey extends CacheKey
1:da93a1c: {
1:cfe585c:     public final Descriptor desc;
1:e3f642b: 
1:4b54b8a:     private static final long EMPTY_SIZE = ObjectSizes.measure(new KeyCacheKey(null, null, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:4b54b8a: 
1:e3f642b:     // keeping an array instead of a ByteBuffer lowers the overhead of the key cache working set,
1:e3f642b:     // without extra copies on lookup since client-provided key ByteBuffers will be array-backed already
1:cfe585c:     public final byte[] key;
1:63f6c84: 
1:e889ee4:     public KeyCacheKey(Pair<String, String> ksAndCFName, Descriptor desc, ByteBuffer key)
6:295aedb:     {
1:e889ee4: 
1:e889ee4:         super(ksAndCFName);
1:63f6c84:         this.desc = desc;
1:63f6c84:         this.key = ByteBufferUtil.getArray(key);
1:63f6c84:         assert this.key != null;
1:63f6c84:     }
1:295aedb: 
1:295aedb:     public String toString()
1:63f6c84:     {
1:c710edf:         return String.format("KeyCacheKey(%s, %s)", desc, ByteBufferUtil.bytesToHex(ByteBuffer.wrap(key)));
1:63f6c84:     }
1:63f6c84: 
1:4b54b8a:     public long unsharedHeapSize()
1:63f6c84:     {
1:4b54b8a:         return EMPTY_SIZE + ObjectSizes.sizeOfArray(key);
1:63f6c84:     }
1:da93a1c: 
1:63f6c84:     @Override
1:63f6c84:     public boolean equals(Object o)
1:63f6c84:     {
1:63f6c84:         if (this == o) return true;
1:63f6c84:         if (o == null || getClass() != o.getClass()) return false;
1:63f6c84: 
1:63f6c84:         KeyCacheKey that = (KeyCacheKey) o;
1:63f6c84: 
1:e889ee4:         return ksAndCFName.equals(that.ksAndCFName) && desc.equals(that.desc) && Arrays.equals(key, that.key);
1:63f6c84:     }
1:63f6c84: 
1:63f6c84:     @Override
1:63f6c84:     public int hashCode()
1:63f6c84:     {
1:e889ee4:         int result = ksAndCFName.hashCode();
1:0a1b277:         result = 31 * result + desc.hashCode();
1:0a1b277:         result = 31 * result + Arrays.hashCode(key);
1:63f6c84:         return result;
1:da93a1c:     }
6:295aedb: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:e889ee4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Pair;
1: public class KeyCacheKey extends CacheKey
/////////////////////////////////////////////////////////////////////////
1:     public KeyCacheKey(Pair<String, String> ksAndCFName, Descriptor desc, ByteBuffer key)
1: 
1:         super(ksAndCFName);
/////////////////////////////////////////////////////////////////////////
1:         return ksAndCFName.equals(that.ksAndCFName) && desc.equals(that.desc) && Arrays.equals(key, that.key);
1:         int result = ksAndCFName.hashCode();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:e25d94e
/////////////////////////////////////////////////////////////////////////
0:     public UUID getCFId()
0:         return cfId;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new KeyCacheKey(null, null, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1: 
/////////////////////////////////////////////////////////////////////////
1:     public long unsharedHeapSize()
1:         return EMPTY_SIZE + ObjectSizes.sizeOfArray(key);
commit:fe10ba7
/////////////////////////////////////////////////////////////////////////
0:         return ObjectSizes.getFieldSize(// desc
0:                                         ObjectSizes.getReferenceSize() +
0:                                         // key
0:                                         ObjectSizes.getReferenceSize())
0:                + ObjectSizes.getArraySize(key);
commit:e3f642b
/////////////////////////////////////////////////////////////////////////
1: 
1:     // keeping an array instead of a ByteBuffer lowers the overhead of the key cache working set,
1:     // without extra copies on lookup since client-provided key ByteBuffers will be array-backed already
commit:ad8ebc6
commit:c710edf
/////////////////////////////////////////////////////////////////////////
1:         return String.format("KeyCacheKey(%s, %s)", desc, ByteBufferUtil.bytesToHex(ByteBuffer.wrap(key)));
commit:7af7eb3
/////////////////////////////////////////////////////////////////////////
0:         return Pair.create(desc.ksname, desc.cfname);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         return TypeSizes.NATIVE.sizeof(key.length) + key.length;
commit:d616dcd
commit:63f6c84
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.nio.charset.CharacterCodingException;
1: import java.util.Arrays;
0: import org.apache.cassandra.db.DBConstants;
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import com.google.common.base.Objects;
1: 
0: public class KeyCacheKey implements CacheKey
0:     private final Descriptor desc;
0:     private final byte[] key;
1: 
1:         this.desc = desc;
1:         this.key = ByteBufferUtil.getArray(key);
1:         assert this.key != null;
0:     public void write(DataOutputStream out) throws IOException
0:         ByteBufferUtil.writeWithLength(key, out);
0:         return new Pair<String, String>(desc.ksname, desc.cfname);
0:         return key.length + DBConstants.intSize;
0:         try
1:         {
0:             return String.format("KeyCacheKey(descriptor:%s, key:%s)", desc, ByteBufferUtil.string(ByteBuffer.wrap(key)));
1:         }
0:         catch (CharacterCodingException e)
1:         {
0:             throw new AssertionError(e);
1:         }
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         KeyCacheKey that = (KeyCacheKey) o;
1: 
0:         if (desc != null ? !desc.equals(that.desc) : that.desc != null) return false;
0:         return Arrays.equals(key, that.key);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         int result = desc != null ? desc.hashCode() : 0;
0:         result = 31 * result + (key != null ? Arrays.hashCode(key) : 0);
1:         return result;
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:0a1b277
/////////////////////////////////////////////////////////////////////////
0: import java.util.UUID;
0:     public final UUID cfId;
0:     public KeyCacheKey(UUID cfId, Descriptor desc, ByteBuffer key)
0:         this.cfId = cfId;
0:     public PathInfo getPathInfo()
0:         return new PathInfo(desc.ksname, desc.cfname, cfId);
/////////////////////////////////////////////////////////////////////////
0:         return ObjectSizes.getFieldSize(// cfId
0:                                         ObjectSizes.getReferenceSize() +
0:                                         // desc
/////////////////////////////////////////////////////////////////////////
0:         return cfId.equals(that.cfId) && desc.equals(that.desc) && Arrays.equals(key, that.key);
0:         int result = cfId.hashCode();
1:         result = 31 * result + desc.hashCode();
1:         result = 31 * result + Arrays.hashCode(key);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ObjectSizes;
/////////////////////////////////////////////////////////////////////////
0:     public long memorySize()
1:     {
0:         long fields = ObjectSizes.getReferenceSize() + ObjectSizes.getSizeWithRef(key);
0:         return ObjectSizes.getFieldSize(fields);
1:     }
1: 
commit:cfe585c
/////////////////////////////////////////////////////////////////////////
1:     public final Descriptor desc;
1:     public final byte[] key;
/////////////////////////////////////////////////////////////////////////
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         return DBTypeSizes.NATIVE.sizeof(key.length) + key.length;
commit:374f511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return key.length + DBConstants.INT_SIZE;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.cache;
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.utils.Pair;
1: 
0: public class KeyCacheKey extends Pair<Descriptor, ByteBuffer> implements CacheKey
1: {
0:     public KeyCacheKey(Descriptor desc, ByteBuffer key)
1:     {
0:         super(desc, key);
1:     }
1: 
0:     public ByteBuffer serializeForStorage()
1:     {
0:         ByteBuffer bytes = ByteBuffer.allocate(serializedSize());
1: 
0:         bytes.put(right.slice());
0:         bytes.rewind();
1: 
0:         return bytes;
1:     }
1: 
0:     public Pair<String, String> getPathInfo()
1:     {
0:         return new Pair<String, String>(left.ksname, left.cfname);
1:     }
1: 
0:     public int serializedSize()
1:     {
0:         return right.remaining();
1:     }
1: 
1:     public String toString()
1:     {
0:         return String.format("KeyCacheKey(descriptor:%s, key:%s)", left, right);
1:     }
1: }
============================================================================