1:d43b9ce: /*
1:d43b9ce:  *
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing,
1:d43b9ce:  * software distributed under the License is distributed on an
1:d43b9ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d43b9ce:  * KIND, either express or implied.  See the License for the
1:d43b9ce:  * specific language governing permissions and limitations
1:d43b9ce:  * under the License.
1:d43b9ce:  *
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.atomic.AtomicReference;
1:d43b9ce: 
1:d43b9ce: import com.google.common.annotations.VisibleForTesting;
1:d43b9ce: import com.google.common.util.concurrent.RateLimiter;
1:d43b9ce: 
1:d43b9ce: import org.jboss.byteman.rule.Rule;
1:d43b9ce: import org.jboss.byteman.rule.helper.Helper;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * Helper class to apply rate limiting during fault injection testing;
1:d43b9ce:  * for an example script, see test/resources/byteman/mutation_limiter.btm.
1:d43b9ce:  */
1:d43b9ce: @VisibleForTesting
1:d43b9ce: public class TestRateLimiter extends Helper
1:d43b9ce: {
1:d43b9ce:     private static final AtomicReference<RateLimiter> ref = new AtomicReference<>();
1:d43b9ce: 
1:d43b9ce:     protected TestRateLimiter(Rule rule)
1:d43b9ce:     {
1:d43b9ce:         super(rule);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Acquires a single unit at the given rate. If the rate changes between calls, a new rate limiter is created
1:d43b9ce:      * and the old one is discarded.
1:d43b9ce:      */
1:d43b9ce:     public void acquire(double rate)
1:d43b9ce:     {
1:d43b9ce:         RateLimiter limiter = ref.get();
1:d43b9ce:         if (limiter == null || limiter.getRate() != rate)
1:d43b9ce:         {
1:d43b9ce:             ref.compareAndSet(limiter, RateLimiter.create(rate));
1:d43b9ce:             limiter = ref.get();
1:d43b9ce:         }
1:d43b9ce:         limiter.acquire(1);
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.util.concurrent.RateLimiter;
1: 
1: import org.jboss.byteman.rule.Rule;
1: import org.jboss.byteman.rule.helper.Helper;
1: 
1: /**
1:  * Helper class to apply rate limiting during fault injection testing;
1:  * for an example script, see test/resources/byteman/mutation_limiter.btm.
1:  */
1: @VisibleForTesting
1: public class TestRateLimiter extends Helper
1: {
1:     private static final AtomicReference<RateLimiter> ref = new AtomicReference<>();
1: 
1:     protected TestRateLimiter(Rule rule)
1:     {
1:         super(rule);
1:     }
1: 
1:     /**
1:      * Acquires a single unit at the given rate. If the rate changes between calls, a new rate limiter is created
1:      * and the old one is discarded.
1:      */
1:     public void acquire(double rate)
1:     {
1:         RateLimiter limiter = ref.get();
1:         if (limiter == null || limiter.getRate() != rate)
1:         {
1:             ref.compareAndSet(limiter, RateLimiter.create(rate));
1:             limiter = ref.get();
1:         }
1:         limiter.acquire(1);
1:     }
1: }
============================================================================