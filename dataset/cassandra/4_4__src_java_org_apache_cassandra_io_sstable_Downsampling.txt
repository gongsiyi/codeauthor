1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:dbd1a72: package org.apache.cassandra.io.sstable;
4:dbd1a72: 
1:dbd1a72: import java.util.*;
1:dbd1a72: 
1:dbd1a72: public class Downsampling
4:dbd1a72: {
2:dbd1a72:     /**
1:dbd1a72:      * The base (down)sampling level determines the granularity at which we can down/upsample.
2:dbd1a72:      *
1:dbd1a72:      * A higher number allows us to approximate more closely the ideal sampling.  (It could also mean we do a lot of
1:dbd1a72:      * expensive almost-no-op resamplings from N to N-1, but the thresholds in IndexSummaryManager prevent that.)
1:dbd1a72:      *
1:dbd1a72:      * BSL must be a power of two in order to have good sampling patterns. This cannot be changed without rebuilding
1:dbd1a72:      * all index summaries at full sampling; for now we treat it as a constant.
2:dbd1a72:      */
1:dbd1a72:     public static final int BASE_SAMPLING_LEVEL = 128;
1:dbd1a72: 
1:dbd1a72:     private static final Map<Integer, List<Integer>> samplePatternCache = new HashMap<>();
1:dbd1a72: 
1:dbd1a72:     private static final Map<Integer, List<Integer>> originalIndexCache = new HashMap<>();
1:dbd1a72: 
1:dbd1a72:     /**
1:dbd1a72:      * Gets a list L of starting indices for downsampling rounds: the first round should start with the offset
1:dbd1a72:      * given by L[0], the second by the offset in L[1], etc.
1:dbd1a72:      *
1:dbd1a72:      * @param samplingLevel the base sampling level
1:dbd1a72:      *
1:dbd1a72:      * @return A list of `samplingLevel` unique indices between 0 and `samplingLevel`
1:dbd1a72:      */
1:dbd1a72:     public static List<Integer> getSamplingPattern(int samplingLevel)
1:dbd1a72:     {
1:dbd1a72:         List<Integer> pattern = samplePatternCache.get(samplingLevel);
1:dbd1a72:         if (pattern != null)
1:dbd1a72:             return pattern;
1:dbd1a72: 
1:dbd1a72:         if (samplingLevel <= 1)
1:dbd1a72:             return Arrays.asList(0);
1:dbd1a72: 
1:ee477cc:         int[] odds = new int[samplingLevel / 2];
1:ee477cc:         int[] evens = new int[samplingLevel / 2];
1:ee477cc:         for (int i = 1; i < samplingLevel; i += 2)
1:ee477cc:             odds[i/2] = i;
1:ee477cc:         for (int i = 0; i < samplingLevel; i += 2)
1:ee477cc:             evens[i/2] = i;
1:dbd1a72: 
1:ee477cc:         // especially for latter rounds, it's important that we spread out the start points, so we'll
1:ee477cc:         // make a recursive call to get an ordering for this list of start points
1:ee477cc:         List<Integer> ordering = getSamplingPattern(samplingLevel/2);
1:ee477cc:         List<Integer> startIndices = new ArrayList<>(samplingLevel);
1:dbd1a72: 
1:ee477cc:         for (Integer index : ordering)
1:ee477cc:             startIndices.add(odds[index]);
1:ee477cc:         for (Integer index : ordering)
1:ee477cc:             startIndices.add(evens[index]);
1:dbd1a72: 
1:dbd1a72:         samplePatternCache.put(samplingLevel, startIndices);
1:dbd1a72:         return startIndices;
4:dbd1a72:     }
1:dbd1a72: 
1:dbd1a72:     /**
1:dbd1a72:      * Returns a list that can be used to translate current index summary indexes to their original index before
1:dbd1a72:      * downsampling.  (This repeats every `samplingLevel`, so that's how many entries we return.)
1:dbd1a72:      *
1:7ff25f0:      * For example, if [0, 64] is returned, the current index summary entry at index 0 was originally
1:7ff25f0:      * at index 0, and the current index 1 was originally at index 64.
1:dbd1a72:      *
1:dbd1a72:      * @param samplingLevel the current sampling level for the index summary
1:dbd1a72:      *
1:dbd1a72:      * @return a list of original indexes for current summary entries
1:dbd1a72:      */
1:dbd1a72:     public static List<Integer> getOriginalIndexes(int samplingLevel)
1:dbd1a72:     {
1:dbd1a72:         List<Integer> originalIndexes = originalIndexCache.get(samplingLevel);
1:dbd1a72:         if (originalIndexes != null)
1:dbd1a72:             return originalIndexes;
1:dbd1a72: 
1:dbd1a72:         List<Integer> pattern = getSamplingPattern(BASE_SAMPLING_LEVEL).subList(0, BASE_SAMPLING_LEVEL - samplingLevel);
1:dbd1a72:         originalIndexes = new ArrayList<>(samplingLevel);
1:dbd1a72:         for (int j = 0; j < BASE_SAMPLING_LEVEL; j++)
1:dbd1a72:         {
1:dbd1a72:             if (!pattern.contains(j))
1:dbd1a72:                 originalIndexes.add(j);
1:dbd1a72:         }
1:dbd1a72: 
1:dbd1a72:         originalIndexCache.put(samplingLevel, originalIndexes);
1:dbd1a72:         return originalIndexes;
1:dbd1a72:     }
1:dbd1a72: 
1:dbd1a72:     /**
1:dbd1a72:      * Calculates the effective index interval after the entry at `index` in an IndexSummary.  In other words, this
1:dbd1a72:      * returns the number of partitions in the primary on-disk index before the next partition that has an entry in
1:dbd1a72:      * the index summary.  If samplingLevel == BASE_SAMPLING_LEVEL, this will be equal to the index interval.
1:dbd1a72:      * @param index an index into an IndexSummary
1:dbd1a72:      * @param samplingLevel the current sampling level for that IndexSummary
1:ee477cc:      * @param minIndexInterval the min index interval (effective index interval at full sampling)
1:dbd1a72:      * @return the number of partitions before the next index summary entry, inclusive on one end
1:dbd1a72:      */
1:ee477cc:     public static int getEffectiveIndexIntervalAfterIndex(int index, int samplingLevel, int minIndexInterval)
1:dbd1a72:     {
1:7ff25f0:         assert index >= 0;
1:dbd1a72:         index %= samplingLevel;
1:7ff25f0:         List<Integer> originalIndexes = getOriginalIndexes(samplingLevel);
1:7ff25f0:         int nextEntryOriginalIndex = (index == originalIndexes.size() - 1) ? BASE_SAMPLING_LEVEL : originalIndexes.get(index + 1);
1:7ff25f0:         return (nextEntryOriginalIndex - originalIndexes.get(index)) * minIndexInterval;
1:dbd1a72:     }
1:dbd1a72: 
1:dbd1a72:     public static int[] getStartPoints(int currentSamplingLevel, int newSamplingLevel)
1:dbd1a72:     {
1:dbd1a72:         List<Integer> allStartPoints = getSamplingPattern(BASE_SAMPLING_LEVEL);
1:dbd1a72: 
1:dbd1a72:         // calculate starting indexes for sampling rounds
1:dbd1a72:         int initialRound = BASE_SAMPLING_LEVEL - currentSamplingLevel;
1:dbd1a72:         int numRounds = Math.abs(currentSamplingLevel - newSamplingLevel);
1:dbd1a72:         int[] startPoints = new int[numRounds];
1:dbd1a72:         for (int i = 0; i < numRounds; ++i)
1:dbd1a72:         {
1:dbd1a72:             int start = allStartPoints.get(initialRound + i);
1:dbd1a72: 
1:dbd1a72:             // our "ideal" start points will be affected by the removal of items in earlier rounds, so go through all
1:dbd1a72:             // earlier rounds, and if we see an index that comes before our ideal start point, decrement the start point
1:dbd1a72:             int adjustment = 0;
1:dbd1a72:             for (int j = 0; j < initialRound; ++j)
1:dbd1a72:             {
1:dbd1a72:                 if (allStartPoints.get(j) < start)
1:dbd1a72:                     adjustment++;
1:dbd1a72:             }
1:dbd1a72:             startPoints[i] = start - adjustment;
1:dbd1a72:         }
1:dbd1a72:         return startPoints;
1:dbd1a72:     }
1:dbd1a72: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:7ff25f0
/////////////////////////////////////////////////////////////////////////
1:      * For example, if [0, 64] is returned, the current index summary entry at index 0 was originally
1:      * at index 0, and the current index 1 was originally at index 64.
/////////////////////////////////////////////////////////////////////////
1:         assert index >= 0;
1:         List<Integer> originalIndexes = getOriginalIndexes(samplingLevel);
1:         int nextEntryOriginalIndex = (index == originalIndexes.size() - 1) ? BASE_SAMPLING_LEVEL : originalIndexes.get(index + 1);
1:         return (nextEntryOriginalIndex - originalIndexes.get(index)) * minIndexInterval;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:ee477cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int[] odds = new int[samplingLevel / 2];
1:         int[] evens = new int[samplingLevel / 2];
1:         for (int i = 1; i < samplingLevel; i += 2)
1:             odds[i/2] = i;
1:         for (int i = 0; i < samplingLevel; i += 2)
1:             evens[i/2] = i;
1:         // especially for latter rounds, it's important that we spread out the start points, so we'll
1:         // make a recursive call to get an ordering for this list of start points
1:         List<Integer> ordering = getSamplingPattern(samplingLevel/2);
1:         List<Integer> startIndices = new ArrayList<>(samplingLevel);
1:         for (Integer index : ordering)
1:             startIndices.add(odds[index]);
1:         for (Integer index : ordering)
1:             startIndices.add(evens[index]);
/////////////////////////////////////////////////////////////////////////
1:      * @param minIndexInterval the min index interval (effective index interval at full sampling)
1:     public static int getEffectiveIndexIntervalAfterIndex(int index, int samplingLevel, int minIndexInterval)
0:             return originalIndexes.get(0) * minIndexInterval;
0:             return ((BASE_SAMPLING_LEVEL - originalIndexes.get(index)) + originalIndexes.get(0)) * minIndexInterval;
0:             return (originalIndexes.get(index + 1) - originalIndexes.get(index)) * minIndexInterval;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:dbd1a72
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.util.*;
1: 
1: public class Downsampling
1: {
1:     /**
1:      * The base (down)sampling level determines the granularity at which we can down/upsample.
1:      *
1:      * A higher number allows us to approximate more closely the ideal sampling.  (It could also mean we do a lot of
1:      * expensive almost-no-op resamplings from N to N-1, but the thresholds in IndexSummaryManager prevent that.)
1:      *
1:      * BSL must be a power of two in order to have good sampling patterns. This cannot be changed without rebuilding
1:      * all index summaries at full sampling; for now we treat it as a constant.
1:      */
1:     public static final int BASE_SAMPLING_LEVEL = 128;
1: 
1:     /**
0:      * The lowest level we will downsample to: the coarsest summary will have (MSL / BSL) entries left.
1:      *
0:      * This can be anywhere from 1 to the base sampling level.
1:      */
0:     public static final int MIN_SAMPLING_LEVEL = 8;
1: 
1:     private static final Map<Integer, List<Integer>> samplePatternCache = new HashMap<>();
1: 
1:     private static final Map<Integer, List<Integer>> originalIndexCache = new HashMap<>();
1: 
1:     /**
1:      * Gets a list L of starting indices for downsampling rounds: the first round should start with the offset
1:      * given by L[0], the second by the offset in L[1], etc.
1:      *
1:      * @param samplingLevel the base sampling level
1:      *
1:      * @return A list of `samplingLevel` unique indices between 0 and `samplingLevel`
1:      */
1:     public static List<Integer> getSamplingPattern(int samplingLevel)
1:     {
1:         List<Integer> pattern = samplePatternCache.get(samplingLevel);
1:         if (pattern != null)
1:             return pattern;
1: 
1:         if (samplingLevel <= 1)
1:             return Arrays.asList(0);
1: 
0:         ArrayList<Integer> startIndices = new ArrayList<>(samplingLevel);
0:         startIndices.add(0);
1: 
0:         int spread = samplingLevel;
0:         while (spread >= 2)
1:         {
0:             ArrayList<Integer> roundIndices = new ArrayList<>(samplingLevel / spread);
0:             for (int i = spread / 2; i < samplingLevel; i += spread)
0:                 roundIndices.add(i);
1: 
0:             // especially for latter rounds, it's important that we spread out the start points, so we'll
0:             // make a recursive call to get an ordering for this list of start points
0:             List<Integer> roundIndicesOrdering = getSamplingPattern(roundIndices.size());
0:             for (int i = 0; i < roundIndices.size(); ++i)
0:                 startIndices.add(roundIndices.get(roundIndicesOrdering.get(i)));
1: 
0:             spread /= 2;
1:         }
1: 
1:         samplePatternCache.put(samplingLevel, startIndices);
1:         return startIndices;
1:     }
1: 
1:     /**
1:      * Returns a list that can be used to translate current index summary indexes to their original index before
1:      * downsampling.  (This repeats every `samplingLevel`, so that's how many entries we return.)
1:      *
0:      * For example, if [7, 15] is returned, the current index summary entry at index 0 was originally
0:      * at index 7, and the current index 1 was originally at index 15.
1:      *
1:      * @param samplingLevel the current sampling level for the index summary
1:      *
1:      * @return a list of original indexes for current summary entries
1:      */
1:     public static List<Integer> getOriginalIndexes(int samplingLevel)
1:     {
1:         List<Integer> originalIndexes = originalIndexCache.get(samplingLevel);
1:         if (originalIndexes != null)
1:             return originalIndexes;
1: 
1:         List<Integer> pattern = getSamplingPattern(BASE_SAMPLING_LEVEL).subList(0, BASE_SAMPLING_LEVEL - samplingLevel);
1:         originalIndexes = new ArrayList<>(samplingLevel);
1:         for (int j = 0; j < BASE_SAMPLING_LEVEL; j++)
1:         {
1:             if (!pattern.contains(j))
1:                 originalIndexes.add(j);
1:         }
1: 
1:         originalIndexCache.put(samplingLevel, originalIndexes);
1:         return originalIndexes;
1:     }
1: 
1:     /**
1:      * Calculates the effective index interval after the entry at `index` in an IndexSummary.  In other words, this
1:      * returns the number of partitions in the primary on-disk index before the next partition that has an entry in
1:      * the index summary.  If samplingLevel == BASE_SAMPLING_LEVEL, this will be equal to the index interval.
1:      * @param index an index into an IndexSummary
1:      * @param samplingLevel the current sampling level for that IndexSummary
0:      * @param indexInterval the index interval
1:      * @return the number of partitions before the next index summary entry, inclusive on one end
1:      */
0:     public static int getEffectiveIndexIntervalAfterIndex(int index, int samplingLevel, int indexInterval)
1:     {
0:         assert index >= -1;
0:         List<Integer> originalIndexes = getOriginalIndexes(samplingLevel);
0:         if (index == -1)
0:             return originalIndexes.get(0) * indexInterval;
1: 
1:         index %= samplingLevel;
0:         if (index == originalIndexes.size() - 1)
1:         {
0:             // account for partitions after the "last" entry as well as partitions before the "first" entry
0:             return ((BASE_SAMPLING_LEVEL - originalIndexes.get(index)) + originalIndexes.get(0)) * indexInterval;
1:         }
0:         else
1:         {
0:             return (originalIndexes.get(index + 1) - originalIndexes.get(index)) * indexInterval;
1:         }
1:     }
1: 
1:     public static int[] getStartPoints(int currentSamplingLevel, int newSamplingLevel)
1:     {
1:         List<Integer> allStartPoints = getSamplingPattern(BASE_SAMPLING_LEVEL);
1: 
1:         // calculate starting indexes for sampling rounds
1:         int initialRound = BASE_SAMPLING_LEVEL - currentSamplingLevel;
1:         int numRounds = Math.abs(currentSamplingLevel - newSamplingLevel);
1:         int[] startPoints = new int[numRounds];
1:         for (int i = 0; i < numRounds; ++i)
1:         {
1:             int start = allStartPoints.get(initialRound + i);
1: 
1:             // our "ideal" start points will be affected by the removal of items in earlier rounds, so go through all
1:             // earlier rounds, and if we see an index that comes before our ideal start point, decrement the start point
1:             int adjustment = 0;
1:             for (int j = 0; j < initialRound; ++j)
1:             {
1:                 if (allStartPoints.get(j) < start)
1:                     adjustment++;
1:             }
1:             startPoints[i] = start - adjustment;
1:         }
1:         return startPoints;
1:     }
1: }
============================================================================