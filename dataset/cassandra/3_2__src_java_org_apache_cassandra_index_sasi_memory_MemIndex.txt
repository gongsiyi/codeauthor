1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.memory;
2:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public abstract class MemIndex
1:72790dc: {
1:72790dc:     protected final AbstractType<?> keyValidator;
1:72790dc:     protected final ColumnIndex columnIndex;
1:72790dc: 
1:72790dc:     protected MemIndex(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:72790dc:     {
1:72790dc:         this.keyValidator = keyValidator;
1:72790dc:         this.columnIndex = columnIndex;
1:72790dc:     }
1:72790dc: 
1:7d857b4:     public abstract long add(RowKey key, ByteBuffer value);
1:72790dc:     public abstract RangeIterator<Long, Token> search(Expression expression);
1:72790dc: 
1:72790dc:     public static MemIndex forColumn(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:72790dc:     {
1:72790dc:         return columnIndex.isLiteral()
1:72790dc:                 ? new TrieMemIndex(keyValidator, columnIndex)
1:72790dc:                 : new SkipListMemIndex(keyValidator, columnIndex);
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.*;
/////////////////////////////////////////////////////////////////////////
1:     public abstract long add(RowKey key, ByteBuffer value);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.memory;
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
0: import org.github.jamm.MemoryMeter;
1: 
1: public abstract class MemIndex
1: {
1:     protected final AbstractType<?> keyValidator;
1:     protected final ColumnIndex columnIndex;
1: 
1:     protected MemIndex(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:     {
1:         this.keyValidator = keyValidator;
1:         this.columnIndex = columnIndex;
1:     }
1: 
0:     public abstract long add(DecoratedKey key, ByteBuffer value);
1:     public abstract RangeIterator<Long, Token> search(Expression expression);
1: 
1:     public static MemIndex forColumn(AbstractType<?> keyValidator, ColumnIndex columnIndex)
1:     {
1:         return columnIndex.isLiteral()
1:                 ? new TrieMemIndex(keyValidator, columnIndex)
1:                 : new SkipListMemIndex(keyValidator, columnIndex);
1:     }
1: }
============================================================================