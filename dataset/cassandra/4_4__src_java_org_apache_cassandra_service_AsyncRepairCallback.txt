1:680e9bd: /*
1:680e9bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:680e9bd:  * or more contributor license agreements.  See the NOTICE file
1:680e9bd:  * distributed with this work for additional information
1:680e9bd:  * regarding copyright ownership.  The ASF licenses this file
1:680e9bd:  * to you under the Apache License, Version 2.0 (the
1:680e9bd:  * "License"); you may not use this file except in compliance
1:680e9bd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:680e9bd:  */
1:07cf56f: package org.apache.cassandra.service;
1:dc9992a: 
1:5e6539a: import java.util.concurrent.atomic.AtomicInteger;
1:dc9992a: 
1:dc9992a: import org.apache.cassandra.concurrent.Stage;
1:dc9992a: import org.apache.cassandra.concurrent.StageManager;
1:b60bc58: import org.apache.cassandra.db.ReadResponse;
1:dc9992a: import org.apache.cassandra.net.IAsyncCallback;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:dc9992a: import org.apache.cassandra.utils.WrappedRunnable;
1:dc9992a: 
1:b60bc58: public class AsyncRepairCallback implements IAsyncCallback<ReadResponse>
1:dc9992a: {
1:a991b64:     private final DataResolver repairResolver;
1:5e6539a:     private final int blockfor;
1:5e6539a:     protected final AtomicInteger received = new AtomicInteger(0);
1:dc9992a: 
1:a991b64:     public AsyncRepairCallback(DataResolver repairResolver, int blockfor)
1:dc9992a:     {
1:dc9992a:         this.repairResolver = repairResolver;
1:5e6539a:         this.blockfor = blockfor;
1:dc9992a:     }
1:dc9992a: 
1:b60bc58:     public void response(MessageIn<ReadResponse> message)
1:dc9992a:     {
1:dc9992a:         repairResolver.preprocess(message);
1:5e6539a:         if (received.incrementAndGet() == blockfor)
1:dc9992a:         {
1:dc9992a:             StageManager.getStage(Stage.READ_REPAIR).execute(new WrappedRunnable()
1:dc9992a:             {
1:fed476f:                 protected void runMayThrow()
1:dc9992a:                 {
1:dc9992a:                     repairResolver.resolve();
1:dc9992a:                 }
1:dc9992a:             });
1:dc9992a:         }
1:dc9992a:     }
1:dc9992a: 
1:dc9992a:     public boolean isLatencyForSnitch()
1:dc9992a:     {
1:dc9992a:         return true;
1:dc9992a:     }
1:dc9992a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:fed476f
/////////////////////////////////////////////////////////////////////////
1:                 protected void runMayThrow()
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     private final DataResolver repairResolver;
1:     public AsyncRepairCallback(DataResolver repairResolver, int blockfor)
commit:3d787b7
/////////////////////////////////////////////////////////////////////////
0:     private final RowDataResolver repairResolver;
0:     public AsyncRepairCallback(RowDataResolver repairResolver, int blockfor)
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.service;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:b60bc58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ReadResponse;
1: public class AsyncRepairCallback implements IAsyncCallback<ReadResponse>
/////////////////////////////////////////////////////////////////////////
1:     public void response(MessageIn<ReadResponse> message)
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void response(MessageIn message)
commit:5e6539a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     private final int blockfor;
1:     protected final AtomicInteger received = new AtomicInteger(0);
0:     public AsyncRepairCallback(RowRepairResolver repairResolver, int blockfor)
1:         this.blockfor = blockfor;
1:         if (received.incrementAndGet() == blockfor)
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.service;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.cassandra.concurrent.Stage;
1: import org.apache.cassandra.concurrent.StageManager;
1: import org.apache.cassandra.net.IAsyncCallback;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.utils.WrappedRunnable;
1: 
0: public class AsyncRepairCallback implements IAsyncCallback
1: {
0:     private final RowRepairResolver repairResolver;
0:     private final int count;
1: 
0:     public AsyncRepairCallback(RowRepairResolver repairResolver, int count)
1:     {
1:         this.repairResolver = repairResolver;
0:         this.count = count;
1:     }
1: 
0:     public void response(Message message)
1:     {
1:         repairResolver.preprocess(message);
0:         if (repairResolver.getMessageCount() == count)
1:         {
1:             StageManager.getStage(Stage.READ_REPAIR).execute(new WrappedRunnable()
1:             {
0:                 protected void runMayThrow() throws DigestMismatchException, IOException
1:                 {
1:                     repairResolver.resolve();
1:                 }
1:             });
1:         }
1:     }
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return true;
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:680e9bd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================