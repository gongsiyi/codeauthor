1:f3c0e11: /*
1:f3c0e11: * Licensed to the Apache Software Foundation (ASF) under one
1:f3c0e11: * or more contributor license agreements.  See the NOTICE file
1:f3c0e11: * distributed with this work for additional information
1:f3c0e11: * regarding copyright ownership.  The ASF licenses this file
1:f3c0e11: * to you under the Apache License, Version 2.0 (the
1:f3c0e11: * "License"); you may not use this file except in compliance
1:f3c0e11: * with the License.  You may obtain a copy of the License at
1:f3c0e11: *
1:f3c0e11: *    http://www.apache.org/licenses/LICENSE-2.0
1:f3c0e11: *
1:f3c0e11: * Unless required by applicable law or agreed to in writing,
1:f3c0e11: * software distributed under the License is distributed on an
1:f3c0e11: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f3c0e11: * KIND, either express or implied.  See the License for the
1:f3c0e11: * specific language governing permissions and limitations
1:f3c0e11: * under the License.
1:f3c0e11: */
1:f3c0e11: package org.apache.cassandra.io.util;
8:f3c0e11: 
1:f3c0e11: import java.nio.ByteBuffer;
1:f3c0e11: import java.nio.ByteOrder;
1:f3c0e11: 
1:16499ca: public class SafeMemoryWriter extends DataOutputBuffer
8:f3c0e11: {
1:16499ca:     private SafeMemory memory;
1:f3c0e11: 
1:7aafe05:     @SuppressWarnings("resource")
1:f3c0e11:     public SafeMemoryWriter(long initialCapacity)
1:f3c0e11:     {
1:16499ca:         this(new SafeMemory(initialCapacity));
8:f3c0e11:     }
1:f3c0e11: 
1:16499ca:     private SafeMemoryWriter(SafeMemory memory)
1:f3c0e11:     {
1:dc9ed46:         super(tailBuffer(memory).order(ByteOrder.BIG_ENDIAN));
1:16499ca:         this.memory = memory;
1:f3c0e11:     }
1:f3c0e11: 
1:f3c0e11:     public SafeMemory currentBuffer()
1:f3c0e11:     {
1:16499ca:         return memory;
1:f3c0e11:     }
1:f3c0e11: 
1:f7aaea0:     @Override
1:f7aaea0:     protected void reallocate(long count)
1:f3c0e11:     {
1:f7aaea0:         long newCapacity = calculateNewSize(count);
1:f3c0e11:         if (newCapacity != capacity())
1:f3c0e11:         {
1:16499ca:             long position = length();
1:16499ca:             ByteOrder order = buffer.order();
1:16499ca: 
1:16499ca:             SafeMemory oldBuffer = memory;
1:16499ca:             memory = this.memory.copy(newCapacity);
1:16499ca:             buffer = tailBuffer(memory);
1:16499ca: 
1:16499ca:             int newPosition = (int) (position - tailOffset(memory));
1:16499ca:             buffer.position(newPosition);
1:16499ca:             buffer.order(order);
1:16499ca: 
1:f3c0e11:             oldBuffer.free();
1:f3c0e11:         }
1:f3c0e11:     }
1:f3c0e11: 
1:16499ca:     public void setCapacity(long newCapacity)
1:16499ca:     {
1:16499ca:         reallocate(newCapacity);
1:16499ca:     }
1:16499ca: 
1:f3c0e11:     public void close()
1:f3c0e11:     {
1:16499ca:         memory.close();
1:f3c0e11:     }
1:f3c0e11: 
1:8704006:     public Throwable close(Throwable accumulate)
1:8704006:     {
1:8704006:         return memory.close(accumulate);
1:8704006:     }
1:8704006: 
1:f3c0e11:     public long length()
1:f3c0e11:     {
1:16499ca:         return tailOffset(memory) +  buffer.position();
1:f3c0e11:     }
1:f3c0e11: 
1:f3c0e11:     public long capacity()
1:f3c0e11:     {
1:16499ca:         return memory.size();
1:f3c0e11:     }
1:f3c0e11: 
1:16499ca:     @Override
1:bf9c503:     public SafeMemoryWriter order(ByteOrder order)
1:f3c0e11:     {
1:16499ca:         super.order(order);
1:f3c0e11:         return this;
1:f3c0e11:     }
1:16499ca: 
1:f7aaea0:     @Override
1:f7aaea0:     public long validateReallocation(long newSize)
1:f7aaea0:     {
1:f7aaea0:         return newSize;
1:f7aaea0:     }
1:f7aaea0: 
1:16499ca:     private static long tailOffset(Memory memory)
1:16499ca:     {
1:16499ca:         return Math.max(0, memory.size - Integer.MAX_VALUE);
1:16499ca:     }
1:16499ca: 
1:16499ca:     private static ByteBuffer tailBuffer(Memory memory)
1:16499ca:     {
1:16499ca:         return memory.asByteBuffer(tailOffset(memory), (int) Math.min(memory.size, Integer.MAX_VALUE));
1:16499ca:     }
1:f3c0e11: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1:         super(tailBuffer(memory).order(ByteOrder.BIG_ENDIAN));
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
0:         super(tailBuffer(memory).order(ByteOrder.BIG_ENDIAN), null);
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f7aaea0
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void reallocate(long count)
1:         long newCapacity = calculateNewSize(count);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public long validateReallocation(long newSize)
1:     {
1:         return newSize;
1:     }
1: 
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: public class SafeMemoryWriter extends DataOutputBuffer
1:     private SafeMemory memory;
1:         this(new SafeMemory(initialCapacity));
1:     private SafeMemoryWriter(SafeMemory memory)
0:         super(tailBuffer(memory).order(ByteOrder.BIG_ENDIAN));
1:         this.memory = memory;
1:         return memory;
0:     protected void reallocate(long newCapacity)
1:             long position = length();
1:             ByteOrder order = buffer.order();
1: 
1:             SafeMemory oldBuffer = memory;
1:             memory = this.memory.copy(newCapacity);
1:             buffer = tailBuffer(memory);
1: 
1:             int newPosition = (int) (position - tailOffset(memory));
1:             buffer.position(newPosition);
1:             buffer.order(order);
1: 
1:     public void setCapacity(long newCapacity)
1:     {
1:         reallocate(newCapacity);
1:     }
1: 
1:         memory.close();
1:         return tailOffset(memory) +  buffer.position();
1:         return memory.size();
1:     @Override
1:         super.order(order);
1: 
1:     private static long tailOffset(Memory memory)
1:     {
1:         return Math.max(0, memory.size - Integer.MAX_VALUE);
1:     }
1: 
1:     private static ByteBuffer tailBuffer(Memory memory)
1:     {
1:         return memory.asByteBuffer(tailOffset(memory), (int) Math.min(memory.size, Integer.MAX_VALUE));
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1:     public Throwable close(Throwable accumulate)
1:     {
1:         return memory.close(accumulate);
1:     }
1: 
commit:bf9c503
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public void write(Memory memory, long offset, long size)
0:         long newLength = ensureCapacity(size);
0:         buffer.put(length, memory, offset, size);
/////////////////////////////////////////////////////////////////////////
1:     public SafeMemoryWriter order(ByteOrder order)
commit:f3c0e11
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.util;
1: 
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: 
0: public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPlus
1: {
0:     private ByteOrder order = ByteOrder.BIG_ENDIAN;
0:     private SafeMemory buffer;
0:     private long length;
1: 
1:     public SafeMemoryWriter(long initialCapacity)
1:     {
0:         buffer = new SafeMemory(initialCapacity);
1:     }
1: 
0:     public void write(byte[] buffer, int offset, int count)
1:     {
0:         long newLength = ensureCapacity(count);
0:         this.buffer.setBytes(this.length, buffer, offset, count);
0:         this.length = newLength;
1:     }
1: 
0:     public void write(int oneByte)
1:     {
0:         long newLength = ensureCapacity(1);
0:         buffer.setByte(length++, (byte) oneByte);
0:         length = newLength;
1:     }
1: 
0:     public void writeShort(int val) throws IOException
1:     {
0:         if (order != ByteOrder.nativeOrder())
0:             val = Short.reverseBytes((short) val);
0:         long newLength = ensureCapacity(2);
0:         buffer.setShort(length, (short) val);
0:         length = newLength;
1:     }
1: 
0:     public void writeInt(int val)
1:     {
0:         if (order != ByteOrder.nativeOrder())
0:             val = Integer.reverseBytes(val);
0:         long newLength = ensureCapacity(4);
0:         buffer.setInt(length, val);
0:         length = newLength;
1:     }
1: 
0:     public void writeLong(long val)
1:     {
0:         if (order != ByteOrder.nativeOrder())
0:             val = Long.reverseBytes(val);
0:         long newLength = ensureCapacity(8);
0:         buffer.setLong(length, val);
0:         length = newLength;
1:     }
1: 
0:     public void write(ByteBuffer buffer)
1:     {
0:         long newLength = ensureCapacity(buffer.remaining());
0:         this.buffer.setBytes(length, buffer);
0:         length = newLength;
1:     }
1: 
0:     public void write(Memory memory)
1:     {
0:         long newLength = ensureCapacity(memory.size());
0:         buffer.put(length, memory, 0, memory.size());
0:         length = newLength;
1:     }
1: 
0:     private long ensureCapacity(long size)
1:     {
0:         long newLength = this.length + size;
0:         if (newLength > buffer.size())
0:             setCapacity(Math.max(newLength, buffer.size() + (buffer.size() / 2)));
0:         return newLength;
1:     }
1: 
1:     public SafeMemory currentBuffer()
1:     {
0:         return buffer;
1:     }
1: 
0:     public void setCapacity(long newCapacity)
1:     {
1:         if (newCapacity != capacity())
1:         {
0:             SafeMemory oldBuffer = buffer;
0:             buffer = this.buffer.copy(newCapacity);
1:             oldBuffer.free();
1:         }
1:     }
1: 
1:     public void close()
1:     {
0:         buffer.close();
1:     }
1: 
1:     public long length()
1:     {
0:         return length;
1:     }
1: 
1:     public long capacity()
1:     {
0:         return buffer.size();
1:     }
1: 
0:     // TODO: consider hoisting this into DataOutputPlus, since most implementations can copy with this gracefully
0:     // this would simplify IndexSummary.IndexSummarySerializer.serialize()
0:     public SafeMemoryWriter withByteOrder(ByteOrder order)
1:     {
0:         this.order = order;
1:         return this;
1:     }
1: }
============================================================================