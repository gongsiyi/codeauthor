1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.TermSize;
1:72790dc: import org.apache.cassandra.index.sasi.utils.MappedBuffer;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:2ca2fff: import static org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.IS_PARTIAL_BIT;
1:2ca2fff: 
1:72790dc: public class Term
1:72790dc: {
1:72790dc:     protected final MappedBuffer content;
1:72790dc:     protected final TermSize termSize;
1:72790dc: 
1:2ca2fff:     private final boolean hasMarkedPartials;
1:72790dc: 
1:2ca2fff:     public Term(MappedBuffer content, TermSize size, boolean hasMarkedPartials)
1:72790dc:     {
1:72790dc:         this.content = content;
1:72790dc:         this.termSize = size;
1:2ca2fff:         this.hasMarkedPartials = hasMarkedPartials;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer getTerm()
1:72790dc:     {
1:72790dc:         long offset = termSize.isConstant() ? content.position() : content.position() + 2;
1:2ca2fff:         int  length = termSize.isConstant() ? termSize.size : readLength(content.position());
1:72790dc: 
1:72790dc:         return content.getPageRegion(offset, length);
1:72790dc:     }
1:72790dc: 
1:2ca2fff:     public boolean isPartial()
1:2ca2fff:     {
1:2ca2fff:         return !termSize.isConstant()
1:2ca2fff:                && hasMarkedPartials
1:2ca2fff:                && (content.getShort(content.position()) & (1 << IS_PARTIAL_BIT)) != 0;
1:2ca2fff:     }
1:2ca2fff: 
1:72790dc:     public long getDataOffset()
1:72790dc:     {
1:72790dc:         long position = content.position();
1:2ca2fff:         return position + (termSize.isConstant() ? termSize.size : 2 + readLength(position));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int compareTo(AbstractType<?> comparator, ByteBuffer query)
1:72790dc:     {
1:72790dc:         return compareTo(comparator, query, true);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int compareTo(AbstractType<?> comparator, ByteBuffer query, boolean checkFully)
1:72790dc:     {
1:72790dc:         long position = content.position();
1:72790dc:         int padding = termSize.isConstant() ? 0 : 2;
1:2ca2fff:         int len = termSize.isConstant() ? termSize.size : readLength(position);
1:72790dc: 
1:72790dc:         return content.comparePageTo(position + padding, checkFully ? len : Math.min(len, query.remaining()), comparator, query);
1:72790dc:     }
1:2ca2fff: 
1:2ca2fff:     private short readLength(long position)
1:2ca2fff:     {
1:2ca2fff:         return (short) (content.getShort(position) & ~(1 << IS_PARTIAL_BIT));
1:2ca2fff:     }
1:72790dc: }
============================================================================
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.IS_PARTIAL_BIT;
1: 
1:     private final boolean hasMarkedPartials;
1:     public Term(MappedBuffer content, TermSize size, boolean hasMarkedPartials)
1:         this.hasMarkedPartials = hasMarkedPartials;
1:         int  length = termSize.isConstant() ? termSize.size : readLength(content.position());
1:     public boolean isPartial()
1:     {
1:         return !termSize.isConstant()
1:                && hasMarkedPartials
1:                && (content.getShort(content.position()) & (1 << IS_PARTIAL_BIT)) != 0;
1:     }
1: 
1:         return position + (termSize.isConstant() ? termSize.size : 2 + readLength(position));
/////////////////////////////////////////////////////////////////////////
1:         int len = termSize.isConstant() ? termSize.size : readLength(position);
1: 
1:     private short readLength(long position)
1:     {
1:         return (short) (content.getShort(position) & ~(1 << IS_PARTIAL_BIT));
1:     }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.TermSize;
1: import org.apache.cassandra.index.sasi.utils.MappedBuffer;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public class Term
1: {
1:     protected final MappedBuffer content;
1:     protected final TermSize termSize;
1: 
1: 
0:     public Term(MappedBuffer content, TermSize size)
1:     {
1:         this.content = content;
1:         this.termSize = size;
1:     }
1: 
1:     public ByteBuffer getTerm()
1:     {
1:         long offset = termSize.isConstant() ? content.position() : content.position() + 2;
0:         int  length = termSize.isConstant() ? termSize.size : content.getShort(content.position());
1: 
1:         return content.getPageRegion(offset, length);
1:     }
1: 
1:     public long getDataOffset()
1:     {
1:         long position = content.position();
0:         return position + (termSize.isConstant() ? termSize.size : 2 + content.getShort(position));
1:     }
1: 
1:     public int compareTo(AbstractType<?> comparator, ByteBuffer query)
1:     {
1:         return compareTo(comparator, query, true);
1:     }
1: 
1:     public int compareTo(AbstractType<?> comparator, ByteBuffer query, boolean checkFully)
1:     {
1:         long position = content.position();
1:         int padding = termSize.isConstant() ? 0 : 2;
0:         int len = termSize.isConstant() ? termSize.size : content.getShort(position);
1: 
1:         return content.comparePageTo(position + padding, checkFully ? len : Math.min(len, query.remaining()), comparator, query);
1:     }
1: }
============================================================================