1:a3a8dbc: /*
1:a3a8dbc:  * Licensed to the Apache Software Foundation (ASF) under one
1:a3a8dbc:  * or more contributor license agreements.  See the NOTICE file
1:a3a8dbc:  * distributed with this work for additional information
1:a3a8dbc:  * regarding copyright ownership.  The ASF licenses this file
1:a3a8dbc:  * to you under the Apache License, Version 2.0 (the
1:a3a8dbc:  * "License"); you may not use this file except in compliance
1:a3a8dbc:  * with the License.  You may obtain a copy of the License at
1:a3a8dbc:  *
1:a3a8dbc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a3a8dbc:  *
1:a3a8dbc:  * Unless required by applicable law or agreed to in writing, software
1:a3a8dbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3a8dbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a8dbc:  * See the License for the specific language governing permissions and
1:a3a8dbc:  * limitations under the License.
1:a3a8dbc:  */
1:a3a8dbc: 
1:a3a8dbc: package org.apache.cassandra.schema;
1:a3a8dbc: 
1:a3a8dbc: 
1:a3a8dbc: import java.util.Iterator;
1:a3a8dbc: import java.util.Optional;
1:a3a8dbc: 
1:a3a8dbc: import javax.annotation.Nullable;
1:a3a8dbc: 
1:a3a8dbc: import com.google.common.collect.ImmutableMap;
1:a3a8dbc: import com.google.common.collect.Iterables;
1:340df43: import com.google.common.collect.MapDifference;
1:340df43: import com.google.common.collect.Maps;
1:a3a8dbc: 
1:a3a8dbc: import org.apache.cassandra.config.CFMetaData;
1:a3a8dbc: import org.apache.cassandra.config.ViewDefinition;
1:a3a8dbc: 
1:a3a8dbc: import static com.google.common.collect.Iterables.filter;
1:a3a8dbc: 
1:a3a8dbc: public final class Views implements Iterable<ViewDefinition>
1:a3a8dbc: {
1:a3a8dbc:     private final ImmutableMap<String, ViewDefinition> views;
1:a3a8dbc: 
1:a3a8dbc:     private Views(Builder builder)
1:a3a8dbc:     {
1:a3a8dbc:         views = builder.views.build();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public static Builder builder()
1:a3a8dbc:     {
1:a3a8dbc:         return new Builder();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public static Views none()
1:a3a8dbc:     {
1:a3a8dbc:         return builder().build();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public Iterator<ViewDefinition> iterator()
1:a3a8dbc:     {
1:a3a8dbc:         return views.values().iterator();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public Iterable<CFMetaData> metadatas()
1:a3a8dbc:     {
1:a3a8dbc:         return Iterables.transform(views.values(), view -> view.metadata);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public int size()
1:a3a8dbc:     {
1:a3a8dbc:         return views.size();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public boolean isEmpty()
1:a3a8dbc:     {
1:a3a8dbc:         return views.isEmpty();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * Get the materialized view with the specified name
1:a3a8dbc:      *
1:a3a8dbc:      * @param name a non-qualified materialized view name
1:a3a8dbc:      * @return an empty {@link Optional} if the materialized view name is not found; a non-empty optional of {@link ViewDefinition} otherwise
1:a3a8dbc:      */
1:a3a8dbc:     public Optional<ViewDefinition> get(String name)
1:a3a8dbc:     {
1:a3a8dbc:         return Optional.ofNullable(views.get(name));
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * Get the view with the specified name
1:a3a8dbc:      *
1:a3a8dbc:      * @param name a non-qualified view name
1:a3a8dbc:      * @return null if the view name is not found; the found {@link ViewDefinition} otherwise
1:a3a8dbc:      */
1:a3a8dbc:     @Nullable
1:a3a8dbc:     public ViewDefinition getNullable(String name)
1:a3a8dbc:     {
1:a3a8dbc:         return views.get(name);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * Create a MaterializedViews instance with the provided materialized view added
1:a3a8dbc:      */
1:a3a8dbc:     public Views with(ViewDefinition view)
1:a3a8dbc:     {
1:a3a8dbc:         if (get(view.viewName).isPresent())
1:a3a8dbc:             throw new IllegalStateException(String.format("Materialized View %s already exists", view.viewName));
1:a3a8dbc: 
1:a3a8dbc:         return builder().add(this).add(view).build();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * Creates a MaterializedViews instance with the materializedView with the provided name removed
1:a3a8dbc:      */
1:a3a8dbc:     public Views without(String name)
1:a3a8dbc:     {
1:a3a8dbc:         ViewDefinition materializedView =
1:a3a8dbc:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Materialized View %s doesn't exists", name)));
1:a3a8dbc: 
1:a3a8dbc:         return builder().add(filter(this, v -> v != materializedView)).build();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * Creates a MaterializedViews instance which contains an updated materialized view
1:a3a8dbc:      */
1:a3a8dbc:     public Views replace(ViewDefinition view, CFMetaData cfm)
1:a3a8dbc:     {
1:a3a8dbc:         return without(view.viewName).with(view);
1:a3a8dbc:     }
1:a3a8dbc: 
1:340df43:     MapDifference<String, ViewDefinition> diff(Views other)
1:340df43:     {
1:340df43:         return Maps.difference(views, other.views);
1:340df43:     }
1:340df43: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public boolean equals(Object o)
1:a3a8dbc:     {
1:a3a8dbc:         return this == o || (o instanceof Views && views.equals(((Views) o).views));
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public int hashCode()
1:a3a8dbc:     {
1:a3a8dbc:         return views.hashCode();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public String toString()
1:a3a8dbc:     {
1:a3a8dbc:         return views.values().toString();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     public static final class Builder
1:a3a8dbc:     {
1:a3a8dbc:         final ImmutableMap.Builder<String, ViewDefinition> views = new ImmutableMap.Builder<>();
1:a3a8dbc: 
1:a3a8dbc:         private Builder()
1:a3a8dbc:         {
1:a3a8dbc:         }
1:a3a8dbc: 
1:a3a8dbc:         public Views build()
1:a3a8dbc:         {
1:a3a8dbc:             return new Views(this);
1:a3a8dbc:         }
1:a3a8dbc: 
1:a3a8dbc: 
1:a3a8dbc:         public Builder add(ViewDefinition view)
1:a3a8dbc:         {
1:a3a8dbc:             views.put(view.viewName, view);
1:a3a8dbc:             return this;
1:a3a8dbc:         }
1:a3a8dbc: 
1:a3a8dbc:         public Builder add(Iterable<ViewDefinition> views)
1:a3a8dbc:         {
1:a3a8dbc:             views.forEach(this::add);
1:a3a8dbc:             return this;
1:a3a8dbc:         }
1:a3a8dbc:     }
1:a3a8dbc: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.MapDifference;
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1:     MapDifference<String, ViewDefinition> diff(Views other)
1:     {
1:         return Maps.difference(views, other.views);
1:     }
1: 
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.schema;
1: 
1: 
1: import java.util.Iterator;
1: import java.util.Optional;
1: 
1: import javax.annotation.Nullable;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.Iterables;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ViewDefinition;
1: 
1: import static com.google.common.collect.Iterables.filter;
1: 
1: public final class Views implements Iterable<ViewDefinition>
1: {
1:     private final ImmutableMap<String, ViewDefinition> views;
1: 
1:     private Views(Builder builder)
1:     {
1:         views = builder.views.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Views none()
1:     {
1:         return builder().build();
1:     }
1: 
1:     public Iterator<ViewDefinition> iterator()
1:     {
1:         return views.values().iterator();
1:     }
1: 
1:     public Iterable<CFMetaData> metadatas()
1:     {
1:         return Iterables.transform(views.values(), view -> view.metadata);
1:     }
1: 
1:     public int size()
1:     {
1:         return views.size();
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return views.isEmpty();
1:     }
1: 
1:     /**
1:      * Get the materialized view with the specified name
1:      *
1:      * @param name a non-qualified materialized view name
1:      * @return an empty {@link Optional} if the materialized view name is not found; a non-empty optional of {@link ViewDefinition} otherwise
1:      */
1:     public Optional<ViewDefinition> get(String name)
1:     {
1:         return Optional.ofNullable(views.get(name));
1:     }
1: 
1:     /**
1:      * Get the view with the specified name
1:      *
1:      * @param name a non-qualified view name
1:      * @return null if the view name is not found; the found {@link ViewDefinition} otherwise
1:      */
1:     @Nullable
1:     public ViewDefinition getNullable(String name)
1:     {
1:         return views.get(name);
1:     }
1: 
1:     /**
1:      * Create a MaterializedViews instance with the provided materialized view added
1:      */
1:     public Views with(ViewDefinition view)
1:     {
1:         if (get(view.viewName).isPresent())
1:             throw new IllegalStateException(String.format("Materialized View %s already exists", view.viewName));
1: 
1:         return builder().add(this).add(view).build();
1:     }
1: 
1:     /**
1:      * Creates a MaterializedViews instance with the materializedView with the provided name removed
1:      */
1:     public Views without(String name)
1:     {
1:         ViewDefinition materializedView =
1:             get(name).orElseThrow(() -> new IllegalStateException(String.format("Materialized View %s doesn't exists", name)));
1: 
1:         return builder().add(filter(this, v -> v != materializedView)).build();
1:     }
1: 
1:     /**
1:      * Creates a MaterializedViews instance which contains an updated materialized view
1:      */
1:     public Views replace(ViewDefinition view, CFMetaData cfm)
1:     {
1:         return without(view.viewName).with(view);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         return this == o || (o instanceof Views && views.equals(((Views) o).views));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return views.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return views.values().toString();
1:     }
1: 
1:     public static final class Builder
1:     {
1:         final ImmutableMap.Builder<String, ViewDefinition> views = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Views build()
1:         {
1:             return new Views(this);
1:         }
1: 
1: 
1:         public Builder add(ViewDefinition view)
1:         {
1:             views.put(view.viewName, view);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<ViewDefinition> views)
1:         {
1:             views.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================