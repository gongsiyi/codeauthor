1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:2457599: 
1:a991b64: import com.google.common.collect.UnmodifiableIterator;
3:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: 
1:a991b64: /**
1:2457599:  * Abstract class to make writing unfiltered iterators that wrap another iterator
1:a991b64:  * easier. By default, the wrapping iterator simply delegate every call to
1:2457599:  * the wrapped iterator so concrete implementations will have to override
1:2457599:  * some of the methods.
1:2457599:  * <p>
1:2457599:  * Note that if most of what you want to do is modifying/filtering the returned
1:143a7d9:  * {@code Unfiltered}, {@link org.apache.cassandra.db.transform.Transformation#apply(UnfilteredRowIterator,Transformation)} can be a simpler option.
1:a991b64:  */
1:a991b64: public abstract class WrappingUnfilteredRowIterator extends UnmodifiableIterator<Unfiltered>  implements UnfilteredRowIterator
2:a991b64: {
1:a991b64:     protected final UnfilteredRowIterator wrapped;
1:a991b64: 
1:a991b64:     protected WrappingUnfilteredRowIterator(UnfilteredRowIterator wrapped)
1:a991b64:     {
1:a991b64:         this.wrapped = wrapped;
2:a991b64:     }
1:a991b64: 
1:a991b64:     public CFMetaData metadata()
1:a991b64:     {
1:a991b64:         return wrapped.metadata();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionColumns columns()
1:a991b64:     {
1:a991b64:         return wrapped.columns();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isReverseOrder()
1:a991b64:     {
1:a991b64:         return wrapped.isReverseOrder();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DecoratedKey partitionKey()
1:a991b64:     {
1:a991b64:         return wrapped.partitionKey();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime partitionLevelDeletion()
1:a991b64:     {
1:a991b64:         return wrapped.partitionLevelDeletion();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Row staticRow()
1:a991b64:     {
1:a991b64:         return wrapped.staticRow();
1:a991b64:     }
1:a991b64: 
1:c055ab9:     public EncodingStats stats()
1:2457599:     {
1:2457599:         return wrapped.stats();
1:2457599:     }
1:2457599: 
1:a991b64:     public boolean hasNext()
1:a991b64:     {
1:a991b64:         return wrapped.hasNext();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Unfiltered next()
1:a991b64:     {
1:a991b64:         return wrapped.next();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void close()
1:a991b64:     {
1:a991b64:         wrapped.close();
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:143a7d9
/////////////////////////////////////////////////////////////////////////
1:  * {@code Unfiltered}, {@link org.apache.cassandra.db.transform.Transformation#apply(UnfilteredRowIterator,Transformation)} can be a simpler option.
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
0:  * {@code Unfiltered}, {@link org.apache.cassandra.db.transform.Transformation.apply} can be a simpler option.
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public EncodingStats stats()
commit:2457599
/////////////////////////////////////////////////////////////////////////
0: import java.util.NoSuchElementException;
1: 
1:  * Abstract class to make writing unfiltered iterators that wrap another iterator
1:  * the wrapped iterator so concrete implementations will have to override
1:  * some of the methods.
1:  * <p>
1:  * Note that if most of what you want to do is modifying/filtering the returned
0:  * {@code Unfiltered}, {@link AlteringUnfilteredRowIterator} can be a simpler option.
/////////////////////////////////////////////////////////////////////////
0:     public RowStats stats()
1:     {
1:         return wrapped.stats();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import com.google.common.collect.UnmodifiableIterator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
0:  * Abstract class to make writing atom iterators that wrap another iterator
1:  * easier. By default, the wrapping iterator simply delegate every call to
0:  * the wrapped iterator so concrete implementations will override some of the
0:  * methods.
1:  */
1: public abstract class WrappingUnfilteredRowIterator extends UnmodifiableIterator<Unfiltered>  implements UnfilteredRowIterator
1: {
1:     protected final UnfilteredRowIterator wrapped;
1: 
1:     protected WrappingUnfilteredRowIterator(UnfilteredRowIterator wrapped)
1:     {
1:         this.wrapped = wrapped;
1:     }
1: 
1:     public CFMetaData metadata()
1:     {
1:         return wrapped.metadata();
1:     }
1: 
1:     public PartitionColumns columns()
1:     {
1:         return wrapped.columns();
1:     }
1: 
1:     public boolean isReverseOrder()
1:     {
1:         return wrapped.isReverseOrder();
1:     }
1: 
1:     public DecoratedKey partitionKey()
1:     {
1:         return wrapped.partitionKey();
1:     }
1: 
1:     public DeletionTime partitionLevelDeletion()
1:     {
1:         return wrapped.partitionLevelDeletion();
1:     }
1: 
1:     public Row staticRow()
1:     {
1:         return wrapped.staticRow();
1:     }
1: 
1:     public boolean hasNext()
1:     {
1:         return wrapped.hasNext();
1:     }
1: 
1:     public Unfiltered next()
1:     {
1:         return wrapped.next();
1:     }
1: 
0:     public RowStats stats()
1:     {
0:         return wrapped.stats();
1:     }
1: 
1:     public void close()
1:     {
1:         wrapped.close();
1:     }
1: }
============================================================================