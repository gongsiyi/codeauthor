1:c74a871: /*
1:c74a871:  * Licensed to the Apache Software Foundation (ASF) under one
1:c74a871:  * or more contributor license agreements.  See the NOTICE file
1:c74a871:  * distributed with this work for additional information
1:c74a871:  * regarding copyright ownership.  The ASF licenses this file
1:c74a871:  * to you under the Apache License, Version 2.0 (the
1:c74a871:  * "License"); you may not use this file except in compliance
1:c74a871:  * with the License.  You may obtain a copy of the License at
1:c74a871:  *
1:c74a871:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c74a871:  *
1:c74a871:  * Unless required by applicable law or agreed to in writing, software
1:c74a871:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c74a871:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c74a871:  * See the License for the specific language governing permissions and
1:c74a871:  * limitations under the License.
1:c74a871:  */
1:c74a871: package org.apache.cassandra.cql3.statements;
5:c74a871: 
1:5a3eb1a: import java.util.Set;
1:297f530: 
1:cb5897f: import org.apache.cassandra.auth.*;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:5a3eb1a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:0b83682: import org.apache.cassandra.exceptions.RequestValidationException;
1:5a3eb1a: import org.apache.cassandra.exceptions.UnauthorizedException;
1:c74a871: import org.apache.cassandra.service.ClientState;
1:c74a871: 
1:217721a: public abstract class PermissionsManagementStatement extends AuthorizationStatement
1:297f530: {
1:5a3eb1a:     protected final Set<Permission> permissions;
1:217721a:     protected IResource resource;
1:217721a:     protected final RoleResource grantee;
1:5a3eb1a: 
1:217721a:     protected PermissionsManagementStatement(Set<Permission> permissions, IResource resource, RoleName grantee)
3:c74a871:     {
1:5a3eb1a:         this.permissions = permissions;
1:b5a232b:         this.resource = resource;
1:217721a:         this.grantee = RoleResource.role(grantee.getName());
1:297f530:     }
1:bddfa9e: 
1:0b83682:     public void validate(ClientState state) throws RequestValidationException
1:c74a871:     {
1:0b83682:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:0b83682:         state.ensureNotAnonymous();
1:297f530: 
1:879b694:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
1:217721a:             throw new InvalidRequestException(String.format("Role %s doesn't exist", grantee.getRoleName()));
1:297f530: 
1:5a3eb1a:         // if a keyspace is omitted when GRANT/REVOKE ON TABLE <table>, we need to correct the resource.
1:5a3eb1a:         resource = maybeCorrectResource(resource, state);
1:cb5897f: 
1:cb5897f:         // altering permissions on builtin functions is not supported
1:cb5897f:         if (resource instanceof FunctionResource
1:9797511:             && SchemaConstants.SYSTEM_KEYSPACE_NAME.equals(((FunctionResource)resource).getKeyspace()))
1:cb5897f:         {
1:cb5897f:             throw new InvalidRequestException("Altering permissions on builtin functions is not supported");
1:cb5897f:         }
1:cb5897f: 
1:5a3eb1a:         if (!resource.exists())
1:879b694:             throw new InvalidRequestException(String.format("Resource %s doesn't exist", resource));
3:c74a871:     }
1:0b83682: 
1:0b83682:     public void checkAccess(ClientState state) throws UnauthorizedException
1:0b83682:     {
1:0b83682:         // check that the user has AUTHORIZE permission on the resource or its parents, otherwise reject GRANT/REVOKE.
1:0b83682:         state.ensureHasPermission(Permission.AUTHORIZE, resource);
1:0b83682:         // check that the user has [a single permission or all in case of ALL] on the resource or its parents.
1:0b83682:         for (Permission p : permissions)
1:0b83682:             state.ensureHasPermission(p, resource);
1:0b83682:     }
1:c74a871: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:             && SchemaConstants.SYSTEM_KEYSPACE_NAME.equals(((FunctionResource)resource).getKeyspace()))
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
0: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // altering permissions on builtin functions is not supported
1:         if (resource instanceof FunctionResource
0:             && SystemKeyspace.NAME.equals(((FunctionResource)resource).getKeyspace()))
1:         {
1:             throw new InvalidRequestException("Altering permissions on builtin functions is not supported");
1:         }
1: 
commit:217721a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.IResource;
0: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1: public abstract class PermissionsManagementStatement extends AuthorizationStatement
1:     protected IResource resource;
1:     protected final RoleResource grantee;
1:     protected PermissionsManagementStatement(Set<Permission> permissions, IResource resource, RoleName grantee)
1:         this.grantee = RoleResource.role(grantee.getName());
/////////////////////////////////////////////////////////////////////////
1:             throw new InvalidRequestException(String.format("Role %s doesn't exist", grantee.getRoleName()));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.RoleName;
/////////////////////////////////////////////////////////////////////////
0:     protected final String grantee;
0:     protected PermissionAlteringStatement(Set<Permission> permissions, DataResource resource, RoleName grantee)
0:         this.grantee = grantee.getName();
/////////////////////////////////////////////////////////////////////////
1:         if (!DatabaseDescriptor.getRoleManager().isExistingRole(grantee))
0:             throw new InvalidRequestException(String.format("Role %s doesn't exist", grantee));
1:             throw new InvalidRequestException(String.format("Resource %s doesn't exist", resource));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b5a232b
/////////////////////////////////////////////////////////////////////////
0:     protected PermissionAlteringStatement(Set<Permission> permissions, DataResource resource, String username)
1:         this.resource = resource;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0b83682
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException
1:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:         state.ensureNotAnonymous();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
1:         // check that the user has AUTHORIZE permission on the resource or its parents, otherwise reject GRANT/REVOKE.
1:         state.ensureHasPermission(Permission.AUTHORIZE, resource);
1:         // check that the user has [a single permission or all in case of ALL] on the resource or its parents.
1:         for (Permission p : permissions)
1:             state.ensureHasPermission(p, resource);
1:     }
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Auth;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws UnauthorizedException
/////////////////////////////////////////////////////////////////////////
0:         if (!Auth.isExistingUser(username))
0:             throw new InvalidRequestException(String.format("User %s doesn't exist", username));
1: 
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
0: import org.apache.cassandra.auth.DataResource;
0: import org.apache.cassandra.auth.IResource;
0: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
0: public abstract class PermissionAlteringStatement extends AuthorizationStatement
1:     protected final Set<Permission> permissions;
0:     protected DataResource resource;
0:     protected final String username;
1: 
0:     protected PermissionAlteringStatement(Set<Permission> permissions, IResource resource, String username)
1:         this.permissions = permissions;
0:         this.resource = (DataResource) resource;
0:         this.username = username;
0:     public void checkAccess(ClientState state) throws InvalidRequestException, UnauthorizedException
0:         // check that the user has AUTHORIZE permission on the resource or its parents, otherwise reject GRANT/REVOKE.
0:         state.ensureHasPermission(Permission.AUTHORIZE, resource);
0:         // check that the user has [a single permission or all in case of ALL] on the resource or its parents.
0:         for (Permission p : permissions)
0:             state.ensureHasPermission(p, resource);
0:     // TODO: user existence check (when IAuthenticator rewrite is done)
0:     public void validate(ClientState state) throws InvalidRequestException
1:         // if a keyspace is omitted when GRANT/REVOKE ON TABLE <table>, we need to correct the resource.
1:         resource = maybeCorrectResource(resource, state);
1:         if (!resource.exists())
0:             throw new InvalidRequestException(String.format("%s doesn't exist", resource));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException
0:         return execute(state.getClientState(), variables);
0:     public ResultMessage executeInternal(QueryState state)
commit:297f530
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
0: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.exceptions.*;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, ClientState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException
1:     {
0:         return execute(state, variables);
1:     }
1: 
0:     public abstract ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException;
1: 
commit:c74a871
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.cql3.CQLStatement;
1: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
0: public abstract class PermissionAlteringStatement extends ParsedStatement implements CQLStatement
1: {
0:     @Override
0:     public Prepared prepare()
1:     {
0:         return new Prepared(this);
1:     }
1: 
0:     public int getBoundsTerms()
1:     {
0:         return 0;
1:     }
1: 
0:     public void checkAccess(ClientState state)
0:     {}
1: 
0:     public void validate(ClientState state)
0:     {}
1: 
0:     public ResultMessage executeInternal(ClientState state)
1:     {
0:         // executeInternal is for local query only, thus altering permission doesn't make sense and is not supported
0:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================