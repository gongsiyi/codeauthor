1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:2457599: import org.apache.cassandra.utils.ByteBufferUtil;
1:2457599: import org.apache.cassandra.utils.ObjectSizes;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A path for a cell belonging to a complex column type (non-frozen collection or UDT).
1:a991b64:  */
1:a991b64: public abstract class CellPath
1:a991b64: {
1:a991b64:     public static final CellPath BOTTOM = new EmptyCellPath();
1:a991b64:     public static final CellPath TOP = new EmptyCellPath();
1:a991b64: 
1:a991b64:     public abstract int size();
1:a991b64:     public abstract ByteBuffer get(int i);
1:a991b64: 
1:677230d:     // The only complex paths we currently have are collections and UDTs, which both have a depth of one
1:a991b64:     public static CellPath create(ByteBuffer value)
1:a991b64:     {
1:a991b64:         assert value != null;
1:677230d:         return new SingleItemCellPath(value);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public int dataSize()
1:a991b64:     {
1:a991b64:         int size = 0;
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             size += get(i).remaining();
1:a991b64:         return size;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             digest.update(get(i).duplicate());
1:a991b64:     }
1:a991b64: 
1:2457599:     public abstract CellPath copy(AbstractAllocator allocator);
1:2457599: 
1:2457599:     public abstract long unsharedHeapSizeExcludingData();
1:2457599: 
1:a991b64:     @Override
1:a991b64:     public final int hashCode()
1:a991b64:     {
1:a991b64:         int result = 31;
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             result += 31 * Objects.hash(get(i));
1:a991b64:         return result;
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public final boolean equals(Object o)
1:a991b64:     {
1:a991b64:         if(!(o instanceof CellPath))
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         CellPath that = (CellPath)o;
1:a991b64:         if (this.size() != that.size())
1:a991b64:             return false;
1:a991b64: 
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             if (!Objects.equals(this.get(i), that.get(i)))
1:a991b64:                 return false;
1:a991b64: 
1:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public interface Serializer
1:a991b64:     {
1:a991b64:         public void serialize(CellPath path, DataOutputPlus out) throws IOException;
1:2457599:         public CellPath deserialize(DataInputPlus in) throws IOException;
1:03f72ac:         public long serializedSize(CellPath path);
1:2457599:         public void skip(DataInputPlus in) throws IOException;
1:a991b64:     }
1:a991b64: 
1:677230d:     private static class SingleItemCellPath extends CellPath
1:a991b64:     {
1:677230d:         private static final long EMPTY_SIZE = ObjectSizes.measure(new SingleItemCellPath(ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:a991b64: 
1:2457599:         protected final ByteBuffer value;
1:2457599: 
1:677230d:         private SingleItemCellPath(ByteBuffer value)
1:a991b64:         {
1:2457599:             this.value = value;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public int size()
1:a991b64:         {
1:2457599:             return 1;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public ByteBuffer get(int i)
1:a991b64:         {
1:2457599:             assert i == 0;
1:2457599:             return value;
1:2457599:         }
1:2457599: 
1:2457599:         public CellPath copy(AbstractAllocator allocator)
1:2457599:         {
1:677230d:             return new SingleItemCellPath(allocator.clone(value));
1:2457599:         }
1:2457599: 
1:2457599:         public long unsharedHeapSizeExcludingData()
1:2457599:         {
1:2457599:             return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(value);
1:a991b64:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     private static class EmptyCellPath extends CellPath
1:a991b64:     {
1:a991b64:         public int size()
1:a991b64:         {
1:a991b64:             return 0;
1:a991b64:         }
1:a991b64: 
1:a991b64:         public ByteBuffer get(int i)
1:a991b64:         {
1:a991b64:             throw new UnsupportedOperationException();
1:2457599:         }
1:2457599: 
1:2457599:         public CellPath copy(AbstractAllocator allocator)
1:2457599:         {
1:2457599:             return this;
1:2457599:         }
1:2457599: 
1:2457599:         public long unsharedHeapSizeExcludingData()
1:2457599:         {
1:2457599:             return 0;
1:a991b64:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.marshal.UserType;
/////////////////////////////////////////////////////////////////////////
1:     // The only complex paths we currently have are collections and UDTs, which both have a depth of one
1:         return new SingleItemCellPath(value);
/////////////////////////////////////////////////////////////////////////
1:     private static class SingleItemCellPath extends CellPath
1:         private static final long EMPTY_SIZE = ObjectSizes.measure(new SingleItemCellPath(ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         private SingleItemCellPath(ByteBuffer value)
/////////////////////////////////////////////////////////////////////////
1:             return new SingleItemCellPath(allocator.clone(value));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.ObjectSizes;
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
0:         return new CollectionCellPath(value);
/////////////////////////////////////////////////////////////////////////
1:     public abstract CellPath copy(AbstractAllocator allocator);
1: 
1:     public abstract long unsharedHeapSizeExcludingData();
1: 
/////////////////////////////////////////////////////////////////////////
1:         public CellPath deserialize(DataInputPlus in) throws IOException;
1:         public void skip(DataInputPlus in) throws IOException;
0:     private static class CollectionCellPath extends CellPath
0:         private static final long EMPTY_SIZE = ObjectSizes.measure(new CollectionCellPath(ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         protected final ByteBuffer value;
1: 
0:         private CollectionCellPath(ByteBuffer value)
1:             this.value = value;
1:             return 1;
1:             assert i == 0;
1:             return value;
1:         }
1: 
1:         public CellPath copy(AbstractAllocator allocator)
1:         {
0:             return new CollectionCellPath(allocator.clone(value));
1:         }
1: 
1:         public long unsharedHeapSizeExcludingData()
1:         {
1:             return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(value);
/////////////////////////////////////////////////////////////////////////
1: 
1:         public CellPath copy(AbstractAllocator allocator)
1:         {
1:             return this;
1:         }
1: 
1:         public long unsharedHeapSizeExcludingData()
1:         {
1:             return 0;
1:         }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
1: import java.util.Objects;
1: 
0: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * A path for a cell belonging to a complex column type (non-frozen collection or UDT).
1:  */
1: public abstract class CellPath
1: {
1:     public static final CellPath BOTTOM = new EmptyCellPath();
1:     public static final CellPath TOP = new EmptyCellPath();
1: 
1:     public abstract int size();
1:     public abstract ByteBuffer get(int i);
1: 
0:     // The only complex we currently have are collections that have only one value.
1:     public static CellPath create(ByteBuffer value)
1:     {
1:         assert value != null;
0:         return new SimpleCellPath(new ByteBuffer[]{ value });
1:     }
1: 
1:     public int dataSize()
1:     {
1:         int size = 0;
1:         for (int i = 0; i < size(); i++)
1:             size += get(i).remaining();
1:         return size;
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         for (int i = 0; i < size(); i++)
1:             digest.update(get(i).duplicate());
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         int result = 31;
1:         for (int i = 0; i < size(); i++)
1:             result += 31 * Objects.hash(get(i));
1:         return result;
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof CellPath))
1:             return false;
1: 
1:         CellPath that = (CellPath)o;
1:         if (this.size() != that.size())
1:             return false;
1: 
1:         for (int i = 0; i < size(); i++)
1:             if (!Objects.equals(this.get(i), that.get(i)))
1:                 return false;
1: 
1:         return true;
1:     }
1: 
1:     public interface Serializer
1:     {
1:         public void serialize(CellPath path, DataOutputPlus out) throws IOException;
0:         public CellPath deserialize(DataInput in) throws IOException;
0:         public long serializedSize(CellPath path, TypeSizes sizes);
0:         public void skip(DataInput in) throws IOException;
1:     }
1: 
0:     static class SimpleCellPath extends CellPath
1:     {
0:         protected final ByteBuffer[] values;
1: 
0:         public SimpleCellPath(ByteBuffer[] values)
1:         {
0:             this.values = values;
1:         }
1: 
1:         public int size()
1:         {
0:             return values.length;
1:         }
1: 
1:         public ByteBuffer get(int i)
1:         {
0:             return values[i];
1:         }
1:     }
1: 
1:     private static class EmptyCellPath extends CellPath
1:     {
1:         public int size()
1:         {
1:             return 0;
1:         }
1: 
1:         public ByteBuffer get(int i)
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(CellPath path);
============================================================================