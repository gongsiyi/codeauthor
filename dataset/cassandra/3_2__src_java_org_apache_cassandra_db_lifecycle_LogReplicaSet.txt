1:73781a9: /*
1:73781a9:  * Licensed to the Apache Software Foundation (ASF) under one
1:73781a9:  * or more contributor license agreements.  See the NOTICE file
1:73781a9:  * distributed with this work for additional information
1:73781a9:  * regarding copyright ownership.  The ASF licenses this file
1:73781a9:  * to you under the Apache License, Version 2.0 (the
1:73781a9:  * "License"); you may not use this file except in compliance
1:73781a9:  * with the License.  You may obtain a copy of the License at
1:73781a9:  *
1:73781a9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:73781a9:  *
1:73781a9:  * Unless required by applicable law or agreed to in writing, software
1:73781a9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:73781a9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:73781a9:  * See the License for the specific language governing permissions and
1:73781a9:  * limitations under the License.
1:73781a9:  */
1:73781a9: 
1:73781a9: package org.apache.cassandra.db.lifecycle;
1:73781a9: 
1:73781a9: import java.io.File;
1:73781a9: import java.util.Collection;
1:73781a9: import java.util.LinkedHashMap;
1:73781a9: import java.util.List;
1:73781a9: import java.util.Map;
1:73781a9: import java.util.Optional;
1:73781a9: import java.util.Set;
1:73781a9: import java.util.function.Function;
1:73781a9: import java.util.stream.Collectors;
1:73781a9: 
1:73781a9: import com.google.common.annotations.VisibleForTesting;
1:73781a9: import org.slf4j.Logger;
1:73781a9: import org.slf4j.LoggerFactory;
1:73781a9: 
1:73781a9: import org.apache.cassandra.utils.Throwables;
1:73781a9: 
1:73781a9: /**
1:73781a9:  * A set of log replicas. This class mostly iterates over replicas when writing or reading,
1:73781a9:  * ensuring consistency among them and hiding replication details from LogFile.
1:73781a9:  *
1:6b7db8a:  * @see LogReplica
1:6b7db8a:  * @see LogFile
1:73781a9:  */
1:da07130: public class LogReplicaSet implements AutoCloseable
1:73781a9: {
1:73781a9:     private static final Logger logger = LoggerFactory.getLogger(LogReplicaSet.class);
1:73781a9: 
1:73781a9:     private final Map<File, LogReplica> replicasByFile = new LinkedHashMap<>();
1:73781a9: 
1:73781a9:     private Collection<LogReplica> replicas()
1:73781a9:     {
1:73781a9:         return replicasByFile.values();
1:73781a9:     }
1:73781a9: 
1:73781a9:     void addReplicas(List<File> replicas)
1:73781a9:     {
1:73781a9:         replicas.forEach(this::addReplica);
1:73781a9:     }
1:73781a9: 
1:73781a9:     void addReplica(File file)
1:73781a9:     {
1:11910c6:         File directory = file.getParentFile();
1:11910c6:         assert !replicasByFile.containsKey(directory);
1:11910c6:         replicasByFile.put(directory, LogReplica.open(file));
1:73781a9: 
1:73781a9:         if (logger.isTraceEnabled())
1:73781a9:             logger.trace("Added log file replica {} ", file);
1:73781a9:     }
1:73781a9: 
1:11910c6:     void maybeCreateReplica(File directory, String fileName, Set<LogRecord> records)
1:73781a9:     {
1:11910c6:         if (replicasByFile.containsKey(directory))
1:73781a9:             return;
1:73781a9: 
1:da07130:         @SuppressWarnings("resource")  // LogReplicas are closed in LogReplicaSet::close
1:11910c6:         final LogReplica replica = LogReplica.create(directory, fileName);
1:73781a9: 
1:73781a9:         records.forEach(replica::append);
1:11910c6:         replicasByFile.put(directory, replica);
1:73781a9: 
1:73781a9:         if (logger.isTraceEnabled())
1:73781a9:             logger.trace("Created new file replica {}", replica);
1:73781a9:     }
1:73781a9: 
1:11910c6:     Throwable syncDirectory(Throwable accumulate)
1:73781a9:     {
1:11910c6:         return Throwables.perform(accumulate, replicas().stream().map(s -> s::syncDirectory));
1:73781a9:     }
1:73781a9: 
1:73781a9:     Throwable delete(Throwable accumulate)
1:73781a9:     {
1:73781a9:         return Throwables.perform(accumulate, replicas().stream().map(s -> s::delete));
1:73781a9:     }
1:73781a9: 
1:73781a9:     private static boolean isPrefixMatch(String first, String second)
1:73781a9:     {
1:73781a9:         return first.length() >= second.length() ?
1:73781a9:                first.startsWith(second) :
1:73781a9:                second.startsWith(first);
1:73781a9:     }
1:73781a9: 
1:73781a9:     boolean readRecords(Set<LogRecord> records)
1:73781a9:     {
1:11910c6:         Map<LogReplica, List<String>> linesByReplica = replicas().stream()
1:11910c6:                                                                  .collect(Collectors.toMap(Function.<LogReplica>identity(),
1:11910c6:                                                                                            LogReplica::readLines,
1:11910c6:                                                                                            (k, v) -> {throw new IllegalStateException("Duplicated key: " + k);},
1:11910c6:                                                                                            LinkedHashMap::new));
1:11910c6: 
1:73781a9:         int maxNumLines = linesByReplica.values().stream().map(List::size).reduce(0, Integer::max);
1:73781a9:         for (int i = 0; i < maxNumLines; i++)
1:73781a9:         {
1:73781a9:             String firstLine = null;
1:73781a9:             boolean partial = false;
1:11910c6:             for (Map.Entry<LogReplica, List<String>> entry : linesByReplica.entrySet())
1:73781a9:             {
1:73781a9:                 List<String> currentLines = entry.getValue();
1:73781a9:                 if (i >= currentLines.size())
1:73781a9:                     continue;
1:73781a9: 
1:73781a9:                 String currentLine = currentLines.get(i);
1:73781a9:                 if (firstLine == null)
1:73781a9:                 {
1:73781a9:                     firstLine = currentLine;
1:73781a9:                     continue;
1:73781a9:                 }
1:73781a9: 
1:73781a9:                 if (!isPrefixMatch(firstLine, currentLine))
1:73781a9:                 { // not a prefix match
1:73781a9:                     logger.error("Mismatched line in file {}: got '{}' expected '{}', giving up",
1:11910c6:                                  entry.getKey().getFileName(),
1:73781a9:                                  currentLine,
1:73781a9:                                  firstLine);
1:11910c6:                     entry.getKey().setError(currentLine, String.format("Does not match <%s> in first replica file", firstLine));
1:73781a9:                     return false;
1:73781a9:                 }
1:73781a9: 
1:73781a9:                 if (!firstLine.equals(currentLine))
1:73781a9:                 {
1:73781a9:                     if (i == currentLines.size() - 1)
1:73781a9:                     { // last record, just set record as invalid and move on
1:73781a9:                         logger.warn("Mismatched last line in file {}: '{}' not the same as '{}'",
1:11910c6:                                     entry.getKey().getFileName(),
1:73781a9:                                     currentLine,
1:73781a9:                                     firstLine);
1:73781a9: 
1:73781a9:                         if (currentLine.length() > firstLine.length())
1:73781a9:                             firstLine = currentLine;
1:73781a9: 
1:73781a9:                         partial = true;
1:73781a9:                     }
1:73781a9:                     else
1:73781a9:                     {   // mismatched entry file has more lines, giving up
1:73781a9:                         logger.error("Mismatched line in file {}: got '{}' expected '{}', giving up",
1:11910c6:                                      entry.getKey().getFileName(),
1:73781a9:                                      currentLine,
1:73781a9:                                      firstLine);
1:11910c6:                         entry.getKey().setError(currentLine, String.format("Does not match <%s> in first replica file", firstLine));
1:73781a9:                         return false;
1:73781a9:                     }
1:73781a9:                 }
1:73781a9:             }
1:73781a9: 
1:73781a9:             LogRecord record = LogRecord.make(firstLine);
1:73781a9:             if (records.contains(record))
1:73781a9:             { // duplicate records
1:73781a9:                 logger.error("Found duplicate record {} for {}, giving up", record, record.fileName());
1:11910c6:                 setError(record, "Duplicated record");
1:73781a9:                 return false;
1:73781a9:             }
1:73781a9: 
1:73781a9:             if (partial)
1:73781a9:                 record.setPartial();
1:73781a9: 
1:73781a9:             records.add(record);
1:73781a9: 
1:73781a9:             if (record.isFinal() && i != (maxNumLines - 1))
1:73781a9:             { // too many final records
1:73781a9:                 logger.error("Found too many lines for {}, giving up", record.fileName());
1:11910c6:                 setError(record, "This record should have been the last one in all replicas");
1:73781a9:                 return false;
1:73781a9:             }
1:73781a9:         }
1:73781a9: 
1:73781a9:         return true;
1:73781a9:     }
1:73781a9: 
1:11910c6:     void setError(LogRecord record, String error)
1:11910c6:     {
1:11910c6:         record.setError(error);
1:11910c6:         setErrorInReplicas(record);
1:11910c6:     }
1:11910c6: 
1:11910c6:     void setErrorInReplicas(LogRecord record)
1:11910c6:     {
1:11910c6:         replicas().forEach(r -> r.setError(record.raw, record.error()));
1:11910c6:     }
1:11910c6: 
1:11910c6:     void printContentsWithAnyErrors(StringBuilder str)
1:11910c6:     {
1:11910c6:         replicas().forEach(r -> r.printContentsWithAnyErrors(str));
1:11910c6:     }
1:11910c6: 
1:73781a9:     /**
1:73781a9:      *  Add the record to all the replicas: if it is a final record then we throw only if we fail to write it
1:73781a9:      *  to all, otherwise we throw if we fail to write it to any file, see CASSANDRA-10421 for details
1:73781a9:      */
1:73781a9:     void append(LogRecord record)
1:73781a9:     {
1:73781a9:         Throwable err = Throwables.perform(null, replicas().stream().map(r -> () -> r.append(record)));
1:73781a9:         if (err != null)
1:73781a9:         {
1:73781a9:             if (!record.isFinal() || err.getSuppressed().length == replicas().size() -1)
1:73781a9:                 Throwables.maybeFail(err);
1:73781a9: 
1:73781a9:             logger.error("Failed to add record '{}' to some replicas '{}'", record, this);
1:73781a9:         }
1:73781a9:     }
1:73781a9: 
1:73781a9:     boolean exists()
1:73781a9:     {
1:73781a9:         Optional<Boolean> ret = replicas().stream().map(LogReplica::exists).reduce(Boolean::logicalAnd);
1:73781a9:         return ret.isPresent() ?
1:73781a9:                ret.get()
1:73781a9:                : false;
1:73781a9:     }
1:73781a9: 
1:da07130:     public void close()
1:73781a9:     {
1:73781a9:         Throwables.maybeFail(Throwables.perform(null, replicas().stream().map(r -> r::close)));
1:73781a9:     }
1:73781a9: 
1:73781a9:     @Override
1:73781a9:     public String toString()
1:73781a9:     {
1:73781a9:         Optional<String> ret = replicas().stream().map(LogReplica::toString).reduce(String::concat);
1:73781a9:         return ret.isPresent() ?
1:73781a9:                ret.get()
1:73781a9:                : "[-]";
1:73781a9:     }
1:73781a9: 
1:11910c6:     String getDirectories()
1:11910c6:     {
1:11910c6:         return String.join(", ", replicas().stream().map(LogReplica::getDirectory).collect(Collectors.toList()));
1:11910c6:     }
1:11910c6: 
1:73781a9:     @VisibleForTesting
1:73781a9:     List<File> getFiles()
1:73781a9:     {
1:73781a9:         return replicas().stream().map(LogReplica::file).collect(Collectors.toList());
1:73781a9:     }
1:73781a9: 
1:73781a9:     @VisibleForTesting
1:73781a9:     List<String> getFilePaths()
1:73781a9:     {
1:73781a9:         return replicas().stream().map(LogReplica::file).map(File::getPath).collect(Collectors.toList());
1:73781a9:     }
1:73781a9: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:dc1712a
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:da07130
/////////////////////////////////////////////////////////////////////////
1: public class LogReplicaSet implements AutoCloseable
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")  // LogReplicas are closed in LogReplicaSet::close
/////////////////////////////////////////////////////////////////////////
1:     public void close()
commit:11910c6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         File directory = file.getParentFile();
1:         assert !replicasByFile.containsKey(directory);
1:         replicasByFile.put(directory, LogReplica.open(file));
1:     void maybeCreateReplica(File directory, String fileName, Set<LogRecord> records)
1:         if (replicasByFile.containsKey(directory))
1:         final LogReplica replica = LogReplica.create(directory, fileName);
1:         replicasByFile.put(directory, replica);
1:     Throwable syncDirectory(Throwable accumulate)
1:         return Throwables.perform(accumulate, replicas().stream().map(s -> s::syncDirectory));
/////////////////////////////////////////////////////////////////////////
1:         Map<LogReplica, List<String>> linesByReplica = replicas().stream()
1:                                                                  .collect(Collectors.toMap(Function.<LogReplica>identity(),
1:                                                                                            LogReplica::readLines,
1:                                                                                            (k, v) -> {throw new IllegalStateException("Duplicated key: " + k);},
1:                                                                                            LinkedHashMap::new));
1: 
1:             for (Map.Entry<LogReplica, List<String>> entry : linesByReplica.entrySet())
/////////////////////////////////////////////////////////////////////////
1:                                  entry.getKey().getFileName(),
1:                     entry.getKey().setError(currentLine, String.format("Does not match <%s> in first replica file", firstLine));
/////////////////////////////////////////////////////////////////////////
1:                                     entry.getKey().getFileName(),
/////////////////////////////////////////////////////////////////////////
1:                                      entry.getKey().getFileName(),
1:                         entry.getKey().setError(currentLine, String.format("Does not match <%s> in first replica file", firstLine));
/////////////////////////////////////////////////////////////////////////
1:                 setError(record, "Duplicated record");
/////////////////////////////////////////////////////////////////////////
1:                 setError(record, "This record should have been the last one in all replicas");
/////////////////////////////////////////////////////////////////////////
1:     void setError(LogRecord record, String error)
1:     {
1:         record.setError(error);
1:         setErrorInReplicas(record);
1:     }
1: 
1:     void setErrorInReplicas(LogRecord record)
1:     {
1:         replicas().forEach(r -> r.setError(record.raw, record.error()));
1:     }
1: 
1:     void printContentsWithAnyErrors(StringBuilder str)
1:     {
1:         replicas().forEach(r -> r.printContentsWithAnyErrors(str));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     String getDirectories()
1:     {
1:         return String.join(", ", replicas().stream().map(LogReplica::getDirectory).collect(Collectors.toList()));
1:     }
1: 
commit:73781a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.lifecycle;
1: 
1: import java.io.File;
1: import java.util.Collection;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Optional;
1: import java.util.Set;
1: import java.util.function.Function;
1: import java.util.stream.Collectors;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.Throwables;
1: 
1: /**
1:  * A set of log replicas. This class mostly iterates over replicas when writing or reading,
1:  * ensuring consistency among them and hiding replication details from LogFile.
1:  *
0:  * @see LogReplica, LogFile
1:  */
0: public class LogReplicaSet
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(LogReplicaSet.class);
1: 
1:     private final Map<File, LogReplica> replicasByFile = new LinkedHashMap<>();
1: 
1:     private Collection<LogReplica> replicas()
1:     {
1:         return replicasByFile.values();
1:     }
1: 
1:     void addReplicas(List<File> replicas)
1:     {
1:         replicas.forEach(this::addReplica);
1:     }
1: 
1:     void addReplica(File file)
1:     {
0:         File folder = file.getParentFile();
0:         assert !replicasByFile.containsKey(folder);
0:         replicasByFile.put(folder, LogReplica.open(file));
1: 
1:         if (logger.isTraceEnabled())
1:             logger.trace("Added log file replica {} ", file);
1:     }
1: 
0:     void maybeCreateReplica(File folder, String fileName, Set<LogRecord> records)
1:     {
0:         if (replicasByFile.containsKey(folder))
1:             return;
1: 
0:         final LogReplica replica = LogReplica.create(folder, fileName);
1: 
1:         records.forEach(replica::append);
0:         replicasByFile.put(folder, replica);
1: 
1:         if (logger.isTraceEnabled())
1:             logger.trace("Created new file replica {}", replica);
1:     }
1: 
0:     Throwable syncFolder(Throwable accumulate)
1:     {
0:         return Throwables.perform(accumulate, replicas().stream().map(s -> s::syncFolder));
1:     }
1: 
1:     Throwable delete(Throwable accumulate)
1:     {
1:         return Throwables.perform(accumulate, replicas().stream().map(s -> s::delete));
1:     }
1: 
1:     private static boolean isPrefixMatch(String first, String second)
1:     {
1:         return first.length() >= second.length() ?
1:                first.startsWith(second) :
1:                second.startsWith(first);
1:     }
1: 
1:     boolean readRecords(Set<LogRecord> records)
1:     {
0:         Map<File, List<String>> linesByReplica = replicas().stream()
0:                                                            .map(LogReplica::file)
0:                                                            .collect(Collectors.toMap(Function.<File>identity(), FileUtils::readLines));
1:         int maxNumLines = linesByReplica.values().stream().map(List::size).reduce(0, Integer::max);
1:         for (int i = 0; i < maxNumLines; i++)
1:         {
1:             String firstLine = null;
1:             boolean partial = false;
0:             for (Map.Entry<File, List<String>> entry : linesByReplica.entrySet())
1:             {
1:                 List<String> currentLines = entry.getValue();
1:                 if (i >= currentLines.size())
1:                     continue;
1: 
1:                 String currentLine = currentLines.get(i);
1:                 if (firstLine == null)
1:                 {
1:                     firstLine = currentLine;
1:                     continue;
1:                 }
1: 
1:                 if (!isPrefixMatch(firstLine, currentLine))
1:                 { // not a prefix match
1:                     logger.error("Mismatched line in file {}: got '{}' expected '{}', giving up",
0:                                  entry.getKey().getName(),
1:                                  currentLine,
1:                                  firstLine);
1:                     return false;
1:                 }
1: 
1:                 if (!firstLine.equals(currentLine))
1:                 {
1:                     if (i == currentLines.size() - 1)
1:                     { // last record, just set record as invalid and move on
1:                         logger.warn("Mismatched last line in file {}: '{}' not the same as '{}'",
0:                                     entry.getKey().getName(),
1:                                     currentLine,
1:                                     firstLine);
1: 
1:                         if (currentLine.length() > firstLine.length())
1:                             firstLine = currentLine;
1: 
1:                         partial = true;
1:                     }
1:                     else
1:                     {   // mismatched entry file has more lines, giving up
1:                         logger.error("Mismatched line in file {}: got '{}' expected '{}', giving up",
0:                                      entry.getKey().getName(),
1:                                      currentLine,
1:                                      firstLine);
1:                         return false;
1:                     }
1:                 }
1:             }
1: 
1:             LogRecord record = LogRecord.make(firstLine);
1:             if (records.contains(record))
1:             { // duplicate records
1:                 logger.error("Found duplicate record {} for {}, giving up", record, record.fileName());
1:                 return false;
1:             }
1: 
1:             if (partial)
1:                 record.setPartial();
1: 
1:             records.add(record);
1: 
1:             if (record.isFinal() && i != (maxNumLines - 1))
1:             { // too many final records
1:                 logger.error("Found too many lines for {}, giving up", record.fileName());
1:                 return false;
1:             }
1:         }
1: 
1:         return true;
1:     }
1: 
1:     /**
1:      *  Add the record to all the replicas: if it is a final record then we throw only if we fail to write it
1:      *  to all, otherwise we throw if we fail to write it to any file, see CASSANDRA-10421 for details
1:      */
1:     void append(LogRecord record)
1:     {
1:         Throwable err = Throwables.perform(null, replicas().stream().map(r -> () -> r.append(record)));
1:         if (err != null)
1:         {
1:             if (!record.isFinal() || err.getSuppressed().length == replicas().size() -1)
1:                 Throwables.maybeFail(err);
1: 
1:             logger.error("Failed to add record '{}' to some replicas '{}'", record, this);
1:         }
1:     }
1: 
1:     boolean exists()
1:     {
1:         Optional<Boolean> ret = replicas().stream().map(LogReplica::exists).reduce(Boolean::logicalAnd);
1:         return ret.isPresent() ?
1:                ret.get()
1:                : false;
1:     }
1: 
0:     void close()
1:     {
1:         Throwables.maybeFail(Throwables.perform(null, replicas().stream().map(r -> r::close)));
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         Optional<String> ret = replicas().stream().map(LogReplica::toString).reduce(String::concat);
1:         return ret.isPresent() ?
1:                ret.get()
1:                : "[-]";
1:     }
1: 
1:     @VisibleForTesting
1:     List<File> getFiles()
1:     {
1:         return replicas().stream().map(LogReplica::file).collect(Collectors.toList());
1:     }
1: 
1:     @VisibleForTesting
1:     List<String> getFilePaths()
1:     {
1:         return replicas().stream().map(LogReplica::file).map(File::getPath).collect(Collectors.toList());
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  * @see LogReplica
1:  * @see LogFile
============================================================================