1:7e53db0: /*
1:7e53db0:  * Licensed to the Apache Software Foundation (ASF) under one
1:7e53db0:  * or more contributor license agreements.  See the NOTICE file
1:7e53db0:  * distributed with this work for additional information
1:7e53db0:  * regarding copyright ownership.  The ASF licenses this file
1:7e53db0:  * to you under the Apache License, Version 2.0 (the
1:7e53db0:  * "License"); you may not use this file except in compliance
1:7e53db0:  * with the License.  You may obtain a copy of the License at
1:7e53db0:  *
1:7e53db0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7e53db0:  *
1:7e53db0:  * Unless required by applicable law or agreed to in writing, software
1:7e53db0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7e53db0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7e53db0:  * See the License for the specific language governing permissions and
1:7e53db0:  * limitations under the License.
1:7e53db0:  */
1:7e53db0: package org.apache.cassandra.cql3.selection;
1:7e53db0: 
1:7e53db0: import java.nio.ByteBuffer;
1:7e53db0: import java.util.List;
1:7e53db0: 
1:7e53db0: import org.apache.cassandra.cql3.functions.Function;
1:7e53db0: import org.apache.cassandra.cql3.functions.ScalarFunction;
1:7e53db0: import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;
1:7e53db0: import org.apache.cassandra.exceptions.InvalidRequestException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:7e53db0: 
1:7e53db0: final class ScalarFunctionSelector extends AbstractFunctionSelector<ScalarFunction>
1:7e53db0: {
1:7e53db0:     public boolean isAggregate()
1:7e53db0:     {
1:7e53db0:         // We cannot just return true as it is possible to have a scalar function wrapping an aggregation function
1:7e53db0:         if (argSelectors.isEmpty())
1:7e53db0:             return false;
1:7e53db0: 
1:7e53db0:         return argSelectors.get(0).isAggregate();
2:7e53db0:     }
1:7e53db0: 
1:e0adc16:     public void addInput(ProtocolVersion protocolVersion, ResultSetBuilder rs) throws InvalidRequestException
1:7e53db0:     {
1:7e53db0:         for (int i = 0, m = argSelectors.size(); i < m; i++)
1:7e53db0:         {
1:7e53db0:             Selector s = argSelectors.get(i);
1:794d68b:             s.addInput(protocolVersion, rs);
1:7e53db0:         }
1:7e53db0:     }
1:7e53db0: 
1:7e53db0:     public void reset()
1:7e53db0:     {
1:7e53db0:     }
1:7e53db0: 
1:e0adc16:     public ByteBuffer getOutput(ProtocolVersion protocolVersion) throws InvalidRequestException
1:7e53db0:     {
1:7e53db0:         for (int i = 0, m = argSelectors.size(); i < m; i++)
1:7e53db0:         {
1:7e53db0:             Selector s = argSelectors.get(i);
1:4ed0060:             setArg(i, s.getOutput(protocolVersion));
1:7e53db0:             s.reset();
1:7e53db0:         }
1:4ed0060:         return fun.execute(protocolVersion, args());
1:7e53db0:     }
1:7e53db0: 
1:7e53db0:     ScalarFunctionSelector(Function fun, List<Selector> argSelectors)
1:7e53db0:     {
1:7e53db0:         super((ScalarFunction) fun, argSelectors);
1:4ed0060:     }
1:7e53db0: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public void addInput(ProtocolVersion protocolVersion, ResultSetBuilder rs) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer getOutput(ProtocolVersion protocolVersion) throws InvalidRequestException
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:             setArg(i, s.getOutput(protocolVersion));
1:         return fun.execute(protocolVersion, args());
1: }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:794d68b
/////////////////////////////////////////////////////////////////////////
0:     public void addInput(int protocolVersion, ResultSetBuilder rs) throws InvalidRequestException
1:             s.addInput(protocolVersion, rs);
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer getOutput(int protocolVersion) throws InvalidRequestException
0:             args.set(i, s.getOutput(protocolVersion));
0:         return fun.execute(protocolVersion, args);
author:blerer
-------------------------------------------------------------------------------
commit:7e53db0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.selection;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.cql3.functions.Function;
1: import org.apache.cassandra.cql3.functions.ScalarFunction;
1: import org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: final class ScalarFunctionSelector extends AbstractFunctionSelector<ScalarFunction>
1: {
1:     public boolean isAggregate()
1:     {
1:         // We cannot just return true as it is possible to have a scalar function wrapping an aggregation function
1:         if (argSelectors.isEmpty())
1:             return false;
1: 
1:         return argSelectors.get(0).isAggregate();
1:     }
1: 
0:     public void addInput(ResultSetBuilder rs) throws InvalidRequestException
1:     {
1:         for (int i = 0, m = argSelectors.size(); i < m; i++)
1:         {
1:             Selector s = argSelectors.get(i);
0:             s.addInput(rs);
1:         }
1:     }
1: 
1:     public void reset()
1:     {
1:     }
1: 
0:     public ByteBuffer getOutput() throws InvalidRequestException
1:     {
1:         for (int i = 0, m = argSelectors.size(); i < m; i++)
1:         {
1:             Selector s = argSelectors.get(i);
0:             args.set(i, s.getOutput());
1:             s.reset();
1:         }
0:         return fun.execute(args);
1:     }
1: 
1:     ScalarFunctionSelector(Function fun, List<Selector> argSelectors)
1:     {
1:         super((ScalarFunction) fun, argSelectors);
1:     }
1: }
============================================================================