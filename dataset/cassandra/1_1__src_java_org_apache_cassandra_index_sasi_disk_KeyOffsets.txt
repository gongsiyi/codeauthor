1:7d857b4: /*
1:7d857b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:7d857b4:  * or more contributor license agreements.  See the NOTICE file
1:7d857b4:  * distributed with this work for additional information
1:7d857b4:  * regarding copyright ownership.  The ASF licenses this file
1:7d857b4:  * to you under the Apache License, Version 2.0 (the
1:7d857b4:  * "License"); you may not use this file except in compliance
1:7d857b4:  * with the License.  You may obtain a copy of the License at
1:7d857b4:  *
1:7d857b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7d857b4:  *
1:7d857b4:  * Unless required by applicable law or agreed to in writing, software
1:7d857b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d857b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d857b4:  * See the License for the specific language governing permissions and
1:7d857b4:  * limitations under the License.
1:7d857b4:  */
1:7d857b4: 
1:7d857b4: package org.apache.cassandra.index.sasi.disk;
1:7d857b4: 
1:7d857b4: import java.util.*;
1:7d857b4: 
1:7d857b4: import org.apache.commons.lang3.ArrayUtils;
1:7d857b4: 
1:7d857b4: import com.carrotsearch.hppc.LongObjectOpenHashMap;
1:7d857b4: import com.carrotsearch.hppc.cursors.LongObjectCursor;
1:7d857b4: 
1:7d857b4: public class KeyOffsets extends LongObjectOpenHashMap<long[]>
1:7d857b4: {
1:7d857b4:     public static final long NO_OFFSET = Long.MIN_VALUE;
1:7d857b4: 
1:7d857b4:     public KeyOffsets() {
1:7d857b4:         super(4);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public KeyOffsets(int initialCapacity) {
1:7d857b4:         super(initialCapacity);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public void put(long currentPartitionOffset, long currentRowOffset)
1:7d857b4:     {
1:7d857b4:         if (containsKey(currentPartitionOffset))
1:7d857b4:             super.put(currentPartitionOffset, append(get(currentPartitionOffset), currentRowOffset));
1:7d857b4:         else
1:7d857b4:             super.put(currentPartitionOffset, asArray(currentRowOffset));
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public long[] put(long currentPartitionOffset, long[] currentRowOffset)
1:7d857b4:     {
1:7d857b4:         if (containsKey(currentPartitionOffset))
1:7d857b4:             return super.put(currentPartitionOffset, merge(get(currentPartitionOffset), currentRowOffset));
1:7d857b4:         else
1:7d857b4:             return super.put(currentPartitionOffset, currentRowOffset);
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public boolean equals(Object obj)
1:7d857b4:     {
1:7d857b4:         if (!(obj instanceof KeyOffsets))
1:7d857b4:             return false;
1:7d857b4: 
1:7d857b4:         KeyOffsets other = (KeyOffsets) obj;
1:7d857b4:         if (other.size() != this.size())
1:7d857b4:             return false;
1:7d857b4: 
1:7d857b4:         for (LongObjectCursor<long[]> cursor : this)
1:7d857b4:             if (!Arrays.equals(cursor.value, other.get(cursor.key)))
1:7d857b4:                 return false;
1:7d857b4: 
1:7d857b4:         return true;
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     @Override
1:7d857b4:     public String toString()
1:7d857b4:     {
1:7d857b4:         StringBuilder sb = new StringBuilder("KeyOffsets { ");
1:7d857b4:         forEach((a, b) -> {
1:7d857b4:             sb.append(a).append(": ").append(Arrays.toString(b));
1:7d857b4:         });
1:7d857b4:         sb.append(" }");
1:7d857b4:         return sb.toString();
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     // primitive array creation
1:7d857b4:     public static long[] asArray(long... vals)
1:7d857b4:     {
1:7d857b4:         return vals;
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     private static long[] merge(long[] arr1, long[] arr2)
1:7d857b4:     {
1:7d857b4:         long[] copy = new long[arr2.length];
1:7d857b4:         int written = 0;
1:7d857b4:         for (long l : arr2)
1:7d857b4:         {
1:7d857b4:             if (!ArrayUtils.contains(arr1, l))
1:7d857b4:                 copy[written++] = l;
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         if (written == 0)
1:7d857b4:             return arr1;
1:7d857b4: 
1:7d857b4:         long[] merged = new long[arr1.length + written];
1:7d857b4:         System.arraycopy(arr1, 0, merged, 0, arr1.length);
1:7d857b4:         System.arraycopy(copy, 0, merged, arr1.length, written);
1:7d857b4:         return merged;
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     private static long[] append(long[] arr1, long v)
1:7d857b4:     {
1:7d857b4:         if (ArrayUtils.contains(arr1, v))
1:7d857b4:             return arr1;
1:7d857b4:         else
1:7d857b4:             return ArrayUtils.add(arr1, v);
1:7d857b4:     }
1:7d857b4: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.disk;
1: 
1: import java.util.*;
1: 
1: import org.apache.commons.lang3.ArrayUtils;
1: 
1: import com.carrotsearch.hppc.LongObjectOpenHashMap;
1: import com.carrotsearch.hppc.cursors.LongObjectCursor;
1: 
1: public class KeyOffsets extends LongObjectOpenHashMap<long[]>
1: {
1:     public static final long NO_OFFSET = Long.MIN_VALUE;
1: 
1:     public KeyOffsets() {
1:         super(4);
1:     }
1: 
1:     public KeyOffsets(int initialCapacity) {
1:         super(initialCapacity);
1:     }
1: 
1:     public void put(long currentPartitionOffset, long currentRowOffset)
1:     {
1:         if (containsKey(currentPartitionOffset))
1:             super.put(currentPartitionOffset, append(get(currentPartitionOffset), currentRowOffset));
1:         else
1:             super.put(currentPartitionOffset, asArray(currentRowOffset));
1:     }
1: 
1:     public long[] put(long currentPartitionOffset, long[] currentRowOffset)
1:     {
1:         if (containsKey(currentPartitionOffset))
1:             return super.put(currentPartitionOffset, merge(get(currentPartitionOffset), currentRowOffset));
1:         else
1:             return super.put(currentPartitionOffset, currentRowOffset);
1:     }
1: 
1:     public boolean equals(Object obj)
1:     {
1:         if (!(obj instanceof KeyOffsets))
1:             return false;
1: 
1:         KeyOffsets other = (KeyOffsets) obj;
1:         if (other.size() != this.size())
1:             return false;
1: 
1:         for (LongObjectCursor<long[]> cursor : this)
1:             if (!Arrays.equals(cursor.value, other.get(cursor.key)))
1:                 return false;
1: 
1:         return true;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder("KeyOffsets { ");
1:         forEach((a, b) -> {
1:             sb.append(a).append(": ").append(Arrays.toString(b));
1:         });
1:         sb.append(" }");
1:         return sb.toString();
1:     }
1: 
1:     // primitive array creation
1:     public static long[] asArray(long... vals)
1:     {
1:         return vals;
1:     }
1: 
1:     private static long[] merge(long[] arr1, long[] arr2)
1:     {
1:         long[] copy = new long[arr2.length];
1:         int written = 0;
1:         for (long l : arr2)
1:         {
1:             if (!ArrayUtils.contains(arr1, l))
1:                 copy[written++] = l;
1:         }
1: 
1:         if (written == 0)
1:             return arr1;
1: 
1:         long[] merged = new long[arr1.length + written];
1:         System.arraycopy(arr1, 0, merged, 0, arr1.length);
1:         System.arraycopy(copy, 0, merged, arr1.length, written);
1:         return merged;
1:     }
1: 
1:     private static long[] append(long[] arr1, long v)
1:     {
1:         if (ArrayUtils.contains(arr1, v))
1:             return arr1;
1:         else
1:             return ArrayUtils.add(arr1, v);
1:     }
1: }
============================================================================