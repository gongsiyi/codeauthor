1:1c62850: /*
1:1c62850:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c62850:  * or more contributor license agreements.  See the NOTICE file
1:1c62850:  * distributed with this work for additional information
1:1c62850:  * regarding copyright ownership.  The ASF licenses this file
1:1c62850:  * to you under the Apache License, Version 2.0 (the
1:1c62850:  * "License"); you may not use this file except in compliance
1:1c62850:  * with the License.  You may obtain a copy of the License at
1:1c62850:  *
1:1c62850:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c62850:  *
1:1c62850:  * Unless required by applicable law or agreed to in writing,
1:1c62850:  * software distributed under the License is distributed on an
1:1c62850:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c62850:  * KIND, either express or implied.  See the License for the
1:1c62850:  * specific language governing permissions and limitations
1:1c62850:  * under the License.
1:1c62850:  */
1:1c62850: package org.apache.cassandra.utils.btree;
1:1c62850: 
1:1c62850: import java.util.Arrays;
1:1c62850: import java.util.Comparator;
1:1c62850: 
1:1c62850: public class BTreeRemoval
1:1c62850: {
1:1c62850:     /**
1:1c62850:      * Remove |elem| from |btree|. If it's not present then return |btree| itself.
1:1c62850:      */
1:1c62850:     public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem)
1:1c62850:     {
1:1c62850:         if (BTree.isEmpty(btree))
1:1c62850:             return btree;
1:1c62850:         int index = -1;
1:1c62850:         V elemToSwap = null;
1:1c62850:         int lb = 0;
1:1c62850:         Object[] node = btree;
1:1c62850:         while (true)
1:1c62850:         {
1:1c62850:             int keyEnd = BTree.getKeyEnd(node);
1:1c62850:             int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator);
1:1c62850: 
1:1c62850:             if (i >= 0)
1:1c62850:             {
1:1c62850:                 if (BTree.isLeaf(node))
1:1c62850:                     index = lb + i;
1:1c62850:                 else
1:1c62850:                 {
1:1c62850:                     final int indexInNode = BTree.getSizeMap(node)[i];
1:1c62850:                     index = lb + indexInNode - 1;
1:1c62850:                     elemToSwap = BTree.findByIndex(node, indexInNode - 1);
1:1c62850:                 }
1:1c62850:                 break;
1:1c62850:             }
1:1c62850:             if (BTree.isLeaf(node))
1:1c62850:                 return btree;
1:1c62850: 
1:1c62850:             i = -1 - i;
1:1c62850:             if (i > 0)
1:1c62850:                 lb += BTree.getSizeMap(node)[i - 1] + 1;
1:1c62850: 
1:1c62850:             node = (Object[]) node[keyEnd + i];
1:1c62850:         }
1:1c62850:         if (BTree.size(btree) == 1)
1:1c62850:             return BTree.empty();
1:1c62850:         Object[] result = removeFromLeaf(btree, index);
1:1c62850:         if (elemToSwap != null)
1:1c62850:             BTree.replaceInSitu(result, index, elemToSwap);
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     /**
1:1c62850:      * Remove |elem| from |btree|. It has to be present and it has to reside in a leaf node.
1:1c62850:      */
1:ffcb0be:     private static Object[] removeFromLeaf(Object[] node, int index)
1:1c62850:     {
1:1c62850:         Object[] result = null;
1:1c62850:         Object[] prevNode = null;
1:1c62850:         int prevI = -1;
1:1c62850:         boolean needsCopy = true;
1:1c62850:         while (!BTree.isLeaf(node))
1:1c62850:         {
1:1c62850:             final int keyEnd = BTree.getBranchKeyEnd(node);
1:1c62850:             int i = -1 - Arrays.binarySearch(BTree.getSizeMap(node), index);
1:1c62850:             if (i > 0)
1:1c62850:                 index -= (1 + BTree.getSizeMap(node)[i - 1]);
1:1c62850:             Object[] nextNode = (Object[]) node[keyEnd + i];
1:1c62850:             boolean nextNodeNeedsCopy = true;
1:1c62850:             if (BTree.getKeyEnd(nextNode) > BTree.MINIMAL_NODE_SIZE)
1:1c62850:                 node = copyIfNeeded(node, needsCopy);
1:1c62850:             else if (i > 0 && BTree.getKeyEnd((Object[]) node[keyEnd + i - 1]) > BTree.MINIMAL_NODE_SIZE)
1:1c62850:             {
1:1c62850:                 node = copyIfNeeded(node, needsCopy);
1:1c62850:                 final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
1:1c62850:                 index++;
1:1c62850:                 if (!BTree.isLeaf(leftNeighbour))
1:1c62850:                     index += BTree.size((Object[])leftNeighbour[BTree.getChildEnd(leftNeighbour) - 1]);
1:1c62850:                 nextNode = rotateLeft(node, i);
1:1c62850:             }
1:1c62850:             else if (i < keyEnd && BTree.getKeyEnd((Object[]) node[keyEnd + i + 1]) > BTree.MINIMAL_NODE_SIZE)
1:1c62850:             {
1:1c62850:                 node = copyIfNeeded(node, needsCopy);
1:1c62850:                 nextNode = rotateRight(node, i);
1:1c62850:             }
1:1c62850:             else
1:1c62850:             {
1:1c62850:                 nextNodeNeedsCopy = false;
1:1c62850:                 if (i > 0)
1:1c62850:                 {
1:1c62850:                     final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
1:ffcb0be:                     final Object nodeKey = node[i - 1];
1:1c62850:                     node = keyEnd == 1 ? null : copyWithKeyAndChildRemoved(node, i - 1, i - 1, false);
1:1c62850:                     nextNode = merge(leftNeighbour, nextNode, nodeKey);
1:1c62850:                     i = i - 1;
1:1c62850:                     index += BTree.size(leftNeighbour) + 1;
1:1c62850:                 }
1:1c62850:                 else
1:1c62850:                 {
1:1c62850:                     final Object[] rightNeighbour = (Object[]) node[keyEnd + i + 1];
1:ffcb0be:                     final Object nodeKey = node[i];
1:1c62850:                     node = keyEnd == 1 ? null : copyWithKeyAndChildRemoved(node, i, i, false);
1:1c62850:                     nextNode = merge(nextNode, rightNeighbour, nodeKey);
1:1c62850:                 }
1:1c62850:             }
1:1c62850: 
1:1c62850:             if (node != null)
1:1c62850:             {
1:1c62850:                 final int[] sizeMap = BTree.getSizeMap(node);
1:1c62850:                 for (int j = i; j < sizeMap.length; ++j)
1:1c62850:                     sizeMap[j] -= 1;
1:1c62850:                 if (prevNode != null)
1:1c62850:                     prevNode[prevI] = node;
1:1c62850:                 else
1:1c62850:                     result = node;
1:1c62850:                 prevNode = node;
1:1c62850:                 prevI = BTree.getChildStart(node) + i;
1:1c62850:             }
1:1c62850: 
1:1c62850:             node = nextNode;
1:1c62850:             needsCopy = nextNodeNeedsCopy;
1:1c62850:         }
1:1c62850:         final int keyEnd = BTree.getLeafKeyEnd(node);
1:1c62850:         final Object[] newLeaf = new Object[(keyEnd & 1) == 1 ? keyEnd : keyEnd - 1];
1:1c62850:         copyKeys(node, newLeaf, 0, index);
1:1c62850:         if (prevNode != null)
1:1c62850:             prevNode[prevI] = newLeaf;
1:1c62850:         else
1:1c62850:             result = newLeaf;
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:68d2526:     private static Object[] rotateRight(final Object[] node, final int i)
1:68d2526:     {
1:1c62850:         final int keyEnd = BTree.getBranchKeyEnd(node);
1:1c62850:         final Object[] nextNode = (Object[]) node[keyEnd + i];
1:1c62850:         final Object[] rightNeighbour = (Object[]) node[keyEnd + i + 1];
1:1c62850:         final boolean leaves = BTree.isLeaf(nextNode);
1:1c62850:         final int nextKeyEnd = BTree.getKeyEnd(nextNode);
1:1c62850:         final Object[] newChild = leaves ? null : (Object[]) rightNeighbour[BTree.getChildStart(rightNeighbour)];
1:1c62850:         final Object[] newNextNode =
1:1c62850:                 copyWithKeyAndChildInserted(nextNode, nextKeyEnd, node[i], BTree.getChildCount(nextNode), newChild);
1:1c62850:         node[i] = rightNeighbour[0];
1:1c62850:         node[keyEnd + i + 1] = copyWithKeyAndChildRemoved(rightNeighbour, 0, 0, true);
1:1c62850:         BTree.getSizeMap(node)[i] +=
1:1c62850:                 leaves ? 1 : 1 + BTree.size((Object[]) newNextNode[BTree.getChildEnd(newNextNode) - 1]);
1:1c62850:         return newNextNode;
1:1c62850:     }
1:1c62850: 
1:68d2526:     private static Object[] rotateLeft(final Object[] node, final int i)
1:68d2526:     {
1:1c62850:         final int keyEnd = BTree.getBranchKeyEnd(node);
1:1c62850:         final Object[] nextNode = (Object[]) node[keyEnd + i];
1:1c62850:         final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
1:1c62850:         final int leftNeighbourEndKey = BTree.getKeyEnd(leftNeighbour);
1:1c62850:         final boolean leaves = BTree.isLeaf(nextNode);
1:1c62850:         final Object[] newChild = leaves ? null : (Object[]) leftNeighbour[BTree.getChildEnd(leftNeighbour) - 1];
1:1c62850:         final Object[] newNextNode = copyWithKeyAndChildInserted(nextNode, 0, node[i - 1], 0, newChild);
1:1c62850:         node[i - 1] = leftNeighbour[leftNeighbourEndKey - 1];
1:1c62850:         node[keyEnd + i - 1] = copyWithKeyAndChildRemoved(leftNeighbour, leftNeighbourEndKey - 1, leftNeighbourEndKey, true);
1:1c62850:         BTree.getSizeMap(node)[i - 1] -= leaves ? 1 : 1 + BTree.getSizeMap(newNextNode)[0];
1:1c62850:         return newNextNode;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static <V> Object[] copyWithKeyAndChildInserted(final Object[] node, final int keyIndex, final V key, final int childIndex, final Object[] child)
1:1c62850:     {
1:1c62850:         final boolean leaf = BTree.isLeaf(node);
2:1c62850:         final int keyEnd = BTree.getKeyEnd(node);
1:1c62850:         final Object[] copy;
1:1c62850:         if (leaf)
1:1c62850:             copy = new Object[keyEnd + ((keyEnd & 1) == 1 ? 2 : 1)];
1:1c62850:         else
1:1c62850:             copy = new Object[node.length + 2];
1:1c62850: 
1:1c62850:         if (keyIndex > 0)
1:1c62850:             System.arraycopy(node, 0, copy, 0, keyIndex);
1:1c62850:         copy[keyIndex] = key;
1:1c62850:         if (keyIndex < keyEnd)
1:1c62850:             System.arraycopy(node, keyIndex, copy, keyIndex + 1, keyEnd - keyIndex);
1:1c62850: 
1:1c62850:         if (!leaf)
1:1c62850:         {
1:1c62850:             if (childIndex > 0)
1:1c62850:                 System.arraycopy(node,
1:1c62850:                                  BTree.getChildStart(node),
1:1c62850:                                  copy,
1:1c62850:                                  keyEnd + 1,
1:1c62850:                                  childIndex);
1:1c62850:             copy[keyEnd + 1 + childIndex] = child;
1:1c62850:             if (childIndex <= keyEnd)
1:1c62850:                 System.arraycopy(node,
1:1c62850:                                  BTree.getChildStart(node) + childIndex,
1:1c62850:                                  copy,
1:1c62850:                                  keyEnd + childIndex + 2,
1:1c62850:                                  keyEnd - childIndex + 1);
1:1c62850:             final int[] sizeMap = BTree.getSizeMap(node);
1:1c62850:             final int[] newSizeMap = new int[sizeMap.length + 1];
1:1c62850:             if (childIndex > 0)
1:1c62850:                 System.arraycopy(sizeMap, 0, newSizeMap, 0, childIndex);
1:1c62850:             final int childSize = BTree.size(child);
1:1c62850:             newSizeMap[childIndex] = childSize + ((childIndex == 0) ? 0 : newSizeMap[childIndex - 1] + 1);
1:1c62850:             for (int i = childIndex + 1; i < newSizeMap.length; ++i)
1:1c62850:                 newSizeMap[i] = sizeMap[i - 1] + childSize + 1;
1:1c62850:             copy[copy.length - 1] = newSizeMap;
1:1c62850:         }
1:1c62850:         return copy;
1:1c62850:     }
1:1c62850: 
1:ffcb0be:     private static Object[] copyWithKeyAndChildRemoved(final Object[] node, final int keyIndex, final int childIndex, final boolean substractSize)
1:1c62850:     {
1:1c62850:         final boolean leaf = BTree.isLeaf(node);
1:1c62850:         final Object[] newNode;
1:1c62850:         if (leaf)
1:7b42636:         {
1:7b42636:             final int keyEnd = BTree.getKeyEnd(node);
1:1c62850:             newNode = new Object[keyEnd - ((keyEnd & 1) == 1 ? 0 : 1)];
1:7b42636:         }
1:1c62850:         else
1:7b42636:         {
1:1c62850:             newNode = new Object[node.length - 2];
1:7b42636:         }
1:1c62850:         int offset = copyKeys(node, newNode, 0, keyIndex);
1:1c62850:         if (!leaf)
1:1c62850:         {
1:1c62850:             offset = copyChildren(node, newNode, offset, childIndex);
1:1c62850:             final int[] nodeSizeMap = BTree.getSizeMap(node);
1:1c62850:             final int[] newNodeSizeMap = new int[nodeSizeMap.length - 1];
1:1c62850:             int pos = 0;
1:1c62850:             final int sizeToRemove = BTree.size((Object[])node[BTree.getChildStart(node) + childIndex]) + 1;
1:1c62850:             for (int i = 0; i < nodeSizeMap.length; ++i)
1:1c62850:                 if (i != childIndex)
1:1c62850:                     newNodeSizeMap[pos++] = nodeSizeMap[i] -
1:1c62850:                         ((substractSize && i > childIndex) ? sizeToRemove : 0);
1:1c62850:             newNode[offset] = newNodeSizeMap;
1:1c62850:         }
1:1c62850:         return newNode;
1:1c62850:     }
1:1c62850: 
1:68d2526:     private static <V> Object[] merge(final Object[] left, final Object[] right, final V nodeKey)
1:68d2526:     {
1:1c62850:         assert BTree.getKeyEnd(left) == BTree.MINIMAL_NODE_SIZE;
1:1c62850:         assert BTree.getKeyEnd(right) == BTree.MINIMAL_NODE_SIZE;
1:1c62850:         final boolean leaves = BTree.isLeaf(left);
1:1c62850:         final Object[] result;
1:1c62850:         if (leaves)
1:1c62850:             result = new Object[BTree.MINIMAL_NODE_SIZE * 2 + 1];
1:1c62850:         else
1:1c62850:             result = new Object[left.length + right.length];
1:1c62850:         int offset = 0;
1:1c62850:         offset = copyKeys(left, result, offset);
1:1c62850:         result[offset++] = nodeKey;
1:1c62850:         offset = copyKeys(right, result, offset);
1:1c62850:         if (!leaves)
1:1c62850:         {
1:1c62850:             offset = copyChildren(left, result, offset);
1:1c62850:             offset = copyChildren(right, result, offset);
1:1c62850:             final int[] leftSizeMap = BTree.getSizeMap(left);
1:1c62850:             final int[] rightSizeMap = BTree.getSizeMap(right);
1:1c62850:             final int[] newSizeMap = new int[leftSizeMap.length + rightSizeMap.length];
1:1c62850:             offset = 0;
1:1c62850:             offset = copySizeMap(leftSizeMap, newSizeMap, offset, 0);
1:1c62850:             offset = copySizeMap(rightSizeMap, newSizeMap, offset, leftSizeMap[leftSizeMap.length - 1] + 1);
1:1c62850:             result[result.length - 1] = newSizeMap;
1:1c62850:         }
1:1c62850:         return result;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static int copyKeys(final Object[] from, final Object[] to, final int offset)
1:1c62850:     {
1:1c62850:         final int keysCount = BTree.getKeyEnd(from);
1:1c62850:         System.arraycopy(from, 0, to, offset, keysCount);
1:1c62850:         return offset + keysCount;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static int copyKeys(final Object[] from, final Object[] to, final int offset, final int skipIndex)
1:1c62850:     {
1:1c62850:         final int keysCount = BTree.getKeyEnd(from);
1:1c62850:         if (skipIndex > 0)
1:1c62850:             System.arraycopy(from, 0, to, offset, skipIndex);
1:1c62850:         if (skipIndex + 1 < keysCount)
1:1c62850:             System.arraycopy(from, skipIndex + 1, to, offset + skipIndex, keysCount - skipIndex - 1);
1:1c62850:         return offset + keysCount - 1;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static int copyChildren(final Object[] from, final Object[] to, final int offset)
1:1c62850:     {
1:1c62850:         assert !BTree.isLeaf(from);
1:1c62850:         final int start = BTree.getChildStart(from);
1:1c62850:         final int childCount = BTree.getChildCount(from);
1:1c62850:         System.arraycopy(from, start, to, offset, childCount);
1:1c62850:         return offset + childCount;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static int copyChildren(final Object[] from, final Object[] to, final int offset, final int skipIndex)
1:1c62850:     {
1:1c62850:         assert !BTree.isLeaf(from);
1:1c62850:         final int start = BTree.getChildStart(from);
1:1c62850:         final int childCount = BTree.getChildCount(from);
1:1c62850:         if (skipIndex > 0)
1:1c62850:             System.arraycopy(from, start, to, offset, skipIndex);
1:1c62850:         if (skipIndex + 1 <= childCount)
1:1c62850:             System.arraycopy(from, start + skipIndex + 1, to, offset + skipIndex, childCount - skipIndex - 1);
1:1c62850:         return offset + childCount - 1;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static int copySizeMap(final int[] from, final int[] to, final int offset, final int extra)
1:1c62850:     {
1:1c62850:         for (int i = 0; i < from.length; ++i)
1:1c62850:             to[offset + i] = from[i] + extra;
1:1c62850:         return offset + from.length;
1:1c62850:     }
1:1c62850: 
1:1c62850:     private static Object[] copyIfNeeded(final Object[] node, boolean needCopy)
1:1c62850:     {
1:1c62850:         if (!needCopy) return node;
1:1c62850:         final Object[] copy = new Object[node.length];
1:1c62850:         System.arraycopy(node, 0, copy, 0, node.length);
1:1c62850:         if (!BTree.isLeaf(node))
1:1c62850:         {
1:1c62850:             final int[] sizeMap = BTree.getSizeMap(node);
1:1c62850:             final int[] copySizeMap = new int[sizeMap.length];
1:1c62850:             System.arraycopy(sizeMap, 0, copySizeMap, 0, sizeMap.length);
1:1c62850:             copy[copy.length - 1] = copySizeMap;
1:1c62850:         }
1:1c62850:         return copy;
1:1c62850:     }
1:1c62850: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     private static Object[] rotateRight(final Object[] node, final int i)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     private static Object[] rotateLeft(final Object[] node, final int i)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     private static <V> Object[] merge(final Object[] left, final Object[] right, final V nodeKey)
1:     {
commit:7b42636
/////////////////////////////////////////////////////////////////////////
1:         {
1:             final int keyEnd = BTree.getKeyEnd(node);
1:         }
1:         {
1:         }
commit:ffcb0be
/////////////////////////////////////////////////////////////////////////
1:     private static Object[] removeFromLeaf(Object[] node, int index)
/////////////////////////////////////////////////////////////////////////
1:                     final Object nodeKey = node[i - 1];
/////////////////////////////////////////////////////////////////////////
1:                     final Object nodeKey = node[i];
/////////////////////////////////////////////////////////////////////////
0:     private static Object[] rotateRight(final Object[] node, final int i) {
/////////////////////////////////////////////////////////////////////////
1:     private static Object[] copyWithKeyAndChildRemoved(final Object[] node, final int keyIndex, final int childIndex, final boolean substractSize)
author:Piotr Jastrzebski
-------------------------------------------------------------------------------
commit:1c62850
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.utils.btree;
1: 
1: import java.util.Arrays;
1: import java.util.Comparator;
1: 
1: public class BTreeRemoval
1: {
1:     /**
1:      * Remove |elem| from |btree|. If it's not present then return |btree| itself.
1:      */
1:     public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem)
1:     {
1:         if (BTree.isEmpty(btree))
1:             return btree;
1:         int index = -1;
1:         V elemToSwap = null;
1:         int lb = 0;
1:         Object[] node = btree;
1:         while (true)
1:         {
1:             int keyEnd = BTree.getKeyEnd(node);
1:             int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator);
1: 
1:             if (i >= 0)
1:             {
1:                 if (BTree.isLeaf(node))
1:                     index = lb + i;
1:                 else
1:                 {
1:                     final int indexInNode = BTree.getSizeMap(node)[i];
1:                     index = lb + indexInNode - 1;
1:                     elemToSwap = BTree.findByIndex(node, indexInNode - 1);
1:                 }
1:                 break;
1:             }
1:             if (BTree.isLeaf(node))
1:                 return btree;
1: 
1:             i = -1 - i;
1:             if (i > 0)
1:                 lb += BTree.getSizeMap(node)[i - 1] + 1;
1: 
1:             node = (Object[]) node[keyEnd + i];
1:         }
1:         if (BTree.size(btree) == 1)
1:             return BTree.empty();
1:         Object[] result = removeFromLeaf(btree, index);
1:         if (elemToSwap != null)
1:             BTree.replaceInSitu(result, index, elemToSwap);
1:         return result;
1:     }
1: 
1:     /**
1:      * Remove |elem| from |btree|. It has to be present and it has to reside in a leaf node.
1:      */
0:     private static <V> Object[] removeFromLeaf(Object[] node, int index)
1:     {
1:         Object[] result = null;
1:         Object[] prevNode = null;
1:         int prevI = -1;
1:         boolean needsCopy = true;
1:         while (!BTree.isLeaf(node))
1:         {
1:             final int keyEnd = BTree.getBranchKeyEnd(node);
1:             int i = -1 - Arrays.binarySearch(BTree.getSizeMap(node), index);
1:             if (i > 0)
1:                 index -= (1 + BTree.getSizeMap(node)[i - 1]);
1:             Object[] nextNode = (Object[]) node[keyEnd + i];
1:             boolean nextNodeNeedsCopy = true;
1:             if (BTree.getKeyEnd(nextNode) > BTree.MINIMAL_NODE_SIZE)
1:                 node = copyIfNeeded(node, needsCopy);
1:             else if (i > 0 && BTree.getKeyEnd((Object[]) node[keyEnd + i - 1]) > BTree.MINIMAL_NODE_SIZE)
1:             {
1:                 node = copyIfNeeded(node, needsCopy);
1:                 final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
1:                 index++;
1:                 if (!BTree.isLeaf(leftNeighbour))
1:                     index += BTree.size((Object[])leftNeighbour[BTree.getChildEnd(leftNeighbour) - 1]);
1:                 nextNode = rotateLeft(node, i);
1:             }
1:             else if (i < keyEnd && BTree.getKeyEnd((Object[]) node[keyEnd + i + 1]) > BTree.MINIMAL_NODE_SIZE)
1:             {
1:                 node = copyIfNeeded(node, needsCopy);
1:                 nextNode = rotateRight(node, i);
1:             }
1:             else
1:             {
1:                 nextNodeNeedsCopy = false;
1:                 if (i > 0)
1:                 {
1:                     final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
0:                     final V nodeKey = (V) node[i - 1];
1:                     node = keyEnd == 1 ? null : copyWithKeyAndChildRemoved(node, i - 1, i - 1, false);
1:                     nextNode = merge(leftNeighbour, nextNode, nodeKey);
1:                     i = i - 1;
1:                     index += BTree.size(leftNeighbour) + 1;
1:                 }
1:                 else
1:                 {
1:                     final Object[] rightNeighbour = (Object[]) node[keyEnd + i + 1];
0:                     final V nodeKey = (V) node[i];
1:                     node = keyEnd == 1 ? null : copyWithKeyAndChildRemoved(node, i, i, false);
1:                     nextNode = merge(nextNode, rightNeighbour, nodeKey);
1:                 }
1:             }
1: 
1:             if (node != null)
1:             {
1:                 final int[] sizeMap = BTree.getSizeMap(node);
1:                 for (int j = i; j < sizeMap.length; ++j)
1:                     sizeMap[j] -= 1;
1:                 if (prevNode != null)
1:                     prevNode[prevI] = node;
1:                 else
1:                     result = node;
1:                 prevNode = node;
1:                 prevI = BTree.getChildStart(node) + i;
1:             }
1: 
1:             node = nextNode;
1:             needsCopy = nextNodeNeedsCopy;
1:         }
1:         final int keyEnd = BTree.getLeafKeyEnd(node);
1:         final Object[] newLeaf = new Object[(keyEnd & 1) == 1 ? keyEnd : keyEnd - 1];
1:         copyKeys(node, newLeaf, 0, index);
1:         if (prevNode != null)
1:             prevNode[prevI] = newLeaf;
1:         else
1:             result = newLeaf;
1:         return result;
1:     }
1: 
0:     private static <V> Object[] rotateRight(final Object[] node, final int i) {
1:         final int keyEnd = BTree.getBranchKeyEnd(node);
1:         final Object[] nextNode = (Object[]) node[keyEnd + i];
1:         final Object[] rightNeighbour = (Object[]) node[keyEnd + i + 1];
1:         final boolean leaves = BTree.isLeaf(nextNode);
1:         final int nextKeyEnd = BTree.getKeyEnd(nextNode);
1:         final Object[] newChild = leaves ? null : (Object[]) rightNeighbour[BTree.getChildStart(rightNeighbour)];
1:         final Object[] newNextNode =
1:                 copyWithKeyAndChildInserted(nextNode, nextKeyEnd, node[i], BTree.getChildCount(nextNode), newChild);
1:         node[i] = rightNeighbour[0];
1:         node[keyEnd + i + 1] = copyWithKeyAndChildRemoved(rightNeighbour, 0, 0, true);
1:         BTree.getSizeMap(node)[i] +=
1:                 leaves ? 1 : 1 + BTree.size((Object[]) newNextNode[BTree.getChildEnd(newNextNode) - 1]);
1:         return newNextNode;
1:     }
1: 
0:     private static Object[] rotateLeft(final Object[] node, final int i) {
1:         final int keyEnd = BTree.getBranchKeyEnd(node);
1:         final Object[] nextNode = (Object[]) node[keyEnd + i];
1:         final Object[] leftNeighbour = (Object[]) node[keyEnd + i - 1];
1:         final int leftNeighbourEndKey = BTree.getKeyEnd(leftNeighbour);
1:         final boolean leaves = BTree.isLeaf(nextNode);
1:         final Object[] newChild = leaves ? null : (Object[]) leftNeighbour[BTree.getChildEnd(leftNeighbour) - 1];
1:         final Object[] newNextNode = copyWithKeyAndChildInserted(nextNode, 0, node[i - 1], 0, newChild);
1:         node[i - 1] = leftNeighbour[leftNeighbourEndKey - 1];
1:         node[keyEnd + i - 1] = copyWithKeyAndChildRemoved(leftNeighbour, leftNeighbourEndKey - 1, leftNeighbourEndKey, true);
1:         BTree.getSizeMap(node)[i - 1] -= leaves ? 1 : 1 + BTree.getSizeMap(newNextNode)[0];
1:         return newNextNode;
1:     }
1: 
1:     private static <V> Object[] copyWithKeyAndChildInserted(final Object[] node, final int keyIndex, final V key, final int childIndex, final Object[] child)
1:     {
1:         final boolean leaf = BTree.isLeaf(node);
1:         final int keyEnd = BTree.getKeyEnd(node);
1:         final Object[] copy;
1:         if (leaf)
1:             copy = new Object[keyEnd + ((keyEnd & 1) == 1 ? 2 : 1)];
1:         else
1:             copy = new Object[node.length + 2];
1: 
1:         if (keyIndex > 0)
1:             System.arraycopy(node, 0, copy, 0, keyIndex);
1:         copy[keyIndex] = key;
1:         if (keyIndex < keyEnd)
1:             System.arraycopy(node, keyIndex, copy, keyIndex + 1, keyEnd - keyIndex);
1: 
1:         if (!leaf)
1:         {
1:             if (childIndex > 0)
1:                 System.arraycopy(node,
1:                                  BTree.getChildStart(node),
1:                                  copy,
1:                                  keyEnd + 1,
1:                                  childIndex);
1:             copy[keyEnd + 1 + childIndex] = child;
1:             if (childIndex <= keyEnd)
1:                 System.arraycopy(node,
1:                                  BTree.getChildStart(node) + childIndex,
1:                                  copy,
1:                                  keyEnd + childIndex + 2,
1:                                  keyEnd - childIndex + 1);
1:             final int[] sizeMap = BTree.getSizeMap(node);
1:             final int[] newSizeMap = new int[sizeMap.length + 1];
1:             if (childIndex > 0)
1:                 System.arraycopy(sizeMap, 0, newSizeMap, 0, childIndex);
1:             final int childSize = BTree.size(child);
1:             newSizeMap[childIndex] = childSize + ((childIndex == 0) ? 0 : newSizeMap[childIndex - 1] + 1);
1:             for (int i = childIndex + 1; i < newSizeMap.length; ++i)
1:                 newSizeMap[i] = sizeMap[i - 1] + childSize + 1;
1:             copy[copy.length - 1] = newSizeMap;
1:         }
1:         return copy;
1:     }
1: 
0:     private static <V> Object[] copyWithKeyAndChildRemoved(final Object[] node, final int keyIndex, final int childIndex, final boolean substractSize)
1:     {
1:         final boolean leaf = BTree.isLeaf(node);
1:         final int keyEnd = BTree.getKeyEnd(node);
1:         final Object[] newNode;
1:         if (leaf)
1:             newNode = new Object[keyEnd - ((keyEnd & 1) == 1 ? 0 : 1)];
1:         else
1:             newNode = new Object[node.length - 2];
1:         int offset = copyKeys(node, newNode, 0, keyIndex);
1:         if (!leaf)
1:         {
1:             offset = copyChildren(node, newNode, offset, childIndex);
1:             final int[] nodeSizeMap = BTree.getSizeMap(node);
1:             final int[] newNodeSizeMap = new int[nodeSizeMap.length - 1];
1:             int pos = 0;
1:             final int sizeToRemove = BTree.size((Object[])node[BTree.getChildStart(node) + childIndex]) + 1;
1:             for (int i = 0; i < nodeSizeMap.length; ++i)
1:                 if (i != childIndex)
1:                     newNodeSizeMap[pos++] = nodeSizeMap[i] -
1:                         ((substractSize && i > childIndex) ? sizeToRemove : 0);
1:             newNode[offset] = newNodeSizeMap;
1:         }
1:         return newNode;
1:     }
1: 
0:     private static <V> Object[] merge(final Object[] left, final Object[] right, final V nodeKey) {
1:         assert BTree.getKeyEnd(left) == BTree.MINIMAL_NODE_SIZE;
1:         assert BTree.getKeyEnd(right) == BTree.MINIMAL_NODE_SIZE;
1:         final boolean leaves = BTree.isLeaf(left);
1:         final Object[] result;
1:         if (leaves)
1:             result = new Object[BTree.MINIMAL_NODE_SIZE * 2 + 1];
1:         else
1:             result = new Object[left.length + right.length];
1:         int offset = 0;
1:         offset = copyKeys(left, result, offset);
1:         result[offset++] = nodeKey;
1:         offset = copyKeys(right, result, offset);
1:         if (!leaves)
1:         {
1:             offset = copyChildren(left, result, offset);
1:             offset = copyChildren(right, result, offset);
1:             final int[] leftSizeMap = BTree.getSizeMap(left);
1:             final int[] rightSizeMap = BTree.getSizeMap(right);
1:             final int[] newSizeMap = new int[leftSizeMap.length + rightSizeMap.length];
1:             offset = 0;
1:             offset = copySizeMap(leftSizeMap, newSizeMap, offset, 0);
1:             offset = copySizeMap(rightSizeMap, newSizeMap, offset, leftSizeMap[leftSizeMap.length - 1] + 1);
1:             result[result.length - 1] = newSizeMap;
1:         }
1:         return result;
1:     }
1: 
1:     private static int copyKeys(final Object[] from, final Object[] to, final int offset)
1:     {
1:         final int keysCount = BTree.getKeyEnd(from);
1:         System.arraycopy(from, 0, to, offset, keysCount);
1:         return offset + keysCount;
1:     }
1: 
1:     private static int copyKeys(final Object[] from, final Object[] to, final int offset, final int skipIndex)
1:     {
1:         final int keysCount = BTree.getKeyEnd(from);
1:         if (skipIndex > 0)
1:             System.arraycopy(from, 0, to, offset, skipIndex);
1:         if (skipIndex + 1 < keysCount)
1:             System.arraycopy(from, skipIndex + 1, to, offset + skipIndex, keysCount - skipIndex - 1);
1:         return offset + keysCount - 1;
1:     }
1: 
1:     private static int copyChildren(final Object[] from, final Object[] to, final int offset)
1:     {
1:         assert !BTree.isLeaf(from);
1:         final int start = BTree.getChildStart(from);
1:         final int childCount = BTree.getChildCount(from);
1:         System.arraycopy(from, start, to, offset, childCount);
1:         return offset + childCount;
1:     }
1: 
1:     private static int copyChildren(final Object[] from, final Object[] to, final int offset, final int skipIndex)
1:     {
1:         assert !BTree.isLeaf(from);
1:         final int start = BTree.getChildStart(from);
1:         final int childCount = BTree.getChildCount(from);
1:         if (skipIndex > 0)
1:             System.arraycopy(from, start, to, offset, skipIndex);
1:         if (skipIndex + 1 <= childCount)
1:             System.arraycopy(from, start + skipIndex + 1, to, offset + skipIndex, childCount - skipIndex - 1);
1:         return offset + childCount - 1;
1:     }
1: 
1:     private static int copySizeMap(final int[] from, final int[] to, final int offset, final int extra)
1:     {
1:         for (int i = 0; i < from.length; ++i)
1:             to[offset + i] = from[i] + extra;
1:         return offset + from.length;
1:     }
1: 
1:     private static Object[] copyIfNeeded(final Object[] node, boolean needCopy)
1:     {
1:         if (!needCopy) return node;
1:         final Object[] copy = new Object[node.length];
1:         System.arraycopy(node, 0, copy, 0, node.length);
1:         if (!BTree.isLeaf(node))
1:         {
1:             final int[] sizeMap = BTree.getSizeMap(node);
1:             final int[] copySizeMap = new int[sizeMap.length];
1:             System.arraycopy(sizeMap, 0, copySizeMap, 0, sizeMap.length);
1:             copy[copy.length - 1] = copySizeMap;
1:         }
1:         return copy;
1:     }
1: }
============================================================================