1:557bbbc: /*
1:557bbbc:  * Licensed to the Apache Software Foundation (ASF) under one
1:557bbbc:  * or more contributor license agreements.  See the NOTICE file
1:557bbbc:  * distributed with this work for additional information
1:557bbbc:  * regarding copyright ownership.  The ASF licenses this file
1:557bbbc:  * to you under the Apache License, Version 2.0 (the
1:557bbbc:  * "License"); you may not use this file except in compliance
1:557bbbc:  * with the License.  You may obtain a copy of the License at
1:557bbbc:  *
1:557bbbc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:557bbbc:  *
1:557bbbc:  * Unless required by applicable law or agreed to in writing, software
1:557bbbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:557bbbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:557bbbc:  * See the License for the specific language governing permissions and
1:557bbbc:  * limitations under the License.
1:557bbbc:  */
1:557bbbc: 
1:557bbbc: package org.apache.cassandra.db.monitoring;
1:557bbbc: 
1:557bbbc: public abstract class MonitorableImpl implements Monitorable
1:557bbbc: {
1:557bbbc:     private MonitoringState state;
1:6966fcd:     private boolean isSlow;
1:9d9a1a1:     private long constructionTime = -1;
1:557bbbc:     private long timeout;
1:6966fcd:     private long slowTimeout;
1:9d9a1a1:     private boolean isCrossNode;
1:557bbbc: 
1:557bbbc:     protected MonitorableImpl()
1:557bbbc:     {
1:557bbbc:         this.state = MonitoringState.IN_PROGRESS;
1:6966fcd:         this.isSlow = false;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     /**
1:557bbbc:      * This setter is ugly but the construction chain to ReadCommand
1:557bbbc:      * is too complex, it would require passing new parameters to all serializers
1:557bbbc:      * or specializing the serializers to accept these message properties.
1:557bbbc:      */
1:9d9a1a1:     public void setMonitoringTime(long constructionTime, boolean isCrossNode, long timeout, long slowTimeout)
1:557bbbc:     {
1:9d9a1a1:         assert constructionTime >= 0;
1:557bbbc:         this.constructionTime = constructionTime;
1:9d9a1a1:         this.isCrossNode = isCrossNode;
1:557bbbc:         this.timeout = timeout;
1:6966fcd:         this.slowTimeout = slowTimeout;
1:557bbbc:     }
1:557bbbc: 
1:9d9a1a1:     public long constructionTime()
1:557bbbc:     {
1:557bbbc:         return constructionTime;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public long timeout()
1:557bbbc:     {
1:557bbbc:         return timeout;
1:557bbbc:     }
1:557bbbc: 
1:9d9a1a1:     public boolean isCrossNode()
1:9d9a1a1:     {
1:9d9a1a1:         return isCrossNode;
1:9d9a1a1:     }
1:9d9a1a1: 
1:6966fcd:     public long slowTimeout()
1:6966fcd:     {
1:6966fcd:         return slowTimeout;
1:6966fcd:     }
1:6966fcd: 
1:557bbbc:     public boolean isInProgress()
1:557bbbc:     {
1:557bbbc:         check();
1:557bbbc:         return state == MonitoringState.IN_PROGRESS;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public boolean isAborted()
1:557bbbc:     {
1:557bbbc:         check();
1:557bbbc:         return state == MonitoringState.ABORTED;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public boolean isCompleted()
1:557bbbc:     {
1:557bbbc:         check();
1:557bbbc:         return state == MonitoringState.COMPLETED;
1:557bbbc:     }
1:557bbbc: 
1:6966fcd:     public boolean isSlow()
1:6966fcd:     {
1:6966fcd:         check();
1:6966fcd:         return isSlow;
1:6966fcd:     }
1:6966fcd: 
1:557bbbc:     public boolean abort()
1:557bbbc:     {
1:557bbbc:         if (state == MonitoringState.IN_PROGRESS)
1:557bbbc:         {
1:9d9a1a1:             if (constructionTime >= 0)
1:557bbbc:                 MonitoringTask.addFailedOperation(this, ApproximateTime.currentTimeMillis());
1:6966fcd: 
1:557bbbc:             state = MonitoringState.ABORTED;
1:557bbbc:             return true;
1:557bbbc:         }
1:557bbbc: 
1:557bbbc:         return state == MonitoringState.ABORTED;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public boolean complete()
1:557bbbc:     {
1:557bbbc:         if (state == MonitoringState.IN_PROGRESS)
1:557bbbc:         {
1:9d9a1a1:             if (isSlow && slowTimeout > 0 && constructionTime >= 0)
1:6966fcd:                 MonitoringTask.addSlowOperation(this, ApproximateTime.currentTimeMillis());
1:6966fcd: 
1:557bbbc:             state = MonitoringState.COMPLETED;
1:557bbbc:             return true;
1:557bbbc:         }
1:557bbbc: 
1:557bbbc:         return state == MonitoringState.COMPLETED;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     private void check()
1:557bbbc:     {
1:9d9a1a1:         if (constructionTime < 0 || state != MonitoringState.IN_PROGRESS)
1:557bbbc:             return;
1:6966fcd: 
1:9d9a1a1:         long elapsed = ApproximateTime.currentTimeMillis() - constructionTime;
1:557bbbc: 
1:6966fcd:         if (elapsed >= slowTimeout && !isSlow)
1:6966fcd:             isSlow = true;
1:6966fcd: 
1:557bbbc:         if (elapsed >= timeout)
1:557bbbc:             abort();
1:557bbbc:     }
1:557bbbc: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:     private long constructionTime = -1;
1:     private boolean isCrossNode;
/////////////////////////////////////////////////////////////////////////
1:     public void setMonitoringTime(long constructionTime, boolean isCrossNode, long timeout, long slowTimeout)
1:         assert constructionTime >= 0;
1:         this.isCrossNode = isCrossNode;
1:     public long constructionTime()
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCrossNode()
1:     {
1:         return isCrossNode;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (constructionTime >= 0)
/////////////////////////////////////////////////////////////////////////
1:             if (isSlow && slowTimeout > 0 && constructionTime >= 0)
/////////////////////////////////////////////////////////////////////////
1:         if (constructionTime < 0 || state != MonitoringState.IN_PROGRESS)
1:         long elapsed = ApproximateTime.currentTimeMillis() - constructionTime;
author:Shogo Hoshii
-------------------------------------------------------------------------------
commit:6966fcd
/////////////////////////////////////////////////////////////////////////
1:     private boolean isSlow;
1:     private long slowTimeout;
1:         this.isSlow = false;
/////////////////////////////////////////////////////////////////////////
0:     public void setMonitoringTime(ConstructionTime constructionTime, long timeout, long slowTimeout)
1:         this.slowTimeout = slowTimeout;
/////////////////////////////////////////////////////////////////////////
1:     public long slowTimeout()
1:     {
1:         return slowTimeout;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSlow()
1:     {
1:         check();
1:         return isSlow;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (isSlow && slowTimeout > 0 && constructionTime != null)
1:                 MonitoringTask.addSlowOperation(this, ApproximateTime.currentTimeMillis());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (elapsed >= slowTimeout && !isSlow)
1:             isSlow = true;
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.monitoring;
1: 
1: public abstract class MonitorableImpl implements Monitorable
1: {
1:     private MonitoringState state;
0:     private ConstructionTime constructionTime;
1:     private long timeout;
1: 
1:     protected MonitorableImpl()
1:     {
1:         this.state = MonitoringState.IN_PROGRESS;
1:     }
1: 
1:     /**
1:      * This setter is ugly but the construction chain to ReadCommand
1:      * is too complex, it would require passing new parameters to all serializers
1:      * or specializing the serializers to accept these message properties.
1:      */
0:     public void setMonitoringTime(ConstructionTime constructionTime, long timeout)
1:     {
1:         this.constructionTime = constructionTime;
1:         this.timeout = timeout;
1:     }
1: 
0:     public ConstructionTime constructionTime()
1:     {
1:         return constructionTime;
1:     }
1: 
1:     public long timeout()
1:     {
1:         return timeout;
1:     }
1: 
1:     public boolean isInProgress()
1:     {
1:         check();
1:         return state == MonitoringState.IN_PROGRESS;
1:     }
1: 
1:     public boolean isAborted()
1:     {
1:         check();
1:         return state == MonitoringState.ABORTED;
1:     }
1: 
1:     public boolean isCompleted()
1:     {
1:         check();
1:         return state == MonitoringState.COMPLETED;
1:     }
1: 
1:     public boolean abort()
1:     {
1:         if (state == MonitoringState.IN_PROGRESS)
1:         {
0:             if (constructionTime != null)
1:                 MonitoringTask.addFailedOperation(this, ApproximateTime.currentTimeMillis());
1:             state = MonitoringState.ABORTED;
1:             return true;
1:         }
1: 
1:         return state == MonitoringState.ABORTED;
1:     }
1: 
1:     public boolean complete()
1:     {
1:         if (state == MonitoringState.IN_PROGRESS)
1:         {
1:             state = MonitoringState.COMPLETED;
1:             return true;
1:         }
1: 
1:         return state == MonitoringState.COMPLETED;
1:     }
1: 
1:     private void check()
1:     {
0:         if (constructionTime == null || state != MonitoringState.IN_PROGRESS)
1:             return;
1: 
0:         long elapsed = ApproximateTime.currentTimeMillis() - constructionTime.timestamp;
1:         if (elapsed >= timeout)
1:             abort();
1:     }
1: }
============================================================================