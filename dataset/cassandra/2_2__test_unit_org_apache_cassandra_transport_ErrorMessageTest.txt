1:39df31a: /*
1:39df31a:  * Licensed to the Apache Software Foundation (ASF) under one
1:39df31a:  * or more contributor license agreements.  See the NOTICE file
1:39df31a:  * distributed with this work for additional information
1:39df31a:  * regarding copyright ownership.  The ASF licenses this file
1:39df31a:  * to you under the Apache License, Version 2.0 (the
1:39df31a:  * "License"); you may not use this file except in compliance
1:39df31a:  * with the License.  You may obtain a copy of the License at
1:39df31a:  *
1:39df31a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:39df31a:  *
1:39df31a:  * Unless required by applicable law or agreed to in writing, software
1:39df31a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39df31a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39df31a:  * See the License for the specific language governing permissions and
1:39df31a:  * limitations under the License.
1:39df31a:  */
1:39df31a: 
1:39df31a: package org.apache.cassandra.transport;
1:39df31a: 
1:39df31a: import java.net.InetAddress;
1:39df31a: import java.net.UnknownHostException;
1:39df31a: import java.util.HashMap;
1:39df31a: import java.util.Map;
1:39df31a: 
1:39df31a: import org.junit.BeforeClass;
1:39df31a: import org.junit.Test;
1:39df31a: 
1:39df31a: import io.netty.buffer.ByteBuf;
1:39df31a: import io.netty.buffer.Unpooled;
1:39df31a: import org.apache.cassandra.db.ConsistencyLevel;
1:39df31a: import org.apache.cassandra.db.WriteType;
1:39df31a: import org.apache.cassandra.exceptions.ReadFailureException;
1:39df31a: import org.apache.cassandra.exceptions.RequestFailureReason;
1:39df31a: import org.apache.cassandra.exceptions.WriteFailureException;
1:39df31a: import org.apache.cassandra.transport.messages.ErrorMessage;
1:39df31a: 
1:39df31a: import static org.junit.Assert.assertEquals;
1:39df31a: 
1:39df31a: public class ErrorMessageTest
1:39df31a: {
1:39df31a:     private static Map<InetAddress, RequestFailureReason> failureReasonMap1;
1:39df31a:     private static Map<InetAddress, RequestFailureReason> failureReasonMap2;
1:39df31a: 
1:39df31a:     @BeforeClass
1:39df31a:     public static void setUpFixtures() throws UnknownHostException
1:39df31a:     {
1:39df31a:         failureReasonMap1 = new HashMap<>();
1:39df31a:         failureReasonMap1.put(InetAddress.getByName("127.0.0.1"), RequestFailureReason.READ_TOO_MANY_TOMBSTONES);
1:39df31a:         failureReasonMap1.put(InetAddress.getByName("127.0.0.2"), RequestFailureReason.READ_TOO_MANY_TOMBSTONES);
1:39df31a:         failureReasonMap1.put(InetAddress.getByName("127.0.0.3"), RequestFailureReason.UNKNOWN);
1:39df31a: 
1:39df31a:         failureReasonMap2 = new HashMap<>();
1:39df31a:         failureReasonMap2.put(InetAddress.getByName("127.0.0.1"), RequestFailureReason.UNKNOWN);
1:39df31a:         failureReasonMap2.put(InetAddress.getByName("127.0.0.2"), RequestFailureReason.UNKNOWN);
1:39df31a:     }
1:39df31a: 
1:39df31a:     @Test
1:39df31a:     public void testV5ReadFailureSerDeser()
1:39df31a:     {
1:39df31a:         int receivedBlockFor = 3;
1:39df31a:         ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;
1:39df31a:         boolean dataPresent = false;
1:39df31a:         ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);
1:39df31a: 
1:e0adc16:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), ProtocolVersion.V5);
1:39df31a:         ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;
1:39df31a: 
1:39df31a:         assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);
1:39df31a:         assertEquals(receivedBlockFor, deserializedRfe.received);
1:39df31a:         assertEquals(receivedBlockFor, deserializedRfe.blockFor);
1:39df31a:         assertEquals(consistencyLevel, deserializedRfe.consistency);
1:39df31a:         assertEquals(dataPresent, deserializedRfe.dataPresent);
1:39df31a:     }
1:39df31a: 
1:39df31a:     @Test
1:39df31a:     public void testV5WriteFailureSerDeser()
1:39df31a:     {
1:39df31a:         int receivedBlockFor = 3;
1:39df31a:         ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;
1:39df31a:         WriteType writeType = WriteType.SIMPLE;
1:39df31a:         WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);
1:39df31a: 
1:e0adc16:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), ProtocolVersion.V5);
1:39df31a:         WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;
1:39df31a: 
1:39df31a:         assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);
1:39df31a:         assertEquals(receivedBlockFor, deserializedWfe.received);
1:39df31a:         assertEquals(receivedBlockFor, deserializedWfe.blockFor);
1:39df31a:         assertEquals(consistencyLevel, deserializedWfe.consistency);
1:39df31a:         assertEquals(writeType, deserializedWfe.writeType);
1:39df31a:     }
1:39df31a: 
1:39df31a:     /**
1:39df31a:      * Make sure that the map passed in to create a Read/WriteFailureException is copied
1:39df31a:      * so later modifications to the map passed in don't affect the map in the exception.
1:39df31a:      *
1:39df31a:      * This is to prevent potential issues in serialization if the map created in
1:39df31a:      * ReadCallback/AbstractWriteResponseHandler is modified due to a delayed failure
1:39df31a:      * response after the exception is created.
1:39df31a:      */
1:39df31a:     @Test
1:39df31a:     public void testRequestFailureExceptionMakesCopy() throws UnknownHostException
1:39df31a:     {
1:39df31a:         Map<InetAddress, RequestFailureReason> modifiableFailureReasons = new HashMap<>(failureReasonMap1);
1:39df31a:         ReadFailureException rfe = new ReadFailureException(ConsistencyLevel.ALL, 3, 3, false, modifiableFailureReasons);
1:39df31a:         WriteFailureException wfe = new WriteFailureException(ConsistencyLevel.ALL, 3, 3, WriteType.SIMPLE, modifiableFailureReasons);
1:39df31a: 
1:39df31a:         modifiableFailureReasons.put(InetAddress.getByName("127.0.0.4"), RequestFailureReason.UNKNOWN);
1:39df31a: 
1:39df31a:         assertEquals(failureReasonMap1, rfe.failureReasonByEndpoint);
1:39df31a:         assertEquals(failureReasonMap1, wfe.failureReasonByEndpoint);
1:39df31a:     }
1:39df31a: 
1:e0adc16:     private ErrorMessage serializeAndGetDeserializedErrorMessage(ErrorMessage message, ProtocolVersion version)
1:39df31a:     {
1:39df31a:         ByteBuf buffer = Unpooled.buffer(ErrorMessage.codec.encodedSize(message, version));
1:39df31a:         ErrorMessage.codec.encode(message, buffer, version);
1:39df31a:         return ErrorMessage.codec.decode(buffer, version);
1:39df31a:     }
1:39df31a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), ProtocolVersion.V5);
/////////////////////////////////////////////////////////////////////////
1:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), ProtocolVersion.V5);
/////////////////////////////////////////////////////////////////////////
1:     private ErrorMessage serializeAndGetDeserializedErrorMessage(ErrorMessage message, ProtocolVersion version)
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.transport;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import io.netty.buffer.ByteBuf;
1: import io.netty.buffer.Unpooled;
1: import org.apache.cassandra.db.ConsistencyLevel;
1: import org.apache.cassandra.db.WriteType;
1: import org.apache.cassandra.exceptions.ReadFailureException;
1: import org.apache.cassandra.exceptions.RequestFailureReason;
1: import org.apache.cassandra.exceptions.WriteFailureException;
1: import org.apache.cassandra.transport.messages.ErrorMessage;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class ErrorMessageTest
1: {
1:     private static Map<InetAddress, RequestFailureReason> failureReasonMap1;
1:     private static Map<InetAddress, RequestFailureReason> failureReasonMap2;
1: 
1:     @BeforeClass
1:     public static void setUpFixtures() throws UnknownHostException
1:     {
1:         failureReasonMap1 = new HashMap<>();
1:         failureReasonMap1.put(InetAddress.getByName("127.0.0.1"), RequestFailureReason.READ_TOO_MANY_TOMBSTONES);
1:         failureReasonMap1.put(InetAddress.getByName("127.0.0.2"), RequestFailureReason.READ_TOO_MANY_TOMBSTONES);
1:         failureReasonMap1.put(InetAddress.getByName("127.0.0.3"), RequestFailureReason.UNKNOWN);
1: 
1:         failureReasonMap2 = new HashMap<>();
1:         failureReasonMap2.put(InetAddress.getByName("127.0.0.1"), RequestFailureReason.UNKNOWN);
1:         failureReasonMap2.put(InetAddress.getByName("127.0.0.2"), RequestFailureReason.UNKNOWN);
1:     }
1: 
1:     @Test
1:     public void testV5ReadFailureSerDeser()
1:     {
1:         int receivedBlockFor = 3;
1:         ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;
1:         boolean dataPresent = false;
1:         ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);
1: 
0:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), 5);
1:         ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;
1: 
1:         assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);
1:         assertEquals(receivedBlockFor, deserializedRfe.received);
1:         assertEquals(receivedBlockFor, deserializedRfe.blockFor);
1:         assertEquals(consistencyLevel, deserializedRfe.consistency);
1:         assertEquals(dataPresent, deserializedRfe.dataPresent);
1:     }
1: 
1:     @Test
1:     public void testV5WriteFailureSerDeser()
1:     {
1:         int receivedBlockFor = 3;
1:         ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;
1:         WriteType writeType = WriteType.SIMPLE;
1:         WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);
1: 
0:         ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), 5);
1:         WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;
1: 
1:         assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);
1:         assertEquals(receivedBlockFor, deserializedWfe.received);
1:         assertEquals(receivedBlockFor, deserializedWfe.blockFor);
1:         assertEquals(consistencyLevel, deserializedWfe.consistency);
1:         assertEquals(writeType, deserializedWfe.writeType);
1:     }
1: 
1:     /**
1:      * Make sure that the map passed in to create a Read/WriteFailureException is copied
1:      * so later modifications to the map passed in don't affect the map in the exception.
1:      *
1:      * This is to prevent potential issues in serialization if the map created in
1:      * ReadCallback/AbstractWriteResponseHandler is modified due to a delayed failure
1:      * response after the exception is created.
1:      */
1:     @Test
1:     public void testRequestFailureExceptionMakesCopy() throws UnknownHostException
1:     {
1:         Map<InetAddress, RequestFailureReason> modifiableFailureReasons = new HashMap<>(failureReasonMap1);
1:         ReadFailureException rfe = new ReadFailureException(ConsistencyLevel.ALL, 3, 3, false, modifiableFailureReasons);
1:         WriteFailureException wfe = new WriteFailureException(ConsistencyLevel.ALL, 3, 3, WriteType.SIMPLE, modifiableFailureReasons);
1: 
1:         modifiableFailureReasons.put(InetAddress.getByName("127.0.0.4"), RequestFailureReason.UNKNOWN);
1: 
1:         assertEquals(failureReasonMap1, rfe.failureReasonByEndpoint);
1:         assertEquals(failureReasonMap1, wfe.failureReasonByEndpoint);
1:     }
1: 
0:     private ErrorMessage serializeAndGetDeserializedErrorMessage(ErrorMessage message, int version)
1:     {
1:         ByteBuf buffer = Unpooled.buffer(ErrorMessage.codec.encodedSize(message, version));
1:         ErrorMessage.codec.encode(message, buffer, version);
1:         return ErrorMessage.codec.decode(buffer, version);
1:     }
1: }
============================================================================