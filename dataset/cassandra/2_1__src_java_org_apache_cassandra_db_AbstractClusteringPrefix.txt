1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
12:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.util.Objects;
1:2457599: 
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:2457599: 
1:a991b64: public abstract class AbstractClusteringPrefix implements ClusteringPrefix
1:2457599: {
1:a991b64:     public ClusteringPrefix clustering()
1:2457599:     {
1:a991b64:         return this;
1:2457599:     }
1:2457599: 
1:a991b64:     public int dataSize()
1:2457599:     {
1:a991b64:         int size = 0;
2:a991b64:         for (int i = 0; i < size(); i++)
1:2457599:         {
1:a991b64:             ByteBuffer bb = get(i);
1:a991b64:             size += bb == null ? 0 : bb.remaining();
1:2457599:         }
1:a991b64:         return size;
1:2457599:     }
1:2457599: 
1:a991b64:     public void digest(MessageDigest digest)
1:2457599:     {
1:a991b64:         for (int i = 0; i < size(); i++)
9:a991b64:         {
1:a991b64:             ByteBuffer bb = get(i);
1:a991b64:             if (bb != null)
1:2457599:                 digest.update(bb.duplicate());
1:2457599:         }
1:a991b64:         FBUtilities.updateWithByte(digest, kind().ordinal());
1:2457599:     }
1:2457599: 
1:a991b64:     @Override
1:a991b64:     public final int hashCode()
1:2457599:     {
1:a991b64:         int result = 31;
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             result += 31 * Objects.hashCode(get(i));
1:a991b64:         return 31 * result + Objects.hashCode(kind());
1:2457599:     }
1:2457599: 
1:a991b64:     @Override
1:a991b64:     public final boolean equals(Object o)
1:a991b64:     {
1:a991b64:         if(!(o instanceof ClusteringPrefix))
1:a991b64:             return false;
1:2457599: 
1:a991b64:         ClusteringPrefix that = (ClusteringPrefix)o;
1:a991b64:         if (this.kind() != that.kind() || this.size() != that.size())
1:a991b64:             return false;
1:2457599: 
1:a991b64:         for (int i = 0; i < size(); i++)
1:a991b64:             if (!Objects.equals(this.get(i), that.get(i)))
1:a991b64:                 return false;
1:2457599: 
1:a991b64:         return true;
9:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ObjectSizes;
0:     protected static final ByteBuffer[] EMPTY_VALUES_ARRAY = new ByteBuffer[0];
1: 
0:     private static final long EMPTY_SIZE = ObjectSizes.measure(new Clustering(EMPTY_VALUES_ARRAY));
1: 
0:     protected final Kind kind;
0:     protected final ByteBuffer[] values;
1: 
0:     protected AbstractClusteringPrefix(Kind kind, ByteBuffer[] values)
1:     {
0:         this.kind = kind;
0:         this.values = values;
1:     }
1: 
0:     public Kind kind()
1:     {
0:         return kind;
1:     }
1: 
0:     public int size()
1:     {
0:         return values.length;
1:     }
1: 
0:     public ByteBuffer get(int i)
1:     {
0:         return values[i];
1:     }
1: 
0:     public ByteBuffer[] getRawValues()
1:     {
0:         return values;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 digest.update(bb.duplicate());
0:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(values);
1:     }
1: 
0:     public long unsharedHeapSizeExcludingData()
1:     {
0:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(values);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public abstract class AbstractClusteringPrefix implements ClusteringPrefix
1: {
1:     public ClusteringPrefix clustering()
1:     {
1:         return this;
1:     }
1: 
1:     public int dataSize()
1:     {
1:         int size = 0;
1:         for (int i = 0; i < size(); i++)
1:         {
1:             ByteBuffer bb = get(i);
1:             size += bb == null ? 0 : bb.remaining();
1:         }
1:         return size;
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         for (int i = 0; i < size(); i++)
1:         {
1:             ByteBuffer bb = get(i);
1:             if (bb != null)
0:             digest.update(bb.duplicate());
1:         }
1:         FBUtilities.updateWithByte(digest, kind().ordinal());
1:     }
1: 
0:     public void writeTo(Writer writer)
1:     {
1:         for (int i = 0; i < size(); i++)
0:             writer.writeClusteringValue(get(i));
1:     }
1: 
0:     public long unsharedHeapSize()
1:     {
0:         // unsharedHeapSize is used inside the cache and in memtables. Implementations that are
0:         // safe to use there (SimpleClustering, Slice.Bound.SimpleBound and MemtableRow.* classes) overwrite this.
0:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         int result = 31;
1:         for (int i = 0; i < size(); i++)
1:             result += 31 * Objects.hashCode(get(i));
1:         return 31 * result + Objects.hashCode(kind());
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof ClusteringPrefix))
1:             return false;
1: 
1:         ClusteringPrefix that = (ClusteringPrefix)o;
1:         if (this.kind() != that.kind() || this.size() != that.size())
1:             return false;
1: 
1:         for (int i = 0; i < size(); i++)
1:             if (!Objects.equals(this.get(i), that.get(i)))
1:                 return false;
1: 
1:         return true;
1:     }
1: }
============================================================================