1:7536429: /*
1:7536429:  *
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  *
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  *
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  *
1:7536429:  */
1:7536429: package org.apache.cassandra.stress.generate.values;
2:7536429: 
1:7536429: import java.nio.ByteBuffer;
1:7536429: import java.util.Arrays;
1:6c579a0: 
1:6c579a0: import org.apache.cassandra.db.marshal.BytesType;
1:8c19fd6: import org.apache.cassandra.stress.generate.FasterRandom;
1:7536429: 
1:7536429: public class Bytes extends Generator<ByteBuffer>
1:7536429: {
1:7536429:     private final byte[] bytes;
1:0580fb2:     private final FasterRandom rand = new FasterRandom();
1:7536429: 
1:7536429:     public Bytes(String name, GeneratorConfig config)
1:7536429:     {
1:0580fb2:         super(BytesType.instance, config, name, ByteBuffer.class);
1:7536429:         bytes = new byte[(int) sizeDistribution.maxValue()];
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public ByteBuffer generate()
1:7536429:     {
1:7536429:         long seed = identityDistribution.next();
1:7536429:         sizeDistribution.setSeed(seed);
1:7536429:         rand.setSeed(~seed);
1:7536429:         int size = (int) sizeDistribution.next();
1:7536429:         for (int i = 0; i < size; )
1:0580fb2:             for (long v = rand.nextLong(),
1:0580fb2:                  n = Math.min(size - i, Long.SIZE/Byte.SIZE);
1:7536429:                  n-- > 0; v >>= Byte.SIZE)
1:7536429:                 bytes[i++] = (byte)v;
1:7536429:         return ByteBuffer.wrap(Arrays.copyOf(bytes, size));
1:7536429:     }
1:7536429: }
============================================================================
author:Chris Burroughs
-------------------------------------------------------------------------------
commit:8c19fd6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.FasterRandom;
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FasterRandom;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.db.marshal.BytesType;
0: import org.apache.cassandra.stress.generate.FasterRandom;
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generate.FasterRandom;
/////////////////////////////////////////////////////////////////////////
1:     private final FasterRandom rand = new FasterRandom();
1:         super(BytesType.instance, config, name, ByteBuffer.class);
/////////////////////////////////////////////////////////////////////////
1:             for (long v = rand.nextLong(),
1:                  n = Math.min(size - i, Long.SIZE/Byte.SIZE);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.stress.generate.values;
1: 
0: import org.apache.cassandra.db.marshal.BytesType;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
0: import java.util.Random;
1: 
1: public class Bytes extends Generator<ByteBuffer>
1: {
1:     private final byte[] bytes;
0:     private final Random rand = new Random();
1: 
1:     public Bytes(String name, GeneratorConfig config)
1:     {
0:         super(BytesType.instance, config, name);
1:         bytes = new byte[(int) sizeDistribution.maxValue()];
1:     }
1: 
1:     @Override
1:     public ByteBuffer generate()
1:     {
1:         long seed = identityDistribution.next();
1:         sizeDistribution.setSeed(seed);
1:         rand.setSeed(~seed);
1:         int size = (int) sizeDistribution.next();
1:         for (int i = 0; i < size; )
0:             for (int v = rand.nextInt(),
0:                  n = Math.min(size - i, Integer.SIZE/Byte.SIZE);
1:                  n-- > 0; v >>= Byte.SIZE)
1:                 bytes[i++] = (byte)v;
1:         return ByteBuffer.wrap(Arrays.copyOf(bytes, size));
1:     }
1: }
============================================================================