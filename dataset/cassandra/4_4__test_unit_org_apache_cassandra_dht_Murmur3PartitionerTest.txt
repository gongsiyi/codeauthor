1:a89ef1f: /*
1:a89ef1f:  * Licensed to the Apache Software Foundation (ASF) under one
1:a89ef1f:  * or more contributor license agreements.  See the NOTICE file
1:a89ef1f:  * distributed with this work for additional information
1:a89ef1f:  * regarding copyright ownership.  The ASF licenses this file
1:a89ef1f:  * to you under the Apache License, Version 2.0 (the
1:a89ef1f:  * "License"); you may not use this file except in compliance
1:a89ef1f:  * with the License.  You may obtain a copy of the License at
3:a89ef1f:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a89ef1f:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a89ef1f:  */
1:a89ef1f: package org.apache.cassandra.dht;
1:a89ef1f: 
1:e2a0d75: import org.junit.Test;
1:e2a0d75: 
1:ad84e4d: public class Murmur3PartitionerTest extends PartitionerTestCase
1:a89ef1f: {
1:a89ef1f:     public void initPartitioner()
1:a89ef1f:     {
1:07893d7:         partitioner = Murmur3Partitioner.instance;
1:a89ef1f:     }
1:a89ef1f: 
1:a89ef1f:     @Override
1:a89ef1f:     protected void midpointMinimumTestCase()
1:a89ef1f:     {
1:ad84e4d:         Token mintoken = partitioner.getMinimumToken();
1:a89ef1f:         assert mintoken.compareTo(partitioner.midpoint(mintoken, mintoken)) != 0;
1:a89ef1f:         assertMidpoint(mintoken, tok("a"), 16);
1:a89ef1f:         assertMidpoint(mintoken, tok("aaa"), 16);
1:a89ef1f:         assertMidpoint(mintoken, mintoken, 62);
1:a89ef1f:         assertMidpoint(tok("a"), mintoken, 16);
1:a89ef1f:     }
1:e2a0d75: 
1:4fd05e5:     protected boolean shouldStopRecursion(Token left, Token right)
1:4fd05e5:     {
1:4fd05e5:         return left.size(right) < Math.scalb(1, -48);
1:4fd05e5:     }
1:4fd05e5: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testSplit()
1:e2a0d75:     {
1:e2a0d75:         assertSplit(tok("a"), tok("b"), 16);
1:e2a0d75:         assertSplit(tok("a"), tok("bbb"), 16);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testSplitWrapping()
1:e2a0d75:     {
1:e2a0d75:         assertSplit(tok("b"), tok("a"), 16);
1:e2a0d75:         assertSplit(tok("bbb"), tok("a"), 16);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testSplitExceedMaximumCase()
1:e2a0d75:     {
1:e2a0d75:         Murmur3Partitioner.LongToken left = new Murmur3Partitioner.LongToken(Long.MAX_VALUE - 100);
1:e2a0d75:         assertSplit(left, tok("a"), 16);
1:e2a0d75:     }
1:a89ef1f: }
1:a89ef1f: 
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:4fd05e5
/////////////////////////////////////////////////////////////////////////
1:     protected boolean shouldStopRecursion(Token left, Token right)
1:     {
1:         return left.size(right) < Math.scalb(1, -48);
1:     }
1: 
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testSplit()
1:     {
1:         assertSplit(tok("a"), tok("b"), 16);
1:         assertSplit(tok("a"), tok("bbb"), 16);
1:     }
1: 
1:     @Test
1:     public void testSplitWrapping()
1:     {
1:         assertSplit(tok("b"), tok("a"), 16);
1:         assertSplit(tok("bbb"), tok("a"), 16);
1:     }
1: 
1:     @Test
1:     public void testSplitExceedMaximumCase()
1:     {
1:         Murmur3Partitioner.LongToken left = new Murmur3Partitioner.LongToken(Long.MAX_VALUE - 100);
1:         assertSplit(left, tok("a"), 16);
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:         partitioner = Murmur3Partitioner.instance;
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public class Murmur3PartitionerTest extends PartitionerTestCase
/////////////////////////////////////////////////////////////////////////
1:         Token mintoken = partitioner.getMinimumToken();
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:a89ef1f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.dht;
1: 
0: public class Murmur3PartitionerTest extends PartitionerTestCase<LongToken>
1: {
1:     public void initPartitioner()
1:     {
0:         partitioner = new Murmur3Partitioner();
1:     }
1: 
1:     @Override
1:     protected void midpointMinimumTestCase()
1:     {
0:         LongToken mintoken = partitioner.getMinimumToken();
1:         assert mintoken.compareTo(partitioner.midpoint(mintoken, mintoken)) != 0;
1:         assertMidpoint(mintoken, tok("a"), 16);
1:         assertMidpoint(mintoken, tok("aaa"), 16);
1:         assertMidpoint(mintoken, mintoken, 62);
1:         assertMidpoint(tok("a"), mintoken, 16);
1:     }
1: }
1: 
============================================================================