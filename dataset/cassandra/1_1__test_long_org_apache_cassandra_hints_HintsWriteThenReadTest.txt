1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.io.InputStream;
1:96d41f0: import java.nio.ByteBuffer;
1:96d41f0: import java.nio.file.Files;
1:96d41f0: import java.util.Iterator;
1:96d41f0: import java.util.UUID;
1:96d41f0: import java.util.concurrent.TimeUnit;
1:96d41f0: import java.util.zip.CRC32;
1:96d41f0: 
1:96d41f0: import com.google.common.collect.Iterables;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.SchemaLoader;
1:96d41f0: import org.apache.cassandra.config.CFMetaData;
1:96d41f0: import org.apache.cassandra.config.Schema;
1:96d41f0: import org.apache.cassandra.db.Mutation;
1:96d41f0: import org.apache.cassandra.db.RowUpdateBuilder;
1:96d41f0: import org.apache.cassandra.db.rows.Cell;
1:96d41f0: import org.apache.cassandra.db.rows.Row;
1:96d41f0: import org.apache.cassandra.io.util.FileUtils;
1:96d41f0: import org.apache.cassandra.schema.KeyspaceParams;
1:96d41f0: import org.apache.cassandra.utils.FBUtilities;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.assertEquals;
1:96d41f0: import static junit.framework.Assert.assertNotNull;
1:96d41f0: import static junit.framework.Assert.assertTrue;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.Util.dk;
1:96d41f0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:96d41f0: 
1:96d41f0: public class HintsWriteThenReadTest
1:96d41f0: {
1:96d41f0:     private static final String KEYSPACE = "hints_write_then_read_test";
1:96d41f0:     private static final String TABLE = "table";
1:96d41f0: 
1:96d41f0:     private static final int HINTS_COUNT = 10_000_000;
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testWriteReadCycle() throws IOException
1:96d41f0:     {
1:96d41f0:         SchemaLoader.prepareServer();
1:96d41f0:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:96d41f0: 
1:96d41f0:         HintsDescriptor descriptor = new HintsDescriptor(UUID.randomUUID(), System.currentTimeMillis());
1:96d41f0: 
1:96d41f0:         File directory = Files.createTempDirectory(null).toFile();
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             testWriteReadCycle(directory, descriptor);
1:96d41f0:         }
1:96d41f0:         finally
1:96d41f0:         {
1:96d41f0:             directory.deleteOnExit();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void testWriteReadCycle(File directory, HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         // write HINTS_COUNT hints to a file
1:96d41f0:         writeHints(directory, descriptor);
1:96d41f0: 
1:96d41f0:         // calculate the checksum of the file, then compare to the .crc32 checksum file content
1:96d41f0:         verifyChecksum(directory, descriptor);
1:96d41f0: 
1:96d41f0:         // iterate over the written hints, make sure they are all present
1:96d41f0:         verifyHints(directory, descriptor);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void writeHints(File directory, HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         try (HintsWriter writer = HintsWriter.create(directory, descriptor))
1:96d41f0:         {
1:96d41f0:             write(writer, descriptor.timestamp);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void verifyChecksum(File directory, HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         File hintsFile = new File(directory, descriptor.fileName());
1:96d41f0:         File checksumFile = new File(directory, descriptor.checksumFileName());
1:96d41f0: 
1:96d41f0:         assertTrue(checksumFile.exists());
1:96d41f0: 
1:96d41f0:         String actualChecksum = Integer.toHexString(calculateChecksum(hintsFile));
1:96d41f0:         String expectedChecksum = Files.readAllLines(checksumFile.toPath()).iterator().next();
1:96d41f0: 
1:96d41f0:         assertEquals(expectedChecksum, actualChecksum);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void verifyHints(File directory, HintsDescriptor descriptor)
1:96d41f0:     {
1:96d41f0:         long baseTimestamp = descriptor.timestamp;
1:96d41f0:         int index = 0;
1:96d41f0: 
1:96d41f0:         try (HintsReader reader = HintsReader.open(new File(directory, descriptor.fileName())))
1:96d41f0:         {
1:96d41f0:             for (HintsReader.Page page : reader)
1:96d41f0:             {
1:96d41f0:                 Iterator<Hint> hints = page.hintsIterator();
1:96d41f0:                 while (hints.hasNext())
1:96d41f0:                 {
1:96d41f0:                     Hint hint = hints.next();
1:96d41f0: 
1:96d41f0:                     long timestamp = baseTimestamp + index;
1:96d41f0:                     Mutation mutation = hint.mutation;
1:96d41f0: 
1:96d41f0:                     assertEquals(timestamp, hint.creationTime);
1:96d41f0:                     assertEquals(dk(bytes(index)), mutation.key());
1:96d41f0: 
1:96d41f0:                     Row row = mutation.getPartitionUpdates().iterator().next().iterator().next();
1:96d41f0:                     assertEquals(1, Iterables.size(row.cells()));
1:96d41f0:                     assertEquals(bytes(index), row.clustering().get(0));
1:96d41f0:                     Cell cell = row.cells().iterator().next();
1:96d41f0:                     assertNotNull(cell);
1:96d41f0:                     assertEquals(bytes(index), cell.value());
1:96d41f0:                     assertEquals(timestamp * 1000, cell.timestamp());
1:96d41f0: 
1:96d41f0:                     index++;
1:96d41f0:                 }
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         assertEquals(index, HINTS_COUNT);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void write(HintsWriter writer, long timestamp) throws IOException
1:96d41f0:     {
1:96d41f0:         ByteBuffer buffer = ByteBuffer.allocateDirect(256 * 1024);
1:96d41f0:         try (HintsWriter.Session session = writer.newSession(buffer))
1:96d41f0:         {
1:96d41f0:             write(session, timestamp);
1:96d41f0:         }
1:96d41f0:         FileUtils.clean(buffer);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void write(HintsWriter.Session session, long timestamp) throws IOException
1:96d41f0:     {
1:96d41f0:         for (int i = 0; i < HINTS_COUNT; i++)
1:96d41f0:             session.append(createHint(i, timestamp));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static Hint createHint(int idx, long baseTimestamp)
1:96d41f0:     {
1:96d41f0:         long timestamp = baseTimestamp + idx;
1:96d41f0:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static Mutation createMutation(int index, long timestamp)
1:96d41f0:     {
1:96d41f0:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:96d41f0:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:96d41f0:                .clustering(bytes(index))
1:96d41f0:                .add("val", bytes(index))
1:96d41f0:                .build();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static int calculateChecksum(File file) throws IOException
1:96d41f0:     {
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0:         byte[] buffer = new byte[FBUtilities.MAX_UNSIGNED_SHORT];
1:96d41f0: 
1:96d41f0:         try (InputStream in = Files.newInputStream(file.toPath()))
1:96d41f0:         {
1:96d41f0:             int bytesRead;
1:96d41f0:             while((bytesRead = in.read(buffer)) != -1)
1:96d41f0:                 crc.update(buffer, 0, bytesRead);
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         return (int) crc.getValue();
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.file.Files;
1: import java.util.Iterator;
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: import java.util.zip.CRC32;
1: 
1: import com.google.common.collect.Iterables;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertNotNull;
1: import static junit.framework.Assert.assertTrue;
1: 
1: import static org.apache.cassandra.Util.dk;
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: public class HintsWriteThenReadTest
1: {
1:     private static final String KEYSPACE = "hints_write_then_read_test";
1:     private static final String TABLE = "table";
1: 
1:     private static final int HINTS_COUNT = 10_000_000;
1: 
1:     @Test
1:     public void testWriteReadCycle() throws IOException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1: 
1:         HintsDescriptor descriptor = new HintsDescriptor(UUID.randomUUID(), System.currentTimeMillis());
1: 
1:         File directory = Files.createTempDirectory(null).toFile();
1:         try
1:         {
1:             testWriteReadCycle(directory, descriptor);
1:         }
1:         finally
1:         {
1:             directory.deleteOnExit();
1:         }
1:     }
1: 
1:     private void testWriteReadCycle(File directory, HintsDescriptor descriptor) throws IOException
1:     {
1:         // write HINTS_COUNT hints to a file
1:         writeHints(directory, descriptor);
1: 
1:         // calculate the checksum of the file, then compare to the .crc32 checksum file content
1:         verifyChecksum(directory, descriptor);
1: 
1:         // iterate over the written hints, make sure they are all present
1:         verifyHints(directory, descriptor);
1:     }
1: 
1:     private void writeHints(File directory, HintsDescriptor descriptor) throws IOException
1:     {
1:         try (HintsWriter writer = HintsWriter.create(directory, descriptor))
1:         {
1:             write(writer, descriptor.timestamp);
1:         }
1:     }
1: 
1:     private static void verifyChecksum(File directory, HintsDescriptor descriptor) throws IOException
1:     {
1:         File hintsFile = new File(directory, descriptor.fileName());
1:         File checksumFile = new File(directory, descriptor.checksumFileName());
1: 
1:         assertTrue(checksumFile.exists());
1: 
1:         String actualChecksum = Integer.toHexString(calculateChecksum(hintsFile));
1:         String expectedChecksum = Files.readAllLines(checksumFile.toPath()).iterator().next();
1: 
1:         assertEquals(expectedChecksum, actualChecksum);
1:     }
1: 
1:     private void verifyHints(File directory, HintsDescriptor descriptor)
1:     {
1:         long baseTimestamp = descriptor.timestamp;
1:         int index = 0;
1: 
1:         try (HintsReader reader = HintsReader.open(new File(directory, descriptor.fileName())))
1:         {
1:             for (HintsReader.Page page : reader)
1:             {
1:                 Iterator<Hint> hints = page.hintsIterator();
1:                 while (hints.hasNext())
1:                 {
1:                     Hint hint = hints.next();
1: 
1:                     long timestamp = baseTimestamp + index;
1:                     Mutation mutation = hint.mutation;
1: 
1:                     assertEquals(timestamp, hint.creationTime);
1:                     assertEquals(dk(bytes(index)), mutation.key());
1: 
1:                     Row row = mutation.getPartitionUpdates().iterator().next().iterator().next();
1:                     assertEquals(1, Iterables.size(row.cells()));
1:                     assertEquals(bytes(index), row.clustering().get(0));
1:                     Cell cell = row.cells().iterator().next();
1:                     assertNotNull(cell);
1:                     assertEquals(bytes(index), cell.value());
1:                     assertEquals(timestamp * 1000, cell.timestamp());
1: 
1:                     index++;
1:                 }
1:             }
1:         }
1: 
1:         assertEquals(index, HINTS_COUNT);
1:     }
1: 
1:     private void write(HintsWriter writer, long timestamp) throws IOException
1:     {
1:         ByteBuffer buffer = ByteBuffer.allocateDirect(256 * 1024);
1:         try (HintsWriter.Session session = writer.newSession(buffer))
1:         {
1:             write(session, timestamp);
1:         }
1:         FileUtils.clean(buffer);
1:     }
1: 
1:     private void write(HintsWriter.Session session, long timestamp) throws IOException
1:     {
1:         for (int i = 0; i < HINTS_COUNT; i++)
1:             session.append(createHint(i, timestamp));
1:     }
1: 
1:     private static Hint createHint(int idx, long baseTimestamp)
1:     {
1:         long timestamp = baseTimestamp + idx;
1:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:     }
1: 
1:     private static Mutation createMutation(int index, long timestamp)
1:     {
1:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:                .clustering(bytes(index))
1:                .add("val", bytes(index))
1:                .build();
1:     }
1: 
1:     private static int calculateChecksum(File file) throws IOException
1:     {
1:         CRC32 crc = new CRC32();
1:         byte[] buffer = new byte[FBUtilities.MAX_UNSIGNED_SHORT];
1: 
1:         try (InputStream in = Files.newInputStream(file.toPath()))
1:         {
1:             int bytesRead;
1:             while((bytesRead = in.read(buffer)) != -1)
1:                 crc.update(buffer, 0, bytesRead);
1:         }
1: 
1:         return (int) crc.getValue();
1:     }
1: }
============================================================================