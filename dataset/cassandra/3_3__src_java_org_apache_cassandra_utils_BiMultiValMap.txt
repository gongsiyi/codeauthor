1:60bf68c: /*
1:60bf68c:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf68c:  * or more contributor license agreements.  See the NOTICE file
1:60bf68c:  * distributed with this work for additional information
1:60bf68c:  * regarding copyright ownership.  The ASF licenses this file
1:60bf68c:  * to you under the Apache License, Version 2.0 (the
1:60bf68c:  * "License"); you may not use this file except in compliance
1:60bf68c:  * with the License.  You may obtain a copy of the License at
1:60bf68c:  *
1:60bf68c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:60bf68c:  *
1:60bf68c:  * Unless required by applicable law or agreed to in writing, software
1:60bf68c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:60bf68c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:60bf68c:  * See the License for the specific language governing permissions and
1:60bf68c:  * limitations under the License.
1:60bf68c:  */
1:19a4537: package org.apache.cassandra.utils;
1:19a4537: 
1:19a4537: import java.util.Collection;
1:19a4537: import java.util.HashMap;
1:19a4537: import java.util.Map;
1:19a4537: import java.util.Set;
1:19a4537: 
1:19a4537: import com.google.common.collect.HashMultimap;
1:19a4537: import com.google.common.collect.Multimap;
1:19a4537: import com.google.common.collect.Multimaps;
1:19a4537: 
1:19a4537: /**
1:19a4537:  *
1:19a4537:  * A variant of BiMap which does not enforce uniqueness of values. This means the inverse
1:c526131:  * is a Multimap.  (But the "forward" view is not a multimap; keys may only each have one value.)
1:19a4537:  *
1:19a4537:  * @param <K>
1:19a4537:  * @param <V>
1:19a4537:  */
1:19a4537: public class BiMultiValMap<K, V> implements Map<K, V>
1:19a4537: {
1:19a4537:     protected final Map<K, V> forwardMap;
1:19a4537:     protected final Multimap<V, K> reverseMap;
1:19a4537: 
1:19a4537:     public BiMultiValMap()
1:19a4537:     {
1:19a4537:         this.forwardMap = new HashMap<K, V>();
1:19a4537:         this.reverseMap = HashMultimap.<V, K>create();
1:19a4537:     }
1:19a4537: 
1:19a4537:     protected BiMultiValMap(Map<K, V> forwardMap, Multimap<V, K> reverseMap)
1:19a4537:     {
1:19a4537:         this.forwardMap = forwardMap;
1:19a4537:         this.reverseMap = reverseMap;
1:19a4537:     }
1:19a4537: 
1:19a4537:     public BiMultiValMap(BiMultiValMap<K, V> map)
1:19a4537:     {
1:19a4537:         this();
1:19a4537:         forwardMap.putAll(map);
1:19a4537:         reverseMap.putAll(map.inverse());
1:19a4537:     }
1:19a4537: 
1:19a4537:     public Multimap<V, K> inverse()
1:19a4537:     {
1:19a4537:         return Multimaps.unmodifiableMultimap(reverseMap);
1:19a4537:     }
1:19a4537: 
1:19a4537:     public void clear()
1:19a4537:     {
1:19a4537:         forwardMap.clear();
1:19a4537:         reverseMap.clear();
1:19a4537:     }
1:19a4537: 
1:19a4537:     public boolean containsKey(Object key)
1:19a4537:     {
1:19a4537:         return forwardMap.containsKey(key);
1:19a4537:     }
1:19a4537: 
1:19a4537:     public boolean containsValue(Object value)
1:19a4537:     {
1:19a4537:         return reverseMap.containsKey(value);
1:19a4537:     }
1:19a4537: 
1:19a4537:     public Set<Map.Entry<K, V>> entrySet()
1:19a4537:     {
1:19a4537:         return forwardMap.entrySet();
1:19a4537:     }
1:19a4537: 
1:19a4537:     public V get(Object key)
1:19a4537:     {
1:19a4537:         return forwardMap.get(key);
1:19a4537:     }
1:19a4537: 
1:19a4537:     public boolean isEmpty()
1:19a4537:     {
1:19a4537:         return forwardMap.isEmpty();
1:19a4537:     }
1:19a4537: 
1:19a4537:     public Set<K> keySet()
1:19a4537:     {
1:19a4537:         return forwardMap.keySet();
1:19a4537:     }
1:19a4537: 
1:19a4537:     public V put(K key, V value)
1:19a4537:     {
1:19a4537:         V oldVal = forwardMap.put(key, value);
1:19a4537:         if (oldVal != null)
1:19a4537:             reverseMap.remove(oldVal, key);
1:19a4537:         reverseMap.put(value, key);
1:19a4537:         return oldVal;
1:19a4537:     }
1:19a4537: 
1:19a4537:     public void putAll(Map<? extends K, ? extends V> m)
1:19a4537:     {
1:19a4537:         for (Map.Entry<? extends K, ? extends V> entry : m.entrySet())
1:19a4537:             put(entry.getKey(), entry.getValue());
1:19a4537:     }
1:19a4537: 
1:19a4537:     public V remove(Object key)
1:19a4537:     {
1:19a4537:         V oldVal = forwardMap.remove(key);
1:19a4537:         reverseMap.remove(oldVal, key);
1:19a4537:         return oldVal;
1:19a4537:     }
1:19a4537: 
1:19a4537:     public Collection<K> removeValue(V value)
1:19a4537:     {
1:19a4537:         Collection<K> keys = reverseMap.removeAll(value);
1:19a4537:         for (K key : keys)
1:19a4537:             forwardMap.remove(key);
1:19a4537:         return keys;
1:19a4537:     }
1:19a4537: 
1:19a4537:     public int size()
1:19a4537:     {
1:19a4537:         return forwardMap.size();
1:19a4537:     }
1:19a4537: 
1:19a4537:     public Collection<V> values()
1:19a4537:     {
1:19a4537:         return reverseMap.keys();
1:19a4537:     }
1:3fe7028: 
1:3fe7028:     public Collection<V> valueSet()
1:3fe7028:     {
1:3fe7028:         return reverseMap.keySet();
1:3fe7028:     }
1:19a4537: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:40deb91
commit:3fe7028
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Collection<V> valueSet()
1:     {
1:         return reverseMap.keySet();
1:     }
commit:c526131
/////////////////////////////////////////////////////////////////////////
1:  * is a Multimap.  (But the "forward" view is not a multimap; keys may only each have one value.)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:60bf68c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Eric Evans
-------------------------------------------------------------------------------
commit:19a4537
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import com.google.common.collect.HashMultimap;
1: import com.google.common.collect.Multimap;
1: import com.google.common.collect.Multimaps;
1: 
1: /**
1:  *
1:  * A variant of BiMap which does not enforce uniqueness of values. This means the inverse
0:  * is a Multimap.
1:  *
1:  * @param <K>
1:  * @param <V>
1:  */
1: public class BiMultiValMap<K, V> implements Map<K, V>
1: {
1:     protected final Map<K, V> forwardMap;
1:     protected final Multimap<V, K> reverseMap;
1: 
1:     public BiMultiValMap()
1:     {
1:         this.forwardMap = new HashMap<K, V>();
1:         this.reverseMap = HashMultimap.<V, K>create();
1:     }
1: 
1:     protected BiMultiValMap(Map<K, V> forwardMap, Multimap<V, K> reverseMap)
1:     {
1:         this.forwardMap = forwardMap;
1:         this.reverseMap = reverseMap;
1:     }
1: 
1:     public BiMultiValMap(BiMultiValMap<K, V> map)
1:     {
1:         this();
1:         forwardMap.putAll(map);
1:         reverseMap.putAll(map.inverse());
1:     }
1: 
1:     public Multimap<V, K> inverse()
1:     {
1:         return Multimaps.unmodifiableMultimap(reverseMap);
1:     }
1: 
1:     public void clear()
1:     {
1:         forwardMap.clear();
1:         reverseMap.clear();
1:     }
1: 
1:     public boolean containsKey(Object key)
1:     {
1:         return forwardMap.containsKey(key);
1:     }
1: 
1:     public boolean containsValue(Object value)
1:     {
1:         return reverseMap.containsKey(value);
1:     }
1: 
1:     public Set<Map.Entry<K, V>> entrySet()
1:     {
1:         return forwardMap.entrySet();
1:     }
1: 
1:     public V get(Object key)
1:     {
1:         return forwardMap.get(key);
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return forwardMap.isEmpty();
1:     }
1: 
1:     public Set<K> keySet()
1:     {
1:         return forwardMap.keySet();
1:     }
1: 
1:     public V put(K key, V value)
1:     {
1:         V oldVal = forwardMap.put(key, value);
1:         if (oldVal != null)
1:             reverseMap.remove(oldVal, key);
1:         reverseMap.put(value, key);
1:         return oldVal;
1:     }
1: 
1:     public void putAll(Map<? extends K, ? extends V> m)
1:     {
1:         for (Map.Entry<? extends K, ? extends V> entry : m.entrySet())
1:             put(entry.getKey(), entry.getValue());
1:     }
1: 
1:     public V remove(Object key)
1:     {
1:         V oldVal = forwardMap.remove(key);
1:         reverseMap.remove(oldVal, key);
1:         return oldVal;
1:     }
1: 
1:     public Collection<K> removeValue(V value)
1:     {
1:         Collection<K> keys = reverseMap.removeAll(value);
1:         for (K key : keys)
1:             forwardMap.remove(key);
1:         return keys;
1:     }
1: 
1:     public int size()
1:     {
1:         return forwardMap.size();
1:     }
1: 
1:     public Collection<V> values()
1:     {
1:         return reverseMap.keys();
1:     }
1: }
============================================================================