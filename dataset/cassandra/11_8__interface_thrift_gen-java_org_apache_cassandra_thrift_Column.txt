1:1f91e99: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
4:cba59a8:  *
1:1f91e99:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
3:04d5ec3:  */
1:542bd79: package org.apache.cassandra.thrift;
1:7b845a0: /*
1:7b845a0:  * 
1:7b845a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b845a0:  * or more contributor license agreements.  See the NOTICE file
1:7b845a0:  * distributed with this work for additional information
1:7b845a0:  * regarding copyright ownership.  The ASF licenses this file
1:7b845a0:  * to you under the Apache License, Version 2.0 (the
1:7b845a0:  * "License"); you may not use this file except in compliance
1:7b845a0:  * with the License.  You may obtain a copy of the License at
1:7b845a0:  * 
1:7b845a0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7b845a0:  * 
1:7b845a0:  * Unless required by applicable law or agreed to in writing,
1:7b845a0:  * software distributed under the License is distributed on an
1:7b845a0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7b845a0:  * KIND, either express or implied.  See the License for the
1:7b845a0:  * specific language governing permissions and limitations
1:7b845a0:  * under the License.
1:7b845a0:  * 
1:7b845a0:  */
1:7b845a0: 
1:cba59a8: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:1aeca2b: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:1f91e99: import java.util.Map;
1:1f91e99: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:04d5ec3: import java.util.EnumSet;
1:5e72fee: import java.util.Collections;
1:0f56a25: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:1f09fba: 
1:4e8691a: /**
1:4e8691a:  * Basic unit of data within a ColumnFamily.
1:0346193:  * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
1:0346193:  * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
1:d966ed0:  * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
1:0346193:  * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
1:cba59a8:  */
1:bffd9ea: public class Column implements org.apache.thrift.TBase<Column, Column._Fields>, java.io.Serializable, Cloneable, Comparable<Column> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Column");
1:ef293c1: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
1:4ec9511:   private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I32, (short)4);
1:5e72fee: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new ColumnStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new ColumnTupleSchemeFactory());
1:ef293c1:   }
1:5e72fee: 
1:7c8c570:   public ByteBuffer name; // required
1:b153d45:   public ByteBuffer value; // optional
1:b153d45:   public long timestamp; // optional
1:b153d45:   public int ttl; // optional
1:5e72fee: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     NAME((short)1, "name"),
1:04d5ec3:     VALUE((short)2, "value"),
1:d966ed0:     TIMESTAMP((short)3, "timestamp"),
1:16ba403:     TTL((short)4, "ttl");
1:5e72fee: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:5e72fee: 
1:5e72fee:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:cba59a8:       }
1:0f56a25:     }
1:5e72fee: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:1aeca2b:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // NAME
1:d849c69:           return NAME;
1:d849c69:         case 2: // VALUE
1:d849c69:           return VALUE;
1:d966ed0:         case 3: // TIMESTAMP
1:d966ed0:           return TIMESTAMP;
1:d849c69:         case 4: // TTL
1:d849c69:           return TTL;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:0f56a25:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
1:1f09fba:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:5e72fee:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:5e72fee:     }
1:c8afd76: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:b43c785: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:04d5ec3: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
3:b153d45:     }
1:04d5ec3: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
1:b153d45:   }
1:04d5ec3: 
1:0f56a25:   // isset id assignments
1:d966ed0:   private static final int __TIMESTAMP_ISSET_ID = 0;
1:d966ed0:   private static final int __TTL_ISSET_ID = 1;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.VALUE,_Fields.TIMESTAMP,_Fields.TTL};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:04d5ec3:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:1adcd1c:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:1adcd1c:     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:4ec9511:     tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Column.class, metaDataMap);
1:b153d45:   }
1:04d5ec3: 
1:f2da00f:   public Column() {
1:b153d45:   }
1:04d5ec3: 
1:f2da00f:   public Column(
1:1adcd1c:     ByteBuffer name)
3:1f91e99:   {
1:1f91e99:     this();
1:0b1aeda:     this.name = name;
1:5e72fee:   }
1:04d5ec3: 
1:5e72fee:   /**
1:5e72fee:    * Performs a deep copy on <i>other</i>.
1:5e72fee:    */
1:f2da00f:   public Column(Column other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:0b1aeda:     if (other.isSetName()) {
1:4ec9511:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
1:e7a385a: ;
1:5e72fee:     }
1:ef293c1:     if (other.isSetValue()) {
1:4ec9511:       this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
1:e7a385a: ;
1:5e72fee:     }
1:d966ed0:     this.timestamp = other.timestamp;
1:16ba403:     this.ttl = other.ttl;
1:5e72fee:   }
1:5e72fee: 
1:53895ad:   public Column deepCopy() {
1:53895ad:     return new Column(this);
1:53895ad:   }
1:53895ad: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.name = null;
1:e7a385a:     this.value = null;
1:e7a385a:     setTimestampIsSet(false);
1:e7a385a:     this.timestamp = 0;
1:e7a385a:     setTtlIsSet(false);
1:e7a385a:     this.ttl = 0;
1:5e72fee:   }
1:5e72fee: 
1:986cee6:   public byte[] getName() {
1:4ec9511:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:4ec9511:     return name == null ? null : name.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForName() {
1:e7a385a:     return name;
1:5e72fee:   }
1:5e72fee: 
1:8455ebf:   public Column setName(byte[] name) {
1:4ec9511:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public Column setName(ByteBuffer name) {
1:0b1aeda:     this.name = name;
1:8455ebf:     return this;
1:5e72fee:   }
1:5e72fee: 
1:0b1aeda:   public void unsetName() {
1:0b1aeda:     this.name = null;
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:0b1aeda:   public boolean isSetName() {
1:0b1aeda:     return this.name != null;
1:5e72fee:   }
1:5e72fee: 
1:0b1aeda:   public void setNameIsSet(boolean value) {
1:cba59a8:     if (!value) {
1:0b1aeda:       this.name = null;
1:cba59a8:     }
1:ef293c1:   }
1:5e72fee: 
1:8eacd24:   public byte[] getValue() {
1:4ec9511:     setValue(org.apache.thrift.TBaseHelper.rightSize(value));
1:4ec9511:     return value == null ? null : value.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForValue() {
1:e7a385a:     return value;
1:5e72fee:   }
1:5e72fee: 
1:8455ebf:   public Column setValue(byte[] value) {
1:4ec9511:     setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public Column setValue(ByteBuffer value) {
1:5e72fee:     this.value = value;
1:8455ebf:     return this;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void unsetValue() {
1:ef293c1:     this.value = null;
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
1:5e72fee:   public boolean isSetValue() {
1:ef293c1:     return this.value != null;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void setValueIsSet(boolean value) {
1:ef293c1:     if (!value) {
1:ef293c1:       this.value = null;
1:ef293c1:     }
1:5e72fee:   }
1:5e72fee: 
1:d966ed0:   public long getTimestamp() {
1:d966ed0:     return this.timestamp;
1:5e72fee:   }
1:5e72fee: 
1:d966ed0:   public Column setTimestamp(long timestamp) {
1:d966ed0:     this.timestamp = timestamp;
1:d966ed0:     setTimestampIsSet(true);
1:8455ebf:     return this;
1:5e72fee:   }
1:5e72fee: 
1:d966ed0:   public void unsetTimestamp() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
1:d966ed0:   public boolean isSetTimestamp() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:5e72fee:   }
1:5e72fee: 
1:d966ed0:   public void setTimestampIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
1:5e72fee:   }
1:5e72fee: 
1:16ba403:   public int getTtl() {
1:16ba403:     return this.ttl;
1:16ba403:   }
1:16ba403: 
1:16ba403:   public Column setTtl(int ttl) {
1:16ba403:     this.ttl = ttl;
1:16ba403:     setTtlIsSet(true);
1:16ba403:     return this;
1:16ba403:   }
1:16ba403: 
1:16ba403:   public void unsetTtl() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
1:16ba403:   }
1:16ba403: 
1:4ec9511:   /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
1:16ba403:   public boolean isSetTtl() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
1:16ba403:   }
1:16ba403: 
1:16ba403:   public void setTtlIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
1:16ba403:   }
1:16ba403: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
1:0b1aeda:     case NAME:
1:ac921c4:       if (value == null) {
1:0b1aeda:         unsetName();
1:ef293c1:       } else {
1:e7a385a:         setName((ByteBuffer)value);
1:cba59a8:       }
1:5e72fee:       break;
1:5e72fee: 
1:5e72fee:     case VALUE:
1:0f56a25:       if (value == null) {
1:ef293c1:         unsetValue();
1:16ba403:       } else {
1:e7a385a:         setValue((ByteBuffer)value);
1:16ba403:       }
1:16ba403:       break;
1:5e72fee: 
1:d966ed0:     case TIMESTAMP:
3:ef293c1:       if (value == null) {
1:d966ed0:         unsetTimestamp();
1:2b69c40:       } else {
1:d966ed0:         setTimestamp((Long)value);
1:2b69c40:       }
1:2b69c40:       break;
1:5e72fee: 
1:16ba403:     case TTL:
1:16ba403:       if (value == null) {
1:16ba403:         unsetTtl();
1:16ba403:       } else {
1:16ba403:         setTtl((Integer)value);
1:16ba403:       }
1:16ba403:       break;
1:16ba403: 
1:2b69c40:     }
1:2b69c40:   }
1:16ba403: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:0b1aeda:     case NAME:
1:0b1aeda:       return getName();
1:5e72fee: 
1:5e72fee:     case VALUE:
1:5e72fee:       return getValue();
1:5e72fee: 
1:d966ed0:     case TIMESTAMP:
1:7c8c570:       return Long.valueOf(getTimestamp());
1:5e72fee: 
1:16ba403:     case TTL:
1:7c8c570:       return Integer.valueOf(getTtl());
1:5e72fee: 
1:ef293c1:     }
1:04d5ec3:     throw new IllegalStateException();
1:ef293c1:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:0b1aeda:     case NAME:
1:0b1aeda:       return isSetName();
1:5e72fee:     case VALUE:
1:ef293c1:       return isSetValue();
1:d966ed0:     case TIMESTAMP:
1:d966ed0:       return isSetTimestamp();
1:16ba403:     case TTL:
1:16ba403:       return isSetTtl();
1:ef293c1:     }
1:04d5ec3:     throw new IllegalStateException();
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   @Override
1:1f91e99:   public boolean equals(Object that) {
1:1f91e99:     if (that == null)
1:1f91e99:       return false;
1:f2da00f:     if (that instanceof Column)
1:f2da00f:       return this.equals((Column)that);
1:1f91e99:     return false;
1:5e72fee:   }
1:b153d45: 
1:f2da00f:   public boolean equals(Column that) {
1:1f91e99:     if (that == null)
1:1f91e99:       return false;
1:04d5ec3: 
1:0b1aeda:     boolean this_present_name = true && this.isSetName();
1:0b1aeda:     boolean that_present_name = true && that.isSetName();
1:0b1aeda:     if (this_present_name || that_present_name) {
1:0b1aeda:       if (!(this_present_name && that_present_name))
1:1f91e99:         return false;
1:e7a385a:       if (!this.name.equals(that.name))
1:1f91e99:         return false;
1:5e72fee:     }
1:04d5ec3: 
1:ef293c1:     boolean this_present_value = true && this.isSetValue();
1:ef293c1:     boolean that_present_value = true && that.isSetValue();
1:1f91e99:     if (this_present_value || that_present_value) {
1:1f91e99:       if (!(this_present_value && that_present_value))
1:1f91e99:         return false;
1:e7a385a:       if (!this.value.equals(that.value))
1:1f91e99:         return false;
1:5e72fee:     }
1:04d5ec3: 
1:1adcd1c:     boolean this_present_timestamp = true && this.isSetTimestamp();
1:1adcd1c:     boolean that_present_timestamp = true && that.isSetTimestamp();
1:d966ed0:     if (this_present_timestamp || that_present_timestamp) {
1:d966ed0:       if (!(this_present_timestamp && that_present_timestamp))
1:1f91e99:         return false;
1:d966ed0:       if (this.timestamp != that.timestamp)
1:1f91e99:         return false;
1:5e72fee:     }
1:04d5ec3: 
1:16ba403:     boolean this_present_ttl = true && this.isSetTtl();
1:16ba403:     boolean that_present_ttl = true && that.isSetTtl();
1:16ba403:     if (this_present_ttl || that_present_ttl) {
1:16ba403:       if (!(this_present_ttl && that_present_ttl))
1:16ba403:         return false;
1:16ba403:       if (this.ttl != that.ttl)
1:16ba403:         return false;
1:16ba403:     }
1:16ba403: 
1:1f91e99:     return true;
1:b153d45:   }
1:04d5ec3: 
1:5e72fee:   @Override
1:1f91e99:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_name = true && (isSetName());
1:d966ed0:     builder.append(present_name);
1:d966ed0:     if (present_name)
1:d966ed0:       builder.append(name);
1:d966ed0: 
1:d966ed0:     boolean present_value = true && (isSetValue());
1:d966ed0:     builder.append(present_value);
1:d966ed0:     if (present_value)
1:d966ed0:       builder.append(value);
1:d966ed0: 
1:1adcd1c:     boolean present_timestamp = true && (isSetTimestamp());
1:d966ed0:     builder.append(present_timestamp);
1:d966ed0:     if (present_timestamp)
1:d966ed0:       builder.append(timestamp);
1:d966ed0: 
1:d966ed0:     boolean present_ttl = true && (isSetTtl());
1:d966ed0:     builder.append(present_ttl);
1:d966ed0:     if (present_ttl)
1:d966ed0:       builder.append(ttl);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:b153d45:   }
1:04d5ec3: 
1:bffd9ea:   @Override
1:0f56a25:   public int compareTo(Column other) {
1:0f56a25:     if (!getClass().equals(other.getClass())) {
1:0f56a25:       return getClass().getName().compareTo(other.getClass().getName());
1:0f56a25:     }
1:0f56a25: 
1:0f56a25:     int lastComparison = 0;
1:0f56a25: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
4:0f56a25:     if (lastComparison != 0) {
4:0f56a25:       return lastComparison;
1:16ba403:     }
1:e7a385a:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:16ba403:       if (lastComparison != 0) {
1:16ba403:         return lastComparison;
1:16ba403:       }
1:16ba403:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:16ba403:     if (lastComparison != 0) {
1:16ba403:       return lastComparison;
1:2b69c40:     }
1:1adcd1c:     if (isSetValue()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:1adcd1c:     if (isSetTimestamp()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:0f56a25:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
1:0f56a25:     if (lastComparison != 0) {
1:0f56a25:       return lastComparison;
1:0f56a25:     }
1:e7a385a:     if (isSetTtl()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:0f56a25:       }
1:0f56a25:     }
1:0f56a25:     return 0;
1:0f56a25:   }
1:0f56a25: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:b153d45:   }
1:04d5ec3: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:b153d45:   }
1:04d5ec3: 
1:5e72fee:   @Override
1:1f91e99:   public String toString() {
1:f2da00f:     StringBuilder sb = new StringBuilder("Column(");
1:5e72fee:     boolean first = true;
1:5e72fee: 
1:0b1aeda:     sb.append("name:");
1:0b1aeda:     if (this.name == null) {
1:cba59a8:       sb.append("null");
1:cba59a8:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
1:986cee6:     }
3:5e72fee:     first = false;
1:1adcd1c:     if (isSetValue()) {
1:1adcd1c:       if (!first) sb.append(", ");
1:1adcd1c:       sb.append("value:");
1:1adcd1c:       if (this.value == null) {
1:1adcd1c:         sb.append("null");
1:1adcd1c:       } else {
1:1adcd1c:         org.apache.thrift.TBaseHelper.toString(this.value, sb);
1:1adcd1c:       }
1:1adcd1c:       first = false;
1:cba59a8:     }
1:1adcd1c:     if (isSetTimestamp()) {
1:1adcd1c:       if (!first) sb.append(", ");
1:1adcd1c:       sb.append("timestamp:");
1:1adcd1c:       sb.append(this.timestamp);
1:1adcd1c:       first = false;
1:1adcd1c:     }
1:16ba403:     if (isSetTtl()) {
1:16ba403:       if (!first) sb.append(", ");
1:16ba403:       sb.append("ttl:");
1:16ba403:       sb.append(this.ttl);
1:16ba403:       first = false;
1:16ba403:     }
1:1f91e99:     sb.append(")");
1:1f91e99:     return sb.toString();
1:ef293c1:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:5e72fee:     // check for required fields
1:ac921c4:     if (name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:ac921c4:     }
1:b153d45:     // check for sub-struct validity
1:ac921c4:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class ColumnStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnStandardScheme getScheme() {
1:b153d45:       return new ColumnStandardScheme();
1:0f56a25:     }
1:0f56a25:   }
1:b153d45: 
1:b153d45:   private static class ColumnStandardScheme extends StandardScheme<Column> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, Column struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:8eacd24:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.name = iprot.readBinary();
1:b153d45:               struct.setNameIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:8eacd24:             }
1:2b69c40:             break;
1:2b69c40:           case 2: // VALUE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.value = iprot.readBinary();
1:b153d45:               struct.setValueIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:5e72fee:             break;
1:d966ed0:           case 3: // TIMESTAMP
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:b153d45:               struct.timestamp = iprot.readI64();
1:b153d45:               struct.setTimestampIsSet(true);
1:ef293c1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:5e72fee:             break;
1:16ba403:           case 4: // TTL
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.ttl = iprot.readI32();
1:b153d45:               struct.setTtlIsSet(true);
1:ef293c1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
5:b153d45:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:5e72fee:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:d966ed0:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, Column struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:5e72fee:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name != null) {
1:0b1aeda:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.name);
1:cba59a8:         oprot.writeFieldEnd();
1:cba59a8:       }
1:b153d45:       if (struct.value != null) {
1:b153d45:         if (struct.isSetValue()) {
1:1adcd1c:           oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:b153d45:           oprot.writeBinary(struct.value);
1:1adcd1c:           oprot.writeFieldEnd();
1:1adcd1c:         }
1:1adcd1c:       }
1:b153d45:       if (struct.isSetTimestamp()) {
1:1adcd1c:         oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
1:b153d45:         oprot.writeI64(struct.timestamp);
1:d966ed0:         oprot.writeFieldEnd();
1:ac921c4:       }
1:b153d45:       if (struct.isSetTtl()) {
1:16ba403:         oprot.writeFieldBegin(TTL_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.ttl);
1:16ba403:         oprot.writeFieldEnd();
1:16ba403:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:0f56a25:     }
1:5e72fee: 
1:5e72fee:   }
1:b153d45: 
1:b153d45:   private static class ColumnTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnTupleScheme getScheme() {
1:b153d45:       return new ColumnTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class ColumnTupleScheme extends TupleScheme<Column> {
1:b153d45: 
1:5e72fee:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, Column struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.name);
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetValue()) {
1:b153d45:         optionals.set(0);
1:b153d45:       }
1:b153d45:       if (struct.isSetTimestamp()) {
1:b153d45:         optionals.set(1);
1:b153d45:       }
1:b153d45:       if (struct.isSetTtl()) {
1:b153d45:         optionals.set(2);
1:b153d45:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetValue()) {
1:b153d45:         oprot.writeBinary(struct.value);
1:b153d45:       }
1:b153d45:       if (struct.isSetTimestamp()) {
1:b153d45:         oprot.writeI64(struct.timestamp);
1:b153d45:       }
1:b153d45:       if (struct.isSetTtl()) {
1:b153d45:         oprot.writeI32(struct.ttl);
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
2:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, Column struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.name = iprot.readBinary();
1:b153d45:       struct.setNameIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.value = iprot.readBinary();
1:b153d45:         struct.setValueIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.timestamp = iprot.readI64();
1:b153d45:         struct.setTimestampIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.ttl = iprot.readI32();
1:b153d45:         struct.setTtlIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:c8afd76: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class Column implements org.apache.thrift.TBase<Column, Column._Fields>, java.io.Serializable, Cloneable, Comparable<Column> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
1:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
1:     lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer name)
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_timestamp = true && this.isSetTimestamp();
1:     boolean that_present_timestamp = true && that.isSetTimestamp();
/////////////////////////////////////////////////////////////////////////
1:     boolean present_timestamp = true && (isSetTimestamp());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (isSetValue()) {
1:         oprot.writeFieldBegin(VALUE_FIELD_DESC);
0:         oprot.writeBinary(this.value);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     if (isSetTimestamp()) {
1:       oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
0:       oprot.writeI64(this.timestamp);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetValue()) {
1:       if (!first) sb.append(", ");
1:       sb.append("value:");
1:       if (this.value == null) {
1:         sb.append("null");
1:       } else {
1:         org.apache.thrift.TBaseHelper.toString(this.value, sb);
1:       }
1:       first = false;
1:     if (isSetTimestamp()) {
1:       if (!first) sb.append(", ");
1:       sb.append("timestamp:");
1:       sb.append(this.timestamp);
1:       first = false;
1:     }
/////////////////////////////////////////////////////////////////////////
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer name;
0:   public ByteBuffer value;
/////////////////////////////////////////////////////////////////////////
0:     ByteBuffer name,
0:     ByteBuffer value,
/////////////////////////////////////////////////////////////////////////
0:       this.name = TBaseHelper.copyBinary(other.name);
1: ;
0:       this.value = TBaseHelper.copyBinary(other.value);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     this.value = null;
1:     setTimestampIsSet(false);
1:     this.timestamp = 0;
1:     setTtlIsSet(false);
1:     this.ttl = 0;
0:     setName(TBaseHelper.rightSize(name));
0:     return name.array();
1:   }
1: 
0:   public ByteBuffer BufferForName() {
1:     return name;
0:     setName(ByteBuffer.wrap(name));
1:     return this;
1:   }
1: 
1:   public Column setName(ByteBuffer name) {
/////////////////////////////////////////////////////////////////////////
0:     setValue(TBaseHelper.rightSize(value));
0:     return value.array();
1:   }
1: 
0:   public ByteBuffer BufferForValue() {
1:     return value;
0:     setValue(ByteBuffer.wrap(value));
1:     return this;
1:   }
1: 
1:   public Column setValue(ByteBuffer value) {
/////////////////////////////////////////////////////////////////////////
1:         setName((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
1:         setValue((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.name.equals(that.name))
/////////////////////////////////////////////////////////////////////////
1:       if (!this.value.equals(that.value))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetName()) {
0:       lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetValue()) {
0:       lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetTimestamp()) {
0:       lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetTtl()) {
0:       lastComparison = TBaseHelper.compareTo(this.ttl, typedOther.ttl);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.name, sb);
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.value, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:  * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
/////////////////////////////////////////////////////////////////////////
0:   private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)3);
0:   public long timestamp;
1:     TIMESTAMP((short)3, "timestamp"),
/////////////////////////////////////////////////////////////////////////
1:         case 3: // TIMESTAMP
1:           return TIMESTAMP;
/////////////////////////////////////////////////////////////////////////
1:   private static final int __TIMESTAMP_ISSET_ID = 0;
1:   private static final int __TTL_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I64)));
/////////////////////////////////////////////////////////////////////////
0:     long timestamp)
1:     this.timestamp = timestamp;
1:     setTimestampIsSet(true);
/////////////////////////////////////////////////////////////////////////
1:     this.timestamp = other.timestamp;
/////////////////////////////////////////////////////////////////////////
1:   public long getTimestamp() {
1:     return this.timestamp;
1:   public Column setTimestamp(long timestamp) {
0:     this.timestamp = timestamp;
0:     setTimestampIsSet(true);
1:   public void unsetTimestamp() {
0:     __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
0:   /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
1:   public boolean isSetTimestamp() {
0:     return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
1:   public void setTimestampIsSet(boolean value) {
0:     __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
1:         unsetTimestamp();
1:         setTimestamp((Long)value);
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
0:       return new Long(getTimestamp());
/////////////////////////////////////////////////////////////////////////
1:     case TIMESTAMP:
1:       return isSetTimestamp();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_timestamp = true;
0:     boolean that_present_timestamp = true;
1:     if (this_present_timestamp || that_present_timestamp) {
1:       if (!(this_present_timestamp && that_present_timestamp))
1:       if (this.timestamp != that.timestamp)
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_value = true && (isSetValue());
1:     builder.append(present_value);
1:     if (present_value)
1:       builder.append(value);
1: 
0:     boolean present_timestamp = true;
1:     builder.append(present_timestamp);
1:     if (present_timestamp)
1:       builder.append(timestamp);
1: 
1:     boolean present_ttl = true && (isSetTtl());
1:     builder.append(present_ttl);
1:     if (present_ttl)
1:       builder.append(ttl);
1: 
1:     return builder.toHashCode();
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
0:     if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
1:         case 3: // TIMESTAMP
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             setTimestampIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetTimestamp()) {
0:       throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
0:     oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
0:     oprot.writeI64(this.timestamp);
1:     oprot.writeFieldEnd();
/////////////////////////////////////////////////////////////////////////
0:     sb.append("timestamp:");
0:     sb.append(this.timestamp);
/////////////////////////////////////////////////////////////////////////
0:     // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class Column implements TBase<Column, Column._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // VALUE
1:           return VALUE;
0:         case 3: // CLOCK
0:           return CLOCK;
1:         case 4: // TTL
1:           return TTL;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
0:         new StructMetaData(TType.STRUCT, Clock.class)));
0:     tmpMap.put(_Fields.TTL, new FieldMetaData("ttl", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.I32)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(this.clock, typedOther.clock);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetTtl()) {      lastComparison = TBaseHelper.compareTo(this.ttl, typedOther.ttl);
commit:7b845a0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
0:  * @param clock. The clock is used for conflict detection/resolution when two columns with same name need to be compared.
/////////////////////////////////////////////////////////////////////////
0:   private static final TField CLOCK_FIELD_DESC = new TField("clock", TType.STRUCT, (short)3);
0:   public Clock clock;
0:     CLOCK((short)3, "clock"),
/////////////////////////////////////////////////////////////////////////
0:   private static final int __TTL_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
0:     put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
0:         new StructMetaData(TType.STRUCT, Clock.class)));
/////////////////////////////////////////////////////////////////////////
0:     Clock clock)
0:     this.clock = clock;
/////////////////////////////////////////////////////////////////////////
0:     if (other.isSetClock()) {
0:       this.clock = new Clock(other.clock);
1:     }
/////////////////////////////////////////////////////////////////////////
0:   public Clock getClock() {
0:     return this.clock;
0:   public Column setClock(Clock clock) {
0:     this.clock = clock;
0:   public void unsetClock() {
0:     this.clock = null;
0:   /** Returns true if field clock is set (has been asigned a value) and false otherwise */
0:   public boolean isSetClock() {
0:     return this.clock != null;
0:   public void setClockIsSet(boolean value) {
1:     if (!value) {
0:       this.clock = null;
1:     }
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:         unsetClock();
0:         setClock((Clock)value);
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:       return getClock();
/////////////////////////////////////////////////////////////////////////
0:     case CLOCK:
0:       return isSetClock();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_clock = true && this.isSetClock();
0:     boolean that_present_clock = true && that.isSetClock();
0:     if (this_present_clock || that_present_clock) {
0:       if (!(this_present_clock && that_present_clock))
0:       if (!this.clock.equals(that.clock))
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetClock()).compareTo(typedOther.isSetClock());
0:     if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(clock, typedOther.clock);
/////////////////////////////////////////////////////////////////////////
0:         case 3: // CLOCK
0:           if (field.type == TType.STRUCT) {
0:             this.clock = new Clock();
0:             this.clock.read(iprot);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (this.clock != null) {
0:       oprot.writeFieldBegin(CLOCK_FIELD_DESC);
0:       this.clock.write(oprot);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     sb.append("clock:");
0:     if (this.clock == null) {
1:       sb.append("null");
1:     } else {
0:       sb.append(this.clock);
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (clock == null) {
0:       throw new TProtocolException("Required field 'clock' was not present! Struct: " + toString());
1:     }
commit:0346193
/////////////////////////////////////////////////////////////////////////
1:  * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
1:  * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
0:  * @param timestamp. The highest timestamp associated with the given column name is the one whose value the system will converge to.  No other assumptions are made about what the timestamp represents, but using microseconds-since-epoch is customary.
1:  * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
commit:16ba403
/////////////////////////////////////////////////////////////////////////
0:  * @param ttl. A delay (in seconds) after which the column will be automatically deleted. If this parameter is not
0:  *             provided or is <= 0, the column will never be deleted automatically (and will have no ttl when queried).
0:  *             Note that, if set, the column will be deleted from a node ttl seconds after the column reach the node.
/////////////////////////////////////////////////////////////////////////
0:   private static final TField TTL_FIELD_DESC = new TField("ttl", TType.I32, (short)4);
0:   public int ttl;
0:     TIMESTAMP((short)3, "timestamp"),
1:     TTL((short)4, "ttl");
/////////////////////////////////////////////////////////////////////////
0:   private static final int __TTL_ISSET_ID = 1;
0:   private BitSet __isset_bit_vector = new BitSet(2);
/////////////////////////////////////////////////////////////////////////
0:     put(_Fields.TTL, new FieldMetaData("ttl", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.I32)));
/////////////////////////////////////////////////////////////////////////
1:     this.ttl = other.ttl;
/////////////////////////////////////////////////////////////////////////
1:   public int getTtl() {
1:     return this.ttl;
1:   }
1: 
1:   public Column setTtl(int ttl) {
1:     this.ttl = ttl;
1:     setTtlIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetTtl() {
0:     __isset_bit_vector.clear(__TTL_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field ttl is set (has been asigned a value) and false otherwise */
1:   public boolean isSetTtl() {
0:     return __isset_bit_vector.get(__TTL_ISSET_ID);
1:   }
1: 
1:   public void setTtlIsSet(boolean value) {
0:     __isset_bit_vector.set(__TTL_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case TTL:
1:       if (value == null) {
1:         unsetTtl();
1:       } else {
1:         setTtl((Integer)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case TTL:
0:       return new Integer(getTtl());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case TTL:
1:       return isSetTtl();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_ttl = true && this.isSetTtl();
1:     boolean that_present_ttl = true && that.isSetTtl();
1:     if (this_present_ttl || that_present_ttl) {
1:       if (!(this_present_ttl && that_present_ttl))
1:         return false;
1:       if (this.ttl != that.ttl)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetTtl()) {      lastComparison = TBaseHelper.compareTo(ttl, typedOther.ttl);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 4: // TTL
0:           if (field.type == TType.I32) {
0:             this.ttl = iprot.readI32();
0:             setTtlIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
1:     if (isSetTtl()) {
1:       oprot.writeFieldBegin(TTL_FIELD_DESC);
0:       oprot.writeI32(this.ttl);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetTtl()) {
1:       if (!first) sb.append(", ");
1:       sb.append("ttl:");
1:       sb.append(this.ttl);
1:       first = false;
1:     }
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
0:     if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(value, typedOther.value);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
0:     if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // NAME
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // VALUE
0:           if (field.type == TType.STRING) {
0:             this.value = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case 3: // TIMESTAMP
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             setTimestampIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:53895ad
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   public static final int NAME = 1;
0:   public static final int VALUE = 2;
/////////////////////////////////////////////////////////////////////////
1:   public Column deepCopy() {
1:     return new Column(this);
1:   }
1: 
0:   @Deprecated
commit:ac921c4
/////////////////////////////////////////////////////////////////////////
0:     put(NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     put(VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:     put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetTimestamp()) {
0:       throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (value == null) {
0:       throw new TProtocolException("Required field 'value' was not present! Struct: " + toString());
1:     }
0:     // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
commit:59ec410
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0f56a25
/////////////////////////////////////////////////////////////////////////
1: import java.util.BitSet;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: public class Column implements TBase, java.io.Serializable, Cloneable, Comparable<Column> {
/////////////////////////////////////////////////////////////////////////
1:   // isset id assignments
0:   private static final int __TIMESTAMP_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
/////////////////////////////////////////////////////////////////////////
0:     setTimestampIsSet(true);
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     setTimestampIsSet(true);
0:     __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
0:     return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
0:     __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(Column other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     Column typedOther = (Column)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(isSetValue());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(value, typedOther.value);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:             setTimestampIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:     if (!isSetTimestamp()) {
0:       throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (value == null) {
0:       throw new TProtocolException("Required field 'value' was not present! Struct: " + toString());
1:     }
0:     // 'timestamp' is only checked in read() because it's a primitive and you chose the non-beans generator.
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0:   public byte[] name;
/////////////////////////////////////////////////////////////////////////
0:     byte[] name,
/////////////////////////////////////////////////////////////////////////
0:       this.name = new byte[other.name.length];
0:       System.arraycopy(other.name, 0, name, 0, other.name.length);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getName() {
0:   public void setName(byte[] name) {
/////////////////////////////////////////////////////////////////////////
0:         setName((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.name, that.name))
/////////////////////////////////////////////////////////////////////////
0:             this.name = iprot.readBinary();
/////////////////////////////////////////////////////////////////////////
0:       oprot.writeBinary(this.name);
/////////////////////////////////////////////////////////////////////////
0:         int __name_size = Math.min(this.name.length, 128);
0:         for (int i = 0; i < __name_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.name[i]).length() > 1 ? Integer.toHexString(this.name[i]).substring(Integer.toHexString(this.name[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.name[i]).toUpperCase());
1:         }
0:         if (this.name.length > 128) sb.append(" ...");
commit:0b1aeda
/////////////////////////////////////////////////////////////////////////
0:   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
0:   public String name;
0:   public static final int NAME = 1;
/////////////////////////////////////////////////////////////////////////
0:     put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
/////////////////////////////////////////////////////////////////////////
0:     String name,
1:     this.name = name;
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetName()) {
0:       this.name = other.name;
/////////////////////////////////////////////////////////////////////////
0:   public String getName() {
0:     return this.name;
0:   public void setName(String name) {
1:     this.name = name;
1:   public void unsetName() {
1:     this.name = null;
0:   // Returns true if field name is set (has been asigned a value) and false otherwise
1:   public boolean isSetName() {
1:     return this.name != null;
1:   public void setNameIsSet(boolean value) {
1:       this.name = null;
/////////////////////////////////////////////////////////////////////////
1:     case NAME:
1:         unsetName();
0:         setName((String)value);
/////////////////////////////////////////////////////////////////////////
1:     case NAME:
1:       return getName();
/////////////////////////////////////////////////////////////////////////
1:     case NAME:
1:       return isSetName();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
0:       if (!this.name.equals(that.name))
/////////////////////////////////////////////////////////////////////////
0:         case NAME:
0:             this.name = iprot.readString();
/////////////////////////////////////////////////////////////////////////
0:     if (this.name != null) {
1:       oprot.writeFieldBegin(NAME_FIELD_DESC);
0:       oprot.writeString(this.name);
/////////////////////////////////////////////////////////////////////////
1:     sb.append("name:");
1:     if (this.name == null) {
0:       sb.append(this.name);
commit:f2da00f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class Column implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("Column");
0:   private static final TField COLUMN_NAME_FIELD_DESC = new TField("column_name", TType.STRING, (short)1);
0:   public String column_name;
0:   public static final int COLUMN_NAME = 1;
/////////////////////////////////////////////////////////////////////////
0:     put(COLUMN_NAME, new FieldMetaData("column_name", TFieldRequirementType.DEFAULT, 
/////////////////////////////////////////////////////////////////////////
0:     FieldMetaData.addStructMetaDataMap(Column.class, metaDataMap);
1:   public Column() {
1:   public Column(
0:     String column_name,
0:     this.column_name = column_name;
/////////////////////////////////////////////////////////////////////////
1:   public Column(Column other) {
0:     if (other.isSetColumn_name()) {
0:       this.column_name = other.column_name;
/////////////////////////////////////////////////////////////////////////
0:   public Column clone() {
0:     return new Column(this);
0:   public String getColumn_name() {
0:     return this.column_name;
0:   public void setColumn_name(String column_name) {
0:     this.column_name = column_name;
0:   public void unsetColumn_name() {
0:     this.column_name = null;
0:   // Returns true if field column_name is set (has been asigned a value) and false otherwise
0:   public boolean isSetColumn_name() {
0:     return this.column_name != null;
0:   public void setColumn_nameIsSet(boolean value) {
0:       this.column_name = null;
/////////////////////////////////////////////////////////////////////////
0:     case COLUMN_NAME:
0:         unsetColumn_name();
0:         setColumn_name((String)value);
/////////////////////////////////////////////////////////////////////////
0:     case COLUMN_NAME:
0:       return getColumn_name();
/////////////////////////////////////////////////////////////////////////
0:     case COLUMN_NAME:
0:       return isSetColumn_name();
/////////////////////////////////////////////////////////////////////////
1:     if (that instanceof Column)
1:       return this.equals((Column)that);
1:   public boolean equals(Column that) {
0:     boolean this_present_column_name = true && this.isSetColumn_name();
0:     boolean that_present_column_name = true && that.isSetColumn_name();
0:     if (this_present_column_name || that_present_column_name) {
0:       if (!(this_present_column_name && that_present_column_name))
0:       if (!this.column_name.equals(that.column_name))
/////////////////////////////////////////////////////////////////////////
0:         case COLUMN_NAME:
0:             this.column_name = iprot.readString();
/////////////////////////////////////////////////////////////////////////
0:     if (this.column_name != null) {
0:       oprot.writeString(this.column_name);
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder sb = new StringBuilder("Column(");
0:     sb.append("column_name:");
0:     if (this.column_name == null) {
0:       sb.append(this.column_name);
commit:1f09fba
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:6b5e940
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.Logger;
commit:551a1a0
commit:ef293c1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (other.isSetColumnName()) {
1:     if (other.isSetValue()) {
/////////////////////////////////////////////////////////////////////////
0:     this.columnName = null;
0:     return this.columnName != null;
1:     if (!value) {
0:       this.columnName = null;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.value = null;
1:     return this.value != null;
0:     if (!value) {
1:       this.value = null;
1:     }
/////////////////////////////////////////////////////////////////////////
1:       if (value == null) {
0:         unsetColumnName();
1:       } else {
0:         setColumnName((String)value);
1:       }
1:       if (value == null) {
1:         unsetValue();
1:       } else {
0:         setValue((byte[])value);
1:       }
1:       if (value == null) {
0:         unsetTimestamp();
1:       } else {
0:         setTimestamp((Long)value);
1:       }
/////////////////////////////////////////////////////////////////////////
0:       return isSetColumnName();
1:       return isSetValue();
0:       return isSetTimestamp();
/////////////////////////////////////////////////////////////////////////
0:     boolean this_present_columnName = true && this.isSetColumnName();
0:     boolean that_present_columnName = true && that.isSetColumnName();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_value = true && this.isSetValue();
1:     boolean that_present_value = true && that.isSetValue();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (this.columnName == null) {
0:       sb.append("null");
0:     } else {
0:       sb.append(this.columnName);
1:     }
0:     if (this.value == null) {
0:         int __value_size = Math.min(this.value.length, 128);
0:         for (int i = 0; i < __value_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.value[i]).length() > 1 ? Integer.toHexString(this.value[i]).substring(Integer.toHexString(this.value[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.value[i]).toUpperCase());
1:         }
0:         if (this.value.length > 128) sb.append(" ...");
commit:8eacd24
/////////////////////////////////////////////////////////////////////////
0:   public byte[] value;
/////////////////////////////////////////////////////////////////////////
0:     byte[] value,
/////////////////////////////////////////////////////////////////////////
0:       this.value = new byte[other.value.length];
0:       System.arraycopy(other.value, 0, value, 0, other.value.length);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getValue() {
0:   public void setValue(byte[] value) {
/////////////////////////////////////////////////////////////////////////
0:       setValue((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.value, that.value))
/////////////////////////////////////////////////////////////////////////
0:             this.value = iprot.readBinary();
/////////////////////////////////////////////////////////////////////////
0:       oprot.writeBinary(this.value);
/////////////////////////////////////////////////////////////////////////
0:     if (value == null) { 
0:       sb.append("null");
0:     } else {
0:       int __value_size = Math.min(this.value.length, 128);
0:       for (int i = 0; i < __value_size; i++) {
0:         if (i != 0) sb.append(" ");
0:         sb.append(Integer.toHexString(this.value[i]).length() > 1 ? Integer.toHexString(this.value[i]).substring(Integer.toHexString(this.value[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.value[i]).toUpperCase());
1:       }
0:       if (this.value.length > 128) sb.append(" ...");
1:     }
commit:5e72fee
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
0: import org.apache.thrift.transport.*;
0: public class column_t implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("column_t");
0:   private static final TField COLUMN_NAME_FIELD_DESC = new TField("columnName", TType.STRING, (short)1);
0:   private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);
0:   private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)3);
1: 
0:   public static final int COLUMNNAME = 1;
0:   public static final int VALUE = 2;
0:   public static final int TIMESTAMP = 3;
0:   private final Isset __isset = new Isset();
0:   private static final class Isset implements java.io.Serializable {
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(COLUMNNAME, new FieldMetaData("columnName", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.I64)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(column_t.class, metaDataMap);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     this.__isset.columnName = (columnName != null);
0:     this.__isset.value = (value != null);
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
0:   public column_t(column_t other) {
0:     __isset.columnName = other.__isset.columnName;
0:     if (other.columnName != null) {
0:       this.columnName = other.columnName;
1:     }
0:     __isset.value = other.__isset.value;
0:     if (other.value != null) {
0:       this.value = other.value;
1:     }
0:     __isset.timestamp = other.__isset.timestamp;
0:     this.timestamp = other.timestamp;
1:   }
1: 
1:   @Override
0:   public column_t clone() {
0:     return new column_t(this);
1:   }
1: 
0:   public String getColumnName() {
0:     return this.columnName;
1:   }
1: 
0:   public void setColumnName(String columnName) {
0:     this.columnName = columnName;
0:     this.__isset.columnName = (columnName != null);
1:   }
1: 
0:   public void unsetColumnName() {
0:     this.__isset.columnName = false;
1:   }
1: 
0:   // Returns true if field columnName is set (has been asigned a value) and false otherwise
0:   public boolean isSetColumnName() {
0:     return this.__isset.columnName;
1:   }
1: 
0:   public void setColumnNameIsSet(boolean value) {
0:     this.__isset.columnName = value;
1:   }
1: 
0:   public String getValue() {
0:     return this.value;
1:   }
1: 
0:   public void setValue(String value) {
1:     this.value = value;
0:     this.__isset.value = (value != null);
1:   }
1: 
1:   public void unsetValue() {
0:     this.__isset.value = false;
1:   }
1: 
0:   // Returns true if field value is set (has been asigned a value) and false otherwise
1:   public boolean isSetValue() {
0:     return this.__isset.value;
1:   }
1: 
1:   public void setValueIsSet(boolean value) {
0:     this.__isset.value = value;
1:   }
1: 
0:   public long getTimestamp() {
0:     return this.timestamp;
1:   }
1: 
0:   public void setTimestamp(long timestamp) {
0:     this.timestamp = timestamp;
0:     this.__isset.timestamp = true;
1:   }
1: 
0:   public void unsetTimestamp() {
0:     this.__isset.timestamp = false;
1:   }
1: 
0:   // Returns true if field timestamp is set (has been asigned a value) and false otherwise
0:   public boolean isSetTimestamp() {
0:     return this.__isset.timestamp;
1:   }
1: 
0:   public void setTimestampIsSet(boolean value) {
0:     this.__isset.timestamp = value;
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
0:     case COLUMNNAME:
0:       setColumnName((String)value);
1:       break;
1: 
1:     case VALUE:
0:       setValue((String)value);
1:       break;
1: 
0:     case TIMESTAMP:
0:       setTimestamp((Long)value);
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
0:     case COLUMNNAME:
0:       return getColumnName();
1: 
1:     case VALUE:
1:       return getValue();
1: 
0:     case TIMESTAMP:
0:       return new Long(getTimestamp());
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
0:     case COLUMNNAME:
0:       return this.__isset.columnName;
1:     case VALUE:
0:       return this.__isset.value;
0:     case TIMESTAMP:
0:       return this.__isset.timestamp;
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
0:         case COLUMNNAME:
/////////////////////////////////////////////////////////////////////////
0:         case VALUE:
/////////////////////////////////////////////////////////////////////////
0:         case TIMESTAMP:
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:       oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
0:       oprot.writeFieldBegin(VALUE_FIELD_DESC);
0:     oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
1:   @Override
1:     boolean first = true;
1: 
0:     if (!first) sb.append(", ");
1:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("value:");
1:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("timestamp:");
1:     first = false;
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new ColumnStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new ColumnTupleSchemeFactory());
1:   }
1: 
1:   public ByteBuffer value; // optional
1:   public long timestamp; // optional
1:   public int ttl; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.VALUE,_Fields.TIMESTAMP,_Fields.TTL};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class ColumnStandardSchemeFactory implements SchemeFactory {
1:     public ColumnStandardScheme getScheme() {
1:       return new ColumnStandardScheme();
1:     }
1:   }
1: 
1:   private static class ColumnStandardScheme extends StandardScheme<Column> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, Column struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readBinary();
1:               struct.setNameIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 2: // VALUE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.value = iprot.readBinary();
1:               struct.setValueIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 3: // TIMESTAMP
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:               struct.timestamp = iprot.readI64();
1:               struct.setTimestampIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 4: // TTL
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.ttl = iprot.readI32();
1:               struct.setTtlIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, Column struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
0:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeBinary(struct.name);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.value != null) {
1:         if (struct.isSetValue()) {
0:           oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:           oprot.writeBinary(struct.value);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.isSetTimestamp()) {
0:         oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
1:         oprot.writeI64(struct.timestamp);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.isSetTtl()) {
0:         oprot.writeFieldBegin(TTL_FIELD_DESC);
1:         oprot.writeI32(struct.ttl);
0:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class ColumnTupleSchemeFactory implements SchemeFactory {
1:     public ColumnTupleScheme getScheme() {
1:       return new ColumnTupleScheme();
1:     }
1:   }
1: 
1:   private static class ColumnTupleScheme extends TupleScheme<Column> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, Column struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.name);
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetValue()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetTimestamp()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetTtl()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetValue()) {
1:         oprot.writeBinary(struct.value);
1:       }
1:       if (struct.isSetTimestamp()) {
1:         oprot.writeI64(struct.timestamp);
1:       }
1:       if (struct.isSetTtl()) {
1:         oprot.writeI32(struct.ttl);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, Column struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readBinary();
1:       struct.setNameIsSet(true);
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         struct.value = iprot.readBinary();
1:         struct.setValueIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.timestamp = iprot.readI64();
1:         struct.setTimestampIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.ttl = iprot.readI32();
1:         struct.setTtlIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer name; // required
0:   public ByteBuffer value; // required
0:   public long timestamp; // required
0:   public int ttl; // required
/////////////////////////////////////////////////////////////////////////
1:       return Long.valueOf(getTimestamp());
1:       return Integer.valueOf(getTtl());
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class Column implements org.apache.thrift.TBase<Column, Column._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Column");
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
1:   private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I32, (short)4);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:     tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Column.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
1:       this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
/////////////////////////////////////////////////////////////////////////
1:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:     return name == null ? null : name.array();
1:   public ByteBuffer bufferForName() {
1:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setValue(org.apache.thrift.TBaseHelper.rightSize(value));
1:     return value == null ? null : value.array();
1:   public ByteBuffer bufferForValue() {
1:     setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I64) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
/////////////////////////////////////////////////////////////////////////
0:       org.apache.thrift.TBaseHelper.toString(this.value, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
commit:7cd412b
/////////////////////////////////////////////////////////////////////////
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class Column implements TBase<Column._Fields>, java.io.Serializable, Cloneable, Comparable<Column> {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     VALUE((short)2, "value"),
0:     TIMESTAMP((short)3, "timestamp");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field name is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field value is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case NAME:
0:             if (field.type == TType.STRING) {
0:               this.name = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case VALUE:
0:             if (field.type == TType.STRING) {
0:               this.value = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:           case TIMESTAMP:
0:             if (field.type == TType.I64) {
0:               this.timestamp = iprot.readI64();
0:               setTimestampIsSet(true);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Basic unit of data within a ColumnFamily.
0:  * @param name. A column name can act both as structure (a label) or as data (like value). Regardless, the name of the column
0:  *        is used as a key to its value.
0:  * @param value. Some data
0:  * @param timestamp. Used to record when data was sent to be written.
0:  */
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
1:   public Column setName(byte[] name) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public Column setValue(byte[] value) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
0:   public Column setTimestamp(long timestamp) {
1:     return this;
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  */
0: package org.apache.cassandra.service;
0: 
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import com.facebook.thrift.*;
0: 
0: import com.facebook.thrift.protocol.*;
0: import com.facebook.thrift.transport.*;
0: 
0: public class column_t implements TBase, java.io.Serializable {
0:   public String columnName;
0:   public String value;
0:   public long timestamp;
0: 
0:   public final Isset __isset = new Isset();
0:   public static final class Isset implements java.io.Serializable {
0:     public boolean columnName = false;
0:     public boolean value = false;
0:     public boolean timestamp = false;
0:   }
0: 
0:   public column_t() {
0:   }
0: 
0:   public column_t(
0:     String columnName,
0:     String value,
0:     long timestamp)
1:   {
1:     this();
0:     this.columnName = columnName;
0:     this.__isset.columnName = true;
0:     this.value = value;
0:     this.__isset.value = true;
0:     this.timestamp = timestamp;
0:     this.__isset.timestamp = true;
0:   }
0: 
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
0:     if (that instanceof column_t)
0:       return this.equals((column_t)that);
1:     return false;
0:   }
0: 
0:   public boolean equals(column_t that) {
1:     if (that == null)
1:       return false;
0: 
0:     boolean this_present_columnName = true && (this.columnName != null);
0:     boolean that_present_columnName = true && (that.columnName != null);
0:     if (this_present_columnName || that_present_columnName) {
0:       if (!(this_present_columnName && that_present_columnName))
1:         return false;
0:       if (!this.columnName.equals(that.columnName))
1:         return false;
0:     }
0: 
0:     boolean this_present_value = true && (this.value != null);
0:     boolean that_present_value = true && (that.value != null);
1:     if (this_present_value || that_present_value) {
1:       if (!(this_present_value && that_present_value))
1:         return false;
0:       if (!this.value.equals(that.value))
1:         return false;
0:     }
0: 
0:     boolean this_present_timestamp = true;
0:     boolean that_present_timestamp = true;
0:     if (this_present_timestamp || that_present_timestamp) {
0:       if (!(this_present_timestamp && that_present_timestamp))
1:         return false;
0:       if (this.timestamp != that.timestamp)
1:         return false;
0:     }
0: 
1:     return true;
0:   }
0: 
1:   public int hashCode() {
0:     return 0;
0:   }
0: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
0:         break;
0:       }
0:       switch (field.id)
1:       {
0:         case 1:
0:           if (field.type == TType.STRING) {
0:             this.columnName = iprot.readString();
0:             this.__isset.columnName = true;
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         case 2:
0:           if (field.type == TType.STRING) {
0:             this.value = iprot.readString();
0:             this.__isset.value = true;
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         case 3:
0:           if (field.type == TType.I64) {
0:             this.timestamp = iprot.readI64();
0:             this.__isset.timestamp = true;
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
0:           break;
0:       }
0:       iprot.readFieldEnd();
0:     }
0:     iprot.readStructEnd();
0:   }
0: 
0:   public void write(TProtocol oprot) throws TException {
0:     TStruct struct = new TStruct("column_t");
0:     oprot.writeStructBegin(struct);
0:     TField field = new TField();
0:     if (this.columnName != null) {
0:       field.name = "columnName";
0:       field.type = TType.STRING;
0:       field.id = 1;
0:       oprot.writeFieldBegin(field);
0:       oprot.writeString(this.columnName);
0:       oprot.writeFieldEnd();
0:     }
0:     if (this.value != null) {
0:       field.name = "value";
0:       field.type = TType.STRING;
0:       field.id = 2;
0:       oprot.writeFieldBegin(field);
0:       oprot.writeString(this.value);
0:       oprot.writeFieldEnd();
0:     }
0:     field.name = "timestamp";
0:     field.type = TType.I64;
0:     field.id = 3;
0:     oprot.writeFieldBegin(field);
0:     oprot.writeI64(this.timestamp);
0:     oprot.writeFieldEnd();
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
0:   }
0: 
1:   public String toString() {
0:     StringBuilder sb = new StringBuilder("column_t(");
0:     sb.append("columnName:");
0:     sb.append(this.columnName);
0:     sb.append(",value:");
0:     sb.append(this.value);
0:     sb.append(",timestamp:");
0:     sb.append(this.timestamp);
1:     sb.append(")");
1:     return sb.toString();
0:   }
0: 
0: }
0: 
============================================================================