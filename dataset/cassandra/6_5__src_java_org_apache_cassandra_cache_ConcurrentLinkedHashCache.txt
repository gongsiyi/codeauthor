1:1adcd1c: /*
1:1adcd1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:1adcd1c:  * or more contributor license agreements.  See the NOTICE file
1:1adcd1c:  * distributed with this work for additional information
1:1adcd1c:  * regarding copyright ownership.  The ASF licenses this file
1:1adcd1c:  * to you under the Apache License, Version 2.0 (the
1:1adcd1c:  * "License"); you may not use this file except in compliance
1:1adcd1c:  * with the License.  You may obtain a copy of the License at
3:1adcd1c:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1adcd1c:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:295aedb:  */
1:4d1af49: package org.apache.cassandra.cache;
1:1adcd1c: 
1:dfd78d0: import java.util.Iterator;
1:4d1af49: 
1:4d1af49: import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
1:8aaaacd: import com.googlecode.concurrentlinkedhashmap.EntryWeigher;
1:4d1af49: 
1:4d1af49: /** Wrapper so CLHM can implement ICache interface.
1:4d1af49:  *  (this is what you get for making library classes final.) */
1:da93a1c: public class ConcurrentLinkedHashCache<K extends IMeasurableMemory, V extends IMeasurableMemory> implements ICache<K, V>
1:4d1af49: {
1:4d1af49:     public static final int DEFAULT_CONCURENCY_LEVEL = 64;
1:4d1af49:     private final ConcurrentLinkedHashMap<K, V> map;
1:4d1af49: 
1:8aaaacd:     private ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V> map)
1:4d1af49:     {
1:4d1af49:         this.map = map;
1:4d1af49:     }
1:e688815: 
2:295aedb:     /**
1:8aaaacd:      * Initialize a cache with initial capacity with weightedCapacity
1:1adcd1c:      */
1:da93a1c:     public static <K extends IMeasurableMemory, V extends IMeasurableMemory> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity, EntryWeigher<K, V> entryWeiger)
1:e688815:     {
1:4d1af49:         ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()
1:8aaaacd:                                             .weigher(entryWeiger)
1:295aedb:                                             .maximumWeightedCapacity(weightedCapacity)
1:4d1af49:                                             .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)
1:4d1af49:                                             .build();
1:80d3dec: 
1:dfd78d0:         return new ConcurrentLinkedHashCache<>(map);
1:e688815:     }
1:4d1af49: 
1:da93a1c:     public static <K extends IMeasurableMemory, V extends IMeasurableMemory> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity)
1:80d3dec:     {
1:8aaaacd:         return create(weightedCapacity, new EntryWeigher<K, V>()
1:4d1af49:         {
1:8aaaacd:             public int weightOf(K key, V value)
1:4d1af49:             {
1:4b54b8a:                 long size = key.unsharedHeapSize() + value.unsharedHeapSize();
1:35be1cc:                 assert size <= Integer.MAX_VALUE : "Serialized size cannot be more than 2GB/Integer.MAX_VALUE";
1:8aaaacd:                 return (int) size;
1:80d3dec:             }
1:8aaaacd:         });
1:4d1af49:     }
1:4d1af49: 
1:0267293:     public long capacity()
1:4d1af49:     {
1:4d1af49:         return map.capacity();
1:4d1af49:     }
1:4d1af49: 
1:0267293:     public void setCapacity(long capacity)
1:4d1af49:     {
1:4d1af49:         map.setCapacity(capacity);
1:4d1af49:     }
1:4d1af49: 
1:4d1af49:     public boolean isEmpty()
1:4d1af49:     {
1:4d1af49:         return map.isEmpty();
1:4d1af49:     }
1:4d1af49: 
1:4d1af49:     public int size()
1:4d1af49:     {
1:4d1af49:         return map.size();
1:4d1af49:     }
1:4d1af49: 
1:0267293:     public long weightedSize()
1:8aaaacd:     {
1:295aedb:         return map.weightedSize();
1:4d1af49:     }
1:4d1af49: 
1:4d1af49:     public void clear()
1:4d1af49:     {
1:4d1af49:         map.clear();
1:4d1af49:     }
1:4d1af49: 
1:4d1af49:     public V get(K key)
1:4d1af49:     {
1:4d1af49:         return map.get(key);
1:4d1af49:     }
1:4d1af49: 
1:4d1af49:     public void put(K key, V value)
1:4d1af49:     {
1:4d1af49:         map.put(key, value);
1:4d1af49:     }
1:4d1af49: 
1:c9270f4:     public boolean putIfAbsent(K key, V value)
1:8aaaacd:     {
1:c9270f4:         return map.putIfAbsent(key, value) == null;
1:8aaaacd:     }
1:4d1af49: 
1:c9270f4:     public boolean replace(K key, V old, V value)
1:8aaaacd:     {
1:c9270f4:         return map.replace(key, old, value);
1:8aaaacd:     }
1:8aaaacd: 
1:4d1af49:     public void remove(K key)
1:4d1af49:     {
1:4d1af49:         map.remove(key);
1:4d1af49:     }
1:4d1af49: 
1:dfd78d0:     public Iterator<K> keyIterator()
1:4d1af49:     {
1:dfd78d0:         return map.keySet().iterator();
1:4d1af49:     }
1:c9270f4: 
1:dfd78d0:     public Iterator<K> hotKeyIterator(int n)
1:c9270f4:     {
1:dfd78d0:         return map.descendingKeySetWithLimit(n).iterator();
1:4d1af49:     }
1:c9270f4: 
1:295aedb:     public boolean containsKey(K key)
1:c9270f4:     {
1:295aedb:         return map.containsKey(key);
1:c9270f4:     }
1:c9270f4: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:dfd78d0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:         return new ConcurrentLinkedHashCache<>(map);
/////////////////////////////////////////////////////////////////////////
1:     public Iterator<K> keyIterator()
1:         return map.keySet().iterator();
1:     public Iterator<K> hotKeyIterator(int n)
1:         return map.descendingKeySetWithLimit(n).iterator();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1:                 long size = key.unsharedHeapSize() + value.unsharedHeapSize();
commit:a3734e5
/////////////////////////////////////////////////////////////////////////
commit:35be1cc
/////////////////////////////////////////////////////////////////////////
1:                 assert size <= Integer.MAX_VALUE : "Serialized size cannot be more than 2GB/Integer.MAX_VALUE";
commit:e688815
/////////////////////////////////////////////////////////////////////////
0:     public Set<K> hotKeySet(int n)
1:     {
0:         return map.descendingKeySetWithLimit(n);
1:     }
1: 
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:80d3dec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isPutCopying()
1:     {
0:         return false;
1:     }
commit:4d1af49
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cache;
1: 
0: import java.util.Collection;
0: import java.util.Map;
0: import java.util.Set;
1: 
1: import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
0: import com.googlecode.concurrentlinkedhashmap.Weighers;
1: 
1: /** Wrapper so CLHM can implement ICache interface.
1:  *  (this is what you get for making library classes final.) */
0: public class ConcurrentLinkedHashCache<K, V> implements ICache<K, V>
1: {
1:     public static final int DEFAULT_CONCURENCY_LEVEL = 64;
1:     private final ConcurrentLinkedHashMap<K, V> map;
1: 
0:     public ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V> map)
1:     {
1:         this.map = map;
1:     }
1: 
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(int capacity)
1:     {
1:         ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()
0:                                             .weigher(Weighers.<V>singleton())
0:                                             .initialCapacity(capacity)
0:                                             .maximumWeightedCapacity(capacity)
1:                                             .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)
1:                                             .build();
0:         return new ConcurrentLinkedHashCache<K, V>(map);
1:     }
1: 
0:     public void discard(K key)
1:     {
0:         remove(key);
1:     }
1: 
0:     public int capacity()
1:     {
1:         return map.capacity();
1:     }
1: 
0:     public void setCapacity(int capacity)
1:     {
1:         map.setCapacity(capacity);
1:     }
1: 
1:     public boolean isEmpty()
1:     {
1:         return map.isEmpty();
1:     }
1: 
1:     public int size()
1:     {
1:         return map.size();
1:     }
1: 
1:     public void clear()
1:     {
1:         map.clear();
1:     }
1: 
1:     public V get(K key)
1:     {
1:         return map.get(key);
1:     }
1: 
1:     public void put(K key, V value)
1:     {
1:         map.put(key, value);
1:     }
1: 
1:     public void remove(K key)
1:     {
1:         map.remove(key);
1:     }
1: 
0:     public Set<K> keySet()
1:     {
0:         return map.keySet();
1:     }
1: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
1: public class ConcurrentLinkedHashCache<K extends IMeasurableMemory, V extends IMeasurableMemory> implements ICache<K, V>
/////////////////////////////////////////////////////////////////////////
1:     public static <K extends IMeasurableMemory, V extends IMeasurableMemory> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity, EntryWeigher<K, V> entryWeiger)
/////////////////////////////////////////////////////////////////////////
1:     public static <K extends IMeasurableMemory, V extends IMeasurableMemory> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity)
0:                 long size = key.memorySize() + value.memorySize();
commit:94fa825
/////////////////////////////////////////////////////////////////////////
0:                 long size = meter.measureDeep(key) + meter.measureDeep(value);
commit:8aaaacd
/////////////////////////////////////////////////////////////////////////
0: import org.github.jamm.MemoryMeter;
0: import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
1: import com.googlecode.concurrentlinkedhashmap.EntryWeigher;
/////////////////////////////////////////////////////////////////////////
0:     private static final MemoryMeter meter = new MemoryMeter().omitSharedBufferOverhead();
1:     private ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V> map)
1:      * Initialize a cache with initial capacity with weightedCapacity
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity, EntryWeigher<K, V> entryWeiger)
1:                                             .weigher(entryWeiger)
/////////////////////////////////////////////////////////////////////////
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity)
1:     {
1:         return create(weightedCapacity, new EntryWeigher<K, V>()
1:         {
1:             public int weightOf(K key, V value)
1:             {
0:                 long size = meter.measure(key) + meter.measure(value);
0:                 assert size < Integer.MAX_VALUE : "Serialized size cannot be more than 2GB/Integer.MAX_VALUE";
1:                 return (int) size;
1:             }
1:         });
1:     }
1: 
commit:ac362da
commit:0267293
/////////////////////////////////////////////////////////////////////////
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(long capacity)
/////////////////////////////////////////////////////////////////////////
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(long weightedCapacity, Weigher<V> weigher)
/////////////////////////////////////////////////////////////////////////
1:     public long capacity()
1:     public void setCapacity(long capacity)
/////////////////////////////////////////////////////////////////////////
1:     public long weightedSize()
commit:531d01c
/////////////////////////////////////////////////////////////////////////
commit:33cdcaf
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5c7ccb0
commit:c9270f4
/////////////////////////////////////////////////////////////////////////
1:     public boolean putIfAbsent(K key, V value)
1:     {
1:         return map.putIfAbsent(key, value) == null;
1:     }
1: 
1:     public boolean replace(K key, V old, V value)
1:     {
1:         return map.replace(key, old, value);
1:     }
1: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cache;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0: import com.googlecode.concurrentlinkedhashmap.Weigher;
0: 
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Initialize a cache with weigher = Weighers.singleton() and initial capacity 0
0:      *
0:      * @param capacity cache weighted capacity
0:      *
0:      * @param <K> key type
0:      * @param <V> value type
0:      *
0:      * @return initialized cache
1:      */
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(int capacity)
0:     {
0:         return create(capacity, Weighers.<V>singleton());
0:     }
0: 
1:     /**
0:      * Initialize a cache with initial capacity set to 0
0:      *
0:      * @param weightedCapacity cache weighted capacity
0:      * @param weigher The weigher to use
0:      *
0:      * @param <K> key type
0:      * @param <V> value type
0:      *
0:      * @return initialized cache
1:      */
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(int weightedCapacity, Weigher<V> weigher)
0:                                             .weigher(weigher)
0:                                             .initialCapacity(0)
1:                                             .maximumWeightedCapacity(weightedCapacity)
0: 
/////////////////////////////////////////////////////////////////////////
0:     public int weightedSize()
0:     {
1:         return map.weightedSize();
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean containsKey(K key)
0:     {
1:         return map.containsKey(key);
0:     }
0: 
author:Chris Goffinet
-------------------------------------------------------------------------------
commit:1d0d6d4
/////////////////////////////////////////////////////////////////////////
0:     public static <K, V> ConcurrentLinkedHashCache<K, V> create(int capacity, String tableName, String cfname)
============================================================================