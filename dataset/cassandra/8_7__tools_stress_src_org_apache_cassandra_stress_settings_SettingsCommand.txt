1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
10:2e1e98a: 
1:2e1e98a: import java.io.Serializable;
1:2e1e98a: import java.util.Arrays;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:530c9f5: import java.util.concurrent.TimeUnit;
1:2e1e98a: 
1:6bbfb55: import com.google.common.util.concurrent.Uninterruptibles;
1:6bbfb55: 
1:7536429: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1:6bbfb55: import org.apache.cassandra.stress.util.JavaDriverClient;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:2e1e98a: import org.apache.cassandra.thrift.ConsistencyLevel;
1:2e1e98a: 
1:2e1e98a: // Generic command settings - common to read/write/etc
1:7536429: public abstract class SettingsCommand implements Serializable
13:2e1e98a: {
1:2e1e98a: 
1:6bbfb55:     public static enum TruncateWhen
1:6bbfb55:     {
1:6bbfb55:         NEVER, ONCE, ALWAYS
1:6bbfb55:     }
1:6bbfb55: 
1:2e1e98a:     public final Command type;
1:2e1e98a:     public final long count;
1:530c9f5:     public final long duration;
1:530c9f5:     public final TimeUnit durationUnits;
1:7536429:     public final boolean noWarmup;
1:6bbfb55:     public final TruncateWhen truncate;
1:2e1e98a:     public final ConsistencyLevel consistencyLevel;
1:2e1e98a:     public final double targetUncertainty;
1:2e1e98a:     public final int minimumUncertaintyMeasurements;
1:2e1e98a:     public final int maximumUncertaintyMeasurements;
1:7536429: 
1:7536429:     public abstract OpDistributionFactory getFactory(StressSettings settings);
1:2e1e98a: 
1:2e1e98a:     public SettingsCommand(Command type, GroupedOptions options)
1:530c9f5:     {
1:2e1e98a:         this(type, (Options) options,
1:2e1e98a:                 options instanceof Count ? (Count) options : null,
1:530c9f5:                 options instanceof Duration ? (Duration) options : null,
1:2e1e98a:                 options instanceof Uncertainty ? (Uncertainty) options : null
1:2e1e98a:         );
11:2e1e98a:     }
1:2e1e98a: 
1:530c9f5:     public SettingsCommand(Command type, Options options, Count count, Duration duration, Uncertainty uncertainty)
1:530c9f5:     {
1:2e1e98a:         this.type = type;
1:2e1e98a:         this.consistencyLevel = ConsistencyLevel.valueOf(options.consistencyLevel.value().toUpperCase());
1:7536429:         this.noWarmup = options.noWarmup.setByUser();
1:6bbfb55:         this.truncate = TruncateWhen.valueOf(options.truncate.value().toUpperCase());
1:6bbfb55: 
1:2e1e98a:         if (count != null)
1:2e1e98a:         {
1:cdba5aa:             this.count = OptionDistribution.parseLong(count.count.value());
1:530c9f5:             this.duration = 0;
1:530c9f5:             this.durationUnits = null;
1:530c9f5:             this.targetUncertainty = -1;
1:530c9f5:             this.minimumUncertaintyMeasurements = -1;
1:530c9f5:             this.maximumUncertaintyMeasurements = -1;
1:530c9f5:         }
1:530c9f5:         else if (duration != null)
1:530c9f5:         {
1:530c9f5:             this.count = -1;
1:530c9f5:             this.duration = Long.parseLong(duration.duration.value().substring(0, duration.duration.value().length() - 1));
1:530c9f5:             switch (duration.duration.value().toLowerCase().charAt(duration.duration.value().length() - 1))
1:530c9f5:             {
1:530c9f5:                 case 's':
1:530c9f5:                     this.durationUnits = TimeUnit.SECONDS;
1:530c9f5:                     break;
1:530c9f5:                 case 'm':
1:530c9f5:                     this.durationUnits = TimeUnit.MINUTES;
1:530c9f5:                     break;
1:530c9f5:                 case 'h':
1:530c9f5:                     this.durationUnits = TimeUnit.HOURS;
1:530c9f5:                     break;
1:530c9f5:                 default:
1:530c9f5:                     throw new IllegalStateException();
1:530c9f5:             }
1:2e1e98a:             this.targetUncertainty = -1;
1:2e1e98a:             this.minimumUncertaintyMeasurements = -1;
1:2e1e98a:             this.maximumUncertaintyMeasurements = -1;
1:2e1e98a:         }
1:2e1e98a:         else
1:2e1e98a:         {
1:2e1e98a:             this.count = -1;
1:530c9f5:             this.duration = 0;
1:530c9f5:             this.durationUnits = null;
1:2e1e98a:             this.targetUncertainty = Double.parseDouble(uncertainty.uncertainty.value());
1:2e1e98a:             this.minimumUncertaintyMeasurements = Integer.parseInt(uncertainty.minMeasurements.value());
1:2e1e98a:             this.maximumUncertaintyMeasurements = Integer.parseInt(uncertainty.maxMeasurements.value());
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // Option Declarations
1:2e1e98a: 
1:2e1e98a:     static abstract class Options extends GroupedOptions
1:2e1e98a:     {
1:0580fb2:         final OptionSimple noWarmup = new OptionSimple("no-warmup", "", null, "Do not warmup the process", false);
1:6bbfb55:         final OptionSimple truncate = new OptionSimple("truncate=", "never|once|always", "never", "Truncate the table: never, before performing any work, or before each iteration", false);
1:8b5434f:         final OptionSimple consistencyLevel = new OptionSimple("cl=", "ONE|QUORUM|LOCAL_QUORUM|EACH_QUORUM|ALL|ANY|TWO|THREE|LOCAL_ONE", "LOCAL_ONE", "Consistency level to use", false);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     static class Count extends Options
1:2e1e98a:     {
1:cdba5aa:         final OptionSimple count = new OptionSimple("n=", "[0-9]+[bmk]?", null, "Number of operations to perform", true);
3:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:6bbfb55:             return Arrays.asList(count, noWarmup, truncate, consistencyLevel);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:530c9f5:     static class Duration extends Options
1:530c9f5:     {
1:530c9f5:         final OptionSimple duration = new OptionSimple("duration=", "[0-9]+[smh]", null, "Time to run in (in seconds, minutes or hours)", true);
1:530c9f5:         @Override
1:530c9f5:         public List<? extends Option> options()
1:530c9f5:         {
1:6bbfb55:             return Arrays.asList(duration, noWarmup, truncate, consistencyLevel);
1:530c9f5:         }
1:530c9f5:     }
1:530c9f5: 
1:2e1e98a:     static class Uncertainty extends Options
1:2e1e98a:     {
1:2e1e98a:         final OptionSimple uncertainty = new OptionSimple("err<", "0\\.[0-9]+", "0.02", "Run until the standard error of the mean is below this fraction", false);
1:2e1e98a:         final OptionSimple minMeasurements = new OptionSimple("n>", "[0-9]+", "30", "Run at least this many iterations before accepting uncertainty convergence", false);
1:2e1e98a:         final OptionSimple maxMeasurements = new OptionSimple("n<", "[0-9]+", "200", "Run at most this many iterations before accepting uncertainty convergence", false);
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:6bbfb55:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, noWarmup, truncate, consistencyLevel);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:6bbfb55:     public abstract void truncateTables(StressSettings settings);
1:6bbfb55: 
1:6bbfb55:     protected void truncateTables(StressSettings settings, String ks, String ... tables)
1:6bbfb55:     {
1:6bbfb55:         JavaDriverClient client = settings.getJavaDriverClient(false);
1:6bbfb55:         assert settings.command.truncate != SettingsCommand.TruncateWhen.NEVER;
1:6bbfb55:         for (String table : tables)
1:6bbfb55:         {
1:6bbfb55:             String cql = String.format("TRUNCATE %s.%s", ks, table);
1:6bbfb55:             client.execute(cql, org.apache.cassandra.db.ConsistencyLevel.ONE);
1:6bbfb55:         }
1:6bbfb55:         System.out.println(String.format("Truncated %s.%s. Sleeping %ss for propagation.",
1:6bbfb55:                                          ks, Arrays.toString(tables), settings.node.nodes.size()));
1:6bbfb55:         Uninterruptibles.sleepUninterruptibly(settings.node.nodes.size(), TimeUnit.SECONDS);
1:6bbfb55:     }
1:6bbfb55: 
1:2e1e98a:     // CLI Utility Methods
1:2e1e98a: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  Type: %s%n", type.toString().toLowerCase());
1:938faa2:         out.printf("  Count: %,d%n", count);
1:938faa2:         if (durationUnits != null)
1:938faa2:         {
1:938faa2:             out.printf("  Duration: %,d %s%n", duration, durationUnits.toString());
1:938faa2:         }
1:938faa2:         out.printf("  No Warmup: %s%n", noWarmup);
1:938faa2:         out.printf("  Consistency Level: %s%n", consistencyLevel.toString());
1:938faa2:         if (targetUncertainty != -1)
1:938faa2:         {
1:938faa2:             out.printf("  Target Uncertainty: %.3f%n", targetUncertainty);
1:938faa2:             out.printf("  Minimum Uncertainty Measurements: %,d%n", minimumUncertaintyMeasurements);
1:938faa2:             out.printf("  Maximum Uncertainty Measurements: %,d%n", maximumUncertaintyMeasurements);
1:938faa2:         } else {
1:938faa2:             out.printf("  Target Uncertainty: not applicable%n");
1:938faa2:         }
1:938faa2:     }
1:938faa2: 
1:938faa2: 
1:2e1e98a:     static SettingsCommand get(Map<String, String[]> clArgs)
1:2e1e98a:     {
1:2e1e98a:         for (Command cmd : Command.values())
1:2e1e98a:         {
1:2e1e98a:             if (cmd.category == null)
1:2e1e98a:                 continue;
1:92381fd: 
1:92381fd:             for (String name : cmd.names)
1:2e1e98a:             {
1:92381fd:                 final String[] params = clArgs.remove(name);
1:92381fd:                 if (params == null)
1:92381fd:                     continue;
1:92381fd: 
1:2e1e98a:                 switch (cmd.category)
1:2e1e98a:                 {
1:2e1e98a:                     case BASIC:
1:7536429:                         return SettingsCommandPreDefined.build(cmd, params);
1:2e1e98a:                     case MIXED:
1:7536429:                         return SettingsCommandPreDefinedMixed.build(params);
1:7536429:                     case USER:
1:7536429:                         return SettingsCommandUser.build(params);
1:2e1e98a:                 }
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:         return null;
1:530c9f5:     }
1:2e1e98a: 
1:530c9f5:     static void printHelp(Command type)
1:530c9f5:     {
1:530c9f5:         printHelp(type.toString().toLowerCase());
1:530c9f5:     }
1:530c9f5: 
1:530c9f5:     static void printHelp(String type)
1:530c9f5:     {
1:530c9f5:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count(), new Duration());
1:530c9f5:     }
1:530c9f5: 
1:530c9f5:     static Runnable helpPrinter(final Command type)
1:530c9f5:     {
1:530c9f5:         return new Runnable()
1:530c9f5:         {
1:530c9f5:             @Override
1:530c9f5:             public void run()
1:530c9f5:             {
2:530c9f5:                 printHelp(type);
1:530c9f5:             }
1:530c9f5:         };
1:530c9f5:     }
1:530c9f5: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  Type: %s%n", type.toString().toLowerCase());
1:         out.printf("  Count: %,d%n", count);
1:         if (durationUnits != null)
1:         {
1:             out.printf("  Duration: %,d %s%n", duration, durationUnits.toString());
1:         }
1:         out.printf("  No Warmup: %s%n", noWarmup);
1:         out.printf("  Consistency Level: %s%n", consistencyLevel.toString());
1:         if (targetUncertainty != -1)
1:         {
1:             out.printf("  Target Uncertainty: %.3f%n", targetUncertainty);
1:             out.printf("  Minimum Uncertainty Measurements: %,d%n", minimumUncertaintyMeasurements);
1:             out.printf("  Maximum Uncertainty Measurements: %,d%n", maximumUncertaintyMeasurements);
1:         } else {
1:             out.printf("  Target Uncertainty: not applicable%n");
1:         }
1:     }
1: 
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8b5434f
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple consistencyLevel = new OptionSimple("cl=", "ONE|QUORUM|LOCAL_QUORUM|EACH_QUORUM|ALL|ANY|TWO|THREE|LOCAL_ONE", "LOCAL_ONE", "Consistency level to use", false);
commit:93f679e
/////////////////////////////////////////////////////////////////////////
0:         final OptionSimple consistencyLevel = new OptionSimple("cl=", "ONE|QUORUM|LOCAL_QUORUM|EACH_QUORUM|ALL|ANY|TWO|THREE|SERIAL|LOCAL_SERIAL|LOCAL_ONE", "ONE", "Consistency level to use", false);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.util.concurrent.Uninterruptibles;
1: 
1: import org.apache.cassandra.stress.util.JavaDriverClient;
1:     public static enum TruncateWhen
1:     {
1:         NEVER, ONCE, ALWAYS
1:     }
1: 
1:     public final TruncateWhen truncate;
/////////////////////////////////////////////////////////////////////////
1:         this.truncate = TruncateWhen.valueOf(options.truncate.value().toUpperCase());
1: 
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple truncate = new OptionSimple("truncate=", "never|once|always", "never", "Truncate the table: never, before performing any work, or before each iteration", false);
0:         final OptionSimple consistencyLevel = new OptionSimple("cl=", "ONE|QUORUM|LOCAL_QUORUM|EACH_QUORUM|ALL|ANY", "ONE", "Consistency level to use", false);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(count, noWarmup, truncate, consistencyLevel);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(duration, noWarmup, truncate, consistencyLevel);
/////////////////////////////////////////////////////////////////////////
1:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, noWarmup, truncate, consistencyLevel);
1:     public abstract void truncateTables(StressSettings settings);
1: 
1:     protected void truncateTables(StressSettings settings, String ks, String ... tables)
1:     {
1:         JavaDriverClient client = settings.getJavaDriverClient(false);
1:         assert settings.command.truncate != SettingsCommand.TruncateWhen.NEVER;
1:         for (String table : tables)
1:         {
1:             String cql = String.format("TRUNCATE %s.%s", ks, table);
1:             client.execute(cql, org.apache.cassandra.db.ConsistencyLevel.ONE);
1:         }
1:         System.out.println(String.format("Truncated %s.%s. Sleeping %ss for propagation.",
1:                                          ks, Arrays.toString(tables), settings.node.nodes.size()));
1:         Uninterruptibles.sleepUninterruptibly(settings.node.nodes.size(), TimeUnit.SECONDS);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
commit:cdba5aa
/////////////////////////////////////////////////////////////////////////
1:             this.count = OptionDistribution.parseLong(count.count.value());
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple count = new OptionSimple("n=", "[0-9]+[bmk]?", null, "Number of operations to perform", true);
commit:530c9f5
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     public final long duration;
1:     public final TimeUnit durationUnits;
/////////////////////////////////////////////////////////////////////////
1:                 options instanceof Duration ? (Duration) options : null,
1:     public SettingsCommand(Command type, Options options, Count count, Duration duration, Uncertainty uncertainty)
/////////////////////////////////////////////////////////////////////////
1:             this.duration = 0;
1:             this.durationUnits = null;
1:             this.targetUncertainty = -1;
1:             this.minimumUncertaintyMeasurements = -1;
1:             this.maximumUncertaintyMeasurements = -1;
1:         }
1:         else if (duration != null)
1:         {
1:             this.count = -1;
1:             this.duration = Long.parseLong(duration.duration.value().substring(0, duration.duration.value().length() - 1));
1:             switch (duration.duration.value().toLowerCase().charAt(duration.duration.value().length() - 1))
1:             {
1:                 case 's':
1:                     this.durationUnits = TimeUnit.SECONDS;
1:                     break;
1:                 case 'm':
1:                     this.durationUnits = TimeUnit.MINUTES;
1:                     break;
1:                 case 'h':
1:                     this.durationUnits = TimeUnit.HOURS;
1:                     break;
1:                 default:
1:                     throw new IllegalStateException();
1:             }
/////////////////////////////////////////////////////////////////////////
1:             this.duration = 0;
1:             this.durationUnits = null;
/////////////////////////////////////////////////////////////////////////
1:     static class Duration extends Options
1:     {
1:         final OptionSimple duration = new OptionSimple("duration=", "[0-9]+[smh]", null, "Time to run in (in seconds, minutes or hours)", true);
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(duration, noWarmup, consistencyLevel);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0: /*    static SettingsCommand build(Command type, String[] params)
1:     {
0:         GroupedOptions options = GroupedOptions.select(params, new Count(), new Duration(), new Uncertainty());
0:         if (options == null)
1:         {
1:             printHelp(type);
0:             System.out.println("Invalid " + type + " options provided, see output for valid options");
0:             System.exit(1);
1:         }
0:         return new SettingsCommand(type, options);
0:     }*/
1:     static void printHelp(Command type)
1:     {
1:         printHelp(type.toString().toLowerCase());
1:     }
1: 
1:     static void printHelp(String type)
1:     {
1:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count(), new Duration());
1:     }
1: 
1:     static Runnable helpPrinter(final Command type)
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp(type);
1:             }
1:         };
1:     }
1: }
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generate.SeedManager;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple noWarmup = new OptionSimple("no-warmup", "", null, "Do not warmup the process", false);
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(count, noWarmup, consistencyLevel);
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, noWarmup, consistencyLevel);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1: public abstract class SettingsCommand implements Serializable
1:     public final boolean noWarmup;
1: 
1:     public abstract OpDistributionFactory getFactory(StressSettings settings);
/////////////////////////////////////////////////////////////////////////
1:         this.noWarmup = options.noWarmup.setByUser();
/////////////////////////////////////////////////////////////////////////
0:         final OptionSimple noWarmup = new OptionSimple("no_warmup", "", null, "Do not warmup the process", false);
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(count, retries, noWarmup, ignoreErrors, consistencyLevel, atOnce);
/////////////////////////////////////////////////////////////////////////
0:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, retries, noWarmup, ignoreErrors, consistencyLevel, atOnce);
/////////////////////////////////////////////////////////////////////////
1:                         return SettingsCommandPreDefined.build(cmd, params);
1:                         return SettingsCommandPreDefinedMixed.build(params);
1:                     case USER:
1:                         return SettingsCommandUser.build(params);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:92381fd
/////////////////////////////////////////////////////////////////////////
1: 
1:             for (String name : cmd.names)
1:                 final String[] params = clArgs.remove(name);
1:                 if (params == null)
1:                     continue;
1: 
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generatedata.DistributionFactory;
/////////////////////////////////////////////////////////////////////////
0:     public final DistributionFactory add;
0:     public final int keysAtOnce;
/////////////////////////////////////////////////////////////////////////
0:         this.keysAtOnce = Integer.parseInt(options.atOnce.value());
0:         this.add = options.add.get();
/////////////////////////////////////////////////////////////////////////
0:         final OptionDistribution add = new OptionDistribution("add=", "fixed(1)", "Distribution of value of counter increments");
0:         final OptionSimple atOnce = new OptionSimple("at-once=", "[0-9]+", "1000", "Number of keys per operation for multiget", false);
0:             return Arrays.asList(count, retries, ignoreErrors, consistencyLevel, add, atOnce);
0:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, retries, ignoreErrors, consistencyLevel, add, atOnce);
/////////////////////////////////////////////////////////////////////////
0:                         return build(cmd, params);
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:319877f
/////////////////////////////////////////////////////////////////////////
0:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count());
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.thrift.ConsistencyLevel;
1: 
1: // Generic command settings - common to read/write/etc
0: public class SettingsCommand implements Serializable
1: {
1: 
1:     public final Command type;
1:     public final long count;
0:     public final int tries;
0:     public final boolean ignoreErrors;
1:     public final ConsistencyLevel consistencyLevel;
1:     public final double targetUncertainty;
1:     public final int minimumUncertaintyMeasurements;
1:     public final int maximumUncertaintyMeasurements;
1: 
1:     public SettingsCommand(Command type, GroupedOptions options)
1:     {
1:         this(type, (Options) options,
1:                 options instanceof Count ? (Count) options : null,
1:                 options instanceof Uncertainty ? (Uncertainty) options : null
1:         );
1:     }
1: 
0:     public SettingsCommand(Command type, Options options, Count count, Uncertainty uncertainty)
1:     {
1:         this.type = type;
0:         this.tries = Math.max(1, Integer.parseInt(options.retries.value()) + 1);
0:         this.ignoreErrors = options.ignoreErrors.setByUser();
1:         this.consistencyLevel = ConsistencyLevel.valueOf(options.consistencyLevel.value().toUpperCase());
1:         if (count != null)
1:         {
0:             this.count = Long.parseLong(count.count.value());
1:             this.targetUncertainty = -1;
1:             this.minimumUncertaintyMeasurements = -1;
1:             this.maximumUncertaintyMeasurements = -1;
1:         }
1:         else
1:         {
1:             this.count = -1;
1:             this.targetUncertainty = Double.parseDouble(uncertainty.uncertainty.value());
1:             this.minimumUncertaintyMeasurements = Integer.parseInt(uncertainty.minMeasurements.value());
1:             this.maximumUncertaintyMeasurements = Integer.parseInt(uncertainty.maxMeasurements.value());
1:         }
1:     }
1: 
1:     // Option Declarations
1: 
1:     static abstract class Options extends GroupedOptions
1:     {
0:         final OptionSimple retries = new OptionSimple("tries=", "[0-9]+", "9", "Number of tries to perform for each operation before failing", false);
0:         final OptionSimple ignoreErrors = new OptionSimple("ignore_errors", "", null, "Do not print/log errors", false);
0:         final OptionSimple consistencyLevel = new OptionSimple("cl=", "ONE|QUORUM|LOCAL_QUORUM|EACH_QUORUM|ALL|ANY", "ONE", "Consistency level to use", false);
1:     }
1: 
1:     static class Count extends Options
1:     {
1: 
0:         final OptionSimple count = new OptionSimple("n=", "[0-9]+", null, "Number of operations to perform", true);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(count, retries, ignoreErrors, consistencyLevel);
1:         }
1:     }
1: 
1:     static class Uncertainty extends Options
1:     {
1: 
1:         final OptionSimple uncertainty = new OptionSimple("err<", "0\\.[0-9]+", "0.02", "Run until the standard error of the mean is below this fraction", false);
1:         final OptionSimple minMeasurements = new OptionSimple("n>", "[0-9]+", "30", "Run at least this many iterations before accepting uncertainty convergence", false);
1:         final OptionSimple maxMeasurements = new OptionSimple("n<", "[0-9]+", "200", "Run at most this many iterations before accepting uncertainty convergence", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(uncertainty, minMeasurements, maxMeasurements, retries, ignoreErrors, consistencyLevel);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     static SettingsCommand get(Map<String, String[]> clArgs)
1:     {
1:         for (Command cmd : Command.values())
1:         {
1:             if (cmd.category == null)
1:                 continue;
0:             final String[] params = clArgs.remove(cmd.toString().toLowerCase());
0:             if (params != null)
1:             {
1:                 switch (cmd.category)
1:                 {
1:                     case BASIC:
0:                         return build(cmd, params);
0:                     case MULTI:
0:                         return SettingsCommandMulti.build(cmd, params);
1:                     case MIXED:
0:                         return SettingsCommandMixed.build(params);
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
0:     static SettingsCommand build(Command type, String[] params)
1:     {
0:         GroupedOptions options = GroupedOptions.select(params, new Count(), new Uncertainty());
0:         if (options == null)
1:         {
0:             printHelp(type);
0:             System.out.println("Invalid " + type + " options provided, see output for valid options");
0:             System.exit(1);
1:         }
0:         return new SettingsCommand(type, options);
1:     }
1: 
0:     static void printHelp(Command type)
1:     {
0:         printHelp(type.toString().toLowerCase());
1:     }
1: 
0:     static void printHelp(String type)
1:     {
0:         GroupedOptions.printOptions(System.out, type.toString().toLowerCase(), new Uncertainty(), new Count());
1:     }
1: 
0:     static Runnable helpPrinter(final String type)
1:     {
0:         return new Runnable()
1:         {
1:             @Override
0:             public void run()
1:             {
0:                 printHelp(type);
1:             }
0:         };
1:     }
1: 
0:     static Runnable helpPrinter(final Command type)
1:     {
0:         return new Runnable()
1:         {
1:             @Override
0:             public void run()
1:             {
0:                 printHelp(type);
1:             }
0:         };
1:     }
1: }
1: 
============================================================================