1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:89f275c:  *
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:89f275c:  *
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:2e1e98a: import java.io.Serializable;
1:2e1e98a: import java.util.Arrays;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Map;
1:938faa2: 
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:2e1e98a: 
1:2e1e98a: public class SettingsRate implements Serializable
3:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     public final boolean auto;
1:eecc034:     public final int minThreads;
1:eecc034:     public final int maxThreads;
1:2e1e98a:     public final int threadCount;
1:89f275c:     public final int opsPerSecond;
1:89f275c:     public final boolean isFixed;
1:2e1e98a: 
1:2e1e98a:     public SettingsRate(ThreadOptions options)
1:2e1e98a:     {
1:2e1e98a:         auto = false;
1:2e1e98a:         threadCount = Integer.parseInt(options.threads.value());
1:89f275c:         String throttleOpt = options.throttle.value();
1:89f275c:         String fixedOpt = options.fixed.value();
1:89f275c:         int throttle = Integer.parseInt(throttleOpt.substring(0, throttleOpt.length() - 2));
1:89f275c:         int fixed = Integer.parseInt(fixedOpt.substring(0, fixedOpt.length() - 2));
1:89f275c:         if(throttle != 0 && fixed != 0)
1:89f275c:             throw new IllegalArgumentException("can't have both fixed and throttle set, choose one.");
1:89f275c:         opsPerSecond = Math.max(fixed, throttle);
1:89f275c:         isFixed = (opsPerSecond == fixed);
1:89f275c: 
1:eecc034:         minThreads = -1;
1:eecc034:         maxThreads = -1;
2:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public SettingsRate(AutoOptions auto)
1:2e1e98a:     {
1:eecc034:         this.auto = auto.auto.setByUser();
1:eecc034:         this.minThreads = Integer.parseInt(auto.minThreads.value());
1:eecc034:         this.maxThreads = Integer.parseInt(auto.maxThreads.value());
1:2e1e98a:         this.threadCount = -1;
1:89f275c:         this.opsPerSecond = 0;
1:89f275c:         isFixed = false;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: 
1:2e1e98a:     // Option Declarations
1:2e1e98a: 
1:2e1e98a:     private static final class AutoOptions extends GroupedOptions
1:2e1e98a:     {
1:eecc034:         final OptionSimple auto = new OptionSimple("auto", "", null, "stop increasing threads once throughput saturates", false);
1:2e1e98a:         final OptionSimple minThreads = new OptionSimple("threads>=", "[0-9]+", "4", "run at least this many clients concurrently", false);
1:2e1e98a:         final OptionSimple maxThreads = new OptionSimple("threads<=", "[0-9]+", "1000", "run at most this many clients concurrently", false);
1:2e1e98a: 
2:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:eecc034:             return Arrays.asList(minThreads, maxThreads, auto);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     private static final class ThreadOptions extends GroupedOptions
1:2e1e98a:     {
1:2e1e98a:         final OptionSimple threads = new OptionSimple("threads=", "[0-9]+", null, "run this many clients concurrently", true);
1:89f275c:         final OptionSimple throttle = new OptionSimple("throttle=", "[0-9]+/s", "0/s", "throttle operations per second across all clients to a maximum rate (or less) with no implied schedule", false);
1:89f275c:         final OptionSimple fixed = new OptionSimple("fixed=", "[0-9]+/s", "0/s", "expect fixed rate of operations per second across all clients with implied schedule", false);
1:2e1e98a: 
1:2e1e98a:         @Override
1:2e1e98a:         public List<? extends Option> options()
1:2e1e98a:         {
1:89f275c:             return Arrays.asList(threads, throttle, fixed);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // CLI Utility Methods
1:2e1e98a: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  Auto: %b%n", auto);
1:938faa2:         if (auto)
1:938faa2:         {
1:938faa2:             out.printf("  Min Threads: %d%n", minThreads);
1:938faa2:             out.printf("  Max Threads: %d%n", maxThreads);
1:938faa2:         } else {
1:938faa2:             out.printf("  Thread Count: %d%n", threadCount);
1:938faa2:             out.printf("  OpsPer Sec: %d%n", opsPerSecond);
1:938faa2:         }
1:938faa2:     }
1:938faa2: 
1:2e1e98a:     public static SettingsRate get(Map<String, String[]> clArgs, SettingsCommand command)
1:2e1e98a:     {
1:2e1e98a:         String[] params = clArgs.remove("-rate");
1:2e1e98a:         if (params == null)
1:2e1e98a:         {
1:2e1e98a:             switch (command.type)
1:2e1e98a:             {
1:2e1e98a:                 case WRITE:
1:92381fd:                 case COUNTER_WRITE:
1:2e1e98a:                     if (command.count > 0)
1:2e1e98a:                     {
1:2e1e98a:                         ThreadOptions options = new ThreadOptions();
1:eecc034:                         options.accept("threads=200");
1:2e1e98a:                         return new SettingsRate(options);
1:2e1e98a:                     }
1:2e1e98a:             }
1:eecc034:             AutoOptions options = new AutoOptions();
1:eecc034:             options.accept("auto");
1:eecc034:             return new SettingsRate(options);
1:2e1e98a:         }
1:2e1e98a:         GroupedOptions options = GroupedOptions.select(params, new AutoOptions(), new ThreadOptions());
1:2e1e98a:         if (options == null)
1:2e1e98a:         {
2:2e1e98a:             printHelp();
1:2e1e98a:             System.out.println("Invalid -rate options provided, see output for valid options");
1:2e1e98a:             System.exit(1);
1:2e1e98a:         }
1:2e1e98a:         if (options instanceof AutoOptions)
1:2e1e98a:             return new SettingsRate((AutoOptions) options);
1:2e1e98a:         else if (options instanceof ThreadOptions)
1:2e1e98a:             return new SettingsRate((ThreadOptions) options);
1:2e1e98a:         else
1:2e1e98a:             throw new IllegalStateException();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static void printHelp()
1:2e1e98a:     {
1:2e1e98a:         GroupedOptions.printOptions(System.out, "-rate", new ThreadOptions(), new AutoOptions());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static Runnable helpPrinter()
1:2e1e98a:     {
1:f42e235:         return SettingsRate::printHelp;
1:2e1e98a:     }
1:2e1e98a: }
1:2e1e98a: 
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
/////////////////////////////////////////////////////////////////////////
1:         return SettingsRate::printHelp;
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  Auto: %b%n", auto);
1:         if (auto)
1:         {
1:             out.printf("  Min Threads: %d%n", minThreads);
1:             out.printf("  Max Threads: %d%n", maxThreads);
1:         } else {
1:             out.printf("  Thread Count: %d%n", threadCount);
1:             out.printf("  OpsPer Sec: %d%n", opsPerSecond);
1:         }
1:     }
1: 
author:nitsanw
-------------------------------------------------------------------------------
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public final int opsPerSecond;
1:     public final boolean isFixed;
1:         String throttleOpt = options.throttle.value();
1:         String fixedOpt = options.fixed.value();
1:         int throttle = Integer.parseInt(throttleOpt.substring(0, throttleOpt.length() - 2));
1:         int fixed = Integer.parseInt(fixedOpt.substring(0, fixedOpt.length() - 2));
1:         if(throttle != 0 && fixed != 0)
1:             throw new IllegalArgumentException("can't have both fixed and throttle set, choose one.");
1:         opsPerSecond = Math.max(fixed, throttle);
1:         isFixed = (opsPerSecond == fixed);
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.opsPerSecond = 0;
1:         isFixed = false;
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple throttle = new OptionSimple("throttle=", "[0-9]+/s", "0/s", "throttle operations per second across all clients to a maximum rate (or less) with no implied schedule", false);
1:         final OptionSimple fixed = new OptionSimple("fixed=", "[0-9]+/s", "0/s", "expect fixed rate of operations per second across all clients with implied schedule", false);
1:             return Arrays.asList(threads, throttle, fixed);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:eecc034
/////////////////////////////////////////////////////////////////////////
1:     public final int minThreads;
1:     public final int maxThreads;
/////////////////////////////////////////////////////////////////////////
1:         minThreads = -1;
1:         maxThreads = -1;
1:         this.auto = auto.auto.setByUser();
1:         this.minThreads = Integer.parseInt(auto.minThreads.value());
1:         this.maxThreads = Integer.parseInt(auto.maxThreads.value());
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple auto = new OptionSimple("auto", "", null, "stop increasing threads once throughput saturates", false);
1:             return Arrays.asList(minThreads, maxThreads, auto);
/////////////////////////////////////////////////////////////////////////
1:                         options.accept("threads=200");
1:             AutoOptions options = new AutoOptions();
1:             options.accept("auto");
1:             return new SettingsRate(options);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:92381fd
/////////////////////////////////////////////////////////////////////////
1:                 case COUNTER_WRITE:
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class SettingsRate implements Serializable
1: {
1: 
1:     public final boolean auto;
0:     public final int minAutoThreads;
0:     public final int maxAutoThreads;
1:     public final int threadCount;
0:     public final int opRateTargetPerSecond;
1: 
1:     public SettingsRate(ThreadOptions options)
1:     {
1:         auto = false;
1:         threadCount = Integer.parseInt(options.threads.value());
0:         String rateOpt = options.rate.value();
0:         opRateTargetPerSecond = Integer.parseInt(rateOpt.substring(0, rateOpt.length() - 2));
0:         minAutoThreads = -1;
0:         maxAutoThreads = -1;
1:     }
1: 
1:     public SettingsRate(AutoOptions auto)
1:     {
0:         this.auto = true;
0:         this.minAutoThreads = Integer.parseInt(auto.minThreads.value());
0:         this.maxAutoThreads = Integer.parseInt(auto.maxThreads.value());
1:         this.threadCount = -1;
0:         this.opRateTargetPerSecond = 0;
1:     }
1: 
1: 
1:     // Option Declarations
1: 
1:     private static final class AutoOptions extends GroupedOptions
1:     {
0:         final OptionSimple auto = new OptionSimple("auto", "", null, "test with increasing number of threadCount until performance plateaus", false);
1:         final OptionSimple minThreads = new OptionSimple("threads>=", "[0-9]+", "4", "run at least this many clients concurrently", false);
1:         final OptionSimple maxThreads = new OptionSimple("threads<=", "[0-9]+", "1000", "run at most this many clients concurrently", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(auto, minThreads, maxThreads);
1:         }
1:     }
1: 
1:     private static final class ThreadOptions extends GroupedOptions
1:     {
1:         final OptionSimple threads = new OptionSimple("threads=", "[0-9]+", null, "run this many clients concurrently", true);
0:         final OptionSimple rate = new OptionSimple("limit=", "[0-9]+/s", "0/s", "limit operations per second across all clients", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(threads, rate);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsRate get(Map<String, String[]> clArgs, SettingsCommand command)
1:     {
1:         String[] params = clArgs.remove("-rate");
1:         if (params == null)
1:         {
1:             switch (command.type)
1:             {
1:                 case WRITE:
0:                 case COUNTERWRITE:
1:                     if (command.count > 0)
1:                     {
1:                         ThreadOptions options = new ThreadOptions();
0:                         options.accept("threads=50");
1:                         return new SettingsRate(options);
1:                     }
1:             }
0:             return new SettingsRate(new AutoOptions());
1:         }
1:         GroupedOptions options = GroupedOptions.select(params, new AutoOptions(), new ThreadOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -rate options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         if (options instanceof AutoOptions)
1:             return new SettingsRate((AutoOptions) options);
1:         else if (options instanceof ThreadOptions)
1:             return new SettingsRate((ThreadOptions) options);
1:         else
1:             throw new IllegalStateException();
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-rate", new ThreadOptions(), new AutoOptions());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
0:         return new Runnable()
1:         {
1:             @Override
0:             public void run()
1:             {
1:                 printHelp();
1:             }
0:         };
1:     }
1: }
1: 
============================================================================