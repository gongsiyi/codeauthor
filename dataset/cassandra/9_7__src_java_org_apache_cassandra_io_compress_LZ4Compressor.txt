1:aa7c7d9: /*
1:aa7c7d9:  * Licensed to the Apache Software Foundation (ASF) under one
1:aa7c7d9:  * or more contributor license agreements.  See the NOTICE file
1:aa7c7d9:  * distributed with this work for additional information
1:aa7c7d9:  * regarding copyright ownership.  The ASF licenses this file
1:aa7c7d9:  * to you under the Apache License, Version 2.0 (the
1:aa7c7d9:  * "License"); you may not use this file except in compliance
1:aa7c7d9:  * with the License.  You may obtain a copy of the License at
1:aa7c7d9:  *
1:aa7c7d9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aa7c7d9:  *
1:aa7c7d9:  * Unless required by applicable law or agreed to in writing, software
1:aa7c7d9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aa7c7d9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa7c7d9:  * See the License for the specific language governing permissions and
1:aa7c7d9:  * limitations under the License.
1:aa7c7d9:  */
1:aa7c7d9: package org.apache.cassandra.io.compress;
6:aa7c7d9: 
1:aa7c7d9: import java.io.IOException;
1:895ec3e: import java.nio.ByteBuffer;
1:aa7c7d9: import java.util.Arrays;
1:aa7c7d9: import java.util.HashSet;
1:aa7c7d9: import java.util.Map;
1:aa7c7d9: import java.util.Set;
1:e06d411: import java.util.concurrent.ConcurrentHashMap;
1:aa7c7d9: 
1:bc7941c: import com.google.common.annotations.VisibleForTesting;
1:e06d411: import org.slf4j.Logger;
1:e06d411: import org.slf4j.LoggerFactory;
1:e06d411: 
1:aa7c7d9: import net.jpountz.lz4.LZ4Exception;
1:aa7c7d9: import net.jpountz.lz4.LZ4Factory;
1:e06d411: import org.apache.cassandra.exceptions.ConfigurationException;
1:e06d411: import org.apache.cassandra.utils.Pair;
1:aa7c7d9: 
1:aa7c7d9: public class LZ4Compressor implements ICompressor
2:aa7c7d9: {
1:e06d411:     private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);
1:e06d411: 
1:e06d411:     public static final String LZ4_FAST_COMPRESSOR = "fast";
1:e06d411:     public static final String LZ4_HIGH_COMPRESSOR = "high";
1:e06d411:     private static final Set<String> VALID_COMPRESSOR_TYPES = new HashSet<>(Arrays.asList(LZ4_FAST_COMPRESSOR, LZ4_HIGH_COMPRESSOR));
1:e06d411: 
1:e06d411:     private static final int DEFAULT_HIGH_COMPRESSION_LEVEL = 9;
1:e06d411:     private static final String DEFAULT_LZ4_COMPRESSOR_TYPE = LZ4_FAST_COMPRESSOR;
1:e06d411: 
1:e06d411:     public static final String LZ4_HIGH_COMPRESSION_LEVEL = "lz4_high_compressor_level";
1:e06d411:     public static final String LZ4_COMPRESSOR_TYPE = "lz4_compressor_type";
1:e06d411: 
1:aa7c7d9:     private static final int INTEGER_BYTES = 4;
1:aedce5f: 
1:e06d411:     private static final ConcurrentHashMap<Pair<String, Integer>, LZ4Compressor> instances = new ConcurrentHashMap<>();
1:bc7941c: 
1:e06d411:     public static LZ4Compressor create(Map<String, String> args) throws ConfigurationException
1:aa7c7d9:     {
1:e06d411:         String compressorType = validateCompressorType(args.get(LZ4_COMPRESSOR_TYPE));
1:e06d411:         Integer compressionLevel = validateCompressionLevel(args.get(LZ4_HIGH_COMPRESSION_LEVEL));
1:e06d411: 
1:e06d411:         Pair<String, Integer> compressorTypeAndLevel = Pair.create(compressorType, compressionLevel);
1:e06d411:         LZ4Compressor instance = instances.get(compressorTypeAndLevel);
1:e06d411:         if (instance == null)
1:e06d411:         {
1:e06d411:             if (compressorType.equals(LZ4_FAST_COMPRESSOR) && args.get(LZ4_HIGH_COMPRESSION_LEVEL) != null)
1:e06d411:                 logger.warn("'{}' parameter is ignored when '{}' is '{}'", LZ4_HIGH_COMPRESSION_LEVEL, LZ4_COMPRESSOR_TYPE, LZ4_FAST_COMPRESSOR);
1:e06d411:             instance = new LZ4Compressor(compressorType, compressionLevel);
1:e06d411:             LZ4Compressor instanceFromMap = instances.putIfAbsent(compressorTypeAndLevel, instance);
1:e06d411:             if(instanceFromMap != null)
1:e06d411:                 instance = instanceFromMap;
1:e06d411:         }
1:aa7c7d9:         return instance;
2:aa7c7d9:     }
1:895ec3e: 
1:aa7c7d9:     private final net.jpountz.lz4.LZ4Compressor compressor;
1:895ec3e:     private final net.jpountz.lz4.LZ4FastDecompressor decompressor;
1:e06d411:     @VisibleForTesting
1:e06d411:     final String compressorType;
1:e06d411:     @VisibleForTesting
1:e06d411:     final Integer compressionLevel;
1:895ec3e: 
1:e06d411:     private LZ4Compressor(String type, Integer compressionLevel)
1:895ec3e:     {
1:e06d411:         this.compressorType = type;
1:e06d411:         this.compressionLevel = compressionLevel;
1:aa7c7d9:         final LZ4Factory lz4Factory = LZ4Factory.fastestInstance();
1:e06d411:         switch (type)
1:e06d411:         {
1:e06d411:             case LZ4_HIGH_COMPRESSOR:
1:e06d411:             {
1:e06d411:                 compressor = lz4Factory.highCompressor(compressionLevel);
1:e06d411:                 break;
1:e06d411:             }
1:e06d411:             case LZ4_FAST_COMPRESSOR:
1:e06d411:             default:
1:e06d411:             {
1:e06d411:                 compressor = lz4Factory.fastCompressor();
1:e06d411:             }
1:e06d411:         }
1:e06d411: 
1:895ec3e:         decompressor = lz4Factory.fastDecompressor();
1:aa7c7d9:     }
1:aa7c7d9: 
1:aa7c7d9:     public int initialCompressedBufferLength(int chunkLength)
1:aa7c7d9:     {
1:aa7c7d9:         return INTEGER_BYTES + compressor.maxCompressedLength(chunkLength);
1:aa7c7d9:     }
1:bc7941c: 
1:3adfd15:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException
1:aa7c7d9:     {
1:3adfd15:         int len = input.remaining();
1:3adfd15:         output.put((byte) len);
1:3adfd15:         output.put((byte) (len >>> 8));
1:3adfd15:         output.put((byte) (len >>> 16));
1:3adfd15:         output.put((byte) (len >>> 24));
1:aa7c7d9: 
1:aa7c7d9:         try
1:aa7c7d9:         {
1:3adfd15:             compressor.compress(input, output);
1:aa7c7d9:         }
1:aa7c7d9:         catch (LZ4Exception e)
1:aa7c7d9:         {
1:aa7c7d9:             throw new IOException(e);
1:aa7c7d9:         }
1:aa7c7d9:     }
1:aa7c7d9: 
1:aa7c7d9:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
1:aa7c7d9:     {
1:aa7c7d9:         final int decompressedLength =
1:aa7c7d9:                 (input[inputOffset] & 0xFF)
1:aa7c7d9:                 | ((input[inputOffset + 1] & 0xFF) << 8)
1:aa7c7d9:                 | ((input[inputOffset + 2] & 0xFF) << 16)
1:aa7c7d9:                 | ((input[inputOffset + 3] & 0xFF) << 24);
1:aedce5f: 
1:895ec3e:         final int compressedLength;
1:895ec3e:         try
1:895ec3e:         {
1:aa7c7d9:             compressedLength = decompressor.decompress(input, inputOffset + INTEGER_BYTES,
1:aa7c7d9:                                                        output, outputOffset, decompressedLength);
1:895ec3e:         }
1:895ec3e:         catch (LZ4Exception e)
1:895ec3e:         {
1:895ec3e:             throw new IOException(e);
1:895ec3e:         }
1:895ec3e: 
1:aa7c7d9:         if (compressedLength != inputLength - INTEGER_BYTES)
1:895ec3e:         {
1:aa7c7d9:             throw new IOException("Compressed lengths mismatch");
1:895ec3e:         }
1:895ec3e: 
1:895ec3e:         return decompressedLength;
1:895ec3e:     }
1:895ec3e: 
1:3adfd15:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:895ec3e:     {
1:3adfd15:         final int decompressedLength = (input.get() & 0xFF)
1:3adfd15:                 | ((input.get() & 0xFF) << 8)
1:3adfd15:                 | ((input.get() & 0xFF) << 16)
1:3adfd15:                 | ((input.get() & 0xFF) << 24);
1:895ec3e: 
1:aa7c7d9:         try
1:aa7c7d9:         {
1:3adfd15:             int compressedLength = decompressor.decompress(input, input.position(), output, output.position(), decompressedLength);
1:3adfd15:             input.position(input.position() + compressedLength);
1:3adfd15:             output.position(output.position() + decompressedLength);
1:895ec3e:         }
1:aa7c7d9:         catch (LZ4Exception e)
1:aa7c7d9:         {
1:aa7c7d9:             throw new IOException(e);
1:aa7c7d9:         }
1:aa7c7d9: 
1:3adfd15:         if (input.remaining() > 0)
1:aa7c7d9:         {
1:3adfd15:             throw new IOException("Compressed lengths mismatch - "+input.remaining()+" bytes remain");
1:aa7c7d9:         }
1:aa7c7d9:     }
1:aa7c7d9: 
1:aa7c7d9:     public Set<String> supportedOptions()
1:aa7c7d9:     {
1:e06d411:         return new HashSet<>(Arrays.asList(LZ4_HIGH_COMPRESSION_LEVEL, LZ4_COMPRESSOR_TYPE));
1:e06d411:     }
1:e06d411: 
1:e06d411:     public static String validateCompressorType(String compressorType) throws ConfigurationException
1:e06d411:     {
1:e06d411:         if (compressorType == null)
1:e06d411:             return DEFAULT_LZ4_COMPRESSOR_TYPE;
1:e06d411: 
1:e06d411:         if (!VALID_COMPRESSOR_TYPES.contains(compressorType))
1:e06d411:         {
1:e06d411:             throw new ConfigurationException(String.format("Invalid compressor type '%s' specified for LZ4 parameter '%s'. "
1:e06d411:                                                            + "Valid options are %s.", compressorType, LZ4_COMPRESSOR_TYPE,
1:e06d411:                                                            VALID_COMPRESSOR_TYPES.toString()));
1:e06d411:         }
1:e06d411:         else
1:e06d411:         {
1:e06d411:             return compressorType;
1:e06d411:         }
1:e06d411:     }
1:e06d411: 
1:e06d411:     public static Integer validateCompressionLevel(String compressionLevel) throws ConfigurationException
1:e06d411:     {
1:e06d411:         if (compressionLevel == null)
1:e06d411:             return DEFAULT_HIGH_COMPRESSION_LEVEL;
1:e06d411: 
1:e06d411:         ConfigurationException ex = new ConfigurationException("Invalid value [" + compressionLevel + "] for parameter '"
1:e06d411:                                                                  + LZ4_HIGH_COMPRESSION_LEVEL + "'. Value must be between 1 and 17.");
1:e06d411: 
1:e06d411:         Integer level;
1:e06d411:         try
1:e06d411:         {
1:7dccb31:             level = Integer.valueOf(compressionLevel);
1:e06d411:         }
1:e06d411:         catch (NumberFormatException e)
1:e06d411:         {
1:e06d411:             throw ex;
1:e06d411:         }
1:e06d411: 
1:e06d411:         if (level < 1 || level > 17)
1:e06d411:         {
1:e06d411:             throw ex;
1:e06d411:         }
1:e06d411: 
1:e06d411:         return level;
1:aa7c7d9:     }
1:3adfd15: 
1:3adfd15:     public BufferType preferredBufferType()
1:3adfd15:     {
1:3adfd15:         return BufferType.OFF_HEAP;
1:3adfd15:     }
1:3adfd15: 
1:3adfd15:     public boolean supports(BufferType bufferType)
1:3adfd15:     {
1:3adfd15:         return true;
1:3adfd15:     }
1:aa7c7d9: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7dccb31
/////////////////////////////////////////////////////////////////////////
1:             level = Integer.valueOf(compressionLevel);
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Michael Kjellman
-------------------------------------------------------------------------------
commit:e06d411
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.utils.Pair;
1:     private static final Logger logger = LoggerFactory.getLogger(LZ4Compressor.class);
1: 
1:     public static final String LZ4_FAST_COMPRESSOR = "fast";
1:     public static final String LZ4_HIGH_COMPRESSOR = "high";
1:     private static final Set<String> VALID_COMPRESSOR_TYPES = new HashSet<>(Arrays.asList(LZ4_FAST_COMPRESSOR, LZ4_HIGH_COMPRESSOR));
1: 
1:     private static final int DEFAULT_HIGH_COMPRESSION_LEVEL = 9;
1:     private static final String DEFAULT_LZ4_COMPRESSOR_TYPE = LZ4_FAST_COMPRESSOR;
1: 
1:     public static final String LZ4_HIGH_COMPRESSION_LEVEL = "lz4_high_compressor_level";
1:     public static final String LZ4_COMPRESSOR_TYPE = "lz4_compressor_type";
1: 
1:     private static final ConcurrentHashMap<Pair<String, Integer>, LZ4Compressor> instances = new ConcurrentHashMap<>();
1:     public static LZ4Compressor create(Map<String, String> args) throws ConfigurationException
1:         String compressorType = validateCompressorType(args.get(LZ4_COMPRESSOR_TYPE));
1:         Integer compressionLevel = validateCompressionLevel(args.get(LZ4_HIGH_COMPRESSION_LEVEL));
1: 
1:         Pair<String, Integer> compressorTypeAndLevel = Pair.create(compressorType, compressionLevel);
1:         LZ4Compressor instance = instances.get(compressorTypeAndLevel);
1:         if (instance == null)
1:         {
1:             if (compressorType.equals(LZ4_FAST_COMPRESSOR) && args.get(LZ4_HIGH_COMPRESSION_LEVEL) != null)
1:                 logger.warn("'{}' parameter is ignored when '{}' is '{}'", LZ4_HIGH_COMPRESSION_LEVEL, LZ4_COMPRESSOR_TYPE, LZ4_FAST_COMPRESSOR);
1:             instance = new LZ4Compressor(compressorType, compressionLevel);
1:             LZ4Compressor instanceFromMap = instances.putIfAbsent(compressorTypeAndLevel, instance);
1:             if(instanceFromMap != null)
1:                 instance = instanceFromMap;
1:         }
1:     @VisibleForTesting
1:     final String compressorType;
1:     @VisibleForTesting
1:     final Integer compressionLevel;
1:     private LZ4Compressor(String type, Integer compressionLevel)
1:         this.compressorType = type;
1:         this.compressionLevel = compressionLevel;
1:         switch (type)
1:         {
1:             case LZ4_HIGH_COMPRESSOR:
1:             {
1:                 compressor = lz4Factory.highCompressor(compressionLevel);
1:                 break;
1:             }
1:             case LZ4_FAST_COMPRESSOR:
1:             default:
1:             {
1:                 compressor = lz4Factory.fastCompressor();
1:             }
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new HashSet<>(Arrays.asList(LZ4_HIGH_COMPRESSION_LEVEL, LZ4_COMPRESSOR_TYPE));
1:     }
1: 
1:     public static String validateCompressorType(String compressorType) throws ConfigurationException
1:     {
1:         if (compressorType == null)
1:             return DEFAULT_LZ4_COMPRESSOR_TYPE;
1: 
1:         if (!VALID_COMPRESSOR_TYPES.contains(compressorType))
1:         {
1:             throw new ConfigurationException(String.format("Invalid compressor type '%s' specified for LZ4 parameter '%s'. "
1:                                                            + "Valid options are %s.", compressorType, LZ4_COMPRESSOR_TYPE,
1:                                                            VALID_COMPRESSOR_TYPES.toString()));
1:         }
1:         else
1:         {
1:             return compressorType;
1:         }
1:     }
1: 
1:     public static Integer validateCompressionLevel(String compressionLevel) throws ConfigurationException
1:     {
1:         if (compressionLevel == null)
1:             return DEFAULT_HIGH_COMPRESSION_LEVEL;
1: 
1:         ConfigurationException ex = new ConfigurationException("Invalid value [" + compressionLevel + "] for parameter '"
1:                                                                  + LZ4_HIGH_COMPRESSION_LEVEL + "'. Value must be between 1 and 17.");
1: 
1:         Integer level;
1:         try
1:         {
0:             level = Integer.parseInt(compressionLevel);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw ex;
1:         }
1: 
1:         if (level < 1 || level > 17)
1:         {
1:             throw ex;
1:         }
1: 
1:         return level;
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e25453b
/////////////////////////////////////////////////////////////////////////
0:         return new HashSet<>();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.schema.CompressionParams;
/////////////////////////////////////////////////////////////////////////
0:         return new HashSet<>(Arrays.asList(CompressionParams.CRC_CHECK_CHANCE));
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
1:     public void compress(ByteBuffer input, ByteBuffer output) throws IOException
1:         int len = input.remaining();
1:         output.put((byte) len);
1:         output.put((byte) (len >>> 8));
1:         output.put((byte) (len >>> 16));
1:         output.put((byte) (len >>> 24));
1:             compressor.compress(input, output);
/////////////////////////////////////////////////////////////////////////
1:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:         final int decompressedLength = (input.get() & 0xFF)
1:                 | ((input.get() & 0xFF) << 8)
1:                 | ((input.get() & 0xFF) << 16)
1:                 | ((input.get() & 0xFF) << 24);
1:             int compressedLength = decompressor.decompress(input, input.position(), output, output.position(), decompressedLength);
1:             input.position(input.position() + compressedLength);
1:             output.position(output.position() + decompressedLength);
1:         if (input.remaining() > 0)
1:             throw new IOException("Compressed lengths mismatch - "+input.remaining()+" bytes remain");
1: 
1:     public BufferType preferredBufferType()
1:     {
1:         return BufferType.OFF_HEAP;
1:     }
1: 
1:     public boolean supports(BufferType bufferType)
1:     {
1:         return true;
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aedce5f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (input.hasArray() && output.hasArray())
0:             return uncompress(input.array(), input.arrayOffset() + input.position(), input.remaining(), output.array(), output.arrayOffset() + output.position());
1: 
/////////////////////////////////////////////////////////////////////////
0:         return true;
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
0:     @VisibleForTesting
0:     public static final LZ4Compressor instance = new LZ4Compressor();
/////////////////////////////////////////////////////////////////////////
0:     public int compress(ByteBuffer src, WrappedByteBuffer dest) throws IOException
0:         final ByteBuffer buf = dest.buffer;
0:         int len = src.remaining();
0:         dest.buffer.put((byte) len);
0:         dest.buffer.put((byte) (len >>> 8));
0:         dest.buffer.put((byte) (len >>> 16));
0:         dest.buffer.put((byte) (len >>> 24));
1: 
0:         int start = dest.buffer.position();
0:             compressor.compress(src, dest.buffer);
0:             return INTEGER_BYTES + (buf.position() - start);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             throw new IOException("Compressed lengths mismatch - got: "+compressedLength+" vs expected: "+inputLength);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FastByteOperations;
/////////////////////////////////////////////////////////////////////////
1:     private final net.jpountz.lz4.LZ4FastDecompressor decompressor;
1:         decompressor = lz4Factory.fastDecompressor();
/////////////////////////////////////////////////////////////////////////
0:     public int uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:     {
0:         int pos = input.position();
0:         final int decompressedLength = (input.get(pos) & 0xFF)
0:                 | ((input.get(pos + 1) & 0xFF) << 8)
0:                 | ((input.get(pos + 2) & 0xFF) << 16)
0:                 | ((input.get(pos + 3) & 0xFF) << 24);
1: 
0:         int inputLength = input.remaining() - INTEGER_BYTES;
1: 
1:         final int compressedLength;
1:         try
1:         {
0:             compressedLength = decompressor.decompress(input, input.position() + INTEGER_BYTES, output, output.position(), decompressedLength);
1:         }
1:         catch (LZ4Exception e)
1:         {
1:             throw new IOException(e);
1:         }
1: 
0:         if (compressedLength != inputLength)
1:         {
0:             throw new IOException("Compressed lengths mismatch: "+compressedLength+" vs "+inputLength);
1:         }
1: 
1:         return decompressedLength;
1:     }
1: 
0:     @Override
0:     public boolean useDirectOutputByteBuffers()
1:     {
0:         return false;
1:     }
1: 
0:         return new HashSet<>(Arrays.asList(CompressionParameters.CRC_CHECK_CHANCE));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:aa7c7d9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.compress;
1: 
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import net.jpountz.lz4.LZ4Exception;
1: import net.jpountz.lz4.LZ4Factory;
1: 
1: public class LZ4Compressor implements ICompressor
1: {
1: 
1:     private static final int INTEGER_BYTES = 4;
0:     private static final LZ4Compressor instance = new LZ4Compressor();
1: 
0:     public static LZ4Compressor create(Map<String, String> args)
1:     {
1:         return instance;
1:     }
1: 
1:     private final net.jpountz.lz4.LZ4Compressor compressor;
0:     private final net.jpountz.lz4.LZ4Decompressor decompressor;
1: 
0:     private LZ4Compressor()
1:     {
1:         final LZ4Factory lz4Factory = LZ4Factory.fastestInstance();
0:         compressor = lz4Factory.fastCompressor();
0:         decompressor = lz4Factory.decompressor();
1:     }
1: 
1:     public int initialCompressedBufferLength(int chunkLength)
1:     {
1:         return INTEGER_BYTES + compressor.maxCompressedLength(chunkLength);
1:     }
1: 
0:     public int compress(byte[] input, int inputOffset, int inputLength, WrappedArray output, int outputOffset) throws IOException
1:     {
0:         final byte[] dest = output.buffer;
0:         dest[outputOffset] = (byte) inputLength;
0:         dest[outputOffset + 1] = (byte) (inputLength >>> 8);
0:         dest[outputOffset + 2] = (byte) (inputLength >>> 16);
0:         dest[outputOffset + 3] = (byte) (inputLength >>> 24);
0:         final int maxCompressedLength = compressor.maxCompressedLength(inputLength);
1:         try
1:         {
0:             return INTEGER_BYTES + compressor.compress(input, inputOffset, inputLength,
0:                                                        dest, outputOffset + INTEGER_BYTES, maxCompressedLength);
1:         }
1:         catch (LZ4Exception e)
1:         {
1:             throw new IOException(e);
1:         }
1:     }
1: 
1:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
1:     {
1:         final int decompressedLength =
1:                 (input[inputOffset] & 0xFF)
1:                 | ((input[inputOffset + 1] & 0xFF) << 8)
1:                 | ((input[inputOffset + 2] & 0xFF) << 16)
1:                 | ((input[inputOffset + 3] & 0xFF) << 24);
0:         final int compressedLength;
1:         try
1:         {
1:             compressedLength = decompressor.decompress(input, inputOffset + INTEGER_BYTES,
1:                                                        output, outputOffset, decompressedLength);
1:         }
1:         catch (LZ4Exception e)
1:         {
1:             throw new IOException(e);
1:         }
1: 
1:         if (compressedLength != inputLength - INTEGER_BYTES)
1:         {
1:             throw new IOException("Compressed lengths mismatch");
1:         }
1: 
0:         return decompressedLength;
1:     }
1: 
1:     public Set<String> supportedOptions()
1:     {
0:         return new HashSet<String>(Arrays.asList(CompressionParameters.CRC_CHECK_CHANCE));
1:     }
1: }
commit:c3f9ee7
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.io.compress;
0: 
0: import java.io.IOException;
0: import java.util.Arrays;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: 
0: import net.jpountz.lz4.LZ4Exception;
0: import net.jpountz.lz4.LZ4Factory;
0: 
0: public class LZ4Compressor implements ICompressor
0: {
0: 
0:     private static final int INTEGER_BYTES = 4;
0:     private static final LZ4Compressor instance = new LZ4Compressor();
0: 
0:     public static LZ4Compressor create(Map<String, String> args)
0:     {
0:         return instance;
0:     }
0: 
0:     private final net.jpountz.lz4.LZ4Compressor compressor;
0:     private final net.jpountz.lz4.LZ4Decompressor decompressor;
0: 
0:     private LZ4Compressor()
0:     {
0:         final LZ4Factory lz4Factory = LZ4Factory.fastestInstance();
0:         compressor = lz4Factory.fastCompressor();
0:         decompressor = lz4Factory.decompressor();
0:     }
0: 
0:     public int initialCompressedBufferLength(int chunkLength)
0:     {
0:         return INTEGER_BYTES + compressor.maxCompressedLength(chunkLength);
0:     }
0: 
0:     public int compress(byte[] input, int inputOffset, int inputLength, WrappedArray output, int outputOffset) throws IOException
0:     {
0:         final byte[] dest = output.buffer;
0:         dest[outputOffset] = (byte) inputLength;
0:         dest[outputOffset + 1] = (byte) (inputLength >>> 8);
0:         dest[outputOffset + 2] = (byte) (inputLength >>> 16);
0:         dest[outputOffset + 3] = (byte) (inputLength >>> 24);
0:         final int maxCompressedLength = compressor.maxCompressedLength(inputLength);
0:         try
0:         {
0:             return INTEGER_BYTES + compressor.compress(input, inputOffset, inputLength,
0:                                                        dest, outputOffset + INTEGER_BYTES, maxCompressedLength);
0:         }
0:         catch (LZ4Exception e)
0:         {
0:             throw new IOException(e);
0:         }
0:     }
0: 
0:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
0:     {
0:         final int decompressedLength =
0:                 (input[inputOffset] & 0xFF)
0:                 | ((input[inputOffset + 1] & 0xFF) << 8)
0:                 | ((input[inputOffset + 2] & 0xFF) << 16)
0:                 | ((input[inputOffset + 3] & 0xFF) << 24);
0:         final int compressedLength;
0:         try
0:         {
0:             compressedLength = decompressor.decompress(input, inputOffset + INTEGER_BYTES,
0:                                                        output, outputOffset, decompressedLength);
0:         }
0:         catch (LZ4Exception e)
0:         {
0:             throw new IOException(e);
0:         }
0: 
0:         if (compressedLength != inputLength - INTEGER_BYTES)
0:         {
0:             throw new IOException("Compressed lengths mismatch");
0:         }
0: 
0:         return decompressedLength;
0:     }
0: 
0:     public Set<String> supportedOptions()
0:     {
0:         return new HashSet<String>(Arrays.asList(CompressionParameters.CRC_CHECK_CHANCE));
0:     }
0: }
============================================================================