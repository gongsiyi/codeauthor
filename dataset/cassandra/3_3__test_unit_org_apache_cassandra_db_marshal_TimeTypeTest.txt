1:107545b: /**
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing,
1:107545b:  * software distributed under the License is distributed on an
1:107545b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:107545b:  * KIND, either express or implied.  See the License for the
1:107545b:  * specific language governing permissions and limitations
1:107545b:  * under the License.
1:107545b:  *
1:107545b:  */
1:107545b: package org.apache.cassandra.db.marshal;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: import java.util.concurrent.TimeUnit;
1:107545b: 
1:107545b: import org.junit.Test;
1:863dbc7: 
1:863dbc7: import org.apache.cassandra.cql3.*;
1:107545b: import org.apache.cassandra.serializers.TimeSerializer;
1:107545b: 
1:863dbc7: public class TimeTypeTest extends CQLTester
1:107545b: {
1:863dbc7:     @Test
1:863dbc7:     public void testComparison()
1:107545b:     {
1:107545b:         Long t1 = TimeSerializer.timeStringToLong("01:00:00.123456789");
1:107545b:         Long t2 = new Long((1L * 60L * 60L * 1000L * 1000L * 1000L) + 123456789);
1:107545b:         ByteBuffer b1 = TimeSerializer.instance.serialize(t1);
1:107545b:         ByteBuffer b2 = TimeSerializer.instance.serialize(t2);
1:107545b:         assert TimeType.instance.compare(b1, b2) == 0 : "Failed == comparison";
1:107545b: 
1:107545b:         b2 = TimeSerializer.instance.serialize(123456789L);
1:107545b:         assert TimeType.instance.compare(b1, b2) > 0 : "Failed > comparison";
1:107545b: 
1:107545b:         t2 = new Long(2L * 60L * 60L * 1000L * 1000L * 1000L + 123456789);
1:107545b:         b2 = TimeSerializer.instance.serialize(t2);
1:107545b:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison";
1:107545b: 
1:107545b:         b1 = TimeSerializer.instance.serialize(0L);
1:107545b:         b2 = TimeSerializer.instance.serialize(0L);
1:107545b:         assert TimeType.instance.compare(b1, b2) == 0 : "Failed == comparison on 0";
1:107545b: 
1:107545b:         b1 = TimeSerializer.instance.serialize(0L);
1:107545b:         b2 = TimeSerializer.instance.serialize(10000000L);
1:fd91e15:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison on 0";
1:107545b: 
1:107545b:         b1 = TimeSerializer.instance.serialize(0L);
1:107545b:         b2 = TimeSerializer.instance.serialize(TimeUnit.DAYS.toNanos(1));
1:fd91e15:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison against max range.";
1:107545b: 
1:107545b:         b1 = TimeSerializer.instance.serialize(TimeUnit.DAYS.toNanos(1));
1:107545b:         b2 = TimeSerializer.instance.serialize(0L);
1:fd91e15:         assert TimeType.instance.compare(b1, b2) > 0 : "Failed > comparison against max range.";
1:107545b:     }
1:863dbc7: 
1:863dbc7:     /**
1:863dbc7:      * Check that time is correctly recognized and validated
1:863dbc7:      */
1:863dbc7:     @Test
1:863dbc7:     public void testTime() throws Throwable
1:863dbc7:     {
1:863dbc7:         createTable("CREATE TABLE %s (id int, cl int, ts time, PRIMARY KEY(id, cl));");
1:863dbc7: 
1:863dbc7:         execute("INSERT into %s (id, cl, ts) values (1, 1, 42000000000);");
1:863dbc7:         execute("INSERT into %s (id, cl, ts) values (1, 2, '42000000000');");
1:863dbc7:         execute("INSERT into %s (id, cl, ts) values (1, 3, '00:00:42.000000000');");
1:863dbc7:         execute("INSERT into %s (id, cl, ts) values (1, 4, ?);", 42000000000L);
1:863dbc7: 
1:863dbc7:         assertRows(execute("SELECT * FROM %s"),
1:863dbc7:                    row(1, 1, 42000000000L),
1:863dbc7:                    row(1, 2, 42000000000L),
1:863dbc7:                    row(1, 3, 42000000000L),
1:863dbc7:                    row(1, 4, 42000000000L));
1:863dbc7:     }
1:107545b: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:863dbc7
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.cql3.*;
1: public class TimeTypeTest extends CQLTester
1:     @Test
1:     public void testComparison()
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Check that time is correctly recognized and validated
1:      */
1:     @Test
1:     public void testTime() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (id int, cl int, ts time, PRIMARY KEY(id, cl));");
1: 
1:         execute("INSERT into %s (id, cl, ts) values (1, 1, 42000000000);");
1:         execute("INSERT into %s (id, cl, ts) values (1, 2, '42000000000');");
1:         execute("INSERT into %s (id, cl, ts) values (1, 3, '00:00:42.000000000');");
1:         execute("INSERT into %s (id, cl, ts) values (1, 4, ?);", 42000000000L);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, 1, 42000000000L),
1:                    row(1, 2, 42000000000L),
1:                    row(1, 3, 42000000000L),
1:                    row(1, 4, 42000000000L));
1:     }
author:Rei Odaira
-------------------------------------------------------------------------------
commit:fd91e15
/////////////////////////////////////////////////////////////////////////
1:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison on 0";
1:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison against max range.";
1:         assert TimeType.instance.compare(b1, b2) > 0 : "Failed > comparison against max range.";
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.Test;
1: import org.apache.cassandra.serializers.TimeSerializer;
1: 
0: public class TimeTypeTest
1: {
0:     @Test public void TestComparison()
1:     {
1:         Long t1 = TimeSerializer.timeStringToLong("01:00:00.123456789");
1:         Long t2 = new Long((1L * 60L * 60L * 1000L * 1000L * 1000L) + 123456789);
1:         ByteBuffer b1 = TimeSerializer.instance.serialize(t1);
1:         ByteBuffer b2 = TimeSerializer.instance.serialize(t2);
1:         assert TimeType.instance.compare(b1, b2) == 0 : "Failed == comparison";
1: 
1:         b2 = TimeSerializer.instance.serialize(123456789L);
1:         assert TimeType.instance.compare(b1, b2) > 0 : "Failed > comparison";
1: 
1:         t2 = new Long(2L * 60L * 60L * 1000L * 1000L * 1000L + 123456789);
1:         b2 = TimeSerializer.instance.serialize(t2);
1:         assert TimeType.instance.compare(b1, b2) < 0 : "Failed < comparison";
1: 
1:         b1 = TimeSerializer.instance.serialize(0L);
1:         b2 = TimeSerializer.instance.serialize(0L);
1:         assert TimeType.instance.compare(b1, b2) == 0 : "Failed == comparison on 0";
1: 
1:         b1 = TimeSerializer.instance.serialize(0L);
1:         b2 = TimeSerializer.instance.serialize(10000000L);
0:         assert TimeType.instance.compare(b1, b2) == -1 : "Failed < comparison on 0";
1: 
1:         b1 = TimeSerializer.instance.serialize(0L);
1:         b2 = TimeSerializer.instance.serialize(TimeUnit.DAYS.toNanos(1));
0:         assert TimeType.instance.compare(b1, b2) == -1 : "Failed < comparison against max range.";
1: 
1:         b1 = TimeSerializer.instance.serialize(TimeUnit.DAYS.toNanos(1));
1:         b2 = TimeSerializer.instance.serialize(0L);
0:         assert TimeType.instance.compare(b1, b2) == 1 : "Failed > comparison against max range.";
1:     }
1: }
============================================================================