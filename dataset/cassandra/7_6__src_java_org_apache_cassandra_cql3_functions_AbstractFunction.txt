1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
2:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3.functions;
2:31e669a: 
1:31e669a: import java.util.List;
1:31e669a: 
1:44fa12e: import com.google.common.base.Objects;
1:44fa12e: 
1:1de8e39: import org.apache.cassandra.cql3.AssignmentTestable;
1:1de8e39: import org.apache.cassandra.cql3.ColumnSpecification;
1:31e669a: import org.apache.cassandra.db.marshal.AbstractType;
1:269c5d4: import org.apache.commons.lang3.text.StrBuilder;
1:31e669a: 
1:44fa12e: /**
1:44fa12e:  * Base class for our native/hardcoded functions.
1:44fa12e:  */
1:31e669a: public abstract class AbstractFunction implements Function
3:31e669a: {
1:44fa12e:     protected final FunctionName name;
1:44fa12e:     protected final List<AbstractType<?>> argTypes;
1:44fa12e:     protected final AbstractType<?> returnType;
1:31e669a: 
1:44fa12e:     protected AbstractFunction(FunctionName name, List<AbstractType<?>> argTypes, AbstractType<?> returnType)
1:31e669a:     {
1:31e669a:         this.name = name;
1:44fa12e:         this.argTypes = argTypes;
1:31e669a:         this.returnType = returnType;
3:31e669a:     }
1:cb5897f: 
1:44fa12e:     public FunctionName name()
1:cb5897f:     {
1:31e669a:         return name;
1:cb5897f:     }
1:31e669a: 
1:44fa12e:     public List<AbstractType<?>> argTypes()
1:31e669a:     {
1:44fa12e:         return argTypes;
1:31e669a:     }
1:31e669a: 
1:31e669a:     public AbstractType<?> returnType()
1:31e669a:     {
1:31e669a:         return returnType;
1:b853630:     }
1:b853630: 
1:44fa12e:     @Override
1:44fa12e:     public boolean equals(Object o)
1:b853630:     {
1:44fa12e:         if (!(o instanceof AbstractFunction))
1:44fa12e:             return false;
1:44fa12e: 
1:44fa12e:         AbstractFunction that = (AbstractFunction)o;
1:44fa12e:         return Objects.equal(this.name, that.name)
1:44fa12e:             && Objects.equal(this.argTypes, that.argTypes)
1:44fa12e:             && Objects.equal(this.returnType, that.returnType);
1:e2f35c7:     }
1:e2f35c7: 
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:e2f35c7:     {
1:89464ea:         functions.add(this);
1:31e669a:     }
1:31e669a: 
1:e2f35c7:     public boolean hasReferenceTo(Function function)
1:e2f35c7:     {
1:e2f35c7:         return false;
1:e2f35c7:     }
1:e2f35c7: 
1:44fa12e:     @Override
1:44fa12e:     public int hashCode()
1:31e669a:     {
1:44fa12e:         return Objects.hashCode(name, argTypes, returnType);
1:44fa12e:     }
1:44fa12e: 
1:1de8e39:     public final AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:1de8e39:     {
1:1de8e39:         // We should ignore the fact that the receiver type is frozen in our comparison as functions do not support
1:1de8e39:         // frozen types for return type
1:1de8e39:         AbstractType<?> returnType = returnType();
1:677230d:         if (receiver.type.isFreezable() && !receiver.type.isMultiCell())
1:1de8e39:             returnType = returnType.freeze();
1:1de8e39: 
1:1de8e39:         if (receiver.type.equals(returnType))
1:1de8e39:             return AssignmentTestable.TestResult.EXACT_MATCH;
1:1de8e39: 
1:1de8e39:         if (receiver.type.isValueCompatibleWith(returnType))
1:1de8e39:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:1de8e39: 
1:1de8e39:         return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:1de8e39:     }
1:1de8e39: 
1:44fa12e:     @Override
1:44fa12e:     public String toString()
1:44fa12e:     {
1:44fa12e:         StringBuilder sb = new StringBuilder();
1:44fa12e:         sb.append(name).append(" : (");
1:44fa12e:         for (int i = 0; i < argTypes.size(); i++)
1:31e669a:         {
1:44fa12e:             if (i > 0)
1:44fa12e:                 sb.append(", ");
1:44fa12e:             sb.append(argTypes.get(i).asCQL3Type());
1:44fa12e:         }
1:44fa12e:         sb.append(") -> ").append(returnType.asCQL3Type());
1:44fa12e:         return sb.toString();
1:31e669a:     }
1:269c5d4: 
1:269c5d4:     @Override
1:269c5d4:     public String columnName(List<String> columnNames)
1:269c5d4:     {
1:269c5d4:         return new StrBuilder(name().toString()).append('(')
1:269c5d4:                                                 .appendWithSeparators(columnNames, ", ")
1:269c5d4:                                                 .append(')')
1:269c5d4:                                                 .toString();
1:269c5d4:     }
1:31e669a: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
1:         functions.add(this);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1:         if (receiver.type.isFreezable() && !receiver.type.isMultiCell())
author:blerer
-------------------------------------------------------------------------------
commit:269c5d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.text.StrBuilder;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String columnName(List<String> columnNames)
1:     {
1:         return new StrBuilder(name().toString()).append('(')
1:                                                 .appendWithSeparators(columnNames, ", ")
1:                                                 .append(')')
1:                                                 .toString();
1:     }
commit:1de8e39
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.AssignmentTestable;
1: import org.apache.cassandra.cql3.ColumnSpecification;
/////////////////////////////////////////////////////////////////////////
1:     public final AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:     {
1:         // We should ignore the fact that the receiver type is frozen in our comparison as functions do not support
1:         // frozen types for return type
1:         AbstractType<?> returnType = returnType();
0:         if (receiver.type.isFrozenCollection())
1:             returnType = returnType.freeze();
1: 
1:         if (receiver.type.equals(returnType))
1:             return AssignmentTestable.TestResult.EXACT_MATCH;
1: 
1:         if (receiver.type.isValueCompatibleWith(returnType))
1:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1: 
1:         return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:     }
1: 
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.ImmutableSet;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions()
1:     {
0:         return ImmutableSet.<Function>of(this);
1:     }
1: 
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e2f35c7
/////////////////////////////////////////////////////////////////////////
0:     public boolean usesFunction(String ksName, String functionName)
1:     {
0:         return name.keyspace.equals(ksName) && name.name.equals(functionName);
1:     }
1: 
1:     public boolean hasReferenceTo(Function function)
1:     {
1:         return false;
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Objects;
1: 
1: /**
1:  * Base class for our native/hardcoded functions.
1:  */
1:     protected final FunctionName name;
1:     protected final List<AbstractType<?>> argTypes;
1:     protected final AbstractType<?> returnType;
1:     protected AbstractFunction(FunctionName name, List<AbstractType<?>> argTypes, AbstractType<?> returnType)
1:         this.argTypes = argTypes;
1:     public FunctionName name()
1:     public List<AbstractType<?>> argTypes()
1:         return argTypes;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean equals(Object o)
1:         if (!(o instanceof AbstractFunction))
1:             return false;
1: 
1:         AbstractFunction that = (AbstractFunction)o;
1:         return Objects.equal(this.name, that.name)
1:             && Objects.equal(this.argTypes, that.argTypes)
1:             && Objects.equal(this.returnType, that.returnType);
1:     @Override
1:     public int hashCode()
1:         return Objects.hashCode(name, argTypes, returnType);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(name).append(" : (");
1:         for (int i = 0; i < argTypes.size(); i++)
1:             if (i > 0)
1:                 sb.append(", ");
1:             sb.append(argTypes.get(i).asCQL3Type());
1:         }
1:         sb.append(") -> ").append(returnType.asCQL3Type());
1:         return sb.toString();
commit:b853630
/////////////////////////////////////////////////////////////////////////
0:     // Most of our functions are pure, the other ones should override this
0:     public boolean isPure()
1:     {
0:         return true;
1:     }
1: 
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: public abstract class AbstractFunction implements Function
1: {
0:     public final String name;
0:     public final List<AbstractType<?>> argsType;
0:     public final AbstractType<?> returnType;
1: 
0:     protected AbstractFunction(String name, AbstractType<?> returnType, AbstractType<?>... argsType)
1:     {
1:         this.name = name;
0:         this.argsType = Arrays.asList(argsType);
1:         this.returnType = returnType;
1:     }
1: 
0:     public String name()
1:     {
1:         return name;
1:     }
1: 
0:     public List<AbstractType<?>> argsType()
1:     {
0:         return argsType;
1:     }
1: 
1:     public AbstractType<?> returnType()
1:     {
1:         return returnType;
1:     }
1: 
0:     /**
0:      * Creates a trivial factory that always return the provided function.
1:      */
0:     public static Function.Factory factory(final Function fun)
1:     {
0:         return new Function.Factory()
1:         {
0:             public Function create(String ksName, String cfName)
1:             {
0:                 return fun;
1:             }
0:         };
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
============================================================================