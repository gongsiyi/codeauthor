1:0160ad5: /*
1:0160ad5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0160ad5:  * or more contributor license agreements.  See the NOTICE file
1:0160ad5:  * distributed with this work for additional information
1:0160ad5:  * regarding copyright ownership.  The ASF licenses this file
1:0160ad5:  * to you under the Apache License, Version 2.0 (the
1:0160ad5:  * "License"); you may not use this file except in compliance
1:0160ad5:  * with the License.  You may obtain a copy of the License at
3:0160ad5:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0160ad5:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:0160ad5:  */
1:4e163c2: package org.apache.cassandra.hadoop;
1:0160ad5: 
1:4e163c2: import org.apache.hadoop.io.Writable;
1:4e163c2: import org.apache.hadoop.mapreduce.InputSplit;
11:4e163c2: 
1:4e163c2: import java.io.DataInput;
1:4e163c2: import java.io.DataOutput;
1:81b0acb: import java.io.EOFException;
1:4e163c2: import java.io.IOException;
1:43b86fe: import java.util.Arrays;
1:4e163c2: 
1:e651d55: public class ColumnFamilySplit extends InputSplit implements Writable, org.apache.hadoop.mapred.InputSplit
5:4e163c2: {
1:4e163c2:     private String startToken;
1:4e163c2:     private String endToken;
1:81209f1:     private long length;
1:4e163c2:     private String[] dataNodes;
1:533bf3f: 
1:81209f1:     @Deprecated
1:57eb17f:     public ColumnFamilySplit(String startToken, String endToken, String[] dataNodes)
1:533bf3f:     {
1:81209f1:         this(startToken, endToken, Long.MAX_VALUE, dataNodes);
1:81209f1:     }
1:81209f1: 
1:81209f1:     public ColumnFamilySplit(String startToken, String endToken, long length, String[] dataNodes)
1:81209f1:     {
1:4e163c2:         assert startToken != null;
1:4e163c2:         assert endToken != null;
1:4e163c2:         this.startToken = startToken;
1:4e163c2:         this.endToken = endToken;
1:81209f1:         this.length = length;
1:4e163c2:         this.dataNodes = dataNodes;
1:533bf3f:     }
1:f64fe14: 
1:4e163c2:     public String getStartToken()
1:f64fe14:     {
1:4e163c2:         return startToken;
1:f64fe14:     }
1:f64fe14: 
1:4e163c2:     public String getEndToken()
1:4e163c2:     {
1:4e163c2:         return endToken;
6:4e163c2:     }
1:4e163c2: 
1:4e163c2:     // getLength and getLocations satisfy the InputSplit abstraction
1:4e163c2: 
1:4e163c2:     public long getLength()
1:4e163c2:     {
1:81209f1:         return length;
1:4e163c2:     }
1:4e163c2: 
1:4e163c2:     public String[] getLocations()
1:4e163c2:     {
1:4e163c2:         return dataNodes;
1:4e163c2:     }
1:4e163c2: 
1:4e163c2:     // This should only be used by KeyspaceSplit.read();
1:4e163c2:     protected ColumnFamilySplit() {}
1:f64fe14: 
1:4e163c2:     // These three methods are for serializing and deserializing
1:4e163c2:     // KeyspaceSplits as needed by the Writable interface.
1:4e163c2:     public void write(DataOutput out) throws IOException
1:4e163c2:     {
1:4e163c2:         out.writeUTF(startToken);
1:4e163c2:         out.writeUTF(endToken);
1:4e163c2:         out.writeInt(dataNodes.length);
1:18b2a16:         for (String endpoint : dataNodes)
1:4e163c2:         {
1:18b2a16:             out.writeUTF(endpoint);
1:4e163c2:         }
1:81b0acb:         out.writeLong(length);
1:4e163c2:     }
1:4e163c2: 
1:4e163c2:     public void readFields(DataInput in) throws IOException
1:4e163c2:     {
1:4e163c2:         startToken = in.readUTF();
1:4e163c2:         endToken = in.readUTF();
1:18b2a16:         int numOfEndpoints = in.readInt();
1:18b2a16:         dataNodes = new String[numOfEndpoints];
1:18b2a16:         for(int i = 0; i < numOfEndpoints; i++)
1:4e163c2:         {
1:4e163c2:             dataNodes[i] = in.readUTF();
1:4e163c2:         }
1:81b0acb:         try
1:81b0acb:         {
1:81b0acb:             length = in.readLong();
1:81b0acb:         }
1:81b0acb:         catch (EOFException e)
1:81b0acb:         {
1:81b0acb:             //We must be deserializing in a mixed-version cluster.
1:81b0acb:         }
1:4e163c2:     }
1:43b86fe: 
1:43b86fe:     @Override
1:43b86fe:     public String toString()
1:43b86fe:     {
1:a3fe297:         return "ColumnFamilySplit(" +
1:a3fe297:                "(" + startToken
1:a3fe297:                + ", '" + endToken + ']'
1:a3fe297:                + " @" + (dataNodes == null ? null : Arrays.asList(dataNodes)) + ')';
1:43b86fe:     }
1:43b86fe: 
1:4e163c2:     public static ColumnFamilySplit read(DataInput in) throws IOException
1:4e163c2:     {
1:4e163c2:         ColumnFamilySplit w = new ColumnFamilySplit();
1:4e163c2:         w.readFields(in);
1:4e163c2:         return w;
1:0160ad5:     }
1:4e163c2: }
============================================================================
author:Philip Thompson
-------------------------------------------------------------------------------
commit:81b0acb
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
1:         out.writeLong(length);
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:             length = in.readLong();
1:         }
1:         catch (EOFException e)
1:         {
1:             //We must be deserializing in a mixed-version cluster.
1:         }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:ed4d455
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:90052d5
/////////////////////////////////////////////////////////////////////////
0: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:56e0ad1
/////////////////////////////////////////////////////////////////////////
0: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:81209f1
/////////////////////////////////////////////////////////////////////////
1:     private long length;
1:     @Deprecated
1:         this(startToken, endToken, Long.MAX_VALUE, dataNodes);
1:     }
1: 
1:     public ColumnFamilySplit(String startToken, String endToken, long length, String[] dataNodes)
1:     {
1:         this.length = length;
/////////////////////////////////////////////////////////////////////////
1:         return length;
/////////////////////////////////////////////////////////////////////////
0:         out.writeLong(length);
/////////////////////////////////////////////////////////////////////////
0:         length = in.readLong();
commit:533bf3f
/////////////////////////////////////////////////////////////////////////
0:     private long length;
0:     @Deprecated
0:         this(startToken, endToken, Long.MAX_VALUE, dataNodes);
1:     }
1: 
0:     public ColumnFamilySplit(String startToken, String endToken, long length, String[] dataNodes)
1:     {
0:         this.length = length;
/////////////////////////////////////////////////////////////////////////
0:         return length;
/////////////////////////////////////////////////////////////////////////
0:         out.writeLong(length);
/////////////////////////////////////////////////////////////////////////
0:         length = in.readLong();
commit:8cd1792
commit:a3fe297
/////////////////////////////////////////////////////////////////////////
1:         return "ColumnFamilySplit(" +
1:                "(" + startToken
1:                + ", '" + endToken + ']'
1:                + " @" + (dataNodes == null ? null : Arrays.asList(dataNodes)) + ')';
commit:ef25537
/////////////////////////////////////////////////////////////////////////
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
1:         for (String endpoint : dataNodes)
1:             out.writeUTF(endpoint);
/////////////////////////////////////////////////////////////////////////
1:         int numOfEndpoints = in.readInt();
1:         dataNodes = new String[numOfEndpoints];
1:         for(int i = 0; i < numOfEndpoints; i++)
commit:57eb17f
/////////////////////////////////////////////////////////////////////////
1:     public ColumnFamilySplit(String startToken, String endToken, String[] dataNodes)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0160ad5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: }
commit:43b86fe
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return "ColumnFamilySplit{" +
0:                "startToken='" + startToken + '\'' +
0:                ", endToken='" + endToken + '\'' +
0:                ", table='" + table + '\'' +
0:                ", columnFamily='" + columnFamily + '\'' +
0:                ", dataNodes=" + (dataNodes == null ? null : Arrays.asList(dataNodes)) +
0:                ", predicate=" + predicate +
0:                '}';
1:     }
1: 
commit:f64fe14
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.thrift.SlicePredicate;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.thrift.TDeserializer;
0: import org.apache.thrift.TSerializer;
0: import org.apache.thrift.protocol.TBinaryProtocol;
/////////////////////////////////////////////////////////////////////////
0:     private SlicePredicate predicate;
0:     public ColumnFamilySplit(String table, String columnFamily, SlicePredicate predicate, String startToken, String endToken, String[] dataNodes)
0:         this.predicate = predicate;
/////////////////////////////////////////////////////////////////////////
0:     public SlicePredicate getPredicate()
1:     {
0:         return predicate;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final TSerializer tSerializer = new TSerializer(new TBinaryProtocol.Factory());
0:     private static final TDeserializer tDeserializer = new TDeserializer(new TBinaryProtocol.Factory());
1: 
/////////////////////////////////////////////////////////////////////////
0:         FBUtilities.serialize(tSerializer, predicate, out);
/////////////////////////////////////////////////////////////////////////
1: 
0:         predicate = new SlicePredicate();
0:         FBUtilities.deserialize(tDeserializer, predicate, in);
commit:4e163c2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.hadoop;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.mapreduce.InputSplit;
1: 
0: public class ColumnFamilySplit extends InputSplit implements Writable
1: {
1:     private String startToken;
1:     private String endToken;
0:     private String table;
0:     private String columnFamily;
1:     private String[] dataNodes;
1: 
0:     public ColumnFamilySplit(String table, String columnFamily, String startToken, String endToken, String[] dataNodes)
1:     {
1:         assert startToken != null;
1:         assert endToken != null;
1:         this.startToken = startToken;
1:         this.endToken = endToken;
0:         this.columnFamily = columnFamily;
0:         this.table = table;
1:         this.dataNodes = dataNodes;
1:     }
1: 
1:     public String getStartToken()
1:     {
1:         return startToken;
1:     }
1: 
1:     public String getEndToken()
1:     {
1:         return endToken;
1:     }
1: 
0:     public String getTable()
1:     {
0:         return table;
1:     }
1: 
0:     public String getColumnFamily()
1:     {
0:         return columnFamily;
1:     }
1: 
1:     // getLength and getLocations satisfy the InputSplit abstraction
1:     
1:     public long getLength()
1:     {
0:         // only used for sorting splits. we don't have the capability, yet.
0:         return 0;
1:     }
1: 
1:     public String[] getLocations()
1:     {
1:         return dataNodes;
1:     }
1: 
1:     // This should only be used by KeyspaceSplit.read();
1:     protected ColumnFamilySplit() {}
1: 
1:     // These three methods are for serializing and deserializing
1:     // KeyspaceSplits as needed by the Writable interface.
1:     public void write(DataOutput out) throws IOException
1:     {
0:         out.writeUTF(table);
0:         out.writeUTF(columnFamily);
1:         out.writeUTF(startToken);
1:         out.writeUTF(endToken);
1: 
1:         out.writeInt(dataNodes.length);
0:         for (String endPoint : dataNodes)
1:         {
0:             out.writeUTF(endPoint);
1:         }
1:     }
1:     
1:     public void readFields(DataInput in) throws IOException
1:     {
0:         table = in.readUTF();
0:         columnFamily = in.readUTF();
1:         startToken = in.readUTF();
1:         endToken = in.readUTF();
1: 
0:         int numOfEndPoints = in.readInt();
0:         dataNodes = new String[numOfEndPoints];
0:         for(int i = 0; i < numOfEndPoints; i++)
1:         {
1:             dataNodes[i] = in.readUTF();
1:         }
1:     }
1:     
1:     public static ColumnFamilySplit read(DataInput in) throws IOException
1:     {
1:         ColumnFamilySplit w = new ColumnFamilySplit();
1:         w.readFields(in);
1:         return w;
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.hadoop;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:e651d55
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.io.Writable;
0: import org.apache.hadoop.mapreduce.InputSplit;
0: 
1: public class ColumnFamilySplit extends InputSplit implements Writable, org.apache.hadoop.mapred.InputSplit
commit:cf25169
/////////////////////////////////////////////////////////////////////////
0:         return Long.MAX_VALUE;
============================================================================