1:7536429: package org.apache.cassandra.stress.settings;
1:7536429: /*
1:89f275c:  *
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:89f275c:  *
1:7536429:  */
1:7536429: 
1:7536429: 
1:7536429: import java.util.ArrayList;
1:73b2dcc: import java.util.Arrays;
1:7536429: import java.util.Collections;
1:7536429: import java.util.List;
1:7536429: 
1:e73633c: import org.apache.cassandra.stress.StressAction.MeasurementSink;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:0580fb2: import org.apache.cassandra.stress.generate.SeedManager;
1:7536429: import org.apache.cassandra.stress.generate.values.Bytes;
1:7536429: import org.apache.cassandra.stress.generate.values.Generator;
1:7536429: import org.apache.cassandra.stress.generate.values.GeneratorConfig;
1:7536429: import org.apache.cassandra.stress.generate.values.HexBytes;
1:7536429: import org.apache.cassandra.stress.operations.FixedOpDistribution;
1:7536429: import org.apache.cassandra.stress.operations.OpDistribution;
1:7536429: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1:7536429: import org.apache.cassandra.stress.operations.predefined.PredefinedOperation;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:7536429: 
1:7536429: // Settings unique to the mixed command type
1:7536429: public class SettingsCommandPreDefined extends SettingsCommand
1:7536429: {
1:7536429: 
1:7536429:     public final DistributionFactory add;
1:0580fb2:     public final int keySize;
1:938faa2:     public final Options options;
1:7536429: 
1:7536429:     public OpDistributionFactory getFactory(final StressSettings settings)
1:7536429:     {
1:0580fb2:         final SeedManager seeds = new SeedManager(settings);
1:7536429:         return new OpDistributionFactory()
1:7536429:         {
1:e73633c:             public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:7536429:             {
1:e73633c:                 final Timer timer1 = new Timer(type.toString(), sink);
1:e73633c:                 final Timer timer = timer1;
1:e73633c:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timer,
1:6bbfb55:                                                newGenerator(settings), seeds, settings, add));
1:7536429:             }
1:7536429: 
1:7536429:             public String desc()
1:7536429:             {
1:7536429:                 return type.toString();
1:7536429:             }
1:7536429: 
1:7536429:             public Iterable<OpDistributionFactory> each()
1:7536429:             {
1:7536429:                 return Collections.<OpDistributionFactory>singleton(this);
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:7536429: 
1:6c579a0:     PartitionGenerator newGenerator(StressSettings settings)
1:7536429:     {
1:7536429:         List<String> names = settings.columns.namestrs;
1:7536429:         List<Generator> partitionKey = Collections.<Generator>singletonList(new HexBytes("key",
1:7536429:                                        new GeneratorConfig("randomstrkey", null,
1:0580fb2:                                                            OptionDistribution.get("fixed(" + keySize + ")"), null)));
1:7536429: 
1:7536429:         List<Generator> columns = new ArrayList<>();
1:7536429:         for (int i = 0 ; i < settings.columns.maxColumnsPerKey ; i++)
1:7536429:             columns.add(new Bytes(names.get(i), new GeneratorConfig("randomstr" + names.get(i), null, settings.columns.sizeDistribution, null)));
1:6c579a0:         return new PartitionGenerator(partitionKey, Collections.<Generator>emptyList(), columns, PartitionGenerator.Order.ARBITRARY);
1:7536429:     }
1:7536429: 
1:7536429:     public SettingsCommandPreDefined(Command type, Options options)
1:7536429:     {
1:7536429:         super(type, options.parent);
1:938faa2:         this.options = options;
1:7536429:         add = options.add.get();
1:0580fb2:         keySize = Integer.parseInt(options.keysize.value());
1:7536429:     }
1:7536429: 
1:7536429:     // Option Declarations
1:7536429: 
1:7536429:     static class Options extends GroupedOptions
1:7536429:     {
1:7536429:         final SettingsCommand.Options parent;
1:7536429:         protected Options(SettingsCommand.Options parent)
1:7536429:         {
1:7536429:             this.parent = parent;
1:7536429:         }
1:7536429:         final OptionDistribution add = new OptionDistribution("add=", "fixed(1)", "Distribution of value of counter increments");
1:0580fb2:         final OptionSimple keysize = new OptionSimple("keysize=", "[0-9]+", "10", "Key size in bytes", false);
1:7536429: 
1:7536429:         @Override
1:7536429:         public List<? extends Option> options()
1:7536429:         {
1:73b2dcc:             return merge(parent.options(), Arrays.asList(add, keysize));
1:7536429:         }
1:7536429: 
1:7536429:     }
1:7536429: 
1:6bbfb55:     public void truncateTables(StressSettings settings)
1:6bbfb55:     {
1:6bbfb55:         truncateTables(settings, settings.schema.keyspace, "standard1", "counter1", "counter3");
1:6bbfb55:     }
1:6bbfb55: 
1:7536429:     // CLI utility methods
1:7536429: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         super.printSettings(out);
1:938faa2:         out.printf("  Key Size (bytes): %d%n", keySize);
1:938faa2:         out.printf("  Counter Increment Distibution: %s%n", options.add.getOptionAsString());
1:938faa2:     }
1:938faa2: 
1:7536429:     public static SettingsCommandPreDefined build(Command type, String[] params)
1:7536429:     {
1:7536429:         GroupedOptions options = GroupedOptions.select(params,
1:7536429:                 new Options(new Uncertainty()),
1:530c9f5:                 new Options(new Count()),
1:530c9f5:                 new Options(new Duration()));
1:7536429:         if (options == null)
1:7536429:         {
1:7536429:             printHelp(type);
1:7536429:             System.out.println("Invalid " + type + " options provided, see output for valid options");
1:7536429:             System.exit(1);
1:7536429:         }
1:7536429:         return new SettingsCommandPreDefined(type, (Options) options);
1:7536429:     }
1:7536429: 
1:7536429:     static void printHelp(Command type)
1:7536429:     {
1:7536429:         printHelp(type.toString().toLowerCase());
1:7536429:     }
1:7536429: 
1:7536429:     static void printHelp(String type)
1:7536429:     {
1:530c9f5:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count(), new Duration());
1:7536429:     }
1:7536429: 
1:7536429:     static Runnable helpPrinter(final Command type)
1:7536429:     {
1:7536429:         return new Runnable()
1:7536429:         {
1:7536429:             @Override
1:7536429:             public void run()
1:7536429:             {
1:7536429:                 printHelp(type);
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:7536429: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.StressAction.MeasurementSink;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
/////////////////////////////////////////////////////////////////////////
1:             public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:                 final Timer timer1 = new Timer(type.toString(), sink);
1:                 final Timer timer = timer1;
1:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timer,
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:             public OpDistribution get(Timing timing, boolean isWarmup)
0:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timing.newTimer(type.toString()),
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
1:     public final Options options;
/////////////////////////////////////////////////////////////////////////
1:         this.options = options;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         super.printSettings(out);
1:         out.printf("  Key Size (bytes): %d%n", keySize);
1:         out.printf("  Counter Increment Distibution: %s%n", options.add.getOptionAsString());
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
0:             public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0:             public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.Timing;
/////////////////////////////////////////////////////////////////////////
0:             public OpDistribution get(Timing timing, int sampleCount)
0:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timing.newTimer(type.toString(), sampleCount),
1:                                                newGenerator(settings), seeds, settings, add));
/////////////////////////////////////////////////////////////////////////
1:     public void truncateTables(StressSettings settings)
1:     {
1:         truncateTables(settings, settings.schema.keyspace, "standard1", "counter1", "counter3");
1:     }
1: 
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timer, newGenerator(settings), seeds, settings, add));
/////////////////////////////////////////////////////////////////////////
1:     PartitionGenerator newGenerator(StressSettings settings)
/////////////////////////////////////////////////////////////////////////
1:         return new PartitionGenerator(partitionKey, Collections.<Generator>emptyList(), columns, PartitionGenerator.Order.ARBITRARY);
commit:73b2dcc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             return merge(parent.options(), Arrays.asList(add, keysize));
commit:530c9f5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.settings.SettingsCommandPreDefinedMixed.Options;
/////////////////////////////////////////////////////////////////////////
1:                 new Options(new Count()),
1:                 new Options(new Duration()));
/////////////////////////////////////////////////////////////////////////
1:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count(), new Duration());
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.SeedManager;
/////////////////////////////////////////////////////////////////////////
1:     public final int keySize;
1:         final SeedManager seeds = new SeedManager(settings);
0:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timer, newGenerator(settings, seeds), settings, add));
/////////////////////////////////////////////////////////////////////////
0:     PartitionGenerator newGenerator(StressSettings settings, SeedManager seeds)
1:                                                            OptionDistribution.get("fixed(" + keySize + ")"), null)));
0:         return new PartitionGenerator(partitionKey, Collections.<Generator>emptyList(), columns, PartitionGenerator.Order.ARBITRARY, seeds);
1:         keySize = Integer.parseInt(options.keysize.value());
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple keysize = new OptionSimple("keysize=", "[0-9]+", "10", "Key size in bytes", false);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.generate.values.Bytes;
1: import org.apache.cassandra.stress.generate.values.Generator;
1: import org.apache.cassandra.stress.generate.values.GeneratorConfig;
1: import org.apache.cassandra.stress.generate.values.HexBytes;
1: import org.apache.cassandra.stress.operations.FixedOpDistribution;
1: import org.apache.cassandra.stress.operations.OpDistribution;
1: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1: import org.apache.cassandra.stress.operations.predefined.PredefinedOperation;
0: import org.apache.cassandra.stress.util.Timer;
1: 
1: // Settings unique to the mixed command type
1: public class SettingsCommandPreDefined extends SettingsCommand
1: {
1: 
1:     public final DistributionFactory add;
1: 
1:     public OpDistributionFactory getFactory(final StressSettings settings)
1:     {
1:         return new OpDistributionFactory()
1:         {
0:             public OpDistribution get(Timer timer)
1:             {
0:                 return new FixedOpDistribution(PredefinedOperation.operation(type, timer, newGenerator(settings), settings, add));
1:             }
1: 
1:             public String desc()
1:             {
1:                 return type.toString();
1:             }
1: 
1:             public Iterable<OpDistributionFactory> each()
1:             {
1:                 return Collections.<OpDistributionFactory>singleton(this);
1:             }
1:         };
1:     }
1: 
0:     PartitionGenerator newGenerator(StressSettings settings)
1:     {
1:         List<String> names = settings.columns.namestrs;
1:         List<Generator> partitionKey = Collections.<Generator>singletonList(new HexBytes("key",
1:                                        new GeneratorConfig("randomstrkey", null,
0:                                                            OptionDistribution.get("fixed(" + settings.keys.keySize + ")"), null)));
1: 
1:         List<Generator> columns = new ArrayList<>();
1:         for (int i = 0 ; i < settings.columns.maxColumnsPerKey ; i++)
1:             columns.add(new Bytes(names.get(i), new GeneratorConfig("randomstr" + names.get(i), null, settings.columns.sizeDistribution, null)));
0:         return new PartitionGenerator(partitionKey, Collections.<Generator>emptyList(), columns);
1:     }
1: 
1:     public SettingsCommandPreDefined(Command type, Options options)
1:     {
1:         super(type, options.parent);
1:         add = options.add.get();
1:     }
1: 
1:     // Option Declarations
1: 
1:     static class Options extends GroupedOptions
1:     {
1:         final SettingsCommand.Options parent;
1:         protected Options(SettingsCommand.Options parent)
1:         {
1:             this.parent = parent;
1:         }
1:         final OptionDistribution add = new OptionDistribution("add=", "fixed(1)", "Distribution of value of counter increments");
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             final List<Option> options = new ArrayList<>();
0:             options.addAll(parent.options());
0:             options.add(add);
0:             return options;
1:         }
1: 
1:     }
1: 
1:     // CLI utility methods
1: 
1:     public static SettingsCommandPreDefined build(Command type, String[] params)
1:     {
1:         GroupedOptions options = GroupedOptions.select(params,
1:                 new Options(new Uncertainty()),
0:                 new Options(new Count()));
1:         if (options == null)
1:         {
1:             printHelp(type);
1:             System.out.println("Invalid " + type + " options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsCommandPreDefined(type, (Options) options);
1:     }
1: 
1:     static void printHelp(Command type)
1:     {
1:         printHelp(type.toString().toLowerCase());
1:     }
1: 
1:     static void printHelp(String type)
1:     {
0:         GroupedOptions.printOptions(System.out, type.toLowerCase(), new Uncertainty(), new Count());
1:     }
1: 
1:     static Runnable helpPrinter(final Command type)
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp(type);
1:             }
1:         };
1:     }
1: }
============================================================================