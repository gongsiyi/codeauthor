1:91bdf7f: /*
1:91bdf7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:91bdf7f:  * or more contributor license agreements.  See the NOTICE file
1:91bdf7f:  * distributed with this work for additional information
1:91bdf7f:  * regarding copyright ownership.  The ASF licenses this file
1:91bdf7f:  * to you under the Apache License, Version 2.0 (the
1:91bdf7f:  * "License"); you may not use this file except in compliance
1:91bdf7f:  * with the License.  You may obtain a copy of the License at
2:91bdf7f:  *
1:91bdf7f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:91bdf7f:  *
1:91bdf7f:  * Unless required by applicable law or agreed to in writing, software
1:91bdf7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91bdf7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91bdf7f:  * See the License for the specific language governing permissions and
1:91bdf7f:  * limitations under the License.
1:91bdf7f:  */
1:91bdf7f: package org.apache.cassandra.db.marshal;
1:9f268d1: 
1:91bdf7f: import java.nio.ByteBuffer;
1:a991b64: import java.io.IOException;
1:91bdf7f: import java.util.List;
1:a991b64: import java.util.Iterator;
1:f634ac7: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:65a7088: import org.apache.cassandra.cql3.ColumnSpecification;
1:65a7088: import org.apache.cassandra.cql3.Lists;
1:65a7088: import org.apache.cassandra.cql3.Maps;
1:65a7088: import org.apache.cassandra.cql3.Sets;
1:a991b64: import org.apache.cassandra.db.rows.Cell;
1:a991b64: import org.apache.cassandra.db.rows.CellPath;
1:2457599: import org.apache.cassandra.io.util.DataInputPlus;
1:a991b64: import org.apache.cassandra.io.util.DataOutputPlus;
1:9872b74: import org.apache.cassandra.serializers.CollectionSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:91bdf7f: import org.apache.cassandra.utils.ByteBufferUtil;
1:65a7088: 
1:91bdf7f: /**
1:ee55f36:  * The abstract validator that is the base for maps, sets and lists (both frozen and non-frozen).
1:91bdf7f:  *
1:91bdf7f:  * Please note that this comparator shouldn't be used "manually" (through thrift for instance).
1:91bdf7f:  */
1:5e5fbc6: public abstract class CollectionType<T> extends AbstractType<T>
12:91bdf7f: {
1:a991b64:     public static CellPath.Serializer cellPathSerializer = new CollectionPathSerializer();
1:a991b64: 
1:91bdf7f:     public enum Kind
1:91bdf7f:     {
1:65a7088:         MAP
1:65a7088:         {
1:65a7088:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:65a7088:             {
1:65a7088:                 return isKey ? Maps.keySpecOf(collection) : Maps.valueSpecOf(collection);
1:65a7088:             }
1:65a7088:         },
1:65a7088:         SET
1:65a7088:         {
1:65a7088:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:65a7088:             {
1:65a7088:                 return Sets.valueSpecOf(collection);
1:65a7088:             }
1:65a7088:         },
1:65a7088:         LIST
1:65a7088:         {
1:65a7088:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:65a7088:             {
1:65a7088:                 return Lists.valueSpecOf(collection);
1:65a7088:             }
1:65a7088:         };
1:ee55f36: 
1:65a7088:         public abstract ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey);
1:f634ac7:     }
1:65a7088: 
1:91bdf7f:     public final Kind kind;
1:f634ac7: 
1:07594ee:     protected CollectionType(ComparisonType comparisonType, Kind kind)
1:f634ac7:     {
1:07594ee:         super(comparisonType);
1:91bdf7f:         this.kind = kind;
1:9f268d1:     }
1:f634ac7: 
1:2b62df2:     public abstract AbstractType<?> nameComparator();
1:2b62df2:     public abstract AbstractType<?> valueComparator();
1:f634ac7: 
1:a991b64:     protected abstract List<ByteBuffer> serializedValues(Iterator<Cell> cells);
1:a991b64: 
1:e30f111:     @Override
1:9b539f9:     public abstract CollectionSerializer<T> getSerializer();
1:e30f111: 
1:65a7088:     public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:65a7088:     {
1:65a7088:         return kind.makeCollectionReceiver(collection, isKey);
1:65a7088:     }
1:65a7088: 
1:91bdf7f:     public String getString(ByteBuffer bytes)
1:e30f111:     {
1:91bdf7f:         return BytesType.instance.getString(bytes);
1:31e669a:     }
1:e30f111: 
1:91bdf7f:     public ByteBuffer fromString(String source)
1:9f268d1:     {
1:91bdf7f:         try
1:31e669a:         {
1:91bdf7f:             return ByteBufferUtil.hexToBytes(source);
12:91bdf7f:         }
1:91bdf7f:         catch (NumberFormatException e)
1:91bdf7f:         {
1:91bdf7f:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
1:91bdf7f:         }
1:91bdf7f:     }
1:e30f111: 
1:2b62df2:     public boolean isCollection()
1:2b62df2:     {
1:e30f111:         return true;
1:2b62df2:     }
1:f634ac7: 
1:ee55f36:     @Override
1:ee55f36:     public void validateCellValue(ByteBuffer cellValue) throws MarshalException
1:ee55f36:     {
1:ee55f36:         if (isMultiCell())
1:df65a6c:             valueComparator().validateCellValue(cellValue);
1:ee55f36:         else
1:ee55f36:             super.validateCellValue(cellValue);
1:ee55f36:     }
1:ee55f36: 
1:52a701f:     /**
1:52a701f:      * Checks if this collection is Map.
1:52a701f:      * @return <code>true</code> if this collection is a Map, <code>false</code> otherwise.
1:52a701f:      */
1:52a701f:     public boolean isMap()
1:52a701f:     {
1:52a701f:         return kind == Kind.MAP;
1:52a701f:     }
1:52a701f: 
1:677230d:     @Override
1:677230d:     public boolean isFreezable()
1:677230d:     {
1:677230d:         return true;
1:677230d:     }
1:677230d: 
1:a991b64:     // Overrided by maps
1:a991b64:     protected int collectionSize(List<ByteBuffer> values)
1:a991b64:     {
1:a991b64:         return values.size();
1:a991b64:     }
1:a991b64: 
1:e0adc16:     public ByteBuffer serializeForNativeProtocol(Iterator<Cell> cells, ProtocolVersion version)
1:91bdf7f:     {
1:ee55f36:         assert isMultiCell();
1:9872b74:         List<ByteBuffer> values = serializedValues(cells);
1:8439e74:         int size = collectionSize(values);
1:a991b64:         return CollectionSerializer.pack(values, size, version);
1:91bdf7f:     }
1:ee55f36: 
1:ee55f36:     @Override
1:ee55f36:     public boolean isCompatibleWith(AbstractType<?> previous)
1:ee55f36:     {
1:ee55f36:         if (this == previous)
1:ee55f36:             return true;
1:ee55f36: 
1:ee55f36:         if (!getClass().equals(previous.getClass()))
1:ee55f36:             return false;
1:ee55f36: 
1:ee55f36:         CollectionType tprev = (CollectionType) previous;
1:ee55f36:         if (this.isMultiCell() != tprev.isMultiCell())
1:ee55f36:             return false;
1:ee55f36: 
1:ee55f36:         // subclasses should handle compatibility checks for frozen collections
1:ee55f36:         if (!this.isMultiCell())
1:ee55f36:             return isCompatibleWithFrozen(tprev);
1:ee55f36: 
1:ee55f36:         if (!this.nameComparator().isCompatibleWith(tprev.nameComparator()))
1:ee55f36:             return false;
1:ee55f36: 
1:ee55f36:         // the value comparator is only used for Cell values, so sorting doesn't matter
1:ee55f36:         return this.valueComparator().isValueCompatibleWith(tprev.valueComparator());
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:ee55f36:     public boolean isValueCompatibleWithInternal(AbstractType<?> previous)
1:ee55f36:     {
1:ee55f36:         // for multi-cell collections, compatibility and value-compatibility are the same
1:ee55f36:         if (this.isMultiCell())
1:ee55f36:             return isCompatibleWith(previous);
1:ee55f36: 
1:ee55f36:         if (this == previous)
1:ee55f36:             return true;
1:ee55f36: 
1:ee55f36:         if (!getClass().equals(previous.getClass()))
1:ee55f36:             return false;
1:ee55f36: 
1:ee55f36:         CollectionType tprev = (CollectionType) previous;
1:ee55f36:         if (this.isMultiCell() != tprev.isMultiCell())
1:ee55f36:             return false;
1:ee55f36: 
1:ee55f36:         // subclasses should handle compatibility checks for frozen collections
1:ee55f36:         return isValueCompatibleWithFrozen(tprev);
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     /** A version of isCompatibleWith() to deal with non-multicell (frozen) collections */
1:ee55f36:     protected abstract boolean isCompatibleWithFrozen(CollectionType<?> previous);
1:ee55f36: 
1:ee55f36:     /** A version of isValueCompatibleWith() to deal with non-multicell (frozen) collections */
1:ee55f36:     protected abstract boolean isValueCompatibleWithFrozen(CollectionType<?> previous);
1:ee55f36: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return new CQL3Type.Collection(this);
1:e30f111:     }
1:ee55f36: 
1:ee55f36:     @Override
1:677230d:     public boolean equals(Object o, boolean ignoreFreezing)
1:677230d:     {
1:677230d:         if (this == o)
1:677230d:             return true;
1:677230d: 
1:677230d:         if (!(o instanceof CollectionType))
1:677230d:             return false;
1:677230d: 
1:677230d:         CollectionType other = (CollectionType)o;
1:677230d: 
1:677230d:         if (kind != other.kind)
1:677230d:             return false;
1:677230d: 
1:677230d:         if (!ignoreFreezing && isMultiCell() != other.isMultiCell())
1:677230d:             return false;
1:677230d: 
1:677230d:         return nameComparator().equals(other.nameComparator(), ignoreFreezing) &&
1:677230d:                valueComparator().equals(other.valueComparator(), ignoreFreezing);
1:677230d:     }
1:677230d: 
1:677230d:     @Override
1:ee55f36:     public String toString()
1:ee55f36:     {
1:ee55f36:         return this.toString(false);
1:ee55f36:     }
1:a991b64: 
1:a991b64:     private static class CollectionPathSerializer implements CellPath.Serializer
1:a991b64:     {
1:a991b64:         public void serialize(CellPath path, DataOutputPlus out) throws IOException
1:a991b64:         {
1:2457599:             ByteBufferUtil.writeWithVIntLength(path.get(0), out);
1:a991b64:         }
1:a991b64: 
1:2457599:         public CellPath deserialize(DataInputPlus in) throws IOException
1:a991b64:         {
1:2457599:             return CellPath.create(ByteBufferUtil.readWithVIntLength(in));
1:a991b64:         }
1:a991b64: 
1:03f72ac:         public long serializedSize(CellPath path)
1:a991b64:         {
1:2457599:             return ByteBufferUtil.serializedSizeWithVIntLength(path.get(0));
1:a991b64:         }
1:a991b64: 
1:2457599:         public void skip(DataInputPlus in) throws IOException
1:a991b64:         {
1:2457599:             ByteBufferUtil.skipWithVIntLength(in);
1:a991b64:         }
1:a991b64:     }
1:a67f779: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer serializeForNativeProtocol(Iterator<Cell> cells, ProtocolVersion version)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isFreezable()
1:     {
1:         return true;
1:     }
1: 
0:     public ByteBuffer serializeForNativeProtocol(Iterator<Cell> cells, int version)
/////////////////////////////////////////////////////////////////////////
1:     public boolean equals(Object o, boolean ignoreFreezing)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof CollectionType))
1:             return false;
1: 
1:         CollectionType other = (CollectionType)o;
1: 
1:         if (kind != other.kind)
1:             return false;
1: 
1:         if (!ignoreFreezing && isMultiCell() != other.isMultiCell())
1:             return false;
1: 
1:         return nameComparator().equals(other.nameComparator(), ignoreFreezing) &&
1:                valueComparator().equals(other.valueComparator(), ignoreFreezing);
1:     }
1: 
1:     @Override
commit:1f23bb4
commit:d8b79d5
commit:15235ee
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.CFDefinition;
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer serialize(CFDefinition.Name name, List<Pair<ByteBuffer, Column>> columns);
/////////////////////////////////////////////////////////////////////////
0:     protected List<Pair<ByteBuffer, Column>> enforceLimit(CFDefinition.Name name, List<Pair<ByteBuffer, Column>> columns)
0:         logger.error("Detected collection for table {}.{} with {} elements, more than the {} limit. Only the first {}"
0:                      + "elements will be returned to the client. Please see "
0:                      + "http://cassandra.apache.org/doc/cql3/CQL.html#collections for more details.",
0:                      name.ksName, name.cfName, columns.size(), MAX_ELEMENTS, MAX_ELEMENTS);
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Cell;
0: import org.apache.cassandra.transport.Server;
1:  * The abstract validator that is the base for maps, sets and lists (both frozen and non-frozen).
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void validateCellValue(ByteBuffer cellValue) throws MarshalException
1:     {
1:         if (isMultiCell())
0:             valueComparator().validate(cellValue);
1:         else
1:             super.validateCellValue(cellValue);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public List<Cell> enforceLimit(List<Cell> cells, int version)
1:         assert isMultiCell();
1: 
0:         if (version >= Server.VERSION_3 || cells.size() <= MAX_ELEMENTS)
/////////////////////////////////////////////////////////////////////////
0:     public abstract List<ByteBuffer> serializedValues(List<Cell> cells);
1: 
0:         assert isMultiCell();
1:     @Override
1:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
1:         if (this == previous)
1:             return true;
1: 
1:         if (!getClass().equals(previous.getClass()))
1:             return false;
1: 
1:         CollectionType tprev = (CollectionType) previous;
1:         if (this.isMultiCell() != tprev.isMultiCell())
1:             return false;
1: 
1:         // subclasses should handle compatibility checks for frozen collections
1:         if (!this.isMultiCell())
1:             return isCompatibleWithFrozen(tprev);
1: 
1:         if (!this.nameComparator().isCompatibleWith(tprev.nameComparator()))
1:             return false;
1: 
1:         // the value comparator is only used for Cell values, so sorting doesn't matter
1:         return this.valueComparator().isValueCompatibleWith(tprev.valueComparator());
1:     }
1: 
1:     @Override
1:     public boolean isValueCompatibleWithInternal(AbstractType<?> previous)
1:     {
1:         // for multi-cell collections, compatibility and value-compatibility are the same
1:         if (this.isMultiCell())
1:             return isCompatibleWith(previous);
1: 
1:         if (this == previous)
1:             return true;
1: 
1:         if (!getClass().equals(previous.getClass()))
1:             return false;
1: 
1:         CollectionType tprev = (CollectionType) previous;
1:         if (this.isMultiCell() != tprev.isMultiCell())
1:             return false;
1: 
1:         // subclasses should handle compatibility checks for frozen collections
1:         return isValueCompatibleWithFrozen(tprev);
1:     }
1: 
1:     /** A version of isCompatibleWith() to deal with non-multicell (frozen) collections */
1:     protected abstract boolean isCompatibleWithFrozen(CollectionType<?> previous);
1: 
1:     /** A version of isValueCompatibleWith() to deal with non-multicell (frozen) collections */
1:     protected abstract boolean isValueCompatibleWithFrozen(CollectionType<?> previous);
1: 
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return this.toString(false);
1:     }
author:blerer
-------------------------------------------------------------------------------
commit:8439e74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int size = collectionSize(values);
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.ColumnSpecification;
1: import org.apache.cassandra.cql3.Lists;
1: import org.apache.cassandra.cql3.Maps;
1: import org.apache.cassandra.cql3.Sets;
1: 
/////////////////////////////////////////////////////////////////////////
1:         MAP
1:         {
1:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:             {
1:                 return isKey ? Maps.keySpecOf(collection) : Maps.valueSpecOf(collection);
1:             }
1:         },
1:         SET
1:         {
1:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:             {
1:                 return Sets.valueSpecOf(collection);
1:             }
1:         },
1:         LIST
1:         {
1:             public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:             {
1:                 return Lists.valueSpecOf(collection);
1:             }
1:         };
1: 
1:         public abstract ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey);
/////////////////////////////////////////////////////////////////////////
1:     public ColumnSpecification makeCollectionReceiver(ColumnSpecification collection, boolean isKey)
1:     {
1:         return kind.makeCollectionReceiver(collection, isKey);
1:     }
1: 
commit:52a701f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Checks if this collection is Map.
1:      * @return <code>true</code> if this collection is a Map, <code>false</code> otherwise.
1:      */
1:     public boolean isMap()
1:     {
1:         return kind == Kind.MAP;
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     protected CollectionType(ComparisonType comparisonType, Kind kind)
1:         super(comparisonType);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:df65a6c
/////////////////////////////////////////////////////////////////////////
1:             valueComparator().validateCellValue(cellValue);
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:             ByteBufferUtil.writeWithVIntLength(path.get(0), out);
1:         public CellPath deserialize(DataInputPlus in) throws IOException
1:             return CellPath.create(ByteBufferUtil.readWithVIntLength(in));
1:             return ByteBufferUtil.serializedSizeWithVIntLength(path.get(0));
1:         public void skip(DataInputPlus in) throws IOException
1:             ByteBufferUtil.skipWithVIntLength(in);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.util.Iterator;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.io.util.DataOutputPlus;
0: import org.apache.cassandra.io.util.FileUtils;
0: import org.apache.cassandra.transport.Server;
/////////////////////////////////////////////////////////////////////////
1:     public static CellPath.Serializer cellPathSerializer = new CollectionPathSerializer();
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected abstract List<ByteBuffer> serializedValues(Iterator<Cell> cells);
1: 
/////////////////////////////////////////////////////////////////////////
1:     // Overrided by maps
1:     protected int collectionSize(List<ByteBuffer> values)
1:     {
1:         return values.size();
1:     }
1: 
0:     protected int enforceLimit(ColumnDefinition def, List<ByteBuffer> values, int version)
0:         int size = collectionSize(values);
0:         if (version >= Server.VERSION_3 || size <= MAX_ELEMENTS)
0:             return size;
0:                      def.ksName, def.cfName, values.size(), MAX_ELEMENTS, MAX_ELEMENTS);
0:         return MAX_ELEMENTS;
0:     public ByteBuffer serializeForNativeProtocol(ColumnDefinition def, Iterator<Cell> cells, int version)
0:         int size = enforceLimit(def, values, version);
1:         return CollectionSerializer.pack(values, size, version);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static class CollectionPathSerializer implements CellPath.Serializer
1:     {
1:         public void serialize(CellPath path, DataOutputPlus out) throws IOException
1:         {
0:             ByteBufferUtil.writeWithLength(path.get(0), out);
1:         }
1: 
0:         public CellPath deserialize(DataInput in) throws IOException
1:         {
0:             return CellPath.create(ByteBufferUtil.readWithLength(in));
1:         }
1: 
0:         public long serializedSize(CellPath path, TypeSizes sizes)
1:         {
0:             return sizes.sizeofWithLength(path.get(0));
1:         }
1: 
0:         public void skip(DataInput in) throws IOException
1:         {
0:             int length = in.readInt();
0:             FileUtils.skipBytesFully(in, length);
1:         }
1:     }
commit:590b3b2
/////////////////////////////////////////////////////////////////////////
commit:9d06ea6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.CollectionSerializer;
/////////////////////////////////////////////////////////////////////////
0:     public abstract List<ByteBuffer> serializedValues(List<Cell> cells);
/////////////////////////////////////////////////////////////////////////
0:     protected List<Cell> enforceLimit(List<Cell> cells, int version)
0:         if (version >= 3 || cells.size() <= MAX_ELEMENTS)
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer serializeForNativeProtocol(List<Cell> cells, int version)
0:         cells = enforceLimit(cells, version);
1:         List<ByteBuffer> values = serializedValues(cells);
0:         return CollectionSerializer.pack(values, cells.size(), version);
commit:f4b9f16
/////////////////////////////////////////////////////////////////////////
commit:8a52f5a
/////////////////////////////////////////////////////////////////////////
commit:e30f111
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
0:         if (this == previous)
1:             return true;
1: 
0:         if (!getClass().equals(previous.getClass()))
0:             return false;
1: 
0:         CollectionType tprev = (CollectionType) previous;
0:         // The name is part of the Cell name, so we need sorting compatibility, i.e. isCompatibleWith().
0:         // But value is the Cell value, so isValueCompatibleWith() is enough
0:         return this.nameComparator().isCompatibleWith(tprev.nameComparator())
0:             && this.valueComparator().isValueCompatibleWith(tprev.valueComparator());
1:     }
1: 
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Cell;
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer serialize(List<Cell> cells);
/////////////////////////////////////////////////////////////////////////
0:     protected List<Cell> enforceLimit(List<Cell> cells)
0:         if (cells.size() <= MAX_ELEMENTS)
0:             return cells;
0:                    + "Please see http://cassandra.apache.org/doc/cql3/CQL.html#collections for more details.", cells.size(), MAX_ELEMENTS, MAX_ELEMENTS);
0:         return cells.subList(0, MAX_ELEMENTS);
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer serialize(List<Column> columns);
/////////////////////////////////////////////////////////////////////////
0:     protected List<Column> enforceLimit(List<Column> columns)
commit:1334f94
/////////////////////////////////////////////////////////////////////////
0:     protected List<Pair<ByteBuffer, Column>> enforceLimit(List<Pair<ByteBuffer, Column>> columns)
commit:b2da839
commit:f634ac7
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger = LoggerFactory.getLogger(CollectionType.class);
1: 
0:     public static final int MAX_ELEMENTS = 65535;
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected List<Pair<ByteBuffer, IColumn>> enforceLimit(List<Pair<ByteBuffer, IColumn>> columns)
1:     {
0:         if (columns.size() <= MAX_ELEMENTS)
0:             return columns;
1: 
0:         logger.error("Detected collection with {} elements, more than the {} limit. Only the first {} elements will be returned to the client. "
0:                    + "Please see http://cassandra.apache.org/doc/cql3/CQL.html#collections for more details.", columns.size(), MAX_ELEMENTS, MAX_ELEMENTS);
0:         return columns.subList(0, MAX_ELEMENTS);
1:     }
1: 
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.MarshalException;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.MarshalException;
commit:c47f407
commit:9f268d1
/////////////////////////////////////////////////////////////////////////
0:     protected static int getUnsignedShort(ByteBuffer bb)
1:     {
0:         int length = (bb.get() & 0xFF) << 8;
0:         return length | (bb.get() & 0xFF);
1:     }
1: 
commit:aae62a7
commit:31e669a
/////////////////////////////////////////////////////////////////////////
0:     protected static ByteBuffer pack(List<ByteBuffer> buffers, int elements, int size)
/////////////////////////////////////////////////////////////////////////
0:     public static ByteBuffer pack(List<ByteBuffer> buffers, int elements)
1:     {
0:         int size = 0;
0:         for (ByteBuffer bb : buffers)
0:             size += 2 + bb.remaining();
0:         return pack(buffers, elements, size);
1:     }
commit:d66630d
commit:a67f779
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.CQL3Type;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return new CQL3Type.Collection(this);
1:     }
commit:3a005df
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Column;
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer serialize(List<Pair<ByteBuffer, Column>> columns);
commit:2b62df2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public abstract AbstractType<?> nameComparator();
1:     public abstract AbstractType<?> valueComparator();
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isCollection()
1:     {
0:         return true;
1:     }
commit:91bdf7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
0: 
1: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import java.util.EnumSet;
1: import java.util.List;
0: 
0: import org.apache.cassandra.cql3.ColumnNameBuilder;
0: import org.apache.cassandra.cql3.Term;
0: import org.apache.cassandra.cql3.UpdateParameters;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.IColumn;
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.thrift.InvalidRequestException;
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.Pair;
0: 
1: /**
0:  * The abstract validator that is the base for maps, sets and lists.
1:  *
1:  * Please note that this comparator shouldn't be used "manually" (through thrift for instance).
1:  *
1:  */
0: public abstract class CollectionType extends AbstractType<ByteBuffer>
1: {
1:     public enum Kind
1:     {
0:         MAP, SET, LIST
1:     }
0: 
0:     public enum Function
1:     {
0:         APPEND       (false, Kind.LIST),
0:         PREPEND      (false, Kind.LIST),
0:         SET          ( true, Kind.LIST, Kind.MAP),
0:         ADD          (false, Kind.SET),
0:         DISCARD_LIST ( true, Kind.LIST),
0:         DISCARD_SET  (false, Kind.SET),
0:         DISCARD_KEY  ( true, Kind.LIST, Kind.MAP);
0: 
0:         public final boolean needsReading;
0:         public final EnumSet<Kind> validReceivers;
0: 
0:         private Function(boolean needsReading, Kind ... validReceivers)
1:         {
0:             this.needsReading = needsReading;
0:             this.validReceivers = EnumSet.copyOf(Arrays.asList(validReceivers));
1:         }
1:     }
0: 
1:     public final Kind kind;
0: 
0:     protected CollectionType(Kind kind)
1:     {
1:         this.kind = kind;
1:     }
0: 
0:     protected abstract AbstractType<?> nameComparator();
0:     protected abstract AbstractType<?> valueComparator();
0:     protected abstract void appendToStringBuilder(StringBuilder sb);
0: 
0:     public void execute(ColumnFamily cf, ColumnNameBuilder fullPath, Function fct, List<Term> args, UpdateParameters params) throws InvalidRequestException
1:     {
0:         if (!fct.validReceivers.contains(kind))
0:             throw new InvalidRequestException(String.format("Invalid operation %s for %s collection", fct, kind));
0: 
0:         executeFunction(cf, fullPath, fct, args, params);
1:     }
0: 
0:     public abstract void executeFunction(ColumnFamily cf, ColumnNameBuilder fullPath, Function fct, List<Term> args, UpdateParameters params) throws InvalidRequestException;
0: 
0:     public abstract ByteBuffer serializeForThrift(List<Pair<ByteBuffer, IColumn>> columns);
0: 
0:     @Override
0:     public String toString()
1:     {
0:         StringBuilder sb = new StringBuilder();
0:         appendToStringBuilder(sb);
0:         return sb.toString();
1:     }
0: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
0:         throw new UnsupportedOperationException("CollectionType should not be use directly as a comparator");
1:     }
0: 
0:     public ByteBuffer compose(ByteBuffer bytes)
1:     {
0:         return BytesType.instance.compose(bytes);
1:     }
0: 
0:     public ByteBuffer decompose(ByteBuffer value)
1:     {
0:         return BytesType.instance.decompose(value);
1:     }
0: 
1:     public String getString(ByteBuffer bytes)
1:     {
1:         return BytesType.instance.getString(bytes);
1:     }
0: 
1:     public ByteBuffer fromString(String source)
1:     {
1:         try
1:         {
1:             return ByteBufferUtil.hexToBytes(source);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             throw new MarshalException(String.format("cannot parse '%s' as hex bytes", source), e);
1:         }
1:     }
0: 
0:     public void validate(ByteBuffer bytes)
1:     {
0:         valueComparator().validate(bytes);
1:     }
1: }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(CellPath path)
0:             return TypeSizes.sizeofWithLength(path.get(0));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:110a132
/////////////////////////////////////////////////////////////////////////
0:     public void validateCellValue(ByteBuffer cellValue) throws MarshalException
0:     {
0:         valueComparator().validate(cellValue);
0:     }
0: 
0:     @Override
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9b539f9
/////////////////////////////////////////////////////////////////////////
1:     public abstract CollectionSerializer<T> getSerializer();
0: 
0:     @Override
commit:5e5fbc6
/////////////////////////////////////////////////////////////////////////
1: public abstract class CollectionType<T> extends AbstractType<T>
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer serialize(List<Pair<ByteBuffer, IColumn>> columns);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     // Utilitary method
0:     protected ByteBuffer pack(List<ByteBuffer> buffers, int elements, int size)
0:     {
0:         ByteBuffer result = ByteBuffer.allocate(2 + size);
0:         result.putShort((short)elements);
0:         for (ByteBuffer bb : buffers)
0:         {
0:             result.putShort((short)bb.remaining());
0:             result.put(bb.duplicate());
0:         }
0:         return (ByteBuffer)result.flip();
0:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
============================================================================