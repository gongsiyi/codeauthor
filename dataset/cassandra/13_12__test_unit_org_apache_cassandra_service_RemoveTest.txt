1:5a6f0b8: /**
1:79560b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:79560b6:  * or more contributor license agreements.  See the NOTICE file
1:79560b6:  * distributed with this work for additional information
1:79560b6:  * regarding copyright ownership.  The ASF licenses this file
1:79560b6:  * to you under the Apache License, Version 2.0 (the
1:79560b6:  * "License"); you may not use this file except in compliance
1:79560b6:  * with the License.  You may obtain a copy of the License at
1:79560b6:  *
1:79560b6:  *    http://www.apache.org/licenses/LICENSE-2.0
1:79560b6:  *
1:79560b6:  * Unless required by applicable law or agreed to in writing,
1:79560b6:  * software distributed under the License is distributed on an
1:79560b6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:79560b6:  * KIND, either express or implied.  See the License for the
1:79560b6:  * specific language governing permissions and limitations
1:79560b6:  * under the License.
1:5a6f0b8:  */
21:ba2cead: 
1:ba2cead: package org.apache.cassandra.service;
1:ba2cead: 
1:ba2cead: import java.io.IOException;
1:ba2cead: import java.net.InetAddress;
1:79560b6: import java.util.ArrayList;
1:3f05312: import java.util.Collection;
1:f81cc74: import java.util.Collections;
1:79560b6: import java.util.List;
1:ad685c4: import java.util.UUID;
1:ba2cead: import java.util.concurrent.atomic.AtomicBoolean;
1:ba2cead: 
1:5151169: import org.junit.*;
1:ba2cead: 
1:438acfc: import org.apache.cassandra.SchemaLoader;
1:ba2cead: import org.apache.cassandra.Util;
1:3f05312: import org.apache.cassandra.config.DatabaseDescriptor;
1:79560b6: import org.apache.cassandra.dht.IPartitioner;
1:79560b6: import org.apache.cassandra.dht.RandomPartitioner;
1:79560b6: import org.apache.cassandra.dht.Token;
1:5151169: import org.apache.cassandra.exceptions.ConfigurationException;
1:3f05312: import org.apache.cassandra.gms.ApplicationState;
1:ba2cead: import org.apache.cassandra.gms.Gossiper;
1:3f05312: import org.apache.cassandra.gms.VersionedValue.VersionedValueFactory;
1:ba2cead: import org.apache.cassandra.locator.TokenMetadata;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:ba2cead: import org.apache.cassandra.net.MessagingService;
1:ba2cead: import org.apache.cassandra.utils.FBUtilities;
1:79560b6: 
1:5151169: import static org.junit.Assert.assertEquals;
1:5151169: import static org.junit.Assert.assertTrue;
1:ba2cead: 
1:438acfc: public class RemoveTest
1:79560b6: {
1:9797511:     static
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:07893d7:     static final IPartitioner partitioner = RandomPartitioner.instance;
1:ba2cead:     StorageService ss = StorageService.instance;
1:ba2cead:     TokenMetadata tmd = ss.getTokenMetadata();
1:438acfc:     static IPartitioner oldPartitioner;
1:baf30db:     ArrayList<Token> endpointTokens = new ArrayList<Token>();
1:baf30db:     ArrayList<Token> keyTokens = new ArrayList<Token>();
1:baf30db:     List<InetAddress> hosts = new ArrayList<InetAddress>();
1:ad685c4:     List<UUID> hostIds = new ArrayList<UUID>();
1:baf30db:     InetAddress removalhost;
1:dfd0567:     UUID removalId;
1:5a6f0b8: 
1:438acfc:     @BeforeClass
1:9639f95:     public static void setupClass() throws ConfigurationException
1:5a6f0b8:     {
1:438acfc:         oldPartitioner = StorageService.instance.setPartitionerUnsafe(partitioner);
1:438acfc:         SchemaLoader.loadSchema();
1:5a6f0b8:     }
1:438acfc: 
1:438acfc:     @AfterClass
1:438acfc:     public static void tearDownClass()
1:79560b6:     {
1:438acfc:         StorageService.instance.setPartitionerUnsafe(oldPartitioner);
1:438acfc:     }
1:438acfc: 
1:ba2cead:     @Before
1:0be34ce:     public void setup() throws IOException, ConfigurationException
1:79560b6:     {
1:ba2cead:         tmd.clearUnsafe();
1:ba2cead: 
1:ba2cead:         // create a ring of 5 nodes
1:ad685c4:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 6);
1:ba2cead: 
1:94c361d:         MessagingService.instance().listen();
1:0a03819:         Gossiper.instance.start(1);
1:baf30db:         removalhost = hosts.get(5);
1:baf30db:         hosts.remove(removalhost);
1:dfd0567:         removalId = hostIds.get(5);
1:dfd0567:         hostIds.remove(removalId);
1:438acfc:     }
1:ba2cead: 
1:ba2cead:     @After
1:79560b6:     public void tearDown()
1:79560b6:     {
1:642546a:         MessagingService.instance().clearMessageSinks();
1:4f47a44:         MessagingService.instance().clearCallbacksUnsafe();
1:185eca5:         MessagingService.instance().shutdown();
11:ba2cead:     }
1:ba2cead: 
1:79560b6:     @Test(expected = UnsupportedOperationException.class)
1:dfd0567:     public void testBadHostId()
1:79560b6:     {
1:dfd0567:         ss.removeNode("ffffffff-aaaa-aaaa-aaaa-ffffffffffff");
1:ba2cead: 
1:ba2cead:     }
1:ba2cead: 
1:79560b6:     @Test(expected = UnsupportedOperationException.class)
1:dfd0567:     public void testLocalHostId()
1:79560b6:     {
1:dfd0567:         //first ID should be localhost
1:dfd0567:         ss.removeNode(hostIds.get(0).toString());
1:ba2cead:     }
1:ba2cead: 
1:3f05312:     @Test(expected = UnsupportedOperationException.class)
1:3f05312:     public void testNonmemberId()
1:3f05312:     {
1:3f05312:         VersionedValueFactory valueFactory = new VersionedValueFactory(DatabaseDescriptor.getPartitioner());
1:3f05312:         Collection<Token> tokens = Collections.singleton(DatabaseDescriptor.getPartitioner().getRandomToken());
1:3f05312: 
1:3f05312:         InetAddress joininghost = hosts.get(4);
1:3f05312:         UUID joiningId = hostIds.get(4);
1:3f05312: 
1:3f05312:         hosts.remove(joininghost);
1:3f05312:         hostIds.remove(joiningId);
1:3f05312: 
1:3f05312:         // Change a node to a bootstrapping node that is not yet a member of the ring
1:3f05312:         Gossiper.instance.injectApplicationState(joininghost, ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:3f05312:         ss.onChange(joininghost, ApplicationState.STATUS, valueFactory.bootstrapping(tokens));
1:3f05312: 
1:3f05312:         ss.removeNode(joiningId.toString());
1:3f05312:     }
1:3f05312: 
3:ba2cead:     @Test
1:dfd0567:     public void testRemoveHostId() throws InterruptedException
1:79560b6:     {
1:ba2cead:         // start removal in background and send replication confirmations
1:ba2cead:         final AtomicBoolean success = new AtomicBoolean(false);
1:79560b6:         Thread remover = new Thread()
1:79560b6:         {
1:79560b6:             public void run()
1:79560b6:             {
1:79560b6:                 try
1:438acfc:                 {
1:dfd0567:                     ss.removeNode(removalId.toString());
1:ba2cead:                 }
1:79560b6:                 catch (Exception e)
1:438acfc:                 {
1:ba2cead:                     System.err.println(e);
1:ba2cead:                     e.printStackTrace();
1:ba2cead:                     return;
1:ba2cead:                 }
1:ba2cead:                 success.set(true);
1:ba2cead:             }
1:ba2cead:         };
1:ba2cead:         remover.start();
1:ba2cead: 
1:ba2cead:         Thread.sleep(1000); // make sure removal is waiting for confirmation
1:ba2cead: 
1:baf30db:         assertTrue(tmd.isLeaving(removalhost));
2:ba2cead:         assertEquals(1, tmd.getLeavingEndpoints().size());
1:ba2cead: 
1:79560b6:         for (InetAddress host : hosts)
1:79560b6:         {
1:f81cc74:             MessageOut msg = new MessageOut(host, MessagingService.Verb.REPLICATION_FINISHED, null, null, Collections.<String, byte[]>emptyMap());
1:127c028:             MessagingService.instance().sendRR(msg, FBUtilities.getBroadcastAddress());
1:ba2cead:         }
1:ba2cead: 
1:ba2cead:         remover.join();
1:ba2cead: 
1:ba2cead:         assertTrue(success.get());
1:ba2cead:         assertTrue(tmd.getLeavingEndpoints().isEmpty());
1:ba2cead:     }
1:ba2cead: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Joel Knighton
-------------------------------------------------------------------------------
commit:3f05312
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.VersionedValue.VersionedValueFactory;
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testNonmemberId()
1:     {
1:         VersionedValueFactory valueFactory = new VersionedValueFactory(DatabaseDescriptor.getPartitioner());
1:         Collection<Token> tokens = Collections.singleton(DatabaseDescriptor.getPartitioner().getRandomToken());
1: 
1:         InetAddress joininghost = hosts.get(4);
1:         UUID joiningId = hostIds.get(4);
1: 
1:         hosts.remove(joininghost);
1:         hostIds.remove(joiningId);
1: 
1:         // Change a node to a bootstrapping node that is not yet a member of the ring
1:         Gossiper.instance.injectApplicationState(joininghost, ApplicationState.TOKENS, valueFactory.tokens(tokens));
1:         ss.onChange(joininghost, ApplicationState.STATUS, valueFactory.bootstrapping(tokens));
1: 
1:         ss.removeNode(joiningId.toString());
1:     }
1: 
author:Paulo Motta
-------------------------------------------------------------------------------
commit:94c361d
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().listen();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:642546a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().clearMessageSinks();
commit:6b3fe5e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.sink.SinkManager;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:     static final IPartitioner partitioner = RandomPartitioner.instance;
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:c6dbba1
commit:4f47a44
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().clearCallbacksUnsafe();
commit:8234bc1
commit:d4ec31f
/////////////////////////////////////////////////////////////////////////
commit:b475bc6
/////////////////////////////////////////////////////////////////////////
commit:8cf9f2d
/////////////////////////////////////////////////////////////////////////
0:                     ss.removeToken(token);
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().listen(FBUtilities.getBroadcastAddress());
/////////////////////////////////////////////////////////////////////////
1:             MessagingService.instance().sendRR(msg, FBUtilities.getBroadcastAddress());
/////////////////////////////////////////////////////////////////////////
0:                 Message response = msg.getReply(FBUtilities.getBroadcastAddress(), new byte[]{ }, msg.getVersion());
0:                 MessagingService.instance().sendReply(response, id, FBUtilities.getBroadcastAddress());
commit:0a03819
/////////////////////////////////////////////////////////////////////////
1:         Gossiper.instance.start(1);
commit:baf30db
/////////////////////////////////////////////////////////////////////////
1:     ArrayList<Token> endpointTokens = new ArrayList<Token>();
1:     ArrayList<Token> keyTokens = new ArrayList<Token>();
1:     List<InetAddress> hosts = new ArrayList<InetAddress>();
1:     InetAddress removalhost;
0:     Token removaltoken;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         removalhost = hosts.get(5);
1:         hosts.remove(removalhost);
0:         removaltoken = endpointTokens.get(5);
0:         endpointTokens.remove(removaltoken);
/////////////////////////////////////////////////////////////////////////
0:         final String token = partitioner.getTokenFactory().toString(removaltoken);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(tmd.isLeaving(removalhost));
/////////////////////////////////////////////////////////////////////////
0:                     valueFactory.removingNonlocal(endpointTokens.get(1), removaltoken));
0:         assertTrue(tmd.isLeaving(removalhost));
/////////////////////////////////////////////////////////////////////////
0:                     valueFactory.removedNonlocal(endpointTokens.get(1), removaltoken));
0:         assertFalse(Gossiper.instance.getLiveMembers().contains(removalhost));
0:         assertFalse(tmd.isMember(removalhost));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9639f95
/////////////////////////////////////////////////////////////////////////
1:     public static void setupClass() throws ConfigurationException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: import org.junit.*;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:             MessageOut msg = new MessageOut(host, MessagingService.Verb.REPLICATION_FINISHED, null, null, Collections.<String, byte[]>emptyMap());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a9bd531
/////////////////////////////////////////////////////////////////////////
0:     public static void setupClass() throws IOException, ConfigurationException
commit:1936648
/////////////////////////////////////////////////////////////////////////
0:         public MessageIn handleMessage(MessageIn msg, int id, InetAddress to)
/////////////////////////////////////////////////////////////////////////
0:         public MessageOut handleMessage(MessageOut msg, int id, InetAddress to)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0:             if (!msg.verb.equals(MessagingService.Verb.STREAM_REQUEST))
commit:021ec71
/////////////////////////////////////////////////////////////////////////
0:             MessageOut msg = new MessageOut(MessagingService.Verb.REPLICATION_FINISHED);
/////////////////////////////////////////////////////////////////////////
0:             if (!msg.getVerb().equals(MessagingService.Verb.STREAM_REQUEST))
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:         public MessageIn handleMessage(MessageIn msg, String id, InetAddress to)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
/////////////////////////////////////////////////////////////////////////
0:             // TODO how to spoof host here?
0:             MessageOut msg = new MessageOut(StorageService.Verb.REPLICATION_FINISHED);
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * sink that captures STREAM_REQUEST messages and calls finishStreamRequest on it
1:      */
/////////////////////////////////////////////////////////////////////////
1: 
0:         public MessageOut handleMessage(MessageOut msg, String id, InetAddress to)
1:         {
0:             return msg;
1:         }
commit:185eca5
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().shutdown();
commit:e3c5d5d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().waitForCallbacks();
commit:3893f24
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().clearCallbacksUnsafe();
commit:994a03c
/////////////////////////////////////////////////////////////////////////
0:                     ss.removeToken(token, 0);
commit:6bdc779
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:         public Message handleMessage(Message msg, String id, InetAddress to)
/////////////////////////////////////////////////////////////////////////
0:         public Message handleMessage(Message msg, String id, InetAddress to)
/////////////////////////////////////////////////////////////////////////
0:                 MessagingService.instance().sendReply(response, id, FBUtilities.getLocalAddress());
commit:0be34ce
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public void setup() throws IOException, ConfigurationException
commit:a043125
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().shutdown();
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().listen(FBUtilities.getLocalAddress());
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendRR(msg, FBUtilities.getLocalAddress());
/////////////////////////////////////////////////////////////////////////
0:                 MessagingService.instance().sendOneWay(response, FBUtilities.getLocalAddress());
commit:7200c81
/////////////////////////////////////////////////////////////////////////
0:         SinkManager.add(rSink);
/////////////////////////////////////////////////////////////////////////
0:         SinkManager.add(nSink);
0:         SinkManager.add(rSink);
commit:a161f9f
/////////////////////////////////////////////////////////////////////////
0:         SinkManager.clear();
/////////////////////////////////////////////////////////////////////////
0:         SinkManager.addSink(rSink);
/////////////////////////////////////////////////////////////////////////
0:         SinkManager.addSink(nSink);
0:         SinkManager.addSink(rSink);
commit:79560b6
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.RandomPartitioner;
1: import org.apache.cassandra.dht.Token;
0: import static org.junit.Assert.*;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void setup() throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < 6; i++)
1:         {
1:     public void tearDown()
1:     {
0:         MessagingService.shutdown();
1:     @Test(expected = UnsupportedOperationException.class)
0:     public void testBadToken()
1:     {
0:         final String token = StorageService.getPartitioner().getTokenFactory().toString(keyTokens.get(2));
1:     @Test(expected = UnsupportedOperationException.class)
0:     public void testLocalToken()
1:     {
0:         final String token = StorageService.getPartitioner().getTokenFactory().toString(endpointTokens.get(0));
0:         IPartitioner partitioner = StorageService.getPartitioner();
/////////////////////////////////////////////////////////////////////////
1:         Thread remover = new Thread()
1:             public void run()
1:                 try
1:                 catch (Exception e)
/////////////////////////////////////////////////////////////////////////
1:         for (InetAddress host : hosts)
1:         {
/////////////////////////////////////////////////////////////////////////
0:         IPartitioner partitioner = StorageService.getPartitioner();
/////////////////////////////////////////////////////////////////////////
0:         IPartitioner partitioner = StorageService.getPartitioner();
/////////////////////////////////////////////////////////////////////////
0:     class ReplicationSink implements IMessageSink
1:     {
0:         public Message handleMessage(Message msg, InetAddress to)
1:         {
0:             if (!msg.getVerb().equals(StorageService.Verb.STREAM_REQUEST))
/////////////////////////////////////////////////////////////////////////
0:     class NotificationSink implements IMessageSink
1:     {
0:         public Message handleMessage(Message msg, InetAddress to)
1:         {
0:             if (msg.getVerb().equals(StorageService.Verb.REPLICATION_FINISHED))
0:                 Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{ });
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.ConfigurationException;
commit:15ae2f6
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
1: import org.apache.cassandra.SchemaLoader;
/////////////////////////////////////////////////////////////////////////
1: public class RemoveTest
0:     static final IPartitioner partitioner = new RandomPartitioner();
1:     static IPartitioner oldPartitioner;
1:     @BeforeClass
0:     public static void setupClass() throws IOException
1:     {
1:         oldPartitioner = StorageService.instance.setPartitionerUnsafe(partitioner);
1:         SchemaLoader.loadSchema();
1:     }
1: 
1:     @AfterClass
1:     public static void tearDownClass()
1:     {
1:         StorageService.instance.setPartitionerUnsafe(oldPartitioner);
0:         SchemaLoader.stopGossiper();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:             Message msg = new Message(host, StorageService.Verb.REPLICATION_FINISHED, new byte[0], MessagingService.current_version);
author:Eric Evans
-------------------------------------------------------------------------------
commit:dfd0567
/////////////////////////////////////////////////////////////////////////
1:     UUID removalId;
/////////////////////////////////////////////////////////////////////////
1:         removalId = hostIds.get(5);
1:         hostIds.remove(removalId);
/////////////////////////////////////////////////////////////////////////
1:     public void testBadHostId()
1:         ss.removeNode("ffffffff-aaaa-aaaa-aaaa-ffffffffffff");
1:     public void testLocalHostId()
1:         //first ID should be localhost
1:         ss.removeNode(hostIds.get(0).toString());
1:     public void testRemoveHostId() throws InterruptedException
/////////////////////////////////////////////////////////////////////////
1:                     ss.removeNode(removalId.toString());
commit:ad685c4
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:     List<UUID> hostIds = new ArrayList<UUID>();
/////////////////////////////////////////////////////////////////////////
1:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 6);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:5d02c51
/////////////////////////////////////////////////////////////////////////
0:             Message msg = new Message(host, StorageService.Verb.REPLICATION_FINISHED, new byte[0], MessagingService.version_);
commit:6ab2b23
/////////////////////////////////////////////////////////////////////////
0:                 Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{ }, msg.getVersion());
commit:ba2cead
/////////////////////////////////////////////////////////////////////////
0: /**
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: 
1: package org.apache.cassandra.service;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
0: import java.util.*;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import static org.junit.Assert.*;
1: 
0: import org.apache.cassandra.CleanupHelper;
1: import org.apache.cassandra.Util;
0: import org.apache.cassandra.concurrent.Stage;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.dht.*;
0: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.Gossiper;
0: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.locator.AbstractReplicationStrategy;
0: import org.apache.cassandra.locator.SimpleSnitch;
1: import org.apache.cassandra.locator.TokenMetadata;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.net.sink.IMessageSink;
0: import org.apache.cassandra.net.sink.SinkManager;
0: import org.apache.cassandra.streaming.StreamUtil;
0: import org.apache.cassandra.streaming.StreamRequestVerbHandler;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class RemoveTest extends CleanupHelper
0: {
1:     StorageService ss = StorageService.instance;
1:     TokenMetadata tmd = ss.getTokenMetadata();
0:     IPartitioner oldPartitioner;
0:     ArrayList<Token> endpointTokens;
0:     ArrayList<Token> keyTokens;
0:     List<InetAddress> hosts;
1: 
1:     @Before
0:     public void setup() throws IOException {
1:         tmd.clearUnsafe();
0:         IPartitioner partitioner = new RandomPartitioner();
1: 
0:         oldPartitioner = ss.setPartitionerUnsafe(partitioner);
1: 
0:         endpointTokens = new ArrayList<Token>();
0:         keyTokens = new ArrayList<Token>();
0:         hosts = new ArrayList<InetAddress>();
1: 
1:         // create a ring of 5 nodes
0:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 6);
1: 
0:         MessagingService.instance.listen(FBUtilities.getLocalAddress());
0:         Gossiper.instance.start(FBUtilities.getLocalAddress(), 1);
0:         for(int i = 0; i < 6; i++) {
0:             Gossiper.instance.initializeNodeUnsafe(hosts.get(i), 1);
1:         }
1:     }
1: 
1:     @After
0:     public void tearDown() {
0:         SinkManager.clearSinks();
0:         MessagingService.instance.shutdown();
0:         ss.setPartitionerUnsafe(oldPartitioner);
1:     }
1: 
0:     @Test(expected=UnsupportedOperationException.class)
0:     public void testBadToken() {
0:         final String token = ss.getPartitioner().getTokenFactory().toString(keyTokens.get(2));
0:         ss.removeToken(token);
1: 
1:     }
1: 
0:     @Test(expected=UnsupportedOperationException.class)
0:     public void testLocalToken() {
0:         //first token should be localhost
0:         final String token = ss.getPartitioner().getTokenFactory().toString(endpointTokens.get(0));
0:         ss.removeToken(token);
1:     }
1: 
1:     @Test
0:     public void testRemoveToken() throws InterruptedException
0:     {
0:         IPartitioner partitioner = ss.getPartitioner();
1: 
0:         final String token = partitioner.getTokenFactory().toString(endpointTokens.get(5));
0:         ReplicationSink rSink = new ReplicationSink();
0:         SinkManager.addMessageSink(rSink);
1: 
1:         // start removal in background and send replication confirmations
1:         final AtomicBoolean success = new AtomicBoolean(false);
0:         Thread remover =  new Thread() 
0:         {
0:             public void run() 
0:             {
0:                 try 
0:                 {
0:                     ss.removeToken(token);
1:                 }
0:                 catch (Exception e )
0:                 {
1:                     System.err.println(e);
1:                     e.printStackTrace();
1:                     return;
1:                 }
1:                 success.set(true);
1:             }
1:         };
1:         remover.start();
1: 
1:         Thread.sleep(1000); // make sure removal is waiting for confirmation
1: 
0:         assertTrue(tmd.isLeaving(hosts.get(5)));
1:         assertEquals(1, tmd.getLeavingEndpoints().size());
1: 
0:         for(InetAddress host : hosts) {
0:             Message msg = new Message(host, StorageService.Verb.REPLICATION_FINISHED, new byte[0]);
0:             MessagingService.instance.sendRR(msg, FBUtilities.getLocalAddress());
1:         }
1: 
1:         remover.join();
1: 
1:         assertTrue(success.get());
1:         assertTrue(tmd.getLeavingEndpoints().isEmpty());
1:     }
1: 
1:     @Test
0:     public void testStartRemoving()
0:     {
0:         IPartitioner partitioner = ss.getPartitioner();
0:         VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
1: 
0:         NotificationSink nSink = new NotificationSink();
0:         ReplicationSink rSink = new ReplicationSink();
0:         SinkManager.addMessageSink(nSink);
0:         SinkManager.addMessageSink(rSink);
1: 
0:         assertEquals(0, tmd.getLeavingEndpoints().size());
1: 
0:         ss.onChange(hosts.get(1),
0:                     ApplicationState.STATUS,
0:                     valueFactory.removingNonlocal(endpointTokens.get(1), endpointTokens.get(5)));
1: 
0:         assertEquals(1, nSink.callCount);
0:         assertTrue(tmd.isLeaving(hosts.get(5)));
1:         assertEquals(1, tmd.getLeavingEndpoints().size());
1:     }
1: 
1:     @Test
0:     public void testFinishRemoving()
0:     {
0:         IPartitioner partitioner = ss.getPartitioner();
0:         VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
1: 
0:         assertEquals(0, tmd.getLeavingEndpoints().size());
1: 
0:         ss.onChange(hosts.get(1),
0:                     ApplicationState.STATUS,
0:                     valueFactory.removedNonlocal(endpointTokens.get(1), endpointTokens.get(5)));
1: 
0:         assertFalse(Gossiper.instance.getLiveMembers().contains(hosts.get(5)));
0:         assertFalse(tmd.isMember(hosts.get(5)));
1:     }
1: 
0:     class ReplicationSink implements IMessageSink {
1: 
0:         public Message handleMessage(Message msg, InetAddress to) {
0:             if(!msg.getVerb().equals(StorageService.Verb.STREAM_REQUEST))
0:                 return msg;
1: 
0:             StreamUtil.finishStreamRequest(msg, to);
1: 
0:             return null;
1:         }
1:     }
1: 
0:     class NotificationSink implements IMessageSink {
0:         public int callCount = 0;
1: 
0:         public Message handleMessage(Message msg, InetAddress to) {
0:             if(msg.getVerb().equals(StorageService.Verb.REPLICATION_FINISHED))
0:             {
0:                 callCount++;
0:                 assertEquals(Stage.MISC, msg.getMessageType());
0:                 // simulate a response from remote server
0:                 Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{});
0:                 MessagingService.instance.sendOneWay(response, FBUtilities.getLocalAddress());
0:                 return null;
1:             }
0:             else
0:             {
0:                 return msg;
1:             }
1:         }
1:     }
1: }
============================================================================