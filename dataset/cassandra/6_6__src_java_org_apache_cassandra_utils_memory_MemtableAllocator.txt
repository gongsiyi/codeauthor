1:4b54b8a: /*
1:4b54b8a:  * Licensed to the Apache Software Foundation (ASF) under one
1:4b54b8a:  * or more contributor license agreements.  See the NOTICE file
1:4b54b8a:  * distributed with this work for additional information
1:4b54b8a:  * regarding copyright ownership.  The ASF licenses this file
1:4b54b8a:  * to you under the Apache License, Version 2.0 (the
1:4b54b8a:  * "License"); you may not use this file except in compliance
1:4b54b8a:  * with the License.  You may obtain a copy of the License at
1:4b54b8a:  *
1:8541cca:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4b54b8a:  *
1:8541cca:  * Unless required by applicable law or agreed to in writing,
1:8541cca:  * software distributed under the License is distributed on an
1:8541cca:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8541cca:  * KIND, either express or implied.  See the License for the
1:8541cca:  * specific language governing permissions and limitations
1:8541cca:  * under the License.
2:4b54b8a:  */
1:4b54b8a: package org.apache.cassandra.utils.memory;
15:4b54b8a: 
1:1a3b5db: import java.util.concurrent.atomic.AtomicLongFieldUpdater;
1:1a3b5db: 
1:8541cca: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:8541cca: import org.apache.cassandra.utils.concurrent.OpOrder;
1:8a2a0c3: import org.apache.cassandra.utils.concurrent.WaitQueue;
1:1a3b5db: 
1:8541cca: public abstract class MemtableAllocator
12:4b54b8a: {
1:1a3b5db:     private final SubAllocator onHeap;
1:1a3b5db:     private final SubAllocator offHeap;
1:4b54b8a:     volatile LifeCycle state = LifeCycle.LIVE;
1:8a2a0c3: 
1:2f41243:     enum LifeCycle
1:4b54b8a:     {
1:4b54b8a:         LIVE, DISCARDING, DISCARDED;
1:1a3b5db:         LifeCycle transition(LifeCycle targetState)
1:4b54b8a:         {
1:1a3b5db:             switch (targetState)
1:1a3b5db:             {
1:1a3b5db:                 case DISCARDING:
1:1a3b5db:                     assert this == LifeCycle.LIVE;
1:1a3b5db:                     return LifeCycle.DISCARDING;
1:8541cca: 
1:1a3b5db:                 case DISCARDED:
1:1a3b5db:                     assert this == LifeCycle.DISCARDING;
1:1a3b5db:                     return LifeCycle.DISCARDED;
1:8541cca: 
1:8541cca:                 default:
1:8541cca:                     throw new IllegalStateException();
1:1a3b5db:             }
1:1a3b5db:         }
14:4b54b8a:     }
1:1a3b5db: 
1:8541cca:     MemtableAllocator(SubAllocator onHeap, SubAllocator offHeap)
1:a991b64:     {
1:1a3b5db:         this.onHeap = onHeap;
1:1a3b5db:         this.offHeap = offHeap;
1:1a3b5db:     }
1:1a3b5db: 
1:aa57626:     public abstract Row.Builder rowBuilder(OpOrder.Group opGroup);
1:8541cca:     public abstract DecoratedKey clone(DecoratedKey key, OpOrder.Group opGroup);
1:8541cca:     public abstract DataReclaimer reclaimer();
1:2f41243:     public abstract EnsureOnHeap ensureOnHeap();
1:8541cca: 
1:1a3b5db:     public SubAllocator onHeap()
1:1a3b5db:     {
1:1a3b5db:         return onHeap;
1:1a3b5db:     }
1:1a3b5db: 
1:1a3b5db:     public SubAllocator offHeap()
1:1a3b5db:     {
1:1a3b5db:         return offHeap;
1:4b54b8a:     }
1:4b54b8a: 
2:4b54b8a:     /**
1:1a3b5db:      * Mark this allocator reclaiming; this will permit any outstanding allocations to temporarily
1:1a3b5db:      * overshoot the maximum memory limit so that flushing can begin immediately
1:4b54b8a:      */
1:4b54b8a:     public void setDiscarding()
1:4b54b8a:     {
1:4b54b8a:         state = state.transition(LifeCycle.DISCARDING);
1:4b54b8a:         // mark the memory owned by this allocator as reclaiming
1:1a3b5db:         onHeap.markAllReclaiming();
1:1a3b5db:         offHeap.markAllReclaiming();
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     /**
1:4b54b8a:      * Indicate the memory and resources owned by this allocator are no longer referenced,
1:4b54b8a:      * and can be reclaimed/reused.
1:4b54b8a:      */
1:4b54b8a:     public void setDiscarded()
1:4b54b8a:     {
1:4b54b8a:         state = state.transition(LifeCycle.DISCARDED);
1:4b54b8a:         // release any memory owned by this allocator; automatically signals waiters
1:1a3b5db:         onHeap.releaseAll();
1:1a3b5db:         offHeap.releaseAll();
1:4b54b8a:     }
1:4b54b8a: 
1:4b54b8a:     public boolean isLive()
1:4b54b8a:     {
1:4b54b8a:         return state == LifeCycle.LIVE;
1:a991b64:     }
1:a991b64: 
1:8541cca:     public static interface DataReclaimer
1:4b54b8a:     {
1:2457599:         public DataReclaimer reclaim(Row row);
1:2457599:         public DataReclaimer reclaimImmediately(Row row);
1:8541cca:         public DataReclaimer reclaimImmediately(DecoratedKey key);
1:8541cca:         public void cancel();
1:8541cca:         public void commit();
1:4b54b8a:     }
1:4b54b8a: 
1:8541cca:     public static final DataReclaimer NO_OP = new DataReclaimer()
1:8541cca:     {
1:2457599:         public DataReclaimer reclaim(Row update)
1:4b54b8a:         {
1:8541cca:             return this;
1:8541cca:         }
1:8541cca: 
1:2457599:         public DataReclaimer reclaimImmediately(Row update)
1:8541cca:         {
1:8541cca:             return this;
1:8541cca:         }
1:8541cca: 
1:8541cca:         public DataReclaimer reclaimImmediately(DecoratedKey key)
1:8541cca:         {
1:8541cca:             return this;
1:8541cca:         }
1:8541cca: 
1:8541cca:         @Override
1:8541cca:         public void cancel()
1:8541cca:         {}
1:8541cca: 
1:8541cca:         @Override
1:8541cca:         public void commit()
1:8541cca:         {}
1:8541cca:     };
1:4b54b8a: 
1:1a3b5db:     /** Mark the BB as unused, permitting it to be reclaimed */
1:1a3b5db:     public static final class SubAllocator
1:1a3b5db:     {
1:1a3b5db:         // the tracker we are owning memory from
1:8541cca:         private final MemtablePool.SubPool parent;
1:1a3b5db: 
1:1a3b5db:         // the amount of memory/resource owned by this object
1:1a3b5db:         private volatile long owns;
1:1a3b5db:         // the amount of memory we are reporting to collect; this may be inaccurate, but is close
1:1a3b5db:         // and is used only to ensure that once we have reclaimed we mark the tracker with the same amount
1:1a3b5db:         private volatile long reclaiming;
1:1a3b5db: 
1:8541cca:         SubAllocator(MemtablePool.SubPool parent)
1:1a3b5db:         {
1:1a3b5db:             this.parent = parent;
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         // should only be called once we know we will never allocate to the object again.
1:1a3b5db:         // currently no corroboration/enforcement of this is performed.
1:1a3b5db:         void releaseAll()
1:1a3b5db:         {
1:b757db1:             parent.released(ownsUpdater.getAndSet(this, 0));
1:b757db1:             parent.reclaimed(reclaimingUpdater.getAndSet(this, 0));
1:b757db1:         }
1:b757db1: 
1:b757db1:         // like allocate, but permits allocations to be negative
1:b757db1:         public void adjust(long size, OpOrder.Group opGroup)
1:b757db1:         {
1:b757db1:             if (size <= 0)
1:b757db1:                 released(-size);
1:b757db1:             else
1:b757db1:                 allocate(size, opGroup);
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         // allocate memory in the tracker, and mark ourselves as owning it
1:1a3b5db:         public void allocate(long size, OpOrder.Group opGroup)
1:1a3b5db:         {
1:b757db1:             assert size >= 0;
1:b757db1: 
1:1a3b5db:             while (true)
1:1a3b5db:             {
1:1a3b5db:                 if (parent.tryAllocate(size))
1:1a3b5db:                 {
1:1a3b5db:                     acquired(size);
2:1a3b5db:                     return;
1:1a3b5db:                 }
1:458b36b:                 WaitQueue.Signal signal = opGroup.isBlockingSignal(parent.hasRoom().register(parent.blockedTimerContext()));
1:1a3b5db:                 boolean allocated = parent.tryAllocate(size);
1:1a3b5db:                 if (allocated || opGroup.isBlocking())
1:1a3b5db:                 {
1:1a3b5db:                     signal.cancel();
1:1a3b5db:                     if (allocated) // if we allocated, take ownership
1:1a3b5db:                         acquired(size);
1:1a3b5db:                     else // otherwise we're blocking so we're permitted to overshoot our constraints, to just allocate without blocking
1:1a3b5db:                         allocated(size);
1:1a3b5db:                     return;
1:1a3b5db:                 }
1:1a3b5db:                 else
1:1a3b5db:                     signal.awaitUninterruptibly();
1:1a3b5db:             }
1:1a3b5db:         }
1:1a3b5db: 
1:b757db1:         // retroactively mark an amount allocated and acquired in the tracker, and owned by us
1:b757db1:         private void allocated(long size)
1:1a3b5db:         {
1:b757db1:             parent.allocated(size);
1:1a3b5db:             ownsUpdater.addAndGet(this, size);
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         // retroactively mark an amount acquired in the tracker, and owned by us
1:b757db1:         private void acquired(long size)
1:1a3b5db:         {
1:b757db1:             parent.acquired(size);
1:1a3b5db:             ownsUpdater.addAndGet(this, size);
1:1a3b5db:         }
1:1a3b5db: 
1:b757db1:         void released(long size)
1:1a3b5db:         {
1:b757db1:             parent.released(size);
1:1a3b5db:             ownsUpdater.addAndGet(this, -size);
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         // mark everything we currently own as reclaiming, both here and in our parent
1:1a3b5db:         void markAllReclaiming()
1:1a3b5db:         {
1:1a3b5db:             while (true)
1:1a3b5db:             {
1:1a3b5db:                 long cur = owns;
1:1a3b5db:                 long prev = reclaiming;
1:b757db1:                 if (!reclaimingUpdater.compareAndSet(this, prev, cur))
1:b757db1:                     continue;
1:b757db1: 
1:b757db1:                 parent.reclaiming(cur - prev);
1:b757db1:                 return;
1:1a3b5db:             }
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         public long owns()
1:1a3b5db:         {
1:1a3b5db:             return owns;
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         public float ownershipRatio()
1:1a3b5db:         {
1:1a3b5db:             float r = owns / (float) parent.limit;
1:1a3b5db:             if (Float.isNaN(r))
1:1a3b5db:                 return 0;
1:1a3b5db:             return r;
1:1a3b5db:         }
1:1a3b5db: 
1:1a3b5db:         private static final AtomicLongFieldUpdater<SubAllocator> ownsUpdater = AtomicLongFieldUpdater.newUpdater(SubAllocator.class, "owns");
1:1a3b5db:         private static final AtomicLongFieldUpdater<SubAllocator> reclaimingUpdater = AtomicLongFieldUpdater.newUpdater(SubAllocator.class, "reclaiming");
1:8541cca:     }
1:2f41243: 
1:4b54b8a: 
1:4b54b8a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5c84fe4
commit:2457599
/////////////////////////////////////////////////////////////////////////
0:     public abstract Row.Builder rowBuilder(CFMetaData metadata, OpOrder.Group opGroup, boolean isStatic);
/////////////////////////////////////////////////////////////////////////
1:         public DataReclaimer reclaim(Row row);
1:         public DataReclaimer reclaimImmediately(Row row);
/////////////////////////////////////////////////////////////////////////
1:         public DataReclaimer reclaim(Row update)
1:         public DataReclaimer reclaimImmediately(Row update)
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
0:     public abstract MemtableRowData.ReusableRow newReusableRow();
0:     public abstract RowAllocator newRowAllocator(CFMetaData cfm, OpOrder.Group writeOp);
/////////////////////////////////////////////////////////////////////////
0:     public static interface RowAllocator extends Row.Writer
1:     {
0:         public void allocateNewRow(int clusteringSize, Columns columns, boolean isStatic);
0:         public MemtableRowData allocatedRowData();
1:     }
1: 
0:         public DataReclaimer reclaim(MemtableRowData row);
0:         public DataReclaimer reclaimImmediately(MemtableRowData row);
/////////////////////////////////////////////////////////////////////////
0:         public DataReclaimer reclaim(MemtableRowData update)
0:         public DataReclaimer reclaimImmediately(MemtableRowData update)
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:458b36b
/////////////////////////////////////////////////////////////////////////
1:                 WaitQueue.Signal signal = opGroup.isBlockingSignal(parent.hasRoom().register(parent.blockedTimerContext()));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     enum LifeCycle
/////////////////////////////////////////////////////////////////////////
1:     public abstract EnsureOnHeap ensureOnHeap();
/////////////////////////////////////////////////////////////////////////
1: 
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:     public abstract Row.Builder rowBuilder(OpOrder.Group opGroup);
commit:dea6ab1
commit:b757db1
/////////////////////////////////////////////////////////////////////////
1:             parent.released(ownsUpdater.getAndSet(this, 0));
1:             parent.reclaimed(reclaimingUpdater.getAndSet(this, 0));
1:         }
1: 
1:         // like allocate, but permits allocations to be negative
1:         public void adjust(long size, OpOrder.Group opGroup)
1:         {
1:             if (size <= 0)
1:                 released(-size);
1:             else
1:                 allocate(size, opGroup);
1:             assert size >= 0;
1: 
/////////////////////////////////////////////////////////////////////////
1:         // retroactively mark an amount allocated and acquired in the tracker, and owned by us
1:         private void allocated(long size)
1:             parent.allocated(size);
1:         private void acquired(long size)
1:             parent.acquired(size);
1:         void released(long size)
1:             parent.released(size);
/////////////////////////////////////////////////////////////////////////
1:                 if (!reclaimingUpdater.compareAndSet(this, prev, cur))
1:                     continue;
1: 
1:                 parent.reclaiming(cur - prev);
1:                 return;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: public abstract class MemtableAllocator
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:                 default:
1:                     throw new IllegalStateException();
1:     MemtableAllocator(SubAllocator onHeap, SubAllocator offHeap)
0:     public abstract Cell clone(Cell cell, CFMetaData cfm, OpOrder.Group writeOp);
0:     public abstract CounterCell clone(CounterCell cell, CFMetaData cfm, OpOrder.Group writeOp);
0:     public abstract DeletedCell clone(DeletedCell cell, CFMetaData cfm, OpOrder.Group writeOp);
0:     public abstract ExpiringCell clone(ExpiringCell cell, CFMetaData cfm, OpOrder.Group writeOp);
1:     public abstract DecoratedKey clone(DecoratedKey key, OpOrder.Group opGroup);
1:     public abstract DataReclaimer reclaimer();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static interface DataReclaimer
0:         public DataReclaimer reclaim(Cell cell);
0:         public DataReclaimer reclaimImmediately(Cell cell);
1:         public DataReclaimer reclaimImmediately(DecoratedKey key);
1:         public void cancel();
1:         public void commit();
1:     public static final DataReclaimer NO_OP = new DataReclaimer()
0:         public DataReclaimer reclaim(Cell cell)
1:         {
1:             return this;
1:         }
1: 
0:         public DataReclaimer reclaimImmediately(Cell cell)
1:         {
1:             return this;
1:         }
1: 
1:         public DataReclaimer reclaimImmediately(DecoratedKey key)
1:         {
1:             return this;
1:         }
1: 
1:         @Override
1:         public void cancel()
1:         {}
1: 
1:         @Override
1:         public void commit()
1:         {}
1:     };
1:         private final MemtablePool.SubPool parent;
/////////////////////////////////////////////////////////////////////////
1:         SubAllocator(MemtablePool.SubPool parent)
/////////////////////////////////////////////////////////////////////////
1: }
commit:1a3b5db
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLongFieldUpdater;
1: 
0: public abstract class PoolAllocator extends AbstractAllocator
1: 
1:     private final SubAllocator onHeap;
1:     private final SubAllocator offHeap;
1:         LifeCycle transition(LifeCycle targetState)
1:             switch (targetState)
1:             {
1:                 case DISCARDING:
1:                     assert this == LifeCycle.LIVE;
1:                     return LifeCycle.DISCARDING;
1:                 case DISCARDED:
1:                     assert this == LifeCycle.DISCARDING;
1:                     return LifeCycle.DISCARDED;
1:             }
0:             throw new IllegalStateException();
0:     PoolAllocator(SubAllocator onHeap, SubAllocator offHeap)
1:         this.onHeap = onHeap;
1:         this.offHeap = offHeap;
1:     }
1: 
1:     public SubAllocator onHeap()
1:     {
1:         return onHeap;
1:     }
1: 
1:     public SubAllocator offHeap()
1:     {
1:         return offHeap;
1:      * Mark this allocator reclaiming; this will permit any outstanding allocations to temporarily
1:      * overshoot the maximum memory limit so that flushing can begin immediately
1:         onHeap.markAllReclaiming();
1:         offHeap.markAllReclaiming();
/////////////////////////////////////////////////////////////////////////
1:         onHeap.releaseAll();
1:         offHeap.releaseAll();
/////////////////////////////////////////////////////////////////////////
0:     public abstract ByteBuffer allocate(int size, OpOrder.Group opGroup);
0:     public abstract void free(ByteBuffer name);
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** Mark the BB as unused, permitting it to be reclaimed */
1:     public static final class SubAllocator
1:         // the tracker we are owning memory from
0:         private final Pool.SubPool parent;
1: 
1:         // the amount of memory/resource owned by this object
1:         private volatile long owns;
1:         // the amount of memory we are reporting to collect; this may be inaccurate, but is close
1:         // and is used only to ensure that once we have reclaimed we mark the tracker with the same amount
1:         private volatile long reclaiming;
1: 
0:         SubAllocator(Pool.SubPool parent)
1:         {
1:             this.parent = parent;
1:         }
1: 
1:         // should only be called once we know we will never allocate to the object again.
1:         // currently no corroboration/enforcement of this is performed.
1:         void releaseAll()
1:         {
0:             parent.adjustAcquired(-ownsUpdater.getAndSet(this, 0), false);
0:             parent.adjustReclaiming(-reclaimingUpdater.getAndSet(this, 0));
1:         }
1: 
1:         // allocate memory in the tracker, and mark ourselves as owning it
1:         public void allocate(long size, OpOrder.Group opGroup)
1:         {
1:             while (true)
1:             {
1:                 if (parent.tryAllocate(size))
1:                 {
1:                     acquired(size);
1:                     return;
1:                 }
0:                 WaitQueue.Signal signal = opGroup.isBlockingSignal(parent.hasRoom().register());
1:                 boolean allocated = parent.tryAllocate(size);
1:                 if (allocated || opGroup.isBlocking())
1:                 {
1:                     signal.cancel();
1:                     if (allocated) // if we allocated, take ownership
1:                         acquired(size);
1:                     else // otherwise we're blocking so we're permitted to overshoot our constraints, to just allocate without blocking
1:                         allocated(size);
1:                     return;
1:                 }
1:                 else
1:                     signal.awaitUninterruptibly();
1:             }
1:         }
1: 
0:         // retroactively mark an amount allocated amd acquired in the tracker, and owned by us
0:         void allocated(long size)
1:         {
0:             parent.adjustAcquired(size, true);
1:             ownsUpdater.addAndGet(this, size);
1:         }
1: 
1:         // retroactively mark an amount acquired in the tracker, and owned by us
0:         void acquired(long size)
1:         {
0:             parent.adjustAcquired(size, false);
1:             ownsUpdater.addAndGet(this, size);
1:         }
1: 
0:         void release(long size)
1:         {
0:             parent.adjustAcquired(-size, false);
1:             ownsUpdater.addAndGet(this, -size);
1:         }
1: 
1:         // mark everything we currently own as reclaiming, both here and in our parent
1:         void markAllReclaiming()
1:         {
1:             while (true)
1:             {
1:                 long cur = owns;
1:                 long prev = reclaiming;
0:                 if (reclaimingUpdater.compareAndSet(this, prev, cur))
1:                 {
0:                     parent.adjustReclaiming(cur - prev);
1:                     return;
1:                 }
1:             }
1:         }
1: 
1:         public long owns()
1:         {
1:             return owns;
1:         }
1: 
1:         public float ownershipRatio()
1:         {
1:             float r = owns / (float) parent.limit;
1:             if (Float.isNaN(r))
1:                 return 0;
1:             return r;
1:         }
1: 
1:         private static final AtomicLongFieldUpdater<SubAllocator> ownsUpdater = AtomicLongFieldUpdater.newUpdater(SubAllocator.class, "owns");
1:         private static final AtomicLongFieldUpdater<SubAllocator> reclaimingUpdater = AtomicLongFieldUpdater.newUpdater(SubAllocator.class, "reclaiming");
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:8a2a0c3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.concurrent.OpOrder;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.concurrent.WaitQueue;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public ContextAllocator wrap(OpOrder.Group opGroup)
0:         return new ContextAllocator(opGroup, this);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.memory;
1: 
0: import org.apache.cassandra.utils.concurrent.OpOrder;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.concurrent.WaitQueue;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.concurrent.atomic.AtomicLong;
1: 
0: public abstract class PoolAllocator<P extends Pool> extends AbstractAllocator
1: {
0:     public final P pool;
1:     volatile LifeCycle state = LifeCycle.LIVE;
1: 
0:     static enum LifeCycle
1:     {
1:         LIVE, DISCARDING, DISCARDED;
0:         LifeCycle transition(LifeCycle target)
1:         {
0:             assert target.ordinal() == ordinal() + 1;
0:             return target;
1:         }
1:     }
1: 
0:     // the amount of memory/resource owned by this object
0:     private AtomicLong owns = new AtomicLong();
0:     // the amount of memory we are reporting to collect; this may be inaccurate, but is close
0:     // and is used only to ensure that once we have reclaimed we mark the tracker with the same amount
0:     private AtomicLong reclaiming = new AtomicLong();
1: 
0:     PoolAllocator(P pool)
1:     {
0:         this.pool = pool;
1:     }
1: 
1:     /**
0:      * Mark this allocator as reclaiming; this will mark the memory it owns as reclaiming, so remove it from
0:      * any calculation deciding if further cleaning/reclamation is necessary.
1:      */
1:     public void setDiscarding()
1:     {
1:         state = state.transition(LifeCycle.DISCARDING);
1:         // mark the memory owned by this allocator as reclaiming
0:         long prev = reclaiming.get();
0:         long cur = owns.get();
0:         reclaiming.set(cur);
0:         pool.adjustReclaiming(cur - prev);
1:     }
1: 
1:     /**
1:      * Indicate the memory and resources owned by this allocator are no longer referenced,
1:      * and can be reclaimed/reused.
1:      */
1:     public void setDiscarded()
1:     {
1:         state = state.transition(LifeCycle.DISCARDED);
1:         // release any memory owned by this allocator; automatically signals waiters
0:         pool.release(owns.getAndSet(0));
0:         pool.adjustReclaiming(-reclaiming.get());
1:     }
1: 
0:     public abstract ByteBuffer allocate(int size, OpOrder.Group opGroup);
1: 
0:     /** Mark the BB as unused, permitting it to be reclaimed */
0:     public abstract void free(ByteBuffer name);
1: 
0:     // mark ourselves as owning memory from the tracker.  meant to be called by subclass
0:     // allocate method that actually allocates and returns a ByteBuffer
0:     protected void markAllocated(int size, OpOrder.Group opGroup)
1:     {
0:         while (true)
1:         {
0:             if (pool.tryAllocate(size))
1:             {
0:                 acquired(size);
0:                 return;
1:             }
0:             WaitQueue.Signal signal = opGroup.isBlockingSignal(pool.hasRoom.register());
0:             boolean allocated = pool.tryAllocate(size);
0:             if (allocated || opGroup.isBlocking())
1:             {
0:                 signal.cancel();
0:                 if (allocated) // if we allocated, take ownership
0:                     acquired(size);
0:                 else // otherwise we're blocking so we're permitted to overshoot our constraints, to just allocate without blocking
0:                     allocated(size);
0:                 return;
1:             }
0:             else
0:                 signal.awaitUninterruptibly();
1:         }
1:     }
1: 
0:     // retroactively mark (by-passes any constraints) an amount allocated in the tracker, and owned by us.
0:     private void allocated(int size)
1:     {
0:         pool.adjustAllocated(size);
0:         owns.addAndGet(size);
1:     }
1: 
0:     // retroactively mark (by-passes any constraints) an amount owned by us
0:     private void acquired(int size)
1:     {
0:         owns.addAndGet(size);
1:     }
1: 
0:     // release an amount of memory from our ownership, and deallocate it in the tracker
0:     void release(int size)
1:     {
0:         pool.release(size);
0:         owns.addAndGet(-size);
1:     }
1: 
1:     public boolean isLive()
1:     {
1:         return state == LifeCycle.LIVE;
1:     }
1: 
1:     /**
0:      * Allocate a slice of the given length.
1:      */
0:     public ByteBuffer clone(ByteBuffer buffer, OpOrder.Group opGroup)
1:     {
0:         assert buffer != null;
0:         if (buffer.remaining() == 0)
0:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
0:         ByteBuffer cloned = allocate(buffer.remaining(), opGroup);
1: 
0:         cloned.mark();
0:         cloned.put(buffer.duplicate());
0:         cloned.reset();
0:         return cloned;
1:     }
1: 
0:     public ContextAllocator wrap(OpOrder.Group opGroup, ColumnFamilyStore cfs)
1:     {
0:         return new ContextAllocator(opGroup, this, cfs);
1:     }
1: 
0:     @Override
0:     public long owns()
1:     {
0:         return owns.get();
1:     }
1: 
0:     @Override
0:     public float ownershipRatio()
1:     {
0:         return owns.get() / (float) pool.limit;
1:     }
1: 
0:     @Override
0:     public long reclaiming()
1:     {
0:         return reclaiming.get();
1:     }
1: }
============================================================================