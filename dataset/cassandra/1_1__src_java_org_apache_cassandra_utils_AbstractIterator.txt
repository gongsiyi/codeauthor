1:489a9e8: /*
1:489a9e8: * Licensed to the Apache Software Foundation (ASF) under one
1:489a9e8: * or more contributor license agreements.  See the NOTICE file
1:489a9e8: * distributed with this work for additional information
1:489a9e8: * regarding copyright ownership.  The ASF licenses this file
1:489a9e8: * to you under the Apache License, Version 2.0 (the
1:489a9e8: * "License"); you may not use this file except in compliance
1:489a9e8: * with the License.  You may obtain a copy of the License at
1:489a9e8: *
1:489a9e8: *    http://www.apache.org/licenses/LICENSE-2.0
1:489a9e8: *
1:489a9e8: * Unless required by applicable law or agreed to in writing,
1:489a9e8: * software distributed under the License is distributed on an
1:489a9e8: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:489a9e8: * KIND, either express or implied.  See the License for the
1:489a9e8: * specific language governing permissions and limitations
1:489a9e8: * under the License.
1:489a9e8: */
1:489a9e8: package org.apache.cassandra.utils;
1:489a9e8: 
1:489a9e8: import java.util.Iterator;
1:489a9e8: import java.util.NoSuchElementException;
1:489a9e8: 
1:489a9e8: import com.google.common.collect.PeekingIterator;
1:489a9e8: 
1:489a9e8: public abstract class AbstractIterator<V> implements Iterator<V>, PeekingIterator<V>
1:489a9e8: {
1:489a9e8: 
1:489a9e8:     private static enum State { MUST_FETCH, HAS_NEXT, DONE, FAILED }
1:489a9e8:     private State state = State.MUST_FETCH;
1:489a9e8:     private V next;
1:489a9e8: 
1:489a9e8:     protected V endOfData()
1:489a9e8:     {
1:489a9e8:         state = State.DONE;
1:489a9e8:         return null;
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     protected abstract V computeNext();
1:489a9e8: 
1:489a9e8:     public boolean hasNext()
1:489a9e8:     {
1:489a9e8:         switch (state)
1:489a9e8:         {
1:489a9e8:             case MUST_FETCH:
1:489a9e8:                 state = State.FAILED;
1:489a9e8:                 next = computeNext();
1:489a9e8: 
1:489a9e8:             default:
1:489a9e8:                 if (state == State.DONE)
1:489a9e8:                     return false;
1:489a9e8: 
1:489a9e8:                 state = State.HAS_NEXT;
1:489a9e8:                 return true;
1:489a9e8: 
1:489a9e8:             case FAILED:
1:489a9e8:                 throw new IllegalStateException();
1:489a9e8:         }
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public V next()
1:489a9e8:     {
1:489a9e8:         if (state != State.HAS_NEXT && !hasNext())
1:489a9e8:             throw new NoSuchElementException();
1:489a9e8: 
1:489a9e8:         state = State.MUST_FETCH;
1:489a9e8:         V result = next;
1:489a9e8:         next = null;
1:489a9e8:         return result;
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public V peek()
1:489a9e8:     {
1:489a9e8:         if (!hasNext())
1:489a9e8:             throw new NoSuchElementException();
1:489a9e8:         return next;
1:489a9e8:     }
1:489a9e8: 
1:489a9e8:     public void remove()
1:489a9e8:     {
1:489a9e8:         throw new UnsupportedOperationException();
1:489a9e8:     }
1:489a9e8: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Iterator;
1: import java.util.NoSuchElementException;
1: 
1: import com.google.common.collect.PeekingIterator;
1: 
1: public abstract class AbstractIterator<V> implements Iterator<V>, PeekingIterator<V>
1: {
1: 
1:     private static enum State { MUST_FETCH, HAS_NEXT, DONE, FAILED }
1:     private State state = State.MUST_FETCH;
1:     private V next;
1: 
1:     protected V endOfData()
1:     {
1:         state = State.DONE;
1:         return null;
1:     }
1: 
1:     protected abstract V computeNext();
1: 
1:     public boolean hasNext()
1:     {
1:         switch (state)
1:         {
1:             case MUST_FETCH:
1:                 state = State.FAILED;
1:                 next = computeNext();
1: 
1:             default:
1:                 if (state == State.DONE)
1:                     return false;
1: 
1:                 state = State.HAS_NEXT;
1:                 return true;
1: 
1:             case FAILED:
1:                 throw new IllegalStateException();
1:         }
1:     }
1: 
1:     public V next()
1:     {
1:         if (state != State.HAS_NEXT && !hasNext())
1:             throw new NoSuchElementException();
1: 
1:         state = State.MUST_FETCH;
1:         V result = next;
1:         next = null;
1:         return result;
1:     }
1: 
1:     public V peek()
1:     {
1:         if (!hasNext())
1:             throw new NoSuchElementException();
1:         return next;
1:     }
1: 
1:     public void remove()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================