1:7536429: /*
1:7536429:  *
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  *
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  *
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  *
1:7536429:  */
1:7536429: package org.apache.cassandra.stress.generate.values;
2:7536429: 
1:7536429: import org.apache.cassandra.db.marshal.UTF8Type;
1:7536429: 
1:7536429: public class HexStrings extends Generator<String>
1:7536429: {
1:7536429:     private final char[] chars;
1:7536429: 
1:7536429:     public HexStrings(String name, GeneratorConfig config)
1:7536429:     {
1:0580fb2:         super(UTF8Type.instance, config, name, String.class);
1:7536429:         chars = new char[(int) sizeDistribution.maxValue()];
1:7536429:     }
1:7536429: 
1:7536429:     @Override
1:7536429:     public String generate()
1:7536429:     {
1:7536429:         long seed = identityDistribution.next();
1:7536429:         sizeDistribution.setSeed(seed);
1:7536429:         int size = (int) sizeDistribution.next();
1:7536429:         for (int i = 0 ; i < size ; i +=16)
1:7536429:         {
1:7536429:             long value = identityDistribution.next();
1:7536429:             for (int j = 0 ; j < 16 && i + j < size ; j++)
1:7536429:             {
1:7536429:                 int v = (int) (value & 15);
1:7536429:                 chars[i + j] = (char) ((v < 10 ? '0' : 'A') + v);
1:7536429:                 value >>>= 4;
1:7536429:             }
1:7536429:         }
1:7536429:         return new String(chars, 0, size);
1:7536429:     }
1:7536429: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super(UTF8Type.instance, config, name, String.class);
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.cassandra.stress.generate.values;
1: 
0: import java.util.Random;
1: 
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: 
1: public class HexStrings extends Generator<String>
1: {
1:     private final char[] chars;
1: 
1:     public HexStrings(String name, GeneratorConfig config)
1:     {
0:         super(UTF8Type.instance, config, name);
1:         chars = new char[(int) sizeDistribution.maxValue()];
1:     }
1: 
1:     @Override
1:     public String generate()
1:     {
1:         long seed = identityDistribution.next();
1:         sizeDistribution.setSeed(seed);
1:         int size = (int) sizeDistribution.next();
1:         for (int i = 0 ; i < size ; i +=16)
1:         {
1:             long value = identityDistribution.next();
1:             for (int j = 0 ; j < 16 && i + j < size ; j++)
1:             {
1:                 int v = (int) (value & 15);
1:                 chars[i + j] = (char) ((v < 10 ? '0' : 'A') + v);
1:                 value >>>= 4;
1:             }
1:         }
1:         return new String(chars, 0, size);
1:     }
1: }
============================================================================