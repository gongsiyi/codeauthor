1:8d17ccb: /*
1:8d17ccb:  * Licensed to the Apache Software Foundation (ASF) under one
1:8d17ccb:  * or more contributor license agreements.  See the NOTICE file
1:8d17ccb:  * distributed with this work for additional information
1:8d17ccb:  * regarding copyright ownership.  The ASF licenses this file
1:8d17ccb:  * to you under the Apache License, Version 2.0 (the
1:8d17ccb:  * "License"); you may not use this file except in compliance
1:8d17ccb:  * with the License.  You may obtain a copy of the License at
1:eb390d0:  *
1:eb390d0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb390d0:  *
1:eb390d0:  * Unless required by applicable law or agreed to in writing, software
1:eb390d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb390d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb390d0:  * See the License for the specific language governing permissions and
1:eb390d0:  * limitations under the License.
1:e301c38:  */
1:eb390d0: package org.apache.cassandra.metrics;
1:8d17ccb: 
1:8896a70: import com.codahale.metrics.Meter;
3:e301c38: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:e301c38: 
1:e301c38: /**
1:e301c38:  * Metrics related to Read Repair.
1:8d17ccb:  */
1:eb390d0: public class ReadRepairMetrics
1:eb390d0: {
1:eb390d0:     private static final MetricNameFactory factory = new DefaultNameFactory("ReadRepair");
1:eb390d0: 
1:8896a70:     public static final Meter repairedBlocking = Metrics.meter(factory.createMetricName("RepairedBlocking"));
1:8896a70:     public static final Meter repairedBackground = Metrics.meter(factory.createMetricName("RepairedBackground"));
1:8896a70:     public static final Meter attempted = Metrics.meter(factory.createMetricName("Attempted"));
1:e301c38: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Meter;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
/////////////////////////////////////////////////////////////////////////
1:     public static final Meter repairedBlocking = Metrics.meter(factory.createMetricName("RepairedBlocking"));
1:     public static final Meter repairedBackground = Metrics.meter(factory.createMetricName("RepairedBackground"));
1:     public static final Meter attempted = Metrics.meter(factory.createMetricName("Attempted"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.metrics;
1: public class ReadRepairMetrics
1: {
1:     private static final MetricNameFactory factory = new DefaultNameFactory("ReadRepair");
1: 
0:             Metrics.newMeter(factory.createMetricName("RepairedBlocking"), "RepairedBlocking", TimeUnit.SECONDS);
0:             Metrics.newMeter(factory.createMetricName("RepairedBackground"), "RepairedBackground", TimeUnit.SECONDS);
0:             Metrics.newMeter(factory.createMetricName("Attempted"), "Attempted", TimeUnit.SECONDS);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8d17ccb
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:e301c38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.metrics;
1: 
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
0: import com.yammer.metrics.util.RatioGauge;
1: 
1: /**
1:  * Metrics related to Read Repair.
1:  */
0: public class ReadRepairMetrics {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
0:     public static final String TYPE_NAME = "ReadRepair";
1:     
0:     public static final Meter repairedBlocking =
0:             Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "RepairedBlocking"), "RepairedBlocking", TimeUnit.SECONDS);
0:     public static final Meter repairedBackground =
0:             Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "RepairedBackground"), "RepairedBackground", TimeUnit.SECONDS);
0:     public static final Meter attempted = 
0:             Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "Attempted"), "Attempted", TimeUnit.SECONDS);
1: }
============================================================================