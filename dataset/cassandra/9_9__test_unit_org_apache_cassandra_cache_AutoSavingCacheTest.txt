1:0a1b277: /*
1:0a1b277:  * Licensed to the Apache Software Foundation (ASF) under one
1:0a1b277:  * or more contributor license agreements.  See the NOTICE file
1:0a1b277:  * distributed with this work for additional information
1:0a1b277:  * regarding copyright ownership.  The ASF licenses this file
1:0a1b277:  * to you under the Apache License, Version 2.0 (the
1:0a1b277:  * "License"); you may not use this file except in compliance
1:0a1b277:  * with the License.  You may obtain a copy of the License at
1:0a1b277:  *
1:0a1b277:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0a1b277:  *
1:0a1b277:  * Unless required by applicable law or agreed to in writing, software
1:0a1b277:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a1b277:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a1b277:  * See the License for the specific language governing permissions and
1:0a1b277:  * limitations under the License.
1:0a1b277:  */
1:0a1b277: package org.apache.cassandra.cache;
1:0a1b277: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:ef5bbed: import org.apache.cassandra.config.DatabaseDescriptor;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.marshal.AsciiType;
1:0368e97: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:8b09061: import org.junit.Assert;
1:d2a3827: import org.junit.BeforeClass;
1:0a1b277: import org.junit.Test;
1:0a1b277: 
1:0a1b277: import org.apache.cassandra.SchemaLoader;
1:0a1b277: import org.apache.cassandra.Util;
1:d2a3827: import org.apache.cassandra.exceptions.ConfigurationException;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:0a1b277: import org.apache.cassandra.service.CacheService;
1:0a1b277: import org.apache.cassandra.utils.ByteBufferUtil;
1:0a1b277: 
1:d2a3827: public class AutoSavingCacheTest
1:0a1b277: {
1:d2a3827:     private static final String KEYSPACE1 = "AutoSavingCacheTest1";
1:d2a3827:     private static final String CF_STANDARD1 = "Standard1";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws ConfigurationException
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:a991b64:                                     CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD1)
1:a991b64:                                                       .addPartitionKey("pKey", AsciiType.instance)
1:a991b64:                                                       .addRegularColumn("col1", AsciiType.instance)
1:a991b64:                                                       .build());
1:d2a3827:     }
1:d2a3827: 
1:0a1b277:     @Test
1:ef5bbed:     public void testSerializeAndLoadKeyCache0kB() throws Exception
1:ef5bbed:     {
1:ef5bbed:         DatabaseDescriptor.setColumnIndexCacheSize(0);
1:ef5bbed:         doTestSerializeAndLoadKeyCache();
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     @Test
1:0a1b277:     public void testSerializeAndLoadKeyCache() throws Exception
1:0a1b277:     {
1:ef5bbed:         DatabaseDescriptor.setColumnIndexCacheSize(8);
1:ef5bbed:         doTestSerializeAndLoadKeyCache();
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     private static void doTestSerializeAndLoadKeyCache() throws Exception
1:ef5bbed:     {
1:d2a3827:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
1:ef5bbed:         cfs.truncateBlocking();
1:0a1b277:         for (int i = 0; i < 2; i++)
1:0a1b277:         {
1:2457599:             ColumnDefinition colDef = ColumnDefinition.regularDef(cfs.metadata, ByteBufferUtil.bytes("col1"), AsciiType.instance);
1:a991b64:             RowUpdateBuilder rowBuilder = new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), "key1");
1:a991b64:             rowBuilder.add(colDef, "val1");
1:a991b64:             rowBuilder.build().apply();
1:0a1b277:             cfs.forceBlockingFlush();
1:0a1b277:         }
1:0a1b277: 
1:ad8cad7:         Assert.assertEquals(2, cfs.getLiveSSTables().size());
1:0a1b277: 
1:0a1b277:         // preheat key cache
1:ad8cad7:         for (SSTableReader sstable : cfs.getLiveSSTables())
1:0a1b277:             sstable.getPosition(Util.dk("key1"), SSTableReader.Operator.EQ);
1:0a1b277: 
1:0a1b277:         AutoSavingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;
1:0a1b277: 
1:0a1b277:         // serialize to file
1:0a1b277:         keyCache.submitWrite(keyCache.size()).get();
1:0a1b277:         keyCache.clear();
1:0a1b277: 
1:8b09061:         Assert.assertEquals(0, keyCache.size());
1:0a1b277: 
1:0a1b277:         // then load saved
1:e889ee4:         keyCache.loadSavedAsync().get();
1:ad8cad7:         for (SSTableReader sstable : cfs.getLiveSSTables())
1:e889ee4:             Assert.assertNotNull(keyCache.get(new KeyCacheKey(cfs.metadata.ksAndCFName, sstable.descriptor, ByteBufferUtil.bytes("key1"))));
1:0a1b277:     }
1:0a1b277: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     public void testSerializeAndLoadKeyCache0kB() throws Exception
1:     {
1:         DatabaseDescriptor.setColumnIndexCacheSize(0);
1:         doTestSerializeAndLoadKeyCache();
1:     }
1: 
1:     @Test
1:         DatabaseDescriptor.setColumnIndexCacheSize(8);
1:         doTestSerializeAndLoadKeyCache();
1:     }
1: 
1:     private static void doTestSerializeAndLoadKeyCache() throws Exception
1:     {
1:         cfs.truncateBlocking();
commit:9218d74
commit:e63dacf
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:e889ee4
/////////////////////////////////////////////////////////////////////////
1:         keyCache.loadSavedAsync().get();
1:             Assert.assertNotNull(keyCache.get(new KeyCacheKey(cfs.metadata.ksAndCFName, sstable.descriptor, ByteBufferUtil.bytes("key1"))));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ad8cad7
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(2, cfs.getLiveSSTables().size());
1:         for (SSTableReader sstable : cfs.getLiveSSTables())
/////////////////////////////////////////////////////////////////////////
1:         for (SSTableReader sstable : cfs.getLiveSSTables())
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:             ColumnDefinition colDef = ColumnDefinition.regularDef(cfs.metadata, ByteBufferUtil.bytes("col1"), AsciiType.instance);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.AsciiType;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 KSMetaData.optsWithRF(1),
1:                 CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD1)
1:                     .addPartitionKey("pKey", AsciiType.instance)
1:                     .addRegularColumn("col1", AsciiType.instance)
1:                     .build());
/////////////////////////////////////////////////////////////////////////
0:             ColumnDefinition colDef = new ColumnDefinition(cfs.metadata, ByteBufferUtil.bytes("col1"), AsciiType.instance, 0, ColumnDefinition.Kind.REGULAR);
1:             RowUpdateBuilder rowBuilder = new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), "key1");
1:             rowBuilder.add(colDef, "val1");
1:             rowBuilder.build().apply();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
0:                                     CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD1)
0:                                                       .addPartitionKey("pKey", AsciiType.instance)
0:                                                       .addRegularColumn("col1", AsciiType.instance)
0:                                                       .build());
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
/////////////////////////////////////////////////////////////////////////
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:             rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: public class AutoSavingCacheTest
1:     private static final String KEYSPACE1 = "AutoSavingCacheTest1";
1:     private static final String CF_STANDARD1 = "Standard1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:     }
1: 
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
0:             Mutation rm = new Mutation(KEYSPACE1, ByteBufferUtil.bytes("key1"));
0:             rm.add(CF_STANDARD1, Util.cellname("c1"), ByteBufferUtil.bytes(i), 0);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:8b09061
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(2, cfs.getSSTables().size());
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(0, keyCache.size());
0:         Assert.assertEquals(2, keyCache.size());
0:             Assert.assertNotNull(keyCache.get(new KeyCacheKey(cfs.metadata.cfId, sstable.descriptor, ByteBufferUtil.bytes("key1"))));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:0a1b277
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cache;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.db.RowIndexEntry;
0: import org.apache.cassandra.db.Mutation;
0: import org.apache.cassandra.io.sstable.SSTableReader;
1: import org.apache.cassandra.service.CacheService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: public class AutoSavingCacheTest extends SchemaLoader
1: {
1:     @Test
1:     public void testSerializeAndLoadKeyCache() throws Exception
1:     {
0:         ColumnFamilyStore cfs = Keyspace.open("Keyspace1").getColumnFamilyStore("Standard1");
1:         for (int i = 0; i < 2; i++)
1:         {
0:             Mutation rm = new Mutation("Keyspace1", ByteBufferUtil.bytes("key1"));
0:             rm.add("Standard1", Util.cellname("c1"), ByteBufferUtil.bytes(i), 0);
0:             rm.apply();
1:             cfs.forceBlockingFlush();
1:         }
1: 
0:         assert cfs.getSSTables().size() == 2;
1: 
1:         // preheat key cache
0:         for (SSTableReader sstable : cfs.getSSTables())
1:             sstable.getPosition(Util.dk("key1"), SSTableReader.Operator.EQ);
1: 
1:         AutoSavingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;
1: 
1:         // serialize to file
1:         keyCache.submitWrite(keyCache.size()).get();
1:         keyCache.clear();
1: 
0:         assert keyCache.size() == 0;
1: 
1:         // then load saved
0:         keyCache.loadSaved(cfs);
0:         assert keyCache.size() == 2;
0:         for (SSTableReader sstable : cfs.getSSTables())
0:             assert keyCache.get(new KeyCacheKey(cfs.metadata.cfId, sstable.descriptor, ByteBufferUtil.bytes("key1"))) != null;
1:     }
1: }
============================================================================