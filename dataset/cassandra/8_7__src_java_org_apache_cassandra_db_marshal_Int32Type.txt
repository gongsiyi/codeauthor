1:58df830: /*
1:58df830:  * Licensed to the Apache Software Foundation (ASF) under one
1:58df830:  * or more contributor license agreements.  See the NOTICE file
1:58df830:  * distributed with this work for additional information
1:58df830:  * regarding copyright ownership.  The ASF licenses this file
1:58df830:  * to you under the Apache License, Version 2.0 (the
1:58df830:  * "License"); you may not use this file except in compliance
1:58df830:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:58df830:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
13:58df830: 
1:58df830: import java.nio.ByteBuffer;
1:58df830: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:a67f779: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.Int32Serializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:58df830: import org.apache.cassandra.utils.ByteBufferUtil;
1:58df830: 
1:58df830: public class Int32Type extends AbstractType<Integer>
10:58df830: {
1:58df830:     public static final Int32Type instance = new Int32Type();
1:a67f779: 
1:e9c6742:     Int32Type()
1:e9c6742:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:e9c6742:     } // singleton
1:58df830: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:4df4f79:     {
1:4df4f79:         return true;
1:4df4f79:     }
1:a67f779: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:a67f779:     {
1:acf1b18:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:acf1b18:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
1:4df4f79: 
1:58df830:         int diff = o1.get(o1.position()) - o2.get(o2.position());
1:58df830:         if (diff != 0)
1:58df830:             return diff;
1:07cdfd0: 
1:58df830:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:a67f779:     }
1:07cdfd0: 
1:58df830:     public ByteBuffer fromString(String source) throws MarshalException
1:58df830:     {
1:58df830:         // Return an empty ByteBuffer for an empty string.
1:58df830:         if (source.isEmpty())
1:58df830:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:2fd3268: 
1:58df830:         int int32Type;
1:2fd3268: 
2:58df830:         try
1:58df830:         {
1:58df830:             int32Type = Integer.parseInt(source);
10:58df830:         }
1:58df830:         catch (Exception e)
1:58df830:         {
1:c7b02d1:             throw new MarshalException(String.format("Unable to make int from '%s'", source), e);
1:58df830:         }
1:58df830: 
1:58df830:         return decompose(int32Type);
1:58df830:     }
1:58df830: 
1:e9c6742:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             if (parsed instanceof String)
1:c7b02d1:                 return new Constants.Value(fromString((String) parsed));
1:c7b02d1: 
1:c7b02d1:             Number parsedNumber = (Number) parsed;
1:c7b02d1:             if (!(parsedNumber instanceof Integer))
1:c7b02d1:                 throw new MarshalException(String.format("Expected an int value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1: 
1:c7b02d1:             return new Constants.Value(getSerializer().serialize(parsedNumber.intValue()));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected an int value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
2:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return getSerializer().deserialize(buffer).toString();
1:c7b02d1:     }
1:c7b02d1: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.INT;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<Integer> getSerializer()
1:e9c6742:     {
1:e9c6742:         return Int32Serializer.instance;
1:e9c6742:     }
1:acf1b18: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 4;
1:a991b64:     }
1:58df830: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 4;
1:     }
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.Int32Serializer;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<Integer> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.Int32Serializer;
0: import org.apache.cassandra.type.MarshalException;
1:     Int32Type()
1:     {
1:     } // singleton
0:         return Int32Serializer.instance.serialize(bytes);
0:         return Int32Serializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return Int32Serializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         Int32Serializer.instance.validate(bytes);
1: 
1:     @Override
0:     public AbstractSerializer<Integer> asComposer()
1:     {
1:         return Int32Serializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.INTEGER);
1: 
/////////////////////////////////////////////////////////////////////////
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.INT;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
1:     {
1:         return true;
1:     }
1: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("Unable to make int from '%s'", source), e);
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             if (parsed instanceof String)
1:                 return new Constants.Value(fromString((String) parsed));
1: 
1:             Number parsedNumber = (Number) parsed;
1:             if (!(parsedNumber instanceof Integer))
1:                 throw new MarshalException(String.format("Expected an int value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1: 
1:             return new Constants.Value(getSerializer().serialize(parsedNumber.intValue()));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected an int value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1:         if (!o1.hasRemaining() || !o2.hasRemaining())
1:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
/////////////////////////////////////////////////////////////////////////
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcInt32.instance.compose(bytes);
0:         return JdbcInt32.instance.decompose(value);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:58df830
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: 
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.cql.jdbc.JdbcInt32;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class Int32Type extends AbstractType<Integer>
1: {
1:     public static final Int32Type instance = new Int32Type();
1: 
0:     Int32Type() {} // singleton
1: 
0:     public Integer compose(ByteBuffer bytes)
1:     {
0:         return ByteBufferUtil.toInt(bytes);
1:     }
1: 
0:     public ByteBuffer decompose(Integer value)
1:     {
0:         return ByteBufferUtil.bytes(value);
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
0:         if (o1.remaining() == 0)
1:         {
0:             return o2.remaining() == 0 ? 0 : -1;
1:         }
0:         if (o2.remaining() == 0)
1:         {
0:             return 1;
1:         }
1: 
1:         int diff = o1.get(o1.position()) - o2.get(o2.position());
1:         if (diff != 0)
1:             return diff;
1:         
1:        
1:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:     }
1: 
0:     public String getString(ByteBuffer bytes)
1:     {
1:         try
1:         {
0:             return JdbcInt32.instance.getString(bytes);
1:         }
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
1:         {
0:             throw new MarshalException(e.getMessage());
1:         }
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         int int32Type;
1: 
1:         try
1:         {
1:             int32Type = Integer.parseInt(source);
1:         }
1:         catch (Exception e)
1:         {
0:             throw new MarshalException(String.format("unable to make int from '%s'", source), e);
1:         }
1: 
1:         return decompose(int32Type);
1:     }
1: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         if (bytes.remaining() != 4 && bytes.remaining() != 0)
0:             throw new MarshalException(String.format("Expected 4 or 0 byte int (%d)", bytes.remaining()));
1:     }
1: 
1: }
============================================================================