1:bddfa9e: /*
1:bddfa9e:  * Licensed to the Apache Software Foundation (ASF) under one
1:bddfa9e:  * or more contributor license agreements.  See the NOTICE file
1:bddfa9e:  * distributed with this work for additional information
1:bddfa9e:  * regarding copyright ownership.  The ASF licenses this file
1:bddfa9e:  * to you under the Apache License, Version 2.0 (the
1:bddfa9e:  * "License"); you may not use this file except in compliance
1:bddfa9e:  * with the License.  You may obtain a copy of the License at
1:bddfa9e:  *
1:bddfa9e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bddfa9e:  *
1:bddfa9e:  * Unless required by applicable law or agreed to in writing, software
1:bddfa9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bddfa9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bddfa9e:  * See the License for the specific language governing permissions and
1:bddfa9e:  * limitations under the License.
1:bddfa9e:  */
1:bddfa9e: package org.apache.cassandra.cql3.statements;
2:bddfa9e: 
1:b32ce68: import org.apache.cassandra.auth.*;
1:bddfa9e: import org.apache.cassandra.config.DatabaseDescriptor;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:879b694: import org.apache.cassandra.exceptions.*;
1:bddfa9e: import org.apache.cassandra.service.ClientState;
1:bddfa9e: import org.apache.cassandra.transport.messages.ResultMessage;
1:bddfa9e: 
1:879b694: public class DropRoleStatement extends AuthenticationStatement
2:bddfa9e: {
1:217721a:     private final RoleResource role;
1:7216639:     private final boolean ifExists;
1:bddfa9e: 
1:879b694:     public DropRoleStatement(RoleName name, boolean ifExists)
1:bddfa9e:     {
1:217721a:         this.role = RoleResource.role(name.getName());
1:7216639:         this.ifExists = ifExists;
2:bddfa9e:     }
1:bddfa9e: 
1:217721a:     public void checkAccess(ClientState state) throws UnauthorizedException
1:217721a:     {
1:217721a:         super.checkPermission(state, Permission.DROP, role);
1:6af82ed: 
1:6af82ed:         // We only check superuser status for existing roles to avoid
1:6af82ed:         // caching info about roles which don't exist (CASSANDRA-9189)
1:6af82ed:         if (DatabaseDescriptor.getRoleManager().isExistingRole(role)
1:6af82ed:             && Roles.hasSuperuserStatus(role)
1:6af82ed:             && !state.getUser().isSuper())
1:217721a:             throw new UnauthorizedException("Only superusers can drop a role with superuser status");
1:217721a:     }
1:217721a: 
1:0b83682:     public void validate(ClientState state) throws RequestValidationException
1:bddfa9e:     {
1:0b83682:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:0b83682:         state.ensureNotAnonymous();
1:0b83682: 
1:879b694:         if (!ifExists && !DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:217721a:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
1:bddfa9e: 
1:bddfa9e:         AuthenticatedUser user = state.getUser();
1:217721a:         if (user != null && user.getName().equals(role.getRoleName()))
1:879b694:             throw new InvalidRequestException("Cannot DROP primary role for current login");
1:bddfa9e:     }
1:bddfa9e: 
1:0b83682:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:bddfa9e:     {
1:7216639:         // not rejected in validate()
1:879b694:         if (ifExists && !DatabaseDescriptor.getRoleManager().isExistingRole(role))
1:7216639:             return null;
1:7216639: 
1:217721a:         // clean up grants and permissions of/on the dropped role.
1:879b694:         DatabaseDescriptor.getRoleManager().dropRole(state.getUser(), role);
1:217721a:         DatabaseDescriptor.getAuthorizer().revokeAllFrom(role);
1:217721a:         DatabaseDescriptor.getAuthorizer().revokeAllOn(role);
1:bddfa9e:         return null;
1:bddfa9e:     }
1:bddfa9e: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:6af82ed
/////////////////////////////////////////////////////////////////////////
1: 
1:         // We only check superuser status for existing roles to avoid
1:         // caching info about roles which don't exist (CASSANDRA-9189)
1:         if (DatabaseDescriptor.getRoleManager().isExistingRole(role)
1:             && Roles.hasSuperuserStatus(role)
1:             && !state.getUser().isSuper())
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
0:         if (Roles.hasSuperuserStatus(role) && !state.getUser().isSuper())
commit:217721a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1:     private final RoleResource role;
1:         this.role = RoleResource.role(name.getName());
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
1:         super.checkPermission(state, Permission.DROP, role);
0:         if (hasSuperuserStatus(role) && !state.getUser().isSuper())
1:             throw new UnauthorizedException("Only superusers can drop a role with superuser status");
1:     }
1: 
1:             throw new InvalidRequestException(String.format("%s doesn't exist", role.getRoleName()));
1:         if (user != null && user.getName().equals(role.getRoleName()))
1:         // clean up grants and permissions of/on the dropped role.
1:         DatabaseDescriptor.getAuthorizer().revokeAllFrom(role);
1:         DatabaseDescriptor.getAuthorizer().revokeAllOn(role);
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.RoleName;
1: import org.apache.cassandra.exceptions.*;
1: public class DropRoleStatement extends AuthenticationStatement
0:     private final String role;
1:     public DropRoleStatement(RoleName name, boolean ifExists)
0:         this.role = name.getName();
/////////////////////////////////////////////////////////////////////////
1:         if (!ifExists && !DatabaseDescriptor.getRoleManager().isExistingRole(role))
0:             throw new InvalidRequestException(String.format("%s doesn't exist", role));
0:         if (user != null && user.getName().equals(role))
1:             throw new InvalidRequestException("Cannot DROP primary role for current login");
0:             throw new UnauthorizedException("Only superusers are allowed to perform DROP [ROLE|USER] queries" );
1:         if (ifExists && !DatabaseDescriptor.getRoleManager().isExistingRole(role))
0:         // clean up grants and permissions of the dropped role.
1:         DatabaseDescriptor.getRoleManager().dropRole(state.getUser(), role);
0:         DatabaseDescriptor.getAuthorizer().revokeAll(role);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:7216639
/////////////////////////////////////////////////////////////////////////
1:     private final boolean ifExists;
0:     public DropUserStatement(String username, boolean ifExists)
1:         this.ifExists = ifExists;
/////////////////////////////////////////////////////////////////////////
0:         if (!ifExists && !Auth.isExistingUser(username))
/////////////////////////////////////////////////////////////////////////
1:         // not rejected in validate()
0:         if (ifExists && !Auth.isExistingUser(username))
1:             return null;
1: 
commit:d055df7
/////////////////////////////////////////////////////////////////////////
0:             throw new InvalidRequestException(String.format("User %s doesn't exist", username));
commit:0b83682
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException
1:         // validate login here before checkAccess to avoid leaking user existence to anonymous users.
1:         state.ensureNotAnonymous();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
commit:35a653c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state) throws InvalidRequestException, RequestExecutionException
commit:62b9037
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.UnavailableException;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state) throws InvalidRequestException, UnavailableException
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.auth.Auth;
0: import org.apache.cassandra.auth.AuthenticatedUser;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
0: public class DropUserStatement extends AuthenticationStatement
1: {
0:     private final String username;
1: 
0:     public DropUserStatement(String username)
1:     {
0:         this.username = username;
1:     }
1: 
0:     public void validate(ClientState state) throws InvalidRequestException
1:     {
0:         if (!Auth.isExistingUser(username))
0:             throw new InvalidRequestException(String.format("User %s doesn't exists", username));
1: 
1:         AuthenticatedUser user = state.getUser();
0:         if (user != null && user.getName().equals(username))
0:             throw new InvalidRequestException("Users aren't allowed to DROP themselves");
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
0:         state.validateLogin();
0:         if (!state.getUser().isSuper())
0:             throw new UnauthorizedException("Only superusers are allowed to perfrom DROP USER queries");
1:     }
1: 
0:     public ResultMessage execute(ClientState state) throws InvalidRequestException
1:     {
0:         // clean up permissions after the dropped user.
0:         DatabaseDescriptor.getAuthorizer().revokeAll(username);
0:         Auth.deleteUser(username);
0:         DatabaseDescriptor.getAuthenticator().drop(username);
1:         return null;
1:     }
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:4284d98
/////////////////////////////////////////////////////////////////////////
0:             throw new UnauthorizedException("Only superusers are allowed to perform DROP USER queries");
============================================================================