1:765ab3f: /*
1:765ab3f:  * Licensed to the Apache Software Foundation (ASF) under one
1:765ab3f:  * or more contributor license agreements.  See the NOTICE file
1:765ab3f:  * distributed with this work for additional information
1:765ab3f:  * regarding copyright ownership.  The ASF licenses this file
1:765ab3f:  * to you under the Apache License, Version 2.0 (the
1:765ab3f:  * "License"); you may not use this file except in compliance
1:765ab3f:  * with the License.  You may obtain a copy of the License at
1:765ab3f:  *
1:765ab3f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:765ab3f:  *
1:765ab3f:  * Unless required by applicable law or agreed to in writing, software
1:765ab3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:765ab3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:765ab3f:  * See the License for the specific language governing permissions and
1:765ab3f:  * limitations under the License.
1:765ab3f:  */
1:765ab3f: package org.apache.cassandra.security;
1:765ab3f: 
1:765ab3f: import java.io.IOException;
1:765ab3f: import java.security.Key;
1:765ab3f: 
1:765ab3f: /**
1:765ab3f:  * Customizable key retrieval mechanism. Implementations should expect that retrieved keys will be cached.
1:765ab3f:  * Further, each key will be requested non-concurrently (that is, no stampeding herds for the same key), although
1:765ab3f:  * unique keys may be requested concurrently (unless you mark {@code getSecretKey} synchronized).
1:765ab3f:  *
1:765ab3f:  * Implementations must provide a constructor that accepts {@code TransparentDataEncryptionOptions} as the sole parameter.
1:765ab3f:  */
1:765ab3f: public interface KeyProvider
1:765ab3f: {
1:765ab3f:     Key getSecretKey(String alias) throws IOException;
1:765ab3f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ef59624
/////////////////////////////////////////////////////////////////////////
author:Jason Brown
-------------------------------------------------------------------------------
commit:765ab3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.security;
1: 
1: import java.io.IOException;
1: import java.security.Key;
1: 
1: /**
1:  * Customizable key retrieval mechanism. Implementations should expect that retrieved keys will be cached.
1:  * Further, each key will be requested non-concurrently (that is, no stampeding herds for the same key), although
1:  * unique keys may be requested concurrently (unless you mark {@code getSecretKey} synchronized).
1:  *
1:  * Implementations must provide a constructor that accepts {@code TransparentDataEncryptionOptions} as the sole parameter.
1:  */
1: public interface KeyProvider
1: {
1:     Key getSecretKey(String alias) throws IOException;
1: }
commit:72f5fbd
/////////////////////////////////////////////////////////////////////////
commit:37160e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.security;
0: 
0: import java.io.IOException;
0: import java.security.Key;
0: 
0: /**
0:  * Customizable key retrieval mechanism. Implementations should expect that retrieved keys will be cached.
0:  * Further, each key will be requested non-concurrently (that is, no stampeding herds for the same key), although
0:  * unique keys may be requested concurrently (unless you mark {@code getSecretKey} synchronized).
0:  *
0:  * Implementations must provide a constructor that accepts {@code TransparentDataEncryptionOptions} as the sole parameter.
0:  */
0: public interface KeyProvider
0: {
0:     Key getSecretKey(String alias) throws IOException;
0: }
============================================================================