1:7536429: package org.apache.cassandra.stress.operations;
1:0bc9841: /*
1:89f275c:  *
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:89f275c:  *
1:0bc9841:  */
1:7536429: 
1:7536429: 
1:e73633c: import java.util.ArrayList;
1:e73633c: import java.util.Collections;
1:e73633c: import java.util.List;
1:e73633c: import java.util.Map;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.Operation;
1:e73633c: import org.apache.cassandra.stress.StressAction.MeasurementSink;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:e73633c: import org.apache.cassandra.stress.generate.DistributionFixed;
1:7536429: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:e73633c: import org.apache.commons.math3.distribution.EnumeratedDistribution;
1:e73633c: import org.apache.commons.math3.util.Pair;
1:7536429: 
1:7536429: public abstract class SampledOpDistributionFactory<T> implements OpDistributionFactory
1:7536429: {
1:7536429: 
1:a44d641:     final Map<T, Double> ratios;
1:7536429:     final DistributionFactory clustering;
1:a44d641:     protected SampledOpDistributionFactory(Map<T, Double> ratios, DistributionFactory clustering)
1:7536429:     {
1:7536429:         this.ratios = ratios;
1:7536429:         this.clustering = clustering;
1:7536429:     }
1:7536429: 
1:f27ab29:     protected abstract List<? extends Operation> get(Timer timer, PartitionGenerator generator, T key, boolean isWarmup);
1:7536429:     protected abstract PartitionGenerator newGenerator();
1:7536429: 
1:e73633c:     public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:7536429:     {
1:7536429:         PartitionGenerator generator = newGenerator();
1:7536429:         List<Pair<Operation, Double>> operations = new ArrayList<>();
1:a44d641:         for (Map.Entry<T, Double> ratio : ratios.entrySet())
1:3bee990:         {
1:e73633c:             List<? extends Operation> ops = get(new Timer(ratio.getKey().toString(), sink),
1:f27ab29:                                                 generator, ratio.getKey(), isWarmup);
1:3bee990:             for (Operation op : ops)
1:3bee990:                 operations.add(new Pair<>(op, ratio.getValue() / ops.size()));
1:3bee990:         }
1:7536429:         return new SampledOpDistribution(new EnumeratedDistribution<>(operations), clustering.get());
1:7536429:     }
1:7536429: 
1:7536429:     public String desc()
1:7536429:     {
1:7536429:         List<T> keys = new ArrayList<>();
1:a44d641:         for (Map.Entry<T, Double> ratio : ratios.entrySet())
1:a44d641:             keys.add(ratio.getKey());
1:7536429:         return keys.toString();
1:7536429:     }
1:7536429: 
1:7536429:     public Iterable<OpDistributionFactory> each()
1:7536429:     {
1:7536429:         List<OpDistributionFactory> out = new ArrayList<>();
1:a44d641:         for (final Map.Entry<T, Double> ratio : ratios.entrySet())
1:7536429:         {
1:7536429:             out.add(new OpDistributionFactory()
1:7536429:             {
1:e73633c:                 public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:7536429:                 {
1:e73633c:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(new Timer(ratio.getKey().toString(), sink),
1:f27ab29:                                                                                           newGenerator(),
1:f27ab29:                                                                                           ratio.getKey(),
1:f27ab29:                                                                                           isWarmup);
1:3bee990:                     if (ops.size() == 1)
1:3bee990:                         return new FixedOpDistribution(ops.get(0));
1:3bee990:                     List<Pair<Operation, Double>> ratios = new ArrayList<>();
1:3bee990:                     for (Operation op : ops)
1:3bee990:                         ratios.add(new Pair<>(op, 1d / ops.size()));
1:f27ab29:                     return new SampledOpDistribution(new EnumeratedDistribution<>(ratios), new DistributionFixed(1));
1:7536429:                 }
1:7536429: 
1:7536429:                 public String desc()
1:7536429:                 {
1:a44d641:                     return ratio.getKey().toString();
1:7536429:                 }
1:7536429: 
1:7536429:                 public Iterable<OpDistributionFactory> each()
1:7536429:                 {
1:7536429:                     return Collections.<OpDistributionFactory>singleton(this);
1:7536429:                 }
1:7536429:             });
1:7536429:         }
1:7536429:         return out;
1:7536429:     }
1:7536429: 
1:7536429: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.cassandra.stress.StressAction.MeasurementSink;
1: import org.apache.cassandra.stress.generate.DistributionFixed;
1: import org.apache.cassandra.stress.report.Timer;
1: import org.apache.commons.math3.distribution.EnumeratedDistribution;
1: import org.apache.commons.math3.util.Pair;
/////////////////////////////////////////////////////////////////////////
1:     public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:             List<? extends Operation> ops = get(new Timer(ratio.getKey().toString(), sink),
/////////////////////////////////////////////////////////////////////////
1:                 public OpDistribution get(boolean isWarmup, MeasurementSink sink)
1:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(new Timer(ratio.getKey().toString(), sink),
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:     public OpDistribution get(Timing timing, boolean isWarmup)
0:             List<? extends Operation> ops = get(timing.newTimer(ratio.getKey().toString()),
/////////////////////////////////////////////////////////////////////////
0:                 public OpDistribution get(Timing timing, boolean isWarmup)
0:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(timing.newTimer(ratio.getKey().toString()),
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1:     protected abstract List<? extends Operation> get(Timer timer, PartitionGenerator generator, T key, boolean isWarmup);
0:     public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
0:             List<? extends Operation> ops = get(timing.newTimer(ratio.getKey().toString(), sampleCount),
1:                                                 generator, ratio.getKey(), isWarmup);
/////////////////////////////////////////////////////////////////////////
0:                 public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
0:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(timing.newTimer(ratio.getKey().toString(), sampleCount),
1:                                                                                           newGenerator(),
1:                                                                                           ratio.getKey(),
1:                                                                                           isWarmup);
1:                     return new SampledOpDistribution(new EnumeratedDistribution<>(ratios), new DistributionFixed(1));
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0:     protected abstract List<? extends Operation> get(Timer timer, PartitionGenerator generator, T key, boolean isWarmup);
0:     public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
0:             List<? extends Operation> ops = get(timing.newTimer(ratio.getKey().toString(), sampleCount),
0:                                                 generator, ratio.getKey(), isWarmup);
/////////////////////////////////////////////////////////////////////////
0:                 public OpDistribution get(Timing timing, int sampleCount, boolean isWarmup)
0:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(timing.newTimer(ratio.getKey().toString(), sampleCount),
0:                                                                                           newGenerator(),
0:                                                                                           ratio.getKey(),
0:                                                                                           isWarmup);
0:                     return new SampledOpDistribution(new EnumeratedDistribution<>(ratios), new DistributionFixed(1));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ed08402
commit:3bee990
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.cassandra.stress.generate.*;
/////////////////////////////////////////////////////////////////////////
0:     protected abstract List<? extends Operation> get(Timer timer, PartitionGenerator generator, T key);
/////////////////////////////////////////////////////////////////////////
1:         {
0:             List<? extends Operation> ops = get(timing.newTimer(ratio.getKey().toString(), sampleCount), generator, ratio.getKey());
1:             for (Operation op : ops)
1:                 operations.add(new Pair<>(op, ratio.getValue() / ops.size()));
1:         }
/////////////////////////////////////////////////////////////////////////
0:                     List<? extends Operation> ops = SampledOpDistributionFactory.this.get(timing.newTimer(ratio.getKey().toString(), sampleCount), newGenerator(), ratio.getKey());
1:                     if (ops.size() == 1)
1:                         return new FixedOpDistribution(ops.get(0));
1:                     List<Pair<Operation, Double>> ratios = new ArrayList<>();
1:                     for (Operation op : ops)
1:                         ratios.add(new Pair<>(op, 1d / ops.size()));
0:                     return new SampledOpDistribution(new EnumeratedDistribution<Operation>(ratios), new DistributionFixed(1));
commit:a0586f6
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.Timing;
/////////////////////////////////////////////////////////////////////////
0:     public OpDistribution get(Timing timing, int sampleCount)
0:             operations.add(new Pair<>(get(timing.newTimer(ratio.getKey().toString(), sampleCount), generator, ratio.getKey()),
0:                                       ratio.getValue()));
/////////////////////////////////////////////////////////////////////////
0:                 public OpDistribution get(Timing timing, int sampleCount)
0:                     return new FixedOpDistribution(SampledOpDistributionFactory.this.get(timing.newTimer(ratio.getKey().toString(), sampleCount), newGenerator(), ratio.getKey()));
commit:597a1d5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generate.SeedManager;
commit:a44d641
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     final Map<T, Double> ratios;
1:     protected SampledOpDistributionFactory(Map<T, Double> ratios, DistributionFactory clustering)
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<T, Double> ratio : ratios.entrySet())
0:             operations.add(new Pair<>(get(timer, generator, ratio.getKey()), ratio.getValue()));
1:         for (Map.Entry<T, Double> ratio : ratios.entrySet())
1:             keys.add(ratio.getKey());
1:         for (final Map.Entry<T, Double> ratio : ratios.entrySet())
0:                     return new FixedOpDistribution(SampledOpDistributionFactory.this.get(timer, newGenerator(), ratio.getKey()));
1:                     return ratio.getKey().toString();
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.operations;
1: 
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.List;
1: 
0: import org.apache.commons.math3.distribution.EnumeratedDistribution;
0: import org.apache.commons.math3.util.Pair;
1: 
1: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
0: import org.apache.cassandra.stress.util.Timer;
1: 
1: public abstract class SampledOpDistributionFactory<T> implements OpDistributionFactory
1: {
1: 
0:     final List<Pair<T, Double>> ratios;
1:     final DistributionFactory clustering;
0:     protected SampledOpDistributionFactory(List<Pair<T, Double>> ratios, DistributionFactory clustering)
1:     {
1:         this.ratios = ratios;
1:         this.clustering = clustering;
1:     }
1: 
0:     protected abstract Operation get(Timer timer, PartitionGenerator generator, T key);
1:     protected abstract PartitionGenerator newGenerator();
1: 
0:     public OpDistribution get(Timer timer)
1:     {
1:         PartitionGenerator generator = newGenerator();
1:         List<Pair<Operation, Double>> operations = new ArrayList<>();
0:         for (Pair<T, Double> ratio : ratios)
0:             operations.add(new Pair<>(get(timer, generator, ratio.getFirst()), ratio.getSecond()));
1:         return new SampledOpDistribution(new EnumeratedDistribution<>(operations), clustering.get());
1:     }
1: 
1:     public String desc()
1:     {
1:         List<T> keys = new ArrayList<>();
0:         for (Pair<T, Double> p : ratios)
0:             keys.add(p.getFirst());
1:         return keys.toString();
1:     }
1: 
1:     public Iterable<OpDistributionFactory> each()
1:     {
1:         List<OpDistributionFactory> out = new ArrayList<>();
0:         for (final Pair<T, Double> ratio : ratios)
1:         {
1:             out.add(new OpDistributionFactory()
1:             {
0:                 public OpDistribution get(Timer timer)
1:                 {
0:                     return new FixedOpDistribution(SampledOpDistributionFactory.this.get(timer, newGenerator(), ratio.getFirst()));
1:                 }
1: 
1:                 public String desc()
1:                 {
0:                     return ratio.getFirst().toString();
1:                 }
1: 
1:                 public Iterable<OpDistributionFactory> each()
1:                 {
1:                     return Collections.<OpDistributionFactory>singleton(this);
1:                 }
1:             });
1:         }
1:         return out;
1:     }
1: 
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
0: 
============================================================================