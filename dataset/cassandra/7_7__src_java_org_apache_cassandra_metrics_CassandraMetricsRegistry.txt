1:8896a70: /*
1:8896a70:  * Licensed to the Apache Software Foundation (ASF) under one
1:8896a70:  * or more contributor license agreements.  See the NOTICE file
1:8896a70:  * distributed with this work for additional information
1:8896a70:  * regarding copyright ownership.  The ASF licenses this file
1:8896a70:  * to you under the Apache License, Version 2.0 (the
1:8896a70:  * "License"); you may not use this file except in compliance
1:8896a70:  * with the License.  You may obtain a copy of the License at
1:8896a70:  *
1:8896a70:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8896a70:  *
1:8896a70:  * Unless required by applicable law or agreed to in writing, software
1:8896a70:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8896a70:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8896a70:  * See the License for the specific language governing permissions and
1:8896a70:  * limitations under the License.
1:8896a70:  */
1:8896a70: package org.apache.cassandra.metrics;
1:8896a70: 
1:8896a70: import java.lang.management.ManagementFactory;
1:8896a70: import java.lang.reflect.Method;
1:8896a70: import java.util.Locale;
1:8896a70: import java.util.concurrent.TimeUnit;
1:8896a70: 
1:8896a70: import com.codahale.metrics.*;
1:8896a70: import javax.management.*;
1:8896a70: 
1:8896a70: /**
1:8896a70:  * Makes integrating 3.0 metrics API with 2.0.
1:246f07b:  * <p>
1:8896a70:  * The 3.0 API comes with poor JMX integration
1:246f07b:  * </p>
1:8896a70:  */
1:8896a70: public class CassandraMetricsRegistry extends MetricRegistry
1:8896a70: {
1:8896a70:     public static final CassandraMetricsRegistry Metrics = new CassandraMetricsRegistry();
1:8896a70: 
1:514dcd9:     private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
1:8896a70: 
1:8896a70:     private CassandraMetricsRegistry()
1:8896a70:     {
1:8896a70:         super();
1:8896a70:     }
1:8896a70: 
1:8896a70:     public Counter counter(MetricName name)
1:8896a70:     {
1:8896a70:         Counter counter = counter(name.getMetricName());
1:8896a70:         registerMBean(counter, name.getMBeanName());
1:8896a70: 
1:8896a70:         return counter;
1:8896a70:     }
1:8896a70: 
1:0bd5170:     public Counter counter(MetricName name, MetricName alias)
1:0bd5170:     {
1:0bd5170:         Counter counter = counter(name);
1:0bd5170:         registerAlias(name, alias);
1:0bd5170:         return counter;
1:0bd5170:     }
1:8896a70: 
1:8896a70:     public Meter meter(MetricName name)
1:8896a70:     {
1:8896a70:         Meter meter = meter(name.getMetricName());
1:8896a70:         registerMBean(meter, name.getMBeanName());
1:8896a70: 
1:8896a70:         return meter;
1:8896a70:     }
1:8896a70: 
1:0bd5170:     public Meter meter(MetricName name, MetricName alias)
1:8896a70:     {
1:0bd5170:         Meter meter = meter(name);
1:0bd5170:         registerAlias(name, alias);
1:0bd5170:         return meter;
1:0bd5170:     }
1:0bd5170: 
1:5aa19cb:     public Histogram histogram(MetricName name, boolean considerZeroes)
1:0bd5170:     {
1:2e90259:         Histogram histogram = register(name, new ClearableHistogram(new DecayingEstimatedHistogramReservoir(considerZeroes)));
1:8896a70:         registerMBean(histogram, name.getMBeanName());
1:8896a70: 
1:8896a70:         return histogram;
1:8896a70:     }
1:8896a70: 
1:5aa19cb:     public Histogram histogram(MetricName name, MetricName alias, boolean considerZeroes)
1:0bd5170:     {
1:5aa19cb:         Histogram histogram = histogram(name, considerZeroes);
1:0bd5170:         registerAlias(name, alias);
1:0bd5170:         return histogram;
1:0bd5170:     }
1:0bd5170: 
1:8896a70:     public Timer timer(MetricName name)
1:8896a70:     {
1:2e90259:         Timer timer = register(name, new Timer(new DecayingEstimatedHistogramReservoir()));
1:8896a70:         registerMBean(timer, name.getMBeanName());
1:8896a70: 
1:8896a70:         return timer;
1:8896a70:     }
1:8896a70: 
1:0bd5170:     public Timer timer(MetricName name, MetricName alias)
1:0bd5170:     {
1:0bd5170:         Timer timer = timer(name);
1:0bd5170:         registerAlias(name, alias);
1:0bd5170:         return timer;
1:0bd5170:     }
1:0bd5170: 
1:8896a70:     public <T extends Metric> T register(MetricName name, T metric)
1:8896a70:     {
1:8896a70:         try
1:8896a70:         {
1:8896a70:             register(name.getMetricName(), metric);
1:8896a70:             registerMBean(metric, name.getMBeanName());
1:8896a70:             return metric;
1:8896a70:         }
1:8896a70:         catch (IllegalArgumentException e)
1:8896a70:         {
1:8896a70:             Metric existing = Metrics.getMetrics().get(name.getMetricName());
1:8896a70:             return (T)existing;
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:0bd5170:     public <T extends Metric> T register(MetricName name, MetricName aliasName, T metric)
1:0bd5170:     {
1:0bd5170:         T ret = register(name, metric);
1:0bd5170:         registerAlias(name, aliasName);
1:0bd5170:         return ret;
1:0bd5170:     }
1:0bd5170: 
1:8896a70:     public boolean remove(MetricName name)
1:8896a70:     {
1:8896a70:         boolean removed = remove(name.getMetricName());
1:8896a70: 
1:8896a70:         try
1:8896a70:         {
1:8896a70:             mBeanServer.unregisterMBean(name.getMBeanName());
1:514dcd9:         } catch (Exception ignore) {}
1:8896a70: 
1:8896a70:         return removed;
1:8896a70:     }
1:8896a70: 
1:0bd5170:     public boolean remove(MetricName name, MetricName alias)
1:8896a70:     {
1:0bd5170:         if (remove(name))
1:8896a70:         {
1:0bd5170:             removeAlias(alias);
1:0bd5170:             return true;
1:8896a70:         }
1:0bd5170:         return false;
1:0bd5170:     }
1:01d26dd: 
1:514dcd9:     public void registerMBean(Metric metric, ObjectName name)
2:0bd5170:     {
1:8896a70:         AbstractBean mbean;
1:8896a70: 
1:8896a70:         if (metric instanceof Gauge)
1:8896a70:         {
1:8896a70:             mbean = new JmxGauge((Gauge<?>) metric, name);
1:8896a70:         } else if (metric instanceof Counter)
1:8896a70:         {
1:8896a70:             mbean = new JmxCounter((Counter) metric, name);
1:8896a70:         } else if (metric instanceof Histogram)
1:8896a70:         {
1:8896a70:             mbean = new JmxHistogram((Histogram) metric, name);
1:8896a70:         } else if (metric instanceof Meter)
1:8896a70:         {
1:8896a70:             mbean = new JmxMeter((Meter) metric, name, TimeUnit.SECONDS);
1:8896a70:         } else if (metric instanceof Timer)
1:8896a70:         {
1:8896a70:             mbean = new JmxTimer((Timer) metric, name, TimeUnit.SECONDS, TimeUnit.MICROSECONDS);
1:8896a70:         } else
1:8896a70:         {
1:8896a70:             throw new IllegalArgumentException("Unknown metric type: " + metric.getClass());
1:8896a70:         }
1:8896a70: 
1:8896a70:         try
1:8896a70:         {
1:8896a70:             mBeanServer.registerMBean(mbean, name);
1:514dcd9:         } catch (Exception ignored) {}
1:8896a70:     }
1:8896a70: 
1:0bd5170:     private void registerAlias(MetricName existingName, MetricName aliasName)
1:8896a70:     {
1:0bd5170:         Metric existing = Metrics.getMetrics().get(existingName.getMetricName());
1:0bd5170:         assert existing != null : existingName + " not registered";
1:0bd5170: 
1:0bd5170:         registerMBean(existing, aliasName.getMBeanName());
1:8896a70:     }
1:0bd5170: 
1:0bd5170:     private void removeAlias(MetricName name)
1:8896a70:     {
1:0bd5170:         try
1:8896a70:         {
1:0bd5170:             mBeanServer.unregisterMBean(name.getMBeanName());
1:0bd5170:         } catch (Exception ignore) {}
1:0bd5170:     }
2:0bd5170:     
1:01d26dd:     /**
1:01d26dd:      * Strips a single final '$' from input
1:01d26dd:      * 
1:01d26dd:      * @param s String to strip
1:01d26dd:      * @return a string with one less '$' at end
1:01d26dd:      */
1:01d26dd:     private static String withoutFinalDollar(String s)
1:01d26dd:     {
1:01d26dd:         int l = s.length();
1:01d26dd:         return (l!=0 && '$' == s.charAt(l-1))?s.substring(0,l-1):s;
1:01d26dd:     }
1:0bd5170: 
1:8896a70:     public interface MetricMBean
1:8896a70:     {
1:8896a70:         ObjectName objectName();
1:8896a70:     }
1:8896a70: 
1:8896a70:     private abstract static class AbstractBean implements MetricMBean
1:8896a70:     {
1:8896a70:         private final ObjectName objectName;
1:8896a70: 
1:8896a70:         AbstractBean(ObjectName objectName)
1:8896a70:         {
1:8896a70:             this.objectName = objectName;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public ObjectName objectName()
1:8896a70:         {
1:8896a70:             return objectName;
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70: 
1:8896a70:     public interface JmxGaugeMBean extends MetricMBean
1:8896a70:     {
1:8896a70:         Object getValue();
1:8896a70:     }
1:8896a70: 
1:8896a70:     private static class JmxGauge extends AbstractBean implements JmxGaugeMBean
1:8896a70:     {
1:8896a70:         private final Gauge<?> metric;
1:8896a70: 
1:8896a70:         private JmxGauge(Gauge<?> metric, ObjectName objectName)
1:8896a70:         {
1:8896a70:             super(objectName);
1:8896a70:             this.metric = metric;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public Object getValue()
1:8896a70:         {
1:8896a70:             return metric.getValue();
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70:     public interface JmxHistogramMBean extends MetricMBean
1:8896a70:     {
1:8896a70:         long getCount();
1:8896a70: 
1:8896a70:         long getMin();
1:8896a70: 
1:8896a70:         long getMax();
1:8896a70: 
1:8896a70:         double getMean();
1:8896a70: 
1:8896a70:         double getStdDev();
1:8896a70: 
1:8896a70:         double get50thPercentile();
1:8896a70: 
1:8896a70:         double get75thPercentile();
1:8896a70: 
1:8896a70:         double get95thPercentile();
1:8896a70: 
1:8896a70:         double get98thPercentile();
1:8896a70: 
1:8896a70:         double get99thPercentile();
1:8896a70: 
1:8896a70:         double get999thPercentile();
1:8896a70: 
1:8896a70:         long[] values();
1:8896a70:     }
1:8896a70: 
1:8896a70:     private static class JmxHistogram extends AbstractBean implements JmxHistogramMBean
1:8896a70:     {
1:8896a70:         private final Histogram metric;
1:8896a70: 
1:8896a70:         private JmxHistogram(Histogram metric, ObjectName objectName)
1:8896a70:         {
1:8896a70:             super(objectName);
1:8896a70:             this.metric = metric;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get50thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMedian();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long getCount()
1:8896a70:         {
1:8896a70:             return metric.getCount();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long getMin()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMin();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long getMax()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMax();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getMean()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMean();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getStdDev()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getStdDev();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get75thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get75thPercentile();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get95thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get95thPercentile();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get98thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get98thPercentile();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get99thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get99thPercentile();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get999thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get999thPercentile();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long[] values()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getValues();
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70:     public interface JmxCounterMBean extends MetricMBean
1:8896a70:     {
1:8896a70:         long getCount();
1:8896a70:     }
1:8896a70: 
1:8896a70:     private static class JmxCounter extends AbstractBean implements JmxCounterMBean
1:8896a70:     {
1:8896a70:         private final Counter metric;
1:8896a70: 
1:8896a70:         private JmxCounter(Counter metric, ObjectName objectName)
1:8896a70:         {
1:8896a70:             super(objectName);
1:8896a70:             this.metric = metric;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long getCount()
1:8896a70:         {
1:8896a70:             return metric.getCount();
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70:     public interface JmxMeterMBean extends MetricMBean
1:8896a70:     {
1:8896a70:         long getCount();
1:8896a70: 
1:8896a70:         double getMeanRate();
1:8896a70: 
1:8896a70:         double getOneMinuteRate();
1:8896a70: 
1:8896a70:         double getFiveMinuteRate();
1:8896a70: 
1:8896a70:         double getFifteenMinuteRate();
1:8896a70: 
1:8896a70:         String getRateUnit();
1:8896a70:     }
1:8896a70: 
1:8896a70:     private static class JmxMeter extends AbstractBean implements JmxMeterMBean
1:8896a70:     {
1:8896a70:         private final Metered metric;
1:8896a70:         private final double rateFactor;
1:8896a70:         private final String rateUnit;
1:8896a70: 
1:8896a70:         private JmxMeter(Metered metric, ObjectName objectName, TimeUnit rateUnit)
1:8896a70:         {
1:8896a70:             super(objectName);
1:8896a70:             this.metric = metric;
1:8896a70:             this.rateFactor = rateUnit.toSeconds(1);
1:8896a70:             this.rateUnit = "events/" + calculateRateUnit(rateUnit);
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long getCount()
1:8896a70:         {
1:8896a70:             return metric.getCount();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getMeanRate()
1:8896a70:         {
1:8896a70:             return metric.getMeanRate() * rateFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getOneMinuteRate()
1:8896a70:         {
1:8896a70:             return metric.getOneMinuteRate() * rateFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getFiveMinuteRate()
1:8896a70:         {
1:8896a70:             return metric.getFiveMinuteRate() * rateFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getFifteenMinuteRate()
1:8896a70:         {
1:8896a70:             return metric.getFifteenMinuteRate() * rateFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public String getRateUnit()
1:8896a70:         {
1:8896a70:             return rateUnit;
1:8896a70:         }
1:8896a70: 
1:8896a70:         private String calculateRateUnit(TimeUnit unit)
1:8896a70:         {
1:8896a70:             final String s = unit.toString().toLowerCase(Locale.US);
1:8896a70:             return s.substring(0, s.length() - 1);
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70:     public interface JmxTimerMBean extends JmxMeterMBean
1:8896a70:     {
1:8896a70:         double getMin();
1:8896a70: 
1:8896a70:         double getMax();
1:8896a70: 
1:8896a70:         double getMean();
1:8896a70: 
1:8896a70:         double getStdDev();
1:8896a70: 
1:8896a70:         double get50thPercentile();
1:8896a70: 
1:8896a70:         double get75thPercentile();
1:8896a70: 
1:8896a70:         double get95thPercentile();
1:8896a70: 
1:8896a70:         double get98thPercentile();
1:8896a70: 
1:8896a70:         double get99thPercentile();
1:8896a70: 
1:8896a70:         double get999thPercentile();
1:8896a70: 
1:8896a70:         long[] values();
1:8896a70: 
1:8896a70:         String getDurationUnit();
1:8896a70:     }
1:8896a70: 
1:8896a70:     static class JmxTimer extends JmxMeter implements JmxTimerMBean
1:8896a70:     {
1:8896a70:         private final Timer metric;
1:8896a70:         private final double durationFactor;
1:8896a70:         private final String durationUnit;
1:8896a70: 
1:8896a70:         private JmxTimer(Timer metric,
1:8896a70:                          ObjectName objectName,
1:8896a70:                          TimeUnit rateUnit,
1:8896a70:                          TimeUnit durationUnit)
1:8896a70:         {
1:8896a70:             super(metric, objectName, rateUnit);
1:8896a70:             this.metric = metric;
1:8896a70:             this.durationFactor = 1.0 / durationUnit.toNanos(1);
1:8896a70:             this.durationUnit = durationUnit.toString().toLowerCase(Locale.US);
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get50thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMedian() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getMin()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMin() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getMax()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMax() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getMean()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getMean() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double getStdDev()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getStdDev() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get75thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get75thPercentile() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get95thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get95thPercentile() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get98thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get98thPercentile() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get99thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get99thPercentile() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public double get999thPercentile()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().get999thPercentile() * durationFactor;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public long[] values()
1:8896a70:         {
1:8896a70:             return metric.getSnapshot().getValues();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public String getDurationUnit()
1:8896a70:         {
1:8896a70:             return durationUnit;
1:8896a70:         }
1:8896a70:     }
1:8896a70: 
1:8896a70:     /**
1:8896a70:      * A value class encapsulating a metric's owning class and name.
1:8896a70:      */
1:8896a70:     public static class MetricName implements Comparable<MetricName>
1:8896a70:     {
1:8896a70:         private final String group;
1:8896a70:         private final String type;
1:8896a70:         private final String name;
1:8896a70:         private final String scope;
1:8896a70:         private final String mBeanName;
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Creates a new {@link MetricName} without a scope.
1:8896a70:          *
1:8896a70:          * @param klass the {@link Class} to which the {@link Metric} belongs
1:8896a70:          * @param name  the name of the {@link Metric}
1:8896a70:          */
1:8896a70:         public MetricName(Class<?> klass, String name)
1:8896a70:         {
1:8896a70:             this(klass, name, null);
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Creates a new {@link MetricName} without a scope.
1:8896a70:          *
1:8896a70:          * @param group the group to which the {@link Metric} belongs
1:8896a70:          * @param type  the type to which the {@link Metric} belongs
1:8896a70:          * @param name  the name of the {@link Metric}
1:8896a70:          */
1:8896a70:         public MetricName(String group, String type, String name)
1:8896a70:         {
1:8896a70:             this(group, type, name, null);
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Creates a new {@link MetricName} without a scope.
1:8896a70:          *
1:8896a70:          * @param klass the {@link Class} to which the {@link Metric} belongs
1:8896a70:          * @param name  the name of the {@link Metric}
1:8896a70:          * @param scope the scope of the {@link Metric}
1:8896a70:          */
1:8896a70:         public MetricName(Class<?> klass, String name, String scope)
1:8896a70:         {
1:8896a70:             this(klass.getPackage() == null ? "" : klass.getPackage().getName(),
1:01d26dd:                     withoutFinalDollar(klass.getSimpleName()),
1:8896a70:                     name,
1:8896a70:                     scope);
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Creates a new {@link MetricName} without a scope.
1:8896a70:          *
1:8896a70:          * @param group the group to which the {@link Metric} belongs
1:8896a70:          * @param type  the type to which the {@link Metric} belongs
1:8896a70:          * @param name  the name of the {@link Metric}
1:8896a70:          * @param scope the scope of the {@link Metric}
1:8896a70:          */
1:8896a70:         public MetricName(String group, String type, String name, String scope)
1:8896a70:         {
1:8896a70:             this(group, type, name, scope, createMBeanName(group, type, name, scope));
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Creates a new {@link MetricName} without a scope.
1:8896a70:          *
1:8896a70:          * @param group     the group to which the {@link Metric} belongs
1:8896a70:          * @param type      the type to which the {@link Metric} belongs
1:8896a70:          * @param name      the name of the {@link Metric}
1:8896a70:          * @param scope     the scope of the {@link Metric}
1:8896a70:          * @param mBeanName the 'ObjectName', represented as a string, to use when registering the
1:8896a70:          *                  MBean.
1:8896a70:          */
1:8896a70:         public MetricName(String group, String type, String name, String scope, String mBeanName)
1:8896a70:         {
1:8896a70:             if (group == null || type == null)
1:8896a70:             {
1:8896a70:                 throw new IllegalArgumentException("Both group and type need to be specified");
1:8896a70:             }
1:8896a70:             if (name == null)
1:8896a70:             {
1:8896a70:                 throw new IllegalArgumentException("Name needs to be specified");
1:8896a70:             }
1:8896a70:             this.group = group;
1:8896a70:             this.type = type;
1:8896a70:             this.name = name;
1:8896a70:             this.scope = scope;
1:8896a70:             this.mBeanName = mBeanName;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns the group to which the {@link Metric} belongs. For class-based metrics, this will be
1:8896a70:          * the package name of the {@link Class} to which the {@link Metric} belongs.
1:8896a70:          *
1:8896a70:          * @return the group to which the {@link Metric} belongs
1:8896a70:          */
1:8896a70:         public String getGroup()
1:8896a70:         {
1:8896a70:             return group;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns the type to which the {@link Metric} belongs. For class-based metrics, this will be
1:8896a70:          * the simple class name of the {@link Class} to which the {@link Metric} belongs.
1:8896a70:          *
1:8896a70:          * @return the type to which the {@link Metric} belongs
1:8896a70:          */
1:8896a70:         public String getType()
1:8896a70:         {
1:8896a70:             return type;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns the name of the {@link Metric}.
1:8896a70:          *
1:8896a70:          * @return the name of the {@link Metric}
1:8896a70:          */
1:8896a70:         public String getName()
1:8896a70:         {
1:8896a70:             return name;
1:8896a70:         }
1:8896a70: 
1:8896a70:         public String getMetricName()
1:8896a70:         {
1:8896a70:             return MetricRegistry.name(group, type, name, scope);
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns the scope of the {@link Metric}.
1:8896a70:          *
1:8896a70:          * @return the scope of the {@link Metric}
1:8896a70:          */
1:8896a70:         public String getScope()
1:8896a70:         {
1:8896a70:             return scope;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns {@code true} if the {@link Metric} has a scope, {@code false} otherwise.
1:8896a70:          *
1:8896a70:          * @return {@code true} if the {@link Metric} has a scope
1:8896a70:          */
1:8896a70:         public boolean hasScope()
1:8896a70:         {
1:8896a70:             return scope != null;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * Returns the MBean name for the {@link Metric} identified by this metric name.
1:8896a70:          *
1:8896a70:          * @return the MBean name
1:8896a70:          */
1:8896a70:         public ObjectName getMBeanName()
1:8896a70:         {
1:8896a70: 
1:8896a70:             String mname = mBeanName;
1:8896a70: 
1:8896a70:             if (mname == null)
1:8896a70:                 mname = getMetricName();
1:8896a70: 
1:8896a70:             try
1:8896a70:             {
1:8896a70: 
1:8896a70:                 return new ObjectName(mname);
1:8896a70:             } catch (MalformedObjectNameException e)
1:8896a70:             {
1:8896a70:                 try
1:8896a70:                 {
1:8896a70:                     return new ObjectName(ObjectName.quote(mname));
1:8896a70:                 } catch (MalformedObjectNameException e1)
1:8896a70:                 {
1:8896a70:                     throw new RuntimeException(e1);
1:8896a70:                 }
1:8896a70:             }
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public boolean equals(Object o)
1:8896a70:         {
1:8896a70:             if (this == o)
1:8896a70:             {
1:8896a70:                 return true;
1:8896a70:             }
1:8896a70:             if (o == null || getClass() != o.getClass())
1:8896a70:             {
1:8896a70:                 return false;
1:8896a70:             }
1:8896a70:             final MetricName that = (MetricName) o;
1:8896a70:             return mBeanName.equals(that.mBeanName);
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public int hashCode()
1:8896a70:         {
1:8896a70:             return mBeanName.hashCode();
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public String toString()
1:8896a70:         {
1:8896a70:             return mBeanName;
1:8896a70:         }
1:8896a70: 
1:8896a70:         @Override
1:8896a70:         public int compareTo(MetricName o)
1:8896a70:         {
1:8896a70:             return mBeanName.compareTo(o.mBeanName);
1:8896a70:         }
1:8896a70: 
1:8896a70:         private static String createMBeanName(String group, String type, String name, String scope)
1:8896a70:         {
1:8896a70:             final StringBuilder nameBuilder = new StringBuilder();
1:8896a70:             nameBuilder.append(ObjectName.quote(group));
1:8896a70:             nameBuilder.append(":type=");
1:8896a70:             nameBuilder.append(ObjectName.quote(type));
1:8896a70:             if (scope != null)
1:8896a70:             {
1:8896a70:                 nameBuilder.append(",scope=");
1:8896a70:                 nameBuilder.append(ObjectName.quote(scope));
1:8896a70:             }
1:8896a70:             if (name.length() > 0)
1:8896a70:             {
1:8896a70:                 nameBuilder.append(",name=");
1:8896a70:                 nameBuilder.append(ObjectName.quote(name));
1:8896a70:             }
1:8896a70:             return nameBuilder.toString();
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * If the group is empty, use the package name of the given class. Otherwise use group
1:8896a70:          *
1:8896a70:          * @param group The group to use by default
1:8896a70:          * @param klass The class being tracked
1:8896a70:          * @return a group for the metric
1:8896a70:          */
1:8896a70:         public static String chooseGroup(String group, Class<?> klass)
1:8896a70:         {
1:8896a70:             if (group == null || group.isEmpty())
1:8896a70:             {
1:8896a70:                 group = klass.getPackage() == null ? "" : klass.getPackage().getName();
1:8896a70:             }
1:8896a70:             return group;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * If the type is empty, use the simple name of the given class. Otherwise use type
1:8896a70:          *
1:8896a70:          * @param type  The type to use by default
1:8896a70:          * @param klass The class being tracked
1:8896a70:          * @return a type for the metric
1:8896a70:          */
1:8896a70:         public static String chooseType(String type, Class<?> klass)
1:8896a70:         {
1:8896a70:             if (type == null || type.isEmpty())
1:8896a70:             {
1:01d26dd:                 type = withoutFinalDollar(klass.getSimpleName());
1:8896a70:             }
1:8896a70:             return type;
1:8896a70:         }
1:8896a70: 
1:8896a70:         /**
1:8896a70:          * If name is empty, use the name of the given method. Otherwise use name
1:8896a70:          *
1:8896a70:          * @param name   The name to use by default
1:8896a70:          * @param method The method being tracked
1:8896a70:          * @return a name for the metric
1:8896a70:          */
1:8896a70:         public static String chooseName(String name, Method method)
1:8896a70:         {
1:8896a70:             if (name == null || name.isEmpty())
1:8896a70:             {
1:8896a70:                 name = method.getName();
1:8896a70:             }
1:8896a70:             return name;
1:8896a70:         }
1:8896a70:     }
1:8896a70: }
1:8896a70: 
1:8896a70: 
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1fff069
commit:2691c9e
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.lang.management.ManagementFactory;
1: import java.lang.reflect.Method;
1: import java.util.Locale;
1: import java.util.concurrent.TimeUnit;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import com.codahale.metrics.*;
1: import javax.management.*;
1: 
1: /**
1:  * Makes integrating 3.0 metrics API with 2.0.
0:  * <p/>
1:  * The 3.0 API comes with poor JMX integration
1:  */
1: public class CassandraMetricsRegistry extends MetricRegistry
1: {
0:     protected static final Logger logger = LoggerFactory.getLogger(CassandraMetricsRegistry.class);
1: 
1:     public static final CassandraMetricsRegistry Metrics = new CassandraMetricsRegistry();
0:     private MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
1: 
1:     private CassandraMetricsRegistry()
1:     {
1:         super();
1:     }
1: 
1:     public Counter counter(MetricName name)
1:     {
1:         Counter counter = counter(name.getMetricName());
1:         registerMBean(counter, name.getMBeanName());
1: 
1:         return counter;
1:     }
1: 
1:     public Meter meter(MetricName name)
1:     {
1:         Meter meter = meter(name.getMetricName());
1:         registerMBean(meter, name.getMBeanName());
1: 
1:         return meter;
1:     }
1: 
0:     public Histogram histogram(MetricName name)
1:     {
0:         Histogram histogram = register(name, new ClearableHistogram(new EstimatedHistogramReservoir()));
1:         registerMBean(histogram, name.getMBeanName());
1: 
1:         return histogram;
1:     }
1: 
1:     public Timer timer(MetricName name)
1:     {
0:         Timer timer = register(name, new Timer(new EstimatedHistogramReservoir()));
1:         registerMBean(timer, name.getMBeanName());
1: 
1:         return timer;
1:     }
1: 
1:     public <T extends Metric> T register(MetricName name, T metric)
1:     {
1:         try
1:         {
1:             register(name.getMetricName(), metric);
1:             registerMBean(metric, name.getMBeanName());
1:             return metric;
1:         }
1:         catch (IllegalArgumentException e)
1:         {
1:             Metric existing = Metrics.getMetrics().get(name.getMetricName());
1:             return (T)existing;
1:         }
1:     }
1: 
1:     public boolean remove(MetricName name)
1:     {
1:         boolean removed = remove(name.getMetricName());
1: 
1:         try
1:         {
1:             mBeanServer.unregisterMBean(name.getMBeanName());
0:         } catch (InstanceNotFoundException | MBeanRegistrationException e)
1:         {
0:             logger.debug("Unable to remove mbean");
1:         }
1: 
1:         return removed;
1:     }
1: 
0:     private void registerMBean(Metric metric, ObjectName name)
1:     {
1:         AbstractBean mbean;
1: 
1:         if (metric instanceof Gauge)
1:         {
1:             mbean = new JmxGauge((Gauge<?>) metric, name);
1:         } else if (metric instanceof Counter)
1:         {
1:             mbean = new JmxCounter((Counter) metric, name);
1:         } else if (metric instanceof Histogram)
1:         {
1:             mbean = new JmxHistogram((Histogram) metric, name);
1:         } else if (metric instanceof Meter)
1:         {
1:             mbean = new JmxMeter((Meter) metric, name, TimeUnit.SECONDS);
1:         } else if (metric instanceof Timer)
1:         {
1:             mbean = new JmxTimer((Timer) metric, name, TimeUnit.SECONDS, TimeUnit.MICROSECONDS);
1:         } else
1:         {
1:             throw new IllegalArgumentException("Unknown metric type: " + metric.getClass());
1:         }
1: 
1:         try
1:         {
1:             mBeanServer.registerMBean(mbean, name);
0:         } catch (InstanceAlreadyExistsException e)
1:         {
0:             logger.debug("Metric bean already exists", e);
0:         } catch (MBeanRegistrationException e)
1:         {
0:             logger.debug("Unable to register metric bean", e);
0:         } catch (NotCompliantMBeanException e)
1:         {
0:             logger.warn("Unable to register metric bean", e);
1:         }
1:     }
1: 
1:     public interface MetricMBean
1:     {
1:         ObjectName objectName();
1:     }
1: 
1:     private abstract static class AbstractBean implements MetricMBean
1:     {
1:         private final ObjectName objectName;
1: 
1:         AbstractBean(ObjectName objectName)
1:         {
1:             this.objectName = objectName;
1:         }
1: 
1:         @Override
1:         public ObjectName objectName()
1:         {
1:             return objectName;
1:         }
1:     }
1: 
1: 
1:     public interface JmxGaugeMBean extends MetricMBean
1:     {
1:         Object getValue();
1:     }
1: 
1:     private static class JmxGauge extends AbstractBean implements JmxGaugeMBean
1:     {
1:         private final Gauge<?> metric;
1: 
1:         private JmxGauge(Gauge<?> metric, ObjectName objectName)
1:         {
1:             super(objectName);
1:             this.metric = metric;
1:         }
1: 
1:         @Override
1:         public Object getValue()
1:         {
1:             return metric.getValue();
1:         }
1:     }
1: 
1:     public interface JmxHistogramMBean extends MetricMBean
1:     {
1:         long getCount();
1: 
1:         long getMin();
1: 
1:         long getMax();
1: 
1:         double getMean();
1: 
1:         double getStdDev();
1: 
1:         double get50thPercentile();
1: 
1:         double get75thPercentile();
1: 
1:         double get95thPercentile();
1: 
1:         double get98thPercentile();
1: 
1:         double get99thPercentile();
1: 
1:         double get999thPercentile();
1: 
1:         long[] values();
1:     }
1: 
1:     private static class JmxHistogram extends AbstractBean implements JmxHistogramMBean
1:     {
1:         private final Histogram metric;
1: 
1:         private JmxHistogram(Histogram metric, ObjectName objectName)
1:         {
1:             super(objectName);
1:             this.metric = metric;
1:         }
1: 
1:         @Override
1:         public double get50thPercentile()
1:         {
1:             return metric.getSnapshot().getMedian();
1:         }
1: 
1:         @Override
1:         public long getCount()
1:         {
1:             return metric.getCount();
1:         }
1: 
1:         @Override
1:         public long getMin()
1:         {
1:             return metric.getSnapshot().getMin();
1:         }
1: 
1:         @Override
1:         public long getMax()
1:         {
1:             return metric.getSnapshot().getMax();
1:         }
1: 
1:         @Override
1:         public double getMean()
1:         {
1:             return metric.getSnapshot().getMean();
1:         }
1: 
1:         @Override
1:         public double getStdDev()
1:         {
1:             return metric.getSnapshot().getStdDev();
1:         }
1: 
1:         @Override
1:         public double get75thPercentile()
1:         {
1:             return metric.getSnapshot().get75thPercentile();
1:         }
1: 
1:         @Override
1:         public double get95thPercentile()
1:         {
1:             return metric.getSnapshot().get95thPercentile();
1:         }
1: 
1:         @Override
1:         public double get98thPercentile()
1:         {
1:             return metric.getSnapshot().get98thPercentile();
1:         }
1: 
1:         @Override
1:         public double get99thPercentile()
1:         {
1:             return metric.getSnapshot().get99thPercentile();
1:         }
1: 
1:         @Override
1:         public double get999thPercentile()
1:         {
1:             return metric.getSnapshot().get999thPercentile();
1:         }
1: 
1:         @Override
1:         public long[] values()
1:         {
1:             return metric.getSnapshot().getValues();
1:         }
1:     }
1: 
1:     public interface JmxCounterMBean extends MetricMBean
1:     {
1:         long getCount();
1:     }
1: 
1:     private static class JmxCounter extends AbstractBean implements JmxCounterMBean
1:     {
1:         private final Counter metric;
1: 
1:         private JmxCounter(Counter metric, ObjectName objectName)
1:         {
1:             super(objectName);
1:             this.metric = metric;
1:         }
1: 
1:         @Override
1:         public long getCount()
1:         {
1:             return metric.getCount();
1:         }
1:     }
1: 
1:     public interface JmxMeterMBean extends MetricMBean
1:     {
1:         long getCount();
1: 
1:         double getMeanRate();
1: 
1:         double getOneMinuteRate();
1: 
1:         double getFiveMinuteRate();
1: 
1:         double getFifteenMinuteRate();
1: 
1:         String getRateUnit();
1:     }
1: 
1:     private static class JmxMeter extends AbstractBean implements JmxMeterMBean
1:     {
1:         private final Metered metric;
1:         private final double rateFactor;
1:         private final String rateUnit;
1: 
1:         private JmxMeter(Metered metric, ObjectName objectName, TimeUnit rateUnit)
1:         {
1:             super(objectName);
1:             this.metric = metric;
1:             this.rateFactor = rateUnit.toSeconds(1);
1:             this.rateUnit = "events/" + calculateRateUnit(rateUnit);
1:         }
1: 
1:         @Override
1:         public long getCount()
1:         {
1:             return metric.getCount();
1:         }
1: 
1:         @Override
1:         public double getMeanRate()
1:         {
1:             return metric.getMeanRate() * rateFactor;
1:         }
1: 
1:         @Override
1:         public double getOneMinuteRate()
1:         {
1:             return metric.getOneMinuteRate() * rateFactor;
1:         }
1: 
1:         @Override
1:         public double getFiveMinuteRate()
1:         {
1:             return metric.getFiveMinuteRate() * rateFactor;
1:         }
1: 
1:         @Override
1:         public double getFifteenMinuteRate()
1:         {
1:             return metric.getFifteenMinuteRate() * rateFactor;
1:         }
1: 
1:         @Override
1:         public String getRateUnit()
1:         {
1:             return rateUnit;
1:         }
1: 
1:         private String calculateRateUnit(TimeUnit unit)
1:         {
1:             final String s = unit.toString().toLowerCase(Locale.US);
1:             return s.substring(0, s.length() - 1);
1:         }
1:     }
1: 
1:     public interface JmxTimerMBean extends JmxMeterMBean
1:     {
1:         double getMin();
1: 
1:         double getMax();
1: 
1:         double getMean();
1: 
1:         double getStdDev();
1: 
1:         double get50thPercentile();
1: 
1:         double get75thPercentile();
1: 
1:         double get95thPercentile();
1: 
1:         double get98thPercentile();
1: 
1:         double get99thPercentile();
1: 
1:         double get999thPercentile();
1: 
1:         long[] values();
1: 
1:         String getDurationUnit();
1:     }
1: 
1:     static class JmxTimer extends JmxMeter implements JmxTimerMBean
1:     {
1:         private final Timer metric;
1:         private final double durationFactor;
1:         private final String durationUnit;
1: 
1:         private JmxTimer(Timer metric,
1:                          ObjectName objectName,
1:                          TimeUnit rateUnit,
1:                          TimeUnit durationUnit)
1:         {
1:             super(metric, objectName, rateUnit);
1:             this.metric = metric;
1:             this.durationFactor = 1.0 / durationUnit.toNanos(1);
1:             this.durationUnit = durationUnit.toString().toLowerCase(Locale.US);
1:         }
1: 
1:         @Override
1:         public double get50thPercentile()
1:         {
1:             return metric.getSnapshot().getMedian() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double getMin()
1:         {
1:             return metric.getSnapshot().getMin() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double getMax()
1:         {
1:             return metric.getSnapshot().getMax() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double getMean()
1:         {
1:             return metric.getSnapshot().getMean() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double getStdDev()
1:         {
1:             return metric.getSnapshot().getStdDev() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double get75thPercentile()
1:         {
1:             return metric.getSnapshot().get75thPercentile() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double get95thPercentile()
1:         {
1:             return metric.getSnapshot().get95thPercentile() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double get98thPercentile()
1:         {
1:             return metric.getSnapshot().get98thPercentile() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double get99thPercentile()
1:         {
1:             return metric.getSnapshot().get99thPercentile() * durationFactor;
1:         }
1: 
1:         @Override
1:         public double get999thPercentile()
1:         {
1:             return metric.getSnapshot().get999thPercentile() * durationFactor;
1:         }
1: 
1:         @Override
1:         public long[] values()
1:         {
1:             return metric.getSnapshot().getValues();
1:         }
1: 
1:         @Override
1:         public String getDurationUnit()
1:         {
1:             return durationUnit;
1:         }
1:     }
1: 
1:     /**
1:      * A value class encapsulating a metric's owning class and name.
1:      */
1:     public static class MetricName implements Comparable<MetricName>
1:     {
1:         private final String group;
1:         private final String type;
1:         private final String name;
1:         private final String scope;
1:         private final String mBeanName;
1: 
1:         /**
1:          * Creates a new {@link MetricName} without a scope.
1:          *
1:          * @param klass the {@link Class} to which the {@link Metric} belongs
1:          * @param name  the name of the {@link Metric}
1:          */
1:         public MetricName(Class<?> klass, String name)
1:         {
1:             this(klass, name, null);
1:         }
1: 
1:         /**
1:          * Creates a new {@link MetricName} without a scope.
1:          *
1:          * @param group the group to which the {@link Metric} belongs
1:          * @param type  the type to which the {@link Metric} belongs
1:          * @param name  the name of the {@link Metric}
1:          */
1:         public MetricName(String group, String type, String name)
1:         {
1:             this(group, type, name, null);
1:         }
1: 
1:         /**
1:          * Creates a new {@link MetricName} without a scope.
1:          *
1:          * @param klass the {@link Class} to which the {@link Metric} belongs
1:          * @param name  the name of the {@link Metric}
1:          * @param scope the scope of the {@link Metric}
1:          */
1:         public MetricName(Class<?> klass, String name, String scope)
1:         {
1:             this(klass.getPackage() == null ? "" : klass.getPackage().getName(),
0:                     klass.getSimpleName().replaceAll("\\$$", ""),
1:                     name,
1:                     scope);
1:         }
1: 
1:         /**
1:          * Creates a new {@link MetricName} without a scope.
1:          *
1:          * @param group the group to which the {@link Metric} belongs
1:          * @param type  the type to which the {@link Metric} belongs
1:          * @param name  the name of the {@link Metric}
1:          * @param scope the scope of the {@link Metric}
1:          */
1:         public MetricName(String group, String type, String name, String scope)
1:         {
1:             this(group, type, name, scope, createMBeanName(group, type, name, scope));
1:         }
1: 
1:         /**
1:          * Creates a new {@link MetricName} without a scope.
1:          *
1:          * @param group     the group to which the {@link Metric} belongs
1:          * @param type      the type to which the {@link Metric} belongs
1:          * @param name      the name of the {@link Metric}
1:          * @param scope     the scope of the {@link Metric}
1:          * @param mBeanName the 'ObjectName', represented as a string, to use when registering the
1:          *                  MBean.
1:          */
1:         public MetricName(String group, String type, String name, String scope, String mBeanName)
1:         {
1:             if (group == null || type == null)
1:             {
1:                 throw new IllegalArgumentException("Both group and type need to be specified");
1:             }
1:             if (name == null)
1:             {
1:                 throw new IllegalArgumentException("Name needs to be specified");
1:             }
1:             this.group = group;
1:             this.type = type;
1:             this.name = name;
1:             this.scope = scope;
1:             this.mBeanName = mBeanName;
1:         }
1: 
1:         /**
1:          * Returns the group to which the {@link Metric} belongs. For class-based metrics, this will be
1:          * the package name of the {@link Class} to which the {@link Metric} belongs.
1:          *
1:          * @return the group to which the {@link Metric} belongs
1:          */
1:         public String getGroup()
1:         {
1:             return group;
1:         }
1: 
1:         /**
1:          * Returns the type to which the {@link Metric} belongs. For class-based metrics, this will be
1:          * the simple class name of the {@link Class} to which the {@link Metric} belongs.
1:          *
1:          * @return the type to which the {@link Metric} belongs
1:          */
1:         public String getType()
1:         {
1:             return type;
1:         }
1: 
1:         /**
1:          * Returns the name of the {@link Metric}.
1:          *
1:          * @return the name of the {@link Metric}
1:          */
1:         public String getName()
1:         {
1:             return name;
1:         }
1: 
1:         public String getMetricName()
1:         {
1:             return MetricRegistry.name(group, type, name, scope);
1:         }
1: 
1:         /**
1:          * Returns the scope of the {@link Metric}.
1:          *
1:          * @return the scope of the {@link Metric}
1:          */
1:         public String getScope()
1:         {
1:             return scope;
1:         }
1: 
1:         /**
1:          * Returns {@code true} if the {@link Metric} has a scope, {@code false} otherwise.
1:          *
1:          * @return {@code true} if the {@link Metric} has a scope
1:          */
1:         public boolean hasScope()
1:         {
1:             return scope != null;
1:         }
1: 
1:         /**
1:          * Returns the MBean name for the {@link Metric} identified by this metric name.
1:          *
1:          * @return the MBean name
1:          */
1:         public ObjectName getMBeanName()
1:         {
1: 
1:             String mname = mBeanName;
1: 
1:             if (mname == null)
1:                 mname = getMetricName();
1: 
1:             try
1:             {
1: 
1:                 return new ObjectName(mname);
1:             } catch (MalformedObjectNameException e)
1:             {
1:                 try
1:                 {
1:                     return new ObjectName(ObjectName.quote(mname));
1:                 } catch (MalformedObjectNameException e1)
1:                 {
1:                     throw new RuntimeException(e1);
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public boolean equals(Object o)
1:         {
1:             if (this == o)
1:             {
1:                 return true;
1:             }
1:             if (o == null || getClass() != o.getClass())
1:             {
1:                 return false;
1:             }
1:             final MetricName that = (MetricName) o;
1:             return mBeanName.equals(that.mBeanName);
1:         }
1: 
1:         @Override
1:         public int hashCode()
1:         {
1:             return mBeanName.hashCode();
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return mBeanName;
1:         }
1: 
1:         @Override
1:         public int compareTo(MetricName o)
1:         {
1:             return mBeanName.compareTo(o.mBeanName);
1:         }
1: 
1:         private static String createMBeanName(String group, String type, String name, String scope)
1:         {
1:             final StringBuilder nameBuilder = new StringBuilder();
1:             nameBuilder.append(ObjectName.quote(group));
1:             nameBuilder.append(":type=");
1:             nameBuilder.append(ObjectName.quote(type));
1:             if (scope != null)
1:             {
1:                 nameBuilder.append(",scope=");
1:                 nameBuilder.append(ObjectName.quote(scope));
1:             }
1:             if (name.length() > 0)
1:             {
1:                 nameBuilder.append(",name=");
1:                 nameBuilder.append(ObjectName.quote(name));
1:             }
1:             return nameBuilder.toString();
1:         }
1: 
1:         /**
1:          * If the group is empty, use the package name of the given class. Otherwise use group
1:          *
1:          * @param group The group to use by default
1:          * @param klass The class being tracked
1:          * @return a group for the metric
1:          */
1:         public static String chooseGroup(String group, Class<?> klass)
1:         {
1:             if (group == null || group.isEmpty())
1:             {
1:                 group = klass.getPackage() == null ? "" : klass.getPackage().getName();
1:             }
1:             return group;
1:         }
1: 
1:         /**
1:          * If the type is empty, use the simple name of the given class. Otherwise use type
1:          *
1:          * @param type  The type to use by default
1:          * @param klass The class being tracked
1:          * @return a type for the metric
1:          */
1:         public static String chooseType(String type, Class<?> klass)
1:         {
1:             if (type == null || type.isEmpty())
1:             {
0:                 type = klass.getSimpleName().replaceAll("\\$$", "");
1:             }
1:             return type;
1:         }
1: 
1:         /**
1:          * If name is empty, use the name of the given method. Otherwise use name
1:          *
1:          * @param name   The name to use by default
1:          * @param method The method being tracked
1:          * @return a name for the metric
1:          */
1:         public static String chooseName(String name, Method method)
1:         {
1:             if (name == null || name.isEmpty())
1:             {
1:                 name = method.getName();
1:             }
1:             return name;
1:         }
1:     }
1: }
1: 
1: 
author:Per Otterstrom
-------------------------------------------------------------------------------
commit:2e90259
/////////////////////////////////////////////////////////////////////////
1:         Histogram histogram = register(name, new ClearableHistogram(new DecayingEstimatedHistogramReservoir(considerZeroes)));
/////////////////////////////////////////////////////////////////////////
1:         Timer timer = register(name, new Timer(new DecayingEstimatedHistogramReservoir()));
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Strips a single final '$' from input
1:      * 
1:      * @param s String to strip
1:      * @return a string with one less '$' at end
1:      */
1:     private static String withoutFinalDollar(String s)
1:     {
1:         int l = s.length();
1:         return (l!=0 && '$' == s.charAt(l-1))?s.substring(0,l-1):s;
1:     }
/////////////////////////////////////////////////////////////////////////
1:                     withoutFinalDollar(klass.getSimpleName()),
/////////////////////////////////////////////////////////////////////////
1:                 type = withoutFinalDollar(klass.getSimpleName());
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:5aa19cb
/////////////////////////////////////////////////////////////////////////
1:     public Histogram histogram(MetricName name, boolean considerZeroes)
0:         Histogram histogram = register(name, new ClearableHistogram(new EstimatedHistogramReservoir(considerZeroes)));
1:     public Histogram histogram(MetricName name, MetricName alias, boolean considerZeroes)
1:         Histogram histogram = histogram(name, considerZeroes);
0:         Timer timer = register(name, new Timer(new EstimatedHistogramReservoir(false)));
commit:c8136b9
/////////////////////////////////////////////////////////////////////////
0:     public Histogram histogram(MetricName name, boolean considerZeroes)
0:         Histogram histogram = register(name, new ClearableHistogram(new EstimatedHistogramReservoir(considerZeroes)));
/////////////////////////////////////////////////////////////////////////
0:         Timer timer = register(name, new Timer(new EstimatedHistogramReservoir(false)));
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1:     public Counter counter(MetricName name, MetricName alias)
1:     {
1:         Counter counter = counter(name);
1:         registerAlias(name, alias);
1:         return counter;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Meter meter(MetricName name, MetricName alias)
1:     {
1:         Meter meter = meter(name);
1:         registerAlias(name, alias);
1:         return meter;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public Histogram histogram(MetricName name, MetricName alias)
1:     {
0:         Histogram histogram = histogram(name);
1:         registerAlias(name, alias);
1:         return histogram;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Timer timer(MetricName name, MetricName alias)
1:     {
1:         Timer timer = timer(name);
1:         registerAlias(name, alias);
1:         return timer;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public <T extends Metric> T register(MetricName name, MetricName aliasName, T metric)
1:     {
1:         T ret = register(name, metric);
1:         registerAlias(name, aliasName);
1:         return ret;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean remove(MetricName name, MetricName alias)
1:     {
1:         if (remove(name))
1:         {
1:             removeAlias(alias);
1:             return true;
1:         }
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void registerAlias(MetricName existingName, MetricName aliasName)
0:     {
1:         Metric existing = Metrics.getMetrics().get(existingName.getMetricName());
1:         assert existing != null : existingName + " not registered";
1: 
1:         registerMBean(existing, aliasName.getMBeanName());
0:     }
1: 
1:     private void removeAlias(MetricName name)
0:     {
1:         try
0:         {
1:             mBeanServer.unregisterMBean(name.getMBeanName());
1:         } catch (Exception ignore) {}
0:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:514dcd9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:     private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception ignore) {}
1:     public void registerMBean(Metric metric, ObjectName name)
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception ignored) {}
author:Dave Brosius
-------------------------------------------------------------------------------
commit:01880a4
/////////////////////////////////////////////////////////////////////////
0:         } catch (MBeanRegistrationException | NotCompliantMBeanException e)
commit:246f07b
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * </p>
============================================================================