1:44fa12e: /*
1:44fa12e:  * Licensed to the Apache Software Foundation (ASF) under one
1:44fa12e:  * or more contributor license agreements.  See the NOTICE file
1:44fa12e:  * distributed with this work for additional information
1:44fa12e:  * regarding copyright ownership.  The ASF licenses this file
1:44fa12e:  * to you under the Apache License, Version 2.0 (the
1:44fa12e:  * "License"); you may not use this file except in compliance
1:44fa12e:  * with the License.  You may obtain a copy of the License at
1:44fa12e:  *
1:44fa12e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44fa12e:  *
1:44fa12e:  * Unless required by applicable law or agreed to in writing, software
1:44fa12e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44fa12e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44fa12e:  * See the License for the specific language governing permissions and
1:44fa12e:  * limitations under the License.
1:44fa12e:  */
1:44fa12e: package org.apache.cassandra.cql3.functions;
2:44fa12e: 
1:44fa12e: import com.google.common.base.Objects;
1:b4d7f3b: 
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:44fa12e: 
1:b4d7f3b: public final class FunctionName
1:44fa12e: {
1:b4d7f3b:     public final String keyspace;
1:44fa12e:     public final String name;
1:44fa12e: 
1:b4d7f3b:     public static FunctionName nativeFunction(String name)
1:44fa12e:     {
1:9797511:         return new FunctionName(SchemaConstants.SYSTEM_KEYSPACE_NAME, name);
1:44fa12e:     }
1:44fa12e: 
1:b4d7f3b:     public FunctionName(String keyspace, String name)
1:44fa12e:     {
1:b4d7f3b:         assert name != null : "Name parameter must not be null";
1:c7b02d1:         this.keyspace = keyspace;
1:b4d7f3b:         this.name = name;
1:b4d7f3b:     }
1:44fa12e: 
1:b4d7f3b:     public FunctionName asNativeFunction()
1:b4d7f3b:     {
1:b4d7f3b:         return FunctionName.nativeFunction(name);
1:b4d7f3b:     }
1:b4d7f3b: 
1:b4d7f3b:     public boolean hasKeyspace()
1:b4d7f3b:     {
1:b4d7f3b:         return keyspace != null;
1:44fa12e:     }
1:44fa12e: 
1:44fa12e:     @Override
1:44fa12e:     public final int hashCode()
1:44fa12e:     {
1:b4d7f3b:         return Objects.hashCode(keyspace, name);
1:44fa12e:     }
1:44fa12e: 
1:44fa12e:     @Override
1:44fa12e:     public final boolean equals(Object o)
1:44fa12e:     {
1:44fa12e:         if (!(o instanceof FunctionName))
1:44fa12e:             return false;
1:44fa12e: 
1:44fa12e:         FunctionName that = (FunctionName)o;
1:b4d7f3b:         return Objects.equal(this.keyspace, that.keyspace)
1:44fa12e:             && Objects.equal(this.name, that.name);
1:44fa12e:     }
1:44fa12e: 
1:c7b02d1:     public final boolean equalsNativeFunction(FunctionName nativeFunction)
1:c7b02d1:     {
1:9797511:         assert nativeFunction.keyspace.equals(SchemaConstants.SYSTEM_KEYSPACE_NAME);
1:9797511:         if (this.hasKeyspace() && !this.keyspace.equals(SchemaConstants.SYSTEM_KEYSPACE_NAME))
1:c7b02d1:             return false;
1:c7b02d1: 
1:c7b02d1:         return Objects.equal(this.name, nativeFunction.name);
1:c7b02d1:     }
1:c7b02d1: 
1:44fa12e:     @Override
1:44fa12e:     public String toString()
1:44fa12e:     {
1:b4d7f3b:         return keyspace == null ? name : keyspace + "." + name;
1:44fa12e:     }
1:44fa12e: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         return new FunctionName(SchemaConstants.SYSTEM_KEYSPACE_NAME, name);
/////////////////////////////////////////////////////////////////////////
1:         assert nativeFunction.keyspace.equals(SchemaConstants.SYSTEM_KEYSPACE_NAME);
1:         if (this.hasKeyspace() && !this.keyspace.equals(SchemaConstants.SYSTEM_KEYSPACE_NAME))
commit:794d68b
/////////////////////////////////////////////////////////////////////////
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.db.SystemKeyspace;
1: 
1: public final class FunctionName
1:     public final String keyspace;
1:     public static FunctionName nativeFunction(String name)
0:         return new FunctionName(SystemKeyspace.NAME, name);
1:     public FunctionName(String keyspace, String name)
1:         assert name != null : "Name parameter must not be null";
0:         this.keyspace = keyspace != null ? keyspace : null;
1:         this.name = name;
1:     }
1:     public FunctionName asNativeFunction()
1:     {
1:         return FunctionName.nativeFunction(name);
1:     }
1: 
1:     public boolean hasKeyspace()
1:     {
1:         return keyspace != null;
1:         return Objects.hashCode(keyspace, name);
/////////////////////////////////////////////////////////////////////////
1:         return Objects.equal(this.keyspace, that.keyspace)
1:         return keyspace == null ? name : keyspace + "." + name;
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1:         this.keyspace = keyspace;
/////////////////////////////////////////////////////////////////////////
1:     public final boolean equalsNativeFunction(FunctionName nativeFunction)
1:     {
0:         assert nativeFunction.keyspace.equals(SystemKeyspace.NAME);
0:         if (this.hasKeyspace() && !this.keyspace.equals(SystemKeyspace.NAME))
1:             return false;
1: 
1:         return Objects.equal(this.name, nativeFunction.name);
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import com.google.common.base.Objects;
1: 
0: public class FunctionName
1: {
0:     public final String namespace;
1:     public final String name;
1: 
0:     // Use by toString rather than built from 'bundle' and 'name' so as to
0:     // preserve the original case.
0:     private final String displayName;
1: 
0:     public FunctionName(String name)
1:     {
0:         this("", name);
1:     }
1: 
0:     public FunctionName(String namespace, String name)
1:     {
0:         this.namespace = namespace.toLowerCase();
0:         this.name = name.toLowerCase();
1: 
0:         this.displayName = namespace.isEmpty() ? name : namespace + "::" + name;
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
0:         return Objects.hashCode(namespace, name);
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if (!(o instanceof FunctionName))
1:             return false;
1: 
1:         FunctionName that = (FunctionName)o;
0:         return Objects.equal(this.namespace, that.namespace)
1:             && Objects.equal(this.name, that.name);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return displayName;
1:     }
1: }
============================================================================