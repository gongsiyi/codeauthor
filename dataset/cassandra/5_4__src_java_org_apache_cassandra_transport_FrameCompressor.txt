1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport;
2:6d3a3ee: 
1:6d3a3ee: import java.io.IOException;
1:6d3a3ee: 
1:bc4b008: import io.netty.buffer.ByteBuf;
1:6d3a3ee: import org.xerial.snappy.Snappy;
1:4b1fca7: import org.xerial.snappy.SnappyError;
1:6d3a3ee: 
1:4c129ae: import net.jpountz.lz4.LZ4Factory;
1:4c129ae: 
1:f25da97: import org.apache.cassandra.utils.JVMStabilityInspector;
1:f25da97: 
1:6d3a3ee: public interface FrameCompressor
3:6d3a3ee: {
1:6d3a3ee:     public Frame compress(Frame frame) throws IOException;
1:6d3a3ee:     public Frame decompress(Frame frame) throws IOException;
1:6d3a3ee: 
1:6d3a3ee:     /*
1:6d3a3ee:      * TODO: We can probably do more efficient, like by avoiding copy.
1:6d3a3ee:      * Also, we don't reuse ICompressor because the API doesn't expose enough.
1:6d3a3ee:      */
1:6d3a3ee:     public static class SnappyCompressor implements FrameCompressor
1:6d3a3ee:     {
1:6d3a3ee:         public static final SnappyCompressor instance;
1:6d3a3ee:         static
1:6d3a3ee:         {
1:6d3a3ee:             SnappyCompressor i;
1:6d3a3ee:             try
1:6d3a3ee:             {
1:6d3a3ee:                 i = new SnappyCompressor();
3:6d3a3ee:             }
1:4b1fca7:             catch (Exception e)
1:4b1fca7:             {
1:f25da97:                 JVMStabilityInspector.inspectThrowable(e);
2:4b1fca7:                 i = null;
1:4b1fca7:             }
1:01880a4:             catch (NoClassDefFoundError | SnappyError | UnsatisfiedLinkError e)
1:4b1fca7:             {
1:4b1fca7:                 i = null;
1:4b1fca7:             }
1:6d3a3ee:             instance = i;
1:4b1fca7:         }
1:4c129ae: 
1:6d3a3ee:         private SnappyCompressor()
1:4b1fca7:         {
1:6d3a3ee:             // this would throw java.lang.NoClassDefFoundError if Snappy class
1:6d3a3ee:             // wasn't found at runtime which should be processed by the calling method
1:6d3a3ee:             Snappy.getNativeLibraryVersion();
1:6d3a3ee:         }
1:6d3a3ee: 
1:6d3a3ee:         public Frame compress(Frame frame) throws IOException
1:6d3a3ee:         {
1:f8be23a:             byte[] input = CBUtil.readRawBytes(frame.body);
1:4722fe7:             ByteBuf output = CBUtil.allocator.heapBuffer(Snappy.maxCompressedLength(input.length));
1:6d3a3ee: 
1:bc4b008:             try
1:bc4b008:             {
1:bc4b008:                 int written = Snappy.compress(input, 0, input.length, output.array(), output.arrayOffset());
1:bc4b008:                 output.writerIndex(written);
1:bc4b008:             }
1:bc4b008:             catch (final Throwable e)
1:bc4b008:             {
1:bc4b008:                 output.release();
1:bc4b008:                 throw e;
1:bc4b008:             }
1:bc4b008:             finally
1:bc4b008:             {
1:bc4b008:                 //release the old frame
1:bc4b008:                 frame.release();
1:bc4b008:             }
1:bc4b008: 
1:bc4b008:             return frame.with(output);
1:6d3a3ee:         }
1:6d3a3ee: 
1:6d3a3ee:         public Frame decompress(Frame frame) throws IOException
1:6d3a3ee:         {
1:f8be23a:             byte[] input = CBUtil.readRawBytes(frame.body);
1:6d3a3ee: 
1:6d3a3ee:             if (!Snappy.isValidCompressedBuffer(input, 0, input.length))
1:6d3a3ee:                 throw new ProtocolException("Provided frame does not appear to be Snappy compressed");
1:bc4b008: 
1:4722fe7:             ByteBuf output = CBUtil.allocator.heapBuffer(Snappy.uncompressedLength(input));
1:6d3a3ee: 
1:bc4b008:             try
1:bc4b008:             {
1:bc4b008:                 int size = Snappy.uncompress(input, 0, input.length, output.array(), output.arrayOffset());
1:bc4b008:                 output.writerIndex(size);
1:bc4b008:             }
1:bc4b008:             catch (final Throwable e)
1:bc4b008:             {
1:bc4b008:                 output.release();
1:bc4b008:                 throw e;
1:bc4b008:             }
1:bc4b008:             finally
1:bc4b008:             {
1:bc4b008:                 //release the old frame
1:bc4b008:                 frame.release();
1:bc4b008:             }
1:bc4b008: 
1:bc4b008:             return frame.with(output);
1:6d3a3ee:         }
1:6d3a3ee:     }
1:bc4b008: 
1:4c129ae:     /*
1:4c129ae:      * This is very close to the ICompressor implementation, and in particular
1:4c129ae:      * it also layout the uncompressed size at the beginning of the message to
1:4c129ae:      * make uncompression faster, but contrarly to the ICompressor, that length
1:4c129ae:      * is written in big-endian. The native protocol is entirely big-endian, so
1:4c129ae:      * it feels like putting little-endian here would be a annoying trap for
1:4c129ae:      * client writer.
1:4c129ae:      */
1:4c129ae:     public static class LZ4Compressor implements FrameCompressor
1:4c129ae:     {
1:4c129ae:         public static final LZ4Compressor instance = new LZ4Compressor();
1:4c129ae: 
1:4c129ae:         private static final int INTEGER_BYTES = 4;
1:4c129ae:         private final net.jpountz.lz4.LZ4Compressor compressor;
1:4c129ae:         private final net.jpountz.lz4.LZ4Decompressor decompressor;
1:4c129ae: 
1:4c129ae:         private LZ4Compressor()
1:4c129ae:         {
1:4c129ae:             final LZ4Factory lz4Factory = LZ4Factory.fastestInstance();
1:4c129ae:             compressor = lz4Factory.fastCompressor();
1:4c129ae:             decompressor = lz4Factory.decompressor();
1:4c129ae:         }
1:4c129ae: 
1:4c129ae:         public Frame compress(Frame frame) throws IOException
1:4c129ae:         {
1:f8be23a:             byte[] input = CBUtil.readRawBytes(frame.body);
1:4c129ae: 
1:4c129ae:             int maxCompressedLength = compressor.maxCompressedLength(input.length);
1:4722fe7:             ByteBuf outputBuf = CBUtil.allocator.heapBuffer(INTEGER_BYTES + maxCompressedLength);
1:4c129ae: 
1:bc4b008:             byte[] output = outputBuf.array();
1:bc4b008:             int outputOffset = outputBuf.arrayOffset();
1:bc4b008: 
1:bc4b008:             output[outputOffset + 0] = (byte) (input.length >>> 24);
1:bc4b008:             output[outputOffset + 1] = (byte) (input.length >>> 16);
1:bc4b008:             output[outputOffset + 2] = (byte) (input.length >>>  8);
1:bc4b008:             output[outputOffset + 3] = (byte) (input.length);
1:4c129ae: 
1:4c129ae:             try
1:4c129ae:             {
1:bc4b008:                 int written = compressor.compress(input, 0, input.length, output, outputOffset + INTEGER_BYTES, maxCompressedLength);
1:bc4b008:                 outputBuf.writerIndex(INTEGER_BYTES + written);
1:bc4b008: 
1:bc4b008:                 return frame.with(outputBuf);
1:4c129ae:             }
1:bc4b008:             catch (final Throwable e)
1:4c129ae:             {
1:bc4b008:                 outputBuf.release();
1:bc4b008:                 throw e;
1:bc4b008:             }
1:bc4b008:             finally
1:bc4b008:             {
1:bc4b008:                 //release the old frame
1:bc4b008:                 frame.release();
1:4c129ae:             }
1:4c129ae:         }
1:4c129ae: 
1:4c129ae:         public Frame decompress(Frame frame) throws IOException
1:4c129ae:         {
1:f8be23a:             byte[] input = CBUtil.readRawBytes(frame.body);
1:4c129ae: 
1:4c129ae:             int uncompressedLength = ((input[0] & 0xFF) << 24)
1:4c129ae:                                    | ((input[1] & 0xFF) << 16)
1:4c129ae:                                    | ((input[2] & 0xFF) <<  8)
1:4c129ae:                                    | ((input[3] & 0xFF));
1:4c129ae: 
1:4722fe7:             ByteBuf output = CBUtil.allocator.heapBuffer(uncompressedLength);
1:4c129ae: 
1:4c129ae:             try
1:4c129ae:             {
1:bc4b008:                 int read = decompressor.decompress(input, INTEGER_BYTES, output.array(), output.arrayOffset(), uncompressedLength);
1:4c129ae:                 if (read != input.length - INTEGER_BYTES)
1:4c129ae:                     throw new IOException("Compressed lengths mismatch");
1:4c129ae: 
1:bc4b008:                 output.writerIndex(uncompressedLength);
1:bc4b008: 
1:bc4b008:                 return frame.with(output);
1:bc4b008:             }
1:bc4b008:             catch (final Throwable e)
1:bc4b008:             {
1:bc4b008:                 output.release();
1:bc4b008:                 throw e;
1:4c129ae:             }
1:bc4b008:             finally
1:4c129ae:             {
1:bc4b008:                 //release the old frame
1:bc4b008:                 frame.release();
1:4c129ae:             }
1:4c129ae:         }
1:4c129ae:     }
1:6d3a3ee: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:01880a4
/////////////////////////////////////////////////////////////////////////
1:             catch (NoClassDefFoundError | SnappyError | UnsatisfiedLinkError e)
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:0705e8a
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 JVMStabilityInspector.inspectThrowable(e);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:8a91a1a
commit:4722fe7
/////////////////////////////////////////////////////////////////////////
1:             ByteBuf output = CBUtil.allocator.heapBuffer(Snappy.maxCompressedLength(input.length));
/////////////////////////////////////////////////////////////////////////
1:             ByteBuf output = CBUtil.allocator.heapBuffer(Snappy.uncompressedLength(input));
/////////////////////////////////////////////////////////////////////////
1:             ByteBuf outputBuf = CBUtil.allocator.heapBuffer(INTEGER_BYTES + maxCompressedLength);
/////////////////////////////////////////////////////////////////////////
1:             ByteBuf output = CBUtil.allocator.heapBuffer(uncompressedLength);
commit:bc4b008
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:             ByteBuf output = CBUtil.onHeapAllocator.buffer(Snappy.maxCompressedLength(input.length));
1:             try
1:             {
1:                 int written = Snappy.compress(input, 0, input.length, output.array(), output.arrayOffset());
1:                 output.writerIndex(written);
1:             }
1:             catch (final Throwable e)
1:             {
1:                 output.release();
1:                 throw e;
1:             }
1:             finally
1:             {
1:                 //release the old frame
1:                 frame.release();
1:             }
1: 
1:             return frame.with(output);
/////////////////////////////////////////////////////////////////////////
0:             ByteBuf output = CBUtil.onHeapAllocator.buffer(Snappy.uncompressedLength(input));
1: 
1:             try
1:             {
1:                 int size = Snappy.uncompress(input, 0, input.length, output.array(), output.arrayOffset());
1:                 output.writerIndex(size);
1: 
1:                 //release the old frame
1:                 frame.release();
1:             }
1:             catch (final Throwable e)
1:             {
1:                 output.release();
1:                 throw e;
1:             }
1:             finally
1:             {
1:                 //release the old frame
1:                 frame.release();
1:             }
1: 
1:             return frame.with(output);
/////////////////////////////////////////////////////////////////////////
0:             ByteBuf outputBuf = CBUtil.onHeapAllocator.buffer(INTEGER_BYTES + maxCompressedLength);
1:             byte[] output = outputBuf.array();
1:             int outputOffset = outputBuf.arrayOffset();
1: 
1:             output[outputOffset + 0] = (byte) (input.length >>> 24);
1:             output[outputOffset + 1] = (byte) (input.length >>> 16);
1:             output[outputOffset + 2] = (byte) (input.length >>>  8);
1:             output[outputOffset + 3] = (byte) (input.length);
1:                 int written = compressor.compress(input, 0, input.length, output, outputOffset + INTEGER_BYTES, maxCompressedLength);
1:                 outputBuf.writerIndex(INTEGER_BYTES + written);
1: 
1:                 return frame.with(outputBuf);
1:             catch (final Throwable e)
1:                 outputBuf.release();
1:                 throw e;
1:             }
1:             finally
1:             {
1:                 //release the old frame
1:                 frame.release();
/////////////////////////////////////////////////////////////////////////
0:             ByteBuf output = CBUtil.onHeapAllocator.buffer(uncompressedLength);
1:                 int read = decompressor.decompress(input, INTEGER_BYTES, output.array(), output.arrayOffset(), uncompressedLength);
1:                 output.writerIndex(uncompressedLength);
1: 
1:                 return frame.with(output);
1:             catch (final Throwable e)
1:                 output.release();
1:                 throw e;
1:             }
1:             finally
1:             {
0:                 //release the old frame
0:                 frame.release();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2e456f5
/////////////////////////////////////////////////////////////////////////
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
1:             byte[] input = CBUtil.readRawBytes(frame.body);
1:             byte[] input = CBUtil.readRawBytes(frame.body);
/////////////////////////////////////////////////////////////////////////
1:             byte[] input = CBUtil.readRawBytes(frame.body);
/////////////////////////////////////////////////////////////////////////
1:             byte[] input = CBUtil.readRawBytes(frame.body);
commit:4c129ae
/////////////////////////////////////////////////////////////////////////
0: import net.jpountz.lz4.LZ4Exception;
1: import net.jpountz.lz4.LZ4Factory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /*
1:      * This is very close to the ICompressor implementation, and in particular
1:      * it also layout the uncompressed size at the beginning of the message to
1:      * make uncompression faster, but contrarly to the ICompressor, that length
1:      * is written in big-endian. The native protocol is entirely big-endian, so
1:      * it feels like putting little-endian here would be a annoying trap for
1:      * client writer.
1:      */
1:     public static class LZ4Compressor implements FrameCompressor
1:     {
1:         public static final LZ4Compressor instance = new LZ4Compressor();
1: 
1:         private static final int INTEGER_BYTES = 4;
1:         private final net.jpountz.lz4.LZ4Compressor compressor;
1:         private final net.jpountz.lz4.LZ4Decompressor decompressor;
1: 
1:         private LZ4Compressor()
1:         {
1:             final LZ4Factory lz4Factory = LZ4Factory.fastestInstance();
1:             compressor = lz4Factory.fastCompressor();
1:             decompressor = lz4Factory.decompressor();
1:         }
1: 
1:         public Frame compress(Frame frame) throws IOException
1:         {
0:             byte[] input = new byte[frame.body.readableBytes()];
0:             frame.body.readBytes(input);
1: 
1:             int maxCompressedLength = compressor.maxCompressedLength(input.length);
0:             byte[] output = new byte[INTEGER_BYTES + maxCompressedLength];
1: 
0:             output[0] = (byte) (input.length >>> 24);
0:             output[1] = (byte) (input.length >>> 16);
0:             output[2] = (byte) (input.length >>>  8);
0:             output[3] = (byte) (input.length);
1: 
1:             try
1:             {
0:                 int written = compressor.compress(input, 0, input.length, output, INTEGER_BYTES, maxCompressedLength);
0:                 return frame.with(ChannelBuffers.wrappedBuffer(output, 0, INTEGER_BYTES + written));
1:             }
0:             catch (LZ4Exception e)
1:             {
0:                 throw new IOException(e);
1:             }
1:         }
1: 
1:         public Frame decompress(Frame frame) throws IOException
1:         {
0:             byte[] input = new byte[frame.body.readableBytes()];
0:             frame.body.readBytes(input);
1: 
1:             int uncompressedLength = ((input[0] & 0xFF) << 24)
1:                                    | ((input[1] & 0xFF) << 16)
1:                                    | ((input[2] & 0xFF) <<  8)
1:                                    | ((input[3] & 0xFF));
1: 
0:             byte[] output = new byte[uncompressedLength];
1: 
1:             try
1:             {
0:                 int read = decompressor.decompress(input, INTEGER_BYTES, output, 0, uncompressedLength);
1:                 if (read != input.length - INTEGER_BYTES)
1:                     throw new IOException("Compressed lengths mismatch");
1: 
0:                 return frame.with(ChannelBuffers.wrappedBuffer(output));
1:             }
0:             catch (LZ4Exception e)
1:             {
0:                 throw new IOException(e);
1:             }
1:         }
1:     }
commit:4b1fca7
/////////////////////////////////////////////////////////////////////////
1: import org.xerial.snappy.SnappyError;
/////////////////////////////////////////////////////////////////////////
1:             catch (Exception e)
1:             {
1:                 i = null;
1:             }
0:             catch (SnappyError e)
1:             {
1:                 i = null;
1:             }
0:             catch (UnsatisfiedLinkError e)
1:             {
1:                 i = null;
1:             }
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport;
1: 
1: import java.io.IOException;
1: 
0: import org.jboss.netty.buffer.ChannelBuffers;
1: import org.xerial.snappy.Snappy;
1: 
1: public interface FrameCompressor
1: {
1:     public Frame compress(Frame frame) throws IOException;
1:     public Frame decompress(Frame frame) throws IOException;
1: 
1:     /*
1:      * TODO: We can probably do more efficient, like by avoiding copy.
1:      * Also, we don't reuse ICompressor because the API doesn't expose enough.
1:      */
1:     public static class SnappyCompressor implements FrameCompressor
1:     {
1:         public static final SnappyCompressor instance;
1:         static
1:         {
1:             SnappyCompressor i;
1:             try
1:             {
1:                 i = new SnappyCompressor();
1:             }
0:             catch (NoClassDefFoundError e)
1:             {
0:                 i = null;
1:             }
1:             instance = i;
1:         }
1: 
1:         private SnappyCompressor()
1:         {
1:             // this would throw java.lang.NoClassDefFoundError if Snappy class
1:             // wasn't found at runtime which should be processed by the calling method
1:             Snappy.getNativeLibraryVersion();
1:         }
1: 
1:         public Frame compress(Frame frame) throws IOException
1:         {
0:             byte[] input = new byte[frame.body.readableBytes()];
0:             byte[] output = new byte[Snappy.maxCompressedLength(input.length)];
1: 
0:             frame.body.readBytes(input);
0:             int written = Snappy.compress(input, 0, input.length, output, 0);
0:             return frame.with(ChannelBuffers.wrappedBuffer(output, 0, written));
1:         }
1: 
1:         public Frame decompress(Frame frame) throws IOException
1:         {
0:             byte[] input = new byte[frame.body.readableBytes()];
0:             frame.body.readBytes(input);
1: 
1:             if (!Snappy.isValidCompressedBuffer(input, 0, input.length))
1:                 throw new ProtocolException("Provided frame does not appear to be Snappy compressed");
1: 
0:             byte[] output = new byte[Snappy.uncompressedLength(input)];
0:             int size = Snappy.uncompress(input, 0, input.length, output, 0);
0:             return frame.with(ChannelBuffers.wrappedBuffer(output, 0, size));
1:         }
1:     }
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
0: import io.netty.buffer.Unpooled;
/////////////////////////////////////////////////////////////////////////
0:             return frame.with(Unpooled.wrappedBuffer(output, 0, written));
/////////////////////////////////////////////////////////////////////////
0:             return frame.with(Unpooled.wrappedBuffer(output, 0, size));
/////////////////////////////////////////////////////////////////////////
0:                 return frame.with(Unpooled.wrappedBuffer(output, 0, INTEGER_BYTES + written));
/////////////////////////////////////////////////////////////////////////
0:                 return frame.with(Unpooled.wrappedBuffer(output));
============================================================================