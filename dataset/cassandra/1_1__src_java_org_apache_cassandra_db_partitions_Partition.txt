1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.partitions;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.Slices;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.filter.ColumnFilter;
1:a991b64: import org.apache.cassandra.utils.SearchIterator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * In-memory representation of a Partition.
1:a991b64:  *
1:a991b64:  * Note that most of the storage engine works through iterators (UnfilteredPartitionIterator) to
1:a991b64:  * avoid "materializing" a full partition/query response in memory as much as possible,
1:a991b64:  * and so Partition objects should be use as sparingly as possible. There is a couple
1:a991b64:  * of cases where we do need to represent partition in-memory (memtables and row cache).
1:a991b64:  */
1:a991b64: public interface Partition
1:a991b64: {
1:a991b64:     public CFMetaData metadata();
1:a991b64:     public DecoratedKey partitionKey();
1:a991b64:     public DeletionTime partitionLevelDeletion();
1:a991b64: 
1:a991b64:     public PartitionColumns columns();
1:a991b64: 
1:c055ab9:     public EncodingStats stats();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether the partition object has no informations at all, including any deletion informations.
1:a991b64:      */
1:a991b64:     public boolean isEmpty();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns the row corresponding to the provided clustering, or null if there is not such row.
1:a991b64:      */
1:a991b64:     public Row getRow(Clustering clustering);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns an iterator that allows to search specific rows efficiently.
1:a991b64:      */
1:a991b64:     public SearchIterator<Clustering, Row> searchIterator(ColumnFilter columns, boolean reversed);
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns an UnfilteredRowIterator over all the rows/RT contained by this partition.
1:a991b64:      */
1:a991b64:     public UnfilteredRowIterator unfilteredIterator();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns an UnfilteredRowIterator over the rows/RT contained by this partition
1:a991b64:      * selected by the provided slices.
1:a991b64:      */
1:a991b64:     public UnfilteredRowIterator unfilteredIterator(ColumnFilter columns, Slices slices, boolean reversed);
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1:     public EncodingStats stats();
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.Slices;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.filter.ColumnFilter;
1: import org.apache.cassandra.utils.SearchIterator;
1: 
1: /**
1:  * In-memory representation of a Partition.
1:  *
1:  * Note that most of the storage engine works through iterators (UnfilteredPartitionIterator) to
1:  * avoid "materializing" a full partition/query response in memory as much as possible,
1:  * and so Partition objects should be use as sparingly as possible. There is a couple
1:  * of cases where we do need to represent partition in-memory (memtables and row cache).
1:  */
1: public interface Partition
1: {
1:     public CFMetaData metadata();
1:     public DecoratedKey partitionKey();
1:     public DeletionTime partitionLevelDeletion();
1: 
1:     public PartitionColumns columns();
1: 
0:     public RowStats stats();
1: 
1:     /**
1:      * Whether the partition object has no informations at all, including any deletion informations.
1:      */
1:     public boolean isEmpty();
1: 
1:     /**
1:      * Returns the row corresponding to the provided clustering, or null if there is not such row.
1:      */
1:     public Row getRow(Clustering clustering);
1: 
1:     /**
1:      * Returns an iterator that allows to search specific rows efficiently.
1:      */
1:     public SearchIterator<Clustering, Row> searchIterator(ColumnFilter columns, boolean reversed);
1: 
1:     /**
1:      * Returns an UnfilteredRowIterator over all the rows/RT contained by this partition.
1:      */
1:     public UnfilteredRowIterator unfilteredIterator();
1: 
1:     /**
1:      * Returns an UnfilteredRowIterator over the rows/RT contained by this partition
1:      * selected by the provided slices.
1:      */
1:     public UnfilteredRowIterator unfilteredIterator(ColumnFilter columns, Slices slices, boolean reversed);
1: }
============================================================================