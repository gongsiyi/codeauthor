1:2e3727e: /*
1:2e3727e:  * Licensed to the Apache Software Foundation (ASF) under one
1:2e3727e:  * or more contributor license agreements.  See the NOTICE file
1:2e3727e:  * distributed with this work for additional information
1:2e3727e:  * regarding copyright ownership.  The ASF licenses this file
1:2e3727e:  * to you under the Apache License, Version 2.0 (the
1:2e3727e:  * "License"); you may not use this file except in compliance
1:2e3727e:  * with the License.  You may obtain a copy of the License at
1:2e3727e:  *
1:2e3727e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e3727e:  *
1:2e3727e:  * Unless required by applicable law or agreed to in writing, software
1:2e3727e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e3727e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e3727e:  * See the License for the specific language governing permissions and
1:2e3727e:  * limitations under the License.
1:2e3727e:  */
1:2e3727e: package org.apache.cassandra.cql3;
1:2e3727e: 
1:89464ea: import java.util.List;
1:89464ea: 
1:2e3727e: import org.apache.cassandra.config.ColumnDefinition;
1:2e3727e: import org.apache.cassandra.cql3.functions.Function;
1:2e3727e: import org.apache.cassandra.cql3.statements.CQL3CasRequest;
1:2e3727e: import org.apache.cassandra.db.Clustering;
1:2e3727e: 
1:2e3727e: /**
1:2e3727e:  * Conditions that can be applied to a mutation statement.
1:2e3727e:  *
1:2e3727e:  */
1:2e3727e: public interface Conditions
1:2e3727e: {
1:2e3727e:     /**
1:2e3727e:      * An EMPTY condition
1:2e3727e:      */
1:2e3727e:     static final Conditions EMPTY_CONDITION = ColumnConditions.newBuilder().build();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * IF EXISTS condition
1:2e3727e:      */
1:2e3727e:     static final Conditions IF_EXISTS_CONDITION = new IfExistsCondition();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * IF NOT EXISTS condition
1:2e3727e:      */
1:2e3727e:     static final Conditions IF_NOT_EXISTS_CONDITION = new IfNotExistsCondition();
1:2e3727e: 
1:2e3727e:     /**
1:89464ea:      * Adds the functions used by the conditions to the specified list.
1:89464ea:      * @param functions the list to add to
1:2e3727e:      */
1:89464ea:     void addFunctionsTo(List<Function> functions);
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Returns the column definitions to which apply the conditions.
1:2e3727e:      * @return the column definitions to which apply the conditions.
1:2e3727e:      */
1:2e3727e:     Iterable<ColumnDefinition> getColumns();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Checks if this <code>Conditions</code> is empty.
1:2e3727e:      * @return <code>true</code> if this <code>Conditions</code> is empty, <code>false</code> otherwise.
1:2e3727e:      */
1:2e3727e:     boolean isEmpty();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Checks if this is a IF EXIST condition.
1:2e3727e:      * @return <code>true</code> if this is a IF EXIST condition, <code>false</code> otherwise.
1:2e3727e:      */
1:2e3727e:     boolean isIfExists();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Checks if this is a IF NOT EXIST condition.
1:2e3727e:      * @return <code>true</code> if this is a IF NOT EXIST condition, <code>false</code> otherwise.
1:2e3727e:      */
1:2e3727e:     boolean isIfNotExists();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Checks if some of the conditions apply to static columns.
1:2e3727e:      *
1:2e3727e:      * @return <code>true</code> if some of the conditions apply to static columns, <code>false</code> otherwise.
1:2e3727e:      */
1:2e3727e:     boolean appliesToStaticColumns();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Checks if some of the conditions apply to regular columns.
1:2e3727e:      *
1:2e3727e:      * @return <code>true</code> if some of the conditions apply to regular columns, <code>false</code> otherwise.
1:2e3727e:      */
1:2e3727e:     boolean appliesToRegularColumns();
1:2e3727e: 
1:2e3727e:     /**
1:2e3727e:      * Adds the conditions to the specified CAS request.
1:2e3727e:      *
1:2e3727e:      * @param request the request
1:2e3727e:      * @param clustering the clustering prefix
1:2e3727e:      * @param options the query options
1:2e3727e:      */
1:2e3727e:     public void addConditionsTo(CQL3CasRequest request,
1:2e3727e:                                 Clustering clustering,
1:2e3727e:                                 QueryOptions options);
1:2e3727e: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Adds the functions used by the conditions to the specified list.
1:      * @param functions the list to add to
1:     void addFunctionsTo(List<Function> functions);
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.functions.Function;
1: import org.apache.cassandra.cql3.statements.CQL3CasRequest;
1: import org.apache.cassandra.db.Clustering;
1: 
1: /**
1:  * Conditions that can be applied to a mutation statement.
1:  *
1:  */
1: public interface Conditions
1: {
1:     /**
1:      * An EMPTY condition
1:      */
1:     static final Conditions EMPTY_CONDITION = ColumnConditions.newBuilder().build();
1: 
1:     /**
1:      * IF EXISTS condition
1:      */
1:     static final Conditions IF_EXISTS_CONDITION = new IfExistsCondition();
1: 
1:     /**
1:      * IF NOT EXISTS condition
1:      */
1:     static final Conditions IF_NOT_EXISTS_CONDITION = new IfNotExistsCondition();
1: 
1:     /**
0:      * Returns the functions used by the conditions.
0:      * @return the functions used by the conditions
1:      */
0:     Iterable<Function> getFunctions();
1: 
1:     /**
1:      * Returns the column definitions to which apply the conditions.
1:      * @return the column definitions to which apply the conditions.
1:      */
1:     Iterable<ColumnDefinition> getColumns();
1: 
1:     /**
1:      * Checks if this <code>Conditions</code> is empty.
1:      * @return <code>true</code> if this <code>Conditions</code> is empty, <code>false</code> otherwise.
1:      */
1:     boolean isEmpty();
1: 
1:     /**
1:      * Checks if this is a IF EXIST condition.
1:      * @return <code>true</code> if this is a IF EXIST condition, <code>false</code> otherwise.
1:      */
1:     boolean isIfExists();
1: 
1:     /**
1:      * Checks if this is a IF NOT EXIST condition.
1:      * @return <code>true</code> if this is a IF NOT EXIST condition, <code>false</code> otherwise.
1:      */
1:     boolean isIfNotExists();
1: 
1:     /**
1:      * Checks if some of the conditions apply to static columns.
1:      *
1:      * @return <code>true</code> if some of the conditions apply to static columns, <code>false</code> otherwise.
1:      */
1:     boolean appliesToStaticColumns();
1: 
1:     /**
1:      * Checks if some of the conditions apply to regular columns.
1:      *
1:      * @return <code>true</code> if some of the conditions apply to regular columns, <code>false</code> otherwise.
1:      */
1:     boolean appliesToRegularColumns();
1: 
1:     /**
1:      * Adds the conditions to the specified CAS request.
1:      *
1:      * @param request the request
1:      * @param clustering the clustering prefix
1:      * @param options the query options
1:      */
1:     public void addConditionsTo(CQL3CasRequest request,
1:                                 Clustering clustering,
1:                                 QueryOptions options);
1: }
============================================================================