1:1adcd1c: /*
1:1adcd1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:1adcd1c:  * or more contributor license agreements.  See the NOTICE file
1:1adcd1c:  * distributed with this work for additional information
1:1adcd1c:  * regarding copyright ownership.  The ASF licenses this file
1:1adcd1c:  * to you under the Apache License, Version 2.0 (the
1:1adcd1c:  * "License"); you may not use this file except in compliance
1:1adcd1c:  * with the License.  You may obtain a copy of the License at
3:1adcd1c:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1adcd1c:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1adcd1c:  */
1:80d3dec: package org.apache.cassandra.io.util;
1:1adcd1c: 
1:c18ce58: import java.io.DataInput;
1:80d3dec: import java.io.IOException;
1:ce63ccc: import java.nio.ByteBuffer;
1:ce63ccc: import java.nio.ByteOrder;
6:80d3dec: 
1:ce63ccc: import com.google.common.annotations.VisibleForTesting;
1:ce63ccc: import com.google.common.primitives.Ints;
1:ce63ccc: 
1:ce63ccc: import org.apache.cassandra.utils.memory.MemoryUtil;
1:ce63ccc: 
1:ce63ccc: public class MemoryInputStream extends RebufferingInputStream implements DataInput
3:80d3dec: {
1:c33ccd9:     private final Memory mem;
1:ce63ccc:     private final int bufferSize;
1:ce63ccc:     private long offset;
1:ce63ccc: 
1:80d3dec: 
1:c33ccd9:     public MemoryInputStream(Memory mem)
1:80d3dec:     {
1:ce63ccc:         this(mem, Ints.saturatedCast(mem.size));
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @VisibleForTesting
1:ce63ccc:     public MemoryInputStream(Memory mem, int bufferSize)
1:ce63ccc:     {
1:ce63ccc:         super(getByteBuffer(mem.peer, bufferSize));
1:80d3dec:         this.mem = mem;
1:ce63ccc:         this.bufferSize = bufferSize;
1:ce63ccc:         this.offset = mem.peer + bufferSize;
1:c18ce58:     }
1:c18ce58: 
1:ce63ccc:     @Override
1:ce63ccc:     protected void reBuffer() throws IOException
1:c18ce58:     {
1:ce63ccc:         if (offset - mem.peer >= mem.size())
1:ce63ccc:             return;
1:ce63ccc: 
1:ce63ccc:         buffer = getByteBuffer(offset, Math.min(bufferSize, Ints.saturatedCast(memRemaining())));
1:ce63ccc:         offset += buffer.capacity();
1:1adcd1c:     }
1:80d3dec: 
1:ce63ccc:     @Override
1:ce63ccc:     public int available()
1:80d3dec:     {
1:ce63ccc:         return Ints.saturatedCast(buffer.remaining() + memRemaining());
4:80d3dec:     }
1:80d3dec: 
1:ce63ccc:     private long memRemaining()
1:80d3dec:     {
1:ce63ccc:         return mem.size + mem.peer - offset;
1:80d3dec:     }
1:80d3dec: 
1:ce63ccc:     private static ByteBuffer getByteBuffer(long offset, int length)
1:80d3dec:     {
1:2f41243:         return MemoryUtil.getByteBuffer(offset, length, ByteOrder.BIG_ENDIAN);
1:80d3dec:     }
1:80d3dec: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1:         return MemoryUtil.getByteBuffer(offset, length, ByteOrder.BIG_ENDIAN);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.primitives.Ints;
1: 
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: 
1: public class MemoryInputStream extends RebufferingInputStream implements DataInput
1:     private final int bufferSize;
1:     private long offset;
1: 
1:         this(mem, Ints.saturatedCast(mem.size));
1:     }
1: 
1:     @VisibleForTesting
1:     public MemoryInputStream(Memory mem, int bufferSize)
1:     {
1:         super(getByteBuffer(mem.peer, bufferSize));
1:         this.bufferSize = bufferSize;
1:         this.offset = mem.peer + bufferSize;
1:     @Override
1:     protected void reBuffer() throws IOException
1:         if (offset - mem.peer >= mem.size())
1:             return;
1: 
1:         buffer = getByteBuffer(offset, Math.min(bufferSize, Ints.saturatedCast(memRemaining())));
1:         offset += buffer.capacity();
1:     @Override
1:     public int available()
1:         return Ints.saturatedCast(buffer.remaining() + memRemaining());
1:     private long memRemaining()
1:         return mem.size + mem.peer - offset;
1:     private static ByteBuffer getByteBuffer(long offset, int length)
0:         return MemoryUtil.getByteBuffer(offset, length).order(ByteOrder.BIG_ENDIAN);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
0:     public void seek(long pos)
0:     public long getPosition()
0:     public long getPositionLimit()
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:c18ce58
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
0: public class MemoryInputStream extends AbstractDataInput implements DataInput
/////////////////////////////////////////////////////////////////////////
0:     protected void seek(long pos)
0:         position = (int) pos;
0:     protected long getPosition()
0:     protected long getPositionLimit()
0:         return mem.size();
1:     }
1: 
0:     protected long length()
1:     {
0:         return mem.size();
commit:af97b0f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cache.RefCountedMemory;
0:     private final RefCountedMemory mem;
0:     public MemoryInputStream(RefCountedMemory mem)
commit:a28b9b6
/////////////////////////////////////////////////////////////////////////
0: public class MemoryInputStream extends AbstractDataInput
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: }
commit:2b3585a
/////////////////////////////////////////////////////////////////////////
0: import java.io.Closeable;
commit:80d3dec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.util;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: 
0: import org.apache.cassandra.cache.FreeableMemory;
1: 
0: import com.sun.xml.internal.ws.Closeable;
1: 
0: public class MemoryInputStream extends AbstractDataInput implements DataInput, Closeable
1: {
0:     private final FreeableMemory mem;
0:     private int position = 0;
1:     
0:     public MemoryInputStream(FreeableMemory mem)
1:     {
1:         this.mem = mem;
1:     }
1:     
0:     public int read() throws IOException
1:     {       
0:         return mem.getValidByte(position++) & 0xFF;
1:     }
1:     
0:     protected void seekInternal(int pos)
1:     {
0:         position = pos;
1:     }
1:     
0:     protected int getPosition()
1:     {
0:         return position;
1:     }
1:     
0:     public int skipBytes(int n) throws IOException
1:     {
0:         seekInternal(getPosition() + n);
0:         return position;
1:     }
1:     
0:     public void close()
1:     {
0:         // do nothing.
1:     }
1: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:c33ccd9
/////////////////////////////////////////////////////////////////////////
1:     private final Memory mem;
1:     public MemoryInputStream(Memory mem)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     {
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     {
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.io.util;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:6fa1eaa
/////////////////////////////////////////////////////////////////////////
0:         return mem.getByte(position++) & 0xFF;
0: 
0:     public void readFully(byte[] buffer, int offset, int count) throws IOException
0:     {
0:         mem.getBytes(position, buffer, offset, count);
0:         position += count;
0:     }
0: 
============================================================================