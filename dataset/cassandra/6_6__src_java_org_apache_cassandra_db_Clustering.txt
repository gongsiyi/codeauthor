1:a991b64: /*
1:2f41243: * Licensed to the Apache Software Foundation (ASF) under one
1:2f41243: * or more contributor license agreements.  See the NOTICE file
1:2f41243: * distributed with this work for additional information
1:2f41243: * regarding copyright ownership.  The ASF licenses this file
1:2f41243: * to you under the Apache License, Version 2.0 (the
1:2f41243: * "License"); you may not use this file except in compliance
1:2f41243: * with the License.  You may obtain a copy of the License at
1:2f41243: *
1:2f41243: *    http://www.apache.org/licenses/LICENSE-2.0
1:2f41243: *
1:2f41243: * Unless required by applicable law or agreed to in writing,
1:2f41243: * software distributed under the License is distributed on an
1:2f41243: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2f41243: * KIND, either express or implied.  See the License for the
1:2f41243: * specific language governing permissions and limitations
1:2f41243: * under the License.
1:2f41243: */
1:a991b64: package org.apache.cassandra.db;
13:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.nio.ByteBuffer;
1:2f41243: import java.util.List;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.marshal.AbstractType;
1:2f41243: import org.apache.cassandra.io.util.DataInputBuffer;
1:2f41243: import org.apache.cassandra.io.util.DataInputPlus;
1:2f41243: import org.apache.cassandra.io.util.DataOutputBuffer;
1:2f41243: import org.apache.cassandra.io.util.DataOutputPlus;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:2f41243: import static org.apache.cassandra.db.AbstractBufferClusteringPrefix.EMPTY_VALUES_ARRAY;
1:2f41243: 
1:2f41243: public interface Clustering extends ClusteringPrefix
1:2457599: {
1:a991b64:     public static final Serializer serializer = new Serializer();
1:a991b64: 
1:2f41243:     public long unsharedHeapSizeExcludingData();
1:2f41243: 
1:2f41243:     public default Clustering copy(AbstractAllocator allocator)
1:2f41243:     {
1:2f41243:         // Important for STATIC_CLUSTERING (but must copy empty native clustering types).
1:2f41243:         if (size() == 0)
1:2f41243:             return kind() == Kind.STATIC_CLUSTERING ? this : new BufferClustering(EMPTY_VALUES_ARRAY);
1:2f41243: 
1:2f41243:         ByteBuffer[] newValues = new ByteBuffer[size()];
1:2f41243:         for (int i = 0; i < size(); i++)
1:2f41243:         {
1:2f41243:             ByteBuffer val = get(i);
1:2f41243:             newValues[i] = val == null ? null : allocator.clone(val);
1:2f41243:         }
1:2f41243:         return new BufferClustering(newValues);
1:2f41243:     }
1:2f41243: 
1:2f41243:     public default String toString(CFMetaData metadata)
1:2f41243:     {
1:2f41243:         StringBuilder sb = new StringBuilder();
1:2f41243:         for (int i = 0; i < size(); i++)
1:2f41243:         {
1:2f41243:             ColumnDefinition c = metadata.clusteringColumns().get(i);
1:2f41243:             sb.append(i == 0 ? "" : ", ").append(c.name).append('=').append(get(i) == null ? "null" : c.type.getString(get(i)));
1:2f41243:         }
1:2f41243:         return sb.toString();
1:2f41243:     }
1:2f41243: 
1:2f41243:     public default String toCQLString(CFMetaData metadata)
1:2f41243:     {
1:2f41243:         StringBuilder sb = new StringBuilder();
1:2f41243:         for (int i = 0; i < size(); i++)
1:2f41243:         {
1:2f41243:             ColumnDefinition c = metadata.clusteringColumns().get(i);
1:2f41243:             sb.append(i == 0 ? "" : ", ").append(c.type.getString(get(i)));
1:2f41243:         }
1:2f41243:         return sb.toString();
1:2f41243:     }
1:2f41243: 
1:2f41243:     public static Clustering make(ByteBuffer... values)
1:2f41243:     {
1:2f41243:         return new BufferClustering(values);
1:2f41243:     }
1:2f41243: 
2:a991b64:     /**
1:a991b64:      * The special cased clustering used by all static rows. It is a special case in the
1:a991b64:      * sense that it's always empty, no matter how many clustering columns the table has.
3:a991b64:      */
1:2f41243:     public static final Clustering STATIC_CLUSTERING = new BufferClustering(EMPTY_VALUES_ARRAY)
15:a991b64:     {
3:a991b64:         @Override
2:a991b64:         public Kind kind()
1:a991b64:         {
1:a991b64:             return Kind.STATIC_CLUSTERING;
15:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
1:8c64cef:         public String toString()
1:a991b64:         {
1:a991b64:             return "STATIC";
1:a991b64:         }
1:a991b64: 
1:a991b64:         @Override
3:a991b64:         public String toString(CFMetaData metadata)
1:a991b64:         {
1:8c64cef:             return toString();
1:a991b64:         }
1:a991b64:     };
1:a991b64: 
1:a991b64:     /** Empty clustering for tables having no clustering columns. */
1:2f41243:     public static final Clustering EMPTY = new BufferClustering(EMPTY_VALUES_ARRAY)
1:2457599:     {
1:2457599:         @Override
1:2457599:         public String toString(CFMetaData metadata)
1:2457599:         {
1:2457599:             return "EMPTY";
1:2457599:         }
1:2457599:     };
1:2457599: 
1:a991b64:     /**
1:a991b64:      * Serializer for Clustering object.
3:a991b64:      * <p>
1:a991b64:      * Because every clustering in a given table must have the same size (ant that size cannot actually change once the table
1:a991b64:      * has been defined), we don't record that size.
1:a991b64:      */
1:a991b64:     public static class Serializer
1:a991b64:     {
1:a991b64:         public void serialize(Clustering clustering, DataOutputPlus out, int version, List<AbstractType<?>> types) throws IOException
1:a991b64:         {
1:2457599:             assert clustering != STATIC_CLUSTERING : "We should never serialize a static clustering";
1:2350320:             assert clustering.size() == types.size() : "Invalid clustering for the table: " + clustering;
1:a991b64:             ClusteringPrefix.serializer.serializeValuesWithoutSize(clustering, out, version, types);
1:2457599:         }
1:2457599: 
1:b99c863:         public ByteBuffer serialize(Clustering clustering, int version, List<AbstractType<?>> types)
1:b99c863:         {
1:127f7c5:             try (DataOutputBuffer buffer = new DataOutputBuffer((int)serializedSize(clustering, version, types)))
1:b99c863:             {
1:b99c863:                 serialize(clustering, buffer, version, types);
1:b99c863:                 return buffer.buffer();
1:b99c863:             }
1:b99c863:             catch (IOException e)
1:b99c863:             {
1:b99c863:                 throw new RuntimeException("Writting to an in-memory buffer shouldn't trigger an IOException", e);
1:b99c863:             }
1:b99c863:         }
1:b99c863: 
1:03f72ac:         public long serializedSize(Clustering clustering, int version, List<AbstractType<?>> types)
1:a991b64:         {
1:03f72ac:             return ClusteringPrefix.serializer.valuesWithoutSizeSerializedSize(clustering, version, types);
1:a991b64:         }
1:a991b64: 
1:ef5bbed:         public void skip(DataInputPlus in, int version, List<AbstractType<?>> types) throws IOException
1:ef5bbed:         {
1:ef5bbed:             if (!types.isEmpty())
1:ef5bbed:                 ClusteringPrefix.serializer.skipValuesWithoutSize(in, types.size(), version, types);
1:ef5bbed:         }
1:ef5bbed: 
1:2457599:         public Clustering deserialize(DataInputPlus in, int version, List<AbstractType<?>> types) throws IOException
1:a991b64:         {
1:2457599:             if (types.isEmpty())
1:2457599:                 return EMPTY;
1:a991b64: 
1:2457599:             ByteBuffer[] values = ClusteringPrefix.serializer.deserializeValuesWithoutSize(in, types.size(), version, types);
1:2f41243:             return new BufferClustering(values);
1:a991b64:         }
1:b99c863: 
1:b99c863:         public Clustering deserialize(ByteBuffer in, int version, List<AbstractType<?>> types)
1:b99c863:         {
1:127f7c5:             try (DataInputBuffer buffer = new DataInputBuffer(in, true))
1:b99c863:             {
1:b99c863:                 return deserialize(buffer, version, types);
1:b99c863:             }
1:b99c863:             catch (IOException e)
1:b99c863:             {
1:b99c863:                 throw new RuntimeException("Reading from an in-memory buffer shouldn't trigger an IOException", e);
1:b99c863:             }
1:b99c863:         }
1:a991b64:     }
1:a991b64: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1:         public void skip(DataInputPlus in, int version, List<AbstractType<?>> types) throws IOException
1:         {
1:             if (!types.isEmpty())
1:                 ClusteringPrefix.serializer.skipValuesWithoutSize(in, types.size(), version, types);
1:         }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: import java.util.List;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import static org.apache.cassandra.db.AbstractBufferClusteringPrefix.EMPTY_VALUES_ARRAY;
1: 
1: public interface Clustering extends ClusteringPrefix
1:     public long unsharedHeapSizeExcludingData();
1: 
1:     public default Clustering copy(AbstractAllocator allocator)
1:     {
1:         // Important for STATIC_CLUSTERING (but must copy empty native clustering types).
1:         if (size() == 0)
1:             return kind() == Kind.STATIC_CLUSTERING ? this : new BufferClustering(EMPTY_VALUES_ARRAY);
1: 
1:         ByteBuffer[] newValues = new ByteBuffer[size()];
1:         for (int i = 0; i < size(); i++)
1:         {
1:             ByteBuffer val = get(i);
1:             newValues[i] = val == null ? null : allocator.clone(val);
1:         }
1:         return new BufferClustering(newValues);
1:     }
1: 
1:     public default String toString(CFMetaData metadata)
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         for (int i = 0; i < size(); i++)
1:         {
1:             ColumnDefinition c = metadata.clusteringColumns().get(i);
1:             sb.append(i == 0 ? "" : ", ").append(c.name).append('=').append(get(i) == null ? "null" : c.type.getString(get(i)));
1:         }
1:         return sb.toString();
1:     }
1: 
1:     public default String toCQLString(CFMetaData metadata)
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         for (int i = 0; i < size(); i++)
1:         {
1:             ColumnDefinition c = metadata.clusteringColumns().get(i);
1:             sb.append(i == 0 ? "" : ", ").append(c.type.getString(get(i)));
1:         }
1:         return sb.toString();
1:     }
1: 
1:     public static Clustering make(ByteBuffer... values)
1:     {
1:         return new BufferClustering(values);
1:     }
1: 
1:     public static final Clustering STATIC_CLUSTERING = new BufferClustering(EMPTY_VALUES_ARRAY)
/////////////////////////////////////////////////////////////////////////
1:     public static final Clustering EMPTY = new BufferClustering(EMPTY_VALUES_ARRAY)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return new BufferClustering(values);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.*;
/////////////////////////////////////////////////////////////////////////
1:             try (DataOutputBuffer buffer = new DataOutputBuffer((int)serializedSize(clustering, version, types)))
/////////////////////////////////////////////////////////////////////////
1:             try (DataInputBuffer buffer = new DataInputBuffer(in, true))
commit:e777301
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.*;
/////////////////////////////////////////////////////////////////////////
0:             try (DataOutputBuffer buffer = new DataOutputBuffer((int)serializedSize(clustering, version, types)))
/////////////////////////////////////////////////////////////////////////
0:             try (DataInputBuffer buffer = new DataInputBuffer(in, true))
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:b99c863
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataInputBuffer;
0: import org.apache.cassandra.io.util.DataOutputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer serialize(Clustering clustering, int version, List<AbstractType<?>> types)
1:         {
0:             try
1:             {
0:                 DataOutputBuffer buffer = new DataOutputBuffer((int)serializedSize(clustering, version, types));
1:                 serialize(clustering, buffer, version, types);
1:                 return buffer.buffer();
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException("Writting to an in-memory buffer shouldn't trigger an IOException", e);
1:             }
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         public Clustering deserialize(ByteBuffer in, int version, List<AbstractType<?>> types)
1:         {
0:             try
1:             {
0:                 DataInputBuffer buffer = new DataInputBuffer(in, true);
1:                 return deserialize(buffer, version, types);
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException("Reading from an in-memory buffer shouldn't trigger an IOException", e);
1:             }
1:         }
commit:2350320
/////////////////////////////////////////////////////////////////////////
1:             assert clustering.size() == types.size() : "Invalid clustering for the table: " + clustering;
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
0: public class Clustering extends AbstractClusteringPrefix
/////////////////////////////////////////////////////////////////////////
0:     public static final Clustering STATIC_CLUSTERING = new Clustering(EMPTY_VALUES_ARRAY)
/////////////////////////////////////////////////////////////////////////
0:     public static final Clustering EMPTY = new Clustering(EMPTY_VALUES_ARRAY)
1:     {
1:         @Override
1:         public String toString(CFMetaData metadata)
1:         {
1:             return "EMPTY";
1:         }
1:     };
1: 
0:     public Clustering(ByteBuffer... values)
1:     {
0:         super(Kind.CLUSTERING, values);
1:     }
0:     public Clustering copy(AbstractAllocator allocator)
0:         // Important for STATIC_CLUSTERING (but no point in being wasteful in general).
0:         if (size() == 0)
0:             return this;
1: 
0:         ByteBuffer[] newValues = new ByteBuffer[size()];
0:             newValues[i] = values[i] == null ? null : allocator.clone(values[i]);
0:         return new Clustering(newValues);
/////////////////////////////////////////////////////////////////////////
0:             sb.append(i == 0 ? "" : ", ").append(c.name).append('=').append(get(i) == null ? "null" : c.type.getString(get(i)));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             assert clustering != STATIC_CLUSTERING : "We should never serialize a static clustering";
/////////////////////////////////////////////////////////////////////////
1:         public Clustering deserialize(DataInputPlus in, int version, List<AbstractType<?>> types) throws IOException
1:             if (types.isEmpty())
1:                 return EMPTY;
1:             ByteBuffer[] values = ClusteringPrefix.serializer.deserializeValuesWithoutSize(in, types.size(), version, types);
0:             return new Clustering(values);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
0: import java.io.DataInput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: import java.util.*;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
0:  * The clustering column values for a row.
1:  * <p>
0:  * A {@code Clustering} is a {@code ClusteringPrefix} that must always be "complete", i.e. have
0:  * as many values as there is clustering columns in the table it is part of. It is the clustering
0:  * prefix used by rows.
1:  * <p>
0:  * Note however that while it's size must be equal to the table clustering size, a clustering can have
0:  * {@code null} values, and this mostly for thrift backward compatibility (in practice, if a value is null,
0:  * all of the following ones will be too because that's what thrift allows, but it's never assumed by the
0:  * code so we could start generally allowing nulls for clustering columns if we wanted to).
1:  */
0: public abstract class Clustering extends AbstractClusteringPrefix
1: {
1:     public static final Serializer serializer = new Serializer();
1: 
1:     /**
1:      * The special cased clustering used by all static rows. It is a special case in the
1:      * sense that it's always empty, no matter how many clustering columns the table has.
1:      */
0:     public static final Clustering STATIC_CLUSTERING = new EmptyClustering()
1:     {
1:         @Override
1:         public Kind kind()
1:         {
1:             return Kind.STATIC_CLUSTERING;
1:         }
1: 
1:         @Override
1:         public String toString(CFMetaData metadata)
1:         {
1:             return "STATIC";
1:         }
1:     };
1: 
1:     /** Empty clustering for tables having no clustering columns. */
0:     public static final Clustering EMPTY = new EmptyClustering();
1: 
1:     public Kind kind()
1:     {
0:         return Kind.CLUSTERING;
1:     }
1: 
0:     public Clustering takeAlias()
1:     {
0:         ByteBuffer[] values = new ByteBuffer[size()];
0:         for (int i = 0; i < size(); i++)
0:             values[i] = get(i);
0:         return new SimpleClustering(values);
1:     }
1: 
1:     public String toString(CFMetaData metadata)
1:     {
0:         StringBuilder sb = new StringBuilder();
0:         for (int i = 0; i < size(); i++)
1:         {
0:             ColumnDefinition c = metadata.clusteringColumns().get(i);
0:             sb.append(i == 0 ? "" : ", ").append(c.name).append("=").append(get(i) == null ? "null" : c.type.getString(get(i)));
1:         }
0:         return sb.toString();
1:     }
1: 
0:     public String toCQLString(CFMetaData metadata)
1:     {
0:         StringBuilder sb = new StringBuilder();
0:         for (int i = 0; i < size(); i++)
1:         {
0:             ColumnDefinition c = metadata.clusteringColumns().get(i);
0:             sb.append(i == 0 ? "" : ", ").append(c.type.getString(get(i)));
1:         }
0:         return sb.toString();
1:     }
1: 
0:     private static class EmptyClustering extends Clustering
1:     {
0:         private static final ByteBuffer[] EMPTY_VALUES_ARRAY = new ByteBuffer[0];
1: 
0:         public int size()
1:         {
0:             return 0;
1:         }
1: 
0:         public ByteBuffer get(int i)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public ByteBuffer[] getRawValues()
1:         {
0:             return EMPTY_VALUES_ARRAY;
1:         }
1: 
1:         @Override
0:         public Clustering takeAlias()
1:         {
0:             return this;
1:         }
1: 
1:         @Override
0:         public long unsharedHeapSize()
1:         {
0:             return 0;
1:         }
1: 
1:         @Override
1:         public String toString(CFMetaData metadata)
1:         {
0:             return "EMPTY";
1:         }
1:     }
1: 
1:     /**
1:      * Serializer for Clustering object.
1:      * <p>
1:      * Because every clustering in a given table must have the same size (ant that size cannot actually change once the table
1:      * has been defined), we don't record that size.
1:      */
1:     public static class Serializer
1:     {
1:         public void serialize(Clustering clustering, DataOutputPlus out, int version, List<AbstractType<?>> types) throws IOException
1:         {
1:             ClusteringPrefix.serializer.serializeValuesWithoutSize(clustering, out, version, types);
1:         }
1: 
0:         public long serializedSize(Clustering clustering, int version, List<AbstractType<?>> types, TypeSizes sizes)
1:         {
0:             return ClusteringPrefix.serializer.valuesWithoutSizeSerializedSize(clustering, version, types, sizes);
1:         }
1: 
0:         public void deserialize(DataInput in, int version, List<AbstractType<?>> types, Writer writer) throws IOException
1:         {
0:             ClusteringPrefix.serializer.deserializeValuesWithoutSize(in, types.size(), version, types, writer);
1:         }
1: 
0:         public Clustering deserialize(DataInput in, int version, List<AbstractType<?>> types) throws IOException
1:         {
0:             SimpleClustering.Builder builder = SimpleClustering.builder(types.size());
0:             deserialize(in, version, types, builder);
0:             return builder.build();
1:         }
1:     }
1: }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:8c64cef
/////////////////////////////////////////////////////////////////////////
1:         public String toString()
0: 
0:         @Override
0:         public String toString(CFMetaData metadata)
0:         {
1:             return toString();
0:         }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(Clustering clustering, int version, List<AbstractType<?>> types)
1:             return ClusteringPrefix.serializer.valuesWithoutSizeSerializedSize(clustering, version, types);
============================================================================