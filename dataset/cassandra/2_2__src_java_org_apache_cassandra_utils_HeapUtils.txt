1:b189a7f: /*
1:b189a7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:b189a7f:  * or more contributor license agreements.  See the NOTICE file
1:b189a7f:  * distributed with this work for additional information
1:b189a7f:  * regarding copyright ownership.  The ASF licenses this file
1:b189a7f:  * to you under the Apache License, Version 2.0 (the
1:b189a7f:  * "License"); you may not use this file except in compliance
1:b189a7f:  * with the License.  You may obtain a copy of the License at
1:b189a7f:  *
1:b189a7f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b189a7f:  *
1:b189a7f:  * Unless required by applicable law or agreed to in writing, software
1:b189a7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b189a7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b189a7f:  * See the License for the specific language governing permissions and
1:b189a7f:  * limitations under the License.
1:b189a7f:  */
1:b189a7f: package org.apache.cassandra.utils;
2:b189a7f: 
1:b189a7f: import java.io.*;
1:b189a7f: import java.lang.management.ManagementFactory;
1:b189a7f: import java.lang.management.RuntimeMXBean;
1:b189a7f: import java.nio.file.FileSystems;
1:b189a7f: import java.nio.file.Files;
1:b189a7f: import java.nio.file.Path;
1:b189a7f: import java.util.List;
1:b189a7f: 
1:b189a7f: import org.apache.commons.lang3.ArrayUtils;
1:b189a7f: import org.apache.commons.lang3.text.StrBuilder;
1:b189a7f: 
1:b189a7f: import org.slf4j.Logger;
1:b189a7f: import org.slf4j.LoggerFactory;
1:b189a7f: 
1:b189a7f: /**
1:b189a7f:  * Utility to generate heap dumps.
1:b189a7f:  *
1:b189a7f:  */
1:b189a7f: public final class HeapUtils
1:b189a7f: {
1:b189a7f:     private static final Logger logger = LoggerFactory.getLogger(HeapUtils.class);
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Generates a HEAP dump in the directory specified by the <code>HeapDumpPath</code> JVM option
1:b189a7f:      * or in the <code>CASSANDRA_HOME</code> directory.
1:b189a7f:      */
1:b189a7f:     public static void generateHeapDump()
1:b189a7f:     {
1:b189a7f:         Long processId = getProcessId();
1:b189a7f:         if (processId == null)
1:b189a7f:         {
1:b189a7f:             logger.error("The process ID could not be retrieved. Skipping heap dump generation.");
1:b189a7f:             return;
1:b189a7f:         }
1:b189a7f: 
1:b189a7f:         String heapDumpPath = getHeapDumpPathOption();
1:b189a7f:         if (heapDumpPath == null)
1:b189a7f:         {
1:b189a7f:             String cassandraHome = System.getenv("CASSANDRA_HOME");
1:b189a7f:             if (cassandraHome == null)
1:b189a7f:             {
1:b189a7f:                 return;
1:b189a7f:             }
1:b189a7f: 
1:b189a7f:             heapDumpPath = cassandraHome;
1:b189a7f:         }
1:b189a7f: 
1:b189a7f:         Path dumpPath = FileSystems.getDefault().getPath(heapDumpPath);
1:b189a7f:         if (Files.isDirectory(dumpPath))
1:b189a7f:         {
1:b189a7f:             dumpPath = dumpPath.resolve("java_pid" + processId + ".hprof");
1:b189a7f:         }
1:b189a7f: 
1:b189a7f:         String jmapPath = getJmapPath();
1:b189a7f: 
1:b189a7f:         // The jmap file could not be found. In this case let's default to jmap in the hope that it is in the path.
1:b189a7f:         String jmapCommand = jmapPath == null ? "jmap" : jmapPath;
1:b189a7f: 
1:b189a7f:         String[] dumpCommands = new String[] {jmapCommand,
1:b189a7f:                                               "-dump:format=b,file=" + dumpPath,
1:b189a7f:                                               processId.toString()};
1:b189a7f: 
1:b189a7f:         // Lets also log the Heap histogram
1:b189a7f:         String[] histoCommands = new String[] {jmapCommand,
1:b189a7f:                                                "-histo",
1:b189a7f:                                                processId.toString()};
1:b189a7f:         try
1:b189a7f:         {
1:b189a7f:             logProcessOutput(Runtime.getRuntime().exec(dumpCommands));
1:b189a7f:             logProcessOutput(Runtime.getRuntime().exec(histoCommands));
1:b189a7f:         }
1:b189a7f:         catch (IOException e)
1:b189a7f:         {
1:b189a7f:             logger.error("The heap dump could not be generated due to the following error: ", e);
1:b189a7f:         }
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Retrieve the path to the JMAP executable.
1:b189a7f:      * @return the path to the JMAP executable or null if it cannot be found.
1:b189a7f:      */
1:b189a7f:     private static String getJmapPath()
1:b189a7f:     {
1:b189a7f:         // Searching in the JAVA_HOME is safer than searching into System.getProperty("java.home") as the Oracle
1:b189a7f:         // JVM might use the JRE which do not contains jmap.
1:b189a7f:         String javaHome = System.getenv("JAVA_HOME");
1:b189a7f:         if (javaHome == null)
1:b189a7f:             return null;
1:b189a7f: 
1:b189a7f:         File javaBinDirectory = new File(javaHome, "bin");
1:b189a7f:         File[] files = javaBinDirectory.listFiles(new FilenameFilter()
1:b189a7f:         {
1:b189a7f:             public boolean accept(File dir, String name)
1:b189a7f:             {
1:b189a7f:                 return name.startsWith("jmap");
1:b189a7f:             }
1:b189a7f:         });
1:b189a7f:         return ArrayUtils.isEmpty(files) ? null : files[0].getPath();
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Logs the output of the specified process.
1:b189a7f:      *
1:b189a7f:      * @param p the process
1:b189a7f:      * @throws IOException if an I/O problem occurs
1:b189a7f:      */
1:b189a7f:     private static void logProcessOutput(Process p) throws IOException
1:b189a7f:     {
1:79a2875:         try (BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream())))
1:b189a7f:         {
1:79a2875:             StrBuilder builder = new StrBuilder();
1:79a2875:             String line;
1:79a2875:             while ((line = input.readLine()) != null)
1:79a2875:             {
1:79a2875:                 builder.appendln(line);
1:79a2875:             }
1:79a2875:             logger.info(builder.toString());
1:b189a7f:         }
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Retrieves the value of the <code>HeapDumpPath</code> JVM option.
1:b189a7f:      * @return the value of the <code>HeapDumpPath</code> JVM option or <code>null</code> if the value has not been
1:b189a7f:      * specified.
1:b189a7f:      */
1:b189a7f:     private static String getHeapDumpPathOption()
1:b189a7f:     {
1:b189a7f:         RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
1:b189a7f:         List<String> inputArguments = runtimeMxBean.getInputArguments();
1:b189a7f:         String heapDumpPathOption = null;
1:b189a7f:         for (String argument : inputArguments)
1:b189a7f:         {
1:b189a7f:             if (argument.startsWith("-XX:HeapDumpPath="))
1:b189a7f:             {
1:b189a7f:                 heapDumpPathOption = argument;
1:b189a7f:                 // We do not break in case the option has been specified several times.
1:b189a7f:                 // In general it seems that JVMs use the right-most argument as the winner.
1:b189a7f:             }
1:b189a7f:         }
1:b189a7f: 
1:b189a7f:         if (heapDumpPathOption == null)
1:b189a7f:             return null;
1:b189a7f: 
1:b189a7f:         return heapDumpPathOption.substring(17, heapDumpPathOption.length());
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Retrieves the process ID or <code>null</code> if the process ID cannot be retrieved.
1:b189a7f:      * @return the process ID or <code>null</code> if the process ID cannot be retrieved.
1:b189a7f:      */
1:b189a7f:     private static Long getProcessId()
1:b189a7f:     {
1:b189a7f:         // Once Java 9 is ready the process API should provide a better way to get the process ID.
1:b189a7f:         long pid = SigarLibrary.instance.getPid();
1:b189a7f: 
1:b189a7f:         if (pid >= 0)
1:b189a7f:             return Long.valueOf(pid);
1:b189a7f: 
1:b189a7f:         return getProcessIdFromJvmName();
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * Retrieves the process ID from the JVM name.
1:b189a7f:      * @return the process ID or <code>null</code> if the process ID cannot be retrieved.
1:b189a7f:      */
1:b189a7f:     private static Long getProcessIdFromJvmName()
1:b189a7f:     {
1:b189a7f:         // the JVM name in Oracle JVMs is: '<pid>@<hostname>' but this might not be the case on all JVMs
1:b189a7f:         String jvmName = ManagementFactory.getRuntimeMXBean().getName();
1:b189a7f:         try
1:b189a7f:         {
1:7dccb31:             return Long.valueOf(jvmName.split("@")[0]);
1:b189a7f:         }
1:b189a7f:         catch (NumberFormatException e)
1:b189a7f:         {
1:b189a7f:             // ignore
1:b189a7f:         }
1:b189a7f:         return null;
1:b189a7f:     }
1:b189a7f: 
1:b189a7f:     /**
1:b189a7f:      * The class must not be instantiated.
1:b189a7f:      */
1:b189a7f:     private HeapUtils()
1:b189a7f:     {
1:b189a7f:     }
1:b189a7f: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7dccb31
/////////////////////////////////////////////////////////////////////////
1:             return Long.valueOf(jvmName.split("@")[0]);
commit:79a2875
/////////////////////////////////////////////////////////////////////////
1:         try (BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream())))
1:             StrBuilder builder = new StrBuilder();
1:             String line;
1:             while ((line = input.readLine()) != null)
1:             {
1:                 builder.appendln(line);
1:             }
1:             logger.info(builder.toString());
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:b189a7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.io.*;
1: import java.lang.management.ManagementFactory;
1: import java.lang.management.RuntimeMXBean;
1: import java.nio.file.FileSystems;
1: import java.nio.file.Files;
1: import java.nio.file.Path;
1: import java.util.List;
1: 
1: import org.apache.commons.lang3.ArrayUtils;
1: import org.apache.commons.lang3.text.StrBuilder;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Utility to generate heap dumps.
1:  *
1:  */
1: public final class HeapUtils
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(HeapUtils.class);
1: 
1:     /**
1:      * Generates a HEAP dump in the directory specified by the <code>HeapDumpPath</code> JVM option
1:      * or in the <code>CASSANDRA_HOME</code> directory.
1:      */
1:     public static void generateHeapDump()
1:     {
1:         Long processId = getProcessId();
1:         if (processId == null)
1:         {
1:             logger.error("The process ID could not be retrieved. Skipping heap dump generation.");
1:             return;
1:         }
1: 
1:         String heapDumpPath = getHeapDumpPathOption();
1:         if (heapDumpPath == null)
1:         {
1:             String cassandraHome = System.getenv("CASSANDRA_HOME");
1:             if (cassandraHome == null)
1:             {
1:                 return;
1:             }
1: 
1:             heapDumpPath = cassandraHome;
1:         }
1: 
1:         Path dumpPath = FileSystems.getDefault().getPath(heapDumpPath);
1:         if (Files.isDirectory(dumpPath))
1:         {
1:             dumpPath = dumpPath.resolve("java_pid" + processId + ".hprof");
1:         }
1: 
1:         String jmapPath = getJmapPath();
1: 
1:         // The jmap file could not be found. In this case let's default to jmap in the hope that it is in the path.
1:         String jmapCommand = jmapPath == null ? "jmap" : jmapPath;
1: 
1:         String[] dumpCommands = new String[] {jmapCommand,
1:                                               "-dump:format=b,file=" + dumpPath,
1:                                               processId.toString()};
1: 
1:         // Lets also log the Heap histogram
1:         String[] histoCommands = new String[] {jmapCommand,
1:                                                "-histo",
1:                                                processId.toString()};
1:         try
1:         {
1:             logProcessOutput(Runtime.getRuntime().exec(dumpCommands));
1:             logProcessOutput(Runtime.getRuntime().exec(histoCommands));
1:         }
1:         catch (IOException e)
1:         {
1:             logger.error("The heap dump could not be generated due to the following error: ", e);
1:         }
1:     }
1: 
1:     /**
1:      * Retrieve the path to the JMAP executable.
1:      * @return the path to the JMAP executable or null if it cannot be found.
1:      */
1:     private static String getJmapPath()
1:     {
1:         // Searching in the JAVA_HOME is safer than searching into System.getProperty("java.home") as the Oracle
1:         // JVM might use the JRE which do not contains jmap.
1:         String javaHome = System.getenv("JAVA_HOME");
1:         if (javaHome == null)
1:             return null;
1: 
1:         File javaBinDirectory = new File(javaHome, "bin");
1:         File[] files = javaBinDirectory.listFiles(new FilenameFilter()
1:         {
1:             public boolean accept(File dir, String name)
1:             {
1:                 return name.startsWith("jmap");
1:             }
1:         });
1:         return ArrayUtils.isEmpty(files) ? null : files[0].getPath();
1:     }
1: 
1:     /**
1:      * Logs the output of the specified process.
1:      *
1:      * @param p the process
1:      * @throws IOException if an I/O problem occurs
1:      */
1:     private static void logProcessOutput(Process p) throws IOException
1:     {
0:         BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
1: 
0:         StrBuilder builder = new StrBuilder();
0:         String line;
0:         while ((line = input.readLine()) != null)
1:         {
0:             builder.appendln(line);
1:         }
0:         logger.info(builder.toString());
1:     }
1: 
1:     /**
1:      * Retrieves the value of the <code>HeapDumpPath</code> JVM option.
1:      * @return the value of the <code>HeapDumpPath</code> JVM option or <code>null</code> if the value has not been
1:      * specified.
1:      */
1:     private static String getHeapDumpPathOption()
1:     {
1:         RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
1:         List<String> inputArguments = runtimeMxBean.getInputArguments();
1:         String heapDumpPathOption = null;
1:         for (String argument : inputArguments)
1:         {
1:             if (argument.startsWith("-XX:HeapDumpPath="))
1:             {
1:                 heapDumpPathOption = argument;
1:                 // We do not break in case the option has been specified several times.
1:                 // In general it seems that JVMs use the right-most argument as the winner.
1:             }
1:         }
1: 
1:         if (heapDumpPathOption == null)
1:             return null;
1: 
1:         return heapDumpPathOption.substring(17, heapDumpPathOption.length());
1:     }
1: 
1:     /**
1:      * Retrieves the process ID or <code>null</code> if the process ID cannot be retrieved.
1:      * @return the process ID or <code>null</code> if the process ID cannot be retrieved.
1:      */
1:     private static Long getProcessId()
1:     {
1:         // Once Java 9 is ready the process API should provide a better way to get the process ID.
1:         long pid = SigarLibrary.instance.getPid();
1: 
1:         if (pid >= 0)
1:             return Long.valueOf(pid);
1: 
1:         return getProcessIdFromJvmName();
1:     }
1: 
1:     /**
1:      * Retrieves the process ID from the JVM name.
1:      * @return the process ID or <code>null</code> if the process ID cannot be retrieved.
1:      */
1:     private static Long getProcessIdFromJvmName()
1:     {
1:         // the JVM name in Oracle JVMs is: '<pid>@<hostname>' but this might not be the case on all JVMs
1:         String jvmName = ManagementFactory.getRuntimeMXBean().getName();
1:         try
1:         {
0:             return Long.parseLong(jvmName.split("@")[0]);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             // ignore
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * The class must not be instantiated.
1:      */
1:     private HeapUtils()
1:     {
1:     }
1: }
============================================================================