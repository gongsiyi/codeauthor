1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer.filter;
1:72790dc: 
1:72790dc: import java.io.BufferedReader;
1:72790dc: import java.io.File;
1:72790dc: import java.io.InputStream;
1:72790dc: import java.io.InputStreamReader;
1:72790dc: import java.nio.charset.StandardCharsets;
1:72790dc: import java.util.Arrays;
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.Locale;
1:72790dc: import java.util.Set;
1:72790dc: import java.util.concurrent.ExecutionException;
1:72790dc: 
1:72790dc: import com.google.common.cache.CacheBuilder;
1:72790dc: import com.google.common.cache.CacheLoader;
1:72790dc: import com.google.common.cache.LoadingCache;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Provides a list of Stop Words for a given language
1:72790dc:  */
1:72790dc: public class StopWordFactory
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(StopWordFactory.class);
1:72790dc: 
1:72790dc:     private static final String DEFAULT_RESOURCE_EXT = "_ST.txt";
1:72790dc:     private static final String DEFAULT_RESOURCE_PREFIX = StopWordFactory.class.getPackage()
1:72790dc:             .getName().replace(".", File.separator);
1:72790dc:     private static final Set<String> SUPPORTED_LANGUAGES = new HashSet<>(
1:72790dc:             Arrays.asList("ar","bg","cs","de","en","es","fi","fr","hi","hu","it",
1:72790dc:             "pl","pt","ro","ru","sv"));
1:72790dc: 
1:72790dc:     private static final LoadingCache<String, Set<String>> STOP_WORDS_CACHE = CacheBuilder.newBuilder()
1:72790dc:             .build(new CacheLoader<String, Set<String>>()
1:72790dc:             {
1:fed476f:                 public Set<String> load(String s)
1:72790dc:                 {
1:72790dc:                     return getStopWordsFromResource(s);
1:72790dc:                 }
1:72790dc:             });
1:72790dc: 
1:72790dc:     public static Set<String> getStopWordsForLanguage(Locale locale)
1:72790dc:     {
1:72790dc:         if (locale == null)
1:72790dc:             return null;
1:72790dc: 
1:72790dc:         String rootLang = locale.getLanguage().substring(0, 2);
1:72790dc:         try
1:72790dc:         {
1:72790dc:             return (!SUPPORTED_LANGUAGES.contains(rootLang)) ? null : STOP_WORDS_CACHE.get(rootLang);
1:72790dc:         }
1:72790dc:         catch (ExecutionException e)
1:72790dc:         {
1:72790dc:             logger.error("Failed to populate Stop Words Cache for language [{}]", locale.getLanguage(), e);
1:72790dc:             return null;
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private static Set<String> getStopWordsFromResource(String language)
1:72790dc:     {
1:72790dc:         Set<String> stopWords = new HashSet<>();
1:72790dc:         String resourceName = DEFAULT_RESOURCE_PREFIX + File.separator + language + DEFAULT_RESOURCE_EXT;
1:72790dc:         try (InputStream is = StopWordFactory.class.getClassLoader().getResourceAsStream(resourceName);
1:72790dc:              BufferedReader r = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8)))
1:72790dc:         {
1:72790dc:                 String line;
1:72790dc:                 while ((line = r.readLine()) != null)
1:72790dc:                 {
1:72790dc:                     //skip comments (lines starting with # char)
1:72790dc:                     if(line.charAt(0) == '#')
1:72790dc:                         continue;
1:72790dc:                     stopWords.add(line.trim());
1:72790dc:                 }
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:72790dc:             logger.error("Failed to retrieve Stop Terms resource for language [{}]", language, e);
1:72790dc:         }
1:72790dc:         return stopWords;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fed476f
/////////////////////////////////////////////////////////////////////////
1:                 public Set<String> load(String s)
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer.filter;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.nio.charset.StandardCharsets;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Locale;
1: import java.util.Set;
1: import java.util.concurrent.ExecutionException;
1: 
1: import com.google.common.cache.CacheBuilder;
1: import com.google.common.cache.CacheLoader;
1: import com.google.common.cache.LoadingCache;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Provides a list of Stop Words for a given language
1:  */
1: public class StopWordFactory
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(StopWordFactory.class);
1: 
1:     private static final String DEFAULT_RESOURCE_EXT = "_ST.txt";
1:     private static final String DEFAULT_RESOURCE_PREFIX = StopWordFactory.class.getPackage()
1:             .getName().replace(".", File.separator);
1:     private static final Set<String> SUPPORTED_LANGUAGES = new HashSet<>(
1:             Arrays.asList("ar","bg","cs","de","en","es","fi","fr","hi","hu","it",
1:             "pl","pt","ro","ru","sv"));
1: 
1:     private static final LoadingCache<String, Set<String>> STOP_WORDS_CACHE = CacheBuilder.newBuilder()
1:             .build(new CacheLoader<String, Set<String>>()
1:             {
0:                 public Set<String> load(String s) throws Exception
1:                 {
1:                     return getStopWordsFromResource(s);
1:                 }
1:             });
1: 
1:     public static Set<String> getStopWordsForLanguage(Locale locale)
1:     {
1:         if (locale == null)
1:             return null;
1: 
1:         String rootLang = locale.getLanguage().substring(0, 2);
1:         try
1:         {
1:             return (!SUPPORTED_LANGUAGES.contains(rootLang)) ? null : STOP_WORDS_CACHE.get(rootLang);
1:         }
1:         catch (ExecutionException e)
1:         {
1:             logger.error("Failed to populate Stop Words Cache for language [{}]", locale.getLanguage(), e);
1:             return null;
1:         }
1:     }
1: 
1:     private static Set<String> getStopWordsFromResource(String language)
1:     {
1:         Set<String> stopWords = new HashSet<>();
1:         String resourceName = DEFAULT_RESOURCE_PREFIX + File.separator + language + DEFAULT_RESOURCE_EXT;
1:         try (InputStream is = StopWordFactory.class.getClassLoader().getResourceAsStream(resourceName);
1:              BufferedReader r = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8)))
1:         {
1:                 String line;
1:                 while ((line = r.readLine()) != null)
1:                 {
1:                     //skip comments (lines starting with # char)
1:                     if(line.charAt(0) == '#')
1:                         continue;
1:                     stopWords.add(line.trim());
1:                 }
1:         }
1:         catch (Exception e)
1:         {
1:             logger.error("Failed to retrieve Stop Terms resource for language [{}]", language, e);
1:         }
1:         return stopWords;
1:     }
1: }
============================================================================