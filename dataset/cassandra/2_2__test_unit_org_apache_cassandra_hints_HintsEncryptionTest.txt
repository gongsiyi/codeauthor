1:90033b9: /*
1:90033b9:  * Licensed to the Apache Software Foundation (ASF) under one
1:90033b9:  * or more contributor license agreements.  See the NOTICE file
1:90033b9:  * distributed with this work for additional information
1:90033b9:  * regarding copyright ownership.  The ASF licenses this file
1:90033b9:  * to you under the Apache License, Version 2.0 (the
1:90033b9:  * "License"); you may not use this file except in compliance
1:90033b9:  * with the License.  You may obtain a copy of the License at
1:90033b9:  *
1:90033b9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90033b9:  *
1:90033b9:  * Unless required by applicable law or agreed to in writing, software
1:90033b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90033b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90033b9:  * See the License for the specific language governing permissions and
1:90033b9:  * limitations under the License.
1:90033b9:  */
1:90033b9: package org.apache.cassandra.hints;
1:90033b9: 
1:90033b9: import java.util.Arrays;
1:90033b9: 
1:90033b9: import javax.crypto.Cipher;
1:90033b9: 
1:90033b9: import com.google.common.collect.ImmutableMap;
1:90033b9: import org.junit.Before;
1:90033b9: import org.junit.Test;
1:90033b9: 
1:90033b9: import org.apache.cassandra.config.DatabaseDescriptor;
1:90033b9: import org.apache.cassandra.security.EncryptionContext;
1:90033b9: import org.apache.cassandra.security.EncryptionContextGenerator;
1:90033b9: 
1:90033b9: public class HintsEncryptionTest extends AlteredHints
1:90033b9: {
1:90033b9:     EncryptionContext encryptionContext;
1:90033b9:     Cipher cipher;
1:90033b9: 
1:90033b9:     @Before
1:90033b9:     public void setup()
1:90033b9:     {
1:90033b9:         encryptionContext = EncryptionContextGenerator.createContext(true);
1:90033b9:         DatabaseDescriptor.setEncryptionContext(encryptionContext);
1:90033b9:     }
1:90033b9: 
1:90033b9:     @Test
1:e31e216:     public void encryptedHints() throws Exception
1:90033b9:     {
1:90033b9:         multiFlushAndDeserializeTest();
1:90033b9:     }
1:90033b9: 
1:90033b9:     boolean looksLegit(HintsWriter writer)
1:90033b9:     {
1:90033b9:         if (!(writer instanceof EncryptedHintsWriter))
1:90033b9:             return false;
1:90033b9: 
1:90033b9:         EncryptedHintsWriter encryptedHintsWriter = (EncryptedHintsWriter)writer;
1:90033b9:         cipher = encryptedHintsWriter.getCipher();
1:90033b9: 
1:90033b9:         return encryptedHintsWriter.getCompressor().getClass().isAssignableFrom(encryptionContext.getCompressor().getClass());
1:90033b9:     }
1:90033b9: 
1:90033b9:     boolean looksLegit(ChecksummedDataInput checksummedDataInput)
1:90033b9:     {
1:90033b9:         if (!(checksummedDataInput instanceof EncryptedChecksummedDataInput))
1:90033b9:             return false;
1:90033b9: 
1:90033b9:         EncryptedChecksummedDataInput encryptedDataInput = (EncryptedChecksummedDataInput)checksummedDataInput;
1:90033b9: 
1:90033b9:         return Arrays.equals(cipher.getIV(), encryptedDataInput.getCipher().getIV()) &&
1:90033b9:                encryptedDataInput.getCompressor().getClass().isAssignableFrom(encryptionContext.getCompressor().getClass());
1:90033b9:     }
1:90033b9: 
1:90033b9:     ImmutableMap<String, Object> params()
1:90033b9:     {
1:90033b9:         ImmutableMap<String, Object> compressionParams = ImmutableMap.<String, Object>builder()
1:90033b9:                                                          .putAll(encryptionContext.toHeaderParameters())
1:90033b9:                                                          .build();
1:90033b9:         return ImmutableMap.<String, Object>builder()
1:90033b9:                .put(HintsDescriptor.ENCRYPTION, compressionParams)
1:90033b9:                .build();
1:90033b9:     }
1:90033b9: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1:     public void encryptedHints() throws Exception
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.util.Arrays;
1: 
1: import javax.crypto.Cipher;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.security.EncryptionContext;
1: import org.apache.cassandra.security.EncryptionContextGenerator;
1: 
1: public class HintsEncryptionTest extends AlteredHints
1: {
1:     EncryptionContext encryptionContext;
1:     Cipher cipher;
1: 
1:     @Before
1:     public void setup()
1:     {
1:         encryptionContext = EncryptionContextGenerator.createContext(true);
1:         DatabaseDescriptor.setEncryptionContext(encryptionContext);
1:     }
1: 
1:     @Test
0:     public void encyptedHints() throws Exception
1:     {
1:         multiFlushAndDeserializeTest();
1:     }
1: 
1:     boolean looksLegit(HintsWriter writer)
1:     {
1:         if (!(writer instanceof EncryptedHintsWriter))
1:             return false;
1: 
1:         EncryptedHintsWriter encryptedHintsWriter = (EncryptedHintsWriter)writer;
1:         cipher = encryptedHintsWriter.getCipher();
1: 
1:         return encryptedHintsWriter.getCompressor().getClass().isAssignableFrom(encryptionContext.getCompressor().getClass());
1:     }
1: 
1:     boolean looksLegit(ChecksummedDataInput checksummedDataInput)
1:     {
1:         if (!(checksummedDataInput instanceof EncryptedChecksummedDataInput))
1:             return false;
1: 
1:         EncryptedChecksummedDataInput encryptedDataInput = (EncryptedChecksummedDataInput)checksummedDataInput;
1: 
1:         return Arrays.equals(cipher.getIV(), encryptedDataInput.getCipher().getIV()) &&
1:                encryptedDataInput.getCompressor().getClass().isAssignableFrom(encryptionContext.getCompressor().getClass());
1:     }
1: 
1:     ImmutableMap<String, Object> params()
1:     {
1:         ImmutableMap<String, Object> compressionParams = ImmutableMap.<String, Object>builder()
1:                                                          .putAll(encryptionContext.toHeaderParameters())
1:                                                          .build();
1:         return ImmutableMap.<String, Object>builder()
1:                .put(HintsDescriptor.ENCRYPTION, compressionParams)
1:                .build();
1:     }
1: }
============================================================================