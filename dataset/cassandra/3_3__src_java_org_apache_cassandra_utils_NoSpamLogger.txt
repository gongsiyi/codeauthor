1:bade5cf: /*
1:bade5cf:  * Licensed to the Apache Software Foundation (ASF) under one
1:bade5cf:  * or more contributor license agreements.  See the NOTICE file
1:bade5cf:  * distributed with this work for additional information
1:bade5cf:  * regarding copyright ownership.  The ASF licenses this file
1:bade5cf:  * to you under the Apache License, Version 2.0 (the
1:bade5cf:  * "License"); you may not use this file except in compliance
1:bade5cf:  * with the License.  You may obtain a copy of the License at
1:bade5cf:  *
1:bade5cf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bade5cf:  *
1:bade5cf:  * Unless required by applicable law or agreed to in writing, software
1:bade5cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bade5cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bade5cf:  * See the License for the specific language governing permissions and
1:bade5cf:  * limitations under the License.
1:bade5cf:  */
1:bade5cf: package org.apache.cassandra.utils;
1:bade5cf: 
1:bade5cf: import java.util.concurrent.TimeUnit;
1:bade5cf: import java.util.concurrent.atomic.AtomicLong;
1:bade5cf: 
1:bade5cf: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1:bade5cf: import org.slf4j.Logger;
1:bade5cf: 
1:bade5cf: import com.google.common.annotations.VisibleForTesting;
1:bade5cf: 
1:bade5cf: /**
1:bade5cf:  * Logging that limits each log statement to firing based on time since the statement last fired.
1:bade5cf:  *
1:bade5cf:  * Every logger has a unique timer per statement. Minimum time between logging is set for each statement
1:bade5cf:  * the first time it is used and a subsequent attempt to request that statement with a different minimum time will
1:bade5cf:  * result in the original time being used. No warning is provided if there is a mismatch.
1:bade5cf:  *
1:bade5cf:  * If the statement is cached and used to log directly then only a volatile read will be required in the common case.
1:bade5cf:  * If the Logger is cached then there is a single concurrent hash map lookup + the volatile read.
1:bade5cf:  * If neither the logger nor the statement is cached then it is two concurrent hash map lookups + the volatile read.
1:bade5cf:  *
1:bade5cf:  */
1:bade5cf: public class NoSpamLogger
1:bade5cf: {
1:bade5cf:     /**
1:bade5cf:      * Levels for programmatically specifying the severity of a log statement
1:bade5cf:      */
1:bade5cf:     public enum Level
1:bade5cf:     {
1:bade5cf:         INFO, WARN, ERROR;
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     @VisibleForTesting
1:bade5cf:     static interface Clock
1:bade5cf:     {
1:bade5cf:         long nanoTime();
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     @VisibleForTesting
1:bade5cf:     static Clock CLOCK = new Clock()
1:bade5cf:     {
1:bade5cf:         public long nanoTime()
1:bade5cf:         {
1:bade5cf:             return System.nanoTime();
1:bade5cf:         }
1:bade5cf:     };
1:bade5cf: 
1:bade5cf:     public class NoSpamLogStatement extends AtomicLong
1:bade5cf:     {
1:bade5cf:         private static final long serialVersionUID = 1L;
1:bade5cf: 
1:bade5cf:         private final String statement;
1:bade5cf:         private final long minIntervalNanos;
1:bade5cf: 
1:bade5cf:         public NoSpamLogStatement(String statement, long minIntervalNanos)
1:bade5cf:         {
1:bade5cf:             this.statement = statement;
1:bade5cf:             this.minIntervalNanos = minIntervalNanos;
1:bade5cf:         }
1:bade5cf: 
1:bade5cf:         private boolean shouldLog(long nowNanos)
1:bade5cf:         {
1:bade5cf:             long expected = get();
1:bade5cf:             return nowNanos - expected >= minIntervalNanos && compareAndSet(expected, nowNanos);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean log(Level l, long nowNanos, Object... objects)
1:bade5cf:         {
1:cb06283:             if (!shouldLog(nowNanos)) return false;
1:bade5cf: 
1:bade5cf:             switch (l)
1:bade5cf:             {
1:bade5cf:             case INFO:
1:bade5cf:                 wrapped.info(statement, objects);
1:bade5cf:                 break;
1:bade5cf:             case WARN:
1:bade5cf:                 wrapped.warn(statement, objects);
1:bade5cf:                 break;
1:bade5cf:             case ERROR:
1:bade5cf:                 wrapped.error(statement, objects);
1:bade5cf:                 break;
1:bade5cf:                 default:
1:bade5cf:                     throw new AssertionError();
1:bade5cf:             }
1:cb06283:             return true;
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean info(long nowNanos, Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.log(Level.INFO, nowNanos, objects);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean info(Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.info(CLOCK.nanoTime(), objects);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean warn(long nowNanos, Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.log(Level.WARN, nowNanos, objects);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean warn(Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.warn(CLOCK.nanoTime(), objects);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean error(long nowNanos, Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.log(Level.ERROR, nowNanos, objects);
1:bade5cf:         }
1:bade5cf: 
1:cb06283:         public boolean error(Object... objects)
1:bade5cf:         {
1:cb06283:             return NoSpamLogStatement.this.error(CLOCK.nanoTime(), objects);
1:bade5cf:         }
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     private static final NonBlockingHashMap<Logger, NoSpamLogger> wrappedLoggers = new NonBlockingHashMap<>();
1:bade5cf: 
1:bade5cf:     @VisibleForTesting
1:bade5cf:     static void clearWrappedLoggersForTest()
1:bade5cf:     {
1:bade5cf:         wrappedLoggers.clear();
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     public static NoSpamLogger getLogger(Logger logger, long minInterval, TimeUnit unit)
1:bade5cf:     {
1:bade5cf:         NoSpamLogger wrapped = wrappedLoggers.get(logger);
1:bade5cf:         if (wrapped == null)
1:bade5cf:         {
1:bade5cf:             wrapped = new NoSpamLogger(logger, minInterval, unit);
1:bade5cf:             NoSpamLogger temp = wrappedLoggers.putIfAbsent(logger, wrapped);
1:bade5cf:             if (temp != null)
1:bade5cf:                 wrapped = temp;
1:bade5cf:         }
1:bade5cf:         return wrapped;
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public static boolean log(Logger logger, Level level, long minInterval, TimeUnit unit, String message, Object... objects)
1:bade5cf:     {
1:f3668e1:         return log(logger, level, message, minInterval, unit, CLOCK.nanoTime(), message, objects);
1:bade5cf:     }
1:bade5cf: 
1:f3668e1:     public static boolean log(Logger logger, Level level, String key, long minInterval, TimeUnit unit, String message, Object... objects)
1:f3668e1:     {
1:f3668e1:         return log(logger, level, key, minInterval, unit, CLOCK.nanoTime(), message, objects);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     public static boolean log(Logger logger, Level level, String key, long minInterval, TimeUnit unit, long nowNanos, String message, Object... objects)
1:bade5cf:     {
1:bade5cf:         NoSpamLogger wrapped = getLogger(logger, minInterval, unit);
1:f3668e1:         NoSpamLogStatement statement = wrapped.getStatement(key, message);
1:cb06283:         return statement.log(level, nowNanos, objects);
1:bade5cf:     }
1:bade5cf: 
1:b449126:     public static NoSpamLogStatement getStatement(Logger logger, String message, long minInterval, TimeUnit unit)
1:b449126:     {
1:bade5cf:         NoSpamLogger wrapped = getLogger(logger, minInterval, unit);
1:bade5cf:         return wrapped.getStatement(message);
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     private final Logger wrapped;
1:bade5cf:     private final long minIntervalNanos;
1:bade5cf:     private final NonBlockingHashMap<String, NoSpamLogStatement> lastMessage = new NonBlockingHashMap<>();
1:bade5cf: 
1:bade5cf:     private NoSpamLogger(Logger wrapped, long minInterval, TimeUnit timeUnit)
1:bade5cf:     {
1:bade5cf:         this.wrapped = wrapped;
1:bade5cf:         minIntervalNanos = timeUnit.toNanos(minInterval);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean info(long nowNanos, String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.log( Level.INFO, s, nowNanos, objects);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean info(String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.info(CLOCK.nanoTime(), s, objects);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean warn(long nowNanos, String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.log( Level.WARN, s, nowNanos, objects);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean warn(String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.warn(CLOCK.nanoTime(), s, objects);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean error(long nowNanos, String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.log( Level.ERROR, s, nowNanos, objects);
1:bade5cf:     }
1:bade5cf: 
1:cb06283:     public boolean error(String s, Object... objects)
1:bade5cf:     {
1:cb06283:         return NoSpamLogger.this.error(CLOCK.nanoTime(), s, objects);
1:bade5cf:     }
1:bade5cf: 
1:68d2526:     public boolean log(Level l, String s, long nowNanos, Object... objects)
1:68d2526:     {
1:cb06283:         return NoSpamLogger.this.getStatement(s, minIntervalNanos).log(l, nowNanos, objects);
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     public NoSpamLogStatement getStatement(String s)
1:bade5cf:     {
1:b449126:         return NoSpamLogger.this.getStatement(s, minIntervalNanos);
1:bade5cf:     }
1:bade5cf: 
1:f3668e1:     public NoSpamLogStatement getStatement(String key, String s)
1:f3668e1:     {
1:f3668e1:         return NoSpamLogger.this.getStatement(key, s, minIntervalNanos);
1:f3668e1:     }
1:f3668e1: 
1:68d2526:     public NoSpamLogStatement getStatement(String s, long minInterval, TimeUnit unit)
1:68d2526:     {
1:b449126:         return NoSpamLogger.this.getStatement(s, unit.toNanos(minInterval));
1:bade5cf:     }
1:bade5cf: 
1:bade5cf:     public NoSpamLogStatement getStatement(String s, long minIntervalNanos)
1:bade5cf:     {
1:f3668e1:         return getStatement(s, s, minIntervalNanos);
1:f3668e1:     }
1:f3668e1: 
1:f3668e1:     public NoSpamLogStatement getStatement(String key, String s, long minIntervalNanos)
1:f3668e1:     {
1:f3668e1:         NoSpamLogStatement statement = lastMessage.get(key);
1:bade5cf:         if (statement == null)
1:bade5cf:         {
1:bade5cf:             statement = new NoSpamLogStatement(s, minIntervalNanos);
1:f3668e1:             NoSpamLogStatement temp = lastMessage.putIfAbsent(key, statement);
1:bade5cf:             if (temp != null)
1:bade5cf:                 statement = temp;
1:bade5cf:         }
1:bade5cf:         return statement;
1:bade5cf:     }
1:bade5cf: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public boolean log(Level l, String s, long nowNanos, Object... objects)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public NoSpamLogStatement getStatement(String s, long minInterval, TimeUnit unit)
1:     {
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f3668e1
/////////////////////////////////////////////////////////////////////////
1:         return log(logger, level, message, minInterval, unit, CLOCK.nanoTime(), message, objects);
1:     public static boolean log(Logger logger, Level level, String key, long minInterval, TimeUnit unit, String message, Object... objects)
1:     {
1:         return log(logger, level, key, minInterval, unit, CLOCK.nanoTime(), message, objects);
1:     }
1: 
1:     public static boolean log(Logger logger, Level level, String key, long minInterval, TimeUnit unit, long nowNanos, String message, Object... objects)
1:         NoSpamLogStatement statement = wrapped.getStatement(key, message);
/////////////////////////////////////////////////////////////////////////
1:     public NoSpamLogStatement getStatement(String key, String s)
1:     {
1:         return NoSpamLogger.this.getStatement(key, s, minIntervalNanos);
1:     }
1: 
1:         return getStatement(s, s, minIntervalNanos);
1:     }
1: 
1:     public NoSpamLogStatement getStatement(String key, String s, long minIntervalNanos)
1:     {
1:         NoSpamLogStatement statement = lastMessage.get(key);
1:             NoSpamLogStatement temp = lastMessage.putIfAbsent(key, statement);
commit:b449126
/////////////////////////////////////////////////////////////////////////
0:             NoSpamLogStatement.this.log(Level.INFO, nowNanos, objects);
0:             NoSpamLogStatement.this.info(CLOCK.nanoTime(), objects);
0:             NoSpamLogStatement.this.log(Level.WARN, nowNanos, objects);
0:         public void warn(Object... objects)
0:             NoSpamLogStatement.this.warn(CLOCK.nanoTime(), objects);
0:             NoSpamLogStatement.this.log(Level.ERROR, nowNanos, objects);
0:             NoSpamLogStatement.this.error(CLOCK.nanoTime(), objects);
/////////////////////////////////////////////////////////////////////////
1:     public static NoSpamLogStatement getStatement(Logger logger, String message, long minInterval, TimeUnit unit)
1:     {
/////////////////////////////////////////////////////////////////////////
0:         NoSpamLogger.this.log( Level.INFO, s, nowNanos, objects);
0:         NoSpamLogger.this.info(CLOCK.nanoTime(), s, objects);
0:         NoSpamLogger.this.log( Level.WARN, s, nowNanos, objects);
0:         NoSpamLogger.this.warn(CLOCK.nanoTime(), s, objects);
0:         NoSpamLogger.this.log( Level.ERROR, s, nowNanos, objects);
0:         NoSpamLogger.this.error(CLOCK.nanoTime(), s, objects);
0:         NoSpamLogger.this.getStatement(s, minIntervalNanos).log(l, nowNanos, objects);
1:         return NoSpamLogger.this.getStatement(s, minIntervalNanos);
1:         return NoSpamLogger.this.getStatement(s, unit.toNanos(minInterval));
commit:bade5cf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1: import org.slf4j.Logger;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: /**
1:  * Logging that limits each log statement to firing based on time since the statement last fired.
1:  *
1:  * Every logger has a unique timer per statement. Minimum time between logging is set for each statement
1:  * the first time it is used and a subsequent attempt to request that statement with a different minimum time will
1:  * result in the original time being used. No warning is provided if there is a mismatch.
1:  *
1:  * If the statement is cached and used to log directly then only a volatile read will be required in the common case.
1:  * If the Logger is cached then there is a single concurrent hash map lookup + the volatile read.
1:  * If neither the logger nor the statement is cached then it is two concurrent hash map lookups + the volatile read.
1:  *
1:  */
1: public class NoSpamLogger
1: {
1:     /**
1:      * Levels for programmatically specifying the severity of a log statement
1:      */
1:     public enum Level
1:     {
1:         INFO, WARN, ERROR;
1:     }
1: 
1:     @VisibleForTesting
1:     static interface Clock
1:     {
1:         long nanoTime();
1:     }
1: 
1:     @VisibleForTesting
1:     static Clock CLOCK = new Clock()
1:     {
1:         public long nanoTime()
1:         {
1:             return System.nanoTime();
1:         }
1:     };
1: 
1:     public class NoSpamLogStatement extends AtomicLong
1:     {
1:         private static final long serialVersionUID = 1L;
1: 
1:         private final String statement;
1:         private final long minIntervalNanos;
1: 
1:         public NoSpamLogStatement(String statement, long minIntervalNanos)
1:         {
1:             this.statement = statement;
1:             this.minIntervalNanos = minIntervalNanos;
1:         }
1: 
1:         private boolean shouldLog(long nowNanos)
1:         {
1:             long expected = get();
1:             return nowNanos - expected >= minIntervalNanos && compareAndSet(expected, nowNanos);
1:         }
1: 
0:         public void log(Level l, long nowNanos, Object... objects)
1:         {
0:             if (!shouldLog(nowNanos)) return;
1: 
1:             switch (l)
1:             {
1:             case INFO:
1:                 wrapped.info(statement, objects);
1:                 break;
1:             case WARN:
1:                 wrapped.warn(statement, objects);
1:                 break;
1:             case ERROR:
1:                 wrapped.error(statement, objects);
1:                 break;
1:                 default:
1:                     throw new AssertionError();
1:             }
1:         }
1: 
0:         public void info(long nowNanos, Object... objects)
1:         {
0:             log(Level.INFO, nowNanos, objects);
1:         }
1: 
0:         public void info(Object... objects)
1:         {
0:             info(CLOCK.nanoTime(), objects);
1:         }
1: 
0:         public void warn(long nowNanos, Object... objects)
1:         {
0:             log(Level.WARN, nowNanos, objects);
1:         }
1: 
0:         public void warn(String s, Object... objects)
1:         {
0:             warn(CLOCK.nanoTime(), s, objects);
1:         }
1: 
0:         public void error(long nowNanos, Object... objects)
1:         {
0:             log(Level.ERROR, nowNanos, objects);
1:         }
1: 
0:         public void error(Object... objects)
1:         {
0:             error(CLOCK.nanoTime(), objects);
1:         }
1:     }
1: 
1:     private static final NonBlockingHashMap<Logger, NoSpamLogger> wrappedLoggers = new NonBlockingHashMap<>();
1: 
1:     @VisibleForTesting
1:     static void clearWrappedLoggersForTest()
1:     {
1:         wrappedLoggers.clear();
1:     }
1: 
1:     public static NoSpamLogger getLogger(Logger logger, long minInterval, TimeUnit unit)
1:     {
1:         NoSpamLogger wrapped = wrappedLoggers.get(logger);
1:         if (wrapped == null)
1:         {
1:             wrapped = new NoSpamLogger(logger, minInterval, unit);
1:             NoSpamLogger temp = wrappedLoggers.putIfAbsent(logger, wrapped);
1:             if (temp != null)
1:                 wrapped = temp;
1:         }
1:         return wrapped;
1:     }
1: 
0:     public static void log(Logger logger, Level level, long minInterval, TimeUnit unit, String message, Object... objects)
1:     {
0:         log(logger, level, minInterval, unit, CLOCK.nanoTime(), message, objects);
1:     }
1: 
0:     public static void log(Logger logger, Level level, long minInterval, TimeUnit unit, long nowNanos, String message, Object... objects)
1:     {
1:         NoSpamLogger wrapped = getLogger(logger, minInterval, unit);
0:         NoSpamLogStatement statement = wrapped.getStatement(message);
0:         statement.log(level, nowNanos, objects);
1:     }
1: 
0:     public static NoSpamLogStatement getStatement(Logger logger, String message, long minInterval, TimeUnit unit) {
1:         NoSpamLogger wrapped = getLogger(logger, minInterval, unit);
1:         return wrapped.getStatement(message);
1:     }
1: 
1:     private final Logger wrapped;
1:     private final long minIntervalNanos;
1:     private final NonBlockingHashMap<String, NoSpamLogStatement> lastMessage = new NonBlockingHashMap<>();
1: 
1:     private NoSpamLogger(Logger wrapped, long minInterval, TimeUnit timeUnit)
1:     {
1:         this.wrapped = wrapped;
1:         minIntervalNanos = timeUnit.toNanos(minInterval);
1:     }
1: 
0:     public void info(long nowNanos, String s, Object... objects)
1:     {
0:         log( Level.INFO, s, nowNanos, objects);
1:     }
1: 
0:     public void info(String s, Object... objects)
1:     {
0:         info(CLOCK.nanoTime(), s, objects);
1:     }
1: 
0:     public void warn(long nowNanos, String s, Object... objects)
1:     {
0:         log( Level.WARN, s, nowNanos, objects);
1:     }
1: 
0:     public void warn(String s, Object... objects)
1:     {
0:         warn(CLOCK.nanoTime(), s, objects);
1:     }
1: 
0:     public void error(long nowNanos, String s, Object... objects)
1:     {
0:         log( Level.ERROR, s, nowNanos, objects);
1:     }
1: 
0:     public void error(String s, Object... objects)
1:     {
0:         error(CLOCK.nanoTime(), s, objects);
1:     }
1: 
0:     public void log(Level l, String s, long nowNanos, Object... objects) {
0:         getStatement(s, minIntervalNanos).log(l, nowNanos, objects);
1:     }
1: 
1:     public NoSpamLogStatement getStatement(String s)
1:     {
0:         return getStatement(s, minIntervalNanos);
1:     }
1: 
0:     public NoSpamLogStatement getStatement(String s, long minInterval, TimeUnit unit) {
0:         return getStatement(s, unit.toNanos(minInterval));
1:     }
1: 
1:     public NoSpamLogStatement getStatement(String s, long minIntervalNanos)
1:     {
0:         NoSpamLogStatement statement = lastMessage.get(s);
1:         if (statement == null)
1:         {
1:             statement = new NoSpamLogStatement(s, minIntervalNanos);
0:             NoSpamLogStatement temp = lastMessage.putIfAbsent(s, statement);
1:             if (temp != null)
1:                 statement = temp;
1:         }
1:         return statement;
1:     }
1: }
author:ariel
-------------------------------------------------------------------------------
commit:cb06283
/////////////////////////////////////////////////////////////////////////
1:         public boolean log(Level l, long nowNanos, Object... objects)
1:             if (!shouldLog(nowNanos)) return false;
/////////////////////////////////////////////////////////////////////////
1:             return true;
1:         public boolean info(long nowNanos, Object... objects)
1:             return NoSpamLogStatement.this.log(Level.INFO, nowNanos, objects);
1:         public boolean info(Object... objects)
1:             return NoSpamLogStatement.this.info(CLOCK.nanoTime(), objects);
1:         public boolean warn(long nowNanos, Object... objects)
1:             return NoSpamLogStatement.this.log(Level.WARN, nowNanos, objects);
1:         public boolean warn(Object... objects)
1:             return NoSpamLogStatement.this.warn(CLOCK.nanoTime(), objects);
1:         public boolean error(long nowNanos, Object... objects)
1:             return NoSpamLogStatement.this.log(Level.ERROR, nowNanos, objects);
1:         public boolean error(Object... objects)
1:             return NoSpamLogStatement.this.error(CLOCK.nanoTime(), objects);
/////////////////////////////////////////////////////////////////////////
1:     public static boolean log(Logger logger, Level level, long minInterval, TimeUnit unit, String message, Object... objects)
0:         return log(logger, level, minInterval, unit, CLOCK.nanoTime(), message, objects);
0:     public static boolean log(Logger logger, Level level, long minInterval, TimeUnit unit, long nowNanos, String message, Object... objects)
1:         return statement.log(level, nowNanos, objects);
/////////////////////////////////////////////////////////////////////////
1:     public boolean info(long nowNanos, String s, Object... objects)
1:         return NoSpamLogger.this.log( Level.INFO, s, nowNanos, objects);
1:     public boolean info(String s, Object... objects)
1:         return NoSpamLogger.this.info(CLOCK.nanoTime(), s, objects);
1:     public boolean warn(long nowNanos, String s, Object... objects)
1:         return NoSpamLogger.this.log( Level.WARN, s, nowNanos, objects);
1:     public boolean warn(String s, Object... objects)
1:         return NoSpamLogger.this.warn(CLOCK.nanoTime(), s, objects);
1:     public boolean error(long nowNanos, String s, Object... objects)
1:         return NoSpamLogger.this.log( Level.ERROR, s, nowNanos, objects);
1:     public boolean error(String s, Object... objects)
1:         return NoSpamLogger.this.error(CLOCK.nanoTime(), s, objects);
0:     public boolean log(Level l, String s, long nowNanos, Object... objects) {
1:         return NoSpamLogger.this.getStatement(s, minIntervalNanos).log(l, nowNanos, objects);
============================================================================