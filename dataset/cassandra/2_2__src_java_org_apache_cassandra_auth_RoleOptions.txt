1:2f3fd41: /*
1:2f3fd41:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f3fd41:  * or more contributor license agreements.  See the NOTICE file
1:2f3fd41:  * distributed with this work for additional information
1:2f3fd41:  * regarding copyright ownership.  The ASF licenses this file
1:2f3fd41:  * to you under the Apache License, Version 2.0 (the
1:2f3fd41:  * "License"); you may not use this file except in compliance
1:2f3fd41:  * with the License.  You may obtain a copy of the License at
1:2f3fd41:  *
1:2f3fd41:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f3fd41:  *
1:2f3fd41:  * Unless required by applicable law or agreed to in writing, software
1:2f3fd41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f3fd41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f3fd41:  * See the License for the specific language governing permissions and
1:2f3fd41:  * limitations under the License.
1:2f3fd41:  */
1:2f3fd41: package org.apache.cassandra.auth;
1:2f3fd41: 
1:2f3fd41: import java.util.HashMap;
1:2f3fd41: import java.util.Map;
1:2f3fd41: 
1:2f3fd41: import com.google.common.base.Optional;
1:2f3fd41: 
1:2f3fd41: import org.apache.cassandra.config.DatabaseDescriptor;
1:2f3fd41: import org.apache.cassandra.exceptions.InvalidRequestException;
1:2f3fd41: import org.apache.cassandra.exceptions.SyntaxException;
1:2f3fd41: import org.apache.cassandra.utils.FBUtilities;
1:2f3fd41: 
1:2f3fd41: public class RoleOptions
1:2f3fd41: {
1:2f3fd41:     private final Map<IRoleManager.Option, Object> options = new HashMap<>();
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Set a value for a specific option.
1:2f3fd41:      * Throws SyntaxException if the same option is set multiple times
1:2f3fd41:      * @param option
1:2f3fd41:      * @param value
1:2f3fd41:      */
1:2f3fd41:     public void setOption(IRoleManager.Option option, Object value)
1:2f3fd41:     {
1:2f3fd41:         if (options.containsKey(option))
1:2f3fd41:             throw new SyntaxException(String.format("Multiple definition for property '%s'", option.name()));
1:2f3fd41:         options.put(option, value);
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Return true if there are no options with values set, false otherwise
1:2f3fd41:      * @return whether any options have values set or not
1:2f3fd41:      */
1:2f3fd41:     public boolean isEmpty()
1:2f3fd41:     {
1:2f3fd41:         return options.isEmpty();
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Return a map of all the options which have been set
1:2f3fd41:      * @return all options with values
1:2f3fd41:      */
1:2f3fd41:     public Map<IRoleManager.Option, Object> getOptions()
1:2f3fd41:     {
1:2f3fd41:         return options;
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Return a boolean value of the superuser option
1:2f3fd41:      * @return superuser option value
1:2f3fd41:      */
1:2f3fd41:     public Optional<Boolean> getSuperuser()
1:2f3fd41:     {
1:2f3fd41:         return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.SUPERUSER));
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Return a boolean value of the login option
1:2f3fd41:      * @return login option value
1:2f3fd41:      */
1:2f3fd41:     public Optional<Boolean> getLogin()
1:2f3fd41:     {
1:2f3fd41:         return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.LOGIN));
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Return the string value of the password option
1:2f3fd41:      * @return password option value
1:2f3fd41:      */
1:2f3fd41:     public Optional<String> getPassword()
1:2f3fd41:     {
1:2f3fd41:         return Optional.fromNullable((String)options.get(IRoleManager.Option.PASSWORD));
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:6b7db8a:      * Return a {@code Map<String, String>} representing custom options
1:2f3fd41:      * It is the responsiblity of IRoleManager implementations which support
1:2f3fd41:      * IRoleManager.Option.OPTION to handle type checking and conversion of these
1:2f3fd41:      * values, if present
1:2f3fd41:      * @return map of custom options
1:2f3fd41:      */
1:2f3fd41:     @SuppressWarnings("unchecked")
1:2f3fd41:     public Optional<Map<String, String>> getCustomOptions()
1:2f3fd41:     {
1:2f3fd41:         return Optional.fromNullable((Map<String, String>)options.get(IRoleManager.Option.OPTIONS));
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     /**
1:2f3fd41:      * Validate the contents of the options in two ways:
1:2f3fd41:      * - Ensure that only a subset of the options supported by the configured IRoleManager are set
1:2f3fd41:      * - Validate the type of any option values present.
1:2f3fd41:      * Should either condition fail, then InvalidRequestException is thrown. This method is called
1:2f3fd41:      * during validation of CQL statements, so the IRE results in a error response to the client.
1:2f3fd41:      *
1:2f3fd41:      * @throws InvalidRequestException if any options which are not supported by the configured IRoleManager
1:2f3fd41:      *     are set or if any option value is of an incorrect type.
1:2f3fd41:      */
1:2f3fd41:     public void validate()
1:2f3fd41:     {
1:2f3fd41:         for (Map.Entry<IRoleManager.Option, Object> option : options.entrySet())
1:2f3fd41:         {
1:2f3fd41:             if (!DatabaseDescriptor.getRoleManager().supportedOptions().contains(option.getKey()))
1:2f3fd41:                 throw new InvalidRequestException(String.format("%s doesn't support %s",
1:2f3fd41:                                                                 DatabaseDescriptor.getRoleManager().getClass().getName(),
1:2f3fd41:                                                                 option.getKey()));
1:2f3fd41:             switch (option.getKey())
1:2f3fd41:             {
1:2f3fd41:                 case LOGIN:
1:2f3fd41:                 case SUPERUSER:
1:2f3fd41:                     if (!(option.getValue() instanceof Boolean))
1:2f3fd41:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:2f3fd41:                                                                         "It must be a boolean",
1:2f3fd41:                                                                         option.getKey()));
1:2f3fd41:                     break;
1:2f3fd41:                 case PASSWORD:
1:2f3fd41:                     if (!(option.getValue() instanceof String))
1:2f3fd41:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:2f3fd41:                                                                         "It must be a string",
1:2f3fd41:                                                                         option.getKey()));
1:2f3fd41:                     break;
1:2f3fd41:                 case OPTIONS:
1:2f3fd41:                     if (!(option.getValue() instanceof Map))
1:2f3fd41:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:2f3fd41:                                                                         "It must be a map",
1:2f3fd41:                                                                         option.getKey()));
1:2f3fd41:                     break;
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41:         }
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     public String toString()
1:2f3fd41:     {
1:2f3fd41:         return FBUtilities.toString(options);
1:2f3fd41:     }
1:2f3fd41: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      * Return a {@code Map<String, String>} representing custom options
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.base.Optional;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class RoleOptions
1: {
1:     private final Map<IRoleManager.Option, Object> options = new HashMap<>();
1: 
1:     /**
1:      * Set a value for a specific option.
1:      * Throws SyntaxException if the same option is set multiple times
1:      * @param option
1:      * @param value
1:      */
1:     public void setOption(IRoleManager.Option option, Object value)
1:     {
1:         if (options.containsKey(option))
1:             throw new SyntaxException(String.format("Multiple definition for property '%s'", option.name()));
1:         options.put(option, value);
1:     }
1: 
1:     /**
1:      * Return true if there are no options with values set, false otherwise
1:      * @return whether any options have values set or not
1:      */
1:     public boolean isEmpty()
1:     {
1:         return options.isEmpty();
1:     }
1: 
1:     /**
1:      * Return a map of all the options which have been set
1:      * @return all options with values
1:      */
1:     public Map<IRoleManager.Option, Object> getOptions()
1:     {
1:         return options;
1:     }
1: 
1:     /**
1:      * Return a boolean value of the superuser option
1:      * @return superuser option value
1:      */
1:     public Optional<Boolean> getSuperuser()
1:     {
1:         return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.SUPERUSER));
1:     }
1: 
1:     /**
1:      * Return a boolean value of the login option
1:      * @return login option value
1:      */
1:     public Optional<Boolean> getLogin()
1:     {
1:         return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.LOGIN));
1:     }
1: 
1:     /**
1:      * Return the string value of the password option
1:      * @return password option value
1:      */
1:     public Optional<String> getPassword()
1:     {
1:         return Optional.fromNullable((String)options.get(IRoleManager.Option.PASSWORD));
1:     }
1: 
1:     /**
0:      * Return a Map<String, String> representing custom options
1:      * It is the responsiblity of IRoleManager implementations which support
1:      * IRoleManager.Option.OPTION to handle type checking and conversion of these
1:      * values, if present
1:      * @return map of custom options
1:      */
1:     @SuppressWarnings("unchecked")
1:     public Optional<Map<String, String>> getCustomOptions()
1:     {
1:         return Optional.fromNullable((Map<String, String>)options.get(IRoleManager.Option.OPTIONS));
1:     }
1: 
1:     /**
1:      * Validate the contents of the options in two ways:
1:      * - Ensure that only a subset of the options supported by the configured IRoleManager are set
1:      * - Validate the type of any option values present.
1:      * Should either condition fail, then InvalidRequestException is thrown. This method is called
1:      * during validation of CQL statements, so the IRE results in a error response to the client.
1:      *
1:      * @throws InvalidRequestException if any options which are not supported by the configured IRoleManager
1:      *     are set or if any option value is of an incorrect type.
1:      */
1:     public void validate()
1:     {
1:         for (Map.Entry<IRoleManager.Option, Object> option : options.entrySet())
1:         {
1:             if (!DatabaseDescriptor.getRoleManager().supportedOptions().contains(option.getKey()))
1:                 throw new InvalidRequestException(String.format("%s doesn't support %s",
1:                                                                 DatabaseDescriptor.getRoleManager().getClass().getName(),
1:                                                                 option.getKey()));
1:             switch (option.getKey())
1:             {
1:                 case LOGIN:
1:                 case SUPERUSER:
1:                     if (!(option.getValue() instanceof Boolean))
1:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:                                                                         "It must be a boolean",
1:                                                                         option.getKey()));
1:                     break;
1:                 case PASSWORD:
1:                     if (!(option.getValue() instanceof String))
1:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:                                                                         "It must be a string",
1:                                                                         option.getKey()));
1:                     break;
1:                 case OPTIONS:
1:                     if (!(option.getValue() instanceof Map))
1:                         throw new InvalidRequestException(String.format("Invalid value for property '%s'. " +
1:                                                                         "It must be a map",
1:                                                                         option.getKey()));
1:                     break;
1: 
1:             }
1:         }
1:     }
1: 
1:     public String toString()
1:     {
1:         return FBUtilities.toString(options);
1:     }
1: }
============================================================================