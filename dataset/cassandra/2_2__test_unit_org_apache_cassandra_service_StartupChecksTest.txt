1:194bad2: /*
1:194bad2:  * Licensed to the Apache Software Foundation (ASF) under one
1:194bad2:  * or more contributor license agreements.  See the NOTICE file
1:194bad2:  * distributed with this work for additional information
1:194bad2:  * regarding copyright ownership.  The ASF licenses this file
1:194bad2:  * to you under the Apache License, Version 2.0 (the
1:194bad2:  * "License"); you may not use this file except in compliance
1:194bad2:  * with the License.  You may obtain a copy of the License at
1:194bad2:  *
1:194bad2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:194bad2:  *
1:194bad2:  * Unless required by applicable law or agreed to in writing, software
1:194bad2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:194bad2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:194bad2:  * See the License for the specific language governing permissions and
1:194bad2:  * limitations under the License.
1:194bad2:  */
1:194bad2: package org.apache.cassandra.service;
2:194bad2: 
1:194bad2: import java.io.File;
1:194bad2: import java.io.IOException;
1:194bad2: import java.nio.file.Files;
1:194bad2: import java.nio.file.Path;
1:194bad2: import java.nio.file.Paths;
1:194bad2: 
1:20c5ea0: import org.junit.*;
1:194bad2: 
1:194bad2: import org.apache.cassandra.SchemaLoader;
1:194bad2: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:194bad2: import org.apache.cassandra.db.*;
1:194bad2: import org.apache.cassandra.exceptions.StartupException;
1:194bad2: import org.apache.cassandra.io.util.FileUtils;
1:194bad2: 
1:20c5ea0: import static org.junit.Assert.assertFalse;
1:194bad2: import static org.junit.Assert.assertTrue;
1:194bad2: import static org.junit.Assert.fail;
1:194bad2: 
1:194bad2: public class StartupChecksTest
1:194bad2: {
1:194bad2:     public static final String INVALID_LEGACY_SSTABLE_ROOT_PROP = "invalid-legacy-sstable-root";
1:194bad2:     StartupChecks startupChecks;
1:20c5ea0:     Path sstableDir;
1:194bad2: 
1:194bad2:     @BeforeClass
1:194bad2:     public static void setupServer()
1:194bad2:     {
1:194bad2:         SchemaLoader.prepareServer();
1:194bad2:     }
1:194bad2: 
1:194bad2:     @Before
1:20c5ea0:     public void setup() throws IOException
1:194bad2:     {
1:9797511:         for (ColumnFamilyStore cfs : Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStores())
1:194bad2:             cfs.clearUnsafe();
1:9797511:         for (File dataDir : Directories.getKSChildDirectories(SchemaConstants.SYSTEM_KEYSPACE_NAME))
1:194bad2:             FileUtils.deleteRecursive(dataDir);
1:194bad2: 
1:20c5ea0:         File dataDir = new File(DatabaseDescriptor.getAllDataFileLocations()[0]);
1:20c5ea0:         sstableDir = Paths.get(dataDir.getAbsolutePath(), "Keyspace1", "Standard1");
1:20c5ea0:         Files.createDirectories(sstableDir);
1:20c5ea0: 
1:194bad2:         startupChecks = new StartupChecks();
1:194bad2:     }
1:194bad2: 
1:20c5ea0:     @After
1:20c5ea0:     public void tearDown() throws IOException
1:20c5ea0:     {
1:20c5ea0:         FileUtils.deleteRecursive(sstableDir.toFile());
1:20c5ea0:     }
1:20c5ea0: 
1:194bad2:     @Test
1:194bad2:     public void failStartupIfInvalidSSTablesFound() throws Exception
1:194bad2:     {
1:194bad2:         startupChecks = startupChecks.withTest(StartupChecks.checkSSTablesFormat);
1:194bad2: 
1:194bad2:         copyInvalidLegacySSTables(sstableDir);
1:194bad2: 
1:194bad2:         verifyFailure(startupChecks, "Detected unreadable sstables");
1:194bad2: 
1:194bad2:         // we should ignore invalid sstables in a snapshots directory
1:194bad2:         FileUtils.deleteRecursive(sstableDir.toFile());
1:194bad2:         Path snapshotDir = sstableDir.resolve("snapshots");
1:194bad2:         Files.createDirectories(snapshotDir);
1:194bad2:         copyInvalidLegacySSTables(snapshotDir); startupChecks.verify();
1:194bad2: 
1:194bad2:         // and in a backups directory
1:194bad2:         FileUtils.deleteRecursive(sstableDir.toFile());
1:194bad2:         Path backupDir = sstableDir.resolve("backups");
1:194bad2:         Files.createDirectories(backupDir);
1:194bad2:         copyInvalidLegacySSTables(backupDir);
1:194bad2:         startupChecks.verify();
1:194bad2:     }
1:194bad2: 
1:20c5ea0:     @Test
1:20c5ea0:     public void compatibilityCheckIgnoresNonDbFiles() throws Exception
1:20c5ea0:     {
1:20c5ea0:         startupChecks = startupChecks.withTest(StartupChecks.checkSSTablesFormat);
1:20c5ea0: 
1:20c5ea0:         copyLegacyNonSSTableFiles(sstableDir);
1:20c5ea0:         assertFalse(sstableDir.toFile().listFiles().length == 0);
1:20c5ea0: 
1:20c5ea0:         startupChecks.verify();
1:20c5ea0:     }
1:20c5ea0: 
1:20c5ea0:     private void copyLegacyNonSSTableFiles(Path targetDir) throws IOException
1:20c5ea0:     {
1:20c5ea0: 
1:20c5ea0:         Path legacySSTableRoot = Paths.get(System.getProperty(INVALID_LEGACY_SSTABLE_ROOT_PROP),
1:20c5ea0:                                           "Keyspace1",
1:20c5ea0:                                           "Standard1");
1:20c5ea0:         for (String filename : new String[]{"Keyspace1-Standard1-ic-0-TOC.txt",
1:20c5ea0:                                             "Keyspace1-Standard1-ic-0-Digest.sha1",
1:20c5ea0:                                             "legacyleveled.json"})
1:20c5ea0:             Files.copy(Paths.get(legacySSTableRoot.toString(), filename), targetDir.resolve(filename));
1:20c5ea0:     }
1:20c5ea0: 
1:194bad2:     private void copyInvalidLegacySSTables(Path targetDir) throws IOException
1:194bad2:     {
1:194bad2:         File legacySSTableRoot = Paths.get(System.getProperty(INVALID_LEGACY_SSTABLE_ROOT_PROP),
1:194bad2:                                            "Keyspace1",
1:194bad2:                                            "Standard1").toFile();
1:194bad2:         for (File f : legacySSTableRoot.listFiles())
1:194bad2:             Files.copy(f.toPath(), targetDir.resolve(f.getName()));
1:194bad2: 
1:194bad2:     }
1:194bad2: 
1:194bad2:     private void verifyFailure(StartupChecks tests, String message)
1:194bad2:     {
1:194bad2:         try
1:194bad2:         {
1:194bad2:             tests.verify();
1:194bad2:             fail("Expected a startup exception but none was thrown");
1:194bad2:         }
1:194bad2:         catch (StartupException e)
1:194bad2:         {
1:194bad2:             assertTrue(e.getMessage().contains(message));
1:194bad2:         }
1:194bad2:     }
1:194bad2: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnFamilyStore cfs : Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStores())
1:         for (File dataDir : Directories.getKSChildDirectories(SchemaConstants.SYSTEM_KEYSPACE_NAME))
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:20c5ea0
/////////////////////////////////////////////////////////////////////////
1: import org.junit.*;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
1:     Path sstableDir;
/////////////////////////////////////////////////////////////////////////
1:     public void setup() throws IOException
1:         File dataDir = new File(DatabaseDescriptor.getAllDataFileLocations()[0]);
1:         sstableDir = Paths.get(dataDir.getAbsolutePath(), "Keyspace1", "Standard1");
1:         Files.createDirectories(sstableDir);
1: 
1:     @After
1:     public void tearDown() throws IOException
1:     {
1:         FileUtils.deleteRecursive(sstableDir.toFile());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void compatibilityCheckIgnoresNonDbFiles() throws Exception
1:     {
1:         startupChecks = startupChecks.withTest(StartupChecks.checkSSTablesFormat);
1: 
1:         copyLegacyNonSSTableFiles(sstableDir);
1:         assertFalse(sstableDir.toFile().listFiles().length == 0);
1: 
1:         startupChecks.verify();
1:     }
1: 
1:     private void copyLegacyNonSSTableFiles(Path targetDir) throws IOException
1:     {
1: 
1:         Path legacySSTableRoot = Paths.get(System.getProperty(INVALID_LEGACY_SSTABLE_ROOT_PROP),
1:                                           "Keyspace1",
1:                                           "Standard1");
1:         for (String filename : new String[]{"Keyspace1-Standard1-ic-0-TOC.txt",
1:                                             "Keyspace1-Standard1-ic-0-Digest.sha1",
1:                                             "legacyleveled.json"})
1:             Files.copy(Paths.get(legacySSTableRoot.toString(), filename), targetDir.resolve(filename));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:194bad2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.file.Files;
1: import java.nio.file.Path;
1: import java.nio.file.Paths;
1: 
0: import org.junit.Before;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.exceptions.StartupException;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class StartupChecksTest
1: {
1:     public static final String INVALID_LEGACY_SSTABLE_ROOT_PROP = "invalid-legacy-sstable-root";
1:     StartupChecks startupChecks;
1: 
1:     @BeforeClass
1:     public static void setupServer()
1:     {
1:         SchemaLoader.prepareServer();
1:     }
1: 
1:     @Before
0:     public void setup()
1:     {
0:         for (ColumnFamilyStore cfs : Keyspace.open(SystemKeyspace.NAME).getColumnFamilyStores())
1:             cfs.clearUnsafe();
0:         for (File dataDir : Directories.getKSChildDirectories(SystemKeyspace.NAME))
1:             FileUtils.deleteRecursive(dataDir);
1: 
1:         startupChecks = new StartupChecks();
1:     }
1: 
1:     @Test
1:     public void failStartupIfInvalidSSTablesFound() throws Exception
1:     {
1:         startupChecks = startupChecks.withTest(StartupChecks.checkSSTablesFormat);
1: 
0:         File dataDir = new File(DatabaseDescriptor.getAllDataFileLocations()[0]);
0:         Path sstableDir = Paths.get(dataDir.getAbsolutePath(), "Keyspace1", "Standard1");
0:         Files.createDirectories(sstableDir);
1:         copyInvalidLegacySSTables(sstableDir);
1: 
1:         verifyFailure(startupChecks, "Detected unreadable sstables");
1: 
1:         // we should ignore invalid sstables in a snapshots directory
1:         FileUtils.deleteRecursive(sstableDir.toFile());
1:         Path snapshotDir = sstableDir.resolve("snapshots");
1:         Files.createDirectories(snapshotDir);
1:         copyInvalidLegacySSTables(snapshotDir); startupChecks.verify();
1: 
1:         // and in a backups directory
1:         FileUtils.deleteRecursive(sstableDir.toFile());
1:         Path backupDir = sstableDir.resolve("backups");
1:         Files.createDirectories(backupDir);
1:         copyInvalidLegacySSTables(backupDir);
1:         startupChecks.verify();
1:     }
1: 
1:     private void copyInvalidLegacySSTables(Path targetDir) throws IOException
1:     {
1:         File legacySSTableRoot = Paths.get(System.getProperty(INVALID_LEGACY_SSTABLE_ROOT_PROP),
1:                                            "Keyspace1",
1:                                            "Standard1").toFile();
1:         for (File f : legacySSTableRoot.listFiles())
1:             Files.copy(f.toPath(), targetDir.resolve(f.getName()));
1: 
1:     }
1: 
1: 
1:     private void verifyFailure(StartupChecks tests, String message)
1:     {
1:         try
1:         {
1:             tests.verify();
1:             fail("Expected a startup exception but none was thrown");
1:         }
1:         catch (StartupException e)
1:         {
1:             assertTrue(e.getMessage().contains(message));
1:         }
1:     }
1: }
============================================================================