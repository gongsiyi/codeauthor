1:763ada2: /*
1:763ada2:  * Licensed to the Apache Software Foundation (ASF) under one
1:763ada2:  * or more contributor license agreements.  See the NOTICE file
1:763ada2:  * distributed with this work for additional information
1:763ada2:  * regarding copyright ownership.  The ASF licenses this file
1:763ada2:  * to you under the Apache License, Version 2.0 (the
1:763ada2:  * "License"); you may not use this file except in compliance
1:763ada2:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:763ada2:  */
1:07cf56f: package org.apache.cassandra.io.sstable;
1:4c530a1: 
1:4c530a1: import java.io.File;
1:4c530a1: import java.io.IOException;
1:4c530a1: 
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:4c530a1: 
1:0a08525: import org.apache.cassandra.config.CFMetaData;
1:4c530a1: import org.apache.cassandra.db.DecoratedKey;
1:4e17ac4: import org.apache.cassandra.db.RowIndexEntry;
1:0a08525: import org.apache.cassandra.dht.IPartitioner;
1:60e45c0: import org.apache.cassandra.io.util.DataInputPlus;
1:d389047: import org.apache.cassandra.io.util.RandomAccessReader;
1:fe57cc5: import org.apache.cassandra.utils.ByteBufferUtil;
1:d8b1fc3: import org.apache.cassandra.utils.CloseableIterator;
1:4c530a1: 
1:d8b1fc3: public class KeyIterator extends AbstractIterator<DecoratedKey> implements CloseableIterator<DecoratedKey>
1:4c530a1: {
1:17dd4cc:     private final static class In
1:4c530a1:     {
1:17dd4cc:         private final File path;
1:17dd4cc:         private RandomAccessReader in;
1:17dd4cc: 
1:17dd4cc:         public In(File path)
5:17dd4cc:         {
1:17dd4cc:             this.path = path;
1:4c530a1:         }
1:17dd4cc: 
1:17dd4cc:         private void maybeInit()
1:4c530a1:         {
1:17dd4cc:             if (in == null)
1:27ed655:                 in = RandomAccessReader.open(path);
1:4c530a1:         }
1:17dd4cc: 
1:60e45c0:         public DataInputPlus get()
1:4c530a1:         {
1:17dd4cc:             maybeInit();
1:17dd4cc:             return in;
1:4c530a1:         }
1:17dd4cc: 
1:17dd4cc:         public boolean isEOF()
1:17dd4cc:         {
1:17dd4cc:             maybeInit();
1:17dd4cc:             return in.isEOF();
5:17dd4cc:         }
1:17dd4cc: 
1:17dd4cc:         public void close()
1:17dd4cc:         {
1:17dd4cc:             if (in != null)
1:17dd4cc:                 in.close();
1:17dd4cc:         }
1:17dd4cc: 
1:17dd4cc:         public long getFilePointer()
1:17dd4cc:         {
1:17dd4cc:             maybeInit();
1:17dd4cc:             return in.getFilePointer();
1:17dd4cc:         }
1:17dd4cc: 
1:17dd4cc:         public long length()
1:4c530a1:         {
1:17dd4cc:             maybeInit();
1:4c530a1:             return in.length();
1:4c530a1:         }
1:17dd4cc:     }
1:72790dc: 
1:60e45c0:     private final Descriptor desc;
1:17dd4cc:     private final In in;
1:0a08525:     private final IPartitioner partitioner;
1:4c530a1: 
1:72790dc:     private long keyPosition;
1:17dd4cc: 
1:0a08525:     public KeyIterator(Descriptor desc, CFMetaData metadata)
1:4c530a1:     {
1:60e45c0:         this.desc = desc;
1:17dd4cc:         in = new In(new File(desc.filenameFor(Component.PRIMARY_INDEX)));
1:0a08525:         partitioner = metadata.partitioner;
1:8e68f3b:     }
1:4c530a1: 
1:7e4ef1c:     protected DecoratedKey computeNext()
1:4c530a1:     {
1:8e68f3b:         try
1:8e68f3b:         {
1:4c530a1:             if (in.isEOF())
1:4c530a1:                 return endOfData();
1:17dd4cc: 
1:72790dc:             keyPosition = in.getFilePointer();
1:0a08525:             DecoratedKey key = partitioner.decorateKey(ByteBufferUtil.readWithShortLength(in.get()));
1:60e45c0:             RowIndexEntry.Serializer.skip(in.get(), desc.version); // skip remainder of the entry
1:4c530a1:             return key;
1:4c530a1:         }
1:8e68f3b:         catch (IOException e)
1:8e68f3b:         {
1:debb15e:             throw new RuntimeException(e);
1:8e68f3b:         }
1:4c530a1:     }
1:4c530a1: 
1:debb15e:     public void close()
1:4c530a1:     {
1:4c530a1:         in.close();
1:4c530a1:     }
1:4c530a1: 
1:4c530a1:     public long getBytesRead()
1:4c530a1:     {
1:4c530a1:         return in.getFilePointer();
1:4c530a1:     }
1:4c530a1: 
1:4c530a1:     public long getTotalBytes()
1:4c530a1:     {
1:debb15e:         return in.length();
1:4c530a1:     }
1:17dd4cc: 
1:72790dc:     public long getKeyPosition()
1:72790dc:     {
1:72790dc:         return keyPosition;
1:72790dc:     }
1:4c530a1: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1:     private long keyPosition;
/////////////////////////////////////////////////////////////////////////
1:             keyPosition = in.getFilePointer();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getKeyPosition()
1:     {
1:         return keyPosition;
1:     }
commit:27ed655
/////////////////////////////////////////////////////////////////////////
1:         in = RandomAccessReader.open(path);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:60e45c0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public DataInputPlus get()
/////////////////////////////////////////////////////////////////////////
1:     private final Descriptor desc;
1:         this.desc = desc;
/////////////////////////////////////////////////////////////////////////
1:             RowIndexEntry.Serializer.skip(in.get(), desc.version); // skip remainder of the entry
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:             RowIndexEntry.Serializer.skip(in); // skip remainder of the entry
commit:4d34917
/////////////////////////////////////////////////////////////////////////
0:             RowIndexEntry.serializer.skip(in, desc.version); // skip remainder of the entry
commit:4e17ac4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.RowIndexEntry;
/////////////////////////////////////////////////////////////////////////
0:             RowIndexEntry.serializer.skip(in, desc); // skip remainder of the entry
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.io.sstable;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.dht.IPartitioner;
/////////////////////////////////////////////////////////////////////////
1:     private final IPartitioner partitioner;
1:     public KeyIterator(Descriptor desc, CFMetaData metadata)
1:         partitioner = metadata.partitioner;
/////////////////////////////////////////////////////////////////////////
1:             DecoratedKey key = partitioner.decorateKey(ByteBufferUtil.readWithShortLength(in.get()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public KeyIterator(Descriptor desc)
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in.get()));
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));
0:             RowIndexEntry.serializer.skip(in); // skip remainder of the entry
commit:01bc564
/////////////////////////////////////////////////////////////////////////
0:         in = RandomAccessReader.open(path, true);
commit:debb15e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         File path = new File(desc.filenameFor(SSTable.COMPONENT_INDEX));
0:         in = RandomAccessReader.open(path, true);
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(e);
1:     public void close()
/////////////////////////////////////////////////////////////////////////
1:         return in.length();
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
1:     protected DecoratedKey computeNext()
0:             DecoratedKey key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, ByteBufferUtil.readWithShortLength(in));
commit:a19f7f1
/////////////////////////////////////////////////////////////////////////
0:     protected DecoratedKey<?> computeNext()
0:             DecoratedKey<?> key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, ByteBufferUtil.readWithShortLength(in));
commit:d389047
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.RandomAccessReader;
0:     private final RandomAccessReader in;
/////////////////////////////////////////////////////////////////////////
0:             in = RandomAccessReader.open(new File(desc.filenameFor(SSTable.COMPONENT_INDEX)), true);
commit:d8b1fc3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.CloseableIterator;
1: public class KeyIterator extends AbstractIterator<DecoratedKey> implements CloseableIterator<DecoratedKey>
commit:fc4502a
/////////////////////////////////////////////////////////////////////////
0:                                               true);
commit:fe57cc5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, ByteBufferUtil.readWithShortLength(in));
commit:3991fba
/////////////////////////////////////////////////////////////////////////
0:             in = new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_INDEX)),
0:                                               "r",
0:                                               BufferedRandomAccessFile.DEFAULT_BUFFER_SIZE,
0:                                               true);
commit:b182e5e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: public class KeyIterator extends AbstractIterator<DecoratedKey> implements Iterator<DecoratedKey>, Closeable
commit:8e68f3b
/////////////////////////////////////////////////////////////////////////
0: public class KeyIterator extends AbstractIterator<DecoratedKey> implements IKeyIterator
0:     public KeyIterator(Descriptor desc)
1:         try
1:         {
0:             in = new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_INDEX)), "r");
1:         }
1:         catch (IOException e)
1:         {
0:             throw new IOError(e);
1:         }
commit:4c530a1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.io.sstable;
1: 
0: import java.io.Closeable;
1: import java.io.File;
0: import java.io.IOError;
1: import java.io.IOException;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.io.ICompactionInfo;
0: import org.apache.cassandra.io.util.BufferedRandomAccessFile;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class KeyIterator extends AbstractIterator<DecoratedKey> implements ICompactionInfo, Closeable
1: {
0:     private final BufferedRandomAccessFile in;
0:     private final Descriptor desc;
1: 
0:     public KeyIterator(Descriptor desc) throws IOException
1:     {
0:         this.desc = desc;
0:         in = new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_INDEX)), "r");
1:     }
1: 
0:     protected DecoratedKey computeNext()
1:     {
0:         try
1:         {
1:             if (in.isEOF())
1:                 return endOfData();
0:             DecoratedKey key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, FBUtilities.readShortByteArray(in));
0:             in.readLong(); // skip data position
1:             return key;
1:         }
0:         catch (IOException e)
1:         {
0:             throw new IOError(e);
1:         }
1:     }
1: 
0:     public void close() throws IOException
1:     {
1:         in.close();
1:     }
1: 
1:     public long getBytesRead()
1:     {
1:         return in.getFilePointer();
1:     }
1: 
1:     public long getTotalBytes()
1:     {
0:         try
1:         {
1:             return in.length();
1:         }
0:         catch (IOException e)
1:         {
0:             throw new IOError(e);
1:         }
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.dht.IPartitioner;
/////////////////////////////////////////////////////////////////////////
0:     private final IPartitioner partitioner;
0:     public KeyIterator(Descriptor desc, CFMetaData metadata)
0:         partitioner = metadata.partitioner;
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = partitioner.decorateKey(ByteBufferUtil.readWithShortLength(in.get()));
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
/////////////////////////////////////////////////////////////////////////
1:     private final static class In
1:     {
1:         private final File path;
1:         private RandomAccessReader in;
1: 
1:         public In(File path)
1:         {
1:             this.path = path;
1:         }
1: 
1:         private void maybeInit()
1:         {
1:             if (in == null)
0:                 in = RandomAccessReader.open(path);
1:         }
1: 
0:         public DataInput get()
1:         {
1:             maybeInit();
1:             return in;
1:         }
1: 
1:         public boolean isEOF()
1:         {
1:             maybeInit();
1:             return in.isEOF();
1:         }
1: 
1:         public void close()
1:         {
1:             if (in != null)
1:                 in.close();
1:         }
1: 
1:         public long getFilePointer()
1:         {
1:             maybeInit();
1:             return in.getFilePointer();
1:         }
1: 
1:         public long length()
1:         {
1:             maybeInit();
0:             return in.length();
1:         }
1:     }
1: 
1:     private final In in;
1: 
1:         in = new In(new File(desc.filenameFor(Component.PRIMARY_INDEX)));
/////////////////////////////////////////////////////////////////////////
1: 
0:             DecoratedKey key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in.get()));
0:             RowIndexEntry.Serializer.skip(in.get()); // skip remainder of the entry
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f388c9d
/////////////////////////////////////////////////////////////////////////
0:         File path = new File(desc.filenameFor(Component.PRIMARY_INDEX));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:383d35e
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7ed395d
/////////////////////////////////////////////////////////////////////////
0:                                               true,
0:                                               false);
author:Eric Evans
-------------------------------------------------------------------------------
commit:763ada2
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================