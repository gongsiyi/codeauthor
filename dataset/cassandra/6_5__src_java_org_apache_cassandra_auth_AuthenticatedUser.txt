1:f8f6fb2: /*
1:f8f6fb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:f8f6fb2:  * or more contributor license agreements.  See the NOTICE file
1:f8f6fb2:  * distributed with this work for additional information
1:f8f6fb2:  * regarding copyright ownership.  The ASF licenses this file
1:f8f6fb2:  * to you under the Apache License, Version 2.0 (the
1:f8f6fb2:  * "License"); you may not use this file except in compliance
1:f8f6fb2:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
2:f8f6fb2:  */
1:f8f6fb2: package org.apache.cassandra.auth;
2:d0f7e9e: 
1:879b694: import java.util.Set;
1:879b694: 
1:d0f7e9e: import com.google.common.base.Objects;
1:879b694: 
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:d0f7e9e: 
1:bddfa9e: /**
1:bddfa9e:  * Returned from IAuthenticator#authenticate(), represents an authenticated user everywhere internally.
1:879b694:  *
1:879b694:  * Holds the name of the user and the roles that have been granted to the user. The roles will be cached
1:879b694:  * for roles_validity_in_ms.
1:bddfa9e:  */
1:f8f6fb2: public class AuthenticatedUser
6:879b694: {
1:9072757:     public static final String SYSTEM_USERNAME = "system";
1:9072757:     public static final AuthenticatedUser SYSTEM_USER = new AuthenticatedUser(SYSTEM_USERNAME);
1:879b694: 
1:bddfa9e:     public static final String ANONYMOUS_USERNAME = "anonymous";
1:bddfa9e:     public static final AuthenticatedUser ANONYMOUS_USER = new AuthenticatedUser(ANONYMOUS_USERNAME);
1:879b694: 
1:879b694:     // User-level permissions cache.
1:d919cc9:     private static final PermissionsCache permissionsCache = new PermissionsCache(DatabaseDescriptor.getAuthorizer());
1:879b694: 
1:bddfa9e:     private final String name;
1:217721a:     // primary Role of the logged in user
1:217721a:     private final RoleResource role;
1:d0f7e9e: 
1:bddfa9e:     public AuthenticatedUser(String name)
1:879b694:     {
1:bddfa9e:         this.name = name;
1:217721a:         this.role = RoleResource.role(name);
4:879b694:     }
1:879b694: 
1:bddfa9e:     public String getName()
1:879b694:     {
1:bddfa9e:         return name;
1:879b694:     }
1:d0f7e9e: 
1:217721a:     public RoleResource getPrimaryRole()
1:217721a:     {
1:217721a:         return role;
1:217721a:     }
1:217721a: 
1:bddfa9e:     /**
1:bddfa9e:      * Checks the user's superuser status.
1:bddfa9e:      * Only a superuser is allowed to perform CREATE USER and DROP USER queries.
1:bddfa9e:      * Im most cased, though not necessarily, a superuser will have Permission.ALL on every resource
1:bddfa9e:      * (depends on IAuthorizer implementation).
1:bddfa9e:      */
1:bddfa9e:     public boolean isSuper()
1:879b694:     {
1:b32ce68:         return !isAnonymous() && Roles.hasSuperuserStatus(role);
1:879b694:     }
1:879b694: 
1:bddfa9e:     /**
1:bddfa9e:      * If IAuthenticator doesn't require authentication, this method may return true.
1:bddfa9e:      */
1:bddfa9e:     public boolean isAnonymous()
1:879b694:     {
1:bddfa9e:         return this == ANONYMOUS_USER;
1:879b694:     }
1:879b694: 
1:879b694:     /**
1:9072757:      * Some internal operations are performed on behalf of Cassandra itself, in those cases
1:9072757:      * the system user should be used where an identity is required
1:9072757:      * see CreateRoleStatement#execute() and overrides of SchemaAlteringStatement#grantPermissionsToCreator()
1:9072757:      */
1:9072757:     public boolean isSystem()
1:9072757:     {
1:9072757:         return this == SYSTEM_USER;
1:9072757:     }
1:9072757: 
1:9072757:     /**
1:879b694:      * Get the roles that have been granted to the user via the IRoleManager
1:879b694:      *
1:879b694:      * @return a list of roles that have been granted to the user
1:879b694:      */
1:217721a:     public Set<RoleResource> getRoles()
1:879b694:     {
1:b32ce68:         return Roles.getRoles(role);
1:879b694:     }
1:879b694: 
1:b32ce68:     public Set<Permission> getPermissions(IResource resource)
1:879b694:     {
1:b32ce68:         return permissionsCache.getPermissions(this, resource);
1:879b694:     }
1:879b694: 
1:f8f6fb2:     @Override
1:f8f6fb2:     public String toString()
1:879b694:     {
1:bddfa9e:         return String.format("#<User %s>", name);
1:879b694:     }
1:879b694: 
1:d0f7e9e:     @Override
1:d0f7e9e:     public boolean equals(Object o)
1:879b694:     {
1:d0f7e9e:         if (this == o)
1:879b694:             return true;
1:879b694: 
1:d0f7e9e:         if (!(o instanceof AuthenticatedUser))
1:879b694:             return false;
1:879b694: 
1:d0f7e9e:         AuthenticatedUser u = (AuthenticatedUser) o;
1:879b694: 
1:b248b1a:         return Objects.equal(name, u.name);
1:879b694:     }
1:d0f7e9e: 
1:d0f7e9e:     @Override
1:d0f7e9e:     public int hashCode()
1:879b694:     {
1:d0f7e9e:         return Objects.hashCode(name);
1:879b694:     }
1:879b694: }
============================================================================
author:Brandon Williams
-------------------------------------------------------------------------------
commit:d919cc9
/////////////////////////////////////////////////////////////////////////
1:     private static final PermissionsCache permissionsCache = new PermissionsCache(DatabaseDescriptor.getAuthorizer());
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return !isAnonymous() && Roles.hasSuperuserStatus(role);
/////////////////////////////////////////////////////////////////////////
1:         return Roles.getRoles(role);
1:     public Set<Permission> getPermissions(IResource resource)
1:         return permissionsCache.getPermissions(this, resource);
commit:9072757
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final String SYSTEM_USERNAME = "system";
1:     public static final AuthenticatedUser SYSTEM_USER = new AuthenticatedUser(SYSTEM_USERNAME);
/////////////////////////////////////////////////////////////////////////
1:      * Some internal operations are performed on behalf of Cassandra itself, in those cases
1:      * the system user should be used where an identity is required
1:      * see CreateRoleStatement#execute() and overrides of SchemaAlteringStatement#grantPermissionsToCreator()
1:      */
1:     public boolean isSystem()
1:     {
1:         return this == SYSTEM_USER;
1:     }
1: 
1:     /**
commit:217721a
/////////////////////////////////////////////////////////////////////////
0:     private static final LoadingCache<RoleResource, Set<RoleResource>> rolesCache = initRolesCache();
/////////////////////////////////////////////////////////////////////////
1:     // primary Role of the logged in user
1:     private final RoleResource role;
1:         this.role = RoleResource.role(name);
/////////////////////////////////////////////////////////////////////////
1:     public RoleResource getPrimaryRole()
1:     {
1:         return role;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         for (RoleResource role : getRoles())
/////////////////////////////////////////////////////////////////////////
1:     public Set<RoleResource> getRoles()
0:             return loadRoles(role);
0:             return rolesCache.get(role);
/////////////////////////////////////////////////////////////////////////
0:     private static Set<RoleResource> loadRoles(RoleResource primary)
0:             return DatabaseDescriptor.getRoleManager().getRoles(primary, true);
/////////////////////////////////////////////////////////////////////////
0:     private static LoadingCache<RoleResource, Set<RoleResource>> initRolesCache()
/////////////////////////////////////////////////////////////////////////
0:                            .build(new CacheLoader<RoleResource, Set<RoleResource>>()
0:                                public Set<RoleResource> load(RoleResource primary)
0:                                    return loadRoles(primary);
0:                                public ListenableFuture<Set<RoleResource>> reload(final RoleResource primary, Set<RoleResource> oldValue)
0:                                    ListenableFutureTask<Set<RoleResource>> task = ListenableFutureTask.create(new Callable<Set<RoleResource>>()
0:                                        public Set<RoleResource> call()
0:                                            return loadRoles(primary);
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.google.common.cache.CacheBuilder;
0: import com.google.common.cache.CacheLoader;
0: import com.google.common.cache.LoadingCache;
0: import com.google.common.util.concurrent.ListenableFuture;
0: import com.google.common.util.concurrent.ListenableFutureTask;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.concurrent.ScheduledExecutors;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.exceptions.RequestExecutionException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
1:  *
1:  * Holds the name of the user and the roles that have been granted to the user. The roles will be cached
1:  * for roles_validity_in_ms.
0:     private static final Logger logger = LoggerFactory.getLogger(AuthenticatedUser.class);
1: 
0:     // User-level roles cache
0:     private static final LoadingCache<String, Set<String>> rolesCache = initRolesCache();
1: 
1:     // User-level permissions cache.
0:     private static final PermissionsCache permissionsCache = new PermissionsCache(DatabaseDescriptor.getPermissionsValidity(),
0:                                                                                   DatabaseDescriptor.getPermissionsUpdateInterval(),
0:                                                                                   DatabaseDescriptor.getPermissionsCacheMaxEntries(),
0:                                                                                   DatabaseDescriptor.getAuthorizer());
1: 
/////////////////////////////////////////////////////////////////////////
0:         return !isAnonymous() && hasSuperuserRole();
1:     }
1: 
0:     private boolean hasSuperuserRole()
1:     {
0:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
0:         for (String role : getRoles())
0:             if (roleManager.isSuper(role))
1:                 return true;
1:         return false;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the roles that have been granted to the user via the IRoleManager
1:      *
1:      * @return a list of roles that have been granted to the user
1:      */
0:     public Set<String> getRoles()
1:     {
0:         if (rolesCache == null)
0:             return loadRoles(name);
1: 
0:         try
1:         {
0:             return rolesCache.get(name);
1:         }
0:         catch (Exception e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     public static Set<Permission> getPermissions(AuthenticatedUser user, IResource resource)
1:     {
0:         return permissionsCache.getPermissions(user, resource);
1:     }
1: 
0:     private static Set<String> loadRoles(String name)
1:     {
0:         try
1:         {
0:             return DatabaseDescriptor.getRoleManager().getRoles(name, true);
1:         }
0:         catch (RequestValidationException e)
1:         {
0:             throw new AssertionError(e); // not supposed to happen
1:         }
0:         catch (RequestExecutionException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1:     
0:     private static LoadingCache<String, Set<String>> initRolesCache()
1:     {
0:         if (DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator)
0:             return null;
1: 
0:         int validityPeriod = DatabaseDescriptor.getRolesValidity();
0:         if (validityPeriod <= 0)
0:             return null;
1: 
0:         return CacheBuilder.newBuilder()
0:                            .refreshAfterWrite(validityPeriod, TimeUnit.MILLISECONDS)
0:                            .build(new CacheLoader<String, Set<String>>()
1:                            {
0:                                public Set<String> load(String name)
1:                                {
0:                                    return loadRoles(name);
1:                                }
1: 
0:                                public ListenableFuture<Set<String>> reload(final String name, Set<String> oldValue)
1:                                {
0:                                    ListenableFutureTask<Set<String>> task = ListenableFutureTask.create(new Callable<Set<String>>()
1:                                    {
0:                                        public Set<String> call()
1:                                        {
0:                                            return loadRoles(name);
1:                                        }
0:                                    });
0:                                    ScheduledExecutors.optionalTasks.execute(task);
0:                                    return task;
1:                                }
0:                            });
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b248b1a
/////////////////////////////////////////////////////////////////////////
1:         return Objects.equal(name, u.name);
commit:d0f7e9e
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Objects;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean equals(Object o)
0:     {
1:         if (this == o)
0:             return true;
1: 
1:         if (!(o instanceof AuthenticatedUser))
0:             return false;
1: 
1:         AuthenticatedUser u = (AuthenticatedUser) o;
1: 
0:         return Objects.equal(this.name, u.name);
0:     }
1: 
1:     @Override
1:     public int hashCode()
0:     {
1:         return Objects.hashCode(name);
0:     }
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Returned from IAuthenticator#authenticate(), represents an authenticated user everywhere internally.
1:  */
1:     public static final String ANONYMOUS_USERNAME = "anonymous";
1:     public static final AuthenticatedUser ANONYMOUS_USER = new AuthenticatedUser(ANONYMOUS_USERNAME);
1:     private final String name;
0: 
1:     public AuthenticatedUser(String name)
1:         this.name = name;
1:     public String getName()
1:         return name;
1:     /**
1:      * Checks the user's superuser status.
1:      * Only a superuser is allowed to perform CREATE USER and DROP USER queries.
1:      * Im most cased, though not necessarily, a superuser will have Permission.ALL on every resource
1:      * (depends on IAuthorizer implementation).
1:      */
1:     public boolean isSuper()
0:         return !isAnonymous() && Auth.isSuperuser(name);
0:     }
0: 
1:     /**
1:      * If IAuthenticator doesn't require authentication, this method may return true.
1:      */
1:     public boolean isAnonymous()
0:     {
1:         return this == ANONYMOUS_USER;
1:         return String.format("#<User %s>", name);
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
0:     private final boolean isSuperUser;
0:         this(username, false);
0:     public AuthenticatedUser(String username, boolean isSuperUser)
0:         this.isSuperUser = isSuperUser;
0:     }
0: 
0:     public boolean isSuperUser()
0:     {
0:         return isSuperUser;
0:         return String.format("#<User %s super=%s>", username, isSuperUser);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Eric Evans
-------------------------------------------------------------------------------
commit:f8f6fb2
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
1: package org.apache.cassandra.auth;
0: 
0: import java.util.Collections;
0: import java.util.Set;
0: 
0: /**
0:  * An authenticated user and her groups.
1:  */
1: public class AuthenticatedUser
0: {
0:     public final String username;
0:     public final Set<String> groups;
0: 
0:     public AuthenticatedUser(String username)
0:     {
0:         this.username = username;
0:         this.groups = Collections.emptySet();
0:     }
0: 
0:     public AuthenticatedUser(String username, Set<String> groups)
0:     {
0:         this.username = username;
0:         this.groups = Collections.unmodifiableSet(groups);
0:     }
0: 
1:     @Override
1:     public String toString()
0:     {
0:         return String.format("#<User %s groups=%s>", username, groups);
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:de5715e
/////////////////////////////////////////////////////////////////////////
commit:da2d195
/////////////////////////////////////////////////////////////////////////
0:         return String.format("#<User %s groups=%s>", username, groups);
commit:3f9f507
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: package org.apache.cassandra.auth;
0: 
0: import java.util.Collections;
0: import java.util.Map;
0: import java.util.Set;
0: 
0: import org.apache.cassandra.avro.AccessLevel;
0: 
0: /**
0:  * An authenticated user and her groups.
0:  */
0: public class AuthenticatedUser
0: {
0:     public final String username;
0:     public final Set<String> groups;
0:     public final boolean isSuper;
0: 
0:     public AuthenticatedUser(String username, boolean isSuper)
0:     {
0:         this.username = username;
0:         this.groups = Collections.emptySet();
0:         this.isSuper = isSuper;
0:     }
0: 
0:     public AuthenticatedUser(String username, Set<String> groups, boolean isSuper)
0:     {
0:         this.username = username;
0:         this.groups = Collections.unmodifiableSet(groups);
0:         this.isSuper = isSuper;
0:     }
0: 
0:     /**
0:      * @return The access level granted to the user by the given access maps.
0:      */
0:     public AccessLevel levelFor(Map<String,AccessLevel> usersAccess, Map<String,AccessLevel> groupsAccess)
0:     {
0:         // determine the maximum access level for this user and groups
0:         AccessLevel level = usersAccess.get(username);
0:         if (level == null)
0:             level = AccessLevel.NONE;
0:         for (String group : groups)
0:         {
0:             AccessLevel forGroup = groupsAccess.get(group);
0:             if (forGroup != null && forGroup.ordinal() > level.ordinal())
0:                 level = forGroup;
0:         }
0:         return level;
0:     }
0: 
0:     @Override
0:     public String toString()
0:     {
0:         return "#<User %s groups=%s>".format(username, groups);
0:     }
0: }
============================================================================