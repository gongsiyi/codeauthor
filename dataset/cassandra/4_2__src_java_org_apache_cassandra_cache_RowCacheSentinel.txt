1:643d18a: /*
1:643d18a:  * Licensed to the Apache Software Foundation (ASF) under one
1:643d18a:  * or more contributor license agreements.  See the NOTICE file
1:643d18a:  * distributed with this work for additional information
1:643d18a:  * regarding copyright ownership.  The ASF licenses this file
1:643d18a:  * to you under the Apache License, Version 2.0 (the
1:643d18a:  * "License"); you may not use this file except in compliance
1:643d18a:  * with the License.  You may obtain a copy of the License at
1:643d18a:  *
1:643d18a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:643d18a:  *
1:643d18a:  * Unless required by applicable law or agreed to in writing, software
1:643d18a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:643d18a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:643d18a:  * See the License for the specific language governing permissions and
1:643d18a:  * limitations under the License.
1:643d18a:  */
1:643d18a: package org.apache.cassandra.cache;
4:643d18a: 
1:643d18a: import java.util.concurrent.atomic.AtomicLong;
1:da93a1c: 
1:643d18a: import com.google.common.base.Objects;
1:643d18a: 
1:643d18a: /**
1:643d18a:  * A sentinel object for row caches.  See comments to getThroughCache and CASSANDRA-3862.
1:643d18a:  */
1:643d18a: public class RowCacheSentinel implements IRowCacheEntry
2:643d18a: {
1:643d18a:     private static final AtomicLong generator = new AtomicLong();
1:643d18a: 
1:643d18a:     final long sentinelId;
1:643d18a: 
1:643d18a:     public RowCacheSentinel()
1:643d18a:     {
1:643d18a:         sentinelId = generator.getAndIncrement();
2:643d18a:     }
1:da93a1c: 
1:643d18a:     RowCacheSentinel(long sentinelId)
1:da93a1c:     {
1:643d18a:         this.sentinelId = sentinelId;
1:643d18a:     }
1:643d18a: 
1:643d18a:     @Override
1:643d18a:     public boolean equals(Object o)
1:643d18a:     {
1:643d18a:         if (!(o instanceof RowCacheSentinel)) return false;
1:643d18a: 
1:643d18a:         RowCacheSentinel other = (RowCacheSentinel) o;
1:643d18a:         return this.sentinelId == other.sentinelId;
1:643d18a:     }
1:643d18a: 
1:643d18a:     @Override
1:643d18a:     public int hashCode()
1:643d18a:     {
1:643d18a:         return Objects.hashCode(sentinelId);
1:da93a1c:     }
1:643d18a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
commit:fe10ba7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         return ObjectSizes.getFieldSize(TypeSizes.NATIVE.sizeof(sentinelId));
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:da93a1c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ObjectSizes;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public long memorySize()
1:     {
0:         // Only long reference.
0:         return ObjectSizes.getFieldSize(8);
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4d34917
/////////////////////////////////////////////////////////////////////////
commit:643d18a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cache;
1: 
0: import java.util.UUID;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import com.google.common.base.Objects;
1: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.ArrayBackedSortedColumns;
0: import org.apache.cassandra.db.ColumnFamily;
1: 
1: /**
1:  * A sentinel object for row caches.  See comments to getThroughCache and CASSANDRA-3862.
1:  */
1: public class RowCacheSentinel implements IRowCacheEntry
1: {
1:     private static final AtomicLong generator = new AtomicLong();
1: 
1:     final long sentinelId;
1: 
1:     public RowCacheSentinel()
1:     {
1:         sentinelId = generator.getAndIncrement();
1:     }
1: 
1:     RowCacheSentinel(long sentinelId)
1:     {
1:         this.sentinelId = sentinelId;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (!(o instanceof RowCacheSentinel)) return false;
1: 
1:         RowCacheSentinel other = (RowCacheSentinel) o;
1:         return this.sentinelId == other.sentinelId;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(sentinelId);
1:     }
1: }
commit:c9270f4
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cache;
0: 
0: import java.util.UUID;
0: import java.util.concurrent.atomic.AtomicLong;
0: 
0: import com.google.common.base.Objects;
0: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.ArrayBackedSortedColumns;
0: import org.apache.cassandra.db.ColumnFamily;
0: 
0: /**
0:  * A sentinel object for row caches.  See comments to getThroughCache and CASSANDRA-3862.
0:  */
0: public class RowCacheSentinel implements IRowCacheEntry
0: {
0:     private static final AtomicLong generator = new AtomicLong();
0: 
0:     final long sentinelId;
0: 
0:     public RowCacheSentinel()
0:     {
0:         sentinelId = generator.getAndIncrement();
0:     }
0: 
0:     RowCacheSentinel(long sentinelId)
0:     {
0:         this.sentinelId = sentinelId;
0:     }
0: 
0:     @Override
0:     public boolean equals(Object o)
0:     {
0:         if (!(o instanceof RowCacheSentinel)) return false;
0: 
0:         RowCacheSentinel other = (RowCacheSentinel) o;
0:         return this.sentinelId == other.sentinelId;
0:     }
0: 
0:     @Override
0:     public int hashCode()
0:     {
0:         return Objects.hashCode(sentinelId);
0:     }
0: }
============================================================================