1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:ce63ccc: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.ByteBuffer;
1:ce63ccc: import java.nio.charset.StandardCharsets;
1:96d41f0: import java.util.Arrays;
1:96d41f0: import java.util.zip.CRC32;
1:96d41f0: 
1:9797511: import org.junit.BeforeClass;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBuffer;
1:ce63ccc: import org.apache.cassandra.io.util.RandomAccessReader;
1:ce63ccc: import org.apache.cassandra.io.util.SequentialWriter;
1:ce63ccc: import org.apache.cassandra.utils.ByteBufferUtil;
1:96d41f0: import org.apache.cassandra.utils.FBUtilities;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.assertEquals;
1:96d41f0: import static junit.framework.Assert.assertTrue;
1:ce63ccc: import static org.junit.Assert.assertFalse;
1:96d41f0: 
1:96d41f0: public class ChecksummedDataInputTest
1:96d41f0: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:96d41f0:     @Test
1:ce63ccc:     public void testReadMethods() throws IOException
1:96d41f0:     {
1:ce63ccc:         // Make sure this array is bigger than the reader buffer size
1:ce63ccc:         // so we test updating the crc across buffer boundaries
1:ce63ccc:         byte[] b = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2];
1:ce63ccc:         for (int i = 0; i < b.length; i++)
1:ce63ccc:             b[i] = (byte)i;
1:96d41f0: 
1:ce63ccc:         ByteBuffer buffer;
1:ce63ccc: 
1:ce63ccc:         // fill a bytebuffer with some input
1:ce63ccc:         try (DataOutputBuffer out = new DataOutputBuffer())
1:ce63ccc:         {
1:ce63ccc:             out.write(127);
1:ce63ccc:             out.write(b);
1:ce63ccc:             out.writeBoolean(false);
1:ce63ccc:             out.writeByte(10);
1:ce63ccc:             out.writeChar('t');
1:ce63ccc:             out.writeDouble(3.3);
1:ce63ccc:             out.writeFloat(2.2f);
1:ce63ccc:             out.writeInt(42);
1:ce63ccc:             out.writeLong(Long.MAX_VALUE);
1:ce63ccc:             out.writeShort(Short.MIN_VALUE);
1:ce63ccc:             out.writeUTF("utf");
1:ce63ccc:             out.writeVInt(67L);
1:ce63ccc:             out.writeUnsignedVInt(88L);
1:ce63ccc:             out.writeBytes("abcdefghi");
1:ce63ccc: 
1:ce63ccc:             buffer = out.buffer();
1:ce63ccc:         }
1:ce63ccc: 
1:ce63ccc:         // calculate expected CRC
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0:         FBUtilities.updateChecksum(crc, buffer);
1:96d41f0: 
1:ce63ccc:         // save the buffer to file to create a RAR
1:ce63ccc:         File file = File.createTempFile("testReadMethods", "1");
1:ce63ccc:         file.deleteOnExit();
1:fb22109:         try (SequentialWriter writer = new SequentialWriter(file))
1:ce63ccc:         {
1:ce63ccc:             writer.write(buffer);
1:ce63ccc:             writer.writeInt((int) crc.getValue());
1:ce63ccc:             writer.finish();
1:ce63ccc:         }
1:96d41f0: 
1:ce63ccc:         assertTrue(file.exists());
1:ce63ccc:         assertEquals(buffer.remaining() + 4, file.length());
1:96d41f0: 
1:ce63ccc:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:ce63ccc:         {
1:ce63ccc:             reader.limit(buffer.remaining() + 4);
1:ce63ccc: 
1:ce63ccc:             // assert that we read all the right values back
1:ce63ccc:             assertEquals(127, reader.read());
1:ce63ccc:             byte[] bytes = new byte[b.length];
1:ce63ccc:             reader.readFully(bytes);
1:ce63ccc:             assertTrue(Arrays.equals(bytes, b));
1:ce63ccc:             assertEquals(false, reader.readBoolean());
1:ce63ccc:             assertEquals(10, reader.readByte());
1:ce63ccc:             assertEquals('t', reader.readChar());
1:ce63ccc:             assertEquals(3.3, reader.readDouble());
1:ce63ccc:             assertEquals(2.2f, reader.readFloat());
1:ce63ccc:             assertEquals(42, reader.readInt());
1:ce63ccc:             assertEquals(Long.MAX_VALUE, reader.readLong());
1:ce63ccc:             assertEquals(Short.MIN_VALUE, reader.readShort());
1:ce63ccc:             assertEquals("utf", reader.readUTF());
1:ce63ccc:             assertEquals(67L, reader.readVInt());
1:ce63ccc:             assertEquals(88L, reader.readUnsignedVInt());
1:ce63ccc:             assertEquals("abcdefghi", new String(ByteBufferUtil.read(reader, 9).array(), StandardCharsets.UTF_8));
1:ce63ccc: 
1:ce63ccc:             // assert that the crc matches, and that we've read exactly as many bytes as expected
1:ce63ccc:             assertTrue(reader.checkCrc());
1:30bb255:             assertTrue(reader.isEOF());
1:ce63ccc: 
1:ce63ccc:             reader.checkLimit(0);
1:ce63ccc:         }
1:96d41f0:     }
1:96d41f0: 
1:ce63ccc:     @Test
1:ce63ccc:     public void testResetCrc() throws IOException
1:96d41f0:     {
1:ce63ccc:         CRC32 crc = new CRC32();
1:ce63ccc:         ByteBuffer buffer;
1:ce63ccc: 
1:ce63ccc:         // fill a bytebuffer with some input
1:ce63ccc:         try (DataOutputBuffer out = new DataOutputBuffer())
1:96d41f0:         {
1:ce63ccc:             out.write(127);
1:ce63ccc:             out.writeBoolean(false);
1:ce63ccc:             out.writeByte(10);
1:ce63ccc:             out.writeChar('t');
1:96d41f0: 
1:ce63ccc:             buffer = out.buffer();
1:ce63ccc:             FBUtilities.updateChecksum(crc, buffer);
1:ce63ccc:             out.writeInt((int) crc.getValue());
1:ce63ccc: 
1:ce63ccc:             int bufferPos = out.getLength();
1:ce63ccc:             out.writeDouble(3.3);
1:ce63ccc:             out.writeFloat(2.2f);
1:ce63ccc:             out.writeInt(42);
1:ce63ccc: 
1:ce63ccc:             buffer = out.buffer();
1:ce63ccc:             buffer.position(bufferPos);
1:ce63ccc:             crc.reset();
1:ce63ccc:             FBUtilities.updateChecksum(crc, buffer);
1:ce63ccc: 
1:ce63ccc:             out.writeInt((int) crc.getValue());
1:ce63ccc:             buffer = out.buffer();
1:96d41f0:         }
1:96d41f0: 
1:ce63ccc:         // save the buffer to file to create a RAR
1:ce63ccc:         File file = File.createTempFile("testResetCrc", "1");
1:ce63ccc:         file.deleteOnExit();
1:fb22109:         try (SequentialWriter writer = new SequentialWriter(file))
1:96d41f0:         {
1:ce63ccc:             writer.write(buffer);
1:ce63ccc:             writer.finish();
1:96d41f0:         }
1:ce63ccc: 
1:ce63ccc:         assertTrue(file.exists());
1:ce63ccc:         assertEquals(buffer.remaining(), file.length());
1:ce63ccc: 
1:ce63ccc:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:ce63ccc:         {
1:ce63ccc:             reader.limit(buffer.remaining());
1:ce63ccc: 
1:ce63ccc:             // assert that we read all the right values back
1:ce63ccc:             assertEquals(127, reader.read());
1:ce63ccc:             assertEquals(false, reader.readBoolean());
1:ce63ccc:             assertEquals(10, reader.readByte());
1:ce63ccc:             assertEquals('t', reader.readChar());
1:ce63ccc:             assertTrue(reader.checkCrc());
1:ce63ccc: 
1:ce63ccc:             reader.resetCrc();
1:ce63ccc:             assertEquals(3.3, reader.readDouble());
1:ce63ccc:             assertEquals(2.2f, reader.readFloat());
1:ce63ccc:             assertEquals(42, reader.readInt());
1:ce63ccc:             assertTrue(reader.checkCrc());
1:30bb255:             assertTrue(reader.isEOF());
1:ce63ccc:         }
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Test
1:ce63ccc:     public void testFailedCrc() throws IOException
1:ce63ccc:     {
1:ce63ccc:         CRC32 crc = new CRC32();
1:ce63ccc:         ByteBuffer buffer;
1:ce63ccc: 
1:ce63ccc:         // fill a bytebuffer with some input
1:ce63ccc:         try (DataOutputBuffer out = new DataOutputBuffer())
1:96d41f0:         {
1:ce63ccc:             out.write(127);
1:ce63ccc:             out.writeBoolean(false);
1:ce63ccc:             out.writeByte(10);
1:ce63ccc:             out.writeChar('t');
1:ce63ccc: 
1:ce63ccc:             buffer = out.buffer();
1:ce63ccc:             FBUtilities.updateChecksum(crc, buffer);
1:96d41f0: 
1:ce63ccc:             // update twice so it won't match
1:ce63ccc:             FBUtilities.updateChecksum(crc, buffer);
1:ce63ccc:             out.writeInt((int) crc.getValue());
1:ce63ccc: 
1:ce63ccc:             buffer = out.buffer();
1:96d41f0:         }
1:96d41f0: 
1:ce63ccc:         // save the buffer to file to create a RAR
1:ce63ccc:         File file = File.createTempFile("testFailedCrc", "1");
1:ce63ccc:         file.deleteOnExit();
1:fb22109:         try (SequentialWriter writer = new SequentialWriter(file))
1:96d41f0:         {
1:ce63ccc:             writer.write(buffer);
1:ce63ccc:             writer.finish();
1:96d41f0:         }
1:ce63ccc: 
1:ce63ccc:         assertTrue(file.exists());
1:ce63ccc:         assertEquals(buffer.remaining(), file.length());
1:ce63ccc: 
1:ce63ccc:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:96d41f0:         {
1:ce63ccc:             reader.limit(buffer.remaining());
1:96d41f0: 
1:ce63ccc:             // assert that we read all the right values back
1:ce63ccc:             assertEquals(127, reader.read());
1:ce63ccc:             assertEquals(false, reader.readBoolean());
1:ce63ccc:             assertEquals(10, reader.readByte());
1:ce63ccc:             assertEquals('t', reader.readChar());
1:ce63ccc:             assertFalse(reader.checkCrc());
1:30bb255:             assertTrue(reader.isEOF());
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new SequentialWriter(file))
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new SequentialWriter(file))
/////////////////////////////////////////////////////////////////////////
1:         try (SequentialWriter writer = new SequentialWriter(file))
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(reader.isEOF());
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(reader.isEOF());
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(reader.isEOF());
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.nio.charset.StandardCharsets;
1: import org.apache.cassandra.io.util.RandomAccessReader;
1: import org.apache.cassandra.io.util.SequentialWriter;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import static org.junit.Assert.assertFalse;
1:     public void testReadMethods() throws IOException
1:         // Make sure this array is bigger than the reader buffer size
1:         // so we test updating the crc across buffer boundaries
1:         byte[] b = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2];
1:         for (int i = 0; i < b.length; i++)
1:             b[i] = (byte)i;
1:         ByteBuffer buffer;
1: 
1:         // fill a bytebuffer with some input
1:         try (DataOutputBuffer out = new DataOutputBuffer())
1:         {
1:             out.write(127);
1:             out.write(b);
1:             out.writeBoolean(false);
1:             out.writeByte(10);
1:             out.writeChar('t');
1:             out.writeDouble(3.3);
1:             out.writeFloat(2.2f);
1:             out.writeInt(42);
1:             out.writeLong(Long.MAX_VALUE);
1:             out.writeShort(Short.MIN_VALUE);
1:             out.writeUTF("utf");
1:             out.writeVInt(67L);
1:             out.writeUnsignedVInt(88L);
1:             out.writeBytes("abcdefghi");
1: 
1:             buffer = out.buffer();
1:         }
1: 
1:         // calculate expected CRC
1:         // save the buffer to file to create a RAR
1:         File file = File.createTempFile("testReadMethods", "1");
1:         file.deleteOnExit();
0:         try (SequentialWriter writer = SequentialWriter.open(file))
1:         {
1:             writer.write(buffer);
1:             writer.writeInt((int) crc.getValue());
1:             writer.finish();
1:         }
1:         assertTrue(file.exists());
1:         assertEquals(buffer.remaining() + 4, file.length());
1:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:         {
1:             reader.limit(buffer.remaining() + 4);
1: 
1:             // assert that we read all the right values back
1:             assertEquals(127, reader.read());
1:             byte[] bytes = new byte[b.length];
1:             reader.readFully(bytes);
1:             assertTrue(Arrays.equals(bytes, b));
1:             assertEquals(false, reader.readBoolean());
1:             assertEquals(10, reader.readByte());
1:             assertEquals('t', reader.readChar());
1:             assertEquals(3.3, reader.readDouble());
1:             assertEquals(2.2f, reader.readFloat());
1:             assertEquals(42, reader.readInt());
1:             assertEquals(Long.MAX_VALUE, reader.readLong());
1:             assertEquals(Short.MIN_VALUE, reader.readShort());
1:             assertEquals("utf", reader.readUTF());
1:             assertEquals(67L, reader.readVInt());
1:             assertEquals(88L, reader.readUnsignedVInt());
1:             assertEquals("abcdefghi", new String(ByteBufferUtil.read(reader, 9).array(), StandardCharsets.UTF_8));
1: 
1:             // assert that the crc matches, and that we've read exactly as many bytes as expected
1:             assertTrue(reader.checkCrc());
0:             assertEquals(0, reader.bytesRemaining());
1: 
1:             reader.checkLimit(0);
1:         }
1:     @Test
1:     public void testResetCrc() throws IOException
1:         CRC32 crc = new CRC32();
1:         ByteBuffer buffer;
1:         // fill a bytebuffer with some input
1:         try (DataOutputBuffer out = new DataOutputBuffer())
1:             out.write(127);
1:             out.writeBoolean(false);
1:             out.writeByte(10);
1:             out.writeChar('t');
1: 
1:             buffer = out.buffer();
1:             FBUtilities.updateChecksum(crc, buffer);
1:             out.writeInt((int) crc.getValue());
1: 
1:             int bufferPos = out.getLength();
1:             out.writeDouble(3.3);
1:             out.writeFloat(2.2f);
1:             out.writeInt(42);
1: 
1:             buffer = out.buffer();
1:             buffer.position(bufferPos);
1:             crc.reset();
1:             FBUtilities.updateChecksum(crc, buffer);
1: 
1:             out.writeInt((int) crc.getValue());
1:             buffer = out.buffer();
1:         // save the buffer to file to create a RAR
1:         File file = File.createTempFile("testResetCrc", "1");
1:         file.deleteOnExit();
0:         try (SequentialWriter writer = SequentialWriter.open(file))
1:             writer.write(buffer);
1:             writer.finish();
1:         assertTrue(file.exists());
1:         assertEquals(buffer.remaining(), file.length());
1: 
1:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:             reader.limit(buffer.remaining());
1: 
1:             // assert that we read all the right values back
1:             assertEquals(127, reader.read());
1:             assertEquals(false, reader.readBoolean());
1:             assertEquals(10, reader.readByte());
1:             assertEquals('t', reader.readChar());
1:             assertTrue(reader.checkCrc());
1: 
1:             reader.resetCrc();
1:             assertEquals(3.3, reader.readDouble());
1:             assertEquals(2.2f, reader.readFloat());
1:             assertEquals(42, reader.readInt());
1:             assertTrue(reader.checkCrc());
0:             assertEquals(0, reader.bytesRemaining());
1:         }
1:     }
1: 
1:     @Test
1:     public void testFailedCrc() throws IOException
1:     {
1:         CRC32 crc = new CRC32();
1:         ByteBuffer buffer;
1: 
1:         // fill a bytebuffer with some input
1:         try (DataOutputBuffer out = new DataOutputBuffer())
1:         {
1:             out.write(127);
1:             out.writeBoolean(false);
1:             out.writeByte(10);
1:             out.writeChar('t');
1: 
1:             buffer = out.buffer();
1:             FBUtilities.updateChecksum(crc, buffer);
1: 
1:             // update twice so it won't match
1:             FBUtilities.updateChecksum(crc, buffer);
1:             out.writeInt((int) crc.getValue());
1: 
1:             buffer = out.buffer();
1:         // save the buffer to file to create a RAR
1:         File file = File.createTempFile("testFailedCrc", "1");
1:         file.deleteOnExit();
0:         try (SequentialWriter writer = SequentialWriter.open(file))
1:             writer.write(buffer);
1:             writer.finish();
1:         assertTrue(file.exists());
1:         assertEquals(buffer.remaining(), file.length());
1: 
1:         try (ChecksummedDataInput reader = ChecksummedDataInput.open(file))
1:             reader.limit(buffer.remaining());
1: 
1:             // assert that we read all the right values back
1:             assertEquals(127, reader.read());
1:             assertEquals(false, reader.readBoolean());
1:             assertEquals(10, reader.readByte());
1:             assertEquals('t', reader.readChar());
1:             assertFalse(reader.checkCrc());
0:             assertEquals(0, reader.bytesRemaining());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.zip.CRC32;
1: 
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.hints.ChecksummedDataInput;
0: import org.apache.cassandra.io.util.AbstractDataInput;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertTrue;
1: 
1: public class ChecksummedDataInputTest
1: {
1:     @Test
0:     public void testThatItWorks() throws IOException
1:     {
0:         // fill a bytebuffer with some input
0:         DataOutputBuffer out = new DataOutputBuffer();
0:         out.write(127);
0:         out.write(new byte[]{ 0, 1, 2, 3, 4, 5, 6 });
0:         out.writeBoolean(false);
0:         out.writeByte(10);
0:         out.writeChar('t');
0:         out.writeDouble(3.3);
0:         out.writeFloat(2.2f);
0:         out.writeInt(42);
0:         out.writeLong(Long.MAX_VALUE);
0:         out.writeShort(Short.MIN_VALUE);
0:         out.writeUTF("utf");
0:         ByteBuffer buffer = out.buffer();
1: 
0:         // calculate resulting CRC
1:         CRC32 crc = new CRC32();
1:         FBUtilities.updateChecksum(crc, buffer);
0:         int expectedCRC = (int) crc.getValue();
1: 
0:         ChecksummedDataInput crcInput = ChecksummedDataInput.wrap(new DummyByteBufferDataInput(buffer.duplicate()));
0:         crcInput.limit(buffer.remaining());
1: 
0:         // assert that we read all the right values back
0:         assertEquals(127, crcInput.read());
0:         byte[] bytes = new byte[7];
0:         crcInput.readFully(bytes);
0:         assertTrue(Arrays.equals(new byte[]{ 0, 1, 2, 3, 4, 5, 6 }, bytes));
0:         assertEquals(false, crcInput.readBoolean());
0:         assertEquals(10, crcInput.readByte());
0:         assertEquals('t', crcInput.readChar());
0:         assertEquals(3.3, crcInput.readDouble());
0:         assertEquals(2.2f, crcInput.readFloat());
0:         assertEquals(42, crcInput.readInt());
0:         assertEquals(Long.MAX_VALUE, crcInput.readLong());
0:         assertEquals(Short.MIN_VALUE, crcInput.readShort());
0:         assertEquals("utf", crcInput.readUTF());
1: 
0:         // assert that the crc matches, and that we've read exactly as many bytes as expected
0:         assertEquals(0, crcInput.bytesRemaining());
0:         assertEquals(expectedCRC, crcInput.getCrc());
1:     }
1: 
0:     private static final class DummyByteBufferDataInput extends AbstractDataInput
1:     {
0:         private final ByteBuffer buffer;
1: 
0:         DummyByteBufferDataInput(ByteBuffer buffer)
1:         {
0:             this.buffer = buffer;
1:         }
1: 
0:         public void seek(long position)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public long getPosition()
1:         {
0:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public long getPositionLimit()
1:         {
0:             throw new UnsupportedOperationException();
1:         }
1: 
0:         public int read()
1:         {
0:             return buffer.get() & 0xFF;
1:         }
1:     }
1: }
============================================================================