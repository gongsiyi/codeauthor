1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:1aeca2b:  *   http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:1aeca2b:  * Unless required by applicable law or agreed to in writing,
1:1aeca2b:  * software distributed under the License is distributed on an
1:1aeca2b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1aeca2b:  * KIND, either express or implied.  See the License for the
1:1aeca2b:  * specific language governing permissions and limitations
1:1aeca2b:  * under the License.
1:1aeca2b:  */
1:587cb58: package org.apache.cassandra.gms;
1:2fd3268: 
1:066ef58: import static org.junit.Assert.*;
1:2fd3268: 
1:066ef58: import java.io.IOException;
1:1aeca2b: 
1:c4c9eae: import org.apache.cassandra.io.util.DataInputBuffer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:dc6e4fe: import org.apache.cassandra.io.util.DataOutputBuffer;
1:03f72ac: 
1:b767bf7: import java.net.InetAddress;
7:066ef58: 
1:1ecdd7f: import org.apache.cassandra.net.MessagingService;
1:066ef58: import org.junit.Test;
1:066ef58: 
1:066ef58: public class GossipDigestTest
1:066ef58: {
1:066ef58:     @Test
1:066ef58:     public void test() throws IOException
1:066ef58:     {
1:18b2a16:         InetAddress endpoint = InetAddress.getByName("127.0.0.1");
1:066ef58:         int generation = 0;
1:066ef58:         int maxVersion = 123;
1:18b2a16:         GossipDigest expected = new GossipDigest(endpoint, generation, maxVersion);
1:066ef58:         //make sure we get the same values out
1:18b2a16:         assertEquals(endpoint, expected.getEndpoint());
1:066ef58:         assertEquals(generation, expected.getGeneration());
1:066ef58:         assertEquals(maxVersion, expected.getMaxVersion());
1:07cdfd0: 
1:066ef58:         //test the serialization and equals
1:066ef58:         DataOutputBuffer output = new DataOutputBuffer();
1:587cb58:         GossipDigest.serializer.serialize(expected, output, MessagingService.current_version);
1:07cdfd0: 
1:c4c9eae:         DataInputPlus input = new DataInputBuffer(output.getData());
1:03f72ac:         GossipDigest actual = GossipDigest.serializer.deserialize(input, MessagingService.current_version);
1:066ef58:         assertEquals(0, expected.compareTo(actual));
1:066ef58:     }
1:066ef58: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         DataInputPlus input = new DataInputBuffer(output.getData());
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
0: import org.apache.cassandra.io.util.NIODataInputStream;
1: 
/////////////////////////////////////////////////////////////////////////
0:         DataInputPlus input = new NIODataInputStream(output.getData());
1:         GossipDigest actual = GossipDigest.serializer.deserialize(input, MessagingService.current_version);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.gms;
/////////////////////////////////////////////////////////////////////////
1:         GossipDigest.serializer.serialize(expected, output, MessagingService.current_version);
0:         GossipDigest actual = GossipDigest.serializer.deserialize(new DataInputStream(input), MessagingService.current_version);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:         GossipDigest.serializer().serialize(expected, output, MessagingService.current_version);
0:         GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input), MessagingService.current_version);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:18b2a16
/////////////////////////////////////////////////////////////////////////
1:         InetAddress endpoint = InetAddress.getByName("127.0.0.1");
1:         GossipDigest expected = new GossipDigest(endpoint, generation, maxVersion);
1:         assertEquals(endpoint, expected.getEndpoint());
commit:dc6e4fe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBuffer;
commit:1cb0794
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
/////////////////////////////////////////////////////////////////////////
0:         ByteArrayInputStream input = new ByteArrayInputStream(output.getData(), 0, output.getLength());
0:         GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input));
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:         InetAddress endPoint = InetAddress.getByName("127.0.0.1");
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.cassandra.io.DataInputBuffer;
0: import org.apache.cassandra.io.DataOutputBuffer;
0: import org.apache.cassandra.net.EndPoint;
1: import org.junit.Test;
1: 
1: public class GossipDigestTest
1: {
1: 
1:     @Test
1:     public void test() throws IOException
1:     {
0:         EndPoint endPoint = new EndPoint("127.0.0.1", 3333);
1:         int generation = 0;
1:         int maxVersion = 123;
0:         GossipDigest expected = new GossipDigest(endPoint, generation, maxVersion);
1:         //make sure we get the same values out
0:         assertEquals(endPoint, expected.getEndPoint());
1:         assertEquals(generation, expected.getGeneration());
1:         assertEquals(maxVersion, expected.getMaxVersion());
1:         
1:         //test the serialization and equals
1:         DataOutputBuffer output = new DataOutputBuffer();
0:         GossipDigest.serializer().serialize(expected, output);
1:         
0:         DataInputBuffer input = new DataInputBuffer();
0:         input.reset(output.getData(), output.getLength());
0:         GossipDigest actual = GossipDigest.serializer().deserialize(input);
1:         assertEquals(0, expected.compareTo(actual));
1:     }
1: 
1: }
commit:b9da215
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.gms;
0: 
0: import static org.junit.Assert.*;
0: 
0: import java.io.IOException;
0: 
0: import org.apache.cassandra.io.DataInputBuffer;
0: import org.apache.cassandra.io.DataOutputBuffer;
0: import org.apache.cassandra.net.EndPoint;
0: import org.junit.Test;
0: 
0: public class GossipDigestTest
0: {
0: 
0:     @Test
0:     public void test() throws IOException
0:     {
0:         EndPoint endPoint = new EndPoint("127.0.0.1", 3333);
0:         int generation = 0;
0:         int maxVersion = 123;
0:         GossipDigest expected = new GossipDigest(endPoint, generation, maxVersion);
0:         //make sure we get the same values out
0:         assertEquals(endPoint, expected.getEndPoint());
0:         assertEquals(generation, expected.getGeneration());
0:         assertEquals(maxVersion, expected.getMaxVersion());
0:         
0:         //test the serialization and equals
0:         DataOutputBuffer output = new DataOutputBuffer();
0:         GossipDigest.serializer().serialize(expected, output);
0:         
0:         DataInputBuffer input = new DataInputBuffer();
0:         input.reset(output.getData(), output.getLength());
0:         GossipDigest actual = GossipDigest.serializer().deserialize(input);
0:         assertEquals(0, expected.compareTo(actual));
0:     }
0: 
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0:         GossipDigest.serializer().serialize(expected, output, MessagingService.version_);
0:         GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input), MessagingService.version_);
============================================================================