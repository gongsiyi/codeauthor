1:ee55f36: /*
1:ee55f36:  * Licensed to the Apache Software Foundation (ASF) under one
1:ee55f36:  * or more contributor license agreements.  See the NOTICE file
1:ee55f36:  * distributed with this work for additional information
1:ee55f36:  * regarding copyright ownership.  The ASF licenses this file
1:ee55f36:  * to you under the Apache License, Version 2.0 (the
1:ee55f36:  * "License"); you may not use this file except in compliance
1:ee55f36:  * with the License.  You may obtain a copy of the License at
1:ee55f36:  *
1:ee55f36:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee55f36:  *
1:ee55f36:  * Unless required by applicable law or agreed to in writing, software
1:ee55f36:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee55f36:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee55f36:  * See the License for the specific language governing permissions and
1:ee55f36:  * limitations under the License.
1:ee55f36:  */
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
3:ee55f36: 
1:df3972e: import java.util.ArrayList;
1:df3972e: import java.util.Arrays;
1:df3972e: import java.util.List;
1:df3972e: 
1:df3972e: import org.apache.commons.lang3.StringUtils;
1:df3972e: import org.junit.Assert;
1:df3972e: import org.junit.BeforeClass;
1:df3972e: import org.junit.Test;
1:df3972e: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:9c3855b: import org.apache.cassandra.cql3.restrictions.StatementRestrictions;
1:ee55f36: import org.apache.cassandra.db.marshal.*;
1:01115f7: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:ee55f36: import org.apache.cassandra.exceptions.ConfigurationException;
1:ee55f36: import org.apache.cassandra.exceptions.InvalidRequestException;
1:ee55f36: import org.apache.cassandra.exceptions.SyntaxException;
1:69f77cb: import org.apache.cassandra.service.StorageService;
1:bc9a61f: import org.apache.cassandra.utils.FBUtilities;
1:ee55f36: 
1:ee55f36: import static org.junit.Assert.assertEquals;
1:ee55f36: 
1:ee55f36: public class FrozenCollectionsTest extends CQLTester
1:ee55f36: {
1:01115f7:     @BeforeClass
1:30bb255:     public static void setUpClass()     // overrides CQLTester.setUpClass()
1:01115f7:     {
1:69f77cb:         // Selecting partitioner for a table is not exposed on CREATE TABLE.
1:69f77cb:         StorageService.instance.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:30bb255: 
1:30bb255:         prepareServer();
1:01115f7:     }
1:01115f7: 
1:ee55f36:     @Test
1:ee55f36:     public void testPartitionKeyUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         createTable("CREATE TABLE %s (k frozen<set<int>> PRIMARY KEY, v int)");
1:ee55f36: 
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(), 1);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(1, 2, 3), 1);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(4, 5, 6), 0);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(7, 8, 9), 0);
1:ee55f36: 
1:ee55f36:         // overwrite with an update
1:ee55f36:         execute("UPDATE %s SET v=? WHERE k=?", 0, set());
1:ee55f36:         execute("UPDATE %s SET v=? WHERE k=?", 0, set(1, 2, 3));
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:             row(set(), 0),
1:ee55f36:             row(set(1, 2, 3), 0),
2:ee55f36:             row(set(4, 5, 6), 0),
1:ee55f36:             row(set(7, 8, 9), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT k FROM %s"),
1:ee55f36:             row(set()),
1:ee55f36:             row(set(1, 2, 3)),
1:ee55f36:             row(set(4, 5, 6)),
1:ee55f36:             row(set(7, 8, 9))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:ee55f36:                 row(set(), 0),
1:ee55f36:                 row(set(1, 2, 3), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k=?", set(4, 5, 6)),
1:ee55f36:             row(set(4, 5, 6), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k=?", set()),
2:ee55f36:                 row(set(), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k IN ?", list(set(4, 5, 6), set())),
1:65a7088:                    row(set(), 0),
1:65a7088:                    row(set(4, 5, 6), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE token(k) >= token(?)", set(4, 5, 6)),
1:ee55f36:                 row(set(4, 5, 6), 0),
1:ee55f36:                 row(set(7, 8, 9), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalid("INSERT INTO %s (k, v) VALUES (null, 0)");
1:ee55f36: 
1:ee55f36:         execute("DELETE FROM %s WHERE k=?", set());
1:ee55f36:         execute("DELETE FROM %s WHERE k=?", set(4, 5, 6));
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:             row(set(1, 2, 3), 0),
1:ee55f36:             row(set(7, 8, 9), 0)
1:ee55f36:         );
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testNestedPartitionKeyUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         createTable("CREATE TABLE %s (k frozen<map<set<int>, list<int>>> PRIMARY KEY, v int)");
1:ee55f36: 
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(), 1);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(), list(1, 2, 3)), 0);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(1, 2, 3), list(1, 2, 3)), 1);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(4, 5, 6), list(1, 2, 3)), 0);
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(7, 8, 9), list(1, 2, 3)), 0);
1:ee55f36: 
1:ee55f36:         // overwrite with an update
1:ee55f36:         execute("UPDATE %s SET v=? WHERE k=?", 0, map());
1:ee55f36:         execute("UPDATE %s SET v=? WHERE k=?", 0, map(set(1, 2, 3), list(1, 2, 3)));
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
2:ee55f36:             row(map(), 0),
1:ee55f36:             row(map(set(), list(1, 2, 3)), 0),
1:ee55f36:             row(map(set(1, 2, 3), list(1, 2, 3)), 0),
2:ee55f36:             row(map(set(4, 5, 6), list(1, 2, 3)), 0),
1:ee55f36:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT k FROM %s"),
1:ee55f36:             row(map()),
1:ee55f36:             row(map(set(), list(1, 2, 3))),
1:ee55f36:             row(map(set(1, 2, 3), list(1, 2, 3))),
1:ee55f36:             row(map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:             row(map(set(7, 8, 9), list(1, 2, 3)))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:ee55f36:             row(map(), 0),
1:ee55f36:             row(map(set(), list(1, 2, 3)), 0),
1:ee55f36:             row(map(set(1, 2, 3), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k=?", map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:             row(map(set(4, 5, 6), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k=?", map()),
1:ee55f36:                 row(map(), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k=?", map(set(), list(1, 2, 3))),
2:ee55f36:                 row(map(set(), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE k IN ?", list(map(set(4, 5, 6), list(1, 2, 3)), map(), map(set(), list(1, 2, 3)))),
1:65a7088:                    row(map(), 0),
1:65a7088:                    row(map(set(), list(1, 2, 3)), 0),
1:65a7088:                    row(map(set(4, 5, 6), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE token(k) >= token(?)", map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:             row(map(set(4, 5, 6), list(1, 2, 3)), 0),
1:ee55f36:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         execute("DELETE FROM %s WHERE k=?", map());
1:ee55f36:         execute("DELETE FROM %s WHERE k=?", map(set(), list(1, 2, 3)));
1:ee55f36:         execute("DELETE FROM %s WHERE k=?", map(set(4, 5, 6), list(1, 2, 3)));
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:             row(map(set(1, 2, 3), list(1, 2, 3)), 0),
1:ee55f36:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testClusteringKeyUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:ee55f36:         {
1:ee55f36:             createTable("CREATE TABLE %s (a int, b frozen<set<int>>, c int, PRIMARY KEY (a, b))" + option);
1:ee55f36: 
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(), 1);
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(1, 2, 3), 1);
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(4, 5, 6), 0);
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(7, 8, 9), 0);
1:ee55f36: 
1:ee55f36:             // overwrite with an update
1:ee55f36:             execute("UPDATE %s SET c=? WHERE a=? AND b=?", 0, 0, set());
1:ee55f36:             execute("UPDATE %s SET c=? WHERE a=? AND b=?", 0, 0, set(1, 2, 3));
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(0, set(), 0),
1:ee55f36:                 row(0, set(1, 2, 3), 0),
1:ee55f36:                 row(0, set(4, 5, 6), 0),
1:ee55f36:                 row(0, set(7, 8, 9), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT b FROM %s"),
1:ee55f36:                 row(set()),
1:ee55f36:                 row(set(1, 2, 3)),
1:ee55f36:                 row(set(4, 5, 6)),
1:ee55f36:                 row(set(7, 8, 9))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:ee55f36:                 row(0, set(), 0),
1:ee55f36:                 row(0, set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, set(4, 5, 6)),
1:ee55f36:                 row(0, set(4, 5, 6), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, set()),
1:ee55f36:                 row(0, set(), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b IN ?", 0, list(set(4, 5, 6), set())),
1:ee55f36:                 row(0, set(), 0),
1:ee55f36:                 row(0, set(4, 5, 6), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ?", 0, set(4, 5, 6)),
1:ee55f36:                 row(0, set(7, 8, 9), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b >= ?", 0, set(4, 5, 6)),
1:ee55f36:                 row(0, set(4, 5, 6), 0),
1:ee55f36:                 row(0, set(7, 8, 9), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b < ?", 0, set(4, 5, 6)),
1:ee55f36:                 row(0, set(), 0),
1:ee55f36:                 row(0, set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b <= ?", 0, set(4, 5, 6)),
1:ee55f36:                 row(0, set(), 0),
1:ee55f36:                 row(0, set(1, 2, 3), 0),
1:ee55f36:                 row(0, set(4, 5, 6), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ? AND b <= ?", 0, set(1, 2, 3), set(4, 5, 6)),
1:ee55f36:                 row(0, set(4, 5, 6), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("DELETE FROM %s WHERE a=? AND b=?", 0, set());
1:ee55f36:             execute("DELETE FROM %s WHERE a=? AND b=?", 0, set(4, 5, 6));
1:ee55f36:             assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(0, set(1, 2, 3), 0),
1:ee55f36:                 row(0, set(7, 8, 9), 0)
1:ee55f36:             );
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testNestedClusteringKeyUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:ee55f36:         {
1:ee55f36:             createTable("CREATE TABLE %s (a int, b frozen<map<set<int>, list<int>>>, c frozen<set<int>>, d int, PRIMARY KEY (a, b, c))" + option);
1:ee55f36: 
1:ee55f36:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(), set(), 0);
1:ee55f36:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(), list(1, 2, 3)), set(), 0);
1:ee55f36:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0);
1:ee55f36:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0);
1:ee55f36:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0);
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(0, map(), set(), 0),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT b FROM %s"),
1:ee55f36:                 row(map()),
1:ee55f36:                 row(map(set(), list(1, 2, 3))),
1:ee55f36:                 row(map(set(1, 2, 3), list(1, 2, 3))),
1:ee55f36:                 row(map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(map(set(7, 8, 9), list(1, 2, 3)))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT c FROM %s"),
1:ee55f36:                 row(set()),
1:ee55f36:                 row(set()),
1:ee55f36:                 row(set(1, 2, 3)),
1:ee55f36:                 row(set(1, 2, 3)),
1:ee55f36:                 row(set(1, 2, 3))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:ee55f36:                 row(0, map(), set(), 0),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=0 ORDER BY b DESC LIMIT 4"),
1:ee55f36:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map()),
1:ee55f36:                 row(0, map(), set(), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map(set(), list(1, 2, 3))),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map(set(1, 2, 3), list(1, 2, 3))),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set()),
1:ee55f36:                     row(0, map(set(), list(1, 2, 3)), set(), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND (b, c) IN ?", 0, list(tuple(map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)),
1:ee55f36:                                                                                      tuple(map(), set()))),
1:ee55f36:                 row(0, map(), set(), 0),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b >= ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b < ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(0, map(), set(), 0),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b <= ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(0, map(), set(), 0),
1:ee55f36:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:ee55f36:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ? AND b <= ?", 0, map(set(1, 2, 3), list(1, 2, 3)), map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(), set());
1:ee55f36:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(), set()));
1:ee55f36: 
1:ee55f36:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set());
1:ee55f36:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set()));
1:ee55f36: 
1:ee55f36:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3));
1:ee55f36:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)));
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                     row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:ee55f36:                     row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:ee55f36:             );
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testNormalColumnUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:ee55f36:         {
1:ee55f36:             createTable("CREATE TABLE %s (a int PRIMARY KEY, b frozen<map<set<int>, list<int>>>, c frozen<set<int>>)" + option);
1:ee55f36: 
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, map(), set());
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, map(set(), list(99999, 999999, 99999)), set());
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 2, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3));
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3));
1:ee55f36:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 4, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3));
1:ee55f36: 
1:ee55f36:             // overwrite with update
1:ee55f36:             execute ("UPDATE %s SET b=? WHERE a=?", map(set(), list(1, 2, 3)), 1);
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(0, map(), set()),
1:ee55f36:                 row(1, map(set(), list(1, 2, 3)), set()),
1:ee55f36:                 row(2, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3)),
1:ee55f36:                 row(3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)),
1:ee55f36:                 row(4, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT b FROM %s"),
1:ee55f36:                 row(map()),
1:ee55f36:                 row(map(set(), list(1, 2, 3))),
1:ee55f36:                 row(map(set(1, 2, 3), list(1, 2, 3))),
1:ee55f36:                 row(map(set(4, 5, 6), list(1, 2, 3))),
1:ee55f36:                 row(map(set(7, 8, 9), list(1, 2, 3)))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT c FROM %s"),
1:ee55f36:                 row(set()),
1:ee55f36:                 row(set()),
1:ee55f36:                 row(set(1, 2, 3)),
1:ee55f36:                 row(set(1, 2, 3)),
1:ee55f36:                 row(set(1, 2, 3))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 3),
1:ee55f36:                 row(3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("UPDATE %s SET b=? WHERE a=?", null, 1);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 1),
1:ee55f36:                 row(1, null, set())
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("UPDATE %s SET b=? WHERE a=?", map(), 1);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 1),
1:ee55f36:                 row(1, map(), set())
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("UPDATE %s SET c=? WHERE a=?", null, 2);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 2),
1:ee55f36:                 row(2, map(set(1, 2, 3), list(1, 2, 3)), null)
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("UPDATE %s SET c=? WHERE a=?", set(), 2);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 2),
1:ee55f36:                     row(2, map(set(1, 2, 3), list(1, 2, 3)), set())
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("DELETE b FROM %s WHERE a=?", 3);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 3),
1:ee55f36:                 row(3, null, set(1, 2, 3))
1:ee55f36:             );
1:ee55f36: 
1:ee55f36:             execute("DELETE c FROM %s WHERE a=?", 4);
1:ee55f36:             assertRows(execute("SELECT * FROM %s WHERE a=?", 4),
1:ee55f36:                 row(4, map(set(7, 8, 9), list(1, 2, 3)), null)
1:ee55f36:             );
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testStaticColumnUsage() throws Throwable
1:ee55f36:     {
1:ee55f36:         createTable("CREATE TABLE %s (a int, b int, c frozen<map<set<int>, list<int>>> static, d int, PRIMARY KEY (a, b))");
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, map(), 0);
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, map(), 0);
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, map(set(), list(1, 2, 3)), 0);
1:ee55f36:         execute("INSERT INTO %s (a, b, d) VALUES (?, ?, ?)", 1, 1, 0);
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0);
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:             row(0, 0, map(), 0),
1:ee55f36:             row(0, 1, map(), 0),
1:ee55f36:             row(1, 0, map(set(), list(1, 2, 3)), 0),
1:ee55f36:             row(1, 1, map(set(), list(1, 2, 3)), 0),
1:ee55f36:             row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, 1),
1:ee55f36:             row(0, 1, map(), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         execute("DELETE c FROM %s WHERE a=?", 0);
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(0, 0, null, 0),
1:ee55f36:                 row(0, 1, null, 0),
1:ee55f36:                 row(1, 0, map(set(), list(1, 2, 3)), 0),
1:ee55f36:                 row(1, 1, map(set(), list(1, 2, 3)), 0),
1:ee55f36:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         execute("DELETE FROM %s WHERE a=?", 0);
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(1, 0, map(set(), list(1, 2, 3)), 0),
1:ee55f36:                 row(1, 1, map(set(), list(1, 2, 3)), 0),
1:ee55f36:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         execute("UPDATE %s SET c=? WHERE a=?", map(set(1, 2, 3), list(1, 2, 3)), 1);
1:ee55f36:         assertRows(execute("SELECT * FROM %s"),
1:ee55f36:                 row(1, 0, map(set(1, 2, 3), list(1, 2, 3)), 0),
1:ee55f36:                 row(1, 1, map(set(1, 2, 3), list(1, 2, 3)), 0),
1:ee55f36:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:ee55f36:         );
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     private void assertInvalidCreateWithMessage(String createTableStatement, String errorMessage) throws Throwable
1:ee55f36:     {
1:ee55f36:          try
1:ee55f36:         {
1:ee55f36:             createTableMayThrow(createTableStatement);
1:ee55f36:             Assert.fail("Expected CREATE TABLE statement to error: " + createTableStatement);
1:ee55f36:         }
1:ee55f36:         catch (InvalidRequestException | ConfigurationException | SyntaxException ex)
1:ee55f36:         {
1:ee55f36:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:ee55f36:                     ex.getMessage().contains(errorMessage));
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     private void assertInvalidAlterWithMessage(String createTableStatement, String errorMessage) throws Throwable
1:ee55f36:     {
1:ee55f36:         try
1:ee55f36:         {
1:ee55f36:             alterTableMayThrow(createTableStatement);
1:ee55f36:             Assert.fail("Expected CREATE TABLE statement to error: " + createTableStatement);
1:ee55f36:         }
1:ee55f36:         catch (InvalidRequestException | ConfigurationException ex)
1:ee55f36:         {
1:ee55f36:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:ee55f36:                     ex.getMessage().contains(errorMessage));
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testInvalidOperations() throws Throwable
1:ee55f36:     {
1:ee55f36:         // lists
1:ee55f36:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l frozen<list<int>>)");
1:ee55f36:         assertInvalid("UPDATE %s SET l[?]=? WHERE k=?", 0, 0, 0);
1:ee55f36:         assertInvalid("UPDATE %s SET l = ? + l WHERE k=?", list(0), 0);
1:ee55f36:         assertInvalid("UPDATE %s SET l = l + ? WHERE k=?", list(4), 0);
1:ee55f36:         assertInvalid("UPDATE %s SET l = l - ? WHERE k=?", list(3), 0);
1:ee55f36:         assertInvalid("DELETE l[?] FROM %s WHERE k=?", 0, 0);
1:ee55f36: 
1:ee55f36:         // sets
1:ee55f36:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s frozen<set<int>>)");
1:ee55f36:         assertInvalid("UPDATE %s SET s = s + ? WHERE k=?", set(0), 0);
1:ee55f36:         assertInvalid("UPDATE %s SET s = s - ? WHERE k=?", set(3), 0);
1:ee55f36: 
1:ee55f36:         // maps
1:ee55f36:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m frozen<map<int, int>>)");
1:ee55f36:         assertInvalid("UPDATE %s SET m[?]=? WHERE k=?", 0, 0, 0);
1:ee55f36:         assertInvalid("UPDATE %s SET m = m + ? WHERE k=?", map(4, 4), 0);
1:ee55f36:         assertInvalid("DELETE m[?] FROM %s WHERE k=?", 0, 0);
1:ee55f36: 
1:ee55f36:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t set<set<int>>)",
1:ee55f36:                 "Non-frozen collections are not allowed inside collections");
1:ee55f36: 
1:ee55f36:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t frozen<set<counter>>)",
1:ee55f36:                                        "Counters are not allowed inside collections");
1:ee55f36: 
1:ee55f36:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t frozen<text>)",
1:ee55f36:                 "frozen<> is only allowed on collections, tuples, and user-defined types");
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testAltering() throws Throwable
1:ee55f36:     {
1:ee55f36:         createTable("CREATE TABLE %s (a int, b frozen<list<int>>, c frozen<list<int>>, PRIMARY KEY (a, b))");
1:ee55f36: 
1:ee55f36:         alterTable("ALTER TABLE %s ALTER c TYPE frozen<list<blob>>");
1:ee55f36: 
1:ee55f36:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER b TYPE frozen<list<blob>>",
1:ee55f36:                                       "types are not order-compatible");
1:ee55f36: 
1:ee55f36:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER b TYPE list<int>",
1:ee55f36:                                       "types are not order-compatible");
1:ee55f36: 
1:ee55f36:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE list<blob>",
1:ee55f36:                                       "types are incompatible");
1:ee55f36: 
1:ee55f36:         alterTable("ALTER TABLE %s DROP c");
1:ee55f36:         alterTable("ALTER TABLE %s ADD c frozen<set<int>>");
1:ee55f36:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE frozen<set<blob>>",
1:ee55f36:                                       "types are incompatible");
1:ee55f36: 
1:ee55f36:         alterTable("ALTER TABLE %s DROP c");
1:ee55f36:         alterTable("ALTER TABLE %s ADD c frozen<map<int, int>>");
1:ee55f36:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE frozen<map<blob, int>>",
1:ee55f36:                                       "types are incompatible");
1:ee55f36:         alterTable("ALTER TABLE %s ALTER c TYPE frozen<map<int, blob>>");
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     private void assertInvalidIndexCreationWithMessage(String statement, String errorMessage) throws Throwable
1:ee55f36:     {
1:ee55f36:         try
1:ee55f36:         {
1:ee55f36:             createIndexMayThrow(statement);
1:ee55f36:             Assert.fail("Expected index creation to fail: " + statement);
1:ee55f36:         }
1:ee55f36:         catch (InvalidRequestException ex)
1:ee55f36:         {
1:ee55f36:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:ee55f36:                               ex.getMessage().contains(errorMessage));
1:ee55f36:         }
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testSecondaryIndex() throws Throwable
1:ee55f36:     {
1:ee55f36:         createTable("CREATE TABLE %s (a frozen<map<int, text>> PRIMARY KEY, b frozen<map<int, text>>)");
1:ee55f36: 
1:ee55f36:         // for now, we don't support indexing values or keys of collections in the primary key
1:ee55f36:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (full(a))", "Cannot create secondary index on partition key column");
1:df3972e:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(a))", "Cannot create secondary index on partition key column");
1:fde97c3:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(b))", "Cannot create keys() index on frozen column b. " +
2:fde97c3:                                                                               "Frozen collections only support full() indexes");
1:ee55f36: 
1:ee55f36:         createTable("CREATE TABLE %s (a int, b frozen<list<int>>, c frozen<set<int>>, d frozen<map<int, text>>, PRIMARY KEY (a, b))");
1:ee55f36: 
1:ee55f36:         createIndex("CREATE INDEX ON %s (full(b))");
1:ee55f36:         createIndex("CREATE INDEX ON %s (full(c))");
1:ee55f36:         createIndex("CREATE INDEX ON %s (full(d))");
1:ee55f36: 
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, list(1, 2, 3), set(1, 2, 3), map(1, "a"));
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, list(4, 5, 6), set(1, 2, 3), map(1, "a"));
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, list(1, 2, 3), set(4, 5, 6), map(2, "b"));
1:ee55f36:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, list(4, 5, 6), set(4, 5, 6), map(2, "b"));
1:ee55f36: 
1:ee55f36:         // CONTAINS KEY doesn't work on non-maps
1:ee55f36:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:ee55f36:                              "SELECT * FROM %s WHERE b CONTAINS KEY ?", 1);
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:ee55f36:                              "SELECT * FROM %s WHERE b CONTAINS KEY ? ALLOW FILTERING", 1);
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:ee55f36:                              "SELECT * FROM %s WHERE c CONTAINS KEY ?", 1);
1:ee55f36: 
1:ee55f36:         // normal indexes on frozen collections don't support CONTAINS or CONTAINS KEY
1:c83729f:         assertInvalidMessage("Clustering columns can only be restricted with CONTAINS with a secondary index or filtering",
1:ee55f36:                              "SELECT * FROM %s WHERE b CONTAINS ?", 1);
1:ee55f36: 
1:a600920:         assertRows(execute("SELECT * FROM %s WHERE b CONTAINS ? ALLOW FILTERING", 1),
1:a600920:                    row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:a600920:                    row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b")));
1:ee55f36: 
1:9c3855b:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
1:ee55f36:                              "SELECT * FROM %s WHERE d CONTAINS KEY ?", 1);
1:ee55f36: 
1:a600920:         assertRows(execute("SELECT * FROM %s WHERE b CONTAINS ? AND d CONTAINS KEY ? ALLOW FILTERING", 1, 1),
1:a600920:                    row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")));
1:ee55f36: 
1:ee55f36:         // index lookup on b
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=?", list(1, 2, 3)),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertEmpty(execute("SELECT * FROM %s WHERE b=?", list(-1)));
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND c=?", list(1, 2, 3), set(4, 5, 6));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=? AND c=? ALLOW FILTERING", list(1, 2, 3), set(4, 5, 6)),
1:ee55f36:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND c CONTAINS ?", list(1, 2, 3), 5);
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=? AND c CONTAINS ? ALLOW FILTERING", list(1, 2, 3), 5),
1:ee55f36:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d=?", list(1, 2, 3), map(1, "a"));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d=? ALLOW FILTERING", list(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d CONTAINS ?", list(1, 2, 3), "a");
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d CONTAINS ? ALLOW FILTERING", list(1, 2, 3), "a"),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d CONTAINS KEY ?", list(1, 2, 3), 1);
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d CONTAINS KEY ? ALLOW FILTERING", list(1, 2, 3), 1),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         // index lookup on c
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=?", set(1, 2, 3)),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         // ordering of c should not matter
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=?", set(2, 1, 3)),
1:ee55f36:                 row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:                 row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertEmpty(execute("SELECT * FROM %s WHERE c=?", set(-1)));
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND b=?", set(1, 2, 3), list(1, 2, 3));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b=? ALLOW FILTERING", set(1, 2, 3), list(1, 2, 3)),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND b CONTAINS ?", set(1, 2, 3), 1);
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS ? ALLOW FILTERING", set(1, 2, 3), 1),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d = ?", set(1, 2, 3), map(1, "a"));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d = ? ALLOW FILTERING", set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d CONTAINS ?", set(1, 2, 3), "a");
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d CONTAINS ? ALLOW FILTERING", set(1, 2, 3), "a"),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d CONTAINS KEY ?", set(1, 2, 3), 1);
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d CONTAINS KEY ? ALLOW FILTERING", set(1, 2, 3), 1),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         // index lookup on d
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(1, "a")),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(2, "b")),
1:ee55f36:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b")),
1:ee55f36:             row(1, list(4, 5, 6), set(4, 5, 6), map(2, "b"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertEmpty(execute("SELECT * FROM %s WHERE d=?", map(3, "c")));
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND c=?", map(1, "a"), set(1, 2, 3));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b=? ALLOW FILTERING", map(1, "a"), list(1, 2, 3)),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND b CONTAINS ?", map(1, "a"), 3);
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? ALLOW FILTERING", map(1, "a"), 3),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND b=? AND c=?", map(1, "a"), list(1, 2, 3), set(1, 2, 3));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b=? AND c=? ALLOW FILTERING", map(1, "a"), list(1, 2, 3), set(1, 2, 3)),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? AND c CONTAINS ? ALLOW FILTERING", map(1, "a"), 2, 2),
1:ee55f36:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36: 
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE d CONTAINS KEY ? ALLOW FILTERING", 1),
1:a991b64:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:a991b64:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:a991b64:         );
1:a991b64: 
1:ee55f36:         execute("DELETE d FROM %s WHERE a=? AND b=?", 0, list(1, 2, 3));
1:ee55f36:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(1, "a")),
1:ee55f36:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:ee55f36:         );
1:ee55f36:     }
1:ee55f36: 
1:e3862bc:     /** Test for CASSANDRA-8302 */
1:e3862bc:     @Test
1:e3862bc:     public void testClusteringColumnFiltering() throws Throwable
1:e3862bc:     {
1:e3862bc:         createTable("CREATE TABLE %s (a int, b frozen<map<int, int>>, c int, d int, PRIMARY KEY (a, b, c))");
1:e3862bc:         createIndex("CREATE INDEX c_index ON %s (c)");
1:e3862bc:         createIndex("CREATE INDEX d_index ON %s (d)");
1:e3862bc: 
1:e3862bc:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(0, 0, 1, 1), 0, 0);
1:e3862bc:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(1, 1, 2, 2), 0, 0);
1:e3862bc:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, map(0, 0, 1, 1), 0, 0);
1:e3862bc:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, map(1, 1, 2, 2), 0, 0);
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? ALLOW FILTERING", 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0),
1:e3862bc:                 row(1, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0),
1:e3862bc:                 row(1, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE a=? AND d=? AND b CONTAINS ? ALLOW FILTERING", 0, 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE a=? AND d=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc: 
1:e3862bc:         dropIndex("DROP INDEX %s.d_index");
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS ? ALLOW FILTERING", 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0),
1:e3862bc:                 row(1, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0),
1:e3862bc:                 row(1, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc: 
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE a=? AND c=? AND b CONTAINS ? ALLOW FILTERING", 0, 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc:         assertRows(execute("SELECT * FROM %s WHERE a=? AND c=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0, 0),
1:e3862bc:                 row(0, map(0, 0, 1, 1), 0, 0)
1:e3862bc:         );
1:e3862bc:     }
1:e3862bc: 
1:ee55f36:     @Test
1:bcf0ec6:     public void testFrozenListInMap() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<list<int>>, int>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, m) VALUES (1, {[1, 2, 3] : 1})");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(list(1, 2, 3), 1)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m[[1, 2, 3]]=2 WHERE k=1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(list(1, 2, 3), 2)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(list(4, 5, 6), 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1,
1:bcf0ec6:                     map(list(1, 2, 3), 2,
1:bcf0ec6:                         list(4, 5, 6), 3)));
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE m[[1, 2, 3]] FROM %s WHERE k = 1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(list(4, 5, 6), 3)));
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenListInSet() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<list<int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, s) VALUES (1, {[1, 2, 3]})");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(list(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(list(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(list(1, 2, 3), list(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(list(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(list(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE s[[1, 2, 3]] FROM %s WHERE k = 1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, null)
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenListInList() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<list<int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, l) VALUES (1, [[1, 2, 3]])");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, list(4, 5, 6));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(list(1, 2, 3)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(1, 2, 3), list(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(list(7, 8, 9)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(list(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(1, 2, 3), list(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(list(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenMapInMap() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<map<int, int>>, int>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, m) VALUES (1, {{1 : 1, 2 : 2} : 1})");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(map(1, 1, 2, 2), 1)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m[?]=2 WHERE k=1", map(1, 1, 2, 2));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(map(1, 1, 2, 2), 2)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(map(3, 3, 4, 4), 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1,
1:bcf0ec6:                     map(map(1, 1, 2, 2), 2,
1:bcf0ec6:                         map(3, 3, 4, 4), 3)));
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE m[?] FROM %s WHERE k = 1", map(1, 1, 2, 2));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(map(3, 3, 4, 4), 3)));
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenMapInSet() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<map<int, int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, s) VALUES (1, {{1 : 1, 2 : 2}})");
1:bcf0ec6: 
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(map(1, 1, 2, 2)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(map(3, 3, 4, 4)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(map(1, 1, 2, 2), map(3, 3, 4, 4)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(map(3, 3, 4, 4)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(map(1, 1, 2, 2)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE s[?] FROM %s WHERE k = 1", map(1, 1, 2, 2));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, null)
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenMapInList() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<map<int, int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, l) VALUES (1, [{1 : 1, 2 : 2}])");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(1, 1, 2, 2)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, map(3, 3, 4, 4));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(3, 3, 4, 4)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(map(1, 1, 2, 2)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(1, 1, 2, 2), map(3, 3, 4, 4)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(map(5, 5, 6, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(1, 1, 2, 2), map(3, 3, 4, 4), map(5, 5, 6, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(map(3, 3, 4, 4)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(1, 1, 2, 2), map(5, 5, 6, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(map(5, 5, 6, 6)))
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenSetInMap() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<set<int>>, int>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, m) VALUES (1, {{1, 2, 3} : 1})");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(set(1, 2, 3), 1)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m[?]=2 WHERE k=1", set(1, 2, 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(set(1, 2, 3), 2)));
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(set(4, 5, 6), 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1,
1:bcf0ec6:                     map(set(1, 2, 3), 2,
1:bcf0ec6:                         set(4, 5, 6), 3)));
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE m[?] FROM %s WHERE k = 1", set(1, 2, 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, map(set(4, 5, 6), 3)));
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenSetInSet() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<set<int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, s) VALUES (1, {{1, 2, 3}})");
1:bcf0ec6: 
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(set(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(set(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(set(1, 2, 3), set(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(set(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, set(set(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE s[?] FROM %s WHERE k = 1", set(1, 2, 3));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, null)
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:bcf0ec6:     public void testFrozenSetInList() throws Throwable
1:bcf0ec6:     {
1:bcf0ec6:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<set<int>>>)");
1:bcf0ec6: 
1:bcf0ec6:         execute("INSERT INTO %s (k, l) VALUES (1, [{1, 2, 3}])");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(1, 2, 3)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, set(4, 5, 6));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(set(1, 2, 3)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(1, 2, 3), set(4, 5, 6)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(set(7, 8, 9)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(1, 2, 3), set(4, 5, 6), set(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(set(4, 5, 6)));
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(1, 2, 3), set(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6: 
1:bcf0ec6:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:bcf0ec6:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:bcf0ec6:                 row(1, list(set(7, 8, 9)))
1:bcf0ec6:         );
1:bcf0ec6:     }
1:bcf0ec6: 
1:bcf0ec6:     @Test
1:ee55f36:     public void testUserDefinedTypes() throws Throwable
1:ee55f36:     {
1:ee55f36:         String myType = createType("CREATE TYPE %s (a set<int>, b tuple<list<int>>)");
1:ee55f36:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v frozen<" + myType + ">)");
1:ee55f36:         execute("INSERT INTO %s (k, v) VALUES (?, {a: ?, b: ?})", 0, set(1, 2, 3), tuple(list(1, 2, 3)));
1:ee55f36:         assertRows(execute("SELECT v.a, v.b FROM %s WHERE k=?", 0),
1:ee55f36:             row(set(1, 2, 3), tuple(list(1, 2, 3)))
1:ee55f36:         );
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     private static String clean(String classname)
1:ee55f36:     {
1:ee55f36:         return StringUtils.remove(classname, "org.apache.cassandra.db.marshal.");
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Test
1:ee55f36:     public void testToString()
1:ee55f36:     {
1:ee55f36:         // set<frozen<list<int>>>
1:ee55f36:         SetType t = SetType.getInstance(ListType.getInstance(Int32Type.instance, false), true);
1:ee55f36:         assertEquals("SetType(FrozenType(ListType(Int32Type)))", clean(t.toString()));
1:ee55f36:         assertEquals("SetType(ListType(Int32Type))", clean(t.toString(true)));
1:ee55f36: 
1:ee55f36:         // frozen<set<list<int>>>
1:ee55f36:         t = SetType.getInstance(ListType.getInstance(Int32Type.instance, false), false);
1:ee55f36:         assertEquals("FrozenType(SetType(ListType(Int32Type)))", clean(t.toString()));
1:ee55f36:         assertEquals("SetType(ListType(Int32Type))", clean(t.toString(true)));
1:ee55f36: 
1:ee55f36:         // map<frozen<list<int>>, int>
1:ee55f36:         MapType m = MapType.getInstance(ListType.getInstance(Int32Type.instance, false), Int32Type.instance, true);
1:ee55f36:         assertEquals("MapType(FrozenType(ListType(Int32Type)),Int32Type)", clean(m.toString()));
1:ee55f36:         assertEquals("MapType(ListType(Int32Type),Int32Type)", clean(m.toString(true)));
1:ee55f36: 
1:ee55f36:         // frozen<map<list<int>, int>>
1:ee55f36:         m = MapType.getInstance(ListType.getInstance(Int32Type.instance, false), Int32Type.instance, false);
1:ee55f36:         assertEquals("FrozenType(MapType(ListType(Int32Type),Int32Type))", clean(m.toString()));
1:ee55f36:         assertEquals("MapType(ListType(Int32Type),Int32Type)", clean(m.toString(true)));
1:ee55f36: 
1:ee55f36:         // tuple<set<int>>
1:ee55f36:         List<AbstractType<?>> types = new ArrayList<>();
1:ee55f36:         types.add(SetType.getInstance(Int32Type.instance, true));
1:ee55f36:         TupleType tuple = new TupleType(types);
1:ee55f36:         assertEquals("TupleType(SetType(Int32Type))", clean(tuple.toString()));
1:ee55f36:     }
1:bc9a61f: 
1:bc9a61f:     @Test
1:bc9a61f:     public void testListWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l frozen<list<text>>)");
1:bc9a61f: 
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list(largeText, "v2"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v1", largeText));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText)));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE l FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, l) VALUES (0, ['" + largeText + "', 'v2'])");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:bc9a61f:     }
1:bc9a61f: 
1:bc9a61f:     @Test
1:bc9a61f:     public void testMapsWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 2);
1:bc9a61f:         String largeText2 = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m frozen<map<text, text>>)");
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map(largeText, "v1", "k2", largeText));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:             row(map(largeText, "v1", "k2", largeText)));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET m = ? WHERE k = 0", map("k5", largeText, largeText2, "v6"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k5", largeText, largeText2, "v6")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE m FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, m) VALUES (0, {'" + largeText + "' : 'v1', 'k2' : '" + largeText + "'})");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map(largeText, "v1", "k2", largeText)));
1:bc9a61f:     }
1:bc9a61f: 
1:bc9a61f:     @Test
1:bc9a61f:     public void testSetsWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s frozen<set<text>>)");
1:bc9a61f: 
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set(largeText, "v1", "v2"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v1", "v2")));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET s = ? WHERE k = 0", set(largeText, "v3"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v3")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE s FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, s) VALUES (0, {'" + largeText + "', 'v1', 'v2'})");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v1", "v2")));
1:bc9a61f:     }
1:ee55f36: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:     public static void setUpClass()     // overrides CQLTester.setUpClass()
1: 
1:         prepareServer();
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:         // Selecting partitioner for a table is not exposed on CREATE TABLE.
1:         StorageService.instance.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Alex Petrov
-------------------------------------------------------------------------------
commit:c83729f
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage("Clustering columns can only be restricted with CONTAINS with a secondary index or filtering",
commit:a600920
/////////////////////////////////////////////////////////////////////////
1:         assertRows(execute("SELECT * FROM %s WHERE b CONTAINS ? ALLOW FILTERING", 1),
1:                    row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:                    row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b")));
1:         assertRows(execute("SELECT * FROM %s WHERE b CONTAINS ? AND d CONTAINS KEY ? ALLOW FILTERING", 1, 1),
1:                    row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")));
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:9c3855b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.restrictions.StatementRestrictions;
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,
commit:bc9a61f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testListWithElementsBiggerThan64K() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l frozen<list<text>>)");
1: 
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1: 
1:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list(largeText, "v2"));
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v1", largeText));
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText)));
1: 
1:         execute("DELETE l FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, l) VALUES (0, ['" + largeText + "', 'v2'])");
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:     }
1: 
1:     @Test
1:     public void testMapsWithElementsBiggerThan64K() throws Throwable
1:     {
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1: 
1:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 2);
1:         String largeText2 = new String(bytes);
1: 
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m frozen<map<text, text>>)");
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map(largeText, "v1", "k2", largeText));
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:             row(map(largeText, "v1", "k2", largeText)));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET m = ? WHERE k = 0", map("k5", largeText, largeText2, "v6"));
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k5", largeText, largeText2, "v6")));
1: 
1:         execute("DELETE m FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (0, {'" + largeText + "' : 'v1', 'k2' : '" + largeText + "'})");
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map(largeText, "v1", "k2", largeText)));
1:     }
1: 
1:     @Test
1:     public void testSetsWithElementsBiggerThan64K() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s frozen<set<text>>)");
1: 
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set(largeText, "v1", "v2"));
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v1", "v2")));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET s = ? WHERE k = 0", set(largeText, "v3"));
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v3")));
1: 
1:         execute("DELETE s FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, {'" + largeText + "', 'v1', 'v2'})");
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v1", "v2")));
1:     }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:df3972e
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.commons.lang3.StringUtils;
1: import org.junit.Assert;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(a))", "Cannot create secondary index on partition key column");
commit:fde97c3
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(a))", "Cannot create keys() index on frozen column a. " +
1:                                                                               "Frozen collections only support full() indexes");
1:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(b))", "Cannot create keys() index on frozen column b. " +
1:                                                                               "Frozen collections only support full() indexes");
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:         // Selecting partitioner for a table is not exposed on CREATE TABLE.
0:         StorageService.instance.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
commit:1faca1c
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitioner(new ByteOrderedPartitioner());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidMessage("No supported secondary index found for the non primary key columns restrictions",
/////////////////////////////////////////////////////////////////////////
1:         assertRows(execute("SELECT * FROM %s WHERE d CONTAINS KEY ? ALLOW FILTERING", 1),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.entities;
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
0: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
0:     public static void setUpClass()
1:     {
0:         DatabaseDescriptor.setPartitioner(new ByteOrderedPartitioner());
1:     }
1: 
commit:bcf0ec6
/////////////////////////////////////////////////////////////////////////
1:     public void testFrozenListInMap() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<list<int>>, int>)");
1: 
1:         execute("INSERT INTO %s (k, m) VALUES (1, {[1, 2, 3] : 1})");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(list(1, 2, 3), 1)));
1: 
1:         execute("UPDATE %s SET m[[1, 2, 3]]=2 WHERE k=1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(list(1, 2, 3), 2)));
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(list(4, 5, 6), 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1,
1:                     map(list(1, 2, 3), 2,
1:                         list(4, 5, 6), 3)));
1: 
1:         execute("DELETE m[[1, 2, 3]] FROM %s WHERE k = 1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(list(4, 5, 6), 3)));
1:     }
1: 
1:     @Test
1:     public void testFrozenListInSet() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<list<int>>>)");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (1, {[1, 2, 3]})");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(list(1, 2, 3)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(list(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(list(1, 2, 3), list(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(list(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(list(1, 2, 3)))
1:         );
1: 
1:         execute("DELETE s[[1, 2, 3]] FROM %s WHERE k = 1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, null)
1:         );
1:     }
1: 
1:     @Test
1:     public void testFrozenListInList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<list<int>>>)");
1: 
1:         execute("INSERT INTO %s (k, l) VALUES (1, [[1, 2, 3]])");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(1, 2, 3)))
1:         );
1: 
1:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, list(4, 5, 6));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(list(1, 2, 3)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(1, 2, 3), list(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(list(7, 8, 9)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(list(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(1, 2, 3), list(7, 8, 9)))
1:         );
1: 
1:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(list(7, 8, 9)))
1:         );
1:     }
1: 
1:     @Test
1:     public void testFrozenMapInMap() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<map<int, int>>, int>)");
1: 
1:         execute("INSERT INTO %s (k, m) VALUES (1, {{1 : 1, 2 : 2} : 1})");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(map(1, 1, 2, 2), 1)));
1: 
1:         execute("UPDATE %s SET m[?]=2 WHERE k=1", map(1, 1, 2, 2));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(map(1, 1, 2, 2), 2)));
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(map(3, 3, 4, 4), 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1,
1:                     map(map(1, 1, 2, 2), 2,
1:                         map(3, 3, 4, 4), 3)));
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 1", map(1, 1, 2, 2));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(map(3, 3, 4, 4), 3)));
1:     }
1: 
1:     @Test
1:     public void testFrozenMapInSet() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<map<int, int>>>)");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (1, {{1 : 1, 2 : 2}})");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(map(1, 1, 2, 2)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(map(3, 3, 4, 4)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(map(1, 1, 2, 2), map(3, 3, 4, 4)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(map(3, 3, 4, 4)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(map(1, 1, 2, 2)))
1:         );
1: 
1:         execute("DELETE s[?] FROM %s WHERE k = 1", map(1, 1, 2, 2));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, null)
1:         );
1:     }
1: 
1:     @Test
1:     public void testFrozenMapInList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<map<int, int>>>)");
1: 
1:         execute("INSERT INTO %s (k, l) VALUES (1, [{1 : 1, 2 : 2}])");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(1, 1, 2, 2)))
1:         );
1: 
1:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, map(3, 3, 4, 4));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(3, 3, 4, 4)))
1:         );
1: 
1:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(map(1, 1, 2, 2)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(1, 1, 2, 2), map(3, 3, 4, 4)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(map(5, 5, 6, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(1, 1, 2, 2), map(3, 3, 4, 4), map(5, 5, 6, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(map(3, 3, 4, 4)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(1, 1, 2, 2), map(5, 5, 6, 6)))
1:         );
1: 
1:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(map(5, 5, 6, 6)))
1:         );
1:     }
1: 
1:     @Test
1:     public void testFrozenSetInMap() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, m map<frozen<set<int>>, int>)");
1: 
1:         execute("INSERT INTO %s (k, m) VALUES (1, {{1, 2, 3} : 1})");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(set(1, 2, 3), 1)));
1: 
1:         execute("UPDATE %s SET m[?]=2 WHERE k=1", set(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(set(1, 2, 3), 2)));
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k=1", map(set(4, 5, 6), 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1,
1:                     map(set(1, 2, 3), 2,
1:                         set(4, 5, 6), 3)));
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 1", set(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, map(set(4, 5, 6), 3)));
1:     }
1: 
1:     @Test
1:     public void testFrozenSetInSet() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, s set<frozen<set<int>>>)");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (1, {{1, 2, 3}})");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(set(1, 2, 3)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s + ? WHERE k=1", set(set(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(set(1, 2, 3), set(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET s = s - ? WHERE k=1", set(set(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, set(set(1, 2, 3)))
1:         );
1: 
1:         execute("DELETE s[?] FROM %s WHERE k = 1", set(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, null)
1:         );
1:     }
1: 
1:     @Test
1:     public void testFrozenSetInList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int primary key, l list<frozen<set<int>>>)");
1: 
1:         execute("INSERT INTO %s (k, l) VALUES (1, [{1, 2, 3}])");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(1, 2, 3)))
1:         );
1: 
1:         execute("UPDATE %s SET l[?]=? WHERE k=1", 0, set(4, 5, 6));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET l = ? + l WHERE k=1", list(set(1, 2, 3)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(1, 2, 3), set(4, 5, 6)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l + ? WHERE k=1", list(set(7, 8, 9)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(1, 2, 3), set(4, 5, 6), set(7, 8, 9)))
1:         );
1: 
1:         execute("UPDATE %s SET l = l - ? WHERE k=1", list(set(4, 5, 6)));
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(1, 2, 3), set(7, 8, 9)))
1:         );
1: 
1:         execute("DELETE l[0] FROM %s WHERE k = 1");
1:         assertRows(execute("SELECT * FROM %s WHERE k = 1"),
1:                 row(1, list(set(7, 8, 9)))
1:         );
1:     }
1: 
1:     @Test
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1:                    row(set(), 0),
1:                    row(set(4, 5, 6), 0)
/////////////////////////////////////////////////////////////////////////
1:                    row(map(), 0),
1:                    row(map(set(), list(1, 2, 3)), 0),
1:                    row(map(set(4, 5, 6), list(1, 2, 3)), 0)
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidMessage("Cannot restrict clustering columns by a CONTAINS relation without a secondary index",
0:         assertInvalidMessage("Cannot restrict clustering columns by a CONTAINS relation without a secondary index",
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidMessage("Cannot restrict clustering columns by a CONTAINS relation without a secondary index",
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:e3862bc
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidMessage("Cannot restrict column \"b\" by a CONTAINS relation without a secondary index",
0:         assertInvalidMessage("Cannot restrict column \"b\" by a CONTAINS relation without a secondary index",
/////////////////////////////////////////////////////////////////////////
0:         assertInvalidMessage("Cannot restrict column \"b\" by a CONTAINS relation without a secondary index",
/////////////////////////////////////////////////////////////////////////
1:     /** Test for CASSANDRA-8302 */
1:     @Test
1:     public void testClusteringColumnFiltering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b frozen<map<int, int>>, c int, d int, PRIMARY KEY (a, b, c))");
1:         createIndex("CREATE INDEX c_index ON %s (c)");
1:         createIndex("CREATE INDEX d_index ON %s (d)");
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(0, 0, 1, 1), 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(1, 1, 2, 2), 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, map(0, 0, 1, 1), 0, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, map(1, 1, 2, 2), 0, 0);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? ALLOW FILTERING", 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0),
1:                 row(1, map(0, 0, 1, 1), 0, 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0),
1:                 row(1, map(0, 0, 1, 1), 0, 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a=? AND d=? AND b CONTAINS ? ALLOW FILTERING", 0, 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0)
1:         );
1:         assertRows(execute("SELECT * FROM %s WHERE a=? AND d=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0)
1:         );
1: 
1:         dropIndex("DROP INDEX %s.d_index");
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS ? ALLOW FILTERING", 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0),
1:                 row(1, map(0, 0, 1, 1), 0, 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0),
1:                 row(1, map(0, 0, 1, 1), 0, 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a=? AND c=? AND b CONTAINS ? ALLOW FILTERING", 0, 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0)
1:         );
1:         assertRows(execute("SELECT * FROM %s WHERE a=? AND c=? AND b CONTAINS KEY ? ALLOW FILTERING", 0, 0, 0),
1:                 row(0, map(0, 0, 1, 1), 0, 0)
1:         );
1:     }
1: 
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.SyntaxException;
0: import org.apache.commons.lang3.StringUtils;
0: import org.junit.Assert;
0: import org.junit.Test;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class FrozenCollectionsTest extends CQLTester
1: {
1:     @Test
1:     public void testPartitionKeyUsage() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k frozen<set<int>> PRIMARY KEY, v int)");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(), 1);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(1, 2, 3), 1);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(4, 5, 6), 0);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", set(7, 8, 9), 0);
1: 
1:         // overwrite with an update
1:         execute("UPDATE %s SET v=? WHERE k=?", 0, set());
1:         execute("UPDATE %s SET v=? WHERE k=?", 0, set(1, 2, 3));
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(set(), 0),
1:             row(set(1, 2, 3), 0),
1:             row(set(4, 5, 6), 0),
1:             row(set(7, 8, 9), 0)
1:         );
1: 
1:         assertRows(execute("SELECT k FROM %s"),
1:             row(set()),
1:             row(set(1, 2, 3)),
1:             row(set(4, 5, 6)),
1:             row(set(7, 8, 9))
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:                 row(set(), 0),
1:                 row(set(1, 2, 3), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=?", set(4, 5, 6)),
1:             row(set(4, 5, 6), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=?", set()),
1:                 row(set(), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k IN ?", list(set(4, 5, 6), set())),
1:                 row(set(4, 5, 6), 0),
1:                 row(set(), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(k) >= token(?)", set(4, 5, 6)),
1:                 row(set(4, 5, 6), 0),
1:                 row(set(7, 8, 9), 0)
1:         );
1: 
1:         assertInvalid("INSERT INTO %s (k, v) VALUES (null, 0)");
1: 
1:         execute("DELETE FROM %s WHERE k=?", set());
1:         execute("DELETE FROM %s WHERE k=?", set(4, 5, 6));
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(set(1, 2, 3), 0),
1:             row(set(7, 8, 9), 0)
1:         );
1:     }
1: 
1:     @Test
1:     public void testNestedPartitionKeyUsage() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k frozen<map<set<int>, list<int>>> PRIMARY KEY, v int)");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(), 1);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(), list(1, 2, 3)), 0);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(1, 2, 3), list(1, 2, 3)), 1);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(4, 5, 6), list(1, 2, 3)), 0);
1:         execute("INSERT INTO %s (k, v) VALUES (?, ?)", map(set(7, 8, 9), list(1, 2, 3)), 0);
1: 
1:         // overwrite with an update
1:         execute("UPDATE %s SET v=? WHERE k=?", 0, map());
1:         execute("UPDATE %s SET v=? WHERE k=?", 0, map(set(1, 2, 3), list(1, 2, 3)));
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(map(), 0),
1:             row(map(set(), list(1, 2, 3)), 0),
1:             row(map(set(1, 2, 3), list(1, 2, 3)), 0),
1:             row(map(set(4, 5, 6), list(1, 2, 3)), 0),
1:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT k FROM %s"),
1:             row(map()),
1:             row(map(set(), list(1, 2, 3))),
1:             row(map(set(1, 2, 3), list(1, 2, 3))),
1:             row(map(set(4, 5, 6), list(1, 2, 3))),
1:             row(map(set(7, 8, 9), list(1, 2, 3)))
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:             row(map(), 0),
1:             row(map(set(), list(1, 2, 3)), 0),
1:             row(map(set(1, 2, 3), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=?", map(set(4, 5, 6), list(1, 2, 3))),
1:             row(map(set(4, 5, 6), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=?", map()),
1:                 row(map(), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=?", map(set(), list(1, 2, 3))),
1:                 row(map(set(), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k IN ?", list(map(set(4, 5, 6), list(1, 2, 3)), map(), map(set(), list(1, 2, 3)))),
1:             row(map(set(4, 5, 6), list(1, 2, 3)), 0),
1:             row(map(), 0),
1:             row(map(set(), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(k) >= token(?)", map(set(4, 5, 6), list(1, 2, 3))),
1:             row(map(set(4, 5, 6), list(1, 2, 3)), 0),
1:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:         );
1: 
1:         execute("DELETE FROM %s WHERE k=?", map());
1:         execute("DELETE FROM %s WHERE k=?", map(set(), list(1, 2, 3)));
1:         execute("DELETE FROM %s WHERE k=?", map(set(4, 5, 6), list(1, 2, 3)));
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(map(set(1, 2, 3), list(1, 2, 3)), 0),
1:             row(map(set(7, 8, 9), list(1, 2, 3)), 0)
1:         );
1: 
1:     }
1: 
1:     @Test
1:     public void testClusteringKeyUsage() throws Throwable
1:     {
1:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:         {
1:             createTable("CREATE TABLE %s (a int, b frozen<set<int>>, c int, PRIMARY KEY (a, b))" + option);
1: 
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(), 1);
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(1, 2, 3), 1);
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(4, 5, 6), 0);
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, set(7, 8, 9), 0);
1: 
1:             // overwrite with an update
1:             execute("UPDATE %s SET c=? WHERE a=? AND b=?", 0, 0, set());
1:             execute("UPDATE %s SET c=? WHERE a=? AND b=?", 0, 0, set(1, 2, 3));
1: 
1:             assertRows(execute("SELECT * FROM %s"),
1:                 row(0, set(), 0),
1:                 row(0, set(1, 2, 3), 0),
1:                 row(0, set(4, 5, 6), 0),
1:                 row(0, set(7, 8, 9), 0)
1:             );
1: 
1:             assertRows(execute("SELECT b FROM %s"),
1:                 row(set()),
1:                 row(set(1, 2, 3)),
1:                 row(set(4, 5, 6)),
1:                 row(set(7, 8, 9))
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:                 row(0, set(), 0),
1:                 row(0, set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, set(4, 5, 6)),
1:                 row(0, set(4, 5, 6), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, set()),
1:                 row(0, set(), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b IN ?", 0, list(set(4, 5, 6), set())),
1:                 row(0, set(), 0),
1:                 row(0, set(4, 5, 6), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ?", 0, set(4, 5, 6)),
1:                 row(0, set(7, 8, 9), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b >= ?", 0, set(4, 5, 6)),
1:                 row(0, set(4, 5, 6), 0),
1:                 row(0, set(7, 8, 9), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b < ?", 0, set(4, 5, 6)),
1:                 row(0, set(), 0),
1:                 row(0, set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b <= ?", 0, set(4, 5, 6)),
1:                 row(0, set(), 0),
1:                 row(0, set(1, 2, 3), 0),
1:                 row(0, set(4, 5, 6), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ? AND b <= ?", 0, set(1, 2, 3), set(4, 5, 6)),
1:                 row(0, set(4, 5, 6), 0)
1:             );
1: 
1:             execute("DELETE FROM %s WHERE a=? AND b=?", 0, set());
1:             execute("DELETE FROM %s WHERE a=? AND b=?", 0, set(4, 5, 6));
1:             assertRows(execute("SELECT * FROM %s"),
1:                 row(0, set(1, 2, 3), 0),
1:                 row(0, set(7, 8, 9), 0)
1:             );
1:         }
1:     }
1: 
1:     @Test
1:     public void testNestedClusteringKeyUsage() throws Throwable
1:     {
1:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:         {
1:             createTable("CREATE TABLE %s (a int, b frozen<map<set<int>, list<int>>>, c frozen<set<int>>, d int, PRIMARY KEY (a, b, c))" + option);
1: 
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(), set(), 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(), list(1, 2, 3)), set(), 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0);
1:             execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0);
1: 
1:             assertRows(execute("SELECT * FROM %s"),
1:                 row(0, map(), set(), 0),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT b FROM %s"),
1:                 row(map()),
1:                 row(map(set(), list(1, 2, 3))),
1:                 row(map(set(1, 2, 3), list(1, 2, 3))),
1:                 row(map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(map(set(7, 8, 9), list(1, 2, 3)))
1:             );
1: 
1:             assertRows(execute("SELECT c FROM %s"),
1:                 row(set()),
1:                 row(set()),
1:                 row(set(1, 2, 3)),
1:                 row(set(1, 2, 3)),
1:                 row(set(1, 2, 3))
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s LIMIT 3"),
1:                 row(0, map(), set(), 0),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=0 ORDER BY b DESC LIMIT 4"),
1:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map()),
1:                 row(0, map(), set(), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map(set(), list(1, 2, 3))),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, map(set(1, 2, 3), list(1, 2, 3))),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set()),
1:                     row(0, map(set(), list(1, 2, 3)), set(), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND (b, c) IN ?", 0, list(tuple(map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)),
1:                                                                                      tuple(map(), set()))),
1:                 row(0, map(), set(), 0),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b >= ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b < ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(0, map(), set(), 0),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b <= ?", 0, map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(0, map(), set(), 0),
1:                 row(0, map(set(), list(1, 2, 3)), set(), 0),
1:                 row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=? AND b > ? AND b <= ?", 0, map(set(1, 2, 3), list(1, 2, 3)), map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1: 
1:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(), set());
1:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(), set()));
1: 
1:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set());
1:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(), list(1, 2, 3)), set()));
1: 
1:             execute("DELETE FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3));
1:             assertEmpty(execute("SELECT * FROM %s WHERE a=? AND b=? AND c=?", 0, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)));
1: 
1:             assertRows(execute("SELECT * FROM %s"),
1:                     row(0, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3), 0),
1:                     row(0, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3), 0)
1:             );
1:         }
1:     }
1: 
1:     @Test
1:     public void testNormalColumnUsage() throws Throwable
1:     {
1:         for (String option : Arrays.asList("", " WITH COMPACT STORAGE"))
1:         {
1:             createTable("CREATE TABLE %s (a int PRIMARY KEY, b frozen<map<set<int>, list<int>>>, c frozen<set<int>>)" + option);
1: 
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, map(), set());
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 1, map(set(), list(99999, 999999, 99999)), set());
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 2, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3));
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3));
1:             execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 4, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3));
1: 
1:             // overwrite with update
1:             execute ("UPDATE %s SET b=? WHERE a=?", map(set(), list(1, 2, 3)), 1);
1: 
1:             assertRows(execute("SELECT * FROM %s"),
1:                 row(0, map(), set()),
1:                 row(1, map(set(), list(1, 2, 3)), set()),
1:                 row(2, map(set(1, 2, 3), list(1, 2, 3)), set(1, 2, 3)),
1:                 row(3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3)),
1:                 row(4, map(set(7, 8, 9), list(1, 2, 3)), set(1, 2, 3))
1:             );
1: 
1:             assertRows(execute("SELECT b FROM %s"),
1:                 row(map()),
1:                 row(map(set(), list(1, 2, 3))),
1:                 row(map(set(1, 2, 3), list(1, 2, 3))),
1:                 row(map(set(4, 5, 6), list(1, 2, 3))),
1:                 row(map(set(7, 8, 9), list(1, 2, 3)))
1:             );
1: 
1:             assertRows(execute("SELECT c FROM %s"),
1:                 row(set()),
1:                 row(set()),
1:                 row(set(1, 2, 3)),
1:                 row(set(1, 2, 3)),
1:                 row(set(1, 2, 3))
1:             );
1: 
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 3),
1:                 row(3, map(set(4, 5, 6), list(1, 2, 3)), set(1, 2, 3))
1:             );
1: 
1:             execute("UPDATE %s SET b=? WHERE a=?", null, 1);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 1),
1:                 row(1, null, set())
1:             );
1: 
1:             execute("UPDATE %s SET b=? WHERE a=?", map(), 1);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 1),
1:                 row(1, map(), set())
1:             );
1: 
1:             execute("UPDATE %s SET c=? WHERE a=?", null, 2);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 2),
1:                 row(2, map(set(1, 2, 3), list(1, 2, 3)), null)
1:             );
1: 
1:             execute("UPDATE %s SET c=? WHERE a=?", set(), 2);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 2),
1:                     row(2, map(set(1, 2, 3), list(1, 2, 3)), set())
1:             );
1: 
1:             execute("DELETE b FROM %s WHERE a=?", 3);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 3),
1:                 row(3, null, set(1, 2, 3))
1:             );
1: 
1:             execute("DELETE c FROM %s WHERE a=?", 4);
1:             assertRows(execute("SELECT * FROM %s WHERE a=?", 4),
1:                 row(4, map(set(7, 8, 9), list(1, 2, 3)), null)
1:             );
1:         }
1:     }
1: 
1:     @Test
1:     public void testStaticColumnUsage() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c frozen<map<set<int>, list<int>>> static, d int, PRIMARY KEY (a, b))");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, map(), 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, map(), 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, map(set(), list(1, 2, 3)), 0);
1:         execute("INSERT INTO %s (a, b, d) VALUES (?, ?, ?)", 1, 1, 0);
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(0, 0, map(), 0),
1:             row(0, 1, map(), 0),
1:             row(1, 0, map(set(), list(1, 2, 3)), 0),
1:             row(1, 1, map(set(), list(1, 2, 3)), 0),
1:             row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a=? AND b=?", 0, 1),
1:             row(0, 1, map(), 0)
1:         );
1: 
1:         execute("DELETE c FROM %s WHERE a=?", 0);
1:         assertRows(execute("SELECT * FROM %s"),
1:                 row(0, 0, null, 0),
1:                 row(0, 1, null, 0),
1:                 row(1, 0, map(set(), list(1, 2, 3)), 0),
1:                 row(1, 1, map(set(), list(1, 2, 3)), 0),
1:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:         );
1: 
1:         execute("DELETE FROM %s WHERE a=?", 0);
1:         assertRows(execute("SELECT * FROM %s"),
1:                 row(1, 0, map(set(), list(1, 2, 3)), 0),
1:                 row(1, 1, map(set(), list(1, 2, 3)), 0),
1:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:         );
1: 
1:         execute("UPDATE %s SET c=? WHERE a=?", map(set(1, 2, 3), list(1, 2, 3)), 1);
1:         assertRows(execute("SELECT * FROM %s"),
1:                 row(1, 0, map(set(1, 2, 3), list(1, 2, 3)), 0),
1:                 row(1, 1, map(set(1, 2, 3), list(1, 2, 3)), 0),
1:                 row(2, 0, map(set(1, 2, 3), list(1, 2, 3)), 0)
1:         );
1:     }
1: 
1:     private void assertInvalidCreateWithMessage(String createTableStatement, String errorMessage) throws Throwable
1:     {
1:          try
1:         {
1:             createTableMayThrow(createTableStatement);
1:             Assert.fail("Expected CREATE TABLE statement to error: " + createTableStatement);
1:         }
1:         catch (InvalidRequestException | ConfigurationException | SyntaxException ex)
1:         {
1:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:                     ex.getMessage().contains(errorMessage));
1:         }
1:     }
1: 
1:     private void assertInvalidAlterWithMessage(String createTableStatement, String errorMessage) throws Throwable
1:     {
1:         try
1:         {
1:             alterTableMayThrow(createTableStatement);
1:             Assert.fail("Expected CREATE TABLE statement to error: " + createTableStatement);
1:         }
1:         catch (InvalidRequestException | ConfigurationException ex)
1:         {
1:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:                     ex.getMessage().contains(errorMessage));
1:         }
1:     }
1: 
1:     @Test
1:     public void testInvalidOperations() throws Throwable
1:     {
1:         // lists
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l frozen<list<int>>)");
1:         assertInvalid("UPDATE %s SET l[?]=? WHERE k=?", 0, 0, 0);
1:         assertInvalid("UPDATE %s SET l = ? + l WHERE k=?", list(0), 0);
1:         assertInvalid("UPDATE %s SET l = l + ? WHERE k=?", list(4), 0);
1:         assertInvalid("UPDATE %s SET l = l - ? WHERE k=?", list(3), 0);
1:         assertInvalid("DELETE l[?] FROM %s WHERE k=?", 0, 0);
1: 
1:         // sets
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s frozen<set<int>>)");
1:         assertInvalid("UPDATE %s SET s = s + ? WHERE k=?", set(0), 0);
1:         assertInvalid("UPDATE %s SET s = s - ? WHERE k=?", set(3), 0);
1: 
1:         // maps
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m frozen<map<int, int>>)");
1:         assertInvalid("UPDATE %s SET m[?]=? WHERE k=?", 0, 0, 0);
1:         assertInvalid("UPDATE %s SET m = m + ? WHERE k=?", map(4, 4), 0);
1:         assertInvalid("DELETE m[?] FROM %s WHERE k=?", 0, 0);
1: 
1:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t set<set<int>>)",
1:                 "Non-frozen collections are not allowed inside collections");
1: 
1:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t frozen<set<counter>>)",
1:                                        "Counters are not allowed inside collections");
1: 
1:         assertInvalidCreateWithMessage("CREATE TABLE %s (k int PRIMARY KEY, t frozen<text>)",
1:                 "frozen<> is only allowed on collections, tuples, and user-defined types");
1:     }
1: 
1:     @Test
1:     public void testAltering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b frozen<list<int>>, c frozen<list<int>>, PRIMARY KEY (a, b))");
1: 
1:         alterTable("ALTER TABLE %s ALTER c TYPE frozen<list<blob>>");
1: 
1:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER b TYPE frozen<list<blob>>",
1:                                       "types are not order-compatible");
1: 
1:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER b TYPE list<int>",
1:                                       "types are not order-compatible");
1: 
1:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE list<blob>",
1:                                       "types are incompatible");
1: 
1:         alterTable("ALTER TABLE %s DROP c");
1:         alterTable("ALTER TABLE %s ADD c frozen<set<int>>");
1:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE frozen<set<blob>>",
1:                                       "types are incompatible");
1: 
1:         alterTable("ALTER TABLE %s DROP c");
1:         alterTable("ALTER TABLE %s ADD c frozen<map<int, int>>");
1:         assertInvalidAlterWithMessage("ALTER TABLE %s ALTER c TYPE frozen<map<blob, int>>",
1:                                       "types are incompatible");
1:         alterTable("ALTER TABLE %s ALTER c TYPE frozen<map<int, blob>>");
1:     }
1: 
1:     private void assertInvalidIndexCreationWithMessage(String statement, String errorMessage) throws Throwable
1:     {
1:         try
1:         {
1:             createIndexMayThrow(statement);
1:             Assert.fail("Expected index creation to fail: " + statement);
1:         }
1:         catch (InvalidRequestException ex)
1:         {
1:             Assert.assertTrue("Expected error message to contain '" + errorMessage + "', but got '" + ex.getMessage() + "'",
1:                               ex.getMessage().contains(errorMessage));
1:         }
1:     }
1: 
1:     @Test
1:     public void testSecondaryIndex() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a frozen<map<int, text>> PRIMARY KEY, b frozen<map<int, text>>)");
1: 
1:         // for now, we don't support indexing values or keys of collections in the primary key
1:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (full(a))", "Cannot create secondary index on partition key column");
0:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(a))", "Cannot create index on keys of frozen<map> column");
0:         assertInvalidIndexCreationWithMessage("CREATE INDEX ON %s (keys(b))", "Cannot create index on keys of frozen<map> column");
1: 
1:         createTable("CREATE TABLE %s (a int, b frozen<list<int>>, c frozen<set<int>>, d frozen<map<int, text>>, PRIMARY KEY (a, b))");
1: 
1:         createIndex("CREATE INDEX ON %s (full(b))");
1:         createIndex("CREATE INDEX ON %s (full(c))");
1:         createIndex("CREATE INDEX ON %s (full(d))");
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, list(1, 2, 3), set(1, 2, 3), map(1, "a"));
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, list(4, 5, 6), set(1, 2, 3), map(1, "a"));
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, list(1, 2, 3), set(4, 5, 6), map(2, "b"));
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, list(4, 5, 6), set(4, 5, 6), map(2, "b"));
1: 
1:         // CONTAINS KEY doesn't work on non-maps
1:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:                              "SELECT * FROM %s WHERE b CONTAINS KEY ?", 1);
1: 
1:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:                              "SELECT * FROM %s WHERE b CONTAINS KEY ? ALLOW FILTERING", 1);
1: 
1:         assertInvalidMessage("Cannot use CONTAINS KEY on non-map column",
1:                              "SELECT * FROM %s WHERE c CONTAINS KEY ?", 1);
1: 
1:         // normal indexes on frozen collections don't support CONTAINS or CONTAINS KEY
0:         assertInvalidMessage("No secondary indexes on the restricted columns support the provided operator",
1:                              "SELECT * FROM %s WHERE b CONTAINS ?", 1);
1: 
0:         assertInvalidMessage("No secondary indexes on the restricted columns support the provided operator",
0:                              "SELECT * FROM %s WHERE b CONTAINS ? ALLOW FILTERING", 1);
1: 
0:         assertInvalidMessage("No secondary indexes on the restricted columns support the provided operator",
1:                              "SELECT * FROM %s WHERE d CONTAINS KEY ?", 1);
1: 
0:         assertInvalidMessage("No secondary indexes on the restricted columns support the provided operator",
0:                              "SELECT * FROM %s WHERE d CONTAINS KEY ? ALLOW FILTERING", 1);
1: 
0:         assertInvalidMessage("No secondary indexes on the restricted columns support the provided operator",
0:                              "SELECT * FROM %s WHERE b CONTAINS ? AND d CONTAINS KEY ? ALLOW FILTERING", 1, 1);
1: 
1:         // index lookup on b
1:         assertRows(execute("SELECT * FROM %s WHERE b=?", list(1, 2, 3)),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:         );
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE b=?", list(-1)));
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND c=?", list(1, 2, 3), set(4, 5, 6));
1:         assertRows(execute("SELECT * FROM %s WHERE b=? AND c=? ALLOW FILTERING", list(1, 2, 3), set(4, 5, 6)),
1:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND c CONTAINS ?", list(1, 2, 3), 5);
1:         assertRows(execute("SELECT * FROM %s WHERE b=? AND c CONTAINS ? ALLOW FILTERING", list(1, 2, 3), 5),
1:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d=?", list(1, 2, 3), map(1, "a"));
1:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d=? ALLOW FILTERING", list(1, 2, 3), map(1, "a")),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d CONTAINS ?", list(1, 2, 3), "a");
1:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d CONTAINS ? ALLOW FILTERING", list(1, 2, 3), "a"),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE b=? AND d CONTAINS KEY ?", list(1, 2, 3), 1);
1:         assertRows(execute("SELECT * FROM %s WHERE b=? AND d CONTAINS KEY ? ALLOW FILTERING", list(1, 2, 3), 1),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         // index lookup on c
1:         assertRows(execute("SELECT * FROM %s WHERE c=?", set(1, 2, 3)),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         // ordering of c should not matter
1:         assertRows(execute("SELECT * FROM %s WHERE c=?", set(2, 1, 3)),
1:                 row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:                 row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE c=?", set(-1)));
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND b=?", set(1, 2, 3), list(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b=? ALLOW FILTERING", set(1, 2, 3), list(1, 2, 3)),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND b CONTAINS ?", set(1, 2, 3), 1);
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND b CONTAINS ? ALLOW FILTERING", set(1, 2, 3), 1),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d = ?", set(1, 2, 3), map(1, "a"));
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d = ? ALLOW FILTERING", set(1, 2, 3), map(1, "a")),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d CONTAINS ?", set(1, 2, 3), "a");
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d CONTAINS ? ALLOW FILTERING", set(1, 2, 3), "a"),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE c=? AND d CONTAINS KEY ?", set(1, 2, 3), 1);
1:         assertRows(execute("SELECT * FROM %s WHERE c=? AND d CONTAINS KEY ? ALLOW FILTERING", set(1, 2, 3), 1),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         // index lookup on d
1:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(1, "a")),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(2, "b")),
1:             row(1, list(1, 2, 3), set(4, 5, 6), map(2, "b")),
1:             row(1, list(4, 5, 6), set(4, 5, 6), map(2, "b"))
1:         );
1: 
1:         assertEmpty(execute("SELECT * FROM %s WHERE d=?", map(3, "c")));
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND c=?", map(1, "a"), set(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b=? ALLOW FILTERING", map(1, "a"), list(1, 2, 3)),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND b CONTAINS ?", map(1, "a"), 3);
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? ALLOW FILTERING", map(1, "a"), 3),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertInvalidMessage("ALLOW FILTERING", "SELECT * FROM %s WHERE d=? AND b=? AND c=?", map(1, "a"), list(1, 2, 3), set(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b=? AND c=? ALLOW FILTERING", map(1, "a"), list(1, 2, 3), set(1, 2, 3)),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE d=? AND b CONTAINS ? AND c CONTAINS ? ALLOW FILTERING", map(1, "a"), 2, 2),
1:             row(0, list(1, 2, 3), set(1, 2, 3), map(1, "a"))
1:         );
1: 
1:         execute("DELETE d FROM %s WHERE a=? AND b=?", 0, list(1, 2, 3));
1:         assertRows(execute("SELECT * FROM %s WHERE d=?", map(1, "a")),
1:             row(0, list(4, 5, 6), set(1, 2, 3), map(1, "a"))
1:         );
1:     }
1: 
1:     @Test
1:     public void testUserDefinedTypes() throws Throwable
1:     {
1:         String myType = createType("CREATE TYPE %s (a set<int>, b tuple<list<int>>)");
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v frozen<" + myType + ">)");
1:         execute("INSERT INTO %s (k, v) VALUES (?, {a: ?, b: ?})", 0, set(1, 2, 3), tuple(list(1, 2, 3)));
1:         assertRows(execute("SELECT v.a, v.b FROM %s WHERE k=?", 0),
1:             row(set(1, 2, 3), tuple(list(1, 2, 3)))
1:         );
1:     }
1: 
1:     private static String clean(String classname)
1:     {
1:         return StringUtils.remove(classname, "org.apache.cassandra.db.marshal.");
1:     }
1: 
1:     @Test
1:     public void testToString()
1:     {
1:         // set<frozen<list<int>>>
1:         SetType t = SetType.getInstance(ListType.getInstance(Int32Type.instance, false), true);
1:         assertEquals("SetType(FrozenType(ListType(Int32Type)))", clean(t.toString()));
1:         assertEquals("SetType(ListType(Int32Type))", clean(t.toString(true)));
1: 
1:         // frozen<set<list<int>>>
1:         t = SetType.getInstance(ListType.getInstance(Int32Type.instance, false), false);
1:         assertEquals("FrozenType(SetType(ListType(Int32Type)))", clean(t.toString()));
1:         assertEquals("SetType(ListType(Int32Type))", clean(t.toString(true)));
1: 
1:         // map<frozen<list<int>>, int>
1:         MapType m = MapType.getInstance(ListType.getInstance(Int32Type.instance, false), Int32Type.instance, true);
1:         assertEquals("MapType(FrozenType(ListType(Int32Type)),Int32Type)", clean(m.toString()));
1:         assertEquals("MapType(ListType(Int32Type),Int32Type)", clean(m.toString(true)));
1: 
1:         // frozen<map<list<int>, int>>
1:         m = MapType.getInstance(ListType.getInstance(Int32Type.instance, false), Int32Type.instance, false);
1:         assertEquals("FrozenType(MapType(ListType(Int32Type),Int32Type))", clean(m.toString()));
1:         assertEquals("MapType(ListType(Int32Type),Int32Type)", clean(m.toString(true)));
1: 
1:         // tuple<set<int>>
1:         List<AbstractType<?>> types = new ArrayList<>();
1:         types.add(SetType.getInstance(Int32Type.instance, true));
1:         TupleType tuple = new TupleType(types);
1:         assertEquals("TupleType(SetType(Int32Type))", clean(tuple.toString()));
1:     }
1: }
============================================================================