1:340df43: /*
1:340df43:  * Licensed to the Apache Software Foundation (ASF) under one
1:340df43:  * or more contributor license agreements.  See the NOTICE file
1:340df43:  * distributed with this work for additional information
1:340df43:  * regarding copyright ownership.  The ASF licenses this file
1:340df43:  * to you under the Apache License, Version 2.0 (the
1:340df43:  * "License"); you may not use this file except in compliance
1:340df43:  * with the License.  You may obtain a copy of the License at
1:340df43:  *
1:340df43:  *     http://www.apache.org/licenses/LICENSE-2.0
1:340df43:  *
1:340df43:  * Unless required by applicable law or agreed to in writing, software
1:340df43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:340df43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:340df43:  * See the License for the specific language governing permissions and
1:340df43:  * limitations under the License.
1:340df43:  */
1:340df43: package org.apache.cassandra.schema;
1:340df43: 
1:340df43: import java.util.Iterator;
1:340df43: import java.util.function.Predicate;
1:340df43: import java.util.stream.Stream;
1:340df43: 
1:340df43: import com.google.common.collect.ImmutableMap;
1:340df43: import com.google.common.collect.MapDifference;
1:340df43: import com.google.common.collect.Maps;
1:340df43: 
1:340df43: public final class Keyspaces implements Iterable<KeyspaceMetadata>
1:340df43: {
1:340df43:     private final ImmutableMap<String, KeyspaceMetadata> keyspaces;
1:340df43: 
1:340df43:     private Keyspaces(Builder builder)
1:340df43:     {
1:340df43:         keyspaces = builder.keyspaces.build();
1:340df43:     }
1:340df43: 
1:340df43:     public static Builder builder()
1:340df43:     {
1:340df43:         return new Builder();
1:340df43:     }
1:340df43: 
1:340df43:     public static Keyspaces none()
1:340df43:     {
1:340df43:         return builder().build();
1:340df43:     }
1:340df43: 
1:340df43:     public static Keyspaces of(KeyspaceMetadata... keyspaces)
1:340df43:     {
1:340df43:         return builder().add(keyspaces).build();
1:340df43:     }
1:340df43: 
1:340df43:     public Iterator<KeyspaceMetadata> iterator()
1:340df43:     {
1:340df43:         return keyspaces.values().iterator();
1:340df43:     }
1:340df43: 
1:340df43:     public Stream<KeyspaceMetadata> stream()
1:340df43:     {
1:340df43:         return keyspaces.values().stream();
1:340df43:     }
1:340df43: 
1:340df43:     public Keyspaces filter(Predicate<KeyspaceMetadata> predicate)
1:340df43:     {
1:340df43:         Builder builder = builder();
1:340df43:         stream().filter(predicate).forEach(builder::add);
1:340df43:         return builder.build();
1:340df43:     }
1:340df43: 
1:340df43:     MapDifference<String, KeyspaceMetadata> diff(Keyspaces other)
1:340df43:     {
1:340df43:         return Maps.difference(keyspaces, other.keyspaces);
1:340df43:     }
1:340df43: 
1:340df43:     @Override
1:340df43:     public boolean equals(Object o)
1:340df43:     {
1:340df43:         return this == o || (o instanceof Keyspaces && keyspaces.equals(((Keyspaces) o).keyspaces));
1:340df43:     }
1:340df43: 
1:340df43:     @Override
1:340df43:     public int hashCode()
1:340df43:     {
1:340df43:         return keyspaces.hashCode();
1:340df43:     }
1:340df43: 
1:340df43:     @Override
1:340df43:     public String toString()
1:340df43:     {
1:340df43:         return keyspaces.values().toString();
1:340df43:     }
1:340df43: 
1:340df43:     public static final class Builder
1:340df43:     {
1:340df43:         private final ImmutableMap.Builder<String, KeyspaceMetadata> keyspaces = new ImmutableMap.Builder<>();
1:340df43: 
1:340df43:         private Builder()
1:340df43:         {
1:340df43:         }
1:340df43: 
1:340df43:         public Keyspaces build()
1:340df43:         {
1:340df43:             return new Keyspaces(this);
1:340df43:         }
1:340df43: 
1:340df43:         public Builder add(KeyspaceMetadata keyspace)
1:340df43:         {
1:340df43:             keyspaces.put(keyspace.name, keyspace);
1:340df43:             return this;
1:340df43:         }
1:340df43: 
1:340df43:         public Builder add(KeyspaceMetadata... keyspaces)
1:340df43:         {
1:340df43:             for (KeyspaceMetadata keyspace : keyspaces)
1:340df43:                 add(keyspace);
1:340df43:             return this;
1:340df43:         }
1:340df43: 
1:340df43:         public Builder add(Iterable<KeyspaceMetadata> keyspaces)
1:340df43:         {
1:340df43:             keyspaces.forEach(this::add);
1:340df43:             return this;
1:340df43:         }
1:340df43:     }
1:340df43: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.util.Iterator;
1: import java.util.function.Predicate;
1: import java.util.stream.Stream;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.MapDifference;
1: import com.google.common.collect.Maps;
1: 
1: public final class Keyspaces implements Iterable<KeyspaceMetadata>
1: {
1:     private final ImmutableMap<String, KeyspaceMetadata> keyspaces;
1: 
1:     private Keyspaces(Builder builder)
1:     {
1:         keyspaces = builder.keyspaces.build();
1:     }
1: 
1:     public static Builder builder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public static Keyspaces none()
1:     {
1:         return builder().build();
1:     }
1: 
1:     public static Keyspaces of(KeyspaceMetadata... keyspaces)
1:     {
1:         return builder().add(keyspaces).build();
1:     }
1: 
1:     public Iterator<KeyspaceMetadata> iterator()
1:     {
1:         return keyspaces.values().iterator();
1:     }
1: 
1:     public Stream<KeyspaceMetadata> stream()
1:     {
1:         return keyspaces.values().stream();
1:     }
1: 
1:     public Keyspaces filter(Predicate<KeyspaceMetadata> predicate)
1:     {
1:         Builder builder = builder();
1:         stream().filter(predicate).forEach(builder::add);
1:         return builder.build();
1:     }
1: 
1:     MapDifference<String, KeyspaceMetadata> diff(Keyspaces other)
1:     {
1:         return Maps.difference(keyspaces, other.keyspaces);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         return this == o || (o instanceof Keyspaces && keyspaces.equals(((Keyspaces) o).keyspaces));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return keyspaces.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return keyspaces.values().toString();
1:     }
1: 
1:     public static final class Builder
1:     {
1:         private final ImmutableMap.Builder<String, KeyspaceMetadata> keyspaces = new ImmutableMap.Builder<>();
1: 
1:         private Builder()
1:         {
1:         }
1: 
1:         public Keyspaces build()
1:         {
1:             return new Keyspaces(this);
1:         }
1: 
1:         public Builder add(KeyspaceMetadata keyspace)
1:         {
1:             keyspaces.put(keyspace.name, keyspace);
1:             return this;
1:         }
1: 
1:         public Builder add(KeyspaceMetadata... keyspaces)
1:         {
1:             for (KeyspaceMetadata keyspace : keyspaces)
1:                 add(keyspace);
1:             return this;
1:         }
1: 
1:         public Builder add(Iterable<KeyspaceMetadata> keyspaces)
1:         {
1:             keyspaces.forEach(this::add);
1:             return this;
1:         }
1:     }
1: }
============================================================================