1:18f0234: /*
1:18f0234:  * Licensed to the Apache Software Foundation (ASF) under one
1:18f0234:  * or more contributor license agreements.  See the NOTICE file
1:18f0234:  * distributed with this work for additional information
1:18f0234:  * regarding copyright ownership.  The ASF licenses this file
1:18f0234:  * to you under the Apache License, Version 2.0 (the
1:18f0234:  * "License"); you may not use this file except in compliance
1:18f0234:  * with the License.  You may obtain a copy of the License at
1:18f0234:  *
1:18f0234:  *     http://www.apache.org/licenses/LICENSE-2.0
1:18f0234:  *
1:18f0234:  * Unless required by applicable law or agreed to in writing, software
1:18f0234:  * distributed under the License is distributed on an "AS IS" BASIS,
1:18f0234:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:18f0234:  * See the License for the specific language governing permissions and
1:18f0234:  * limitations under the License.
1:18f0234:  */
1:18f0234: package org.apache.cassandra.utils;
1:18f0234: 
1:18f0234: import java.util.Arrays;
1:18f0234: 
1:18f0234: /**
1:18f0234:  * Simple class for constructing an EsimtatedHistogram from a set of predetermined values
1:18f0234:  */
1:18f0234: public class HistogramBuilder
1:18f0234: {
1:18f0234: 
1:0f5e780:     public static final long[] EMPTY_LONG_ARRAY = new long[]{};
1:0f5e780:     public static final long[] ZERO = new long[]{ 0 };
1:0f5e780: 
1:18f0234:     public HistogramBuilder() {}
1:18f0234:     public HistogramBuilder(long[] values)
1:18f0234:     {
1:18f0234:         for (long value : values)
1:18f0234:         {
1:18f0234:             add(value);
1:18f0234:         }
1:18f0234:     }
1:18f0234: 
1:18f0234:     private long[] values = new long[10];
1:18f0234:     int count = 0;
1:18f0234: 
1:18f0234:     public void add(long value)
1:18f0234:     {
1:18f0234:         if (count == values.length)
1:18f0234:             values = Arrays.copyOf(values, values.length << 1);
1:18f0234:         values[count++] = value;
1:18f0234:     }
1:18f0234: 
1:18f0234:     /**
1:18f0234:      * See {@link #buildWithStdevRangesAroundMean(int)}
1:18f0234:      * @return buildWithStdevRangesAroundMean(3)
1:18f0234:      */
1:18f0234:     public EstimatedHistogram buildWithStdevRangesAroundMean()
1:18f0234:     {
1:18f0234:         return buildWithStdevRangesAroundMean(3);
1:18f0234:     }
1:18f0234: 
1:18f0234:     /**
1:18f0234:      * Calculate the min, mean, max and standard deviation of the items in the builder, and
1:18f0234:      * generate an EstimatedHistogram with upto <code>maxdev</code> stdev size ranges  either
1:18f0234:      * side of the mean, until min/max are hit; if either min/max are not reached a further range is
1:18f0234:      * inserted at the relevant ends. e.g., with a <code>maxdevs</code> of 3, there may be <i>up to</i> 8 ranges
1:18f0234:      * (between 9 boundaries, the middle being the mean); the middle 6 will have the same size (stdev)
1:18f0234:      * with the outermost two stretching out to min and max.
1:18f0234:      *
1:18f0234:      * @param maxdevs
1:18f0234:      * @return
1:18f0234:      */
1:18f0234:     public EstimatedHistogram buildWithStdevRangesAroundMean(int maxdevs)
1:18f0234:     {
1:18f0234:         if (maxdevs < 0)
1:18f0234:             throw new IllegalArgumentException("maxdevs must be greater than or equal to zero");
1:18f0234: 
1:18f0234:         final int count = this.count;
1:18f0234:         final long[] values = this.values;
1:18f0234: 
1:18f0234:         if (count == 0)
1:0f5e780:             return new EstimatedHistogram(EMPTY_LONG_ARRAY, ZERO);
1:18f0234: 
1:18f0234:         long min = Long.MAX_VALUE, max = Long.MIN_VALUE;
1:18f0234:         double sum = 0, sumsq = 0;
1:18f0234:         for (int i = 0 ; i < count ; i++)
1:18f0234:         {
1:18f0234:             final long value = values[i];
1:18f0234:             sum += value;
1:18f0234:             sumsq += value * value;
1:18f0234:             if (value < min)
1:18f0234:                 min = value;
1:18f0234:             if (value > max)
1:18f0234:                 max = value;
1:18f0234:         }
1:18f0234: 
1:1fab7b7:         final long mean = Math.round(sum / count);
1:18f0234:         final double stdev =
1:18f0234:                 Math.sqrt((sumsq / count) - (mean * (double) mean));
1:18f0234: 
1:18f0234:         // build the ranges either side of the mean
1:18f0234:         final long[] lowhalf = buildRange(mean, min, true, stdev, maxdevs);
1:18f0234:         final long[] highhalf = buildRange(mean, max, false, stdev, maxdevs);
1:18f0234: 
1:18f0234:         // combine the ranges
1:18f0234:         final long[] ranges = new long[lowhalf.length + highhalf.length + 1];
1:18f0234:         System.arraycopy(lowhalf, 0, ranges, 0, lowhalf.length);
1:18f0234:         ranges[lowhalf.length] = mean;
1:18f0234:         System.arraycopy(highhalf, 0, ranges, lowhalf.length + 1, highhalf.length);
1:18f0234: 
1:18f0234:         final EstimatedHistogram hist = new EstimatedHistogram(ranges, new long[ranges.length + 1]);
1:18f0234:         for (int i = 0 ; i < count ; i++)
1:18f0234:             hist.add(values[i]);
1:18f0234:         return hist;
1:18f0234:     }
1:18f0234: 
1:18f0234:     private static long[] buildRange(long mean, long minormax, boolean ismin, double stdev, int maxdevs)
1:18f0234:     {
1:18f0234:         if (minormax == mean)
1:18f0234:             // minormax == mean we have no range to produce, but given the exclusive starts
1:18f0234:             // that begin at zero by default (or -Inf) in EstimatedHistogram we have to generate a min range
1:18f0234:             // to indicate where we start from
1:0f5e780:             return ismin ? new long[] { mean - 1 } : EMPTY_LONG_ARRAY;
1:18f0234: 
1:18f0234:         if (stdev < 1)
1:18f0234:         {
1:18f0234:             // deal with stdevs too small to generate sensible ranges
1:18f0234:             return ismin ? new long[] { minormax - 1, mean - 1 } :
1:18f0234:                            new long[] { minormax };
1:18f0234:         }
1:18f0234: 
1:18f0234:         long larger, smaller;
1:18f0234:         if (ismin) { larger = mean;     smaller = minormax; }
1:18f0234:         else       { larger = minormax; smaller = mean;     }
1:18f0234: 
1:18f0234:         double stdevsTo = (larger - smaller) / stdev;
1:18f0234:         if (stdevsTo > 0 && stdevsTo < 1)
1:18f0234:             // always round up if there's just one non-empty range
1:18f0234:             stdevsTo = 1;
1:18f0234:         else
1:18f0234:             // otherwise round to the nearest half stdev, to avoid tiny ranges at the start/end
1:18f0234:             stdevsTo = Math.round(stdevsTo);
1:18f0234: 
1:18f0234:         // limit to 4 stdev ranges - last range will contain everything to boundary
1:18f0234:         final int len = Math.min(maxdevs + 1, (int) stdevsTo);
1:18f0234:         final long[] range = new long[len];
1:18f0234:         long next = ismin ? minormax - 1 : minormax;
1:18f0234:         for (int i = 0 ; i < range.length ; i++)
1:18f0234:         {
1:18f0234:             long delta = (range.length - (i + 1)) * (long) stdev;
1:18f0234:             if (ismin)
1:18f0234:             {
1:18f0234:                 range[i] = next;
1:18f0234:                 next = mean - delta;
1:18f0234:             }
1:18f0234:             else
1:18f0234:             {
1:18f0234:                 range[len - 1 - i] = next;
1:18f0234:                 next = mean + delta;
1:18f0234:             }
1:18f0234:         }
1:18f0234:         return range;
1:18f0234:     }
1:18f0234: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:     public static final long[] EMPTY_LONG_ARRAY = new long[]{};
1:     public static final long[] ZERO = new long[]{ 0 };
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new EstimatedHistogram(EMPTY_LONG_ARRAY, ZERO);
/////////////////////////////////////////////////////////////////////////
1:             return ismin ? new long[] { mean - 1 } : EMPTY_LONG_ARRAY;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1fab7b7
/////////////////////////////////////////////////////////////////////////
1:         final long mean = Math.round(sum / count);
author:Benedict
-------------------------------------------------------------------------------
commit:18f0234
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Arrays;
1: 
1: /**
1:  * Simple class for constructing an EsimtatedHistogram from a set of predetermined values
1:  */
1: public class HistogramBuilder
1: {
1: 
1:     public HistogramBuilder() {}
1:     public HistogramBuilder(long[] values)
1:     {
1:         for (long value : values)
1:         {
1:             add(value);
1:         }
1:     }
1: 
1:     private long[] values = new long[10];
1:     int count = 0;
1: 
1:     public void add(long value)
1:     {
1:         if (count == values.length)
1:             values = Arrays.copyOf(values, values.length << 1);
1:         values[count++] = value;
1:     }
1: 
1:     /**
1:      * See {@link #buildWithStdevRangesAroundMean(int)}
1:      * @return buildWithStdevRangesAroundMean(3)
1:      */
1:     public EstimatedHistogram buildWithStdevRangesAroundMean()
1:     {
1:         return buildWithStdevRangesAroundMean(3);
1:     }
1: 
1:     /**
1:      * Calculate the min, mean, max and standard deviation of the items in the builder, and
1:      * generate an EstimatedHistogram with upto <code>maxdev</code> stdev size ranges  either
1:      * side of the mean, until min/max are hit; if either min/max are not reached a further range is
1:      * inserted at the relevant ends. e.g., with a <code>maxdevs</code> of 3, there may be <i>up to</i> 8 ranges
1:      * (between 9 boundaries, the middle being the mean); the middle 6 will have the same size (stdev)
1:      * with the outermost two stretching out to min and max.
1:      *
1:      * @param maxdevs
1:      * @return
1:      */
1:     public EstimatedHistogram buildWithStdevRangesAroundMean(int maxdevs)
1:     {
1:         if (maxdevs < 0)
1:             throw new IllegalArgumentException("maxdevs must be greater than or equal to zero");
1: 
1:         final int count = this.count;
1:         final long[] values = this.values;
1: 
1:         if (count == 0)
0:             return new EstimatedHistogram(new long[] { }, new long[] { 0 });
1: 
1:         long min = Long.MAX_VALUE, max = Long.MIN_VALUE;
1:         double sum = 0, sumsq = 0;
1:         for (int i = 0 ; i < count ; i++)
1:         {
1:             final long value = values[i];
1:             sum += value;
1:             sumsq += value * value;
1:             if (value < min)
1:                 min = value;
1:             if (value > max)
1:                 max = value;
1:         }
1: 
0:         final long mean = (long)Math.round(sum / count);
1:         final double stdev =
1:                 Math.sqrt((sumsq / count) - (mean * (double) mean));
1: 
1:         // build the ranges either side of the mean
1:         final long[] lowhalf = buildRange(mean, min, true, stdev, maxdevs);
1:         final long[] highhalf = buildRange(mean, max, false, stdev, maxdevs);
1: 
1:         // combine the ranges
1:         final long[] ranges = new long[lowhalf.length + highhalf.length + 1];
1:         System.arraycopy(lowhalf, 0, ranges, 0, lowhalf.length);
1:         ranges[lowhalf.length] = mean;
1:         System.arraycopy(highhalf, 0, ranges, lowhalf.length + 1, highhalf.length);
1: 
1:         final EstimatedHistogram hist = new EstimatedHistogram(ranges, new long[ranges.length + 1]);
1:         for (int i = 0 ; i < count ; i++)
1:             hist.add(values[i]);
1:         return hist;
1:     }
1: 
1:     private static long[] buildRange(long mean, long minormax, boolean ismin, double stdev, int maxdevs)
1:     {
1:         if (minormax == mean)
1:             // minormax == mean we have no range to produce, but given the exclusive starts
1:             // that begin at zero by default (or -Inf) in EstimatedHistogram we have to generate a min range
1:             // to indicate where we start from
0:             return ismin ? new long[] { mean - 1 } : new long[0];
1: 
1:         if (stdev < 1)
1:         {
1:             // deal with stdevs too small to generate sensible ranges
1:             return ismin ? new long[] { minormax - 1, mean - 1 } :
1:                            new long[] { minormax };
1:         }
1: 
1:         long larger, smaller;
1:         if (ismin) { larger = mean;     smaller = minormax; }
1:         else       { larger = minormax; smaller = mean;     }
1: 
1:         double stdevsTo = (larger - smaller) / stdev;
1:         if (stdevsTo > 0 && stdevsTo < 1)
1:             // always round up if there's just one non-empty range
1:             stdevsTo = 1;
1:         else
1:             // otherwise round to the nearest half stdev, to avoid tiny ranges at the start/end
1:             stdevsTo = Math.round(stdevsTo);
1: 
1:         // limit to 4 stdev ranges - last range will contain everything to boundary
1:         final int len = Math.min(maxdevs + 1, (int) stdevsTo);
1:         final long[] range = new long[len];
1:         long next = ismin ? minormax - 1 : minormax;
1:         for (int i = 0 ; i < range.length ; i++)
1:         {
1:             long delta = (range.length - (i + 1)) * (long) stdev;
1:             if (ismin)
1:             {
1:                 range[i] = next;
1:                 next = mean - delta;
1:             }
1:             else
1:             {
1:                 range[len - 1 - i] = next;
1:                 next = mean + delta;
1:             }
1:         }
1:         return range;
1:     }
1: }
============================================================================