1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
1:e31e216: package org.apache.cassandra.db.commitlog;
1:e31e216: 
1:e31e216: import java.io.IOException;
1:e31e216: import java.util.Comparator;
1:e31e216: 
1:e31e216: import org.apache.cassandra.db.TypeSizes;
1:e31e216: import org.apache.cassandra.io.ISerializer;
1:e31e216: import org.apache.cassandra.io.util.DataInputPlus;
1:e31e216: import org.apache.cassandra.io.util.DataOutputPlus;
1:e31e216: 
1:e31e216: /**
1:e31e216:  * Contains a segment id and a position for CommitLogSegment identification.
1:e31e216:  * Used for both replay and general CommitLog file reading.
1:e31e216:  */
1:e31e216: public class CommitLogPosition implements Comparable<CommitLogPosition>
1:e31e216: {
1:e31e216:     public static final CommitLogPositionSerializer serializer = new CommitLogPositionSerializer();
1:e31e216: 
1:e31e216:     // NONE is used for SSTables that are streamed from other nodes and thus have no relationship
1:e31e216:     // with our local commitlog. The values satisfy the criteria that
1:e31e216:     //  - no real commitlog segment will have the given id
1:e31e216:     //  - it will sort before any real CommitLogPosition, so it will be effectively ignored by getCommitLogPosition
1:e31e216:     public static final CommitLogPosition NONE = new CommitLogPosition(-1, 0);
1:e31e216: 
1:e31e216:     public final long segmentId;
1:e31e216:     public final int position;
1:e31e216: 
1:e31e216:     public static final Comparator<CommitLogPosition> comparator = new Comparator<CommitLogPosition>()
1:e31e216:     {
1:e31e216:         public int compare(CommitLogPosition o1, CommitLogPosition o2)
1:e31e216:         {
1:e31e216:             if (o1.segmentId != o2.segmentId)
1:e31e216:             	return Long.compare(o1.segmentId,  o2.segmentId);
1:e31e216: 
1:e31e216:             return Integer.compare(o1.position, o2.position);
1:e31e216:         }
1:e31e216:     };
1:e31e216: 
1:e31e216:     public CommitLogPosition(long segmentId, int position)
1:e31e216:     {
1:e31e216:         this.segmentId = segmentId;
1:e31e216:         assert position >= 0;
1:e31e216:         this.position = position;
1:e31e216:     }
1:e31e216: 
1:e31e216:     public int compareTo(CommitLogPosition other)
1:e31e216:     {
1:e31e216:         return comparator.compare(this, other);
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public boolean equals(Object o)
1:e31e216:     {
1:e31e216:         if (this == o) return true;
1:e31e216:         if (o == null || getClass() != o.getClass()) return false;
1:e31e216: 
1:e31e216:         CommitLogPosition that = (CommitLogPosition) o;
1:e31e216: 
1:e31e216:         if (position != that.position) return false;
1:e31e216:         return segmentId == that.segmentId;
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public int hashCode()
1:e31e216:     {
1:e31e216:         int result = (int) (segmentId ^ (segmentId >>> 32));
1:e31e216:         result = 31 * result + position;
1:e31e216:         return result;
1:e31e216:     }
1:e31e216: 
1:e31e216:     @Override
1:e31e216:     public String toString()
1:e31e216:     {
1:e31e216:         return "CommitLogPosition(" +
1:e31e216:                "segmentId=" + segmentId +
1:e31e216:                ", position=" + position +
1:e31e216:                ')';
1:e31e216:     }
1:e31e216: 
1:e31e216:     public CommitLogPosition clone()
1:e31e216:     {
1:e31e216:         return new CommitLogPosition(segmentId, position);
1:e31e216:     }
1:e31e216: 
1:e31e216: 
1:e31e216:     public static class CommitLogPositionSerializer implements ISerializer<CommitLogPosition>
1:e31e216:     {
1:e31e216:         public void serialize(CommitLogPosition clsp, DataOutputPlus out) throws IOException
1:e31e216:         {
1:e31e216:             out.writeLong(clsp.segmentId);
1:e31e216:             out.writeInt(clsp.position);
1:e31e216:         }
1:e31e216: 
1:e31e216:         public CommitLogPosition deserialize(DataInputPlus in) throws IOException
1:e31e216:         {
1:e31e216:             return new CommitLogPosition(in.readLong(), in.readInt());
1:e31e216:         }
1:e31e216: 
1:e31e216:         public long serializedSize(CommitLogPosition clsp)
1:e31e216:         {
1:e31e216:             return TypeSizes.sizeof(clsp.segmentId) + TypeSizes.sizeof(clsp.position);
1:e31e216:         }
1:e31e216:     }
1:e31e216: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.util.Comparator;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.ISerializer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * Contains a segment id and a position for CommitLogSegment identification.
1:  * Used for both replay and general CommitLog file reading.
1:  */
1: public class CommitLogPosition implements Comparable<CommitLogPosition>
1: {
1:     public static final CommitLogPositionSerializer serializer = new CommitLogPositionSerializer();
1: 
1:     // NONE is used for SSTables that are streamed from other nodes and thus have no relationship
1:     // with our local commitlog. The values satisfy the criteria that
1:     //  - no real commitlog segment will have the given id
1:     //  - it will sort before any real CommitLogPosition, so it will be effectively ignored by getCommitLogPosition
1:     public static final CommitLogPosition NONE = new CommitLogPosition(-1, 0);
1: 
1:     public final long segmentId;
1:     public final int position;
1: 
1:     public static final Comparator<CommitLogPosition> comparator = new Comparator<CommitLogPosition>()
1:     {
1:         public int compare(CommitLogPosition o1, CommitLogPosition o2)
1:         {
1:             if (o1.segmentId != o2.segmentId)
1:             	return Long.compare(o1.segmentId,  o2.segmentId);
1: 
1:             return Integer.compare(o1.position, o2.position);
1:         }
1:     };
1: 
1:     public CommitLogPosition(long segmentId, int position)
1:     {
1:         this.segmentId = segmentId;
1:         assert position >= 0;
1:         this.position = position;
1:     }
1: 
1:     public int compareTo(CommitLogPosition other)
1:     {
1:         return comparator.compare(this, other);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         CommitLogPosition that = (CommitLogPosition) o;
1: 
1:         if (position != that.position) return false;
1:         return segmentId == that.segmentId;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         int result = (int) (segmentId ^ (segmentId >>> 32));
1:         result = 31 * result + position;
1:         return result;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "CommitLogPosition(" +
1:                "segmentId=" + segmentId +
1:                ", position=" + position +
1:                ')';
1:     }
1: 
1:     public CommitLogPosition clone()
1:     {
1:         return new CommitLogPosition(segmentId, position);
1:     }
1: 
1: 
1:     public static class CommitLogPositionSerializer implements ISerializer<CommitLogPosition>
1:     {
1:         public void serialize(CommitLogPosition clsp, DataOutputPlus out) throws IOException
1:         {
1:             out.writeLong(clsp.segmentId);
1:             out.writeInt(clsp.position);
1:         }
1: 
1:         public CommitLogPosition deserialize(DataInputPlus in) throws IOException
1:         {
1:             return new CommitLogPosition(in.readLong(), in.readInt());
1:         }
1: 
1:         public long serializedSize(CommitLogPosition clsp)
1:         {
1:             return TypeSizes.sizeof(clsp.segmentId) + TypeSizes.sizeof(clsp.position);
1:         }
1:     }
1: }
============================================================================