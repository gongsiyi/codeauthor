1:6c867f0: /*
1:6c867f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:6c867f0:  * or more contributor license agreements.  See the NOTICE file
1:6c867f0:  * distributed with this work for additional information
1:6c867f0:  * regarding copyright ownership.  The ASF licenses this file
1:6c867f0:  * to you under the Apache License, Version 2.0 (the
1:6c867f0:  * "License"); you may not use this file except in compliance
1:6c867f0:  * with the License.  You may obtain a copy of the License at
1:6c867f0:  *
1:6c867f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6c867f0:  *
1:6c867f0:  * Unless required by applicable law or agreed to in writing, software
1:6c867f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c867f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c867f0:  * See the License for the specific language governing permissions and
1:6c867f0:  * limitations under the License.
1:6c867f0:  */
1:6c867f0: package org.apache.cassandra.db.compaction;
2:6c867f0: 
1:6c867f0: import java.nio.ByteBuffer;
1:6c867f0: import java.util.ArrayList;
1:6c867f0: import java.util.HashMap;
1:6c867f0: import java.util.List;
1:6c867f0: import java.util.Map;
1:6c867f0: import java.util.concurrent.TimeUnit;
1:6c867f0: 
1:6c867f0: import com.google.common.collect.HashMultimap;
2:6c867f0: import com.google.common.collect.Iterables;
1:6c867f0: 
1:6c867f0: import org.junit.BeforeClass;
1:6c867f0: import org.junit.Test;
1:6c867f0: import static org.junit.Assert.assertEquals;
1:6c867f0: import static org.junit.Assert.assertNotNull;
1:6c867f0: import static org.junit.Assert.assertNull;
1:6c867f0: import static org.junit.Assert.assertTrue;
1:6c867f0: import static org.junit.Assert.fail;
1:6c867f0: 
1:6c867f0: import org.apache.cassandra.SchemaLoader;
1:6c867f0: import org.apache.cassandra.Util;
1:6c867f0: import org.apache.cassandra.db.ColumnFamilyStore;
1:6c867f0: import org.apache.cassandra.db.DecoratedKey;
1:6c867f0: import org.apache.cassandra.db.Keyspace;
1:6c867f0: import org.apache.cassandra.db.RowUpdateBuilder;
1:6c867f0: import org.apache.cassandra.exceptions.ConfigurationException;
1:6c867f0: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:6c867f0: import org.apache.cassandra.schema.KeyspaceParams;
1:6c867f0: import org.apache.cassandra.utils.Pair;
1:6c867f0: 
1:6c867f0: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getWindowBoundsInMillis;
1:6c867f0: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.newestBucket;
1:6c867f0: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.validateOptions;
1:6c867f0: 
1:6c867f0: public class TimeWindowCompactionStrategyTest extends SchemaLoader
1:6c867f0: {
1:6c867f0:     public static final String KEYSPACE1 = "Keyspace1";
1:6c867f0:     private static final String CF_STANDARD1 = "Standard1";
1:6c867f0: 
1:6c867f0:     @BeforeClass
1:6c867f0:     public static void defineSchema() throws ConfigurationException
1:6c867f0:     {
1:6c867f0:         SchemaLoader.prepareServer();
1:6c867f0:         SchemaLoader.createKeyspace(KEYSPACE1,
1:6c867f0:                                     KeyspaceParams.simple(1),
1:6c867f0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:6c867f0:     }
1:6c867f0: 
1:6c867f0:     @Test
1:6c867f0:     public void testOptionsValidation() throws ConfigurationException
1:6c867f0:     {
1:6c867f0:         Map<String, String> options = new HashMap<>();
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "30");
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MINUTES");
1:6c867f0:         Map<String, String> unvalidated = validateOptions(options);
1:6c867f0:         assertTrue(unvalidated.isEmpty());
1:6c867f0: 
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "0");
1:6c867f0:             validateOptions(options);
1:6c867f0:             fail(String.format("%s == 0 should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
1:6c867f0:         }
1:6c867f0:         catch (ConfigurationException e) {}
1:6c867f0: 
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "-1337");
1:6c867f0:             validateOptions(options);
1:6c867f0:             fail(String.format("Negative %s should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
1:6c867f0:         }
1:6c867f0:         catch (ConfigurationException e)
1:6c867f0:         {
1:6c867f0:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "1");
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         try
1:6c867f0:         {
1:6c867f0:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MONTHS");
1:6c867f0:             validateOptions(options);
1:6c867f0:             fail(String.format("Invalid time units should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY));
1:6c867f0:         }
1:6c867f0:         catch (ConfigurationException e)
1:6c867f0:         {
1:6c867f0:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MINUTES");
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         options.put("bad_option", "1.0");
1:6c867f0:         unvalidated = validateOptions(options);
1:6c867f0:         assertTrue(unvalidated.containsKey("bad_option"));
1:6c867f0:     }
1:6c867f0: 
1:6c867f0: 
1:6c867f0:     @Test
1:6c867f0:     public void testTimeWindows()
1:6c867f0:     {
1:6c867f0:         Long tstamp1 = 1451001601000L; // 2015-12-25 @ 00:00:01, in milliseconds
1:6c867f0:         Long tstamp2 = 1451088001000L; // 2015-12-26 @ 00:00:01, in milliseconds
1:6c867f0:         Long lowHour = 1451001600000L; // 2015-12-25 @ 00:00:00, in milliseconds
1:6c867f0: 
1:6c867f0:         // A 1 hour window should round down to the beginning of the hour
1:6c867f0:         assertTrue(getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp1).left.compareTo(lowHour) == 0);
1:6c867f0: 
1:6c867f0:         // A 1 minute window should round down to the beginning of the hour
1:6c867f0:         assertTrue(getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1).left.compareTo(lowHour) == 0);
1:6c867f0: 
1:6c867f0:         // A 1 day window should round down to the beginning of the hour
1:6c867f0:         assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1).left.compareTo(lowHour) == 0 );
1:6c867f0: 
1:6c867f0:         // The 2 day window of 2015-12-25 + 2015-12-26 should round down to the beginning of 2015-12-25
1:6c867f0:         assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2).left.compareTo(lowHour) == 0);
1:6c867f0: 
1:6c867f0: 
1:6c867f0:         return;
1:6c867f0:     }
1:6c867f0: 
1:6c867f0:     @Test
1:6c867f0:     public void testPrepBucket()
1:6c867f0:     {
1:6c867f0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:6c867f0:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:6c867f0:         cfs.truncateBlocking();
1:6c867f0:         cfs.disableAutoCompaction();
1:6c867f0: 
1:6c867f0:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1:6c867f0:         Long tstamp = System.currentTimeMillis();
1:6c867f0:         Long tstamp2 =  tstamp - (2L * 3600L * 1000L);
1:6c867f0: 
1:6c867f0:         // create 5 sstables
1:6c867f0:         for (int r = 0; r < 3; r++)
1:6c867f0:         {
1:6c867f0:             DecoratedKey key = Util.dk(String.valueOf(r));
1:6c867f0:             new RowUpdateBuilder(cfs.metadata, r, key.getKey())
1:6c867f0:                 .clustering("column")
1:6c867f0:                 .add("val", value).build().applyUnsafe();
1:6c867f0: 
1:6c867f0:             cfs.forceBlockingFlush();
1:6c867f0:         }
1:6c867f0:         // Decrement the timestamp to simulate a timestamp in the past hour
1:6c867f0:         for (int r = 3; r < 5; r++)
1:6c867f0:         {
1:6c867f0:             // And add progressively more cells into each sstable
1:6c867f0:             DecoratedKey key = Util.dk(String.valueOf(r));
1:6c867f0:             new RowUpdateBuilder(cfs.metadata, r, key.getKey())
1:6c867f0:                 .clustering("column")
1:6c867f0:                 .add("val", value).build().applyUnsafe();
1:6c867f0:             cfs.forceBlockingFlush();
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         cfs.forceBlockingFlush();
1:6c867f0: 
1:6c867f0:         HashMultimap<Long, SSTableReader> buckets = HashMultimap.create();
1:6c867f0:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getLiveSSTables());
1:6c867f0: 
1:6c867f0:         // We'll put 3 sstables into the newest bucket
1:6c867f0:         for (int i = 0 ; i < 3; i++)
1:6c867f0:         {
1:6c867f0:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp );
1:6c867f0:             buckets.put(bounds.left, sstrs.get(i));
1:6c867f0:         }
1:27395e7:         List<SSTableReader> newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left );
1:6c867f0:         assertTrue("incoming bucket should not be accepted when it has below the min threshold SSTables", newBucket.isEmpty());
1:6c867f0: 
1:27395e7:         newBucket = newestBucket(buckets, 2, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
1:6c867f0:         assertTrue("incoming bucket should be accepted when it is larger than the min threshold SSTables", !newBucket.isEmpty());
1:6c867f0: 
1:6c867f0:         // And 2 into the second bucket (1 hour back)
1:6c867f0:         for (int i = 3 ; i < 5; i++)
1:6c867f0:         {
1:6c867f0:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp2 );
1:6c867f0:             buckets.put(bounds.left, sstrs.get(i));
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(0).getMinTimestamp(), sstrs.get(0).getMaxTimestamp());
1:6c867f0:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(1).getMinTimestamp(), sstrs.get(1).getMaxTimestamp());
1:6c867f0:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(2).getMinTimestamp(), sstrs.get(2).getMaxTimestamp());
1:6c867f0: 
1:6c867f0:         // Test trim
1:6c867f0:         int numSSTables = 40;
1:6c867f0:         for (int r = 5; r < numSSTables; r++)
1:6c867f0:         {
1:6c867f0:             DecoratedKey key = Util.dk(String.valueOf(r));
1:6c867f0:             for(int i = 0 ; i < r ; i++)
1:6c867f0:             {
1:6c867f0:                 new RowUpdateBuilder(cfs.metadata, tstamp + r, key.getKey())
1:6c867f0:                     .clustering("column")
1:6c867f0:                     .add("val", value).build().applyUnsafe();
1:6c867f0:             }
1:6c867f0:             cfs.forceBlockingFlush();
1:6c867f0:         }
1:6c867f0: 
1:6c867f0:         // Reset the buckets, overfill it now
1:6c867f0:         sstrs = new ArrayList<>(cfs.getLiveSSTables());
1:6c867f0:         for (int i = 0 ; i < 40; i++)
1:6c867f0:         {
1:6c867f0:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, sstrs.get(i).getMaxTimestamp());
1:6c867f0:             buckets.put(bounds.left, sstrs.get(i));
1:6c867f0:         }
1:6c867f0: 
1:27395e7:         newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
1:6c867f0:         assertEquals("new bucket should be trimmed to max threshold of 32", newBucket.size(),  32);
1:6c867f0:     }
1:6c867f0: 
1:6c867f0: 
1:6c867f0:     @Test
1:6c867f0:     public void testDropExpiredSSTables() throws InterruptedException
1:6c867f0:     {
1:6c867f0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:6c867f0:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:6c867f0:         cfs.truncateBlocking();
1:6c867f0:         cfs.disableAutoCompaction();
1:6c867f0: 
1:6c867f0:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1:6c867f0: 
1:6c867f0:         // create 2 sstables
1:6c867f0:         DecoratedKey key = Util.dk(String.valueOf("expired"));
1:6c867f0:         new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), 1, key.getKey())
1:6c867f0:             .clustering("column")
1:6c867f0:             .add("val", value).build().applyUnsafe();
1:6c867f0: 
1:6c867f0:         cfs.forceBlockingFlush();
1:6c867f0:         SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();
1:6c867f0:         Thread.sleep(10);
1:6c867f0: 
1:6c867f0:         key = Util.dk(String.valueOf("nonexpired"));
1:6c867f0:         new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey())
1:6c867f0:             .clustering("column")
1:6c867f0:             .add("val", value).build().applyUnsafe();
1:6c867f0: 
1:6c867f0:         cfs.forceBlockingFlush();
1:6c867f0:         assertEquals(cfs.getLiveSSTables().size(), 2);
1:6c867f0: 
1:6c867f0:         Map<String, String> options = new HashMap<>();
1:6c867f0: 
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "30");
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "SECONDS");
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, "MILLISECONDS");
1:6c867f0:         options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, "0");
1:6c867f0:         TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);
1:6c867f0:         for (SSTableReader sstable : cfs.getLiveSSTables())
1:6c867f0:             twcs.addSSTable(sstable);
1:6c867f0:         twcs.startup();
1:6c867f0:         assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));
1:6c867f0:         Thread.sleep(2000);
1:6c867f0:         AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));
1:6c867f0:         assertNotNull(t);
1:6c867f0:         assertEquals(1, Iterables.size(t.transaction.originals()));
1:6c867f0:         SSTableReader sstable = t.transaction.originals().iterator().next();
1:6c867f0:         assertEquals(sstable, expiredSSTable);
1:6c867f0:         t.transaction.abort();
1:6c867f0:     }
1:6c867f0: 
1:6c867f0: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:27395e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List<SSTableReader> newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left );
1:         newBucket = newestBucket(buckets, 2, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
/////////////////////////////////////////////////////////////////////////
1:         newBucket = newestBucket(buckets, 4, 32, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
author:Jeff Jirsa
-------------------------------------------------------------------------------
commit:6c867f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.collect.HashMultimap;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Iterables;
0: import com.google.common.collect.Lists;
1: 
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.Pair;
1: 
1: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.getWindowBoundsInMillis;
1: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.newestBucket;
1: import static org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy.validateOptions;
1: 
1: public class TimeWindowCompactionStrategyTest extends SchemaLoader
1: {
1:     public static final String KEYSPACE1 = "Keyspace1";
1:     private static final String CF_STANDARD1 = "Standard1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
1:                                     KeyspaceParams.simple(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:     }
1: 
1:     @Test
1:     public void testOptionsValidation() throws ConfigurationException
1:     {
1:         Map<String, String> options = new HashMap<>();
1:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "30");
1:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MINUTES");
1:         Map<String, String> unvalidated = validateOptions(options);
1:         assertTrue(unvalidated.isEmpty());
1: 
1:         try
1:         {
1:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "0");
1:             validateOptions(options);
1:             fail(String.format("%s == 0 should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
1:         }
1:         catch (ConfigurationException e) {}
1: 
1:         try
1:         {
1:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "-1337");
1:             validateOptions(options);
1:             fail(String.format("Negative %s should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY));
1:         }
1:         catch (ConfigurationException e)
1:         {
1:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "1");
1:         }
1: 
1:         try
1:         {
1:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MONTHS");
1:             validateOptions(options);
1:             fail(String.format("Invalid time units should be rejected", TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY));
1:         }
1:         catch (ConfigurationException e)
1:         {
1:             options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "MINUTES");
1:         }
1: 
1:         options.put("bad_option", "1.0");
1:         unvalidated = validateOptions(options);
1:         assertTrue(unvalidated.containsKey("bad_option"));
1:     }
1: 
1: 
1:     @Test
1:     public void testTimeWindows()
1:     {
1:         Long tstamp1 = 1451001601000L; // 2015-12-25 @ 00:00:01, in milliseconds
1:         Long tstamp2 = 1451088001000L; // 2015-12-26 @ 00:00:01, in milliseconds
1:         Long lowHour = 1451001600000L; // 2015-12-25 @ 00:00:00, in milliseconds
1: 
1:         // A 1 hour window should round down to the beginning of the hour
1:         assertTrue(getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp1).left.compareTo(lowHour) == 0);
1: 
1:         // A 1 minute window should round down to the beginning of the hour
1:         assertTrue(getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1).left.compareTo(lowHour) == 0);
1: 
1:         // A 1 day window should round down to the beginning of the hour
1:         assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1).left.compareTo(lowHour) == 0 );
1: 
1:         // The 2 day window of 2015-12-25 + 2015-12-26 should round down to the beginning of 2015-12-25
1:         assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2).left.compareTo(lowHour) == 0);
1: 
1: 
1:         return;
1:     }
1: 
1:     @Test
1:     public void testPrepBucket()
1:     {
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:         cfs.truncateBlocking();
1:         cfs.disableAutoCompaction();
1: 
1:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1:         Long tstamp = System.currentTimeMillis();
1:         Long tstamp2 =  tstamp - (2L * 3600L * 1000L);
1: 
1:         // create 5 sstables
1:         for (int r = 0; r < 3; r++)
1:         {
1:             DecoratedKey key = Util.dk(String.valueOf(r));
1:             new RowUpdateBuilder(cfs.metadata, r, key.getKey())
1:                 .clustering("column")
1:                 .add("val", value).build().applyUnsafe();
1: 
1:             cfs.forceBlockingFlush();
1:         }
1:         // Decrement the timestamp to simulate a timestamp in the past hour
1:         for (int r = 3; r < 5; r++)
1:         {
1:             // And add progressively more cells into each sstable
1:             DecoratedKey key = Util.dk(String.valueOf(r));
1:             new RowUpdateBuilder(cfs.metadata, r, key.getKey())
1:                 .clustering("column")
1:                 .add("val", value).build().applyUnsafe();
1:             cfs.forceBlockingFlush();
1:         }
1: 
1:         cfs.forceBlockingFlush();
1: 
1:         HashMultimap<Long, SSTableReader> buckets = HashMultimap.create();
1:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getLiveSSTables());
1: 
1:         // We'll put 3 sstables into the newest bucket
1:         for (int i = 0 ; i < 3; i++)
1:         {
1:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp );
1:             buckets.put(bounds.left, sstrs.get(i));
1:         }
0:         List<SSTableReader> newBucket = newestBucket(buckets, 4, 32, TimeUnit.HOURS, 1, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left );
1:         assertTrue("incoming bucket should not be accepted when it has below the min threshold SSTables", newBucket.isEmpty());
1: 
0:         newBucket = newestBucket(buckets, 2, 32, TimeUnit.HOURS, 1, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
1:         assertTrue("incoming bucket should be accepted when it is larger than the min threshold SSTables", !newBucket.isEmpty());
1: 
1:         // And 2 into the second bucket (1 hour back)
1:         for (int i = 3 ; i < 5; i++)
1:         {
1:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp2 );
1:             buckets.put(bounds.left, sstrs.get(i));
1:         }
1: 
1:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(0).getMinTimestamp(), sstrs.get(0).getMaxTimestamp());
1:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(1).getMinTimestamp(), sstrs.get(1).getMaxTimestamp());
1:         assertEquals("an sstable with a single value should have equal min/max timestamps", sstrs.get(2).getMinTimestamp(), sstrs.get(2).getMaxTimestamp());
1: 
1:         // Test trim
1:         int numSSTables = 40;
1:         for (int r = 5; r < numSSTables; r++)
1:         {
1:             DecoratedKey key = Util.dk(String.valueOf(r));
1:             for(int i = 0 ; i < r ; i++)
1:             {
1:                 new RowUpdateBuilder(cfs.metadata, tstamp + r, key.getKey())
1:                     .clustering("column")
1:                     .add("val", value).build().applyUnsafe();
1:             }
1:             cfs.forceBlockingFlush();
1:         }
1: 
1:         // Reset the buckets, overfill it now
1:         sstrs = new ArrayList<>(cfs.getLiveSSTables());
1:         for (int i = 0 ; i < 40; i++)
1:         {
1:             Pair<Long,Long> bounds = getWindowBoundsInMillis(TimeUnit.HOURS, 1, sstrs.get(i).getMaxTimestamp());
1:             buckets.put(bounds.left, sstrs.get(i));
1:         }
1: 
0:         newBucket = newestBucket(buckets, 4, 32, TimeUnit.DAYS, 1, new SizeTieredCompactionStrategyOptions(), getWindowBoundsInMillis(TimeUnit.HOURS, 1, System.currentTimeMillis()).left);
1:         assertEquals("new bucket should be trimmed to max threshold of 32", newBucket.size(),  32);
1:     }
1: 
1: 
1:     @Test
1:     public void testDropExpiredSSTables() throws InterruptedException
1:     {
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1);
1:         cfs.truncateBlocking();
1:         cfs.disableAutoCompaction();
1: 
1:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1: 
1:         // create 2 sstables
1:         DecoratedKey key = Util.dk(String.valueOf("expired"));
1:         new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), 1, key.getKey())
1:             .clustering("column")
1:             .add("val", value).build().applyUnsafe();
1: 
1:         cfs.forceBlockingFlush();
1:         SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next();
1:         Thread.sleep(10);
1: 
1:         key = Util.dk(String.valueOf("nonexpired"));
1:         new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey())
1:             .clustering("column")
1:             .add("val", value).build().applyUnsafe();
1: 
1:         cfs.forceBlockingFlush();
1:         assertEquals(cfs.getLiveSSTables().size(), 2);
1: 
1:         Map<String, String> options = new HashMap<>();
1: 
1:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_SIZE_KEY, "30");
1:         options.put(TimeWindowCompactionStrategyOptions.COMPACTION_WINDOW_UNIT_KEY, "SECONDS");
1:         options.put(TimeWindowCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, "MILLISECONDS");
1:         options.put(TimeWindowCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, "0");
1:         TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy(cfs, options);
1:         for (SSTableReader sstable : cfs.getLiveSSTables())
1:             twcs.addSSTable(sstable);
1:         twcs.startup();
1:         assertNull(twcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)));
1:         Thread.sleep(2000);
1:         AbstractCompactionTask t = twcs.getNextBackgroundTask((int) (System.currentTimeMillis()/1000));
1:         assertNotNull(t);
1:         assertEquals(1, Iterables.size(t.transaction.originals()));
1:         SSTableReader sstable = t.transaction.originals().iterator().next();
1:         assertEquals(sstable, expiredSSTable);
1:         t.transaction.abort();
1:     }
1: 
1: }
============================================================================