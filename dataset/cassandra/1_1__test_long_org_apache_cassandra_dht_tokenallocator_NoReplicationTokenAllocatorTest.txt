1:e2a0d75: /*
1:e2a0d75:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2a0d75:  * or more contributor license agreements.  See the NOTICE file
1:e2a0d75:  * distributed with this work for additional information
1:e2a0d75:  * regarding copyright ownership.  The ASF licenses this file
1:e2a0d75:  * to you under the Apache License, Version 2.0 (the
1:e2a0d75:  * "License"); you may not use this file except in compliance
1:e2a0d75:  * with the License.  You may obtain a copy of the License at
1:e2a0d75:  *
1:e2a0d75:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2a0d75:  *
1:e2a0d75:  * Unless required by applicable law or agreed to in writing, software
1:e2a0d75:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2a0d75:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2a0d75:  * See the License for the specific language governing permissions and
1:e2a0d75:  * limitations under the License.
1:e2a0d75:  */
1:e2a0d75: 
1:e2a0d75: package org.apache.cassandra.dht.tokenallocator;
1:e2a0d75: 
1:e2a0d75: import java.util.Collections;
1:e2a0d75: import java.util.List;
1:e2a0d75: import java.util.Map;
1:e2a0d75: import java.util.NavigableMap;
1:e2a0d75: import java.util.PriorityQueue;
1:e2a0d75: import java.util.Random;
1:e2a0d75: 
1:e2a0d75: import com.google.common.collect.Maps;
1:e2a0d75: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
1:e2a0d75: import org.junit.Test;
1:e2a0d75: 
1:e2a0d75: import junit.framework.Assert;
1:e2a0d75: import org.apache.cassandra.dht.IPartitioner;
1:e2a0d75: import org.apache.cassandra.dht.Murmur3Partitioner;
1:e2a0d75: import org.apache.cassandra.dht.RandomPartitioner;
1:e2a0d75: import org.apache.cassandra.dht.Token;
1:e2a0d75: 
1:e2a0d75: public class NoReplicationTokenAllocatorTest extends TokenAllocatorTestBase
1:e2a0d75: {
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testNewClusterWithMurmur3Partitioner()
1:e2a0d75:     {
1:e2a0d75:         testNewCluster(new Murmur3Partitioner());
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testNewClusterWithRandomPartitioner()
1:e2a0d75:     {
1:e2a0d75:         testNewCluster(new RandomPartitioner());
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void testNewCluster(IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         for (int perUnitCount = 1; perUnitCount <= MAX_VNODE_COUNT; perUnitCount *= 4)
1:e2a0d75:         {
1:e2a0d75:             testNewCluster(perUnitCount, fixedTokenCount, new NoReplicationStrategy(), partitioner);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public void testNewCluster(int perUnitCount, TokenCount tc, NoReplicationStrategy rs, IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         System.out.println("Testing new cluster, target " + perUnitCount + " vnodes, replication " + rs);
1:e2a0d75:         final int targetClusterSize = TARGET_CLUSTER_SIZE;
1:e2a0d75:         NavigableMap<Token, Unit> tokenMap = Maps.newTreeMap();
1:e2a0d75: 
1:e2a0d75:         NoReplicationTokenAllocator<Unit> t = new NoReplicationTokenAllocator<Unit>(tokenMap, rs, partitioner);
1:e2a0d75:         grow(t, targetClusterSize * 2 / 5, tc, perUnitCount, false);
1:e2a0d75:         grow(t, targetClusterSize, tc, perUnitCount, true);
1:e2a0d75:         System.out.println();
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testExistingClusterWithMurmur3Partitioner()
1:e2a0d75:     {
1:e2a0d75:         testExistingCluster(new Murmur3Partitioner());
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     @Test
1:e2a0d75:     public void testExistingClusterWithRandomPartitioner()
1:e2a0d75:     {
1:e2a0d75:         testExistingCluster(new RandomPartitioner());
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void testExistingCluster(IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         for (int perUnitCount = 1; perUnitCount <= MAX_VNODE_COUNT; perUnitCount *= 4)
1:e2a0d75:         {
1:e2a0d75:             testExistingCluster(perUnitCount, fixedTokenCount, new NoReplicationStrategy(), partitioner);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public NoReplicationTokenAllocator<Unit> randomWithTokenAllocator(NavigableMap<Token, Unit> map, NoReplicationStrategy rs,
1:e2a0d75:                                                                       int unitCount, TokenCount tc, int perUnitCount,
1:e2a0d75:                                                                       IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         super.random(map, rs, unitCount, tc, perUnitCount, partitioner);
1:e2a0d75:         NoReplicationTokenAllocator<Unit> t = new NoReplicationTokenAllocator<Unit>(map, rs, partitioner);
1:e2a0d75:         t.createTokenInfos();
1:e2a0d75:         return t;
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     public void testExistingCluster(int perUnitCount, TokenCount tc, NoReplicationStrategy rs, IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         System.out.println("Testing existing cluster, target " + perUnitCount + " vnodes, replication " + rs);
1:e2a0d75:         final int targetClusterSize = TARGET_CLUSTER_SIZE;
1:e2a0d75:         NavigableMap<Token, Unit> tokenMap = Maps.newTreeMap();
1:e2a0d75:         NoReplicationTokenAllocator<Unit> t = randomWithTokenAllocator(tokenMap, rs, targetClusterSize / 2, tc, perUnitCount, partitioner);
1:e2a0d75:         updateSummaryBeforeGrow(t);
1:e2a0d75: 
1:e2a0d75:         grow(t, targetClusterSize * 9 / 10, tc, perUnitCount, false);
1:e2a0d75:         grow(t, targetClusterSize, tc, perUnitCount, true);
1:e2a0d75:         loseAndReplace(t, targetClusterSize / 10, tc, perUnitCount, partitioner);
1:e2a0d75:         System.out.println();
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void loseAndReplace(NoReplicationTokenAllocator<Unit> t, int howMany,
1:e2a0d75:                                 TokenCount tc, int perUnitCount, IPartitioner partitioner)
1:e2a0d75:     {
1:e2a0d75:         int fullCount = t.sortedUnits.size();
1:e2a0d75:         System.out.format("Losing %d units. ", howMany);
1:e2a0d75:         for (int i = 0; i < howMany; ++i)
1:e2a0d75:         {
1:e2a0d75:             Unit u = t.unitFor(partitioner.getRandomToken(seededRand));
1:e2a0d75:             t.removeUnit(u);
1:e2a0d75:         }
1:e2a0d75:         // Grow half without verifying.
1:e2a0d75:         grow(t, (t.sortedUnits.size() + fullCount * 3) / 4, tc, perUnitCount, false);
1:e2a0d75:         // Metrics should be back to normal by now. Check that they remain so.
1:e2a0d75:         grow(t, fullCount, tc, perUnitCount, true);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void updateSummaryBeforeGrow(NoReplicationTokenAllocator<Unit> t)
1:e2a0d75:     {
1:e2a0d75:         Summary su = new Summary();
1:e2a0d75:         Summary st = new Summary();
1:e2a0d75:         System.out.println("Before growing cluster: ");
1:e2a0d75:         updateSummary(t, su, st, true);
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void grow(NoReplicationTokenAllocator<Unit> t, int targetClusterSize, TokenCount tc, int perUnitCount, boolean verifyMetrics)
1:e2a0d75:     {
1:e2a0d75:         int size = t.sortedUnits.size();
1:e2a0d75:         Summary su = new Summary();
1:e2a0d75:         Summary st = new Summary();
1:e2a0d75:         Random rand = new Random(targetClusterSize + perUnitCount);
1:e2a0d75:         TestReplicationStrategy strategy = (TestReplicationStrategy) t.strategy;
1:e2a0d75:         if (size < targetClusterSize)
1:e2a0d75:         {
1:e2a0d75:             System.out.format("Adding %d unit(s) using %s...", targetClusterSize - size, t.toString());
1:e2a0d75:             long time = System.currentTimeMillis();
1:e2a0d75: 
1:e2a0d75:             while (size < targetClusterSize)
1:e2a0d75:             {
1:e2a0d75:                 int num_tokens = tc.tokenCount(perUnitCount, rand);
1:e2a0d75:                 Unit unit = new Unit();
1:e2a0d75:                 t.addUnit(unit, num_tokens);
1:e2a0d75:                 ++size;
1:e2a0d75:                 if (verifyMetrics)
1:e2a0d75:                     updateSummary(t, su, st, false);
1:e2a0d75:             }
1:e2a0d75:             System.out.format(" Done in %.3fs\n", (System.currentTimeMillis() - time) / 1000.0);
1:e2a0d75: 
1:e2a0d75:             if (verifyMetrics)
1:e2a0d75:             {
1:e2a0d75:                 updateSummary(t, su, st, true);
1:e2a0d75:                 double maxExpected = 1.0 + tc.spreadExpectation() * strategy.spreadExpectation() / perUnitCount;
1:e2a0d75:                 if (su.max > maxExpected)
1:e2a0d75:                 {
1:e2a0d75:                     Assert.fail(String.format("Expected max unit size below %.4f, was %.4f", maxExpected, su.max));
1:e2a0d75:                 }
1:e2a0d75:             }
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     private void updateSummary(NoReplicationTokenAllocator<Unit> t, Summary su, Summary st, boolean print)
1:e2a0d75:     {
1:e2a0d75:         int size = t.sortedTokens.size();
1:e2a0d75: 
1:e2a0d75:         SummaryStatistics unitStat = new SummaryStatistics();
1:e2a0d75:         for (TokenAllocatorBase.Weighted<TokenAllocatorBase.UnitInfo> wu : t.sortedUnits)
1:e2a0d75:         {
1:e2a0d75:             unitStat.addValue(wu.weight * size / t.tokensInUnits.get(wu.value.unit).size());
1:e2a0d75:         }
1:e2a0d75:         su.update(unitStat);
1:e2a0d75: 
1:e2a0d75:         SummaryStatistics tokenStat = new SummaryStatistics();
1:e2a0d75:         for (PriorityQueue<TokenAllocatorBase.Weighted<TokenAllocatorBase.TokenInfo>> tokens : t.tokensInUnits.values())
1:e2a0d75:         {
1:e2a0d75:             for (TokenAllocatorBase.Weighted<TokenAllocatorBase.TokenInfo> token : tokens)
1:e2a0d75:             {
1:e2a0d75:                 tokenStat.addValue(token.weight);
1:e2a0d75:             }
1:e2a0d75:         }
1:e2a0d75:         st.update(tokenStat);
1:e2a0d75: 
1:e2a0d75:         if (print)
1:e2a0d75:         {
1:e2a0d75:             System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n",
1:e2a0d75:                               t.sortedUnits.size(), size,
1:e2a0d75:                               mms(unitStat),
1:e2a0d75:                               mms(tokenStat),
1:e2a0d75:                               t.strategy);
1:e2a0d75:             System.out.format("Worst intermediate unit\t%s  token %s\n", su, st);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75:     static class NoReplicationStrategy implements TestReplicationStrategy
1:e2a0d75:     {
1:e2a0d75:         public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens)
1:e2a0d75:         {
1:e2a0d75:             return Collections.singletonList(sortedTokens.ceilingEntry(token).getValue());
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public Token replicationStart(Token token, Unit unit, NavigableMap<Token, Unit> sortedTokens)
1:e2a0d75:         {
1:e2a0d75:             return sortedTokens.lowerKey(token);
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public String toString()
1:e2a0d75:         {
1:e2a0d75:             return "No replication";
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public void addUnit(Unit n)
1:e2a0d75:         {
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public void removeUnit(Unit n)
1:e2a0d75:         {
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public int replicas()
1:e2a0d75:         {
1:e2a0d75:             return 1;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public Object getGroup(Unit unit)
1:e2a0d75:         {
1:e2a0d75:             return unit;
1:e2a0d75:         }
1:e2a0d75: 
1:e2a0d75:         public double spreadExpectation()
1:e2a0d75:         {
1:e2a0d75:             return 1;
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:e2a0d75: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.dht.tokenallocator;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.NavigableMap;
1: import java.util.PriorityQueue;
1: import java.util.Random;
1: 
1: import com.google.common.collect.Maps;
1: import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.dht.RandomPartitioner;
1: import org.apache.cassandra.dht.Token;
1: 
1: public class NoReplicationTokenAllocatorTest extends TokenAllocatorTestBase
1: {
1: 
1:     @Test
1:     public void testNewClusterWithMurmur3Partitioner()
1:     {
1:         testNewCluster(new Murmur3Partitioner());
1:     }
1: 
1:     @Test
1:     public void testNewClusterWithRandomPartitioner()
1:     {
1:         testNewCluster(new RandomPartitioner());
1:     }
1: 
1:     private void testNewCluster(IPartitioner partitioner)
1:     {
1:         for (int perUnitCount = 1; perUnitCount <= MAX_VNODE_COUNT; perUnitCount *= 4)
1:         {
1:             testNewCluster(perUnitCount, fixedTokenCount, new NoReplicationStrategy(), partitioner);
1:         }
1:     }
1: 
1:     public void testNewCluster(int perUnitCount, TokenCount tc, NoReplicationStrategy rs, IPartitioner partitioner)
1:     {
1:         System.out.println("Testing new cluster, target " + perUnitCount + " vnodes, replication " + rs);
1:         final int targetClusterSize = TARGET_CLUSTER_SIZE;
1:         NavigableMap<Token, Unit> tokenMap = Maps.newTreeMap();
1: 
1:         NoReplicationTokenAllocator<Unit> t = new NoReplicationTokenAllocator<Unit>(tokenMap, rs, partitioner);
1:         grow(t, targetClusterSize * 2 / 5, tc, perUnitCount, false);
1:         grow(t, targetClusterSize, tc, perUnitCount, true);
1:         System.out.println();
1:     }
1: 
1:     @Test
1:     public void testExistingClusterWithMurmur3Partitioner()
1:     {
1:         testExistingCluster(new Murmur3Partitioner());
1:     }
1: 
1:     @Test
1:     public void testExistingClusterWithRandomPartitioner()
1:     {
1:         testExistingCluster(new RandomPartitioner());
1:     }
1: 
1:     private void testExistingCluster(IPartitioner partitioner)
1:     {
1:         for (int perUnitCount = 1; perUnitCount <= MAX_VNODE_COUNT; perUnitCount *= 4)
1:         {
1:             testExistingCluster(perUnitCount, fixedTokenCount, new NoReplicationStrategy(), partitioner);
1:         }
1:     }
1: 
1:     public NoReplicationTokenAllocator<Unit> randomWithTokenAllocator(NavigableMap<Token, Unit> map, NoReplicationStrategy rs,
1:                                                                       int unitCount, TokenCount tc, int perUnitCount,
1:                                                                       IPartitioner partitioner)
1:     {
1:         super.random(map, rs, unitCount, tc, perUnitCount, partitioner);
1:         NoReplicationTokenAllocator<Unit> t = new NoReplicationTokenAllocator<Unit>(map, rs, partitioner);
1:         t.createTokenInfos();
1:         return t;
1:     }
1: 
1:     public void testExistingCluster(int perUnitCount, TokenCount tc, NoReplicationStrategy rs, IPartitioner partitioner)
1:     {
1:         System.out.println("Testing existing cluster, target " + perUnitCount + " vnodes, replication " + rs);
1:         final int targetClusterSize = TARGET_CLUSTER_SIZE;
1:         NavigableMap<Token, Unit> tokenMap = Maps.newTreeMap();
1:         NoReplicationTokenAllocator<Unit> t = randomWithTokenAllocator(tokenMap, rs, targetClusterSize / 2, tc, perUnitCount, partitioner);
1:         updateSummaryBeforeGrow(t);
1: 
1:         grow(t, targetClusterSize * 9 / 10, tc, perUnitCount, false);
1:         grow(t, targetClusterSize, tc, perUnitCount, true);
1:         loseAndReplace(t, targetClusterSize / 10, tc, perUnitCount, partitioner);
1:         System.out.println();
1:     }
1: 
1:     private void loseAndReplace(NoReplicationTokenAllocator<Unit> t, int howMany,
1:                                 TokenCount tc, int perUnitCount, IPartitioner partitioner)
1:     {
1:         int fullCount = t.sortedUnits.size();
1:         System.out.format("Losing %d units. ", howMany);
1:         for (int i = 0; i < howMany; ++i)
1:         {
1:             Unit u = t.unitFor(partitioner.getRandomToken(seededRand));
1:             t.removeUnit(u);
1:         }
1:         // Grow half without verifying.
1:         grow(t, (t.sortedUnits.size() + fullCount * 3) / 4, tc, perUnitCount, false);
1:         // Metrics should be back to normal by now. Check that they remain so.
1:         grow(t, fullCount, tc, perUnitCount, true);
1:     }
1: 
1:     private void updateSummaryBeforeGrow(NoReplicationTokenAllocator<Unit> t)
1:     {
1:         Summary su = new Summary();
1:         Summary st = new Summary();
1:         System.out.println("Before growing cluster: ");
1:         updateSummary(t, su, st, true);
1:     }
1: 
1:     private void grow(NoReplicationTokenAllocator<Unit> t, int targetClusterSize, TokenCount tc, int perUnitCount, boolean verifyMetrics)
1:     {
1:         int size = t.sortedUnits.size();
1:         Summary su = new Summary();
1:         Summary st = new Summary();
1:         Random rand = new Random(targetClusterSize + perUnitCount);
1:         TestReplicationStrategy strategy = (TestReplicationStrategy) t.strategy;
1:         if (size < targetClusterSize)
1:         {
1:             System.out.format("Adding %d unit(s) using %s...", targetClusterSize - size, t.toString());
1:             long time = System.currentTimeMillis();
1: 
1:             while (size < targetClusterSize)
1:             {
1:                 int num_tokens = tc.tokenCount(perUnitCount, rand);
1:                 Unit unit = new Unit();
1:                 t.addUnit(unit, num_tokens);
1:                 ++size;
1:                 if (verifyMetrics)
1:                     updateSummary(t, su, st, false);
1:             }
1:             System.out.format(" Done in %.3fs\n", (System.currentTimeMillis() - time) / 1000.0);
1: 
1:             if (verifyMetrics)
1:             {
1:                 updateSummary(t, su, st, true);
1:                 double maxExpected = 1.0 + tc.spreadExpectation() * strategy.spreadExpectation() / perUnitCount;
1:                 if (su.max > maxExpected)
1:                 {
1:                     Assert.fail(String.format("Expected max unit size below %.4f, was %.4f", maxExpected, su.max));
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private void updateSummary(NoReplicationTokenAllocator<Unit> t, Summary su, Summary st, boolean print)
1:     {
1:         int size = t.sortedTokens.size();
1: 
1:         SummaryStatistics unitStat = new SummaryStatistics();
1:         for (TokenAllocatorBase.Weighted<TokenAllocatorBase.UnitInfo> wu : t.sortedUnits)
1:         {
1:             unitStat.addValue(wu.weight * size / t.tokensInUnits.get(wu.value.unit).size());
1:         }
1:         su.update(unitStat);
1: 
1:         SummaryStatistics tokenStat = new SummaryStatistics();
1:         for (PriorityQueue<TokenAllocatorBase.Weighted<TokenAllocatorBase.TokenInfo>> tokens : t.tokensInUnits.values())
1:         {
1:             for (TokenAllocatorBase.Weighted<TokenAllocatorBase.TokenInfo> token : tokens)
1:             {
1:                 tokenStat.addValue(token.weight);
1:             }
1:         }
1:         st.update(tokenStat);
1: 
1:         if (print)
1:         {
1:             System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n",
1:                               t.sortedUnits.size(), size,
1:                               mms(unitStat),
1:                               mms(tokenStat),
1:                               t.strategy);
1:             System.out.format("Worst intermediate unit\t%s  token %s\n", su, st);
1:         }
1:     }
1: 
1:     static class NoReplicationStrategy implements TestReplicationStrategy
1:     {
1:         public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens)
1:         {
1:             return Collections.singletonList(sortedTokens.ceilingEntry(token).getValue());
1:         }
1: 
1:         public Token replicationStart(Token token, Unit unit, NavigableMap<Token, Unit> sortedTokens)
1:         {
1:             return sortedTokens.lowerKey(token);
1:         }
1: 
1:         public String toString()
1:         {
1:             return "No replication";
1:         }
1: 
1:         public void addUnit(Unit n)
1:         {
1:         }
1: 
1:         public void removeUnit(Unit n)
1:         {
1:         }
1: 
1:         public int replicas()
1:         {
1:             return 1;
1:         }
1: 
1:         public Object getGroup(Unit unit)
1:         {
1:             return unit;
1:         }
1: 
1:         public double spreadExpectation()
1:         {
1:             return 1;
1:         }
1:     }
1: 
1: }
============================================================================