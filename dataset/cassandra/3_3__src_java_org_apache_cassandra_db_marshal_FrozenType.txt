1:ee55f36: /*
1:ee55f36:  * Licensed to the Apache Software Foundation (ASF) under one
1:ee55f36:  * or more contributor license agreements.  See the NOTICE file
1:ee55f36:  * distributed with this work for additional information
1:ee55f36:  * regarding copyright ownership.  The ASF licenses this file
1:ee55f36:  * to you under the Apache License, Version 2.0 (the
1:ee55f36:  * "License"); you may not use this file except in compliance
1:ee55f36:  * with the License.  You may obtain a copy of the License at
1:ee55f36:  *
1:ee55f36:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee55f36:  *
1:ee55f36:  * Unless required by applicable law or agreed to in writing, software
1:ee55f36:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee55f36:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee55f36:  * See the License for the specific language governing permissions and
1:ee55f36:  * limitations under the License.
1:ee55f36:  */
1:ee55f36: package org.apache.cassandra.db.marshal;
2:ee55f36: 
1:ee55f36: import java.nio.ByteBuffer;
1:ee55f36: import java.util.List;
1:ee55f36: 
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:ee55f36: import org.apache.cassandra.exceptions.ConfigurationException;
1:ee55f36: import org.apache.cassandra.exceptions.SyntaxException;
1:ee55f36: import org.apache.cassandra.serializers.TypeSerializer;
1:ee55f36: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:ee55f36: 
1:ee55f36: /**
1:ee55f36:  * A fake type that is only used for parsing type strings that include frozen types.
1:ee55f36:  */
1:ee55f36: public class FrozenType extends AbstractType<Void>
2:ee55f36: {
1:07594ee:     protected FrozenType()
1:07594ee:     {
1:07594ee:         super(ComparisonType.NOT_COMPARABLE);
1:07594ee:     }
1:07594ee: 
1:ee55f36:     public static AbstractType<?> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
1:ee55f36:     {
1:ee55f36:         List<AbstractType<?>> innerTypes = parser.getTypeParameters();
1:ee55f36:         if (innerTypes.size() != 1)
1:ee55f36:             throw new SyntaxException("FrozenType() only accepts one parameter");
1:ee55f36: 
1:ee55f36:         AbstractType<?> innerType = innerTypes.get(0);
1:ee55f36:         return innerType.freeze();
2:ee55f36:     }
1:ee55f36: 
1:ee55f36:     public String getString(ByteBuffer bytes)
1:ee55f36:     {
2:ee55f36:         throw new UnsupportedOperationException();
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     public ByteBuffer fromString(String source) throws MarshalException
1:ee55f36:     {
1:ee55f36:         throw new UnsupportedOperationException();
1:ee55f36:     }
1:ee55f36: 
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         throw new UnsupportedOperationException();
1:c7b02d1:     }
1:c7b02d1: 
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         throw new UnsupportedOperationException();
1:c7b02d1:     }
1:c7b02d1: 
1:ee55f36:     public TypeSerializer<Void> getSerializer()
1:ee55f36:     {
1:ee55f36:         throw new UnsupportedOperationException();
1:ee55f36:     }
1:ee55f36: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     protected FrozenType()
1:     {
1:         super(ComparisonType.NOT_COMPARABLE);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
1: 
1: /**
1:  * A fake type that is only used for parsing type strings that include frozen types.
1:  */
1: public class FrozenType extends AbstractType<Void>
1: {
1:     public static AbstractType<?> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
1:     {
1:         List<AbstractType<?>> innerTypes = parser.getTypeParameters();
1:         if (innerTypes.size() != 1)
1:             throw new SyntaxException("FrozenType() only accepts one parameter");
1: 
1:         AbstractType<?> innerType = innerTypes.get(0);
1:         return innerType.freeze();
1:     }
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public String getString(ByteBuffer bytes)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public TypeSerializer<Void> getSerializer()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================