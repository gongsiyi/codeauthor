1:b75ed1c: /*
1:b75ed1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b75ed1c:  * or more contributor license agreements.  See the NOTICE file
1:b75ed1c:  * distributed with this work for additional information
1:b75ed1c:  * regarding copyright ownership.  The ASF licenses this file
1:b75ed1c:  * to you under the Apache License, Version 2.0 (the
1:b75ed1c:  * "License"); you may not use this file except in compliance
1:b75ed1c:  * with the License.  You may obtain a copy of the License at
2:b75ed1c:  *
1:b75ed1c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b75ed1c:  *
1:b75ed1c:  * Unless required by applicable law or agreed to in writing, software
1:b75ed1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b75ed1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b75ed1c:  * See the License for the specific language governing permissions and
1:b75ed1c:  * limitations under the License.
1:b75ed1c:  */
1:b75ed1c: package org.apache.cassandra.tools;
1:707b2da: 
1:2a12e05: import java.io.*;
1:2a12e05: import java.nio.charset.Charset;
1:b75ed1c: import java.nio.file.Files;
1:2a12e05: import java.nio.file.Paths;
1:b75ed1c: import java.nio.file.attribute.FileTime;
1:2a12e05: import java.util.Arrays;
1:2a12e05: import java.util.List;
3:b75ed1c: 
1:707b2da: import org.apache.cassandra.config.Config;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:b75ed1c: import org.apache.cassandra.io.sstable.Component;
1:b75ed1c: import org.apache.cassandra.io.sstable.Descriptor;
1:b75ed1c: import org.apache.cassandra.service.ActiveRepairService;
1:b75ed1c: 
1:b75ed1c: /**
1:b75ed1c:  * Set repairedAt status on a given set of sstables.
1:b75ed1c:  *
1:b75ed1c:  * If you pass --is-repaired, it will set the repairedAt time to the last modified time.
1:b75ed1c:  *
1:b75ed1c:  * If you know you ran repair 2 weeks ago, you can do something like
1:b75ed1c:  *
1:222ea95:  * {@code
1:2a12e05:  * sstablerepairset --is-repaired -f <(find /var/lib/cassandra/data/.../ -iname "*Data.db*" -mtime +14)
1:222ea95:  * }
1:b75ed1c:  */
1:b75ed1c: public class SSTableRepairedAtSetter
3:b75ed1c: {
1:b75ed1c:     /**
1:b75ed1c:      * @param args a list of sstables whose metadata we are changing
1:b75ed1c:      */
1:2a12e05:     public static void main(final String[] args) throws IOException
1:25eb830:     {
1:b75ed1c:         PrintStream out = System.out;
1:b75ed1c:         if (args.length == 0)
1:b75ed1c:         {
1:b75ed1c:             out.println("This command should be run with Cassandra stopped!");
1:2a12e05:             out.println("Usage: sstablerepairedset [--is-repaired | --is-unrepaired] [-f <sstable-list> | <sstables>]");
1:b75ed1c:             System.exit(1);
1:25eb830:         }
1:b75ed1c: 
1:2a12e05:         if (args.length < 3 || !args[0].equals("--really-set") || (!args[1].equals("--is-repaired") && !args[1].equals("--is-unrepaired")))
1:b75ed1c:         {
1:b75ed1c:             out.println("This command should be run with Cassandra stopped, otherwise you will get very strange behavior");
1:b75ed1c:             out.println("Verify that Cassandra is not running and then execute the command like this:");
1:6853d5c:             out.println("Usage: sstablerepairedset --really-set [--is-repaired | --is-unrepaired] [-f <sstable-list> | <sstables>]");
1:b75ed1c:             System.exit(1);
3:b75ed1c:         }
1:b75ed1c: 
1:83b9740:         Util.initDatabaseDescriptor();
1:83b9740: 
1:b75ed1c:         boolean setIsRepaired = args[1].equals("--is-repaired");
1:b75ed1c: 
1:2a12e05:         List<String> fileNames;
1:2a12e05:         if (args[2].equals("-f"))
1:b75ed1c:         {
1:2a12e05:             fileNames = Files.readAllLines(Paths.get(args[3]), Charset.defaultCharset());
1:b75ed1c:         }
1:25eb830:         else
1:25eb830:         {
1:2a12e05:             fileNames = Arrays.asList(args).subList(2, args.length);
1:b75ed1c:         }
1:b75ed1c: 
1:2a12e05:         for (String fname: fileNames)
1:2a12e05:         {
1:2a12e05:             Descriptor descriptor = Descriptor.fromFilename(fname);
1:0368e97:             if (descriptor.version.hasRepairedAt())
1:2a12e05:             {
1:2a12e05:                 if (setIsRepaired)
1:2a12e05:                 {
1:2a12e05:                     FileTime f = Files.getLastModifiedTime(new File(descriptor.filenameFor(Component.DATA)).toPath());
1:2a12e05:                     descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, f.toMillis());
1:2a12e05:                 }
1:2a12e05:                 else
1:2a12e05:                 {
1:2a12e05:                     descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, ActiveRepairService.UNREPAIRED_SSTABLE);
1:2a12e05:                 }
1:2a12e05:             }
1:2a12e05:             else
1:2a12e05:             {
1:2a12e05:                 System.err.println("SSTable " + fname + " does not have repaired property, run upgradesstables");
1:2a12e05:             }
1:2a12e05:         }
1:25eb830:     }
1:b75ed1c: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6f3d1e2
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:83b9740
/////////////////////////////////////////////////////////////////////////
1:         Util.initDatabaseDescriptor();
1: 
commit:2a12e05
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
1: import java.nio.charset.Charset;
1: import java.nio.file.Paths;
1: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:  * sstablerepairset --is-repaired -f <(find /var/lib/cassandra/data/.../ -iname "*Data.db*" -mtime +14)
/////////////////////////////////////////////////////////////////////////
1:     public static void main(final String[] args) throws IOException
1:             out.println("Usage: sstablerepairedset [--is-repaired | --is-unrepaired] [-f <sstable-list> | <sstables>]");
1:         if (args.length < 3 || !args[0].equals("--really-set") || (!args[1].equals("--is-repaired") && !args[1].equals("--is-unrepaired")))
0:             out.println("Usage: sstablelevelreset --really-set [--is-repaired | --is-unrepaired] [-f <sstable-list> | <sstables>]");
1:         List<String> fileNames;
1:         if (args[2].equals("-f"))
1:             fileNames = Files.readAllLines(Paths.get(args[3]), Charset.defaultCharset());
1:             fileNames = Arrays.asList(args).subList(2, args.length);
1:         for (String fname: fileNames)
1:         {
1:             Descriptor descriptor = Descriptor.fromFilename(fname);
0:             if (descriptor.version.hasRepairedAt)
1:             {
1:                 if (setIsRepaired)
1:                 {
1:                     FileTime f = Files.getLastModifiedTime(new File(descriptor.filenameFor(Component.DATA)).toPath());
1:                     descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, f.toMillis());
1:                 }
1:                 else
1:                 {
1:                     descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, ActiveRepairService.UNREPAIRED_SSTABLE);
1:                 }
1:             }
1:             else
1:             {
1:                 System.err.println("SSTable " + fname + " does not have repaired property, run upgradesstables");
1:             }
1:         }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:707b2da
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Config;
/////////////////////////////////////////////////////////////////////////
0:         // Necessary since BufferPool used in RandomAccessReader needs to access DatabaseDescriptor
0:         Config.setClientMode(true);
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:222ea95
/////////////////////////////////////////////////////////////////////////
1:  * {@code
1:  * }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:6348957
commit:25eb830
/////////////////////////////////////////////////////////////////////////
0:         if (descriptor.version.hasRepairedAt)
0:             if (setIsRepaired)
1:             {
0:                 FileTime f = Files.getLastModifiedTime(new File(descriptor.filenameFor(Component.DATA)).toPath());
0:                 descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, f.toMillis());
1:             }
1:             else
1:             {
0:                 descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, ActiveRepairService.UNREPAIRED_SSTABLE);
1:             }
0:             out.println("SSTable "+fname+" does not have repaired property, run upgradesstables");
commit:b75ed1c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.PrintStream;
1: import java.nio.file.Files;
1: import java.nio.file.attribute.FileTime;
0: import java.util.EnumSet;
0: import java.util.Map;
0: import java.util.Set;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.metadata.CompactionMetadata;
0: import org.apache.cassandra.io.sstable.metadata.MetadataComponent;
0: import org.apache.cassandra.io.sstable.metadata.MetadataType;
0: import org.apache.cassandra.io.sstable.metadata.StatsMetadata;
0: import org.apache.cassandra.io.sstable.metadata.ValidationMetadata;
1: import org.apache.cassandra.service.ActiveRepairService;
1: 
1: /**
1:  * Set repairedAt status on a given set of sstables.
1:  *
1:  * If you pass --is-repaired, it will set the repairedAt time to the last modified time.
1:  *
1:  * If you know you ran repair 2 weeks ago, you can do something like
1:  *
0:  * for x in $(find /var/lib/cassandra/data/.../ -iname "*Data.db*" -mtime +14); do sstablerepairset --is-repaired $x; done
1:  *
1:  */
1: public class SSTableRepairedAtSetter
1: {
1:     /**
1:      * @param args a list of sstables whose metadata we are changing
1:      */
0:     public static void main(String[] args) throws IOException
1:     {
1:         PrintStream out = System.out;
1:         if (args.length == 0)
1:         {
1:             out.println("This command should be run with Cassandra stopped!");
0:             out.println("Usage: sstablerepairedset [--is-repaired | --is-unrepaired] <sstable>");
1:             System.exit(1);
1:         }
1: 
0:         for (String s : args)
0:             System.out.println(s);
1: 
0:         if (args.length != 3 || !args[0].equals("--really-set") || (!args[1].equals("--is-repaired") && !args[1].equals("--is-unrepaired")))
1:         {
1:             out.println("This command should be run with Cassandra stopped, otherwise you will get very strange behavior");
1:             out.println("Verify that Cassandra is not running and then execute the command like this:");
0:             out.println("Usage: sstablelevelreset --really-set [--is-repaired | --is-unrepaired] <sstable>");
1:             System.exit(1);
1:         }
1: 
1:         boolean setIsRepaired = args[1].equals("--is-repaired");
1: 
0:         String fname = args[2];
0:         Descriptor descriptor = Descriptor.fromFilename(fname);
0:         if (setIsRepaired)
1:         {
0:             FileTime f = Files.getLastModifiedTime(new File(descriptor.filenameFor(Component.DATA)).toPath());
0:             descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, f.toMillis());
1:         }
0:         else
1:         {
0:             descriptor.getMetadataSerializer().mutateRepairedAt(descriptor, ActiveRepairService.UNREPAIRED_SSTABLE);
1:         }
1: 
1:     }
1: }
author:David Sauer
-------------------------------------------------------------------------------
commit:6853d5c
/////////////////////////////////////////////////////////////////////////
1:             out.println("Usage: sstablerepairedset --really-set [--is-repaired | --is-unrepaired] [-f <sstable-list> | <sstables>]");
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1:             if (descriptor.version.hasRepairedAt())
============================================================================