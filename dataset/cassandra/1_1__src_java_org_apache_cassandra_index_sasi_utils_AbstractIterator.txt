1:72790dc: /*
1:72790dc:  * Copyright (C) 2007 The Guava Authors
1:72790dc:  *
1:72790dc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  * you may not use this file except in compliance with the License.
1:72790dc:  * You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  * http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.util.NoSuchElementException;
1:72790dc: 
1:72790dc: import com.google.common.collect.PeekingIterator;
1:72790dc: 
1:72790dc: import static com.google.common.base.Preconditions.checkState;
1:72790dc: 
1:72790dc: // This is fork of the Guava AbstractIterator, the only difference
1:72790dc: // is that state & next variables are now protected, this was required
1:72790dc: // for SkippableIterator.skipTo(..) to void all previous state.
1:72790dc: public abstract class AbstractIterator<T> implements PeekingIterator<T>
1:72790dc: {
1:72790dc:     protected State state = State.NOT_READY;
1:72790dc: 
1:72790dc:     /** Constructor for use by subclasses. */
1:72790dc:     protected AbstractIterator() {}
1:72790dc: 
1:72790dc:     protected enum State
1:72790dc:     {
1:72790dc:         /** We have computed the next element and haven't returned it yet. */
1:72790dc:         READY,
1:72790dc: 
1:72790dc:         /** We haven't yet computed or have already returned the element. */
1:72790dc:         NOT_READY,
1:72790dc: 
1:72790dc:         /** We have reached the end of the data and are finished. */
1:72790dc:         DONE,
1:72790dc: 
1:72790dc:         /** We've suffered an exception and are kaput. */
1:72790dc:         FAILED,
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected T next;
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Returns the next element. <b>Note:</b> the implementation must call {@link
1:72790dc:      * #endOfData()} when there are no elements left in the iteration. Failure to
1:72790dc:      * do so could result in an infinite loop.
1:72790dc:      *
1:72790dc:      * <p>The initial invocation of {@link #hasNext()} or {@link #next()} calls
1:72790dc:      * this method, as does the first invocation of {@code hasNext} or {@code
1:72790dc:      * next} following each successful call to {@code next}. Once the
1:72790dc:      * implementation either invokes {@code endOfData} or throws an exception,
1:72790dc:      * {@code computeNext} is guaranteed to never be called again.
1:72790dc:      *
1:72790dc:      * <p>If this method throws an exception, it will propagate outward to the
1:72790dc:      * {@code hasNext} or {@code next} invocation that invoked this method. Any
1:72790dc:      * further attempts to use the iterator will result in an {@link
1:72790dc:      * IllegalStateException}.
1:72790dc:      *
1:72790dc:      * <p>The implementation of this method may not invoke the {@code hasNext},
1:72790dc:      * {@code next}, or {@link #peek()} methods on this instance; if it does, an
1:72790dc:      * {@code IllegalStateException} will result.
1:72790dc:      *
1:72790dc:      * @return the next element if there was one. If {@code endOfData} was called
1:72790dc:      *     during execution, the return value will be ignored.
1:72790dc:      * @throws RuntimeException if any unrecoverable error happens. This exception
1:72790dc:      *     will propagate outward to the {@code hasNext()}, {@code next()}, or
1:72790dc:      *     {@code peek()} invocation that invoked this method. Any further
1:72790dc:      *     attempts to use the iterator will result in an
1:72790dc:      *     {@link IllegalStateException}.
1:72790dc:      */
1:72790dc:     protected abstract T computeNext();
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Implementations of {@link #computeNext} <b>must</b> invoke this method when
1:72790dc:      * there are no elements left in the iteration.
1:72790dc:      *
1:72790dc:      * @return {@code null}; a convenience so your {@code computeNext}
1:72790dc:      *     implementation can use the simple statement {@code return endOfData();}
1:72790dc:      */
1:72790dc:     protected final T endOfData()
1:72790dc:     {
1:72790dc:         state = State.DONE;
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final boolean hasNext()
1:72790dc:     {
1:72790dc:         checkState(state != State.FAILED);
1:72790dc: 
1:72790dc:         switch (state)
1:72790dc:         {
1:72790dc:             case DONE:
1:72790dc:                 return false;
1:72790dc: 
1:72790dc:             case READY:
1:72790dc:                 return true;
1:72790dc: 
1:72790dc:             default:
1:72790dc:         }
1:72790dc: 
1:72790dc:         return tryToComputeNext();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected boolean tryToComputeNext()
1:72790dc:     {
1:72790dc:         state = State.FAILED; // temporary pessimism
1:72790dc:         next = computeNext();
1:72790dc: 
1:72790dc:         if (state != State.DONE)
1:72790dc:         {
1:72790dc:             state = State.READY;
1:72790dc:             return true;
1:72790dc:         }
1:72790dc: 
1:72790dc:         return false;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public final T next()
1:72790dc:     {
1:72790dc:         if (!hasNext())
1:72790dc:             throw new NoSuchElementException();
1:72790dc: 
1:72790dc:         state = State.NOT_READY;
1:72790dc:         return next;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void remove()
1:72790dc:     {
1:72790dc:         throw new UnsupportedOperationException();
1:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Returns the next element in the iteration without advancing the iteration,
1:72790dc:      * according to the contract of {@link PeekingIterator#peek()}.
1:72790dc:      *
1:72790dc:      * <p>Implementations of {@code AbstractIterator} that wish to expose this
1:72790dc:      * functionality should implement {@code PeekingIterator}.
1:72790dc:      */
1:72790dc:     public final T peek()
1:72790dc:     {
1:72790dc:         if (!hasNext())
1:72790dc:             throw new NoSuchElementException();
1:72790dc: 
1:72790dc:         return next;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (C) 2007 The Guava Authors
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.util.NoSuchElementException;
1: 
1: import com.google.common.collect.PeekingIterator;
1: 
1: import static com.google.common.base.Preconditions.checkState;
1: 
1: // This is fork of the Guava AbstractIterator, the only difference
1: // is that state & next variables are now protected, this was required
1: // for SkippableIterator.skipTo(..) to void all previous state.
1: public abstract class AbstractIterator<T> implements PeekingIterator<T>
1: {
1:     protected State state = State.NOT_READY;
1: 
1:     /** Constructor for use by subclasses. */
1:     protected AbstractIterator() {}
1: 
1:     protected enum State
1:     {
1:         /** We have computed the next element and haven't returned it yet. */
1:         READY,
1: 
1:         /** We haven't yet computed or have already returned the element. */
1:         NOT_READY,
1: 
1:         /** We have reached the end of the data and are finished. */
1:         DONE,
1: 
1:         /** We've suffered an exception and are kaput. */
1:         FAILED,
1:     }
1: 
1:     protected T next;
1: 
1:     /**
1:      * Returns the next element. <b>Note:</b> the implementation must call {@link
1:      * #endOfData()} when there are no elements left in the iteration. Failure to
1:      * do so could result in an infinite loop.
1:      *
1:      * <p>The initial invocation of {@link #hasNext()} or {@link #next()} calls
1:      * this method, as does the first invocation of {@code hasNext} or {@code
1:      * next} following each successful call to {@code next}. Once the
1:      * implementation either invokes {@code endOfData} or throws an exception,
1:      * {@code computeNext} is guaranteed to never be called again.
1:      *
1:      * <p>If this method throws an exception, it will propagate outward to the
1:      * {@code hasNext} or {@code next} invocation that invoked this method. Any
1:      * further attempts to use the iterator will result in an {@link
1:      * IllegalStateException}.
1:      *
1:      * <p>The implementation of this method may not invoke the {@code hasNext},
1:      * {@code next}, or {@link #peek()} methods on this instance; if it does, an
1:      * {@code IllegalStateException} will result.
1:      *
1:      * @return the next element if there was one. If {@code endOfData} was called
1:      *     during execution, the return value will be ignored.
1:      * @throws RuntimeException if any unrecoverable error happens. This exception
1:      *     will propagate outward to the {@code hasNext()}, {@code next()}, or
1:      *     {@code peek()} invocation that invoked this method. Any further
1:      *     attempts to use the iterator will result in an
1:      *     {@link IllegalStateException}.
1:      */
1:     protected abstract T computeNext();
1: 
1:     /**
1:      * Implementations of {@link #computeNext} <b>must</b> invoke this method when
1:      * there are no elements left in the iteration.
1:      *
1:      * @return {@code null}; a convenience so your {@code computeNext}
1:      *     implementation can use the simple statement {@code return endOfData();}
1:      */
1:     protected final T endOfData()
1:     {
1:         state = State.DONE;
1:         return null;
1:     }
1: 
1:     public final boolean hasNext()
1:     {
1:         checkState(state != State.FAILED);
1: 
1:         switch (state)
1:         {
1:             case DONE:
1:                 return false;
1: 
1:             case READY:
1:                 return true;
1: 
1:             default:
1:         }
1: 
1:         return tryToComputeNext();
1:     }
1: 
1:     protected boolean tryToComputeNext()
1:     {
1:         state = State.FAILED; // temporary pessimism
1:         next = computeNext();
1: 
1:         if (state != State.DONE)
1:         {
1:             state = State.READY;
1:             return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public final T next()
1:     {
1:         if (!hasNext())
1:             throw new NoSuchElementException();
1: 
1:         state = State.NOT_READY;
1:         return next;
1:     }
1: 
1:     public void remove()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     /**
1:      * Returns the next element in the iteration without advancing the iteration,
1:      * according to the contract of {@link PeekingIterator#peek()}.
1:      *
1:      * <p>Implementations of {@code AbstractIterator} that wish to expose this
1:      * functionality should implement {@code PeekingIterator}.
1:      */
1:     public final T peek()
1:     {
1:         if (!hasNext())
1:             throw new NoSuchElementException();
1: 
1:         return next;
1:     }
1: }
============================================================================