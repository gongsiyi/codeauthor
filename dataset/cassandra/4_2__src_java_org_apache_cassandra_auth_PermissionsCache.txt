1:e750ab2: /*
1:e750ab2:  * Licensed to the Apache Software Foundation (ASF) under one
1:e750ab2:  * or more contributor license agreements.  See the NOTICE file
1:e750ab2:  * distributed with this work for additional information
1:e750ab2:  * regarding copyright ownership.  The ASF licenses this file
1:e750ab2:  * to you under the Apache License, Version 2.0 (the
1:e750ab2:  * "License"); you may not use this file except in compliance
1:e750ab2:  * with the License.  You may obtain a copy of the License at
1:e750ab2:  *
1:e750ab2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e750ab2:  *
1:e750ab2:  * Unless required by applicable law or agreed to in writing, software
1:e750ab2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e750ab2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e750ab2:  * See the License for the specific language governing permissions and
1:e750ab2:  * limitations under the License.
1:e750ab2:  */
1:e750ab2: package org.apache.cassandra.auth;
9:e750ab2: 
1:e750ab2: import java.util.Set;
1:186777a: import java.util.concurrent.ExecutionException;
1:e750ab2: 
1:d919cc9: import org.apache.cassandra.config.DatabaseDescriptor;
1:e750ab2: import org.apache.cassandra.utils.Pair;
1:e750ab2: 
1:186777a: public class PermissionsCache extends AuthCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> implements PermissionsCacheMBean
9:e750ab2: {
1:d919cc9:     public PermissionsCache(IAuthorizer authorizer)
1:e750ab2:     {
1:186777a:         super("PermissionsCache",
1:186777a:               DatabaseDescriptor::setPermissionsValidity,
1:186777a:               DatabaseDescriptor::getPermissionsValidity,
1:186777a:               DatabaseDescriptor::setPermissionsUpdateInterval,
1:186777a:               DatabaseDescriptor::getPermissionsUpdateInterval,
1:186777a:               DatabaseDescriptor::setPermissionsCacheMaxEntries,
1:186777a:               DatabaseDescriptor::getPermissionsCacheMaxEntries,
1:186777a:               (p) -> authorizer.authorize(p.left, p.right),
1:186777a:               () -> DatabaseDescriptor.getAuthorizer().requireAuthorization());
7:e750ab2:     }
1:e750ab2: 
1:e750ab2:     public Set<Permission> getPermissions(AuthenticatedUser user, IResource resource)
1:e750ab2:     {
2:e750ab2:         try
1:e750ab2:         {
1:186777a:             return get(Pair.create(user, resource));
1:e750ab2:         }
1:e750ab2:         catch (ExecutionException e)
1:e750ab2:         {
1:e750ab2:             throw new RuntimeException(e);
1:e750ab2:         }
1:e750ab2:     }
1:e750ab2: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:186777a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutionException;
1: public class PermissionsCache extends AuthCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> implements PermissionsCacheMBean
1:         super("PermissionsCache",
1:               DatabaseDescriptor::setPermissionsValidity,
1:               DatabaseDescriptor::getPermissionsValidity,
1:               DatabaseDescriptor::setPermissionsUpdateInterval,
1:               DatabaseDescriptor::getPermissionsUpdateInterval,
1:               DatabaseDescriptor::setPermissionsCacheMaxEntries,
1:               DatabaseDescriptor::getPermissionsCacheMaxEntries,
1:               (p) -> authorizer.authorize(p.left, p.right),
1:               () -> DatabaseDescriptor.getAuthorizer().requireAuthorization());
1:             return get(Pair.create(user, resource));
commit:e750ab2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Set;
0: import java.util.concurrent.*;
1: 
0: import com.google.common.cache.CacheBuilder;
0: import com.google.common.cache.CacheLoader;
0: import com.google.common.cache.LoadingCache;
0: import com.google.common.util.concurrent.ListenableFuture;
0: import com.google.common.util.concurrent.ListenableFutureTask;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
1: import org.apache.cassandra.utils.Pair;
1: 
0: public class PermissionsCache
1: {
0:     private static final Logger logger = LoggerFactory.getLogger(PermissionsCache.class);
1: 
0:     private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor("PermissionsCacheRefresh",
0:                                                                                              Thread.NORM_PRIORITY);
0:     private final IAuthorizer authorizer;
0:     private final LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> cache;
1: 
0:     public PermissionsCache(int validityPeriod, int updateInterval, int maxEntries, IAuthorizer authorizer)
1:     {
0:         this.authorizer = authorizer;
0:         this.cache = initCache(validityPeriod, updateInterval, maxEntries);
1:     }
1: 
1:     public Set<Permission> getPermissions(AuthenticatedUser user, IResource resource)
1:     {
0:         if (cache == null)
0:             return authorizer.authorize(user, resource);
1: 
1:         try
1:         {
0:             return cache.get(Pair.create(user, resource));
1:         }
1:         catch (ExecutionException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     private LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> initCache(int validityPeriod,
0:                                                                                         int updateInterval,
0:                                                                                         int maxEntries)
1:     {
0:         if (authorizer instanceof AllowAllAuthorizer)
0:             return null;
1: 
0:         if (validityPeriod <= 0)
0:             return null;
1: 
0:         return CacheBuilder.newBuilder()
0:                            .refreshAfterWrite(updateInterval, TimeUnit.MILLISECONDS)
0:                            .expireAfterWrite(validityPeriod, TimeUnit.MILLISECONDS)
0:                            .maximumSize(maxEntries)
0:                            .build(new CacheLoader<Pair<AuthenticatedUser, IResource>, Set<Permission>>()
1:                            {
0:                                public Set<Permission> load(Pair<AuthenticatedUser, IResource> userResource)
1:                                {
0:                                    return authorizer.authorize(userResource.left, userResource.right);
1:                                }
1: 
0:                                public ListenableFuture<Set<Permission>> reload(final Pair<AuthenticatedUser, IResource> userResource,
0:                                                                                final Set<Permission> oldValue)
1:                                {
0:                                    ListenableFutureTask<Set<Permission>> task = ListenableFutureTask.create(new Callable<Set<Permission>>()
1:                                    {
0:                                        public Set<Permission>call() throws Exception
1:                                        {
1:                                            try
1:                                            {
0:                                                return authorizer.authorize(userResource.left, userResource.right);
1:                                            }
0:                                            catch (Exception e)
1:                                            {
0:                                                logger.debug("Error performing async refresh of user permissions", e);
0:                                                throw e;
1:                                            }
1:                                        }
0:                                    });
0:                                    cacheRefreshExecutor.execute(task);
0:                                    return task;
1:                                }
0:                            });
1:     }
1: }
author:Mike Adamson
-------------------------------------------------------------------------------
commit:f54eab7
/////////////////////////////////////////////////////////////////////////
0:         if (!authorizer.requireAuthorization())
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
0:                                                logger.trace("Error performing async refresh of user permissions", e);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:d919cc9
/////////////////////////////////////////////////////////////////////////
0: import java.lang.management.ManagementFactory;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
0: 
0: public class PermissionsCache implements PermissionsCacheMBean
0:     private final String MBEAN_NAME = "org.apache.cassandra.auth:type=PermissionsCache";
0: 
0:     private volatile LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> cache;
1:     public PermissionsCache(IAuthorizer authorizer)
0:         this.cache = initCache(null);
0:         try
0:         {
0:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:             mbs.registerMBean(this, new ObjectName(MBEAN_NAME));
0:         }
0:         catch (Exception e)
0:         {
0:             throw new RuntimeException(e);
0:         }
/////////////////////////////////////////////////////////////////////////
0:     public void invalidate()
0:     {
0:         cache = initCache(null);
0:     }
0: 
0:     public void setValidity(int validityPeriod)
0:     {
0:         DatabaseDescriptor.setPermissionsValidity(validityPeriod);
0:         cache = initCache(cache);
0:     }
0: 
0:     public int getValidity()
0:     {
0:         return DatabaseDescriptor.getPermissionsValidity();
0:     }
0: 
0:     public void setUpdateInterval(int updateInterval)
0:     {
0:         DatabaseDescriptor.setPermissionsUpdateInterval(updateInterval);
0:         cache = initCache(cache);
0:     }
0: 
0:     public int getUpdateInterval()
0:     {
0:         return DatabaseDescriptor.getPermissionsUpdateInterval();
0:     }
0: 
0:     private LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> initCache(
0:                                                              LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> existing)
0:         if (DatabaseDescriptor.getPermissionsValidity() <= 0)
0:         LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>> newcache = CacheBuilder.newBuilder()
0:                            .refreshAfterWrite(DatabaseDescriptor.getPermissionsUpdateInterval(), TimeUnit.MILLISECONDS)
0:                            .expireAfterWrite(DatabaseDescriptor.getPermissionsValidity(), TimeUnit.MILLISECONDS)
0:                            .maximumSize(DatabaseDescriptor.getPermissionsCacheMaxEntries())
/////////////////////////////////////////////////////////////////////////
0:         if (existing != null)
0:             newcache.putAll(existing.asMap());
0:         return newcache;
============================================================================