1:3ae01dd: /*
1:3ae01dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:3ae01dd:  * or more contributor license agreements.  See the NOTICE file
1:3ae01dd:  * distributed with this work for additional information
1:3ae01dd:  * regarding copyright ownership.  The ASF licenses this file
1:3ae01dd:  * to you under the Apache License, Version 2.0 (the
1:3ae01dd:  * "License"); you may not use this file except in compliance
1:3ae01dd:  * with the License.  You may obtain a copy of the License at
1:3ae01dd:  *
1:3ae01dd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3ae01dd:  *
1:3ae01dd:  * Unless required by applicable law or agreed to in writing, software
1:3ae01dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3ae01dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ae01dd:  * See the License for the specific language governing permissions and
1:3ae01dd:  * limitations under the License.
1:3ae01dd:  */
1:3ae01dd: 
1:3ae01dd: package org.apache.cassandra.cql3.validation.entities;
1:3ae01dd: 
1:3ae01dd: import java.util.Arrays;
1:3ae01dd: import java.util.List;
1:3ae01dd: import java.util.Map;
1:3ae01dd: import java.util.Set;
1:3ae01dd: import java.util.TreeMap;
1:3ae01dd: import java.util.TreeSet;
1:3ae01dd: 
1:3ae01dd: import org.junit.Test;
1:3ae01dd: 
1:3ae01dd: import com.datastax.driver.core.DataType;
1:3ae01dd: import com.datastax.driver.core.TupleType;
1:3ae01dd: import com.datastax.driver.core.TupleValue;
1:3ae01dd: import org.apache.cassandra.cql3.CQLTester;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:3ae01dd: 
1:3ae01dd: public class UFPureScriptTupleCollectionTest extends CQLTester
1:3ae01dd: {
1:3ae01dd:     // Just JavaScript UDFs to check how UDF - especially security/class-loading/sandboxing stuff -
1:3ae01dd:     // behaves, if no Java UDF has been executed before.
1:3ae01dd: 
1:3ae01dd:     // Do not add any other test here!
1:3ae01dd:     // See CASSANDRA-10141
1:3ae01dd: 
1:3ae01dd:     @Test
1:3ae01dd:     public void testJavascriptTupleTypeCollection() throws Throwable
1:3ae01dd:     {
1:3ae01dd:         String tupleTypeDef = "tuple<double, list<double>, set<text>, map<int, boolean>>";
1:3ae01dd:         createTable("CREATE TABLE %s (key int primary key, tup frozen<" + tupleTypeDef + ">)");
1:3ae01dd: 
1:3ae01dd:         String fTup1 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:3ae01dd:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:3ae01dd:                                       "RETURNS NULL ON NULL INPUT " +
1:3ae01dd:                                       "RETURNS tuple<double, list<double>, set<text>, map<int, boolean>> " +
1:3ae01dd:                                       "LANGUAGE javascript\n" +
1:3ae01dd:                                       "AS $$" +
1:3ae01dd:                                       "       tup;$$;");
1:3ae01dd:         String fTup2 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:3ae01dd:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:3ae01dd:                                       "RETURNS NULL ON NULL INPUT " +
1:3ae01dd:                                       "RETURNS double " +
1:3ae01dd:                                       "LANGUAGE javascript\n" +
1:3ae01dd:                                       "AS $$" +
1:3ae01dd:                                       "       tup.getDouble(0);$$;");
1:3ae01dd:         String fTup3 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:3ae01dd:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:3ae01dd:                                       "RETURNS NULL ON NULL INPUT " +
1:3ae01dd:                                       "RETURNS list<double> " +
1:3ae01dd:                                       "LANGUAGE javascript\n" +
1:3ae01dd:                                       "AS $$" +
1:3ae01dd:                                       "       tup.getList(1, java.lang.Double.class);$$;");
1:3ae01dd:         String fTup4 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:3ae01dd:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:3ae01dd:                                       "RETURNS NULL ON NULL INPUT " +
1:3ae01dd:                                       "RETURNS set<text> " +
1:3ae01dd:                                       "LANGUAGE javascript\n" +
1:3ae01dd:                                       "AS $$" +
1:3ae01dd:                                       "       tup.getSet(2, java.lang.String.class);$$;");
1:3ae01dd:         String fTup5 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:3ae01dd:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:3ae01dd:                                       "RETURNS NULL ON NULL INPUT " +
1:3ae01dd:                                       "RETURNS map<int, boolean> " +
1:3ae01dd:                                       "LANGUAGE javascript\n" +
1:3ae01dd:                                       "AS $$" +
1:3ae01dd:                                       "       tup.getMap(3, java.lang.Integer.class, java.lang.Boolean.class);$$;");
1:3ae01dd: 
1:3ae01dd:         List<Double> list = Arrays.asList(1d, 2d, 3d);
1:3ae01dd:         Set<String> set = new TreeSet<>(Arrays.asList("one", "three", "two"));
1:3ae01dd:         Map<Integer, Boolean> map = new TreeMap<>();
1:3ae01dd:         map.put(1, true);
1:3ae01dd:         map.put(2, false);
1:3ae01dd:         map.put(3, true);
1:3ae01dd: 
1:3ae01dd:         Object t = tuple(1d, list, set, map);
1:3ae01dd: 
1:3ae01dd:         execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t);
1:3ae01dd: 
1:3ae01dd:         assertRows(execute("SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                    row(t));
1:3ae01dd:         assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                    row(1d));
1:3ae01dd:         assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                    row(list));
1:3ae01dd:         assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                    row(set));
1:3ae01dd:         assertRows(execute("SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                    row(map));
1:3ae01dd: 
1:3ae01dd:         // same test - but via native protocol
1:3ae01dd:         // we use protocol V3 here to encode the expected version because the server
1:3ae01dd:         // always serializes Collections using V3 - see CollectionSerializer's
1:3ae01dd:         // serialize and deserialize methods.
1:e0adc16:         TupleType tType = tupleTypeOf(ProtocolVersion.V3,
1:3ae01dd:                                       DataType.cdouble(),
1:3ae01dd:                                       DataType.list(DataType.cdouble()),
1:3ae01dd:                                       DataType.set(DataType.text()),
1:3ae01dd:                                       DataType.map(DataType.cint(),
1:3ae01dd:                                                    DataType.cboolean()));
1:3ae01dd:         TupleValue tup = tType.newValue(1d, list, set, map);
1:e0adc16:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
1:3ae01dd:         {
1:3ae01dd:             assertRowsNet(version,
1:3ae01dd:                           executeNet(version, "SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                           row(tup));
1:3ae01dd:             assertRowsNet(version,
1:3ae01dd:                           executeNet(version, "SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                           row(1d));
1:3ae01dd:             assertRowsNet(version,
1:3ae01dd:                           executeNet(version, "SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                           row(list));
1:3ae01dd:             assertRowsNet(version,
1:3ae01dd:                           executeNet(version, "SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                           row(set));
1:3ae01dd:             assertRowsNet(version,
1:3ae01dd:                           executeNet(version, "SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
1:3ae01dd:                           row(map));
1:3ae01dd:         }
1:3ae01dd:     }
1:3ae01dd: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         TupleType tType = tupleTypeOf(ProtocolVersion.V3,
1:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:3ae01dd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.TreeMap;
1: import java.util.TreeSet;
1: 
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.DataType;
1: import com.datastax.driver.core.TupleType;
1: import com.datastax.driver.core.TupleValue;
1: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.transport.Server;
1: 
1: public class UFPureScriptTupleCollectionTest extends CQLTester
1: {
1:     // Just JavaScript UDFs to check how UDF - especially security/class-loading/sandboxing stuff -
1:     // behaves, if no Java UDF has been executed before.
1: 
1:     // Do not add any other test here!
1:     // See CASSANDRA-10141
1: 
1:     @Test
1:     public void testJavascriptTupleTypeCollection() throws Throwable
1:     {
1:         String tupleTypeDef = "tuple<double, list<double>, set<text>, map<int, boolean>>";
1:         createTable("CREATE TABLE %s (key int primary key, tup frozen<" + tupleTypeDef + ">)");
1: 
1:         String fTup1 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS tuple<double, list<double>, set<text>, map<int, boolean>> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "       tup;$$;");
1:         String fTup2 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS double " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "       tup.getDouble(0);$$;");
1:         String fTup3 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS list<double> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "       tup.getList(1, java.lang.Double.class);$$;");
1:         String fTup4 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS set<text> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "       tup.getSet(2, java.lang.String.class);$$;");
1:         String fTup5 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
1:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS map<int, boolean> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "       tup.getMap(3, java.lang.Integer.class, java.lang.Boolean.class);$$;");
1: 
1:         List<Double> list = Arrays.asList(1d, 2d, 3d);
1:         Set<String> set = new TreeSet<>(Arrays.asList("one", "three", "two"));
1:         Map<Integer, Boolean> map = new TreeMap<>();
1:         map.put(1, true);
1:         map.put(2, false);
1:         map.put(3, true);
1: 
1:         Object t = tuple(1d, list, set, map);
1: 
1:         execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t);
1: 
1:         assertRows(execute("SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
1:                    row(t));
1:         assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
1:                    row(1d));
1:         assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
1:                    row(list));
1:         assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
1:                    row(set));
1:         assertRows(execute("SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
1:                    row(map));
1: 
1:         // same test - but via native protocol
1:         // we use protocol V3 here to encode the expected version because the server
1:         // always serializes Collections using V3 - see CollectionSerializer's
1:         // serialize and deserialize methods.
0:         TupleType tType = tupleTypeOf(Server.VERSION_3,
1:                                       DataType.cdouble(),
1:                                       DataType.list(DataType.cdouble()),
1:                                       DataType.set(DataType.text()),
1:                                       DataType.map(DataType.cint(),
1:                                                    DataType.cboolean()));
1:         TupleValue tup = tType.newValue(1d, list, set, map);
0:         for (int version : PROTOCOL_VERSIONS)
1:         {
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
1:                           row(tup));
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
1:                           row(1d));
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
1:                           row(list));
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
1:                           row(set));
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
1:                           row(map));
1:         }
1:     }
1: }
============================================================================