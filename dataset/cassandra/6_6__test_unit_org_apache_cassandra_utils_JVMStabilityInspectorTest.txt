1:44e9f23: /*
1:44e9f23:  * Licensed to the Apache Software Foundation (ASF) under one
1:44e9f23:  * or more contributor license agreements.  See the NOTICE file
1:44e9f23:  * distributed with this work for additional information
1:44e9f23:  * regarding copyright ownership.  The ASF licenses this file
1:44e9f23:  * to you under the Apache License, Version 2.0 (the
1:44e9f23:  * "License"); you may not use this file except in compliance
1:44e9f23:  * with the License.  You may obtain a copy of the License at
1:44e9f23:  *
1:44e9f23:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44e9f23:  *
1:44e9f23:  * Unless required by applicable law or agreed to in writing, software
1:44e9f23:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44e9f23:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44e9f23:  * See the License for the specific language governing permissions and
1:44e9f23:  * limitations under the License.
1:44e9f23:  */
1:d4df271: package org.apache.cassandra.utils;
1:d4df271: 
1:f25da97: import java.io.FileNotFoundException;
1:d4df271: import java.io.IOException;
1:f25da97: import java.net.SocketException;
1:d4df271: 
1:9797511: import org.junit.BeforeClass;
1:d4df271: import org.junit.Test;
1:d4df271: 
1:d4df271: import org.apache.cassandra.config.Config;
1:d4df271: import org.apache.cassandra.config.DatabaseDescriptor;
1:d4df271: import org.apache.cassandra.io.FSReadError;
1:d4df271: 
1:d4df271: import static org.junit.Assert.assertFalse;
1:d4df271: import static org.junit.Assert.assertTrue;
1:d4df271: 
1:d4df271: public class JVMStabilityInspectorTest
1:d4df271: {
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:f25da97:     @Test
1:d4df271:     public void testKill() throws Exception
1:f25da97:     {
1:f25da97:         KillerForTests killerForTests = new KillerForTests();
1:f25da97:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:f25da97: 
1:d4df271:         Config.DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:d4df271:         Config.CommitFailurePolicy oldCommitPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:f25da97:         try
1:f25da97:         {
1:f25da97:             killerForTests.reset();
1:d4df271:             JVMStabilityInspector.inspectThrowable(new IOException());
1:d4df271:             assertFalse(killerForTests.wasKilled());
1:d4df271: 
1:d4df271:             killerForTests.reset();
1:d4df271:             JVMStabilityInspector.inspectThrowable(new OutOfMemoryError());
1:d4df271:             assertTrue(killerForTests.wasKilled());
1:d4df271: 
1:d4df271:             DatabaseDescriptor.setDiskFailurePolicy(Config.DiskFailurePolicy.die);
1:d4df271:             killerForTests.reset();
1:d4df271:             JVMStabilityInspector.inspectThrowable(new FSReadError(new IOException(), "blah"));
1:d4df271:             assertTrue(killerForTests.wasKilled());
1:d4df271: 
1:d4df271:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.die);
1:d4df271:             killerForTests.reset();
1:d4df271:             JVMStabilityInspector.inspectCommitLogThrowable(new Throwable());
1:d4df271:             assertTrue(killerForTests.wasKilled());
1:39ab9e0: 
1:d4df271:             killerForTests.reset();
1:39ab9e0:             JVMStabilityInspector.inspectThrowable(new Exception(new IOException()));
1:39ab9e0:             assertFalse(killerForTests.wasKilled());
1:39ab9e0: 
1:39ab9e0:             killerForTests.reset();
1:39ab9e0:             JVMStabilityInspector.inspectThrowable(new Exception(new OutOfMemoryError()));
1:39ab9e0:             assertTrue(killerForTests.wasKilled());
1:39ab9e0: 
1:d4df271:         }
1:d4df271:         finally
1:d4df271:         {
1:d4df271:             JVMStabilityInspector.replaceKiller(originalKiller);
1:d4df271:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:d4df271:             DatabaseDescriptor.setCommitFailurePolicy(oldCommitPolicy);
1:d4df271:         }
1:d4df271:     }
1:d4df271: 
1:d4df271:     @Test
1:c87b6a3:     public void fileHandleTest()
1:d4df271:     {
1:d4df271:         KillerForTests killerForTests = new KillerForTests();
1:d4df271:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
2:a991b64: 
1:d4df271:         try
1:d4df271:         {
1:39ab9e0:             killerForTests.reset();
1:f25da97:             JVMStabilityInspector.inspectThrowable(new SocketException("Should not fail"));
1:f25da97:             assertFalse(killerForTests.wasKilled());
1:f25da97: 
1:f25da97:             killerForTests.reset();
1:f25da97:             JVMStabilityInspector.inspectThrowable(new FileNotFoundException("Also should not fail"));
1:f25da97:             assertFalse(killerForTests.wasKilled());
1:f25da97: 
1:f25da97:             killerForTests.reset();
1:f25da97:             JVMStabilityInspector.inspectThrowable(new SocketException("Too many open files"));
1:f25da97:             assertTrue(killerForTests.wasKilled());
1:f25da97: 
1:f25da97:             killerForTests.reset();
1:f25da97:             JVMStabilityInspector.inspectCommitLogThrowable(new FileNotFoundException("Too many open files"));
1:f25da97:             assertTrue(killerForTests.wasKilled());
1:f25da97:         }
1:f25da97:         finally
1:f25da97:         {
1:f25da97:             JVMStabilityInspector.replaceKiller(originalKiller);
1:f25da97:         }
1:f25da97:     }
1:d4df271: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:cf0b737
commit:a323641
commit:f25da97
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
0: import java.net.ServerSocket;
0: import java.net.Socket;
1: import java.net.SocketException;
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void fileHandleTest() throws FileNotFoundException
1:     {
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1: 
1:         try
1:         {
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new SocketException("Should not fail"));
1:             assertFalse(killerForTests.wasKilled());
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new FileNotFoundException("Also should not fail"));
1:             assertFalse(killerForTests.wasKilled());
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new SocketException("Too many open files"));
1:             assertTrue(killerForTests.wasKilled());
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectCommitLogThrowable(new FileNotFoundException("Too many open files"));
1:             assertTrue(killerForTests.wasKilled());
1:         }
1:         finally
1:         {
1:             JVMStabilityInspector.replaceKiller(originalKiller);
1:         }
1:     }
commit:d4df271
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSReadError;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class JVMStabilityInspectorTest
1: {
1:     @Test
1:     public void testKill() throws Exception
1:     {
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1: 
1:         Config.DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:         Config.CommitFailurePolicy oldCommitPolicy = DatabaseDescriptor.getCommitFailurePolicy();
1:         try
1:         {
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new IOException());
1:             assertFalse(killerForTests.wasKilled());
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new OutOfMemoryError());
1:             assertTrue(killerForTests.wasKilled());
1: 
1:             DatabaseDescriptor.setDiskFailurePolicy(Config.DiskFailurePolicy.die);
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new FSReadError(new IOException(), "blah"));
1:             assertTrue(killerForTests.wasKilled());
1: 
1:             DatabaseDescriptor.setCommitFailurePolicy(Config.CommitFailurePolicy.die);
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectCommitLogThrowable(new Throwable());
1:             assertTrue(killerForTests.wasKilled());
1:         }
1:         finally
1:         {
1:             JVMStabilityInspector.replaceKiller(originalKiller);
1:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:             DatabaseDescriptor.setCommitFailurePolicy(oldCommitPolicy);
1:         }
1:     }
1: 
1: }
author:Paul Macintosh
-------------------------------------------------------------------------------
commit:39ab9e0
/////////////////////////////////////////////////////////////////////////
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new Exception(new IOException()));
1:             assertFalse(killerForTests.wasKilled());
1: 
1:             killerForTests.reset();
1:             JVMStabilityInspector.inspectThrowable(new Exception(new OutOfMemoryError()));
1:             assertTrue(killerForTests.wasKilled());
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Test;
1: 
0: import org.apache.cassandra.config.Config;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.io.FSReadError;
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c87b6a3
/////////////////////////////////////////////////////////////////////////
1:     public void fileHandleTest()
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:44e9f23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================