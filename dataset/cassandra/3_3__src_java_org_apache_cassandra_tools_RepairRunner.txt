1:810c2d5: /*
1:810c2d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:810c2d5:  * or more contributor license agreements.  See the NOTICE file
1:810c2d5:  * distributed with this work for additional information
1:810c2d5:  * regarding copyright ownership.  The ASF licenses this file
1:810c2d5:  * to you under the Apache License, Version 2.0 (the
1:810c2d5:  * "License"); you may not use this file except in compliance
1:810c2d5:  * with the License.  You may obtain a copy of the License at
1:810c2d5:  *
1:810c2d5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:810c2d5:  *
1:810c2d5:  * Unless required by applicable law or agreed to in writing, software
1:810c2d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:810c2d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:810c2d5:  * See the License for the specific language governing permissions and
1:810c2d5:  * limitations under the License.
1:810c2d5:  */
1:810c2d5: package org.apache.cassandra.tools;
2:810c2d5: 
1:810c2d5: import java.io.IOException;
1:810c2d5: import java.io.PrintStream;
1:810c2d5: import java.text.SimpleDateFormat;
1:810c2d5: import java.util.Map;
1:4adb981: import java.util.concurrent.locks.Condition;
1:810c2d5: 
1:810c2d5: import org.apache.cassandra.service.StorageServiceMBean;
1:4adb981: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1:4adb981: import org.apache.cassandra.utils.progress.ProgressEvent;
1:4adb981: import org.apache.cassandra.utils.progress.ProgressEventType;
1:4adb981: import org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener;
1:810c2d5: 
1:4adb981: public class RepairRunner extends JMXNotificationProgressListener
4:810c2d5: {
1:810c2d5:     private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
1:810c2d5: 
1:810c2d5:     private final PrintStream out;
1:810c2d5:     private final StorageServiceMBean ssProxy;
1:810c2d5:     private final String keyspace;
1:810c2d5:     private final Map<String, String> options;
1:4adb981:     private final Condition condition = new SimpleCondition();
1:810c2d5: 
1:4adb981:     private int cmd;
1:4adb981:     private volatile boolean hasNotificationLost;
1:4adb981:     private volatile Exception error;
1:810c2d5: 
1:810c2d5:     public RepairRunner(PrintStream out, StorageServiceMBean ssProxy, String keyspace, Map<String, String> options)
1:810c2d5:     {
1:810c2d5:         this.out = out;
1:810c2d5:         this.ssProxy = ssProxy;
1:810c2d5:         this.keyspace = keyspace;
1:810c2d5:         this.options = options;
4:810c2d5:     }
1:810c2d5: 
1:4adb981:     public void run() throws Exception
1:810c2d5:     {
1:810c2d5:         cmd = ssProxy.repairAsync(keyspace, options);
1:810c2d5:         if (cmd <= 0)
1:810c2d5:         {
1:6a8c747:             // repairAsync can only return 0 for replication factor 1.
1:6a8c747:             String message = String.format("[%s] Replication factor is 1. No repair is needed for keyspace '%s'", format.format(System.currentTimeMillis()), keyspace);
3:810c2d5:             out.println(message);
1:4adb981:         }
1:4adb981:         else
1:4adb981:         {
1:4adb981:             condition.await();
1:4adb981:             if (error != null)
1:4adb981:             {
1:4adb981:                 throw error;
1:4adb981:             }
1:4adb981:             if (hasNotificationLost)
1:4adb981:             {
1:4adb981:                 out.println(String.format("There were some lost notification(s). You should check server log for repair status of keyspace %s", keyspace));
1:4adb981:             }
1:810c2d5:         }
1:810c2d5:     }
1:810c2d5: 
1:4adb981:     @Override
1:4adb981:     public boolean isInterestedIn(String tag)
1:810c2d5:     {
1:4adb981:         return tag.equals("repair:" + cmd);
1:4adb981:     }
1:4adb981: 
1:4adb981:     @Override
1:4adb981:     public void handleNotificationLost(long timestamp, String message)
1:4adb981:     {
1:4adb981:         hasNotificationLost = true;
1:4adb981:     }
1:4adb981: 
1:4adb981:     @Override
1:4adb981:     public void handleConnectionClosed(long timestamp, String message)
1:4adb981:     {
1:4adb981:         handleConnectionFailed(timestamp, message);
1:4adb981:     }
1:4adb981: 
1:4adb981:     @Override
1:4adb981:     public void handleConnectionFailed(long timestamp, String message)
1:4adb981:     {
1:4adb981:         error = new IOException(String.format("[%s] JMX connection closed. You should check server log for repair status of keyspace %s"
1:4adb981:                                                + "(Subsequent keyspaces are not going to be repaired).",
1:4adb981:                                   format.format(timestamp), keyspace));
1:4adb981:         condition.signalAll();
1:4adb981:     }
1:4adb981: 
1:4adb981:     @Override
1:4adb981:     public void progress(String tag, ProgressEvent event)
1:4adb981:     {
1:4adb981:         ProgressEventType type = event.getType();
1:4adb981:         String message = String.format("[%s] %s", format.format(System.currentTimeMillis()), event.getMessage());
1:4adb981:         if (type == ProgressEventType.PROGRESS)
1:810c2d5:         {
1:4adb981:             message = message + " (progress: " + (int)event.getProgressPercentage() + "%)";
1:810c2d5:         }
1:4adb981:         out.println(message);
1:f092f7b:         if (type == ProgressEventType.ERROR)
1:810c2d5:         {
1:f092f7b:             error = new RuntimeException("Repair job has failed with the error message: " + message);
1:810c2d5:         }
1:4adb981:         if (type == ProgressEventType.COMPLETE)
1:810c2d5:         {
1:4adb981:             condition.signalAll();
1:810c2d5:         }
1:810c2d5:     }
1:810c2d5: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:708b053
commit:4adb981
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.Condition;
1: import org.apache.cassandra.utils.concurrent.SimpleCondition;
1: import org.apache.cassandra.utils.progress.ProgressEvent;
1: import org.apache.cassandra.utils.progress.ProgressEventType;
1: import org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener;
1: public class RepairRunner extends JMXNotificationProgressListener
/////////////////////////////////////////////////////////////////////////
1:     private final Condition condition = new SimpleCondition();
1:     private int cmd;
1:     private volatile boolean hasNotificationLost;
1:     private volatile Exception error;
/////////////////////////////////////////////////////////////////////////
1:     public void run() throws Exception
1:         }
1:         else
1:         {
1:             condition.await();
1:             if (error != null)
1:             {
1:                 throw error;
1:             }
1:             if (hasNotificationLost)
1:             {
1:                 out.println(String.format("There were some lost notification(s). You should check server log for repair status of keyspace %s", keyspace));
1:             }
1:     @Override
1:     public boolean isInterestedIn(String tag)
1:         return tag.equals("repair:" + cmd);
1:     }
1: 
1:     @Override
1:     public void handleNotificationLost(long timestamp, String message)
1:     {
1:         hasNotificationLost = true;
1:     }
1: 
1:     @Override
1:     public void handleConnectionClosed(long timestamp, String message)
1:     {
1:         handleConnectionFailed(timestamp, message);
1:     }
1: 
1:     @Override
1:     public void handleConnectionFailed(long timestamp, String message)
1:     {
1:         error = new IOException(String.format("[%s] JMX connection closed. You should check server log for repair status of keyspace %s"
1:                                                + "(Subsequent keyspaces are not going to be repaired).",
1:                                   format.format(timestamp), keyspace));
1:         condition.signalAll();
1:     }
1: 
1:     @Override
1:     public void progress(String tag, ProgressEvent event)
1:     {
1:         ProgressEventType type = event.getType();
1:         String message = String.format("[%s] %s", format.format(System.currentTimeMillis()), event.getMessage());
1:         if (type == ProgressEventType.PROGRESS)
1:             message = message + " (progress: " + (int)event.getProgressPercentage() + "%)";
1:         out.println(message);
1:         if (type == ProgressEventType.COMPLETE)
1:             condition.signalAll();
commit:810c2d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools;
1: 
1: import java.io.IOException;
1: import java.io.PrintStream;
1: import java.text.SimpleDateFormat;
1: import java.util.Map;
0: import javax.management.Notification;
0: import javax.management.NotificationListener;
0: import javax.management.remote.JMXConnectionNotification;
1: 
0: import com.google.common.util.concurrent.AbstractFuture;
1: 
0: import org.apache.cassandra.service.ActiveRepairService;
1: import org.apache.cassandra.service.StorageServiceMBean;
1: 
0: public class RepairRunner extends AbstractFuture<Boolean> implements Runnable, NotificationListener
1: {
1:     private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
1: 
1:     private final PrintStream out;
1:     private final StorageServiceMBean ssProxy;
1:     private final String keyspace;
1:     private final Map<String, String> options;
1: 
0:     private volatile int cmd;
0:     private volatile boolean success;
1: 
1:     public RepairRunner(PrintStream out, StorageServiceMBean ssProxy, String keyspace, Map<String, String> options)
1:     {
1:         this.out = out;
1:         this.ssProxy = ssProxy;
1:         this.keyspace = keyspace;
1:         this.options = options;
1:     }
1: 
0:     public void run()
1:     {
1:         cmd = ssProxy.repairAsync(keyspace, options);
1:         if (cmd <= 0)
1:         {
0:             String message = String.format("[%s] Nothing to repair for keyspace '%s'", format.format(System.currentTimeMillis()), keyspace);
1:             out.println(message);
0:             set(true);
1:         }
1:     }
1: 
0:     public void handleNotification(Notification notification, Object handback)
1:     {
0:         if ("repair".equals(notification.getType()))
1:         {
0:             int[] status = (int[]) notification.getUserData();
0:             assert status.length == 2;
0:             if (cmd == status[0])
1:             {
0:                 String message = String.format("[%s] %s", format.format(notification.getTimeStamp()), notification.getMessage());
1:                 out.println(message);
0:                 // repair status is int array with [0] = cmd number, [1] = status
0:                 if (status[1] == ActiveRepairService.Status.SESSION_FAILED.ordinal())
1:                 {
0:                     success = false;
1:                 }
0:                 else if (status[1] == ActiveRepairService.Status.FINISHED.ordinal())
1:                 {
0:                     set(success);
1:                 }
1:             }
1:         }
0:         else if (JMXConnectionNotification.NOTIFS_LOST.equals(notification.getType()))
1:         {
0:             String message = String.format("[%s] Lost notification. You should check server log for repair status of keyspace %s",
0:                                            format.format(notification.getTimeStamp()),
0:                                            keyspace);
1:             out.println(message);
1:         }
0:         else if (JMXConnectionNotification.FAILED.equals(notification.getType())
0:                  || JMXConnectionNotification.CLOSED.equals(notification.getType()))
1:         {
0:             String message = String.format("JMX connection closed. You should check server log for repair status of keyspace %s"
0:                                            + "(Subsequent keyspaces are not going to be repaired).",
0:                                            keyspace);
0:             setException(new IOException(message));
1:         }
1:     }
1: }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:f092f7b
/////////////////////////////////////////////////////////////////////////
1:         if (type == ProgressEventType.ERROR)
0:         {
1:             error = new RuntimeException("Repair job has failed with the error message: " + message);
0:         }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:6a8c747
/////////////////////////////////////////////////////////////////////////
1:             // repairAsync can only return 0 for replication factor 1.
1:             String message = String.format("[%s] Replication factor is 1. No repair is needed for keyspace '%s'", format.format(System.currentTimeMillis()), keyspace);
============================================================================