1:53a177a: /*
1:53a177a:  * Licensed to the Apache Software Foundation (ASF) under one
1:53a177a:  * or more contributor license agreements.  See the NOTICE file
1:53a177a:  * distributed with this work for additional information
1:53a177a:  * regarding copyright ownership.  The ASF licenses this file
1:53a177a:  * to you under the Apache License, Version 2.0 (the
1:53a177a:  * "License"); you may not use this file except in compliance
1:53a177a:  * with the License.  You may obtain a copy of the License at
1:53a177a:  *
1:53a177a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:53a177a:  *
1:53a177a:  * Unless required by applicable law or agreed to in writing, software
1:53a177a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:53a177a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53a177a:  * See the License for the specific language governing permissions and
1:53a177a:  * limitations under the License.
1:53a177a:  */
1:53a177a: package org.apache.cassandra.batchlog;
1:53a177a: 
1:53a177a: import java.io.IOException;
1:53a177a: import java.nio.ByteBuffer;
1:53a177a: import java.util.ArrayList;
1:53a177a: import java.util.Iterator;
1:53a177a: import java.util.List;
1:53a177a: import java.util.UUID;
1:53a177a: 
1:53a177a: import org.junit.BeforeClass;
1:53a177a: import org.junit.Test;
1:53a177a: 
1:53a177a: import org.apache.cassandra.SchemaLoader;
1:2683806: import org.apache.cassandra.Util;
1:53a177a: import org.apache.cassandra.config.CFMetaData;
1:53a177a: import org.apache.cassandra.db.Keyspace;
1:53a177a: import org.apache.cassandra.db.Mutation;
1:53a177a: import org.apache.cassandra.db.RowUpdateBuilder;
1:53a177a: import org.apache.cassandra.db.marshal.BytesType;
1:53a177a: import org.apache.cassandra.exceptions.ConfigurationException;
1:53a177a: import org.apache.cassandra.io.util.DataInputBuffer;
1:53a177a: import org.apache.cassandra.io.util.DataInputPlus;
1:53a177a: import org.apache.cassandra.io.util.DataOutputBuffer;
1:53a177a: import org.apache.cassandra.net.MessagingService;
1:53a177a: import org.apache.cassandra.schema.KeyspaceParams;
1:53a177a: import org.apache.cassandra.utils.FBUtilities;
1:53a177a: import org.apache.cassandra.utils.UUIDGen;
1:53a177a: 
1:53a177a: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:53a177a: import static org.junit.Assert.assertEquals;
1:2683806: import static org.junit.Assert.assertTrue;
1:53a177a: 
1:53a177a: public class BatchTest
1:53a177a: {
1:53a177a:     private static final String KEYSPACE = "BatchRequestTest";
1:53a177a:     private static final String CF_STANDARD = "Standard";
1:53a177a: 
1:53a177a:     @BeforeClass
1:53a177a:     public static void defineSchema() throws ConfigurationException
1:53a177a:     {
1:53a177a:         SchemaLoader.prepareServer();
1:53a177a:         SchemaLoader.createKeyspace(KEYSPACE,
1:53a177a:                                     KeyspaceParams.simple(1),
1:53a177a:                                     SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD, 1, BytesType.instance));
1:53a177a:     }
1:53a177a: 
1:53a177a:     @Test
1:53a177a:     public void testSerialization() throws IOException
1:53a177a:     {
1:53a177a:         CFMetaData cfm = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF_STANDARD).metadata;
1:53a177a: 
1:53a177a:         long now = FBUtilities.timestampMicros();
1:53a177a:         int version = MessagingService.current_version;
1:53a177a:         UUID uuid = UUIDGen.getTimeUUID();
1:53a177a: 
1:53a177a:         List<Mutation> mutations = new ArrayList<>(10);
1:53a177a:         for (int i = 0; i < 10; i++)
1:53a177a:         {
1:53a177a:             mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), bytes(i))
1:53a177a:                           .clustering("name" + i)
1:53a177a:                           .add("val", "val" + i)
1:53a177a:                           .build());
1:53a177a:         }
1:53a177a: 
1:53a177a:         Batch batch1 = Batch.createLocal(uuid, now, mutations);
1:53a177a:         assertEquals(uuid, batch1.id);
1:53a177a:         assertEquals(now, batch1.creationTime);
1:53a177a:         assertEquals(mutations, batch1.decodedMutations);
1:53a177a: 
1:53a177a:         DataOutputBuffer out = new DataOutputBuffer();
1:53a177a:         Batch.serializer.serialize(batch1, out, version);
1:53a177a: 
1:53a177a:         assertEquals(out.getLength(), Batch.serializer.serializedSize(batch1, version));
1:53a177a: 
1:53a177a:         DataInputPlus dis = new DataInputBuffer(out.getData());
1:53a177a:         Batch batch2 = Batch.serializer.deserialize(dis, version);
1:53a177a: 
1:53a177a:         assertEquals(batch1.id, batch2.id);
1:53a177a:         assertEquals(batch1.creationTime, batch2.creationTime);
1:53a177a:         assertEquals(batch1.decodedMutations.size(), batch2.encodedMutations.size());
1:53a177a: 
1:53a177a:         Iterator<Mutation> it1 = batch1.decodedMutations.iterator();
1:53a177a:         Iterator<ByteBuffer> it2 = batch2.encodedMutations.iterator();
1:53a177a:         while (it1.hasNext())
1:53a177a:         {
1:53a177a:             try (DataInputBuffer in = new DataInputBuffer(it2.next().array()))
1:53a177a:             {
1:53a177a:                 assertEquals(it1.next().toString(), Mutation.serializer.deserialize(in, version).toString());
1:53a177a:             }
1:53a177a:         }
1:53a177a:     }
1:53a177a: 
1:53a177a:     /**
1:53a177a:      * This is just to test decodeMutations() when deserializing,
1:53a177a:      * since Batch will never be serialized at a version 2.2.
1:53a177a:      * @throws IOException
1:53a177a:      */
1:53a177a:     @Test
1:53a177a:     public void testSerializationNonCurrentVersion() throws IOException
1:53a177a:     {
1:53a177a:         CFMetaData cfm = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF_STANDARD).metadata;
1:53a177a: 
1:53a177a:         long now = FBUtilities.timestampMicros();
1:53a177a:         int version = MessagingService.VERSION_22;
1:53a177a:         UUID uuid = UUIDGen.getTimeUUID();
1:53a177a: 
1:53a177a:         List<Mutation> mutations = new ArrayList<>(10);
1:53a177a:         for (int i = 0; i < 10; i++)
1:53a177a:         {
1:53a177a:             mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), bytes(i))
1:53a177a:                           .clustering("name" + i)
1:53a177a:                           .add("val", "val" + i)
1:53a177a:                           .build());
1:53a177a:         }
1:53a177a: 
1:53a177a:         Batch batch1 = Batch.createLocal(uuid, now, mutations);
1:53a177a:         assertEquals(uuid, batch1.id);
1:53a177a:         assertEquals(now, batch1.creationTime);
1:53a177a:         assertEquals(mutations, batch1.decodedMutations);
1:53a177a: 
1:53a177a:         DataOutputBuffer out = new DataOutputBuffer();
1:53a177a:         Batch.serializer.serialize(batch1, out, version);
1:53a177a: 
1:53a177a:         assertEquals(out.getLength(), Batch.serializer.serializedSize(batch1, version));
1:53a177a: 
1:53a177a:         DataInputPlus dis = new DataInputBuffer(out.getData());
1:53a177a:         Batch batch2 = Batch.serializer.deserialize(dis, version);
1:53a177a: 
1:53a177a:         assertEquals(batch1.id, batch2.id);
1:53a177a:         assertEquals(batch1.creationTime, batch2.creationTime);
1:53a177a:         assertEquals(batch1.decodedMutations.size(), batch2.decodedMutations.size());
1:53a177a: 
1:53a177a:         Iterator<Mutation> it1 = batch1.decodedMutations.iterator();
1:53a177a:         Iterator<Mutation> it2 = batch2.decodedMutations.iterator();
1:53a177a:         while (it1.hasNext())
1:2683806:         {
1:2683806:             // We can't simply test the equality of both mutation string representation, that is do:
1:2683806:             //   assertEquals(it1.next().toString(), it2.next().toString());
1:2683806:             // because when deserializing from the old format, the returned iterator will always have it's 'columns()'
1:2683806:             // method return all the table columns (no matter what's the actual content), and the table contains a
1:2683806:             // 'val0' column we're not setting in that test.
1:2683806:             //
1:2683806:             // And it's actually not easy to fix legacy deserialization as we'd need to know which columns are actually
1:2683806:             // set upfront, which would require use to iterate over the whole content first, which would be costly. And
1:2683806:             // as the result of 'columns()' is only meant as a superset of the columns in the iterator, we don't bother.
1:2683806:             Mutation mut1 = it1.next();
1:2683806:             Mutation mut2 = it2.next();
1:2683806:             assertTrue(mut1 + " != " + mut2, Util.sameContent(mut1, mut2));
1:2683806:         }
1:53a177a:     }
1:53a177a: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.Util;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:         {
1:             // We can't simply test the equality of both mutation string representation, that is do:
1:             //   assertEquals(it1.next().toString(), it2.next().toString());
1:             // because when deserializing from the old format, the returned iterator will always have it's 'columns()'
1:             // method return all the table columns (no matter what's the actual content), and the table contains a
1:             // 'val0' column we're not setting in that test.
1:             //
1:             // And it's actually not easy to fix legacy deserialization as we'd need to know which columns are actually
1:             // set upfront, which would require use to iterate over the whole content first, which would be costly. And
1:             // as the result of 'columns()' is only meant as a superset of the columns in the iterator, we don't bother.
1:             Mutation mut1 = it1.next();
1:             Mutation mut2 = it2.next();
1:             assertTrue(mut1 + " != " + mut2, Util.sameContent(mut1, mut2));
1:         }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.batchlog;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.UUID;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: import static org.junit.Assert.assertEquals;
1: 
1: public class BatchTest
1: {
1:     private static final String KEYSPACE = "BatchRequestTest";
1:     private static final String CF_STANDARD = "Standard";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE,
1:                                     KeyspaceParams.simple(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, CF_STANDARD, 1, BytesType.instance));
1:     }
1: 
1:     @Test
1:     public void testSerialization() throws IOException
1:     {
1:         CFMetaData cfm = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF_STANDARD).metadata;
1: 
1:         long now = FBUtilities.timestampMicros();
1:         int version = MessagingService.current_version;
1:         UUID uuid = UUIDGen.getTimeUUID();
1: 
1:         List<Mutation> mutations = new ArrayList<>(10);
1:         for (int i = 0; i < 10; i++)
1:         {
1:             mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), bytes(i))
1:                           .clustering("name" + i)
1:                           .add("val", "val" + i)
1:                           .build());
1:         }
1: 
1:         Batch batch1 = Batch.createLocal(uuid, now, mutations);
1:         assertEquals(uuid, batch1.id);
1:         assertEquals(now, batch1.creationTime);
1:         assertEquals(mutations, batch1.decodedMutations);
1: 
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         Batch.serializer.serialize(batch1, out, version);
1: 
1:         assertEquals(out.getLength(), Batch.serializer.serializedSize(batch1, version));
1: 
1:         DataInputPlus dis = new DataInputBuffer(out.getData());
1:         Batch batch2 = Batch.serializer.deserialize(dis, version);
1: 
1:         assertEquals(batch1.id, batch2.id);
1:         assertEquals(batch1.creationTime, batch2.creationTime);
1:         assertEquals(batch1.decodedMutations.size(), batch2.encodedMutations.size());
1: 
1:         Iterator<Mutation> it1 = batch1.decodedMutations.iterator();
1:         Iterator<ByteBuffer> it2 = batch2.encodedMutations.iterator();
1:         while (it1.hasNext())
1:         {
1:             try (DataInputBuffer in = new DataInputBuffer(it2.next().array()))
1:             {
1:                 assertEquals(it1.next().toString(), Mutation.serializer.deserialize(in, version).toString());
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * This is just to test decodeMutations() when deserializing,
1:      * since Batch will never be serialized at a version 2.2.
1:      * @throws IOException
1:      */
1:     @Test
1:     public void testSerializationNonCurrentVersion() throws IOException
1:     {
1:         CFMetaData cfm = Keyspace.open(KEYSPACE).getColumnFamilyStore(CF_STANDARD).metadata;
1: 
1:         long now = FBUtilities.timestampMicros();
1:         int version = MessagingService.VERSION_22;
1:         UUID uuid = UUIDGen.getTimeUUID();
1: 
1:         List<Mutation> mutations = new ArrayList<>(10);
1:         for (int i = 0; i < 10; i++)
1:         {
1:             mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), bytes(i))
1:                           .clustering("name" + i)
1:                           .add("val", "val" + i)
1:                           .build());
1:         }
1: 
1:         Batch batch1 = Batch.createLocal(uuid, now, mutations);
1:         assertEquals(uuid, batch1.id);
1:         assertEquals(now, batch1.creationTime);
1:         assertEquals(mutations, batch1.decodedMutations);
1: 
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         Batch.serializer.serialize(batch1, out, version);
1: 
1:         assertEquals(out.getLength(), Batch.serializer.serializedSize(batch1, version));
1: 
1:         DataInputPlus dis = new DataInputBuffer(out.getData());
1:         Batch batch2 = Batch.serializer.deserialize(dis, version);
1: 
1:         assertEquals(batch1.id, batch2.id);
1:         assertEquals(batch1.creationTime, batch2.creationTime);
1:         assertEquals(batch1.decodedMutations.size(), batch2.decodedMutations.size());
1: 
1:         Iterator<Mutation> it1 = batch1.decodedMutations.iterator();
1:         Iterator<Mutation> it2 = batch2.decodedMutations.iterator();
1:         while (it1.hasNext())
0:             assertEquals(it1.next().toString(), it2.next().toString());
1:     }
1: }
============================================================================