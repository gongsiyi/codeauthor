1:fd74a03: /*
1:fd74a03:  * Licensed to the Apache Software Foundation (ASF) under one
1:fd74a03:  * or more contributor license agreements.  See the NOTICE file
1:fd74a03:  * distributed with this work for additional information
1:fd74a03:  * regarding copyright ownership.  The ASF licenses this file
1:fd74a03:  * to you under the Apache License, Version 2.0 (the
1:fd74a03:  * "License"); you may not use this file except in compliance
1:fd74a03:  * with the License.  You may obtain a copy of the License at
1:fd74a03:  *
1:fd74a03:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fd74a03:  *
1:fd74a03:  * Unless required by applicable law or agreed to in writing, software
1:fd74a03:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd74a03:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd74a03:  * See the License for the specific language governing permissions and
1:fd74a03:  * limitations under the License.
1:fd74a03:  */
1:fd74a03: package org.apache.cassandra.db.rows;
1:fd74a03: 
1:57e9a83: import org.apache.cassandra.db.PartitionColumns;
1:fd74a03: import org.apache.cassandra.db.filter.ColumnFilter;
1:fd74a03: import org.apache.cassandra.db.transform.Transformation;
1:fd74a03: 
1:fd74a03: /**
1:fd74a03:  * Function to skip cells (from an iterator) that are not part of those queried by the user
1:79c5bc3:  * according to the provided {@code ColumnFilter}. See {@link UnfilteredRowIterators#withOnlyQueriedData}
1:fd74a03:  * for more details.
1:fd74a03:  */
1:fd74a03: public class WithOnlyQueriedData<I extends BaseRowIterator<?>> extends Transformation<I>
1:fd74a03: {
1:fd74a03:     private final ColumnFilter filter;
1:fd74a03: 
1:fd74a03:     public WithOnlyQueriedData(ColumnFilter filter)
1:fd74a03:     {
1:fd74a03:         this.filter = filter;
1:fd74a03:     }
1:fd74a03: 
1:fd74a03:     @Override
1:57e9a83:     protected PartitionColumns applyToPartitionColumns(PartitionColumns columns)
1:57e9a83:     {
1:57e9a83:         return filter.queriedColumns();
1:57e9a83:     }
1:57e9a83: 
1:57e9a83:     @Override
1:fd74a03:     protected Row applyToStatic(Row row)
1:fd74a03:     {
1:fd74a03:         return row.withOnlyQueriedData(filter);
1:fd74a03:     }
1:fd74a03: 
1:fd74a03:     @Override
1:fd74a03:     protected Row applyToRow(Row row)
1:fd74a03:     {
1:fd74a03:         return row.withOnlyQueriedData(filter);
1:fd74a03:     }
1:fd74a03: };
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:57e9a83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.PartitionColumns;
/////////////////////////////////////////////////////////////////////////
1:     protected PartitionColumns applyToPartitionColumns(PartitionColumns columns)
1:     {
1:         return filter.queriedColumns();
1:     }
1: 
1:     @Override
commit:fd74a03
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.filter.ColumnFilter;
1: import org.apache.cassandra.db.transform.Transformation;
1: 
1: /**
1:  * Function to skip cells (from an iterator) that are not part of those queried by the user
0:  * according to the provided {@code ColumnFilter}. See {@link UnfilteredRowIterators#withoutSkippedValues}
1:  * for more details.
1:  */
1: public class WithOnlyQueriedData<I extends BaseRowIterator<?>> extends Transformation<I>
1: {
1:     private final ColumnFilter filter;
1: 
1:     public WithOnlyQueriedData(ColumnFilter filter)
1:     {
1:         this.filter = filter;
1:     }
1: 
1:     @Override
1:     protected Row applyToStatic(Row row)
1:     {
1:         return row.withOnlyQueriedData(filter);
1:     }
1: 
1:     @Override
1:     protected Row applyToRow(Row row)
1:     {
1:         return row.withOnlyQueriedData(filter);
1:     }
1: };
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:79c5bc3
/////////////////////////////////////////////////////////////////////////
1:  * according to the provided {@code ColumnFilter}. See {@link UnfilteredRowIterators#withOnlyQueriedData}
============================================================================