1:75508ec: /*
1:75508ec:  * Licensed to the Apache Software Foundation (ASF) under one
1:75508ec:  * or more contributor license agreements.  See the NOTICE file
1:75508ec:  * distributed with this work for additional information
1:75508ec:  * regarding copyright ownership.  The ASF licenses this file
1:75508ec:  * to you under the Apache License, Version 2.0 (the
1:75508ec:  * "License"); you may not use this file except in compliance
1:75508ec:  * with the License.  You may obtain a copy of the License at
1:75508ec:  *
1:75508ec:  *     http://www.apache.org/licenses/LICENSE-2.0
1:75508ec:  *
1:75508ec:  * Unless required by applicable law or agreed to in writing, software
1:75508ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:75508ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:75508ec:  * See the License for the specific language governing permissions and
1:75508ec:  * limitations under the License.
1:75508ec:  */
1:75508ec: package org.apache.cassandra.io.util;
2:75508ec: 
1:75508ec: import java.io.IOException;
1:75508ec: import java.io.OutputStream;
1:16499ca: import java.nio.ByteBuffer;
1:16499ca: import java.nio.channels.WritableByteChannel;
1:16499ca: 
1:1e92ce4: import io.netty.util.concurrent.FastThreadLocal;
1:16499ca: import org.apache.cassandra.config.Config;
1:16499ca: import org.apache.cassandra.utils.ByteBufferUtil;
1:75508ec: 
1:75508ec: /**
1:16499ca:  * Abstract base class for DataOutputStreams that accept writes from ByteBuffer or Memory and also provide
1:16499ca:  * access to the underlying WritableByteChannel associated with their output stream.
1:16499ca:  *
1:16499ca:  * If no channel is provided by derived classes then a wrapper channel is provided.
1:75508ec:  */
1:16499ca: public abstract class DataOutputStreamPlus extends OutputStream implements DataOutputPlus
2:75508ec: {
1:16499ca:     //Dummy wrapper channel for derived implementations that don't have a channel
1:16499ca:     protected final WritableByteChannel channel;
1:16499ca: 
1:16499ca:     protected DataOutputStreamPlus()
1:75508ec:     {
1:16499ca:         this.channel = newDefaultChannel();
2:75508ec:     }
1:75508ec: 
1:16499ca:     protected DataOutputStreamPlus(WritableByteChannel channel)
1:75508ec:     {
1:16499ca:         this.channel = channel;
1:75508ec:     }
1:75508ec: 
1:16499ca:     private static int MAX_BUFFER_SIZE =
1:16499ca:             Integer.getInteger(Config.PROPERTY_PREFIX + "data_output_stream_plus_temp_buffer_size", 8192);
1:16499ca: 
1:16499ca:     /*
1:16499ca:      * Factored out into separate method to create more flexibility around inlining
1:16499ca:      */
1:16499ca:     protected static byte[] retrieveTemporaryBuffer(int minSize)
1:75508ec:     {
1:16499ca:         byte[] bytes = tempBuffer.get();
1:0352a15:         if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE))
1:16499ca:         {
1:16499ca:             // increase in powers of 2, to avoid wasted repeat allocations
1:16499ca:             bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))];
1:16499ca:             tempBuffer.set(bytes);
1:16499ca:         }
1:16499ca:         return bytes;
1:75508ec:     }
1:75508ec: 
1:1e92ce4:     private static final FastThreadLocal<byte[]> tempBuffer = new FastThreadLocal<byte[]>()
1:75508ec:     {
1:16499ca:         @Override
1:16499ca:         public byte[] initialValue()
1:16499ca:         {
1:16499ca:             return new byte[16];
1:16499ca:         }
1:16499ca:     };
1:16499ca: 
1:16499ca:     // Derived classes can override and *construct* a real channel, if it is not possible to provide one to the constructor
1:16499ca:     protected WritableByteChannel newDefaultChannel()
1:16499ca:     {
1:16499ca:         return new WritableByteChannel()
1:16499ca:         {
1:16499ca: 
1:16499ca:             @Override
1:16499ca:             public boolean isOpen()
1:16499ca:             {
1:16499ca:                 return true;
1:16499ca:             }
1:16499ca: 
1:16499ca:             @Override
1:fed476f:             public void close()
1:16499ca:             {
1:16499ca:             }
1:16499ca: 
1:16499ca:             @Override
1:16499ca:             public int write(ByteBuffer src) throws IOException
1:16499ca:             {
1:16499ca:                 int toWrite = src.remaining();
1:16499ca: 
1:16499ca:                 if (src.hasArray())
1:16499ca:                 {
1:16499ca:                     DataOutputStreamPlus.this.write(src.array(), src.arrayOffset() + src.position(), src.remaining());
1:16499ca:                     src.position(src.limit());
1:16499ca:                     return toWrite;
1:16499ca:                 }
1:16499ca: 
1:16499ca:                 if (toWrite < 16)
1:16499ca:                 {
1:16499ca:                     int offset = src.position();
1:16499ca:                     for (int i = 0 ; i < toWrite ; i++)
1:16499ca:                         DataOutputStreamPlus.this.write(src.get(i + offset));
1:16499ca:                     src.position(src.limit());
1:16499ca:                     return toWrite;
1:16499ca:                 }
1:16499ca: 
1:16499ca:                 byte[] buf = retrieveTemporaryBuffer(toWrite);
1:16499ca: 
1:16499ca:                 int totalWritten = 0;
1:16499ca:                 while (totalWritten < toWrite)
1:16499ca:                 {
1:16499ca:                     int toWriteThisTime = Math.min(buf.length, toWrite - totalWritten);
1:16499ca: 
1:16499ca:                     ByteBufferUtil.arrayCopy(src, src.position() + totalWritten, buf, 0, toWriteThisTime);
1:16499ca: 
1:16499ca:                     DataOutputStreamPlus.this.write(buf, 0, toWriteThisTime);
1:16499ca: 
1:16499ca:                     totalWritten += toWriteThisTime;
1:16499ca:                 }
1:16499ca: 
1:16499ca:                 src.position(src.limit());
1:16499ca:                 return totalWritten;
1:16499ca:             }
1:16499ca: 
1:16499ca:         };
1:75508ec:     }
1:75508ec: 
1:75508ec: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fed476f
/////////////////////////////////////////////////////////////////////////
1:             public void close()
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: import io.netty.util.concurrent.FastThreadLocal;
/////////////////////////////////////////////////////////////////////////
1:     private static final FastThreadLocal<byte[]> tempBuffer = new FastThreadLocal<byte[]>()
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:0352a15
/////////////////////////////////////////////////////////////////////////
1:         if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE))
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.nio.channels.WritableByteChannel;
1: 
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1:  * Abstract base class for DataOutputStreams that accept writes from ByteBuffer or Memory and also provide
1:  * access to the underlying WritableByteChannel associated with their output stream.
1:  *
1:  * If no channel is provided by derived classes then a wrapper channel is provided.
1: public abstract class DataOutputStreamPlus extends OutputStream implements DataOutputPlus
1:     //Dummy wrapper channel for derived implementations that don't have a channel
1:     protected final WritableByteChannel channel;
1: 
1:     protected DataOutputStreamPlus()
1:         this.channel = newDefaultChannel();
1:     protected DataOutputStreamPlus(WritableByteChannel channel)
1:         this.channel = channel;
1:     private static int MAX_BUFFER_SIZE =
1:             Integer.getInteger(Config.PROPERTY_PREFIX + "data_output_stream_plus_temp_buffer_size", 8192);
1: 
1:     /*
1:      * Factored out into separate method to create more flexibility around inlining
1:      */
1:     protected static byte[] retrieveTemporaryBuffer(int minSize)
1:         byte[] bytes = tempBuffer.get();
0:         if (bytes.length < minSize)
1:         {
1:             // increase in powers of 2, to avoid wasted repeat allocations
1:             bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))];
1:             tempBuffer.set(bytes);
1:         }
1:         return bytes;
0:     private static final ThreadLocal<byte[]> tempBuffer = new ThreadLocal<byte[]>()
1:         @Override
1:         public byte[] initialValue()
1:         {
1:             return new byte[16];
1:         }
1:     };
1: 
1:     // Derived classes can override and *construct* a real channel, if it is not possible to provide one to the constructor
1:     protected WritableByteChannel newDefaultChannel()
1:     {
1:         return new WritableByteChannel()
1:         {
1: 
1:             @Override
1:             public boolean isOpen()
1:             {
1:                 return true;
1:             }
1: 
1:             @Override
0:             public void close() throws IOException
1:             {
1:             }
1: 
1:             @Override
1:             public int write(ByteBuffer src) throws IOException
1:             {
1:                 int toWrite = src.remaining();
1: 
1:                 if (src.hasArray())
1:                 {
1:                     DataOutputStreamPlus.this.write(src.array(), src.arrayOffset() + src.position(), src.remaining());
1:                     src.position(src.limit());
1:                     return toWrite;
1:                 }
1: 
1:                 if (toWrite < 16)
1:                 {
1:                     int offset = src.position();
1:                     for (int i = 0 ; i < toWrite ; i++)
1:                         DataOutputStreamPlus.this.write(src.get(i + offset));
1:                     src.position(src.limit());
1:                     return toWrite;
1:                 }
1: 
1:                 byte[] buf = retrieveTemporaryBuffer(toWrite);
1: 
1:                 int totalWritten = 0;
1:                 while (totalWritten < toWrite)
1:                 {
1:                     int toWriteThisTime = Math.min(buf.length, toWrite - totalWritten);
1: 
1:                     ByteBufferUtil.arrayCopy(src, src.position() + totalWritten, buf, 0, toWriteThisTime);
1: 
1:                     DataOutputStreamPlus.this.write(buf, 0, toWriteThisTime);
1: 
1:                     totalWritten += toWriteThisTime;
1:                 }
1: 
1:                 src.position(src.limit());
1:                 return totalWritten;
1:             }
1: 
1:         };
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
0: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
0:  * When possible use {@link DataOutputStreamAndChannel} instead of this class, as it will
0:  * be more efficient. This class is only for situations where it cannot be used
1:  */
0: public class DataOutputStreamPlus extends AbstractDataOutput implements DataOutputPlus
1: {
0:     protected final OutputStream out;
0:     public DataOutputStreamPlus(OutputStream out)
1:     {
0:         this.out = out;
1:     }
1: 
0:     public void write(byte[] buffer, int offset, int count) throws IOException
1:     {
0:         out.write(buffer, offset, count);
1:     }
1: 
0:     public void write(int oneByte) throws IOException
1:     {
0:         out.write(oneByte);
1:     }
1: 
0:     public void close() throws IOException
1:     {
0:         out.close();
1:     }
1: 
0:     public void flush() throws IOException
1:     {
0:         out.flush();
1:     }
1: }
============================================================================