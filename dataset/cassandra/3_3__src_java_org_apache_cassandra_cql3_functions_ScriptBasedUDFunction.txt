1:5790b4a: /*
1:5790b4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5790b4a:  * or more contributor license agreements.  See the NOTICE file
1:5790b4a:  * distributed with this work for additional information
1:5790b4a:  * regarding copyright ownership.  The ASF licenses this file
1:5790b4a:  * to you under the Apache License, Version 2.0 (the
1:5790b4a:  * "License"); you may not use this file except in compliance
1:5790b4a:  * with the License.  You may obtain a copy of the License at
1:5790b4a:  *
1:5790b4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5790b4a:  *
1:5790b4a:  * Unless required by applicable law or agreed to in writing, software
1:5790b4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5790b4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5790b4a:  * See the License for the specific language governing permissions and
1:5790b4a:  * limitations under the License.
1:5790b4a:  */
1:5790b4a: package org.apache.cassandra.cql3.functions;
1:5790b4a: 
1:5790b4a: import java.math.BigDecimal;
1:5790b4a: import java.math.BigInteger;
1:269f078: import java.net.*;
1:5790b4a: import java.nio.ByteBuffer;
1:269f078: import java.security.*;
1:5790b4a: import java.security.cert.Certificate;
1:269f078: import java.util.*;
1:5790b4a: import java.util.concurrent.ExecutorService;
1:269f078: import javax.script.*;
1:5790b4a: 
1:5288d43: import jdk.nashorn.api.scripting.AbstractJSObject;
1:5790b4a: import org.apache.cassandra.concurrent.NamedThreadFactory;
1:5790b4a: import org.apache.cassandra.cql3.ColumnIdentifier;
1:5790b4a: import org.apache.cassandra.db.marshal.AbstractType;
1:5790b4a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:5790b4a: 
1:5790b4a: final class ScriptBasedUDFunction extends UDFunction
1:5790b4a: {
1:5790b4a:     static final Map<String, Compilable> scriptEngines = new HashMap<>();
1:5790b4a: 
1:5790b4a:     private static final ProtectionDomain protectionDomain;
1:5790b4a:     private static final AccessControlContext accessControlContext;
1:5790b4a: 
1:5790b4a:     //
1:5790b4a:     // For scripted UDFs we have to rely on the security mechanisms of the scripting engine and
1:5790b4a:     // SecurityManager - especially SecurityManager.checkPackageAccess(). Unlike Java-UDFs, strict checking
1:5790b4a:     // of class access via the UDF class loader is not possible, since e.g. Nashorn builds its own class loader
1:5790b4a:     // (jdk.nashorn.internal.runtime.ScriptLoader / jdk.nashorn.internal.runtime.NashornLoader) configured with
1:5790b4a:     // a system class loader.
1:5790b4a:     //
1:5790b4a:     private static final String[] allowedPackagesArray =
1:5790b4a:     {
1:5790b4a:     // following required by jdk.nashorn.internal.objects.Global.initJavaAccess()
1:5790b4a:     "",
1:5790b4a:     "com",
1:5790b4a:     "edu",
1:5790b4a:     "java",
1:5790b4a:     "javax",
1:5790b4a:     "javafx",
1:5790b4a:     "org",
1:5790b4a:     // following required by Nashorn runtime
1:5790b4a:     "java.lang",
1:5790b4a:     "java.lang.invoke",
1:5790b4a:     "java.lang.reflect",
1:5790b4a:     "java.nio.charset",
1:5790b4a:     "java.util",
1:5790b4a:     "java.util.concurrent",
1:5790b4a:     "javax.script",
1:5790b4a:     "sun.reflect",
1:5790b4a:     "jdk.internal.org.objectweb.asm.commons",
1:5790b4a:     "jdk.nashorn.internal.runtime",
1:5790b4a:     "jdk.nashorn.internal.runtime.linker",
1:5790b4a:     // following required by Java Driver
1:5790b4a:     "java.math",
1:c997c08:     "java.nio",
1:5790b4a:     "java.text",
1:5790b4a:     "com.google.common.base",
1:c997c08:     "com.google.common.collect",
1:5790b4a:     "com.google.common.reflect",
1:5790b4a:     // following required by UDF
1:5790b4a:     "com.datastax.driver.core",
1:5790b4a:     "com.datastax.driver.core.utils"
1:5790b4a:     };
1:5790b4a: 
1:269f078:     // use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal
1:269f078:     // classes, which triggers AccessControlException from the UDF sandbox
1:269f078:     private static final UDFExecutorService executor =
1:269f078:         new UDFExecutorService(new NamedThreadFactory("UserDefinedScriptFunctions",
1:5790b4a:                                                       Thread.MIN_PRIORITY,
1:5790b4a:                                                       udfClassLoader,
1:3ae01dd:                                                       new SecurityThreadGroup("UserDefinedScriptFunctions",
1:3ae01dd:                                                                               Collections.unmodifiableSet(new HashSet<>(Arrays.asList(allowedPackagesArray))),
1:3ae01dd:                                                                               UDFunction::initializeThread)),
1:5790b4a:                                "userscripts");
1:5790b4a: 
1:5790b4a:     static
1:5790b4a:     {
1:5790b4a:         ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
1:5790b4a:         for (ScriptEngineFactory scriptEngineFactory : scriptEngineManager.getEngineFactories())
1:5790b4a:         {
1:5790b4a:             ScriptEngine scriptEngine = scriptEngineFactory.getScriptEngine();
1:5790b4a:             boolean compilable = scriptEngine instanceof Compilable;
1:5790b4a:             if (compilable)
1:5790b4a:             {
1:5790b4a:                 logger.info("Found scripting engine {} {} - {} {} - language names: {}",
1:5790b4a:                             scriptEngineFactory.getEngineName(), scriptEngineFactory.getEngineVersion(),
1:5790b4a:                             scriptEngineFactory.getLanguageName(), scriptEngineFactory.getLanguageVersion(),
1:5790b4a:                             scriptEngineFactory.getNames());
1:5790b4a:                 for (String name : scriptEngineFactory.getNames())
1:5790b4a:                     scriptEngines.put(name, (Compilable) scriptEngine);
1:5790b4a:             }
1:5790b4a:         }
1:5790b4a: 
1:5790b4a:         try
1:5790b4a:         {
1:5790b4a:             protectionDomain = new ProtectionDomain(new CodeSource(new URL("udf", "localhost", 0, "/script", new URLStreamHandler()
1:5790b4a:             {
1:5790b4a:                 protected URLConnection openConnection(URL u)
1:5790b4a:                 {
1:5790b4a:                     return null;
1:5790b4a:                 }
1:5790b4a:             }), (Certificate[]) null), ThreadAwareSecurityManager.noPermissions);
1:5790b4a:         }
1:5790b4a:         catch (MalformedURLException e)
1:5790b4a:         {
1:5790b4a:             throw new RuntimeException(e);
1:5790b4a:         }
1:5790b4a:         accessControlContext = new AccessControlContext(new ProtectionDomain[]{ protectionDomain });
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     private final CompiledScript script;
1:5288d43:     private final Object udfContextBinding;
1:5790b4a: 
1:5790b4a:     ScriptBasedUDFunction(FunctionName name,
1:5790b4a:                           List<ColumnIdentifier> argNames,
1:5790b4a:                           List<AbstractType<?>> argTypes,
1:5790b4a:                           AbstractType<?> returnType,
1:5790b4a:                           boolean calledOnNullInput,
1:5790b4a:                           String language,
1:5790b4a:                           String body)
1:5790b4a:     {
1:5790b4a:         super(name, argNames, argTypes, returnType, calledOnNullInput, language, body);
1:5790b4a: 
1:5790b4a:         Compilable scriptEngine = scriptEngines.get(language);
1:5790b4a:         if (scriptEngine == null)
1:5790b4a:             throw new InvalidRequestException(String.format("Invalid language '%s' for function '%s'", language, name));
1:5790b4a: 
1:5790b4a:         // execute compilation with no-permissions to prevent evil code e.g. via "static code blocks" / "class initialization"
1:5790b4a:         try
1:5790b4a:         {
1:5790b4a:             this.script = AccessController.doPrivileged((PrivilegedExceptionAction<CompiledScript>) () -> scriptEngine.compile(body),
1:5790b4a:                                                         accessControlContext);
1:5790b4a:         }
1:5790b4a:         catch (PrivilegedActionException x)
1:5790b4a:         {
1:5790b4a:             Throwable e = x.getCause();
1:5790b4a:             logger.info("Failed to compile function '{}' for language {}: ", name, language, e);
1:5790b4a:             throw new InvalidRequestException(
1:5790b4a:                                              String.format("Failed to compile function '%s' for language %s: %s", name, language, e));
1:5790b4a:         }
1:5288d43: 
1:5288d43:         // It's not always possible to simply pass a plain Java object as a binding to Nashorn and
1:5288d43:         // let the script execute methods on it.
1:5288d43:         udfContextBinding =
1:5288d43:             ("Oracle Nashorn".equals(((ScriptEngine) scriptEngine).getFactory().getEngineName()))
1:5288d43:                 ? new UDFContextWrapper()
1:5288d43:                 : udfContext;
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     protected ExecutorService executor()
1:5790b4a:     {
1:5790b4a:         return executor;
1:5790b4a:     }
1:5790b4a: 
1:e0adc16:     public ByteBuffer executeUserDefined(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:5790b4a:     {
1:5790b4a:         Object[] params = new Object[argTypes.size()];
1:5790b4a:         for (int i = 0; i < params.length; i++)
1:5790b4a:             params[i] = compose(protocolVersion, i, parameters.get(i));
1:5790b4a: 
1:adffb36:         Object result = executeScriptInternal(params);
1:adffb36: 
1:adffb36:         return decompose(protocolVersion, result);
1:adffb36:     }
1:adffb36: 
1:adffb36:     /**
1:e0adc16:      * Like {@link UDFunction#executeUserDefined(ProtocolVersion, List)} but the first parameter is already in non-serialized form.
1:adffb36:      * Remaining parameters (2nd paramters and all others) are in {@code parameters}.
1:adffb36:      * This is used to prevent superfluous (de)serialization of the state of aggregates.
1:adffb36:      * Means: scalar functions of aggregates are called using this variant.
1:adffb36:      */
1:e0adc16:     protected Object executeAggregateUserDefined(ProtocolVersion protocolVersion, Object firstParam, List<ByteBuffer> parameters)
1:adffb36:     {
1:adffb36:         Object[] params = new Object[argTypes.size()];
1:adffb36:         params[0] = firstParam;
1:adffb36:         for (int i = 1; i < params.length; i++)
1:adffb36:             params[i] = compose(protocolVersion, i, parameters.get(i - 1));
1:adffb36: 
1:adffb36:         return executeScriptInternal(params);
1:adffb36:     }
1:adffb36: 
1:adffb36:     private Object executeScriptInternal(Object[] params)
1:adffb36:     {
1:5790b4a:         ScriptContext scriptContext = new SimpleScriptContext();
1:5790b4a:         scriptContext.setAttribute("javax.script.filename", this.name.toString(), ScriptContext.ENGINE_SCOPE);
1:5790b4a:         Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE);
1:5790b4a:         for (int i = 0; i < params.length; i++)
1:5790b4a:             bindings.put(argNames.get(i).toString(), params[i]);
1:5288d43:         bindings.put("udfContext", udfContextBinding);
1:5288d43: 
1:5790b4a:         Object result;
1:5790b4a:         try
1:5790b4a:         {
1:5790b4a:             // How to prevent Class.forName() _without_ "help" from the script engine ?
1:5790b4a:             // NOTE: Nashorn enforces a special permission to allow class-loading, which is not granted - so it's fine.
1:5790b4a: 
1:5790b4a:             result = script.eval(scriptContext);
1:5790b4a:         }
1:5790b4a:         catch (ScriptException e)
1:5790b4a:         {
1:5790b4a:             throw new RuntimeException(e);
1:5790b4a:         }
1:5790b4a:         if (result == null)
1:5790b4a:             return null;
1:5790b4a: 
1:a76a8ef:         Class<?> javaReturnType = UDHelper.asJavaClass(returnCodec);
1:5790b4a:         Class<?> resultType = result.getClass();
1:5790b4a:         if (!javaReturnType.isAssignableFrom(resultType))
1:5790b4a:         {
1:5790b4a:             if (result instanceof Number)
1:5790b4a:             {
1:5790b4a:                 Number rNumber = (Number) result;
1:5790b4a:                 if (javaReturnType == Integer.class)
1:5790b4a:                     result = rNumber.intValue();
1:5790b4a:                 else if (javaReturnType == Long.class)
1:5790b4a:                     result = rNumber.longValue();
1:5790b4a:                 else if (javaReturnType == Short.class)
1:5790b4a:                     result = rNumber.shortValue();
1:5790b4a:                 else if (javaReturnType == Byte.class)
1:5790b4a:                     result = rNumber.byteValue();
1:5790b4a:                 else if (javaReturnType == Float.class)
1:5790b4a:                     result = rNumber.floatValue();
1:5790b4a:                 else if (javaReturnType == Double.class)
1:5790b4a:                     result = rNumber.doubleValue();
1:5790b4a:                 else if (javaReturnType == BigInteger.class)
1:5790b4a:                 {
1:5790b4a:                     if (javaReturnType == Integer.class)
1:5790b4a:                         result = rNumber.intValue();
1:5790b4a:                     else if (javaReturnType == Short.class)
1:5790b4a:                         result = rNumber.shortValue();
1:5790b4a:                     else if (javaReturnType == Byte.class)
1:5790b4a:                         result = rNumber.byteValue();
1:5790b4a:                     else if (javaReturnType == Long.class)
1:5790b4a:                         result = rNumber.longValue();
1:5790b4a:                     else if (javaReturnType == Float.class)
1:5790b4a:                         result = rNumber.floatValue();
1:5790b4a:                     else if (javaReturnType == Double.class)
1:5790b4a:                         result = rNumber.doubleValue();
1:5790b4a:                     else if (javaReturnType == BigInteger.class)
1:5790b4a:                     {
1:5790b4a:                         if (rNumber instanceof BigDecimal)
1:5790b4a:                             result = ((BigDecimal) rNumber).toBigInteger();
1:5790b4a:                         else if (rNumber instanceof Double || rNumber instanceof Float)
1:5790b4a:                             result = new BigDecimal(rNumber.toString()).toBigInteger();
1:5790b4a:                         else
1:5790b4a:                             result = BigInteger.valueOf(rNumber.longValue());
1:5790b4a:                     }
1:5790b4a:                     else if (javaReturnType == BigDecimal.class)
1:5790b4a:                         // String c'tor of BigDecimal is more accurate than valueOf(double)
1:5790b4a:                         result = new BigDecimal(rNumber.toString());
1:5790b4a:                 }
1:5790b4a:                 else if (javaReturnType == BigDecimal.class)
1:5790b4a:                     // String c'tor of BigDecimal is more accurate than valueOf(double)
1:5790b4a:                     result = new BigDecimal(rNumber.toString());
1:5790b4a:             }
1:5790b4a:         }
1:5790b4a: 
1:adffb36:         return result;
1:5790b4a:     }
1:5790b4a: 
1:5288d43:     private final class UDFContextWrapper extends AbstractJSObject
1:5288d43:     {
1:5288d43:         private final AbstractJSObject fRetUDT;
1:5288d43:         private final AbstractJSObject fArgUDT;
1:5288d43:         private final AbstractJSObject fRetTup;
1:5288d43:         private final AbstractJSObject fArgTup;
1:5288d43: 
1:5288d43:         UDFContextWrapper()
1:5288d43:         {
1:5288d43:             fRetUDT = new AbstractJSObject()
1:5288d43:             {
1:5288d43:                 public Object call(Object thiz, Object... args)
1:5288d43:                 {
1:5288d43:                     return udfContext.newReturnUDTValue();
1:5288d43:                 }
1:5288d43:             };
1:5288d43:             fArgUDT = new AbstractJSObject()
1:5288d43:             {
1:5288d43:                 public Object call(Object thiz, Object... args)
1:5288d43:                 {
1:5288d43:                     if (args[0] instanceof String)
1:5288d43:                         return udfContext.newArgUDTValue((String) args[0]);
1:5288d43:                     if (args[0] instanceof Number)
1:5288d43:                         return udfContext.newArgUDTValue(((Number) args[0]).intValue());
1:5288d43:                     return super.call(thiz, args);
1:5288d43:                 }
1:5288d43:             };
1:5288d43:             fRetTup = new AbstractJSObject()
1:5288d43:             {
1:5288d43:                 public Object call(Object thiz, Object... args)
1:5288d43:                 {
1:5288d43:                     return udfContext.newReturnTupleValue();
1:5288d43:                 }
1:5288d43:             };
1:5288d43:             fArgTup = new AbstractJSObject()
1:5288d43:             {
1:5288d43:                 public Object call(Object thiz, Object... args)
1:5288d43:                 {
1:5288d43:                     if (args[0] instanceof String)
1:5288d43:                         return udfContext.newArgTupleValue((String) args[0]);
1:5288d43:                     if (args[0] instanceof Number)
1:5288d43:                         return udfContext.newArgTupleValue(((Number) args[0]).intValue());
1:5288d43:                     return super.call(thiz, args);
1:5288d43:                 }
1:5288d43:             };
1:5288d43:         }
1:5288d43: 
1:5288d43:         public Object getMember(String name)
1:5288d43:         {
1:5288d43:             switch(name)
1:5288d43:             {
1:5288d43:                 case "newReturnUDTValue":
1:5288d43:                     return fRetUDT;
1:5288d43:                 case "newArgUDTValue":
1:5288d43:                     return fArgUDT;
1:5288d43:                 case "newReturnTupleValue":
1:5288d43:                     return fRetTup;
1:5288d43:                 case "newArgTupleValue":
1:5288d43:                     return fArgTup;
1:5288d43:             }
1:5288d43:             return super.getMember(name);
1:5288d43:         }
1:5288d43:     }
1:5790b4a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer executeUserDefined(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:      * Like {@link UDFunction#executeUserDefined(ProtocolVersion, List)} but the first parameter is already in non-serialized form.
1:     protected Object executeAggregateUserDefined(ProtocolVersion protocolVersion, Object firstParam, List<ByteBuffer> parameters)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:adffb36
/////////////////////////////////////////////////////////////////////////
1:         Object result = executeScriptInternal(params);
1: 
1:         return decompose(protocolVersion, result);
1:     }
1: 
1:     /**
0:      * Like {@link #executeUserDefined(int, List)} but the first parameter is already in non-serialized form.
1:      * Remaining parameters (2nd paramters and all others) are in {@code parameters}.
1:      * This is used to prevent superfluous (de)serialization of the state of aggregates.
1:      * Means: scalar functions of aggregates are called using this variant.
1:      */
0:     protected Object executeAggregateUserDefined(int protocolVersion, Object firstParam, List<ByteBuffer> parameters)
1:     {
1:         Object[] params = new Object[argTypes.size()];
1:         params[0] = firstParam;
1:         for (int i = 1; i < params.length; i++)
1:             params[i] = compose(protocolVersion, i, parameters.get(i - 1));
1: 
1:         return executeScriptInternal(params);
1:     }
1: 
1:     private Object executeScriptInternal(Object[] params)
1:     {
/////////////////////////////////////////////////////////////////////////
1:         return result;
commit:5288d43
/////////////////////////////////////////////////////////////////////////
1: import jdk.nashorn.api.scripting.AbstractJSObject;
/////////////////////////////////////////////////////////////////////////
1:     private final Object udfContextBinding;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // It's not always possible to simply pass a plain Java object as a binding to Nashorn and
1:         // let the script execute methods on it.
1:         udfContextBinding =
1:             ("Oracle Nashorn".equals(((ScriptEngine) scriptEngine).getFactory().getEngineName()))
1:                 ? new UDFContextWrapper()
1:                 : udfContext;
/////////////////////////////////////////////////////////////////////////
1:         bindings.put("udfContext", udfContextBinding);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final class UDFContextWrapper extends AbstractJSObject
1:     {
1:         private final AbstractJSObject fRetUDT;
1:         private final AbstractJSObject fArgUDT;
1:         private final AbstractJSObject fRetTup;
1:         private final AbstractJSObject fArgTup;
1: 
1:         UDFContextWrapper()
1:         {
1:             fRetUDT = new AbstractJSObject()
1:             {
1:                 public Object call(Object thiz, Object... args)
1:                 {
1:                     return udfContext.newReturnUDTValue();
1:                 }
1:             };
1:             fArgUDT = new AbstractJSObject()
1:             {
1:                 public Object call(Object thiz, Object... args)
1:                 {
1:                     if (args[0] instanceof String)
1:                         return udfContext.newArgUDTValue((String) args[0]);
1:                     if (args[0] instanceof Number)
1:                         return udfContext.newArgUDTValue(((Number) args[0]).intValue());
1:                     return super.call(thiz, args);
1:                 }
1:             };
1:             fRetTup = new AbstractJSObject()
1:             {
1:                 public Object call(Object thiz, Object... args)
1:                 {
1:                     return udfContext.newReturnTupleValue();
1:                 }
1:             };
1:             fArgTup = new AbstractJSObject()
1:             {
1:                 public Object call(Object thiz, Object... args)
1:                 {
1:                     if (args[0] instanceof String)
1:                         return udfContext.newArgTupleValue((String) args[0]);
1:                     if (args[0] instanceof Number)
1:                         return udfContext.newArgTupleValue(((Number) args[0]).intValue());
1:                     return super.call(thiz, args);
1:                 }
1:             };
1:         }
1: 
1:         public Object getMember(String name)
1:         {
1:             switch(name)
1:             {
1:                 case "newReturnUDTValue":
1:                     return fRetUDT;
1:                 case "newArgUDTValue":
1:                     return fArgUDT;
1:                 case "newReturnTupleValue":
1:                     return fRetTup;
1:                 case "newArgTupleValue":
1:                     return fArgTup;
1:             }
1:             return super.getMember(name);
1:         }
1:     }
commit:a76a8ef
/////////////////////////////////////////////////////////////////////////
1:         Class<?> javaReturnType = UDHelper.asJavaClass(returnCodec);
commit:3ae01dd
/////////////////////////////////////////////////////////////////////////
1:                                                       new SecurityThreadGroup("UserDefinedScriptFunctions",
1:                                                                               Collections.unmodifiableSet(new HashSet<>(Arrays.asList(allowedPackagesArray))),
1:                                                                               UDFunction::initializeThread)),
commit:c997c08
/////////////////////////////////////////////////////////////////////////
1:     "java.nio",
1:     "com.google.common.collect",
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
0: import java.net.MalformedURLException;
0: import java.net.URL;
0: import java.net.URLConnection;
0: import java.net.URLStreamHandler;
1: import java.nio.ByteBuffer;
0: import java.security.AccessControlContext;
0: import java.security.AccessController;
0: import java.security.CodeSource;
0: import java.security.PrivilegedActionException;
0: import java.security.PrivilegedExceptionAction;
0: import java.security.ProtectionDomain;
1: import java.security.cert.Certificate;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Map;
1: import java.util.concurrent.ExecutorService;
0: import javax.script.Bindings;
0: import javax.script.Compilable;
0: import javax.script.CompiledScript;
0: import javax.script.ScriptContext;
0: import javax.script.ScriptEngine;
0: import javax.script.ScriptEngineFactory;
0: import javax.script.ScriptEngineManager;
0: import javax.script.ScriptException;
0: import javax.script.SimpleScriptContext;
1: 
0: import org.apache.cassandra.concurrent.JMXEnabledScheduledThreadPoolExecutor;
1: import org.apache.cassandra.concurrent.NamedThreadFactory;
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: final class ScriptBasedUDFunction extends UDFunction
1: {
1:     static final Map<String, Compilable> scriptEngines = new HashMap<>();
1: 
1:     private static final ProtectionDomain protectionDomain;
1:     private static final AccessControlContext accessControlContext;
1: 
1:     //
1:     // For scripted UDFs we have to rely on the security mechanisms of the scripting engine and
1:     // SecurityManager - especially SecurityManager.checkPackageAccess(). Unlike Java-UDFs, strict checking
1:     // of class access via the UDF class loader is not possible, since e.g. Nashorn builds its own class loader
1:     // (jdk.nashorn.internal.runtime.ScriptLoader / jdk.nashorn.internal.runtime.NashornLoader) configured with
1:     // a system class loader.
1:     //
1:     private static final String[] allowedPackagesArray =
1:     {
1:     // following required by jdk.nashorn.internal.objects.Global.initJavaAccess()
1:     "",
1:     "com",
1:     "edu",
1:     "java",
1:     "javax",
1:     "javafx",
1:     "org",
1:     // following required by Nashorn runtime
1:     "java.lang",
1:     "java.lang.invoke",
1:     "java.lang.reflect",
1:     "java.nio.charset",
1:     "java.util",
1:     "java.util.concurrent",
1:     "javax.script",
1:     "sun.reflect",
1:     "jdk.internal.org.objectweb.asm.commons",
1:     "jdk.nashorn.internal.runtime",
1:     "jdk.nashorn.internal.runtime.linker",
1:     // following required by Java Driver
1:     "java.math",
1:     "java.text",
1:     "com.google.common.base",
1:     "com.google.common.reflect",
1:     // following required by UDF
1:     "com.datastax.driver.core",
1:     "com.datastax.driver.core.utils"
1:     };
1: 
0:     private static final JMXEnabledScheduledThreadPoolExecutor executor =
0:     new JMXEnabledScheduledThreadPoolExecutor(
0:                                              DatabaseDescriptor.getMaxHintsThread(),
0:                                              new NamedThreadFactory("UserDefinedScriptFunctions",
1:                                                                     Thread.MIN_PRIORITY,
1:                                                                     udfClassLoader,
0:                                                                     new SecurityThreadGroup("UserDefinedScriptFunctions", Collections.unmodifiableSet(new HashSet<>(Arrays.asList(allowedPackagesArray))))),
1:                                              "userscripts");
1: 
1:     static
1:     {
1:         ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
1:         for (ScriptEngineFactory scriptEngineFactory : scriptEngineManager.getEngineFactories())
1:         {
1:             ScriptEngine scriptEngine = scriptEngineFactory.getScriptEngine();
1:             boolean compilable = scriptEngine instanceof Compilable;
1:             if (compilable)
1:             {
1:                 logger.info("Found scripting engine {} {} - {} {} - language names: {}",
1:                             scriptEngineFactory.getEngineName(), scriptEngineFactory.getEngineVersion(),
1:                             scriptEngineFactory.getLanguageName(), scriptEngineFactory.getLanguageVersion(),
1:                             scriptEngineFactory.getNames());
1:                 for (String name : scriptEngineFactory.getNames())
1:                     scriptEngines.put(name, (Compilable) scriptEngine);
1:             }
1:         }
1: 
1:         try
1:         {
1:             protectionDomain = new ProtectionDomain(new CodeSource(new URL("udf", "localhost", 0, "/script", new URLStreamHandler()
1:             {
1:                 protected URLConnection openConnection(URL u)
1:                 {
1:                     return null;
1:                 }
1:             }), (Certificate[]) null), ThreadAwareSecurityManager.noPermissions);
1:         }
1:         catch (MalformedURLException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         accessControlContext = new AccessControlContext(new ProtectionDomain[]{ protectionDomain });
1:     }
1: 
1:     private final CompiledScript script;
1: 
1:     ScriptBasedUDFunction(FunctionName name,
1:                           List<ColumnIdentifier> argNames,
1:                           List<AbstractType<?>> argTypes,
1:                           AbstractType<?> returnType,
1:                           boolean calledOnNullInput,
1:                           String language,
1:                           String body)
1:     {
1:         super(name, argNames, argTypes, returnType, calledOnNullInput, language, body);
1: 
1:         Compilable scriptEngine = scriptEngines.get(language);
1:         if (scriptEngine == null)
1:             throw new InvalidRequestException(String.format("Invalid language '%s' for function '%s'", language, name));
1: 
1:         // execute compilation with no-permissions to prevent evil code e.g. via "static code blocks" / "class initialization"
1:         try
1:         {
1:             this.script = AccessController.doPrivileged((PrivilegedExceptionAction<CompiledScript>) () -> scriptEngine.compile(body),
1:                                                         accessControlContext);
1:         }
1:         catch (PrivilegedActionException x)
1:         {
1:             Throwable e = x.getCause();
1:             logger.info("Failed to compile function '{}' for language {}: ", name, language, e);
1:             throw new InvalidRequestException(
1:                                              String.format("Failed to compile function '%s' for language %s: %s", name, language, e));
1:         }
1:     }
1: 
1:     protected ExecutorService executor()
1:     {
1:         return executor;
1:     }
1: 
0:     public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters)
1:     {
1:         Object[] params = new Object[argTypes.size()];
1:         for (int i = 0; i < params.length; i++)
1:             params[i] = compose(protocolVersion, i, parameters.get(i));
1: 
1:         ScriptContext scriptContext = new SimpleScriptContext();
1:         scriptContext.setAttribute("javax.script.filename", this.name.toString(), ScriptContext.ENGINE_SCOPE);
1:         Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE);
1:         for (int i = 0; i < params.length; i++)
1:             bindings.put(argNames.get(i).toString(), params[i]);
1: 
1:         Object result;
1:         try
1:         {
1:             // How to prevent Class.forName() _without_ "help" from the script engine ?
1:             // NOTE: Nashorn enforces a special permission to allow class-loading, which is not granted - so it's fine.
1: 
1:             result = script.eval(scriptContext);
1:         }
1:         catch (ScriptException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         if (result == null)
1:             return null;
1: 
0:         Class<?> javaReturnType = returnDataType.asJavaClass();
1:         Class<?> resultType = result.getClass();
1:         if (!javaReturnType.isAssignableFrom(resultType))
1:         {
1:             if (result instanceof Number)
1:             {
1:                 Number rNumber = (Number) result;
1:                 if (javaReturnType == Integer.class)
1:                     result = rNumber.intValue();
1:                 else if (javaReturnType == Long.class)
1:                     result = rNumber.longValue();
1:                 else if (javaReturnType == Short.class)
1:                     result = rNumber.shortValue();
1:                 else if (javaReturnType == Byte.class)
1:                     result = rNumber.byteValue();
1:                 else if (javaReturnType == Float.class)
1:                     result = rNumber.floatValue();
1:                 else if (javaReturnType == Double.class)
1:                     result = rNumber.doubleValue();
1:                 else if (javaReturnType == BigInteger.class)
1:                 {
1:                     if (javaReturnType == Integer.class)
1:                         result = rNumber.intValue();
1:                     else if (javaReturnType == Short.class)
1:                         result = rNumber.shortValue();
1:                     else if (javaReturnType == Byte.class)
1:                         result = rNumber.byteValue();
1:                     else if (javaReturnType == Long.class)
1:                         result = rNumber.longValue();
1:                     else if (javaReturnType == Float.class)
1:                         result = rNumber.floatValue();
1:                     else if (javaReturnType == Double.class)
1:                         result = rNumber.doubleValue();
1:                     else if (javaReturnType == BigInteger.class)
1:                     {
1:                         if (rNumber instanceof BigDecimal)
1:                             result = ((BigDecimal) rNumber).toBigInteger();
1:                         else if (rNumber instanceof Double || rNumber instanceof Float)
1:                             result = new BigDecimal(rNumber.toString()).toBigInteger();
1:                         else
1:                             result = BigInteger.valueOf(rNumber.longValue());
1:                     }
1:                     else if (javaReturnType == BigDecimal.class)
1:                         // String c'tor of BigDecimal is more accurate than valueOf(double)
1:                         result = new BigDecimal(rNumber.toString());
1:                 }
1:                 else if (javaReturnType == BigDecimal.class)
1:                     // String c'tor of BigDecimal is more accurate than valueOf(double)
1:                     result = new BigDecimal(rNumber.toString());
1:             }
1:         }
1: 
0:         return decompose(protocolVersion, result);
1:     }
1: }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
0:         Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType);
commit:269f078
/////////////////////////////////////////////////////////////////////////
1: import java.net.*;
1: import java.security.*;
1: import java.util.*;
1: import javax.script.*;
/////////////////////////////////////////////////////////////////////////
1:     // use a JVM standard ExecutorService as DebuggableThreadPoolExecutor references internal
1:     // classes, which triggers AccessControlException from the UDF sandbox
1:     private static final UDFExecutorService executor =
1:         new UDFExecutorService(new NamedThreadFactory("UserDefinedScriptFunctions",
0:                                                       Thread.MIN_PRIORITY,
0:                                                       udfClassLoader,
0:                                                       new SecurityThreadGroup("UserDefinedScriptFunctions", Collections.unmodifiableSet(new HashSet<>(Arrays.asList(allowedPackagesArray))))),
0:                                "userscripts");
commit:65c695c
============================================================================