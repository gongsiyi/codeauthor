1:07cf56f: /*
1:c8afd76:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8afd76:  * or more contributor license agreements.  See the NOTICE file
1:c8afd76:  * distributed with this work for additional information
1:c8afd76:  * regarding copyright ownership.  The ASF licenses this file
1:c8afd76:  * to you under the Apache License, Version 2.0 (the
1:c8afd76:  * "License"); you may not use this file except in compliance
1:c8afd76:  * with the License.  You may obtain a copy of the License at
1:c8afd76:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8afd76:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:c8afd76:  */
1:c8afd76: package org.apache.cassandra.io.compress;
2:c8afd76: 
1:9797511: import org.apache.cassandra.schema.CompressionParams;
1:895ec3e: 
1:c8afd76: import java.io.IOException;
1:895ec3e: import java.nio.ByteBuffer;
1:820411f: import java.util.Collections;
1:c8afd76: import java.util.Map;
1:820411f: import java.util.Set;
1:c8afd76: import java.util.zip.DataFormatException;
1:c8afd76: import java.util.zip.Deflater;
1:c8afd76: import java.util.zip.Inflater;
1:c8afd76: 
1:c8afd76: public class DeflateCompressor implements ICompressor
1:c8afd76: {
1:c8afd76:     public static final DeflateCompressor instance = new DeflateCompressor();
1:c8afd76: 
1:9797511:     private static final ThreadLocal<byte[]> threadLocalScratchBuffer = new ThreadLocal<byte[]>()
1:9797511:     {
1:9797511:         @Override
1:9797511:         protected byte[] initialValue()
1:9797511:         {
1:9797511:             return new byte[CompressionParams.DEFAULT_CHUNK_LENGTH];
1:9797511:         }
1:9797511:     };
1:9797511: 
1:9797511:     public static byte[] getThreadLocalScratchBuffer()
1:9797511:     {
1:9797511:         return threadLocalScratchBuffer.get();
1:9797511:     }
1:9797511: 
1:c8afd76:     private final ThreadLocal<Deflater> deflater;
1:c8afd76:     private final ThreadLocal<Inflater> inflater;
1:bc7941c: 
1:c8afd76:     public static DeflateCompressor create(Map<String, String> compressionOptions)
1:c8afd76:     {
1:c8afd76:         // no specific options supported so far
1:c8afd76:         return instance;
1:c8afd76:     }
1:c8afd76: 
1:c8afd76:     private DeflateCompressor()
1:c8afd76:     {
1:c8afd76:         deflater = new ThreadLocal<Deflater>()
1:c8afd76:         {
1:c8afd76:             @Override
1:c8afd76:             protected Deflater initialValue()
1:c8afd76:             {
1:c8afd76:                 return new Deflater();
1:c8afd76:             }
1:c8afd76:         };
1:c8afd76:         inflater = new ThreadLocal<Inflater>()
1:c8afd76:         {
1:c8afd76:             @Override
1:c8afd76:             protected Inflater initialValue()
1:c8afd76:             {
1:c8afd76:                 return new Inflater();
1:c8afd76:             }
1:c8afd76:         };
1:c8afd76:     }
1:c8afd76: 
1:820411f:     public Set<String> supportedOptions()
1:820411f:     {
1:820411f:         return Collections.emptySet();
1:820411f:     }
1:820411f: 
1:3adfd15:     public int initialCompressedBufferLength(int sourceLen)
1:c8afd76:     {
1:3adfd15:         // Taken from zlib deflateBound(). See http://www.zlib.net/zlib_tech.html.
1:3adfd15:         return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) + (sourceLen >> 25) + 13;
1:c8afd76:     }
1:c8afd76: 
1:3adfd15:     public void compress(ByteBuffer input, ByteBuffer output)
1:c8afd76:     {
1:3adfd15:         if (input.hasArray() && output.hasArray())
1:3adfd15:         {
1:3adfd15:             int length = compressArray(input.array(), input.arrayOffset() + input.position(), input.remaining(),
1:3adfd15:                                        output.array(), output.arrayOffset() + output.position(), output.remaining());
1:3adfd15:             input.position(input.limit());
1:3adfd15:             output.position(output.position() + length);
1:3adfd15:         }
1:3adfd15:         else
1:3adfd15:             compressBuffer(input, output);
1:3adfd15:     }
1:c8afd76: 
1:3adfd15:     public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)
1:3adfd15:     {
1:c8afd76:         Deflater def = deflater.get();
1:c8afd76:         def.reset();
1:3adfd15:         def.setInput(input, inputOffset, inputLength);
1:c8afd76:         def.finish();
2:c8afd76:         if (def.needsInput())
1:c8afd76:             return 0;
1:c8afd76: 
1:3adfd15:         int len = def.deflate(output, outputOffset, maxOutputLength);
1:3adfd15:         assert def.finished();
1:3adfd15:         return len;
1:3adfd15:     }
1:3adfd15: 
1:3adfd15:     public void compressBuffer(ByteBuffer input, ByteBuffer output)
1:3adfd15:     {
1:3adfd15:         Deflater def = deflater.get();
1:3adfd15:         def.reset();
1:3adfd15: 
1:9797511:         byte[] buffer = getThreadLocalScratchBuffer();
1:3adfd15:         // Use half the buffer for input, half for output.
1:3adfd15:         int chunkLen = buffer.length / 2;
1:3adfd15:         while (input.remaining() > chunkLen)
1:c8afd76:         {
1:3adfd15:             input.get(buffer, 0, chunkLen);
1:3adfd15:             def.setInput(buffer, 0, chunkLen);
1:3adfd15:             while (!def.needsInput())
1:c8afd76:             {
1:3adfd15:                 int len = def.deflate(buffer, chunkLen, chunkLen);
1:3adfd15:                 output.put(buffer, chunkLen, len);
1:3adfd15:             }
1:c8afd76:         }
1:3adfd15:         int inputLength = input.remaining();
1:3adfd15:         input.get(buffer, 0, inputLength);
1:3adfd15:         def.setInput(buffer, 0, inputLength);
1:3adfd15:         def.finish();
1:3adfd15:         while (!def.finished())
1:3adfd15:         {
1:3adfd15:             int len = def.deflate(buffer, chunkLen, chunkLen);
1:3adfd15:             output.put(buffer, chunkLen, len);
1:3adfd15:         }
1:3adfd15:     }
1:3adfd15: 
1:3adfd15: 
1:3adfd15:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:3adfd15:     {
1:3adfd15:         if (input.hasArray() && output.hasArray())
1:3adfd15:         {
1:3adfd15:             int length = uncompress(input.array(), input.arrayOffset() + input.position(), input.remaining(),
1:3adfd15:                                     output.array(), output.arrayOffset() + output.position(), output.remaining());
1:3adfd15:             input.position(input.limit());
1:3adfd15:             output.position(output.position() + length);
1:3adfd15:         }
1:3adfd15:         else
1:3adfd15:             uncompressBuffer(input, output);
1:3adfd15:     }
1:3adfd15: 
1:3adfd15:     public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException
1:3adfd15:     {
1:3adfd15:         try
1:3adfd15:         {
1:3adfd15:             Inflater inf = inflater.get();
1:3adfd15:             inf.reset();
1:3adfd15: 
1:9797511:             byte[] buffer = getThreadLocalScratchBuffer();
1:3adfd15:             // Use half the buffer for input, half for output.
1:3adfd15:             int chunkLen = buffer.length / 2;
1:3adfd15:             while (input.remaining() > chunkLen)
1:c8afd76:             {
1:3adfd15:                 input.get(buffer, 0, chunkLen);
1:3adfd15:                 inf.setInput(buffer, 0, chunkLen);
1:3adfd15:                 while (!inf.needsInput())
1:3adfd15:                 {
1:3adfd15:                     int len = inf.inflate(buffer, chunkLen, chunkLen);
1:3adfd15:                     output.put(buffer, chunkLen, len);
1:3adfd15:                 }
1:c8afd76:             }
1:3adfd15:             int inputLength = input.remaining();
1:3adfd15:             input.get(buffer, 0, inputLength);
1:3adfd15:             inf.setInput(buffer, 0, inputLength);
1:3adfd15:             while (!inf.needsInput())
1:3adfd15:             {
1:3adfd15:                 int len = inf.inflate(buffer, chunkLen, chunkLen);
1:3adfd15:                 output.put(buffer, chunkLen, len);
1:3adfd15:             }
1:3adfd15:         }
1:3adfd15:         catch (DataFormatException e)
1:3adfd15:         {
1:3adfd15:             throw new IOException(e);
1:895ec3e:         }
1:895ec3e:     }
1:895ec3e: 
1:c8afd76:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
1:895ec3e:     {
1:3adfd15:         return uncompress(input, inputOffset, inputLength, output, outputOffset, output.length - outputOffset);
1:3adfd15:     }
1:3adfd15: 
1:3adfd15:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws IOException
1:3adfd15:     {
1:c8afd76:         Inflater inf = inflater.get();
1:c8afd76:         inf.reset();
1:c8afd76:         inf.setInput(input, inputOffset, inputLength);
1:c8afd76:         if (inf.needsInput())
1:c8afd76:             return 0;
1:895ec3e: 
1:c8afd76:         // We assume output is big enough
1:c8afd76:         try
1:895ec3e:         {
1:3adfd15:             return inf.inflate(output, outputOffset, maxOutputLength);
1:c8afd76:         }
1:c8afd76:         catch (DataFormatException e)
1:c8afd76:         {
1:c8afd76:             throw new IOException(e);
1:c8afd76:         }
1:c8afd76:     }
1:895ec3e: 
1:3adfd15:     public boolean supports(BufferType bufferType)
1:c8afd76:     {
1:3adfd15:         return true;
1:c8afd76:     }
1:c8afd76: 
1:3adfd15:     public BufferType preferredBufferType()
1:c8afd76:     {
1:3adfd15:         // Prefer array-backed buffers.
1:3adfd15:         return BufferType.ON_HEAP;
1:c8afd76:     }
1:c8afd76: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.CompressionParams;
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<byte[]> threadLocalScratchBuffer = new ThreadLocal<byte[]>()
1:     {
1:         @Override
1:         protected byte[] initialValue()
1:         {
1:             return new byte[CompressionParams.DEFAULT_CHUNK_LENGTH];
1:         }
1:     };
1: 
1:     public static byte[] getThreadLocalScratchBuffer()
1:     {
1:         return threadLocalScratchBuffer.get();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         byte[] buffer = getThreadLocalScratchBuffer();
/////////////////////////////////////////////////////////////////////////
1:             byte[] buffer = getThreadLocalScratchBuffer();
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:3adfd15
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     public int initialCompressedBufferLength(int sourceLen)
1:         // Taken from zlib deflateBound(). See http://www.zlib.net/zlib_tech.html.
1:         return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) + (sourceLen >> 25) + 13;
1:     public void compress(ByteBuffer input, ByteBuffer output)
1:         if (input.hasArray() && output.hasArray())
1:         {
1:             int length = compressArray(input.array(), input.arrayOffset() + input.position(), input.remaining(),
1:                                        output.array(), output.arrayOffset() + output.position(), output.remaining());
1:             input.position(input.limit());
1:             output.position(output.position() + length);
1:         }
1:         else
1:             compressBuffer(input, output);
1:     }
1:     public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)
1:     {
1:         def.setInput(input, inputOffset, inputLength);
1:         int len = def.deflate(output, outputOffset, maxOutputLength);
1:         assert def.finished();
1:         return len;
1:     }
1: 
1:     public void compressBuffer(ByteBuffer input, ByteBuffer output)
1:     {
1:         Deflater def = deflater.get();
1:         def.reset();
1: 
0:         byte[] buffer = FBUtilities.getThreadLocalScratchBuffer();
1:         // Use half the buffer for input, half for output.
1:         int chunkLen = buffer.length / 2;
1:         while (input.remaining() > chunkLen)
1:             input.get(buffer, 0, chunkLen);
1:             def.setInput(buffer, 0, chunkLen);
1:             while (!def.needsInput())
1:                 int len = def.deflate(buffer, chunkLen, chunkLen);
1:                 output.put(buffer, chunkLen, len);
1:         }
1:         int inputLength = input.remaining();
1:         input.get(buffer, 0, inputLength);
1:         def.setInput(buffer, 0, inputLength);
1:         def.finish();
1:         while (!def.finished())
1:         {
1:             int len = def.deflate(buffer, chunkLen, chunkLen);
1:             output.put(buffer, chunkLen, len);
1:         }
1:     }
1: 
1: 
1:     public void uncompress(ByteBuffer input, ByteBuffer output) throws IOException
1:     {
1:         if (input.hasArray() && output.hasArray())
1:         {
1:             int length = uncompress(input.array(), input.arrayOffset() + input.position(), input.remaining(),
1:                                     output.array(), output.arrayOffset() + output.position(), output.remaining());
1:             input.position(input.limit());
1:             output.position(output.position() + length);
1:         }
1:         else
1:             uncompressBuffer(input, output);
1:     }
1: 
1:     public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException
1:     {
1:         try
1:         {
1:             Inflater inf = inflater.get();
1:             inf.reset();
1: 
0:             byte[] buffer = FBUtilities.getThreadLocalScratchBuffer();
1:             // Use half the buffer for input, half for output.
1:             int chunkLen = buffer.length / 2;
1:             while (input.remaining() > chunkLen)
1:                 input.get(buffer, 0, chunkLen);
1:                 inf.setInput(buffer, 0, chunkLen);
1:                 while (!inf.needsInput())
1:                 {
1:                     int len = inf.inflate(buffer, chunkLen, chunkLen);
1:                     output.put(buffer, chunkLen, len);
1:                 }
1:             int inputLength = input.remaining();
1:             input.get(buffer, 0, inputLength);
1:             inf.setInput(buffer, 0, inputLength);
1:             while (!inf.needsInput())
1:             {
1:                 int len = inf.inflate(buffer, chunkLen, chunkLen);
1:                 output.put(buffer, chunkLen, len);
1:             }
1:         }
1:         catch (DataFormatException e)
1:         {
1:             throw new IOException(e);
1:         return uncompress(input, inputOffset, inputLength, output, outputOffset, output.length - outputOffset);
1:     }
1: 
1:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:             return inf.inflate(output, outputOffset, maxOutputLength);
/////////////////////////////////////////////////////////////////////////
1:     public boolean supports(BufferType bufferType)
1:         return true;
1:     public BufferType preferredBufferType()
1:         // Prefer array-backed buffers.
1:         return BufferType.ON_HEAP;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aedce5f
/////////////////////////////////////////////////////////////////////////
0:     public int uncompress(ByteBuffer input, ByteBuffer output) throws IOException
0:         if (input.hasArray())
0:             return uncompress(input.array(), input.arrayOffset() + input.position(), input.remaining(), output.array(), output.arrayOffset() + output.position());
0:         return uncompress(ByteBufferUtil.getArray(input), 0, input.remaining(), output.array(), output.arrayOffset() + output.position());
author:blambov
-------------------------------------------------------------------------------
commit:44f8254
/////////////////////////////////////////////////////////////////////////
0:         def.setInput(src.array(), src.arrayOffset() + src.position(), src.remaining());
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:bc7941c
/////////////////////////////////////////////////////////////////////////
0:     public int compress(ByteBuffer src, ICompressor.WrappedByteBuffer dest)
0:         assert dest.buffer.hasArray();
1: 
0:         def.setInput(src.array(), src.position(), src.limit());
0:         int startPos = dest.buffer.position();
0:             int arrayOffset = dest.buffer.arrayOffset();
0:             int len = def.deflate(dest.buffer.array(), arrayOffset + dest.buffer.position(), dest.buffer.remaining());
0:             dest.buffer.position(dest.buffer.position() + len);
0:                 return dest.buffer.position() - startPos;
0:                 ByteBuffer newDest = ByteBuffer.allocate(dest.buffer.capacity()*4/3 + 1);
0:                 dest.buffer.rewind();
0:                 newDest.put(dest.buffer);
0:                 dest.buffer = newDest;
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:895ec3e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public int uncompress(ByteBuffer input_, ByteBuffer output) throws IOException
1:     {
0:         if (!output.hasArray())
0:             throw new IllegalArgumentException("DeflateCompressor doesn't work with direct byte buffers");
1: 
0:         byte[] input = ByteBufferUtil.getArray(input_);
0:         return uncompress(input, 0, input.length, output.array(), output.arrayOffset() + output.position());
1:     }
1: 
0:     public boolean useDirectOutputByteBuffers()
1:     {
0:         return false;
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9ecda72
/////////////////////////////////////////////////////////////////////////
0:     public int compress(byte[] input, int inputOffset, int inputLength, ICompressor.WrappedArray output, int outputOffset)
commit:6e8c237
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:820411f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     public Set<String> supportedOptions()
1:     {
1:         return Collections.emptySet();
1:     }
1: 
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:6f38e10
/////////////////////////////////////////////////////////////////////////
0:             if (def.finished())
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.io.compress;
1: 
1: import java.io.IOException;
0: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.zip.DataFormatException;
1: import java.util.zip.Deflater;
1: import java.util.zip.Inflater;
1: 
1: public class DeflateCompressor implements ICompressor
1: {
1:     public static final DeflateCompressor instance = new DeflateCompressor();
1: 
1:     private final ThreadLocal<Deflater> deflater;
1:     private final ThreadLocal<Inflater> inflater;
1: 
1:     public static DeflateCompressor create(Map<String, String> compressionOptions)
1:     {
1:         // no specific options supported so far
1:         return instance;
1:     }
1: 
1:     private DeflateCompressor()
1:     {
1:         deflater = new ThreadLocal<Deflater>()
1:         {
1:             @Override
1:             protected Deflater initialValue()
1:             {
1:                 return new Deflater();
1:             }
1:         };
1:         inflater = new ThreadLocal<Inflater>()
1:         {
1:             @Override
1:             protected Inflater initialValue()
1:             {
1:                 return new Inflater();
1:             }
1:         };
1:     }
1: 
0:     public int initialCompressedBufferLength(int chunkLength)
1:     {
0:         return chunkLength;
1:     }
1: 
0:     public int compress(byte[] input, int inputOffset, int inputLength, ICompressor.WrappedArray output, int outputOffset) throws IOException
1:     {
1:         Deflater def = deflater.get();
1:         def.reset();
0:         def.setInput(input, inputOffset, inputLength);
1:         def.finish();
1:         if (def.needsInput())
1:             return 0;
1: 
0:         int offs = outputOffset;
0:         while (true)
1:         {
0:             offs += def.deflate(output.buffer, offs, output.buffer.length - offs);
1:             if (def.needsInput())
1:             {
0:                 return offs - outputOffset;
1:             }
0:             else
1:             {
0:                 // We're not done, output was too small. Increase it and continue
0:                 byte[] newBuffer = new byte[(output.buffer.length*4)/3 + 1];
0:                 System.arraycopy(output.buffer, 0, newBuffer, 0, offs);
0:                 output.buffer = newBuffer;
1:             }
1:         }
1:     }
1: 
1:     public int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset) throws IOException
1:     {
1:         Inflater inf = inflater.get();
1:         inf.reset();
1:         inf.setInput(input, inputOffset, inputLength);
1:         if (inf.needsInput())
1:             return 0;
1: 
1:         // We assume output is big enough
1:         try
1:         {
0:             return inf.inflate(output, outputOffset, output.length - outputOffset);
1:         }
1:         catch (DataFormatException e)
1:         {
1:             throw new IOException(e);
1:         }
1:     }
1: }
============================================================================