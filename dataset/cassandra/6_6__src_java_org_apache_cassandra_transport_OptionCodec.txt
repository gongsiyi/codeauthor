1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport;
2:6d3a3ee: 
1:6d3a3ee: import java.lang.reflect.Array;
1:6d3a3ee: import java.util.EnumMap;
1:6d3a3ee: import java.util.Map;
1:6d3a3ee: 
1:cbf304e: import io.netty.buffer.ByteBuf;
1:6d3a3ee: 
1:cbf304e: import io.netty.buffer.Unpooled;
1:6d3a3ee: import org.apache.cassandra.utils.Pair;
1:6d3a3ee: 
1:6d3a3ee: public class OptionCodec<T extends Enum<T> & OptionCodec.Codecable<T>>
1:6d3a3ee: {
1:6d3a3ee:     public interface Codecable<T extends Enum<T>>
1:6d3a3ee:     {
1:e0adc16:         public int getId(ProtocolVersion version);
1:6d3a3ee: 
1:e0adc16:         public Object readValue(ByteBuf cb, ProtocolVersion version);
1:e0adc16:         public void writeValue(Object value, ByteBuf cb, ProtocolVersion version);
1:e0adc16:         public int serializedValueSize(Object obj, ProtocolVersion version);
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     private final Class<T> klass;
1:6d3a3ee:     private final T[] ids;
1:6d3a3ee: 
1:6d3a3ee:     @SuppressWarnings({"unchecked"})
1:6d3a3ee:     public OptionCodec(Class<T> klass)
1:6d3a3ee:     {
1:6d3a3ee:         this.klass = klass;
1:6d3a3ee: 
1:6d3a3ee:         T[] values = klass.getEnumConstants();
1:6d3a3ee:         int maxId = -1;
1:6d3a3ee:         for (T opt : values)
1:e0adc16:             maxId = Math.max(maxId, opt.getId(ProtocolVersion.CURRENT));
1:6d3a3ee:         ids = (T[])Array.newInstance(klass, maxId + 1);
1:6d3a3ee:         for (T opt : values)
1:6d3a3ee:         {
1:e0adc16:             if (ids[opt.getId(ProtocolVersion.CURRENT)] != null)
1:e0adc16:                 throw new IllegalStateException(String.format("Duplicate option id %d", opt.getId(ProtocolVersion.CURRENT)));
1:e0adc16:             ids[opt.getId(ProtocolVersion.CURRENT)] = opt;
1:6d3a3ee:         }
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     private T fromId(int id)
1:6d3a3ee:     {
1:6d3a3ee:         T opt = ids[id];
1:6d3a3ee:         if (opt == null)
1:6d3a3ee:             throw new ProtocolException(String.format("Unknown option id %d", id));
1:6d3a3ee:         return opt;
1:6d3a3ee:     }
1:6d3a3ee: 
1:e0adc16:     public Map<T, Object> decode(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:     {
1:6d3a3ee:         EnumMap<T, Object> options = new EnumMap<T, Object>(klass);
1:6d3a3ee:         int n = body.readUnsignedShort();
1:6d3a3ee:         for (int i = 0; i < n; i++)
1:6d3a3ee:         {
1:6d3a3ee:             T opt = fromId(body.readUnsignedShort());
1:9872b74:             Object value = opt.readValue(body, version);
1:6d3a3ee:             if (options.containsKey(opt))
1:732d83b:                 throw new ProtocolException(String.format("Duplicate option %s in message", opt.name()));
1:6d3a3ee:             options.put(opt, value);
1:6d3a3ee:         }
1:6d3a3ee:         return options;
1:6d3a3ee:     }
1:6d3a3ee: 
1:e0adc16:     public ByteBuf encode(Map<T, Object> options, ProtocolVersion version)
1:6d3a3ee:     {
1:6d3a3ee:         int optLength = 2;
1:6d3a3ee:         for (Map.Entry<T, Object> entry : options.entrySet())
1:9872b74:             optLength += 2 + entry.getKey().serializedValueSize(entry.getValue(), version);
1:cbf304e:         ByteBuf cb = Unpooled.buffer(optLength);
1:6d3a3ee:         cb.writeShort(options.size());
1:6d3a3ee:         for (Map.Entry<T, Object> entry : options.entrySet())
1:6d3a3ee:         {
1:6d3a3ee:             T opt = entry.getKey();
1:4a5c282:             cb.writeShort(opt.getId(version));
1:9872b74:             opt.writeValue(entry.getValue(), cb, version);
1:6d3a3ee:         }
2:6d3a3ee:         return cb;
1:6d3a3ee:     }
1:6d3a3ee: 
1:e0adc16:     public Pair<T, Object> decodeOne(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:     {
1:6d3a3ee:         T opt = fromId(body.readUnsignedShort());
1:9872b74:         Object value = opt.readValue(body, version);
1:6d3a3ee:         return Pair.create(opt, value);
1:6d3a3ee:     }
1:6d3a3ee: 
1:e0adc16:     public void writeOne(Pair<T, Object> option, ByteBuf dest, ProtocolVersion version)
1:6d3a3ee:     {
1:6d3a3ee:         T opt = option.left;
1:6d3a3ee:         Object obj = option.right;
1:4a5c282:         dest.writeShort(opt.getId(version));
1:9872b74:         opt.writeValue(obj, dest, version);
1:6d3a3ee:     }
1:6d3a3ee: 
1:e0adc16:     public int oneSerializedSize(Pair<T, Object> option, ProtocolVersion version)
1:ba231f4:     {
1:ba231f4:         T opt = option.left;
1:ba231f4:         Object obj = option.right;
1:9872b74:         return 2 + opt.serializedValueSize(obj, version);
1:6d3a3ee:     }
1:ba231f4: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         public int getId(ProtocolVersion version);
1:         public Object readValue(ByteBuf cb, ProtocolVersion version);
1:         public void writeValue(Object value, ByteBuf cb, ProtocolVersion version);
1:         public int serializedValueSize(Object obj, ProtocolVersion version);
/////////////////////////////////////////////////////////////////////////
1:             maxId = Math.max(maxId, opt.getId(ProtocolVersion.CURRENT));
1:             if (ids[opt.getId(ProtocolVersion.CURRENT)] != null)
1:                 throw new IllegalStateException(String.format("Duplicate option id %d", opt.getId(ProtocolVersion.CURRENT)));
1:             ids[opt.getId(ProtocolVersion.CURRENT)] = opt;
/////////////////////////////////////////////////////////////////////////
1:     public Map<T, Object> decode(ByteBuf body, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuf encode(Map<T, Object> options, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     public Pair<T, Object> decodeOne(ByteBuf body, ProtocolVersion version)
1:     public void writeOne(Pair<T, Object> option, ByteBuf dest, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     public int oneSerializedSize(Pair<T, Object> option, ProtocolVersion version)
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:4a5c282
/////////////////////////////////////////////////////////////////////////
0:         public int getId(int version);
/////////////////////////////////////////////////////////////////////////
0:             maxId = Math.max(maxId, opt.getId(Server.CURRENT_VERSION));
0:             if (ids[opt.getId(Server.CURRENT_VERSION)] != null)
0:                 throw new IllegalStateException(String.format("Duplicate option id %d", opt.getId(Server.CURRENT_VERSION)));
0:             ids[opt.getId(Server.CURRENT_VERSION)] = opt;
/////////////////////////////////////////////////////////////////////////
1:             cb.writeShort(opt.getId(version));
/////////////////////////////////////////////////////////////////////////
1:         dest.writeShort(opt.getId(version));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9872b74
/////////////////////////////////////////////////////////////////////////
0:         public Object readValue(ByteBuf cb, int version);
0:         public void writeValue(Object value, ByteBuf cb, int version);
0:         public int serializedValueSize(Object obj, int version);
/////////////////////////////////////////////////////////////////////////
0:     public Map<T, Object> decode(ByteBuf body, int version)
1:             Object value = opt.readValue(body, version);
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuf encode(Map<T, Object> options, int version)
1:             optLength += 2 + entry.getKey().serializedValueSize(entry.getValue(), version);
1:             opt.writeValue(entry.getValue(), cb, version);
0:     public Pair<T, Object> decodeOne(ByteBuf body, int version)
1:         Object value = opt.readValue(body, version);
0:     public void writeOne(Pair<T, Object> option, ByteBuf dest, int version)
1:         opt.writeValue(obj, dest, version);
0:     public int oneSerializedSize(Pair<T, Object> option, int version)
1:         return 2 + opt.serializedValueSize(obj, version);
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
0:     public void writeOne(Pair<T, Object> option, ChannelBuffer dest)
0:         dest.writeShort(opt.getId());
0:         opt.writeValue(obj, dest);
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport;
1: 
1: import java.lang.reflect.Array;
0: import java.util.ArrayList;
1: import java.util.EnumMap;
0: import java.util.List;
1: import java.util.Map;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
1: import org.apache.cassandra.utils.Pair;
1: 
1: public class OptionCodec<T extends Enum<T> & OptionCodec.Codecable<T>>
1: {
1:     public interface Codecable<T extends Enum<T>>
1:     {
0:         public int getId();
1: 
0:         public Object readValue(ChannelBuffer cb);
0:         public void writeValue(Object value, ChannelBuffer cb);
0:         public int serializedValueSize(Object obj);
1:     }
1: 
1:     private final Class<T> klass;
1:     private final T[] ids;
1: 
1:     @SuppressWarnings({"unchecked"})
1:     public OptionCodec(Class<T> klass)
1:     {
1:         this.klass = klass;
1: 
1:         T[] values = klass.getEnumConstants();
1:         int maxId = -1;
1:         for (T opt : values)
0:             maxId = Math.max(maxId, opt.getId());
1:         ids = (T[])Array.newInstance(klass, maxId + 1);
1:         for (T opt : values)
1:         {
0:             if (ids[opt.getId()] != null)
0:                 throw new IllegalStateException(String.format("Duplicate option id %d", opt.getId()));
0:             ids[opt.getId()] = opt;
1:         }
1:     }
1: 
1:     private T fromId(int id)
1:     {
1:         T opt = ids[id];
1:         if (opt == null)
1:             throw new ProtocolException(String.format("Unknown option id %d", id));
1:         return opt;
1:     }
1: 
0:     public Map<T, Object> decode(ChannelBuffer body)
1:     {
1:         EnumMap<T, Object> options = new EnumMap<T, Object>(klass);
1:         int n = body.readUnsignedShort();
1:         for (int i = 0; i < n; i++)
1:         {
1:             T opt = fromId(body.readUnsignedShort());
0:             Object value = opt.readValue(body);
1:             if (options.containsKey(opt))
0:                 throw new ProtocolException(String.format("Duplicate option %d in message", opt));
1:             options.put(opt, value);
1:         }
1:         return options;
1:     }
1: 
0:     public ChannelBuffer encode(Map<T, Object> options)
1:     {
1:         int optLength = 2;
1:         for (Map.Entry<T, Object> entry : options.entrySet())
0:             optLength += 2 + entry.getKey().serializedValueSize(entry.getValue());
0:         ChannelBuffer cb = ChannelBuffers.buffer(optLength);
1:         cb.writeShort(options.size());
1:         for (Map.Entry<T, Object> entry : options.entrySet())
1:         {
1:             T opt = entry.getKey();
0:             cb.writeShort(opt.getId());
0:             opt.writeValue(entry.getValue(), cb);
1:         }
1:         return cb;
1:     }
1: 
0:     public Pair<T, Object> decodeOne(ChannelBuffer body)
1:     {
1:         T opt = fromId(body.readUnsignedShort());
0:         Object value = opt.readValue(body);
1:         return Pair.create(opt, value);
1:     }
1: 
0:     public ChannelBuffer encodeOne(Pair<T, Object> option)
1:     {
1:         T opt = option.left;
1:         Object obj = option.right;
1: 
0:         int l = 2 + opt.serializedValueSize(obj);
0:         ChannelBuffer cb = ChannelBuffers.buffer(l);
1: 
0:         cb.writeShort(opt.getId());
0:         opt.writeValue(obj, cb);
1:         return cb;
1:     }
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
1: import io.netty.buffer.Unpooled;
/////////////////////////////////////////////////////////////////////////
0:         public Object readValue(ByteBuf cb);
0:         public void writeValue(Object value, ByteBuf cb);
/////////////////////////////////////////////////////////////////////////
0:     public Map<T, Object> decode(ByteBuf body)
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuf encode(Map<T, Object> options)
1:         ByteBuf cb = Unpooled.buffer(optLength);
/////////////////////////////////////////////////////////////////////////
0:     public Pair<T, Object> decodeOne(ByteBuf body)
0:     public void writeOne(Pair<T, Object> option, ByteBuf dest)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ba231f4
/////////////////////////////////////////////////////////////////////////
0:         ChannelBuffer cb = ChannelBuffers.buffer(oneSerializedSize(option));
0: 
0:     public int oneSerializedSize(Pair<T, Object> option)
1:     {
1:         T opt = option.left;
1:         Object obj = option.right;
0:         return 2 + opt.serializedValueSize(obj);
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
commit:732d83b
/////////////////////////////////////////////////////////////////////////
1:                 throw new ProtocolException(String.format("Duplicate option %s in message", opt.name()));
============================================================================