1:904cb5d: package org.apache.cassandra.utils;
3:904cb5d: 
1:904cb5d: import java.util.*;
1:904cb5d: import java.util.concurrent.atomic.AtomicLongFieldUpdater;
1:904cb5d: import java.util.stream.Collectors;
1:904cb5d: 
1:904cb5d: import com.google.common.collect.Lists;
1:904cb5d: import com.google.common.primitives.Longs;
1:904cb5d: 
1:904cb5d: /**
1:904cb5d:  * Mutable integer interval class, thread-safe.
1:904cb5d:  * Represents the interval [lower,upper].
1:904cb5d:  */
1:904cb5d: public class IntegerInterval
1:904cb5d: {
1:904cb5d:     volatile long interval;
1:904cb5d:     private static AtomicLongFieldUpdater<IntegerInterval> intervalUpdater =
1:904cb5d:             AtomicLongFieldUpdater.newUpdater(IntegerInterval.class, "interval");
1:904cb5d: 
1:904cb5d:     private IntegerInterval(long interval)
1:904cb5d:     {
1:904cb5d:         this.interval = interval;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public IntegerInterval(int lower, int upper)
1:904cb5d:     {
1:904cb5d:         this(make(lower, upper));
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public IntegerInterval(IntegerInterval src)
1:904cb5d:     {
1:904cb5d:         this(src.interval);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public int lower()
1:904cb5d:     {
1:904cb5d:         return lower(interval);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public int upper()
1:904cb5d:     {
1:904cb5d:         return upper(interval);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     /**
1:904cb5d:      * Expands the interval to cover the given value by extending one of its sides if necessary.
1:904cb5d:      * Mutates this. Thread-safe.
1:904cb5d:      */
1:904cb5d:     public void expandToCover(int value)
1:904cb5d:     {
1:904cb5d:         long prev;
1:904cb5d:         int lower;
1:904cb5d:         int upper;
1:904cb5d:         do
1:904cb5d:         {
1:904cb5d:             prev = interval;
1:904cb5d:             upper = upper(prev);
1:904cb5d:             lower = lower(prev);
1:904cb5d:             if (value > upper) // common case
1:904cb5d:                 upper = value;
1:904cb5d:             else if (value < lower)
1:904cb5d:                 lower = value;
1:904cb5d:         }
1:904cb5d:         while (!intervalUpdater.compareAndSet(this, prev, make(lower, upper)));
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Override
1:904cb5d:     public int hashCode()
1:904cb5d:     {
1:904cb5d:         return Long.hashCode(interval);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     @Override
1:904cb5d:     public boolean equals(Object obj)
1:904cb5d:     {
1:904cb5d:         if (getClass() != obj.getClass())
1:904cb5d:             return false;
1:904cb5d:         IntegerInterval other = (IntegerInterval) obj;
1:904cb5d:         return interval == other.interval;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     public String toString()
1:904cb5d:     {
1:904cb5d:         long interval = this.interval;
1:904cb5d:         return "[" + lower(interval) + "," + upper(interval) + "]";
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     private static long make(int lower, int upper)
1:904cb5d:     {
1:904cb5d:         assert lower <= upper;
1:904cb5d:         return ((lower & 0xFFFFFFFFL) << 32) | upper & 0xFFFFFFFFL;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     private static int lower(long interval)
1:904cb5d:     {
1:904cb5d:         return (int) (interval >>> 32);
1:904cb5d:     }
1:904cb5d: 
1:904cb5d:     private static int upper(long interval)
1:904cb5d:     {
1:904cb5d:         return (int) interval;
1:904cb5d:     }
1:904cb5d: 
1:904cb5d: 
1:904cb5d:     /**
1:904cb5d:      * A mutable set of closed integer intervals, stored in normalized form (i.e. where overlapping intervals are
1:904cb5d:      * converted to a single interval covering both). Thread-safe.
1:904cb5d:      */
1:904cb5d:     public static class Set
1:904cb5d:     {
1:904cb5d:         static long[] EMPTY = new long[0];
1:904cb5d: 
1:904cb5d:         private volatile long[] ranges = EMPTY;
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Adds an interval to the set, performing the necessary normalization.
1:904cb5d:          */
1:904cb5d:         public synchronized void add(int start, int end)
1:904cb5d:         {
1:904cb5d:             assert start <= end;
1:904cb5d:             long[] ranges, newRanges;
1:904cb5d:             {
1:904cb5d:                 ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1:904cb5d: 
1:904cb5d:                 // extend ourselves to cover any ranges we overlap
1:904cb5d:                 // record directly preceding our end may extend past us, so take the max of our end and its
1:904cb5d:                 int rpos = Arrays.binarySearch(ranges, ((end & 0xFFFFFFFFL) << 32) | 0xFFFFFFFFL); // floor (i.e. greatest <=) of the end position
1:904cb5d:                 if (rpos < 0)
1:904cb5d:                     rpos = (-1 - rpos) - 1;
1:904cb5d:                 if (rpos >= 0)
1:904cb5d:                 {
1:904cb5d:                     int extend = upper(ranges[rpos]);
1:904cb5d:                     if (extend > end)
1:904cb5d:                         end = extend;
1:904cb5d:                 }
1:68d2526: 
1:904cb5d:                 // record directly preceding our start may extend into us; if it does, we take it as our start
1:904cb5d:                 int lpos = Arrays.binarySearch(ranges, ((start & 0xFFFFFFFFL) << 32) | 0); // lower (i.e. greatest <) of the start position
1:904cb5d:                 if (lpos < 0)
1:904cb5d:                     lpos = -1 - lpos;
1:904cb5d:                 lpos -= 1;
1:904cb5d:                 if (lpos >= 0)
1:904cb5d:                 {
1:904cb5d:                     if (upper(ranges[lpos]) >= start)
1:904cb5d:                     {
1:904cb5d:                         start = lower(ranges[lpos]);
1:904cb5d:                         --lpos;
1:904cb5d:                     }
1:904cb5d:                 }
1:68d2526: 
1:904cb5d:                 newRanges = new long[ranges.length - (rpos - lpos) + 1];
1:904cb5d:                 int dest = 0;
1:904cb5d:                 for (int i = 0; i <= lpos; ++i)
1:904cb5d:                     newRanges[dest++] = ranges[i];
1:904cb5d:                 newRanges[dest++] = make(start, end);
1:904cb5d:                 for (int i = rpos + 1; i < ranges.length; ++i)
1:904cb5d:                     newRanges[dest++] = ranges[i];
1:904cb5d:             }
1:904cb5d:             this.ranges = newRanges;
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Returns true if the set completely covers the given interval.
1:904cb5d:          */
1:904cb5d:         public boolean covers(IntegerInterval iv)
1:904cb5d:         {
1:904cb5d:             long l = iv.interval;
1:904cb5d:             return covers(lower(l), upper(l));
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Returns true if the set completely covers the given interval.
1:904cb5d:          */
1:904cb5d:         public boolean covers(int start, int end)
1:904cb5d:         {
1:904cb5d:             long[] ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1:904cb5d:             int rpos = Arrays.binarySearch(ranges, ((start & 0xFFFFFFFFL) << 32) | 0xFFFFFFFFL);        // floor (i.e. greatest <=) of the end position
1:904cb5d:             if (rpos < 0)
1:904cb5d:                 rpos = (-1 - rpos) - 1;
1:904cb5d:             if (rpos == -1)
1:904cb5d:                 return false;
1:904cb5d:             return upper(ranges[rpos]) >= end;
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Returns a lower bound for the whole set. Will throw if set is not empty.
1:904cb5d:          */
1:904cb5d:         public int lowerBound()
1:904cb5d:         {
1:904cb5d:             return lower(ranges[0]);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         /**
1:904cb5d:          * Returns an upper bound for the whole set. Will throw if set is not empty.
1:904cb5d:          */
1:904cb5d:         public int upperBound()
1:904cb5d:         {
1:904cb5d:             long[] ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1:904cb5d:             return upper(ranges[ranges.length - 1]);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         public Collection<IntegerInterval> intervals()
1:904cb5d:         {
1:904cb5d:             return Lists.transform(Longs.asList(ranges), iv -> new IntegerInterval(iv));
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         @Override
1:904cb5d:         public int hashCode()
1:904cb5d:         {
1:904cb5d:             return Arrays.hashCode(ranges);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         @Override
1:904cb5d:         public boolean equals(Object obj)
1:904cb5d:         {
1:904cb5d:             if (getClass() != obj.getClass())
1:904cb5d:                 return false;
1:904cb5d:             Set other = (Set) obj;
1:904cb5d:             return Arrays.equals(ranges, other.ranges);
1:904cb5d:         }
1:904cb5d: 
1:904cb5d:         public String toString()
1:904cb5d:         {
1:904cb5d:             return "[" + intervals().stream().map(IntegerInterval::toString).collect(Collectors.joining(", ")) + "]";
1:904cb5d:         }
1:904cb5d:     }
1:904cb5d: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import java.util.*;
1: import java.util.concurrent.atomic.AtomicLongFieldUpdater;
1: import java.util.stream.Collectors;
1: 
1: import com.google.common.collect.Lists;
1: import com.google.common.primitives.Longs;
1: 
1: /**
1:  * Mutable integer interval class, thread-safe.
1:  * Represents the interval [lower,upper].
1:  */
1: public class IntegerInterval
1: {
1:     volatile long interval;
1:     private static AtomicLongFieldUpdater<IntegerInterval> intervalUpdater =
1:             AtomicLongFieldUpdater.newUpdater(IntegerInterval.class, "interval");
1: 
1:     private IntegerInterval(long interval)
1:     {
1:         this.interval = interval;
1:     }
1: 
1:     public IntegerInterval(int lower, int upper)
1:     {
1:         this(make(lower, upper));
1:     }
1: 
1:     public IntegerInterval(IntegerInterval src)
1:     {
1:         this(src.interval);
1:     }
1: 
1:     public int lower()
1:     {
1:         return lower(interval);
1:     }
1: 
1:     public int upper()
1:     {
1:         return upper(interval);
1:     }
1: 
1:     /**
1:      * Expands the interval to cover the given value by extending one of its sides if necessary.
1:      * Mutates this. Thread-safe.
1:      */
1:     public void expandToCover(int value)
1:     {
1:         long prev;
1:         int lower;
1:         int upper;
1:         do
1:         {
1:             prev = interval;
1:             upper = upper(prev);
1:             lower = lower(prev);
1:             if (value > upper) // common case
1:                 upper = value;
1:             else if (value < lower)
1:                 lower = value;
1:         }
1:         while (!intervalUpdater.compareAndSet(this, prev, make(lower, upper)));
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Long.hashCode(interval);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj)
1:     {
1:         if (getClass() != obj.getClass())
1:             return false;
1:         IntegerInterval other = (IntegerInterval) obj;
1:         return interval == other.interval;
1:     }
1: 
1:     public String toString()
1:     {
1:         long interval = this.interval;
1:         return "[" + lower(interval) + "," + upper(interval) + "]";
1:     }
1: 
1:     private static long make(int lower, int upper)
1:     {
1:         assert lower <= upper;
1:         return ((lower & 0xFFFFFFFFL) << 32) | upper & 0xFFFFFFFFL;
1:     }
1: 
1:     private static int lower(long interval)
1:     {
1:         return (int) (interval >>> 32);
1:     }
1: 
1:     private static int upper(long interval)
1:     {
1:         return (int) interval;
1:     }
1: 
1: 
1:     /**
1:      * A mutable set of closed integer intervals, stored in normalized form (i.e. where overlapping intervals are
1:      * converted to a single interval covering both). Thread-safe.
1:      */
1:     public static class Set
1:     {
1:         static long[] EMPTY = new long[0];
1: 
1:         private volatile long[] ranges = EMPTY;
1: 
1:         /**
1:          * Adds an interval to the set, performing the necessary normalization.
1:          */
1:         public synchronized void add(int start, int end)
1:         {
1:             assert start <= end;
1:             long[] ranges, newRanges;
1:             {
1:                 ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1: 
1:                 // extend ourselves to cover any ranges we overlap
1:                 // record directly preceding our end may extend past us, so take the max of our end and its
1:                 int rpos = Arrays.binarySearch(ranges, ((end & 0xFFFFFFFFL) << 32) | 0xFFFFFFFFL); // floor (i.e. greatest <=) of the end position
1:                 if (rpos < 0)
1:                     rpos = (-1 - rpos) - 1;
1:                 if (rpos >= 0)
1:                 {
1:                     int extend = upper(ranges[rpos]);
1:                     if (extend > end)
1:                         end = extend;
1:                 }
1:     
1:                 // record directly preceding our start may extend into us; if it does, we take it as our start
1:                 int lpos = Arrays.binarySearch(ranges, ((start & 0xFFFFFFFFL) << 32) | 0); // lower (i.e. greatest <) of the start position
1:                 if (lpos < 0)
1:                     lpos = -1 - lpos;
1:                 lpos -= 1;
1:                 if (lpos >= 0)
1:                 {
1:                     if (upper(ranges[lpos]) >= start)
1:                     {
1:                         start = lower(ranges[lpos]);
1:                         --lpos;
1:                     }
1:                 }
1:     
1:                 newRanges = new long[ranges.length - (rpos - lpos) + 1];
1:                 int dest = 0;
1:                 for (int i = 0; i <= lpos; ++i)
1:                     newRanges[dest++] = ranges[i];
1:                 newRanges[dest++] = make(start, end);
1:                 for (int i = rpos + 1; i < ranges.length; ++i)
1:                     newRanges[dest++] = ranges[i];
1:             }
1:             this.ranges = newRanges;
1:         }
1: 
1:         /**
1:          * Returns true if the set completely covers the given interval.
1:          */
1:         public boolean covers(IntegerInterval iv)
1:         {
1:             long l = iv.interval;
1:             return covers(lower(l), upper(l));
1:         }
1: 
1:         /**
1:          * Returns true if the set completely covers the given interval.
1:          */
1:         public boolean covers(int start, int end)
1:         {
1:             long[] ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1:             int rpos = Arrays.binarySearch(ranges, ((start & 0xFFFFFFFFL) << 32) | 0xFFFFFFFFL);        // floor (i.e. greatest <=) of the end position
1:             if (rpos < 0)
1:                 rpos = (-1 - rpos) - 1;
1:             if (rpos == -1)
1:                 return false;
1:             return upper(ranges[rpos]) >= end;
1:         }
1: 
1:         /**
1:          * Returns a lower bound for the whole set. Will throw if set is not empty.
1:          */
1:         public int lowerBound()
1:         {
1:             return lower(ranges[0]);
1:         }
1: 
1:         /**
1:          * Returns an upper bound for the whole set. Will throw if set is not empty.
1:          */
1:         public int upperBound()
1:         {
1:             long[] ranges = this.ranges; // take local copy to avoid risk of it changing in the midst of operation
1:             return upper(ranges[ranges.length - 1]);
1:         }
1: 
1:         public Collection<IntegerInterval> intervals()
1:         {
1:             return Lists.transform(Longs.asList(ranges), iv -> new IntegerInterval(iv));
1:         }
1: 
1:         @Override
1:         public int hashCode()
1:         {
1:             return Arrays.hashCode(ranges);
1:         }
1: 
1:         @Override
1:         public boolean equals(Object obj)
1:         {
1:             if (getClass() != obj.getClass())
1:                 return false;
1:             Set other = (Set) obj;
1:             return Arrays.equals(ranges, other.ranges);
1:         }
1: 
1:         public String toString()
1:         {
1:             return "[" + intervals().stream().map(IntegerInterval::toString).collect(Collectors.joining(", ")) + "]";
1:         }
1:     }
1: }
============================================================================