1:455dcc5: /*
1:455dcc5:  * Licensed to the Apache Software Foundation (ASF) under one
1:455dcc5:  * or more contributor license agreements.  See the NOTICE file
1:455dcc5:  * distributed with this work for additional information
1:455dcc5:  * regarding copyright ownership.  The ASF licenses this file
1:455dcc5:  * to you under the Apache License, Version 2.0 (the
1:455dcc5:  * "License"); you may not use this file except in compliance
1:455dcc5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:455dcc5:  */
1:07cf56f: package org.apache.cassandra.thrift;
1:455dcc5: 
1:8264eb2: import java.net.InetSocketAddress;
1:8264eb2: 
1:bffd9ea: import java.nio.channels.SelectionKey;
1:bffd9ea: 
1:8495560: import org.apache.cassandra.config.DatabaseDescriptor;
1:bc54786: import org.apache.thrift.server.TNonblockingServer;
1:8264eb2: import org.apache.thrift.server.TServer;
1:8264eb2: import org.apache.thrift.transport.TNonblockingServerTransport;
1:bc54786: import org.apache.thrift.transport.TNonblockingSocket;
1:bffd9ea: import org.apache.thrift.transport.TNonblockingTransport;
1:8264eb2: import org.apache.thrift.transport.TTransportException;
2:bc54786: 
1:bc54786: public class CustomTNonBlockingServer extends TNonblockingServer
1:bc54786: {
1:bc54786:     public CustomTNonBlockingServer(Args args)
1:bc54786:     {
1:bc54786:         super(args);
1:bc54786:     }
1:bc54786: 
1:bc54786:     @Override
1:7aafe05:     @SuppressWarnings("resource")
1:bc54786:     protected boolean requestInvoke(FrameBuffer frameBuffer)
1:bc54786:     {
1:bffd9ea:         TNonblockingSocket socket = (TNonblockingSocket)((CustomFrameBuffer)frameBuffer).getTransport();
1:e8438b8:         ThriftSessionManager.instance.setCurrentSocket(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:bc54786:         frameBuffer.invoke();
1:bc54786:         return true;
1:bc54786:     }
1:8264eb2: 
1:8264eb2:     public static class Factory implements TServerFactory
1:8264eb2:     {
1:7aafe05:         @SuppressWarnings("resource")
1:8264eb2:         public TServer buildTServer(Args args)
1:8264eb2:         {
1:e3f48f2:             if (DatabaseDescriptor.getClientEncryptionOptions().enabled)
1:8495560:                 throw new RuntimeException("Client SSL is not supported for non-blocking sockets. Please remove client ssl from the configuration.");
1:8495560: 
1:8264eb2:             final InetSocketAddress addr = args.addr;
1:8264eb2:             TNonblockingServerTransport serverTransport;
1:8264eb2:             try
1:8264eb2:             {
1:8264eb2:                 serverTransport = new TCustomNonblockingServerSocket(addr, args.keepAlive, args.sendBufferSize, args.recvBufferSize);
1:8264eb2:             }
1:8264eb2:             catch (TTransportException e)
1:8264eb2:             {
1:8264eb2:                 throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s", addr.getAddress(), addr.getPort()), e);
1:8264eb2:             }
1:8264eb2: 
1:8264eb2:             // This is single threaded hence the invocation will be all
1:8264eb2:             // in one thread.
1:8264eb2:             TNonblockingServer.Args serverArgs = new TNonblockingServer.Args(serverTransport).inputTransportFactory(args.inTransportFactory)
1:8264eb2:                                                                                              .outputTransportFactory(args.outTransportFactory)
1:8264eb2:                                                                                              .inputProtocolFactory(args.tProtocolFactory)
1:8264eb2:                                                                                              .outputProtocolFactory(args.tProtocolFactory)
1:8264eb2:                                                                                              .processor(args.processor);
1:8264eb2:             return new CustomTNonBlockingServer(serverArgs);
1:8264eb2:         }
1:8264eb2:     }
1:bffd9ea: 
1:bffd9ea:     public class CustomFrameBuffer extends FrameBuffer
1:bffd9ea:     {
1:bffd9ea:         public CustomFrameBuffer(final TNonblockingTransport trans,
1:bffd9ea:           final SelectionKey selectionKey,
1:68d2526:           final AbstractSelectThread selectThread)
1:68d2526:         {
1:bffd9ea: 			super(trans, selectionKey, selectThread);
1:bffd9ea:         }
1:bffd9ea: 
1:68d2526:         public TNonblockingTransport getTransport()
1:68d2526:         {
1:bffd9ea:             return this.trans_;
1:bffd9ea:         }
1:bffd9ea:     }
1:bc54786: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:           final AbstractSelectThread selectThread)
1:         {
1:         public TNonblockingTransport getTransport()
1:         {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.SelectionKey;
1: 
1: import org.apache.thrift.transport.TNonblockingTransport;
/////////////////////////////////////////////////////////////////////////
1:         TNonblockingSocket socket = (TNonblockingSocket)((CustomFrameBuffer)frameBuffer).getTransport();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public class CustomFrameBuffer extends FrameBuffer
1:     {
1:         public CustomFrameBuffer(final TNonblockingTransport trans,
1:           final SelectionKey selectionKey,
0:           final AbstractSelectThread selectThread) {
1: 			super(trans, selectionKey, selectThread);
1:         }
1: 
0:         public TNonblockingTransport getTransport() {
1:             return this.trans_;
1:         }
1:     }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:e3f48f2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (DatabaseDescriptor.getClientEncryptionOptions().enabled)
commit:24cf1d1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (DatabaseDescriptor.getClientEncryptionOptions().enabled)
commit:8495560
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.EncryptionOptions;
/////////////////////////////////////////////////////////////////////////
0:             if(!DatabaseDescriptor.getClientEncryptionOptions().internode_encryption.equals(EncryptionOptions.InternodeEncryption.none))
1:                 throw new RuntimeException("Client SSL is not supported for non-blocking sockets. Please remove client ssl from the configuration.");
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.thrift;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e8438b8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.ThriftSessionManager;
/////////////////////////////////////////////////////////////////////////
1:         ThriftSessionManager.instance.setCurrentSocket(socket.getSocketChannel().socket().getRemoteSocketAddress());
commit:5b5b20a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:455dcc5
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:6b83663
commit:8264eb2
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
1: 
1: import org.apache.thrift.server.TServer;
1: import org.apache.thrift.transport.TNonblockingServerTransport;
1: import org.apache.thrift.transport.TTransportException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static class Factory implements TServerFactory
1:     {
1:         public TServer buildTServer(Args args)
1:         {
1:             final InetSocketAddress addr = args.addr;
1:             TNonblockingServerTransport serverTransport;
1:             try
1:             {
1:                 serverTransport = new TCustomNonblockingServerSocket(addr, args.keepAlive, args.sendBufferSize, args.recvBufferSize);
1:             }
1:             catch (TTransportException e)
1:             {
1:                 throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s", addr.getAddress(), addr.getPort()), e);
1:             }
1: 
1:             // This is single threaded hence the invocation will be all
1:             // in one thread.
1:             TNonblockingServer.Args serverArgs = new TNonblockingServer.Args(serverTransport).inputTransportFactory(args.inTransportFactory)
1:                                                                                              .outputTransportFactory(args.outTransportFactory)
1:                                                                                              .inputProtocolFactory(args.tProtocolFactory)
1:                                                                                              .outputProtocolFactory(args.tProtocolFactory)
1:                                                                                              .processor(args.processor);
1:             return new CustomTNonBlockingServer(serverArgs);
1:         }
1:     }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:bc54786
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.thrift;
1: 
0: import org.apache.cassandra.service.SocketSessionManagementService;
1: import org.apache.thrift.server.TNonblockingServer;
1: import org.apache.thrift.transport.TNonblockingSocket;
1: 
1: public class CustomTNonBlockingServer extends TNonblockingServer
1: {
1:     public CustomTNonBlockingServer(Args args)
1:     {
1:         super(args);
1:     }
1: 
1:     @Override
1:     protected boolean requestInvoke(FrameBuffer frameBuffer)
1:     {
0:         TNonblockingSocket socket = (TNonblockingSocket) frameBuffer.trans_;
0:         SocketSessionManagementService.remoteSocket.set(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:         frameBuffer.invoke();
1:         return true;
1:     }
1: }
============================================================================