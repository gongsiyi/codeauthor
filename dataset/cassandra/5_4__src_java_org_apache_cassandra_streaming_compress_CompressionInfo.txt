1:21aef92: /*
1:21aef92:  * Licensed to the Apache Software Foundation (ASF) under one
1:21aef92:  * or more contributor license agreements.  See the NOTICE file
1:21aef92:  * distributed with this work for additional information
1:21aef92:  * regarding copyright ownership.  The ASF licenses this file
1:21aef92:  * to you under the Apache License, Version 2.0 (the
1:21aef92:  * "License"); you may not use this file except in compliance
1:21aef92:  * with the License.  You may obtain a copy of the License at
1:21aef92:  *
1:21aef92:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21aef92:  *
1:21aef92:  * Unless required by applicable law or agreed to in writing, software
1:21aef92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21aef92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21aef92:  * See the License for the specific language governing permissions and
1:21aef92:  * limitations under the License.
1:21aef92:  */
1:21aef92: package org.apache.cassandra.streaming.compress;
1:21aef92: 
1:21aef92: import java.io.IOException;
1:21aef92: 
1:21aef92: import org.apache.cassandra.db.TypeSizes;
1:21aef92: import org.apache.cassandra.io.IVersionedSerializer;
1:21aef92: import org.apache.cassandra.io.compress.CompressionMetadata;
1:b31845c: import org.apache.cassandra.schema.CompressionParams;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:21aef92: 
1:21aef92: /**
1:21aef92:  * Container that carries compression parameters and chunks to decompress data from stream.
1:21aef92:  */
1:21aef92: public class CompressionInfo
1:21aef92: {
1:21aef92:     public static final IVersionedSerializer<CompressionInfo> serializer = new CompressionInfoSerializer();
1:21aef92: 
1:21aef92:     public final CompressionMetadata.Chunk[] chunks;
1:b31845c:     public final CompressionParams parameters;
1:21aef92: 
1:b31845c:     public CompressionInfo(CompressionMetadata.Chunk[] chunks, CompressionParams parameters)
1:21aef92:     {
1:21aef92:         assert chunks != null && parameters != null;
1:21aef92:         this.chunks = chunks;
1:21aef92:         this.parameters = parameters;
1:21aef92:     }
1:21aef92: 
1:21aef92:     static class CompressionInfoSerializer implements IVersionedSerializer<CompressionInfo>
1:21aef92:     {
1:75508ec:         public void serialize(CompressionInfo info, DataOutputPlus out, int version) throws IOException
1:21aef92:         {
1:21aef92:             if (info == null)
1:21aef92:             {
1:21aef92:                 out.writeInt(-1);
1:21aef92:                 return;
1:21aef92:             }
1:21aef92: 
1:21aef92:             int chunkCount = info.chunks.length;
1:21aef92:             out.writeInt(chunkCount);
1:21aef92:             for (int i = 0; i < chunkCount; i++)
1:21aef92:                 CompressionMetadata.Chunk.serializer.serialize(info.chunks[i], out, version);
1:21aef92:             // compression params
1:b31845c:             CompressionParams.serializer.serialize(info.parameters, out, version);
1:21aef92:         }
1:21aef92: 
1:03f72ac:         public CompressionInfo deserialize(DataInputPlus in, int version) throws IOException
1:21aef92:         {
1:21aef92:             // chunks
1:21aef92:             int chunkCount = in.readInt();
1:21aef92:             if (chunkCount < 0)
1:21aef92:                 return null;
1:21aef92: 
1:21aef92:             CompressionMetadata.Chunk[] chunks = new CompressionMetadata.Chunk[chunkCount];
1:21aef92:             for (int i = 0; i < chunkCount; i++)
1:21aef92:                 chunks[i] = CompressionMetadata.Chunk.serializer.deserialize(in, version);
1:21aef92: 
1:21aef92:             // compression params
1:b31845c:             CompressionParams parameters = CompressionParams.serializer.deserialize(in, version);
1:21aef92:             return new CompressionInfo(chunks, parameters);
1:21aef92:         }
1:21aef92: 
1:21aef92:         public long serializedSize(CompressionInfo info, int version)
1:21aef92:         {
1:21aef92:             if (info == null)
1:03f72ac:                 return TypeSizes.sizeof(-1);
1:21aef92: 
1:21aef92:             // chunks
1:21aef92:             int chunkCount = info.chunks.length;
1:03f72ac:             long size = TypeSizes.sizeof(chunkCount);
1:21aef92:             for (int i = 0; i < chunkCount; i++)
1:21aef92:                 size += CompressionMetadata.Chunk.serializer.serializedSize(info.chunks[i], version);
1:21aef92:             // compression params
1:b31845c:             size += CompressionParams.serializer.serializedSize(info.parameters, version);
1:21aef92:             return size;
1:21aef92:         }
1:21aef92:     }
1:21aef92: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.CompressionParams;
/////////////////////////////////////////////////////////////////////////
1:     public final CompressionParams parameters;
1:     public CompressionInfo(CompressionMetadata.Chunk[] chunks, CompressionParams parameters)
/////////////////////////////////////////////////////////////////////////
1:             CompressionParams.serializer.serialize(info.parameters, out, version);
/////////////////////////////////////////////////////////////////////////
1:             CompressionParams parameters = CompressionParams.serializer.deserialize(in, version);
/////////////////////////////////////////////////////////////////////////
1:             size += CompressionParams.serializer.serializedSize(info.parameters, version);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public CompressionInfo deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:                 return TypeSizes.sizeof(-1);
1:             long size = TypeSizes.sizeof(chunkCount);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(CompressionInfo info, DataOutputPlus out, int version) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:21aef92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.compress;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.io.compress.CompressionMetadata;
0: import org.apache.cassandra.io.compress.CompressionParameters;
1: 
1: /**
1:  * Container that carries compression parameters and chunks to decompress data from stream.
1:  */
1: public class CompressionInfo
1: {
1:     public static final IVersionedSerializer<CompressionInfo> serializer = new CompressionInfoSerializer();
1: 
1:     public final CompressionMetadata.Chunk[] chunks;
0:     public final CompressionParameters parameters;
1: 
0:     public CompressionInfo(CompressionMetadata.Chunk[] chunks, CompressionParameters parameters)
1:     {
1:         assert chunks != null && parameters != null;
1:         this.chunks = chunks;
1:         this.parameters = parameters;
1:     }
1: 
1:     static class CompressionInfoSerializer implements IVersionedSerializer<CompressionInfo>
1:     {
0:         public void serialize(CompressionInfo info, DataOutput out, int version) throws IOException
1:         {
1:             if (info == null)
1:             {
1:                 out.writeInt(-1);
1:                 return;
1:             }
1: 
1:             int chunkCount = info.chunks.length;
1:             out.writeInt(chunkCount);
1:             for (int i = 0; i < chunkCount; i++)
1:                 CompressionMetadata.Chunk.serializer.serialize(info.chunks[i], out, version);
1:             // compression params
0:             CompressionParameters.serializer.serialize(info.parameters, out, version);
1:         }
1: 
0:         public CompressionInfo deserialize(DataInput in, int version) throws IOException
1:         {
1:             // chunks
1:             int chunkCount = in.readInt();
1:             if (chunkCount < 0)
1:                 return null;
1: 
1:             CompressionMetadata.Chunk[] chunks = new CompressionMetadata.Chunk[chunkCount];
1:             for (int i = 0; i < chunkCount; i++)
1:                 chunks[i] = CompressionMetadata.Chunk.serializer.deserialize(in, version);
1: 
1:             // compression params
0:             CompressionParameters parameters = CompressionParameters.serializer.deserialize(in, version);
1:             return new CompressionInfo(chunks, parameters);
1:         }
1: 
1:         public long serializedSize(CompressionInfo info, int version)
1:         {
1:             if (info == null)
0:                 return TypeSizes.NATIVE.sizeof(-1);
1: 
1:             // chunks
1:             int chunkCount = info.chunks.length;
0:             long size = TypeSizes.NATIVE.sizeof(chunkCount);
1:             for (int i = 0; i < chunkCount; i++)
1:                 size += CompressionMetadata.Chunk.serializer.serializedSize(info.chunks[i], version);
1:             // compression params
0:             size += CompressionParameters.serializer.serializedSize(info.parameters, version);
1:             return size;
1:         }
1:     }
1: }
============================================================================