1:dfd78d0: /*
1:dfd78d0:  * Licensed to the Apache Software Foundation (ASF) under one
1:dfd78d0:  * or more contributor license agreements.  See the NOTICE file
1:dfd78d0:  * distributed with this work for additional information
1:dfd78d0:  * regarding copyright ownership.  The ASF licenses this file
1:dfd78d0:  * to you under the Apache License, Version 2.0 (the
1:dfd78d0:  * "License"); you may not use this file except in compliance
1:dfd78d0:  * with the License.  You may obtain a copy of the License at
1:dfd78d0:  *
1:dfd78d0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dfd78d0:  *
1:dfd78d0:  * Unless required by applicable law or agreed to in writing, software
1:dfd78d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dfd78d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dfd78d0:  * See the License for the specific language governing permissions and
1:dfd78d0:  * limitations under the License.
1:dfd78d0:  */
1:dfd78d0: package org.apache.cassandra.cache;
1:dfd78d0: 
1:dfd78d0: import java.util.Collections;
1:dfd78d0: import java.util.Iterator;
1:dfd78d0: 
1:dfd78d0: public class NopCacheProvider implements CacheProvider<RowCacheKey, IRowCacheEntry>
1:dfd78d0: {
1:dfd78d0:     public ICache<RowCacheKey, IRowCacheEntry> create()
1:dfd78d0:     {
1:dfd78d0:         return new NopCache();
1:dfd78d0:     }
1:dfd78d0: 
1:dfd78d0:     private static class NopCache implements ICache<RowCacheKey, IRowCacheEntry>
1:dfd78d0:     {
1:dfd78d0:         public long capacity()
1:dfd78d0:         {
1:dfd78d0:             return 0;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public void setCapacity(long capacity)
1:dfd78d0:         {
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public void put(RowCacheKey key, IRowCacheEntry value)
1:dfd78d0:         {
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public boolean putIfAbsent(RowCacheKey key, IRowCacheEntry value)
1:dfd78d0:         {
1:dfd78d0:             return false;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public boolean replace(RowCacheKey key, IRowCacheEntry old, IRowCacheEntry value)
1:dfd78d0:         {
1:dfd78d0:             return false;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public IRowCacheEntry get(RowCacheKey key)
1:dfd78d0:         {
1:dfd78d0:             return null;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public void remove(RowCacheKey key)
1:dfd78d0:         {
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public int size()
1:dfd78d0:         {
1:dfd78d0:             return 0;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public long weightedSize()
1:dfd78d0:         {
1:dfd78d0:             return 0;
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public void clear()
1:dfd78d0:         {
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public Iterator<RowCacheKey> hotKeyIterator(int n)
1:dfd78d0:         {
1:dfd78d0:             return Collections.emptyIterator();
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public Iterator<RowCacheKey> keyIterator()
1:dfd78d0:         {
1:dfd78d0:             return Collections.emptyIterator();
1:dfd78d0:         }
1:dfd78d0: 
1:dfd78d0:         public boolean containsKey(RowCacheKey key)
1:dfd78d0:         {
1:dfd78d0:             return false;
1:dfd78d0:         }
1:dfd78d0:     }
1:dfd78d0: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:dfd78d0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cache;
1: 
1: import java.util.Collections;
1: import java.util.Iterator;
1: 
1: public class NopCacheProvider implements CacheProvider<RowCacheKey, IRowCacheEntry>
1: {
1:     public ICache<RowCacheKey, IRowCacheEntry> create()
1:     {
1:         return new NopCache();
1:     }
1: 
1:     private static class NopCache implements ICache<RowCacheKey, IRowCacheEntry>
1:     {
1:         public long capacity()
1:         {
1:             return 0;
1:         }
1: 
1:         public void setCapacity(long capacity)
1:         {
1:         }
1: 
1:         public void put(RowCacheKey key, IRowCacheEntry value)
1:         {
1:         }
1: 
1:         public boolean putIfAbsent(RowCacheKey key, IRowCacheEntry value)
1:         {
1:             return false;
1:         }
1: 
1:         public boolean replace(RowCacheKey key, IRowCacheEntry old, IRowCacheEntry value)
1:         {
1:             return false;
1:         }
1: 
1:         public IRowCacheEntry get(RowCacheKey key)
1:         {
1:             return null;
1:         }
1: 
1:         public void remove(RowCacheKey key)
1:         {
1:         }
1: 
1:         public int size()
1:         {
1:             return 0;
1:         }
1: 
1:         public long weightedSize()
1:         {
1:             return 0;
1:         }
1: 
1:         public void clear()
1:         {
1:         }
1: 
1:         public Iterator<RowCacheKey> hotKeyIterator(int n)
1:         {
1:             return Collections.emptyIterator();
1:         }
1: 
1:         public Iterator<RowCacheKey> keyIterator()
1:         {
1:             return Collections.emptyIterator();
1:         }
1: 
1:         public boolean containsKey(RowCacheKey key)
1:         {
1:             return false;
1:         }
1:     }
1: }
============================================================================