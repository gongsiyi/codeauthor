1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
2:066ef58:  */
1:066ef58: package org.apache.cassandra.db;
1:ef25537: 
1:ef25537: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:fc42891: import org.apache.cassandra.net.MessagingService;
1:5a6f0b8: 
1:6bbb13b: public class ReadRepairVerbHandler implements IVerbHandler<Mutation>
1:6a0df02: {
1:6bbb13b:     public void doVerb(MessageIn<Mutation> message, int id)
4:066ef58:     {
1:6bbb13b:         message.payload.apply();
1:53a177a:         MessagingService.instance().sendReply(WriteResponse.createMessage(), id, message.from);
1:704c915:     }
4:066ef58: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().sendReply(WriteResponse.createMessage(), id, message.from);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1: public class ReadRepairVerbHandler implements IVerbHandler<Mutation>
1:     public void doVerb(MessageIn<Mutation> message, int id)
1:         message.payload.apply();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn<RowMutation> message, int id)
commit:fd2ddb5
/////////////////////////////////////////////////////////////////////////
0:         WriteResponse response = new WriteResponse();
commit:debb15e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         RowMutation rm = message.payload;
0:         rm.apply();
0:         WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
0:         MessagingService.instance().sendReply(response.createMessage(), id, message.from);
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class ReadRepairVerbHandler implements IVerbHandler<RowMutation>
0:     public void doVerb(MessageIn<RowMutation> message, String id)
0:             RowMutation rm = message.payload;
0:             WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
0:             MessagingService.instance().sendReply(response.createMessage(), id, message.from);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream in = new DataInputStream(new FastByteArrayInputStream(message.getMessageBody()));
0:         RowMutation rm;
0:             rm = RowMutation.serializer().deserialize(in, message.getVersion());
1: 
0:         WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
0:         MessagingService.instance().sendReply(response.createMessage(), id, message.getFrom());
commit:6a0df02
/////////////////////////////////////////////////////////////////////////
1: {    
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
commit:9460470
/////////////////////////////////////////////////////////////////////////
0:             RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer));
0:             rm.apply();
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOError;
0: import java.io.IOException;
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: 
commit:1cb0794
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ByteArrayInputStream buffer = new ByteArrayInputStream(body);
0:             RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(new DataInputStream(buffer));
commit:704c915
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         catch (IOException e)
0:             throw new IOError(e);
1:         }
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.db;
0: 
0: import java.io.*;
0: 
0: import org.apache.cassandra.io.DataInputBuffer;
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.service.*;
0: import org.apache.cassandra.utils.*;
0: import org.apache.cassandra.concurrent.*;
0: import org.apache.cassandra.net.*;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
0: 
0: public class ReadRepairVerbHandler implements IVerbHandler
1: {
0:     private static Logger logger_ = Logger.getLogger(ReadRepairVerbHandler.class);    
0:     
0:     public void doVerb(Message message)
1:     {          
0:         byte[] body = message.getMessageBody();
0:         DataInputBuffer buffer = new DataInputBuffer();
0:         buffer.reset(body, body.length);        
0:         
0:         try
1:         {
0:             RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(buffer);
0:             RowMutation rm = rmMsg.getRowMutation();
0:             rm.apply();                                   
1:         }
0:         catch ( IOException e )
1:         {
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));            
1:         }        
1:     }
1: }
commit:f856364
/////////////////////////////////////////////////////////////////////////
0:             if (logger_.isDebugEnabled())
0:                 logger_.debug(LogUtil.throwableToString(e));            
commit:49211d5
/////////////////////////////////////////////////////////////////////////
0:         byte[] body = message.getMessageBody();
commit:71739ef
commit:7b250fa
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:fc42891
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0: 
0:             WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
0:             Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
0:             MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         FastByteArrayInputStream buffer = new FastByteArrayInputStream(body);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer), message.getVersion());
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static Logger logger_ = LoggerFactory.getLogger(ReadRepairVerbHandler.class);    
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db;
0: 
0: import java.io.*;
0: 
0: import org.apache.cassandra.io.DataInputBuffer;
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.service.*;
0: import org.apache.cassandra.utils.*;
0: import org.apache.cassandra.concurrent.*;
0: import org.apache.cassandra.net.*;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: public class ReadRepairVerbHandler implements IVerbHandler
0: {
0:     private static Logger logger_ = Logger.getLogger(ReadRepairVerbHandler.class);    
0:     
0:     public void doVerb(Message message)
0:     {          
0:         byte[] body = (byte[])message.getMessageBody()[0];
0:         DataInputBuffer buffer = new DataInputBuffer();
0:         buffer.reset(body, body.length);        
0:         
0:         try
0:         {
0:             RowMutationMessage rmMsg = RowMutationMessage.serializer().deserialize(buffer);
0:             RowMutation rm = rmMsg.getRowMutation();
0:             rm.apply();                                   
0:         }
0:         catch( ColumnFamilyNotDefinedException ex )
0:         {
0:             logger_.debug(LogUtil.throwableToString(ex));
0:         }
0:         catch ( IOException e )
0:         {
0:             logger_.debug(LogUtil.throwableToString(e));            
0:         }        
0:     }
0: }
============================================================================