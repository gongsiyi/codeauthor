1:98eec0a: /*
1:98eec0a:  * Licensed to the Apache Software Foundation (ASF) under one
1:98eec0a:  * or more contributor license agreements. See the NOTICE file
1:98eec0a:  * distributed with this work for additional information
1:98eec0a:  * regarding copyright ownership. The ASF licenses this file
1:98eec0a:  * to you under the Apache License, Version 2.0 (the
1:98eec0a:  * "License"); you may not use this file except in compliance
1:98eec0a:  * with the License. You may obtain a copy of the License at
1:98eec0a:  *
1:98eec0a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:98eec0a:  *
1:98eec0a:  * Unless required by applicable law or agreed to in writing,
1:98eec0a:  * software distributed under the License is distributed on an
1:98eec0a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:98eec0a:  * KIND, either express or implied. See the License for the
1:98eec0a:  * specific language governing permissions and limitations
1:98eec0a:  * under the License.
1:98eec0a:  */
1:98eec0a: package org.apache.cassandra.thrift;
1:98eec0a: 
1:98eec0a: import java.net.InetSocketAddress;
1:b22089d: import java.util.concurrent.SynchronousQueue;
1:b22089d: import java.util.concurrent.ThreadPoolExecutor;
1:b22089d: import java.util.concurrent.TimeUnit;
1:98eec0a: 
1:98eec0a: import com.thinkaurelius.thrift.Message;
1:98eec0a: import com.thinkaurelius.thrift.TDisruptorServer;
1:b22089d: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
1:b22089d: import org.apache.cassandra.concurrent.NamedThreadFactory;
1:98eec0a: import org.slf4j.Logger;
1:98eec0a: import org.slf4j.LoggerFactory;
1:98eec0a: 
1:98eec0a: import org.apache.cassandra.config.DatabaseDescriptor;
1:98eec0a: import org.apache.thrift.server.TServer;
1:98eec0a: import org.apache.thrift.transport.TNonblockingServerTransport;
1:98eec0a: import org.apache.thrift.transport.TNonblockingSocket;
1:98eec0a: import org.apache.thrift.transport.TTransportException;
1:98eec0a: 
1:98eec0a: public class THsHaDisruptorServer extends TDisruptorServer
1:98eec0a: {
1:98eec0a:     private static final Logger logger = LoggerFactory.getLogger(THsHaDisruptorServer.class.getName());
1:98eec0a: 
1:98eec0a:     /**
1:98eec0a:      * All the arguments to Non Blocking Server will apply here. In addition,
1:98eec0a:      * executor pool will be responsible for creating the internal threads which
1:98eec0a:      * will process the data. threads for selection usually are equal to the
1:98eec0a:      * number of cpu's
1:98eec0a:      */
1:98eec0a:     public THsHaDisruptorServer(Args args)
1:98eec0a:     {
1:98eec0a:         super(args);
1:98eec0a:         logger.info("Starting up {}", this);
1:98eec0a:     }
1:98eec0a: 
1:98eec0a:     @Override
1:98eec0a:     protected void beforeInvoke(Message buffer)
1:98eec0a:     {
1:98eec0a:         TNonblockingSocket socket = (TNonblockingSocket) buffer.transport;
1:98eec0a:         ThriftSessionManager.instance.setCurrentSocket(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:98eec0a:     }
1:98eec0a: 
1:47ac42f:     public void beforeClose(Message buffer)
1:47ac42f:     {
1:47ac42f:         TNonblockingSocket socket = (TNonblockingSocket) buffer.transport;
1:47ac42f:         ThriftSessionManager.instance.connectionComplete(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:47ac42f:     }
1:47ac42f: 
1:98eec0a:     public static class Factory implements TServerFactory
1:98eec0a:     {
1:7aafe05:         @SuppressWarnings("resource")
1:98eec0a:         public TServer buildTServer(Args args)
1:98eec0a:         {
1:98eec0a:             if (DatabaseDescriptor.getClientEncryptionOptions().enabled)
1:98eec0a:                 throw new RuntimeException("Client SSL is not supported for non-blocking sockets (hsha). Please remove client ssl from the configuration.");
1:98eec0a: 
1:98eec0a:             final InetSocketAddress addr = args.addr;
1:98eec0a:             TNonblockingServerTransport serverTransport;
1:98eec0a:             try
1:98eec0a:             {
1:98eec0a:                 serverTransport = new TCustomNonblockingServerSocket(addr, args.keepAlive, args.sendBufferSize, args.recvBufferSize);
1:98eec0a:             }
1:98eec0a:             catch (TTransportException e)
1:98eec0a:             {
1:98eec0a:                 throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s", addr.getAddress(), addr.getPort()), e);
1:98eec0a:             }
1:98eec0a: 
1:b22089d:             ThreadPoolExecutor invoker = new JMXEnabledThreadPoolExecutor(DatabaseDescriptor.getRpcMinThreads(),
1:b22089d:                                                                           DatabaseDescriptor.getRpcMaxThreads(),
1:b22089d:                                                                           60L,
1:b22089d:                                                                           TimeUnit.SECONDS,
1:b22089d:                                                                           new SynchronousQueue<Runnable>(),
1:b22089d:                                                                           new NamedThreadFactory("RPC-Thread"), "RPC-THREAD-POOL");
1:b22089d: 
1:98eec0a:             com.thinkaurelius.thrift.util.TBinaryProtocol.Factory protocolFactory = new com.thinkaurelius.thrift.util.TBinaryProtocol.Factory(true, true);
1:98eec0a: 
1:edd6636:             TDisruptorServer.Args serverArgs = new TDisruptorServer.Args(serverTransport).useHeapBasedAllocation(true)
1:edd6636:                                                                                          .inputTransportFactory(args.inTransportFactory)
1:98eec0a:                                                                                          .outputTransportFactory(args.outTransportFactory)
1:98eec0a:                                                                                          .inputProtocolFactory(protocolFactory)
1:98eec0a:                                                                                          .outputProtocolFactory(protocolFactory)
1:19767fc:                                                                                          .processor(args.processor)
1:b9802ff:                                                                                          .maxFrameSizeInBytes(DatabaseDescriptor.getThriftFramedTransportSize())
1:b22089d:                                                                                          .invocationExecutor(invoker)
1:b9802ff:                                                                                          .alwaysReallocateBuffers(true);
1:98eec0a: 
1:98eec0a:             return new THsHaDisruptorServer(serverArgs);
1:98eec0a:         }
1:98eec0a:     }
1:98eec0a: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:b22089d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.SynchronousQueue;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
1: import org.apache.cassandra.concurrent.NamedThreadFactory;
/////////////////////////////////////////////////////////////////////////
1:             ThreadPoolExecutor invoker = new JMXEnabledThreadPoolExecutor(DatabaseDescriptor.getRpcMinThreads(),
1:                                                                           DatabaseDescriptor.getRpcMaxThreads(),
1:                                                                           60L,
1:                                                                           TimeUnit.SECONDS,
1:                                                                           new SynchronousQueue<Runnable>(),
1:                                                                           new NamedThreadFactory("RPC-Thread"), "RPC-THREAD-POOL");
1: 
/////////////////////////////////////////////////////////////////////////
1:                                                                                          .invocationExecutor(invoker)
commit:19767fc
/////////////////////////////////////////////////////////////////////////
1:                                                                                          .processor(args.processor)
0:                                                                                          .maxFrameSizeInBytes(DatabaseDescriptor.getThriftFramedTransportSize());
commit:98eec0a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.thrift;
1: 
1: import java.net.InetSocketAddress;
1: 
1: import com.thinkaurelius.thrift.Message;
1: import com.thinkaurelius.thrift.TDisruptorServer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.thrift.server.TServer;
1: import org.apache.thrift.transport.TNonblockingServerTransport;
1: import org.apache.thrift.transport.TNonblockingSocket;
1: import org.apache.thrift.transport.TTransportException;
1: 
1: public class THsHaDisruptorServer extends TDisruptorServer
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(THsHaDisruptorServer.class.getName());
1: 
1:     /**
1:      * All the arguments to Non Blocking Server will apply here. In addition,
1:      * executor pool will be responsible for creating the internal threads which
1:      * will process the data. threads for selection usually are equal to the
1:      * number of cpu's
1:      */
1:     public THsHaDisruptorServer(Args args)
1:     {
1:         super(args);
1:         logger.info("Starting up {}", this);
1:     }
1: 
1:     @Override
1:     protected void beforeInvoke(Message buffer)
1:     {
1:         TNonblockingSocket socket = (TNonblockingSocket) buffer.transport;
1:         ThriftSessionManager.instance.setCurrentSocket(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:     }
1: 
1:     public static class Factory implements TServerFactory
1:     {
1:         public TServer buildTServer(Args args)
1:         {
1:             if (DatabaseDescriptor.getClientEncryptionOptions().enabled)
1:                 throw new RuntimeException("Client SSL is not supported for non-blocking sockets (hsha). Please remove client ssl from the configuration.");
1: 
1:             final InetSocketAddress addr = args.addr;
1:             TNonblockingServerTransport serverTransport;
1:             try
1:             {
1:                 serverTransport = new TCustomNonblockingServerSocket(addr, args.keepAlive, args.sendBufferSize, args.recvBufferSize);
1:             }
1:             catch (TTransportException e)
1:             {
1:                 throw new RuntimeException(String.format("Unable to create thrift socket to %s:%s", addr.getAddress(), addr.getPort()), e);
1:             }
1: 
1:             com.thinkaurelius.thrift.util.TBinaryProtocol.Factory protocolFactory = new com.thinkaurelius.thrift.util.TBinaryProtocol.Factory(true, true);
1: 
0:             TDisruptorServer.Args serverArgs = new TDisruptorServer.Args(serverTransport).inputTransportFactory(args.inTransportFactory)
1:                                                                                          .outputTransportFactory(args.outTransportFactory)
1:                                                                                          .inputProtocolFactory(protocolFactory)
1:                                                                                          .outputProtocolFactory(protocolFactory)
0:                                                                                          .processor(args.processor);
1: 
1:             return new THsHaDisruptorServer(serverArgs);
1:         }
1:     }
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:b9802ff
/////////////////////////////////////////////////////////////////////////
1:                                                                                          .maxFrameSizeInBytes(DatabaseDescriptor.getThriftFramedTransportSize())
1:                                                                                          .alwaysReallocateBuffers(true);
commit:e141694
/////////////////////////////////////////////////////////////////////////
0:                                                                                          .maxFrameSizeInBytes(DatabaseDescriptor.getThriftFramedTransportSize())
0:                                                                                          .alwaysReallocateBuffers(true);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:edd6636
/////////////////////////////////////////////////////////////////////////
1:             TDisruptorServer.Args serverArgs = new TDisruptorServer.Args(serverTransport).useHeapBasedAllocation(true)
1:                                                                                          .inputTransportFactory(args.inTransportFactory)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
author:Jason Brown
-------------------------------------------------------------------------------
commit:47ac42f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.transport.TNonblockingTransport;
/////////////////////////////////////////////////////////////////////////
1:     public void beforeClose(Message buffer)
1:     {
1:         TNonblockingSocket socket = (TNonblockingSocket) buffer.transport;
1:         ThriftSessionManager.instance.connectionComplete(socket.getSocketChannel().socket().getRemoteSocketAddress());
1:     }
1: 
============================================================================