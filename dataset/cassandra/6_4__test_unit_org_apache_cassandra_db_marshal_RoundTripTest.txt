1:c6f76b9: package org.apache.cassandra.db.marshal;
1:887dba9: /*
1:07cdfd0:  *
1:887dba9:  * Licensed to the Apache Software Foundation (ASF) under one
1:887dba9:  * or more contributor license agreements.  See the NOTICE file
1:887dba9:  * distributed with this work for additional information
1:887dba9:  * regarding copyright ownership.  The ASF licenses this file
1:887dba9:  * to you under the Apache License, Version 2.0 (the
1:887dba9:  * "License"); you may not use this file except in compliance
1:887dba9:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:887dba9:  *   http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:887dba9:  * Unless required by applicable law or agreed to in writing,
1:887dba9:  * software distributed under the License is distributed on an
1:887dba9:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:887dba9:  * KIND, either express or implied.  See the License for the
1:887dba9:  * specific language governing permissions and limitations
1:887dba9:  * under the License.
1:07cdfd0:  *
1:887dba9:  */
1:c11eeb4: 
1:fc8b76f: import org.apache.cassandra.serializers.*;
1:56492f5: import org.apache.cassandra.utils.Hex;
1:c6f76b9: import org.apache.cassandra.utils.UUIDGen;
1:c6f76b9: import org.junit.Test;
1:07cdfd0: 
1:c6f76b9: import java.math.BigInteger;
1:c6f76b9: import java.nio.ByteBuffer;
1:ce206e2: import java.nio.charset.StandardCharsets;
1:c6f76b9: import java.util.UUID;
1:07cdfd0: 
1:c6f76b9: public class RoundTripTest
1:c6f76b9: {
3:c6f76b9:     @Test
1:c6f76b9:     public void testInteger()
1:c6f76b9:     {
1:c6f76b9:         BigInteger bi = new BigInteger("1");
1:c6f76b9:         assert bi.intValue() == 1;
1:c6f76b9:         assert IntegerType.instance.getString(IntegerType.instance.fromString("1")).equals("1");
1:c6f76b9:         assert IntegerType.instance.fromString(IntegerType.instance.getString(ByteBuffer.wrap(bi.toByteArray())))
1:c6f76b9:                 .equals(ByteBuffer.wrap(bi.toByteArray()));
1:05d8ffd:         assert IntegerType.instance.compose(ByteBuffer.wrap(bi.toByteArray())).equals(bi);
1:e9c6742:         assert IntegerSerializer.instance.toString(bi).equals("1");
1:c6f76b9:     }
1:07cdfd0: 
1:e8154be:     @Test
1:c6f76b9:     public void testLong()
1:c6f76b9:     {
1:c6f76b9:         byte[] v = new byte[]{0,0,0,0,0,0,0,1};
1:c6f76b9:         assert LongType.instance.getString(LongType.instance.fromString("1")).equals("1");
1:c6f76b9:         assert LongType.instance.fromString(LongType.instance.getString(ByteBuffer.wrap(v)))
2:c6f76b9:                 .equals(ByteBuffer.wrap(v));
1:05d8ffd:         assert LongType.instance.compose(ByteBuffer.wrap(v)) == 1L;
1:e9c6742:         assert LongSerializer.instance.toString(1L).equals("1");
1:c6f76b9:     }
1:07cdfd0: 
1:c6f76b9:     @Test
1:58df830:     public void intLong()
1:58df830:     {
1:58df830:         byte[] v = new byte[]{0,0,0,1};
1:58df830:         assert Int32Type.instance.getString(Int32Type.instance.fromString("1")).equals("1");
1:58df830:         assert Int32Type.instance.fromString(Int32Type.instance.getString(ByteBuffer.wrap(v)))
1:58df830:                 .equals(ByteBuffer.wrap(v));
1:58df830:         assert Int32Type.instance.compose(ByteBuffer.wrap(v)) == 1;
1:e9c6742:         assert Int32Serializer.instance.toString(1).equals("1");
1:58df830:     }
1:58df830: 
1:58df830:     @Test
1:c6f76b9:     public void testAscii() throws Exception
1:c6f76b9:     {
1:ce206e2:         byte[] abc = "abc".getBytes(StandardCharsets.US_ASCII);
1:c6f76b9:         assert AsciiType.instance.getString(AsciiType.instance.fromString("abc")).equals("abc");
1:c6f76b9:         assert AsciiType.instance.fromString(AsciiType.instance.getString(ByteBuffer.wrap(abc)))
1:c6f76b9:                 .equals(ByteBuffer.wrap(abc));
1:05d8ffd:         assert AsciiType.instance.compose(ByteBuffer.wrap(abc)).equals("abc");
1:e9c6742:         assert AsciiSerializer.instance.toString("abc").equals("abc");
1:c6f76b9:     }
1:07cdfd0: 
1:c6f76b9:     @Test
1:c6f76b9:     public void testBytes()
1:c6f76b9:     {
1:c6f76b9:         byte[] v = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
1:05d8ffd:         assert BytesType.instance.compose(ByteBuffer.wrap(v)).equals(ByteBuffer.wrap(v));
1:e9c6742:         assert BytesSerializer.instance.toString(ByteBuffer.wrap(v)).equals(Hex.bytesToHex(v));
1:c6f76b9:     }
1:07cdfd0: 
1:c6f76b9:     @Test
1:c6f76b9:     public void testLexicalUUID()
1:c6f76b9:     {
1:7442fc0:         UUID uuid = UUIDGen.getTimeUUID();
1:c6f76b9:         assert LexicalUUIDType.instance.fromString(LexicalUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
1:c6f76b9:                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:05d8ffd:         assert LexicalUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
1:e9c6742:         assert UUIDSerializer.instance.toString(uuid).equals(uuid.toString());
1:c6f76b9:     }
1:07cdfd0: 
1:5dc4077:     @Test
1:c6f76b9:     public void testTimeUUID()
1:c6f76b9:     {
1:7442fc0:         UUID uuid = UUIDGen.getTimeUUID();
1:c6f76b9:         assert TimeUUIDType.instance.getString(TimeUUIDType.instance.fromString(uuid.toString()))
2:c6f76b9:                 .equals(uuid.toString());
1:c6f76b9:         assert TimeUUIDType.instance.fromString(TimeUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
1:c6f76b9:                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:05d8ffd:         assert TimeUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
1:07cdfd0: 
2:c706239:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(uuid.toString())));
1:e9c6742:         assert UUIDSerializer.instance.toString(uuid).equals(uuid.toString());
1:c6f76b9:     }
1:07cdfd0: 
1:c6f76b9:     @Test
1:c6f76b9:     public void testUtf8() throws Exception
1:c6f76b9:     {
1:c6f76b9:         String v = "\u2297\u5432\u2376\u263d\uf543";
1:c6f76b9:         assert UTF8Type.instance.getString(UTF8Type.instance.fromString(v)).equals(v);
1:ce206e2:         assert UTF8Type.instance.fromString(UTF8Type.instance.getString(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8))))
1:ce206e2:                 .equals(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8)));
1:ce206e2:         assert UTF8Type.instance.compose(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8))).equals(v);
1:e9c6742:         assert UTF8Serializer.instance.toString(v).equals(v);
1:c6f76b9:     }
1:c6f76b9: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ce206e2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:         byte[] abc = "abc".getBytes(StandardCharsets.US_ASCII);
/////////////////////////////////////////////////////////////////////////
1:         assert UTF8Type.instance.fromString(UTF8Type.instance.getString(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8))))
1:                 .equals(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8)));
1:         assert UTF8Type.instance.compose(ByteBuffer.wrap(v.getBytes(StandardCharsets.UTF_8))).equals(v);
commit:58df830
/////////////////////////////////////////////////////////////////////////
1:     public void intLong()
1:     {
1:         byte[] v = new byte[]{0,0,0,1};
1:         assert Int32Type.instance.getString(Int32Type.instance.fromString("1")).equals("1");
1:         assert Int32Type.instance.fromString(Int32Type.instance.getString(ByteBuffer.wrap(v)))
1:                 .equals(ByteBuffer.wrap(v));
1:         assert Int32Type.instance.compose(ByteBuffer.wrap(v)) == 1;
0:         // assert Int32Type.instance.toString(1).equals("1");
1:     }
1:     
1:     @Test
commit:9404c65
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcLong.instance.toString(1L).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcAscii.instance.toString("abc").equals("abc");
commit:6c467fd
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcLexicalUUID.instance.getString(LexicalUUIDType.instance.fromString(uuid.toString()))
0:         assert JdbcLexicalUUID.instance.toString(uuid).equals(uuid.toString());
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.*;
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcInteger.instance.toString(bi).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcBytes.instance.toString(BytesType.instance.fromString(FBUtilities.bytesToHex(v)))
0:         assert BytesType.instance.fromString(JdbcBytes.instance.toString(ByteBuffer.wrap(v)))
0:         assert JdbcBytes.instance.toString(ByteBuffer.wrap(v)).equals(FBUtilities.bytesToHex(v));
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcTimeUUID.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcUTF8.instance.toString(v).equals(v);
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.cassandra.cql.term.*;
/////////////////////////////////////////////////////////////////////////
0:         assert IntegerTerm.instance.toString(bi).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert LongTerm.instance.toString(1L).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert AsciiTerm.instance.toString("abc").equals("abc");
0:         assert BytesTerm.instance.toString(BytesType.instance.fromString(FBUtilities.bytesToHex(v)))
0:         assert BytesType.instance.fromString(BytesTerm.instance.toString(ByteBuffer.wrap(v)))
0:         assert BytesTerm.instance.toString(ByteBuffer.wrap(v)).equals(FBUtilities.bytesToHex(v));
0:         assert LexicalUUIDTerm.instance.getString(LexicalUUIDType.instance.fromString(uuid.toString()))
0:         assert LexicalUUIDTerm.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
0:         assert TimeUUIDTerm.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
0:         assert UTF8Term.instance.toString(v).equals(v);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.*;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.*;
/////////////////////////////////////////////////////////////////////////
1:         assert IntegerSerializer.instance.toString(bi).equals("1");
/////////////////////////////////////////////////////////////////////////
1:         assert LongSerializer.instance.toString(1L).equals("1");
/////////////////////////////////////////////////////////////////////////
1:         assert Int32Serializer.instance.toString(1).equals("1");
/////////////////////////////////////////////////////////////////////////
1:         assert AsciiSerializer.instance.toString("abc").equals("abc");
0:         assert BytesSerializer.instance.getString(BytesType.instance.fromString(Hex.bytesToHex(v)))
0:         assert BytesType.instance.fromString(BytesSerializer.instance.getString(ByteBuffer.wrap(v)))
1:         assert BytesSerializer.instance.toString(ByteBuffer.wrap(v)).equals(Hex.bytesToHex(v));
0:         assert UUIDSerializer.instance.getString(LexicalUUIDType.instance.fromString(uuid.toString()))
1:         assert UUIDSerializer.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
1:         assert UUIDSerializer.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
1:         assert UTF8Serializer.instance.toString(v).equals(v);
commit:9dcec00
/////////////////////////////////////////////////////////////////////////
commit:7442fc0
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUIDGen.getTimeUUID();
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUIDGen.getTimeUUID();
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08-0500")));
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08-0500")));
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:56492f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
0:         assert JdbcBytes.instance.toString(BytesType.instance.fromString(Hex.bytesToHex(v)))
0:                 .equals(Hex.bytesToHex(v));
0:         assert JdbcBytes.instance.toString(ByteBuffer.wrap(v)).equals(Hex.bytesToHex(v));
commit:887dba9
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
0: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress());
/////////////////////////////////////////////////////////////////////////
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress());
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         assert IntegerType.instance.toString(bi).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert LongType.instance.toString(1L).equals("1");
/////////////////////////////////////////////////////////////////////////
0:         assert AsciiType.instance.toString("abc").equals("abc");
0:         assert BytesType.instance.toString(BytesType.instance.fromString(FBUtilities.bytesToHex(v)))
0:         assert BytesType.instance.fromString(BytesType.instance.toString(ByteBuffer.wrap(v)))
0:         assert BytesType.instance.toString(ByteBuffer.wrap(v)).equals(FBUtilities.bytesToHex(v));
/////////////////////////////////////////////////////////////////////////
0:         assert LexicalUUIDType.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
0:         assert TimeUUIDType.instance.toString(uuid).equals(uuid.toString());
/////////////////////////////////////////////////////////////////////////
0:         assert UTF8Type.instance.toString(v).equals(v);
commit:5dc4077
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
0:         Calendar c = Calendar.getInstance();
/////////////////////////////////////////////////////////////////////////
0:         Long ts = new Long(1299560400000L);
/////////////////////////////////////////////////////////////////////////
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00-0500")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00:00-0500")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00-0500")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00:00-0500")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08-0500")));  
commit:2303abc
/////////////////////////////////////////////////////////////////////////
0:     @Test @Ignore
commit:556cdcf
/////////////////////////////////////////////////////////////////////////
0:         Calendar c = Calendar.getInstance(TimeZone.getTimeZone("America/Chicago"));
commit:e8154be
/////////////////////////////////////////////////////////////////////////
0: import java.util.TimeZone;
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:         Calendar.getInstance(TimeZone.getTimeZone("America/Chicago"));
/////////////////////////////////////////////////////////////////////////
commit:531b00e
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
0:     @Test @Ignore
commit:0bf285b
/////////////////////////////////////////////////////////////////////////
0:         c.set(Calendar.ZONE_OFFSET, -6 * 1000 * 60 * 60);
commit:c706239
/////////////////////////////////////////////////////////////////////////
0: import java.util.Calendar;
/////////////////////////////////////////////////////////////////////////
0:         
1:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(uuid.toString())));
0:         
0:         Calendar c = Calendar.getInstance();
0:         c.set(Calendar.YEAR, 2011);
0:         c.set(Calendar.MONTH, Calendar.MARCH);
0:         c.set(Calendar.DAY_OF_MONTH, 8);
0:         c.set(Calendar.HOUR_OF_DAY, 0);
0:         c.set(Calendar.MINUTE, 0);
0:         c.set(Calendar.SECOND, 0);
0:         c.set(Calendar.MILLISECOND, 0);
0:         Long ts = new Long(1299564000000L);
0:         assert ts.equals(c.getTimeInMillis()) : c.getTimeInMillis();
0:         
0:         // create a uuid with a known time.
0:         uuid = TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(ts.toString()));
1:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(uuid.toString())));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00:00")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00-0600")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00:00-0600")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00-0600")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00:00")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00:00-0600")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08")));
0:         assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08-0600")));  
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
1:         assert IntegerType.instance.compose(ByteBuffer.wrap(bi.toByteArray())).equals(bi);
/////////////////////////////////////////////////////////////////////////
1:         assert LongType.instance.compose(ByteBuffer.wrap(v)) == 1L;
/////////////////////////////////////////////////////////////////////////
1:         assert AsciiType.instance.compose(ByteBuffer.wrap(abc)).equals("abc");
/////////////////////////////////////////////////////////////////////////
1:         assert BytesType.instance.compose(ByteBuffer.wrap(v)).equals(ByteBuffer.wrap(v));
/////////////////////////////////////////////////////////////////////////
1:         assert LexicalUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
/////////////////////////////////////////////////////////////////////////
1:         assert TimeUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
/////////////////////////////////////////////////////////////////////////
0:         assert UTF8Type.instance.compose(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))).equals(v);
commit:c6f76b9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.marshal;
0: 
0: import com.google.common.base.Charsets;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
1: import org.junit.Test;
0: 
1: import java.math.BigInteger;
1: import java.nio.ByteBuffer;
0: import java.util.Arrays;
1: import java.util.UUID;
0: 
1: public class RoundTripTest
1: {
1:     @Test
1:     public void testInteger()
1:     {
1:         BigInteger bi = new BigInteger("1");
1:         assert bi.intValue() == 1;
1:         assert IntegerType.instance.getString(IntegerType.instance.fromString("1")).equals("1");
1:         assert IntegerType.instance.fromString(IntegerType.instance.getString(ByteBuffer.wrap(bi.toByteArray())))
1:                 .equals(ByteBuffer.wrap(bi.toByteArray()));
1:     }
0:     
1:     @Test
1:     public void testLong()
1:     {
1:         byte[] v = new byte[]{0,0,0,0,0,0,0,1};
1:         assert LongType.instance.getString(LongType.instance.fromString("1")).equals("1");
1:         assert LongType.instance.fromString(LongType.instance.getString(ByteBuffer.wrap(v)))
1:                 .equals(ByteBuffer.wrap(v));
1:     }
0:     
1:     @Test
1:     public void testAscii() throws Exception
1:     {
0:         byte[] abc = "abc".getBytes(Charsets.US_ASCII);
1:         assert AsciiType.instance.getString(AsciiType.instance.fromString("abc")).equals("abc");
1:         assert AsciiType.instance.fromString(AsciiType.instance.getString(ByteBuffer.wrap(abc)))
1:                 .equals(ByteBuffer.wrap(abc));
1:     }
0:     
1:     @Test
1:     public void testBytes()
1:     {
1:         byte[] v = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
0:         assert BytesType.instance.getString(BytesType.instance.fromString(FBUtilities.bytesToHex(v)))
0:                 .equals(FBUtilities.bytesToHex(v));
0:         assert BytesType.instance.fromString(BytesType.instance.getString(ByteBuffer.wrap(v)))
1:                 .equals(ByteBuffer.wrap(v));
1:     }
0:     
1:     @Test
1:     public void testLexicalUUID()
1:     {
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
0:         assert LexicalUUIDType.instance.getString(LexicalUUIDType.instance.fromString(uuid.toString()))
1:                 .equals(uuid.toString());
1:         assert LexicalUUIDType.instance.fromString(LexicalUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
1:                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:     }
0:     
1:     @Test
1:     public void testTimeUUID()
1:     {
0:         UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
1:         assert TimeUUIDType.instance.getString(TimeUUIDType.instance.fromString(uuid.toString()))
1:                 .equals(uuid.toString());
1:         assert TimeUUIDType.instance.fromString(TimeUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
1:                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
1:     }
0:     
1:     @Test
1:     public void testUtf8() throws Exception
1:     {
1:         String v = "\u2297\u5432\u2376\u263d\uf543";
1:         assert UTF8Type.instance.getString(UTF8Type.instance.fromString(v)).equals(v);
0:         assert UTF8Type.instance.fromString(UTF8Type.instance.getString(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))))
0:                 .equals(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8)));
1:     }
1: }
============================================================================