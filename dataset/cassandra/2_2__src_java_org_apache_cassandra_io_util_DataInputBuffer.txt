1:c4c9eae: /*
1:c4c9eae:  * Licensed to the Apache Software Foundation (ASF) under one
1:c4c9eae:  * or more contributor license agreements.  See the NOTICE file
1:c4c9eae:  * distributed with this work for additional information
1:c4c9eae:  * regarding copyright ownership.  The ASF licenses this file
1:c4c9eae:  * to you under the Apache License, Version 2.0 (the
1:c4c9eae:  * "License"); you may not use this file except in compliance
1:c4c9eae:  * with the License.  You may obtain a copy of the License at
3:c4c9eae:  *
1:c4c9eae:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c4c9eae:  *
1:c4c9eae:  * Unless required by applicable law or agreed to in writing, software
1:c4c9eae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4c9eae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4c9eae:  * See the License for the specific language governing permissions and
1:c4c9eae:  * limitations under the License.
1:c4c9eae:  */
1:c4c9eae: package org.apache.cassandra.io.util;
2:c4c9eae: 
1:c4c9eae: import java.io.IOException;
1:c4c9eae: import java.nio.ByteBuffer;
1:c4c9eae: 
1:c4c9eae: /**
1:ce63ccc:  * Input stream around a single ByteBuffer.
1:c4c9eae:  */
1:ce63ccc: public class DataInputBuffer extends RebufferingInputStream
1:c4c9eae: {
1:c4c9eae:     private static ByteBuffer slice(byte[] buffer, int offset, int length)
1:c4c9eae:     {
1:c4c9eae:         ByteBuffer buf = ByteBuffer.wrap(buffer);
1:c4c9eae:         if (offset > 0 || length < buf.capacity())
1:c4c9eae:         {
1:c4c9eae:             buf.position(offset);
1:c4c9eae:             buf.limit(offset + length);
1:c4c9eae:             buf = buf.slice();
1:c4c9eae:         }
1:c4c9eae:         return buf;
1:c4c9eae:     }
1:c4c9eae: 
1:c4c9eae:     /**
1:ce63ccc:      * @param buffer
1:c4c9eae:      * @param duplicate Whether or not to duplicate the buffer to ensure thread safety
1:c4c9eae:      */
1:ce63ccc:     public DataInputBuffer(ByteBuffer buffer, boolean duplicate)
1:c4c9eae:     {
1:ce63ccc:         super(duplicate ? buffer.duplicate() : buffer);
1:c4c9eae:     }
1:c4c9eae: 
1:c4c9eae:     public DataInputBuffer(byte[] buffer, int offset, int length)
1:c4c9eae:     {
1:c4c9eae:         super(slice(buffer, offset, length));
1:c4c9eae:     }
1:c4c9eae: 
1:c4c9eae:     public DataInputBuffer(byte[] buffer)
1:c4c9eae:     {
1:c4c9eae:         super(ByteBuffer.wrap(buffer));
1:c4c9eae:     }
1:c4c9eae: 
1:c4c9eae:     @Override
1:ce63ccc:     protected void reBuffer() throws IOException
1:c4c9eae:     {
1:ce63ccc:         //nope, we don't rebuffer, we are done!
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public int available() throws IOException
1:ce63ccc:     {
1:ce63ccc:         return buffer.remaining();
1:c4c9eae:     }
1:c4c9eae: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1:  * Input stream around a single ByteBuffer.
1: public class DataInputBuffer extends RebufferingInputStream
/////////////////////////////////////////////////////////////////////////
1:      * @param buffer
1:     public DataInputBuffer(ByteBuffer buffer, boolean duplicate)
1:         super(duplicate ? buffer.duplicate() : buffer);
/////////////////////////////////////////////////////////////////////////
1:     protected void reBuffer() throws IOException
1:         //nope, we don't rebuffer, we are done!
1:     }
1: 
1:     @Override
1:     public int available() throws IOException
1:     {
1:         return buffer.remaining();
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: /**
0:  * Input stream around a fixed ByteBuffer. Necessary to have this derived class to avoid NIODataInputStream's
0:  * shuffling of bytes behavior in readNext()
1:  *
1:  */
0: public class DataInputBuffer extends NIODataInputStream
1: {
1: 
1:     private static ByteBuffer slice(byte[] buffer, int offset, int length)
1:     {
1:         ByteBuffer buf = ByteBuffer.wrap(buffer);
1:         if (offset > 0 || length < buf.capacity())
1:         {
1:             buf.position(offset);
1:             buf.limit(offset + length);
1:             buf = buf.slice();
1:         }
1:         return buf;
1:     }
1: 
1:     /**
1:      *
0:      * @param buf
1:      * @param duplicate Whether or not to duplicate the buffer to ensure thread safety
1:      */
0:     public DataInputBuffer(ByteBuffer buf, boolean duplicate)
1:     {
0:         super(buf, duplicate);
1:     }
1: 
1:     public DataInputBuffer(byte[] buffer, int offset, int length)
1:     {
1:         super(slice(buffer, offset, length));
1:     }
1: 
1:     public DataInputBuffer(byte[] buffer)
1:     {
1:         super(ByteBuffer.wrap(buffer));
1:     }
1: 
1:     @Override
0:     protected int readNext() throws IOException
1:     {
0:         return -1;
1:     }
1: }
============================================================================