1:72a6cff: package org.apache.cassandra.triggers;
1:60bf7a5: /*
1:68d2526:  *
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:68d2526:  *
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:68d2526:  *
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:68d2526:  *
1:60bf7a5:  */
1:60bf7a5: 
1:72a6cff: 
1:72a6cff: import java.util.Collection;
1:72a6cff: 
1:6bbb13b: import org.apache.cassandra.db.Mutation;
1:a991b64: import org.apache.cassandra.db.partitions.Partition;
1:72a6cff: 
1:72a6cff: /**
1:a991b64:  * Trigger interface, For every partition update received by the coordinator {@link #augment(Partition)}
1:72a6cff:  * is called.<p>
3:60bf7a5:  *
1:72a6cff:  * <b> Contract:</b><br>
1:72a6cff:  * 1) Implementation of this interface should only have a constructor without parameters <br>
1:72a6cff:  * 2) ITrigger implementation can be instantiated multiple times during the server life time.
1:72a6cff:  *      (Depends on the number of times trigger folder is updated.)<br>
1:72a6cff:  * 3) ITrigger implementation should be state-less (avoid dependency on instance variables).<br>
1:116de2b:  *
1:72a6cff:  * <br><b>The API is still beta and can change.</b>
1:72a6cff:  */
1:72a6cff: public interface ITrigger
1:72a6cff: {
1:72a6cff:     /**
1:72a6cff:      * Called exactly once per CF update, returned mutations are atomically updated.
1:60bf7a5:      *
1:6bbb13b:      * @param update - update received for the CF
1:116de2b:      * @return additional modifications to be applied along with the supplied update
1:72a6cff:      */
1:a991b64:     public Collection<Mutation> augment(Partition update);
1:72a6cff: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:d0ab751
/////////////////////////////////////////////////////////////////////////
0:      * @param partitionKey - partition Key for the update.
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.partitions.Partition;
1:  * Trigger interface, For every partition update received by the coordinator {@link #augment(Partition)}
/////////////////////////////////////////////////////////////////////////
1:     public Collection<Mutation> augment(Partition update);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:116de2b
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      * @return additional modifications to be applied along with the supplied update
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Mutation;
/////////////////////////////////////////////////////////////////////////
0:      * @param key - parition Key for the update.
1:      * @param update - update received for the CF
0:     public Collection<Mutation> augment(ByteBuffer partitionKey, ColumnFamily update);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.triggers;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.Collection;
1: 
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.RowMutation;
1: 
1: /**
0:  * Trigger interface, For every Mutation received by the coordinator {@link #augment(ByteBuffer, ColumnFamily)}
1:  * is called.<p>
0:  *
1:  * <b> Contract:</b><br>
1:  * 1) Implementation of this interface should only have a constructor without parameters <br>
1:  * 2) ITrigger implementation can be instantiated multiple times during the server life time.
1:  *      (Depends on the number of times trigger folder is updated.)<br>
1:  * 3) ITrigger implementation should be state-less (avoid dependency on instance variables).<br>
0:  * 
1:  * <br><b>The API is still beta and can change.</b>
1:  */
1: public interface ITrigger
1: {
1:     /**
1:      * Called exactly once per CF update, returned mutations are atomically updated.
0:      *
0:      * @param key - Row Key for the update.
0:      * @param update - Update received for the CF
0:      * @return modifications to be applied, null if no action to be performed.
1:      */
0:     public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update);
1: }
============================================================================