1:3bdcaa3: /*
1:3bdcaa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bdcaa3:  * or more contributor license agreements.  See the NOTICE file
1:3bdcaa3:  * distributed with this work for additional information
1:3bdcaa3:  * regarding copyright ownership.  The ASF licenses this file
1:3bdcaa3:  * to you under the Apache License, Version 2.0 (the
1:3bdcaa3:  * "License"); you may not use this file except in compliance
1:3bdcaa3:  * with the License.  You may obtain a copy of the License at
1:3bdcaa3:  *
1:3bdcaa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3bdcaa3:  *
1:3bdcaa3:  * Unless required by applicable law or agreed to in writing, software
1:3bdcaa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bdcaa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bdcaa3:  * See the License for the specific language governing permissions and
1:3bdcaa3:  * limitations under the License.
1:3bdcaa3:  */
1:3bdcaa3: 
1:3bdcaa3: package org.apache.cassandra.db.view;
1:3bdcaa3: 
1:3bdcaa3: import java.net.InetAddress;
1:3bdcaa3: import java.util.ArrayList;
1:3bdcaa3: import java.util.List;
1:c184e8c: import java.util.Optional;
1:3bdcaa3: 
1:3bdcaa3: import org.apache.cassandra.config.DatabaseDescriptor;
1:3bdcaa3: import org.apache.cassandra.db.Keyspace;
1:3bdcaa3: import org.apache.cassandra.dht.Token;
1:3bdcaa3: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1:1bd2c94: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1:3bdcaa3: import org.apache.cassandra.utils.FBUtilities;
1:3bdcaa3: 
1:a3a8dbc: public final class ViewUtils
1:3bdcaa3: {
1:a3a8dbc:     private ViewUtils()
1:3bdcaa3:     {
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     /**
1:3bdcaa3:      * Calculate the natural endpoint for the view.
1:3bdcaa3:      *
1:1bd2c94:      * The view natural endpoint is the endpoint which has the same cardinality as this node in the replication factor.
1:3bdcaa3:      * The cardinality is the number at which this node would store a piece of data, given the change in replication
1:1bd2c94:      * factor. If the keyspace's replication strategy is a NetworkTopologyStrategy, we filter the ring to contain only
1:1bd2c94:      * nodes in the local datacenter when calculating cardinality.
1:3bdcaa3:      *
1:3bdcaa3:      * For example, if we have the following ring:
1:6b7db8a:      *   {@code A, T1 -> B, T2 -> C, T3 -> A}
1:3bdcaa3:      *
1:3bdcaa3:      * For the token T1, at RF=1, A would be included, so A's cardinality for T1 is 1. For the token T1, at RF=2, B would
1:3bdcaa3:      * be included, so B's cardinality for token T1 is 2. For token T3, at RF = 2, A would be included, so A's cardinality
1:3bdcaa3:      * for T3 is 2.
1:3bdcaa3:      *
1:3bdcaa3:      * For a view whose base token is T1 and whose view token is T3, the pairings between the nodes would be:
1:3bdcaa3:      *  A writes to C (A's cardinality is 1 for T1, and C's cardinality is 1 for T3)
1:3bdcaa3:      *  B writes to A (B's cardinality is 2 for T1, and A's cardinality is 2 for T3)
1:3bdcaa3:      *  C writes to B (C's cardinality is 3 for T1, and B's cardinality is 3 for T3)
1:3bdcaa3:      *
1:c184e8c:      * @return Optional.empty() if this method is called using a base token which does not belong to this replica
1:3bdcaa3:      */
1:c184e8c:     public static Optional<InetAddress> getViewNaturalEndpoint(String keyspaceName, Token baseToken, Token viewToken)
1:3bdcaa3:     {
1:3bdcaa3:         AbstractReplicationStrategy replicationStrategy = Keyspace.open(keyspaceName).getReplicationStrategy();
1:3bdcaa3: 
1:3bdcaa3:         String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
1:1bd2c94:         List<InetAddress> baseEndpoints = new ArrayList<>();
1:1bd2c94:         List<InetAddress> viewEndpoints = new ArrayList<>();
1:3bdcaa3:         for (InetAddress baseEndpoint : replicationStrategy.getNaturalEndpoints(baseToken))
1:3bdcaa3:         {
1:1bd2c94:             // An endpoint is local if we're not using Net
1:1bd2c94:             if (!(replicationStrategy instanceof NetworkTopologyStrategy) ||
1:1bd2c94:                 DatabaseDescriptor.getEndpointSnitch().getDatacenter(baseEndpoint).equals(localDataCenter))
1:1bd2c94:                 baseEndpoints.add(baseEndpoint);
1:3bdcaa3:         }
1:3bdcaa3: 
1:3bdcaa3:         for (InetAddress viewEndpoint : replicationStrategy.getNaturalEndpoints(viewToken))
1:3bdcaa3:         {
1:3bdcaa3:             // If we are a base endpoint which is also a view replica, we use ourselves as our view replica
1:3bdcaa3:             if (viewEndpoint.equals(FBUtilities.getBroadcastAddress()))
1:c184e8c:                 return Optional.of(viewEndpoint);
1:3bdcaa3: 
1:3bdcaa3:             // We have to remove any endpoint which is shared between the base and the view, as it will select itself
1:3bdcaa3:             // and throw off the counts otherwise.
1:1bd2c94:             if (baseEndpoints.contains(viewEndpoint))
1:1bd2c94:                 baseEndpoints.remove(viewEndpoint);
1:1bd2c94:             else if (!(replicationStrategy instanceof NetworkTopologyStrategy) ||
1:1bd2c94:                      DatabaseDescriptor.getEndpointSnitch().getDatacenter(viewEndpoint).equals(localDataCenter))
1:1bd2c94:                 viewEndpoints.add(viewEndpoint);
1:3bdcaa3:         }
1:3bdcaa3: 
1:3bdcaa3:         // The replication strategy will be the same for the base and the view, as they must belong to the same keyspace.
1:3bdcaa3:         // Since the same replication strategy is used, the same placement should be used and we should get the same
1:3bdcaa3:         // number of replicas for all of the tokens in the ring.
1:1bd2c94:         assert baseEndpoints.size() == viewEndpoints.size() : "Replication strategy should have the same number of endpoints for the base and the view";
1:1bd2c94:         int baseIdx = baseEndpoints.indexOf(FBUtilities.getBroadcastAddress());
5:c7557bd: 
1:3bdcaa3:         if (baseIdx < 0)
1:c184e8c:             //This node is not a base replica of this key, so we return empty
1:c184e8c:             return Optional.empty();
1:3bdcaa3: 
1:c184e8c:         return Optional.of(viewEndpoints.get(baseIdx));
1:3bdcaa3:     }
1:3bdcaa3: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      *   {@code A, T1 -> B, T2 -> C, T3 -> A}
author:Paulo Motta
-------------------------------------------------------------------------------
commit:c184e8c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Optional;
/////////////////////////////////////////////////////////////////////////
1:      * @return Optional.empty() if this method is called using a base token which does not belong to this replica
1:     public static Optional<InetAddress> getViewNaturalEndpoint(String keyspaceName, Token baseToken, Token viewToken)
/////////////////////////////////////////////////////////////////////////
1:                 return Optional.of(viewEndpoint);
/////////////////////////////////////////////////////////////////////////
1:             //This node is not a base replica of this key, so we return empty
1:             return Optional.empty();
1:         return Optional.of(viewEndpoints.get(baseIdx));
author:Joel Knighton
-------------------------------------------------------------------------------
commit:1bd2c94
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.locator.NetworkTopologyStrategy;
/////////////////////////////////////////////////////////////////////////
1:      * The view natural endpoint is the endpoint which has the same cardinality as this node in the replication factor.
1:      * factor. If the keyspace's replication strategy is a NetworkTopologyStrategy, we filter the ring to contain only
1:      * nodes in the local datacenter when calculating cardinality.
/////////////////////////////////////////////////////////////////////////
1:         List<InetAddress> baseEndpoints = new ArrayList<>();
1:         List<InetAddress> viewEndpoints = new ArrayList<>();
1:             // An endpoint is local if we're not using Net
1:             if (!(replicationStrategy instanceof NetworkTopologyStrategy) ||
1:                 DatabaseDescriptor.getEndpointSnitch().getDatacenter(baseEndpoint).equals(localDataCenter))
1:                 baseEndpoints.add(baseEndpoint);
/////////////////////////////////////////////////////////////////////////
1:             if (baseEndpoints.contains(viewEndpoint))
1:                 baseEndpoints.remove(viewEndpoint);
1:             else if (!(replicationStrategy instanceof NetworkTopologyStrategy) ||
1:                      DatabaseDescriptor.getEndpointSnitch().getDatacenter(viewEndpoint).equals(localDataCenter))
1:                 viewEndpoints.add(viewEndpoint);
1:         assert baseEndpoints.size() == viewEndpoints.size() : "Replication strategy should have the same number of endpoints for the base and the view";
1:         int baseIdx = baseEndpoints.indexOf(FBUtilities.getBroadcastAddress());
/////////////////////////////////////////////////////////////////////////
0:         return viewEndpoints.get(baseIdx);
commit:6c3fa8e
/////////////////////////////////////////////////////////////////////////
0:                 //Since there are pending endpoints we are going to write to the batchlog regardless.
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: public final class ViewUtils
1:     private ViewUtils()
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.view;
1: 
1: import java.net.InetAddress;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.locator.AbstractReplicationStrategy;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public final class MaterializedViewUtils
1: {
0:     private MaterializedViewUtils()
1:     {
1:     }
1: 
1:     /**
1:      * Calculate the natural endpoint for the view.
1:      *
0:      * The view natural endpoint is the endpint which has the same cardinality as this node in the replication factor.
1:      * The cardinality is the number at which this node would store a piece of data, given the change in replication
0:      * factor.
1:      *
1:      * For example, if we have the following ring:
0:      *   A, T1 -> B, T2 -> C, T3 -> A
1:      *
1:      * For the token T1, at RF=1, A would be included, so A's cardinality for T1 is 1. For the token T1, at RF=2, B would
1:      * be included, so B's cardinality for token T1 is 2. For token T3, at RF = 2, A would be included, so A's cardinality
1:      * for T3 is 2.
1:      *
1:      * For a view whose base token is T1 and whose view token is T3, the pairings between the nodes would be:
1:      *  A writes to C (A's cardinality is 1 for T1, and C's cardinality is 1 for T3)
1:      *  B writes to A (B's cardinality is 2 for T1, and A's cardinality is 2 for T3)
1:      *  C writes to B (C's cardinality is 3 for T1, and B's cardinality is 3 for T3)
1:      *
0:      * @throws RuntimeException if this method is called using a base token which does not belong to this replica
1:      */
0:     public static InetAddress getViewNaturalEndpoint(String keyspaceName, Token baseToken, Token viewToken)
1:     {
1:         AbstractReplicationStrategy replicationStrategy = Keyspace.open(keyspaceName).getReplicationStrategy();
1: 
1:         String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
0:         List<InetAddress> localBaseEndpoints = new ArrayList<>();
0:         List<InetAddress> localViewEndpoints = new ArrayList<>();
1:         for (InetAddress baseEndpoint : replicationStrategy.getNaturalEndpoints(baseToken))
1:         {
0:             if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(baseEndpoint).equals(localDataCenter))
0:                 localBaseEndpoints.add(baseEndpoint);
1:         }
1: 
1:         for (InetAddress viewEndpoint : replicationStrategy.getNaturalEndpoints(viewToken))
1:         {
1:             // If we are a base endpoint which is also a view replica, we use ourselves as our view replica
1:             if (viewEndpoint.equals(FBUtilities.getBroadcastAddress()))
0:                 return viewEndpoint;
1: 
1:             // We have to remove any endpoint which is shared between the base and the view, as it will select itself
1:             // and throw off the counts otherwise.
0:             if (localBaseEndpoints.contains(viewEndpoint))
0:                 localBaseEndpoints.remove(viewEndpoint);
0:             else if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(viewEndpoint).equals(localDataCenter))
0:                 localViewEndpoints.add(viewEndpoint);
1:         }
1: 
1:         // The replication strategy will be the same for the base and the view, as they must belong to the same keyspace.
1:         // Since the same replication strategy is used, the same placement should be used and we should get the same
1:         // number of replicas for all of the tokens in the ring.
0:         assert localBaseEndpoints.size() == localViewEndpoints.size() : "Replication strategy should have the same number of endpoints for the base and the view";
0:         int baseIdx = localBaseEndpoints.indexOf(FBUtilities.getBroadcastAddress());
1:         if (baseIdx < 0)
0:             throw new RuntimeException("Trying to get the view natural endpoint on a non-data replica");
1: 
0:         return localViewEndpoints.get(baseIdx);
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:c7557bd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1: 
0:         {
1: 
0:             if (StorageService.instance.getTokenMetadata().pendingEndpointsFor(viewToken, keyspaceName).size() > 0)
0:             {
0:                 //Since there are pending endpoints we are going to store hints this in the batchlog regardless.
0:                 //So we can pretend we are the views endpoint.
1: 
0:                 return FBUtilities.getBroadcastAddress();
0:             }
1: 
0:         }
1: 
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db.view;
0: 
0: import java.net.InetAddress;
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.locator.AbstractReplicationStrategy;
0: import org.apache.cassandra.utils.FBUtilities;
0: 
0: public final class MaterializedViewUtils
0: {
0:     private MaterializedViewUtils()
0:     {
0:     }
0: 
0:     /**
0:      * Calculate the natural endpoint for the view.
0:      *
0:      * The view natural endpoint is the endpint which has the same cardinality as this node in the replication factor.
0:      * The cardinality is the number at which this node would store a piece of data, given the change in replication
0:      * factor.
0:      *
0:      * For example, if we have the following ring:
0:      *   A, T1 -> B, T2 -> C, T3 -> A
0:      *
0:      * For the token T1, at RF=1, A would be included, so A's cardinality for T1 is 1. For the token T1, at RF=2, B would
0:      * be included, so B's cardinality for token T1 is 2. For token T3, at RF = 2, A would be included, so A's cardinality
0:      * for T3 is 2.
0:      *
0:      * For a view whose base token is T1 and whose view token is T3, the pairings between the nodes would be:
0:      *  A writes to C (A's cardinality is 1 for T1, and C's cardinality is 1 for T3)
0:      *  B writes to A (B's cardinality is 2 for T1, and A's cardinality is 2 for T3)
0:      *  C writes to B (C's cardinality is 3 for T1, and B's cardinality is 3 for T3)
0:      *
0:      * @throws RuntimeException if this method is called using a base token which does not belong to this replica
0:      */
0:     public static InetAddress getViewNaturalEndpoint(String keyspaceName, Token baseToken, Token viewToken)
0:     {
0:         AbstractReplicationStrategy replicationStrategy = Keyspace.open(keyspaceName).getReplicationStrategy();
0: 
0:         String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
0:         List<InetAddress> localBaseEndpoints = new ArrayList<>();
0:         List<InetAddress> localViewEndpoints = new ArrayList<>();
0:         for (InetAddress baseEndpoint : replicationStrategy.getNaturalEndpoints(baseToken))
0:         {
0:             if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(baseEndpoint).equals(localDataCenter))
0:                 localBaseEndpoints.add(baseEndpoint);
0:         }
0: 
0:         for (InetAddress viewEndpoint : replicationStrategy.getNaturalEndpoints(viewToken))
0:         {
0:             // If we are a base endpoint which is also a view replica, we use ourselves as our view replica
0:             if (viewEndpoint.equals(FBUtilities.getBroadcastAddress()))
0:                 return viewEndpoint;
0: 
0:             // We have to remove any endpoint which is shared between the base and the view, as it will select itself
0:             // and throw off the counts otherwise.
0:             if (localBaseEndpoints.contains(viewEndpoint))
0:                 localBaseEndpoints.remove(viewEndpoint);
0:             else if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(viewEndpoint).equals(localDataCenter))
0:                 localViewEndpoints.add(viewEndpoint);
0:         }
0: 
0:         // The replication strategy will be the same for the base and the view, as they must belong to the same keyspace.
0:         // Since the same replication strategy is used, the same placement should be used and we should get the same
0:         // number of replicas for all of the tokens in the ring.
0:         assert localBaseEndpoints.size() == localViewEndpoints.size() : "Replication strategy should have the same number of endpoints for the base and the view";
0:         int baseIdx = localBaseEndpoints.indexOf(FBUtilities.getBroadcastAddress());
0:         if (baseIdx < 0)
0:             throw new RuntimeException("Trying to get the view natural endpoint on a non-data replica");
0: 
0:         return localViewEndpoints.get(baseIdx);
0:     }
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
============================================================================