1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: 
1:0626be8: package org.apache.cassandra.index.transactions;
1:0626be8: 
1:0626be8: import org.apache.cassandra.db.DeletionTime;
1:0626be8: import org.apache.cassandra.db.RangeTombstone;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Handling of index updates on the write path.
1:0626be8:  *
1:0626be8:  * Instances of an UpdateTransaction are scoped to a single partition update
1:0626be8:  * A new instance is used for every write, obtained from the
1:0626be8:  * newUpdateTransaction(PartitionUpdate) method. Likewise, a single
1:0626be8:  * CleanupTransaction instance is used for each partition processed during a
1:0626be8:  * compaction or cleanup.
1:0626be8:  *
1:0626be8:  * We make certain guarantees about the lifecycle of each UpdateTransaction
1:0626be8:  * instance. Namely that start() will be called before any other method, and
1:0626be8:  * commit() will be called at the end of the update.
1:0626be8:  * Each instance is initialized with 1..many Index.Indexer instances, one per
1:0626be8:  * registered Index. As with the transaction itself, these are scoped to a
1:0626be8:  * specific partition update, so implementations can be assured that all indexing
1:0626be8:  * events they receive relate to the same logical operation.
1:0626be8:  *
1:0626be8:  * onPartitionDelete(), onRangeTombstone(), onInserted() and onUpdated()
1:0626be8:  * calls may arrive in any order, but this should have no impact for the
1:0626be8:  * Indexers being notified as any events delivered to a single instance
1:0626be8:  * necessarily relate to a single partition.
1:0626be8:  *
1:0626be8:  * The typical sequence of events during a Memtable update would be:
1:0626be8:  * start()                       -- no-op, used to notify Indexers of the start of the transaction
1:0626be8:  * onPartitionDeletion(dt)       -- if the PartitionUpdate implies one
1:0626be8:  * onRangeTombstone(rt)*         -- for each in the PartitionUpdate, if any
1:0626be8:  *
1:0626be8:  * then:
1:0626be8:  * onInserted(row)*              -- called for each Row not already present in the Memtable
1:0626be8:  * onUpdated(existing, updated)* -- called for any Row in the update for where a version was already present
1:0626be8:  *                                  in the Memtable. It's important to note here that existing is the previous
1:6b7db8a:  *                                  row from the Memtable and updated is the final version replacing it. It is
1:0626be8:  *                                  *not* the incoming row, but the result of merging the incoming and existing
1:0626be8:  *                                  rows.
1:0626be8:  * commit()                      -- finally, finish is called when the new Partition is swapped into the Memtable
1:0626be8:  */
1:0626be8: public interface UpdateTransaction extends IndexTransaction
1:0626be8: {
1:0626be8:     void onPartitionDeletion(DeletionTime deletionTime);
1:0626be8:     void onRangeTombstone(RangeTombstone rangeTombstone);
1:0626be8:     void onInserted(Row row);
1:0626be8:     void onUpdated(Row existing, Row updated);
1:0626be8: 
1:0626be8:     UpdateTransaction NO_OP = new UpdateTransaction()
1:0626be8:     {
1:0626be8:         public void start(){}
1:0626be8:         public void onPartitionDeletion(DeletionTime deletionTime){}
1:0626be8:         public void onRangeTombstone(RangeTombstone rangeTombstone){}
1:0626be8:         public void onInserted(Row row){}
1:0626be8:         public void onUpdated(Row existing, Row updated){}
1:0626be8:         public void commit(){}
1:0626be8:     };
1:0626be8: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  *                                  row from the Memtable and updated is the final version replacing it. It is
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.transactions;
1: 
1: import org.apache.cassandra.db.DeletionTime;
1: import org.apache.cassandra.db.RangeTombstone;
1: import org.apache.cassandra.db.rows.Row;
1: 
1: /**
1:  * Handling of index updates on the write path.
1:  *
1:  * Instances of an UpdateTransaction are scoped to a single partition update
1:  * A new instance is used for every write, obtained from the
1:  * newUpdateTransaction(PartitionUpdate) method. Likewise, a single
1:  * CleanupTransaction instance is used for each partition processed during a
1:  * compaction or cleanup.
1:  *
1:  * We make certain guarantees about the lifecycle of each UpdateTransaction
1:  * instance. Namely that start() will be called before any other method, and
1:  * commit() will be called at the end of the update.
1:  * Each instance is initialized with 1..many Index.Indexer instances, one per
1:  * registered Index. As with the transaction itself, these are scoped to a
1:  * specific partition update, so implementations can be assured that all indexing
1:  * events they receive relate to the same logical operation.
1:  *
1:  * onPartitionDelete(), onRangeTombstone(), onInserted() and onUpdated()
1:  * calls may arrive in any order, but this should have no impact for the
1:  * Indexers being notified as any events delivered to a single instance
1:  * necessarily relate to a single partition.
1:  *
1:  * The typical sequence of events during a Memtable update would be:
1:  * start()                       -- no-op, used to notify Indexers of the start of the transaction
1:  * onPartitionDeletion(dt)       -- if the PartitionUpdate implies one
1:  * onRangeTombstone(rt)*         -- for each in the PartitionUpdate, if any
1:  *
1:  * then:
1:  * onInserted(row)*              -- called for each Row not already present in the Memtable
1:  * onUpdated(existing, updated)* -- called for any Row in the update for where a version was already present
1:  *                                  in the Memtable. It's important to note here that existing is the previous
0:  *                                  row from the Memtable & updated is the final version replacing it. It is
1:  *                                  *not* the incoming row, but the result of merging the incoming and existing
1:  *                                  rows.
1:  * commit()                      -- finally, finish is called when the new Partition is swapped into the Memtable
1:  */
1: public interface UpdateTransaction extends IndexTransaction
1: {
1:     void onPartitionDeletion(DeletionTime deletionTime);
1:     void onRangeTombstone(RangeTombstone rangeTombstone);
1:     void onInserted(Row row);
1:     void onUpdated(Row existing, Row updated);
1: 
1:     UpdateTransaction NO_OP = new UpdateTransaction()
1:     {
1:         public void start(){}
1:         public void onPartitionDeletion(DeletionTime deletionTime){}
1:         public void onRangeTombstone(RangeTombstone rangeTombstone){}
1:         public void onInserted(Row row){}
1:         public void onUpdated(Row existing, Row updated){}
1:         public void commit(){}
1:     };
1: }
============================================================================