1:81209f1: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:81209f1:  *
1:81209f1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:81209f1:  */
1:81209f1: package org.apache.cassandra.thrift;
1:81209f1: /*
1:81209f1:  * 
1:81209f1:  * Licensed to the Apache Software Foundation (ASF) under one
1:81209f1:  * or more contributor license agreements.  See the NOTICE file
1:81209f1:  * distributed with this work for additional information
1:81209f1:  * regarding copyright ownership.  The ASF licenses this file
1:81209f1:  * to you under the Apache License, Version 2.0 (the
1:81209f1:  * "License"); you may not use this file except in compliance
1:81209f1:  * with the License.  You may obtain a copy of the License at
1:81209f1:  * 
1:81209f1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:81209f1:  * 
1:81209f1:  * Unless required by applicable law or agreed to in writing,
1:81209f1:  * software distributed under the License is distributed on an
1:81209f1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:81209f1:  * KIND, either express or implied.  See the License for the
1:81209f1:  * specific language governing permissions and limitations
1:81209f1:  * under the License.
1:81209f1:  * 
1:81209f1:  */
1:81209f1: 
1:81209f1: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
64:533bf3f: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:81209f1: import java.util.Map;
1:81209f1: import java.util.HashMap;
1:81209f1: import java.util.EnumMap;
1:81209f1: import java.util.EnumSet;
1:81209f1: import java.util.Collections;
1:81209f1: 
1:81209f1: /**
1:81209f1:  * Represents input splits used by hadoop ColumnFamilyRecordReaders
1:81209f1:  */
1:bffd9ea: public class CfSplit implements org.apache.thrift.TBase<CfSplit, CfSplit._Fields>, java.io.Serializable, Cloneable, Comparable<CfSplit> {
1:81209f1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CfSplit");
1:81209f1: 
1:81209f1:   private static final org.apache.thrift.protocol.TField START_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("start_token", org.apache.thrift.protocol.TType.STRING, (short)1);
1:81209f1:   private static final org.apache.thrift.protocol.TField END_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("end_token", org.apache.thrift.protocol.TType.STRING, (short)2);
1:81209f1:   private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)3);
1:81209f1: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
2:533bf3f:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CfSplitStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CfSplitTupleSchemeFactory());
75:533bf3f:   }
1:81209f1: 
1:81209f1:   public String start_token; // required
1:81209f1:   public String end_token; // required
1:81209f1:   public long row_count; // required
1:81209f1: 
1:81209f1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:81209f1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:81209f1:     START_TOKEN((short)1, "start_token"),
1:81209f1:     END_TOKEN((short)2, "end_token"),
1:81209f1:     ROW_COUNT((short)3, "row_count");
1:81209f1: 
1:81209f1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:81209f1: 
1:81209f1:     static {
1:81209f1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:81209f1:         byName.put(field.getFieldName(), field);
1:81209f1:       }
1:81209f1:     }
1:81209f1: 
1:81209f1:     /**
1:81209f1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:81209f1:      */
1:81209f1:     public static _Fields findByThriftId(int fieldId) {
1:81209f1:       switch(fieldId) {
1:81209f1:         case 1: // START_TOKEN
1:81209f1:           return START_TOKEN;
1:81209f1:         case 2: // END_TOKEN
1:81209f1:           return END_TOKEN;
1:81209f1:         case 3: // ROW_COUNT
1:81209f1:           return ROW_COUNT;
1:81209f1:         default:
1:81209f1:           return null;
1:81209f1:       }
1:81209f1:     }
1:81209f1: 
1:81209f1:     /**
1:81209f1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:81209f1:      * if it is not found.
1:81209f1:      */
1:81209f1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:81209f1:       _Fields fields = findByThriftId(fieldId);
1:81209f1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:81209f1:       return fields;
1:81209f1:     }
1:81209f1: 
1:81209f1:     /**
1:81209f1:      * Find the _Fields constant that matches name, or null if its not found.
1:81209f1:      */
1:81209f1:     public static _Fields findByName(String name) {
1:81209f1:       return byName.get(name);
1:81209f1:     }
1:81209f1: 
1:81209f1:     private final short _thriftId;
1:81209f1:     private final String _fieldName;
1:81209f1: 
1:81209f1:     _Fields(short thriftId, String fieldName) {
1:81209f1:       _thriftId = thriftId;
1:81209f1:       _fieldName = fieldName;
1:81209f1:     }
1:81209f1: 
1:81209f1:     public short getThriftFieldId() {
1:81209f1:       return _thriftId;
1:81209f1:     }
1:81209f1: 
1:81209f1:     public String getFieldName() {
1:81209f1:       return _fieldName;
1:81209f1:     }
1:81209f1:   }
1:81209f1: 
1:81209f1:   // isset id assignments
1:81209f1:   private static final int __ROW_COUNT_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:81209f1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:81209f1:   static {
1:81209f1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:81209f1:     tmpMap.put(_Fields.START_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("start_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:81209f1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:81209f1:     tmpMap.put(_Fields.END_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("end_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:81209f1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:81209f1:     tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:81209f1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:81209f1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:81209f1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CfSplit.class, metaDataMap);
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit() {
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit(
1:81209f1:     String start_token,
1:81209f1:     String end_token,
1:81209f1:     long row_count)
1:81209f1:   {
1:81209f1:     this();
1:81209f1:     this.start_token = start_token;
1:81209f1:     this.end_token = end_token;
1:81209f1:     this.row_count = row_count;
2:81209f1:     setRow_countIsSet(true);
1:81209f1:   }
1:81209f1: 
1:81209f1:   /**
1:81209f1:    * Performs a deep copy on <i>other</i>.
1:81209f1:    */
1:81209f1:   public CfSplit(CfSplit other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:81209f1:     if (other.isSetStart_token()) {
1:81209f1:       this.start_token = other.start_token;
1:81209f1:     }
1:81209f1:     if (other.isSetEnd_token()) {
1:81209f1:       this.end_token = other.end_token;
1:81209f1:     }
1:81209f1:     this.row_count = other.row_count;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit deepCopy() {
1:81209f1:     return new CfSplit(this);
1:81209f1:   }
1:81209f1: 
1:81209f1:   @Override
1:81209f1:   public void clear() {
1:81209f1:     this.start_token = null;
1:81209f1:     this.end_token = null;
1:81209f1:     setRow_countIsSet(false);
1:81209f1:     this.row_count = 0;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public String getStart_token() {
1:81209f1:     return this.start_token;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit setStart_token(String start_token) {
1:81209f1:     this.start_token = start_token;
1:81209f1:     return this;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void unsetStart_token() {
1:81209f1:     this.start_token = null;
1:81209f1:   }
1:81209f1: 
1:81209f1:   /** Returns true if field start_token is set (has been assigned a value) and false otherwise */
1:81209f1:   public boolean isSetStart_token() {
1:81209f1:     return this.start_token != null;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void setStart_tokenIsSet(boolean value) {
1:81209f1:     if (!value) {
1:81209f1:       this.start_token = null;
1:81209f1:     }
1:81209f1:   }
1:81209f1: 
1:81209f1:   public String getEnd_token() {
1:81209f1:     return this.end_token;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit setEnd_token(String end_token) {
1:81209f1:     this.end_token = end_token;
1:81209f1:     return this;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void unsetEnd_token() {
1:81209f1:     this.end_token = null;
1:81209f1:   }
1:81209f1: 
1:81209f1:   /** Returns true if field end_token is set (has been assigned a value) and false otherwise */
1:81209f1:   public boolean isSetEnd_token() {
1:81209f1:     return this.end_token != null;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void setEnd_tokenIsSet(boolean value) {
1:81209f1:     if (!value) {
1:81209f1:       this.end_token = null;
1:81209f1:     }
1:81209f1:   }
1:81209f1: 
1:81209f1:   public long getRow_count() {
1:81209f1:     return this.row_count;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public CfSplit setRow_count(long row_count) {
1:81209f1:     this.row_count = row_count;
1:81209f1:     setRow_countIsSet(true);
1:81209f1:     return this;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void unsetRow_count() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
1:81209f1:   }
1:81209f1: 
1:81209f1:   /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
1:81209f1:   public boolean isSetRow_count() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void setRow_countIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void setFieldValue(_Fields field, Object value) {
1:81209f1:     switch (field) {
1:81209f1:     case START_TOKEN:
1:81209f1:       if (value == null) {
1:81209f1:         unsetStart_token();
1:81209f1:       } else {
1:81209f1:         setStart_token((String)value);
1:81209f1:       }
1:81209f1:       break;
1:81209f1: 
1:81209f1:     case END_TOKEN:
1:81209f1:       if (value == null) {
1:81209f1:         unsetEnd_token();
1:81209f1:       } else {
1:81209f1:         setEnd_token((String)value);
1:81209f1:       }
1:81209f1:       break;
1:81209f1: 
1:81209f1:     case ROW_COUNT:
1:81209f1:       if (value == null) {
1:81209f1:         unsetRow_count();
1:81209f1:       } else {
1:81209f1:         setRow_count((Long)value);
1:81209f1:       }
1:81209f1:       break;
1:81209f1: 
1:81209f1:     }
1:81209f1:   }
1:81209f1: 
1:81209f1:   public Object getFieldValue(_Fields field) {
1:81209f1:     switch (field) {
1:81209f1:     case START_TOKEN:
1:81209f1:       return getStart_token();
1:81209f1: 
1:81209f1:     case END_TOKEN:
1:81209f1:       return getEnd_token();
1:81209f1: 
1:81209f1:     case ROW_COUNT:
1:81209f1:       return Long.valueOf(getRow_count());
1:81209f1: 
1:81209f1:     }
1:81209f1:     throw new IllegalStateException();
1:81209f1:   }
1:81209f1: 
1:81209f1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:81209f1:   public boolean isSet(_Fields field) {
1:81209f1:     if (field == null) {
1:81209f1:       throw new IllegalArgumentException();
1:81209f1:     }
1:81209f1: 
1:81209f1:     switch (field) {
1:81209f1:     case START_TOKEN:
1:81209f1:       return isSetStart_token();
1:81209f1:     case END_TOKEN:
1:81209f1:       return isSetEnd_token();
1:81209f1:     case ROW_COUNT:
1:81209f1:       return isSetRow_count();
1:81209f1:     }
1:81209f1:     throw new IllegalStateException();
1:81209f1:   }
1:81209f1: 
1:81209f1:   @Override
1:81209f1:   public boolean equals(Object that) {
1:81209f1:     if (that == null)
1:81209f1:       return false;
1:81209f1:     if (that instanceof CfSplit)
1:81209f1:       return this.equals((CfSplit)that);
1:81209f1:     return false;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public boolean equals(CfSplit that) {
1:81209f1:     if (that == null)
1:81209f1:       return false;
1:81209f1: 
1:81209f1:     boolean this_present_start_token = true && this.isSetStart_token();
1:81209f1:     boolean that_present_start_token = true && that.isSetStart_token();
1:81209f1:     if (this_present_start_token || that_present_start_token) {
1:81209f1:       if (!(this_present_start_token && that_present_start_token))
1:81209f1:         return false;
1:81209f1:       if (!this.start_token.equals(that.start_token))
1:81209f1:         return false;
1:81209f1:     }
1:81209f1: 
1:81209f1:     boolean this_present_end_token = true && this.isSetEnd_token();
1:81209f1:     boolean that_present_end_token = true && that.isSetEnd_token();
1:81209f1:     if (this_present_end_token || that_present_end_token) {
1:81209f1:       if (!(this_present_end_token && that_present_end_token))
1:81209f1:         return false;
1:81209f1:       if (!this.end_token.equals(that.end_token))
1:81209f1:         return false;
1:81209f1:     }
1:81209f1: 
1:81209f1:     boolean this_present_row_count = true;
1:81209f1:     boolean that_present_row_count = true;
1:81209f1:     if (this_present_row_count || that_present_row_count) {
1:81209f1:       if (!(this_present_row_count && that_present_row_count))
1:81209f1:         return false;
1:81209f1:       if (this.row_count != that.row_count)
1:81209f1:         return false;
1:81209f1:     }
1:81209f1: 
1:81209f1:     return true;
1:81209f1:   }
1:81209f1: 
1:81209f1:   @Override
1:81209f1:   public int hashCode() {
1:81209f1:     HashCodeBuilder builder = new HashCodeBuilder();
1:81209f1: 
1:81209f1:     boolean present_start_token = true && (isSetStart_token());
1:81209f1:     builder.append(present_start_token);
1:81209f1:     if (present_start_token)
1:81209f1:       builder.append(start_token);
1:81209f1: 
1:81209f1:     boolean present_end_token = true && (isSetEnd_token());
1:81209f1:     builder.append(present_end_token);
1:81209f1:     if (present_end_token)
1:81209f1:       builder.append(end_token);
1:81209f1: 
1:81209f1:     boolean present_row_count = true;
1:81209f1:     builder.append(present_row_count);
1:81209f1:     if (present_row_count)
1:81209f1:       builder.append(row_count);
1:81209f1: 
1:81209f1:     return builder.toHashCode();
1:81209f1:   }
1:81209f1: 
1:bffd9ea:   @Override
1:81209f1:   public int compareTo(CfSplit other) {
1:81209f1:     if (!getClass().equals(other.getClass())) {
1:81209f1:       return getClass().getName().compareTo(other.getClass().getName());
1:81209f1:     }
1:81209f1: 
1:81209f1:     int lastComparison = 0;
1:81209f1: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(other.isSetStart_token());
1:81209f1:     if (lastComparison != 0) {
1:81209f1:       return lastComparison;
1:81209f1:     }
1:81209f1:     if (isSetStart_token()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, other.start_token);
1:81209f1:       if (lastComparison != 0) {
1:81209f1:         return lastComparison;
1:81209f1:       }
1:81209f1:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(other.isSetEnd_token());
1:81209f1:     if (lastComparison != 0) {
1:81209f1:       return lastComparison;
1:81209f1:     }
1:81209f1:     if (isSetEnd_token()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, other.end_token);
1:81209f1:       if (lastComparison != 0) {
1:81209f1:         return lastComparison;
1:81209f1:       }
1:81209f1:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(other.isSetRow_count());
1:81209f1:     if (lastComparison != 0) {
1:81209f1:       return lastComparison;
1:81209f1:     }
1:81209f1:     if (isSetRow_count()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
1:81209f1:       if (lastComparison != 0) {
1:81209f1:         return lastComparison;
1:81209f1:       }
1:81209f1:     }
1:81209f1:     return 0;
1:81209f1:   }
1:81209f1: 
1:81209f1:   public _Fields fieldForId(int fieldId) {
1:81209f1:     return _Fields.findByThriftId(fieldId);
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:81209f1:   }
1:81209f1: 
1:81209f1:   @Override
1:81209f1:   public String toString() {
1:81209f1:     StringBuilder sb = new StringBuilder("CfSplit(");
1:81209f1:     boolean first = true;
1:81209f1: 
1:81209f1:     sb.append("start_token:");
1:81209f1:     if (this.start_token == null) {
1:81209f1:       sb.append("null");
1:81209f1:     } else {
1:81209f1:       sb.append(this.start_token);
1:81209f1:     }
1:81209f1:     first = false;
1:81209f1:     if (!first) sb.append(", ");
1:81209f1:     sb.append("end_token:");
1:81209f1:     if (this.end_token == null) {
1:81209f1:       sb.append("null");
1:81209f1:     } else {
1:81209f1:       sb.append(this.end_token);
1:81209f1:     }
1:81209f1:     first = false;
1:81209f1:     if (!first) sb.append(", ");
1:81209f1:     sb.append("row_count:");
1:81209f1:     sb.append(this.row_count);
1:81209f1:     first = false;
1:81209f1:     sb.append(")");
1:81209f1:     return sb.toString();
1:81209f1:   }
1:81209f1: 
1:81209f1:   public void validate() throws org.apache.thrift.TException {
1:81209f1:     // check for required fields
1:81209f1:     if (start_token == null) {
1:81209f1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_token' was not present! Struct: " + toString());
1:81209f1:     }
1:81209f1:     if (end_token == null) {
1:81209f1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_token' was not present! Struct: " + toString());
1:81209f1:     }
1:81209f1:     // alas, we cannot check 'row_count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:81209f1:   }
1:81209f1: 
1:81209f1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:81209f1:     try {
1:81209f1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:81209f1:     } catch (org.apache.thrift.TException te) {
1:81209f1:       throw new java.io.IOException(te);
1:81209f1:     }
1:81209f1:   }
1:533bf3f: 
1:81209f1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:81209f1:     try {
1:81209f1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:81209f1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:81209f1:     } catch (org.apache.thrift.TException te) {
1:81209f1:       throw new java.io.IOException(te);
1:81209f1:     }
1:533bf3f:   }
1:533bf3f: 
1:b153d45:   private static class CfSplitStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CfSplitStandardScheme getScheme() {
1:b153d45:       return new CfSplitStandardScheme();
1:533bf3f:     }
1:533bf3f:   }
1:533bf3f: 
1:b153d45:   private static class CfSplitStandardScheme extends StandardScheme<CfSplit> {
1:533bf3f: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CfSplit struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:81209f1:       iprot.readStructBegin();
1:81209f1:       while (true)
1:81209f1:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:81209f1:           break;
1:533bf3f:         }
1:b153d45:         switch (schemeField.id) {
1:81209f1:           case 1: // START_TOKEN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.start_token = iprot.readString();
1:b153d45:               struct.setStart_tokenIsSet(true);
1:81209f1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:533bf3f:             }
1:81209f1:             break;
1:81209f1:           case 2: // END_TOKEN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.end_token = iprot.readString();
1:b153d45:               struct.setEnd_tokenIsSet(true);
1:81209f1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:533bf3f:             }
1:81209f1:             break;
1:81209f1:           case 3: // ROW_COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:b153d45:               struct.row_count = iprot.readI64();
1:b153d45:               struct.setRow_countIsSet(true);
1:81209f1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:533bf3f:             }
1:81209f1:             break;
1:81209f1:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:533bf3f:         }
1:81209f1:         iprot.readFieldEnd();
1:533bf3f:       }
1:81209f1:       iprot.readStructEnd();
1:533bf3f: 
1:81209f1:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetRow_count()) {
1:81209f1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
1:81209f1:       }
1:b153d45:       struct.validate();
1:533bf3f:     }
1:533bf3f: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CfSplit struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:533bf3f: 
1:81209f1:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.start_token != null) {
1:81209f1:         oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.start_token);
1:81209f1:         oprot.writeFieldEnd();
1:81209f1:       }
1:b153d45:       if (struct.end_token != null) {
1:81209f1:         oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.end_token);
1:81209f1:         oprot.writeFieldEnd();
1:81209f1:       }
1:81209f1:       oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI64(struct.row_count);
1:81209f1:       oprot.writeFieldEnd();
1:81209f1:       oprot.writeFieldStop();
1:81209f1:       oprot.writeStructEnd();
1:81209f1:     }
1:81209f1: 
1:81209f1:   }
1:81209f1: 
1:b153d45:   private static class CfSplitTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CfSplitTupleScheme getScheme() {
1:b153d45:       return new CfSplitTupleScheme();
1:81209f1:     }
1:81209f1:   }
1:81209f1: 
1:b153d45:   private static class CfSplitTupleScheme extends TupleScheme<CfSplit> {
1:81209f1: 
3:533bf3f:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CfSplit struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeString(struct.start_token);
1:b153d45:       oprot.writeString(struct.end_token);
1:b153d45:       oprot.writeI64(struct.row_count);
1:81209f1:     }
1:81209f1: 
1:533bf3f:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CfSplit struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.start_token = iprot.readString();
1:b153d45:       struct.setStart_tokenIsSet(true);
1:b153d45:       struct.end_token = iprot.readString();
1:b153d45:       struct.setEnd_tokenIsSet(true);
1:b153d45:       struct.row_count = iprot.readI64();
1:b153d45:       struct.setRow_countIsSet(true);
1:81209f1:     }
1:81209f1:   }
1:533bf3f: 
1:81209f1: }
1:533bf3f: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CfSplit implements org.apache.thrift.TBase<CfSplit, CfSplit._Fields>, java.io.Serializable, Cloneable, Comparable<CfSplit> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(other.isSetStart_token());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, other.start_token);
1:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(other.isSetEnd_token());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, other.end_token);
1:     lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(other.isSetRow_count());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:81209f1
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift Compiler (0.7.0)
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Represents input splits used by hadoop ColumnFamilyRecordReaders
1:  */
0: public class CfSplit implements org.apache.thrift.TBase<CfSplit, CfSplit._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CfSplit");
1: 
1:   private static final org.apache.thrift.protocol.TField START_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("start_token", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField END_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("end_token", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)3);
1: 
1:   public String start_token; // required
1:   public String end_token; // required
1:   public long row_count; // required
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     START_TOKEN((short)1, "start_token"),
1:     END_TOKEN((short)2, "end_token"),
1:     ROW_COUNT((short)3, "row_count");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // START_TOKEN
1:           return START_TOKEN;
1:         case 2: // END_TOKEN
1:           return END_TOKEN;
1:         case 3: // ROW_COUNT
1:           return ROW_COUNT;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __ROW_COUNT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.START_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("start_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.END_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("end_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CfSplit.class, metaDataMap);
1:   }
1: 
1:   public CfSplit() {
1:   }
1: 
1:   public CfSplit(
1:     String start_token,
1:     String end_token,
1:     long row_count)
1:   {
1:     this();
1:     this.start_token = start_token;
1:     this.end_token = end_token;
1:     this.row_count = row_count;
1:     setRow_countIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CfSplit(CfSplit other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetStart_token()) {
1:       this.start_token = other.start_token;
1:     }
1:     if (other.isSetEnd_token()) {
1:       this.end_token = other.end_token;
1:     }
1:     this.row_count = other.row_count;
1:   }
1: 
1:   public CfSplit deepCopy() {
1:     return new CfSplit(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.start_token = null;
1:     this.end_token = null;
1:     setRow_countIsSet(false);
1:     this.row_count = 0;
1:   }
1: 
1:   public String getStart_token() {
1:     return this.start_token;
1:   }
1: 
1:   public CfSplit setStart_token(String start_token) {
1:     this.start_token = start_token;
1:     return this;
1:   }
1: 
1:   public void unsetStart_token() {
1:     this.start_token = null;
1:   }
1: 
1:   /** Returns true if field start_token is set (has been assigned a value) and false otherwise */
1:   public boolean isSetStart_token() {
1:     return this.start_token != null;
1:   }
1: 
1:   public void setStart_tokenIsSet(boolean value) {
1:     if (!value) {
1:       this.start_token = null;
1:     }
1:   }
1: 
1:   public String getEnd_token() {
1:     return this.end_token;
1:   }
1: 
1:   public CfSplit setEnd_token(String end_token) {
1:     this.end_token = end_token;
1:     return this;
1:   }
1: 
1:   public void unsetEnd_token() {
1:     this.end_token = null;
1:   }
1: 
1:   /** Returns true if field end_token is set (has been assigned a value) and false otherwise */
1:   public boolean isSetEnd_token() {
1:     return this.end_token != null;
1:   }
1: 
1:   public void setEnd_tokenIsSet(boolean value) {
1:     if (!value) {
1:       this.end_token = null;
1:     }
1:   }
1: 
1:   public long getRow_count() {
1:     return this.row_count;
1:   }
1: 
1:   public CfSplit setRow_count(long row_count) {
1:     this.row_count = row_count;
1:     setRow_countIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetRow_count() {
0:     __isset_bit_vector.clear(__ROW_COUNT_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
1:   public boolean isSetRow_count() {
0:     return __isset_bit_vector.get(__ROW_COUNT_ISSET_ID);
1:   }
1: 
1:   public void setRow_countIsSet(boolean value) {
0:     __isset_bit_vector.set(__ROW_COUNT_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case START_TOKEN:
1:       if (value == null) {
1:         unsetStart_token();
1:       } else {
1:         setStart_token((String)value);
1:       }
1:       break;
1: 
1:     case END_TOKEN:
1:       if (value == null) {
1:         unsetEnd_token();
1:       } else {
1:         setEnd_token((String)value);
1:       }
1:       break;
1: 
1:     case ROW_COUNT:
1:       if (value == null) {
1:         unsetRow_count();
1:       } else {
1:         setRow_count((Long)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case START_TOKEN:
1:       return getStart_token();
1: 
1:     case END_TOKEN:
1:       return getEnd_token();
1: 
1:     case ROW_COUNT:
1:       return Long.valueOf(getRow_count());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case START_TOKEN:
1:       return isSetStart_token();
1:     case END_TOKEN:
1:       return isSetEnd_token();
1:     case ROW_COUNT:
1:       return isSetRow_count();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CfSplit)
1:       return this.equals((CfSplit)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CfSplit that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_start_token = true && this.isSetStart_token();
1:     boolean that_present_start_token = true && that.isSetStart_token();
1:     if (this_present_start_token || that_present_start_token) {
1:       if (!(this_present_start_token && that_present_start_token))
1:         return false;
1:       if (!this.start_token.equals(that.start_token))
1:         return false;
1:     }
1: 
1:     boolean this_present_end_token = true && this.isSetEnd_token();
1:     boolean that_present_end_token = true && that.isSetEnd_token();
1:     if (this_present_end_token || that_present_end_token) {
1:       if (!(this_present_end_token && that_present_end_token))
1:         return false;
1:       if (!this.end_token.equals(that.end_token))
1:         return false;
1:     }
1: 
1:     boolean this_present_row_count = true;
1:     boolean that_present_row_count = true;
1:     if (this_present_row_count || that_present_row_count) {
1:       if (!(this_present_row_count && that_present_row_count))
1:         return false;
1:       if (this.row_count != that.row_count)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_start_token = true && (isSetStart_token());
1:     builder.append(present_start_token);
1:     if (present_start_token)
1:       builder.append(start_token);
1: 
1:     boolean present_end_token = true && (isSetEnd_token());
1:     builder.append(present_end_token);
1:     if (present_end_token)
1:       builder.append(end_token);
1: 
1:     boolean present_row_count = true;
1:     builder.append(present_row_count);
1:     if (present_row_count)
1:       builder.append(row_count);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CfSplit other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CfSplit typedOther = (CfSplit)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetStart_token()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, typedOther.start_token);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetEnd_token()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, typedOther.end_token);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(typedOther.isSetRow_count());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetRow_count()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, typedOther.row_count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // START_TOKEN
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.start_token = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // END_TOKEN
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.end_token = iprot.readString();
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // ROW_COUNT
0:           if (field.type == org.apache.thrift.protocol.TType.I64) {
0:             this.row_count = iprot.readI64();
1:             setRow_countIsSet(true);
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetRow_count()) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.start_token != null) {
1:       oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
0:       oprot.writeString(this.start_token);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.end_token != null) {
1:       oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
0:       oprot.writeString(this.end_token);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
0:     oprot.writeI64(this.row_count);
1:     oprot.writeFieldEnd();
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CfSplit(");
1:     boolean first = true;
1: 
1:     sb.append("start_token:");
1:     if (this.start_token == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.start_token);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("end_token:");
1:     if (this.end_token == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.end_token);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("row_count:");
1:     sb.append(this.row_count);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     if (start_token == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_token' was not present! Struct: " + toString());
1:     }
1:     if (end_token == null) {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_token' was not present! Struct: " + toString());
1:     }
1:     // alas, we cannot check 'row_count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1: }
1: 
commit:533bf3f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Autogenerated by Thrift Compiler (0.7.0)
0:  *
0:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  */
0: package org.apache.cassandra.thrift;
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.EnumSet;
0: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: /**
0:  * Represents input splits used by hadoop ColumnFamilyRecordReaders
0:  */
0: public class CfSplit implements org.apache.thrift.TBase<CfSplit, CfSplit._Fields>, java.io.Serializable, Cloneable {
0:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CfSplit");
1: 
0:   private static final org.apache.thrift.protocol.TField START_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("start_token", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField END_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("end_token", org.apache.thrift.protocol.TType.STRING, (short)2);
0:   private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)3);
1: 
0:   public String start_token; // required
0:   public String end_token; // required
0:   public long row_count; // required
1: 
0:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
0:     START_TOKEN((short)1, "start_token"),
0:     END_TOKEN((short)2, "end_token"),
0:     ROW_COUNT((short)3, "row_count");
1: 
0:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
0:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, or null if its not found.
0:      */
0:     public static _Fields findByThriftId(int fieldId) {
0:       switch(fieldId) {
0:         case 1: // START_TOKEN
0:           return START_TOKEN;
0:         case 2: // END_TOKEN
0:           return END_TOKEN;
0:         case 3: // ROW_COUNT
0:           return ROW_COUNT;
0:         default:
0:           return null;
1:       }
1:     }
1: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, throwing an exception
0:      * if it is not found.
0:      */
0:     public static _Fields findByThriftIdOrThrow(int fieldId) {
0:       _Fields fields = findByThriftId(fieldId);
0:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
0:       return fields;
1:     }
1: 
0:     /**
0:      * Find the _Fields constant that matches name, or null if its not found.
0:      */
0:     public static _Fields findByName(String name) {
0:       return byName.get(name);
1:     }
1: 
0:     private final short _thriftId;
0:     private final String _fieldName;
1: 
0:     _Fields(short thriftId, String fieldName) {
0:       _thriftId = thriftId;
0:       _fieldName = fieldName;
1:     }
1: 
0:     public short getThriftFieldId() {
0:       return _thriftId;
1:     }
1: 
0:     public String getFieldName() {
0:       return _fieldName;
1:     }
1:   }
1: 
0:   // isset id assignments
0:   private static final int __ROW_COUNT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.START_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("start_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
0:     tmpMap.put(_Fields.END_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("end_token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
0:     tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
0:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CfSplit.class, metaDataMap);
1:   }
1: 
0:   public CfSplit() {
1:   }
1: 
0:   public CfSplit(
0:     String start_token,
0:     String end_token,
0:     long row_count)
0:   {
0:     this();
0:     this.start_token = start_token;
0:     this.end_token = end_token;
0:     this.row_count = row_count;
0:     setRow_countIsSet(true);
1:   }
1: 
0:   /**
0:    * Performs a deep copy on <i>other</i>.
0:    */
0:   public CfSplit(CfSplit other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
0:     if (other.isSetStart_token()) {
0:       this.start_token = other.start_token;
1:     }
0:     if (other.isSetEnd_token()) {
0:       this.end_token = other.end_token;
1:     }
0:     this.row_count = other.row_count;
1:   }
1: 
0:   public CfSplit deepCopy() {
0:     return new CfSplit(this);
1:   }
1: 
1:   @Override
0:   public void clear() {
0:     this.start_token = null;
0:     this.end_token = null;
0:     setRow_countIsSet(false);
0:     this.row_count = 0;
1:   }
1: 
0:   public String getStart_token() {
0:     return this.start_token;
1:   }
1: 
0:   public CfSplit setStart_token(String start_token) {
0:     this.start_token = start_token;
0:     return this;
1:   }
1: 
0:   public void unsetStart_token() {
0:     this.start_token = null;
1:   }
1: 
0:   /** Returns true if field start_token is set (has been assigned a value) and false otherwise */
0:   public boolean isSetStart_token() {
0:     return this.start_token != null;
1:   }
1: 
0:   public void setStart_tokenIsSet(boolean value) {
0:     if (!value) {
0:       this.start_token = null;
1:     }
1:   }
1: 
0:   public String getEnd_token() {
0:     return this.end_token;
1:   }
1: 
0:   public CfSplit setEnd_token(String end_token) {
0:     this.end_token = end_token;
0:     return this;
1:   }
1: 
0:   public void unsetEnd_token() {
0:     this.end_token = null;
1:   }
1: 
0:   /** Returns true if field end_token is set (has been assigned a value) and false otherwise */
0:   public boolean isSetEnd_token() {
0:     return this.end_token != null;
1:   }
1: 
0:   public void setEnd_tokenIsSet(boolean value) {
0:     if (!value) {
0:       this.end_token = null;
1:     }
1:   }
1: 
0:   public long getRow_count() {
0:     return this.row_count;
1:   }
1: 
0:   public CfSplit setRow_count(long row_count) {
0:     this.row_count = row_count;
0:     setRow_countIsSet(true);
0:     return this;
1:   }
1: 
0:   public void unsetRow_count() {
0:     __isset_bit_vector.clear(__ROW_COUNT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
0:   public boolean isSetRow_count() {
0:     return __isset_bit_vector.get(__ROW_COUNT_ISSET_ID);
1:   }
1: 
0:   public void setRow_countIsSet(boolean value) {
0:     __isset_bit_vector.set(__ROW_COUNT_ISSET_ID, value);
1:   }
1: 
0:   public void setFieldValue(_Fields field, Object value) {
0:     switch (field) {
0:     case START_TOKEN:
0:       if (value == null) {
0:         unsetStart_token();
0:       } else {
0:         setStart_token((String)value);
1:       }
0:       break;
1: 
0:     case END_TOKEN:
0:       if (value == null) {
0:         unsetEnd_token();
0:       } else {
0:         setEnd_token((String)value);
1:       }
0:       break;
1: 
0:     case ROW_COUNT:
0:       if (value == null) {
0:         unsetRow_count();
0:       } else {
0:         setRow_count((Long)value);
1:       }
0:       break;
1: 
1:     }
1:   }
1: 
0:   public Object getFieldValue(_Fields field) {
0:     switch (field) {
0:     case START_TOKEN:
0:       return getStart_token();
1: 
0:     case END_TOKEN:
0:       return getEnd_token();
1: 
0:     case ROW_COUNT:
0:       return Long.valueOf(getRow_count());
1: 
1:     }
0:     throw new IllegalStateException();
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
0:   public boolean isSet(_Fields field) {
0:     if (field == null) {
0:       throw new IllegalArgumentException();
1:     }
1: 
0:     switch (field) {
0:     case START_TOKEN:
0:       return isSetStart_token();
0:     case END_TOKEN:
0:       return isSetEnd_token();
0:     case ROW_COUNT:
0:       return isSetRow_count();
1:     }
0:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
0:   public boolean equals(Object that) {
0:     if (that == null)
0:       return false;
0:     if (that instanceof CfSplit)
0:       return this.equals((CfSplit)that);
0:     return false;
1:   }
1: 
0:   public boolean equals(CfSplit that) {
0:     if (that == null)
0:       return false;
1: 
0:     boolean this_present_start_token = true && this.isSetStart_token();
0:     boolean that_present_start_token = true && that.isSetStart_token();
0:     if (this_present_start_token || that_present_start_token) {
0:       if (!(this_present_start_token && that_present_start_token))
0:         return false;
0:       if (!this.start_token.equals(that.start_token))
0:         return false;
1:     }
1: 
0:     boolean this_present_end_token = true && this.isSetEnd_token();
0:     boolean that_present_end_token = true && that.isSetEnd_token();
0:     if (this_present_end_token || that_present_end_token) {
0:       if (!(this_present_end_token && that_present_end_token))
0:         return false;
0:       if (!this.end_token.equals(that.end_token))
0:         return false;
1:     }
1: 
0:     boolean this_present_row_count = true;
0:     boolean that_present_row_count = true;
0:     if (this_present_row_count || that_present_row_count) {
0:       if (!(this_present_row_count && that_present_row_count))
0:         return false;
0:       if (this.row_count != that.row_count)
0:         return false;
1:     }
1: 
0:     return true;
1:   }
1: 
1:   @Override
0:   public int hashCode() {
0:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
0:     boolean present_start_token = true && (isSetStart_token());
0:     builder.append(present_start_token);
0:     if (present_start_token)
0:       builder.append(start_token);
1: 
0:     boolean present_end_token = true && (isSetEnd_token());
0:     builder.append(present_end_token);
0:     if (present_end_token)
0:       builder.append(end_token);
1: 
0:     boolean present_row_count = true;
0:     builder.append(present_row_count);
0:     if (present_row_count)
0:       builder.append(row_count);
1: 
0:     return builder.toHashCode();
1:   }
1: 
0:   public int compareTo(CfSplit other) {
0:     if (!getClass().equals(other.getClass())) {
0:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
0:     int lastComparison = 0;
0:     CfSplit typedOther = (CfSplit)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
0:     if (lastComparison != 0) {
0:       return lastComparison;
1:     }
0:     if (isSetStart_token()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, typedOther.start_token);
0:       if (lastComparison != 0) {
0:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
0:     if (lastComparison != 0) {
0:       return lastComparison;
1:     }
0:     if (isSetEnd_token()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, typedOther.end_token);
0:       if (lastComparison != 0) {
0:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(typedOther.isSetRow_count());
0:     if (lastComparison != 0) {
0:       return lastComparison;
1:     }
0:     if (isSetRow_count()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, typedOther.row_count);
0:       if (lastComparison != 0) {
0:         return lastComparison;
1:       }
1:     }
0:     return 0;
1:   }
1: 
0:   public _Fields fieldForId(int fieldId) {
0:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
0:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:     iprot.readStructBegin();
0:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:         break;
1:       }
0:       switch (field.id) {
0:         case 1: // START_TOKEN
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.start_token = iprot.readString();
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 2: // END_TOKEN
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             this.end_token = iprot.readString();
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         case 3: // ROW_COUNT
0:           if (field.type == org.apache.thrift.protocol.TType.I64) {
0:             this.row_count = iprot.readI64();
0:             setRow_countIsSet(true);
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
0:           break;
0:         default:
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetRow_count()) {
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.start_token != null) {
0:       oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
0:       oprot.writeString(this.start_token);
0:       oprot.writeFieldEnd();
1:     }
0:     if (this.end_token != null) {
0:       oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
0:       oprot.writeString(this.end_token);
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
0:     oprot.writeI64(this.row_count);
0:     oprot.writeFieldEnd();
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
0:   public String toString() {
0:     StringBuilder sb = new StringBuilder("CfSplit(");
0:     boolean first = true;
1: 
0:     sb.append("start_token:");
0:     if (this.start_token == null) {
0:       sb.append("null");
0:     } else {
0:       sb.append(this.start_token);
1:     }
0:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("end_token:");
0:     if (this.end_token == null) {
0:       sb.append("null");
0:     } else {
0:       sb.append(this.end_token);
1:     }
0:     first = false;
0:     if (!first) sb.append(", ");
0:     sb.append("row_count:");
0:     sb.append(this.row_count);
0:     first = false;
0:     sb.append(")");
0:     return sb.toString();
1:   }
1: 
0:   public void validate() throws org.apache.thrift.TException {
0:     // check for required fields
0:     if (start_token == null) {
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_token' was not present! Struct: " + toString());
1:     }
0:     if (end_token == null) {
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_token' was not present! Struct: " + toString());
1:     }
0:     // alas, we cannot check 'row_count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
0: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
1:     schemes.put(StandardScheme.class, new CfSplitStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CfSplitTupleSchemeFactory());
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class CfSplitStandardSchemeFactory implements SchemeFactory {
1:     public CfSplitStandardScheme getScheme() {
1:       return new CfSplitStandardScheme();
0:     }
0:   }
0: 
1:   private static class CfSplitStandardScheme extends StandardScheme<CfSplit> {
0: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CfSplit struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
1:         switch (schemeField.id) {
0:           case 1: // START_TOKEN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start_token = iprot.readString();
1:               struct.setStart_tokenIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // END_TOKEN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.end_token = iprot.readString();
1:               struct.setEnd_tokenIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 3: // ROW_COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:               struct.row_count = iprot.readI64();
1:               struct.setRow_countIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetRow_count()) {
0:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
0:       }
1:       struct.validate();
0:     }
0: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CfSplit struct) throws org.apache.thrift.TException {
1:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.start_token != null) {
0:         oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
1:         oprot.writeString(struct.start_token);
0:         oprot.writeFieldEnd();
0:       }
1:       if (struct.end_token != null) {
0:         oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
1:         oprot.writeString(struct.end_token);
0:         oprot.writeFieldEnd();
0:       }
0:       oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
1:       oprot.writeI64(struct.row_count);
0:       oprot.writeFieldEnd();
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
1:   private static class CfSplitTupleSchemeFactory implements SchemeFactory {
1:     public CfSplitTupleScheme getScheme() {
1:       return new CfSplitTupleScheme();
0:     }
0:   }
0: 
1:   private static class CfSplitTupleScheme extends TupleScheme<CfSplit> {
0: 
0:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CfSplit struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeString(struct.start_token);
1:       oprot.writeString(struct.end_token);
1:       oprot.writeI64(struct.row_count);
0:     }
0: 
0:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CfSplit struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.start_token = iprot.readString();
1:       struct.setStart_tokenIsSet(true);
1:       struct.end_token = iprot.readString();
1:       struct.setEnd_tokenIsSet(true);
1:       struct.row_count = iprot.readI64();
1:       struct.setRow_countIsSet(true);
0:     }
0:   }
0: 
============================================================================