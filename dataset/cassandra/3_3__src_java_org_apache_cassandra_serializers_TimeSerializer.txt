1:107545b: /*
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing, software
1:107545b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:107545b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:107545b:  * See the License for the specific language governing permissions and
1:107545b:  * limitations under the License.
1:107545b:  */
1:107545b: package org.apache.cassandra.serializers;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: import java.util.concurrent.TimeUnit;
1:107545b: import java.util.regex.Pattern;
1:107545b: 
1:107545b: import org.apache.cassandra.utils.ByteBufferUtil;
1:107545b: 
1:107545b: public class TimeSerializer implements TypeSerializer<Long>
1:107545b: {
1:107545b:     public static final Pattern timePattern = Pattern.compile("^-?\\d+$");
1:107545b:     public static final TimeSerializer instance = new TimeSerializer();
1:107545b: 
1:107545b:     public Long deserialize(ByteBuffer bytes)
1:107545b:     {
1:107545b:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toLong(bytes);
1:107545b:     }
1:107545b: 
1:107545b:     public ByteBuffer serialize(Long value)
1:107545b:     {
1:107545b:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
1:107545b:     }
1:107545b: 
1:107545b:     public static Long timeStringToLong(String source) throws MarshalException
1:107545b:     {
1:107545b:         // nano since start of day, raw
1:107545b:         if (timePattern.matcher(source).matches())
1:107545b:         {
1:107545b:             try
1:107545b:             {
1:b7d0238:                 long result = Long.parseLong(source);
1:3ae97ba:                 if (result < 0 || result >= TimeUnit.DAYS.toNanos(1))
1:107545b:                     throw new NumberFormatException("Input long out of bounds: " + source);
1:107545b:                 return result;
1:107545b:             }
1:107545b:             catch (NumberFormatException e)
1:107545b:             {
1:107545b:                 throw new MarshalException(String.format("Unable to make long (for time) from: '%s'", source), e);
1:107545b:             }
1:107545b:         }
1:107545b: 
1:107545b:         // Last chance, attempt to parse as time string
1:107545b:         try
1:107545b:         {
1:107545b:             return parseTimeStrictly(source);
1:107545b:         }
1:107545b:         catch (IllegalArgumentException e1)
1:107545b:         {
1:107545b:             throw new MarshalException(String.format("(TimeType) Unable to coerce '%s' to a formatted time (long)", source), e1);
1:107545b:         }
1:107545b:     }
1:107545b: 
1:107545b:     public void validate(ByteBuffer bytes) throws MarshalException
1:107545b:     {
1:107545b:         if (bytes.remaining() != 8)
1:107545b:             throw new MarshalException(String.format("Expected 8 byte long for time (%d)", bytes.remaining()));
1:107545b:     }
1:107545b: 
1:107545b:     public String toString(Long value)
1:107545b:     {
1:107545b:         if (value == null)
1:107545b:             return "null";
1:107545b: 
1:107545b:         int nano = (int)(value % 1000);
1:107545b:         value -= nano;
1:107545b:         value /= 1000;
1:107545b:         int micro = (int)(value % 1000);
1:107545b:         value -= micro;
1:107545b:         value /= 1000;
1:107545b:         int milli = (int)(value % 1000);
1:107545b:         value -= milli;
1:107545b:         value /= 1000;
1:107545b:         int seconds = (int)(value % 60);
1:107545b:         value -= seconds;
1:107545b:         value /= 60;
1:107545b:         int minutes = (int)(value % 60);
1:107545b:         value -= minutes;
1:107545b:         value /= 60;
1:107545b:         int hours = (int)(value % 24);
1:107545b:         value -= hours;
1:107545b:         value /= 24;
1:107545b:         assert(value == 0);
1:107545b: 
1:107545b:         StringBuilder sb = new StringBuilder();
1:107545b:         leftPadZeros(hours, 2, sb);
1:107545b:         sb.append(":");
1:107545b:         leftPadZeros(minutes, 2, sb);
1:107545b:         sb.append(":");
1:107545b:         leftPadZeros(seconds, 2, sb);
1:107545b:         sb.append(".");
1:107545b:         leftPadZeros(milli, 3, sb);
1:107545b:         leftPadZeros(micro, 3, sb);
1:107545b:         leftPadZeros(nano, 3, sb);
1:107545b:         return sb.toString();
1:107545b:     }
1:107545b: 
1:107545b:     private void leftPadZeros(int value, int digits, StringBuilder sb)
1:107545b:     {
1:107545b:         for (int i = 1; i < digits; ++i)
1:107545b:         {
1:107545b:             if (value < Math.pow(10, i))
1:107545b:                 sb.append("0");
1:107545b:         }
1:107545b:         sb.append(value);
1:107545b:     }
1:107545b: 
1:107545b:     public Class<Long> getType()
1:107545b:     {
1:107545b:         return Long.class;
1:107545b:     }
1:107545b: 
1:107545b:     // Time specific parsing loosely based on java.sql.Timestamp
1:107545b:     private static Long parseTimeStrictly(String s) throws IllegalArgumentException
1:107545b:     {
1:107545b:         String nanos_s;
1:107545b: 
1:107545b:         long hour;
1:107545b:         long minute;
1:107545b:         long second;
1:107545b:         long a_nanos = 0;
1:107545b: 
1:107545b:         String formatError = "Timestamp format must be hh:mm:ss[.fffffffff]";
1:107545b:         String zeros = "000000000";
1:107545b: 
1:107545b:         if (s == null)
1:107545b:             throw new java.lang.IllegalArgumentException(formatError);
1:107545b:         s = s.trim();
1:107545b: 
1:107545b:         // Parse the time
1:1279009:         int firstColon = s.indexOf(':');
1:1279009:         int secondColon = s.indexOf(':', firstColon+1);
1:107545b: 
1:107545b:         // Convert the time; default missing nanos
1:107545b:         if (firstColon > 0 && secondColon > 0 && secondColon < s.length() - 1)
1:107545b:         {
1:1279009:             int period = s.indexOf('.', secondColon+1);
1:107545b:             hour = Integer.parseInt(s.substring(0, firstColon));
1:107545b:             if (hour < 0 || hour >= 24)
1:107545b:                 throw new IllegalArgumentException("Hour out of bounds.");
1:107545b: 
1:107545b:             minute = Integer.parseInt(s.substring(firstColon + 1, secondColon));
1:107545b:             if (minute < 0 || minute >= 60)
1:107545b:                 throw new IllegalArgumentException("Minute out of bounds.");
1:107545b: 
1:107545b:             if (period > 0 && period < s.length() - 1)
1:107545b:             {
1:107545b:                 second = Integer.parseInt(s.substring(secondColon + 1, period));
1:107545b:                 if (second < 0 || second >= 60)
1:107545b:                     throw new IllegalArgumentException("Second out of bounds.");
1:107545b: 
1:107545b:                 nanos_s = s.substring(period + 1);
1:107545b:                 if (nanos_s.length() > 9)
1:107545b:                     throw new IllegalArgumentException(formatError);
1:107545b:                 if (!Character.isDigit(nanos_s.charAt(0)))
1:107545b:                     throw new IllegalArgumentException(formatError);
1:107545b:                 nanos_s = nanos_s + zeros.substring(0, 9 - nanos_s.length());
1:107545b:                 a_nanos = Integer.parseInt(nanos_s);
1:107545b:             }
1:107545b:             else if (period > 0)
1:107545b:                 throw new IllegalArgumentException(formatError);
1:107545b:             else
1:107545b:             {
1:107545b:                 second = Integer.parseInt(s.substring(secondColon + 1));
1:107545b:                 if (second < 0 || second >= 60)
1:107545b:                     throw new IllegalArgumentException("Second out of bounds.");
1:107545b:             }
1:107545b:         }
1:107545b:         else
1:107545b:             throw new IllegalArgumentException(formatError);
1:107545b: 
1:107545b:         long rawTime = 0;
1:107545b:         rawTime += TimeUnit.HOURS.toNanos(hour);
1:107545b:         rawTime += TimeUnit.MINUTES.toNanos(minute);
1:107545b:         rawTime += TimeUnit.SECONDS.toNanos(second);
1:107545b:         rawTime += a_nanos;
1:107545b:         return rawTime;
1:107545b:     }
1:107545b: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:3ae97ba
/////////////////////////////////////////////////////////////////////////
1:                 if (result < 0 || result >= TimeUnit.DAYS.toNanos(1))
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b7d0238
/////////////////////////////////////////////////////////////////////////
1:                 long result = Long.parseLong(source);
commit:1279009
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int firstColon = s.indexOf(':');
1:         int secondColon = s.indexOf(':', firstColon+1);
1:             int period = s.indexOf('.', secondColon+1);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.serializers;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.TimeUnit;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class TimeSerializer implements TypeSerializer<Long>
1: {
1:     public static final Pattern timePattern = Pattern.compile("^-?\\d+$");
1:     public static final TimeSerializer instance = new TimeSerializer();
1: 
1:     public Long deserialize(ByteBuffer bytes)
1:     {
1:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toLong(bytes);
1:     }
1: 
1:     public ByteBuffer serialize(Long value)
1:     {
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
1:     }
1: 
1:     public static Long timeStringToLong(String source) throws MarshalException
1:     {
1:         // nano since start of day, raw
1:         if (timePattern.matcher(source).matches())
1:         {
1:             try
1:             {
0:                 Long result = Long.parseLong(source);
0:                 if (result < 0 || result > TimeUnit.DAYS.toNanos(1))
1:                     throw new NumberFormatException("Input long out of bounds: " + source);
1:                 return result;
1:             }
1:             catch (NumberFormatException e)
1:             {
1:                 throw new MarshalException(String.format("Unable to make long (for time) from: '%s'", source), e);
1:             }
1:         }
1: 
1:         // Last chance, attempt to parse as time string
1:         try
1:         {
1:             return parseTimeStrictly(source);
1:         }
1:         catch (IllegalArgumentException e1)
1:         {
1:             throw new MarshalException(String.format("(TimeType) Unable to coerce '%s' to a formatted time (long)", source), e1);
1:         }
1:     }
1: 
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 8)
1:             throw new MarshalException(String.format("Expected 8 byte long for time (%d)", bytes.remaining()));
1:     }
1: 
1:     public String toString(Long value)
1:     {
1:         if (value == null)
1:             return "null";
1: 
1:         int nano = (int)(value % 1000);
1:         value -= nano;
1:         value /= 1000;
1:         int micro = (int)(value % 1000);
1:         value -= micro;
1:         value /= 1000;
1:         int milli = (int)(value % 1000);
1:         value -= milli;
1:         value /= 1000;
1:         int seconds = (int)(value % 60);
1:         value -= seconds;
1:         value /= 60;
1:         int minutes = (int)(value % 60);
1:         value -= minutes;
1:         value /= 60;
1:         int hours = (int)(value % 24);
1:         value -= hours;
1:         value /= 24;
1:         assert(value == 0);
1: 
1:         StringBuilder sb = new StringBuilder();
1:         leftPadZeros(hours, 2, sb);
1:         sb.append(":");
1:         leftPadZeros(minutes, 2, sb);
1:         sb.append(":");
1:         leftPadZeros(seconds, 2, sb);
1:         sb.append(".");
1:         leftPadZeros(milli, 3, sb);
1:         leftPadZeros(micro, 3, sb);
1:         leftPadZeros(nano, 3, sb);
1:         return sb.toString();
1:     }
1: 
1:     private void leftPadZeros(int value, int digits, StringBuilder sb)
1:     {
1:         for (int i = 1; i < digits; ++i)
1:         {
1:             if (value < Math.pow(10, i))
1:                 sb.append("0");
1:         }
1:         sb.append(value);
1:     }
1: 
1:     public Class<Long> getType()
1:     {
1:         return Long.class;
1:     }
1: 
1:     // Time specific parsing loosely based on java.sql.Timestamp
1:     private static Long parseTimeStrictly(String s) throws IllegalArgumentException
1:     {
1:         String nanos_s;
1: 
1:         long hour;
1:         long minute;
1:         long second;
1:         long a_nanos = 0;
1: 
0:         int firstColon = 0;
0:         int secondColon = 0;
0:         int period = 0;
1:         String formatError = "Timestamp format must be hh:mm:ss[.fffffffff]";
1:         String zeros = "000000000";
1: 
1:         if (s == null)
1:             throw new java.lang.IllegalArgumentException(formatError);
1:         s = s.trim();
1: 
1:         // Parse the time
0:         firstColon = s.indexOf(':');
0:         secondColon = s.indexOf(':', firstColon+1);
0:         period = s.indexOf('.', secondColon+1);
1: 
1:         // Convert the time; default missing nanos
1:         if (firstColon > 0 && secondColon > 0 && secondColon < s.length() - 1)
1:         {
1:             hour = Integer.parseInt(s.substring(0, firstColon));
1:             if (hour < 0 || hour >= 24)
1:                 throw new IllegalArgumentException("Hour out of bounds.");
1: 
1:             minute = Integer.parseInt(s.substring(firstColon + 1, secondColon));
1:             if (minute < 0 || minute >= 60)
1:                 throw new IllegalArgumentException("Minute out of bounds.");
1: 
1:             if (period > 0 && period < s.length() - 1)
1:             {
1:                 second = Integer.parseInt(s.substring(secondColon + 1, period));
1:                 if (second < 0 || second >= 60)
1:                     throw new IllegalArgumentException("Second out of bounds.");
1: 
1:                 nanos_s = s.substring(period + 1);
1:                 if (nanos_s.length() > 9)
1:                     throw new IllegalArgumentException(formatError);
1:                 if (!Character.isDigit(nanos_s.charAt(0)))
1:                     throw new IllegalArgumentException(formatError);
1:                 nanos_s = nanos_s + zeros.substring(0, 9 - nanos_s.length());
1:                 a_nanos = Integer.parseInt(nanos_s);
1:             }
1:             else if (period > 0)
1:                 throw new IllegalArgumentException(formatError);
1:             else
1:             {
1:                 second = Integer.parseInt(s.substring(secondColon + 1));
1:                 if (second < 0 || second >= 60)
1:                     throw new IllegalArgumentException("Second out of bounds.");
1:             }
1:         }
1:         else
1:             throw new IllegalArgumentException(formatError);
1: 
1:         long rawTime = 0;
1:         rawTime += TimeUnit.HOURS.toNanos(hour);
1:         rawTime += TimeUnit.MINUTES.toNanos(minute);
1:         rawTime += TimeUnit.SECONDS.toNanos(second);
1:         rawTime += a_nanos;
1:         return rawTime;
1:     }
1: }
============================================================================