1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3;
1:31e669a: 
1:89464ea: import java.util.List;
1:31e669a: 
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:4ed0060: import org.apache.cassandra.db.marshal.AbstractType;
1:31e669a: import org.apache.cassandra.db.marshal.CollectionType;
1:e93578b: import org.apache.cassandra.db.marshal.ListType;
1:31e669a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:31e669a: 
1:31e669a: /**
1:31e669a:  * A single bind marker.
1:31e669a:  */
1:31e669a: public abstract class AbstractMarker extends Term.NonTerminal
1:31e669a: {
1:31e669a:     protected final int bindIndex;
1:31e669a:     protected final ColumnSpecification receiver;
1:31e669a: 
1:31e669a:     protected AbstractMarker(int bindIndex, ColumnSpecification receiver)
1:31e669a:     {
1:31e669a:         this.bindIndex = bindIndex;
1:31e669a:         this.receiver = receiver;
1:31e669a:     }
1:31e669a: 
1:37e9bce:     public void collectMarkerSpecification(VariableSpecifications boundNames)
1:31e669a:     {
1:37e9bce:         boundNames.add(bindIndex, receiver);
1:31e669a:     }
1:31e669a: 
1:ce4e4b9:     public boolean containsBindMarker()
1:ce4e4b9:     {
1:ce4e4b9:         return true;
1:ce4e4b9:     }
1:ce4e4b9: 
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:5a4253b:     {
1:5a4253b:     }
1:31e669a: 
1:31e669a:     /**
1:31e669a:      * A parsed, but non prepared, bind marker.
1:31e669a:      */
1:5a4253b:     public static class Raw extends Term.Raw
1:31e669a:     {
1:31e669a:         protected final int bindIndex;
1:31e669a: 
1:31e669a:         public Raw(int bindIndex)
1:31e669a:         {
1:31e669a:             this.bindIndex = bindIndex;
1:31e669a:         }
1:31e669a: 
1:c7b02d1:         public NonTerminal prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:31e669a:         {
1:677230d:             if (receiver.type.isCollection())
1:31e669a:             {
1:677230d:                 switch (((CollectionType) receiver.type).kind)
1:677230d:                 {
1:677230d:                     case LIST:
1:677230d:                         return new Lists.Marker(bindIndex, receiver);
1:677230d:                     case SET:
1:677230d:                         return new Sets.Marker(bindIndex, receiver);
1:677230d:                     case MAP:
1:677230d:                         return new Maps.Marker(bindIndex, receiver);
1:677230d:                     default:
1:31e669a:                         throw new AssertionError();
1:677230d:                 }
1:5a4253b:             }
1:677230d:             else if (receiver.type.isUDT())
1:677230d:             {
1:677230d:                 return new UserTypes.Marker(bindIndex, receiver);
1:677230d:             }
1:677230d: 
1:31e669a:             return new Constants.Marker(bindIndex, receiver);
1:31e669a:         }
1:31e669a: 
1:4ed0060:         @Override
1:44fa12e:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:31e669a:         {
1:44fa12e:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:31e669a:         }
1:31e669a: 
1:4ed0060:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:4ed0060:         {
1:4ed0060:             return null;
1:4ed0060:         }
1:4ed0060: 
1:31e669a:         @Override
1:5a4253b:         public String getText()
1:31e669a:         {
1:31e669a:             return "?";
1:31e669a:         }
1:31e669a:     }
1:e93578b: 
1:5a4253b:     /** A MultiColumnRaw version of AbstractMarker.Raw */
1:5a4253b:     public static abstract class MultiColumnRaw extends Term.MultiColumnRaw
1:e93578b:     {
1:5a4253b:         protected final int bindIndex;
1:e93578b: 
1:5a4253b:         public MultiColumnRaw(int bindIndex)
1:5a4253b:         {
1:5a4253b:             this.bindIndex = bindIndex;
1:31e669a:         }
1:31e669a: 
1:5a4253b:         public NonTerminal prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:5a4253b:         {
1:5a4253b:             throw new AssertionError("MultiColumnRaw..prepare() requires a list of receivers");
1:31e669a:         }
3:5a4253b: 
1:5a4253b:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:5a4253b:         {
1:5a4253b:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:5a4253b:         }
1:5a4253b: 
1:5a4253b:         @Override
1:5a4253b:         public String getText()
1:5a4253b:         {
1:5a4253b:             return "?";
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:4349638:     /**
1:4349638:      * A raw placeholder for multiple values of the same type for a single column.
1:4349638:      * For example, "SELECT ... WHERE user_id IN ?'.
1:4349638:      *
1:4349638:      * Because a single type is used, a List is used to represent the values.
1:4349638:      */
1:e93578b:     public static class INRaw extends Raw
1:e93578b:     {
1:e93578b:         public INRaw(int bindIndex)
1:e93578b:         {
1:e93578b:             super(bindIndex);
1:e93578b:         }
1:e93578b: 
1:e93578b:         private static ColumnSpecification makeInReceiver(ColumnSpecification receiver)
1:e93578b:         {
1:e93578b:             ColumnIdentifier inName = new ColumnIdentifier("in(" + receiver.name + ")", true);
1:ee55f36:             return new ColumnSpecification(receiver.ksName, receiver.cfName, inName, ListType.getInstance(receiver.type, false));
1:e93578b:         }
1:e93578b: 
1:e93578b:         @Override
1:d63d07b:         public AbstractMarker prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:cb5897f:         {
1:e93578b:             return new Lists.Marker(bindIndex, makeInReceiver(receiver));
1:e93578b:         }
1:e93578b:     }
1:cb5897f: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:         {
1:             return null;
1:         }
1: 
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:         public AbstractMarker prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
0:         public boolean isAssignableTo(String keyspace, ColumnSpecification receiver)
/////////////////////////////////////////////////////////////////////////
0:         public AbstractMarker prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
commit:37e9bce
/////////////////////////////////////////////////////////////////////////
1:     public void collectMarkerSpecification(VariableSpecifications boundNames)
1:         boundNames.add(bindIndex, receiver);
commit:e93578b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.ListType;
/////////////////////////////////////////////////////////////////////////
1: 
0:     // A raw that stands for multiple values, i.e. when we have 'IN ?'
1:     public static class INRaw extends Raw
1:     {
1:         public INRaw(int bindIndex)
1:         {
1:             super(bindIndex);
1:         }
1: 
1:         private static ColumnSpecification makeInReceiver(ColumnSpecification receiver)
1:         {
1:             ColumnIdentifier inName = new ColumnIdentifier("in(" + receiver.name + ")", true);
0:             return new ColumnSpecification(receiver.ksName, receiver.cfName, inName, ListType.getInstance(receiver.type));
1:         }
1: 
1:         @Override
0:         public AbstractMarker prepare(ColumnSpecification receiver) throws InvalidRequestException
1:         {
0:             if (receiver.type instanceof CollectionType)
0:                 throw new InvalidRequestException("Invalid IN relation on collection column");
1: 
1:             return new Lists.Marker(bindIndex, makeInReceiver(receiver));
1:         }
1:     }
commit:ce4e4b9
/////////////////////////////////////////////////////////////////////////
1:     public boolean containsBindMarker()
1:     {
1:         return true;
1:     }
1: 
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: 
1: /**
1:  * A single bind marker.
1:  */
1: public abstract class AbstractMarker extends Term.NonTerminal
1: {
1:     protected final int bindIndex;
1:     protected final ColumnSpecification receiver;
1: 
1:     protected AbstractMarker(int bindIndex, ColumnSpecification receiver)
1:     {
1:         this.bindIndex = bindIndex;
1:         this.receiver = receiver;
1:     }
1: 
0:     public void collectMarkerSpecification(ColumnSpecification[] boundNames)
1:     {
0:         boundNames[bindIndex] = receiver;
1:     }
1: 
1:     /**
1:      * A parsed, but non prepared, bind marker.
1:      */
0:     public static class Raw implements Term.Raw
1:     {
1:         protected final int bindIndex;
1: 
1:         public Raw(int bindIndex)
1:         {
1:             this.bindIndex = bindIndex;
1:         }
1: 
0:         public AbstractMarker prepare(ColumnSpecification receiver) throws InvalidRequestException
1:         {
0:             if (!(receiver.type instanceof CollectionType))
1:                 return new Constants.Marker(bindIndex, receiver);
1: 
0:             switch (((CollectionType)receiver.type).kind)
1:             {
0:                 case LIST: return new Lists.Marker(bindIndex, receiver);
0:                 case SET:  return new Sets.Marker(bindIndex, receiver);
0:                 case MAP:  return new Maps.Marker(bindIndex, receiver);
1:             }
1:             throw new AssertionError();
1:         }
1: 
0:         public boolean isAssignableTo(ColumnSpecification receiver)
1:         {
0:             return true;
1:         }
1: 
1:         @Override
0:         public String toString()
1:         {
1:             return "?";
1:         }
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1:             if (receiver.type.isCollection())
1:                 switch (((CollectionType) receiver.type).kind)
1:                 {
1:                     case LIST:
1:                         return new Lists.Marker(bindIndex, receiver);
1:                     case SET:
1:                         return new Sets.Marker(bindIndex, receiver);
1:                     case MAP:
1:                         return new Maps.Marker(bindIndex, receiver);
1:                     default:
0:                         throw new AssertionError();
1:                 }
1:             else if (receiver.type.isUDT())
1:             {
1:                 return new UserTypes.Marker(bindIndex, receiver);
1:             }
1: 
0:             return new Constants.Marker(bindIndex, receiver);
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1:     public static class Raw extends Term.Raw
/////////////////////////////////////////////////////////////////////////
1:         public String getText()
1:         {
1:             return "?";
1:         }
1:     }
1: 
1:     /** A MultiColumnRaw version of AbstractMarker.Raw */
1:     public static abstract class MultiColumnRaw extends Term.MultiColumnRaw
1:     {
1:         protected final int bindIndex;
1: 
1:         public MultiColumnRaw(int bindIndex)
1:         {
1:             this.bindIndex = bindIndex;
1:         }
1: 
1:         public NonTerminal prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:         {
1:             throw new AssertionError("MultiColumnRaw..prepare() requires a list of receivers");
1:         }
1: 
1:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:         {
1:             return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:         }
1: 
1:         @Override
1:         public String getText()
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1:         public NonTerminal prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
commit:fb4356a
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1:             return new ColumnSpecification(receiver.ksName, receiver.cfName, inName, ListType.getInstance(receiver.type, false));
commit:3d5f3a6
/////////////////////////////////////////////////////////////////////////
commit:bf52190
commit:4349638
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * A raw placeholder for multiple values of the same type for a single column.
1:      * For example, "SELECT ... WHERE user_id IN ?'.
1:      *
1:      * Because a single type is used, a List is used to represent the values.
1:      */
/////////////////////////////////////////////////////////////////////////
0:                 throw new InvalidRequestException("Collection columns do not support IN relations");
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: 
1: import org.apache.cassandra.cql3.functions.Function;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions()
1:     {
0:         return Collections.emptySet();
1:     }
0: 
============================================================================