1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import java.net.InetAddress;
1:c5a8190: import java.net.UnknownHostException;
1:c5a8190: import java.util.ArrayList;
1:c5a8190: import java.util.Iterator;
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:c5a8190: 
1:c5a8190: public class SetHostStat implements Iterable<HostStat>
1:c5a8190: {
1:c5a8190:     final List<HostStat> hostStats = new ArrayList<HostStat>();
1:c5a8190:     final boolean resolveIp;
1:c5a8190: 
1:c5a8190:     public SetHostStat(boolean resolveIp)
1:c5a8190:     {
1:c5a8190:         this.resolveIp = resolveIp;
1:c5a8190:     }
1:c5a8190: 
1:c5a8190:     public int size()
1:c5a8190:     {
1:c5a8190:         return hostStats.size();
1:c5a8190:     }
1:c5a8190: 
1:c5a8190:     @Override
1:c5a8190:     public Iterator<HostStat> iterator()
1:c5a8190:     {
1:c5a8190:         return hostStats.iterator();
1:c5a8190:     }
1:c5a8190: 
1:c5a8190:     public void add(String token, String host, Map<InetAddress, Float> ownerships) throws UnknownHostException
1:c5a8190:     {
1:c5a8190:         InetAddress endpoint = InetAddress.getByName(host);
1:c5a8190:         Float owns = ownerships.get(endpoint);
1:c5a8190:         hostStats.add(new HostStat(token, endpoint, resolveIp, owns));
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class SetHostStat implements Iterable<HostStat>
1: {
1:     final List<HostStat> hostStats = new ArrayList<HostStat>();
1:     final boolean resolveIp;
1: 
1:     public SetHostStat(boolean resolveIp)
1:     {
1:         this.resolveIp = resolveIp;
1:     }
1: 
1:     public int size()
1:     {
1:         return hostStats.size();
1:     }
1: 
1:     @Override
1:     public Iterator<HostStat> iterator()
1:     {
1:         return hostStats.iterator();
1:     }
1: 
1:     public void add(String token, String host, Map<InetAddress, Float> ownerships) throws UnknownHostException
1:     {
1:         InetAddress endpoint = InetAddress.getByName(host);
1:         Float owns = ownerships.get(endpoint);
1:         hostStats.add(new HostStat(token, endpoint, resolveIp, owns));
1:     }
1: }
============================================================================