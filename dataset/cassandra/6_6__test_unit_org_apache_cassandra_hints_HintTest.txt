1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.IOException;
1:b2f38ef: import java.net.InetAddress;
1:b2f38ef: import java.util.Collections;
1:b2f38ef: import java.util.UUID;
1:96d41f0: 
1:b2f38ef: import com.google.common.collect.ImmutableList;
1:b2f38ef: 
1:96d41f0: import org.junit.Before;
1:96d41f0: import org.junit.BeforeClass;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.SchemaLoader;
1:96d41f0: import org.apache.cassandra.Util;
1:2683806: import org.apache.cassandra.config.*;
1:96d41f0: import org.apache.cassandra.db.*;
1:96d41f0: import org.apache.cassandra.db.partitions.FilteredPartition;
1:96d41f0: import org.apache.cassandra.db.partitions.PartitionIterator;
1:96d41f0: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:b2f38ef: import org.apache.cassandra.dht.BootStrapper;
1:96d41f0: import org.apache.cassandra.io.util.DataInputBuffer;
1:96d41f0: import org.apache.cassandra.io.util.DataInputPlus;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBuffer;
1:b2f38ef: import org.apache.cassandra.locator.TokenMetadata;
1:b2f38ef: import org.apache.cassandra.metrics.StorageMetrics;
1:b2f38ef: import org.apache.cassandra.net.MessageIn;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: import org.apache.cassandra.schema.KeyspaceParams;
1:96d41f0: import org.apache.cassandra.schema.TableParams;
1:b2f38ef: import org.apache.cassandra.service.StorageProxy;
1:b2f38ef: import org.apache.cassandra.service.StorageService;
1:96d41f0: import org.apache.cassandra.utils.FBUtilities;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.*;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.Util.dk;
1:96d41f0: import static org.apache.cassandra.hints.HintsTestUtil.assertHintsEqual;
1:96d41f0: import static org.apache.cassandra.hints.HintsTestUtil.assertPartitionsEqual;
1:96d41f0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:96d41f0: 
1:96d41f0: public class HintTest
1:96d41f0: {
1:96d41f0:     private static final String KEYSPACE = "hint_test";
1:96d41f0:     private static final String TABLE0 = "table_0";
1:96d41f0:     private static final String TABLE1 = "table_1";
1:96d41f0:     private static final String TABLE2 = "table_2";
1:96d41f0: 
1:96d41f0:     @BeforeClass
1:96d41f0:     public static void defineSchema()
1:96d41f0:     {
1:96d41f0:         SchemaLoader.prepareServer();
1:96d41f0:         SchemaLoader.createKeyspace(KEYSPACE,
1:96d41f0:                                     KeyspaceParams.simple(1),
1:96d41f0:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE0),
1:96d41f0:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE1),
1:96d41f0:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE2));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Before
1:96d41f0:     public void resetGcGraceSeconds()
1:96d41f0:     {
1:b2f38ef:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:b2f38ef:         InetAddress local = FBUtilities.getBroadcastAddress();
1:b2f38ef:         tokenMeta.clearUnsafe();
1:b2f38ef:         tokenMeta.updateHostId(UUID.randomUUID(), local);
1:b2f38ef:         tokenMeta.updateNormalTokens(BootStrapper.getRandomTokens(tokenMeta, 1), local);
1:b2f38ef: 
1:a3a8dbc:         for (CFMetaData table : Schema.instance.getTablesAndViews(KEYSPACE))
1:96d41f0:             table.gcGraceSeconds(TableParams.DEFAULT_GC_GRACE_SECONDS);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testSerializer() throws IOException
1:96d41f0:     {
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0:         Mutation mutation = createMutation("testSerializer", now);
1:96d41f0:         Hint hint = Hint.create(mutation, now / 1000);
1:96d41f0: 
1:96d41f0:         // serialize
1:96d41f0:         int serializedSize = (int) Hint.serializer.serializedSize(hint, MessagingService.current_version);
1:96d41f0:         DataOutputBuffer dob = new DataOutputBuffer();
1:96d41f0:         Hint.serializer.serialize(hint, dob, MessagingService.current_version);
1:96d41f0:         assertEquals(serializedSize, dob.getLength());
1:96d41f0: 
1:96d41f0:         // deserialize
1:96d41f0:         DataInputPlus di = new DataInputBuffer(dob.buffer(), true);
1:96d41f0:         Hint deserializedHint = Hint.serializer.deserialize(di, MessagingService.current_version);
1:96d41f0: 
1:96d41f0:         // compare before/after
1:96d41f0:         assertHintsEqual(hint, deserializedHint);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testApply()
1:96d41f0:     {
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0:         String key = "testApply";
1:96d41f0:         Mutation mutation = createMutation(key, now);
1:96d41f0:         Hint hint = Hint.create(mutation, now / 1000);
1:96d41f0: 
1:96d41f0:         // sanity check that there is no data inside yet
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0: 
1:96d41f0:         hint.apply();
1:96d41f0: 
1:96d41f0:         // assert that we can read the inserted partitions
1:96d41f0:         for (PartitionUpdate partition : mutation.getPartitionUpdates())
1:2683806:             assertPartitionsEqual(partition, readPartition(key, partition.metadata().cfName, partition.columns()));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testApplyWithTruncation()
1:96d41f0:     {
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0:         String key = "testApplyWithTruncation";
1:96d41f0:         Mutation mutation = createMutation(key, now);
1:96d41f0: 
1:96d41f0:         // sanity check that there is no data inside yet
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0: 
1:96d41f0:         // truncate TABLE1
1:96d41f0:         Keyspace.open(KEYSPACE).getColumnFamilyStore(TABLE1).truncateBlocking();
1:96d41f0: 
1:96d41f0:         // create and apply a hint with creation time in the past (one second before the truncation)
1:96d41f0:         Hint.create(mutation, now / 1000 - 1).apply();
1:96d41f0: 
1:96d41f0:         // TABLE1 update should have been skipped and not applied, as expired
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0: 
1:96d41f0:         // TABLE0 and TABLE2 updates should have been applied successfully
1:2683806:         PartitionUpdate upd0 = mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE0));
1:2683806:         assertPartitionsEqual(upd0, readPartition(key, TABLE0, upd0.columns()));
1:2683806:         PartitionUpdate upd2 = mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE2));
1:2683806:         assertPartitionsEqual(upd2, readPartition(key, TABLE2, upd2.columns()));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testApplyWithRegularExpiration()
1:96d41f0:     {
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0:         String key = "testApplyWithRegularExpiration";
1:96d41f0:         Mutation mutation = createMutation(key, now);
1:96d41f0: 
1:96d41f0:         // sanity check that there is no data inside yet
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0: 
1:96d41f0:         // lower the GC GS on TABLE0 to 0 BEFORE the hint is created
1:96d41f0:         Schema.instance.getCFMetaData(KEYSPACE, TABLE0).gcGraceSeconds(0);
1:96d41f0: 
1:96d41f0:         Hint.create(mutation, now / 1000).apply();
1:96d41f0: 
1:96d41f0:         // all updates should have been skipped and not applied, as expired
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testApplyWithGCGSReducedLater()
1:96d41f0:     {
1:96d41f0:         long now = FBUtilities.timestampMicros();
1:96d41f0:         String key = "testApplyWithGCGSReducedLater";
1:96d41f0:         Mutation mutation = createMutation(key, now);
1:96d41f0:         Hint hint = Hint.create(mutation, now / 1000);
1:96d41f0: 
1:96d41f0:         // sanity check that there is no data inside yet
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0: 
1:96d41f0:         // lower the GC GS on TABLE0 AFTER the hint is already created
1:96d41f0:         Schema.instance.getCFMetaData(KEYSPACE, TABLE0).gcGraceSeconds(0);
1:96d41f0: 
1:96d41f0:         hint.apply();
1:96d41f0: 
1:96d41f0:         // all updates should have been skipped and not applied, as expired
1:96d41f0:         assertNoPartitions(key, TABLE0);
1:96d41f0:         assertNoPartitions(key, TABLE1);
1:96d41f0:         assertNoPartitions(key, TABLE2);
1:96d41f0:     }
1:96d41f0: 
1:b2f38ef:     @SuppressWarnings("unchecked")
1:b2f38ef:     @Test
1:b2f38ef:     public void testChangedTopology() throws Exception
1:96d41f0:     {
1:b2f38ef:         // create a hint
1:b2f38ef:         long now = FBUtilities.timestampMicros();
1:b2f38ef:         String key = "testChangedTopology";
1:b2f38ef:         Mutation mutation = createMutation(key, now);
1:b2f38ef:         Hint hint = Hint.create(mutation, now / 1000);
1:b2f38ef: 
1:b2f38ef:         // Prepare metadata with injected stale endpoint serving the mutation key.
1:b2f38ef:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:b2f38ef:         InetAddress local = FBUtilities.getBroadcastAddress();
1:b2f38ef:         InetAddress endpoint = InetAddress.getByName("1.1.1.1");
1:b2f38ef:         UUID localId = StorageService.instance.getLocalHostUUID();
1:b2f38ef:         UUID targetId = UUID.randomUUID();
1:b2f38ef:         tokenMeta.updateHostId(targetId, endpoint);
1:b2f38ef:         tokenMeta.updateNormalTokens(ImmutableList.of(mutation.key().getToken()), endpoint);
1:b2f38ef: 
1:b2f38ef:         // sanity check that there is no data inside yet
1:b2f38ef:         assertNoPartitions(key, TABLE0);
1:b2f38ef:         assertNoPartitions(key, TABLE1);
1:b2f38ef:         assertNoPartitions(key, TABLE2);
1:b2f38ef: 
1:b2f38ef:         assert StorageProxy.instance.getHintsInProgress() == 0;
1:b2f38ef:         long totalHintCount = StorageProxy.instance.getTotalHints();
1:b2f38ef:         // Process hint message.
1:b2f38ef:         HintMessage message = new HintMessage(localId, hint);
1:b2f38ef:         MessagingService.instance().getVerbHandler(MessagingService.Verb.HINT).doVerb(
1:9d9a1a1:                 MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
1:b2f38ef:                 -1);
1:b2f38ef: 
1:b2f38ef:         // hint should not be applied as we no longer are a replica
1:b2f38ef:         assertNoPartitions(key, TABLE0);
1:b2f38ef:         assertNoPartitions(key, TABLE1);
1:b2f38ef:         assertNoPartitions(key, TABLE2);
1:b2f38ef: 
1:b2f38ef:         // Attempt to send to new endpoint should have been made. Node is not live hence it should now be a hint.
1:b2f38ef:         assertEquals(totalHintCount + 1, StorageProxy.instance.getTotalHints());
1:b2f38ef:     }
1:b2f38ef: 
1:b2f38ef:     @SuppressWarnings("unchecked")
1:b2f38ef:     @Test
1:b2f38ef:     public void testChangedTopologyNotHintable() throws Exception
1:b2f38ef:     {
1:b2f38ef:         // create a hint
1:b2f38ef:         long now = FBUtilities.timestampMicros();
1:b2f38ef:         String key = "testChangedTopology";
1:b2f38ef:         Mutation mutation = createMutation(key, now);
1:b2f38ef:         Hint hint = Hint.create(mutation, now / 1000);
1:b2f38ef: 
1:b2f38ef:         // Prepare metadata with injected stale endpoint.
1:b2f38ef:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:b2f38ef:         InetAddress local = FBUtilities.getBroadcastAddress();
1:b2f38ef:         InetAddress endpoint = InetAddress.getByName("1.1.1.1");
1:b2f38ef:         UUID localId = StorageService.instance.getLocalHostUUID();
1:b2f38ef:         UUID targetId = UUID.randomUUID();
1:b2f38ef:         tokenMeta.updateHostId(targetId, endpoint);
1:b2f38ef:         tokenMeta.updateNormalTokens(ImmutableList.of(mutation.key().getToken()), endpoint);
1:b2f38ef: 
1:b2f38ef:         // sanity check that there is no data inside yet
1:b2f38ef:         assertNoPartitions(key, TABLE0);
1:b2f38ef:         assertNoPartitions(key, TABLE1);
1:b2f38ef:         assertNoPartitions(key, TABLE2);
1:b2f38ef: 
1:b2f38ef:         try
1:b2f38ef:         {
1:b2f38ef:             DatabaseDescriptor.setHintedHandoffEnabled(false);
1:b2f38ef: 
1:b2f38ef:             assert StorageMetrics.totalHintsInProgress.getCount() == 0;
1:b2f38ef:             long totalHintCount = StorageMetrics.totalHints.getCount();
1:b2f38ef:             // Process hint message.
1:b2f38ef:             HintMessage message = new HintMessage(localId, hint);
1:b2f38ef:             MessagingService.instance().getVerbHandler(MessagingService.Verb.HINT).doVerb(
1:9d9a1a1:                     MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
1:b2f38ef:                     -1);
1:b2f38ef: 
1:b2f38ef:             // hint should not be applied as we no longer are a replica
1:b2f38ef:             assertNoPartitions(key, TABLE0);
1:b2f38ef:             assertNoPartitions(key, TABLE1);
1:b2f38ef:             assertNoPartitions(key, TABLE2);
1:b2f38ef: 
1:b2f38ef:             // Attempt to send to new endpoint should not have been made.
1:b2f38ef:             assertEquals(totalHintCount, StorageMetrics.totalHints.getCount());
1:b2f38ef:         }
1:b2f38ef:         finally
1:b2f38ef:         {
1:b2f38ef:             DatabaseDescriptor.setHintedHandoffEnabled(true);
1:b2f38ef:         }
1:b2f38ef:     }
1:b2f38ef: 
1:96d41f0:     private static Mutation createMutation(String key, long now)
1:96d41f0:     {
1:2683806:         Mutation.SimpleBuilder builder = Mutation.simpleBuilder(KEYSPACE, dk(key));
1:96d41f0: 
1:2683806:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE0))
1:2683806:                .timestamp(now)
1:2683806:                .row("column0")
1:2683806:                .add("val", "value0");
1:96d41f0: 
1:2683806:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE1))
1:2683806:                .timestamp(now + 1)
1:2683806:                .row("column1")
1:2683806:                .add("val", "value1");
1:96d41f0: 
1:2683806:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE2))
1:2683806:                .timestamp(now + 2)
1:2683806:                .row("column2")
1:2683806:                .add("val", "value2");
1:96d41f0: 
1:2683806:         return builder.build();
1:96d41f0:     }
1:96d41f0: 
1:2683806:     private static ColumnFamilyStore cfs(String table)
1:96d41f0:     {
1:2683806:         return Schema.instance.getColumnFamilyStoreInstance(Schema.instance.getCFMetaData(KEYSPACE, table).cfId);
1:96d41f0:     }
1:96d41f0: 
1:2683806:     private static FilteredPartition readPartition(String key, String table, PartitionColumns columns)
1:96d41f0:     {
1:2683806:         String[] columnNames = new String[columns.size()];
1:2683806:         int i = 0;
1:2683806:         for (ColumnDefinition column : columns)
1:2683806:             columnNames[i++] = column.name.toString();
1:2683806: 
1:2683806:         return Util.getOnlyPartition(Util.cmd(cfs(table), key).columns(columnNames).build());
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void assertNoPartitions(String key, String table)
1:96d41f0:     {
1:2683806:         ReadCommand cmd = Util.cmd(cfs(table), key).build();
1:96d41f0: 
1:557bbbc:         try (ReadExecutionController executionController = cmd.executionController();
1:557bbbc:              PartitionIterator iterator = cmd.executeInternal(executionController))
1:b2f38ef:         {
1:96d41f0:             assertFalse(iterator.hasNext());
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:                 MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
/////////////////////////////////////////////////////////////////////////
1:                     MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.*;
/////////////////////////////////////////////////////////////////////////
1:             assertPartitionsEqual(partition, readPartition(key, partition.metadata().cfName, partition.columns()));
/////////////////////////////////////////////////////////////////////////
1:         PartitionUpdate upd0 = mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE0));
1:         assertPartitionsEqual(upd0, readPartition(key, TABLE0, upd0.columns()));
1:         PartitionUpdate upd2 = mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE2));
1:         assertPartitionsEqual(upd2, readPartition(key, TABLE2, upd2.columns()));
/////////////////////////////////////////////////////////////////////////
1:         Mutation.SimpleBuilder builder = Mutation.simpleBuilder(KEYSPACE, dk(key));
1:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE0))
1:                .timestamp(now)
1:                .row("column0")
1:                .add("val", "value0");
1:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE1))
1:                .timestamp(now + 1)
1:                .row("column1")
1:                .add("val", "value1");
1:         builder.update(Schema.instance.getCFMetaData(KEYSPACE, TABLE2))
1:                .timestamp(now + 2)
1:                .row("column2")
1:                .add("val", "value2");
1:         return builder.build();
1:     private static ColumnFamilyStore cfs(String table)
1:         return Schema.instance.getColumnFamilyStoreInstance(Schema.instance.getCFMetaData(KEYSPACE, table).cfId);
1:     private static FilteredPartition readPartition(String key, String table, PartitionColumns columns)
1:         String[] columnNames = new String[columns.size()];
1:         int i = 0;
1:         for (ColumnDefinition column : columns)
1:             columnNames[i++] = column.name.toString();
1: 
1:         return Util.getOnlyPartition(Util.cmd(cfs(table), key).columns(columnNames).build());
1:         ReadCommand cmd = Util.cmd(cfs(table), key).build();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b63e6ee
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: 
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.partitions.FilteredPartition;
1: import org.apache.cassandra.db.partitions.PartitionIterator;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.io.util.DataInputBuffer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.schema.TableParams;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static junit.framework.Assert.*;
1: 
1: import static org.apache.cassandra.Util.dk;
1: import static org.apache.cassandra.hints.HintsTestUtil.assertHintsEqual;
1: import static org.apache.cassandra.hints.HintsTestUtil.assertPartitionsEqual;
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: public class HintTest
1: {
1:     private static final String KEYSPACE = "hint_test";
1:     private static final String TABLE0 = "table_0";
1:     private static final String TABLE1 = "table_1";
1:     private static final String TABLE2 = "table_2";
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE,
1:                                     KeyspaceParams.simple(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE0),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE, TABLE2));
1:     }
1: 
1:     @Before
1:     public void resetGcGraceSeconds()
1:     {
0:         for (CFMetaData table : Schema.instance.getTables(KEYSPACE))
1:             table.gcGraceSeconds(TableParams.DEFAULT_GC_GRACE_SECONDS);
1:     }
1: 
1:     @Test
1:     public void testSerializer() throws IOException
1:     {
1:         long now = FBUtilities.timestampMicros();
1:         Mutation mutation = createMutation("testSerializer", now);
1:         Hint hint = Hint.create(mutation, now / 1000);
1: 
1:         // serialize
1:         int serializedSize = (int) Hint.serializer.serializedSize(hint, MessagingService.current_version);
1:         DataOutputBuffer dob = new DataOutputBuffer();
1:         Hint.serializer.serialize(hint, dob, MessagingService.current_version);
1:         assertEquals(serializedSize, dob.getLength());
1: 
1:         // deserialize
1:         DataInputPlus di = new DataInputBuffer(dob.buffer(), true);
1:         Hint deserializedHint = Hint.serializer.deserialize(di, MessagingService.current_version);
1: 
1:         // compare before/after
1:         assertHintsEqual(hint, deserializedHint);
1:     }
1: 
1:     @Test
1:     public void testApply()
1:     {
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testApply";
1:         Mutation mutation = createMutation(key, now);
1:         Hint hint = Hint.create(mutation, now / 1000);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         hint.apply();
1: 
1:         // assert that we can read the inserted partitions
1:         for (PartitionUpdate partition : mutation.getPartitionUpdates())
0:             assertPartitionsEqual(partition, readPartition(key, partition.metadata().cfName));
1:     }
1: 
1:     @Test
1:     public void testApplyWithTruncation()
1:     {
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testApplyWithTruncation";
1:         Mutation mutation = createMutation(key, now);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         // truncate TABLE1
1:         Keyspace.open(KEYSPACE).getColumnFamilyStore(TABLE1).truncateBlocking();
1: 
1:         // create and apply a hint with creation time in the past (one second before the truncation)
1:         Hint.create(mutation, now / 1000 - 1).apply();
1: 
1:         // TABLE1 update should have been skipped and not applied, as expired
1:         assertNoPartitions(key, TABLE1);
1: 
1:         // TABLE0 and TABLE2 updates should have been applied successfully
0:         assertPartitionsEqual(mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE0)), readPartition(key, TABLE0));
0:         assertPartitionsEqual(mutation.getPartitionUpdate(Schema.instance.getId(KEYSPACE, TABLE2)), readPartition(key, TABLE2));
1:     }
1: 
1:     @Test
1:     public void testApplyWithRegularExpiration()
1:     {
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testApplyWithRegularExpiration";
1:         Mutation mutation = createMutation(key, now);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         // lower the GC GS on TABLE0 to 0 BEFORE the hint is created
1:         Schema.instance.getCFMetaData(KEYSPACE, TABLE0).gcGraceSeconds(0);
1: 
1:         Hint.create(mutation, now / 1000).apply();
1: 
1:         // all updates should have been skipped and not applied, as expired
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1:     }
1: 
1:     @Test
1:     public void testApplyWithGCGSReducedLater()
1:     {
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testApplyWithGCGSReducedLater";
1:         Mutation mutation = createMutation(key, now);
1:         Hint hint = Hint.create(mutation, now / 1000);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         // lower the GC GS on TABLE0 AFTER the hint is already created
1:         Schema.instance.getCFMetaData(KEYSPACE, TABLE0).gcGraceSeconds(0);
1: 
1:         hint.apply();
1: 
1:         // all updates should have been skipped and not applied, as expired
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1:     }
1: 
1:     private static Mutation createMutation(String key, long now)
1:     {
0:         Mutation mutation = new Mutation(KEYSPACE, dk(key));
1: 
0:         new RowUpdateBuilder(Schema.instance.getCFMetaData(KEYSPACE, TABLE0), now, mutation)
0:             .clustering("column0")
0:             .add("val", "value0")
0:             .build();
1: 
0:         new RowUpdateBuilder(Schema.instance.getCFMetaData(KEYSPACE, TABLE1), now + 1, mutation)
0:             .clustering("column1")
0:             .add("val", "value1")
0:             .build();
1: 
0:         new RowUpdateBuilder(Schema.instance.getCFMetaData(KEYSPACE, TABLE2), now + 2, mutation)
0:             .clustering("column2")
0:             .add("val", "value2")
0:             .build();
1: 
0:         return mutation;
1:     }
1: 
0:     private static SinglePartitionReadCommand cmd(String key, String table)
1:     {
0:         CFMetaData meta = Schema.instance.getCFMetaData(KEYSPACE, table);
0:         return SinglePartitionReadCommand.fullPartitionRead(meta, FBUtilities.nowInSeconds(), bytes(key));
1:     }
1: 
0:     private static FilteredPartition readPartition(String key, String table)
1:     {
0:         return Util.getOnlyPartition(cmd(key, table));
1:     }
1: 
1:     private static void assertNoPartitions(String key, String table)
1:     {
0:         ReadCommand cmd = cmd(key, table);
1: 
0:         try (ReadOrderGroup orderGroup = cmd.startOrderGroup();
0:              PartitionIterator iterator = cmd.executeInternal(orderGroup))
1:         {
1:             assertFalse(iterator.hasNext());
1:         }
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:b2f38ef
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.util.Collections;
1: import java.util.UUID;
1: 
1: import com.google.common.collect.ImmutableList;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.dht.BootStrapper;
1: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.metrics.StorageMetrics;
1: import org.apache.cassandra.net.MessageIn;
1: import org.apache.cassandra.service.StorageProxy;
1: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:         InetAddress local = FBUtilities.getBroadcastAddress();
1:         tokenMeta.clearUnsafe();
1:         tokenMeta.updateHostId(UUID.randomUUID(), local);
1:         tokenMeta.updateNormalTokens(BootStrapper.getRandomTokens(tokenMeta, 1), local);
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testChangedTopology() throws Exception
1:     {
1:         // create a hint
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testChangedTopology";
1:         Mutation mutation = createMutation(key, now);
1:         Hint hint = Hint.create(mutation, now / 1000);
1: 
1:         // Prepare metadata with injected stale endpoint serving the mutation key.
1:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:         InetAddress local = FBUtilities.getBroadcastAddress();
1:         InetAddress endpoint = InetAddress.getByName("1.1.1.1");
1:         UUID localId = StorageService.instance.getLocalHostUUID();
1:         UUID targetId = UUID.randomUUID();
1:         tokenMeta.updateHostId(targetId, endpoint);
1:         tokenMeta.updateNormalTokens(ImmutableList.of(mutation.key().getToken()), endpoint);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         assert StorageProxy.instance.getHintsInProgress() == 0;
1:         long totalHintCount = StorageProxy.instance.getTotalHints();
1:         // Process hint message.
1:         HintMessage message = new HintMessage(localId, hint);
1:         MessagingService.instance().getVerbHandler(MessagingService.Verb.HINT).doVerb(
0:                 MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
1:                 -1);
1: 
1:         // hint should not be applied as we no longer are a replica
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         // Attempt to send to new endpoint should have been made. Node is not live hence it should now be a hint.
1:         assertEquals(totalHintCount + 1, StorageProxy.instance.getTotalHints());
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testChangedTopologyNotHintable() throws Exception
1:     {
1:         // create a hint
1:         long now = FBUtilities.timestampMicros();
1:         String key = "testChangedTopology";
1:         Mutation mutation = createMutation(key, now);
1:         Hint hint = Hint.create(mutation, now / 1000);
1: 
1:         // Prepare metadata with injected stale endpoint.
1:         TokenMetadata tokenMeta = StorageService.instance.getTokenMetadata();
1:         InetAddress local = FBUtilities.getBroadcastAddress();
1:         InetAddress endpoint = InetAddress.getByName("1.1.1.1");
1:         UUID localId = StorageService.instance.getLocalHostUUID();
1:         UUID targetId = UUID.randomUUID();
1:         tokenMeta.updateHostId(targetId, endpoint);
1:         tokenMeta.updateNormalTokens(ImmutableList.of(mutation.key().getToken()), endpoint);
1: 
1:         // sanity check that there is no data inside yet
1:         assertNoPartitions(key, TABLE0);
1:         assertNoPartitions(key, TABLE1);
1:         assertNoPartitions(key, TABLE2);
1: 
1:         try
1:         {
1:             DatabaseDescriptor.setHintedHandoffEnabled(false);
1: 
1:             assert StorageMetrics.totalHintsInProgress.getCount() == 0;
1:             long totalHintCount = StorageMetrics.totalHints.getCount();
1:             // Process hint message.
1:             HintMessage message = new HintMessage(localId, hint);
1:             MessagingService.instance().getVerbHandler(MessagingService.Verb.HINT).doVerb(
0:                     MessageIn.create(local, message, Collections.emptyMap(), MessagingService.Verb.HINT, MessagingService.current_version),
1:                     -1);
1: 
1:             // hint should not be applied as we no longer are a replica
1:             assertNoPartitions(key, TABLE0);
1:             assertNoPartitions(key, TABLE1);
1:             assertNoPartitions(key, TABLE2);
1: 
1:             // Attempt to send to new endpoint should not have been made.
1:             assertEquals(totalHintCount, StorageMetrics.totalHints.getCount());
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setHintedHandoffEnabled(true);
1:         }
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1:         try (ReadExecutionController executionController = cmd.executionController();
1:              PartitionIterator iterator = cmd.executeInternal(executionController))
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1:         for (CFMetaData table : Schema.instance.getTablesAndViews(KEYSPACE))
============================================================================