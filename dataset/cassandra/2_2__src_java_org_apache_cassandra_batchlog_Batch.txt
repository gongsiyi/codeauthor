1:53a177a: /*
1:53a177a:  * Licensed to the Apache Software Foundation (ASF) under one
1:53a177a:  * or more contributor license agreements.  See the NOTICE file
1:53a177a:  * distributed with this work for additional information
1:53a177a:  * regarding copyright ownership.  The ASF licenses this file
1:53a177a:  * to you under the Apache License, Version 2.0 (the
1:53a177a:  * "License"); you may not use this file except in compliance
1:53a177a:  * with the License.  You may obtain a copy of the License at
1:53a177a:  *
1:53a177a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:53a177a:  *
1:53a177a:  * Unless required by applicable law or agreed to in writing, software
1:53a177a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:53a177a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53a177a:  * See the License for the specific language governing permissions and
1:53a177a:  * limitations under the License.
1:53a177a:  */
1:53a177a: package org.apache.cassandra.batchlog;
1:53a177a: 
1:53a177a: import java.io.IOException;
1:53a177a: import java.nio.ByteBuffer;
1:53a177a: import java.util.*;
1:53a177a: 
1:53a177a: import org.apache.cassandra.db.Mutation;
1:53a177a: import org.apache.cassandra.io.IVersionedSerializer;
1:53a177a: import org.apache.cassandra.io.util.DataInputPlus;
1:53a177a: import org.apache.cassandra.io.util.DataOutputPlus;
1:53a177a: import org.apache.cassandra.net.MessagingService;
1:53a177a: import org.apache.cassandra.utils.ByteBufferUtil;
1:53a177a: import org.apache.cassandra.utils.UUIDSerializer;
1:53a177a: 
1:53a177a: import static org.apache.cassandra.db.TypeSizes.sizeof;
1:649a106: import static org.apache.cassandra.db.TypeSizes.sizeofUnsignedVInt;
1:53a177a: 
1:53a177a: public final class Batch
1:53a177a: {
1:53a177a:     public static final Serializer serializer = new Serializer();
1:53a177a: 
1:53a177a:     public final UUID id;
1:53a177a:     public final long creationTime; // time of batch creation (in microseconds)
1:53a177a: 
1:53a177a:     // one of these will always be empty
1:53a177a:     final Collection<Mutation> decodedMutations;
1:53a177a:     final Collection<ByteBuffer> encodedMutations;
1:53a177a: 
1:53a177a:     private Batch(UUID id, long creationTime, Collection<Mutation> decodedMutations, Collection<ByteBuffer> encodedMutations)
1:53a177a:     {
1:53a177a:         this.id = id;
1:53a177a:         this.creationTime = creationTime;
1:53a177a: 
1:53a177a:         this.decodedMutations = decodedMutations;
1:53a177a:         this.encodedMutations = encodedMutations;
1:53a177a:     }
1:53a177a: 
1:53a177a:     /**
1:53a177a:      * Creates a 'local' batch - with all enclosed mutations in decoded form (as Mutation instances)
1:53a177a:      */
1:53a177a:     public static Batch createLocal(UUID id, long creationTime, Collection<Mutation> mutations)
1:53a177a:     {
1:53a177a:         return new Batch(id, creationTime, mutations, Collections.emptyList());
1:53a177a:     }
1:53a177a: 
1:53a177a:     /**
1:53a177a:      * Creates a 'remote' batch - with all enclosed mutations in encoded form (as ByteBuffer instances)
1:53a177a:      *
1:53a177a:      * The mutations will always be encoded using the current messaging version.
1:53a177a:      */
1:53a177a:     public static Batch createRemote(UUID id, long creationTime, Collection<ByteBuffer> mutations)
1:53a177a:     {
1:53a177a:         return new Batch(id, creationTime, Collections.<Mutation>emptyList(), mutations);
1:53a177a:     }
1:53a177a: 
1:53a177a:     /**
1:53a177a:      * Count of the mutations in the batch.
1:53a177a:      */
1:53a177a:     public int size()
1:53a177a:     {
1:53a177a:         return decodedMutations.size() + encodedMutations.size();
1:53a177a:     }
1:53a177a: 
1:53a177a:     static final class Serializer implements IVersionedSerializer<Batch>
1:53a177a:     {
1:53a177a:         public long serializedSize(Batch batch, int version)
1:53a177a:         {
1:53a177a:             assert batch.encodedMutations.isEmpty() : "attempted to serialize a 'remote' batch";
1:53a177a: 
1:53a177a:             long size = UUIDSerializer.serializer.serializedSize(batch.id, version);
1:53a177a:             size += sizeof(batch.creationTime);
1:53a177a: 
1:649a106:             size += sizeofUnsignedVInt(batch.decodedMutations.size());
1:53a177a:             for (Mutation mutation : batch.decodedMutations)
1:53a177a:             {
1:53a177a:                 int mutationSize = (int) Mutation.serializer.serializedSize(mutation, version);
1:649a106:                 size += sizeofUnsignedVInt(mutationSize);
1:53a177a:                 size += mutationSize;
1:53a177a:             }
1:53a177a: 
1:53a177a:             return size;
1:53a177a:         }
1:53a177a: 
1:53a177a:         public void serialize(Batch batch, DataOutputPlus out, int version) throws IOException
1:53a177a:         {
1:53a177a:             assert batch.encodedMutations.isEmpty() : "attempted to serialize a 'remote' batch";
1:53a177a: 
1:53a177a:             UUIDSerializer.serializer.serialize(batch.id, out, version);
1:53a177a:             out.writeLong(batch.creationTime);
1:53a177a: 
1:649a106:             out.writeUnsignedVInt(batch.decodedMutations.size());
1:53a177a:             for (Mutation mutation : batch.decodedMutations)
1:53a177a:             {
1:649a106:                 out.writeUnsignedVInt(Mutation.serializer.serializedSize(mutation, version));
1:53a177a:                 Mutation.serializer.serialize(mutation, out, version);
1:53a177a:             }
1:53a177a:         }
1:53a177a: 
1:53a177a:         public Batch deserialize(DataInputPlus in, int version) throws IOException
1:53a177a:         {
1:53a177a:             UUID id = UUIDSerializer.serializer.deserialize(in, version);
1:53a177a:             long creationTime = in.readLong();
1:53a177a: 
1:53a177a:             /*
1:53a177a:              * If version doesn't match the current one, we cannot not just read the encoded mutations verbatim,
1:53a177a:              * so we decode them instead, to deal with compatibility.
1:53a177a:              */
1:53a177a:             return version == MessagingService.current_version
1:53a177a:                  ? createRemote(id, creationTime, readEncodedMutations(in))
1:53a177a:                  : createLocal(id, creationTime, decodeMutations(in, version));
1:53a177a:         }
1:53a177a: 
1:53a177a:         private static Collection<ByteBuffer> readEncodedMutations(DataInputPlus in) throws IOException
1:53a177a:         {
1:649a106:             int count = (int) in.readUnsignedVInt();
1:53a177a: 
1:53a177a:             ArrayList<ByteBuffer> mutations = new ArrayList<>(count);
1:53a177a:             for (int i = 0; i < count; i++)
1:53a177a:                 mutations.add(ByteBufferUtil.readWithVIntLength(in));
1:53a177a: 
1:53a177a:             return mutations;
1:53a177a:         }
1:53a177a: 
1:53a177a:         private static Collection<Mutation> decodeMutations(DataInputPlus in, int version) throws IOException
1:53a177a:         {
1:649a106:             int count = (int) in.readUnsignedVInt();
1:53a177a: 
1:53a177a:             ArrayList<Mutation> mutations = new ArrayList<>(count);
1:53a177a:             for (int i = 0; i < count; i++)
1:53a177a:             {
1:649a106:                 in.readUnsignedVInt(); // skip mutation size
1:53a177a:                 mutations.add(Mutation.serializer.deserialize(in, version));
1:53a177a:             }
1:53a177a: 
1:53a177a:             return mutations;
1:53a177a:         }
1:53a177a:     }
1:53a177a: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:649a106
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.cassandra.db.TypeSizes.sizeofUnsignedVInt;
/////////////////////////////////////////////////////////////////////////
1:             size += sizeofUnsignedVInt(batch.decodedMutations.size());
1:                 size += sizeofUnsignedVInt(mutationSize);
/////////////////////////////////////////////////////////////////////////
1:             out.writeUnsignedVInt(batch.decodedMutations.size());
1:                 out.writeUnsignedVInt(Mutation.serializer.serializedSize(mutation, version));
/////////////////////////////////////////////////////////////////////////
1:             int count = (int) in.readUnsignedVInt();
/////////////////////////////////////////////////////////////////////////
1:             int count = (int) in.readUnsignedVInt();
1:                 in.readUnsignedVInt(); // skip mutation size
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.batchlog;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: import static org.apache.cassandra.db.TypeSizes.sizeof;
0: import static org.apache.cassandra.db.TypeSizes.sizeofVInt;
1: 
1: public final class Batch
1: {
1:     public static final Serializer serializer = new Serializer();
1: 
1:     public final UUID id;
1:     public final long creationTime; // time of batch creation (in microseconds)
1: 
1:     // one of these will always be empty
1:     final Collection<Mutation> decodedMutations;
1:     final Collection<ByteBuffer> encodedMutations;
1: 
1:     private Batch(UUID id, long creationTime, Collection<Mutation> decodedMutations, Collection<ByteBuffer> encodedMutations)
1:     {
1:         this.id = id;
1:         this.creationTime = creationTime;
1: 
1:         this.decodedMutations = decodedMutations;
1:         this.encodedMutations = encodedMutations;
1:     }
1: 
1:     /**
1:      * Creates a 'local' batch - with all enclosed mutations in decoded form (as Mutation instances)
1:      */
1:     public static Batch createLocal(UUID id, long creationTime, Collection<Mutation> mutations)
1:     {
1:         return new Batch(id, creationTime, mutations, Collections.emptyList());
1:     }
1: 
1:     /**
1:      * Creates a 'remote' batch - with all enclosed mutations in encoded form (as ByteBuffer instances)
1:      *
1:      * The mutations will always be encoded using the current messaging version.
1:      */
1:     public static Batch createRemote(UUID id, long creationTime, Collection<ByteBuffer> mutations)
1:     {
1:         return new Batch(id, creationTime, Collections.<Mutation>emptyList(), mutations);
1:     }
1: 
1:     /**
1:      * Count of the mutations in the batch.
1:      */
1:     public int size()
1:     {
1:         return decodedMutations.size() + encodedMutations.size();
1:     }
1: 
1:     static final class Serializer implements IVersionedSerializer<Batch>
1:     {
1:         public long serializedSize(Batch batch, int version)
1:         {
1:             assert batch.encodedMutations.isEmpty() : "attempted to serialize a 'remote' batch";
1: 
1:             long size = UUIDSerializer.serializer.serializedSize(batch.id, version);
1:             size += sizeof(batch.creationTime);
1: 
0:             size += sizeofVInt(batch.decodedMutations.size());
1:             for (Mutation mutation : batch.decodedMutations)
1:             {
1:                 int mutationSize = (int) Mutation.serializer.serializedSize(mutation, version);
0:                 size += sizeofVInt(mutationSize);
1:                 size += mutationSize;
1:             }
1: 
1:             return size;
1:         }
1: 
1:         public void serialize(Batch batch, DataOutputPlus out, int version) throws IOException
1:         {
1:             assert batch.encodedMutations.isEmpty() : "attempted to serialize a 'remote' batch";
1: 
1:             UUIDSerializer.serializer.serialize(batch.id, out, version);
1:             out.writeLong(batch.creationTime);
1: 
0:             out.writeVInt(batch.decodedMutations.size());
1:             for (Mutation mutation : batch.decodedMutations)
1:             {
0:                 out.writeVInt(Mutation.serializer.serializedSize(mutation, version));
1:                 Mutation.serializer.serialize(mutation, out, version);
1:             }
1:         }
1: 
1:         public Batch deserialize(DataInputPlus in, int version) throws IOException
1:         {
1:             UUID id = UUIDSerializer.serializer.deserialize(in, version);
1:             long creationTime = in.readLong();
1: 
1:             /*
1:              * If version doesn't match the current one, we cannot not just read the encoded mutations verbatim,
1:              * so we decode them instead, to deal with compatibility.
1:              */
1:             return version == MessagingService.current_version
1:                  ? createRemote(id, creationTime, readEncodedMutations(in))
1:                  : createLocal(id, creationTime, decodeMutations(in, version));
1:         }
1: 
1:         private static Collection<ByteBuffer> readEncodedMutations(DataInputPlus in) throws IOException
1:         {
0:             int count = (int) in.readVInt();
1: 
1:             ArrayList<ByteBuffer> mutations = new ArrayList<>(count);
1:             for (int i = 0; i < count; i++)
1:                 mutations.add(ByteBufferUtil.readWithVIntLength(in));
1: 
1:             return mutations;
1:         }
1: 
1:         private static Collection<Mutation> decodeMutations(DataInputPlus in, int version) throws IOException
1:         {
0:             int count = (int) in.readVInt();
1: 
1:             ArrayList<Mutation> mutations = new ArrayList<>(count);
1:             for (int i = 0; i < count; i++)
1:             {
0:                 in.readVInt(); // skip mutation size
1:                 mutations.add(Mutation.serializer.deserialize(in, version));
1:             }
1: 
1:             return mutations;
1:         }
1:     }
1: }
============================================================================