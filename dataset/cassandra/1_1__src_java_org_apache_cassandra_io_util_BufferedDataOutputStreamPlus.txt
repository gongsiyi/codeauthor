1:16499ca: /*
1:16499ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:16499ca:  * or more contributor license agreements.  See the NOTICE file
1:16499ca:  * distributed with this work for additional information
1:16499ca:  * regarding copyright ownership.  The ASF licenses this file
1:16499ca:  * to you under the Apache License, Version 2.0 (the
1:16499ca:  * "License"); you may not use this file except in compliance
1:16499ca:  * with the License.  You may obtain a copy of the License at
1:16499ca:  *
1:16499ca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:16499ca:  *
1:16499ca:  * Unless required by applicable law or agreed to in writing, software
1:16499ca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16499ca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16499ca:  * See the License for the specific language governing permissions and
1:16499ca:  * limitations under the License.
1:16499ca:  */
1:16499ca: package org.apache.cassandra.io.util;
3:16499ca: 
1:16499ca: import java.io.FileOutputStream;
1:16499ca: import java.io.IOException;
1:16499ca: import java.io.RandomAccessFile;
1:16499ca: import java.nio.ByteBuffer;
1:16499ca: import java.nio.ByteOrder;
1:16499ca: import java.nio.channels.WritableByteChannel;
1:16499ca: 
1:16499ca: import com.google.common.base.Function;
1:16499ca: import com.google.common.base.Preconditions;
1:16499ca: 
1:29687a8: import net.nicoulaj.compilecommand.annotations.DontInline;
1:29687a8: 
1:16499ca: import org.apache.cassandra.config.Config;
1:16499ca: import org.apache.cassandra.utils.memory.MemoryUtil;
1:1491a40: import org.apache.cassandra.utils.vint.VIntCoding;
1:16499ca: 
1:16499ca: /**
1:16499ca:  * An implementation of the DataOutputStreamPlus interface using a ByteBuffer to stage writes
1:16499ca:  * before flushing them to an underlying channel.
1:16499ca:  *
1:16499ca:  * This class is completely thread unsafe.
1:16499ca:  */
1:16499ca: public class BufferedDataOutputStreamPlus extends DataOutputStreamPlus
3:16499ca: {
1:16499ca:     private static final int DEFAULT_BUFFER_SIZE = Integer.getInteger(Config.PROPERTY_PREFIX + "nio_data_output_stream_plus_buffer_size", 1024 * 32);
1:16499ca: 
1:29687a8:     protected ByteBuffer buffer;
1:29687a8: 
1:29687a8:     //Allow derived classes to specify writing to the channel
1:29687a8:     //directly shouldn't happen because they intercept via doFlush for things
1:29687a8:     //like compression or checksumming
1:29687a8:     //Another hack for this value is that it also indicates that flushing early
1:29687a8:     //should not occur, flushes aligned with buffer size are desired
1:29687a8:     //Unless... it's the last flush. Compression and checksum formats
1:29687a8:     //expect block (same as buffer size) alignment for everything except the last block
1:29687a8:     protected boolean strictFlushing = false;
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(RandomAccessFile ras)
1:16499ca:     {
1:16499ca:         this(ras.getChannel());
3:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(RandomAccessFile ras, int bufferSize)
1:16499ca:     {
1:16499ca:         this(ras.getChannel(), bufferSize);
1:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(FileOutputStream fos)
1:16499ca:     {
1:16499ca:         this(fos.getChannel());
1:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(FileOutputStream fos, int bufferSize)
1:16499ca:     {
1:16499ca:         this(fos.getChannel(), bufferSize);
1:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(WritableByteChannel wbc)
1:16499ca:     {
1:16499ca:         this(wbc, DEFAULT_BUFFER_SIZE);
1:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus(WritableByteChannel wbc, int bufferSize)
1:16499ca:     {
1:16499ca:         this(wbc, ByteBuffer.allocateDirect(bufferSize));
1:16499ca:         Preconditions.checkNotNull(wbc);
1:16499ca:         Preconditions.checkArgument(bufferSize >= 8, "Buffer size must be large enough to accommodate a long/double");
1:16499ca:     }
1:16499ca: 
1:c2ecfe7:     protected BufferedDataOutputStreamPlus(WritableByteChannel channel, ByteBuffer buffer)
1:16499ca:     {
1:16499ca:         super(channel);
1:16499ca:         this.buffer = buffer;
1:16499ca:     }
1:16499ca: 
1:c2ecfe7:     protected BufferedDataOutputStreamPlus(ByteBuffer buffer)
1:16499ca:     {
1:16499ca:         super();
1:16499ca:         this.buffer = buffer;
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(byte[] b) throws IOException
1:16499ca:     {
1:16499ca:         write(b, 0, b.length);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(byte[] b, int off, int len) throws IOException
1:16499ca:     {
1:16499ca:         if (b == null)
1:16499ca:             throw new NullPointerException();
1:16499ca: 
1:16499ca:         // avoid int overflow
1:16499ca:         if (off < 0 || off > b.length || len < 0
1:16499ca:             || len > b.length - off)
1:16499ca:             throw new IndexOutOfBoundsException();
1:16499ca: 
1:16499ca:         if (len == 0)
1:16499ca:             return;
1:16499ca: 
1:16499ca:         int copied = 0;
1:16499ca:         while (copied < len)
1:16499ca:         {
1:16499ca:             if (buffer.hasRemaining())
1:16499ca:             {
1:16499ca:                 int toCopy = Math.min(len - copied, buffer.remaining());
1:16499ca:                 buffer.put(b, off + copied, toCopy);
1:16499ca:                 copied += toCopy;
1:16499ca:             }
2:16499ca:             else
1:16499ca:             {
1:f7aaea0:                 doFlush(len - copied);
1:16499ca:             }
1:16499ca:         }
1:16499ca:     }
1:16499ca: 
1:16499ca:     // ByteBuffer to use for defensive copies
1:16499ca:     private final ByteBuffer hollowBuffer = MemoryUtil.getHollowDirectByteBuffer();
1:16499ca: 
1:16499ca:     /*
1:16499ca:      * Makes a defensive copy of the incoming ByteBuffer and don't modify the position or limit
1:16499ca:      * even temporarily so it is thread-safe WRT to the incoming buffer
1:16499ca:      * (non-Javadoc)
1:16499ca:      * @see org.apache.cassandra.io.util.DataOutputPlus#write(java.nio.ByteBuffer)
1:16499ca:      */
1:16499ca:     @Override
1:16499ca:     public void write(ByteBuffer toWrite) throws IOException
1:16499ca:     {
1:16499ca:         if (toWrite.hasArray())
1:16499ca:         {
1:16499ca:             write(toWrite.array(), toWrite.arrayOffset() + toWrite.position(), toWrite.remaining());
1:16499ca:         }
1:16499ca:         else
1:16499ca:         {
1:16499ca:             assert toWrite.isDirect();
1:29687a8:             MemoryUtil.duplicateDirectByteBuffer(toWrite, hollowBuffer);
1:f7aaea0:             int toWriteRemaining = toWrite.remaining();
1:29687a8: 
1:f7aaea0:             if (toWriteRemaining > buffer.remaining())
1:16499ca:             {
1:29687a8:                 if (strictFlushing)
1:16499ca:                 {
1:29687a8:                     writeExcessSlow();
1:16499ca:                 }
1:16499ca:                 else
1:16499ca:                 {
1:f7aaea0:                     doFlush(toWriteRemaining - buffer.remaining());
1:29687a8:                     while (hollowBuffer.remaining() > buffer.capacity())
1:29687a8:                         channel.write(hollowBuffer);
1:16499ca:                 }
1:16499ca:             }
1:29687a8: 
1:29687a8:             buffer.put(hollowBuffer);
1:16499ca:         }
1:16499ca:     }
1:16499ca: 
1:29687a8:     // writes anything we can't fit into the buffer
1:29687a8:     @DontInline
1:29687a8:     private void writeExcessSlow() throws IOException
1:29687a8:     {
1:29687a8:         int originalLimit = hollowBuffer.limit();
1:29687a8:         while (originalLimit - hollowBuffer.position() > buffer.remaining())
1:29687a8:         {
1:29687a8:             hollowBuffer.limit(hollowBuffer.position() + buffer.remaining());
1:29687a8:             buffer.put(hollowBuffer);
1:f7aaea0:             doFlush(originalLimit - hollowBuffer.position());
1:29687a8:         }
1:29687a8:         hollowBuffer.limit(originalLimit);
1:29687a8:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(int b) throws IOException
1:16499ca:     {
1:29687a8:         if (!buffer.hasRemaining())
1:f7aaea0:             doFlush(1);
1:16499ca:         buffer.put((byte) (b & 0xFF));
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeBoolean(boolean v) throws IOException
1:16499ca:     {
1:29687a8:         if (!buffer.hasRemaining())
1:f7aaea0:             doFlush(1);
1:16499ca:         buffer.put(v ? (byte)1 : (byte)0);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeByte(int v) throws IOException
1:16499ca:     {
1:16499ca:         write(v);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeShort(int v) throws IOException
1:16499ca:     {
1:29687a8:         writeChar(v);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeChar(int v) throws IOException
1:16499ca:     {
1:29687a8:         if (buffer.remaining() < 2)
1:29687a8:             writeSlow(v, 2);
1:29687a8:         else
1:29687a8:             buffer.putChar((char) v);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeInt(int v) throws IOException
1:16499ca:     {
1:29687a8:         if (buffer.remaining() < 4)
1:29687a8:             writeSlow(v, 4);
1:29687a8:         else
1:29687a8:             buffer.putInt(v);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeLong(long v) throws IOException
1:16499ca:     {
1:29687a8:         if (buffer.remaining() < 8)
1:29687a8:             writeSlow(v, 8);
1:29687a8:         else
1:29687a8:             buffer.putLong(v);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:1491a40:     public void writeVInt(long value) throws IOException
1:1491a40:     {
1:1491a40:         writeUnsignedVInt(VIntCoding.encodeZigZag64(value));
1:1491a40:     }
1:1491a40: 
1:1491a40:     @Override
1:1491a40:     public void writeUnsignedVInt(long value) throws IOException
1:1491a40:     {
1:1491a40:         int size = VIntCoding.computeUnsignedVIntSize(value);
1:1491a40:         if (size == 1)
1:1491a40:         {
1:29687a8:             write((int) value);
1:1491a40:             return;
1:1491a40:         }
1:1491a40: 
1:29687a8:         write(VIntCoding.encodeVInt(value, size), 0, size);
1:1491a40:     }
1:1491a40: 
1:1491a40:     @Override
1:16499ca:     public void writeFloat(float v) throws IOException
1:16499ca:     {
1:29687a8:         writeInt(Float.floatToRawIntBits(v));
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeDouble(double v) throws IOException
1:16499ca:     {
1:29687a8:         writeLong(Double.doubleToRawLongBits(v));
1:29687a8:     }
1:29687a8: 
1:29687a8:     @DontInline
1:29687a8:     private void writeSlow(long bytes, int count) throws IOException
1:29687a8:     {
1:29687a8:         int origCount = count;
1:29687a8:         if (ByteOrder.BIG_ENDIAN == buffer.order())
1:29687a8:             while (count > 0) writeByte((int) (bytes >>> (8 * --count)));
1:29687a8:         else
1:29687a8:             while (count > 0) writeByte((int) (bytes >>> (8 * (origCount - count--))));
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeBytes(String s) throws IOException
1:16499ca:     {
1:16499ca:         for (int index = 0; index < s.length(); index++)
1:16499ca:             writeByte(s.charAt(index));
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeChars(String s) throws IOException
1:16499ca:     {
1:16499ca:         for (int index = 0; index < s.length(); index++)
1:16499ca:             writeChar(s.charAt(index));
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void writeUTF(String s) throws IOException
1:16499ca:     {
1:16499ca:         UnbufferedDataOutputStreamPlus.writeUTF(s, this);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(Memory memory, long offset, long length) throws IOException
1:16499ca:     {
1:16499ca:         for (ByteBuffer buffer : memory.asByteBuffers(offset, length))
1:16499ca:             write(buffer);
1:16499ca:     }
1:16499ca: 
1:f7aaea0:     /*
1:f7aaea0:      * Count is the number of bytes remaining to write ignoring already remaining capacity
1:f7aaea0:      */
1:29687a8:     @DontInline
1:f7aaea0:     protected void doFlush(int count) throws IOException
1:16499ca:     {
1:16499ca:         buffer.flip();
1:16499ca: 
1:16499ca:         while (buffer.hasRemaining())
1:16499ca:             channel.write(buffer);
1:16499ca: 
1:16499ca:         buffer.clear();
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void flush() throws IOException
1:16499ca:     {
1:f7aaea0:         doFlush(0);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void close() throws IOException
1:16499ca:     {
1:f7aaea0:         doFlush(0);
1:16499ca:         channel.close();
1:16499ca:         FileUtils.clean(buffer);
1:16499ca:         buffer = null;
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public <R> R applyToChannel(Function<WritableByteChannel, R> f) throws IOException
1:16499ca:     {
1:29687a8:         if (strictFlushing)
1:29687a8:             throw new UnsupportedOperationException();
1:16499ca:         //Don't allow writes to the underlying channel while data is buffered
1:16499ca:         flush();
1:16499ca:         return f.apply(channel);
1:16499ca:     }
1:16499ca: 
1:16499ca:     public BufferedDataOutputStreamPlus order(ByteOrder order)
1:16499ca:     {
1:16499ca:         this.buffer.order(order);
1:16499ca:         return this;
1:16499ca:     }
1:16499ca: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:f7aaea0
/////////////////////////////////////////////////////////////////////////
1:                 doFlush(len - copied);
/////////////////////////////////////////////////////////////////////////
1:             int toWriteRemaining = toWrite.remaining();
1:             if (toWriteRemaining > buffer.remaining())
/////////////////////////////////////////////////////////////////////////
1:                     doFlush(toWriteRemaining - buffer.remaining());
/////////////////////////////////////////////////////////////////////////
1:             doFlush(originalLimit - hollowBuffer.position());
/////////////////////////////////////////////////////////////////////////
1:             doFlush(1);
/////////////////////////////////////////////////////////////////////////
1:             doFlush(1);
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Count is the number of bytes remaining to write ignoring already remaining capacity
1:      */
1:     protected void doFlush(int count) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         doFlush(0);
1:         doFlush(0);
commit:29687a8
/////////////////////////////////////////////////////////////////////////
1: import net.nicoulaj.compilecommand.annotations.DontInline;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected ByteBuffer buffer;
1: 
1:     //Allow derived classes to specify writing to the channel
1:     //directly shouldn't happen because they intercept via doFlush for things
1:     //like compression or checksumming
1:     //Another hack for this value is that it also indicates that flushing early
1:     //should not occur, flushes aligned with buffer size are desired
1:     //Unless... it's the last flush. Compression and checksum formats
1:     //expect block (same as buffer size) alignment for everything except the last block
1:     protected boolean strictFlushing = false;
/////////////////////////////////////////////////////////////////////////
1:             MemoryUtil.duplicateDirectByteBuffer(toWrite, hollowBuffer);
1: 
1:                 if (strictFlushing)
1:                     writeExcessSlow();
0:                     doFlush();
1:                     while (hollowBuffer.remaining() > buffer.capacity())
1:                         channel.write(hollowBuffer);
1: 
1:             buffer.put(hollowBuffer);
1:     // writes anything we can't fit into the buffer
1:     @DontInline
1:     private void writeExcessSlow() throws IOException
1:     {
1:         int originalLimit = hollowBuffer.limit();
1:         while (originalLimit - hollowBuffer.position() > buffer.remaining())
1:         {
1:             hollowBuffer.limit(hollowBuffer.position() + buffer.remaining());
1:             buffer.put(hollowBuffer);
0:             doFlush();
1:         }
1:         hollowBuffer.limit(originalLimit);
1:     }
1:         if (!buffer.hasRemaining())
0:             doFlush();
1:         if (!buffer.hasRemaining())
0:             doFlush();
/////////////////////////////////////////////////////////////////////////
1:         writeChar(v);
1:         if (buffer.remaining() < 2)
1:             writeSlow(v, 2);
1:         else
1:             buffer.putChar((char) v);
1:         if (buffer.remaining() < 4)
1:             writeSlow(v, 4);
1:         else
1:             buffer.putInt(v);
1:         if (buffer.remaining() < 8)
1:             writeSlow(v, 8);
1:         else
1:             buffer.putLong(v);
/////////////////////////////////////////////////////////////////////////
1:             write((int) value);
1:         write(VIntCoding.encodeVInt(value, size), 0, size);
1:         writeInt(Float.floatToRawIntBits(v));
1:         writeLong(Double.doubleToRawLongBits(v));
1:     }
1: 
1:     @DontInline
1:     private void writeSlow(long bytes, int count) throws IOException
1:     {
1:         int origCount = count;
1:         if (ByteOrder.BIG_ENDIAN == buffer.order())
1:             while (count > 0) writeByte((int) (bytes >>> (8 * --count)));
1:         else
1:             while (count > 0) writeByte((int) (bytes >>> (8 * (origCount - count--))));
/////////////////////////////////////////////////////////////////////////
1:     @DontInline
/////////////////////////////////////////////////////////////////////////
1:         if (strictFlushing)
1:             throw new UnsupportedOperationException();
commit:1491a40
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.vint.VIntCoding;
/////////////////////////////////////////////////////////////////////////
1:     public void writeVInt(long value) throws IOException
1:     {
1:         writeUnsignedVInt(VIntCoding.encodeZigZag64(value));
1:     }
1: 
1:     @Override
1:     public void writeUnsignedVInt(long value) throws IOException
1:     {
1:         int size = VIntCoding.computeUnsignedVIntSize(value);
1:         if (size == 1)
1:         {
0:             ensureRemaining(1);
0:             buffer.put((byte) value);
1:             return;
1:         }
1: 
0:         ensureRemaining(size);
0:         buffer.put(VIntCoding.encodeVInt(value, size), 0, size);
1:     }
1: 
1:     @Override
commit:c2ecfe7
/////////////////////////////////////////////////////////////////////////
1:     protected BufferedDataOutputStreamPlus(WritableByteChannel channel, ByteBuffer buffer)
1:     protected BufferedDataOutputStreamPlus(ByteBuffer buffer)
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.ByteBuffer;
1: import java.nio.ByteOrder;
1: import java.nio.channels.WritableByteChannel;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.base.Preconditions;
1: 
1: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.utils.memory.MemoryUtil;
1: 
1: 
1: /**
1:  * An implementation of the DataOutputStreamPlus interface using a ByteBuffer to stage writes
1:  * before flushing them to an underlying channel.
1:  *
1:  * This class is completely thread unsafe.
1:  */
1: public class BufferedDataOutputStreamPlus extends DataOutputStreamPlus
1: {
1:     private static final int DEFAULT_BUFFER_SIZE = Integer.getInteger(Config.PROPERTY_PREFIX + "nio_data_output_stream_plus_buffer_size", 1024 * 32);
1: 
0:     ByteBuffer buffer;
1: 
1:     public BufferedDataOutputStreamPlus(RandomAccessFile ras)
1:     {
1:         this(ras.getChannel());
1:     }
1: 
1:     public BufferedDataOutputStreamPlus(RandomAccessFile ras, int bufferSize)
1:     {
1:         this(ras.getChannel(), bufferSize);
1:     }
1: 
1:     public BufferedDataOutputStreamPlus(FileOutputStream fos)
1:     {
1:         this(fos.getChannel());
1:     }
1: 
1:     public BufferedDataOutputStreamPlus(FileOutputStream fos, int bufferSize)
1:     {
1:         this(fos.getChannel(), bufferSize);
1:     }
1: 
1:     public BufferedDataOutputStreamPlus(WritableByteChannel wbc)
1:     {
1:         this(wbc, DEFAULT_BUFFER_SIZE);
1:     }
1: 
1:     public BufferedDataOutputStreamPlus(WritableByteChannel wbc, int bufferSize)
1:     {
1:         this(wbc, ByteBuffer.allocateDirect(bufferSize));
1:         Preconditions.checkNotNull(wbc);
1:         Preconditions.checkArgument(bufferSize >= 8, "Buffer size must be large enough to accommodate a long/double");
1:     }
1: 
0:     public BufferedDataOutputStreamPlus(WritableByteChannel channel, ByteBuffer buffer)
1:     {
1:         super(channel);
1:         this.buffer = buffer;
1:     }
1: 
0:     public BufferedDataOutputStreamPlus(ByteBuffer buffer)
1:     {
1:         super();
1:         this.buffer = buffer;
1:     }
1: 
1:     @Override
1:     public void write(byte[] b) throws IOException
1:     {
1:         write(b, 0, b.length);
1:     }
1: 
1:     @Override
1:     public void write(byte[] b, int off, int len) throws IOException
1:     {
1:         if (b == null)
1:             throw new NullPointerException();
1: 
1:         // avoid int overflow
1:         if (off < 0 || off > b.length || len < 0
1:             || len > b.length - off)
1:             throw new IndexOutOfBoundsException();
1: 
1:         if (len == 0)
1:             return;
1: 
1:         int copied = 0;
1:         while (copied < len)
1:         {
1:             if (buffer.hasRemaining())
1:             {
1:                 int toCopy = Math.min(len - copied, buffer.remaining());
1:                 buffer.put(b, off + copied, toCopy);
1:                 copied += toCopy;
1:             }
1:             else
1:             {
0:                 doFlush();
1:             }
1:         }
1:     }
1: 
1:     // ByteBuffer to use for defensive copies
1:     private final ByteBuffer hollowBuffer = MemoryUtil.getHollowDirectByteBuffer();
1: 
1:     /*
1:      * Makes a defensive copy of the incoming ByteBuffer and don't modify the position or limit
1:      * even temporarily so it is thread-safe WRT to the incoming buffer
1:      * (non-Javadoc)
1:      * @see org.apache.cassandra.io.util.DataOutputPlus#write(java.nio.ByteBuffer)
1:      */
1:     @Override
1:     public void write(ByteBuffer toWrite) throws IOException
1:     {
1:         if (toWrite.hasArray())
1:         {
1:             write(toWrite.array(), toWrite.arrayOffset() + toWrite.position(), toWrite.remaining());
1:         }
1:         else
1:         {
1:             assert toWrite.isDirect();
0:             if (toWrite.remaining() > buffer.remaining())
1:             {
0:                 doFlush();
0:                 MemoryUtil.duplicateDirectByteBuffer(toWrite, hollowBuffer);
0:                 if (toWrite.remaining() > buffer.remaining())
1:                 {
0:                     while (hollowBuffer.hasRemaining())
0:                         channel.write(hollowBuffer);
1:                 }
1:                 else
1:                 {
0:                     buffer.put(hollowBuffer);
1:                 }
1:             }
1:             else
1:             {
0:                 MemoryUtil.duplicateDirectByteBuffer(toWrite, hollowBuffer);
0:                 buffer.put(hollowBuffer);
1:             }
1:         }
1:     }
1: 
1: 
1:     @Override
1:     public void write(int b) throws IOException
1:     {
0:         ensureRemaining(1);
1:         buffer.put((byte) (b & 0xFF));
1:     }
1: 
1:     @Override
1:     public void writeBoolean(boolean v) throws IOException
1:     {
0:         ensureRemaining(1);
1:         buffer.put(v ? (byte)1 : (byte)0);
1:     }
1: 
1:     @Override
1:     public void writeByte(int v) throws IOException
1:     {
1:         write(v);
1:     }
1: 
1:     @Override
1:     public void writeShort(int v) throws IOException
1:     {
0:         ensureRemaining(2);
0:         buffer.putShort((short) v);
1:     }
1: 
1:     @Override
1:     public void writeChar(int v) throws IOException
1:     {
0:         ensureRemaining(2);
0:         buffer.putChar((char) v);
1:     }
1: 
1:     @Override
1:     public void writeInt(int v) throws IOException
1:     {
0:         ensureRemaining(4);
0:         buffer.putInt(v);
1:     }
1: 
1:     @Override
1:     public void writeLong(long v) throws IOException
1:     {
0:         ensureRemaining(8);
0:         buffer.putLong(v);
1:     }
1: 
1:     @Override
1:     public void writeFloat(float v) throws IOException
1:     {
0:         ensureRemaining(4);
0:         buffer.putFloat(v);
1:     }
1: 
1:     @Override
1:     public void writeDouble(double v) throws IOException
1:     {
0:         ensureRemaining(8);
0:         buffer.putDouble(v);
1:     }
1: 
1:     @Override
1:     public void writeBytes(String s) throws IOException
1:     {
1:         for (int index = 0; index < s.length(); index++)
1:             writeByte(s.charAt(index));
1:     }
1: 
1:     @Override
1:     public void writeChars(String s) throws IOException
1:     {
1:         for (int index = 0; index < s.length(); index++)
1:             writeChar(s.charAt(index));
1:     }
1: 
1:     @Override
1:     public void writeUTF(String s) throws IOException
1:     {
1:         UnbufferedDataOutputStreamPlus.writeUTF(s, this);
1:     }
1: 
1:     @Override
1:     public void write(Memory memory, long offset, long length) throws IOException
1:     {
1:         for (ByteBuffer buffer : memory.asByteBuffers(offset, length))
1:             write(buffer);
1:     }
1: 
0:     protected void doFlush() throws IOException
1:     {
1:         buffer.flip();
1: 
1:         while (buffer.hasRemaining())
1:             channel.write(buffer);
1: 
1:         buffer.clear();
1:     }
1: 
1:     @Override
1:     public void flush() throws IOException
1:     {
0:         doFlush();
1:     }
1: 
1:     @Override
1:     public void close() throws IOException
1:     {
0:         doFlush();
1:         channel.close();
1:         FileUtils.clean(buffer);
1:         buffer = null;
1:     }
1: 
0:     protected void ensureRemaining(int minimum) throws IOException
1:     {
0:         if (buffer.remaining() < minimum)
0:             doFlush();
1:     }
1: 
1:     @Override
1:     public <R> R applyToChannel(Function<WritableByteChannel, R> f) throws IOException
1:     {
1:         //Don't allow writes to the underlying channel while data is buffered
1:         flush();
1:         return f.apply(channel);
1:     }
1: 
1:     public BufferedDataOutputStreamPlus order(ByteOrder order)
1:     {
1:         this.buffer.order(order);
1:         return this;
1:     }
1: }
============================================================================