1:c129e1b: /*
1:c129e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:c129e1b:  * or more contributor license agreements.  See the NOTICE file
1:c129e1b:  * distributed with this work for additional information
1:c129e1b:  * regarding copyright ownership.  The ASF licenses this file
1:c129e1b:  * to you under the Apache License, Version 2.0 (the
1:c129e1b:  * "License"); you may not use this file except in compliance
1:c129e1b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:c129e1b:  */
1:5728a20: package org.apache.cassandra.utils;
1:5728a20: 
1:5728a20: import java.lang.management.ManagementFactory;
1:05300b2: import java.util.Map;
1:8896a70: import javax.management.*;
1:5728a20: 
1:a3734e5: import org.apache.cassandra.cache.*;
1:a3734e5: 
1:8896a70: import org.apache.cassandra.metrics.ThreadPoolMetrics;
1:5728a20: import org.slf4j.Logger;
1:5728a20: import org.slf4j.LoggerFactory;
1:5728a20: 
1:295aedb: import org.apache.cassandra.config.DatabaseDescriptor;
1:5728a20: import org.apache.cassandra.db.ColumnFamilyStore;
1:4e17ac4: import org.apache.cassandra.db.RowIndexEntry;
1:3c4687c: import org.apache.cassandra.db.compaction.CompactionManager;
1:5728a20: import org.apache.cassandra.net.MessagingService;
1:295aedb: import org.apache.cassandra.service.CacheService;
1:5728a20: 
1:5728a20: public class StatusLogger
3:5728a20: {
1:5728a20:     private static final Logger logger = LoggerFactory.getLogger(StatusLogger.class);
1:8896a70: 
1:5728a20: 
1:5728a20:     public static void log()
1:5728a20:     {
1:5728a20:         MBeanServer server = ManagementFactory.getPlatformMBeanServer();
1:5728a20: 
1:5728a20:         // everything from o.a.c.concurrent
1:ec673ac:         logger.info(String.format("%-25s%10s%10s%15s%10s%18s", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All Time Blocked"));
1:8896a70: 
1:05300b2:         for (Map.Entry<String, String> tpool : ThreadPoolMetrics.getJmxThreadPools(server).entries())
1:5728a20:         {
1:944e3be:             logger.info(String.format("%-25s%10s%10s%15s%10s%18s%n",
1:05300b2:                                       tpool.getValue(),
1:05300b2:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "ActiveTasks"),
1:05300b2:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "PendingTasks"),
1:05300b2:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "CompletedTasks"),
1:05300b2:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "CurrentlyBlockedTasks"),
1:05300b2:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "TotalBlockedTasks")));
3:5728a20:         }
1:8896a70: 
1:5728a20:         // one offs
3:5728a20:         logger.info(String.format("%-25s%10s%10s",
1:dc95c8c:                                   "CompactionManager", CompactionManager.instance.getActiveCompactions(), CompactionManager.instance.getPendingTasks()));
1:144644b:         int pendingLargeMessages = 0;
1:144644b:         for (int n : MessagingService.instance().getLargeMessagePendingTasks().values())
1:5728a20:         {
1:144644b:             pendingLargeMessages += n;
1:5728a20:         }
1:144644b:         int pendingSmallMessages = 0;
1:144644b:         for (int n : MessagingService.instance().getSmallMessagePendingTasks().values())
1:5728a20:         {
1:144644b:             pendingSmallMessages += n;
1:5728a20:         }
1:dc95c8c:         logger.info(String.format("%-25s%10s%10s",
1:144644b:                                   "MessagingService", "n/a", pendingLargeMessages + "/" + pendingSmallMessages));
1:5728a20: 
1:295aedb:         // Global key/row cache information
1:4e17ac4:         AutoSavingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;
1:c9270f4:         AutoSavingCache<RowCacheKey, IRowCacheEntry> rowCache = CacheService.instance.rowCache;
1:5728a20: 
1:295aedb:         int keyCacheKeysToSave = DatabaseDescriptor.getKeyCacheKeysToSave();
1:295aedb:         int rowCacheKeysToSave = DatabaseDescriptor.getRowCacheKeysToSave();
1:07cdfd0: 
1:a3734e5:         logger.info(String.format("%-25s%10s%25s%25s",
1:a3734e5:                                   "Cache Type", "Size", "Capacity", "KeysToSave"));
1:a3734e5:         logger.info(String.format("%-25s%10s%25s%25s",
1:a3734e5:                                   "KeyCache",
1:a3734e5:                                   keyCache.weightedSize(),
1:a3734e5:                                   keyCache.getCapacity(),
1:a3734e5:                                   keyCacheKeysToSave == Integer.MAX_VALUE ? "all" : keyCacheKeysToSave));
1:2fd3268: 
1:a3734e5:         logger.info(String.format("%-25s%10s%25s%25s",
1:a3734e5:                                   "RowCache",
1:a3734e5:                                   rowCache.weightedSize(),
1:a3734e5:                                   rowCache.getCapacity(),
1:a3734e5:                                   rowCacheKeysToSave == Integer.MAX_VALUE ? "all" : rowCacheKeysToSave));
4:295aedb: 
1:5728a20:         // per-CF stats
1:93c99a6:         logger.info(String.format("%-25s%20s", "Table", "Memtable ops,data"));
1:5728a20:         for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
1:5728a20:         {
1:295aedb:             logger.info(String.format("%-25s%20s",
1:0e96e58:                                       cfs.keyspace.getName() + "." + cfs.name,
1:8896a70:                                       cfs.metric.memtableColumnsCount.getValue() + "," + cfs.metric.memtableLiveDataSize.getValue()));
1:5728a20:         }
1:5728a20:     }
1:5728a20: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:93c99a6
/////////////////////////////////////////////////////////////////////////
1:         logger.info(String.format("%-25s%20s", "Table", "Memtable ops,data"));
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Joel Knighton
-------------------------------------------------------------------------------
commit:05300b2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<String, String> tpool : ThreadPoolMetrics.getJmxThreadPools(server).entries())
1:                                       tpool.getValue(),
1:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "ActiveTasks"),
1:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "PendingTasks"),
1:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "CompletedTasks"),
1:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "CurrentlyBlockedTasks"),
1:                                       ThreadPoolMetrics.getJmxMetric(server, tpool.getKey(), tpool.getValue(), "TotalBlockedTasks")));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:944e3be
/////////////////////////////////////////////////////////////////////////
1:             logger.info(String.format("%-25s%10s%10s%15s%10s%18s%n",
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "TotalBlockedTasks")));
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:144644b
/////////////////////////////////////////////////////////////////////////
1:         int pendingLargeMessages = 0;
1:         for (int n : MessagingService.instance().getLargeMessagePendingTasks().values())
1:             pendingLargeMessages += n;
1:         int pendingSmallMessages = 0;
1:         for (int n : MessagingService.instance().getSmallMessagePendingTasks().values())
1:             pendingSmallMessages += n;
1:                                   "MessagingService", "n/a", pendingLargeMessages + "/" + pendingSmallMessages));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import javax.management.*;
0: import org.apache.cassandra.concurrent.Stage;
1: import org.apache.cassandra.metrics.ThreadPoolMetrics;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         for (Stage stage : Stage.jmxEnabledStages())
0:             System.out.printf("%-25s%10s%10s%15s%10s%18s%n",
0:                               stage.getJmxName(),
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "ActiveTasks"),
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "PendingTasks"),
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "CompletedTasks"),
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "CurrentlyBlockedTasks"),
0:                               ThreadPoolMetrics.getJmxMetric(server, stage.getJmxType(), stage.getJmxName(), "TotalBlockedTasks"));
1: 
/////////////////////////////////////////////////////////////////////////
1:                                       cfs.metric.memtableColumnsCount.getValue() + "," + cfs.metric.memtableLiveDataSize.getValue()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:22e18f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:53b2d9d
commit:dc2dd52
/////////////////////////////////////////////////////////////////////////
0:                                   "MessagingService", "n/a", pendingCommands + "/" + pendingResponses));
commit:83b0b2f
commit:dc95c8c
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Memtable;
0: import org.apache.cassandra.db.commitlog.CommitLog;
/////////////////////////////////////////////////////////////////////////
1:                                   "CompactionManager", CompactionManager.instance.getActiveCompactions(), CompactionManager.instance.getPendingTasks()));
1:         logger.info(String.format("%-25s%10s%10s",
0:                                   "Commitlog", "n/a", CommitLog.instance.getPendingTasks()));
commit:532db4d
commit:ec673ac
/////////////////////////////////////////////////////////////////////////
1:         logger.info(String.format("%-25s%10s%10s%15s%10s%18s", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All Time Blocked"));
/////////////////////////////////////////////////////////////////////////
0:             logger.info(String.format("%-25s%10s%10s%15s%10s%18s",
0:                                       poolName,
0:                                       threadPoolProxy.getActiveCount(),
0:                                       threadPoolProxy.getPendingTasks(),
0:                                       threadPoolProxy.getCompletedTasks(),
0:                                       threadPoolProxy.getCurrentlyBlockedTasks(),
0:                                       threadPoolProxy.getTotalBlockedTasks()));
commit:a3734e5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cache.*;
1: 
/////////////////////////////////////////////////////////////////////////
1:         logger.info(String.format("%-25s%10s%25s%25s",
1:                                   "Cache Type", "Size", "Capacity", "KeysToSave"));
1:         logger.info(String.format("%-25s%10s%25s%25s",
1:                                   "KeyCache",
1:                                   keyCache.weightedSize(),
1:                                   keyCache.getCapacity(),
1:                                   keyCacheKeysToSave == Integer.MAX_VALUE ? "all" : keyCacheKeysToSave));
1:         logger.info(String.format("%-25s%10s%25s%25s",
1:                                   "RowCache",
1:                                   rowCache.weightedSize(),
1:                                   rowCache.getCapacity(),
1:                                   rowCacheKeysToSave == Integer.MAX_VALUE ? "all" : rowCacheKeysToSave));
commit:e4d5d33
/////////////////////////////////////////////////////////////////////////
0:                                       cfs.table.getName() + "." + cfs.name,
commit:9e14e19
/////////////////////////////////////////////////////////////////////////
0:                                       cfs.table.name + "." + cfs.name,
commit:2f95185
commit:68d4e28
/////////////////////////////////////////////////////////////////////////
0:         CompactionManager cm = CompactionManager.instance;
0:                                   "CompactionManager", cm.getActiveCompactions(), cm.getPendingTasks()));
commit:3c4687c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.compaction.CompactionManager;
commit:6a0df02
/////////////////////////////////////////////////////////////////////////
commit:5728a20
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import java.lang.management.ManagementFactory;
0: import java.util.Set;
0: import javax.management.JMX;
0: import javax.management.MBeanServer;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
1: 
0: import com.google.common.collect.Iterables;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.concurrent.IExecutorMBean;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.CompactionManager;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.GCInspector;
1: 
1: public class StatusLogger
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(StatusLogger.class);
1: 
1:     public static void log()
1:     {
1:         MBeanServer server = ManagementFactory.getPlatformMBeanServer();
1:         
1:         // everything from o.a.c.concurrent
0:         logger.info(String.format("%-25s%10s%10s", "Pool Name", "Active", "Pending"));
0:         Set<ObjectName> request, internal;
0:         try
1:         {
0:             request = server.queryNames(new ObjectName("org.apache.cassandra.request:type=*"), null);
0:             internal = server.queryNames(new ObjectName("org.apache.cassandra.internal:type=*"), null);
1:         }
0:         catch (MalformedObjectNameException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
0:         for (ObjectName objectName : Iterables.concat(request, internal))
1:         {
0:             String poolName = objectName.getKeyProperty("type");
0:             IExecutorMBean threadPoolProxy = JMX.newMBeanProxy(server, objectName, IExecutorMBean.class);
1:             logger.info(String.format("%-25s%10s%10s",
0:                                       poolName, threadPoolProxy.getActiveCount(), threadPoolProxy.getPendingTasks()));
1:         }
1:         // one offs
1:         logger.info(String.format("%-25s%10s%10s",
0:                                   "CompactionManager", "n/a", CompactionManager.instance.getPendingTasks()));
0:         int pendingCommands = 0;
0:         for (int n : MessagingService.instance().getCommandPendingTasks().values())
1:         {
0:             pendingCommands += n;
1:         }
0:         int pendingResponses = 0;
0:         for (int n : MessagingService.instance().getResponsePendingTasks().values())
1:         {
0:             pendingResponses += n;
1:         }
1:         logger.info(String.format("%-25s%10s%10s",
0:                                   "MessagingService", "n/a", pendingCommands + "," + pendingResponses));
1: 
1:         // per-CF stats
0:         logger.info(String.format("%-25s%20s%20s%20s", "ColumnFamily", "Memtable ops,data", "Row cache size/cap", "Key cache size/cap"));
1:         for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
1:         {
0:             logger.info(String.format("%-25s%20s%20s%20s",
0:                                       cfs.table.name + "." + cfs.columnFamily,
0:                                       cfs.getMemtableColumnsCount() + "," + cfs.getMemtableDataSize(),
0:                                       cfs.getRowCacheSize() + "/" + cfs.getRowCacheCapacity(),
0:                                       cfs.getKeyCacheSize() + "/" + cfs.getKeyCacheCapacity()));
1:         }
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1:                                       cfs.keyspace.getName() + "." + cfs.name,
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4e17ac4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.RowIndexEntry;
/////////////////////////////////////////////////////////////////////////
1:         AutoSavingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;
commit:5c7ccb0
commit:c9270f4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cache.IRowCacheEntry;
/////////////////////////////////////////////////////////////////////////
1:         AutoSavingCache<RowCacheKey, IRowCacheEntry> rowCache = CacheService.instance.rowCache;
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.utils;
commit:80bfd0b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean;
/////////////////////////////////////////////////////////////////////////
0:         logger.info(String.format("%-25s%10s%10s%10s", "Pool Name", "Active", "Pending", "Blocked"));
/////////////////////////////////////////////////////////////////////////
0:             JMXEnabledThreadPoolExecutorMBean threadPoolProxy = JMX.newMBeanProxy(server, objectName, JMXEnabledThreadPoolExecutorMBean.class);
0:             logger.info(String.format("%-25s%10s%10s%10s",
0:                                       poolName, threadPoolProxy.getActiveCount(), threadPoolProxy.getPendingTasks(), threadPoolProxy.getCurrentlyBlockedTasks()));
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cache.AutoSavingCache;
0: import org.apache.cassandra.cache.KeyCacheKey;
0: import org.apache.cassandra.cache.RowCacheKey;
0: import org.apache.cassandra.db.ColumnFamily;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.service.CacheService;
/////////////////////////////////////////////////////////////////////////
1:         // Global key/row cache information
0:         AutoSavingCache<KeyCacheKey, Long> keyCache = CacheService.instance.keyCache;
0:         AutoSavingCache<RowCacheKey, ColumnFamily> rowCache = CacheService.instance.rowCache;
1: 
1:         int keyCacheKeysToSave = DatabaseDescriptor.getKeyCacheKeysToSave();
1:         int rowCacheKeysToSave = DatabaseDescriptor.getRowCacheKeysToSave();
1: 
0:         logger.info(String.format("%-25s%10s%25s%25s%65s", "Cache Type", "Size", "Capacity", "KeysToSave", "Provider"));
0:         logger.info(String.format("%-25s%10s%25s%25s%65s", "KeyCache",
0:                                                            keyCache.weightedSize(),
0:                                                            keyCache.getCapacity(),
0:                                                            keyCacheKeysToSave == Integer.MAX_VALUE ? "all" : keyCacheKeysToSave,
0:                                                            ""));
1: 
0:         logger.info(String.format("%-25s%10s%25s%25s%65s", "RowCache",
0:                                                            rowCache.weightedSize(),
0:                                                            rowCache.getCapacity(),
0:                                                            rowCacheKeysToSave == Integer.MAX_VALUE ? "all" : rowCacheKeysToSave,
0:                                                            DatabaseDescriptor.getRowCacheProvider().getClass().getName()));
1: 
0:         logger.info(String.format("%-25s%20s", "ColumnFamily", "Memtable ops,data"));
1:             logger.info(String.format("%-25s%20s",
0:                                       cfs.getMemtableColumnsCount() + "," + cfs.getMemtableDataSize()));
author:Eric Evans
-------------------------------------------------------------------------------
commit:c129e1b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================