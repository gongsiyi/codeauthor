1:07cf56f: /*
1:04344cb:  * Licensed to the Apache Software Foundation (ASF) under one
1:04344cb:  * or more contributor license agreements.  See the NOTICE file
1:04344cb:  * distributed with this work for additional information
1:04344cb:  * regarding copyright ownership.  The ASF licenses this file
1:04344cb:  * to you under the Apache License, Version 2.0 (the
1:04344cb:  * "License"); you may not use this file except in compliance
1:04344cb:  * with the License.  You may obtain a copy of the License at
1:04344cb:  *
1:04344cb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:04344cb:  *
1:04344cb:  * Unless required by applicable law or agreed to in writing, software
1:04344cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04344cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04344cb:  * See the License for the specific language governing permissions and
1:04344cb:  * limitations under the License.
1:04344cb:  */
1:04344cb: package org.apache.cassandra.utils;
1:04344cb: 
1:e7a385a: import java.nio.ByteBuffer;
1:e7a385a: 
2:04344cb: /**
1:04344cb:  * This is a very fast, non-cryptographic hash suitable for general hash-based
1:6cb811b:  * lookup. See http://murmurhash.googlepages.com/ for more details.
1:04344cb:  *
1:d765b24:  * hash32() and hash64() are MurmurHash 2.0.
1:d765b24:  *
1:724384a:  * hash3_x64_128() is *almost* MurmurHash 3.0.  It was supposed to match, but we didn't catch a sign bug with
1:724384a:  * the result that it doesn't.  Unfortunately, we can't change it now without breaking Murmur3Partitioner. *
1:724384a:  * 
1:6cb811b:  * <p>
1:6cb811b:  * The C version of MurmurHash 2.0 found at that site was ported to Java by
1:6cb811b:  * Andrzej Bialecki (ab at getopt org).
1:6cb811b:  * </p>
1:04344cb:  */
1:6cb811b: public class MurmurHash
1:6cb811b: {
1:3787d6c:     public static int hash32(ByteBuffer data, int offset, int length, int seed)
1:6cb811b:     {
1:6cb811b:         int m = 0x5bd1e995;
1:6cb811b:         int r = 24;
1:04344cb: 
1:6cb811b:         int h = seed ^ length;
1:04344cb: 
1:6cb811b:         int len_4 = length >> 2;
1:04344cb: 
1:6cb811b:         for (int i = 0; i < len_4; i++)
1:6cb811b:         {
1:6cb811b:             int i_4 = i << 2;
1:3787d6c:             int k = data.get(offset + i_4 + 3);
1:6cb811b:             k = k << 8;
1:3787d6c:             k = k | (data.get(offset + i_4 + 2) & 0xff);
1:6cb811b:             k = k << 8;
1:3787d6c:             k = k | (data.get(offset + i_4 + 1) & 0xff);
1:6cb811b:             k = k << 8;
1:3787d6c:             k = k | (data.get(offset + i_4 + 0) & 0xff);
1:6cb811b:             k *= m;
1:6cb811b:             k ^= k >>> r;
1:6cb811b:             k *= m;
1:6cb811b:             h *= m;
1:6cb811b:             h ^= k;
1:6cb811b:         }
1:6cb811b: 
1:6cb811b:         // avoid calculating modulo
1:6cb811b:         int len_m = len_4 << 2;
1:6cb811b:         int left = length - len_m;
1:6cb811b: 
1:6cb811b:         if (left != 0)
1:6cb811b:         {
1:6cb811b:             if (left >= 3)
1:6cb811b:             {
1:3787d6c:                 h ^= (int) data.get(offset + length - 3) << 16;
1:6cb811b:             }
1:6cb811b:             if (left >= 2)
1:6cb811b:             {
1:3787d6c:                 h ^= (int) data.get(offset + length - 2) << 8;
1:6cb811b:             }
1:6cb811b:             if (left >= 1)
1:6cb811b:             {
1:3787d6c:                 h ^= (int) data.get(offset + length - 1);
1:6cb811b:             }
1:6cb811b: 
1:6cb811b:             h *= m;
1:6cb811b:         }
1:6cb811b: 
1:6cb811b:         h ^= h >>> 13;
1:6cb811b:         h *= m;
1:6cb811b:         h ^= h >>> 15;
1:6cb811b: 
1:6cb811b:         return h;
1:04344cb:     }
1:04344cb: 
1:d765b24:     public static long hash2_64(ByteBuffer key, int offset, int length, long seed)
1:6cb811b:     {
1:6cb811b:         long m64 = 0xc6a4a7935bd1e995L;
1:6cb811b:         int r64 = 47;
1:04344cb: 
1:6cb811b:         long h64 = (seed & 0xffffffffL) ^ (m64 * length);
1:04344cb: 
1:6cb811b:         int lenLongs = length >> 3;
1:6cb811b: 
1:6cb811b:         for (int i = 0; i < lenLongs; ++i)
1:6cb811b:         {
1:6cb811b:             int i_8 = i << 3;
1:6cb811b: 
1:3787d6c:             long k64 =  ((long)  key.get(offset+i_8+0) & 0xff)      + (((long) key.get(offset+i_8+1) & 0xff)<<8)  +
1:3787d6c:                         (((long) key.get(offset+i_8+2) & 0xff)<<16) + (((long) key.get(offset+i_8+3) & 0xff)<<24) +
1:3787d6c:                         (((long) key.get(offset+i_8+4) & 0xff)<<32) + (((long) key.get(offset+i_8+5) & 0xff)<<40) +
1:3787d6c:                         (((long) key.get(offset+i_8+6) & 0xff)<<48) + (((long) key.get(offset+i_8+7) & 0xff)<<56);
1:6cb811b: 
1:6cb811b:             k64 *= m64;
1:6cb811b:             k64 ^= k64 >>> r64;
1:6cb811b:             k64 *= m64;
1:6cb811b: 
1:6cb811b:             h64 ^= k64;
1:6cb811b:             h64 *= m64;
1:6cb811b:         }
1:6cb811b: 
1:6cb811b:         int rem = length & 0x7;
1:6cb811b: 
1:6cb811b:         switch (rem)
1:6cb811b:         {
1:6cb811b:         case 0:
1:6cb811b:             break;
1:6cb811b:         case 7:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 6) << 48;
1:6cb811b:         case 6:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 5) << 40;
1:6cb811b:         case 5:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 4) << 32;
1:6cb811b:         case 4:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 3) << 24;
1:6cb811b:         case 3:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 2) << 16;
1:6cb811b:         case 2:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem + 1) << 8;
1:6cb811b:         case 1:
1:3787d6c:             h64 ^= (long) key.get(offset + length - rem);
1:6cb811b:             h64 *= m64;
1:6cb811b:         }
1:6cb811b: 
1:6cb811b:         h64 ^= h64 >>> r64;
1:6cb811b:         h64 *= m64;
1:6cb811b:         h64 ^= h64 >>> r64;
1:6cb811b: 
1:6cb811b:         return h64;
1:04344cb:     }
1:04344cb: 
1:d765b24:     protected static long getblock(ByteBuffer key, int offset, int index)
1:d765b24:     {
1:d765b24:         int i_8 = index << 3;
1:b1d12db:         int blockOffset = offset + i_8;
1:b1d12db:         return ((long) key.get(blockOffset + 0) & 0xff) + (((long) key.get(blockOffset + 1) & 0xff) << 8) +
1:b1d12db:                (((long) key.get(blockOffset + 2) & 0xff) << 16) + (((long) key.get(blockOffset + 3) & 0xff) << 24) +
1:b1d12db:                (((long) key.get(blockOffset + 4) & 0xff) << 32) + (((long) key.get(blockOffset + 5) & 0xff) << 40) +
1:b1d12db:                (((long) key.get(blockOffset + 6) & 0xff) << 48) + (((long) key.get(blockOffset + 7) & 0xff) << 56);
1:04344cb:     }
1:04344cb: 
1:d765b24:     protected static long rotl64(long v, int n)
1:d765b24:     {
1:d765b24:         return ((v << n) | (v >>> (64 - n)));
1:04344cb:     }
1:04344cb: 
1:d765b24:     protected static long fmix(long k)
1:d765b24:     {
1:d765b24:         k ^= k >>> 33;
1:d765b24:         k *= 0xff51afd7ed558ccdL;
1:d765b24:         k ^= k >>> 33;
1:d765b24:         k *= 0xc4ceb9fe1a85ec53L;
1:d765b24:         k ^= k >>> 33;
1:3787d6c: 
1:d765b24:         return k;
1:04344cb:     }
1:3787d6c: 
1:20c2adc:     public static void hash3_x64_128(ByteBuffer key, int offset, int length, long seed, long[] result)
1:d765b24:     {
1:d765b24:         final int nblocks = length >> 4; // Process as 128-bit blocks.
1:e77ea12: 
1:d765b24:         long h1 = seed;
1:d765b24:         long h2 = seed;
8:d765b24: 
1:d765b24:         long c1 = 0x87c37b91114253d5L;
1:d765b24:         long c2 = 0x4cf5ad432745937fL;
1:d765b24: 
1:d765b24:         //----------
1:d765b24:         // body
1:d765b24: 
1:d765b24:         for(int i = 0; i < nblocks; i++)
1:d765b24:         {
1:d765b24:             long k1 = getblock(key, offset, i*2+0);
1:d765b24:             long k2 = getblock(key, offset, i*2+1);
1:d765b24: 
1:d765b24:             k1 *= c1; k1 = rotl64(k1,31); k1 *= c2; h1 ^= k1;
1:d765b24: 
1:d765b24:             h1 = rotl64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;
1:d765b24: 
1:d765b24:             k2 *= c2; k2  = rotl64(k2,33); k2 *= c1; h2 ^= k2;
1:d765b24: 
1:d765b24:             h2 = rotl64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;
1:04344cb:         }
1:d765b24: 
1:d765b24:         //----------
1:d765b24:         // tail
1:d765b24: 
1:d765b24:         // Advance offset to the unprocessed tail of the data.
1:d765b24:         offset += nblocks * 16;
1:d765b24: 
1:d765b24:         long k1 = 0;
1:d765b24:         long k2 = 0;
1:d765b24: 
1:d765b24:         switch(length & 15)
1:d765b24:         {
1:d765b24:             case 15: k2 ^= ((long) key.get(offset+14)) << 48;
1:d765b24:             case 14: k2 ^= ((long) key.get(offset+13)) << 40;
1:d765b24:             case 13: k2 ^= ((long) key.get(offset+12)) << 32;
1:d765b24:             case 12: k2 ^= ((long) key.get(offset+11)) << 24;
1:d765b24:             case 11: k2 ^= ((long) key.get(offset+10)) << 16;
1:d765b24:             case 10: k2 ^= ((long) key.get(offset+9)) << 8;
1:d765b24:             case  9: k2 ^= ((long) key.get(offset+8)) << 0;
1:d765b24:                 k2 *= c2; k2  = rotl64(k2,33); k2 *= c1; h2 ^= k2;
1:d765b24: 
1:d765b24:             case  8: k1 ^= ((long) key.get(offset+7)) << 56;
1:d765b24:             case  7: k1 ^= ((long) key.get(offset+6)) << 48;
1:d765b24:             case  6: k1 ^= ((long) key.get(offset+5)) << 40;
1:d765b24:             case  5: k1 ^= ((long) key.get(offset+4)) << 32;
1:d765b24:             case  4: k1 ^= ((long) key.get(offset+3)) << 24;
1:d765b24:             case  3: k1 ^= ((long) key.get(offset+2)) << 16;
1:d765b24:             case  2: k1 ^= ((long) key.get(offset+1)) << 8;
1:d765b24:             case  1: k1 ^= ((long) key.get(offset));
1:d765b24:                 k1 *= c1; k1  = rotl64(k1,31); k1 *= c2; h1 ^= k1;
1:d765b24:         };
1:d765b24: 
1:d765b24:         //----------
1:d765b24:         // finalization
1:d765b24: 
1:d765b24:         h1 ^= length; h2 ^= length;
1:d765b24: 
1:d765b24:         h1 += h2;
1:d765b24:         h2 += h1;
1:d765b24: 
1:d765b24:         h1 = fmix(h1);
1:d765b24:         h2 = fmix(h2);
1:d765b24: 
1:d765b24:         h1 += h2;
1:d765b24:         h2 += h1;
1:d765b24: 
1:20c2adc:         result[0] = h1;
1:20c2adc:         result[1] = h2;
1:04344cb:     }
1:20c2adc: 
5:d765b24: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ae3edb2
commit:b4fae85
commit:724384a
/////////////////////////////////////////////////////////////////////////
1:  * hash3_x64_128() is *almost* MurmurHash 3.0.  It was supposed to match, but we didn't catch a sign bug with
1:  * the result that it doesn't.  Unfortunately, we can't change it now without breaking Murmur3Partitioner. *
1:  * 
commit:20c2adc
/////////////////////////////////////////////////////////////////////////
1:     public static void hash3_x64_128(ByteBuffer key, int offset, int length, long seed, long[] result)
/////////////////////////////////////////////////////////////////////////
1:         result[0] = h1;
1:         result[1] = h2;
1: 
commit:b1d12db
/////////////////////////////////////////////////////////////////////////
1:         int blockOffset = offset + i_8;
1:         return ((long) key.get(blockOffset + 0) & 0xff) + (((long) key.get(blockOffset + 1) & 0xff) << 8) +
1:                (((long) key.get(blockOffset + 2) & 0xff) << 16) + (((long) key.get(blockOffset + 3) & 0xff) << 24) +
1:                (((long) key.get(blockOffset + 4) & 0xff) << 32) + (((long) key.get(blockOffset + 5) & 0xff) << 40) +
1:                (((long) key.get(blockOffset + 6) & 0xff) << 48) + (((long) key.get(blockOffset + 7) & 0xff) << 56);
/////////////////////////////////////////////////////////////////////////
commit:6cb811b
/////////////////////////////////////////////////////////////////////////
1:  * lookup. See http://murmurhash.googlepages.com/ for more details.
1:  * <p>
1:  * The C version of MurmurHash 2.0 found at that site was ported to Java by
1:  * Andrzej Bialecki (ab at getopt org).
1:  * </p>
1: public class MurmurHash
1: {
0:     public static int hash32(byte[] data, int offset, int length, int seed)
1:     {
1:         int m = 0x5bd1e995;
1:         int r = 24;
1:         int h = seed ^ length;
1:         int len_4 = length >> 2;
1:         for (int i = 0; i < len_4; i++)
1:         {
1:             int i_4 = i << 2;
0:             int k = data[offset + i_4 + 3];
1:             k = k << 8;
0:             k = k | (data[offset + i_4 + 2] & 0xff);
1:             k = k << 8;
0:             k = k | (data[offset + i_4 + 1] & 0xff);
1:             k = k << 8;
0:             k = k | (data[offset + i_4 + 0] & 0xff);
1:             k *= m;
1:             k ^= k >>> r;
1:             k *= m;
1:             h *= m;
1:             h ^= k;
1:         }
1: 
1:         // avoid calculating modulo
1:         int len_m = len_4 << 2;
1:         int left = length - len_m;
1: 
1:         if (left != 0)
1:         {
1:             if (left >= 3)
1:             {
0:                 h ^= (int) data[offset + length - 3] << 16;
1:             }
1:             if (left >= 2)
1:             {
0:                 h ^= (int) data[offset + length - 2] << 8;
1:             }
1:             if (left >= 1)
1:             {
0:                 h ^= (int) data[offset + length - 1];
1:             }
1: 
1:             h *= m;
1:         }
1: 
1:         h ^= h >>> 13;
1:         h *= m;
1:         h ^= h >>> 15;
1: 
1:         return h;
0:     public static long hash64(byte[] key, int offset, int length, long seed)
1:     {
1:         long m64 = 0xc6a4a7935bd1e995L;
1:         int r64 = 47;
1:         long h64 = (seed & 0xffffffffL) ^ (m64 * length);
1:         int lenLongs = length >> 3;
1: 
1:         for (int i = 0; i < lenLongs; ++i)
1:         {
1:             int i_8 = i << 3;
1:             
0:             long k64 =  ((long)key[offset+i_8+0]&0xff)       + (((long)key[offset+i_8+1]&0xff)<<8)  +
0: 			            (((long)key[offset+i_8+2]&0xff)<<16) + (((long)key[offset+i_8+3]&0xff)<<24) +
0: 			            (((long)key[offset+i_8+4]&0xff)<<32) + (((long)key[offset+i_8+5]&0xff)<<40) +
0: 			            (((long)key[offset+i_8+6]&0xff)<<48) + (((long)key[offset+i_8+7]&0xff)<<56);
1:            
1:             k64 *= m64;
1:             k64 ^= k64 >>> r64;
1:             k64 *= m64;
1: 
1:             h64 ^= k64;
1:             h64 *= m64;
1:         }
1: 
1:         int rem = length & 0x7;
1: 
1:         switch (rem)
1:         {
1:         case 0:
1:             break;
1:         case 7:
0:             h64 ^= (long) key[offset + length - rem + 6] << 48; 
1:         case 6:
0:             h64 ^= (long) key[offset + length - rem + 5] << 40;
1:         case 5:
0:             h64 ^= (long) key[offset + length - rem + 4] << 32;
1:         case 4:
0:             h64 ^= (long) key[offset + length - rem + 3] << 24;
1:         case 3:
0:             h64 ^= (long) key[offset + length - rem + 2] << 16;
1:         case 2:
0:             h64 ^= (long) key[offset + length - rem + 1] << 8;
1:         case 1:
0:             h64 ^= (long) key[offset + length - rem];
1:             h64 *= m64;
1:         }
1: 
1:         h64 ^= h64 >>> r64;
1:         h64 *= m64;
1:         h64 ^= h64 >>> r64;
1: 
1:         return h64;
commit:ef25537
/////////////////////////////////////////////////////////////////////////
commit:98d2f20
/////////////////////////////////////////////////////////////////////////
0:     for (int i = 0; i < len_4; i++) {
0:       int k = data[offset + i_4 + 3];
0:       k = k | (data[offset + i_4 + 2] & 0xff);
0:       k = k | (data[offset + i_4 + 1] & 0xff);
0:       k = k | (data[offset + i_4 + 0] & 0xff);
commit:187761a
/////////////////////////////////////////////////////////////////////////
0:     for (int i = offset; i < offset + len_4; i++) {
0:       int k = data[i_4 + 3];
0:       k = k | (data[i_4 + 2] & 0xff);
0:       k = k | (data[i_4 + 1] & 0xff);
0:       k = k | (data[i_4 + 0] & 0xff);
/////////////////////////////////////////////////////////////////////////
0:         h ^= (int) data[offset + length - 3] << 16;
0:         h ^= (int) data[offset + length - 2] << 8;
0:         h ^= (int) data[offset + length - 1];
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
0:   public int hash(byte[] data, int offset, int length, int seed) {
/////////////////////////////////////////////////////////////////////////
0:       int k = data[offset + i_4 + 3];
0:       k = k | (data[offset + i_4 + 2] & 0xff);
0:       k = k | (data[offset + i_4 + 1] & 0xff);
0:       k = k | (data[offset + i_4 + 0] & 0xff);
/////////////////////////////////////////////////////////////////////////
0:         h ^= (int) data[offset+length - 3] << 16;
0:         h ^= (int) data[offset+length - 2] << 8;
0:         h ^= (int) data[offset+length - 1];
commit:71739ef
commit:04344cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.utils;
1: 
1: /**
1:  * This is a very fast, non-cryptographic hash suitable for general hash-based
0:  * lookup.  See http://murmurhash.googlepages.com/ for more details.
1:  * 
0:  * <p>The C version of MurmurHash 2.0 found at that site was ported
0:  * to Java by Andrzej Bialecki (ab at getopt org).</p>
1:  */
0: public class MurmurHash {  
0:   public int hash(byte[] data, int length, int seed) {
0:     int m = 0x5bd1e995;
0:     int r = 24;
1: 
0:     int h = seed ^ length;
1: 
0:     int len_4 = length >> 2;
1: 
0:     for (int i = 0; i < len_4; i++) {
0:       int i_4 = i << 2;
0:       int k = data[i_4 + 3];
0:       k = k << 8;
0:       k = k | (data[i_4 + 2] & 0xff);
0:       k = k << 8;
0:       k = k | (data[i_4 + 1] & 0xff);
0:       k = k << 8;
0:       k = k | (data[i_4 + 0] & 0xff);
0:       k *= m;
0:       k ^= k >>> r;
0:       k *= m;
0:       h *= m;
0:       h ^= k;
1:     }
1: 
0:     // avoid calculating modulo
0:     int len_m = len_4 << 2;
0:     int left = length - len_m;
1: 
0:     if (left != 0) {
0:       if (left >= 3) {
0:         h ^= (int) data[length - 3] << 16;
1:       }
0:       if (left >= 2) {
0:         h ^= (int) data[length - 2] << 8;
1:       }
0:       if (left >= 1) {
0:         h ^= (int) data[length - 1];
1:       }
1: 
0:       h *= m;
1:     }
1: 
0:     h ^= h >>> 13;
0:     h *= m;
0:     h ^= h >>> 15;
1: 
0:     return h;
1:   }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1fc8899
/////////////////////////////////////////////////////////////////////////
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static int hash32(ByteBuffer data, int offset, int length, int seed)
/////////////////////////////////////////////////////////////////////////
1:             int k = data.get(offset + i_4 + 3);
1:             k = k | (data.get(offset + i_4 + 2) & 0xff);
1:             k = k | (data.get(offset + i_4 + 1) & 0xff);
1:             k = k | (data.get(offset + i_4 + 0) & 0xff);
/////////////////////////////////////////////////////////////////////////
1:                 h ^= (int) data.get(offset + length - 3) << 16;
1:                 h ^= (int) data.get(offset + length - 2) << 8;
1:                 h ^= (int) data.get(offset + length - 1);
/////////////////////////////////////////////////////////////////////////
0:     public static long hash64(ByteBuffer key, int offset, int length, long seed)
/////////////////////////////////////////////////////////////////////////
1: 
1:             long k64 =  ((long)  key.get(offset+i_8+0) & 0xff)      + (((long) key.get(offset+i_8+1) & 0xff)<<8)  +
1: 			            (((long) key.get(offset+i_8+2) & 0xff)<<16) + (((long) key.get(offset+i_8+3) & 0xff)<<24) +
1: 			            (((long) key.get(offset+i_8+4) & 0xff)<<32) + (((long) key.get(offset+i_8+5) & 0xff)<<40) +
1: 			            (((long) key.get(offset+i_8+6) & 0xff)<<48) + (((long) key.get(offset+i_8+7) & 0xff)<<56);
/////////////////////////////////////////////////////////////////////////
1:             h64 ^= (long) key.get(offset + length - rem + 6) << 48;
1:             h64 ^= (long) key.get(offset + length - rem + 5) << 40;
1:             h64 ^= (long) key.get(offset + length - rem + 4) << 32;
1:             h64 ^= (long) key.get(offset + length - rem + 3) << 24;
1:             h64 ^= (long) key.get(offset + length - rem + 2) << 16;
1:             h64 ^= (long) key.get(offset + length - rem + 1) << 8;
1:             h64 ^= (long) key.get(offset + length - rem);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e77ea12
/////////////////////////////////////////////////////////////////////////
0: import net.nicoulaj.compilecommand.annotations.Inline;
1: 
/////////////////////////////////////////////////////////////////////////
0:     @Inline
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
1:  * hash32() and hash64() are MurmurHash 2.0.
0:  * hash3_x64_128() is MurmurHash 3.0.
1:  *
/////////////////////////////////////////////////////////////////////////
1:     public static long hash2_64(ByteBuffer key, int offset, int length, long seed)
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected static long getblock(ByteBuffer key, int offset, int index)
1:     {
1:         int i_8 = index << 3;
0:         return ((long) key.get(offset + i_8 + 0) & 0xff) + (((long) key.get(offset + i_8 + 1) & 0xff) << 8) +
0:                (((long) key.get(offset + i_8 + 2) & 0xff) << 16) + (((long) key.get(offset + i_8 + 3) & 0xff) << 24) +
0:                (((long) key.get(offset + i_8 + 4) & 0xff) << 32) + (((long) key.get(offset + i_8 + 5) & 0xff) << 40) +
0:                (((long) key.get(offset + i_8 + 6) & 0xff) << 48) + (((long) key.get(offset + i_8 + 7) & 0xff) << 56);
1:     }
1: 
1:     protected static long rotl64(long v, int n)
1:     {
1:         return ((v << n) | (v >>> (64 - n)));
1:     }
1: 
1:     protected static long fmix(long k)
1:     {
1:         k ^= k >>> 33;
1:         k *= 0xff51afd7ed558ccdL;
1:         k ^= k >>> 33;
1:         k *= 0xc4ceb9fe1a85ec53L;
1:         k ^= k >>> 33;
1: 
1:         return k;
1:     }
1: 
0:     public static long[] hash3_x64_128(ByteBuffer key, int offset, int length, long seed)
1:     {
1:         final int nblocks = length >> 4; // Process as 128-bit blocks.
1: 
1:         long h1 = seed;
1:         long h2 = seed;
1: 
1:         long c1 = 0x87c37b91114253d5L;
1:         long c2 = 0x4cf5ad432745937fL;
1: 
1:         //----------
1:         // body
1: 
1:         for(int i = 0; i < nblocks; i++)
1:         {
0:             int i_8 = i << 4;
1: 
1:             long k1 = getblock(key, offset, i*2+0);
1:             long k2 = getblock(key, offset, i*2+1);
1: 
1:             k1 *= c1; k1 = rotl64(k1,31); k1 *= c2; h1 ^= k1;
1: 
1:             h1 = rotl64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;
1: 
1:             k2 *= c2; k2  = rotl64(k2,33); k2 *= c1; h2 ^= k2;
1: 
1:             h2 = rotl64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;
1:         }
1: 
1:         //----------
1:         // tail
1: 
1:         // Advance offset to the unprocessed tail of the data.
1:         offset += nblocks * 16;
1: 
1:         long k1 = 0;
1:         long k2 = 0;
1: 
1:         switch(length & 15)
1:         {
1:             case 15: k2 ^= ((long) key.get(offset+14)) << 48;
1:             case 14: k2 ^= ((long) key.get(offset+13)) << 40;
1:             case 13: k2 ^= ((long) key.get(offset+12)) << 32;
1:             case 12: k2 ^= ((long) key.get(offset+11)) << 24;
1:             case 11: k2 ^= ((long) key.get(offset+10)) << 16;
1:             case 10: k2 ^= ((long) key.get(offset+9)) << 8;
1:             case  9: k2 ^= ((long) key.get(offset+8)) << 0;
1:                 k2 *= c2; k2  = rotl64(k2,33); k2 *= c1; h2 ^= k2;
1: 
1:             case  8: k1 ^= ((long) key.get(offset+7)) << 56;
1:             case  7: k1 ^= ((long) key.get(offset+6)) << 48;
1:             case  6: k1 ^= ((long) key.get(offset+5)) << 40;
1:             case  5: k1 ^= ((long) key.get(offset+4)) << 32;
1:             case  4: k1 ^= ((long) key.get(offset+3)) << 24;
1:             case  3: k1 ^= ((long) key.get(offset+2)) << 16;
1:             case  2: k1 ^= ((long) key.get(offset+1)) << 8;
1:             case  1: k1 ^= ((long) key.get(offset));
1:                 k1 *= c1; k1  = rotl64(k1,31); k1 *= c2; h1 ^= k1;
1:         };
1: 
1:         //----------
1:         // finalization
1: 
1:         h1 ^= length; h2 ^= length;
1: 
1:         h1 += h2;
1:         h2 += h1;
1: 
1:         h1 = fmix(h1);
1:         h2 = fmix(h2);
1: 
1:         h1 += h2;
1:         h2 += h1;
1: 
0:         return(new long[] {h1, h2});
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:686139a
/////////////////////////////////////////////////////////////////////////
0:                         (((long) key.get(offset+i_8+2) & 0xff)<<16) + (((long) key.get(offset+i_8+3) & 0xff)<<24) +
0:                         (((long) key.get(offset+i_8+4) & 0xff)<<32) + (((long) key.get(offset+i_8+5) & 0xff)<<40) +
0:                         (((long) key.get(offset+i_8+6) & 0xff)<<48) + (((long) key.get(offset+i_8+7) & 0xff)<<56);
============================================================================