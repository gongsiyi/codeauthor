1:b6147c1: /*
1:b6147c1:  * Licensed to the Apache Software Foundation (ASF) under one
1:b6147c1:  * or more contributor license agreements.  See the NOTICE file
1:b6147c1:  * distributed with this work for additional information
1:b6147c1:  * regarding copyright ownership.  The ASF licenses this file
1:b6147c1:  * to you under the Apache License, Version 2.0 (the
1:b6147c1:  * "License"); you may not use this file except in compliance
1:b6147c1:  * with the License.  You may obtain a copy of the License at
1:b6147c1:  *
1:b6147c1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b6147c1:  *
1:b6147c1:  * Unless required by applicable law or agreed to in writing,
1:b6147c1:  * software distributed under the License is distributed on an
1:b6147c1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b6147c1:  * KIND, either express or implied.  See the License for the
1:b6147c1:  * specific language governing permissions and limitations
1:b6147c1:  * under the License.
1:b6147c1:  */
1:c3b7669: package org.apache.cassandra.metrics;
1:c3b7669: 
1:c3b7669: 
1:c3b7669: import java.util.concurrent.TimeUnit;
1:c3b7669: import java.util.concurrent.atomic.AtomicLong;
1:c3b7669: 
1:c3b7669: import static java.lang.Math.exp;
1:8896a70: import com.codahale.metrics.Clock;
1:c3b7669: 
1:c3b7669: /**
1:c3b7669:  * A meter metric which measures mean throughput as well as fifteen-minute and two-hour
1:c3b7669:  * exponentially-weighted moving average throughputs.
1:c3b7669:  *
1:c3b7669:  * This is based heavily on the Meter and EWMA classes from codahale/yammer metrics.
1:c3b7669:  *
1:c3b7669:  * @see <a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a>
1:c3b7669:  */
1:c3b7669: public class RestorableMeter
1:c3b7669: {
1:c3b7669:     private static final long TICK_INTERVAL = TimeUnit.SECONDS.toNanos(5);
1:c3b7669:     private static final double NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);
1:c3b7669: 
1:c3b7669:     private final RestorableEWMA m15Rate;
1:c3b7669:     private final RestorableEWMA m120Rate;
1:c3b7669: 
1:c3b7669:     private final AtomicLong count = new AtomicLong();
1:c3b7669:     private final long startTime;
1:c3b7669:     private final AtomicLong lastTick;
1:c3b7669:     private final Clock clock = Clock.defaultClock();
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Creates a new, uninitialized RestorableMeter.
1:c3b7669:      */
1:68d2526:     public RestorableMeter()
1:68d2526:     {
1:c3b7669:         this.m15Rate = new RestorableEWMA(TimeUnit.MINUTES.toSeconds(15));
1:c3b7669:         this.m120Rate = new RestorableEWMA(TimeUnit.MINUTES.toSeconds(120));
1:8896a70:         this.startTime = this.clock.getTick();
1:c3b7669:         this.lastTick = new AtomicLong(startTime);
2:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Restores a RestorableMeter from the last seen 15m and 2h rates.
1:c3b7669:      * @param lastM15Rate the last-seen 15m rate, in terms of events per second
1:c3b7669:      * @param lastM120Rate the last seen 2h rate, in terms of events per second
1:c3b7669:      */
1:68d2526:     public RestorableMeter(double lastM15Rate, double lastM120Rate)
1:68d2526:     {
1:c3b7669:         this.m15Rate = new RestorableEWMA(lastM15Rate, TimeUnit.MINUTES.toSeconds(15));
1:c3b7669:         this.m120Rate = new RestorableEWMA(lastM120Rate, TimeUnit.MINUTES.toSeconds(120));
1:8896a70:         this.startTime = this.clock.getTick();
1:c3b7669:         this.lastTick = new AtomicLong(startTime);
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Updates the moving averages as needed.
1:c3b7669:      */
1:68d2526:     private void tickIfNecessary()
1:68d2526:     {
1:c3b7669:         final long oldTick = lastTick.get();
1:8896a70:         final long newTick = clock.getTick();
1:c3b7669:         final long age = newTick - oldTick;
1:68d2526:         if (age > TICK_INTERVAL)
1:68d2526:         {
1:c3b7669:             final long newIntervalStartTick = newTick - age % TICK_INTERVAL;
1:68d2526:             if (lastTick.compareAndSet(oldTick, newIntervalStartTick))
1:68d2526:             {
1:c3b7669:                 final long requiredTicks = age / TICK_INTERVAL;
1:68d2526:                 for (long i = 0; i < requiredTicks; i++)
1:68d2526:                 {
1:c3b7669:                     m15Rate.tick();
1:c3b7669:                     m120Rate.tick();
1:c3b7669:                 }
1:c3b7669:             }
1:c3b7669:         }
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Mark the occurrence of an event.
1:c3b7669:      */
1:68d2526:     public void mark()
1:68d2526:     {
1:c3b7669:         mark(1);
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Mark the occurrence of a given number of events.
1:c3b7669:      *
1:c3b7669:      * @param n the number of events
1:c3b7669:      */
1:68d2526:     public void mark(long n)
1:68d2526:     {
1:c3b7669:         tickIfNecessary();
1:c3b7669:         count.addAndGet(n);
1:c3b7669:         m15Rate.update(n);
1:c3b7669:         m120Rate.update(n);
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Returns the 15-minute rate in terms of events per second.  This carries the previous rate when restored.
1:c3b7669:      */
1:68d2526:     public double fifteenMinuteRate()
1:68d2526:     {
1:c3b7669:         tickIfNecessary();
1:c3b7669:         return m15Rate.rate();
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Returns the two-hour rate in terms of events per second.  This carries the previous rate when restored.
1:c3b7669:      */
1:68d2526:     public double twoHourRate()
1:68d2526:     {
1:c3b7669:         tickIfNecessary();
1:c3b7669:         return m120Rate.rate();
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * The total number of events that have occurred since this object was created.  Note that the previous count
1:c3b7669:      * is *not* carried over when a RestorableMeter is restored.
1:c3b7669:      */
1:68d2526:     public long count()
1:68d2526:     {
1:c3b7669:         return count.get();
1:c3b7669:     }
1:c3b7669: 
1:c3b7669:     /**
1:c3b7669:      * Returns the mean rate of events per second since this object was created.  Note that the mean rate
1:c3b7669:      * does *not* carry over when a RestorableMeter is restored, so the mean rate is only a measure since
1:c3b7669:      * this object was created.
1:c3b7669:      */
1:68d2526:     public double meanRate()
1:68d2526:     {
1:68d2526:         if (count() == 0)
1:68d2526:         {
1:c3b7669:             return 0.0;
2:c3b7669:         } else {
1:8896a70:             final long elapsed = (clock.getTick() - startTime);
1:c3b7669:             return (count() / (double) elapsed) * NANOS_PER_SECOND;
1:c3b7669:         }
1:c3b7669:     }
1:c3b7669: 
1:68d2526:     static class RestorableEWMA
1:68d2526:     {
1:c3b7669:         private volatile boolean initialized = false;
1:c3b7669:         private volatile double rate = 0.0; // average rate in terms of events per nanosecond
1:c3b7669: 
1:c3b7669:         private final AtomicLong uncounted = new AtomicLong();
1:c3b7669:         private final double alpha, interval;
1:c3b7669: 
1:c3b7669:         /**
1:c3b7669:          * Create a new, uninitialized EWMA with a given window.
1:c3b7669:          *
1:c3b7669:          * @param windowInSeconds the window of time this EWMA should average over, expressed as a number of seconds
1:c3b7669:          */
1:68d2526:         public RestorableEWMA(long windowInSeconds)
1:68d2526:         {
1:c3b7669:             this.alpha = 1 - exp((-TICK_INTERVAL / NANOS_PER_SECOND) / windowInSeconds);
1:1fab7b7:             this.interval = TICK_INTERVAL;
1:c3b7669:         }
1:c3b7669: 
1:c3b7669:         /**
1:c3b7669:          * Restore an EWMA from a last-seen rate and a given window.
1:c3b7669:          *
1:c3b7669:          * @param intervalInSeconds the window of time this EWMA should average over, expressed as a number of seconds
1:c3b7669:          */
1:68d2526:         public RestorableEWMA(double lastRate, long intervalInSeconds)
1:68d2526:         {
1:c3b7669:             this(intervalInSeconds);
1:c3b7669:             this.rate = lastRate / NANOS_PER_SECOND;
1:c3b7669:             this.initialized = true;
1:c3b7669:         }
1:c3b7669: 
1:c3b7669:         /**
1:c3b7669:          * Update the moving average with a new value.
1:c3b7669:          */
1:68d2526:         public void update(long n)
1:68d2526:         {
1:c3b7669:             uncounted.addAndGet(n);
1:c3b7669:         }
1:c3b7669: 
1:c3b7669:         /**
1:c3b7669:          * Mark the passage of time and decay the current rate accordingly.
1:c3b7669:          */
1:68d2526:         public void tick()
1:68d2526:         {
1:c3b7669:             final long count = uncounted.getAndSet(0);
1:c3b7669:             final double instantRate = count / interval;
1:68d2526:             if (initialized)
1:68d2526:             {
1:c3b7669:                 rate += (alpha * (instantRate - rate));
1:68d2526:             }
1:68d2526:             else
1:68d2526:             {
1:c3b7669:                 rate = instantRate;
1:c3b7669:                 initialized = true;
1:c3b7669:             }
1:c3b7669:         }
1:c3b7669: 
1:c3b7669:         /**
1:c3b7669:          * Returns the rate in terms of events per second.
1:c3b7669:          */
1:68d2526:         public double rate()
1:68d2526:         {
1:c3b7669:             return rate * NANOS_PER_SECOND;
1:b6147c1:         }
1:c3b7669:     }
1:c3b7669: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public RestorableMeter()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public RestorableMeter(double lastM15Rate, double lastM120Rate)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     private void tickIfNecessary()
1:     {
1:         if (age > TICK_INTERVAL)
1:         {
1:             if (lastTick.compareAndSet(oldTick, newIntervalStartTick))
1:             {
1:                 for (long i = 0; i < requiredTicks; i++)
1:                 {
/////////////////////////////////////////////////////////////////////////
1:     public void mark()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public void mark(long n)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public double fifteenMinuteRate()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public double twoHourRate()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public long count()
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public double meanRate()
1:     {
1:         if (count() == 0)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     static class RestorableEWMA
1:     {
/////////////////////////////////////////////////////////////////////////
1:         public RestorableEWMA(long windowInSeconds)
1:         {
/////////////////////////////////////////////////////////////////////////
1:         public RestorableEWMA(double lastRate, long intervalInSeconds)
1:         {
/////////////////////////////////////////////////////////////////////////
1:         public void update(long n)
1:         {
1:         public void tick()
1:         {
1:             if (initialized)
1:             {
1:             }
1:             else
1:             {
/////////////////////////////////////////////////////////////////////////
1:         public double rate()
1:         {
commit:1fab7b7
/////////////////////////////////////////////////////////////////////////
1:             this.interval = TICK_INTERVAL;
commit:73ef82f
/////////////////////////////////////////////////////////////////////////
0:     static class RestorableEWMA {
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Clock;
/////////////////////////////////////////////////////////////////////////
1:         this.startTime = this.clock.getTick();
/////////////////////////////////////////////////////////////////////////
1:         this.startTime = this.clock.getTick();
/////////////////////////////////////////////////////////////////////////
1:         final long newTick = clock.getTick();
/////////////////////////////////////////////////////////////////////////
1:             final long elapsed = (clock.getTick() - startTime);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:b6147c1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:c3b7669
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.core.Clock;
1: 
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import static java.lang.Math.exp;
1: 
1: /**
1:  * A meter metric which measures mean throughput as well as fifteen-minute and two-hour
1:  * exponentially-weighted moving average throughputs.
1:  *
1:  * This is based heavily on the Meter and EWMA classes from codahale/yammer metrics.
1:  *
1:  * @see <a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a>
1:  */
1: public class RestorableMeter
1: {
1:     private static final long TICK_INTERVAL = TimeUnit.SECONDS.toNanos(5);
1:     private static final double NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);
1: 
1:     private final RestorableEWMA m15Rate;
1:     private final RestorableEWMA m120Rate;
1: 
1:     private final AtomicLong count = new AtomicLong();
1:     private final long startTime;
1:     private final AtomicLong lastTick;
1:     private final Clock clock = Clock.defaultClock();
1: 
1:     /**
1:      * Creates a new, uninitialized RestorableMeter.
1:      */
0:     public RestorableMeter() {
1:         this.m15Rate = new RestorableEWMA(TimeUnit.MINUTES.toSeconds(15));
1:         this.m120Rate = new RestorableEWMA(TimeUnit.MINUTES.toSeconds(120));
0:         this.startTime = this.clock.tick();
1:         this.lastTick = new AtomicLong(startTime);
1:     }
1: 
1:     /**
1:      * Restores a RestorableMeter from the last seen 15m and 2h rates.
1:      * @param lastM15Rate the last-seen 15m rate, in terms of events per second
1:      * @param lastM120Rate the last seen 2h rate, in terms of events per second
1:      */
0:     public RestorableMeter(double lastM15Rate, double lastM120Rate) {
1:         this.m15Rate = new RestorableEWMA(lastM15Rate, TimeUnit.MINUTES.toSeconds(15));
1:         this.m120Rate = new RestorableEWMA(lastM120Rate, TimeUnit.MINUTES.toSeconds(120));
0:         this.startTime = this.clock.tick();
1:         this.lastTick = new AtomicLong(startTime);
1:     }
1: 
1:     /**
1:      * Updates the moving averages as needed.
1:      */
0:     private void tickIfNecessary() {
1:         final long oldTick = lastTick.get();
0:         final long newTick = clock.tick();
1:         final long age = newTick - oldTick;
0:         if (age > TICK_INTERVAL) {
1:             final long newIntervalStartTick = newTick - age % TICK_INTERVAL;
0:             if (lastTick.compareAndSet(oldTick, newIntervalStartTick)) {
1:                 final long requiredTicks = age / TICK_INTERVAL;
0:                 for (long i = 0; i < requiredTicks; i++) {
1:                     m15Rate.tick();
1:                     m120Rate.tick();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Mark the occurrence of an event.
1:      */
0:     public void mark() {
1:         mark(1);
1:     }
1: 
1:     /**
1:      * Mark the occurrence of a given number of events.
1:      *
1:      * @param n the number of events
1:      */
0:     public void mark(long n) {
1:         tickIfNecessary();
1:         count.addAndGet(n);
1:         m15Rate.update(n);
1:         m120Rate.update(n);
1:     }
1: 
1:     /**
1:      * Returns the 15-minute rate in terms of events per second.  This carries the previous rate when restored.
1:      */
0:     public double fifteenMinuteRate() {
1:         tickIfNecessary();
1:         return m15Rate.rate();
1:     }
1: 
1:     /**
1:      * Returns the two-hour rate in terms of events per second.  This carries the previous rate when restored.
1:      */
0:     public double twoHourRate() {
1:         tickIfNecessary();
1:         return m120Rate.rate();
1:     }
1: 
1:     /**
1:      * The total number of events that have occurred since this object was created.  Note that the previous count
1:      * is *not* carried over when a RestorableMeter is restored.
1:      */
0:     public long count() {
1:         return count.get();
1:     }
1: 
1:     /**
1:      * Returns the mean rate of events per second since this object was created.  Note that the mean rate
1:      * does *not* carry over when a RestorableMeter is restored, so the mean rate is only a measure since
1:      * this object was created.
1:      */
0:     public double meanRate() {
0:         if (count() == 0) {
1:             return 0.0;
1:         } else {
0:             final long elapsed = (clock.tick() - startTime);
1:             return (count() / (double) elapsed) * NANOS_PER_SECOND;
1:         }
1:     }
1: 
0:     class RestorableEWMA {
1:         private volatile boolean initialized = false;
1:         private volatile double rate = 0.0; // average rate in terms of events per nanosecond
1: 
1:         private final AtomicLong uncounted = new AtomicLong();
1:         private final double alpha, interval;
1: 
1:         /**
1:          * Create a new, uninitialized EWMA with a given window.
1:          *
1:          * @param windowInSeconds the window of time this EWMA should average over, expressed as a number of seconds
1:          */
0:         public RestorableEWMA(long windowInSeconds) {
1:             this.alpha = 1 - exp((-TICK_INTERVAL / NANOS_PER_SECOND) / windowInSeconds);
0:             this.interval = (double) TICK_INTERVAL;
1:         }
1: 
1:         /**
1:          * Restore an EWMA from a last-seen rate and a given window.
1:          *
1:          * @param intervalInSeconds the window of time this EWMA should average over, expressed as a number of seconds
1:          */
0:         public RestorableEWMA(double lastRate, long intervalInSeconds) {
1:             this(intervalInSeconds);
1:             this.rate = lastRate / NANOS_PER_SECOND;
1:             this.initialized = true;
1:         }
1: 
1:         /**
1:          * Update the moving average with a new value.
1:          */
0:         public void update(long n) {
1:             uncounted.addAndGet(n);
1:         }
1: 
1:         /**
1:          * Mark the passage of time and decay the current rate accordingly.
1:          */
0:         public void tick() {
1:             final long count = uncounted.getAndSet(0);
1:             final double instantRate = count / interval;
0:             if (initialized) {
1:                 rate += (alpha * (instantRate - rate));
1:             } else {
1:                 rate = instantRate;
1:                 initialized = true;
1:             }
1:         }
1: 
1:         /**
1:          * Returns the rate in terms of events per second.
1:          */
0:         public double rate() {
1:             return rate * NANOS_PER_SECOND;
1:         }
1:     }
1: }
============================================================================