1:a991b64: /*
1:129d80a:  * Licensed to the Apache Software Foundation (ASF) under one
1:129d80a:  * or more contributor license agreements.  See the NOTICE file
1:129d80a:  * distributed with this work for additional information
1:129d80a:  * regarding copyright ownership.  The ASF licenses this file
1:129d80a:  * to you under the Apache License, Version 2.0 (the
1:129d80a:  * "License"); you may not use this file except in compliance
1:129d80a:  * with the License.  You may obtain a copy of the License at
1:129d80a:  *
1:129d80a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:129d80a:  *
1:129d80a:  * Unless required by applicable law or agreed to in writing, software
1:129d80a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:129d80a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:129d80a:  * See the License for the specific language governing permissions and
1:129d80a:  * limitations under the License.
1:129d80a:  */
1:129d80a: package org.apache.cassandra.db.compaction;
1:786672e: 
1:786672e: import java.nio.ByteBuffer;
1:a991b64: import java.util.ArrayList;
1:a991b64: import java.util.Collections;
1:a991b64: import java.util.HashMap;
1:a991b64: import java.util.List;
1:a991b64: import java.util.Map;
1:786672e: 
1:d2a3827: import org.junit.BeforeClass;
1:129d80a: import org.junit.Test;
1:786672e: 
1:786672e: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.db.ColumnFamilyStore;
1:a991b64: import org.apache.cassandra.db.Keyspace;
1:a991b64: import org.apache.cassandra.db.RowUpdateBuilder;
1:786672e: import org.apache.cassandra.exceptions.ConfigurationException;
1:a991b64: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:786672e: import org.apache.cassandra.metrics.RestorableMeter;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:129d80a: import org.apache.cassandra.utils.Pair;
1:786672e: 
1:786672e: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getBuckets;
1:786672e: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.mostInterestingBucket;
1:786672e: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.trimToThresholdWithHotness;
1:786672e: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.validateOptions;
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.assertTrue;
1:a991b64: import static org.junit.Assert.fail;
1:786672e: 
1:d2a3827: public class SizeTieredCompactionStrategyTest
1:786672e: {
1:d2a3827:     public static final String KEYSPACE1 = "SizeTieredCompactionStrategyTest";
1:d2a3827:     private static final String CF_STANDARD1 = "Standard1";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws ConfigurationException
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:b31845c:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:d2a3827:     }
1:786672e: 
1:786672e:     @Test
1:786672e:     public void testOptionsValidation() throws ConfigurationException
1:786672e:     {
1:786672e:         Map<String, String> options = new HashMap<>();
1:786672e:         options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "0.5");
1:786672e:         options.put(SizeTieredCompactionStrategyOptions.BUCKET_HIGH_KEY, "1.5");
1:786672e:         options.put(SizeTieredCompactionStrategyOptions.MIN_SSTABLE_SIZE_KEY, "10000");
1:786672e:         Map<String, String> unvalidated = validateOptions(options);
1:786672e:         assertTrue(unvalidated.isEmpty());
1:786672e: 
3:786672e:         try
1:786672e:         {
1:786672e:             options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "1000.0");
3:786672e:             validateOptions(options);
1:786672e:             fail("bucket_low greater than bucket_high should be rejected");
1:362cc05:         }
2:786672e:         catch (ConfigurationException e)
1:786672e:         {
1:786672e:             options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "0.5");
1:786672e:         }
1:786672e: 
1:786672e:         options.put("bad_option", "1.0");
1:786672e:         unvalidated = validateOptions(options);
1:786672e:         assertTrue(unvalidated.containsKey("bad_option"));
1:786672e:     }
1:786672e: 
1:786672e:     @Test
1:129d80a:     public void testGetBuckets()
1:786672e:     {
1:129d80a:         List<Pair<String, Long>> pairs = new ArrayList<Pair<String, Long>>();
1:129d80a:         String[] strings = { "a", "bbbb", "cccccccc", "cccccccc", "bbbb", "a" };
1:129d80a:         for (String st : strings)
1:786672e:         {
1:7af7eb3:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
1:129d80a:             pairs.add(pair);
1:786672e:         }
1:786672e: 
1:786672e:         List<List<String>> buckets = getBuckets(pairs, 1.5, 0.5, 2);
1:129d80a:         assertEquals(3, buckets.size());
1:786672e: 
1:129d80a:         for (List<String> bucket : buckets)
1:786672e:         {
1:129d80a:             assertEquals(2, bucket.size());
1:129d80a:             assertEquals(bucket.get(0).length(), bucket.get(1).length());
1:129d80a:             assertEquals(bucket.get(0).charAt(0), bucket.get(1).charAt(0));
1:786672e:         }
1:786672e: 
1:129d80a:         pairs.clear();
1:129d80a:         buckets.clear();
1:786672e: 
1:129d80a:         String[] strings2 = { "aaa", "bbbbbbbb", "aaa", "bbbbbbbb", "bbbbbbbb", "aaa" };
1:129d80a:         for (String st : strings2)
1:786672e:         {
1:7af7eb3:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
1:129d80a:             pairs.add(pair);
1:786672e:         }
1:786672e: 
1:786672e:         buckets = getBuckets(pairs, 1.5, 0.5, 2);
1:129d80a:         assertEquals(2, buckets.size());
1:786672e: 
1:129d80a:         for (List<String> bucket : buckets)
1:9ae3987:         {
1:129d80a:             assertEquals(3, bucket.size());
1:129d80a:             assertEquals(bucket.get(0).charAt(0), bucket.get(1).charAt(0));
1:129d80a:             assertEquals(bucket.get(1).charAt(0), bucket.get(2).charAt(0));
1:786672e:         }
1:786672e: 
1:129d80a:         // Test the "min" functionality
1:129d80a:         pairs.clear();
1:129d80a:         buckets.clear();
1:786672e: 
1:129d80a:         String[] strings3 = { "aaa", "bbbbbbbb", "aaa", "bbbbbbbb", "bbbbbbbb", "aaa" };
1:129d80a:         for (String st : strings3)
6:129d80a:         {
1:7af7eb3:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
1:129d80a:             pairs.add(pair);
1:786672e:         }
1:786672e: 
1:786672e:         buckets = getBuckets(pairs, 1.5, 0.5, 10);
1:129d80a:         assertEquals(1, buckets.size());
1:786672e:     }
1:786672e: 
1:786672e:     @Test
1:786672e:     public void testPrepBucket() throws Exception
1:786672e:     {
1:d2a3827:         String ksname = KEYSPACE1;
2:786672e:         String cfname = "Standard1";
2:786672e:         Keyspace keyspace = Keyspace.open(ksname);
2:786672e:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);
2:786672e:         cfs.truncateBlocking();
2:786672e:         cfs.disableAutoCompaction();
1:786672e: 
2:786672e:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1:786672e: 
1:786672e:         // create 3 sstables
1:786672e:         int numSSTables = 3;
2:786672e:         for (int r = 0; r < numSSTables; r++)
1:786672e:         {
1:a991b64:             String key = String.valueOf(r);
1:a991b64:             new RowUpdateBuilder(cfs.metadata, 0, key)
1:a991b64:                 .clustering("column").add("val", value)
1:a991b64:                 .build().applyUnsafe();
3:786672e:             cfs.forceBlockingFlush();
1:786672e:         }
1:786672e:         cfs.forceBlockingFlush();
1:786672e: 
1:ad8cad7:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getLiveSSTables());
1:786672e:         Pair<List<SSTableReader>, Double> bucket;
1:786672e: 
1:786672e:         List<SSTableReader> interestingBucket = mostInterestingBucket(Collections.singletonList(sstrs.subList(0, 2)), 4, 32);
1:786672e:         assertTrue("nothing should be returned when all buckets are below the min threshold", interestingBucket.isEmpty());
1:786672e: 
1:61384c5:         sstrs.get(0).overrideReadMeter(new RestorableMeter(100.0, 100.0));
1:61384c5:         sstrs.get(1).overrideReadMeter(new RestorableMeter(200.0, 200.0));
1:61384c5:         sstrs.get(2).overrideReadMeter(new RestorableMeter(300.0, 300.0));
1:786672e: 
1:786672e:         long estimatedKeys = sstrs.get(0).estimatedKeys();
1:786672e: 
1:786672e:         // if we have more than the max threshold, the coldest should be dropped
1:786672e:         bucket = trimToThresholdWithHotness(sstrs, 2);
1:786672e:         assertEquals("one bucket should have been dropped", 2, bucket.left.size());
1:786672e:         double expectedBucketHotness = (200.0 + 300.0) / estimatedKeys;
1:786672e:         assertEquals(String.format("bucket hotness (%f) should be close to %f", bucket.right, expectedBucketHotness),
1:786672e:                      expectedBucketHotness, bucket.right, 1.0);
1:786672e:     }
1:786672e: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(ksname, key.key);
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(ksname, key.key);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ad8cad7
/////////////////////////////////////////////////////////////////////////
1:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getLiveSSTables());
commit:02c3489
commit:61384c5
/////////////////////////////////////////////////////////////////////////
1:         sstrs.get(0).overrideReadMeter(new RestorableMeter(100.0, 100.0));
1:         sstrs.get(1).overrideReadMeter(new RestorableMeter(200.0, 200.0));
1:         sstrs.get(2).overrideReadMeter(new RestorableMeter(300.0, 300.0));
/////////////////////////////////////////////////////////////////////////
0:             sstr.overrideReadMeter(null);
0:             sstr.overrideReadMeter(new RestorableMeter(0.0, 0.0));
0:         sstrs.get(0).overrideReadMeter(new RestorableMeter(1000.0, 1000.0));
0:         assertEquals(1000.0, filtered.get(0).getReadMeter().twoHourRate(), 0.5);
0:             sstr.overrideReadMeter(new RestorableMeter(0.0, 0.0));
0:         sstrs.get(0).overrideReadMeter(new RestorableMeter(97.0, 97.0));
0:         sstrs.get(1).overrideReadMeter(new RestorableMeter(1.0, 1.0));
0:         sstrs.get(2).overrideReadMeter(new RestorableMeter(1.0, 1.0));
0:         sstrs.get(3).overrideReadMeter(new RestorableMeter(1.0, 1.0));
0:         assertEquals(98.0, filtered.get(0).getReadMeter().twoHourRate() + filtered.get(1).getReadMeter().twoHourRate(), 0.5);
0:             sstr.overrideReadMeter(new RestorableMeter(1.0, 1.0));
0:             sstr.overrideReadMeter(new RestorableMeter(1.0, 1.0));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:             String key = String.valueOf(r);
1:             new RowUpdateBuilder(cfs.metadata, 0, key)
1:                 .clustering("column").add("val", value)
1:                 .build().applyUnsafe();
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:             rm.add(cfname, Util.cellname("column"), value, 0);
/////////////////////////////////////////////////////////////////////////
0:             rm.add(cfname, Util.cellname("column"), value, 0);
/////////////////////////////////////////////////////////////////////////
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:b5b1af7
commit:f6d0cf3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:b4b1bdd
commit:9efa017
/////////////////////////////////////////////////////////////////////////
0:         filtered = filterColdSSTables(sstrs, 0.05, 0);
0:         filtered = filterColdSSTables(sstrs, 0.05, 0);
0:         filtered = filterColdSSTables(sstrs, 0.05, 0);
/////////////////////////////////////////////////////////////////////////
0:         filtered = filterColdSSTables(sstrs, 0.025, 0);
0:         filtered = filterColdSSTables(sstrs, 0.0, 0);
0:         filtered = filterColdSSTables(sstrs, 1.0, 0);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.sstable.format.SSTableReader;
/////////////////////////////////////////////////////////////////////////
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:             rm.applyUnsafe();
/////////////////////////////////////////////////////////////////////////
0:             rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.locator.SimpleStrategy;
/////////////////////////////////////////////////////////////////////////
1: public class SizeTieredCompactionStrategyTest
1:     public static final String KEYSPACE1 = "SizeTieredCompactionStrategyTest";
1:     private static final String CF_STANDARD1 = "Standard1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
0:         Map<String, String> leveledOptions = new HashMap<>();
0:         leveledOptions.put("sstable_size_in_mb", "1");
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1)
0:                                                 .compactionStrategyOptions(leveledOptions));
1:     }
/////////////////////////////////////////////////////////////////////////
1:         String ksname = KEYSPACE1;
/////////////////////////////////////////////////////////////////////////
0:         String ksname = KEYSPACE1;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(ksname, key.getKey());
/////////////////////////////////////////////////////////////////////////
0:             Mutation rm = new Mutation(ksname, key.getKey());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:eb6e4d0
/////////////////////////////////////////////////////////////////////////
0:         options.put(SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY, "0.35");
/////////////////////////////////////////////////////////////////////////
0:             options.put(SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY, "-0.5");
0:             fail(String.format("Negative %s should be rejected", SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY));
0:             options.put(SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY, "10.0");
0:             fail(String.format("%s > 1.0 should be rejected", SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY));
0:             options.put(SizeTieredCompactionStrategyOptions.COLD_READS_TO_OMIT_KEY, "0.25");
commit:786672e
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: import java.util.*;
1: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.Util;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.db.RowMutation;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.io.sstable.SSTableReader;
1: import org.apache.cassandra.metrics.RestorableMeter;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getBuckets;
1: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.mostInterestingBucket;
1: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.trimToThresholdWithHotness;
0: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.filterColdSSTables;
1: import static org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.validateOptions;
0: import static org.junit.Assert.*;
1: 
0: public class SizeTieredCompactionStrategyTest extends SchemaLoader
1: 
1:     @Test
1:     public void testOptionsValidation() throws ConfigurationException
1:     {
1:         Map<String, String> options = new HashMap<>();
0:         options.put(SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY, "0.35");
1:         options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "0.5");
1:         options.put(SizeTieredCompactionStrategyOptions.BUCKET_HIGH_KEY, "1.5");
1:         options.put(SizeTieredCompactionStrategyOptions.MIN_SSTABLE_SIZE_KEY, "10000");
1:         Map<String, String> unvalidated = validateOptions(options);
1:         assertTrue(unvalidated.isEmpty());
1: 
1:         try
1:         {
0:             options.put(SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY, "-0.5");
1:             validateOptions(options);
0:             fail(String.format("Negative %s should be rejected", SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY));
1:         }
0:         catch (ConfigurationException e) {}
1: 
1:         try
1:         {
0:             options.put(SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY, "10.0");
1:             validateOptions(options);
0:             fail(String.format("%s > 1.0 should be rejected", SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY));
1:         }
1:         catch (ConfigurationException e)
1:         {
0:             options.put(SizeTieredCompactionStrategyOptions.MAX_COLD_READS_RATIO_KEY, "0.25");
1:         }
1: 
1:         try
1:         {
1:             options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "1000.0");
1:             validateOptions(options);
1:             fail("bucket_low greater than bucket_high should be rejected");
1:         }
1:         catch (ConfigurationException e)
1:         {
1:             options.put(SizeTieredCompactionStrategyOptions.BUCKET_LOW_KEY, "0.5");
1:         }
1: 
1:         options.put("bad_option", "1.0");
1:         unvalidated = validateOptions(options);
1:         assertTrue(unvalidated.containsKey("bad_option"));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         List<List<String>> buckets = getBuckets(pairs, 1.5, 0.5, 2);
/////////////////////////////////////////////////////////////////////////
1:         buckets = getBuckets(pairs, 1.5, 0.5, 2);
/////////////////////////////////////////////////////////////////////////
1:         buckets = getBuckets(pairs, 1.5, 0.5, 10);
1: 
1:     @Test
1:     public void testPrepBucket() throws Exception
1:     {
0:         String ksname = "Keyspace1";
1:         String cfname = "Standard1";
1:         Keyspace keyspace = Keyspace.open(ksname);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);
1:         cfs.truncateBlocking();
1:         cfs.disableAutoCompaction();
1: 
1:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1: 
1:         // create 3 sstables
1:         int numSSTables = 3;
1:         for (int r = 0; r < numSSTables; r++)
1:         {
0:             DecoratedKey key = Util.dk(String.valueOf(r));
0:             RowMutation rm = new RowMutation(ksname, key.key);
0:             rm.add(cfname, ByteBufferUtil.bytes("column"), value, 0);
0:             rm.apply();
1:             cfs.forceBlockingFlush();
1:         }
1:         cfs.forceBlockingFlush();
1: 
0:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getSSTables());
1:         Pair<List<SSTableReader>, Double> bucket;
1: 
1:         List<SSTableReader> interestingBucket = mostInterestingBucket(Collections.singletonList(sstrs.subList(0, 2)), 4, 32);
1:         assertTrue("nothing should be returned when all buckets are below the min threshold", interestingBucket.isEmpty());
1: 
0:         sstrs.get(0).readMeter = new RestorableMeter(100.0, 100.0);
0:         sstrs.get(1).readMeter = new RestorableMeter(200.0, 200.0);
0:         sstrs.get(2).readMeter = new RestorableMeter(300.0, 300.0);
1: 
1:         long estimatedKeys = sstrs.get(0).estimatedKeys();
1: 
1:         // if we have more than the max threshold, the coldest should be dropped
1:         bucket = trimToThresholdWithHotness(sstrs, 2);
1:         assertEquals("one bucket should have been dropped", 2, bucket.left.size());
1:         double expectedBucketHotness = (200.0 + 300.0) / estimatedKeys;
1:         assertEquals(String.format("bucket hotness (%f) should be close to %f", bucket.right, expectedBucketHotness),
1:                      expectedBucketHotness, bucket.right, 1.0);
1:     }
1: 
1:     @Test
0:     public void testFilterColdSSTables() throws Exception
1:     {
0:         String ksname = "Keyspace1";
1:         String cfname = "Standard1";
1:         Keyspace keyspace = Keyspace.open(ksname);
1:         ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);
1:         cfs.truncateBlocking();
1:         cfs.disableAutoCompaction();
1: 
1:         ByteBuffer value = ByteBuffer.wrap(new byte[100]);
1: 
0:         // create 10 sstables
0:         int numSSTables = 10;
1:         for (int r = 0; r < numSSTables; r++)
1:         {
0:             DecoratedKey key = Util.dk(String.valueOf(r));
0:             RowMutation rm = new RowMutation(ksname, key.key);
0:             rm.add(cfname, ByteBufferUtil.bytes("column"), value, 0);
0:             rm.apply();
1:             cfs.forceBlockingFlush();
1:         }
1:         cfs.forceBlockingFlush();
1: 
0:         List<SSTableReader> filtered;
0:         List<SSTableReader> sstrs = new ArrayList<>(cfs.getSSTables());
1: 
0:         for (SSTableReader sstr : sstrs)
0:             sstr.readMeter = null;
0:         filtered = filterColdSSTables(sstrs, 0.05);
0:         assertEquals("when there are no read meters, no sstables should be filtered", sstrs.size(), filtered.size());
1: 
0:         for (SSTableReader sstr : sstrs)
0:             sstr.readMeter = new RestorableMeter(0.0, 0.0);
0:         filtered = filterColdSSTables(sstrs, 0.05);
0:         assertEquals("when all read meters are zero, no sstables should be filtered", sstrs.size(), filtered.size());
1: 
0:         // leave all read rates at 0 besides one
0:         sstrs.get(0).readMeter = new RestorableMeter(1000.0, 1000.0);
0:         filtered = filterColdSSTables(sstrs, 0.05);
0:         assertEquals("there should only be one hot sstable", 1, filtered.size());
0:         assertEquals(1000.0, filtered.get(0).readMeter.twoHourRate(), 0.5);
1: 
0:         // the total read rate is 100, and we'll set a threshold of 2.5%, so two of the sstables with read
0:         // rate 1.0 should be ignored, but not the third
0:         for (SSTableReader sstr : sstrs)
0:             sstr.readMeter = new RestorableMeter(0.0, 0.0);
0:         sstrs.get(0).readMeter = new RestorableMeter(97.0, 97.0);
0:         sstrs.get(1).readMeter = new RestorableMeter(1.0, 1.0);
0:         sstrs.get(2).readMeter = new RestorableMeter(1.0, 1.0);
0:         sstrs.get(3).readMeter = new RestorableMeter(1.0, 1.0);
1: 
0:         filtered = filterColdSSTables(sstrs, 0.025);
0:         assertEquals(2, filtered.size());
0:         assertEquals(98.0, filtered.get(0).readMeter.twoHourRate() + filtered.get(1).readMeter.twoHourRate(), 0.5);
1: 
0:         // make sure a threshold of 0.0 doesn't result in any sstables being filtered
0:         for (SSTableReader sstr : sstrs)
0:             sstr.readMeter = new RestorableMeter(1.0, 1.0);
0:         filtered = filterColdSSTables(sstrs, 0.0);
0:         assertEquals(sstrs.size(), filtered.size());
1: 
0:         // just for fun, set a threshold where all sstables are considered cold
0:         for (SSTableReader sstr : sstrs)
0:             sstr.readMeter = new RestorableMeter(1.0, 1.0);
0:         filtered = filterColdSSTables(sstrs, 1.0);
0:         assertTrue(filtered.isEmpty());
1:     }
1: }
commit:75d5639
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import static org.junit.Assert.assertEquals;
0: 
0: public class SizeTieredCompactionStrategyTest
/////////////////////////////////////////////////////////////////////////
0:         List<List<String>> buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 1.5, 0.5, 2);
/////////////////////////////////////////////////////////////////////////
0:         buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 1.5, 0.5, 2);
/////////////////////////////////////////////////////////////////////////
0:         buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 1.5, 0.5, 10);
commit:7af7eb3
/////////////////////////////////////////////////////////////////////////
1:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
/////////////////////////////////////////////////////////////////////////
1:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
/////////////////////////////////////////////////////////////////////////
1:             Pair<String, Long> pair = Pair.create(st, new Long(st.length()));
commit:9ae3987
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: public class SizeTieredCompactionStrategyTest
1: {
/////////////////////////////////////////////////////////////////////////
0:         List<List<String>> buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 2);
/////////////////////////////////////////////////////////////////////////
0:         buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 2);
/////////////////////////////////////////////////////////////////////////
0:         buckets = SizeTieredCompactionStrategy.getBuckets(pairs, 10); // notice the min is 10
commit:129d80a
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
0: 
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.HashMap;
0: 
1: import org.junit.Test;
0: import static org.junit.Assert.*;
0: import static org.mockito.Mockito.mock;
0: 
0: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.utils.Pair;
0: 
0: public class SizeTieredCompactionStrategyTest {
0:     @Test
1:     public void testGetBuckets()
1:     {
1:         List<Pair<String, Long>> pairs = new ArrayList<Pair<String, Long>>();
1:         String[] strings = { "a", "bbbb", "cccccccc", "cccccccc", "bbbb", "a" };
1:         for (String st : strings)
1:         {
0:             Pair<String, Long> pair = new Pair<String, Long>(st, new Long(st.length()));
1:             pairs.add(pair);
0:         }
0: 
0:         Map<String, String> emptyOptions = new HashMap<String, String>();
0:         SizeTieredCompactionStrategy strategy = new SizeTieredCompactionStrategy(mock(ColumnFamilyStore.class), emptyOptions);
0:         List<List<String>> buckets = strategy.getBuckets(pairs, 2);
1:         assertEquals(3, buckets.size());
0: 
1:         for (List<String> bucket : buckets)
1:         {
1:             assertEquals(2, bucket.size());
1:             assertEquals(bucket.get(0).length(), bucket.get(1).length());
1:             assertEquals(bucket.get(0).charAt(0), bucket.get(1).charAt(0));
0:         }
0: 
1:         pairs.clear();
1:         buckets.clear();
0: 
1:         String[] strings2 = { "aaa", "bbbbbbbb", "aaa", "bbbbbbbb", "bbbbbbbb", "aaa" };
1:         for (String st : strings2)
1:         {
0:             Pair<String, Long> pair = new Pair<String, Long>(st, new Long(st.length()));
1:             pairs.add(pair);
0:         }
0: 
0:         buckets = strategy.getBuckets(pairs, 2);
1:         assertEquals(2, buckets.size());
0: 
1:         for (List<String> bucket : buckets)
1:         {
1:             assertEquals(3, bucket.size());
1:             assertEquals(bucket.get(0).charAt(0), bucket.get(1).charAt(0));
1:             assertEquals(bucket.get(1).charAt(0), bucket.get(2).charAt(0));
0:         }
0: 
1:         // Test the "min" functionality
1:         pairs.clear();
1:         buckets.clear();
0: 
1:         String[] strings3 = { "aaa", "bbbbbbbb", "aaa", "bbbbbbbb", "bbbbbbbb", "aaa" };
1:         for (String st : strings3)
1:         {
0:             Pair<String, Long> pair = new Pair<String, Long>(st, new Long(st.length()));
1:             pairs.add(pair);
0:         }
0: 
0:         buckets = strategy.getBuckets(pairs, 10); // notice the min is 10
1:         assertEquals(1, buckets.size());
0:     }
0: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:7a2b45a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Table;
0: public class SizeTieredCompactionStrategyTest extends SchemaLoader
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamilyStore cfs = Table.open("Keyspace1").getColumnFamilyStore("Standard1");
0:         Map<String, String> opts = new HashMap<String, String>();
0:         opts.put(SizeTieredCompactionStrategy.MIN_SSTABLE_SIZE_KEY, "2");
0:         SizeTieredCompactionStrategy strategy = new SizeTieredCompactionStrategy(cfs, opts);
0:         List<List<String>> buckets = strategy.getBuckets(pairs);
/////////////////////////////////////////////////////////////////////////
0:         buckets = strategy.getBuckets(pairs);
/////////////////////////////////////////////////////////////////////////
0:         opts.put(SizeTieredCompactionStrategy.MIN_SSTABLE_SIZE_KEY, "10");
0:         strategy = new SizeTieredCompactionStrategy(cfs, opts);
0:         buckets = strategy.getBuckets(pairs); // notice the min is 10
============================================================================