1:b4133f3: /*
1:b4133f3:  * Licensed to the Apache Software Foundation (ASF) under one
1:b4133f3:  * or more contributor license agreements.  See the NOTICE file
1:b4133f3:  * distributed with this work for additional information
1:b4133f3:  * regarding copyright ownership.  The ASF licenses this file
1:b4133f3:  * to you under the Apache License, Version 2.0 (the
1:b4133f3:  * "License"); you may not use this file except in compliance
1:b4133f3:  * with the License.  You may obtain a copy of the License at
1:b4133f3:  *
1:b4133f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b4133f3:  *
1:b4133f3:  * Unless required by applicable law or agreed to in writing, software
1:b4133f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b4133f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b4133f3:  * See the License for the specific language governing permissions and
1:b4133f3:  * limitations under the License.
1:b4133f3:  */
1:b4133f3: 
1:b4133f3: package org.apache.cassandra.io.util;
1:b4133f3: 
1:b4133f3: import java.io.IOException;
1:b4133f3: 
1:b4133f3: import org.apache.cassandra.io.compress.BufferType;
1:b4133f3: import org.apache.cassandra.utils.ByteBufferUtil;
1:b4133f3: 
1:b4133f3: class ChecksummedRebufferer extends BufferManagingRebufferer
1:b4133f3: {
1:b4133f3:     private final DataIntegrityMetadata.ChecksumValidator validator;
1:b4133f3: 
1:05660a5:     @SuppressWarnings("resource") // chunk reader is closed by super::close()
1:b4133f3:     ChecksummedRebufferer(ChannelProxy channel, DataIntegrityMetadata.ChecksumValidator validator)
1:b4133f3:     {
1:b4133f3:         super(new SimpleChunkReader(channel, channel.size(), BufferType.ON_HEAP, validator.chunkSize));
1:b4133f3:         this.validator = validator;
1:b4133f3:     }
1:b4133f3: 
1:b4133f3:     @Override
1:b4133f3:     public BufferHolder rebuffer(long desiredPosition)
1:b4133f3:     {
1:b4133f3:         if (desiredPosition != offset + buffer.position())
1:b4133f3:             validator.seek(desiredPosition);
1:b4133f3: 
1:b4133f3:         // align with buffer size, as checksums were computed in chunks of buffer size each.
1:b4133f3:         offset = alignedPosition(desiredPosition);
1:b4133f3:         source.readChunk(offset, buffer);
1:b4133f3: 
1:b4133f3:         try
1:b4133f3:         {
1:b4133f3:             validator.validate(ByteBufferUtil.getArray(buffer), 0, buffer.remaining());
1:b4133f3:         }
1:b4133f3:         catch (IOException e)
1:b4133f3:         {
1:b4133f3:             throw new CorruptFileException(e, channel().filePath());
1:b4133f3:         }
1:b4133f3: 
1:b4133f3:         return this;
1:b4133f3:     }
1:b4133f3: 
1:b4133f3:     @Override
1:b4133f3:     public void close()
1:b4133f3:     {
1:b4133f3:         try
1:b4133f3:         {
1:b4133f3:             source.close();
1:b4133f3:         }
1:b4133f3:         finally
1:b4133f3:         {
1:b4133f3:             validator.close();
1:b4133f3:         }
1:b4133f3:     }
1:b4133f3: 
1:b4133f3:     @Override
1:b4133f3:     long alignedPosition(long desiredPosition)
1:b4133f3:     {
1:b4133f3:         return (desiredPosition / buffer.capacity()) * buffer.capacity();
1:b4133f3:     }
1:b4133f3: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:05660a5
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // chunk reader is closed by super::close()
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.io.compress.BufferType;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: class ChecksummedRebufferer extends BufferManagingRebufferer
1: {
1:     private final DataIntegrityMetadata.ChecksumValidator validator;
1: 
1:     ChecksummedRebufferer(ChannelProxy channel, DataIntegrityMetadata.ChecksumValidator validator)
1:     {
1:         super(new SimpleChunkReader(channel, channel.size(), BufferType.ON_HEAP, validator.chunkSize));
1:         this.validator = validator;
1:     }
1: 
1:     @Override
1:     public BufferHolder rebuffer(long desiredPosition)
1:     {
1:         if (desiredPosition != offset + buffer.position())
1:             validator.seek(desiredPosition);
1: 
1:         // align with buffer size, as checksums were computed in chunks of buffer size each.
1:         offset = alignedPosition(desiredPosition);
1:         source.readChunk(offset, buffer);
1: 
1:         try
1:         {
1:             validator.validate(ByteBufferUtil.getArray(buffer), 0, buffer.remaining());
1:         }
1:         catch (IOException e)
1:         {
1:             throw new CorruptFileException(e, channel().filePath());
1:         }
1: 
1:         return this;
1:     }
1: 
1:     @Override
1:     public void close()
1:     {
1:         try
1:         {
1:             source.close();
1:         }
1:         finally
1:         {
1:             validator.close();
1:         }
1:     }
1: 
1:     @Override
1:     long alignedPosition(long desiredPosition)
1:     {
1:         return (desiredPosition / buffer.capacity()) * buffer.capacity();
1:     }
1: }
============================================================================