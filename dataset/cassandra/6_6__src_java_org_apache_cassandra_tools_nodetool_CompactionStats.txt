1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import java.text.DecimalFormat;
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:a808769: import java.util.Map.Entry;
1:c5a8190: 
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.db.compaction.CompactionManagerMBean;
1:c5a8190: import org.apache.cassandra.db.compaction.OperationType;
1:c5a8190: import org.apache.cassandra.io.util.FileUtils;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:b6661ac: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1:c5a8190: 
1:c5a8190: import static java.lang.String.format;
1:c5a8190: 
1:c5a8190: @Command(name = "compactionstats", description = "Print statistics on compactions")
1:c5a8190: public class CompactionStats extends NodeToolCmd
1:c5a8190: {
1:c5a8190:     @Option(title = "human_readable",
1:c5a8190:             name = {"-H", "--human-readable"},
1:db68ac9:             description = "Display bytes in human readable form, i.e. KiB, MiB, GiB, TiB")
1:c5a8190:     private boolean humanReadable = false;
1:c5a8190: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:c5a8190:         CompactionManagerMBean cm = probe.getCompactionManagerProxy();
1:a808769:         Map<String, Map<String, Integer>> pendingTaskNumberByTable =
1:a808769:             (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName");
1:a808769:         int numTotalPendingTask = 0;
1:a808769:         for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet())
2:a808769:         {
1:a808769:             for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet())
1:a808769:                 numTotalPendingTask += tableEntry.getValue();
1:c5a8190:         }
1:b6661ac:         System.out.println("pending tasks: " + numTotalPendingTask);
1:a808769:         for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet())
1:c5a8190:         {
1:a808769:             String ksName = ksEntry.getKey();
1:a808769:             for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet())
1:a808769:             {
1:a808769:                 String tableName = tableEntry.getKey();
1:a808769:                 int pendingTaskCount = tableEntry.getValue();
1:c5a8190: 
1:b6661ac:                 System.out.println("- " + ksName + '.' + tableName + ": " + pendingTaskCount);
1:c5a8190:             }
1:c5a8190:         }
1:a808769:         System.out.println();
1:47d3b7e:         reportCompactionTable(cm.getCompactions(), probe.getCompactionThroughput(), humanReadable);
1:c5a8190:     }
1:c5a8190: 
1:47d3b7e:     public static void reportCompactionTable(List<Map<String,String>> compactions, int compactionThroughput, boolean humanReadable)
1:47d3b7e:     {
1:c5a8190:         if (!compactions.isEmpty())
1:c5a8190:         {
1:a8743c6:             long remainingBytes = 0;
1:a8743c6:             TableBuilder table = new TableBuilder();
1:a8743c6: 
1:b6661ac:             table.add("id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress");
1:c5a8190:             for (Map<String, String> c : compactions)
1:c5a8190:             {
1:c5a8190:                 long total = Long.parseLong(c.get("total"));
1:c5a8190:                 long completed = Long.parseLong(c.get("completed"));
1:c5a8190:                 String taskType = c.get("taskType");
1:c5a8190:                 String keyspace = c.get("keyspace");
1:c5a8190:                 String columnFamily = c.get("columnfamily");
1:c5a8190:                 String completedStr = humanReadable ? FileUtils.stringifyFileSize(completed) : Long.toString(completed);
1:c5a8190:                 String totalStr = humanReadable ? FileUtils.stringifyFileSize(total) : Long.toString(total);
1:c5a8190:                 String unit = c.get("unit");
1:c5a8190:                 String percentComplete = total == 0 ? "n/a" : new DecimalFormat("0.00").format((double) completed / total * 100) + "%";
1:e194fe9:                 String id = c.get("compactionId");
1:b6661ac:                 table.add(id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete);
1:c5a8190:                 if (taskType.equals(OperationType.COMPACTION.toString()))
1:c5a8190:                     remainingBytes += total - completed;
1:c5a8190:             }
1:b6661ac:             table.printTo(System.out);
1:c5a8190: 
1:c5a8190:             String remainingTime = "n/a";
1:c5a8190:             if (compactionThroughput != 0)
1:c5a8190:             {
1:c5a8190:                 long remainingTimeInSecs = remainingBytes / (1024L * 1024L * compactionThroughput);
1:c5a8190:                 remainingTime = format("%dh%02dm%02ds", remainingTimeInSecs / 3600, (remainingTimeInSecs % 3600) / 60, (remainingTimeInSecs % 60));
1:c5a8190:             }
1:c5a8190:             System.out.printf("%25s%10s%n", "Active compaction remaining time : ", remainingTime);
1:c5a8190:         }
1:c5a8190:     }
1:c5a8190: 
1:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:a8743c6
/////////////////////////////////////////////////////////////////////////
1:             long remainingBytes = 0;
1:             TableBuilder table = new TableBuilder();
1: 
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import static java.lang.String.format;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.text.DecimalFormat;
0: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.db.compaction.CompactionManagerMBean;
1: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.tools.NodeProbe;
0: import org.apache.cassandra.tools.NodeTool;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: @Command(name = "compactionstats", description = "Print statistics on compactions")
1: public class CompactionStats extends NodeToolCmd
1: {
1:     @Option(title = "human_readable",
1:             name = {"-H", "--human-readable"},
0:             description = "Display bytes in human readable form, i.e. KB, MB, GB, TB")
1:     private boolean humanReadable = false;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         CompactionManagerMBean cm = probe.getCompactionManagerProxy();
0:         System.out.println("pending tasks: " + probe.getCompactionMetric("PendingTasks"));
0:         long remainingBytes = 0;
0:         List<Map<String, String>> compactions = cm.getCompactions();
1:         if (!compactions.isEmpty())
1:         {
0:             int compactionThroughput = probe.getCompactionThroughput();
0:             List<String[]> lines = new ArrayList<>();
0:             int[] columnSizes = new int[] { 0, 0, 0, 0, 0, 0, 0 };
1: 
0:             addLine(lines, columnSizes, "compaction type", "keyspace", "table", "completed", "total", "unit", "progress");
1:             for (Map<String, String> c : compactions)
1:             {
1:                 long total = Long.parseLong(c.get("total"));
1:                 long completed = Long.parseLong(c.get("completed"));
1:                 String taskType = c.get("taskType");
1:                 String keyspace = c.get("keyspace");
1:                 String columnFamily = c.get("columnfamily");
1:                 String completedStr = humanReadable ? FileUtils.stringifyFileSize(completed) : Long.toString(completed);
1:                 String totalStr = humanReadable ? FileUtils.stringifyFileSize(total) : Long.toString(total);
1:                 String unit = c.get("unit");
1:                 String percentComplete = total == 0 ? "n/a" : new DecimalFormat("0.00").format((double) completed / total * 100) + "%";
0:                 addLine(lines, columnSizes, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete);
1:                 if (taskType.equals(OperationType.COMPACTION.toString()))
1:                     remainingBytes += total - completed;
1:             }
1: 
0:             StringBuilder buffer = new StringBuilder();
0:             for (int columnSize : columnSizes) {
0:                 buffer.append("%");
0:                 buffer.append(columnSize + 3);
0:                 buffer.append("s");
1:             }
0:             buffer.append("%n");
0:             String format = buffer.toString();
1: 
0:             for (String[] line : lines)
1:             {
0:                 System.out.printf(format, line[0], line[1], line[2], line[3], line[4], line[5], line[6]);
1:             }
1: 
1:             String remainingTime = "n/a";
1:             if (compactionThroughput != 0)
1:             {
1:                 long remainingTimeInSecs = remainingBytes / (1024L * 1024L * compactionThroughput);
1:                 remainingTime = format("%dh%02dm%02ds", remainingTimeInSecs / 3600, (remainingTimeInSecs % 3600) / 60, (remainingTimeInSecs % 60));
1:             }
1:             System.out.printf("%25s%10s%n", "Active compaction remaining time : ", remainingTime);
1:         }
1:     }
1: 
0:     private void addLine(List<String[]> lines, int[] columnSizes, String... columns) {
0:         lines.add(columns);
0:         for (int i = 0; i < columns.length; i++) {
0:             columnSizes[i] = Math.max(columnSizes[i], columns[i].length());
1:         }
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1:         reportCompactionTable(cm.getCompactions(), probe.getCompactionThroughput(), humanReadable);
0:     }
0: 
1:     public static void reportCompactionTable(List<Map<String,String>> compactions, int compactionThroughput, boolean humanReadable)
1:     {
/////////////////////////////////////////////////////////////////////////
0: 
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:db68ac9
/////////////////////////////////////////////////////////////////////////
1:             description = "Display bytes in human readable form, i.e. KiB, MiB, GiB, TiB")
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b6661ac
/////////////////////////////////////////////////////////////////////////
0: import io.airlift.command.Command;
0: import io.airlift.command.Option;
0: 
1: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
0: 
0: import static java.lang.String.format;
/////////////////////////////////////////////////////////////////////////
1:         System.out.println("pending tasks: " + numTotalPendingTask);
/////////////////////////////////////////////////////////////////////////
1:                 System.out.println("- " + ksName + '.' + tableName + ": " + pendingTaskCount);
0:         TableBuilder table = new TableBuilder();
1:             table.add("id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress");
/////////////////////////////////////////////////////////////////////////
1:                 table.add(id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete);
1:             table.printTo(System.out);
/////////////////////////////////////////////////////////////////////////
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:a808769
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Map<String, Integer>> pendingTaskNumberByTable =
1:             (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName");
1:         int numTotalPendingTask = 0;
1:         for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet())
1:         {
1:             for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet())
1:                 numTotalPendingTask += tableEntry.getValue();
0:         }
0:         System.out.println("pending tasks: "+numTotalPendingTask);
1:         for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet())
1:         {
1:             String ksName = ksEntry.getKey();
1:             for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet())
1:             {
1:                 String tableName = tableEntry.getKey();
1:                 int pendingTaskCount = tableEntry.getValue();
0: 
0:                 StringBuilder builder = new StringBuilder();
0:                 builder.append("- ");
0:                 builder.append(ksName);
0:                 builder.append('.');
0:                 builder.append(tableName);
0:                 builder.append(": ");
0:                 builder.append(pendingTaskCount);
0:                 System.out.println(builder.toString());
0:             }
0:         }
1:         System.out.println();
author:Lyuben Todorov
-------------------------------------------------------------------------------
commit:e194fe9
/////////////////////////////////////////////////////////////////////////
0:             int[] columnSizes = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
0:             addLine(lines, columnSizes, "id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress");
/////////////////////////////////////////////////////////////////////////
1:                 String id = c.get("compactionId");
0:                 addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete);
/////////////////////////////////////////////////////////////////////////
0:                 System.out.printf(format, line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7]);
============================================================================