1:e73633c: package org.apache.cassandra.stress.report;
5:97d65d6: 
1:97d65d6: import java.util.Arrays;
1:97d65d6: import java.util.Map;
1:97d65d6: import java.util.TreeMap;
1:97d65d6: 
1:97d65d6: public class TimingIntervals
5:97d65d6: {
1:97d65d6:     final Map<String, TimingInterval> intervals;
1:97d65d6: 
1:e73633c:     public TimingIntervals(Map<String, TimingInterval> intervals)
1:97d65d6:     {
1:97d65d6:         this.intervals = intervals;
5:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public TimingInterval get(String opType)
1:97d65d6:     {
1:97d65d6:         return intervals.get(opType);
1:97d65d6:     }
1:97d65d6: 
1:97d65d6: 
1:ff4d0f9:     public String str(TimingInterval.TimingParameter value, String unit)
1:97d65d6:     {
1:89f275c:         return str(value, Double.NaN, unit);
1:97d65d6:     }
1:97d65d6: 
1:89f275c:     public String str(TimingInterval.TimingParameter value, double rank, String unit)
1:97d65d6:     {
1:e73633c:         if (intervals.size() == 0)
1:e73633c:         {
1:e73633c:             return "[]";
1:e73633c:         }
1:e73633c: 
1:97d65d6:         StringBuilder sb = new StringBuilder("[");
1:97d65d6: 
1:97d65d6:         for (Map.Entry<String, TimingInterval> entry : intervals.entrySet())
1:97d65d6:         {
1:97d65d6:             sb.append(entry.getKey());
1:ff4d0f9:             sb.append(": ");
1:97d65d6:             sb.append(entry.getValue().getStringValue(value, rank));
1:ff4d0f9:             if (unit.length() > 0)
1:ff4d0f9:             {
1:ff4d0f9:                 sb.append(" ");
1:ff4d0f9:                 sb.append(unit);
1:ff4d0f9:             }
1:97d65d6:             sb.append(", ");
1:97d65d6:         }
1:97d65d6: 
1:97d65d6:         sb.setLength(sb.length()-2);
1:97d65d6:         sb.append("]");
1:97d65d6: 
1:97d65d6:         return sb.toString();
1:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public String opRates()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.OPRATE, "op/s");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String partitionRates()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.PARTITIONRATE, "pk/s");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String rowRates()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.ROWRATE, "row/s");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String meanLatencies()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.MEANLATENCY, "ms");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String maxLatencies()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.MAXLATENCY, "ms");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String medianLatencies()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.MEDIANLATENCY, "ms");
1:97d65d6:     }
1:ff4d0f9: 
1:89f275c:     public String latenciesAtPercentile(double rank)
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.RANKLATENCY, rank, "ms");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String errorCounts()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.ERRORCOUNT, "");
1:97d65d6:     }
1:ff4d0f9: 
1:97d65d6:     public String partitionCounts()
1:97d65d6:     {
1:ff4d0f9:         return str(TimingInterval.TimingParameter.PARTITIONCOUNT, "");
1:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public long opRate()
1:97d65d6:     {
1:97d65d6:         long v = 0;
1:97d65d6:         for (TimingInterval interval : intervals.values())
1:97d65d6:             v += interval.opRate();
1:97d65d6:         return v;
1:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public long startNanos()
1:97d65d6:     {
2:97d65d6:         long start = Long.MAX_VALUE;
1:97d65d6:         for (TimingInterval interval : intervals.values())
1:97d65d6:             start = Math.min(start, interval.startNanos());
1:97d65d6:         return start;
1:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public long endNanos()
1:97d65d6:     {
1:97d65d6:         long end = Long.MIN_VALUE;
1:97d65d6:         for (TimingInterval interval : intervals.values())
1:97d65d6:             end = Math.max(end, interval.startNanos());
1:97d65d6:         return end;
1:97d65d6:     }
1:97d65d6: 
1:97d65d6:     public Map<String, TimingInterval> intervals()
1:97d65d6:     {
1:97d65d6:         return intervals;
1:97d65d6:     }
1:97d65d6: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.report;
/////////////////////////////////////////////////////////////////////////
1:     public TimingIntervals(Map<String, TimingInterval> intervals)
/////////////////////////////////////////////////////////////////////////
1:         if (intervals.size() == 0)
1:         {
1:             return "[]";
1:         }
1: 
commit:89f275c
/////////////////////////////////////////////////////////////////////////
0:     public TimingIntervals merge(TimingIntervals with, long start)
/////////////////////////////////////////////////////////////////////////
0:             ret.put(opType, TimingInterval.merge(Arrays.asList(intervals.get(opType), with.intervals.get(opType)), start));
/////////////////////////////////////////////////////////////////////////
0:     public TimingInterval combine()
0:         return TimingInterval.merge(intervals.values(), start);
1:         return str(value, Double.NaN, unit);
1:     public String str(TimingInterval.TimingParameter value, double rank, String unit)
/////////////////////////////////////////////////////////////////////////
1:     public String latenciesAtPercentile(double rank)
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:ff4d0f9
/////////////////////////////////////////////////////////////////////////
1:     public String str(TimingInterval.TimingParameter value, String unit)
0:         return str(value, Float.NaN, unit);
0:     public String str(TimingInterval.TimingParameter value, float rank, String unit)
1:             sb.append(": ");
1:             if (unit.length() > 0)
1:             {
1:                 sb.append(" ");
1:                 sb.append(unit);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         return str(TimingInterval.TimingParameter.OPRATE, "op/s");
1: 
1:         return str(TimingInterval.TimingParameter.PARTITIONRATE, "pk/s");
1: 
1:         return str(TimingInterval.TimingParameter.ROWRATE, "row/s");
1: 
1:         return str(TimingInterval.TimingParameter.MEANLATENCY, "ms");
1: 
1:         return str(TimingInterval.TimingParameter.MAXLATENCY, "ms");
1: 
1:         return str(TimingInterval.TimingParameter.MEDIANLATENCY, "ms");
1: 
1:         return str(TimingInterval.TimingParameter.RANKLATENCY, rank, "ms");
1: 
1:         return str(TimingInterval.TimingParameter.ERRORCOUNT, "");
1: 
1:         return str(TimingInterval.TimingParameter.PARTITIONCOUNT, "");
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:81fe1a2
/////////////////////////////////////////////////////////////////////////
0:         return str(TimingInterval.TimingParameter.RANKLATENCY, rank);
commit:97d65d6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.stress.util;
1: 
1: import java.util.Arrays;
1: import java.util.Map;
1: import java.util.TreeMap;
1: 
1: public class TimingIntervals
1: {
1:     final Map<String, TimingInterval> intervals;
0:     TimingIntervals(Iterable<String> opTypes)
1:     {
0:         long now = System.nanoTime();
0:         intervals = new TreeMap<>();
0:         for (String opType : opTypes)
0:             intervals.put(opType, new TimingInterval(now));
1:     }
1: 
0:     TimingIntervals(Map<String, TimingInterval> intervals)
1:     {
1:         this.intervals = intervals;
1:     }
1: 
0:     public TimingIntervals merge(TimingIntervals with, int maxSamples, long start)
1:     {
0:         assert intervals.size() == with.intervals.size();
0:         TreeMap<String, TimingInterval> ret = new TreeMap<>();
1: 
0:         for (String opType : intervals.keySet())
1:         {
0:             assert with.intervals.containsKey(opType);
0:             ret.put(opType, TimingInterval.merge(Arrays.asList(intervals.get(opType), with.intervals.get(opType)), maxSamples, start));
1:         }
1: 
0:         return new TimingIntervals(ret);
1:     }
1: 
1:     public TimingInterval get(String opType)
1:     {
1:         return intervals.get(opType);
1:     }
1: 
0:     public TimingInterval combine(int maxSamples)
1:     {
1:         long start = Long.MAX_VALUE;
0:         for (TimingInterval ti : intervals.values())
0:             start = Math.min(start, ti.startNanos());
1: 
0:         return TimingInterval.merge(intervals.values(), maxSamples, start);
1:     }
1: 
0:     public String str(TimingInterval.TimingParameter value)
1:     {
0:         return str(value, Float.NaN);
1:     }
1: 
0:     public String str(TimingInterval.TimingParameter value, float rank)
1:     {
1:         StringBuilder sb = new StringBuilder("[");
1: 
1:         for (Map.Entry<String, TimingInterval> entry : intervals.entrySet())
1:         {
1:             sb.append(entry.getKey());
0:             sb.append(":");
1:             sb.append(entry.getValue().getStringValue(value, rank));
1:             sb.append(", ");
1:         }
1: 
1:         sb.setLength(sb.length()-2);
1:         sb.append("]");
1: 
1:         return sb.toString();
1:     }
1: 
1:     public String opRates()
1:     {
0:         return str(TimingInterval.TimingParameter.OPRATE);
1:     }
1:     public String partitionRates()
1:     {
0:         return str(TimingInterval.TimingParameter.PARTITIONRATE);
1:     }
1:     public String rowRates()
1:     {
0:         return str(TimingInterval.TimingParameter.ROWRATE);
1:     }
1:     public String meanLatencies()
1:     {
0:         return str(TimingInterval.TimingParameter.MEANLATENCY);
1:     }
1:     public String maxLatencies()
1:     {
0:         return str(TimingInterval.TimingParameter.MAXLATENCY);
1:     }
1:     public String medianLatencies()
1:     {
0:         return str(TimingInterval.TimingParameter.MEDIANLATENCY);
1:     }
0:     public String rankLatencies(float rank)
1:     {
0:         return str(TimingInterval.TimingParameter.MEDIANLATENCY, rank);
1:     }
1:     public String errorCounts()
1:     {
0:         return str(TimingInterval.TimingParameter.ERRORCOUNT);
1:     }
1:     public String partitionCounts()
1:     {
0:         return str(TimingInterval.TimingParameter.PARTITIONCOUNT);
1:     }
1: 
1:     public long opRate()
1:     {
1:         long v = 0;
1:         for (TimingInterval interval : intervals.values())
1:             v += interval.opRate();
1:         return v;
1:     }
1: 
1:     public long startNanos()
1:     {
1:         long start = Long.MAX_VALUE;
1:         for (TimingInterval interval : intervals.values())
1:             start = Math.min(start, interval.startNanos());
1:         return start;
1:     }
1: 
1:     public long endNanos()
1:     {
1:         long end = Long.MIN_VALUE;
1:         for (TimingInterval interval : intervals.values())
1:             end = Math.max(end, interval.startNanos());
1:         return end;
1:     }
1: 
1:     public Map<String, TimingInterval> intervals()
1:     {
1:         return intervals;
1:     }
1: }
============================================================================