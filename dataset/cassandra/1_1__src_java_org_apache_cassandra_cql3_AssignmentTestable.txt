1:44fa12e: /*
1:44fa12e:  * Licensed to the Apache Software Foundation (ASF) under one
1:44fa12e:  * or more contributor license agreements.  See the NOTICE file
1:44fa12e:  * distributed with this work for additional information
1:44fa12e:  * regarding copyright ownership.  The ASF licenses this file
1:44fa12e:  * to you under the Apache License, Version 2.0 (the
1:44fa12e:  * "License"); you may not use this file except in compliance
1:44fa12e:  * with the License.  You may obtain a copy of the License at
1:44fa12e:  *
1:44fa12e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44fa12e:  *
1:44fa12e:  * Unless required by applicable law or agreed to in writing, software
1:44fa12e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44fa12e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44fa12e:  * See the License for the specific language governing permissions and
1:44fa12e:  * limitations under the License.
1:44fa12e:  */
1:44fa12e: package org.apache.cassandra.cql3;
1:44fa12e: 
1:44fa12e: import java.util.Collection;
1:44fa12e: 
1:44fa12e: public interface AssignmentTestable
1:44fa12e: {
1:44fa12e:     /**
1:44fa12e:      * @return whether this object can be assigned to the provided receiver. We distinguish
1:44fa12e:      * between 3 values: 
1:44fa12e:      *   - EXACT_MATCH if this object is exactly of the type expected by the receiver
1:44fa12e:      *   - WEAKLY_ASSIGNABLE if this object is not exactly the expected type but is assignable nonetheless
1:44fa12e:      *   - NOT_ASSIGNABLE if it's not assignable
1:44fa12e:      * Most caller should just call the isAssignable() method on the result, though functions have a use for
1:44fa12e:      * testing "strong" equality to decide the most precise overload to pick when multiple could match.
1:44fa12e:      */
1:44fa12e:     public TestResult testAssignment(String keyspace, ColumnSpecification receiver);
1:44fa12e: 
1:44fa12e:     public enum TestResult
1:44fa12e:     {
1:44fa12e:         EXACT_MATCH, WEAKLY_ASSIGNABLE, NOT_ASSIGNABLE;
1:44fa12e: 
1:44fa12e:         public boolean isAssignable()
1:44fa12e:         {
1:44fa12e:             return this != NOT_ASSIGNABLE;
1:44fa12e:         }
1:44fa12e: 
1:44fa12e:         public boolean isExactMatch()
1:44fa12e:         {
1:44fa12e:             return this == EXACT_MATCH;
1:44fa12e:         }
1:44fa12e: 
1:44fa12e:         // Test all elements of toTest for assignment. If all are exact match, return exact match. If any is not assignable,
1:44fa12e:         // return not assignable. Otherwise, return weakly assignable.
1:44fa12e:         public static TestResult testAll(String keyspace, ColumnSpecification receiver, Collection<? extends AssignmentTestable> toTest)
1:44fa12e:         {
1:44fa12e:             TestResult res = EXACT_MATCH;
1:44fa12e:             for (AssignmentTestable rt : toTest)
1:44fa12e:             {
1:44fa12e:                 if (rt == null)
1:44fa12e:                 {
1:44fa12e:                     res = WEAKLY_ASSIGNABLE;
1:44fa12e:                     continue;
1:44fa12e:                 }
1:44fa12e: 
1:44fa12e:                 TestResult t = rt.testAssignment(keyspace, receiver);
1:44fa12e:                 if (t == NOT_ASSIGNABLE)
1:44fa12e:                     return NOT_ASSIGNABLE;
1:44fa12e: 
1:44fa12e:                 if (t == WEAKLY_ASSIGNABLE)
1:44fa12e:                     res = WEAKLY_ASSIGNABLE;
1:44fa12e:             }
1:44fa12e:             return res;
1:44fa12e:         }
1:44fa12e:     }
1:44fa12e: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Collection;
1: 
1: public interface AssignmentTestable
1: {
1:     /**
1:      * @return whether this object can be assigned to the provided receiver. We distinguish
1:      * between 3 values: 
1:      *   - EXACT_MATCH if this object is exactly of the type expected by the receiver
1:      *   - WEAKLY_ASSIGNABLE if this object is not exactly the expected type but is assignable nonetheless
1:      *   - NOT_ASSIGNABLE if it's not assignable
1:      * Most caller should just call the isAssignable() method on the result, though functions have a use for
1:      * testing "strong" equality to decide the most precise overload to pick when multiple could match.
1:      */
1:     public TestResult testAssignment(String keyspace, ColumnSpecification receiver);
1: 
1:     public enum TestResult
1:     {
1:         EXACT_MATCH, WEAKLY_ASSIGNABLE, NOT_ASSIGNABLE;
1: 
1:         public boolean isAssignable()
1:         {
1:             return this != NOT_ASSIGNABLE;
1:         }
1: 
1:         public boolean isExactMatch()
1:         {
1:             return this == EXACT_MATCH;
1:         }
1: 
1:         // Test all elements of toTest for assignment. If all are exact match, return exact match. If any is not assignable,
1:         // return not assignable. Otherwise, return weakly assignable.
1:         public static TestResult testAll(String keyspace, ColumnSpecification receiver, Collection<? extends AssignmentTestable> toTest)
1:         {
1:             TestResult res = EXACT_MATCH;
1:             for (AssignmentTestable rt : toTest)
1:             {
1:                 if (rt == null)
1:                 {
1:                     res = WEAKLY_ASSIGNABLE;
1:                     continue;
1:                 }
1: 
1:                 TestResult t = rt.testAssignment(keyspace, receiver);
1:                 if (t == NOT_ASSIGNABLE)
1:                     return NOT_ASSIGNABLE;
1: 
1:                 if (t == WEAKLY_ASSIGNABLE)
1:                     res = WEAKLY_ASSIGNABLE;
1:             }
1:             return res;
1:         }
1:     }
1: }
============================================================================