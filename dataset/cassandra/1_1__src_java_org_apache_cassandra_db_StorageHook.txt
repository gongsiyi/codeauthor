1:4b27287: /*
1:4b27287:  * Licensed to the Apache Software Foundation (ASF) under one
1:4b27287:  * or more contributor license agreements.  See the NOTICE file
1:4b27287:  * distributed with this work for additional information
1:4b27287:  * regarding copyright ownership.  The ASF licenses this file
1:4b27287:  * to you under the Apache License, Version 2.0 (the
1:4b27287:  * "License"); you may not use this file except in compliance
1:4b27287:  * with the License.  You may obtain a copy of the License at
1:4b27287:  *
1:4b27287:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4b27287:  *
1:4b27287:  * Unless required by applicable law or agreed to in writing, software
1:4b27287:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b27287:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b27287:  * See the License for the specific language governing permissions and
1:4b27287:  * limitations under the License.
1:4b27287:  */
1:4b27287: 
1:4b27287: package org.apache.cassandra.db;
1:4b27287: 
1:4b27287: import java.util.UUID;
1:4b27287: 
1:4b27287: import org.apache.cassandra.db.filter.ClusteringIndexFilter;
1:4b27287: import org.apache.cassandra.db.filter.ColumnFilter;
1:4b27287: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:4b27287: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:4b27287: import org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound;
1:4b27287: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:4b27287: import org.apache.cassandra.utils.FBUtilities;
1:4b27287: 
1:4b27287: public interface StorageHook
1:4b27287: {
1:4b27287:     public static final StorageHook instance = createHook();
1:4b27287: 
1:4b27287:     public void reportWrite(UUID cfid, PartitionUpdate partitionUpdate);
1:4b27287:     public void reportRead(UUID cfid, DecoratedKey key);
1:4b27287:     public UnfilteredRowIteratorWithLowerBound makeRowIteratorWithLowerBound(ColumnFamilyStore cfs,
1:4b27287:                                                                       DecoratedKey partitionKey,
1:4b27287:                                                                       SSTableReader sstable,
1:4b27287:                                                                       ClusteringIndexFilter filter,
1:4b27287:                                                                       ColumnFilter selectedColumns,
1:4b27287:                                                                       boolean isForThrift,
1:4b27287:                                                                       int nowInSec,
1:4b27287:                                                                       boolean applyThriftTransformation);
1:4b27287:     public UnfilteredRowIterator makeRowIterator(ColumnFamilyStore cfs,
1:4b27287:                                                  SSTableReader sstable,
1:4b27287:                                                  DecoratedKey key,
1:4b27287:                                                  Slices slices,
1:4b27287:                                                  ColumnFilter selectedColumns,
1:4b27287:                                                  boolean reversed,
1:4b27287:                                                  boolean isForThrift);
1:4b27287: 
1:4b27287:     static StorageHook createHook()
1:4b27287:     {
1:4b27287:         String className =  System.getProperty("cassandra.storage_hook");
1:4b27287:         if (className != null)
1:4b27287:         {
1:4b27287:             return FBUtilities.construct(className, StorageHook.class.getSimpleName());
1:4b27287:         }
1:4b27287:         else
1:4b27287:         {
1:4b27287:             return new StorageHook()
1:4b27287:             {
1:4b27287:                 public void reportWrite(UUID cfid, PartitionUpdate partitionUpdate) {}
1:4b27287: 
1:4b27287:                 public void reportRead(UUID cfid, DecoratedKey key) {}
1:4b27287: 
1:4b27287:                 public UnfilteredRowIteratorWithLowerBound makeRowIteratorWithLowerBound(ColumnFamilyStore cfs, DecoratedKey partitionKey, SSTableReader sstable, ClusteringIndexFilter filter, ColumnFilter selectedColumns, boolean isForThrift, int nowInSec, boolean applyThriftTransformation)
1:4b27287:                 {
1:4b27287:                     return new UnfilteredRowIteratorWithLowerBound(partitionKey,
1:4b27287:                                                                    sstable,
1:4b27287:                                                                    filter,
1:4b27287:                                                                    selectedColumns,
1:4b27287:                                                                    isForThrift,
1:4b27287:                                                                    nowInSec,
1:4b27287:                                                                    applyThriftTransformation);
1:4b27287:                 }
1:4b27287: 
1:4b27287:                 public UnfilteredRowIterator makeRowIterator(ColumnFamilyStore cfs, SSTableReader sstable, DecoratedKey key, Slices slices, ColumnFilter selectedColumns, boolean reversed, boolean isForThrift)
1:4b27287:                 {
1:4b27287:                     return sstable.iterator(key, slices, selectedColumns, reversed, isForThrift);
1:4b27287:                 }
1:4b27287:             };
1:4b27287:         }
1:4b27287:     }
1:4b27287: }
============================================================================
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:4b27287
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.db.filter.ClusteringIndexFilter;
1: import org.apache.cassandra.db.filter.ColumnFilter;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public interface StorageHook
1: {
1:     public static final StorageHook instance = createHook();
1: 
1:     public void reportWrite(UUID cfid, PartitionUpdate partitionUpdate);
1:     public void reportRead(UUID cfid, DecoratedKey key);
1:     public UnfilteredRowIteratorWithLowerBound makeRowIteratorWithLowerBound(ColumnFamilyStore cfs,
1:                                                                       DecoratedKey partitionKey,
1:                                                                       SSTableReader sstable,
1:                                                                       ClusteringIndexFilter filter,
1:                                                                       ColumnFilter selectedColumns,
1:                                                                       boolean isForThrift,
1:                                                                       int nowInSec,
1:                                                                       boolean applyThriftTransformation);
1:     public UnfilteredRowIterator makeRowIterator(ColumnFamilyStore cfs,
1:                                                  SSTableReader sstable,
1:                                                  DecoratedKey key,
1:                                                  Slices slices,
1:                                                  ColumnFilter selectedColumns,
1:                                                  boolean reversed,
1:                                                  boolean isForThrift);
1: 
1:     static StorageHook createHook()
1:     {
1:         String className =  System.getProperty("cassandra.storage_hook");
1:         if (className != null)
1:         {
1:             return FBUtilities.construct(className, StorageHook.class.getSimpleName());
1:         }
1:         else
1:         {
1:             return new StorageHook()
1:             {
1:                 public void reportWrite(UUID cfid, PartitionUpdate partitionUpdate) {}
1: 
1:                 public void reportRead(UUID cfid, DecoratedKey key) {}
1: 
1:                 public UnfilteredRowIteratorWithLowerBound makeRowIteratorWithLowerBound(ColumnFamilyStore cfs, DecoratedKey partitionKey, SSTableReader sstable, ClusteringIndexFilter filter, ColumnFilter selectedColumns, boolean isForThrift, int nowInSec, boolean applyThriftTransformation)
1:                 {
1:                     return new UnfilteredRowIteratorWithLowerBound(partitionKey,
1:                                                                    sstable,
1:                                                                    filter,
1:                                                                    selectedColumns,
1:                                                                    isForThrift,
1:                                                                    nowInSec,
1:                                                                    applyThriftTransformation);
1:                 }
1: 
1:                 public UnfilteredRowIterator makeRowIterator(ColumnFamilyStore cfs, SSTableReader sstable, DecoratedKey key, Slices slices, ColumnFilter selectedColumns, boolean reversed, boolean isForThrift)
1:                 {
1:                     return sstable.iterator(key, slices, selectedColumns, reversed, isForThrift);
1:                 }
1:             };
1:         }
1:     }
1: }
============================================================================