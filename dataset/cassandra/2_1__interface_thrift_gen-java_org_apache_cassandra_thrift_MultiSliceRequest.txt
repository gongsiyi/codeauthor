1:f45e4a5: /**
1:f45e4a5:  * Autogenerated by Thrift Compiler (0.9.1)
1:f45e4a5:  *
1:f45e4a5:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:f45e4a5:  *  @generated
1:f45e4a5:  */
1:f45e4a5: package org.apache.cassandra.thrift;
1:f45e4a5: /*
1:f45e4a5:  * 
1:f45e4a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:f45e4a5:  * or more contributor license agreements.  See the NOTICE file
1:f45e4a5:  * distributed with this work for additional information
1:f45e4a5:  * regarding copyright ownership.  The ASF licenses this file
1:f45e4a5:  * to you under the Apache License, Version 2.0 (the
1:f45e4a5:  * "License"); you may not use this file except in compliance
1:f45e4a5:  * with the License.  You may obtain a copy of the License at
1:f45e4a5:  * 
1:f45e4a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f45e4a5:  * 
1:f45e4a5:  * Unless required by applicable law or agreed to in writing,
1:f45e4a5:  * software distributed under the License is distributed on an
1:f45e4a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f45e4a5:  * KIND, either express or implied.  See the License for the
1:f45e4a5:  * specific language governing permissions and limitations
1:f45e4a5:  * under the License.
1:f45e4a5:  * 
1:f45e4a5:  */
1:f45e4a5: 
1:f45e4a5: 
1:f45e4a5: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:f45e4a5: import org.apache.thrift.scheme.IScheme;
1:f45e4a5: import org.apache.thrift.scheme.SchemeFactory;
1:f45e4a5: import org.apache.thrift.scheme.StandardScheme;
1:f45e4a5: 
1:f45e4a5: import org.apache.thrift.scheme.TupleScheme;
1:f45e4a5: import org.apache.thrift.protocol.TTupleProtocol;
1:f45e4a5: import org.apache.thrift.protocol.TProtocolException;
1:f45e4a5: import org.apache.thrift.EncodingUtils;
1:f45e4a5: import org.apache.thrift.TException;
1:f45e4a5: import org.apache.thrift.async.AsyncMethodCallback;
1:f45e4a5: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:f45e4a5: import java.util.List;
1:f45e4a5: import java.util.ArrayList;
1:f45e4a5: import java.util.Map;
1:f45e4a5: import java.util.HashMap;
1:f45e4a5: import java.util.EnumMap;
1:f45e4a5: import java.util.Set;
1:f45e4a5: import java.util.HashSet;
1:f45e4a5: import java.util.EnumSet;
1:f45e4a5: import java.util.Collections;
1:f45e4a5: import java.util.BitSet;
1:f45e4a5: import java.nio.ByteBuffer;
1:f45e4a5: import java.util.Arrays;
1:f45e4a5: import org.slf4j.Logger;
1:f45e4a5: import org.slf4j.LoggerFactory;
1:f45e4a5: 
1:f45e4a5: /**
1:f45e4a5:  * Used to perform multiple slices on a single row key in one rpc operation
1:f45e4a5:  * @param key. The row key to be multi sliced
1:f45e4a5:  * @param column_parent. The column family (super columns are unsupported)
1:f45e4a5:  * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
1:f45e4a5:  * @param reversed. Direction of slice
1:f45e4a5:  * @param count. Maximum number of columns
1:f45e4a5:  * @param consistency_level. Level to perform the operation at
1:f45e4a5:  */
1:f45e4a5: public class MultiSliceRequest implements org.apache.thrift.TBase<MultiSliceRequest, MultiSliceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MultiSliceRequest> {
1:f45e4a5:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiSliceRequest");
1:f45e4a5: 
1:f45e4a5:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField COLUMN_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("column_parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField COLUMN_SLICES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_slices", org.apache.thrift.protocol.TType.LIST, (short)3);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)4);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
1:f45e4a5:   private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);
1:f45e4a5: 
1:f45e4a5:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:f45e4a5:   static {
1:f45e4a5:     schemes.put(StandardScheme.class, new MultiSliceRequestStandardSchemeFactory());
1:f45e4a5:     schemes.put(TupleScheme.class, new MultiSliceRequestTupleSchemeFactory());
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ByteBuffer key; // optional
1:f45e4a5:   public ColumnParent column_parent; // optional
1:f45e4a5:   public List<ColumnSlice> column_slices; // optional
1:f45e4a5:   public boolean reversed; // optional
1:f45e4a5:   public int count; // optional
1:f45e4a5:   /**
1:f45e4a5:    * 
1:f45e4a5:    * @see ConsistencyLevel
1:f45e4a5:    */
1:f45e4a5:   public ConsistencyLevel consistency_level; // optional
1:f45e4a5: 
1:f45e4a5:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:f45e4a5:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:f45e4a5:     KEY((short)1, "key"),
1:f45e4a5:     COLUMN_PARENT((short)2, "column_parent"),
1:f45e4a5:     COLUMN_SLICES((short)3, "column_slices"),
1:f45e4a5:     REVERSED((short)4, "reversed"),
1:f45e4a5:     COUNT((short)5, "count"),
1:f45e4a5:     /**
1:f45e4a5:      * 
1:f45e4a5:      * @see ConsistencyLevel
1:f45e4a5:      */
1:f45e4a5:     CONSISTENCY_LEVEL((short)6, "consistency_level");
1:f45e4a5: 
1:f45e4a5:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:f45e4a5: 
1:f45e4a5:     static {
1:f45e4a5:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:f45e4a5:         byName.put(field.getFieldName(), field);
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByThriftId(int fieldId) {
1:f45e4a5:       switch(fieldId) {
1:f45e4a5:         case 1: // KEY
1:f45e4a5:           return KEY;
1:f45e4a5:         case 2: // COLUMN_PARENT
1:f45e4a5:           return COLUMN_PARENT;
1:f45e4a5:         case 3: // COLUMN_SLICES
1:f45e4a5:           return COLUMN_SLICES;
1:f45e4a5:         case 4: // REVERSED
1:f45e4a5:           return REVERSED;
1:f45e4a5:         case 5: // COUNT
1:f45e4a5:           return COUNT;
1:f45e4a5:         case 6: // CONSISTENCY_LEVEL
1:f45e4a5:           return CONSISTENCY_LEVEL;
1:f45e4a5:         default:
1:f45e4a5:           return null;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches fieldId, throwing an exception
1:f45e4a5:      * if it is not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:f45e4a5:       _Fields fields = findByThriftId(fieldId);
1:f45e4a5:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:f45e4a5:       return fields;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     /**
1:f45e4a5:      * Find the _Fields constant that matches name, or null if its not found.
1:f45e4a5:      */
1:f45e4a5:     public static _Fields findByName(String name) {
1:f45e4a5:       return byName.get(name);
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     private final short _thriftId;
1:f45e4a5:     private final String _fieldName;
1:f45e4a5: 
1:f45e4a5:     _Fields(short thriftId, String fieldName) {
1:f45e4a5:       _thriftId = thriftId;
1:f45e4a5:       _fieldName = fieldName;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public short getThriftFieldId() {
1:f45e4a5:       return _thriftId;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public String getFieldName() {
1:f45e4a5:       return _fieldName;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   // isset id assignments
1:f45e4a5:   private static final int __REVERSED_ISSET_ID = 0;
1:f45e4a5:   private static final int __COUNT_ISSET_ID = 1;
1:f45e4a5:   private byte __isset_bitfield = 0;
1:f45e4a5:   private _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_PARENT,_Fields.COLUMN_SLICES,_Fields.REVERSED,_Fields.COUNT,_Fields.CONSISTENCY_LEVEL};
1:f45e4a5:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:f45e4a5:   static {
1:f45e4a5:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:f45e4a5:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:f45e4a5:     tmpMap.put(_Fields.COLUMN_PARENT, new org.apache.thrift.meta_data.FieldMetaData("column_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnParent.class)));
1:f45e4a5:     tmpMap.put(_Fields.COLUMN_SLICES, new org.apache.thrift.meta_data.FieldMetaData("column_slices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:f45e4a5:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSlice.class))));
1:f45e4a5:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:f45e4a5:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:f45e4a5:     tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:f45e4a5:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
1:f45e4a5:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:f45e4a5:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiSliceRequest.class, metaDataMap);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest() {
1:f45e4a5:     this.reversed = false;
1:f45e4a5: 
1:f45e4a5:     this.count = 1000;
1:f45e4a5: 
1:f45e4a5:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
1:f45e4a5: 
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /**
1:f45e4a5:    * Performs a deep copy on <i>other</i>.
1:f45e4a5:    */
1:f45e4a5:   public MultiSliceRequest(MultiSliceRequest other) {
1:f45e4a5:     __isset_bitfield = other.__isset_bitfield;
1:f45e4a5:     if (other.isSetKey()) {
1:f45e4a5:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
1:f45e4a5: ;
1:f45e4a5:     }
1:f45e4a5:     if (other.isSetColumn_parent()) {
1:f45e4a5:       this.column_parent = new ColumnParent(other.column_parent);
1:f45e4a5:     }
1:f45e4a5:     if (other.isSetColumn_slices()) {
1:f45e4a5:       List<ColumnSlice> __this__column_slices = new ArrayList<ColumnSlice>(other.column_slices.size());
1:f45e4a5:       for (ColumnSlice other_element : other.column_slices) {
1:f45e4a5:         __this__column_slices.add(new ColumnSlice(other_element));
1:f45e4a5:       }
1:f45e4a5:       this.column_slices = __this__column_slices;
1:f45e4a5:     }
1:f45e4a5:     this.reversed = other.reversed;
1:f45e4a5:     this.count = other.count;
1:f45e4a5:     if (other.isSetConsistency_level()) {
1:f45e4a5:       this.consistency_level = other.consistency_level;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest deepCopy() {
1:f45e4a5:     return new MultiSliceRequest(this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public void clear() {
1:f45e4a5:     this.key = null;
1:f45e4a5:     this.column_parent = null;
1:f45e4a5:     this.column_slices = null;
1:f45e4a5:     this.reversed = false;
1:f45e4a5: 
1:f45e4a5:     this.count = 1000;
1:f45e4a5: 
1:f45e4a5:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
1:f45e4a5: 
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public byte[] getKey() {
1:f45e4a5:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:f45e4a5:     return key == null ? null : key.array();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ByteBuffer bufferForKey() {
1:f45e4a5:     return key;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setKey(byte[] key) {
1:f45e4a5:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setKey(ByteBuffer key) {
1:f45e4a5:     this.key = key;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetKey() {
1:f45e4a5:     this.key = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetKey() {
1:f45e4a5:     return this.key != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setKeyIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.key = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public ColumnParent getColumn_parent() {
1:f45e4a5:     return this.column_parent;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setColumn_parent(ColumnParent column_parent) {
1:f45e4a5:     this.column_parent = column_parent;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetColumn_parent() {
1:f45e4a5:     this.column_parent = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field column_parent is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetColumn_parent() {
1:f45e4a5:     return this.column_parent != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setColumn_parentIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.column_parent = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public int getColumn_slicesSize() {
1:f45e4a5:     return (this.column_slices == null) ? 0 : this.column_slices.size();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public java.util.Iterator<ColumnSlice> getColumn_slicesIterator() {
1:f45e4a5:     return (this.column_slices == null) ? null : this.column_slices.iterator();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void addToColumn_slices(ColumnSlice elem) {
1:f45e4a5:     if (this.column_slices == null) {
1:f45e4a5:       this.column_slices = new ArrayList<ColumnSlice>();
1:f45e4a5:     }
1:f45e4a5:     this.column_slices.add(elem);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public List<ColumnSlice> getColumn_slices() {
1:f45e4a5:     return this.column_slices;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setColumn_slices(List<ColumnSlice> column_slices) {
1:f45e4a5:     this.column_slices = column_slices;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetColumn_slices() {
1:f45e4a5:     this.column_slices = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field column_slices is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetColumn_slices() {
1:f45e4a5:     return this.column_slices != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setColumn_slicesIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.column_slices = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public boolean isReversed() {
1:f45e4a5:     return this.reversed;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setReversed(boolean reversed) {
1:f45e4a5:     this.reversed = reversed;
1:f45e4a5:     setReversedIsSet(true);
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetReversed() {
1:f45e4a5:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetReversed() {
1:f45e4a5:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setReversedIsSet(boolean value) {
1:f45e4a5:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public int getCount() {
1:f45e4a5:     return this.count;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public MultiSliceRequest setCount(int count) {
1:f45e4a5:     this.count = count;
1:f45e4a5:     setCountIsSet(true);
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetCount() {
1:f45e4a5:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetCount() {
1:f45e4a5:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setCountIsSet(boolean value) {
1:f45e4a5:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /**
1:f45e4a5:    * 
1:f45e4a5:    * @see ConsistencyLevel
1:f45e4a5:    */
1:f45e4a5:   public ConsistencyLevel getConsistency_level() {
1:f45e4a5:     return this.consistency_level;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /**
1:f45e4a5:    * 
1:f45e4a5:    * @see ConsistencyLevel
1:f45e4a5:    */
1:f45e4a5:   public MultiSliceRequest setConsistency_level(ConsistencyLevel consistency_level) {
1:f45e4a5:     this.consistency_level = consistency_level;
1:f45e4a5:     return this;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void unsetConsistency_level() {
1:f45e4a5:     this.consistency_level = null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field consistency_level is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSetConsistency_level() {
1:f45e4a5:     return this.consistency_level != null;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setConsistency_levelIsSet(boolean value) {
1:f45e4a5:     if (!value) {
1:f45e4a5:       this.consistency_level = null;
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void setFieldValue(_Fields field, Object value) {
1:f45e4a5:     switch (field) {
1:f45e4a5:     case KEY:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetKey();
1:f45e4a5:       } else {
1:f45e4a5:         setKey((ByteBuffer)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case COLUMN_PARENT:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetColumn_parent();
1:f45e4a5:       } else {
1:f45e4a5:         setColumn_parent((ColumnParent)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case COLUMN_SLICES:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetColumn_slices();
1:f45e4a5:       } else {
1:f45e4a5:         setColumn_slices((List<ColumnSlice>)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case REVERSED:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetReversed();
1:f45e4a5:       } else {
1:f45e4a5:         setReversed((Boolean)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case COUNT:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetCount();
1:f45e4a5:       } else {
1:f45e4a5:         setCount((Integer)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     case CONSISTENCY_LEVEL:
1:f45e4a5:       if (value == null) {
1:f45e4a5:         unsetConsistency_level();
1:f45e4a5:       } else {
1:f45e4a5:         setConsistency_level((ConsistencyLevel)value);
1:f45e4a5:       }
1:f45e4a5:       break;
1:f45e4a5: 
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public Object getFieldValue(_Fields field) {
1:f45e4a5:     switch (field) {
1:f45e4a5:     case KEY:
1:f45e4a5:       return getKey();
1:f45e4a5: 
1:f45e4a5:     case COLUMN_PARENT:
1:f45e4a5:       return getColumn_parent();
1:f45e4a5: 
1:f45e4a5:     case COLUMN_SLICES:
1:f45e4a5:       return getColumn_slices();
1:f45e4a5: 
1:f45e4a5:     case REVERSED:
1:f45e4a5:       return Boolean.valueOf(isReversed());
1:f45e4a5: 
1:f45e4a5:     case COUNT:
1:f45e4a5:       return Integer.valueOf(getCount());
1:f45e4a5: 
1:f45e4a5:     case CONSISTENCY_LEVEL:
1:f45e4a5:       return getConsistency_level();
1:f45e4a5: 
1:f45e4a5:     }
1:f45e4a5:     throw new IllegalStateException();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:f45e4a5:   public boolean isSet(_Fields field) {
1:f45e4a5:     if (field == null) {
1:f45e4a5:       throw new IllegalArgumentException();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     switch (field) {
1:f45e4a5:     case KEY:
1:f45e4a5:       return isSetKey();
1:f45e4a5:     case COLUMN_PARENT:
1:f45e4a5:       return isSetColumn_parent();
1:f45e4a5:     case COLUMN_SLICES:
1:f45e4a5:       return isSetColumn_slices();
1:f45e4a5:     case REVERSED:
1:f45e4a5:       return isSetReversed();
1:f45e4a5:     case COUNT:
1:f45e4a5:       return isSetCount();
1:f45e4a5:     case CONSISTENCY_LEVEL:
1:f45e4a5:       return isSetConsistency_level();
1:f45e4a5:     }
1:f45e4a5:     throw new IllegalStateException();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public boolean equals(Object that) {
1:f45e4a5:     if (that == null)
1:f45e4a5:       return false;
1:f45e4a5:     if (that instanceof MultiSliceRequest)
1:f45e4a5:       return this.equals((MultiSliceRequest)that);
1:f45e4a5:     return false;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public boolean equals(MultiSliceRequest that) {
1:f45e4a5:     if (that == null)
1:f45e4a5:       return false;
1:f45e4a5: 
1:f45e4a5:     boolean this_present_key = true && this.isSetKey();
1:f45e4a5:     boolean that_present_key = true && that.isSetKey();
1:f45e4a5:     if (this_present_key || that_present_key) {
1:f45e4a5:       if (!(this_present_key && that_present_key))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.key.equals(that.key))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_column_parent = true && this.isSetColumn_parent();
1:f45e4a5:     boolean that_present_column_parent = true && that.isSetColumn_parent();
1:f45e4a5:     if (this_present_column_parent || that_present_column_parent) {
1:f45e4a5:       if (!(this_present_column_parent && that_present_column_parent))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.column_parent.equals(that.column_parent))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_column_slices = true && this.isSetColumn_slices();
1:f45e4a5:     boolean that_present_column_slices = true && that.isSetColumn_slices();
1:f45e4a5:     if (this_present_column_slices || that_present_column_slices) {
1:f45e4a5:       if (!(this_present_column_slices && that_present_column_slices))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.column_slices.equals(that.column_slices))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_reversed = true && this.isSetReversed();
1:f45e4a5:     boolean that_present_reversed = true && that.isSetReversed();
1:f45e4a5:     if (this_present_reversed || that_present_reversed) {
1:f45e4a5:       if (!(this_present_reversed && that_present_reversed))
1:f45e4a5:         return false;
1:f45e4a5:       if (this.reversed != that.reversed)
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_count = true && this.isSetCount();
1:f45e4a5:     boolean that_present_count = true && that.isSetCount();
1:f45e4a5:     if (this_present_count || that_present_count) {
1:f45e4a5:       if (!(this_present_count && that_present_count))
1:f45e4a5:         return false;
1:f45e4a5:       if (this.count != that.count)
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     boolean this_present_consistency_level = true && this.isSetConsistency_level();
1:f45e4a5:     boolean that_present_consistency_level = true && that.isSetConsistency_level();
1:f45e4a5:     if (this_present_consistency_level || that_present_consistency_level) {
1:f45e4a5:       if (!(this_present_consistency_level && that_present_consistency_level))
1:f45e4a5:         return false;
1:f45e4a5:       if (!this.consistency_level.equals(that.consistency_level))
1:f45e4a5:         return false;
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     return true;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public int hashCode() {
1:f45e4a5:     HashCodeBuilder builder = new HashCodeBuilder();
1:f45e4a5: 
1:f45e4a5:     boolean present_key = true && (isSetKey());
1:f45e4a5:     builder.append(present_key);
1:f45e4a5:     if (present_key)
1:f45e4a5:       builder.append(key);
1:f45e4a5: 
1:f45e4a5:     boolean present_column_parent = true && (isSetColumn_parent());
1:f45e4a5:     builder.append(present_column_parent);
1:f45e4a5:     if (present_column_parent)
1:f45e4a5:       builder.append(column_parent);
1:f45e4a5: 
1:f45e4a5:     boolean present_column_slices = true && (isSetColumn_slices());
1:f45e4a5:     builder.append(present_column_slices);
1:f45e4a5:     if (present_column_slices)
1:f45e4a5:       builder.append(column_slices);
1:f45e4a5: 
1:f45e4a5:     boolean present_reversed = true && (isSetReversed());
1:f45e4a5:     builder.append(present_reversed);
1:f45e4a5:     if (present_reversed)
1:f45e4a5:       builder.append(reversed);
1:f45e4a5: 
1:f45e4a5:     boolean present_count = true && (isSetCount());
1:f45e4a5:     builder.append(present_count);
1:f45e4a5:     if (present_count)
1:f45e4a5:       builder.append(count);
1:f45e4a5: 
1:f45e4a5:     boolean present_consistency_level = true && (isSetConsistency_level());
1:f45e4a5:     builder.append(present_consistency_level);
1:f45e4a5:     if (present_consistency_level)
1:f45e4a5:       builder.append(consistency_level.getValue());
1:f45e4a5: 
1:f45e4a5:     return builder.toHashCode();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public int compareTo(MultiSliceRequest other) {
1:f45e4a5:     if (!getClass().equals(other.getClass())) {
1:f45e4a5:       return getClass().getName().compareTo(other.getClass().getName());
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     int lastComparison = 0;
1:f45e4a5: 
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetKey()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(other.isSetColumn_parent());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetColumn_parent()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, other.column_parent);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetColumn_slices()).compareTo(other.isSetColumn_slices());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetColumn_slices()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_slices, other.column_slices);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetReversed()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetCount()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(other.isSetConsistency_level());
1:f45e4a5:     if (lastComparison != 0) {
1:f45e4a5:       return lastComparison;
1:f45e4a5:     }
1:f45e4a5:     if (isSetConsistency_level()) {
1:f45e4a5:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, other.consistency_level);
1:f45e4a5:       if (lastComparison != 0) {
1:f45e4a5:         return lastComparison;
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:     return 0;
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public _Fields fieldForId(int fieldId) {
1:f45e4a5:     return _Fields.findByThriftId(fieldId);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:f45e4a5:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:f45e4a5:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   @Override
1:f45e4a5:   public String toString() {
1:f45e4a5:     StringBuilder sb = new StringBuilder("MultiSliceRequest(");
1:f45e4a5:     boolean first = true;
1:f45e4a5: 
1:f45e4a5:     if (isSetKey()) {
1:f45e4a5:       sb.append("key:");
1:f45e4a5:       if (this.key == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         org.apache.thrift.TBaseHelper.toString(this.key, sb);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetColumn_parent()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("column_parent:");
1:f45e4a5:       if (this.column_parent == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         sb.append(this.column_parent);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetColumn_slices()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("column_slices:");
1:f45e4a5:       if (this.column_slices == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         sb.append(this.column_slices);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetReversed()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("reversed:");
1:f45e4a5:       sb.append(this.reversed);
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetCount()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("count:");
1:f45e4a5:       sb.append(this.count);
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     if (isSetConsistency_level()) {
1:f45e4a5:       if (!first) sb.append(", ");
1:f45e4a5:       sb.append("consistency_level:");
1:f45e4a5:       if (this.consistency_level == null) {
1:f45e4a5:         sb.append("null");
1:f45e4a5:       } else {
1:f45e4a5:         sb.append(this.consistency_level);
1:f45e4a5:       }
1:f45e4a5:       first = false;
1:f45e4a5:     }
1:f45e4a5:     sb.append(")");
1:f45e4a5:     return sb.toString();
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   public void validate() throws org.apache.thrift.TException {
1:f45e4a5:     // check for required fields
1:f45e4a5:     // check for sub-struct validity
1:f45e4a5:     if (column_parent != null) {
1:f45e4a5:       column_parent.validate();
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:f45e4a5:     try {
1:f45e4a5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:f45e4a5:     } catch (org.apache.thrift.TException te) {
1:f45e4a5:       throw new java.io.IOException(te);
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:f45e4a5:     try {
1:f45e4a5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:f45e4a5:       __isset_bitfield = 0;
1:f45e4a5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:f45e4a5:     } catch (org.apache.thrift.TException te) {
1:f45e4a5:       throw new java.io.IOException(te);
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class MultiSliceRequestStandardSchemeFactory implements SchemeFactory {
1:f45e4a5:     public MultiSliceRequestStandardScheme getScheme() {
1:f45e4a5:       return new MultiSliceRequestStandardScheme();
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class MultiSliceRequestStandardScheme extends StandardScheme<MultiSliceRequest> {
1:f45e4a5: 
1:f45e4a5:     public void read(org.apache.thrift.protocol.TProtocol iprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:f45e4a5:       org.apache.thrift.protocol.TField schemeField;
1:f45e4a5:       iprot.readStructBegin();
1:f45e4a5:       while (true)
1:f45e4a5:       {
1:f45e4a5:         schemeField = iprot.readFieldBegin();
1:f45e4a5:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:f45e4a5:           break;
1:f45e4a5:         }
1:f45e4a5:         switch (schemeField.id) {
1:f45e4a5:           case 1: // KEY
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:f45e4a5:               struct.key = iprot.readBinary();
1:f45e4a5:               struct.setKeyIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 2: // COLUMN_PARENT
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:f45e4a5:               struct.column_parent = new ColumnParent();
1:f45e4a5:               struct.column_parent.read(iprot);
1:f45e4a5:               struct.setColumn_parentIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 3: // COLUMN_SLICES
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:f45e4a5:               {
1:f45e4a5:                 org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
1:f45e4a5:                 struct.column_slices = new ArrayList<ColumnSlice>(_list216.size);
1:f45e4a5:                 for (int _i217 = 0; _i217 < _list216.size; ++_i217)
1:f45e4a5:                 {
1:f45e4a5:                   ColumnSlice _elem218;
1:f45e4a5:                   _elem218 = new ColumnSlice();
1:f45e4a5:                   _elem218.read(iprot);
1:f45e4a5:                   struct.column_slices.add(_elem218);
1:f45e4a5:                 }
1:f45e4a5:                 iprot.readListEnd();
1:f45e4a5:               }
1:f45e4a5:               struct.setColumn_slicesIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 4: // REVERSED
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:f45e4a5:               struct.reversed = iprot.readBool();
1:f45e4a5:               struct.setReversedIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 5: // COUNT
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:f45e4a5:               struct.count = iprot.readI32();
1:f45e4a5:               struct.setCountIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           case 6: // CONSISTENCY_LEVEL
1:f45e4a5:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:f45e4a5:               struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
1:f45e4a5:               struct.setConsistency_levelIsSet(true);
1:f45e4a5:             } else { 
1:f45e4a5:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:             }
1:f45e4a5:             break;
1:f45e4a5:           default:
1:f45e4a5:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:f45e4a5:         }
1:f45e4a5:         iprot.readFieldEnd();
1:f45e4a5:       }
1:f45e4a5:       iprot.readStructEnd();
1:f45e4a5: 
1:f45e4a5:       // check for required fields of primitive type, which can't be checked in the validate method
1:f45e4a5:       struct.validate();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     public void write(org.apache.thrift.protocol.TProtocol oprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:f45e4a5:       struct.validate();
1:f45e4a5: 
1:f45e4a5:       oprot.writeStructBegin(STRUCT_DESC);
1:f45e4a5:       if (struct.key != null) {
1:f45e4a5:         if (struct.isSetKey()) {
1:f45e4a5:           oprot.writeFieldBegin(KEY_FIELD_DESC);
1:f45e4a5:           oprot.writeBinary(struct.key);
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       if (struct.column_parent != null) {
1:f45e4a5:         if (struct.isSetColumn_parent()) {
1:f45e4a5:           oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
1:f45e4a5:           struct.column_parent.write(oprot);
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       if (struct.column_slices != null) {
1:f45e4a5:         if (struct.isSetColumn_slices()) {
1:f45e4a5:           oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
1:f45e4a5:           {
1:f45e4a5:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_slices.size()));
1:f45e4a5:             for (ColumnSlice _iter219 : struct.column_slices)
1:f45e4a5:             {
1:f45e4a5:               _iter219.write(oprot);
1:f45e4a5:             }
1:f45e4a5:             oprot.writeListEnd();
1:f45e4a5:           }
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetReversed()) {
1:f45e4a5:         oprot.writeFieldBegin(REVERSED_FIELD_DESC);
1:f45e4a5:         oprot.writeBool(struct.reversed);
1:f45e4a5:         oprot.writeFieldEnd();
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetCount()) {
1:f45e4a5:         oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:f45e4a5:         oprot.writeI32(struct.count);
1:f45e4a5:         oprot.writeFieldEnd();
1:f45e4a5:       }
1:f45e4a5:       if (struct.consistency_level != null) {
1:f45e4a5:         if (struct.isSetConsistency_level()) {
1:f45e4a5:           oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
1:f45e4a5:           oprot.writeI32(struct.consistency_level.getValue());
1:f45e4a5:           oprot.writeFieldEnd();
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       oprot.writeFieldStop();
1:f45e4a5:       oprot.writeStructEnd();
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class MultiSliceRequestTupleSchemeFactory implements SchemeFactory {
1:f45e4a5:     public MultiSliceRequestTupleScheme getScheme() {
1:f45e4a5:       return new MultiSliceRequestTupleScheme();
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5:   private static class MultiSliceRequestTupleScheme extends TupleScheme<MultiSliceRequest> {
1:f45e4a5: 
1:f45e4a5:     @Override
1:f45e4a5:     public void write(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:f45e4a5:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:f45e4a5:       BitSet optionals = new BitSet();
1:f45e4a5:       if (struct.isSetKey()) {
1:f45e4a5:         optionals.set(0);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetColumn_parent()) {
1:f45e4a5:         optionals.set(1);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetColumn_slices()) {
1:f45e4a5:         optionals.set(2);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetReversed()) {
1:f45e4a5:         optionals.set(3);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetCount()) {
1:f45e4a5:         optionals.set(4);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetConsistency_level()) {
1:f45e4a5:         optionals.set(5);
1:f45e4a5:       }
1:f45e4a5:       oprot.writeBitSet(optionals, 6);
1:f45e4a5:       if (struct.isSetKey()) {
1:f45e4a5:         oprot.writeBinary(struct.key);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetColumn_parent()) {
1:f45e4a5:         struct.column_parent.write(oprot);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetColumn_slices()) {
1:f45e4a5:         {
1:f45e4a5:           oprot.writeI32(struct.column_slices.size());
1:f45e4a5:           for (ColumnSlice _iter220 : struct.column_slices)
1:f45e4a5:           {
1:f45e4a5:             _iter220.write(oprot);
1:f45e4a5:           }
1:f45e4a5:         }
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetReversed()) {
1:f45e4a5:         oprot.writeBool(struct.reversed);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetCount()) {
1:f45e4a5:         oprot.writeI32(struct.count);
1:f45e4a5:       }
1:f45e4a5:       if (struct.isSetConsistency_level()) {
1:f45e4a5:         oprot.writeI32(struct.consistency_level.getValue());
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5: 
1:f45e4a5:     @Override
1:f45e4a5:     public void read(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:f45e4a5:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:f45e4a5:       BitSet incoming = iprot.readBitSet(6);
1:f45e4a5:       if (incoming.get(0)) {
1:f45e4a5:         struct.key = iprot.readBinary();
1:f45e4a5:         struct.setKeyIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(1)) {
1:f45e4a5:         struct.column_parent = new ColumnParent();
1:f45e4a5:         struct.column_parent.read(iprot);
1:f45e4a5:         struct.setColumn_parentIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(2)) {
1:f45e4a5:         {
1:f45e4a5:           org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:f45e4a5:           struct.column_slices = new ArrayList<ColumnSlice>(_list221.size);
1:f45e4a5:           for (int _i222 = 0; _i222 < _list221.size; ++_i222)
1:f45e4a5:           {
1:f45e4a5:             ColumnSlice _elem223;
1:f45e4a5:             _elem223 = new ColumnSlice();
1:f45e4a5:             _elem223.read(iprot);
1:f45e4a5:             struct.column_slices.add(_elem223);
1:f45e4a5:           }
1:f45e4a5:         }
1:f45e4a5:         struct.setColumn_slicesIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(3)) {
1:f45e4a5:         struct.reversed = iprot.readBool();
1:f45e4a5:         struct.setReversedIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(4)) {
1:f45e4a5:         struct.count = iprot.readI32();
1:f45e4a5:         struct.setCountIsSet(true);
1:f45e4a5:       }
1:f45e4a5:       if (incoming.get(5)) {
1:f45e4a5:         struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
1:f45e4a5:         struct.setConsistency_levelIsSet(true);
1:f45e4a5:       }
1:f45e4a5:     }
1:f45e4a5:   }
1:f45e4a5: 
1:f45e4a5: }
1:f45e4a5: 
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f45e4a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Autogenerated by Thrift Compiler (0.9.1)
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  *  @generated
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Used to perform multiple slices on a single row key in one rpc operation
1:  * @param key. The row key to be multi sliced
1:  * @param column_parent. The column family (super columns are unsupported)
1:  * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
1:  * @param reversed. Direction of slice
1:  * @param count. Maximum number of columns
1:  * @param consistency_level. Level to perform the operation at
1:  */
1: public class MultiSliceRequest implements org.apache.thrift.TBase<MultiSliceRequest, MultiSliceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MultiSliceRequest> {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiSliceRequest");
1: 
1:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField COLUMN_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("column_parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:   private static final org.apache.thrift.protocol.TField COLUMN_SLICES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_slices", org.apache.thrift.protocol.TType.LIST, (short)3);
1:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)4);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
1:   private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);
1: 
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new MultiSliceRequestStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new MultiSliceRequestTupleSchemeFactory());
1:   }
1: 
1:   public ByteBuffer key; // optional
1:   public ColumnParent column_parent; // optional
1:   public List<ColumnSlice> column_slices; // optional
1:   public boolean reversed; // optional
1:   public int count; // optional
1:   /**
1:    * 
1:    * @see ConsistencyLevel
1:    */
1:   public ConsistencyLevel consistency_level; // optional
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     KEY((short)1, "key"),
1:     COLUMN_PARENT((short)2, "column_parent"),
1:     COLUMN_SLICES((short)3, "column_slices"),
1:     REVERSED((short)4, "reversed"),
1:     COUNT((short)5, "count"),
1:     /**
1:      * 
1:      * @see ConsistencyLevel
1:      */
1:     CONSISTENCY_LEVEL((short)6, "consistency_level");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // KEY
1:           return KEY;
1:         case 2: // COLUMN_PARENT
1:           return COLUMN_PARENT;
1:         case 3: // COLUMN_SLICES
1:           return COLUMN_SLICES;
1:         case 4: // REVERSED
1:           return REVERSED;
1:         case 5: // COUNT
1:           return COUNT;
1:         case 6: // CONSISTENCY_LEVEL
1:           return CONSISTENCY_LEVEL;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __REVERSED_ISSET_ID = 0;
1:   private static final int __COUNT_ISSET_ID = 1;
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_PARENT,_Fields.COLUMN_SLICES,_Fields.REVERSED,_Fields.COUNT,_Fields.CONSISTENCY_LEVEL};
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COLUMN_PARENT, new org.apache.thrift.meta_data.FieldMetaData("column_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnParent.class)));
1:     tmpMap.put(_Fields.COLUMN_SLICES, new org.apache.thrift.meta_data.FieldMetaData("column_slices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSlice.class))));
1:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiSliceRequest.class, metaDataMap);
1:   }
1: 
1:   public MultiSliceRequest() {
1:     this.reversed = false;
1: 
1:     this.count = 1000;
1: 
1:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
1: 
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public MultiSliceRequest(MultiSliceRequest other) {
1:     __isset_bitfield = other.__isset_bitfield;
1:     if (other.isSetKey()) {
1:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
1: ;
1:     }
1:     if (other.isSetColumn_parent()) {
1:       this.column_parent = new ColumnParent(other.column_parent);
1:     }
1:     if (other.isSetColumn_slices()) {
1:       List<ColumnSlice> __this__column_slices = new ArrayList<ColumnSlice>(other.column_slices.size());
1:       for (ColumnSlice other_element : other.column_slices) {
1:         __this__column_slices.add(new ColumnSlice(other_element));
1:       }
1:       this.column_slices = __this__column_slices;
1:     }
1:     this.reversed = other.reversed;
1:     this.count = other.count;
1:     if (other.isSetConsistency_level()) {
1:       this.consistency_level = other.consistency_level;
1:     }
1:   }
1: 
1:   public MultiSliceRequest deepCopy() {
1:     return new MultiSliceRequest(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.key = null;
1:     this.column_parent = null;
1:     this.column_slices = null;
1:     this.reversed = false;
1: 
1:     this.count = 1000;
1: 
1:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
1: 
1:   }
1: 
1:   public byte[] getKey() {
1:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:     return key == null ? null : key.array();
1:   }
1: 
1:   public ByteBuffer bufferForKey() {
1:     return key;
1:   }
1: 
1:   public MultiSliceRequest setKey(byte[] key) {
1:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
1:     return this;
1:   }
1: 
1:   public MultiSliceRequest setKey(ByteBuffer key) {
1:     this.key = key;
1:     return this;
1:   }
1: 
1:   public void unsetKey() {
1:     this.key = null;
1:   }
1: 
1:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
1:   public boolean isSetKey() {
1:     return this.key != null;
1:   }
1: 
1:   public void setKeyIsSet(boolean value) {
1:     if (!value) {
1:       this.key = null;
1:     }
1:   }
1: 
1:   public ColumnParent getColumn_parent() {
1:     return this.column_parent;
1:   }
1: 
1:   public MultiSliceRequest setColumn_parent(ColumnParent column_parent) {
1:     this.column_parent = column_parent;
1:     return this;
1:   }
1: 
1:   public void unsetColumn_parent() {
1:     this.column_parent = null;
1:   }
1: 
1:   /** Returns true if field column_parent is set (has been assigned a value) and false otherwise */
1:   public boolean isSetColumn_parent() {
1:     return this.column_parent != null;
1:   }
1: 
1:   public void setColumn_parentIsSet(boolean value) {
1:     if (!value) {
1:       this.column_parent = null;
1:     }
1:   }
1: 
1:   public int getColumn_slicesSize() {
1:     return (this.column_slices == null) ? 0 : this.column_slices.size();
1:   }
1: 
1:   public java.util.Iterator<ColumnSlice> getColumn_slicesIterator() {
1:     return (this.column_slices == null) ? null : this.column_slices.iterator();
1:   }
1: 
1:   public void addToColumn_slices(ColumnSlice elem) {
1:     if (this.column_slices == null) {
1:       this.column_slices = new ArrayList<ColumnSlice>();
1:     }
1:     this.column_slices.add(elem);
1:   }
1: 
1:   public List<ColumnSlice> getColumn_slices() {
1:     return this.column_slices;
1:   }
1: 
1:   public MultiSliceRequest setColumn_slices(List<ColumnSlice> column_slices) {
1:     this.column_slices = column_slices;
1:     return this;
1:   }
1: 
1:   public void unsetColumn_slices() {
1:     this.column_slices = null;
1:   }
1: 
1:   /** Returns true if field column_slices is set (has been assigned a value) and false otherwise */
1:   public boolean isSetColumn_slices() {
1:     return this.column_slices != null;
1:   }
1: 
1:   public void setColumn_slicesIsSet(boolean value) {
1:     if (!value) {
1:       this.column_slices = null;
1:     }
1:   }
1: 
1:   public boolean isReversed() {
1:     return this.reversed;
1:   }
1: 
1:   public MultiSliceRequest setReversed(boolean reversed) {
1:     this.reversed = reversed;
1:     setReversedIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetReversed() {
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
1:   public boolean isSetReversed() {
1:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
1:   }
1: 
1:   public void setReversedIsSet(boolean value) {
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
1:   }
1: 
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
1:   public MultiSliceRequest setCount(int count) {
1:     this.count = count;
1:     setCountIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetCount() {
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:   public boolean isSetCount() {
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:   }
1: 
1:   /**
1:    * 
1:    * @see ConsistencyLevel
1:    */
1:   public ConsistencyLevel getConsistency_level() {
1:     return this.consistency_level;
1:   }
1: 
1:   /**
1:    * 
1:    * @see ConsistencyLevel
1:    */
1:   public MultiSliceRequest setConsistency_level(ConsistencyLevel consistency_level) {
1:     this.consistency_level = consistency_level;
1:     return this;
1:   }
1: 
1:   public void unsetConsistency_level() {
1:     this.consistency_level = null;
1:   }
1: 
1:   /** Returns true if field consistency_level is set (has been assigned a value) and false otherwise */
1:   public boolean isSetConsistency_level() {
1:     return this.consistency_level != null;
1:   }
1: 
1:   public void setConsistency_levelIsSet(boolean value) {
1:     if (!value) {
1:       this.consistency_level = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case KEY:
1:       if (value == null) {
1:         unsetKey();
1:       } else {
1:         setKey((ByteBuffer)value);
1:       }
1:       break;
1: 
1:     case COLUMN_PARENT:
1:       if (value == null) {
1:         unsetColumn_parent();
1:       } else {
1:         setColumn_parent((ColumnParent)value);
1:       }
1:       break;
1: 
1:     case COLUMN_SLICES:
1:       if (value == null) {
1:         unsetColumn_slices();
1:       } else {
1:         setColumn_slices((List<ColumnSlice>)value);
1:       }
1:       break;
1: 
1:     case REVERSED:
1:       if (value == null) {
1:         unsetReversed();
1:       } else {
1:         setReversed((Boolean)value);
1:       }
1:       break;
1: 
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
1:       } else {
1:         setCount((Integer)value);
1:       }
1:       break;
1: 
1:     case CONSISTENCY_LEVEL:
1:       if (value == null) {
1:         unsetConsistency_level();
1:       } else {
1:         setConsistency_level((ConsistencyLevel)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case KEY:
1:       return getKey();
1: 
1:     case COLUMN_PARENT:
1:       return getColumn_parent();
1: 
1:     case COLUMN_SLICES:
1:       return getColumn_slices();
1: 
1:     case REVERSED:
1:       return Boolean.valueOf(isReversed());
1: 
1:     case COUNT:
1:       return Integer.valueOf(getCount());
1: 
1:     case CONSISTENCY_LEVEL:
1:       return getConsistency_level();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case KEY:
1:       return isSetKey();
1:     case COLUMN_PARENT:
1:       return isSetColumn_parent();
1:     case COLUMN_SLICES:
1:       return isSetColumn_slices();
1:     case REVERSED:
1:       return isSetReversed();
1:     case COUNT:
1:       return isSetCount();
1:     case CONSISTENCY_LEVEL:
1:       return isSetConsistency_level();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof MultiSliceRequest)
1:       return this.equals((MultiSliceRequest)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(MultiSliceRequest that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_key = true && this.isSetKey();
1:     boolean that_present_key = true && that.isSetKey();
1:     if (this_present_key || that_present_key) {
1:       if (!(this_present_key && that_present_key))
1:         return false;
1:       if (!this.key.equals(that.key))
1:         return false;
1:     }
1: 
1:     boolean this_present_column_parent = true && this.isSetColumn_parent();
1:     boolean that_present_column_parent = true && that.isSetColumn_parent();
1:     if (this_present_column_parent || that_present_column_parent) {
1:       if (!(this_present_column_parent && that_present_column_parent))
1:         return false;
1:       if (!this.column_parent.equals(that.column_parent))
1:         return false;
1:     }
1: 
1:     boolean this_present_column_slices = true && this.isSetColumn_slices();
1:     boolean that_present_column_slices = true && that.isSetColumn_slices();
1:     if (this_present_column_slices || that_present_column_slices) {
1:       if (!(this_present_column_slices && that_present_column_slices))
1:         return false;
1:       if (!this.column_slices.equals(that.column_slices))
1:         return false;
1:     }
1: 
1:     boolean this_present_reversed = true && this.isSetReversed();
1:     boolean that_present_reversed = true && that.isSetReversed();
1:     if (this_present_reversed || that_present_reversed) {
1:       if (!(this_present_reversed && that_present_reversed))
1:         return false;
1:       if (this.reversed != that.reversed)
1:         return false;
1:     }
1: 
1:     boolean this_present_count = true && this.isSetCount();
1:     boolean that_present_count = true && that.isSetCount();
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     boolean this_present_consistency_level = true && this.isSetConsistency_level();
1:     boolean that_present_consistency_level = true && that.isSetConsistency_level();
1:     if (this_present_consistency_level || that_present_consistency_level) {
1:       if (!(this_present_consistency_level && that_present_consistency_level))
1:         return false;
1:       if (!this.consistency_level.equals(that.consistency_level))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_key = true && (isSetKey());
1:     builder.append(present_key);
1:     if (present_key)
1:       builder.append(key);
1: 
1:     boolean present_column_parent = true && (isSetColumn_parent());
1:     builder.append(present_column_parent);
1:     if (present_column_parent)
1:       builder.append(column_parent);
1: 
1:     boolean present_column_slices = true && (isSetColumn_slices());
1:     builder.append(present_column_slices);
1:     if (present_column_slices)
1:       builder.append(column_slices);
1: 
1:     boolean present_reversed = true && (isSetReversed());
1:     builder.append(present_reversed);
1:     if (present_reversed)
1:       builder.append(reversed);
1: 
1:     boolean present_count = true && (isSetCount());
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     boolean present_consistency_level = true && (isSetConsistency_level());
1:     builder.append(present_consistency_level);
1:     if (present_consistency_level)
1:       builder.append(consistency_level.getValue());
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   @Override
1:   public int compareTo(MultiSliceRequest other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
1: 
1:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetKey()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(other.isSetColumn_parent());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetColumn_parent()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, other.column_parent);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetColumn_slices()).compareTo(other.isSetColumn_slices());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetColumn_slices()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_slices, other.column_slices);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetReversed()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetCount()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(other.isSetConsistency_level());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetConsistency_level()) {
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, other.consistency_level);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("MultiSliceRequest(");
1:     boolean first = true;
1: 
1:     if (isSetKey()) {
1:       sb.append("key:");
1:       if (this.key == null) {
1:         sb.append("null");
1:       } else {
1:         org.apache.thrift.TBaseHelper.toString(this.key, sb);
1:       }
1:       first = false;
1:     }
1:     if (isSetColumn_parent()) {
1:       if (!first) sb.append(", ");
1:       sb.append("column_parent:");
1:       if (this.column_parent == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.column_parent);
1:       }
1:       first = false;
1:     }
1:     if (isSetColumn_slices()) {
1:       if (!first) sb.append(", ");
1:       sb.append("column_slices:");
1:       if (this.column_slices == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.column_slices);
1:       }
1:       first = false;
1:     }
1:     if (isSetReversed()) {
1:       if (!first) sb.append(", ");
1:       sb.append("reversed:");
1:       sb.append(this.reversed);
1:       first = false;
1:     }
1:     if (isSetCount()) {
1:       if (!first) sb.append(", ");
1:       sb.append("count:");
1:       sb.append(this.count);
1:       first = false;
1:     }
1:     if (isSetConsistency_level()) {
1:       if (!first) sb.append(", ");
1:       sb.append("consistency_level:");
1:       if (this.consistency_level == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.consistency_level);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     // check for sub-struct validity
1:     if (column_parent != null) {
1:       column_parent.validate();
1:     }
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:       __isset_bitfield = 0;
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private static class MultiSliceRequestStandardSchemeFactory implements SchemeFactory {
1:     public MultiSliceRequestStandardScheme getScheme() {
1:       return new MultiSliceRequestStandardScheme();
1:     }
1:   }
1: 
1:   private static class MultiSliceRequestStandardScheme extends StandardScheme<MultiSliceRequest> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.key = iprot.readBinary();
1:               struct.setKeyIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // COLUMN_PARENT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.column_parent = new ColumnParent();
1:               struct.column_parent.read(iprot);
1:               struct.setColumn_parentIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 3: // COLUMN_SLICES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
1:                 struct.column_slices = new ArrayList<ColumnSlice>(_list216.size);
1:                 for (int _i217 = 0; _i217 < _list216.size; ++_i217)
1:                 {
1:                   ColumnSlice _elem218;
1:                   _elem218 = new ColumnSlice();
1:                   _elem218.read(iprot);
1:                   struct.column_slices.add(_elem218);
1:                 }
1:                 iprot.readListEnd();
1:               }
1:               struct.setColumn_slicesIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 4: // REVERSED
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.reversed = iprot.readBool();
1:               struct.setReversedIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 5: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 6: // CONSISTENCY_LEVEL
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
1:               struct.setConsistency_levelIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.key != null) {
1:         if (struct.isSetKey()) {
1:           oprot.writeFieldBegin(KEY_FIELD_DESC);
1:           oprot.writeBinary(struct.key);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.column_parent != null) {
1:         if (struct.isSetColumn_parent()) {
1:           oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
1:           struct.column_parent.write(oprot);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.column_slices != null) {
1:         if (struct.isSetColumn_slices()) {
1:           oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_slices.size()));
1:             for (ColumnSlice _iter219 : struct.column_slices)
1:             {
1:               _iter219.write(oprot);
1:             }
1:             oprot.writeListEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.isSetReversed()) {
1:         oprot.writeFieldBegin(REVERSED_FIELD_DESC);
1:         oprot.writeBool(struct.reversed);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.isSetCount()) {
1:         oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:         oprot.writeI32(struct.count);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.consistency_level != null) {
1:         if (struct.isSetConsistency_level()) {
1:           oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
1:           oprot.writeI32(struct.consistency_level.getValue());
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class MultiSliceRequestTupleSchemeFactory implements SchemeFactory {
1:     public MultiSliceRequestTupleScheme getScheme() {
1:       return new MultiSliceRequestTupleScheme();
1:     }
1:   }
1: 
1:   private static class MultiSliceRequestTupleScheme extends TupleScheme<MultiSliceRequest> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetKey()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetColumn_parent()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetColumn_slices()) {
1:         optionals.set(2);
1:       }
1:       if (struct.isSetReversed()) {
1:         optionals.set(3);
1:       }
1:       if (struct.isSetCount()) {
1:         optionals.set(4);
1:       }
1:       if (struct.isSetConsistency_level()) {
1:         optionals.set(5);
1:       }
1:       oprot.writeBitSet(optionals, 6);
1:       if (struct.isSetKey()) {
1:         oprot.writeBinary(struct.key);
1:       }
1:       if (struct.isSetColumn_parent()) {
1:         struct.column_parent.write(oprot);
1:       }
1:       if (struct.isSetColumn_slices()) {
1:         {
1:           oprot.writeI32(struct.column_slices.size());
1:           for (ColumnSlice _iter220 : struct.column_slices)
1:           {
1:             _iter220.write(oprot);
1:           }
1:         }
1:       }
1:       if (struct.isSetReversed()) {
1:         oprot.writeBool(struct.reversed);
1:       }
1:       if (struct.isSetCount()) {
1:         oprot.writeI32(struct.count);
1:       }
1:       if (struct.isSetConsistency_level()) {
1:         oprot.writeI32(struct.consistency_level.getValue());
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(6);
1:       if (incoming.get(0)) {
1:         struct.key = iprot.readBinary();
1:         struct.setKeyIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.column_parent = new ColumnParent();
1:         struct.column_parent.read(iprot);
1:         struct.setColumn_parentIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         {
1:           org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:           struct.column_slices = new ArrayList<ColumnSlice>(_list221.size);
1:           for (int _i222 = 0; _i222 < _list221.size; ++_i222)
1:           {
1:             ColumnSlice _elem223;
1:             _elem223 = new ColumnSlice();
1:             _elem223.read(iprot);
1:             struct.column_slices.add(_elem223);
1:           }
1:         }
1:         struct.setColumn_slicesIsSet(true);
1:       }
1:       if (incoming.get(3)) {
1:         struct.reversed = iprot.readBool();
1:         struct.setReversedIsSet(true);
1:       }
1:       if (incoming.get(4)) {
1:         struct.count = iprot.readI32();
1:         struct.setCountIsSet(true);
1:       }
1:       if (incoming.get(5)) {
1:         struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
1:         struct.setConsistency_levelIsSet(true);
1:       }
1:     }
1:   }
1: 
1: }
1: 
commit:3f07025
/////////////////////////////////////////////////////////////////////////
commit:60fb923
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Autogenerated by Thrift Compiler (0.9.1)
0:  *
0:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  *  @generated
0:  */
0: package org.apache.cassandra.thrift;
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: 
0: import org.apache.commons.lang3.builder.HashCodeBuilder;
0: import org.apache.thrift.scheme.IScheme;
0: import org.apache.thrift.scheme.SchemeFactory;
0: import org.apache.thrift.scheme.StandardScheme;
0: 
0: import org.apache.thrift.scheme.TupleScheme;
0: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.EnumSet;
0: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * Used to perform multiple slices on a single row key in one rpc operation
0:  * @param key. The row key to be multi sliced
0:  * @param column_parent. The column family (super columns are unsupported)
0:  * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
0:  * @param reversed. Direction of slice
0:  * @param count. Maximum number of columns
0:  * @param consistency_level. Level to perform the operation at
0:  */
0: public class MultiSliceRequest implements org.apache.thrift.TBase<MultiSliceRequest, MultiSliceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MultiSliceRequest> {
0:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiSliceRequest");
0: 
0:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField COLUMN_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("column_parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
0:   private static final org.apache.thrift.protocol.TField COLUMN_SLICES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_slices", org.apache.thrift.protocol.TType.LIST, (short)3);
0:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)4);
0:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
0:   private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);
0: 
0:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
0:     schemes.put(StandardScheme.class, new MultiSliceRequestStandardSchemeFactory());
0:     schemes.put(TupleScheme.class, new MultiSliceRequestTupleSchemeFactory());
0:   }
0: 
0:   public ByteBuffer key; // optional
0:   public ColumnParent column_parent; // optional
0:   public List<ColumnSlice> column_slices; // optional
0:   public boolean reversed; // optional
0:   public int count; // optional
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public ConsistencyLevel consistency_level; // optional
0: 
0:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
0:     KEY((short)1, "key"),
0:     COLUMN_PARENT((short)2, "column_parent"),
0:     COLUMN_SLICES((short)3, "column_slices"),
0:     REVERSED((short)4, "reversed"),
0:     COUNT((short)5, "count"),
0:     /**
0:      * 
0:      * @see ConsistencyLevel
0:      */
0:     CONSISTENCY_LEVEL((short)6, "consistency_level");
0: 
0:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
0:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, or null if its not found.
0:      */
0:     public static _Fields findByThriftId(int fieldId) {
0:       switch(fieldId) {
0:         case 1: // KEY
0:           return KEY;
0:         case 2: // COLUMN_PARENT
0:           return COLUMN_PARENT;
0:         case 3: // COLUMN_SLICES
0:           return COLUMN_SLICES;
0:         case 4: // REVERSED
0:           return REVERSED;
0:         case 5: // COUNT
0:           return COUNT;
0:         case 6: // CONSISTENCY_LEVEL
0:           return CONSISTENCY_LEVEL;
0:         default:
0:           return null;
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, throwing an exception
0:      * if it is not found.
0:      */
0:     public static _Fields findByThriftIdOrThrow(int fieldId) {
0:       _Fields fields = findByThriftId(fieldId);
0:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
0:       return fields;
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches name, or null if its not found.
0:      */
0:     public static _Fields findByName(String name) {
0:       return byName.get(name);
0:     }
0: 
0:     private final short _thriftId;
0:     private final String _fieldName;
0: 
0:     _Fields(short thriftId, String fieldName) {
0:       _thriftId = thriftId;
0:       _fieldName = fieldName;
0:     }
0: 
0:     public short getThriftFieldId() {
0:       return _thriftId;
0:     }
0: 
0:     public String getFieldName() {
0:       return _fieldName;
0:     }
0:   }
0: 
0:   // isset id assignments
0:   private static final int __REVERSED_ISSET_ID = 0;
0:   private static final int __COUNT_ISSET_ID = 1;
0:   private byte __isset_bitfield = 0;
0:   private _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_PARENT,_Fields.COLUMN_SLICES,_Fields.REVERSED,_Fields.COUNT,_Fields.CONSISTENCY_LEVEL};
0:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
0:   static {
0:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.COLUMN_PARENT, new org.apache.thrift.meta_data.FieldMetaData("column_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnParent.class)));
0:     tmpMap.put(_Fields.COLUMN_SLICES, new org.apache.thrift.meta_data.FieldMetaData("column_slices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
0:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSlice.class))));
0:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
0:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
0:     tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
0:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiSliceRequest.class, metaDataMap);
0:   }
0: 
0:   public MultiSliceRequest() {
0:     this.reversed = false;
0: 
0:     this.count = 1000;
0: 
0:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
0: 
0:   }
0: 
0:   /**
0:    * Performs a deep copy on <i>other</i>.
0:    */
0:   public MultiSliceRequest(MultiSliceRequest other) {
0:     __isset_bitfield = other.__isset_bitfield;
0:     if (other.isSetKey()) {
0:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
0: ;
0:     }
0:     if (other.isSetColumn_parent()) {
0:       this.column_parent = new ColumnParent(other.column_parent);
0:     }
0:     if (other.isSetColumn_slices()) {
0:       List<ColumnSlice> __this__column_slices = new ArrayList<ColumnSlice>(other.column_slices.size());
0:       for (ColumnSlice other_element : other.column_slices) {
0:         __this__column_slices.add(new ColumnSlice(other_element));
0:       }
0:       this.column_slices = __this__column_slices;
0:     }
0:     this.reversed = other.reversed;
0:     this.count = other.count;
0:     if (other.isSetConsistency_level()) {
0:       this.consistency_level = other.consistency_level;
0:     }
0:   }
0: 
0:   public MultiSliceRequest deepCopy() {
0:     return new MultiSliceRequest(this);
0:   }
0: 
0:   @Override
0:   public void clear() {
0:     this.key = null;
0:     this.column_parent = null;
0:     this.column_slices = null;
0:     this.reversed = false;
0: 
0:     this.count = 1000;
0: 
0:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
0: 
0:   }
0: 
0:   public byte[] getKey() {
0:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
0:     return key == null ? null : key.array();
0:   }
0: 
0:   public ByteBuffer bufferForKey() {
0:     return key;
0:   }
0: 
0:   public MultiSliceRequest setKey(byte[] key) {
0:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
0:     return this;
0:   }
0: 
0:   public MultiSliceRequest setKey(ByteBuffer key) {
0:     this.key = key;
0:     return this;
0:   }
0: 
0:   public void unsetKey() {
0:     this.key = null;
0:   }
0: 
0:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
0:   public boolean isSetKey() {
0:     return this.key != null;
0:   }
0: 
0:   public void setKeyIsSet(boolean value) {
0:     if (!value) {
0:       this.key = null;
0:     }
0:   }
0: 
0:   public ColumnParent getColumn_parent() {
0:     return this.column_parent;
0:   }
0: 
0:   public MultiSliceRequest setColumn_parent(ColumnParent column_parent) {
0:     this.column_parent = column_parent;
0:     return this;
0:   }
0: 
0:   public void unsetColumn_parent() {
0:     this.column_parent = null;
0:   }
0: 
0:   /** Returns true if field column_parent is set (has been assigned a value) and false otherwise */
0:   public boolean isSetColumn_parent() {
0:     return this.column_parent != null;
0:   }
0: 
0:   public void setColumn_parentIsSet(boolean value) {
0:     if (!value) {
0:       this.column_parent = null;
0:     }
0:   }
0: 
0:   public int getColumn_slicesSize() {
0:     return (this.column_slices == null) ? 0 : this.column_slices.size();
0:   }
0: 
0:   public java.util.Iterator<ColumnSlice> getColumn_slicesIterator() {
0:     return (this.column_slices == null) ? null : this.column_slices.iterator();
0:   }
0: 
0:   public void addToColumn_slices(ColumnSlice elem) {
0:     if (this.column_slices == null) {
0:       this.column_slices = new ArrayList<ColumnSlice>();
0:     }
0:     this.column_slices.add(elem);
0:   }
0: 
0:   public List<ColumnSlice> getColumn_slices() {
0:     return this.column_slices;
0:   }
0: 
0:   public MultiSliceRequest setColumn_slices(List<ColumnSlice> column_slices) {
0:     this.column_slices = column_slices;
0:     return this;
0:   }
0: 
0:   public void unsetColumn_slices() {
0:     this.column_slices = null;
0:   }
0: 
0:   /** Returns true if field column_slices is set (has been assigned a value) and false otherwise */
0:   public boolean isSetColumn_slices() {
0:     return this.column_slices != null;
0:   }
0: 
0:   public void setColumn_slicesIsSet(boolean value) {
0:     if (!value) {
0:       this.column_slices = null;
0:     }
0:   }
0: 
0:   public boolean isReversed() {
0:     return this.reversed;
0:   }
0: 
0:   public MultiSliceRequest setReversed(boolean reversed) {
0:     this.reversed = reversed;
0:     setReversedIsSet(true);
0:     return this;
0:   }
0: 
0:   public void unsetReversed() {
0:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
0:   }
0: 
0:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
0:   public boolean isSetReversed() {
0:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
0:   }
0: 
0:   public void setReversedIsSet(boolean value) {
0:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
0:   }
0: 
0:   public int getCount() {
0:     return this.count;
0:   }
0: 
0:   public MultiSliceRequest setCount(int count) {
0:     this.count = count;
0:     setCountIsSet(true);
0:     return this;
0:   }
0: 
0:   public void unsetCount() {
0:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
0:   }
0: 
0:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
0:   public boolean isSetCount() {
0:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
0:   }
0: 
0:   public void setCountIsSet(boolean value) {
0:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
0:   }
0: 
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public ConsistencyLevel getConsistency_level() {
0:     return this.consistency_level;
0:   }
0: 
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public MultiSliceRequest setConsistency_level(ConsistencyLevel consistency_level) {
0:     this.consistency_level = consistency_level;
0:     return this;
0:   }
0: 
0:   public void unsetConsistency_level() {
0:     this.consistency_level = null;
0:   }
0: 
0:   /** Returns true if field consistency_level is set (has been assigned a value) and false otherwise */
0:   public boolean isSetConsistency_level() {
0:     return this.consistency_level != null;
0:   }
0: 
0:   public void setConsistency_levelIsSet(boolean value) {
0:     if (!value) {
0:       this.consistency_level = null;
0:     }
0:   }
0: 
0:   public void setFieldValue(_Fields field, Object value) {
0:     switch (field) {
0:     case KEY:
0:       if (value == null) {
0:         unsetKey();
0:       } else {
0:         setKey((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     case COLUMN_PARENT:
0:       if (value == null) {
0:         unsetColumn_parent();
0:       } else {
0:         setColumn_parent((ColumnParent)value);
0:       }
0:       break;
0: 
0:     case COLUMN_SLICES:
0:       if (value == null) {
0:         unsetColumn_slices();
0:       } else {
0:         setColumn_slices((List<ColumnSlice>)value);
0:       }
0:       break;
0: 
0:     case REVERSED:
0:       if (value == null) {
0:         unsetReversed();
0:       } else {
0:         setReversed((Boolean)value);
0:       }
0:       break;
0: 
0:     case COUNT:
0:       if (value == null) {
0:         unsetCount();
0:       } else {
0:         setCount((Integer)value);
0:       }
0:       break;
0: 
0:     case CONSISTENCY_LEVEL:
0:       if (value == null) {
0:         unsetConsistency_level();
0:       } else {
0:         setConsistency_level((ConsistencyLevel)value);
0:       }
0:       break;
0: 
0:     }
0:   }
0: 
0:   public Object getFieldValue(_Fields field) {
0:     switch (field) {
0:     case KEY:
0:       return getKey();
0: 
0:     case COLUMN_PARENT:
0:       return getColumn_parent();
0: 
0:     case COLUMN_SLICES:
0:       return getColumn_slices();
0: 
0:     case REVERSED:
0:       return Boolean.valueOf(isReversed());
0: 
0:     case COUNT:
0:       return Integer.valueOf(getCount());
0: 
0:     case CONSISTENCY_LEVEL:
0:       return getConsistency_level();
0: 
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
0:   public boolean isSet(_Fields field) {
0:     if (field == null) {
0:       throw new IllegalArgumentException();
0:     }
0: 
0:     switch (field) {
0:     case KEY:
0:       return isSetKey();
0:     case COLUMN_PARENT:
0:       return isSetColumn_parent();
0:     case COLUMN_SLICES:
0:       return isSetColumn_slices();
0:     case REVERSED:
0:       return isSetReversed();
0:     case COUNT:
0:       return isSetCount();
0:     case CONSISTENCY_LEVEL:
0:       return isSetConsistency_level();
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   @Override
0:   public boolean equals(Object that) {
0:     if (that == null)
0:       return false;
0:     if (that instanceof MultiSliceRequest)
0:       return this.equals((MultiSliceRequest)that);
0:     return false;
0:   }
0: 
0:   public boolean equals(MultiSliceRequest that) {
0:     if (that == null)
0:       return false;
0: 
0:     boolean this_present_key = true && this.isSetKey();
0:     boolean that_present_key = true && that.isSetKey();
0:     if (this_present_key || that_present_key) {
0:       if (!(this_present_key && that_present_key))
0:         return false;
0:       if (!this.key.equals(that.key))
0:         return false;
0:     }
0: 
0:     boolean this_present_column_parent = true && this.isSetColumn_parent();
0:     boolean that_present_column_parent = true && that.isSetColumn_parent();
0:     if (this_present_column_parent || that_present_column_parent) {
0:       if (!(this_present_column_parent && that_present_column_parent))
0:         return false;
0:       if (!this.column_parent.equals(that.column_parent))
0:         return false;
0:     }
0: 
0:     boolean this_present_column_slices = true && this.isSetColumn_slices();
0:     boolean that_present_column_slices = true && that.isSetColumn_slices();
0:     if (this_present_column_slices || that_present_column_slices) {
0:       if (!(this_present_column_slices && that_present_column_slices))
0:         return false;
0:       if (!this.column_slices.equals(that.column_slices))
0:         return false;
0:     }
0: 
0:     boolean this_present_reversed = true && this.isSetReversed();
0:     boolean that_present_reversed = true && that.isSetReversed();
0:     if (this_present_reversed || that_present_reversed) {
0:       if (!(this_present_reversed && that_present_reversed))
0:         return false;
0:       if (this.reversed != that.reversed)
0:         return false;
0:     }
0: 
0:     boolean this_present_count = true && this.isSetCount();
0:     boolean that_present_count = true && that.isSetCount();
0:     if (this_present_count || that_present_count) {
0:       if (!(this_present_count && that_present_count))
0:         return false;
0:       if (this.count != that.count)
0:         return false;
0:     }
0: 
0:     boolean this_present_consistency_level = true && this.isSetConsistency_level();
0:     boolean that_present_consistency_level = true && that.isSetConsistency_level();
0:     if (this_present_consistency_level || that_present_consistency_level) {
0:       if (!(this_present_consistency_level && that_present_consistency_level))
0:         return false;
0:       if (!this.consistency_level.equals(that.consistency_level))
0:         return false;
0:     }
0: 
0:     return true;
0:   }
0: 
0:   @Override
0:   public int hashCode() {
0:     HashCodeBuilder builder = new HashCodeBuilder();
0: 
0:     boolean present_key = true && (isSetKey());
0:     builder.append(present_key);
0:     if (present_key)
0:       builder.append(key);
0: 
0:     boolean present_column_parent = true && (isSetColumn_parent());
0:     builder.append(present_column_parent);
0:     if (present_column_parent)
0:       builder.append(column_parent);
0: 
0:     boolean present_column_slices = true && (isSetColumn_slices());
0:     builder.append(present_column_slices);
0:     if (present_column_slices)
0:       builder.append(column_slices);
0: 
0:     boolean present_reversed = true && (isSetReversed());
0:     builder.append(present_reversed);
0:     if (present_reversed)
0:       builder.append(reversed);
0: 
0:     boolean present_count = true && (isSetCount());
0:     builder.append(present_count);
0:     if (present_count)
0:       builder.append(count);
0: 
0:     boolean present_consistency_level = true && (isSetConsistency_level());
0:     builder.append(present_consistency_level);
0:     if (present_consistency_level)
0:       builder.append(consistency_level.getValue());
0: 
0:     return builder.toHashCode();
0:   }
0: 
0:   @Override
0:   public int compareTo(MultiSliceRequest other) {
0:     if (!getClass().equals(other.getClass())) {
0:       return getClass().getName().compareTo(other.getClass().getName());
0:     }
0: 
0:     int lastComparison = 0;
0: 
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetKey()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(other.isSetColumn_parent());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetColumn_parent()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, other.column_parent);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetColumn_slices()).compareTo(other.isSetColumn_slices());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetColumn_slices()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_slices, other.column_slices);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetReversed()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetCount()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(other.isSetConsistency_level());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetConsistency_level()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, other.consistency_level);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     return 0;
0:   }
0: 
0:   public _Fields fieldForId(int fieldId) {
0:     return _Fields.findByThriftId(fieldId);
0:   }
0: 
0:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
0:   }
0: 
0:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
0:   }
0: 
0:   @Override
0:   public String toString() {
0:     StringBuilder sb = new StringBuilder("MultiSliceRequest(");
0:     boolean first = true;
0: 
0:     if (isSetKey()) {
0:       sb.append("key:");
0:       if (this.key == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.key, sb);
0:       }
0:       first = false;
0:     }
0:     if (isSetColumn_parent()) {
0:       if (!first) sb.append(", ");
0:       sb.append("column_parent:");
0:       if (this.column_parent == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.column_parent);
0:       }
0:       first = false;
0:     }
0:     if (isSetColumn_slices()) {
0:       if (!first) sb.append(", ");
0:       sb.append("column_slices:");
0:       if (this.column_slices == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.column_slices);
0:       }
0:       first = false;
0:     }
0:     if (isSetReversed()) {
0:       if (!first) sb.append(", ");
0:       sb.append("reversed:");
0:       sb.append(this.reversed);
0:       first = false;
0:     }
0:     if (isSetCount()) {
0:       if (!first) sb.append(", ");
0:       sb.append("count:");
0:       sb.append(this.count);
0:       first = false;
0:     }
0:     if (isSetConsistency_level()) {
0:       if (!first) sb.append(", ");
0:       sb.append("consistency_level:");
0:       if (this.consistency_level == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.consistency_level);
0:       }
0:       first = false;
0:     }
0:     sb.append(")");
0:     return sb.toString();
0:   }
0: 
0:   public void validate() throws org.apache.thrift.TException {
0:     // check for required fields
0:     // check for sub-struct validity
0:     if (column_parent != null) {
0:       column_parent.validate();
0:     }
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bitfield = 0;
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestStandardSchemeFactory implements SchemeFactory {
0:     public MultiSliceRequestStandardScheme getScheme() {
0:       return new MultiSliceRequestStandardScheme();
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestStandardScheme extends StandardScheme<MultiSliceRequest> {
0: 
0:     public void read(org.apache.thrift.protocol.TProtocol iprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
0:         schemeField = iprot.readFieldBegin();
0:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
0:         switch (schemeField.id) {
0:           case 1: // KEY
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.key = iprot.readBinary();
0:               struct.setKeyIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // COLUMN_PARENT
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
0:               struct.column_parent = new ColumnParent();
0:               struct.column_parent.read(iprot);
0:               struct.setColumn_parentIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 3: // COLUMN_SLICES
0:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
0:               {
0:                 org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
0:                 struct.column_slices = new ArrayList<ColumnSlice>(_list216.size);
0:                 for (int _i217 = 0; _i217 < _list216.size; ++_i217)
0:                 {
0:                   ColumnSlice _elem218;
0:                   _elem218 = new ColumnSlice();
0:                   _elem218.read(iprot);
0:                   struct.column_slices.add(_elem218);
0:                 }
0:                 iprot.readListEnd();
0:               }
0:               struct.setColumn_slicesIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 4: // REVERSED
0:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
0:               struct.reversed = iprot.readBool();
0:               struct.setReversedIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 5: // COUNT
0:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
0:               struct.count = iprot.readI32();
0:               struct.setCountIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 6: // CONSISTENCY_LEVEL
0:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
0:               struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
0:               struct.setConsistency_levelIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
0:       struct.validate();
0:     }
0: 
0:     public void write(org.apache.thrift.protocol.TProtocol oprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
0:       if (struct.key != null) {
0:         if (struct.isSetKey()) {
0:           oprot.writeFieldBegin(KEY_FIELD_DESC);
0:           oprot.writeBinary(struct.key);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.column_parent != null) {
0:         if (struct.isSetColumn_parent()) {
0:           oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
0:           struct.column_parent.write(oprot);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.column_slices != null) {
0:         if (struct.isSetColumn_slices()) {
0:           oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
0:           {
0:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_slices.size()));
0:             for (ColumnSlice _iter219 : struct.column_slices)
0:             {
0:               _iter219.write(oprot);
0:             }
0:             oprot.writeListEnd();
0:           }
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.isSetReversed()) {
0:         oprot.writeFieldBegin(REVERSED_FIELD_DESC);
0:         oprot.writeBool(struct.reversed);
0:         oprot.writeFieldEnd();
0:       }
0:       if (struct.isSetCount()) {
0:         oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:         oprot.writeI32(struct.count);
0:         oprot.writeFieldEnd();
0:       }
0:       if (struct.consistency_level != null) {
0:         if (struct.isSetConsistency_level()) {
0:           oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
0:           oprot.writeI32(struct.consistency_level.getValue());
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
0:   private static class MultiSliceRequestTupleSchemeFactory implements SchemeFactory {
0:     public MultiSliceRequestTupleScheme getScheme() {
0:       return new MultiSliceRequestTupleScheme();
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestTupleScheme extends TupleScheme<MultiSliceRequest> {
0: 
0:     @Override
0:     public void write(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       TTupleProtocol oprot = (TTupleProtocol) prot;
0:       BitSet optionals = new BitSet();
0:       if (struct.isSetKey()) {
0:         optionals.set(0);
0:       }
0:       if (struct.isSetColumn_parent()) {
0:         optionals.set(1);
0:       }
0:       if (struct.isSetColumn_slices()) {
0:         optionals.set(2);
0:       }
0:       if (struct.isSetReversed()) {
0:         optionals.set(3);
0:       }
0:       if (struct.isSetCount()) {
0:         optionals.set(4);
0:       }
0:       if (struct.isSetConsistency_level()) {
0:         optionals.set(5);
0:       }
0:       oprot.writeBitSet(optionals, 6);
0:       if (struct.isSetKey()) {
0:         oprot.writeBinary(struct.key);
0:       }
0:       if (struct.isSetColumn_parent()) {
0:         struct.column_parent.write(oprot);
0:       }
0:       if (struct.isSetColumn_slices()) {
0:         {
0:           oprot.writeI32(struct.column_slices.size());
0:           for (ColumnSlice _iter220 : struct.column_slices)
0:           {
0:             _iter220.write(oprot);
0:           }
0:         }
0:       }
0:       if (struct.isSetReversed()) {
0:         oprot.writeBool(struct.reversed);
0:       }
0:       if (struct.isSetCount()) {
0:         oprot.writeI32(struct.count);
0:       }
0:       if (struct.isSetConsistency_level()) {
0:         oprot.writeI32(struct.consistency_level.getValue());
0:       }
0:     }
0: 
0:     @Override
0:     public void read(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       TTupleProtocol iprot = (TTupleProtocol) prot;
0:       BitSet incoming = iprot.readBitSet(6);
0:       if (incoming.get(0)) {
0:         struct.key = iprot.readBinary();
0:         struct.setKeyIsSet(true);
0:       }
0:       if (incoming.get(1)) {
0:         struct.column_parent = new ColumnParent();
0:         struct.column_parent.read(iprot);
0:         struct.setColumn_parentIsSet(true);
0:       }
0:       if (incoming.get(2)) {
0:         {
0:           org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.column_slices = new ArrayList<ColumnSlice>(_list221.size);
0:           for (int _i222 = 0; _i222 < _list221.size; ++_i222)
0:           {
0:             ColumnSlice _elem223;
0:             _elem223 = new ColumnSlice();
0:             _elem223.read(iprot);
0:             struct.column_slices.add(_elem223);
0:           }
0:         }
0:         struct.setColumn_slicesIsSet(true);
0:       }
0:       if (incoming.get(3)) {
0:         struct.reversed = iprot.readBool();
0:         struct.setReversedIsSet(true);
0:       }
0:       if (incoming.get(4)) {
0:         struct.count = iprot.readI32();
0:         struct.setCountIsSet(true);
0:       }
0:       if (incoming.get(5)) {
0:         struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
0:         struct.setConsistency_levelIsSet(true);
0:       }
0:     }
0:   }
0: 
0: }
0: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:7f63b1f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Autogenerated by Thrift Compiler (0.9.1)
0:  *
0:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  *  @generated
0:  */
0: package org.apache.cassandra.thrift;
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: 
0: import org.apache.commons.lang3.builder.HashCodeBuilder;
0: import org.apache.thrift.scheme.IScheme;
0: import org.apache.thrift.scheme.SchemeFactory;
0: import org.apache.thrift.scheme.StandardScheme;
0: 
0: import org.apache.thrift.scheme.TupleScheme;
0: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.EnumSet;
0: import java.util.Collections;
0: import java.util.BitSet;
0: import java.nio.ByteBuffer;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * Used to perform multiple slices on a single row key in one rpc operation
0:  * @param key. The row key to be multi sliced
0:  * @param column_parent. The column family (super columns are unsupported)
0:  * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
0:  * @param reversed. Direction of slice
0:  * @param count. Maximum number of columns
0:  * @param consistency_level. Level to perform the operation at
0:  */
0: public class MultiSliceRequest implements org.apache.thrift.TBase<MultiSliceRequest, MultiSliceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MultiSliceRequest> {
0:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiSliceRequest");
0: 
0:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
0:   private static final org.apache.thrift.protocol.TField COLUMN_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("column_parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
0:   private static final org.apache.thrift.protocol.TField COLUMN_SLICES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_slices", org.apache.thrift.protocol.TType.LIST, (short)3);
0:   private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)4);
0:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
0:   private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);
0: 
0:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
0:     schemes.put(StandardScheme.class, new MultiSliceRequestStandardSchemeFactory());
0:     schemes.put(TupleScheme.class, new MultiSliceRequestTupleSchemeFactory());
0:   }
0: 
0:   public ByteBuffer key; // optional
0:   public ColumnParent column_parent; // optional
0:   public List<ColumnSlice> column_slices; // optional
0:   public boolean reversed; // optional
0:   public int count; // optional
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public ConsistencyLevel consistency_level; // optional
0: 
0:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
0:     KEY((short)1, "key"),
0:     COLUMN_PARENT((short)2, "column_parent"),
0:     COLUMN_SLICES((short)3, "column_slices"),
0:     REVERSED((short)4, "reversed"),
0:     COUNT((short)5, "count"),
0:     /**
0:      * 
0:      * @see ConsistencyLevel
0:      */
0:     CONSISTENCY_LEVEL((short)6, "consistency_level");
0: 
0:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
0:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, or null if its not found.
0:      */
0:     public static _Fields findByThriftId(int fieldId) {
0:       switch(fieldId) {
0:         case 1: // KEY
0:           return KEY;
0:         case 2: // COLUMN_PARENT
0:           return COLUMN_PARENT;
0:         case 3: // COLUMN_SLICES
0:           return COLUMN_SLICES;
0:         case 4: // REVERSED
0:           return REVERSED;
0:         case 5: // COUNT
0:           return COUNT;
0:         case 6: // CONSISTENCY_LEVEL
0:           return CONSISTENCY_LEVEL;
0:         default:
0:           return null;
0:       }
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches fieldId, throwing an exception
0:      * if it is not found.
0:      */
0:     public static _Fields findByThriftIdOrThrow(int fieldId) {
0:       _Fields fields = findByThriftId(fieldId);
0:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
0:       return fields;
0:     }
0: 
0:     /**
0:      * Find the _Fields constant that matches name, or null if its not found.
0:      */
0:     public static _Fields findByName(String name) {
0:       return byName.get(name);
0:     }
0: 
0:     private final short _thriftId;
0:     private final String _fieldName;
0: 
0:     _Fields(short thriftId, String fieldName) {
0:       _thriftId = thriftId;
0:       _fieldName = fieldName;
0:     }
0: 
0:     public short getThriftFieldId() {
0:       return _thriftId;
0:     }
0: 
0:     public String getFieldName() {
0:       return _fieldName;
0:     }
0:   }
0: 
0:   // isset id assignments
0:   private static final int __REVERSED_ISSET_ID = 0;
0:   private static final int __COUNT_ISSET_ID = 1;
0:   private byte __isset_bitfield = 0;
0:   private _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_PARENT,_Fields.COLUMN_SLICES,_Fields.REVERSED,_Fields.COUNT,_Fields.CONSISTENCY_LEVEL};
0:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
0:   static {
0:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
0:     tmpMap.put(_Fields.COLUMN_PARENT, new org.apache.thrift.meta_data.FieldMetaData("column_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnParent.class)));
0:     tmpMap.put(_Fields.COLUMN_SLICES, new org.apache.thrift.meta_data.FieldMetaData("column_slices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
0:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSlice.class))));
0:     tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
0:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
0:     tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
0:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
0:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiSliceRequest.class, metaDataMap);
0:   }
0: 
0:   public MultiSliceRequest() {
0:     this.reversed = false;
0: 
0:     this.count = 1000;
0: 
0:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
0: 
0:   }
0: 
0:   /**
0:    * Performs a deep copy on <i>other</i>.
0:    */
0:   public MultiSliceRequest(MultiSliceRequest other) {
0:     __isset_bitfield = other.__isset_bitfield;
0:     if (other.isSetKey()) {
0:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
0: ;
0:     }
0:     if (other.isSetColumn_parent()) {
0:       this.column_parent = new ColumnParent(other.column_parent);
0:     }
0:     if (other.isSetColumn_slices()) {
0:       List<ColumnSlice> __this__column_slices = new ArrayList<ColumnSlice>(other.column_slices.size());
0:       for (ColumnSlice other_element : other.column_slices) {
0:         __this__column_slices.add(new ColumnSlice(other_element));
0:       }
0:       this.column_slices = __this__column_slices;
0:     }
0:     this.reversed = other.reversed;
0:     this.count = other.count;
0:     if (other.isSetConsistency_level()) {
0:       this.consistency_level = other.consistency_level;
0:     }
0:   }
0: 
0:   public MultiSliceRequest deepCopy() {
0:     return new MultiSliceRequest(this);
0:   }
0: 
0:   @Override
0:   public void clear() {
0:     this.key = null;
0:     this.column_parent = null;
0:     this.column_slices = null;
0:     this.reversed = false;
0: 
0:     this.count = 1000;
0: 
0:     this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;
0: 
0:   }
0: 
0:   public byte[] getKey() {
0:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
0:     return key == null ? null : key.array();
0:   }
0: 
0:   public ByteBuffer bufferForKey() {
0:     return key;
0:   }
0: 
0:   public MultiSliceRequest setKey(byte[] key) {
0:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
0:     return this;
0:   }
0: 
0:   public MultiSliceRequest setKey(ByteBuffer key) {
0:     this.key = key;
0:     return this;
0:   }
0: 
0:   public void unsetKey() {
0:     this.key = null;
0:   }
0: 
0:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
0:   public boolean isSetKey() {
0:     return this.key != null;
0:   }
0: 
0:   public void setKeyIsSet(boolean value) {
0:     if (!value) {
0:       this.key = null;
0:     }
0:   }
0: 
0:   public ColumnParent getColumn_parent() {
0:     return this.column_parent;
0:   }
0: 
0:   public MultiSliceRequest setColumn_parent(ColumnParent column_parent) {
0:     this.column_parent = column_parent;
0:     return this;
0:   }
0: 
0:   public void unsetColumn_parent() {
0:     this.column_parent = null;
0:   }
0: 
0:   /** Returns true if field column_parent is set (has been assigned a value) and false otherwise */
0:   public boolean isSetColumn_parent() {
0:     return this.column_parent != null;
0:   }
0: 
0:   public void setColumn_parentIsSet(boolean value) {
0:     if (!value) {
0:       this.column_parent = null;
0:     }
0:   }
0: 
0:   public int getColumn_slicesSize() {
0:     return (this.column_slices == null) ? 0 : this.column_slices.size();
0:   }
0: 
0:   public java.util.Iterator<ColumnSlice> getColumn_slicesIterator() {
0:     return (this.column_slices == null) ? null : this.column_slices.iterator();
0:   }
0: 
0:   public void addToColumn_slices(ColumnSlice elem) {
0:     if (this.column_slices == null) {
0:       this.column_slices = new ArrayList<ColumnSlice>();
0:     }
0:     this.column_slices.add(elem);
0:   }
0: 
0:   public List<ColumnSlice> getColumn_slices() {
0:     return this.column_slices;
0:   }
0: 
0:   public MultiSliceRequest setColumn_slices(List<ColumnSlice> column_slices) {
0:     this.column_slices = column_slices;
0:     return this;
0:   }
0: 
0:   public void unsetColumn_slices() {
0:     this.column_slices = null;
0:   }
0: 
0:   /** Returns true if field column_slices is set (has been assigned a value) and false otherwise */
0:   public boolean isSetColumn_slices() {
0:     return this.column_slices != null;
0:   }
0: 
0:   public void setColumn_slicesIsSet(boolean value) {
0:     if (!value) {
0:       this.column_slices = null;
0:     }
0:   }
0: 
0:   public boolean isReversed() {
0:     return this.reversed;
0:   }
0: 
0:   public MultiSliceRequest setReversed(boolean reversed) {
0:     this.reversed = reversed;
0:     setReversedIsSet(true);
0:     return this;
0:   }
0: 
0:   public void unsetReversed() {
0:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
0:   }
0: 
0:   /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
0:   public boolean isSetReversed() {
0:     return EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
0:   }
0: 
0:   public void setReversedIsSet(boolean value) {
0:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
0:   }
0: 
0:   public int getCount() {
0:     return this.count;
0:   }
0: 
0:   public MultiSliceRequest setCount(int count) {
0:     this.count = count;
0:     setCountIsSet(true);
0:     return this;
0:   }
0: 
0:   public void unsetCount() {
0:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
0:   }
0: 
0:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
0:   public boolean isSetCount() {
0:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
0:   }
0: 
0:   public void setCountIsSet(boolean value) {
0:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
0:   }
0: 
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public ConsistencyLevel getConsistency_level() {
0:     return this.consistency_level;
0:   }
0: 
0:   /**
0:    * 
0:    * @see ConsistencyLevel
0:    */
0:   public MultiSliceRequest setConsistency_level(ConsistencyLevel consistency_level) {
0:     this.consistency_level = consistency_level;
0:     return this;
0:   }
0: 
0:   public void unsetConsistency_level() {
0:     this.consistency_level = null;
0:   }
0: 
0:   /** Returns true if field consistency_level is set (has been assigned a value) and false otherwise */
0:   public boolean isSetConsistency_level() {
0:     return this.consistency_level != null;
0:   }
0: 
0:   public void setConsistency_levelIsSet(boolean value) {
0:     if (!value) {
0:       this.consistency_level = null;
0:     }
0:   }
0: 
0:   public void setFieldValue(_Fields field, Object value) {
0:     switch (field) {
0:     case KEY:
0:       if (value == null) {
0:         unsetKey();
0:       } else {
0:         setKey((ByteBuffer)value);
0:       }
0:       break;
0: 
0:     case COLUMN_PARENT:
0:       if (value == null) {
0:         unsetColumn_parent();
0:       } else {
0:         setColumn_parent((ColumnParent)value);
0:       }
0:       break;
0: 
0:     case COLUMN_SLICES:
0:       if (value == null) {
0:         unsetColumn_slices();
0:       } else {
0:         setColumn_slices((List<ColumnSlice>)value);
0:       }
0:       break;
0: 
0:     case REVERSED:
0:       if (value == null) {
0:         unsetReversed();
0:       } else {
0:         setReversed((Boolean)value);
0:       }
0:       break;
0: 
0:     case COUNT:
0:       if (value == null) {
0:         unsetCount();
0:       } else {
0:         setCount((Integer)value);
0:       }
0:       break;
0: 
0:     case CONSISTENCY_LEVEL:
0:       if (value == null) {
0:         unsetConsistency_level();
0:       } else {
0:         setConsistency_level((ConsistencyLevel)value);
0:       }
0:       break;
0: 
0:     }
0:   }
0: 
0:   public Object getFieldValue(_Fields field) {
0:     switch (field) {
0:     case KEY:
0:       return getKey();
0: 
0:     case COLUMN_PARENT:
0:       return getColumn_parent();
0: 
0:     case COLUMN_SLICES:
0:       return getColumn_slices();
0: 
0:     case REVERSED:
0:       return Boolean.valueOf(isReversed());
0: 
0:     case COUNT:
0:       return Integer.valueOf(getCount());
0: 
0:     case CONSISTENCY_LEVEL:
0:       return getConsistency_level();
0: 
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
0:   public boolean isSet(_Fields field) {
0:     if (field == null) {
0:       throw new IllegalArgumentException();
0:     }
0: 
0:     switch (field) {
0:     case KEY:
0:       return isSetKey();
0:     case COLUMN_PARENT:
0:       return isSetColumn_parent();
0:     case COLUMN_SLICES:
0:       return isSetColumn_slices();
0:     case REVERSED:
0:       return isSetReversed();
0:     case COUNT:
0:       return isSetCount();
0:     case CONSISTENCY_LEVEL:
0:       return isSetConsistency_level();
0:     }
0:     throw new IllegalStateException();
0:   }
0: 
0:   @Override
0:   public boolean equals(Object that) {
0:     if (that == null)
0:       return false;
0:     if (that instanceof MultiSliceRequest)
0:       return this.equals((MultiSliceRequest)that);
0:     return false;
0:   }
0: 
0:   public boolean equals(MultiSliceRequest that) {
0:     if (that == null)
0:       return false;
0: 
0:     boolean this_present_key = true && this.isSetKey();
0:     boolean that_present_key = true && that.isSetKey();
0:     if (this_present_key || that_present_key) {
0:       if (!(this_present_key && that_present_key))
0:         return false;
0:       if (!this.key.equals(that.key))
0:         return false;
0:     }
0: 
0:     boolean this_present_column_parent = true && this.isSetColumn_parent();
0:     boolean that_present_column_parent = true && that.isSetColumn_parent();
0:     if (this_present_column_parent || that_present_column_parent) {
0:       if (!(this_present_column_parent && that_present_column_parent))
0:         return false;
0:       if (!this.column_parent.equals(that.column_parent))
0:         return false;
0:     }
0: 
0:     boolean this_present_column_slices = true && this.isSetColumn_slices();
0:     boolean that_present_column_slices = true && that.isSetColumn_slices();
0:     if (this_present_column_slices || that_present_column_slices) {
0:       if (!(this_present_column_slices && that_present_column_slices))
0:         return false;
0:       if (!this.column_slices.equals(that.column_slices))
0:         return false;
0:     }
0: 
0:     boolean this_present_reversed = true && this.isSetReversed();
0:     boolean that_present_reversed = true && that.isSetReversed();
0:     if (this_present_reversed || that_present_reversed) {
0:       if (!(this_present_reversed && that_present_reversed))
0:         return false;
0:       if (this.reversed != that.reversed)
0:         return false;
0:     }
0: 
0:     boolean this_present_count = true && this.isSetCount();
0:     boolean that_present_count = true && that.isSetCount();
0:     if (this_present_count || that_present_count) {
0:       if (!(this_present_count && that_present_count))
0:         return false;
0:       if (this.count != that.count)
0:         return false;
0:     }
0: 
0:     boolean this_present_consistency_level = true && this.isSetConsistency_level();
0:     boolean that_present_consistency_level = true && that.isSetConsistency_level();
0:     if (this_present_consistency_level || that_present_consistency_level) {
0:       if (!(this_present_consistency_level && that_present_consistency_level))
0:         return false;
0:       if (!this.consistency_level.equals(that.consistency_level))
0:         return false;
0:     }
0: 
0:     return true;
0:   }
0: 
0:   @Override
0:   public int hashCode() {
0:     HashCodeBuilder builder = new HashCodeBuilder();
0: 
0:     boolean present_key = true && (isSetKey());
0:     builder.append(present_key);
0:     if (present_key)
0:       builder.append(key);
0: 
0:     boolean present_column_parent = true && (isSetColumn_parent());
0:     builder.append(present_column_parent);
0:     if (present_column_parent)
0:       builder.append(column_parent);
0: 
0:     boolean present_column_slices = true && (isSetColumn_slices());
0:     builder.append(present_column_slices);
0:     if (present_column_slices)
0:       builder.append(column_slices);
0: 
0:     boolean present_reversed = true && (isSetReversed());
0:     builder.append(present_reversed);
0:     if (present_reversed)
0:       builder.append(reversed);
0: 
0:     boolean present_count = true && (isSetCount());
0:     builder.append(present_count);
0:     if (present_count)
0:       builder.append(count);
0: 
0:     boolean present_consistency_level = true && (isSetConsistency_level());
0:     builder.append(present_consistency_level);
0:     if (present_consistency_level)
0:       builder.append(consistency_level.getValue());
0: 
0:     return builder.toHashCode();
0:   }
0: 
0:   @Override
0:   public int compareTo(MultiSliceRequest other) {
0:     if (!getClass().equals(other.getClass())) {
0:       return getClass().getName().compareTo(other.getClass().getName());
0:     }
0: 
0:     int lastComparison = 0;
0: 
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetKey()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(other.isSetColumn_parent());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetColumn_parent()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, other.column_parent);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetColumn_slices()).compareTo(other.isSetColumn_slices());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetColumn_slices()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_slices, other.column_slices);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetReversed()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetCount()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(other.isSetConsistency_level());
0:     if (lastComparison != 0) {
0:       return lastComparison;
0:     }
0:     if (isSetConsistency_level()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, other.consistency_level);
0:       if (lastComparison != 0) {
0:         return lastComparison;
0:       }
0:     }
0:     return 0;
0:   }
0: 
0:   public _Fields fieldForId(int fieldId) {
0:     return _Fields.findByThriftId(fieldId);
0:   }
0: 
0:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
0:   }
0: 
0:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
0:   }
0: 
0:   @Override
0:   public String toString() {
0:     StringBuilder sb = new StringBuilder("MultiSliceRequest(");
0:     boolean first = true;
0: 
0:     if (isSetKey()) {
0:       sb.append("key:");
0:       if (this.key == null) {
0:         sb.append("null");
0:       } else {
0:         org.apache.thrift.TBaseHelper.toString(this.key, sb);
0:       }
0:       first = false;
0:     }
0:     if (isSetColumn_parent()) {
0:       if (!first) sb.append(", ");
0:       sb.append("column_parent:");
0:       if (this.column_parent == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.column_parent);
0:       }
0:       first = false;
0:     }
0:     if (isSetColumn_slices()) {
0:       if (!first) sb.append(", ");
0:       sb.append("column_slices:");
0:       if (this.column_slices == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.column_slices);
0:       }
0:       first = false;
0:     }
0:     if (isSetReversed()) {
0:       if (!first) sb.append(", ");
0:       sb.append("reversed:");
0:       sb.append(this.reversed);
0:       first = false;
0:     }
0:     if (isSetCount()) {
0:       if (!first) sb.append(", ");
0:       sb.append("count:");
0:       sb.append(this.count);
0:       first = false;
0:     }
0:     if (isSetConsistency_level()) {
0:       if (!first) sb.append(", ");
0:       sb.append("consistency_level:");
0:       if (this.consistency_level == null) {
0:         sb.append("null");
0:       } else {
0:         sb.append(this.consistency_level);
0:       }
0:       first = false;
0:     }
0:     sb.append(")");
0:     return sb.toString();
0:   }
0: 
0:   public void validate() throws org.apache.thrift.TException {
0:     // check for required fields
0:     // check for sub-struct validity
0:     if (column_parent != null) {
0:       column_parent.validate();
0:     }
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bitfield = 0;
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestStandardSchemeFactory implements SchemeFactory {
0:     public MultiSliceRequestStandardScheme getScheme() {
0:       return new MultiSliceRequestStandardScheme();
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestStandardScheme extends StandardScheme<MultiSliceRequest> {
0: 
0:     public void read(org.apache.thrift.protocol.TProtocol iprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
0:         schemeField = iprot.readFieldBegin();
0:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
0:         switch (schemeField.id) {
0:           case 1: // KEY
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
0:               struct.key = iprot.readBinary();
0:               struct.setKeyIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // COLUMN_PARENT
0:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
0:               struct.column_parent = new ColumnParent();
0:               struct.column_parent.read(iprot);
0:               struct.setColumn_parentIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 3: // COLUMN_SLICES
0:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
0:               {
0:                 org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
0:                 struct.column_slices = new ArrayList<ColumnSlice>(_list216.size);
0:                 for (int _i217 = 0; _i217 < _list216.size; ++_i217)
0:                 {
0:                   ColumnSlice _elem218;
0:                   _elem218 = new ColumnSlice();
0:                   _elem218.read(iprot);
0:                   struct.column_slices.add(_elem218);
0:                 }
0:                 iprot.readListEnd();
0:               }
0:               struct.setColumn_slicesIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 4: // REVERSED
0:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
0:               struct.reversed = iprot.readBool();
0:               struct.setReversedIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 5: // COUNT
0:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
0:               struct.count = iprot.readI32();
0:               struct.setCountIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 6: // CONSISTENCY_LEVEL
0:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
0:               struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
0:               struct.setConsistency_levelIsSet(true);
0:             } else { 
0:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
0:       struct.validate();
0:     }
0: 
0:     public void write(org.apache.thrift.protocol.TProtocol oprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
0:       if (struct.key != null) {
0:         if (struct.isSetKey()) {
0:           oprot.writeFieldBegin(KEY_FIELD_DESC);
0:           oprot.writeBinary(struct.key);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.column_parent != null) {
0:         if (struct.isSetColumn_parent()) {
0:           oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
0:           struct.column_parent.write(oprot);
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.column_slices != null) {
0:         if (struct.isSetColumn_slices()) {
0:           oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
0:           {
0:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_slices.size()));
0:             for (ColumnSlice _iter219 : struct.column_slices)
0:             {
0:               _iter219.write(oprot);
0:             }
0:             oprot.writeListEnd();
0:           }
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       if (struct.isSetReversed()) {
0:         oprot.writeFieldBegin(REVERSED_FIELD_DESC);
0:         oprot.writeBool(struct.reversed);
0:         oprot.writeFieldEnd();
0:       }
0:       if (struct.isSetCount()) {
0:         oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:         oprot.writeI32(struct.count);
0:         oprot.writeFieldEnd();
0:       }
0:       if (struct.consistency_level != null) {
0:         if (struct.isSetConsistency_level()) {
0:           oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
0:           oprot.writeI32(struct.consistency_level.getValue());
0:           oprot.writeFieldEnd();
0:         }
0:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
0:   private static class MultiSliceRequestTupleSchemeFactory implements SchemeFactory {
0:     public MultiSliceRequestTupleScheme getScheme() {
0:       return new MultiSliceRequestTupleScheme();
0:     }
0:   }
0: 
0:   private static class MultiSliceRequestTupleScheme extends TupleScheme<MultiSliceRequest> {
0: 
0:     @Override
0:     public void write(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       TTupleProtocol oprot = (TTupleProtocol) prot;
0:       BitSet optionals = new BitSet();
0:       if (struct.isSetKey()) {
0:         optionals.set(0);
0:       }
0:       if (struct.isSetColumn_parent()) {
0:         optionals.set(1);
0:       }
0:       if (struct.isSetColumn_slices()) {
0:         optionals.set(2);
0:       }
0:       if (struct.isSetReversed()) {
0:         optionals.set(3);
0:       }
0:       if (struct.isSetCount()) {
0:         optionals.set(4);
0:       }
0:       if (struct.isSetConsistency_level()) {
0:         optionals.set(5);
0:       }
0:       oprot.writeBitSet(optionals, 6);
0:       if (struct.isSetKey()) {
0:         oprot.writeBinary(struct.key);
0:       }
0:       if (struct.isSetColumn_parent()) {
0:         struct.column_parent.write(oprot);
0:       }
0:       if (struct.isSetColumn_slices()) {
0:         {
0:           oprot.writeI32(struct.column_slices.size());
0:           for (ColumnSlice _iter220 : struct.column_slices)
0:           {
0:             _iter220.write(oprot);
0:           }
0:         }
0:       }
0:       if (struct.isSetReversed()) {
0:         oprot.writeBool(struct.reversed);
0:       }
0:       if (struct.isSetCount()) {
0:         oprot.writeI32(struct.count);
0:       }
0:       if (struct.isSetConsistency_level()) {
0:         oprot.writeI32(struct.consistency_level.getValue());
0:       }
0:     }
0: 
0:     @Override
0:     public void read(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
0:       TTupleProtocol iprot = (TTupleProtocol) prot;
0:       BitSet incoming = iprot.readBitSet(6);
0:       if (incoming.get(0)) {
0:         struct.key = iprot.readBinary();
0:         struct.setKeyIsSet(true);
0:       }
0:       if (incoming.get(1)) {
0:         struct.column_parent = new ColumnParent();
0:         struct.column_parent.read(iprot);
0:         struct.setColumn_parentIsSet(true);
0:       }
0:       if (incoming.get(2)) {
0:         {
0:           org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:           struct.column_slices = new ArrayList<ColumnSlice>(_list221.size);
0:           for (int _i222 = 0; _i222 < _list221.size; ++_i222)
0:           {
0:             ColumnSlice _elem223;
0:             _elem223 = new ColumnSlice();
0:             _elem223.read(iprot);
0:             struct.column_slices.add(_elem223);
0:           }
0:         }
0:         struct.setColumn_slicesIsSet(true);
0:       }
0:       if (incoming.get(3)) {
0:         struct.reversed = iprot.readBool();
0:         struct.setReversedIsSet(true);
0:       }
0:       if (incoming.get(4)) {
0:         struct.count = iprot.readI32();
0:         struct.setCountIsSet(true);
0:       }
0:       if (incoming.get(5)) {
0:         struct.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
0:         struct.setConsistency_levelIsSet(true);
0:       }
0:     }
0:   }
0: 
0: }
0: 
============================================================================