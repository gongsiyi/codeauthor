1:3bdcaa3: /*
1:3bdcaa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bdcaa3:  * or more contributor license agreements.  See the NOTICE file
1:3bdcaa3:  * distributed with this work for additional information
1:3bdcaa3:  * regarding copyright ownership.  The ASF licenses this file
1:3bdcaa3:  * to you under the Apache License, Version 2.0 (the
1:3bdcaa3:  * "License"); you may not use this file except in compliance
1:3bdcaa3:  * with the License.  You may obtain a copy of the License at
1:3bdcaa3:  *
1:3bdcaa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3bdcaa3:  *
1:3bdcaa3:  * Unless required by applicable law or agreed to in writing, software
1:3bdcaa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bdcaa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bdcaa3:  * See the License for the specific language governing permissions and
1:3bdcaa3:  * limitations under the License.
1:3bdcaa3:  */
2:3bdcaa3: 
1:3bdcaa3: package org.apache.cassandra.db.view;
1:3bdcaa3: 
1:3bdcaa3: import java.net.InetAddress;
1:3bdcaa3: import java.util.HashMap;
1:3bdcaa3: import java.util.Map;
1:c184e8c: import java.util.Optional;
1:3bdcaa3: 
1:3bdcaa3: import org.junit.BeforeClass;
1:3bdcaa3: import org.junit.Test;
1:3bdcaa3: 
1:3bdcaa3: import junit.framework.Assert;
1:3bdcaa3: import org.apache.cassandra.config.DatabaseDescriptor;
1:3bdcaa3: import org.apache.cassandra.config.Schema;
1:3bdcaa3: import org.apache.cassandra.db.Keyspace;
1:3bdcaa3: import org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken;
1:3bdcaa3: import org.apache.cassandra.exceptions.ConfigurationException;
1:3bdcaa3: import org.apache.cassandra.locator.IEndpointSnitch;
1:3bdcaa3: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1:3bdcaa3: import org.apache.cassandra.locator.PropertyFileSnitch;
1:3bdcaa3: import org.apache.cassandra.locator.TokenMetadata;
1:3bdcaa3: import org.apache.cassandra.schema.KeyspaceMetadata;
1:3bdcaa3: import org.apache.cassandra.schema.KeyspaceParams;
1:b31845c: import org.apache.cassandra.schema.ReplicationParams;
1:3bdcaa3: import org.apache.cassandra.service.StorageService;
1:3bdcaa3: 
1:a3a8dbc: public class ViewUtilsTest
1:3bdcaa3: {
1:3bdcaa3:     @BeforeClass
1:3bdcaa3:     public static void setUp() throws ConfigurationException
1:3bdcaa3:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:3bdcaa3:         IEndpointSnitch snitch = new PropertyFileSnitch();
1:3bdcaa3:         DatabaseDescriptor.setEndpointSnitch(snitch);
1:3bdcaa3:         Keyspace.setInitialized();
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     @Test
1:3bdcaa3:     public void testGetIndexNaturalEndpoint() throws Exception
1:3bdcaa3:     {
1:3bdcaa3:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:3bdcaa3:         metadata.clearUnsafe();
1:3bdcaa3: 
1:3bdcaa3:         // DC1
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1:3bdcaa3: 
1:3bdcaa3:         // DC2
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1:3bdcaa3: 
1:3bdcaa3:         Map<String, String> replicationMap = new HashMap<>();
1:b31845c:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
1:3bdcaa3: 
1:3bdcaa3:         replicationMap.put("DC1", "1");
1:3bdcaa3:         replicationMap.put("DC2", "1");
1:3bdcaa3: 
1:3bdcaa3:         Keyspace.clear("Keyspace1");
1:3bdcaa3:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:3bdcaa3:         Schema.instance.setKeyspaceMetadata(meta);
1:3bdcaa3: 
1:c184e8c:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:a3a8dbc:                                                                        new StringToken("CA"),
1:a3a8dbc:                                                                        new StringToken("BB"));
1:3bdcaa3: 
1:c184e8c:         Assert.assertTrue(naturalEndpoint.isPresent());
1:c184e8c:         Assert.assertEquals(InetAddress.getByName("127.0.0.2"), naturalEndpoint.get());
1:3bdcaa3:     }
1:c184e8c: 
1:c184e8c: 
1:3bdcaa3:     @Test
1:3bdcaa3:     public void testLocalHostPreference() throws Exception
1:3bdcaa3:     {
1:3bdcaa3:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:3bdcaa3:         metadata.clearUnsafe();
1:3bdcaa3: 
1:3bdcaa3:         // DC1
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1:3bdcaa3: 
1:3bdcaa3:         // DC2
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:3bdcaa3:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1:3bdcaa3: 
1:3bdcaa3:         Map<String, String> replicationMap = new HashMap<>();
1:b31845c:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
1:3bdcaa3: 
1:3bdcaa3:         replicationMap.put("DC1", "2");
1:3bdcaa3:         replicationMap.put("DC2", "2");
1:3bdcaa3: 
1:3bdcaa3:         Keyspace.clear("Keyspace1");
1:3bdcaa3:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:3bdcaa3:         Schema.instance.setKeyspaceMetadata(meta);
1:3bdcaa3: 
1:c184e8c:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:a3a8dbc:                                                                        new StringToken("CA"),
1:a3a8dbc:                                                                        new StringToken("BB"));
1:3bdcaa3: 
1:c184e8c:         Assert.assertTrue(naturalEndpoint.isPresent());
1:c184e8c:         Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint.get());
1:c184e8c:     }
1:c184e8c: 
1:c184e8c:     @Test
1:c184e8c:     public void testBaseTokenDoesNotBelongToLocalReplicaShouldReturnEmpty() throws Exception
1:c184e8c:     {
1:c184e8c:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:c184e8c:         metadata.clearUnsafe();
1:c184e8c: 
1:c184e8c:         // DC1
1:c184e8c:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:c184e8c:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1:c184e8c: 
1:c184e8c:         // DC2
1:c184e8c:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:c184e8c:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1:c184e8c: 
1:c184e8c:         Map<String, String> replicationMap = new HashMap<>();
1:c184e8c:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
1:c184e8c: 
1:c184e8c:         replicationMap.put("DC1", "1");
1:c184e8c:         replicationMap.put("DC2", "1");
1:3bdcaa3: 
1:c184e8c:         Keyspace.clear("Keyspace1");
1:c184e8c:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:c184e8c:         Schema.instance.setKeyspaceMetadata(meta);
1:3bdcaa3: 
1:c184e8c:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:c184e8c:                                                                        new StringToken("AB"),
1:c184e8c:                                                                        new StringToken("BB"));
1:c184e8c: 
1:c184e8c:         Assert.assertFalse(naturalEndpoint.isPresent());
1:3bdcaa3:     }
1:3bdcaa3: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
author:Paulo Motta
-------------------------------------------------------------------------------
commit:c184e8c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Optional;
/////////////////////////////////////////////////////////////////////////
1:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:         Assert.assertTrue(naturalEndpoint.isPresent());
1:         Assert.assertEquals(InetAddress.getByName("127.0.0.2"), naturalEndpoint.get());
/////////////////////////////////////////////////////////////////////////
1:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:         Assert.assertTrue(naturalEndpoint.isPresent());
1:         Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint.get());
1:     }
1: 
1:     @Test
1:     public void testBaseTokenDoesNotBelongToLocalReplicaShouldReturnEmpty() throws Exception
1:     {
1:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:         metadata.clearUnsafe();
1: 
1:         // DC1
1:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1: 
1:         // DC2
1:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1: 
1:         Map<String, String> replicationMap = new HashMap<>();
1:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
1: 
1:         replicationMap.put("DC1", "1");
1:         replicationMap.put("DC2", "1");
1: 
1:         Keyspace.clear("Keyspace1");
1:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:         Schema.instance.setKeyspaceMetadata(meta);
1: 
1:         Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:                                                                        new StringToken("AB"),
1:                                                                        new StringToken("BB"));
1: 
1:         Assert.assertFalse(naturalEndpoint.isPresent());
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: public class ViewUtilsTest
/////////////////////////////////////////////////////////////////////////
0:         InetAddress naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:                                                                        new StringToken("CA"),
1:                                                                        new StringToken("BB"));
/////////////////////////////////////////////////////////////////////////
0:         InetAddress naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1",
1:                                                                        new StringToken("CA"),
1:                                                                        new StringToken("BB"));
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.view;
1: 
1: import java.net.InetAddress;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.locator.IEndpointSnitch;
1: import org.apache.cassandra.locator.NetworkTopologyStrategy;
1: import org.apache.cassandra.locator.PropertyFileSnitch;
1: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.schema.KeyspaceMetadata;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.service.StorageService;
1: 
0: public class MaterializedViewUtilsTest
1: {
1:     @BeforeClass
1:     public static void setUp() throws ConfigurationException
1:     {
1:         IEndpointSnitch snitch = new PropertyFileSnitch();
1:         DatabaseDescriptor.setEndpointSnitch(snitch);
1:         Keyspace.setInitialized();
1:     }
1: 
1:     @Test
1:     public void testGetIndexNaturalEndpoint() throws Exception
1:     {
1:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:         metadata.clearUnsafe();
1: 
1:         // DC1
1:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1: 
1:         // DC2
1:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1: 
1:         Map<String, String> replicationMap = new HashMap<>();
0:         replicationMap.put(KeyspaceParams.Replication.CLASS, NetworkTopologyStrategy.class.getName());
1: 
1:         replicationMap.put("DC1", "1");
1:         replicationMap.put("DC2", "1");
1: 
1:         Keyspace.clear("Keyspace1");
1:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:         Schema.instance.setKeyspaceMetadata(meta);
1: 
0:         InetAddress naturalEndpoint = MaterializedViewUtils.getViewNaturalEndpoint("Keyspace1",
0:                                                                                    new StringToken("CA"),
0:                                                                                    new StringToken("BB"));
1: 
0:         Assert.assertEquals(InetAddress.getByName("127.0.0.2"), naturalEndpoint);
1:     }
1: 
1: 
1:     @Test
1:     public void testLocalHostPreference() throws Exception
1:     {
1:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
1:         metadata.clearUnsafe();
1: 
1:         // DC1
1:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
1:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
1: 
1:         // DC2
1:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
1:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
1: 
1:         Map<String, String> replicationMap = new HashMap<>();
0:         replicationMap.put(KeyspaceParams.Replication.CLASS, NetworkTopologyStrategy.class.getName());
1: 
1:         replicationMap.put("DC1", "2");
1:         replicationMap.put("DC2", "2");
1: 
1:         Keyspace.clear("Keyspace1");
1:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
1:         Schema.instance.setKeyspaceMetadata(meta);
1: 
0:         InetAddress naturalEndpoint = MaterializedViewUtils.getViewNaturalEndpoint("Keyspace1",
0:                                                                                    new StringToken("CA"),
0:                                                                                    new StringToken("BB"));
1: 
0:         Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint);
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.ReplicationParams;
/////////////////////////////////////////////////////////////////////////
1:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
/////////////////////////////////////////////////////////////////////////
1:         replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName());
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0: 
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.db.view;
0: 
0: import java.net.InetAddress;
0: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: import junit.framework.Assert;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.IEndpointSnitch;
0: import org.apache.cassandra.locator.NetworkTopologyStrategy;
0: import org.apache.cassandra.locator.PropertyFileSnitch;
0: import org.apache.cassandra.locator.TokenMetadata;
0: import org.apache.cassandra.schema.KeyspaceMetadata;
0: import org.apache.cassandra.schema.KeyspaceParams;
0: import org.apache.cassandra.service.StorageService;
0: 
0: public class MaterializedViewUtilsTest
0: {
0:     @BeforeClass
0:     public static void setUp() throws ConfigurationException
0:     {
0:         IEndpointSnitch snitch = new PropertyFileSnitch();
0:         DatabaseDescriptor.setEndpointSnitch(snitch);
0:         Keyspace.setInitialized();
0:     }
0: 
0:     @Test
0:     public void testGetIndexNaturalEndpoint() throws Exception
0:     {
0:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
0:         metadata.clearUnsafe();
0: 
0:         // DC1
0:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
0:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
0: 
0:         // DC2
0:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
0:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
0: 
0:         Map<String, String> replicationMap = new HashMap<>();
0:         replicationMap.put(KeyspaceParams.Replication.CLASS, NetworkTopologyStrategy.class.getName());
0: 
0:         replicationMap.put("DC1", "1");
0:         replicationMap.put("DC2", "1");
0: 
0:         Keyspace.clear("Keyspace1");
0:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
0:         Schema.instance.setKeyspaceMetadata(meta);
0: 
0:         InetAddress naturalEndpoint = MaterializedViewUtils.getViewNaturalEndpoint("Keyspace1",
0:                                                                                    new StringToken("CA"),
0:                                                                                    new StringToken("BB"));
0: 
0:         Assert.assertEquals(InetAddress.getByName("127.0.0.2"), naturalEndpoint);
0:     }
0: 
0: 
0:     @Test
0:     public void testLocalHostPreference() throws Exception
0:     {
0:         TokenMetadata metadata = StorageService.instance.getTokenMetadata();
0:         metadata.clearUnsafe();
0: 
0:         // DC1
0:         metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"));
0:         metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"));
0: 
0:         // DC2
0:         metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"));
0:         metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"));
0: 
0:         Map<String, String> replicationMap = new HashMap<>();
0:         replicationMap.put(KeyspaceParams.Replication.CLASS, NetworkTopologyStrategy.class.getName());
0: 
0:         replicationMap.put("DC1", "2");
0:         replicationMap.put("DC2", "2");
0: 
0:         Keyspace.clear("Keyspace1");
0:         KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap));
0:         Schema.instance.setKeyspaceMetadata(meta);
0: 
0:         InetAddress naturalEndpoint = MaterializedViewUtils.getViewNaturalEndpoint("Keyspace1",
0:                                                                                    new StringToken("CA"),
0:                                                                                    new StringToken("BB"));
0: 
0:         Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint);
0:     }
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
============================================================================