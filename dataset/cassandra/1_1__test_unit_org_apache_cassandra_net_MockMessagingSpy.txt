1:7751588: /*
1:7751588:  * Licensed to the Apache Software Foundation (ASF) under one
1:7751588:  * or more contributor license agreements.  See the NOTICE file
1:7751588:  * distributed with this work for additional information
1:7751588:  * regarding copyright ownership.  The ASF licenses this file
1:7751588:  * to you under the Apache License, Version 2.0 (the
1:7751588:  * "License"); you may not use this file except in compliance
1:7751588:  * with the License.  You may obtain a copy of the License at
1:7751588:  *
1:7751588:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7751588:  *
1:7751588:  * Unless required by applicable law or agreed to in writing, software
1:7751588:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7751588:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7751588:  * See the License for the specific language governing permissions and
1:7751588:  * limitations under the License.
1:7751588:  */
1:7751588: package org.apache.cassandra.net;
1:7751588: 
1:7751588: import java.util.ArrayList;
1:7751588: import java.util.List;
1:7751588: import java.util.concurrent.BlockingQueue;
1:7751588: import java.util.concurrent.Executor;
1:7751588: import java.util.concurrent.Executors;
1:7751588: import java.util.concurrent.LinkedBlockingQueue;
1:7751588: import java.util.concurrent.TimeUnit;
1:7751588: 
1:7751588: import com.google.common.util.concurrent.AbstractFuture;
1:7751588: import com.google.common.util.concurrent.Futures;
1:7751588: import com.google.common.util.concurrent.ListenableFuture;
1:7751588: import org.slf4j.Logger;
1:7751588: import org.slf4j.LoggerFactory;
1:7751588: 
1:7751588: import junit.framework.AssertionFailedError;
1:7751588: 
1:7751588: /**
1:7751588:  * Allows inspecting the behavior of mocked messaging by observing {@link MatcherResponse}.
1:7751588:  */
1:7751588: public class MockMessagingSpy
1:7751588: {
1:7751588:     private static final Logger logger = LoggerFactory.getLogger(MockMessagingSpy.class);
1:7751588: 
1:7751588:     public int messagesIntercepted = 0;
1:7751588:     public int mockedMessageResponses = 0;
1:7751588: 
1:7751588:     private final BlockingQueue<MessageOut<?>> interceptedMessages = new LinkedBlockingQueue<>();
1:7751588:     private final BlockingQueue<MessageIn<?>> deliveredResponses = new LinkedBlockingQueue<>();
1:7751588: 
1:7751588:     private static final Executor executor = Executors.newSingleThreadExecutor();
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future with the first mocked incoming message that has been created and delivered.
1:7751588:      */
1:7751588:     public ListenableFuture<MessageIn<?>> captureMockedMessageIn()
1:7751588:     {
1:7751588:         return Futures.transform(captureMockedMessageInN(1), (List<MessageIn<?>> result) -> result.isEmpty() ? null : result.get(0));
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future with the specified number mocked incoming messages that have been created and delivered.
1:7751588:      */
1:7751588:     public ListenableFuture<List<MessageIn<?>>> captureMockedMessageInN(int noOfMessages)
1:7751588:     {
1:7751588:         CapturedResultsFuture<MessageIn<?>> ret = new CapturedResultsFuture<>(noOfMessages, deliveredResponses);
1:7751588:         executor.execute(ret);
1:7751588:         return ret;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future that will indicate if a mocked incoming message has been created and delivered.
1:7751588:      */
1:7751588:     public ListenableFuture<Boolean> expectMockedMessageIn()
1:7751588:     {
1:7751588:         return expectMockedMessageIn(1);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future that will indicate if the specified number of mocked incoming message have been created and delivered.
1:7751588:      */
1:7751588:     public ListenableFuture<Boolean> expectMockedMessageIn(int noOfMessages)
1:7751588:     {
1:7751588:         ResultsCompletionFuture<MessageIn<?>> ret = new ResultsCompletionFuture<>(noOfMessages, deliveredResponses);
1:7751588:         executor.execute(ret);
1:7751588:         return ret;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future with the first intercepted outbound message that would have been send.
1:7751588:      */
1:7751588:     public ListenableFuture<MessageOut<?>> captureMessageOut()
1:7751588:     {
1:7751588:         return Futures.transform(captureMessageOut(1), (List<MessageOut<?>> result) -> result.isEmpty() ? null : result.get(0));
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future with the specified number of intercepted outbound messages that would have been send.
1:7751588:      */
1:7751588:     public ListenableFuture<List<MessageOut<?>>> captureMessageOut(int noOfMessages)
1:7751588:     {
1:7751588:         CapturedResultsFuture<MessageOut<?>> ret = new CapturedResultsFuture<>(noOfMessages, interceptedMessages);
1:7751588:         executor.execute(ret);
1:7751588:         return ret;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future that will indicate if an intercepted outbound messages would have been send.
1:7751588:      */
1:7751588:     public ListenableFuture<Boolean> interceptMessageOut()
1:7751588:     {
1:7751588:         return interceptMessageOut(1);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future that will indicate if the specified number of intercepted outbound messages would have been send.
1:7751588:      */
1:7751588:     public ListenableFuture<Boolean> interceptMessageOut(int noOfMessages)
1:7751588:     {
1:7751588:         ResultsCompletionFuture<MessageOut<?>> ret = new ResultsCompletionFuture<>(noOfMessages, interceptedMessages);
1:7751588:         executor.execute(ret);
1:7751588:         return ret;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Returns a future that will indicate the absence of any intercepted outbound messages with the specifed period.
1:7751588:      */
1:7751588:     public ListenableFuture<Boolean> interceptNoMsg(long time, TimeUnit unit)
1:7751588:     {
1:7751588:         ResultAbsenceFuture<MessageOut<?>> ret = new ResultAbsenceFuture<>(interceptedMessages, time, unit);
1:7751588:         executor.execute(ret);
1:7751588:         return ret;
1:7751588:     }
1:7751588: 
1:7751588:     void matchingMessage(MessageOut<?> message)
1:7751588:     {
1:7751588:         messagesIntercepted++;
1:7751588:         logger.trace("Received matching message: {}", message);
1:7751588:         interceptedMessages.add(message);
1:7751588:     }
1:7751588: 
1:7751588:     void matchingResponse(MessageIn<?> response)
1:7751588:     {
1:7751588:         mockedMessageResponses++;
1:7751588:         logger.trace("Responding to intercepted message: {}", response);
1:7751588:         deliveredResponses.add(response);
1:7751588:     }
1:7751588: 
1:7751588: 
1:7751588:     private static class CapturedResultsFuture<T> extends AbstractFuture<List<T>> implements Runnable
1:7751588:     {
1:7751588:         private final int waitForResults;
1:7751588:         private final List<T> results;
1:7751588:         private final BlockingQueue<T> queue;
1:7751588: 
1:7751588:         CapturedResultsFuture(int waitForResponses, BlockingQueue<T> queue)
1:7751588:         {
1:7751588:             this.waitForResults = waitForResponses;
1:7751588:             results = new ArrayList<T>(waitForResponses);
1:7751588:             this.queue = queue;
1:7751588:         }
1:7751588: 
1:7751588:         public void run()
1:7751588:         {
1:7751588:             try
1:7751588:             {
1:7751588:                 while (results.size() < waitForResults)
1:7751588:                     results.add(queue.take());
1:7751588: 
1:7751588:                 set(results);
1:7751588:             }
1:7751588:             catch (InterruptedException e)
1:7751588:             {
1:7751588:                 throw new AssertionError();
1:7751588:             }
1:7751588:         }
1:7751588:     }
1:7751588: 
1:7751588:     private static class ResultsCompletionFuture<T> extends AbstractFuture<Boolean> implements Runnable
1:7751588:     {
1:7751588:         private final int waitForResults;
1:7751588:         private final BlockingQueue<T> queue;
1:7751588: 
1:7751588:         ResultsCompletionFuture(int waitForResponses, BlockingQueue<T> queue)
1:7751588:         {
1:7751588:             this.waitForResults = waitForResponses;
1:7751588:             this.queue = queue;
1:7751588:         }
1:7751588: 
1:7751588:         public void run()
1:7751588:         {
1:7751588:             try
1:7751588:             {
1:7751588:                 for (int i = 0; i < waitForResults; i++)
1:7751588:                 {
1:7751588:                     queue.take();
1:7751588:                 }
1:7751588:                 set(true);
1:7751588:             }
1:7751588:             catch (InterruptedException e)
1:7751588:             {
1:7751588:                 throw new AssertionError();
1:7751588:             }
1:7751588:         }
1:7751588:     }
1:7751588: 
1:7751588:     private static class ResultAbsenceFuture<T> extends AbstractFuture<Boolean> implements Runnable
1:7751588:     {
1:7751588:         private final BlockingQueue<T> queue;
1:7751588:         private final long time;
1:7751588:         private final TimeUnit unit;
1:7751588: 
1:7751588:         ResultAbsenceFuture(BlockingQueue<T> queue, long time, TimeUnit unit)
1:7751588:         {
1:7751588:             this.queue = queue;
1:7751588:             this.time = time;
1:7751588:             this.unit = unit;
1:7751588:         }
1:7751588: 
1:7751588:         public void run()
1:7751588:         {
1:7751588:             try
1:7751588:             {
1:7751588:                 T result = queue.poll(time, unit);
1:7751588:                 if (result != null)
1:7751588:                     setException(new AssertionFailedError("Received unexpected message: " + result));
1:7751588:                 else
1:7751588:                     set(true);
1:7751588:             }
1:7751588:             catch (InterruptedException e)
1:7751588:             {
1:7751588:                 throw new AssertionError();
1:7751588:             }
1:7751588:         }
1:7751588:     }
1:7751588: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:7751588
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.util.concurrent.AbstractFuture;
1: import com.google.common.util.concurrent.Futures;
1: import com.google.common.util.concurrent.ListenableFuture;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import junit.framework.AssertionFailedError;
1: 
1: /**
1:  * Allows inspecting the behavior of mocked messaging by observing {@link MatcherResponse}.
1:  */
1: public class MockMessagingSpy
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(MockMessagingSpy.class);
1: 
1:     public int messagesIntercepted = 0;
1:     public int mockedMessageResponses = 0;
1: 
1:     private final BlockingQueue<MessageOut<?>> interceptedMessages = new LinkedBlockingQueue<>();
1:     private final BlockingQueue<MessageIn<?>> deliveredResponses = new LinkedBlockingQueue<>();
1: 
1:     private static final Executor executor = Executors.newSingleThreadExecutor();
1: 
1:     /**
1:      * Returns a future with the first mocked incoming message that has been created and delivered.
1:      */
1:     public ListenableFuture<MessageIn<?>> captureMockedMessageIn()
1:     {
1:         return Futures.transform(captureMockedMessageInN(1), (List<MessageIn<?>> result) -> result.isEmpty() ? null : result.get(0));
1:     }
1: 
1:     /**
1:      * Returns a future with the specified number mocked incoming messages that have been created and delivered.
1:      */
1:     public ListenableFuture<List<MessageIn<?>>> captureMockedMessageInN(int noOfMessages)
1:     {
1:         CapturedResultsFuture<MessageIn<?>> ret = new CapturedResultsFuture<>(noOfMessages, deliveredResponses);
1:         executor.execute(ret);
1:         return ret;
1:     }
1: 
1:     /**
1:      * Returns a future that will indicate if a mocked incoming message has been created and delivered.
1:      */
1:     public ListenableFuture<Boolean> expectMockedMessageIn()
1:     {
1:         return expectMockedMessageIn(1);
1:     }
1: 
1:     /**
1:      * Returns a future that will indicate if the specified number of mocked incoming message have been created and delivered.
1:      */
1:     public ListenableFuture<Boolean> expectMockedMessageIn(int noOfMessages)
1:     {
1:         ResultsCompletionFuture<MessageIn<?>> ret = new ResultsCompletionFuture<>(noOfMessages, deliveredResponses);
1:         executor.execute(ret);
1:         return ret;
1:     }
1: 
1:     /**
1:      * Returns a future with the first intercepted outbound message that would have been send.
1:      */
1:     public ListenableFuture<MessageOut<?>> captureMessageOut()
1:     {
1:         return Futures.transform(captureMessageOut(1), (List<MessageOut<?>> result) -> result.isEmpty() ? null : result.get(0));
1:     }
1: 
1:     /**
1:      * Returns a future with the specified number of intercepted outbound messages that would have been send.
1:      */
1:     public ListenableFuture<List<MessageOut<?>>> captureMessageOut(int noOfMessages)
1:     {
1:         CapturedResultsFuture<MessageOut<?>> ret = new CapturedResultsFuture<>(noOfMessages, interceptedMessages);
1:         executor.execute(ret);
1:         return ret;
1:     }
1: 
1:     /**
1:      * Returns a future that will indicate if an intercepted outbound messages would have been send.
1:      */
1:     public ListenableFuture<Boolean> interceptMessageOut()
1:     {
1:         return interceptMessageOut(1);
1:     }
1: 
1:     /**
1:      * Returns a future that will indicate if the specified number of intercepted outbound messages would have been send.
1:      */
1:     public ListenableFuture<Boolean> interceptMessageOut(int noOfMessages)
1:     {
1:         ResultsCompletionFuture<MessageOut<?>> ret = new ResultsCompletionFuture<>(noOfMessages, interceptedMessages);
1:         executor.execute(ret);
1:         return ret;
1:     }
1: 
1:     /**
1:      * Returns a future that will indicate the absence of any intercepted outbound messages with the specifed period.
1:      */
1:     public ListenableFuture<Boolean> interceptNoMsg(long time, TimeUnit unit)
1:     {
1:         ResultAbsenceFuture<MessageOut<?>> ret = new ResultAbsenceFuture<>(interceptedMessages, time, unit);
1:         executor.execute(ret);
1:         return ret;
1:     }
1: 
1:     void matchingMessage(MessageOut<?> message)
1:     {
1:         messagesIntercepted++;
1:         logger.trace("Received matching message: {}", message);
1:         interceptedMessages.add(message);
1:     }
1: 
1:     void matchingResponse(MessageIn<?> response)
1:     {
1:         mockedMessageResponses++;
1:         logger.trace("Responding to intercepted message: {}", response);
1:         deliveredResponses.add(response);
1:     }
1: 
1: 
1:     private static class CapturedResultsFuture<T> extends AbstractFuture<List<T>> implements Runnable
1:     {
1:         private final int waitForResults;
1:         private final List<T> results;
1:         private final BlockingQueue<T> queue;
1: 
1:         CapturedResultsFuture(int waitForResponses, BlockingQueue<T> queue)
1:         {
1:             this.waitForResults = waitForResponses;
1:             results = new ArrayList<T>(waitForResponses);
1:             this.queue = queue;
1:         }
1: 
1:         public void run()
1:         {
1:             try
1:             {
1:                 while (results.size() < waitForResults)
1:                     results.add(queue.take());
1: 
1:                 set(results);
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new AssertionError();
1:             }
1:         }
1:     }
1: 
1:     private static class ResultsCompletionFuture<T> extends AbstractFuture<Boolean> implements Runnable
1:     {
1:         private final int waitForResults;
1:         private final BlockingQueue<T> queue;
1: 
1:         ResultsCompletionFuture(int waitForResponses, BlockingQueue<T> queue)
1:         {
1:             this.waitForResults = waitForResponses;
1:             this.queue = queue;
1:         }
1: 
1:         public void run()
1:         {
1:             try
1:             {
1:                 for (int i = 0; i < waitForResults; i++)
1:                 {
1:                     queue.take();
1:                 }
1:                 set(true);
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new AssertionError();
1:             }
1:         }
1:     }
1: 
1:     private static class ResultAbsenceFuture<T> extends AbstractFuture<Boolean> implements Runnable
1:     {
1:         private final BlockingQueue<T> queue;
1:         private final long time;
1:         private final TimeUnit unit;
1: 
1:         ResultAbsenceFuture(BlockingQueue<T> queue, long time, TimeUnit unit)
1:         {
1:             this.queue = queue;
1:             this.time = time;
1:             this.unit = unit;
1:         }
1: 
1:         public void run()
1:         {
1:             try
1:             {
1:                 T result = queue.poll(time, unit);
1:                 if (result != null)
1:                     setException(new AssertionFailedError("Received unexpected message: " + result));
1:                 else
1:                     set(true);
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new AssertionError();
1:             }
1:         }
1:     }
1: }
============================================================================