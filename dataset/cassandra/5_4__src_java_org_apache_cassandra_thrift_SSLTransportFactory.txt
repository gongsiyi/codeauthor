1:4a6f8a6: /*
1:4a6f8a6:  * Licensed to the Apache Software Foundation (ASF) under one
1:4a6f8a6:  * or more contributor license agreements.  See the NOTICE file
1:4a6f8a6:  * distributed with this work for additional information
1:4a6f8a6:  * regarding copyright ownership.  The ASF licenses this file
1:4a6f8a6:  * to you under the Apache License, Version 2.0 (the
1:4a6f8a6:  * "License"); you may not use this file except in compliance
1:4a6f8a6:  * with the License.  You may obtain a copy of the License at
1:4a6f8a6:  *
1:4a6f8a6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4a6f8a6:  *
1:4a6f8a6:  * Unless required by applicable law or agreed to in writing, software
1:4a6f8a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4a6f8a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4a6f8a6:  * See the License for the specific language governing permissions and
1:4a6f8a6:  * limitations under the License.
1:4a6f8a6:  */
1:4a6f8a6: package org.apache.cassandra.thrift;
1:3802738: 
1:4a6f8a6: import com.google.common.collect.Sets;
1:df046df: import org.apache.thrift.transport.TFramedTransport;
1:4a6f8a6: import org.apache.thrift.transport.TSSLTransportFactory;
1:4a6f8a6: import org.apache.thrift.transport.TTransport;
2:4a6f8a6: 
1:4a6f8a6: import java.util.Map;
1:4a6f8a6: import java.util.Set;
1:4a6f8a6: 
1:4a6f8a6: public class SSLTransportFactory implements ITransportFactory
1:4a6f8a6: {
1:3802738:     public static final int DEFAULT_MAX_FRAME_SIZE = 15 * 1024 * 1024; // 15 MiB
1:3802738: 
1:4a6f8a6:     public static final String TRUSTSTORE = "enc.truststore";
1:4a6f8a6:     public static final String TRUSTSTORE_PASSWORD = "enc.truststore.password";
1:4a6f8a6:     public static final String KEYSTORE = "enc.keystore";
1:4a6f8a6:     public static final String KEYSTORE_PASSWORD = "enc.keystore.password";
1:4a6f8a6:     public static final String PROTOCOL = "enc.protocol";
1:4a6f8a6:     public static final String CIPHER_SUITES = "enc.cipher.suites";
1:4a6f8a6:     public static final int SOCKET_TIMEOUT = 0;
1:4a6f8a6: 
1:4a6f8a6:     private static final Set<String> SUPPORTED_OPTIONS = Sets.newHashSet(TRUSTSTORE,
1:4a6f8a6:                                                                          TRUSTSTORE_PASSWORD,
1:4a6f8a6:                                                                          KEYSTORE,
1:4a6f8a6:                                                                          KEYSTORE_PASSWORD,
1:4a6f8a6:                                                                          PROTOCOL,
1:4a6f8a6:                                                                          CIPHER_SUITES);
1:4a6f8a6: 
1:4a6f8a6:     private String truststore;
1:4a6f8a6:     private String truststorePassword;
1:4a6f8a6:     private String keystore;
1:4a6f8a6:     private String keystorePassword;
1:4a6f8a6:     private String protocol;
1:4a6f8a6:     private String[] cipherSuites;
1:4a6f8a6: 
1:4a6f8a6:     @Override
1:7aafe05:     @SuppressWarnings("resource")
1:4a6f8a6:     public TTransport openTransport(String host, int port) throws Exception
1:4a6f8a6:     {
1:4a6f8a6:         TSSLTransportFactory.TSSLTransportParameters params = new TSSLTransportFactory.TSSLTransportParameters(protocol, cipherSuites);
1:4a6f8a6:         params.setTrustStore(truststore, truststorePassword);
1:4a6f8a6:         if (null != keystore)
1:4a6f8a6:             params.setKeyStore(keystore, keystorePassword);
1:4a6f8a6:         TTransport trans = TSSLTransportFactory.getClientSocket(host, port, SOCKET_TIMEOUT, params);
1:3802738:         return new TFramedTransport(trans, DEFAULT_MAX_FRAME_SIZE);
1:4a6f8a6:     }
1:4a6f8a6: 
1:4a6f8a6:     @Override
1:4a6f8a6:     public void setOptions(Map<String, String> options)
1:4a6f8a6:     {
1:4a6f8a6:         if (options.containsKey(TRUSTSTORE))
1:4a6f8a6:             truststore = options.get(TRUSTSTORE);
1:4a6f8a6:         if (options.containsKey(TRUSTSTORE_PASSWORD))
1:4a6f8a6:             truststorePassword = options.get(TRUSTSTORE_PASSWORD);
1:4a6f8a6:         if (options.containsKey(KEYSTORE))
1:4a6f8a6:             keystore = options.get(KEYSTORE);
1:4a6f8a6:         if (options.containsKey(KEYSTORE_PASSWORD))
1:4a6f8a6:             keystorePassword = options.get(KEYSTORE_PASSWORD);
1:4a6f8a6:         if (options.containsKey(PROTOCOL))
1:4a6f8a6:             protocol = options.get(PROTOCOL);
1:4a6f8a6:         if (options.containsKey(CIPHER_SUITES))
1:4a6f8a6:             cipherSuites = options.get(CIPHER_SUITES).split(",");
1:4a6f8a6:     }
1:4a6f8a6: 
1:4a6f8a6:     @Override
1:4a6f8a6:     public Set<String> supportedOptions()
1:4a6f8a6:     {
1:4a6f8a6:         return SUPPORTED_OPTIONS;
1:4a6f8a6:     }
1:4a6f8a6: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
author:Jason Brown
-------------------------------------------------------------------------------
commit:f726685
commit:df046df
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.transport.TFramedTransport;
/////////////////////////////////////////////////////////////////////////
0:         int frameSize = 15 * 1024 * 1024; // 15 MiB
0:         return new TFramedTransport(trans, frameSize);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3802738
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.thrift.transport.TFramedTransport;
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_MAX_FRAME_SIZE = 15 * 1024 * 1024; // 15 MiB
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new TFramedTransport(trans, DEFAULT_MAX_FRAME_SIZE);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4a6f8a6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.thrift;
1: 
1: import com.google.common.collect.Sets;
0: import org.apache.cassandra.cli.transport.FramedTransportFactory;
1: import org.apache.thrift.transport.TSSLTransportFactory;
1: import org.apache.thrift.transport.TTransport;
0: import org.apache.thrift.transport.TTransportException;
1: 
1: import java.util.Map;
1: import java.util.Set;
1: 
1: public class SSLTransportFactory implements ITransportFactory
1: {
1:     public static final String TRUSTSTORE = "enc.truststore";
1:     public static final String TRUSTSTORE_PASSWORD = "enc.truststore.password";
1:     public static final String KEYSTORE = "enc.keystore";
1:     public static final String KEYSTORE_PASSWORD = "enc.keystore.password";
1:     public static final String PROTOCOL = "enc.protocol";
1:     public static final String CIPHER_SUITES = "enc.cipher.suites";
1:     public static final int SOCKET_TIMEOUT = 0;
1: 
1:     private static final Set<String> SUPPORTED_OPTIONS = Sets.newHashSet(TRUSTSTORE,
1:                                                                          TRUSTSTORE_PASSWORD,
1:                                                                          KEYSTORE,
1:                                                                          KEYSTORE_PASSWORD,
1:                                                                          PROTOCOL,
1:                                                                          CIPHER_SUITES);
1: 
1:     private String truststore;
1:     private String truststorePassword;
1:     private String keystore;
1:     private String keystorePassword;
1:     private String protocol;
1:     private String[] cipherSuites;
1: 
1:     @Override
1:     public TTransport openTransport(String host, int port) throws Exception
1:     {
1:         TSSLTransportFactory.TSSLTransportParameters params = new TSSLTransportFactory.TSSLTransportParameters(protocol, cipherSuites);
1:         params.setTrustStore(truststore, truststorePassword);
1:         if (null != keystore)
1:             params.setKeyStore(keystore, keystorePassword);
1:         TTransport trans = TSSLTransportFactory.getClientSocket(host, port, SOCKET_TIMEOUT, params);
0:         return new FramedTransportFactory().getTransport(trans);
1:     }
1: 
1:     @Override
1:     public void setOptions(Map<String, String> options)
1:     {
1:         if (options.containsKey(TRUSTSTORE))
1:             truststore = options.get(TRUSTSTORE);
1:         if (options.containsKey(TRUSTSTORE_PASSWORD))
1:             truststorePassword = options.get(TRUSTSTORE_PASSWORD);
1:         if (options.containsKey(KEYSTORE))
1:             keystore = options.get(KEYSTORE);
1:         if (options.containsKey(KEYSTORE_PASSWORD))
1:             keystorePassword = options.get(KEYSTORE_PASSWORD);
1:         if (options.containsKey(PROTOCOL))
1:             protocol = options.get(PROTOCOL);
1:         if (options.containsKey(CIPHER_SUITES))
1:             cipherSuites = options.get(CIPHER_SUITES).split(",");
1:     }
1: 
1:     @Override
1:     public Set<String> supportedOptions()
1:     {
1:         return SUPPORTED_OPTIONS;
1:     }
1: }
============================================================================