1:fb463c7: /**
1:fb463c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:fb463c7:  * or more contributor license agreements.  See the NOTICE file
1:fb463c7:  * distributed with this work for additional information
1:fb463c7:  * regarding copyright ownership.  The ASF licenses this file
1:fb463c7:  * to you under the Apache License, Version 2.0 (the
1:fb463c7:  * "License"); you may not use this file except in compliance
1:fb463c7:  * with the License.  You may obtain a copy of the License at
1:fb463c7:  *
1:fb463c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fb463c7:  *
1:fb463c7:  * Unless required by applicable law or agreed to in writing, software
1:fb463c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb463c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb463c7:  * See the License for the specific language governing permissions and
1:fb463c7:  * limitations under the License.
1:fb463c7:  */
1:fb463c7: package org.apache.cassandra.triggers;
1:fb463c7: 
1:fb463c7: import java.io.InputStream;
1:fb463c7: import java.util.Collection;
1:fb463c7: import java.util.Collections;
1:fb463c7: import java.util.Properties;
1:fb463c7: 
1:5e9d9eb: import org.apache.cassandra.config.CFMetaData;
1:fb463c7: import org.apache.cassandra.config.Schema;
1:fb463c7: import org.apache.cassandra.db.Mutation;
1:fb463c7: import org.apache.cassandra.db.partitions.Partition;
1:5e9d9eb: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:fb463c7: import org.apache.cassandra.io.util.FileUtils;
1:fb463c7: import org.apache.cassandra.utils.FBUtilities;
1:fb463c7: import org.apache.cassandra.utils.UUIDGen;
1:fb463c7: 
1:fb463c7: public class AuditTrigger implements ITrigger
1:fb463c7: {
1:fb463c7:     private Properties properties = loadProperties();
1:fb463c7: 
1:fb463c7:     public Collection<Mutation> augment(Partition update)
1:fb463c7:     {
1:fb463c7:         String auditKeyspace = properties.getProperty("keyspace");
1:fb463c7:         String auditTable = properties.getProperty("table");
1:fb463c7: 
1:5e9d9eb:         CFMetaData metadata = Schema.instance.getCFMetaData(auditKeyspace, auditTable);
1:5e9d9eb:         PartitionUpdate.SimpleBuilder audit = PartitionUpdate.simpleBuilder(metadata, UUIDGen.getTimeUUID());
1:fb463c7: 
1:5e9d9eb:         audit.row()
1:5e9d9eb:              .add("keyspace_name", update.metadata().ksName)
1:5e9d9eb:              .add("table_name", update.metadata().cfName)
1:5e9d9eb:              .add("primary_key", update.metadata().getKeyValidator().getString(update.partitionKey().getKey()));
1:fb463c7: 
1:5e9d9eb:         return Collections.singletonList(audit.buildAsMutation());
1:fb463c7:     }
1:fb463c7: 
1:fb463c7:     private static Properties loadProperties()
1:fb463c7:     {
1:fb463c7:         Properties properties = new Properties();
1:fb463c7:         InputStream stream = AuditTrigger.class.getClassLoader().getResourceAsStream("AuditTrigger.properties");
1:fb463c7:         try
1:fb463c7:         {
1:fb463c7:             properties.load(stream);
1:fb463c7:         }
1:fb463c7:         catch (Exception e)
1:fb463c7:         {
1:fb463c7:             throw new RuntimeException(e);
1:fb463c7:         }
1:fb463c7:         finally
1:fb463c7:         {
1:fb463c7:             FileUtils.closeQuietly(stream);
1:fb463c7:         }
1:fb463c7:         return properties;
1:fb463c7:     }
1:fb463c7: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5e9d9eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = Schema.instance.getCFMetaData(auditKeyspace, auditTable);
1:         PartitionUpdate.SimpleBuilder audit = PartitionUpdate.simpleBuilder(metadata, UUIDGen.getTimeUUID());
1:         audit.row()
1:              .add("keyspace_name", update.metadata().ksName)
1:              .add("table_name", update.metadata().cfName)
1:              .add("primary_key", update.metadata().getKeyValidator().getString(update.partitionKey().getKey()));
1:         return Collections.singletonList(audit.buildAsMutation());
author:Mike Adamson
-------------------------------------------------------------------------------
commit:fb463c7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.triggers;
1: 
1: import java.io.InputStream;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Properties;
1: 
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
0: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.db.partitions.Partition;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: public class AuditTrigger implements ITrigger
1: {
1:     private Properties properties = loadProperties();
1: 
1:     public Collection<Mutation> augment(Partition update)
1:     {
1:         String auditKeyspace = properties.getProperty("keyspace");
1:         String auditTable = properties.getProperty("table");
1: 
0:         RowUpdateBuilder audit = new RowUpdateBuilder(Schema.instance.getCFMetaData(auditKeyspace, auditTable),
0:                                                       FBUtilities.timestampMicros(),
0:                                                       UUIDGen.getTimeUUID());
1: 
0:         audit.add("keyspace_name", update.metadata().ksName);
0:         audit.add("table_name", update.metadata().cfName);
0:         audit.add("primary_key", update.metadata().getKeyValidator().getString(update.partitionKey().getKey()));
1: 
0:         return Collections.singletonList(audit.build());
1:     }
1: 
1:     private static Properties loadProperties()
1:     {
1:         Properties properties = new Properties();
1:         InputStream stream = AuditTrigger.class.getClassLoader().getResourceAsStream("AuditTrigger.properties");
1:         try
1:         {
1:             properties.load(stream);
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         finally
1:         {
1:             FileUtils.closeQuietly(stream);
1:         }
1:         return properties;
1:     }
1: }
============================================================================