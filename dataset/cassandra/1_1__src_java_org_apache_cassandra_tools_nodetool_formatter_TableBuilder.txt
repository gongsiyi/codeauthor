1:b6661ac: /*
1:b6661ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:b6661ac:  * or more contributor license agreements.  See the NOTICE file
1:b6661ac:  * distributed with this work for additional information
1:b6661ac:  * regarding copyright ownership.  The ASF licenses this file
1:b6661ac:  * to you under the Apache License, Version 2.0 (the
1:b6661ac:  * "License"); you may not use this file except in compliance
1:b6661ac:  * with the License.  You may obtain a copy of the License at
1:b6661ac:  *
1:b6661ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b6661ac:  *
1:b6661ac:  * Unless required by applicable law or agreed to in writing, software
1:b6661ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6661ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6661ac:  * See the License for the specific language governing permissions and
1:b6661ac:  * limitations under the License.
1:b6661ac:  */
1:b6661ac: 
1:b6661ac: package org.apache.cassandra.tools.nodetool.formatter;
1:b6661ac: 
1:b6661ac: import java.io.PrintStream;
1:b6661ac: import java.util.ArrayList;
1:b6661ac: import java.util.List;
1:b6661ac: import java.util.Objects;
1:b6661ac: import javax.annotation.Nonnull;
1:b6661ac: 
1:b6661ac: /**
1:b6661ac:  * Build and print table.
1:b6661ac:  *
1:b6661ac:  * usage:
1:b6661ac:  * <pre>
1:b6661ac:  * {@code
1:b6661ac:  * TableBuilder table = new TableBuilder();
1:b6661ac:  * for (String[] row : data)
1:b6661ac:  * {
1:b6661ac:  *     table.add(row);
1:b6661ac:  * }
1:b6661ac:  * table.print(System.out);
1:b6661ac:  * }
1:b6661ac:  * </pre>
1:b6661ac:  */
1:b6661ac: public class TableBuilder
1:b6661ac: {
1:b6661ac:     // column delimiter char
1:b6661ac:     private final char columnDelimiter;
1:b6661ac: 
1:b6661ac:     private int[] maximumColumnWidth;
1:b6661ac:     private final List<String[]> rows = new ArrayList<>();
1:b6661ac: 
1:b6661ac:     public TableBuilder()
1:b6661ac:     {
1:b6661ac:         this(' ');
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     public TableBuilder(char columnDelimiter)
1:b6661ac:     {
1:b6661ac:         this.columnDelimiter = columnDelimiter;
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     public void add(@Nonnull String... row)
1:b6661ac:     {
1:b6661ac:         Objects.requireNonNull(row);
1:b6661ac: 
1:b6661ac:         if (rows.isEmpty())
1:b6661ac:         {
1:b6661ac:             maximumColumnWidth = new int[row.length];
1:b6661ac:         }
1:b6661ac: 
1:b6661ac:         // expand max column widths if given row has more columns
1:b6661ac:         if (row.length > maximumColumnWidth.length)
1:b6661ac:         {
1:b6661ac:             int[] tmp = new int[row.length];
1:b6661ac:             System.arraycopy(maximumColumnWidth, 0, tmp, 0, maximumColumnWidth.length);
1:b6661ac:             maximumColumnWidth = tmp;
1:b6661ac:         }
1:b6661ac:         // calculate maximum column width
1:b6661ac:         int i = 0;
1:b6661ac:         for (String col : row)
1:b6661ac:         {
1:b6661ac:             maximumColumnWidth[i] = Math.max(maximumColumnWidth[i], col != null ? col.length() : 1);
1:b6661ac:             i++;
1:b6661ac:         }
1:b6661ac:         rows.add(row);
1:b6661ac:     }
1:b6661ac: 
1:b6661ac:     public void printTo(PrintStream out)
1:b6661ac:     {
1:b6661ac:         if (rows.isEmpty())
1:b6661ac:             return;
1:b6661ac: 
1:b6661ac:         for (String[] row : rows)
1:b6661ac:         {
1:b6661ac:             for (int i = 0; i < maximumColumnWidth.length; i++)
1:b6661ac:             {
1:b6661ac:                 String col = i < row.length ? row[i] : "";
1:b6661ac:                 out.print(String.format("%-" + maximumColumnWidth[i] + 's', col != null ? col : ""));
1:b6661ac:                 if (i < maximumColumnWidth.length - 1)
1:b6661ac:                     out.print(columnDelimiter);
1:b6661ac:             }
1:b6661ac:             out.println();
1:b6661ac:         }
1:b6661ac:     }
1:b6661ac: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b6661ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.formatter;
1: 
1: import java.io.PrintStream;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Objects;
1: import javax.annotation.Nonnull;
1: 
1: /**
1:  * Build and print table.
1:  *
1:  * usage:
1:  * <pre>
1:  * {@code
1:  * TableBuilder table = new TableBuilder();
1:  * for (String[] row : data)
1:  * {
1:  *     table.add(row);
1:  * }
1:  * table.print(System.out);
1:  * }
1:  * </pre>
1:  */
1: public class TableBuilder
1: {
1:     // column delimiter char
1:     private final char columnDelimiter;
1: 
1:     private int[] maximumColumnWidth;
1:     private final List<String[]> rows = new ArrayList<>();
1: 
1:     public TableBuilder()
1:     {
1:         this(' ');
1:     }
1: 
1:     public TableBuilder(char columnDelimiter)
1:     {
1:         this.columnDelimiter = columnDelimiter;
1:     }
1: 
1:     public void add(@Nonnull String... row)
1:     {
1:         Objects.requireNonNull(row);
1: 
1:         if (rows.isEmpty())
1:         {
1:             maximumColumnWidth = new int[row.length];
1:         }
1: 
1:         // expand max column widths if given row has more columns
1:         if (row.length > maximumColumnWidth.length)
1:         {
1:             int[] tmp = new int[row.length];
1:             System.arraycopy(maximumColumnWidth, 0, tmp, 0, maximumColumnWidth.length);
1:             maximumColumnWidth = tmp;
1:         }
1:         // calculate maximum column width
1:         int i = 0;
1:         for (String col : row)
1:         {
1:             maximumColumnWidth[i] = Math.max(maximumColumnWidth[i], col != null ? col.length() : 1);
1:             i++;
1:         }
1:         rows.add(row);
1:     }
1: 
1:     public void printTo(PrintStream out)
1:     {
1:         if (rows.isEmpty())
1:             return;
1: 
1:         for (String[] row : rows)
1:         {
1:             for (int i = 0; i < maximumColumnWidth.length; i++)
1:             {
1:                 String col = i < row.length ? row[i] : "";
1:                 out.print(String.format("%-" + maximumColumnWidth[i] + 's', col != null ? col : ""));
1:                 if (i < maximumColumnWidth.length - 1)
1:                     out.print(columnDelimiter);
1:             }
1:             out.println();
1:         }
1:     }
1: }
============================================================================