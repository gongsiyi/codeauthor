1:f199fa3: /*
1:f199fa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:f199fa3:  * or more contributor license agreements.  See the NOTICE file
1:f199fa3:  * distributed with this work for additional information
1:f199fa3:  * regarding copyright ownership.  The ASF licenses this file
1:f199fa3:  * to you under the Apache License, Version 2.0 (the
1:f199fa3:  * "License"); you may not use this file except in compliance
1:f199fa3:  * with the License.  You may obtain a copy of the License at
1:f199fa3:  *
1:f199fa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f199fa3:  *
1:f199fa3:  * Unless required by applicable law or agreed to in writing, software
1:f199fa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f199fa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f199fa3:  * See the License for the specific language governing permissions and
1:f199fa3:  * limitations under the License.
1:f199fa3:  */
1:f199fa3: package org.apache.cassandra.transport;
1:45b4fd8: 
1:165f586: import java.util.concurrent.ConcurrentHashMap;
1:45b4fd8: import java.util.concurrent.ConcurrentMap;
1:5a18e37: 
1:cbf304e: import io.netty.channel.Channel;
1:401b46b: import org.apache.cassandra.auth.IAuthenticator;
1:401b46b: import org.apache.cassandra.config.DatabaseDescriptor;
1:f199fa3: import org.apache.cassandra.service.ClientState;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:45b4fd8: 
1:f199fa3: public class ServerConnection extends Connection
6:f199fa3: {
1:326d545:     private enum State { UNINITIALIZED, AUTHENTICATION, READY }
6:f199fa3: 
1:879b694:     private volatile IAuthenticator.SaslNegotiator saslNegotiator;
1:f199fa3:     private final ClientState clientState;
1:f199fa3:     private volatile State state;
1:45b4fd8: 
1:165f586:     private final ConcurrentMap<Integer, QueryState> queryStates = new ConcurrentHashMap<>();
1:f199fa3: 
1:e0adc16:     public ServerConnection(Channel channel, ProtocolVersion version, Connection.Tracker tracker)
1:f199fa3:     {
1:5a18e37:         super(channel, version, tracker);
1:cbf304e:         this.clientState = ClientState.forExternalCalls(channel.remoteAddress());
1:f199fa3:         this.state = State.UNINITIALIZED;
5:f199fa3:     }
1:401b46b: 
1:e48ff29:     private QueryState getQueryState(int streamId)
1:f199fa3:     {
1:45b4fd8:         QueryState qState = queryStates.get(streamId);
1:45b4fd8:         if (qState == null)
1:45b4fd8:         {
1:45b4fd8:             // In theory we shouldn't get any race here, but it never hurts to be careful
1:45b4fd8:             QueryState newState = new QueryState(clientState);
1:45b4fd8:             if ((qState = queryStates.putIfAbsent(streamId, newState)) == null)
1:45b4fd8:                 qState = newState;
1:45b4fd8:         }
1:45b4fd8:         return qState;
1:f199fa3:     }
1:f199fa3: 
1:e0adc16:     public QueryState validateNewMessage(Message.Type type, ProtocolVersion version, int streamId)
1:f199fa3:     {
1:f199fa3:         switch (state)
1:f199fa3:         {
1:f199fa3:             case UNINITIALIZED:
1:f199fa3:                 if (type != Message.Type.STARTUP && type != Message.Type.OPTIONS)
1:f199fa3:                     throw new ProtocolException(String.format("Unexpected message %s, expecting STARTUP or OPTIONS", type));
1:f199fa3:                 break;
1:f199fa3:             case AUTHENTICATION:
1:401b46b:                 // Support both SASL auth from protocol v2 and the older style Credentials auth from v1
1:4960355:                 if (type != Message.Type.AUTH_RESPONSE && type != Message.Type.CREDENTIALS)
1:e0adc16:                     throw new ProtocolException(String.format("Unexpected message %s, expecting %s", type, version == ProtocolVersion.V1 ? "CREDENTIALS" : "SASL_RESPONSE"));
1:f199fa3:                 break;
1:f199fa3:             case READY:
1:f199fa3:                 if (type == Message.Type.STARTUP)
1:f199fa3:                     throw new ProtocolException("Unexpected message STARTUP, the connection is already initialized");
1:f199fa3:                 break;
1:f199fa3:             default:
1:f199fa3:                 throw new AssertionError();
1:e48ff29:         }
1:b068a9c:         return getQueryState(streamId);
1:e48ff29:     }
1:e48ff29: 
1:f199fa3:     public void applyStateTransition(Message.Type requestType, Message.Type responseType)
1:e48ff29:     {
1:f199fa3:         switch (state)
1:e48ff29:         {
1:f199fa3:             case UNINITIALIZED:
1:f199fa3:                 if (requestType == Message.Type.STARTUP)
1:401b46b:                 {
1:f199fa3:                     if (responseType == Message.Type.AUTHENTICATE)
1:f199fa3:                         state = State.AUTHENTICATION;
1:f199fa3:                     else if (responseType == Message.Type.READY)
1:f199fa3:                         state = State.READY;
1:f199fa3:                 }
1:f199fa3:                 break;
1:f199fa3:             case AUTHENTICATION:
1:401b46b:                 // Support both SASL auth from protocol v2 and the older style Credentials auth from v1
1:4960355:                 assert requestType == Message.Type.AUTH_RESPONSE || requestType == Message.Type.CREDENTIALS;
1:e48ff29: 
1:1a70df0:                 if (responseType == Message.Type.READY || responseType == Message.Type.AUTH_SUCCESS)
1:401b46b:                 {
1:f199fa3:                     state = State.READY;
1:401b46b:                     // we won't use the authenticator again, null it so that it can be GC'd
1:879b694:                     saslNegotiator = null;
1:401b46b:                 }
1:f199fa3:                 break;
1:f199fa3:             case READY:
1:4fbed40:                 break;
1:f199fa3:             default:
1:f199fa3:                 throw new AssertionError();
1:401b46b:         }
1:401b46b:     }
1:401b46b: 
1:8a8427d:     public IAuthenticator.SaslNegotiator getSaslNegotiator(QueryState queryState)
1:401b46b:     {
1:879b694:         if (saslNegotiator == null)
1:8a8427d:             saslNegotiator = DatabaseDescriptor.getAuthenticator().newSaslNegotiator(queryState.getClientAddress());
1:879b694:         return saslNegotiator;
1:f199fa3:     }
1:f199fa3: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:     public ServerConnection(Channel channel, ProtocolVersion version, Connection.Tracker tracker)
/////////////////////////////////////////////////////////////////////////
1:     public QueryState validateNewMessage(Message.Type type, ProtocolVersion version, int streamId)
/////////////////////////////////////////////////////////////////////////
1:                     throw new ProtocolException(String.format("Unexpected message %s, expecting %s", type, version == ProtocolVersion.V1 ? "CREDENTIALS" : "SASL_RESPONSE"));
commit:165f586
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<Integer, QueryState> queryStates = new ConcurrentHashMap<>();
commit:1171654
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentMap<Integer, QueryState> queryStates = new NonBlockingHashMap<>();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:b087b4c
commit:af2b858
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.channel.Channel;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public ServerConnection(Channel channel, int version, Connection.Tracker tracker)
1:         super(channel, version, tracker);
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
1:         return getQueryState(streamId);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1:     private QueryState getQueryState(int streamId)
/////////////////////////////////////////////////////////////////////////
0:     public QueryState validateNewMessage(Message.Type type, int version, int streamId)
/////////////////////////////////////////////////////////////////////////
1: 
0:         QueryState qstate = getQueryState(streamId);
0:         if (qstate.hasPager())
1:         {
0:             if (type != Message.Type.NEXT)
0:                 qstate.dropPager();
1:         }
0:         else
1:         {
0:             if (type == Message.Type.NEXT)
0:                 throw new ProtocolException("Unexpected NEXT message, paging is not set (or is done)");
1:         }
1: 
0:         return qstate;
commit:4960355
/////////////////////////////////////////////////////////////////////////
1:                 if (type != Message.Type.AUTH_RESPONSE && type != Message.Type.CREDENTIALS)
/////////////////////////////////////////////////////////////////////////
1:                 assert requestType == Message.Type.AUTH_RESPONSE || requestType == Message.Type.CREDENTIALS;
commit:1a70df0
/////////////////////////////////////////////////////////////////////////
1:                 if (responseType == Message.Type.READY || responseType == Message.Type.AUTH_SUCCESS)
commit:401b46b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.IAuthenticator;
0: import org.apache.cassandra.auth.ISaslAwareAuthenticator;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.auth.ISaslAwareAuthenticator.SaslAuthenticator;
/////////////////////////////////////////////////////////////////////////
0:     private volatile SaslAuthenticator saslAuthenticator;
/////////////////////////////////////////////////////////////////////////
0:     public void validateNewMessage(Message.Type type, int version)
/////////////////////////////////////////////////////////////////////////
1:                 // Support both SASL auth from protocol v2 and the older style Credentials auth from v1
0:                 if (type != Message.Type.SASL_RESPONSE && type != Message.Type.CREDENTIALS)
0:                     throw new ProtocolException(String.format("Unexpected message %s, expecting %s", type, version == 1 ? "CREDENTIALS" : "SASL_RESPONSE"));
/////////////////////////////////////////////////////////////////////////
1:                 // Support both SASL auth from protocol v2 and the older style Credentials auth from v1
0:                 assert requestType == Message.Type.SASL_RESPONSE || requestType == Message.Type.CREDENTIALS;
1: 
1:                 {
1:                     // we won't use the authenticator again, null it so that it can be GC'd
0:                     saslAuthenticator = null;
1:                 }
1: 
0:     public SaslAuthenticator getAuthenticator()
1:     {
0:         if (saslAuthenticator == null)
1:         {
0:             IAuthenticator authenticator = DatabaseDescriptor.getAuthenticator();
0:             assert authenticator instanceof ISaslAwareAuthenticator : "Configured IAuthenticator does not support SASL authentication";
0:             saslAuthenticator = ((ISaslAwareAuthenticator)authenticator).newAuthenticator();
1:         }
0:         return saslAuthenticator;
1:     }
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import org.apache.cassandra.service.QueryState;
1: 
0: import org.cliffc.high_scale_lib.NonBlockingHashMap;
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentMap<Integer, QueryState> queryStates = new NonBlockingHashMap<Integer, QueryState>();
1: 
/////////////////////////////////////////////////////////////////////////
0:     public QueryState getQueryState(int streamId)
1:         QueryState qState = queryStates.get(streamId);
1:         if (qState == null)
1:         {
1:             // In theory we shouldn't get any race here, but it never hurts to be careful
1:             QueryState newState = new QueryState(clientState);
1:             if ((qState = queryStates.putIfAbsent(streamId, newState)) == null)
1:                 qState = newState;
1:         }
1:         return qState;
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport;
1: 
1: import org.apache.cassandra.service.ClientState;
1: 
1: public class ServerConnection extends Connection
1: {
0:     public static final Factory FACTORY = new Factory()
1:     {
0:         public Connection newConnection(Connection.Tracker tracker)
1:         {
0:             return new ServerConnection(tracker);
1:         }
0:     };
1: 
0:     private enum State { UNINITIALIZED, AUTHENTICATION, READY; }
1: 
1:     private final ClientState clientState;
1:     private volatile State state;
1: 
0:     public ServerConnection(Connection.Tracker tracker)
1:     {
0:         super(tracker);
0:         this.clientState = new ClientState();
1:         this.state = State.UNINITIALIZED;
1:     }
1: 
0:     public ClientState clientState()
1:     {
0:         return clientState;
1:     }
1: 
0:     public void validateNewMessage(Message.Type type)
1:     {
1:         switch (state)
1:         {
1:             case UNINITIALIZED:
1:                 if (type != Message.Type.STARTUP && type != Message.Type.OPTIONS)
1:                     throw new ProtocolException(String.format("Unexpected message %s, expecting STARTUP or OPTIONS", type));
1:                 break;
1:             case AUTHENTICATION:
0:                 if (type != Message.Type.CREDENTIALS)
0:                     throw new ProtocolException(String.format("Unexpected message %s, needs authentication through CREDENTIALS message", type));
1:                 break;
1:             case READY:
1:                 if (type == Message.Type.STARTUP)
1:                     throw new ProtocolException("Unexpected message STARTUP, the connection is already initialized");
1:                 break;
1:             default:
1:                 throw new AssertionError();
1:         }
1:     }
1: 
1:     public void applyStateTransition(Message.Type requestType, Message.Type responseType)
1:     {
1:         switch (state)
1:         {
1:             case UNINITIALIZED:
1:                 if (requestType == Message.Type.STARTUP)
1:                 {
1:                     if (responseType == Message.Type.AUTHENTICATE)
1:                         state = State.AUTHENTICATION;
1:                     else if (responseType == Message.Type.READY)
1:                         state = State.READY;
1:                 }
1:                 break;
1:             case AUTHENTICATION:
0:                 assert requestType == Message.Type.CREDENTIALS;
0:                 if (responseType == Message.Type.READY)
1:                     state = State.READY;
1:             case READY:
1:                 break;
1:             default:
1:                 throw new AssertionError();
1:         }
1:     }
1: }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:8a8427d
/////////////////////////////////////////////////////////////////////////
1:     public IAuthenticator.SaslNegotiator getSaslNegotiator(QueryState queryState)
1:             saslNegotiator = DatabaseDescriptor.getAuthenticator().newSaslNegotiator(queryState.getClientAddress());
commit:879b694
/////////////////////////////////////////////////////////////////////////
1:     private volatile IAuthenticator.SaslNegotiator saslNegotiator;
/////////////////////////////////////////////////////////////////////////
1:                     saslNegotiator = null;
/////////////////////////////////////////////////////////////////////////
0:     public IAuthenticator.SaslNegotiator getSaslNegotiator()
1:         if (saslNegotiator == null)
0:             saslNegotiator = DatabaseDescriptor.getAuthenticator().newSaslNegotiator();
1:         return saslNegotiator;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:f6217ae
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentMap<Integer, QueryState> queryStates = new NonBlockingHashMap<>();
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.channel.Channel;
/////////////////////////////////////////////////////////////////////////
1:         this.clientState = ClientState.forExternalCalls(channel.remoteAddress());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:326d545
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.ISaslAwareAuthenticator.SaslAuthenticator;
1:     private enum State { UNINITIALIZED, AUTHENTICATION, READY }
/////////////////////////////////////////////////////////////////////////
0:         this.clientState = ClientState.forExternalCalls(channel.getRemoteAddress());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:4fbed40
/////////////////////////////////////////////////////////////////////////
1:                 break;
============================================================================