1:fb22109: /*
1:fb22109:  * Licensed to the Apache Software Foundation (ASF) under one
1:fb22109:  * or more contributor license agreements.  See the NOTICE file
1:fb22109:  * distributed with this work for additional information
1:fb22109:  * regarding copyright ownership.  The ASF licenses this file
1:fb22109:  * to you under the Apache License, Version 2.0 (the
1:fb22109:  * "License"); you may not use this file except in compliance
1:fb22109:  * with the License.  You may obtain a copy of the License at
1:fb22109:  *
1:fb22109:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fb22109:  *
1:fb22109:  * Unless required by applicable law or agreed to in writing, software
1:fb22109:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb22109:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb22109:  * See the License for the specific language governing permissions and
1:fb22109:  * limitations under the License.
1:fb22109:  */
1:fb22109: 
1:fb22109: package org.apache.cassandra.io.util;
1:fb22109: 
1:fb22109: import java.nio.ByteBuffer;
1:fb22109: import java.util.Objects;
1:fb22109: 
1:fb22109: import org.apache.cassandra.io.compress.BufferType;
1:fb22109: 
1:fb22109: /**
1:fb22109:  * SequentialWriter option
1:fb22109:  */
1:fb22109: public class SequentialWriterOption
1:fb22109: {
1:fb22109:     /**
1:fb22109:      * Default write option.
1:fb22109:      *
1:fb22109:      * <ul>
1:fb22109:      *   <li>buffer size: 64 KB
1:fb22109:      *   <li>buffer type: on heap
1:fb22109:      *   <li>trickle fsync: false
1:fb22109:      *   <li>trickle fsync byte interval: 10 MB
1:fb22109:      *   <li>finish on close: false
1:fb22109:      * </ul>
1:fb22109:      */
1:fb22109:     public static final SequentialWriterOption DEFAULT = SequentialWriterOption.newBuilder().build();
1:fb22109: 
1:fb22109:     private final int bufferSize;
1:fb22109:     private final BufferType bufferType;
1:fb22109:     private final boolean trickleFsync;
1:fb22109:     private final int trickleFsyncByteInterval;
1:fb22109:     private final boolean finishOnClose;
1:fb22109: 
1:fb22109:     private SequentialWriterOption(int bufferSize,
1:fb22109:                                    BufferType bufferType,
1:fb22109:                                    boolean trickleFsync,
1:fb22109:                                    int trickleFsyncByteInterval,
1:fb22109:                                    boolean finishOnClose)
1:fb22109:     {
1:fb22109:         this.bufferSize = bufferSize;
1:fb22109:         this.bufferType = bufferType;
1:fb22109:         this.trickleFsync = trickleFsync;
1:fb22109:         this.trickleFsyncByteInterval = trickleFsyncByteInterval;
1:fb22109:         this.finishOnClose = finishOnClose;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public static Builder newBuilder()
1:fb22109:     {
1:fb22109:         return new Builder();
1:fb22109:     }
1:fb22109: 
1:fb22109:     public int bufferSize()
1:fb22109:     {
1:fb22109:         return bufferSize;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public BufferType bufferType()
1:fb22109:     {
1:fb22109:         return bufferType;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public boolean trickleFsync()
1:fb22109:     {
1:fb22109:         return trickleFsync;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public int trickleFsyncByteInterval()
1:fb22109:     {
1:fb22109:         return trickleFsyncByteInterval;
1:fb22109:     }
1:fb22109: 
1:fb22109:     public boolean finishOnClose()
1:fb22109:     {
1:fb22109:         return finishOnClose;
1:fb22109:     }
1:fb22109: 
1:fb22109:     /**
1:fb22109:      * Allocate buffer using set buffer type and buffer size.
1:fb22109:      *
1:fb22109:      * @return allocated ByteBuffer
1:fb22109:      */
1:fb22109:     public ByteBuffer allocateBuffer()
1:fb22109:     {
1:fb22109:         return bufferType.allocate(bufferSize);
1:fb22109:     }
1:fb22109: 
1:fb22109:     public static class Builder
1:fb22109:     {
1:fb22109:         /* default buffer size: 64k */
1:fb22109:         private int bufferSize = 64 * 1024;
1:fb22109:         /* default buffer type: on heap */
1:fb22109:         private BufferType bufferType = BufferType.ON_HEAP;
1:fb22109:         /* default: no trickle fsync */
1:fb22109:         private boolean trickleFsync = false;
1:fb22109:         /* default tricle fsync byte interval: 10MB */
1:fb22109:         private int trickleFsyncByteInterval = 10 * 1024 * 1024;
1:fb22109:         private boolean finishOnClose = false;
1:fb22109: 
1:fb22109:         /* construct throguh SequentialWriteOption.newBuilder */
1:fb22109:         private Builder() {}
1:fb22109: 
1:fb22109:         public SequentialWriterOption build()
1:fb22109:         {
1:fb22109:             return new SequentialWriterOption(bufferSize, bufferType, trickleFsync,
1:fb22109:                                    trickleFsyncByteInterval, finishOnClose);
1:fb22109:         }
1:fb22109: 
1:fb22109:         public Builder bufferSize(int bufferSize)
1:fb22109:         {
1:fb22109:             this.bufferSize = bufferSize;
1:fb22109:             return this;
1:fb22109:         }
1:fb22109: 
1:fb22109:         public Builder bufferType(BufferType bufferType)
1:fb22109:         {
1:fb22109:             this.bufferType = Objects.requireNonNull(bufferType);
1:fb22109:             return this;
1:fb22109:         }
1:fb22109: 
1:fb22109:         public Builder trickleFsync(boolean trickleFsync)
1:fb22109:         {
1:fb22109:             this.trickleFsync = trickleFsync;
1:fb22109:             return this;
1:fb22109:         }
1:fb22109: 
1:fb22109:         public Builder trickleFsyncByteInterval(int trickleFsyncByteInterval)
1:fb22109:         {
1:fb22109:             this.trickleFsyncByteInterval = trickleFsyncByteInterval;
1:fb22109:             return this;
1:fb22109:         }
1:fb22109: 
1:fb22109:         public Builder finishOnClose(boolean finishOnClose)
1:fb22109:         {
1:fb22109:             this.finishOnClose = finishOnClose;
1:fb22109:             return this;
1:fb22109:         }
1:fb22109:     }
1:fb22109: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:fb22109
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.io.compress.BufferType;
1: 
1: /**
1:  * SequentialWriter option
1:  */
1: public class SequentialWriterOption
1: {
1:     /**
1:      * Default write option.
1:      *
1:      * <ul>
1:      *   <li>buffer size: 64 KB
1:      *   <li>buffer type: on heap
1:      *   <li>trickle fsync: false
1:      *   <li>trickle fsync byte interval: 10 MB
1:      *   <li>finish on close: false
1:      * </ul>
1:      */
1:     public static final SequentialWriterOption DEFAULT = SequentialWriterOption.newBuilder().build();
1: 
1:     private final int bufferSize;
1:     private final BufferType bufferType;
1:     private final boolean trickleFsync;
1:     private final int trickleFsyncByteInterval;
1:     private final boolean finishOnClose;
1: 
1:     private SequentialWriterOption(int bufferSize,
1:                                    BufferType bufferType,
1:                                    boolean trickleFsync,
1:                                    int trickleFsyncByteInterval,
1:                                    boolean finishOnClose)
1:     {
1:         this.bufferSize = bufferSize;
1:         this.bufferType = bufferType;
1:         this.trickleFsync = trickleFsync;
1:         this.trickleFsyncByteInterval = trickleFsyncByteInterval;
1:         this.finishOnClose = finishOnClose;
1:     }
1: 
1:     public static Builder newBuilder()
1:     {
1:         return new Builder();
1:     }
1: 
1:     public int bufferSize()
1:     {
1:         return bufferSize;
1:     }
1: 
1:     public BufferType bufferType()
1:     {
1:         return bufferType;
1:     }
1: 
1:     public boolean trickleFsync()
1:     {
1:         return trickleFsync;
1:     }
1: 
1:     public int trickleFsyncByteInterval()
1:     {
1:         return trickleFsyncByteInterval;
1:     }
1: 
1:     public boolean finishOnClose()
1:     {
1:         return finishOnClose;
1:     }
1: 
1:     /**
1:      * Allocate buffer using set buffer type and buffer size.
1:      *
1:      * @return allocated ByteBuffer
1:      */
1:     public ByteBuffer allocateBuffer()
1:     {
1:         return bufferType.allocate(bufferSize);
1:     }
1: 
1:     public static class Builder
1:     {
1:         /* default buffer size: 64k */
1:         private int bufferSize = 64 * 1024;
1:         /* default buffer type: on heap */
1:         private BufferType bufferType = BufferType.ON_HEAP;
1:         /* default: no trickle fsync */
1:         private boolean trickleFsync = false;
1:         /* default tricle fsync byte interval: 10MB */
1:         private int trickleFsyncByteInterval = 10 * 1024 * 1024;
1:         private boolean finishOnClose = false;
1: 
1:         /* construct throguh SequentialWriteOption.newBuilder */
1:         private Builder() {}
1: 
1:         public SequentialWriterOption build()
1:         {
1:             return new SequentialWriterOption(bufferSize, bufferType, trickleFsync,
1:                                    trickleFsyncByteInterval, finishOnClose);
1:         }
1: 
1:         public Builder bufferSize(int bufferSize)
1:         {
1:             this.bufferSize = bufferSize;
1:             return this;
1:         }
1: 
1:         public Builder bufferType(BufferType bufferType)
1:         {
1:             this.bufferType = Objects.requireNonNull(bufferType);
1:             return this;
1:         }
1: 
1:         public Builder trickleFsync(boolean trickleFsync)
1:         {
1:             this.trickleFsync = trickleFsync;
1:             return this;
1:         }
1: 
1:         public Builder trickleFsyncByteInterval(int trickleFsyncByteInterval)
1:         {
1:             this.trickleFsyncByteInterval = trickleFsyncByteInterval;
1:             return this;
1:         }
1: 
1:         public Builder finishOnClose(boolean finishOnClose)
1:         {
1:             this.finishOnClose = finishOnClose;
1:             return this;
1:         }
1:     }
1: }
============================================================================