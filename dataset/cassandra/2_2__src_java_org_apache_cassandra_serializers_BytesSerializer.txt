1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
2:e9c6742: 
1:fc8b76f: package org.apache.cassandra.serializers;
1:e9c6742: 
1:e9c6742: import org.apache.cassandra.utils.ByteBufferUtil;
1:e9c6742: 
1:e9c6742: import java.nio.ByteBuffer;
1:e9c6742: 
1:fc8b76f: public class BytesSerializer implements TypeSerializer<ByteBuffer>
4:e9c6742: {
1:e9c6742:     public static final BytesSerializer instance = new BytesSerializer();
1:e9c6742: 
1:e9c6742:     public ByteBuffer serialize(ByteBuffer bytes)
1:e9c6742:     {
1:e9c6742:         // We make a copy in case the user modifies the input
1:e9c6742:         return bytes.duplicate();
4:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public ByteBuffer deserialize(ByteBuffer value)
1:e94032a:     {
1:e9c6742:         // This is from the DB, so it is not shared with someone else
1:e9c6742:         return value;
1:e94032a:     }
1:e9c6742: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e94032a:     {
1:e9c6742:         // all bytes are legal.
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public String toString(ByteBuffer value)
1:e9c6742:     {
1:daff1fc:         return ByteBufferUtil.bytesToHex(value);
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public Class<ByteBuffer> getType()
1:e9c6742:     {
1:e9c6742:         return ByteBuffer.class;
1:e94032a:     }
1:e94032a: 
1:e94032a:     @Override
1:c6ed2e0:     public String toCQLLiteral(ByteBuffer buffer)
1:e94032a:     {
1:c6ed2e0:         return buffer == null
1:c6ed2e0:              ? "null"
1:c6ed2e0:              : "0x" + toString(deserialize(buffer));
1:e94032a:     }
1:e9c6742: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:c6ed2e0
/////////////////////////////////////////////////////////////////////////
1:     public String toCQLLiteral(ByteBuffer buffer)
1:         return buffer == null
1:              ? "null"
1:              : "0x" + toString(deserialize(buffer));
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void toCQLLiteral(ByteBuffer buffer, StringBuilder target)
1:     {
0:         if (buffer == null)
1:         {
0:             target.append("null");
1:         }
0:         else
1:         {
0:             target.append("0x");
0:             target.append(toString(deserialize(buffer)));
1:         }
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:         return ByteBufferUtil.bytesToHex(value);
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public class BytesSerializer implements TypeSerializer<ByteBuffer>
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
1: 
0: public class BytesSerializer extends AbstractSerializer<ByteBuffer>
1: {
1:     public static final BytesSerializer instance = new BytesSerializer();
1: 
0:     @Override
1:     public ByteBuffer serialize(ByteBuffer bytes)
1:     {
1:         // We make a copy in case the user modifies the input
1:         return bytes.duplicate();
1:     }
1: 
0:     @Override
1:     public ByteBuffer deserialize(ByteBuffer value)
1:     {
1:         // This is from the DB, so it is not shared with someone else
1:         return value;
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         // all bytes are legal.
1:     }
1: 
0:     @Override
0:     public String getString(ByteBuffer bytes)
1:     {
0:         return ByteBufferUtil.bytesToHex(bytes);
1:     }
1: 
0:     @Override
1:     public String toString(ByteBuffer value)
1:     {
0:         return getString(value);
1:     }
1: 
0:     @Override
1:     public Class<ByteBuffer> getType()
1:     {
1:         return ByteBuffer.class;
1:     }
1: }
============================================================================