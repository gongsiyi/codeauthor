1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
1:30bb255:  */
1:30bb255: 
1:30bb255: package org.apache.cassandra.io.util;
1:30bb255: 
1:30bb255: import java.nio.ByteBuffer;
1:30bb255: 
1:30bb255: /**
1:30bb255:  * Rebufferer for reading data by a RandomAccessReader.
1:30bb255:  */
1:30bb255: public interface Rebufferer extends ReaderFileProxy
1:30bb255: {
1:30bb255:     /**
1:30bb255:      * Rebuffer (move on or seek to) a given position, and return a buffer that can be used there.
1:30bb255:      * The only guarantee about the size of the returned data is that unless rebuffering at the end of the file,
1:30bb255:      * the buffer will not be empty and will contain the requested position, i.e.
1:30bb255:      * {@code offset <= position < offset + bh.buffer().limit()}, but the buffer will not be positioned there.
1:30bb255:      */
1:30bb255:     BufferHolder rebuffer(long position);
1:30bb255: 
1:30bb255:     /**
1:30bb255:      * Called when a reader is closed. Should clean up reader-specific data.
1:30bb255:      */
1:30bb255:     void closeReader();
1:30bb255: 
1:b4133f3:     interface BufferHolder
1:30bb255:     {
1:30bb255:         /**
1:30bb255:          * Returns a useable buffer (i.e. one whose position and limit can be freely modified). Its limit will be set
1:30bb255:          * to the size of the available data in the buffer.
1:30bb255:          * The buffer must be treated as read-only.
1:30bb255:          */
1:30bb255:         ByteBuffer buffer();
1:30bb255: 
1:30bb255:         /**
1:30bb255:          * Position in the file of the start of the buffer.
1:30bb255:          */
1:30bb255:         long offset();
1:30bb255: 
1:30bb255:         /**
1:30bb255:          * To be called when this buffer is no longer in use. Must be called for all BufferHolders, or ChunkCache
1:30bb255:          * will not be able to free blocks.
1:30bb255:          */
1:30bb255:         void release();
1:30bb255:     }
1:30bb255: 
1:b4133f3:     BufferHolder EMPTY = new BufferHolder()
1:30bb255:     {
1:30bb255:         final ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);
1:30bb255: 
1:30bb255:         @Override
1:30bb255:         public ByteBuffer buffer()
1:30bb255:         {
1:30bb255:             return EMPTY_BUFFER;
1:30bb255:         }
1:30bb255: 
1:30bb255:         @Override
1:30bb255:         public long offset()
1:30bb255:         {
1:30bb255:             return 0;
1:30bb255:         }
1:30bb255: 
1:30bb255:         @Override
1:30bb255:         public void release()
1:30bb255:         {
1:30bb255:             // nothing to do
1:30bb255:         }
1:30bb255:     };
1:30bb255: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1:     interface BufferHolder
/////////////////////////////////////////////////////////////////////////
1:     BufferHolder EMPTY = new BufferHolder()
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: 
1: /**
1:  * Rebufferer for reading data by a RandomAccessReader.
1:  */
1: public interface Rebufferer extends ReaderFileProxy
1: {
1:     /**
1:      * Rebuffer (move on or seek to) a given position, and return a buffer that can be used there.
1:      * The only guarantee about the size of the returned data is that unless rebuffering at the end of the file,
1:      * the buffer will not be empty and will contain the requested position, i.e.
1:      * {@code offset <= position < offset + bh.buffer().limit()}, but the buffer will not be positioned there.
1:      */
1:     BufferHolder rebuffer(long position);
1: 
1:     /**
1:      * Called when a reader is closed. Should clean up reader-specific data.
1:      */
1:     void closeReader();
1: 
0:     public interface BufferHolder
1:     {
1:         /**
1:          * Returns a useable buffer (i.e. one whose position and limit can be freely modified). Its limit will be set
1:          * to the size of the available data in the buffer.
1:          * The buffer must be treated as read-only.
1:          */
1:         ByteBuffer buffer();
1: 
1:         /**
1:          * Position in the file of the start of the buffer.
1:          */
1:         long offset();
1: 
1:         /**
1:          * To be called when this buffer is no longer in use. Must be called for all BufferHolders, or ChunkCache
1:          * will not be able to free blocks.
1:          */
1:         void release();
1:     }
1: 
0:     static final BufferHolder EMPTY = new BufferHolder()
1:     {
1:         final ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);
1: 
1:         @Override
1:         public ByteBuffer buffer()
1:         {
1:             return EMPTY_BUFFER;
1:         }
1: 
1:         @Override
1:         public long offset()
1:         {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public void release()
1:         {
1:             // nothing to do
1:         }
1:     };
1: }
============================================================================