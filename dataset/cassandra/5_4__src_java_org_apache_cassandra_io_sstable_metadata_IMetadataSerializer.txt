1:74bf5aa: /*
1:74bf5aa:  * Licensed to the Apache Software Foundation (ASF) under one
1:74bf5aa:  * or more contributor license agreements.  See the NOTICE file
1:74bf5aa:  * distributed with this work for additional information
1:74bf5aa:  * regarding copyright ownership.  The ASF licenses this file
1:74bf5aa:  * to you under the Apache License, Version 2.0 (the
1:74bf5aa:  * "License"); you may not use this file except in compliance
1:74bf5aa:  * with the License.  You may obtain a copy of the License at
1:74bf5aa:  *
1:74bf5aa:  *     http://www.apache.org/licenses/LICENSE-2.0
1:74bf5aa:  *
1:74bf5aa:  * Unless required by applicable law or agreed to in writing, software
1:74bf5aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74bf5aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74bf5aa:  * See the License for the specific language governing permissions and
1:74bf5aa:  * limitations under the License.
1:74bf5aa:  */
1:74bf5aa: package org.apache.cassandra.io.sstable.metadata;
1:74bf5aa: 
1:74bf5aa: import java.io.IOException;
1:74bf5aa: import java.util.EnumSet;
1:74bf5aa: import java.util.Map;
1:74bf5aa: 
1:74bf5aa: import org.apache.cassandra.io.sstable.Descriptor;
1:0600d7d: import org.apache.cassandra.io.sstable.format.Version;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:74bf5aa: 
1:74bf5aa: /**
1:74bf5aa:  * Interface for SSTable metadata serializer
1:74bf5aa:  */
1:74bf5aa: public interface IMetadataSerializer
1:74bf5aa: {
1:74bf5aa:     /**
1:74bf5aa:      * Serialize given metadata components
1:75508ec:      *
1:74bf5aa:      *
1:74bf5aa:      * @param components Metadata components to serialize
1:75508ec:      * @param out
1:0600d7d:      * @param version
1:74bf5aa:      * @throws IOException
1:74bf5aa:      */
1:0600d7d:     void serialize(Map<MetadataType, MetadataComponent> components, DataOutputPlus out, Version version) throws IOException;
1:74bf5aa: 
1:74bf5aa:     /**
1:74bf5aa:      * Deserialize specified metadata components from given descriptor.
1:74bf5aa:      *
1:74bf5aa:      * @param descriptor SSTable descriptor
1:74bf5aa:      * @return Deserialized metadata components, in deserialized order.
1:74bf5aa:      * @throws IOException
1:74bf5aa:      */
1:74bf5aa:     Map<MetadataType, MetadataComponent> deserialize(Descriptor descriptor, EnumSet<MetadataType> types) throws IOException;
1:74bf5aa: 
1:74bf5aa:     /**
1:74bf5aa:      * Deserialized only metadata component specified from given descriptor.
1:74bf5aa:      *
1:74bf5aa:      * @param descriptor SSTable descriptor
1:74bf5aa:      * @param type Metadata component type to deserialize
1:74bf5aa:      * @return Deserialized metadata component. Can be null if specified type does not exist.
1:74bf5aa:      * @throws IOException
1:74bf5aa:      */
1:74bf5aa:     MetadataComponent deserialize(Descriptor descriptor, MetadataType type) throws IOException;
1:74bf5aa: 
1:74bf5aa:     /**
1:74bf5aa:      * Mutate SSTable level
1:74bf5aa:      *
1:74bf5aa:      * @param descriptor SSTable descriptor
1:74bf5aa:      * @param newLevel new SSTable level
1:74bf5aa:      * @throws IOException
1:74bf5aa:      */
1:74bf5aa:     void mutateLevel(Descriptor descriptor, int newLevel) throws IOException;
1:a7b7214: 
1:a7b7214:     /**
1:a7b7214:      * Mutate repairedAt time
1:a7b7214:      */
1:a7b7214:     void mutateRepairedAt(Descriptor descriptor, long newRepairedAt) throws IOException;
1:74bf5aa: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0600d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.Version;
/////////////////////////////////////////////////////////////////////////
1:      * @param version
1:     void serialize(Map<MetadataType, MetadataComponent> components, DataOutputPlus out, Version version) throws IOException;
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param out
0:     void serialize(Map<MetadataType, MetadataComponent> components, DataOutputPlus out) throws IOException;
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a7b7214
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Mutate repairedAt time
1:      */
1:     void mutateRepairedAt(Descriptor descriptor, long newRepairedAt) throws IOException;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:74bf5aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.metadata;
1: 
0: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.Collection;
1: import java.util.EnumSet;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.io.sstable.Descriptor;
1: 
1: /**
1:  * Interface for SSTable metadata serializer
1:  */
1: public interface IMetadataSerializer
1: {
1:     /**
1:      * Serialize given metadata components
1:      *
1:      * @param components Metadata components to serialize
1:      * @throws IOException
1:      */
0:     void serialize(Map<MetadataType, MetadataComponent> components, DataOutput out) throws IOException;
1: 
1:     /**
1:      * Deserialize specified metadata components from given descriptor.
1:      *
1:      * @param descriptor SSTable descriptor
1:      * @return Deserialized metadata components, in deserialized order.
1:      * @throws IOException
1:      */
1:     Map<MetadataType, MetadataComponent> deserialize(Descriptor descriptor, EnumSet<MetadataType> types) throws IOException;
1: 
1:     /**
1:      * Deserialized only metadata component specified from given descriptor.
1:      *
1:      * @param descriptor SSTable descriptor
1:      * @param type Metadata component type to deserialize
1:      * @return Deserialized metadata component. Can be null if specified type does not exist.
1:      * @throws IOException
1:      */
1:     MetadataComponent deserialize(Descriptor descriptor, MetadataType type) throws IOException;
1: 
1:     /**
1:      * Mutate SSTable level
1:      *
1:      * @param descriptor SSTable descriptor
1:      * @param newLevel new SSTable level
1:      * @throws IOException
1:      */
1:     void mutateLevel(Descriptor descriptor, int newLevel) throws IOException;
1: }
============================================================================