1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
2:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
2:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
7:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:0d74c3e: import java.util.AbstractCollection;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:2457599: import com.google.common.collect.Iterables;
1:2457599: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.marshal.CollectionType;
1:a991b64: import org.apache.cassandra.serializers.MarshalException;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
2:a991b64: /**
1:a991b64:  * Base abstract class for {@code Row} implementations.
1:a991b64:  *
1:a991b64:  * Unless you have a very good reason not to, every row implementation
1:a991b64:  * should probably extend this class.
1:a991b64:  */
1:0d74c3e: public abstract class AbstractRow extends AbstractCollection<ColumnData> implements Row
7:a991b64: {
1:a991b64:     public Unfiltered.Kind kind()
1:a991b64:     {
1:a991b64:         return Unfiltered.Kind.ROW;
7:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean hasLiveData(int nowInSec)
1:a991b64:     {
1:a991b64:         if (primaryKeyLivenessInfo().isLive(nowInSec))
2:a991b64:             return true;
1:a991b64: 
1:2457599:         return Iterables.any(cells(), cell -> cell.isLive(nowInSec));
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isStatic()
1:a991b64:     {
1:a991b64:         return clustering() == Clustering.STATIC_CLUSTERING;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:a991b64:         FBUtilities.updateWithByte(digest, kind().ordinal());
1:a991b64:         clustering().digest(digest);
1:a991b64: 
1:a991b64:         deletion().digest(digest);
1:a991b64:         primaryKeyLivenessInfo().digest(digest);
1:a991b64: 
1:2457599:         for (ColumnData cd : this)
1:2457599:             cd.digest(digest);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void validateData(CFMetaData metadata)
1:a991b64:     {
1:a991b64:         Clustering clustering = clustering();
1:a991b64:         for (int i = 0; i < clustering.size(); i++)
1:a991b64:         {
1:a991b64:             ByteBuffer value = clustering.get(i);
1:a991b64:             if (value != null)
1:a991b64:                 metadata.comparator.subtype(i).validate(value);
1:a991b64:         }
1:a991b64: 
1:a991b64:         primaryKeyLivenessInfo().validate();
1:665f747:         if (deletion().time().localDeletionTime() < 0)
1:a991b64:             throw new MarshalException("A local deletion time should not be negative");
1:a991b64: 
1:2457599:         for (ColumnData cd : this)
1:2457599:             cd.validate();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata)
1:a991b64:     {
1:a991b64:         return toString(metadata, false);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata, boolean fullDetails)
1:a991b64:     {
1:71b1c4a:         return toString(metadata, true, fullDetails);
1:71b1c4a:     }
1:71b1c4a: 
1:71b1c4a:     public String toString(CFMetaData metadata, boolean includeClusterKeys, boolean fullDetails)
1:71b1c4a:     {
1:a991b64:         StringBuilder sb = new StringBuilder();
1:a991b64:         sb.append("Row");
1:a991b64:         if (fullDetails)
1:a991b64:         {
1:a991b64:             sb.append("[info=").append(primaryKeyLivenessInfo());
1:a991b64:             if (!deletion().isLive())
1:a991b64:                 sb.append(" del=").append(deletion());
1:a991b64:             sb.append(" ]");
1:a991b64:         }
1:71b1c4a:         sb.append(": ");
1:71b1c4a:         if(includeClusterKeys)
1:71b1c4a:             sb.append(clustering().toString(metadata));
1:71b1c4a:         else
1:71b1c4a:             sb.append(clustering().toCQLString(metadata));
1:71b1c4a:         sb.append(" | ");
1:a991b64:         boolean isFirst = true;
1:2457599:         for (ColumnData cd : this)
1:a991b64:         {
1:a991b64:             if (isFirst) isFirst = false; else sb.append(", ");
1:a991b64:             if (fullDetails)
1:a991b64:             {
1:2457599:                 if (cd.column().isSimple())
1:a991b64:                 {
1:2457599:                     sb.append(cd);
1:a991b64:                 }
2:a991b64:                 else
1:a991b64:                 {
1:2457599:                     ComplexColumnData complexData = (ComplexColumnData)cd;
1:2457599:                     if (!complexData.complexDeletion().isLive())
1:2457599:                         sb.append("del(").append(cd.column().name).append(")=").append(complexData.complexDeletion());
1:2457599:                     for (Cell cell : complexData)
1:2457599:                         sb.append(", ").append(cell);
1:2457599:                 }
1:2457599:             }
1:2457599:             else
1:2457599:             {
1:2457599:                 if (cd.column().isSimple())
1:2457599:                 {
1:2457599:                     Cell cell = (Cell)cd;
1:83f8ccc:                     sb.append(cell.column().name).append('=');
1:83f8ccc:                     if (cell.isTombstone())
1:83f8ccc:                         sb.append("<tombstone>");
1:83f8ccc:                     else
1:83f8ccc:                         sb.append(cell.column().type.getString(cell.value()));
1:2457599:                 }
1:2457599:                 else
1:2457599:                 {
1:2457599:                     ComplexColumnData complexData = (ComplexColumnData)cd;
1:2457599:                     CollectionType ct = (CollectionType)cd.column().type;
1:2457599:                     sb.append(cd.column().name).append("={");
1:2457599:                     int i = 0;
1:2457599:                     for (Cell cell : complexData)
1:2457599:                     {
1:2457599:                         sb.append(i++ == 0 ? "" : ", ");
1:2457599:                         sb.append(ct.nameComparator().getString(cell.path().get(0))).append("->").append(ct.valueComparator().getString(cell.value()));
1:2457599:                     }
1:2457599:                     sb.append('}');
1:a991b64:                 }
1:a991b64:             }
1:a991b64:         }
1:a991b64:         return sb.toString();
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object other)
1:a991b64:     {
1:a991b64:         if(!(other instanceof Row))
3:a991b64:             return false;
1:a991b64: 
1:a991b64:         Row that = (Row)other;
1:a991b64:         if (!this.clustering().equals(that.clustering())
1:a991b64:              || !this.primaryKeyLivenessInfo().equals(that.primaryKeyLivenessInfo())
1:a991b64:              || !this.deletion().equals(that.deletion()))
1:a991b64:             return false;
1:a991b64: 
1:2457599:         return Iterables.elementsEqual(this, that);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:f6af142:         int hash = Objects.hash(clustering(), primaryKeyLivenessInfo(), deletion());
1:2457599:         for (ColumnData cd : this)
1:2457599:             hash += 31 * cd.hashCode();
1:a991b64:         return hash;
1:a991b64:     }
1:a991b64: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:f6af142
/////////////////////////////////////////////////////////////////////////
1:         int hash = Objects.hash(clustering(), primaryKeyLivenessInfo(), deletion());
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:71b1c4a
/////////////////////////////////////////////////////////////////////////
1:         return toString(metadata, true, fullDetails);
1:     }
1: 
1:     public String toString(CFMetaData metadata, boolean includeClusterKeys, boolean fullDetails)
1:     {
/////////////////////////////////////////////////////////////////////////
1:         sb.append(": ");
1:         if(includeClusterKeys)
1:             sb.append(clustering().toString(metadata));
1:         else
1:             sb.append(clustering().toCQLString(metadata));
1:         sb.append(" | ");
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:83f8ccc
/////////////////////////////////////////////////////////////////////////
1:                     sb.append(cell.column().name).append('=');
1:                     if (cell.isTombstone())
1:                         sb.append("<tombstone>");
1:                     else
1:                         sb.append(cell.column().type.getString(cell.value()));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:665f747
/////////////////////////////////////////////////////////////////////////
1:         if (deletion().time().localDeletionTime() < 0)
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Iterables;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return Iterables.any(cells(), cell -> cell.isLive(nowInSec));
0:         return primaryKeyLivenessInfo().isEmpty()
0:             && !iterator().hasNext();
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnData cd : this)
1:             cd.digest(digest);
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnData cd : this)
1:             cd.validate();
/////////////////////////////////////////////////////////////////////////
1:         for (ColumnData cd : this)
1:                 if (cd.column().isSimple())
1:                     sb.append(cd);
1:                     ComplexColumnData complexData = (ComplexColumnData)cd;
1:                     if (!complexData.complexDeletion().isLive())
1:                         sb.append("del(").append(cd.column().name).append(")=").append(complexData.complexDeletion());
1:                     for (Cell cell : complexData)
1:                         sb.append(", ").append(cell);
1:                 }
1:             }
1:             else
1:             {
1:                 if (cd.column().isSimple())
1:                 {
1:                     Cell cell = (Cell)cd;
0:                     sb.append(cell.column().name).append('=').append(cell.column().type.getString(cell.value()));
1:                 }
1:                 else
1:                 {
1:                     ComplexColumnData complexData = (ComplexColumnData)cd;
1:                     CollectionType ct = (CollectionType)cd.column().type;
1:                     sb.append(cd.column().name).append("={");
1:                     int i = 0;
1:                     for (Cell cell : complexData)
1:                     {
1:                         sb.append(i++ == 0 ? "" : ", ");
1:                         sb.append(ct.nameComparator().getString(cell.path().get(0))).append("->").append(ct.valueComparator().getString(cell.value()));
1:                     }
1:                     sb.append('}');
/////////////////////////////////////////////////////////////////////////
1:         return Iterables.elementsEqual(this, that);
1:         for (ColumnData cd : this)
1:             hash += 31 * cd.hashCode();
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
0: import java.util.Iterator;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * Base abstract class for {@code Row} implementations.
1:  *
1:  * Unless you have a very good reason not to, every row implementation
1:  * should probably extend this class.
1:  */
0: public abstract class AbstractRow implements Row
1: {
1:     public Unfiltered.Kind kind()
1:     {
1:         return Unfiltered.Kind.ROW;
1:     }
1: 
1:     public boolean hasLiveData(int nowInSec)
1:     {
1:         if (primaryKeyLivenessInfo().isLive(nowInSec))
1:             return true;
1: 
0:         for (Cell cell : this)
0:             if (cell.isLive(nowInSec))
1:                 return true;
1: 
1:         return false;
1:     }
1: 
0:     public boolean isEmpty()
1:     {
0:         return !primaryKeyLivenessInfo().hasTimestamp()
0:             && deletion().isLive()
0:             && !iterator().hasNext()
0:             && !hasComplexDeletion();
1:     }
1: 
1:     public boolean isStatic()
1:     {
1:         return clustering() == Clustering.STATIC_CLUSTERING;
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         FBUtilities.updateWithByte(digest, kind().ordinal());
1:         clustering().digest(digest);
1: 
1:         deletion().digest(digest);
1:         primaryKeyLivenessInfo().digest(digest);
1: 
0:         Iterator<ColumnDefinition> iter = columns().complexColumns();
0:         while (iter.hasNext())
0:             getDeletion(iter.next()).digest(digest);
1: 
0:         for (Cell cell : this)
0:             cell.digest(digest);
1:     }
1: 
1:     /**
0:      * Copy this row to the provided writer.
1:      *
0:      * @param writer the row writer to write this row to.
1:      */
0:     public void copyTo(Row.Writer writer)
1:     {
0:         Rows.writeClustering(clustering(), writer);
0:         writer.writePartitionKeyLivenessInfo(primaryKeyLivenessInfo());
0:         writer.writeRowDeletion(deletion());
1: 
0:         for (Cell cell : this)
0:             cell.writeTo(writer);
1: 
0:         for (int i = 0; i < columns().complexColumnCount(); i++)
1:         {
0:             ColumnDefinition c = columns().getComplex(i);
0:             DeletionTime dt = getDeletion(c);
0:             if (!dt.isLive())
0:                 writer.writeComplexDeletion(c, dt);
1:         }
0:         writer.endOfRow();
1:     }
1: 
1:     public void validateData(CFMetaData metadata)
1:     {
1:         Clustering clustering = clustering();
1:         for (int i = 0; i < clustering.size(); i++)
1:         {
1:             ByteBuffer value = clustering.get(i);
1:             if (value != null)
1:                 metadata.comparator.subtype(i).validate(value);
1:         }
1: 
1:         primaryKeyLivenessInfo().validate();
0:         if (deletion().localDeletionTime() < 0)
1:             throw new MarshalException("A local deletion time should not be negative");
1: 
0:         for (Cell cell : this)
0:             cell.validate();
1:     }
1: 
1:     public String toString(CFMetaData metadata)
1:     {
1:         return toString(metadata, false);
1:     }
1: 
1:     public String toString(CFMetaData metadata, boolean fullDetails)
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append("Row");
1:         if (fullDetails)
1:         {
1:             sb.append("[info=").append(primaryKeyLivenessInfo());
1:             if (!deletion().isLive())
1:                 sb.append(" del=").append(deletion());
1:             sb.append(" ]");
1:         }
0:         sb.append(": ").append(clustering().toString(metadata)).append(" | ");
1:         boolean isFirst = true;
0:         ColumnDefinition prevColumn = null;
0:         for (Cell cell : this)
1:         {
1:             if (isFirst) isFirst = false; else sb.append(", ");
1:             if (fullDetails)
1:             {
0:                 if (cell.column().isComplex() && !cell.column().equals(prevColumn))
1:                 {
0:                     DeletionTime complexDel = getDeletion(cell.column());
0:                     if (!complexDel.isLive())
0:                         sb.append("del(").append(cell.column().name).append(")=").append(complexDel).append(", ");
1:                 }
0:                 sb.append(cell);
0:                 prevColumn = cell.column();
1:             }
1:             else
1:             {
0:                 sb.append(cell.column().name);
0:                 if (cell.column().type instanceof CollectionType)
1:                 {
0:                     CollectionType ct = (CollectionType)cell.column().type;
0:                     sb.append("[").append(ct.nameComparator().getString(cell.path().get(0))).append("]");
0:                     sb.append("=").append(ct.valueComparator().getString(cell.value()));
1:                 }
1:                 else
1:                 {
0:                     sb.append("=").append(cell.column().type.getString(cell.value()));
1:                 }
1:             }
1:         }
1:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if(!(other instanceof Row))
1:             return false;
1: 
1:         Row that = (Row)other;
1:         if (!this.clustering().equals(that.clustering())
0:              || !this.columns().equals(that.columns())
1:              || !this.primaryKeyLivenessInfo().equals(that.primaryKeyLivenessInfo())
1:              || !this.deletion().equals(that.deletion()))
1:             return false;
1: 
0:         Iterator<Cell> thisCells = this.iterator();
0:         Iterator<Cell> thatCells = that.iterator();
0:         while (thisCells.hasNext())
1:         {
0:             if (!thatCells.hasNext() || !thisCells.next().equals(thatCells.next()))
1:                 return false;
1:         }
0:         return !thatCells.hasNext();
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         int hash = Objects.hash(clustering(), columns(), primaryKeyLivenessInfo(), deletion());
0:         for (Cell cell : this)
0:             hash += 31 * cell.hashCode();
1:         return hash;
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aa57626
/////////////////////////////////////////////////////////////////////////
commit:0d74c3e
/////////////////////////////////////////////////////////////////////////
1: import java.util.AbstractCollection;
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractRow extends AbstractCollection<ColumnData> implements Row
commit:0be8cb6
/////////////////////////////////////////////////////////////////////////
============================================================================