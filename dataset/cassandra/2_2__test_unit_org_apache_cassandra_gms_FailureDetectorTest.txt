1:7877d6f: /*
1:7877d6f:  * Licensed to the Apache Software Foundation (ASF) under one
1:7877d6f:  * or more contributor license agreements.  See the NOTICE file
1:7877d6f:  * distributed with this work for additional information
1:7877d6f:  * regarding copyright ownership.  The ASF licenses this file
1:7877d6f:  * to you under the Apache License, Version 2.0 (the
1:7877d6f:  * "License"); you may not use this file except in compliance
1:7877d6f:  * with the License.  You may obtain a copy of the License at
1:7877d6f:  *
1:7877d6f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7877d6f:  *
1:7877d6f:  * Unless required by applicable law or agreed to in writing, software
1:7877d6f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7877d6f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7877d6f:  * See the License for the specific language governing permissions and
1:7877d6f:  * limitations under the License.
1:7877d6f:  */
1:7877d6f: 
1:7877d6f: package org.apache.cassandra.gms;
1:7877d6f: 
1:7877d6f: import java.net.InetAddress;
1:7877d6f: import java.net.UnknownHostException;
1:7877d6f: import java.util.ArrayList;
1:7877d6f: import java.util.Collections;
1:7877d6f: import java.util.List;
1:7877d6f: import java.util.UUID;
1:7877d6f: 
1:7877d6f: import org.junit.BeforeClass;
1:7877d6f: import org.junit.Test;
1:7877d6f: 
1:7877d6f: import org.apache.cassandra.Util;
1:7877d6f: import org.apache.cassandra.config.DatabaseDescriptor;
1:7877d6f: import org.apache.cassandra.dht.IPartitioner;
1:7877d6f: import org.apache.cassandra.dht.RandomPartitioner;
1:7877d6f: import org.apache.cassandra.dht.Token;
1:7877d6f: import org.apache.cassandra.locator.TokenMetadata;
1:7877d6f: import org.apache.cassandra.service.StorageService;
1:7877d6f: 
1:7877d6f: import static org.junit.Assert.assertFalse;
1:7877d6f: 
1:7877d6f: public class FailureDetectorTest
1:7877d6f: {
1:7877d6f:     @BeforeClass
1:7877d6f:     public static void setup()
1:7877d6f:     {
1:7877d6f:         // slow unit tests can cause problems with FailureDetector's GC pause handling
1:7877d6f:         System.setProperty("cassandra.max_local_pause_in_ms", "20000");
1:9797511: 
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:7877d6f:     }
1:7877d6f: 
1:7877d6f:     @Test
1:7877d6f:     public void testConvictAfterLeft() throws UnknownHostException
1:7877d6f:     {
1:7877d6f:         StorageService ss = StorageService.instance;
1:7877d6f:         TokenMetadata tmd = ss.getTokenMetadata();
1:7877d6f:         tmd.clearUnsafe();
1:7877d6f:         IPartitioner partitioner = new RandomPartitioner();
1:7877d6f:         VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
1:7877d6f: 
1:7877d6f:         ArrayList<Token> endpointTokens = new ArrayList<>();
1:7877d6f:         ArrayList<Token> keyTokens = new ArrayList<>();
1:7877d6f:         List<InetAddress> hosts = new ArrayList<>();
1:7877d6f:         List<UUID> hostIds = new ArrayList<>();
1:7877d6f: 
1:7877d6f:         // we want to convict if there is any heartbeat data present in the FD
1:7877d6f:         DatabaseDescriptor.setPhiConvictThreshold(0);
1:7877d6f: 
1:7877d6f:         // create a ring of 2 nodes
1:7877d6f:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 3);
1:7877d6f: 
1:7877d6f:         InetAddress leftHost = hosts.get(1);
1:7877d6f: 
1:7877d6f:         FailureDetector.instance.report(leftHost);
1:7877d6f: 
1:7877d6f:         // trigger handleStateLeft in StorageService
1:7877d6f:         ss.onChange(leftHost, ApplicationState.STATUS,
1:7877d6f:                     valueFactory.left(Collections.singleton(endpointTokens.get(1)), Gossiper.computeExpireTime()));
1:7877d6f: 
1:7877d6f:         // confirm that handleStateLeft was called and leftEndpoint was removed from TokenMetadata
1:7877d6f:         assertFalse("Left endpoint not removed from TokenMetadata", tmd.isMember(leftHost));
1:7877d6f: 
1:7877d6f:         // confirm the FD's history for leftHost didn't get wiped by status jump to LEFT
1:7877d6f:         FailureDetector.instance.interpret(leftHost);
1:7877d6f:         assertFalse("Left endpoint not convicted", FailureDetector.instance.isAlive(leftHost));
1:7877d6f:     }
1:7877d6f: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: 
1:         DatabaseDescriptor.daemonInitialization();
author:Joel Knighton
-------------------------------------------------------------------------------
commit:7877d6f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.UUID;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.dht.IPartitioner;
1: import org.apache.cassandra.dht.RandomPartitioner;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.locator.TokenMetadata;
1: import org.apache.cassandra.service.StorageService;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: public class FailureDetectorTest
1: {
1:     @BeforeClass
1:     public static void setup()
1:     {
1:         // slow unit tests can cause problems with FailureDetector's GC pause handling
1:         System.setProperty("cassandra.max_local_pause_in_ms", "20000");
1:     }
1: 
1:     @Test
1:     public void testConvictAfterLeft() throws UnknownHostException
1:     {
1:         StorageService ss = StorageService.instance;
1:         TokenMetadata tmd = ss.getTokenMetadata();
1:         tmd.clearUnsafe();
1:         IPartitioner partitioner = new RandomPartitioner();
1:         VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
1: 
1:         ArrayList<Token> endpointTokens = new ArrayList<>();
1:         ArrayList<Token> keyTokens = new ArrayList<>();
1:         List<InetAddress> hosts = new ArrayList<>();
1:         List<UUID> hostIds = new ArrayList<>();
1: 
1:         // we want to convict if there is any heartbeat data present in the FD
1:         DatabaseDescriptor.setPhiConvictThreshold(0);
1: 
1:         // create a ring of 2 nodes
1:         Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, hostIds, 3);
1: 
1:         InetAddress leftHost = hosts.get(1);
1: 
1:         FailureDetector.instance.report(leftHost);
1: 
1:         // trigger handleStateLeft in StorageService
1:         ss.onChange(leftHost, ApplicationState.STATUS,
1:                     valueFactory.left(Collections.singleton(endpointTokens.get(1)), Gossiper.computeExpireTime()));
1: 
1:         // confirm that handleStateLeft was called and leftEndpoint was removed from TokenMetadata
1:         assertFalse("Left endpoint not removed from TokenMetadata", tmd.isMember(leftHost));
1: 
1:         // confirm the FD's history for leftHost didn't get wiped by status jump to LEFT
1:         FailureDetector.instance.interpret(leftHost);
1:         assertFalse("Left endpoint not convicted", FailureDetector.instance.isAlive(leftHost));
1:     }
1: }
============================================================================