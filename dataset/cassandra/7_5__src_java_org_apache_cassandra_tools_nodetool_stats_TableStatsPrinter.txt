1:5805a76: /*
1:5805a76:  * Licensed to the Apache Software Foundation (ASF) under one
1:5805a76:  * or more contributor license agreements.  See the NOTICE file
1:5805a76:  * distributed with this work for additional information
1:5805a76:  * regarding copyright ownership.  The ASF licenses this file
1:5805a76:  * to you under the Apache License, Version 2.0 (the
1:5805a76:  * "License"); you may not use this file except in compliance
1:5805a76:  * with the License.  You may obtain a copy of the License at
1:5805a76:  *
1:5805a76:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5805a76:  *
1:5805a76:  * Unless required by applicable law or agreed to in writing, software
1:5805a76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5805a76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5805a76:  * See the License for the specific language governing permissions and
1:5805a76:  * limitations under the License.
1:5805a76:  */
1:27d25c6: 
1:5805a76: package org.apache.cassandra.tools.nodetool.stats;
9:5805a76: 
1:5805a76: import java.io.PrintStream;
1:5805a76: import java.util.List;
1:5805a76: 
1:27d25c6: public class TableStatsPrinter
7:5805a76: {
1:27d25c6:     public static StatsPrinter from(String format)
1:5805a76:     {
1:5805a76:         switch (format)
1:5805a76:         {
1:5805a76:             case "json":
1:27d25c6:                 return new StatsPrinter.JsonPrinter();
1:5805a76:             case "yaml":
1:27d25c6:                 return new StatsPrinter.YamlPrinter();
1:5805a76:             default:
1:27d25c6:                 return new DefaultPrinter();
7:5805a76:         }
1:5805a76:     }
1:5805a76: 
1:27d25c6:     private static class DefaultPrinter implements StatsPrinter<TableStatsHolder>
1:5805a76:     {
3:5805a76:         @Override
1:27d25c6:         public void print(TableStatsHolder data, PrintStream out)
1:5805a76:         {
1:54cbdd7:             out.println("Total number of tables: " + data.numberOfTables);
1:54cbdd7:             out.println("----------------");
1:54cbdd7: 
1:5805a76:             List<StatsKeyspace> keyspaces = data.keyspaces;
1:5805a76:             for (StatsKeyspace keyspace : keyspaces)
1:5805a76:             {
1:5805a76:                 // print each keyspace's information
1:5805a76:                 out.println("Keyspace : " + keyspace.name);
1:5805a76:                 out.println("\tRead Count: " + keyspace.readCount);
1:5805a76:                 out.println("\tRead Latency: " + keyspace.readLatency() + " ms.");
1:5805a76:                 out.println("\tWrite Count: " + keyspace.writeCount);
1:5805a76:                 out.println("\tWrite Latency: " + keyspace.writeLatency() + " ms.");
1:5805a76:                 out.println("\tPending Flushes: " + keyspace.pendingFlushes);
1:5805a76: 
1:5805a76:                 // print each table's information
1:5805a76:                 List<StatsTable> tables = keyspace.tables;
1:5805a76:                 for (StatsTable table : tables)
1:5805a76:                 {
1:5805a76:                     out.println("\t\tTable" + (table.isIndex ? " (index): " + table.name : ": ") + table.name);
1:c9df18c:                     out.println("\t\tSSTable count: " + table.sstableCount);
1:5805a76:                     if (table.isLeveledSstable)
1:5805a76:                         out.println("\t\tSSTables in each level: [" + String.join(", ",
1:5805a76:                                                                                   table.sstablesInEachLevel) + "]");
1:5805a76: 
1:5805a76:                     out.println("\t\tSpace used (live): " + table.spaceUsedLive);
1:5805a76:                     out.println("\t\tSpace used (total): " + table.spaceUsedTotal);
1:5805a76:                     out.println("\t\tSpace used by snapshots (total): " + table.spaceUsedBySnapshotsTotal);
1:5805a76: 
1:5805a76:                     if (table.offHeapUsed)
1:5805a76:                         out.println("\t\tOff heap memory used (total): " + table.offHeapMemoryUsedTotal);
1:5805a76:                     out.println("\t\tSSTable Compression Ratio: " + table.sstableCompressionRatio);
1:5805a76:                     out.println("\t\tNumber of keys (estimate): " + table.numberOfKeysEstimate);
1:5805a76:                     out.println("\t\tMemtable cell count: " + table.memtableCellCount);
1:5805a76:                     out.println("\t\tMemtable data size: " + table.memtableDataSize);
1:5805a76: 
1:5805a76:                     if (table.memtableOffHeapUsed)
1:5805a76:                         out.println("\t\tMemtable off heap memory used: " + table.memtableOffHeapMemoryUsed);
1:5805a76:                     out.println("\t\tMemtable switch count: " + table.memtableSwitchCount);
1:5805a76:                     out.println("\t\tLocal read count: " + table.localReadCount);
1:5805a76:                     out.printf("\t\tLocal read latency: %01.3f ms%n", table.localReadLatencyMs);
1:5805a76:                     out.println("\t\tLocal write count: " + table.localWriteCount);
1:5805a76:                     out.printf("\t\tLocal write latency: %01.3f ms%n", table.localWriteLatencyMs);
1:5805a76:                     out.println("\t\tPending flushes: " + table.pendingFlushes);
1:9b47dd5:                     out.println("\t\tPercent repaired: " + table.percentRepaired);
1:5805a76: 
1:5805a76:                     out.println("\t\tBloom filter false positives: " + table.bloomFilterFalsePositives);
1:5805a76:                     out.printf("\t\tBloom filter false ratio: %01.5f%n", table.bloomFilterFalseRatio);
1:5805a76:                     out.println("\t\tBloom filter space used: " + table.bloomFilterSpaceUsed);
1:5805a76: 
1:5805a76:                     if (table.bloomFilterOffHeapUsed)
1:5805a76:                         out.println("\t\tBloom filter off heap memory used: " + table.bloomFilterOffHeapMemoryUsed);
1:5805a76:                     if (table.indexSummaryOffHeapUsed)
1:5805a76:                         out.println("\t\tIndex summary off heap memory used: " + table.indexSummaryOffHeapMemoryUsed);
1:5805a76:                     if (table.compressionMetadataOffHeapUsed)
1:5805a76:                         out.println("\t\tCompression metadata off heap memory used: " + table.compressionMetadataOffHeapMemoryUsed);
1:5805a76: 
1:5805a76:                     out.println("\t\tCompacted partition minimum bytes: " + table.compactedPartitionMinimumBytes);
1:5805a76:                     out.println("\t\tCompacted partition maximum bytes: " + table.compactedPartitionMaximumBytes);
1:5805a76:                     out.println("\t\tCompacted partition mean bytes: " + table.compactedPartitionMeanBytes);
1:5805a76:                     out.println("\t\tAverage live cells per slice (last five minutes): " + table.averageLiveCellsPerSliceLastFiveMinutes);
1:5805a76:                     out.println("\t\tMaximum live cells per slice (last five minutes): " + table.maximumLiveCellsPerSliceLastFiveMinutes);
1:5805a76:                     out.println("\t\tAverage tombstones per slice (last five minutes): " + table.averageTombstonesPerSliceLastFiveMinutes);
1:5805a76:                     out.println("\t\tMaximum tombstones per slice (last five minutes): " + table.maximumTombstonesPerSliceLastFiveMinutes);
1:5805a76:                     out.println("\t\tDropped Mutations: " + table.droppedMutations);
1:5805a76:                     out.println("");
1:5805a76:                 }
1:5805a76:                 out.println("----------------");
1:5805a76:             }
1:5805a76:         }
1:5805a76:     }
1:5805a76: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:c49bc63
author:Edward Ribeiro
-------------------------------------------------------------------------------
commit:c9df18c
/////////////////////////////////////////////////////////////////////////
1:                     out.println("\t\tSSTable count: " + table.sstableCount);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Hiroyuki Nishi
-------------------------------------------------------------------------------
commit:27d25c6
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: public class TableStatsPrinter
1:     public static StatsPrinter from(String format)
1:                 return new StatsPrinter.JsonPrinter();
1:                 return new StatsPrinter.YamlPrinter();
1:                 return new DefaultPrinter();
1:     private static class DefaultPrinter implements StatsPrinter<TableStatsHolder>
1:         public void print(TableStatsHolder data, PrintStream out)
/////////////////////////////////////////////////////////////////////////
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:54cbdd7
/////////////////////////////////////////////////////////////////////////
1:             out.println("Total number of tables: " + data.numberOfTables);
1:             out.println("----------------");
1: 
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:9b47dd5
/////////////////////////////////////////////////////////////////////////
1:                     out.println("\t\tPercent repaired: " + table.percentRepaired);
author:Shogo Hoshii
-------------------------------------------------------------------------------
commit:5805a76
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.io.PrintStream;
1: import java.util.List;
1: 
0: import org.json.simple.JSONObject;
0: import org.yaml.snakeyaml.Yaml;
1: 
0: public enum TableStatsPrinter
1: {
0:     DEFAULT(new DefaultPrinter()),
0:     JSON(new JsonPrinter()),
0:     YAML(new YamlPrinter()),;
1: 
0:     private final StatsPrinter<StatsHolder> printer;
1: 
0:     TableStatsPrinter(StatsPrinter<StatsHolder> printer)
1:     {
0:         this.printer = printer;
1:     }
1: 
0:     public void print(StatsHolder stats, PrintStream out)
1:     {
0:         printer.printFormat(stats, out);
1:     }
1: 
0:     public static TableStatsPrinter from(String format)
1:     {
1:         switch (format)
1:         {
1:             case "json":
0:                 return JSON;
1:             case "yaml":
0:                 return YAML;
1:             default:
0:                 return DEFAULT;
1:         }
1:     }
1: 
0:     private static class DefaultPrinter implements StatsPrinter<StatsHolder>
1:     {
1:         @Override
0:         public void printFormat(StatsHolder data, PrintStream out)
1:         {
1:             List<StatsKeyspace> keyspaces = data.keyspaces;
1:             for (StatsKeyspace keyspace : keyspaces)
1:             {
1:                 // print each keyspace's information
1:                 out.println("Keyspace : " + keyspace.name);
1:                 out.println("\tRead Count: " + keyspace.readCount);
1:                 out.println("\tRead Latency: " + keyspace.readLatency() + " ms.");
1:                 out.println("\tWrite Count: " + keyspace.writeCount);
1:                 out.println("\tWrite Latency: " + keyspace.writeLatency() + " ms.");
1:                 out.println("\tPending Flushes: " + keyspace.pendingFlushes);
1: 
1:                 // print each table's information
1:                 List<StatsTable> tables = keyspace.tables;
1:                 for (StatsTable table : tables)
1:                 {
1:                     out.println("\t\tTable" + (table.isIndex ? " (index): " + table.name : ": ") + table.name);
1:                     if (table.isLeveledSstable)
1:                         out.println("\t\tSSTables in each level: [" + String.join(", ",
1:                                                                                   table.sstablesInEachLevel) + "]");
1: 
1:                     out.println("\t\tSpace used (live): " + table.spaceUsedLive);
1:                     out.println("\t\tSpace used (total): " + table.spaceUsedTotal);
1:                     out.println("\t\tSpace used by snapshots (total): " + table.spaceUsedBySnapshotsTotal);
1: 
1:                     if (table.offHeapUsed)
1:                         out.println("\t\tOff heap memory used (total): " + table.offHeapMemoryUsedTotal);
1:                     out.println("\t\tSSTable Compression Ratio: " + table.sstableCompressionRatio);
1:                     out.println("\t\tNumber of keys (estimate): " + table.numberOfKeysEstimate);
1:                     out.println("\t\tMemtable cell count: " + table.memtableCellCount);
1:                     out.println("\t\tMemtable data size: " + table.memtableDataSize);
1: 
1:                     if (table.memtableOffHeapUsed)
1:                         out.println("\t\tMemtable off heap memory used: " + table.memtableOffHeapMemoryUsed);
1:                     out.println("\t\tMemtable switch count: " + table.memtableSwitchCount);
1:                     out.println("\t\tLocal read count: " + table.localReadCount);
1:                     out.printf("\t\tLocal read latency: %01.3f ms%n", table.localReadLatencyMs);
1:                     out.println("\t\tLocal write count: " + table.localWriteCount);
1:                     out.printf("\t\tLocal write latency: %01.3f ms%n", table.localWriteLatencyMs);
1:                     out.println("\t\tPending flushes: " + table.pendingFlushes);
1: 
1:                     out.println("\t\tBloom filter false positives: " + table.bloomFilterFalsePositives);
1:                     out.printf("\t\tBloom filter false ratio: %01.5f%n", table.bloomFilterFalseRatio);
1:                     out.println("\t\tBloom filter space used: " + table.bloomFilterSpaceUsed);
1: 
1:                     if (table.bloomFilterOffHeapUsed)
1:                         out.println("\t\tBloom filter off heap memory used: " + table.bloomFilterOffHeapMemoryUsed);
1:                     if (table.indexSummaryOffHeapUsed)
1:                         out.println("\t\tIndex summary off heap memory used: " + table.indexSummaryOffHeapMemoryUsed);
1:                     if (table.compressionMetadataOffHeapUsed)
1:                         out.println("\t\tCompression metadata off heap memory used: " + table.compressionMetadataOffHeapMemoryUsed);
1: 
1:                     out.println("\t\tCompacted partition minimum bytes: " + table.compactedPartitionMinimumBytes);
1:                     out.println("\t\tCompacted partition maximum bytes: " + table.compactedPartitionMaximumBytes);
1:                     out.println("\t\tCompacted partition mean bytes: " + table.compactedPartitionMeanBytes);
1:                     out.println("\t\tAverage live cells per slice (last five minutes): " + table.averageLiveCellsPerSliceLastFiveMinutes);
1:                     out.println("\t\tMaximum live cells per slice (last five minutes): " + table.maximumLiveCellsPerSliceLastFiveMinutes);
1:                     out.println("\t\tAverage tombstones per slice (last five minutes): " + table.averageTombstonesPerSliceLastFiveMinutes);
1:                     out.println("\t\tMaximum tombstones per slice (last five minutes): " + table.maximumTombstonesPerSliceLastFiveMinutes);
1:                     out.println("\t\tDropped Mutations: " + table.droppedMutations);
1:                     out.println("");
1:                 }
1:                 out.println("----------------");
1:             }
1:         }
1:     }
1: 
0:     private static class JsonPrinter implements StatsPrinter<StatsHolder>
1:     {
1:         @Override
0:         public void printFormat(StatsHolder data, PrintStream out)
1:         {
0:             JSONObject json = new JSONObject();
0:             json.putAll(data.convert2Map());
0:             out.println(json.toString());
1:         }
1:     }
1: 
0:     private static class YamlPrinter implements StatsPrinter<StatsHolder>
1:     {
1:         @Override
0:         public void printFormat(StatsHolder data, PrintStream out)
1:         {
0:             Yaml yaml = new Yaml();
0:             out.println(yaml.dump(data.convert2Map()));
1:         }
1:     }
1: 
1: }
============================================================================