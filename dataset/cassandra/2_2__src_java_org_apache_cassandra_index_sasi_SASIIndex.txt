1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi;
2:72790dc: 
1:72790dc: import java.util.*;
1:72790dc: import java.util.concurrent.Callable;
1:72790dc: import java.util.function.BiFunction;
1:72790dc: 
1:72790dc: import com.googlecode.concurrenttrees.common.Iterables;
1:f8e86eb: 
1:f8e86eb: import org.apache.cassandra.config.*;
1:72790dc: import org.apache.cassandra.cql3.Operator;
1:f8e86eb: import org.apache.cassandra.cql3.statements.IndexTarget;
1:72790dc: import org.apache.cassandra.db.*;
1:3928665: import org.apache.cassandra.db.compaction.CompactionManager;
1:72790dc: import org.apache.cassandra.db.compaction.OperationType;
1:72790dc: import org.apache.cassandra.db.filter.RowFilter;
1:3928665: import org.apache.cassandra.db.lifecycle.Tracker;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.partitions.PartitionIterator;
1:72790dc: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:72790dc: import org.apache.cassandra.db.rows.Row;
1:27ac6a8: import org.apache.cassandra.dht.Murmur3Partitioner;
1:f8e86eb: import org.apache.cassandra.exceptions.ConfigurationException;
1:72790dc: import org.apache.cassandra.exceptions.InvalidRequestException;
1:72790dc: import org.apache.cassandra.index.Index;
1:72790dc: import org.apache.cassandra.index.IndexRegistry;
1:72790dc: import org.apache.cassandra.index.SecondaryIndexBuilder;
1:f8e86eb: import org.apache.cassandra.index.TargetParser;
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:f8e86eb: import org.apache.cassandra.index.sasi.conf.IndexMode;
1:f8e86eb: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.Mode;
1:72790dc: import org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.RowKey;
1:72790dc: import org.apache.cassandra.index.sasi.plan.QueryPlan;
1:72790dc: import org.apache.cassandra.index.transactions.IndexTransaction;
1:72790dc: import org.apache.cassandra.io.sstable.Descriptor;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableFlushObserver;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:72790dc: import org.apache.cassandra.notifications.*;
1:72790dc: import org.apache.cassandra.schema.IndexMetadata;
1:72790dc: import org.apache.cassandra.utils.FBUtilities;
1:f8e86eb: import org.apache.cassandra.utils.Pair;
1:72790dc: import org.apache.cassandra.utils.concurrent.OpOrder;
1:72790dc: 
1:72790dc: public class SASIIndex implements Index, INotificationConsumer
1:72790dc: {
1:72790dc:     private static class SASIIndexBuildingSupport implements IndexBuildingSupport
1:72790dc:     {
1:72790dc:         public SecondaryIndexBuilder getIndexBuildTask(ColumnFamilyStore cfs,
1:72790dc:                                                        Set<Index> indexes,
1:72790dc:                                                        Collection<SSTableReader> sstablesToRebuild)
1:72790dc:         {
1:72790dc:             NavigableMap<SSTableReader, Map<ColumnDefinition, ColumnIndex>> sstables = new TreeMap<>((a, b) -> {
1:72790dc:                 return Integer.compare(a.descriptor.generation, b.descriptor.generation);
1:72790dc:             });
1:72790dc: 
1:72790dc:             indexes.stream()
1:72790dc:                    .filter((i) -> i instanceof SASIIndex)
1:72790dc:                    .forEach((i) -> {
1:72790dc:                        SASIIndex sasi = (SASIIndex) i;
1:fa11316:                        sasi.index.dropData(sstablesToRebuild);
1:72790dc:                        sstablesToRebuild.stream()
1:72790dc:                                         .filter((sstable) -> !sasi.index.hasSSTable(sstable))
1:72790dc:                                         .forEach((sstable) -> {
1:72790dc:                                             Map<ColumnDefinition, ColumnIndex> toBuild = sstables.get(sstable);
1:72790dc:                                             if (toBuild == null)
1:72790dc:                                                 sstables.put(sstable, (toBuild = new HashMap<>()));
1:72790dc: 
1:72790dc:                                             toBuild.put(sasi.index.getDefinition(), sasi.index);
1:72790dc:                                         });
1:72790dc:                    });
1:72790dc: 
1:72790dc:             return new SASIIndexBuilder(cfs, sstables);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private static final SASIIndexBuildingSupport INDEX_BUILDER_SUPPORT = new SASIIndexBuildingSupport();
1:72790dc: 
1:72790dc:     private final ColumnFamilyStore baseCfs;
1:72790dc:     private final IndexMetadata config;
1:72790dc:     private final ColumnIndex index;
1:72790dc: 
1:72790dc:     public SASIIndex(ColumnFamilyStore baseCfs, IndexMetadata config)
1:72790dc:     {
1:72790dc:         this.baseCfs = baseCfs;
1:72790dc:         this.config = config;
1:72790dc: 
1:f8e86eb:         ColumnDefinition column = TargetParser.parse(baseCfs.metadata, config).left;
1:72790dc:         this.index = new ColumnIndex(baseCfs.metadata.getKeyValidator(), column, config);
1:72790dc: 
1:3928665:         Tracker tracker = baseCfs.getTracker();
1:3928665:         tracker.subscribe(this);
1:3928665: 
1:3928665:         SortedMap<SSTableReader, Map<ColumnDefinition, ColumnIndex>> toRebuild = new TreeMap<>((a, b)
1:3928665:                                                 -> Integer.compare(a.descriptor.generation, b.descriptor.generation));
1:3928665: 
1:3928665:         for (SSTableReader sstable : index.init(tracker.getView().liveSSTables()))
1:3928665:         {
1:3928665:             Map<ColumnDefinition, ColumnIndex> perSSTable = toRebuild.get(sstable);
1:3928665:             if (perSSTable == null)
1:3928665:                 toRebuild.put(sstable, (perSSTable = new HashMap<>()));
1:3928665: 
1:3928665:             perSSTable.put(index.getDefinition(), index);
1:3928665:         }
1:3928665: 
1:3928665:         CompactionManager.instance.submitIndexBuild(new SASIIndexBuilder(baseCfs, toRebuild));
1:72790dc:     }
1:72790dc: 
1:f8e86eb:     public static Map<String, String> validateOptions(Map<String, String> options, CFMetaData cfm)
1:72790dc:     {
1:27ac6a8:         if (!(cfm.partitioner instanceof Murmur3Partitioner))
1:27ac6a8:             throw new ConfigurationException("SASI only supports Murmur3Partitioner.");
1:27ac6a8: 
1:f8e86eb:         String targetColumn = options.get("target");
1:f8e86eb:         if (targetColumn == null)
1:f8e86eb:             throw new ConfigurationException("unknown target column");
1:f8e86eb: 
1:f8e86eb:         Pair<ColumnDefinition, IndexTarget.Type> target = TargetParser.parse(cfm, targetColumn);
1:f8e86eb:         if (target == null)
1:f8e86eb:             throw new ConfigurationException("failed to retrieve target column for: " + targetColumn);
1:f8e86eb: 
1:27ac6a8:         if (target.left.isComplex())
1:27ac6a8:             throw new ConfigurationException("complex columns are not yet supported by SASI");
1:27ac6a8: 
1:f8e86eb:         IndexMode.validateAnalyzer(options);
1:f8e86eb: 
1:f8e86eb:         IndexMode mode = IndexMode.getMode(target.left, options);
1:f8e86eb:         if (mode.mode == Mode.SPARSE)
1:f8e86eb:         {
1:f8e86eb:             if (mode.isLiteral)
1:f8e86eb:                 throw new ConfigurationException("SPARSE mode is only supported on non-literal columns.");
1:f8e86eb: 
1:f8e86eb:             if (mode.isAnalyzed)
1:f8e86eb:                 throw new ConfigurationException("SPARSE mode doesn't support analyzers.");
1:f8e86eb:         }
1:f8e86eb: 
1:72790dc:         return Collections.emptyMap();
1:72790dc:     }
1:f8e86eb: 
1:72790dc:     public void register(IndexRegistry registry)
1:72790dc:     {
1:72790dc:         registry.registerIndex(this);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public IndexMetadata getIndexMetadata()
1:72790dc:     {
1:72790dc:         return config;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Callable<?> getInitializationTask()
1:72790dc:     {
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Callable<?> getMetadataReloadTask(IndexMetadata indexMetadata)
1:72790dc:     {
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Callable<?> getBlockingFlushTask()
1:72790dc:     {
1:72790dc:         return null; // SASI indexes are flushed along side memtable
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Callable<?> getInvalidateTask()
1:72790dc:     {
1:72790dc:         return getTruncateTask(FBUtilities.timestampMicros());
1:72790dc:     }
1:72790dc: 
1:7d857b4:     public Callable<?> getTruncateTask(Collection<SSTableReader> sstablesToRebuild)
1:7d857b4:     {
1:7d857b4:         return () -> {
1:7d857b4:             index.dropData(sstablesToRebuild);
1:7d857b4:             return null;
1:7d857b4:         };
1:7d857b4:     }
1:7d857b4: 
1:72790dc:     public Callable<?> getTruncateTask(long truncatedAt)
1:72790dc:     {
1:72790dc:         return () -> {
1:72790dc:             index.dropData(truncatedAt);
1:72790dc:             return null;
1:72790dc:         };
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldBuildBlocking()
1:72790dc:     {
1:72790dc:         return true;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Optional<ColumnFamilyStore> getBackingTable()
1:72790dc:     {
1:72790dc:         return Optional.empty();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean indexes(PartitionColumns columns)
1:72790dc:     {
1:72790dc:         return columns.contains(index.getDefinition());
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean dependsOn(ColumnDefinition column)
1:72790dc:     {
1:72790dc:         return index.getDefinition().compareTo(column) == 0;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean supportsExpression(ColumnDefinition column, Operator operator)
1:72790dc:     {
1:3928665:         return dependsOn(column) && index.supports(operator);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public AbstractType<?> customExpressionValueType()
1:72790dc:     {
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RowFilter getPostIndexQueryFilter(RowFilter filter)
1:72790dc:     {
1:72790dc:         return filter.withoutExpressions();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long getEstimatedResultRows()
1:72790dc:     {
1:72790dc:         // this is temporary (until proper QueryPlan is integrated into Cassandra)
1:72790dc:         // and allows us to priority SASI indexes if any in the query since they
1:72790dc:         // are going to be more efficient, to query and intersect, than built-in indexes.
1:72790dc:         return Long.MIN_VALUE;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void validate(PartitionUpdate update) throws InvalidRequestException
1:72790dc:     {}
1:72790dc: 
1:72790dc:     public Indexer indexerFor(DecoratedKey key, PartitionColumns columns, int nowInSec, OpOrder.Group opGroup, IndexTransaction.Type transactionType)
1:72790dc:     {
1:72790dc:         return new Indexer()
1:72790dc:         {
1:72790dc:             public void begin()
1:72790dc:             {}
1:72790dc: 
1:72790dc:             public void partitionDelete(DeletionTime deletionTime)
1:72790dc:             {}
1:72790dc: 
1:72790dc:             public void rangeTombstone(RangeTombstone tombstone)
1:72790dc:             {}
1:72790dc: 
1:72790dc:             public void insertRow(Row row)
1:72790dc:             {
1:72790dc:                 if (isNewData())
1:7d857b4:                     adjustMemtableSize(index.index(new RowKey(key, row.clustering(), baseCfs.getComparator()), row), opGroup);
1:72790dc:             }
1:72790dc: 
1:72790dc:             public void updateRow(Row oldRow, Row newRow)
1:72790dc:             {
1:72790dc:                 insertRow(newRow);
1:72790dc:             }
1:72790dc: 
1:72790dc:             public void removeRow(Row row)
1:72790dc:             {}
1:72790dc: 
1:72790dc:             public void finish()
1:72790dc:             {}
1:72790dc: 
1:72790dc:             // we are only interested in the data from Memtable
1:72790dc:             // everything else is going to be handled by SSTableWriter observers
1:72790dc:             private boolean isNewData()
1:72790dc:             {
1:72790dc:                 return transactionType == IndexTransaction.Type.UPDATE;
1:72790dc:             }
1:72790dc: 
1:72790dc:             public void adjustMemtableSize(long additionalSpace, OpOrder.Group opGroup)
1:72790dc:             {
1:72790dc:                 baseCfs.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().allocate(additionalSpace, opGroup);
1:72790dc:             }
1:72790dc:         };
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Searcher searcherFor(ReadCommand command) throws InvalidRequestException
1:72790dc:     {
1:72790dc:         CFMetaData config = command.metadata();
1:72790dc:         ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(config.cfId);
1:72790dc:         return controller -> new QueryPlan(cfs, command, DatabaseDescriptor.getRangeRpcTimeout()).execute(controller);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public SSTableFlushObserver getFlushObserver(Descriptor descriptor, OperationType opType)
1:72790dc:     {
1:72790dc:         return newWriter(baseCfs.metadata.getKeyValidator(), descriptor, Collections.singletonMap(index.getDefinition(), index), opType);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public BiFunction<PartitionIterator, ReadCommand, PartitionIterator> postProcessorFor(ReadCommand command)
1:72790dc:     {
1:72790dc:         return (partitionIterator, readCommand) -> partitionIterator;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public IndexBuildingSupport getBuildTaskSupport()
1:72790dc:     {
1:72790dc:         return INDEX_BUILDER_SUPPORT;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void handleNotification(INotification notification, Object sender)
1:72790dc:     {
1:72790dc:         // unfortunately, we can only check the type of notification via instanceof :(
1:72790dc:         if (notification instanceof SSTableAddedNotification)
1:72790dc:         {
1:72790dc:             SSTableAddedNotification notice = (SSTableAddedNotification) notification;
1:72790dc:             index.update(Collections.<SSTableReader>emptyList(), Iterables.toList(notice.added));
1:72790dc:         }
1:72790dc:         else if (notification instanceof SSTableListChangedNotification)
1:72790dc:         {
1:72790dc:             SSTableListChangedNotification notice = (SSTableListChangedNotification) notification;
1:72790dc:             index.update(notice.removed, notice.added);
1:72790dc:         }
1:72790dc:         else if (notification instanceof MemtableRenewedNotification)
1:72790dc:         {
1:72790dc:             index.switchMemtable();
1:72790dc:         }
1:48815d4:         else if (notification instanceof MemtableSwitchedNotification)
1:48815d4:         {
1:48815d4:             index.switchMemtable(((MemtableSwitchedNotification) notification).memtable);
1:48815d4:         }
1:48815d4:         else if (notification instanceof MemtableDiscardedNotification)
1:48815d4:         {
1:48815d4:             index.discardMemtable(((MemtableDiscardedNotification) notification).memtable);
1:48815d4:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ColumnIndex getIndex()
1:72790dc:     {
1:72790dc:         return index;
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected static PerSSTableIndexWriter newWriter(AbstractType<?> keyValidator,
1:72790dc:                                                      Descriptor descriptor,
1:72790dc:                                                      Map<ColumnDefinition, ColumnIndex> indexes,
1:72790dc:                                                      OperationType opType)
1:72790dc:     {
1:72790dc:         return new PerSSTableIndexWriter(keyValidator, descriptor, opType, indexes);
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.RowKey;
/////////////////////////////////////////////////////////////////////////
1:     public Callable<?> getTruncateTask(Collection<SSTableReader> sstablesToRebuild)
1:     {
1:         return () -> {
1:             index.dropData(sstablesToRebuild);
1:             return null;
1:         };
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                     adjustMemtableSize(index.index(new RowKey(key, row.clustering(), baseCfs.getComparator()), row), opGroup);
commit:fa11316
/////////////////////////////////////////////////////////////////////////
1:                        sasi.index.dropData(sstablesToRebuild);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:27ac6a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.dht.Murmur3Partitioner;
/////////////////////////////////////////////////////////////////////////
1:         if (!(cfm.partitioner instanceof Murmur3Partitioner))
1:             throw new ConfigurationException("SASI only supports Murmur3Partitioner.");
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (target.left.isComplex())
1:             throw new ConfigurationException("complex columns are not yet supported by SASI");
1: 
commit:48815d4
/////////////////////////////////////////////////////////////////////////
1:         else if (notification instanceof MemtableSwitchedNotification)
1:         {
1:             index.switchMemtable(((MemtableSwitchedNotification) notification).memtable);
1:         }
1:         else if (notification instanceof MemtableDiscardedNotification)
1:         {
1:             index.discardMemtable(((MemtableDiscardedNotification) notification).memtable);
1:         }
commit:7709c2a
/////////////////////////////////////////////////////////////////////////
commit:f8e86eb
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.config.*;
1: import org.apache.cassandra.cql3.statements.IndexTarget;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.index.TargetParser;
1: import org.apache.cassandra.index.sasi.conf.IndexMode;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder.Mode;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Pair;
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition column = TargetParser.parse(baseCfs.metadata, config).left;
/////////////////////////////////////////////////////////////////////////
1:     public static Map<String, String> validateOptions(Map<String, String> options, CFMetaData cfm)
1:         String targetColumn = options.get("target");
1:         if (targetColumn == null)
1:             throw new ConfigurationException("unknown target column");
1: 
1:         Pair<ColumnDefinition, IndexTarget.Type> target = TargetParser.parse(cfm, targetColumn);
1:         if (target == null)
1:             throw new ConfigurationException("failed to retrieve target column for: " + targetColumn);
1: 
1:         IndexMode.validateAnalyzer(options);
1: 
1:         IndexMode mode = IndexMode.getMode(target.left, options);
1:         if (mode.mode == Mode.SPARSE)
1:         {
1:             if (mode.isLiteral)
1:                 throw new ConfigurationException("SPARSE mode is only supported on non-literal columns.");
1: 
1:             if (mode.isAnalyzed)
1:                 throw new ConfigurationException("SPARSE mode doesn't support analyzers.");
1:         }
1: 
0:         ColumnFamilyStore store = Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(cfm.ksName, cfm.cfName));
0:         if (store != null && store.indexManager.listIndexes()
0:                                                .stream()
0:                                                .filter((index) -> index.dependsOn(target.left)
0:                                                                && index.getClass().isAssignableFrom(SASIIndex.class))
0:                                                .findFirst().isPresent())
0:             throw new ConfigurationException("Index on '" + targetColumn + "' already exists, SASI doesn't support multiple indexes per column.");
1: 
commit:3928665
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.compaction.CompactionManager;
1: import org.apache.cassandra.db.lifecycle.Tracker;
/////////////////////////////////////////////////////////////////////////
1:         Tracker tracker = baseCfs.getTracker();
1:         tracker.subscribe(this);
1: 
1:         SortedMap<SSTableReader, Map<ColumnDefinition, ColumnIndex>> toRebuild = new TreeMap<>((a, b)
1:                                                 -> Integer.compare(a.descriptor.generation, b.descriptor.generation));
1: 
1:         for (SSTableReader sstable : index.init(tracker.getView().liveSSTables()))
1:         {
1:             Map<ColumnDefinition, ColumnIndex> perSSTable = toRebuild.get(sstable);
1:             if (perSSTable == null)
1:                 toRebuild.put(sstable, (perSSTable = new HashMap<>()));
1: 
1:             perSSTable.put(index.getDefinition(), index);
1:         }
1: 
1:         CompactionManager.instance.submitIndexBuild(new SASIIndexBuilder(baseCfs, toRebuild));
/////////////////////////////////////////////////////////////////////////
1:         return dependsOn(column) && index.supports(operator);
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi;
1: 
1: import java.util.*;
1: import java.util.concurrent.Callable;
1: import java.util.function.BiFunction;
1: 
1: import com.googlecode.concurrenttrees.common.Iterables;
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.Operator;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.db.filter.RowFilter;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.partitions.PartitionIterator;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.index.Index;
1: import org.apache.cassandra.index.IndexRegistry;
1: import org.apache.cassandra.index.SecondaryIndexBuilder;
0: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1: import org.apache.cassandra.index.sasi.disk.PerSSTableIndexWriter;
1: import org.apache.cassandra.index.sasi.plan.QueryPlan;
1: import org.apache.cassandra.index.transactions.IndexTransaction;
1: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.format.SSTableFlushObserver;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.notifications.*;
1: import org.apache.cassandra.schema.IndexMetadata;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: 
1: public class SASIIndex implements Index, INotificationConsumer
1: {
1:     private static class SASIIndexBuildingSupport implements IndexBuildingSupport
1:     {
1:         public SecondaryIndexBuilder getIndexBuildTask(ColumnFamilyStore cfs,
1:                                                        Set<Index> indexes,
1:                                                        Collection<SSTableReader> sstablesToRebuild)
1:         {
1:             NavigableMap<SSTableReader, Map<ColumnDefinition, ColumnIndex>> sstables = new TreeMap<>((a, b) -> {
1:                 return Integer.compare(a.descriptor.generation, b.descriptor.generation);
1:             });
1: 
1:             indexes.stream()
1:                    .filter((i) -> i instanceof SASIIndex)
1:                    .forEach((i) -> {
1:                        SASIIndex sasi = (SASIIndex) i;
1:                        sstablesToRebuild.stream()
1:                                         .filter((sstable) -> !sasi.index.hasSSTable(sstable))
1:                                         .forEach((sstable) -> {
1:                                             Map<ColumnDefinition, ColumnIndex> toBuild = sstables.get(sstable);
1:                                             if (toBuild == null)
1:                                                 sstables.put(sstable, (toBuild = new HashMap<>()));
1: 
1:                                             toBuild.put(sasi.index.getDefinition(), sasi.index);
1:                                         });
1:                    });
1: 
1:             return new SASIIndexBuilder(cfs, sstables);
1:         }
1:     }
1: 
1:     private static final SASIIndexBuildingSupport INDEX_BUILDER_SUPPORT = new SASIIndexBuildingSupport();
1: 
1:     private final ColumnFamilyStore baseCfs;
1:     private final IndexMetadata config;
1:     private final ColumnIndex index;
1: 
1:     public SASIIndex(ColumnFamilyStore baseCfs, IndexMetadata config)
1:     {
1:         this.baseCfs = baseCfs;
1:         this.config = config;
1: 
0:         ColumnDefinition column = CassandraIndex.parseTarget(baseCfs.metadata, config).left;
1:         this.index = new ColumnIndex(baseCfs.metadata.getKeyValidator(), column, config);
1: 
0:         baseCfs.getTracker().subscribe(this);
1:     }
1: 
0:     public static Map<String, String> validateOptions(Map<String, String> options)
1:     {
1:         return Collections.emptyMap();
1:     }
1: 
1:     public void register(IndexRegistry registry)
1:     {
1:         registry.registerIndex(this);
1:     }
1: 
1:     public IndexMetadata getIndexMetadata()
1:     {
1:         return config;
1:     }
1: 
1:     public Callable<?> getInitializationTask()
1:     {
1:         return null;
1:     }
1: 
1:     public Callable<?> getMetadataReloadTask(IndexMetadata indexMetadata)
1:     {
1:         return null;
1:     }
1: 
1:     public Callable<?> getBlockingFlushTask()
1:     {
1:         return null; // SASI indexes are flushed along side memtable
1:     }
1: 
1:     public Callable<?> getInvalidateTask()
1:     {
1:         return getTruncateTask(FBUtilities.timestampMicros());
1:     }
1: 
1:     public Callable<?> getTruncateTask(long truncatedAt)
1:     {
1:         return () -> {
1:             index.dropData(truncatedAt);
1:             return null;
1:         };
1:     }
1: 
1:     public boolean shouldBuildBlocking()
1:     {
1:         return true;
1:     }
1: 
1:     public Optional<ColumnFamilyStore> getBackingTable()
1:     {
1:         return Optional.empty();
1:     }
1: 
1:     public boolean indexes(PartitionColumns columns)
1:     {
1:         return columns.contains(index.getDefinition());
1:     }
1: 
1:     public boolean dependsOn(ColumnDefinition column)
1:     {
1:         return index.getDefinition().compareTo(column) == 0;
1:     }
1: 
1:     public boolean supportsExpression(ColumnDefinition column, Operator operator)
1:     {
0:         return dependsOn(column);
1:     }
1: 
1:     public AbstractType<?> customExpressionValueType()
1:     {
1:         return null;
1:     }
1: 
1:     public RowFilter getPostIndexQueryFilter(RowFilter filter)
1:     {
1:         return filter.withoutExpressions();
1:     }
1: 
1:     public long getEstimatedResultRows()
1:     {
1:         // this is temporary (until proper QueryPlan is integrated into Cassandra)
1:         // and allows us to priority SASI indexes if any in the query since they
1:         // are going to be more efficient, to query and intersect, than built-in indexes.
1:         return Long.MIN_VALUE;
1:     }
1: 
1:     public void validate(PartitionUpdate update) throws InvalidRequestException
1:     {}
1: 
1:     public Indexer indexerFor(DecoratedKey key, PartitionColumns columns, int nowInSec, OpOrder.Group opGroup, IndexTransaction.Type transactionType)
1:     {
1:         return new Indexer()
1:         {
1:             public void begin()
1:             {}
1: 
1:             public void partitionDelete(DeletionTime deletionTime)
1:             {}
1: 
1:             public void rangeTombstone(RangeTombstone tombstone)
1:             {}
1: 
1:             public void insertRow(Row row)
1:             {
1:                 if (isNewData())
0:                     adjustMemtableSize(index.index(key, row), opGroup);
1:             }
1: 
1:             public void updateRow(Row oldRow, Row newRow)
1:             {
1:                 insertRow(newRow);
1:             }
1: 
1:             public void removeRow(Row row)
1:             {}
1: 
1:             public void finish()
1:             {}
1: 
1:             // we are only interested in the data from Memtable
1:             // everything else is going to be handled by SSTableWriter observers
1:             private boolean isNewData()
1:             {
1:                 return transactionType == IndexTransaction.Type.UPDATE;
1:             }
1: 
1:             public void adjustMemtableSize(long additionalSpace, OpOrder.Group opGroup)
1:             {
1:                 baseCfs.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().allocate(additionalSpace, opGroup);
1:             }
1:         };
1:     }
1: 
1:     public Searcher searcherFor(ReadCommand command) throws InvalidRequestException
1:     {
1:         CFMetaData config = command.metadata();
1:         ColumnFamilyStore cfs = Schema.instance.getColumnFamilyStoreInstance(config.cfId);
1:         return controller -> new QueryPlan(cfs, command, DatabaseDescriptor.getRangeRpcTimeout()).execute(controller);
1:     }
1: 
1:     public SSTableFlushObserver getFlushObserver(Descriptor descriptor, OperationType opType)
1:     {
1:         return newWriter(baseCfs.metadata.getKeyValidator(), descriptor, Collections.singletonMap(index.getDefinition(), index), opType);
1:     }
1: 
1:     public BiFunction<PartitionIterator, ReadCommand, PartitionIterator> postProcessorFor(ReadCommand command)
1:     {
1:         return (partitionIterator, readCommand) -> partitionIterator;
1:     }
1: 
1:     public IndexBuildingSupport getBuildTaskSupport()
1:     {
1:         return INDEX_BUILDER_SUPPORT;
1:     }
1: 
1:     public void handleNotification(INotification notification, Object sender)
1:     {
1:         // unfortunately, we can only check the type of notification via instanceof :(
1:         if (notification instanceof SSTableAddedNotification)
1:         {
1:             SSTableAddedNotification notice = (SSTableAddedNotification) notification;
1:             index.update(Collections.<SSTableReader>emptyList(), Iterables.toList(notice.added));
1:         }
1:         else if (notification instanceof SSTableListChangedNotification)
1:         {
1:             SSTableListChangedNotification notice = (SSTableListChangedNotification) notification;
1:             index.update(notice.removed, notice.added);
1:         }
1:         else if (notification instanceof MemtableRenewedNotification)
1:         {
1:             index.switchMemtable();
1:         }
1:     }
1: 
1:     public ColumnIndex getIndex()
1:     {
1:         return index;
1:     }
1: 
1:     protected static PerSSTableIndexWriter newWriter(AbstractType<?> keyValidator,
1:                                                      Descriptor descriptor,
1:                                                      Map<ColumnDefinition, ColumnIndex> indexes,
1:                                                      OperationType opType)
1:     {
1:         return new PerSSTableIndexWriter(keyValidator, descriptor, opType, indexes);
1:     }
1: }
============================================================================