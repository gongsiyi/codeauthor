1:44e9f23: /*
1:44e9f23:  * Licensed to the Apache Software Foundation (ASF) under one
1:44e9f23:  * or more contributor license agreements.  See the NOTICE file
1:44e9f23:  * distributed with this work for additional information
1:44e9f23:  * regarding copyright ownership.  The ASF licenses this file
1:44e9f23:  * to you under the Apache License, Version 2.0 (the
1:44e9f23:  * "License"); you may not use this file except in compliance
1:44e9f23:  * with the License.  You may obtain a copy of the License at
1:44e9f23:  *
1:44e9f23:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44e9f23:  *
1:44e9f23:  * Unless required by applicable law or agreed to in writing, software
1:44e9f23:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44e9f23:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44e9f23:  * See the License for the specific language governing permissions and
1:44e9f23:  * limitations under the License.
1:44e9f23:  */
1:17dd4cc: package org.apache.cassandra.utils;
8:0580fb2: 
1:0580fb2: import java.util.Arrays;
1:0580fb2: import java.util.HashMap;
1:0580fb2: import java.util.TreeSet;
1:0580fb2: import java.util.concurrent.ThreadLocalRandom;
1:0580fb2: 
1:0580fb2: // simple thread-unsafe skiplist that permits indexing/removal by position, insertion at the end
1:0580fb2: // (though easily extended to insertion at any position, not necessary here)
1:0580fb2: // we use it for sampling items by position for visiting writes in the pool of pending writes
1:0580fb2: public class DynamicList<E>
8:0580fb2: {
1:0580fb2: 
1:0580fb2:     // represents a value and an index simultaneously; each node maintains a list
1:0580fb2:     // of next pointers for each height in the skip-list this node participates in
1:0580fb2:     // (a contiguous range from [0..height))
1:0580fb2:     public static class Node<E>
1:0580fb2:     {
1:0580fb2:         // stores the size of each descendant
1:0580fb2:         private final int[] size;
1:0580fb2:         // TODO: alternate links to save space
1:0580fb2:         private final Node<E>[] links;
1:6c579a0:         private E value;
1:0580fb2: 
1:0580fb2:         private Node(int height, E value)
1:0580fb2:         {
1:0580fb2:             this.value = value;
1:0580fb2:             links = new Node[height * 2];
1:0580fb2:             size = new int[height];
1:0580fb2:             Arrays.fill(size, 1);
8:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private int height()
1:0580fb2:         {
1:0580fb2:             return size.length;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private Node<E> next(int i)
1:0580fb2:         {
1:0580fb2:             return links[i * 2];
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private Node<E> prev(int i)
1:0580fb2:         {
1:0580fb2:             return links[1 + i * 2];
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private void setNext(int i, Node<E> next)
1:0580fb2:         {
1:0580fb2:             links[i * 2] = next;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private void setPrev(int i, Node<E> prev)
1:0580fb2:         {
1:0580fb2:             links[1 + i * 2] = prev;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private Node parent(int parentHeight)
1:0580fb2:         {
1:0580fb2:             Node prev = this;
1:0580fb2:             while (true)
1:0580fb2:             {
1:0580fb2:                 int height = prev.height();
1:0580fb2:                 if (parentHeight < height)
1:0580fb2:                     return prev;
1:0580fb2:                 prev = prev.prev(height - 1);
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private final int maxHeight;
1:0580fb2:     private final Node<E> head;
1:0580fb2:     private int size;
1:0580fb2: 
1:0580fb2:     public DynamicList(int maxExpectedSize)
1:0580fb2:     {
1:6c579a0:         this.maxHeight = 3 + Math.max(0, (int) Math.ceil(Math.log(maxExpectedSize) / Math.log(2)));
1:0580fb2:         head = new Node<>(maxHeight, null);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private int randomLevel()
1:0580fb2:     {
1:0580fb2:         return 1 + Integer.bitCount(ThreadLocalRandom.current().nextInt() & ((1 << (maxHeight - 1)) - 1));
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     public Node<E> append(E value)
1:6c579a0:     {
1:6c579a0:         return append(value, Integer.MAX_VALUE);
1:6c579a0:     }
1:6c579a0: 
1:0580fb2:     // add the value to the end of the list, and return the associated Node that permits efficient removal
1:0580fb2:     // regardless of its future position in the list from other modifications
1:6c579a0:     public Node<E> append(E value, int maxSize)
1:0580fb2:     {
1:0580fb2:         Node<E> newTail = new Node<>(randomLevel(), value);
1:17dd4cc:         if (size >= maxSize)
1:17dd4cc:             return null;
1:17dd4cc:         size++;
1:0580fb2: 
1:17dd4cc:         Node<E> tail = head;
1:17dd4cc:         for (int i = maxHeight - 1 ; i >= newTail.height() ; i--)
1:0580fb2:         {
1:17dd4cc:             Node<E> next;
1:17dd4cc:             while ((next = tail.next(i)) != null)
1:17dd4cc:                 tail = next;
1:17dd4cc:             tail.size[i]++;
1:0580fb2:         }
1:17dd4cc: 
1:17dd4cc:         for (int i = newTail.height() - 1 ; i >= 0 ; i--)
1:0580fb2:         {
1:17dd4cc:             Node<E> next;
1:17dd4cc:             while ((next = tail.next(i)) != null)
1:17dd4cc:                 tail = next;
1:17dd4cc:             tail.setNext(i, newTail);
1:17dd4cc:             newTail.setPrev(i, tail);
1:0580fb2:         }
1:17dd4cc: 
1:17dd4cc:         return newTail;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // remove the provided node and its associated value from the list
1:0580fb2:     public void remove(Node<E> node)
1:0580fb2:     {
1:17dd4cc:         assert node.value != null;
1:17dd4cc:         node.value = null;
1:17dd4cc: 
1:17dd4cc:         size--;
1:17dd4cc: 
1:17dd4cc:         // go up through each level in the skip list, unlinking this node; this entails
1:17dd4cc:         // simply linking each neighbour to each other, and appending the size of the
1:17dd4cc:         // current level owned by this node's index to the preceding neighbour (since
1:17dd4cc:         // ownership is defined as any node that you must visit through the index,
1:17dd4cc:         // removal of ourselves from a level means the preceding index entry is the
1:17dd4cc:         // entry point to all of the removed node's descendants)
1:17dd4cc:         for (int i = 0 ; i < node.height() ; i++)
1:0580fb2:         {
1:17dd4cc:             Node<E> prev = node.prev(i);
1:17dd4cc:             Node<E> next = node.next(i);
1:17dd4cc:             assert prev != null;
1:17dd4cc:             prev.setNext(i, next);
1:17dd4cc:             if (next != null)
1:17dd4cc:                 next.setPrev(i, prev);
1:17dd4cc:             prev.size[i] += node.size[i] - 1;
1:0580fb2:         }
1:17dd4cc: 
1:17dd4cc:         // then go up the levels, removing 1 from the size at each height above ours
1:17dd4cc:         for (int i = node.height() ; i < maxHeight ; i++)
1:0580fb2:         {
1:17dd4cc:             // if we're at our height limit, we backtrack at our top level until we
1:17dd4cc:             // hit a neighbour with a greater height
1:17dd4cc:             while (i == node.height())
1:17dd4cc:                 node = node.prev(i - 1);
1:17dd4cc:             node.size[i]--;
1:0580fb2:         }
1:0580fb2:     }
1:def6b5f: 
1:0580fb2:     // retrieve the item at the provided index, or return null if the index is past the end of the list
1:0580fb2:     public E get(int index)
1:0580fb2:     {
1:17dd4cc:         if (index >= size)
1:17dd4cc:             return null;
1:0580fb2: 
1:17dd4cc:         index++;
1:17dd4cc:         int c = 0;
1:17dd4cc:         Node<E> finger = head;
1:17dd4cc:         for (int i = maxHeight - 1 ; i >= 0 ; i--)
1:17dd4cc:         {
1:17dd4cc:             while (c + finger.size[i] <= index)
1:0580fb2:             {
1:17dd4cc:                 c += finger.size[i];
1:17dd4cc:                 finger = finger.next(i);
1:17dd4cc:             }
1:0580fb2:         }
1:0580fb2: 
1:17dd4cc:         assert c == index;
1:17dd4cc:         return finger.value;
1:17dd4cc:     }
1:17dd4cc: 
1:17dd4cc:     public int size()
1:17dd4cc:     {
1:17dd4cc:         return size;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // some quick and dirty tests to confirm the skiplist works as intended
1:0580fb2:     // don't create a separate unit test - tools tree doesn't currently warrant them
1:0580fb2: 
1:0580fb2:     private boolean isWellFormed()
1:0580fb2:     {
1:0580fb2:         for (int i = 0 ; i < maxHeight ; i++)
1:0580fb2:         {
2:0580fb2:             int c = 0;
1:0580fb2:             for (Node node = head ; node != null ; node = node.next(i))
1:0580fb2:             {
1:0580fb2:                 if (node.prev(i) != null && node.prev(i).next(i) != node)
1:0580fb2:                     return false;
1:0580fb2:                 if (node.next(i) != null && node.next(i).prev(i) != node)
1:0580fb2:                     return false;
1:0580fb2:                 c += node.size[i];
1:0580fb2:                 if (i + 1 < maxHeight && node.parent(i + 1).next(i + 1) == node.next(i))
1:0580fb2:                 {
1:0580fb2:                     if (node.parent(i + 1).size[i + 1] != c)
1:0580fb2:                         return false;
1:0580fb2:                     c = 0;
1:0580fb2:                 }
1:0580fb2:             }
1:0580fb2:             if (i == maxHeight - 1 && c != size + 1)
1:0580fb2:                 return false;
1:0580fb2:         }
1:0580fb2:         return true;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static void main(String[] args)
1:0580fb2:     {
1:0580fb2:         DynamicList<Integer> list = new DynamicList<>(20);
1:0580fb2:         TreeSet<Integer> canon = new TreeSet<>();
1:0580fb2:         HashMap<Integer, Node> nodes = new HashMap<>();
1:0580fb2:         int c = 0;
1:0580fb2:         for (int i = 0 ; i < 100000 ; i++)
1:0580fb2:         {
1:0580fb2:             nodes.put(c, list.append(c));
1:0580fb2:             canon.add(c);
1:0580fb2:             c++;
1:0580fb2:         }
1:8c19fd6:         ThreadLocalRandom rand = ThreadLocalRandom.current();
1:0580fb2:         assert list.isWellFormed();
1:0580fb2:         for (int loop = 0 ; loop < 100 ; loop++)
1:0580fb2:         {
1:0580fb2:             System.out.println(loop);
1:0580fb2:             for (int i = 0 ; i < 100000 ; i++)
1:0580fb2:             {
1:0580fb2:                 int index = rand.nextInt(100000);
1:0580fb2:                 Integer seed = list.get(index);
1:0580fb2: //                assert canon.headSet(seed, false).size() == index;
1:0580fb2:                 list.remove(nodes.remove(seed));
1:0580fb2:                 canon.remove(seed);
1:0580fb2:                 nodes.put(c, list.append(c));
1:0580fb2:                 canon.add(c);
1:0580fb2:                 c++;
1:0580fb2:             }
1:0580fb2:             assert list.isWellFormed();
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2: }
============================================================================
author:Chris Burroughs
-------------------------------------------------------------------------------
commit:8c19fd6
/////////////////////////////////////////////////////////////////////////
1:         ThreadLocalRandom rand = ThreadLocalRandom.current();
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (size >= maxSize)
1:             return null;
1:         size++;
1:         Node<E> tail = head;
1:         for (int i = maxHeight - 1 ; i >= newTail.height() ; i--)
1:             Node<E> next;
1:             while ((next = tail.next(i)) != null)
1:                 tail = next;
1:             tail.size[i]++;
1: 
1:         for (int i = newTail.height() - 1 ; i >= 0 ; i--)
1:             Node<E> next;
1:             while ((next = tail.next(i)) != null)
1:                 tail = next;
1:             tail.setNext(i, newTail);
1:             newTail.setPrev(i, tail);
1: 
1:         return newTail;
1:         assert node.value != null;
1:         node.value = null;
1: 
1:         size--;
1: 
1:         // go up through each level in the skip list, unlinking this node; this entails
1:         // simply linking each neighbour to each other, and appending the size of the
1:         // current level owned by this node's index to the preceding neighbour (since
1:         // ownership is defined as any node that you must visit through the index,
1:         // removal of ourselves from a level means the preceding index entry is the
1:         // entry point to all of the removed node's descendants)
1:         for (int i = 0 ; i < node.height() ; i++)
1:             Node<E> prev = node.prev(i);
1:             Node<E> next = node.next(i);
1:             assert prev != null;
1:             prev.setNext(i, next);
1:             if (next != null)
1:                 next.setPrev(i, prev);
1:             prev.size[i] += node.size[i] - 1;
1: 
1:         // then go up the levels, removing 1 from the size at each height above ours
1:         for (int i = node.height() ; i < maxHeight ; i++)
1:             // if we're at our height limit, we backtrack at our top level until we
1:             // hit a neighbour with a greater height
1:             while (i == node.height())
1:                 node = node.prev(i - 1);
1:             node.size[i]--;
1:         if (index >= size)
1:             return null;
1:         index++;
1:         int c = 0;
1:         Node<E> finger = head;
1:         for (int i = maxHeight - 1 ; i >= 0 ; i--)
1:         {
1:             while (c + finger.size[i] <= index)
1:                 c += finger.size[i];
1:                 finger = finger.next(i);
1:         }
1:         assert c == index;
1:         return finger.value;
1:     }
1: 
1:     public int size()
1:     {
1:         return size;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:def6b5f
/////////////////////////////////////////////////////////////////////////
0:             node.value = null;
1: 
commit:b66475c
/////////////////////////////////////////////////////////////////////////
0:             assert node.value != null;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1:         private E value;
/////////////////////////////////////////////////////////////////////////
1:         this.maxHeight = 3 + Math.max(0, (int) Math.ceil(Math.log(maxExpectedSize) / Math.log(2)));
/////////////////////////////////////////////////////////////////////////
1:     public Node<E> append(E value)
1:     {
1:         return append(value, Integer.MAX_VALUE);
1:     }
1: 
1:     public Node<E> append(E value, int maxSize)
0:             if (size >= maxSize)
0:                 return null;
/////////////////////////////////////////////////////////////////////////
0:         assert node.value != null;
0:         node.value = null;
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.stress.util;
1: 
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.TreeSet;
1: import java.util.concurrent.ThreadLocalRandom;
0: import java.util.concurrent.locks.ReadWriteLock;
0: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
0: import org.apache.cassandra.stress.generate.FasterRandom;
1: 
1: // simple thread-unsafe skiplist that permits indexing/removal by position, insertion at the end
1: // (though easily extended to insertion at any position, not necessary here)
1: // we use it for sampling items by position for visiting writes in the pool of pending writes
1: public class DynamicList<E>
1: {
1: 
1:     // represents a value and an index simultaneously; each node maintains a list
1:     // of next pointers for each height in the skip-list this node participates in
1:     // (a contiguous range from [0..height))
1:     public static class Node<E>
1:     {
1:         // stores the size of each descendant
1:         private final int[] size;
1:         // TODO: alternate links to save space
1:         private final Node<E>[] links;
0:         private final E value;
1: 
1:         private Node(int height, E value)
1:         {
1:             this.value = value;
1:             links = new Node[height * 2];
1:             size = new int[height];
1:             Arrays.fill(size, 1);
1:         }
1: 
1:         private int height()
1:         {
1:             return size.length;
1:         }
1: 
1:         private Node<E> next(int i)
1:         {
1:             return links[i * 2];
1:         }
1: 
1:         private Node<E> prev(int i)
1:         {
1:             return links[1 + i * 2];
1:         }
1: 
1:         private void setNext(int i, Node<E> next)
1:         {
1:             links[i * 2] = next;
1:         }
1: 
1:         private void setPrev(int i, Node<E> prev)
1:         {
1:             links[1 + i * 2] = prev;
1:         }
1: 
1:         private Node parent(int parentHeight)
1:         {
1:             Node prev = this;
1:             while (true)
1:             {
1:                 int height = prev.height();
1:                 if (parentHeight < height)
1:                     return prev;
1:                 prev = prev.prev(height - 1);
1:             }
1:         }
1:     }
1: 
0:     private final ReadWriteLock lock = new ReentrantReadWriteLock();
1:     private final int maxHeight;
1:     private final Node<E> head;
1:     private int size;
1: 
1:     public DynamicList(int maxExpectedSize)
1:     {
0:         this.maxHeight = 3 + (int) Math.ceil(Math.log(maxExpectedSize) / Math.log(2));
1:         head = new Node<>(maxHeight, null);
1:     }
1: 
1:     private int randomLevel()
1:     {
1:         return 1 + Integer.bitCount(ThreadLocalRandom.current().nextInt() & ((1 << (maxHeight - 1)) - 1));
1:     }
1: 
1:     // add the value to the end of the list, and return the associated Node that permits efficient removal
1:     // regardless of its future position in the list from other modifications
0:     public Node<E> append(E value)
1:     {
1:         Node<E> newTail = new Node<>(randomLevel(), value);
1: 
0:         lock.writeLock().lock();
0:         try
1:         {
0:             size++;
1: 
0:             Node<E> tail = head;
0:             for (int i = maxHeight - 1 ; i >= newTail.height() ; i--)
1:             {
0:                 Node<E> next;
0:                 while ((next = tail.next(i)) != null)
0:                     tail = next;
0:                 tail.size[i]++;
1:             }
1: 
0:             for (int i = newTail.height() - 1 ; i >= 0 ; i--)
1:             {
0:                 Node<E> next;
0:                 while ((next = tail.next(i)) != null)
0:                     tail = next;
0:                 tail.setNext(i, newTail);
0:                 newTail.setPrev(i, tail);
1:             }
1: 
0:             return newTail;
1:         }
0:         finally
1:         {
0:             lock.writeLock().unlock();
1:         }
1:     }
1: 
1:     // remove the provided node and its associated value from the list
1:     public void remove(Node<E> node)
1:     {
0:         lock.writeLock().lock();
0:         try
1:         {
0:             size--;
1: 
0:             // go up through each level in the skip list, unlinking this node; this entails
0:             // simply linking each neighbour to each other, and appending the size of the
0:             // current level owned by this node's index to the preceding neighbour (since
0:             // ownership is defined as any node that you must visit through the index,
0:             // removal of ourselves from a level means the preceding index entry is the
0:             // entry point to all of the removed node's descendants)
0:             for (int i = 0 ; i < node.height() ; i++)
1:             {
0:                 Node<E> prev = node.prev(i);
0:                 Node<E> next = node.next(i);
0:                 assert prev != null;
0:                 prev.setNext(i, next);
0:                 if (next != null)
0:                     next.setPrev(i, prev);
0:                 prev.size[i] += node.size[i] - 1;
1:             }
1: 
0:             // then go up the levels, removing 1 from the size at each height above ours
0:             for (int i = node.height() ; i < maxHeight ; i++)
1:             {
0:                 // if we're at our height limit, we backtrack at our top level until we
0:                 // hit a neighbour with a greater height
0:                 while (i == node.height())
0:                     node = node.prev(i - 1);
0:                 node.size[i]--;
1:             }
1:         }
0:         finally
1:         {
0:             lock.writeLock().unlock();
1:         }
1:     }
1: 
1:     // retrieve the item at the provided index, or return null if the index is past the end of the list
1:     public E get(int index)
1:     {
0:         lock.readLock().lock();
0:         try
1:         {
0:             if (index >= size)
0:                 return null;
1: 
0:             index++;
1:             int c = 0;
0:             Node<E> finger = head;
0:             for (int i = maxHeight - 1 ; i >= 0 ; i--)
1:             {
0:                 while (c + finger.size[i] <= index)
1:                 {
0:                     c += finger.size[i];
0:                     finger = finger.next(i);
1:                 }
1:             }
1: 
0:             assert c == index;
0:             return finger.value;
1:         }
0:         finally
1:         {
0:             lock.readLock().unlock();
1:         }
1:     }
1: 
1:     // some quick and dirty tests to confirm the skiplist works as intended
1:     // don't create a separate unit test - tools tree doesn't currently warrant them
1: 
1:     private boolean isWellFormed()
1:     {
1:         for (int i = 0 ; i < maxHeight ; i++)
1:         {
1:             int c = 0;
1:             for (Node node = head ; node != null ; node = node.next(i))
1:             {
1:                 if (node.prev(i) != null && node.prev(i).next(i) != node)
1:                     return false;
1:                 if (node.next(i) != null && node.next(i).prev(i) != node)
1:                     return false;
1:                 c += node.size[i];
1:                 if (i + 1 < maxHeight && node.parent(i + 1).next(i + 1) == node.next(i))
1:                 {
1:                     if (node.parent(i + 1).size[i + 1] != c)
1:                         return false;
1:                     c = 0;
1:                 }
1:             }
1:             if (i == maxHeight - 1 && c != size + 1)
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     public static void main(String[] args)
1:     {
1:         DynamicList<Integer> list = new DynamicList<>(20);
1:         TreeSet<Integer> canon = new TreeSet<>();
1:         HashMap<Integer, Node> nodes = new HashMap<>();
1:         int c = 0;
1:         for (int i = 0 ; i < 100000 ; i++)
1:         {
1:             nodes.put(c, list.append(c));
1:             canon.add(c);
1:             c++;
1:         }
0:         FasterRandom rand = new FasterRandom();
1:         assert list.isWellFormed();
1:         for (int loop = 0 ; loop < 100 ; loop++)
1:         {
1:             System.out.println(loop);
1:             for (int i = 0 ; i < 100000 ; i++)
1:             {
1:                 int index = rand.nextInt(100000);
1:                 Integer seed = list.get(index);
1: //                assert canon.headSet(seed, false).size() == index;
1:                 list.remove(nodes.remove(seed));
1:                 canon.remove(seed);
1:                 nodes.put(c, list.append(c));
1:                 canon.add(c);
1:                 c++;
1:             }
1:             assert list.isWellFormed();
1:         }
1:     }
1: 
1: }
author:Jake Luciani
-------------------------------------------------------------------------------
commit:44e9f23
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================