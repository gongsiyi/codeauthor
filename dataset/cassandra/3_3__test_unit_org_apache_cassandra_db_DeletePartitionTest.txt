1:a991b64: /*
1:a991b64: * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64: * or more contributor license agreements.  See the NOTICE file
1:a991b64: * distributed with this work for additional information
1:a991b64: * regarding copyright ownership.  The ASF licenses this file
1:a991b64: * to you under the Apache License, Version 2.0 (the
1:a991b64: * "License"); you may not use this file except in compliance
1:a991b64: * with the License.  You may obtain a copy of the License at
1:a991b64: *
1:a991b64: *    http://www.apache.org/licenses/LICENSE-2.0
1:a991b64: *
1:a991b64: * Unless required by applicable law or agreed to in writing,
1:a991b64: * software distributed under the License is distributed on an
1:a991b64: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a991b64: * KIND, either express or implied.  See the License for the
1:a991b64: * specific language governing permissions and limitations
1:a991b64: * under the License.
1:a991b64: */
1:a991b64: package org.apache.cassandra.db;
1:a991b64: 
1:a991b64: import org.junit.BeforeClass;
1:a991b64: import org.junit.Test;
1:a991b64: 
1:a991b64: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.Util;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:a991b64: import org.apache.cassandra.db.rows.Row;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:a991b64: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
1:a991b64: import static junit.framework.Assert.assertFalse;
1:a991b64: import static junit.framework.Assert.assertTrue;
1:a991b64: 
1:a991b64: public class DeletePartitionTest
1:a991b64: {
1:a991b64:     private static final String KEYSPACE1 = "RemoveColumnFamilyTest";
1:a991b64:     private static final String CF_STANDARD1 = "Standard1";
1:a991b64: 
1:a991b64:     @BeforeClass
1:a991b64:     public static void defineSchema()
1:a991b64:     {
1:a991b64:         SchemaLoader.prepareServer();
1:a991b64:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:a991b64:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testDeletePartition()
1:a991b64:     {
1:a991b64:         testDeletePartition(Util.dk("key1"), true, true);
1:a991b64:         testDeletePartition(Util.dk("key2"), true, false);
1:a991b64:         testDeletePartition(Util.dk("key3"), false, true);
1:a991b64:         testDeletePartition(Util.dk("key4"), false, false);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void testDeletePartition(DecoratedKey key, boolean flushBeforeRemove, boolean flushAfterRemove)
1:a991b64:     {
1:a991b64:         ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
1:a991b64:         ColumnDefinition column = store.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
1:a991b64: 
1:a991b64:         // write
1:a991b64:         new RowUpdateBuilder(store.metadata, 0, key.getKey())
1:a991b64:                 .clustering("Column1")
1:a991b64:                 .add("val", "asdf")
1:a991b64:                 .build()
1:a991b64:                 .applyUnsafe();
1:a991b64: 
1:a991b64:         // validate that data's written
1:a991b64:         FilteredPartition partition = Util.getOnlyPartition(Util.cmd(store, key).build());
1:a991b64:         assertTrue(partition.rowCount() > 0);
1:a991b64:         Row r = partition.iterator().next();
1:a991b64:         assertTrue(r.getCell(column).value().equals(ByteBufferUtil.bytes("asdf")));
1:a991b64: 
1:a991b64:         if (flushBeforeRemove)
1:a991b64:             store.forceBlockingFlush();
1:a991b64: 
1:a991b64:         // delete the partition
1:a991b64:         new Mutation(KEYSPACE1, key)
1:a991b64:                 .add(PartitionUpdate.fullPartitionDelete(store.metadata, key, 0, FBUtilities.nowInSeconds()))
1:a991b64:                 .applyUnsafe();
1:a991b64: 
1:a991b64:         if (flushAfterRemove)
1:a991b64:             store.forceBlockingFlush();
1:a991b64: 
1:a991b64:         // validate removal
1:e51f83b:         ImmutableBTreePartition partitionUnfiltered = Util.getOnlyPartitionUnfiltered(Util.cmd(store, key).build());
1:a991b64:         assertFalse(partitionUnfiltered.partitionLevelDeletion().isLive());
1:a991b64:         assertFalse(partitionUnfiltered.iterator().hasNext());
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1:         ImmutableBTreePartition partitionUnfiltered = Util.getOnlyPartitionUnfiltered(Util.cmd(store, key).build());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.db.rows.Row;
0: import org.apache.cassandra.db.rows.RowIterator;
1: import org.apache.cassandra.db.partitions.*;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static junit.framework.Assert.assertFalse;
1: import static junit.framework.Assert.assertTrue;
1: 
1: public class DeletePartitionTest
1: {
1:     private static final String KEYSPACE1 = "RemoveColumnFamilyTest";
1:     private static final String CF_STANDARD1 = "Standard1";
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:     }
1: 
1:     @Test
1:     public void testDeletePartition()
1:     {
1:         testDeletePartition(Util.dk("key1"), true, true);
1:         testDeletePartition(Util.dk("key2"), true, false);
1:         testDeletePartition(Util.dk("key3"), false, true);
1:         testDeletePartition(Util.dk("key4"), false, false);
1:     }
1: 
1:     public void testDeletePartition(DecoratedKey key, boolean flushBeforeRemove, boolean flushAfterRemove)
1:     {
1:         ColumnFamilyStore store = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
1:         ColumnDefinition column = store.metadata.getColumnDefinition(ByteBufferUtil.bytes("val"));
1: 
1:         // write
1:         new RowUpdateBuilder(store.metadata, 0, key.getKey())
1:                 .clustering("Column1")
1:                 .add("val", "asdf")
1:                 .build()
1:                 .applyUnsafe();
1: 
1:         // validate that data's written
1:         FilteredPartition partition = Util.getOnlyPartition(Util.cmd(store, key).build());
1:         assertTrue(partition.rowCount() > 0);
1:         Row r = partition.iterator().next();
1:         assertTrue(r.getCell(column).value().equals(ByteBufferUtil.bytes("asdf")));
1: 
1:         if (flushBeforeRemove)
1:             store.forceBlockingFlush();
1: 
1:         // delete the partition
1:         new Mutation(KEYSPACE1, key)
1:                 .add(PartitionUpdate.fullPartitionDelete(store.metadata, key, 0, FBUtilities.nowInSeconds()))
1:                 .applyUnsafe();
1: 
1:         if (flushAfterRemove)
1:             store.forceBlockingFlush();
1: 
1:         // validate removal
0:         ArrayBackedPartition partitionUnfiltered = Util.getOnlyPartitionUnfiltered(Util.cmd(store, key).build());
1:         assertFalse(partitionUnfiltered.partitionLevelDeletion().isLive());
1:         assertFalse(partitionUnfiltered.iterator().hasNext());
1:     }
1: }
============================================================================