1:078c56c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:078c56c:  *
1:078c56c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:078c56c:  */
1:078c56c: package org.apache.cassandra.thrift;
1:078c56c: /*
1:078c56c:  * 
1:078c56c:  * Licensed to the Apache Software Foundation (ASF) under one
1:078c56c:  * or more contributor license agreements.  See the NOTICE file
1:078c56c:  * distributed with this work for additional information
1:078c56c:  * regarding copyright ownership.  The ASF licenses this file
1:078c56c:  * to you under the Apache License, Version 2.0 (the
1:078c56c:  * "License"); you may not use this file except in compliance
1:078c56c:  * with the License.  You may obtain a copy of the License at
1:078c56c:  * 
1:078c56c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:078c56c:  * 
1:078c56c:  * Unless required by applicable law or agreed to in writing,
1:078c56c:  * software distributed under the License is distributed on an
1:078c56c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:078c56c:  * KIND, either express or implied.  See the License for the
1:078c56c:  * specific language governing permissions and limitations
1:078c56c:  * under the License.
1:078c56c:  * 
1:078c56c:  */
1:078c56c: 
1:078c56c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:078c56c: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:078c56c: import java.util.List;
1:078c56c: import java.util.ArrayList;
1:078c56c: import java.util.Map;
1:078c56c: import java.util.HashMap;
1:078c56c: import java.util.EnumMap;
1:078c56c: import java.util.Set;
1:078c56c: import java.util.HashSet;
1:078c56c: import java.util.EnumSet;
1:078c56c: import java.util.Collections;
1:078c56c: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:078c56c: import java.util.Arrays;
1:078c56c: import org.slf4j.Logger;
1:078c56c: import org.slf4j.LoggerFactory;
1:078c56c: 
1:bffd9ea: public class IndexExpression implements org.apache.thrift.TBase<IndexExpression, IndexExpression._Fields>, java.io.Serializable, Cloneable, Comparable<IndexExpression> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexExpression");
1:078c56c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
1:078c56c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new IndexExpressionStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new IndexExpressionTupleSchemeFactory());
1:078c56c:   }
1:078c56c: 
1:7c8c570:   public ByteBuffer column_name; // required
1:078c56c:   /**
1:078c56c:    * 
1:078c56c:    * @see IndexOperator
1:078c56c:    */
1:7c8c570:   public IndexOperator op; // required
1:7c8c570:   public ByteBuffer value; // required
1:078c56c: 
1:078c56c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:078c56c:     COLUMN_NAME((short)1, "column_name"),
1:078c56c:     /**
1:078c56c:      * 
1:078c56c:      * @see IndexOperator
1:078c56c:      */
1:078c56c:     OP((short)2, "op"),
1:078c56c:     VALUE((short)3, "value");
1:078c56c: 
1:078c56c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:078c56c: 
1:078c56c:     static {
1:078c56c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:078c56c:         byName.put(field.getFieldName(), field);
1:078c56c:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // COLUMN_NAME
1:d849c69:           return COLUMN_NAME;
1:d849c69:         case 2: // OP
1:d849c69:           return OP;
1:d849c69:         case 3: // VALUE
1:d849c69:           return VALUE;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:078c56c:      * if it is not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:078c56c:       _Fields fields = findByThriftId(fieldId);
1:078c56c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:078c56c:       return fields;
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches name, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByName(String name) {
1:078c56c:       return byName.get(name);
1:078c56c:     }
1:078c56c: 
1:078c56c:     private final short _thriftId;
1:078c56c:     private final String _fieldName;
1:078c56c: 
1:078c56c:     _Fields(short thriftId, String fieldName) {
1:078c56c:       _thriftId = thriftId;
1:078c56c:       _fieldName = fieldName;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public short getThriftFieldId() {
1:078c56c:       return _thriftId;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public String getFieldName() {
1:078c56c:       return _fieldName;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   // isset id assignments
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:078c56c:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IndexOperator.class)));
1:4ec9511:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexExpression.class, metaDataMap);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexExpression() {
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexExpression(
1:e7a385a:     ByteBuffer column_name,
1:078c56c:     IndexOperator op,
1:e7a385a:     ByteBuffer value)
1:078c56c:   {
1:078c56c:     this();
1:078c56c:     this.column_name = column_name;
1:078c56c:     this.op = op;
1:078c56c:     this.value = value;
1:078c56c:   }
1:078c56c: 
1:078c56c:   /**
1:078c56c:    * Performs a deep copy on <i>other</i>.
1:078c56c:    */
1:078c56c:   public IndexExpression(IndexExpression other) {
1:078c56c:     if (other.isSetColumn_name()) {
1:4ec9511:       this.column_name = org.apache.thrift.TBaseHelper.copyBinary(other.column_name);
1:e7a385a: ;
1:078c56c:     }
1:078c56c:     if (other.isSetOp()) {
1:078c56c:       this.op = other.op;
1:078c56c:     }
1:078c56c:     if (other.isSetValue()) {
1:4ec9511:       this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
1:e7a385a: ;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexExpression deepCopy() {
2:078c56c:     return new IndexExpression(this);
1:078c56c:   }
1:078c56c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.column_name = null;
1:e7a385a:     this.op = null;
1:e7a385a:     this.value = null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public byte[] getColumn_name() {
1:4ec9511:     setColumn_name(org.apache.thrift.TBaseHelper.rightSize(column_name));
1:4ec9511:     return column_name == null ? null : column_name.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForColumn_name() {
1:e7a385a:     return column_name;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexExpression setColumn_name(byte[] column_name) {
1:4ec9511:     setColumn_name(column_name == null ? (ByteBuffer)null : ByteBuffer.wrap(column_name));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public IndexExpression setColumn_name(ByteBuffer column_name) {
1:078c56c:     this.column_name = column_name;
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetColumn_name() {
1:078c56c:     this.column_name = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetColumn_name() {
1:078c56c:     return this.column_name != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setColumn_nameIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.column_name = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   /**
1:078c56c:    * 
1:078c56c:    * @see IndexOperator
1:078c56c:    */
1:078c56c:   public IndexOperator getOp() {
1:078c56c:     return this.op;
1:078c56c:   }
1:078c56c: 
1:078c56c:   /**
1:078c56c:    * 
1:078c56c:    * @see IndexOperator
1:078c56c:    */
1:078c56c:   public IndexExpression setOp(IndexOperator op) {
1:078c56c:     this.op = op;
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetOp() {
1:078c56c:     this.op = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field op is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetOp() {
1:078c56c:     return this.op != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setOpIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.op = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public byte[] getValue() {
1:4ec9511:     setValue(org.apache.thrift.TBaseHelper.rightSize(value));
1:4ec9511:     return value == null ? null : value.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForValue() {
1:e7a385a:     return value;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexExpression setValue(byte[] value) {
1:4ec9511:     setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public IndexExpression setValue(ByteBuffer value) {
1:078c56c:     this.value = value;
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetValue() {
1:078c56c:     this.value = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetValue() {
1:078c56c:     return this.value != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setValueIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.value = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setFieldValue(_Fields field, Object value) {
1:078c56c:     switch (field) {
1:078c56c:     case COLUMN_NAME:
1:078c56c:       if (value == null) {
1:078c56c:         unsetColumn_name();
1:078c56c:       } else {
1:e7a385a:         setColumn_name((ByteBuffer)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:078c56c:     case OP:
1:078c56c:       if (value == null) {
1:078c56c:         unsetOp();
1:078c56c:       } else {
1:078c56c:         setOp((IndexOperator)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:078c56c:     case VALUE:
1:078c56c:       if (value == null) {
1:078c56c:         unsetValue();
1:078c56c:       } else {
1:e7a385a:         setValue((ByteBuffer)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public Object getFieldValue(_Fields field) {
1:078c56c:     switch (field) {
1:078c56c:     case COLUMN_NAME:
1:078c56c:       return getColumn_name();
1:078c56c: 
1:078c56c:     case OP:
1:078c56c:       return getOp();
1:078c56c: 
1:078c56c:     case VALUE:
1:078c56c:       return getValue();
1:078c56c: 
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:078c56c:     switch (field) {
1:078c56c:     case COLUMN_NAME:
1:078c56c:       return isSetColumn_name();
1:078c56c:     case OP:
1:078c56c:       return isSetOp();
1:078c56c:     case VALUE:
1:078c56c:       return isSetValue();
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public boolean equals(Object that) {
1:078c56c:     if (that == null)
1:078c56c:       return false;
1:078c56c:     if (that instanceof IndexExpression)
1:078c56c:       return this.equals((IndexExpression)that);
1:078c56c:     return false;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public boolean equals(IndexExpression that) {
1:078c56c:     if (that == null)
1:078c56c:       return false;
1:078c56c: 
1:078c56c:     boolean this_present_column_name = true && this.isSetColumn_name();
1:078c56c:     boolean that_present_column_name = true && that.isSetColumn_name();
1:078c56c:     if (this_present_column_name || that_present_column_name) {
1:078c56c:       if (!(this_present_column_name && that_present_column_name))
1:078c56c:         return false;
1:e7a385a:       if (!this.column_name.equals(that.column_name))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     boolean this_present_op = true && this.isSetOp();
1:078c56c:     boolean that_present_op = true && that.isSetOp();
1:078c56c:     if (this_present_op || that_present_op) {
1:078c56c:       if (!(this_present_op && that_present_op))
1:078c56c:         return false;
1:078c56c:       if (!this.op.equals(that.op))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     boolean this_present_value = true && this.isSetValue();
1:078c56c:     boolean that_present_value = true && that.isSetValue();
1:078c56c:     if (this_present_value || that_present_value) {
1:078c56c:       if (!(this_present_value && that_present_value))
1:078c56c:         return false;
1:e7a385a:       if (!this.value.equals(that.value))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     return true;
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_column_name = true && (isSetColumn_name());
1:d966ed0:     builder.append(present_column_name);
1:d966ed0:     if (present_column_name)
1:d966ed0:       builder.append(column_name);
1:d966ed0: 
1:d966ed0:     boolean present_op = true && (isSetOp());
1:d966ed0:     builder.append(present_op);
1:d966ed0:     if (present_op)
1:d966ed0:       builder.append(op.getValue());
1:d966ed0: 
1:d966ed0:     boolean present_value = true && (isSetValue());
1:d966ed0:     builder.append(present_value);
1:d966ed0:     if (present_value)
1:d966ed0:       builder.append(value);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:078c56c:   }
1:078c56c: 
1:bffd9ea:   @Override
1:078c56c:   public int compareTo(IndexExpression other) {
1:078c56c:     if (!getClass().equals(other.getClass())) {
1:078c56c:       return getClass().getName().compareTo(other.getClass().getName());
1:078c56c:     }
1:078c56c: 
1:078c56c:     int lastComparison = 0;
1:078c56c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(other.isSetColumn_name());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetColumn_name()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetOp()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetValue()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
2:078c56c:     return 0;
1:078c56c:   }
1:078c56c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public String toString() {
1:078c56c:     StringBuilder sb = new StringBuilder("IndexExpression(");
1:078c56c:     boolean first = true;
1:078c56c: 
1:078c56c:     sb.append("column_name:");
1:078c56c:     if (this.column_name == null) {
1:078c56c:       sb.append("null");
1:078c56c:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.column_name, sb);
1:078c56c:     }
1:078c56c:     first = false;
1:078c56c:     if (!first) sb.append(", ");
1:078c56c:     sb.append("op:");
1:078c56c:     if (this.op == null) {
1:078c56c:       sb.append("null");
1:078c56c:     } else {
1:078c56c:       sb.append(this.op);
1:078c56c:     }
1:078c56c:     first = false;
1:078c56c:     if (!first) sb.append(", ");
1:078c56c:     sb.append("value:");
1:078c56c:     if (this.value == null) {
1:078c56c:       sb.append("null");
1:078c56c:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.value, sb);
1:078c56c:     }
1:078c56c:     first = false;
1:078c56c:     sb.append(")");
1:078c56c:     return sb.toString();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:078c56c:     // check for required fields
1:078c56c:     if (column_name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
1:078c56c:     }
1:078c56c:     if (op == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'op' was not present! Struct: " + toString());
1:078c56c:     }
1:078c56c:     if (value == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
1:078c56c:     }
1:b153d45:     // check for sub-struct validity
1:078c56c:   }
1:078c56c: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class IndexExpressionStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public IndexExpressionStandardScheme getScheme() {
1:b153d45:       return new IndexExpressionStandardScheme();
1:b153d45:     }
15:b153d45:   }
1:078c56c: 
1:b153d45:   private static class IndexExpressionStandardScheme extends StandardScheme<IndexExpression> {
1:078c56c: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, IndexExpression struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:078c56c:       iprot.readStructBegin();
1:078c56c:       while (true)
1:078c56c:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:078c56c:           break;
1:078c56c:         }
1:b153d45:         switch (schemeField.id) {
1:078c56c:           case 1: // COLUMN_NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.column_name = iprot.readBinary();
1:b153d45:               struct.setColumn_nameIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:             }
1:078c56c:             break;
1:078c56c:           case 2: // OP
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.op = IndexOperator.findByValue(iprot.readI32());
1:b153d45:               struct.setOpIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:078c56c:             break;
1:078c56c:           case 3: // VALUE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.value = iprot.readBinary();
1:b153d45:               struct.setValueIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:078c56c:             break;
1:078c56c:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:078c56c:         iprot.readFieldEnd();
1:b153d45:       }
1:078c56c:       iprot.readStructEnd();
1:078c56c: 
1:078c56c:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:078c56c:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, IndexExpression struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:078c56c:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.column_name != null) {
1:078c56c:         oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.column_name);
1:078c56c:         oprot.writeFieldEnd();
1:078c56c:       }
1:b153d45:       if (struct.op != null) {
1:078c56c:         oprot.writeFieldBegin(OP_FIELD_DESC);
1:b153d45:         oprot.writeI32(struct.op.getValue());
1:078c56c:         oprot.writeFieldEnd();
1:078c56c:       }
1:b153d45:       if (struct.value != null) {
1:078c56c:         oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.value);
1:078c56c:         oprot.writeFieldEnd();
1:078c56c:       }
1:078c56c:       oprot.writeFieldStop();
1:078c56c:       oprot.writeStructEnd();
1:078c56c:     }
1:078c56c: 
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class IndexExpressionTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public IndexExpressionTupleScheme getScheme() {
1:b153d45:       return new IndexExpressionTupleScheme();
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class IndexExpressionTupleScheme extends TupleScheme<IndexExpression> {
1:078c56c: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, IndexExpression struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.column_name);
1:b153d45:       oprot.writeI32(struct.op.getValue());
1:b153d45:       oprot.writeBinary(struct.value);
1:078c56c:     }
9:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, IndexExpression struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.column_name = iprot.readBinary();
1:b153d45:       struct.setColumn_nameIsSet(true);
1:b153d45:       struct.op = IndexOperator.findByValue(iprot.readI32());
1:b153d45:       struct.setOpIsSet(true);
1:b153d45:       struct.value = iprot.readBinary();
1:b153d45:       struct.setValueIsSet(true);
1:078c56c:     }
1:078c56c:   }
1:b153d45: 
1:078c56c: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class IndexExpression implements org.apache.thrift.TBase<IndexExpression, IndexExpression._Fields>, java.io.Serializable, Cloneable, Comparable<IndexExpression> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(other.isSetColumn_name());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
1:     lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
1:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer column_name;
0:   public ByteBuffer value;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer column_name,
1:     ByteBuffer value)
/////////////////////////////////////////////////////////////////////////
0:       this.column_name = TBaseHelper.copyBinary(other.column_name);
1: ;
0:       this.value = TBaseHelper.copyBinary(other.value);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.column_name = null;
1:     this.op = null;
1:     this.value = null;
0:     setColumn_name(TBaseHelper.rightSize(column_name));
0:     return column_name.array();
1:   }
1: 
0:   public ByteBuffer BufferForColumn_name() {
1:     return column_name;
0:     setColumn_name(ByteBuffer.wrap(column_name));
1:     return this;
1:   }
1: 
1:   public IndexExpression setColumn_name(ByteBuffer column_name) {
/////////////////////////////////////////////////////////////////////////
0:     setValue(TBaseHelper.rightSize(value));
0:     return value.array();
1:   }
1: 
0:   public ByteBuffer BufferForValue() {
1:     return value;
0:     setValue(ByteBuffer.wrap(value));
1:     return this;
1:   }
1: 
1:   public IndexExpression setValue(ByteBuffer value) {
/////////////////////////////////////////////////////////////////////////
1:         setColumn_name((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
1:         setValue((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.column_name.equals(that.column_name))
/////////////////////////////////////////////////////////////////////////
1:       if (!this.value.equals(that.value))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumn_name()) {
0:       lastComparison = TBaseHelper.compareTo(this.column_name, typedOther.column_name);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetOp()) {
0:       lastComparison = TBaseHelper.compareTo(this.op, typedOther.op);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetValue()) {
0:       lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.column_name, sb);
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.value, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_column_name = true && (isSetColumn_name());
1:     builder.append(present_column_name);
1:     if (present_column_name)
1:       builder.append(column_name);
1: 
1:     boolean present_op = true && (isSetOp());
1:     builder.append(present_op);
1:     if (present_op)
1:       builder.append(op.getValue());
1: 
1:     boolean present_value = true && (isSetValue());
1:     builder.append(present_value);
1:     if (present_value)
1:       builder.append(value);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class IndexExpression implements TBase<IndexExpression, IndexExpression._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // COLUMN_NAME
1:           return COLUMN_NAME;
1:         case 2: // OP
1:           return OP;
1:         case 3: // VALUE
1:           return VALUE;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.COLUMN_NAME, new FieldMetaData("column_name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.OP, new FieldMetaData("op", TFieldRequirementType.REQUIRED, 
0:         new EnumMetaData(TType.ENUM, IndexOperator.class)));
0:     tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumn_name()) {      lastComparison = TBaseHelper.compareTo(this.column_name, typedOther.column_name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetOp()) {      lastComparison = TBaseHelper.compareTo(this.op, typedOther.op);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
commit:078c56c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class IndexExpression implements TBase<IndexExpression._Fields>, java.io.Serializable, Cloneable, Comparable<IndexExpression> {
0:   private static final TStruct STRUCT_DESC = new TStruct("IndexExpression");
1: 
0:   private static final TField COLUMN_NAME_FIELD_DESC = new TField("column_name", TType.STRING, (short)1);
0:   private static final TField OP_FIELD_DESC = new TField("op", TType.I32, (short)2);
0:   private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);
1: 
0:   public byte[] column_name;
1:   /**
1:    * 
1:    * @see IndexOperator
1:    */
0:   public IndexOperator op;
0:   public byte[] value;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     COLUMN_NAME((short)1, "column_name"),
1:     /**
1:      * 
1:      * @see IndexOperator
1:      */
1:     OP((short)2, "op"),
1:     VALUE((short)3, "value");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.COLUMN_NAME, new FieldMetaData("column_name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.OP, new FieldMetaData("op", TFieldRequirementType.REQUIRED, 
0:         new EnumMetaData(TType.ENUM, IndexOperator.class)));
0:     put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(IndexExpression.class, metaDataMap);
1:   }
1: 
1:   public IndexExpression() {
1:   }
1: 
1:   public IndexExpression(
0:     byte[] column_name,
1:     IndexOperator op,
0:     byte[] value)
1:   {
1:     this();
1:     this.column_name = column_name;
1:     this.op = op;
1:     this.value = value;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public IndexExpression(IndexExpression other) {
1:     if (other.isSetColumn_name()) {
0:       this.column_name = new byte[other.column_name.length];
0:       System.arraycopy(other.column_name, 0, column_name, 0, other.column_name.length);
1:     }
1:     if (other.isSetOp()) {
1:       this.op = other.op;
1:     }
1:     if (other.isSetValue()) {
0:       this.value = new byte[other.value.length];
0:       System.arraycopy(other.value, 0, value, 0, other.value.length);
1:     }
1:   }
1: 
1:   public IndexExpression deepCopy() {
1:     return new IndexExpression(this);
1:   }
1: 
0:   @Deprecated
0:   public IndexExpression clone() {
1:     return new IndexExpression(this);
1:   }
1: 
1:   public byte[] getColumn_name() {
0:     return this.column_name;
1:   }
1: 
1:   public IndexExpression setColumn_name(byte[] column_name) {
1:     this.column_name = column_name;
1:     return this;
1:   }
1: 
1:   public void unsetColumn_name() {
1:     this.column_name = null;
1:   }
1: 
0:   /** Returns true if field column_name is set (has been asigned a value) and false otherwise */
1:   public boolean isSetColumn_name() {
1:     return this.column_name != null;
1:   }
1: 
1:   public void setColumn_nameIsSet(boolean value) {
1:     if (!value) {
1:       this.column_name = null;
1:     }
1:   }
1: 
1:   /**
1:    * 
1:    * @see IndexOperator
1:    */
1:   public IndexOperator getOp() {
1:     return this.op;
1:   }
1: 
1:   /**
1:    * 
1:    * @see IndexOperator
1:    */
1:   public IndexExpression setOp(IndexOperator op) {
1:     this.op = op;
1:     return this;
1:   }
1: 
1:   public void unsetOp() {
1:     this.op = null;
1:   }
1: 
0:   /** Returns true if field op is set (has been asigned a value) and false otherwise */
1:   public boolean isSetOp() {
1:     return this.op != null;
1:   }
1: 
1:   public void setOpIsSet(boolean value) {
1:     if (!value) {
1:       this.op = null;
1:     }
1:   }
1: 
1:   public byte[] getValue() {
0:     return this.value;
1:   }
1: 
1:   public IndexExpression setValue(byte[] value) {
1:     this.value = value;
1:     return this;
1:   }
1: 
1:   public void unsetValue() {
1:     this.value = null;
1:   }
1: 
0:   /** Returns true if field value is set (has been asigned a value) and false otherwise */
1:   public boolean isSetValue() {
1:     return this.value != null;
1:   }
1: 
1:   public void setValueIsSet(boolean value) {
1:     if (!value) {
1:       this.value = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case COLUMN_NAME:
1:       if (value == null) {
1:         unsetColumn_name();
1:       } else {
0:         setColumn_name((byte[])value);
1:       }
1:       break;
1: 
1:     case OP:
1:       if (value == null) {
1:         unsetOp();
1:       } else {
1:         setOp((IndexOperator)value);
1:       }
1:       break;
1: 
1:     case VALUE:
1:       if (value == null) {
1:         unsetValue();
1:       } else {
0:         setValue((byte[])value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case COLUMN_NAME:
1:       return getColumn_name();
1: 
1:     case OP:
1:       return getOp();
1: 
1:     case VALUE:
1:       return getValue();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case COLUMN_NAME:
1:       return isSetColumn_name();
1:     case OP:
1:       return isSetOp();
1:     case VALUE:
1:       return isSetValue();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof IndexExpression)
1:       return this.equals((IndexExpression)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(IndexExpression that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_column_name = true && this.isSetColumn_name();
1:     boolean that_present_column_name = true && that.isSetColumn_name();
1:     if (this_present_column_name || that_present_column_name) {
1:       if (!(this_present_column_name && that_present_column_name))
1:         return false;
0:       if (!java.util.Arrays.equals(this.column_name, that.column_name))
1:         return false;
1:     }
1: 
1:     boolean this_present_op = true && this.isSetOp();
1:     boolean that_present_op = true && that.isSetOp();
1:     if (this_present_op || that_present_op) {
1:       if (!(this_present_op && that_present_op))
1:         return false;
1:       if (!this.op.equals(that.op))
1:         return false;
1:     }
1: 
1:     boolean this_present_value = true && this.isSetValue();
1:     boolean that_present_value = true && that.isSetValue();
1:     if (this_present_value || that_present_value) {
1:       if (!(this_present_value && that_present_value))
1:         return false;
0:       if (!java.util.Arrays.equals(this.value, that.value))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(IndexExpression other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     IndexExpression typedOther = (IndexExpression)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetColumn_name()).compareTo(typedOther.isSetColumn_name());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetColumn_name()) {      lastComparison = TBaseHelper.compareTo(column_name, typedOther.column_name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetOp()).compareTo(typedOther.isSetOp());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetOp()) {      lastComparison = TBaseHelper.compareTo(op, typedOther.op);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(value, typedOther.value);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // COLUMN_NAME
0:           if (field.type == TType.STRING) {
0:             this.column_name = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // OP
0:           if (field.type == TType.I32) {
0:             this.op = IndexOperator.findByValue(iprot.readI32());
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // VALUE
0:           if (field.type == TType.STRING) {
0:             this.value = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.column_name != null) {
1:       oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
0:       oprot.writeBinary(this.column_name);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.op != null) {
1:       oprot.writeFieldBegin(OP_FIELD_DESC);
0:       oprot.writeI32(this.op.getValue());
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.value != null) {
1:       oprot.writeFieldBegin(VALUE_FIELD_DESC);
0:       oprot.writeBinary(this.value);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("IndexExpression(");
1:     boolean first = true;
1: 
1:     sb.append("column_name:");
1:     if (this.column_name == null) {
1:       sb.append("null");
1:     } else {
0:         int __column_name_size = Math.min(this.column_name.length, 128);
0:         for (int i = 0; i < __column_name_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.column_name[i]).length() > 1 ? Integer.toHexString(this.column_name[i]).substring(Integer.toHexString(this.column_name[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.column_name[i]).toUpperCase());
1:         }
0:         if (this.column_name.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("op:");
1:     if (this.op == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.op);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("value:");
1:     if (this.value == null) {
1:       sb.append("null");
1:     } else {
0:         int __value_size = Math.min(this.value.length, 128);
0:         for (int i = 0; i < __value_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.value[i]).length() > 1 ? Integer.toHexString(this.value[i]).substring(Integer.toHexString(this.value[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.value[i]).toUpperCase());
1:         }
0:         if (this.value.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (column_name == null) {
0:       throw new TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
1:     }
1:     if (op == null) {
0:       throw new TProtocolException("Required field 'op' was not present! Struct: " + toString());
1:     }
1:     if (value == null) {
0:       throw new TProtocolException("Required field 'value' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new IndexExpressionStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new IndexExpressionTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class IndexExpressionStandardSchemeFactory implements SchemeFactory {
1:     public IndexExpressionStandardScheme getScheme() {
1:       return new IndexExpressionStandardScheme();
1:     }
1:   }
1: 
1:   private static class IndexExpressionStandardScheme extends StandardScheme<IndexExpression> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, IndexExpression struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
0:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // COLUMN_NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.column_name = iprot.readBinary();
1:               struct.setColumn_nameIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // OP
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.op = IndexOperator.findByValue(iprot.readI32());
1:               struct.setOpIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 3: // VALUE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.value = iprot.readBinary();
1:               struct.setValueIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, IndexExpression struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.column_name != null) {
0:         oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
1:         oprot.writeBinary(struct.column_name);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.op != null) {
0:         oprot.writeFieldBegin(OP_FIELD_DESC);
1:         oprot.writeI32(struct.op.getValue());
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.value != null) {
0:         oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:         oprot.writeBinary(struct.value);
0:         oprot.writeFieldEnd();
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class IndexExpressionTupleSchemeFactory implements SchemeFactory {
1:     public IndexExpressionTupleScheme getScheme() {
1:       return new IndexExpressionTupleScheme();
1:     }
1:   }
1: 
1:   private static class IndexExpressionTupleScheme extends TupleScheme<IndexExpression> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, IndexExpression struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.column_name);
1:       oprot.writeI32(struct.op.getValue());
1:       oprot.writeBinary(struct.value);
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, IndexExpression struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.column_name = iprot.readBinary();
1:       struct.setColumn_nameIsSet(true);
1:       struct.op = IndexOperator.findByValue(iprot.readI32());
1:       struct.setOpIsSet(true);
1:       struct.value = iprot.readBinary();
1:       struct.setValueIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer column_name; // required
1:   public IndexOperator op; // required
1:   public ByteBuffer value; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class IndexExpression implements org.apache.thrift.TBase<IndexExpression, IndexExpression._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexExpression");
1:   private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)2);
1:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IndexOperator.class)));
1:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexExpression.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.column_name = org.apache.thrift.TBaseHelper.copyBinary(other.column_name);
1:       this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
/////////////////////////////////////////////////////////////////////////
1:     setColumn_name(org.apache.thrift.TBaseHelper.rightSize(column_name));
1:     return column_name == null ? null : column_name.array();
1:   public ByteBuffer bufferForColumn_name() {
1:     setColumn_name(column_name == null ? (ByteBuffer)null : ByteBuffer.wrap(column_name));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field op is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setValue(org.apache.thrift.TBaseHelper.rightSize(value));
1:     return value == null ? null : value.array();
1:   public ByteBuffer bufferForValue() {
1:     setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, typedOther.column_name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, typedOther.op);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.column_name, sb);
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.value, sb);
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'op' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
0:     }
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
============================================================================