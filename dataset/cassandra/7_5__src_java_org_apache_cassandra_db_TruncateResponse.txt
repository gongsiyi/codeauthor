1:07cf56f: /*
1:8a3543a:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a3543a:  * or more contributor license agreements.  See the NOTICE file
1:8a3543a:  * distributed with this work for additional information
1:8a3543a:  * regarding copyright ownership.  The ASF licenses this file
1:8a3543a:  * to you under the Apache License, Version 2.0 (the
1:8a3543a:  * "License"); you may not use this file except in compliance
1:8a3543a:  * with the License.  You may obtain a copy of the License at
2:8a3543a:  *
1:8a3543a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a3543a:  *
1:8a3543a:  * Unless required by applicable law or agreed to in writing, software
1:8a3543a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a3543a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a3543a:  * See the License for the specific language governing permissions and
1:8a3543a:  * limitations under the License.
1:8a3543a:  */
1:8a3543a: package org.apache.cassandra.db;
5:8a3543a: 
1:5a6f0b8: import java.io.IOException;
1:8a3543a: 
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:021ec71: import org.apache.cassandra.net.MessagingService;
1:8a3543a: 
2:8a3543a: /**
1:8a3543a:  * This message is sent back the truncate operation and basically specifies if
1:8a3543a:  * the truncate succeeded.
1:8a3543a:  */
1:8a3543a: public class TruncateResponse
1:8a3543a: {
1:587cb58:     public static final TruncateResponseSerializer serializer = new TruncateResponseSerializer();
1:8a3543a: 
1:8a3543a:     public final String keyspace;
1:8a3543a:     public final String columnFamily;
1:8a3543a:     public final boolean success;
1:8a3543a: 
1:f81cc74:     public TruncateResponse(String keyspace, String columnFamily, boolean success)
1:8a3543a:     {
1:5a6f0b8:         this.keyspace = keyspace;
1:5a6f0b8:         this.columnFamily = columnFamily;
1:5a6f0b8:         this.success = success;
1:5a6f0b8:     }
1:8a3543a: 
1:5a6f0b8:     public MessageOut<TruncateResponse> createMessage()
1:8a3543a:     {
1:021ec71:         return new MessageOut<TruncateResponse>(MessagingService.Verb.REQUEST_RESPONSE, this, serializer);
3:8a3543a:     }
1:8a3543a: 
1:84eeb28:     public static class TruncateResponseSerializer implements IVersionedSerializer<TruncateResponse>
1:8a3543a:     {
1:75508ec:         public void serialize(TruncateResponse tr, DataOutputPlus out, int version) throws IOException
1:8a3543a:         {
1:60d9c7f:             out.writeUTF(tr.keyspace);
1:60d9c7f:             out.writeUTF(tr.columnFamily);
1:60d9c7f:             out.writeBoolean(tr.success);
1:8a3543a:         }
1:8a3543a: 
1:03f72ac:         public TruncateResponse deserialize(DataInputPlus in, int version) throws IOException
1:8a3543a:         {
1:60d9c7f:             String keyspace = in.readUTF();
1:60d9c7f:             String columnFamily = in.readUTF();
1:60d9c7f:             boolean success = in.readBoolean();
1:8a3543a:             return new TruncateResponse(keyspace, columnFamily, success);
1:84eeb28:         }
1:84eeb28: 
1:f81cc74:         public long serializedSize(TruncateResponse tr, int version)
1:84eeb28:         {
1:03f72ac:             return TypeSizes.sizeof(tr.keyspace)
1:03f72ac:                  + TypeSizes.sizeof(tr.columnFamily)
1:03f72ac:                  + TypeSizes.sizeof(tr.success);
1:8a3543a:         }
1:8a3543a:     }
1:8a3543a: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public TruncateResponse deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             return TypeSizes.sizeof(tr.keyspace)
1:                  + TypeSizes.sizeof(tr.columnFamily)
1:                  + TypeSizes.sizeof(tr.success);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(TruncateResponse tr, DataOutputPlus out, int version) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(TruncateResponse tr, DataOutput out, int version) throws IOException
1:             out.writeUTF(tr.keyspace);
1:             out.writeUTF(tr.columnFamily);
1:             out.writeBoolean(tr.success);
0:         public TruncateResponse deserialize(DataInput in, int version) throws IOException
1:             String keyspace = in.readUTF();
1:             String columnFamily = in.readUTF();
1:             boolean success = in.readBoolean();
commit:70554b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return TypeSizes.NATIVE.sizeof(tr.keyspace)
0:                  + TypeSizes.NATIVE.sizeof(tr.columnFamily)
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0:                  + TypeSizes.NATIVE.sizeof(tr.success);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:         return new MessageOut<TruncateResponse>(MessagingService.Verb.REQUEST_RESPONSE, this, serializer);
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:     public TruncateResponse(String keyspace, String columnFamily, boolean success) {
1: 		this.keyspace = keyspace;
1: 		this.columnFamily = columnFamily;
1: 		this.success = success;
1: 	}
1:     public MessageOut<TruncateResponse> createMessage()
0:         return new MessageOut<TruncateResponse>(StorageService.Verb.REQUEST_RESPONSE, this, serializer);
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
1:     public static class TruncateResponseSerializer implements IVersionedSerializer<TruncateResponse>
0:         public void serialize(TruncateResponse tr, DataOutput dos, int version) throws IOException
0:         public TruncateResponse deserialize(DataInput dis, int version) throws IOException
1: 
0:         public long serializedSize(TruncateResponse truncateResponse, int version)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
commit:b803c37
commit:8a3543a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
1: 
1: /**
1:  * This message is sent back the truncate operation and basically specifies if
1:  * the truncate succeeded.
1:  *
0:  * @author rantav@gmail.com
1:  */
1: public class TruncateResponse
1: {
0:     private static TruncateResponseSerializer serializer_ = new TruncateResponseSerializer();
1: 
0:     public static TruncateResponseSerializer serializer()
1:     {
0:         return serializer_;
1:     }
1: 
1:     public final String keyspace;
1:     public final String columnFamily;
1:     public final boolean success;
1: 
1: 
0:     public static Message makeTruncateResponseMessage(Message original, TruncateResponse truncateResponseMessage)
0:             throws IOException
1:     {
0:     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
0:         DataOutputStream dos = new DataOutputStream(bos);
0:         TruncateResponse.serializer().serialize(truncateResponseMessage, dos);
0:         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray());
1:     }
1: 
0:     public TruncateResponse(String keyspace, String columnFamily, boolean success) {
0: 		this.keyspace = keyspace;
0: 		this.columnFamily = columnFamily;
0: 		this.success = success;
1: 	}
1: 
0:     public static class TruncateResponseSerializer implements ICompactSerializer<TruncateResponse>
1:     {
0:         public void serialize(TruncateResponse tr, DataOutputStream dos) throws IOException
1:         {
0:             dos.writeUTF(tr.keyspace);
0:             dos.writeUTF(tr.columnFamily);
0:             dos.writeBoolean(tr.success);
1:         }
1: 
0:         public TruncateResponse deserialize(DataInputStream dis) throws IOException
1:         {
0:             String keyspace = dis.readUTF();
0:             String columnFamily = dis.readUTF();
0:             boolean success = dis.readBoolean();
1:             return new TruncateResponse(keyspace, columnFamily, success);
1:         }
1:     }
1: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final TruncateResponseSerializer serializer = new TruncateResponseSerializer();
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
0: 
0: import static org.apache.cassandra.utils.FBUtilities.serializedUTF8Size;
/////////////////////////////////////////////////////////////////////////
1:     public TruncateResponse(String keyspace, String columnFamily, boolean success)
0:     {
0:         this.keyspace = keyspace;
0:         this.columnFamily = columnFamily;
0:         this.success = success;
0:     }
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(TruncateResponse tr, int version)
0:             return serializedUTF8Size(tr.keyspace)
0:                  + serializedUTF8Size(tr.columnFamily)
0:                  + DBTypeSizes.NATIVE.sizeof(tr.success);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final TruncateResponseSerializer serializer = new TruncateResponseSerializer();
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:686139a
/////////////////////////////////////////////////////////////////////////
0:         FastByteArrayOutputStream bos = new FastByteArrayOutputStream();
0:     public TruncateResponse(String keyspace, String columnFamily, boolean success)
0:     {
0:         this.keyspace = keyspace;
0:         this.columnFamily = columnFamily;
0:         this.success = success;
0:     }
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static TruncateResponseSerializer serializer = new TruncateResponseSerializer();
0:         return serializer;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
0:     	FastByteArrayOutputStream bos = new FastByteArrayOutputStream();
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:         return original.getReply(FBUtilities.getBroadcastAddress(), bos.toByteArray(), original.getVersion());
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:         TruncateResponse.serializer().serialize(truncateResponseMessage, dos, original.getVersion());
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(TruncateResponse tr, DataOutputStream dos, int version) throws IOException
0:         public TruncateResponse deserialize(DataInputStream dis, int version) throws IOException
commit:6ab2b23
/////////////////////////////////////////////////////////////////////////
0:         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
============================================================================