1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer;
1:72790dc: 
1:72790dc: import java.util.Locale;
1:72790dc: import java.util.Map;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Various options for controlling tokenization and enabling
1:72790dc:  * or disabling features
1:72790dc:  */
1:72790dc: public class StandardTokenizerOptions
1:72790dc: {
1:72790dc:     public static final String TOKENIZATION_ENABLE_STEMMING = "tokenization_enable_stemming";
1:72790dc:     public static final String TOKENIZATION_SKIP_STOP_WORDS = "tokenization_skip_stop_words";
1:72790dc:     public static final String TOKENIZATION_LOCALE = "tokenization_locale";
1:72790dc:     public static final String TOKENIZATION_NORMALIZE_LOWERCASE = "tokenization_normalize_lowercase";
1:72790dc:     public static final String TOKENIZATION_NORMALIZE_UPPERCASE = "tokenization_normalize_uppercase";
1:72790dc: 
1:72790dc:     public static final int DEFAULT_MAX_TOKEN_LENGTH = 255;
1:72790dc:     public static final int DEFAULT_MIN_TOKEN_LENGTH = 0;
1:72790dc: 
1:72790dc:     private boolean stemTerms;
1:72790dc:     private boolean ignoreStopTerms;
1:72790dc:     private Locale locale;
1:72790dc:     private boolean caseSensitive;
1:72790dc:     private boolean allTermsToUpperCase;
1:72790dc:     private boolean allTermsToLowerCase;
1:72790dc:     private int minTokenLength;
1:72790dc:     private int maxTokenLength;
1:72790dc: 
1:72790dc:     public boolean shouldStemTerms()
1:72790dc:     {
1:72790dc:         return stemTerms;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setStemTerms(boolean stemTerms)
1:72790dc:     {
1:72790dc:         this.stemTerms = stemTerms;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldIgnoreStopTerms()
1:72790dc:     {
1:72790dc:         return ignoreStopTerms;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setIgnoreStopTerms(boolean ignoreStopTerms)
1:72790dc:     {
1:72790dc:         this.ignoreStopTerms = ignoreStopTerms;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Locale getLocale()
1:72790dc:     {
1:72790dc:         return locale;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setLocale(Locale locale)
1:72790dc:     {
1:72790dc:         this.locale = locale;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isCaseSensitive()
1:72790dc:     {
1:72790dc:         return caseSensitive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setCaseSensitive(boolean caseSensitive)
1:72790dc:     {
1:72790dc:         this.caseSensitive = caseSensitive;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldUpperCaseTerms()
1:72790dc:     {
1:72790dc:         return allTermsToUpperCase;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setAllTermsToUpperCase(boolean allTermsToUpperCase)
1:72790dc:     {
1:72790dc:         this.allTermsToUpperCase = allTermsToUpperCase;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean shouldLowerCaseTerms()
1:72790dc:     {
1:72790dc:         return allTermsToLowerCase;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setAllTermsToLowerCase(boolean allTermsToLowerCase)
1:72790dc:     {
1:72790dc:         this.allTermsToLowerCase = allTermsToLowerCase;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int getMinTokenLength()
1:72790dc:     {
1:72790dc:         return minTokenLength;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setMinTokenLength(int minTokenLength)
1:72790dc:     {
1:72790dc:         this.minTokenLength = minTokenLength;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int getMaxTokenLength()
1:72790dc:     {
1:72790dc:         return maxTokenLength;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void setMaxTokenLength(int maxTokenLength)
1:72790dc:     {
1:72790dc:         this.maxTokenLength = maxTokenLength;
1:72790dc:     }
1:72790dc: 
1:68d2526:     public static class OptionsBuilder 
1:68d2526:     {
1:72790dc:         private boolean stemTerms;
1:72790dc:         private boolean ignoreStopTerms;
1:72790dc:         private Locale locale;
1:72790dc:         private boolean caseSensitive;
1:72790dc:         private boolean allTermsToUpperCase;
1:72790dc:         private boolean allTermsToLowerCase;
1:72790dc:         private int minTokenLength = DEFAULT_MIN_TOKEN_LENGTH;
1:72790dc:         private int maxTokenLength = DEFAULT_MAX_TOKEN_LENGTH;
1:72790dc: 
1:72790dc:         public OptionsBuilder()
1:72790dc:         {
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder stemTerms(boolean stemTerms)
1:72790dc:         {
1:72790dc:             this.stemTerms = stemTerms;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder ignoreStopTerms(boolean ignoreStopTerms)
1:72790dc:         {
1:72790dc:             this.ignoreStopTerms = ignoreStopTerms;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder useLocale(Locale locale)
1:72790dc:         {
1:72790dc:             this.locale = locale;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder caseSensitive(boolean caseSensitive)
1:72790dc:         {
1:72790dc:             this.caseSensitive = caseSensitive;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder alwaysUpperCaseTerms(boolean allTermsToUpperCase)
1:72790dc:         {
1:72790dc:             this.allTermsToUpperCase = allTermsToUpperCase;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public OptionsBuilder alwaysLowerCaseTerms(boolean allTermsToLowerCase)
1:72790dc:         {
1:72790dc:             this.allTermsToLowerCase = allTermsToLowerCase;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         /**
1:72790dc:          * Set the min allowed token length.  Any token shorter
1:72790dc:          * than this is skipped.
1:72790dc:          */
1:72790dc:         public OptionsBuilder minTokenLength(int minTokenLength)
1:72790dc:         {
1:72790dc:             if (minTokenLength < 1)
1:72790dc:                 throw new IllegalArgumentException("minTokenLength must be greater than zero");
1:72790dc:             this.minTokenLength = minTokenLength;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         /**
1:72790dc:          * Set the max allowed token length.  Any token longer
1:72790dc:          * than this is skipped.
1:72790dc:          */
1:72790dc:         public OptionsBuilder maxTokenLength(int maxTokenLength)
1:72790dc:         {
1:72790dc:             if (maxTokenLength < 1)
1:72790dc:                 throw new IllegalArgumentException("maxTokenLength must be greater than zero");
1:72790dc:             this.maxTokenLength = maxTokenLength;
1:72790dc:             return this;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public StandardTokenizerOptions build()
1:72790dc:         {
1:72790dc:             if(allTermsToLowerCase && allTermsToUpperCase)
1:72790dc:                 throw new IllegalArgumentException("Options to normalize terms cannot be " +
1:72790dc:                         "both uppercase and lowercase at the same time");
1:72790dc: 
1:72790dc:             StandardTokenizerOptions options = new StandardTokenizerOptions();
1:72790dc:             options.setIgnoreStopTerms(ignoreStopTerms);
1:72790dc:             options.setStemTerms(stemTerms);
1:72790dc:             options.setLocale(locale);
1:72790dc:             options.setCaseSensitive(caseSensitive);
1:72790dc:             options.setAllTermsToLowerCase(allTermsToLowerCase);
1:72790dc:             options.setAllTermsToUpperCase(allTermsToUpperCase);
1:72790dc:             options.setMinTokenLength(minTokenLength);
1:72790dc:             options.setMaxTokenLength(maxTokenLength);
1:72790dc:             return options;
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static StandardTokenizerOptions buildFromMap(Map<String, String> optionsMap)
1:72790dc:     {
1:72790dc:         OptionsBuilder optionsBuilder = new OptionsBuilder();
1:72790dc: 
1:72790dc:         for (Map.Entry<String, String> entry : optionsMap.entrySet())
1:72790dc:         {
1:72790dc:             switch(entry.getKey())
1:72790dc:             {
1:72790dc:                 case TOKENIZATION_ENABLE_STEMMING:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.stemTerms(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case TOKENIZATION_SKIP_STOP_WORDS:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.ignoreStopTerms(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case TOKENIZATION_LOCALE:
1:72790dc:                 {
1:72790dc:                     Locale locale = new Locale(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.useLocale(locale);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case TOKENIZATION_NORMALIZE_UPPERCASE:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.alwaysUpperCaseTerms(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 case TOKENIZATION_NORMALIZE_LOWERCASE:
1:72790dc:                 {
1:72790dc:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:72790dc:                     optionsBuilder = optionsBuilder.alwaysLowerCaseTerms(bool);
1:72790dc:                     break;
1:72790dc:                 }
1:72790dc:                 default:
1:72790dc:                 {
1:72790dc:                 }
1:72790dc:             }
1:72790dc:         }
1:72790dc:         return optionsBuilder.build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static StandardTokenizerOptions getDefaultOptions()
1:72790dc:     {
1:72790dc:         return new OptionsBuilder()
1:72790dc:                 .ignoreStopTerms(true).alwaysLowerCaseTerms(true)
1:72790dc:                 .stemTerms(false).useLocale(Locale.ENGLISH).build();
1:72790dc:     }
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public static class OptionsBuilder 
1:     {
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer;
1: 
1: import java.util.Locale;
1: import java.util.Map;
1: 
1: /**
1:  * Various options for controlling tokenization and enabling
1:  * or disabling features
1:  */
1: public class StandardTokenizerOptions
1: {
1:     public static final String TOKENIZATION_ENABLE_STEMMING = "tokenization_enable_stemming";
1:     public static final String TOKENIZATION_SKIP_STOP_WORDS = "tokenization_skip_stop_words";
1:     public static final String TOKENIZATION_LOCALE = "tokenization_locale";
1:     public static final String TOKENIZATION_NORMALIZE_LOWERCASE = "tokenization_normalize_lowercase";
1:     public static final String TOKENIZATION_NORMALIZE_UPPERCASE = "tokenization_normalize_uppercase";
1: 
1:     public static final int DEFAULT_MAX_TOKEN_LENGTH = 255;
1:     public static final int DEFAULT_MIN_TOKEN_LENGTH = 0;
1: 
1:     private boolean stemTerms;
1:     private boolean ignoreStopTerms;
1:     private Locale locale;
1:     private boolean caseSensitive;
1:     private boolean allTermsToUpperCase;
1:     private boolean allTermsToLowerCase;
1:     private int minTokenLength;
1:     private int maxTokenLength;
1: 
1:     public boolean shouldStemTerms()
1:     {
1:         return stemTerms;
1:     }
1: 
1:     public void setStemTerms(boolean stemTerms)
1:     {
1:         this.stemTerms = stemTerms;
1:     }
1: 
1:     public boolean shouldIgnoreStopTerms()
1:     {
1:         return ignoreStopTerms;
1:     }
1: 
1:     public void setIgnoreStopTerms(boolean ignoreStopTerms)
1:     {
1:         this.ignoreStopTerms = ignoreStopTerms;
1:     }
1: 
1:     public Locale getLocale()
1:     {
1:         return locale;
1:     }
1: 
1:     public void setLocale(Locale locale)
1:     {
1:         this.locale = locale;
1:     }
1: 
1:     public boolean isCaseSensitive()
1:     {
1:         return caseSensitive;
1:     }
1: 
1:     public void setCaseSensitive(boolean caseSensitive)
1:     {
1:         this.caseSensitive = caseSensitive;
1:     }
1: 
1:     public boolean shouldUpperCaseTerms()
1:     {
1:         return allTermsToUpperCase;
1:     }
1: 
1:     public void setAllTermsToUpperCase(boolean allTermsToUpperCase)
1:     {
1:         this.allTermsToUpperCase = allTermsToUpperCase;
1:     }
1: 
1:     public boolean shouldLowerCaseTerms()
1:     {
1:         return allTermsToLowerCase;
1:     }
1: 
1:     public void setAllTermsToLowerCase(boolean allTermsToLowerCase)
1:     {
1:         this.allTermsToLowerCase = allTermsToLowerCase;
1:     }
1: 
1:     public int getMinTokenLength()
1:     {
1:         return minTokenLength;
1:     }
1: 
1:     public void setMinTokenLength(int minTokenLength)
1:     {
1:         this.minTokenLength = minTokenLength;
1:     }
1: 
1:     public int getMaxTokenLength()
1:     {
1:         return maxTokenLength;
1:     }
1: 
1:     public void setMaxTokenLength(int maxTokenLength)
1:     {
1:         this.maxTokenLength = maxTokenLength;
1:     }
1: 
0:     public static class OptionsBuilder {
1:         private boolean stemTerms;
1:         private boolean ignoreStopTerms;
1:         private Locale locale;
1:         private boolean caseSensitive;
1:         private boolean allTermsToUpperCase;
1:         private boolean allTermsToLowerCase;
1:         private int minTokenLength = DEFAULT_MIN_TOKEN_LENGTH;
1:         private int maxTokenLength = DEFAULT_MAX_TOKEN_LENGTH;
1: 
1:         public OptionsBuilder()
1:         {
1:         }
1: 
1:         public OptionsBuilder stemTerms(boolean stemTerms)
1:         {
1:             this.stemTerms = stemTerms;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder ignoreStopTerms(boolean ignoreStopTerms)
1:         {
1:             this.ignoreStopTerms = ignoreStopTerms;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder useLocale(Locale locale)
1:         {
1:             this.locale = locale;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder caseSensitive(boolean caseSensitive)
1:         {
1:             this.caseSensitive = caseSensitive;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder alwaysUpperCaseTerms(boolean allTermsToUpperCase)
1:         {
1:             this.allTermsToUpperCase = allTermsToUpperCase;
1:             return this;
1:         }
1: 
1:         public OptionsBuilder alwaysLowerCaseTerms(boolean allTermsToLowerCase)
1:         {
1:             this.allTermsToLowerCase = allTermsToLowerCase;
1:             return this;
1:         }
1: 
1:         /**
1:          * Set the min allowed token length.  Any token shorter
1:          * than this is skipped.
1:          */
1:         public OptionsBuilder minTokenLength(int minTokenLength)
1:         {
1:             if (minTokenLength < 1)
1:                 throw new IllegalArgumentException("minTokenLength must be greater than zero");
1:             this.minTokenLength = minTokenLength;
1:             return this;
1:         }
1: 
1:         /**
1:          * Set the max allowed token length.  Any token longer
1:          * than this is skipped.
1:          */
1:         public OptionsBuilder maxTokenLength(int maxTokenLength)
1:         {
1:             if (maxTokenLength < 1)
1:                 throw new IllegalArgumentException("maxTokenLength must be greater than zero");
1:             this.maxTokenLength = maxTokenLength;
1:             return this;
1:         }
1: 
1:         public StandardTokenizerOptions build()
1:         {
1:             if(allTermsToLowerCase && allTermsToUpperCase)
1:                 throw new IllegalArgumentException("Options to normalize terms cannot be " +
1:                         "both uppercase and lowercase at the same time");
1: 
1:             StandardTokenizerOptions options = new StandardTokenizerOptions();
1:             options.setIgnoreStopTerms(ignoreStopTerms);
1:             options.setStemTerms(stemTerms);
1:             options.setLocale(locale);
1:             options.setCaseSensitive(caseSensitive);
1:             options.setAllTermsToLowerCase(allTermsToLowerCase);
1:             options.setAllTermsToUpperCase(allTermsToUpperCase);
1:             options.setMinTokenLength(minTokenLength);
1:             options.setMaxTokenLength(maxTokenLength);
1:             return options;
1:         }
1:     }
1: 
1:     public static StandardTokenizerOptions buildFromMap(Map<String, String> optionsMap)
1:     {
1:         OptionsBuilder optionsBuilder = new OptionsBuilder();
1: 
1:         for (Map.Entry<String, String> entry : optionsMap.entrySet())
1:         {
1:             switch(entry.getKey())
1:             {
1:                 case TOKENIZATION_ENABLE_STEMMING:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.stemTerms(bool);
1:                     break;
1:                 }
1:                 case TOKENIZATION_SKIP_STOP_WORDS:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.ignoreStopTerms(bool);
1:                     break;
1:                 }
1:                 case TOKENIZATION_LOCALE:
1:                 {
1:                     Locale locale = new Locale(entry.getValue());
1:                     optionsBuilder = optionsBuilder.useLocale(locale);
1:                     break;
1:                 }
1:                 case TOKENIZATION_NORMALIZE_UPPERCASE:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.alwaysUpperCaseTerms(bool);
1:                     break;
1:                 }
1:                 case TOKENIZATION_NORMALIZE_LOWERCASE:
1:                 {
1:                     boolean bool = Boolean.parseBoolean(entry.getValue());
1:                     optionsBuilder = optionsBuilder.alwaysLowerCaseTerms(bool);
1:                     break;
1:                 }
1:                 default:
1:                 {
1:                 }
1:             }
1:         }
1:         return optionsBuilder.build();
1:     }
1: 
1:     public static StandardTokenizerOptions getDefaultOptions()
1:     {
1:         return new OptionsBuilder()
1:                 .ignoreStopTerms(true).alwaysLowerCaseTerms(true)
1:                 .stemTerms(false).useLocale(Locale.ENGLISH).build();
1:     }
1: }
============================================================================