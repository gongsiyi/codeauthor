1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf.view;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.ArrayList;
1:7d857b4: import java.util.Collections;
1:72790dc: import java.util.HashSet;
1:72790dc: import java.util.List;
1:72790dc: import java.util.Set;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.SSTableIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.utils.Interval;
1:72790dc: import org.apache.cassandra.utils.IntervalTree;
1:72790dc: 
1:72790dc: public class RangeTermTree implements TermTree
1:72790dc: {
1:72790dc:     protected final ByteBuffer min, max;
1:3928665:     protected final IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> rangeTree;
1:3928665:     protected final AbstractType<?> comparator;
1:72790dc: 
1:3928665:     public RangeTermTree(ByteBuffer min, ByteBuffer max, IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> rangeTree, AbstractType<?> comparator)
1:72790dc:     {
1:72790dc:         this.min = min;
1:72790dc:         this.max = max;
1:72790dc:         this.rangeTree = rangeTree;
1:3928665:         this.comparator = comparator;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Set<SSTableIndex> search(Expression e)
1:72790dc:     {
1:7d857b4:         if (e == null)
1:7d857b4:             return Collections.emptySet();
1:7d857b4: 
1:72790dc:         ByteBuffer minTerm = e.lower == null ? min : e.lower.value;
1:72790dc:         ByteBuffer maxTerm = e.upper == null ? max : e.upper.value;
1:72790dc: 
1:3928665:         return new HashSet<>(rangeTree.search(Interval.create(new Term(minTerm, comparator),
1:3928665:                                                               new Term(maxTerm, comparator),
1:3928665:                                                               (SSTableIndex) null)));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int intervalCount()
1:72790dc:     {
1:72790dc:         return rangeTree.intervalCount();
1:72790dc:     }
1:72790dc: 
1:72790dc:     static class Builder extends TermTree.Builder
1:72790dc:     {
1:3928665:         protected final List<Interval<Term, SSTableIndex>> intervals = new ArrayList<>();
1:72790dc: 
1:72790dc:         protected Builder(OnDiskIndexBuilder.Mode mode, AbstractType<?> comparator)
1:72790dc:         {
1:72790dc:             super(mode, comparator);
1:72790dc:         }
1:72790dc: 
1:72790dc:         public void addIndex(SSTableIndex index)
1:72790dc:         {
1:3928665:             intervals.add(Interval.create(new Term(index.minTerm(), comparator),
1:3928665:                                           new Term(index.maxTerm(), comparator), index));
1:72790dc:         }
1:3928665: 
1:72790dc: 
1:72790dc:         public TermTree build()
1:72790dc:         {
1:3928665:             return new RangeTermTree(min, max, IntervalTree.build(intervals), comparator);
1:3928665:         }
1:3928665:     }
1:3928665: 
1:3928665: 
1:3928665:     /**
1:3928665:      * This is required since IntervalTree doesn't support custom Comparator
1:3928665:      * implementations and relied on items to be comparable which "raw" terms are not.
1:3928665:      */
1:3928665:     protected static class Term implements Comparable<Term>
1:3928665:     {
1:3928665:         private final ByteBuffer term;
1:3928665:         private final AbstractType<?> comparator;
1:3928665: 
1:3928665:         public Term(ByteBuffer term, AbstractType<?> comparator)
1:3928665:         {
1:3928665:             this.term = term;
1:3928665:             this.comparator = comparator;
1:3928665:         }
1:3928665: 
1:3928665:         public int compareTo(Term o)
1:3928665:         {
1:3928665:             return comparator.compare(term, o.term);
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:         if (e == null)
1:             return Collections.emptySet();
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3928665
/////////////////////////////////////////////////////////////////////////
1:     protected final IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> rangeTree;
1:     protected final AbstractType<?> comparator;
1:     public RangeTermTree(ByteBuffer min, ByteBuffer max, IntervalTree<Term, SSTableIndex, Interval<Term, SSTableIndex>> rangeTree, AbstractType<?> comparator)
1:         this.comparator = comparator;
/////////////////////////////////////////////////////////////////////////
1:         return new HashSet<>(rangeTree.search(Interval.create(new Term(minTerm, comparator),
1:                                                               new Term(maxTerm, comparator),
1:                                                               (SSTableIndex) null)));
/////////////////////////////////////////////////////////////////////////
1:         protected final List<Interval<Term, SSTableIndex>> intervals = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:             intervals.add(Interval.create(new Term(index.minTerm(), comparator),
1:                                           new Term(index.maxTerm(), comparator), index));
1: 
1:             return new RangeTermTree(min, max, IntervalTree.build(intervals), comparator);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * This is required since IntervalTree doesn't support custom Comparator
1:      * implementations and relied on items to be comparable which "raw" terms are not.
1:      */
1:     protected static class Term implements Comparable<Term>
1:     {
1:         private final ByteBuffer term;
1:         private final AbstractType<?> comparator;
1: 
1:         public Term(ByteBuffer term, AbstractType<?> comparator)
1:         {
1:             this.term = term;
1:             this.comparator = comparator;
1:         }
1: 
1:         public int compareTo(Term o)
1:         {
1:             return comparator.compare(term, o.term);
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf.view;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.index.sasi.SSTableIndex;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.utils.Interval;
1: import org.apache.cassandra.utils.IntervalTree;
1: 
1: public class RangeTermTree implements TermTree
1: {
1:     protected final ByteBuffer min, max;
0:     protected final IntervalTree<ByteBuffer, SSTableIndex, Interval<ByteBuffer, SSTableIndex>> rangeTree;
1: 
0:     public RangeTermTree(ByteBuffer min, ByteBuffer max, IntervalTree<ByteBuffer, SSTableIndex, Interval<ByteBuffer, SSTableIndex>> rangeTree)
1:     {
1:         this.min = min;
1:         this.max = max;
1:         this.rangeTree = rangeTree;
1:     }
1: 
1:     public Set<SSTableIndex> search(Expression e)
1:     {
1:         ByteBuffer minTerm = e.lower == null ? min : e.lower.value;
1:         ByteBuffer maxTerm = e.upper == null ? max : e.upper.value;
1: 
0:         return new HashSet<>(rangeTree.search(Interval.create(minTerm, maxTerm, (SSTableIndex) null)));
1:     }
1: 
1:     public int intervalCount()
1:     {
1:         return rangeTree.intervalCount();
1:     }
1: 
1:     static class Builder extends TermTree.Builder
1:     {
0:         protected final List<Interval<ByteBuffer, SSTableIndex>> intervals = new ArrayList<>();
1: 
1:         protected Builder(OnDiskIndexBuilder.Mode mode, AbstractType<?> comparator)
1:         {
1:             super(mode, comparator);
1:         }
1: 
1:         public void addIndex(SSTableIndex index)
1:         {
0:             intervals.add(Interval.create(index.minTerm(), index.maxTerm(), index));
1:         }
1: 
1:         public TermTree build()
1:         {
0:             return new RangeTermTree(min, max, IntervalTree.build(intervals));
1:         }
1:     }
1: }
============================================================================