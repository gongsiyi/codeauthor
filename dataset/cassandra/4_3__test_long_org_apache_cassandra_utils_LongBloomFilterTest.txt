1:0a9a17e: /*
1:6cb811b:  * Licensed to the Apache Software Foundation (ASF) under one
1:6cb811b:  * or more contributor license agreements.  See the NOTICE file
1:6cb811b:  * distributed with this work for additional information
1:6cb811b:  * regarding copyright ownership.  The ASF licenses this file
1:6cb811b:  * to you under the Apache License, Version 2.0 (the
1:6cb811b:  * "License"); you may not use this file except in compliance
1:6cb811b:  * with the License.  You may obtain a copy of the License at
1:6cb811b:  *
1:6cb811b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:6cb811b:  *
1:6cb811b:  * Unless required by applicable law or agreed to in writing,
1:6cb811b:  * software distributed under the License is distributed on an
1:6cb811b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6cb811b:  * KIND, either express or implied.  See the License for the
1:6cb811b:  * specific language governing permissions and limitations
1:6cb811b:  * under the License.
1:6cb811b:  */
1:0a9a17e: package org.apache.cassandra.utils;
1:0a9a17e: 
1:0a9a17e: import java.util.Random;
1:23fd75f: import java.util.concurrent.ThreadLocalRandom;
1:0a9a17e: 
1:0a9a17e: import org.junit.Test;
1:d765b24: import org.slf4j.Logger;
1:d765b24: import org.slf4j.LoggerFactory;
1:0a9a17e: 
1:23fd75f: import static org.apache.cassandra.utils.FilterFactory.getFilter;
1:23fd75f: import static org.apache.cassandra.utils.FilterTestHelper.testFalsePositives;
1:23fd75f: 
1:0a9a17e: public class LongBloomFilterTest
1:0a9a17e: {
1:d765b24:     private static final Logger logger = LoggerFactory.getLogger(LongBloomFilterTest.class);
1:0a9a17e: 
1:0a9a17e:     /**
1:0a9a17e:      * NB: needs to run with -mx1G
2:0a9a17e:      */
1:7f2c3a8:     @Test
1:7f2c3a8:     public void testBigInt()
1:6cb811b:     {
1:23fd75f:         testBigInt(false);
1:23fd75f:         testBigInt(true);
1:23fd75f:     }
1:23fd75f:     private static void testBigInt(boolean oldBfHashOrder)
1:23fd75f:     {
1:0a9a17e:         int size = 10 * 1000 * 1000;
1:23fd75f:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:23fd75f:         double fp = testFalsePositives(bf,
1:23fd75f:                                        new KeyGenerator.IntGenerator(size),
1:23fd75f:                                        new KeyGenerator.IntGenerator(size, size * 2));
1:23fd75f:         logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:0a9a17e:     }
1:0a9a17e: 
1:7f2c3a8:     @Test
1:7f2c3a8:     public void testBigRandom()
1:6cb811b:     {
1:23fd75f:         testBigRandom(false);
1:23fd75f:         testBigRandom(true);
1:23fd75f:     }
1:23fd75f:     private static void testBigRandom(boolean oldBfHashOrder)
1:23fd75f:     {
1:0a9a17e:         int size = 10 * 1000 * 1000;
1:23fd75f:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:23fd75f:         double fp = testFalsePositives(bf,
1:23fd75f:                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
1:23fd75f:                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:23fd75f:         logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     /**
1:23fd75f:      * NB: needs to run with -mx1G
1:23fd75f:      */
1:23fd75f:     @Test
1:23fd75f:     public void testConstrained()
1:23fd75f:     {
1:23fd75f:         testConstrained(false);
1:23fd75f:         testConstrained(true);
1:23fd75f:     }
1:23fd75f:     private static void testConstrained(boolean oldBfHashOrder)
1:23fd75f:     {
1:23fd75f:         int size = 10 * 1000 * 1000;
1:23fd75f:         try (IFilter bf = getFilter(size, 0.01, false, oldBfHashOrder))
1:23fd75f:         {
1:23fd75f:             double fp = testFalsePositives(bf,
1:23fd75f:                                            new KeyGenerator.IntGenerator(size),
1:23fd75f:                                            new KeyGenerator.IntGenerator(size, size * 2));
1:23fd75f:             logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:23fd75f:         }
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     private static void testConstrained(double targetFp, int elements, boolean oldBfHashOrder, int staticBitCount, long ... staticBits)
1:23fd75f:     {
1:23fd75f:         for (long bits : staticBits)
1:23fd75f:         {
1:23fd75f:             try (IFilter bf = getFilter(elements, targetFp, false, oldBfHashOrder);)
1:23fd75f:             {
1:23fd75f:                 SequentialHashGenerator gen = new SequentialHashGenerator(staticBitCount, bits);
1:23fd75f:                 long[] hash = new long[2];
1:23fd75f:                 for (int i = 0 ; i < elements ; i++)
1:23fd75f:                 {
1:23fd75f:                     gen.nextHash(hash);
1:23fd75f:                     bf.add(filterKey(hash[0], hash[1]));
1:23fd75f:                 }
1:23fd75f:                 int falsePositiveCount = 0;
1:23fd75f:                 for (int i = 0 ; i < elements ; i++)
1:23fd75f:                 {
1:23fd75f:                     gen.nextHash(hash);
1:23fd75f:                     if (bf.isPresent(filterKey(hash[0], hash[1])))
1:23fd75f:                         falsePositiveCount++;
1:23fd75f:                 }
1:23fd75f:                 double fp = falsePositiveCount / (double) elements;
1:23fd75f:                 double ratio = fp/targetFp;
1:23fd75f:                 System.out.printf("%.2f, ", ratio);
1:23fd75f:             }
1:23fd75f:         }
1:23fd75f:         System.out.printf("%d elements, %d static bits, %.2f target\n", elements, staticBitCount, targetFp);
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     private static IFilter.FilterKey filterKey(final long hash1, final long hash2)
1:23fd75f:     {
1:23fd75f:         return new IFilter.FilterKey()
1:23fd75f:         {
1:23fd75f:             public void filterHash(long[] dest)
1:23fd75f:             {
1:23fd75f:                 dest[0] = hash1;
1:23fd75f:                 dest[1] = hash2;
1:23fd75f:             }
1:23fd75f:         };
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     @Test
1:23fd75f:     public void testBffp()
1:23fd75f:     {
1:23fd75f:         bffp(false);
1:23fd75f:         bffp(true);
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     private static void bffp(boolean flipInputs)
1:23fd75f:     {
1:23fd75f:         System.out.println("Bloom filter false posiitive with flipInputs=" + flipInputs);
1:23fd75f:         long[] staticBits = staticBits(4, 0);
1:23fd75f:         testConstrained(0.01d, 10 << 20, flipInputs, 0, staticBits);
1:23fd75f:         testConstrained(0.01d, 1 << 20, flipInputs, 6, staticBits);
1:23fd75f:         testConstrained(0.01d, 10 << 20, flipInputs, 6, staticBits);
1:23fd75f:         testConstrained(0.01d, 1 << 19, flipInputs, 10, staticBits);
1:23fd75f:         testConstrained(0.01d, 1 << 20, flipInputs, 10, staticBits);
1:23fd75f:         testConstrained(0.01d, 10 << 20, flipInputs, 10, staticBits);
1:23fd75f:         testConstrained(0.1d, 10 << 20, flipInputs, 0, staticBits);
1:23fd75f:         testConstrained(0.1d, 10 << 20, flipInputs, 8, staticBits);
1:23fd75f:         testConstrained(0.1d, 10 << 20, flipInputs, 10, staticBits);
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     static long[] staticBits(int random, long ... fixed)
1:23fd75f:     {
1:23fd75f:         long[] result = new long[random + fixed.length];
1:23fd75f:         System.arraycopy(fixed, 0, result, 0, fixed.length);
1:23fd75f:         for (int i = 0 ; i < random ; i++)
1:23fd75f:             result[fixed.length + i] = ThreadLocalRandom.current().nextLong();
1:23fd75f:         return result;
1:23fd75f:     }
1:23fd75f: 
1:23fd75f:     private static class SequentialHashGenerator
1:23fd75f:     {
1:23fd75f:         final long mask;
1:23fd75f:         final long staticBits;
1:23fd75f:         int next;
1:23fd75f:         private SequentialHashGenerator(int staticBitCount, long staticBits) {
1:23fd75f:             this.mask = -1 >>> staticBitCount;
1:23fd75f:             this.staticBits = staticBits & ~mask;
1:23fd75f:         }
1:23fd75f:         void nextHash(long[] fill)
1:23fd75f:         {
1:23fd75f:             MurmurHash.hash3_x64_128(ByteBufferUtil.bytes(next), 0, 4, 0, fill);
1:23fd75f:             fill[0] &= mask;
1:23fd75f:             fill[0] |= staticBits;
1:23fd75f:             next++;
1:23fd75f:         }
1:0a9a17e:     }
1:0a9a17e: 
1:7f2c3a8:     @Test
1:7f2c3a8:     public void timeit()
1:6cb811b:     {
1:23fd75f:         timeit(false);
1:23fd75f:         timeit(true);
1:23fd75f:     }
1:23fd75f:     private static void timeit(boolean oldBfHashOrder)
1:23fd75f:     {
1:6cb811b:         int size = 300 * FilterTestHelper.ELEMENTS;
1:23fd75f:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:d765b24:         double sumfp = 0;
1:6cb811b:         for (int i = 0; i < 10; i++)
1:6cb811b:         {
1:23fd75f:             testFalsePositives(bf,
1:23fd75f:                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
1:23fd75f:                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
7:d765b24: 
1:0a9a17e:             bf.clear();
1:0a9a17e:         }
1:23fd75f:         logger.info("Bloom filter mean false positive for oldBfHashOrder={}: {}", oldBfHashOrder, sumfp / 10);
1:0a9a17e:     }
1:0a9a17e: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadLocalRandom;
1: import static org.apache.cassandra.utils.FilterFactory.getFilter;
1: import static org.apache.cassandra.utils.FilterTestHelper.testFalsePositives;
1: 
/////////////////////////////////////////////////////////////////////////
1:         testBigInt(false);
1:         testBigInt(true);
1:     }
1:     private static void testBigInt(boolean oldBfHashOrder)
1:     {
1:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:         double fp = testFalsePositives(bf,
1:                                        new KeyGenerator.IntGenerator(size),
1:                                        new KeyGenerator.IntGenerator(size, size * 2));
1:         logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:         testBigRandom(false);
1:         testBigRandom(true);
1:     }
1:     private static void testBigRandom(boolean oldBfHashOrder)
1:     {
1:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:         double fp = testFalsePositives(bf,
1:                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
1:                                        new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:         logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:     }
1: 
1:     /**
1:      * NB: needs to run with -mx1G
1:      */
1:     @Test
1:     public void testConstrained()
1:     {
1:         testConstrained(false);
1:         testConstrained(true);
1:     }
1:     private static void testConstrained(boolean oldBfHashOrder)
1:     {
1:         int size = 10 * 1000 * 1000;
1:         try (IFilter bf = getFilter(size, 0.01, false, oldBfHashOrder))
1:         {
1:             double fp = testFalsePositives(bf,
1:                                            new KeyGenerator.IntGenerator(size),
1:                                            new KeyGenerator.IntGenerator(size, size * 2));
1:             logger.info("Bloom filter false positive for oldBfHashOrder={}: {}", oldBfHashOrder, fp);
1:         }
1:     }
1: 
1:     private static void testConstrained(double targetFp, int elements, boolean oldBfHashOrder, int staticBitCount, long ... staticBits)
1:     {
1:         for (long bits : staticBits)
1:         {
1:             try (IFilter bf = getFilter(elements, targetFp, false, oldBfHashOrder);)
1:             {
1:                 SequentialHashGenerator gen = new SequentialHashGenerator(staticBitCount, bits);
1:                 long[] hash = new long[2];
1:                 for (int i = 0 ; i < elements ; i++)
1:                 {
1:                     gen.nextHash(hash);
1:                     bf.add(filterKey(hash[0], hash[1]));
1:                 }
1:                 int falsePositiveCount = 0;
1:                 for (int i = 0 ; i < elements ; i++)
1:                 {
1:                     gen.nextHash(hash);
1:                     if (bf.isPresent(filterKey(hash[0], hash[1])))
1:                         falsePositiveCount++;
1:                 }
1:                 double fp = falsePositiveCount / (double) elements;
1:                 double ratio = fp/targetFp;
1:                 System.out.printf("%.2f, ", ratio);
1:             }
1:         }
1:         System.out.printf("%d elements, %d static bits, %.2f target\n", elements, staticBitCount, targetFp);
1:     }
1: 
1:     private static IFilter.FilterKey filterKey(final long hash1, final long hash2)
1:     {
1:         return new IFilter.FilterKey()
1:         {
1:             public void filterHash(long[] dest)
1:             {
1:                 dest[0] = hash1;
1:                 dest[1] = hash2;
1:             }
1:         };
1:     }
1: 
1:     @Test
1:     public void testBffp()
1:     {
1:         bffp(false);
1:         bffp(true);
1:     }
1: 
1:     private static void bffp(boolean flipInputs)
1:     {
1:         System.out.println("Bloom filter false posiitive with flipInputs=" + flipInputs);
1:         long[] staticBits = staticBits(4, 0);
1:         testConstrained(0.01d, 10 << 20, flipInputs, 0, staticBits);
1:         testConstrained(0.01d, 1 << 20, flipInputs, 6, staticBits);
1:         testConstrained(0.01d, 10 << 20, flipInputs, 6, staticBits);
1:         testConstrained(0.01d, 1 << 19, flipInputs, 10, staticBits);
1:         testConstrained(0.01d, 1 << 20, flipInputs, 10, staticBits);
1:         testConstrained(0.01d, 10 << 20, flipInputs, 10, staticBits);
1:         testConstrained(0.1d, 10 << 20, flipInputs, 0, staticBits);
1:         testConstrained(0.1d, 10 << 20, flipInputs, 8, staticBits);
1:         testConstrained(0.1d, 10 << 20, flipInputs, 10, staticBits);
1:     }
1: 
1:     static long[] staticBits(int random, long ... fixed)
1:     {
1:         long[] result = new long[random + fixed.length];
1:         System.arraycopy(fixed, 0, result, 0, fixed.length);
1:         for (int i = 0 ; i < random ; i++)
1:             result[fixed.length + i] = ThreadLocalRandom.current().nextLong();
1:         return result;
1:     }
1: 
1:     private static class SequentialHashGenerator
1:     {
1:         final long mask;
1:         final long staticBits;
1:         int next;
1:         private SequentialHashGenerator(int staticBitCount, long staticBits) {
1:             this.mask = -1 >>> staticBitCount;
1:             this.staticBits = staticBits & ~mask;
1:         }
1:         void nextHash(long[] fill)
1:         {
1:             MurmurHash.hash3_x64_128(ByteBufferUtil.bytes(next), 0, 4, 0, fill);
1:             fill[0] &= mask;
1:             fill[0] |= staticBits;
1:             next++;
1:         }
1:         timeit(false);
1:         timeit(true);
1:     }
1:     private static void timeit(boolean oldBfHashOrder)
1:     {
1:         IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder);
1:             testFalsePositives(bf,
1:                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
1:                                new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:         logger.info("Bloom filter mean false positive for oldBfHashOrder={}: {}", oldBfHashOrder, sumfp / 10);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testBigInt()
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);
0:         double fp = FilterTestHelper.testFalsePositives(bf,
0:                                                         new KeyGenerator.IntGenerator(size),
0:                                                         new KeyGenerator.IntGenerator(size, size * 2));
1:     @Test
1:     public void testBigRandom()
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);
0:         double fp = FilterTestHelper.testFalsePositives(bf,
0:                                                         new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                                         new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:     @Test
1:     public void timeit()
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, false);
0:             FilterTestHelper.testFalsePositives(bf,
0:                                                 new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                                 new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
0:         logger.info("Bloom filter mean false positive: {}", sumfp / 10);
commit:a15500e
/////////////////////////////////////////////////////////////////////////
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
/////////////////////////////////////////////////////////////////////////
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
/////////////////////////////////////////////////////////////////////////
0:         IFilter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
/////////////////////////////////////////////////////////////////////////
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
/////////////////////////////////////////////////////////////////////////
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type, false);
commit:6cb811b
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
0:     public void testBigInt()
1:     {
0:         bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);
0:         FilterTestHelper.testFalsePositives(bf,
0:                                             new KeyGenerator.IntGenerator(size),
0:                                             new KeyGenerator.IntGenerator(size, size * 2));
0:     public void testBigRandom()
1:     {
0:         bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);
0:         FilterTestHelper.testFalsePositives(bf,
0:                                             new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                             new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
0:     public void timeit()
1:     {
1:         int size = 300 * FilterTestHelper.ELEMENTS;
0:         bf = BloomFilter.getFilter(size, FilterTestHelper.spec.bucketsPerElement);
1:         for (int i = 0; i < 10; i++)
1:         {
0:             FilterTestHelper.testFalsePositives(bf,
0:                                                 new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                                 new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
commit:0a9a17e
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
0: import java.io.IOException;
1: import java.util.Random;
1: 
1: import org.junit.Test;
1: 
1: public class LongBloomFilterTest
1: {
0:     public BloomFilter bf;
1: 
1:     /**
1:      * NB: needs to run with -mx1G
1:      */
0:     @Test
0:     public void testBigInt() {
1:         int size = 10 * 1000 * 1000;
0:         bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
0:         FilterTest.testFalsePositives(bf,
0:                                       new KeyGenerator.IntGenerator(size),
0:                                       new KeyGenerator.IntGenerator(size, size * 2));
1:     }
1: 
0:     @Test
0:     public void testBigRandom() {
1:         int size = 10 * 1000 * 1000;
0:         bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
0:         FilterTest.testFalsePositives(bf,
0:                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                       new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:     }
1: 
0:     @Test
0:     public void timeit() {
0:         int size = 300 * FilterTest.ELEMENTS;
0:         bf = BloomFilter.getFilter(size, FilterTest.spec.bucketsPerElement);
0:         for (int i = 0; i < 10; i++) {
0:             FilterTest.testFalsePositives(bf,
0:                                           new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                           new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1:             bf.clear();
1:         }
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:d765b24
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger logger = LoggerFactory.getLogger(LongBloomFilterTest.class);
0:     public void testBigInt(FilterFactory.Type type)
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);
0:         double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.IntGenerator(size),
0:                                                             new KeyGenerator.IntGenerator(size, size * 2));
0:         logger.info("Bloom filter false positive: {}", fp);
0:     public void testBigRandom(FilterFactory.Type type)
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);
0:         double fp = FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                                             new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
0:         logger.info("Bloom filter false positive: {}", fp);
0:     public void timeit(FilterFactory.Type type)
0:         Filter bf = FilterFactory.getFilter(size, FilterTestHelper.spec.bucketsPerElement, type);
1:         double sumfp = 0;
0:             FilterTestHelper.testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size),
0:                                                     new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size));
1: 
0:         logger.info("Bloom filter mean false positive: {}", sumfp/10);
0:     }
1: 
0:     @Test
0:     public void testBigIntMurm2()
0:     {
0:         testBigInt(FilterFactory.Type.MURMUR2);
0:     }
1: 
0:     @Test
0:     public void testBigRandomMurm2()
0:     {
0:         testBigRandom(FilterFactory.Type.MURMUR2);
0:     }
1: 
0:     @Test
0:     public void timeitMurm2()
0:     {
0:         timeit(FilterFactory.Type.MURMUR2);
0:     }
1: 
0:     @Test
0:     public void testBigIntMurm3()
0:     {
0:         testBigInt(FilterFactory.Type.MURMUR3);
0:     }
1: 
0:     @Test
0:     public void testBigRandomMurm3()
0:     {
0:         testBigRandom(FilterFactory.Type.MURMUR3);
0:     }
1: 
0:     @Test
0:     public void timeitMurm3()
0:     {
0:         timeit(FilterFactory.Type.MURMUR3);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
============================================================================