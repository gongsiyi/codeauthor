1:d01f8dd: /*
1:d01f8dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:d01f8dd:  * or more contributor license agreements.  See the NOTICE file
1:d01f8dd:  * distributed with this work for additional information
1:d01f8dd:  * regarding copyright ownership.  The ASF licenses this file
1:d01f8dd:  * to you under the Apache License, Version 2.0 (the
1:d01f8dd:  * "License"); you may not use this file except in compliance
1:d01f8dd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:d01f8dd:  */
1:f0ee59d: package org.apache.cassandra.db.compaction;
2:9361543: 
1:910170c: import java.util.Set;
1:2eba60e: 
1:f0ee59d: import org.apache.cassandra.db.ColumnFamilyStore;
1:9ed2727: import org.apache.cassandra.db.Directories;
1:910170c: import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
1:910170c: import org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter;
1:910170c: import org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter;
1:0368e97: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:e5a76bd: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:2eba60e: 
1:f0ee59d: public class LeveledCompactionTask extends CompactionTask
1:9361543: {
1:75d5639:     private final int level;
1:ecec863:     private final long maxSSTableBytes;
1:910170c:     private final boolean majorCompaction;
1:9361543: 
1:e5a76bd:     public LeveledCompactionTask(ColumnFamilyStore cfs, LifecycleTransaction txn, int level, int gcBefore, long maxSSTableBytes, boolean majorCompaction)
1:9361543:     {
1:605bcdc:         super(cfs, txn, gcBefore);
1:75d5639:         this.level = level;
1:ecec863:         this.maxSSTableBytes = maxSSTableBytes;
1:910170c:         this.majorCompaction = majorCompaction;
1:9361543:     }
1:75d5639: 
1:9361543:     @Override
1:b09e60f:     public CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs,
1:9ed2727:                                                           Directories directories,
1:b09e60f:                                                           LifecycleTransaction txn,
1:b09e60f:                                                           Set<SSTableReader> nonExpiredSSTables)
1:d90f0f3:     {
1:910170c:         if (majorCompaction)
1:f9a1a80:             return new MajorLeveledCompactionWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, false);
1:f9a1a80:         return new MaxSSTableSizeWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false);
1:d90f0f3:     }
1:d90f0f3: 
1:2eba60e:     @Override
1:2eba60e:     protected boolean partialCompactionsAcceptable()
1:2eba60e:     {
1:bc0d1da:         return level == 0;
1:2eba60e:     }
1:2eba60e: 
1:75d5639:     protected int getLevel()
1:75d5639:     {
1:75d5639:         return level;
1:75d5639:     }
1:9361543: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a98552e
commit:10e719c
commit:25159c3
commit:bc0d1da
/////////////////////////////////////////////////////////////////////////
1:         return level == 0;
commit:f9a1a80
/////////////////////////////////////////////////////////////////////////
1:             return new MajorLeveledCompactionWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, false);
1:         return new MaxSSTableSizeWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false);
commit:910170c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
1: import org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter;
1: import org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter;
1:     private final boolean majorCompaction;
0:     public LeveledCompactionTask(ColumnFamilyStore cfs, Iterable<SSTableReader> sstables, int level, final int gcBefore, long maxSSTableBytes, boolean majorCompaction)
1:         this.majorCompaction = majorCompaction;
0:     public CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables)
1:         if (majorCompaction)
0:             return new MajorLeveledCompactionWriter(cfs, sstables, nonExpiredSSTables, maxSSTableBytes, false, compactionType);
0:         return new MaxSSTableSizeWriter(cfs, sstables, nonExpiredSSTables, maxSSTableBytes, getLevel(), false, compactionType);
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
1:                                                           Directories directories,
0:             return new MajorLeveledCompactionWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, false, false);
0:         return new MaxSSTableSizeWriter(cfs, directories, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false, false);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:605bcdc
/////////////////////////////////////////////////////////////////////////
1:         super(cfs, txn, gcBefore);
/////////////////////////////////////////////////////////////////////////
0:             return new MajorLeveledCompactionWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, false, false);
0:         return new MaxSSTableSizeWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false, false);
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1:     public CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs,
1:                                                           LifecycleTransaction txn,
1:                                                           Set<SSTableReader> nonExpiredSSTables)
0:             return new MajorLeveledCompactionWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, false);
0:         return new MaxSSTableSizeWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
/////////////////////////////////////////////////////////////////////////
1:     public LeveledCompactionTask(ColumnFamilyStore cfs, LifecycleTransaction txn, int level, int gcBefore, long maxSSTableBytes, boolean majorCompaction)
0:         super(cfs, txn, gcBefore, false);
0:     public CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
0:             return new MajorLeveledCompactionWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, false, compactionType);
0:         return new MaxSSTableSizeWriter(cfs, txn, nonExpiredSSTables, maxSSTableBytes, getLevel(), false, compactionType);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
0: import org.apache.cassandra.io.sstable.format.SSTableWriter;
author:belliottsmith
-------------------------------------------------------------------------------
commit:4e95953
/////////////////////////////////////////////////////////////////////////
0:         super(cfs, sstables, gcBefore, false);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ecec863
/////////////////////////////////////////////////////////////////////////
1:     private final long maxSSTableBytes;
0:     public LeveledCompactionTask(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int level, final int gcBefore, long maxSSTableBytes)
1:         this.maxSSTableBytes = maxSSTableBytes;
0:         return writer.getOnDiskFilePointer() > maxSSTableBytes;
commit:75d5639
/////////////////////////////////////////////////////////////////////////
1:     private final int level;
0:     public LeveledCompactionTask(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int level, final int gcBefore, int sstableSizeInMB)
1:         this.level = level;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected int getLevel()
1:     {
1:         return level;
1:     }
commit:9ecda72
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer)
commit:debb15e
/////////////////////////////////////////////////////////////////////////
0:     public int execute(CompactionManager.CompactionExecutorStatsCollector collector)
commit:80d7d43
/////////////////////////////////////////////////////////////////////////
0:     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer) throws IOException
0:         return writer.getOnDiskFilePointer() > sstableSizeInMB * 1024L * 1024L;
commit:2ce8274
/////////////////////////////////////////////////////////////////////////
0:     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer) throws IOException
0:         return writer.getOnDiskFilePointer() > sstableSizeInMB * 1024L * 1024L;
commit:8516bcb
commit:1280c6c
/////////////////////////////////////////////////////////////////////////
0:             return super.execute(collector);
commit:213974d
commit:d90f0f3
/////////////////////////////////////////////////////////////////////////
0:     public boolean markSSTablesForCompaction(int min, int max)
1:     {
0:         return super.markSSTablesForCompaction(1, Integer.MAX_VALUE);
1:     }
1: 
commit:2eba60e
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.util.Set;
0: import com.google.common.collect.Iterables;
1: 
0: import org.apache.commons.lang.StringUtils;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.Table;
/////////////////////////////////////////////////////////////////////////
0:     protected boolean isCompactionInteresting(Set<SSTableReader> toCompact)
1: 
1:     @Override
1:     protected boolean partialCompactionsAcceptable()
1:     {
0:         return false;
1:     }
commit:9361543
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
0:     private final CountDownLatch latch = new CountDownLatch(1);
1: 
/////////////////////////////////////////////////////////////////////////
0:     public int execute(CompactionManager.CompactionExecutorStatsCollector collector) throws IOException
1:     {
0:         int n = super.execute(collector);
0:         latch.countDown();
0:         return n;
1:     }
1: 
0:     public boolean isDone()
1:     {
0:         return latch.getCount() == 0;
1:     }
1: 
1:     @Override
commit:f0ee59d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.compaction;
0: 
0: import java.util.Collection;
0: 
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.compaction.CompactionTask;
0: import org.apache.cassandra.io.sstable.SSTableReader;
0: import org.apache.cassandra.io.sstable.SSTableWriter;
0: 
1: public class LeveledCompactionTask extends CompactionTask
0: {
0:     private final int sstableSizeInMB;
0: 
0:     public LeveledCompactionTask(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, final int gcBefore, int sstableSizeInMB)
0:     {
0:         super(cfs, sstables, gcBefore);
0:         this.sstableSizeInMB = sstableSizeInMB;
0:     }
0: 
0:     @Override
0:     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer, long position)
0:     {
0:         return position > sstableSizeInMB * 1024 * 1024;
0:     }
0: 
0:     @Override
0:     protected boolean allowSingletonCompaction()
0:     {
0:         return true;
0:     }
0: }
commit:f9497f4
/////////////////////////////////////////////////////////////////////////
commit:ed0df5f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.compaction;
0: 
0: import java.util.Collection;
0: 
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.compaction.CompactionTask;
0: import org.apache.cassandra.io.sstable.SSTableReader;
0: import org.apache.cassandra.io.sstable.SSTableWriter;
0: 
0: public class LeveledCompactionTask extends CompactionTask
0: {
0:     private final int sstableSizeInMB;
0: 
0:     public LeveledCompactionTask(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, final int gcBefore, int sstableSizeInMB)
0:     {
0:         super(cfs, sstables, gcBefore);
0:         this.sstableSizeInMB = sstableSizeInMB;
0:     }
0: 
0:     @Override
0:     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer, long position)
0:     {
0:         return position > sstableSizeInMB * 1024 * 1024;
0:     }
0: 
0:     @Override
0:     protected boolean allowSingletonCompaction()
0:     {
0:         return true;
0:     }
0: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:2a3076b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.db.compaction;
commit:5c752cd
/////////////////////////////////////////////////////////////////////////
0:         try
0:         {
0:             int n = super.execute(collector);
0:             return n;
0:         }
0:         finally
0:         {
0:             latch.countDown();
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
0:     protected void cancel()
0:     {
0:         latch.countDown();
0:     }
commit:d01f8dd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:8aeb2fe
/////////////////////////////////////////////////////////////////////////
0:         return position > sstableSizeInMB * 1024L * 1024L;
============================================================================