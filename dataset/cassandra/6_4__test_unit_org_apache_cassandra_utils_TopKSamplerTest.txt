1:615bf37: /*
1:615bf37:  *
1:615bf37:  * Licensed to the Apache Software Foundation (ASF) under one
1:615bf37:  * or more contributor license agreements.  See the NOTICE file
1:615bf37:  * distributed with this work for additional information
1:615bf37:  * regarding copyright ownership.  The ASF licenses this file
1:615bf37:  * to you under the Apache License, Version 2.0 (the
1:615bf37:  * "License"); you may not use this file except in compliance
1:615bf37:  * with the License.  You may obtain a copy of the License at
1:615bf37:  *
1:615bf37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:615bf37:  *
1:615bf37:  * Unless required by applicable law or agreed to in writing,
1:615bf37:  * software distributed under the License is distributed on an
1:615bf37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:615bf37:  * KIND, either express or implied.  See the License for the
1:615bf37:  * specific language governing permissions and limitations
1:615bf37:  * under the License.
1:615bf37:  *
1:615bf37:  */
1:faf9181: package org.apache.cassandra.utils;
2:faf9181: 
1:faf9181: import java.util.List;
1:faf9181: import java.util.Map;
1:a991b64: import java.util.concurrent.CountDownLatch;
1:a991b64: import java.util.concurrent.TimeUnit;
1:a991b64: import java.util.concurrent.TimeoutException;
1:faf9181: import java.util.concurrent.atomic.AtomicBoolean;
1:faf9181: 
1:a991b64: import com.google.common.collect.Maps;
1:a991b64: import com.google.common.util.concurrent.Uninterruptibles;
1:faf9181: import org.junit.Test;
1:faf9181: 
1:0127b69: import com.clearspring.analytics.hash.MurmurHash;
1:faf9181: import com.clearspring.analytics.stream.Counter;
1:a991b64: import junit.framework.Assert;
1:a991b64: import org.apache.cassandra.utils.TopKSampler.SamplerResult;
1:faf9181: 
1:faf9181: public class TopKSamplerTest
1:faf9181: {
1:faf9181: 
1:faf9181:     @Test
1:faf9181:     public void testSamplerSingleInsertionsEqualMulti() throws TimeoutException
1:faf9181:     {
1:faf9181:         TopKSampler<String> sampler = new TopKSampler<String>();
1:faf9181:         sampler.beginSampling(10);
1:faf9181:         insert(sampler);
1:faf9181:         waitForEmpty(1000);
1:faf9181:         SamplerResult single = sampler.finishSampling(10);
1:faf9181: 
1:faf9181:         TopKSampler<String> sampler2 = new TopKSampler<String>();
1:faf9181:         sampler2.beginSampling(10);
1:faf9181:         for(int i = 1; i <= 10; i++)
1:faf9181:         {
1:0127b69:            String key = "item" + i;
1:0127b69:            sampler2.addSample(key, MurmurHash.hash64(key), i);
1:faf9181:         }
1:faf9181:         waitForEmpty(1000);
1:faf9181:         Assert.assertEquals(countMap(single.topK), countMap(sampler2.finishSampling(10).topK));
1:0127b69:         Assert.assertEquals(sampler2.hll.cardinality(), 10);
1:faf9181:         Assert.assertEquals(sampler.hll.cardinality(), sampler2.hll.cardinality());
1:faf9181:     }
1:faf9181: 
1:faf9181:     @Test
1:faf9181:     public void testSamplerOutOfOrder() throws TimeoutException
1:faf9181:     {
1:faf9181:         TopKSampler<String> sampler = new TopKSampler<String>();
1:faf9181:         sampler.beginSampling(10);
1:faf9181:         insert(sampler);
1:faf9181:         waitForEmpty(1000);
1:faf9181:         SamplerResult single = sampler.finishSampling(10);
1:faf9181:         single = sampler.finishSampling(10);
1:faf9181:     }
1:faf9181: 
1:faf9181:     /**
1:faf9181:      * checking for exceptions from SS/HLL which are not thread safe
1:faf9181:      */
1:faf9181:     @Test
1:faf9181:     public void testMultithreadedAccess() throws Exception
1:faf9181:     {
1:faf9181:         final AtomicBoolean running = new AtomicBoolean(true);
1:faf9181:         final CountDownLatch latch = new CountDownLatch(1);
1:faf9181:         final TopKSampler<String> sampler = new TopKSampler<String>();
1:faf9181: 
1:faf9181:         new Thread(new Runnable()
1:faf9181:         {
1:faf9181:             public void run()
1:faf9181:             {
1:faf9181:                 try
1:faf9181:                 {
1:faf9181:                     while (running.get())
1:faf9181:                     {
1:faf9181:                         insert(sampler);
1:faf9181:                     }
1:faf9181:                 } finally
1:faf9181:                 {
1:faf9181:                     latch.countDown();
1:faf9181:                 }
1:faf9181:             }
1:faf9181: 
1:faf9181:         }
1:faf9181:         ,"inserter").start();
1:faf9181:         try
1:faf9181:         {
1:faf9181:             // start/stop in fast iterations
1:faf9181:             for(int i = 0; i<100; i++)
1:faf9181:             {
1:faf9181:                 sampler.beginSampling(i);
1:faf9181:                 sampler.finishSampling(i);
1:faf9181:             }
1:faf9181:             // start/stop with pause to let it build up past capacity
1:faf9181:             for(int i = 0; i<3; i++)
1:faf9181:             {
1:faf9181:                 sampler.beginSampling(i);
1:faf9181:                 Thread.sleep(250);
1:faf9181:                 sampler.finishSampling(i);
1:faf9181:             }
1:faf9181: 
1:faf9181:             // with empty results
1:faf9181:             running.set(false);
1:faf9181:             latch.await(1, TimeUnit.SECONDS);
1:faf9181:             waitForEmpty(1000);
1:faf9181:             for(int i = 0; i<10; i++)
1:faf9181:             {
1:faf9181:                 sampler.beginSampling(i);
1:faf9181:                 Thread.sleep(i);
1:faf9181:                 sampler.finishSampling(i);
1:faf9181:             }
1:faf9181:         } finally
1:faf9181:         {
1:faf9181:             running.set(false);
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181:     private void insert(TopKSampler<String> sampler)
1:faf9181:     {
1:faf9181:         for(int i = 1; i <= 10; i++)
1:faf9181:         {
1:faf9181:             for(int j = 0; j < i; j++)
1:faf9181:             {
1:0127b69:                 String key = "item" + i;
1:0127b69:                 sampler.addSample(key, MurmurHash.hash64(key), 1);
1:faf9181:             }
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181:     private void waitForEmpty(int timeoutMs) throws TimeoutException
1:faf9181:     {
1:faf9181:         int timeout = 0;
1:faf9181:         while (!TopKSampler.samplerExecutor.getQueue().isEmpty())
1:faf9181:         {
1:faf9181:             timeout++;
1:faf9181:             Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
1:faf9181:             if (timeout * 100 > timeoutMs)
1:faf9181:             {
1:faf9181:                 throw new TimeoutException("TRACE executor not cleared within timeout");
1:faf9181:             }
1:faf9181:         }
1:faf9181:     }
1:faf9181: 
1:faf9181:     private <T> Map<T, Long> countMap(List<Counter<T>> target)
1:faf9181:     {
1:faf9181:         Map<T, Long> counts = Maps.newHashMap();
1:faf9181:         for(Counter<T> counter : target)
1:faf9181:         {
1:faf9181:             counts.put(counter.getItem(), counter.getCount());
1:faf9181:         }
1:faf9181:         return counts;
1:faf9181:     }
1:faf9181: }
============================================================================
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:05bacc7
commit:dbefa85
commit:615bf37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import com.google.common.collect.Maps;
1: import com.google.common.util.concurrent.Uninterruptibles;
1: import junit.framework.Assert;
1: import org.apache.cassandra.utils.TopKSampler.SamplerResult;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0014d92
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:0127b69
/////////////////////////////////////////////////////////////////////////
1: import com.clearspring.analytics.hash.MurmurHash;
/////////////////////////////////////////////////////////////////////////
1:            String key = "item" + i;
1:            sampler2.addSample(key, MurmurHash.hash64(key), i);
1:         Assert.assertEquals(sampler2.hll.cardinality(), 10);
/////////////////////////////////////////////////////////////////////////
1:                 String key = "item" + i;
1:                 sampler.addSample(key, MurmurHash.hash64(key), 1);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Brandon Williams
-------------------------------------------------------------------------------
commit:faf9181
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils;
1: 
1: import java.util.List;
1: import java.util.Map;
0: import java.util.concurrent.*;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import junit.framework.Assert;
1: 
0: import org.apache.cassandra.concurrent.Stage;
0: import org.apache.cassandra.concurrent.StageManager;
0: import org.apache.cassandra.utils.TopKSampler.SamplerResult;
1: import org.junit.Test;
1: 
1: import com.clearspring.analytics.stream.Counter;
0: import com.google.common.collect.Maps;
0: import com.google.common.util.concurrent.Uninterruptibles;
1: 
1: public class TopKSamplerTest
1: {
1: 
1:     @Test
1:     public void testSamplerSingleInsertionsEqualMulti() throws TimeoutException
1:     {
1:         TopKSampler<String> sampler = new TopKSampler<String>();
1:         sampler.beginSampling(10);
1:         insert(sampler);
1:         waitForEmpty(1000);
1:         SamplerResult single = sampler.finishSampling(10);
1: 
1:         TopKSampler<String> sampler2 = new TopKSampler<String>();
1:         sampler2.beginSampling(10);
1:         for(int i = 1; i <= 10; i++)
1:         {
0:            sampler2.addSample("item" + i, i);
1:         }
1:         waitForEmpty(1000);
1:         Assert.assertEquals(countMap(single.topK), countMap(sampler2.finishSampling(10).topK));
1:         Assert.assertEquals(sampler.hll.cardinality(), sampler2.hll.cardinality());
1:     }
1: 
1:     @Test
1:     public void testSamplerOutOfOrder() throws TimeoutException
1:     {
1:         TopKSampler<String> sampler = new TopKSampler<String>();
1:         sampler.beginSampling(10);
1:         insert(sampler);
1:         waitForEmpty(1000);
1:         SamplerResult single = sampler.finishSampling(10);
1:         single = sampler.finishSampling(10);
1:     }
1: 
1:     /**
1:      * checking for exceptions from SS/HLL which are not thread safe
1:      */
1:     @Test
1:     public void testMultithreadedAccess() throws Exception
1:     {
1:         final AtomicBoolean running = new AtomicBoolean(true);
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final TopKSampler<String> sampler = new TopKSampler<String>();
1: 
1:         new Thread(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 try
1:                 {
1:                     while (running.get())
1:                     {
1:                         insert(sampler);
1:                     }
1:                 } finally
1:                 {
1:                     latch.countDown();
1:                 }
1:             }
1: 
1:         }
1:         ,"inserter").start();
1:         try
1:         {
1:             // start/stop in fast iterations
1:             for(int i = 0; i<100; i++)
1:             {
1:                 sampler.beginSampling(i);
1:                 sampler.finishSampling(i);
1:             }
1:             // start/stop with pause to let it build up past capacity
1:             for(int i = 0; i<3; i++)
1:             {
1:                 sampler.beginSampling(i);
1:                 Thread.sleep(250);
1:                 sampler.finishSampling(i);
1:             }
1: 
1:             // with empty results
1:             running.set(false);
1:             latch.await(1, TimeUnit.SECONDS);
1:             waitForEmpty(1000);
1:             for(int i = 0; i<10; i++)
1:             {
1:                 sampler.beginSampling(i);
1:                 Thread.sleep(i);
1:                 sampler.finishSampling(i);
1:             }
1:         } finally
1:         {
1:             running.set(false);
1:         }
1:     }
1: 
1:     private void insert(TopKSampler<String> sampler)
1:     {
1:         for(int i = 1; i <= 10; i++)
1:         {
1:             for(int j = 0; j < i; j++)
1:             {
0:                 sampler.addSample("item" + i);
1:             }
1:         }
1:     }
1: 
1:     private void waitForEmpty(int timeoutMs) throws TimeoutException
1:     {
1:         int timeout = 0;
1:         while (!TopKSampler.samplerExecutor.getQueue().isEmpty())
1:         {
1:             timeout++;
1:             Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
1:             if (timeout * 100 > timeoutMs)
1:             {
1:                 throw new TimeoutException("TRACE executor not cleared within timeout");
1:             }
1:         }
1:     }
1: 
1:     private <T> Map<T, Long> countMap(List<Counter<T>> target)
1:     {
1:         Map<T, Long> counts = Maps.newHashMap();
1:         for(Counter<T> counter : target)
1:         {
1:             counts.put(counter.getItem(), counter.getCount());
1:         }
1:         return counts;
1:     }
1: }
============================================================================