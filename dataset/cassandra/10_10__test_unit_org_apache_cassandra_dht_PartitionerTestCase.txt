1:f8fa6d2: /*
1:f8fa6d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:f8fa6d2:  * or more contributor license agreements.  See the NOTICE file
1:f8fa6d2:  * distributed with this work for additional information
1:f8fa6d2:  * regarding copyright ownership.  The ASF licenses this file
1:f8fa6d2:  * to you under the Apache License, Version 2.0 (the
1:f8fa6d2:  * "License"); you may not use this file except in compliance
1:f8fa6d2:  * with the License.  You may obtain a copy of the License at
1:f8fa6d2:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f8fa6d2:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:f8fa6d2:  */
1:f8fa6d2: package org.apache.cassandra.dht;
1:f8fa6d2: 
1:e7a385a: import java.nio.ByteBuffer;
1:a991b64: import java.util.ArrayList;
1:a991b64: import java.util.Collections;
1:a991b64: import java.util.List;
1:a991b64: import java.util.Map;
1:4a6b002: import java.util.Random;
1:4a6b002: 
1:f8fa6d2: import org.junit.Before;
1:9797511: import org.junit.BeforeClass;
1:f8fa6d2: import org.junit.Test;
1:f8fa6d2: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:07893d7: import org.apache.cassandra.service.StorageService;
1:f8fa6d2: 
1:67ae1ee: import static org.junit.Assert.assertEquals;
1:83a43f1: import static org.junit.Assert.fail;
1:f8fa6d2: 
1:ad84e4d: public abstract class PartitionerTestCase
1:2d9d248: {
1:4fd05e5:     private static final double SPLIT_RATIO_MIN = 0.10;
1:4fd05e5:     private static final double SPLIT_RATIO_MAX = 1 - SPLIT_RATIO_MIN;
1:4fd05e5: 
1:ad84e4d:     protected IPartitioner partitioner;
1:f8fa6d2: 
1:4a6b002:     public abstract void initPartitioner();
1:f8fa6d2: 
1:9797511:     @BeforeClass
1:9797511:     public static void initDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:f8fa6d2:     @Before
1:f8fa6d2:     public void clean()
1:021ab75:     {
1:4a6b002:         initPartitioner();
1:021ab75:     }
1:021ab75: 
1:ad84e4d:     public Token tok(byte[] key)
1:021ab75:     {
1:e7a385a:         return partitioner.getToken(ByteBuffer.wrap(key));
1:f8fa6d2:     }
1:f8fa6d2: 
1:ad84e4d:     public Token tok(String key)
1:f8fa6d2:     {
1:2d9d248:         return tok(key.getBytes());
1:f8fa6d2:     }
1:f8fa6d2: 
1:4a6b002:     /**
1:4a6b002:      * Recurses randomly to the given depth a few times.
1:4a6b002:      */
1:ad84e4d:     public void assertMidpoint(Token left, Token right, int depth)
1:a89ef1f:     {
1:4a6b002:         Random rand = new Random();
1:4a6b002:         for (int i = 0; i < 1000; i++)
1:4a6b002:         {
1:4a6b002:             assertMidpoint(left, right, rand, depth);
1:4a6b002:         }
1:4a6b002:     }
1:4a6b002: 
1:e7a385a:     private void assertMidpoint(Token left, Token right, Random rand, int depth)
1:4a6b002:     {
1:e7a385a:         Token mid = partitioner.midpoint(left, right);
1:554223b:         assert new Range<Token>(left, right).contains(mid)
1:4a6b002:                 : "For " + left + "," + right + ": range did not contain mid:" + mid;
1:4a6b002:         if (depth < 1)
1:4a6b002:             return;
1:4a6b002: 
1:4a6b002:         if (rand.nextBoolean())
1:4a6b002:             assertMidpoint(left, mid, rand, depth-1);
1:4a6b002:         else
1:4a6b002:             assertMidpoint(mid, right, rand, depth-1);
1:e7ae7c9:     }
1:a991b64: 
1:021ab75:     @Test
1:021ab75:     public void testMidpoint()
1:67ae1ee:     {
1:021ab75:         assertMidpoint(tok("a"), tok("b"), 16);
1:021ab75:         assertMidpoint(tok("a"), tok("bbb"), 16);
1:67ae1ee:     }
1:67ae1ee: 
1:67ae1ee:     @Test
1:021ab75:     public void testMidpointMinimum()
1:021ab75:     {
1:a89ef1f:         midpointMinimumTestCase();
1:021ab75:     }
1:021ab75: 
1:a89ef1f:     protected void midpointMinimumTestCase()
1:f8fa6d2:     {
1:ad84e4d:         Token mintoken = partitioner.getMinimumToken();
1:4a6b002:         assert mintoken.compareTo(partitioner.midpoint(mintoken, mintoken)) != 0;
1:4a6b002:         assertMidpoint(mintoken, tok("a"), 16);
1:4a6b002:         assertMidpoint(mintoken, tok("aaa"), 16);
1:4a6b002:         assertMidpoint(mintoken, mintoken, 126);
1:4a6b002:         assertMidpoint(tok("a"), mintoken, 16);
1:021ab75:     }
1:021ab75: 
1:021ab75:     @Test
1:021ab75:     public void testMidpointWrapping()
1:021ab75:     {
1:4a6b002:         assertMidpoint(tok("b"), tok("a"), 16);
1:4a6b002:         assertMidpoint(tok("bbb"), tok("a"), 16);
1:021ab75:     }
1:021ab75: 
1:e2a0d75:     /**
1:e2a0d75:      * Test split token ranges
1:e2a0d75:      */
1:e2a0d75:     public void assertSplit(Token left, Token right, int depth)
1:e2a0d75:     {
1:e2a0d75:         Random rand = new Random();
1:e2a0d75:         for (int i = 0; i < 1000; i++)
1:e2a0d75:         {
1:e2a0d75:             assertSplit(left, right ,rand, depth);
1:e2a0d75:         }
1:e2a0d75:     }
1:e2a0d75: 
1:4fd05e5:     protected abstract boolean shouldStopRecursion(Token left, Token right);
1:4fd05e5: 
1:e2a0d75:     private void assertSplit(Token left, Token right, Random rand, int depth)
1:e2a0d75:     {
1:4fd05e5:         if (shouldStopRecursion(left, right))
1:4fd05e5:         {
1:4fd05e5:             System.out.println("Stop assertSplit at depth: " + depth);
1:4fd05e5:             return;
1:4fd05e5:         }
1:e2a0d75: 
1:4fd05e5:         double ratio = SPLIT_RATIO_MIN + (SPLIT_RATIO_MAX - SPLIT_RATIO_MIN) * rand.nextDouble();
1:4fd05e5:         Token newToken = partitioner.split(left, right, ratio);
1:e2a0d75: 
1:e2a0d75:         assertEquals("For " + left + "," + right + ", new token: " + newToken,
1:e2a0d75:                      ratio, left.size(newToken) / left.size(right), 0.1);
1:e2a0d75: 
1:4fd05e5:         assert new Range<Token>(left, right).contains(newToken)
1:4fd05e5:             : "For " + left + "," + right + ": range did not contain new token:" + newToken;
1:4fd05e5: 
1:e2a0d75:         if (depth < 1)
1:e2a0d75:             return;
1:e2a0d75: 
1:e2a0d75:         if (rand.nextBoolean())
1:e2a0d75:             assertSplit(left, newToken, rand, depth-1);
1:e2a0d75:         else
1:e2a0d75:             assertSplit(newToken, right, rand, depth-1);
1:e2a0d75:     }
1:e2a0d75: 
1:021ab75:     @Test
1:f8fa6d2:     public void testTokenFactoryBytes()
1:f8fa6d2:     {
1:4a6b002:         Token.TokenFactory factory = partitioner.getTokenFactory();
1:f8fa6d2:         assert tok("a").compareTo(factory.fromByteArray(factory.toByteArray(tok("a")))) == 0;
1:f8fa6d2:     }
1:f8fa6d2: 
2:f8fa6d2:     @Test
1:f8fa6d2:     public void testTokenFactoryStrings()
1:f8fa6d2:     {
1:4a6b002:         Token.TokenFactory factory = partitioner.getTokenFactory();
1:f8fa6d2:         assert tok("a").compareTo(factory.fromString(factory.toString(tok("a")))) == 0;
1:f8fa6d2:     }
1:07cdfd0: 
1:f8fa6d2:     @Test
1:e7ae7c9:     public void testDescribeOwnership()
1:e7ae7c9:     {
1:07893d7:         // This call initializes StorageService, needed to populate the keyspaces.
1:07893d7:         // TODO: This points to potential problems in the initialization sequence. Should be solved by CASSANDRA-7837.
1:0a08525:         StorageService.instance.getKeyspaces();
1:07893d7: 
1:e7ae7c9:         try
1:e7ae7c9:         {
1:e7ae7c9:             testDescribeOwnershipWith(0);
1:e7ae7c9:             fail();
1:f8fa6d2:         }
1:e7ae7c9:         catch (RuntimeException e)
1:e7ae7c9:         {
1:e7ae7c9:             // success
1:e7ae7c9:         }
1:e7ae7c9:         testDescribeOwnershipWith(1);
1:e7ae7c9:         testDescribeOwnershipWith(2);
1:e7ae7c9:         testDescribeOwnershipWith(256);
1:e7ae7c9:     }
1:07cdfd0: 
1:e7ae7c9:     private void testDescribeOwnershipWith(int numTokens)
1:e7ae7c9:     {
1:e7ae7c9:         List<Token> tokens = new ArrayList<Token>();
1:e7ae7c9:         while (tokens.size() < numTokens)
1:e7ae7c9:         {
1:e7ae7c9:             Token randomToken = partitioner.getRandomToken();
1:e7ae7c9:             if (!tokens.contains(randomToken))
1:e7ae7c9:                 tokens.add(randomToken);
1:e7ae7c9:         }
1:e7ae7c9:         Collections.sort(tokens);
1:e7ae7c9:         Map<Token, Float> owns = partitioner.describeOwnership(tokens);
2:2fd3268: 
1:e7ae7c9:         float totalOwnership = 0;
1:e7ae7c9:         for (float ownership : owns.values())
1:e7ae7c9:             totalOwnership += ownership;
1:e7ae7c9:         assertEquals(1.0, totalOwnership, 0.001);
1:e7ae7c9:     }
1:a89ef1f: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:4fd05e5
/////////////////////////////////////////////////////////////////////////
1:     private static final double SPLIT_RATIO_MIN = 0.10;
1:     private static final double SPLIT_RATIO_MAX = 1 - SPLIT_RATIO_MIN;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected abstract boolean shouldStopRecursion(Token left, Token right);
1: 
1:         if (shouldStopRecursion(left, right))
1:         {
1:             System.out.println("Stop assertSplit at depth: " + depth);
1:             return;
1:         }
1:         double ratio = SPLIT_RATIO_MIN + (SPLIT_RATIO_MAX - SPLIT_RATIO_MIN) * rand.nextDouble();
1:         Token newToken = partitioner.split(left, right, ratio);
1:         assert new Range<Token>(left, right).contains(newToken)
1:             : "For " + left + "," + right + ": range did not contain new token:" + newToken;
1: 
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Test split token ranges
1:      */
1:     public void assertSplit(Token left, Token right, int depth)
1:     {
1:         Random rand = new Random();
1:         for (int i = 0; i < 1000; i++)
1:         {
1:             assertSplit(left, right ,rand, depth);
1:         }
1:     }
1: 
1:     private void assertSplit(Token left, Token right, Random rand, int depth)
1:     {
0:         double ratio = rand.nextDouble();
0:         Token newToken = partitioner.split(left, right, ratio);
1: 
0:         assert new Range<Token>(left, right).contains(newToken)
0:                 : "For " + left + "," + right + ": range did not contain new token:" + newToken;
1: 
1:         assertEquals("For " + left + "," + right + ", new token: " + newToken,
1:                      ratio, left.size(newToken) / left.size(right), 0.1);
1: 
1:         if (depth < 1)
1:             return;
1: 
1:         if (rand.nextBoolean())
1:             assertSplit(left, newToken, rand, depth-1);
1:         else
1:             assertSplit(newToken, right, rand, depth-1);
1:     }
1: 
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         StorageService.instance.getKeyspaces();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         StorageService.getPartitioner();
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public T tok(byte[] key)
1:         return partitioner.getToken(ByteBuffer.wrap(key));
/////////////////////////////////////////////////////////////////////////
1:     private void assertMidpoint(Token left, Token right, Random rand, int depth)
1:         Token mid = partitioner.midpoint(left, right);
/////////////////////////////////////////////////////////////////////////
0:         //assertMidpoint(tok("b"), tok("a"), 16);
0:         //assertMidpoint(tok("bbb"), tok("a"), 16);
commit:b6b1053
/////////////////////////////////////////////////////////////////////////
commit:4a6b002
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public abstract void initPartitioner();
1:         initPartitioner();
0:     public T tok(String string)
0:         return partitioner.getToken(string);
1:     /**
1:      * Recurses randomly to the given depth a few times.
1:      */
1:         Random rand = new Random();
1:         for (int i = 0; i < 1000; i++)
1:         {
1:             assertMidpoint(left, right, rand, depth);
1:         }
1:     }
1: 
0:     private void assertMidpoint(T left, T right, Random rand, int depth)
1:     {
0:         T mid = partitioner.midpoint(left, right);
1:                 : "For " + left + "," + right + ": range did not contain mid:" + mid;
1:         if (depth < 1)
1:             return;
1: 
1:         if (rand.nextBoolean())
1:             assertMidpoint(left, mid, rand, depth-1);
1:         else
1:             assertMidpoint(mid, right, rand, depth-1);
/////////////////////////////////////////////////////////////////////////
0:         T mintoken = partitioner.getMinimumToken(); 
1:         assert mintoken.compareTo(partitioner.midpoint(mintoken, mintoken)) != 0;
1:         assertMidpoint(mintoken, tok("a"), 16);
1:         assertMidpoint(mintoken, tok("aaa"), 16);
1:         assertMidpoint(mintoken, mintoken, 126);
1:         assertMidpoint(tok("a"), mintoken, 16);
1:         assertMidpoint(tok("b"), tok("a"), 16);
1:         assertMidpoint(tok("bbb"), tok("a"), 16);
/////////////////////////////////////////////////////////////////////////
1:         Token.TokenFactory factory = partitioner.getTokenFactory();
1:         Token.TokenFactory factory = partitioner.getTokenFactory();
commit:67ae1ee
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
0: import org.apache.cassandra.db.DecoratedKey;
0:     protected IPartitioner<T> partitioner;
/////////////////////////////////////////////////////////////////////////
0:         this.partitioner = this.getPartitioner();
/////////////////////////////////////////////////////////////////////////
0:         T mid = this.partitioner.midpoint(left, right);
/////////////////////////////////////////////////////////////////////////
0:     public void testDiskFormat()
1:     {
0:         String key = "key";
0:         DecoratedKey<T> decKey = partitioner.decorateKey(key);
0:         DecoratedKey<T> result = partitioner.convertFromDiskFormat(partitioner.convertToDiskFormat(decKey));
0:         assertEquals(decKey, result);
1:     }
1:     
1:     @Test
0:         Token.TokenFactory factory = this.partitioner.getTokenFactory();
0:         Token.TokenFactory factory = this.partitioner.getTokenFactory();
commit:021ab75
/////////////////////////////////////////////////////////////////////////
0:     public void assertMidpoint(T left, T right, int depth)
1:     {
0:         T mid = this.part.midpoint(left, right);
0:         assert new Range(left, right).contains(mid)
0:                 : "For " + tos(left) + "," + tos(right) + ": range did not contain mid:" + tos(mid);
0:         if (depth > 0)
0:             assertMidpoint(left, mid, depth-1);
0:         if (depth > 0)
0:             assertMidpoint(mid, right, depth-1);
1:     }
1: 
1:     @Test
1:     public void testMidpoint()
1:     {
1:         assertMidpoint(tok("a"), tok("b"), 16);
1:         assertMidpoint(tok("a"), tok("bbb"), 16);
1:     }
1: 
1:     @Test
1:     public void testMidpointMinimum()
1:     {
0:         assertMidpoint(tok(""), tok("a"), 16);
0:         assertMidpoint(tok(""), tok("aaa"), 16);
1:     }
1: 
1:     @Test
1:     public void testMidpointWrapping()
1:     {
0:         assertMidpoint(tok(""), tok(""), 16);
0:         assertMidpoint(tok("a"), tok(""), 16);
1:     }
1:     
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
1: */
1: package org.apache.cassandra.dht;
1: 
0: import java.math.BigInteger;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public abstract class PartitionerTestCase<T extends Token> {
0:     protected IPartitioner<T> part;
1: 
0:     public abstract IPartitioner<T> getPartitioner();
0:     public abstract T tok(String string);
0:     public abstract String tos(T token);
1: 
1:     @Before
1:     public void clean()
1:     {
0:         this.part = this.getPartitioner();
1:     }
1: 
1:     @Test
0:     public void testCompare()
1:     {
0:         assert tok("").compareTo(tok("asdf")) < 0;
0:         assert tok("asdf").compareTo(tok("")) > 0;
0:         assert tok("").compareTo(tok("")) == 0;
0:         assert tok("z").compareTo(tok("a")) > 0;
0:         assert tok("a").compareTo(tok("z")) < 0;
0:         assert tok("asdf").compareTo(tok("asdf")) == 0;
0:         assert tok("asdz").compareTo(tok("asdf")) > 0;
1:     }
1: 
1:     @Test
1:     public void testTokenFactoryBytes()
1:     {
0:         Token.TokenFactory factory = this.part.getTokenFactory();
1:         assert tok("a").compareTo(factory.fromByteArray(factory.toByteArray(tok("a")))) == 0;
1:     }
1:     
1:     @Test
1:     public void testTokenFactoryStrings()
1:     {
0:         Token.TokenFactory factory = this.part.getTokenFactory();
1:         assert tok("a").compareTo(factory.fromString(factory.toString(tok("a")))) == 0;
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         StorageService.instance.getKeyspaces();
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:         // This call initializes StorageService, needed to populate the keyspaces.
1:         // TODO: This points to potential problems in the initialization sequence. Should be solved by CASSANDRA-7837.
0:         StorageService.getPartitioner();
1: 
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public abstract class PartitionerTestCase
1:     protected IPartitioner partitioner;
/////////////////////////////////////////////////////////////////////////
1:     public Token tok(byte[] key)
1:     public Token tok(String key)
/////////////////////////////////////////////////////////////////////////
1:     public void assertMidpoint(Token left, Token right, int depth)
/////////////////////////////////////////////////////////////////////////
1:         Token mintoken = partitioner.getMinimumToken();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.Random;
0: import org.apache.cassandra.service.StorageService;
1: 
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:         T mintoken = partitioner.getMinimumToken();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:         T mintoken = partitioner.getMinimumToken();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:554223b
/////////////////////////////////////////////////////////////////////////
1:         assert new Range<Token>(left, right).contains(mid)
commit:6fc5cca
/////////////////////////////////////////////////////////////////////////
0:         assertMidpoint(tok("b"), tok("a"), 16);
0:         assertMidpoint(tok("bbb"), tok("a"), 16);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:e7ae7c9
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.fail;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Test
1:     public void testDescribeOwnership()
1:     {
1:         try
1:         {
1:             testDescribeOwnershipWith(0);
1:             fail();
1:         }
1:         catch (RuntimeException e)
1:         {
1:             // success
1:         }
1:         testDescribeOwnershipWith(1);
1:         testDescribeOwnershipWith(2);
1:         testDescribeOwnershipWith(256);
1:     }
0: 
1:     private void testDescribeOwnershipWith(int numTokens)
1:     {
1:         List<Token> tokens = new ArrayList<Token>();
1:         while (tokens.size() < numTokens)
1:         {
1:             Token randomToken = partitioner.getRandomToken();
1:             if (!tokens.contains(randomToken))
1:                 tokens.add(randomToken);
1:         }
1:         Collections.sort(tokens);
1:         Map<Token, Float> owns = partitioner.describeOwnership(tokens);
0: 
1:         float totalOwnership = 0;
1:         for (float ownership : owns.values())
1:             totalOwnership += ownership;
1:         assertEquals(1.0, totalOwnership, 0.001);
1:     }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:a89ef1f
/////////////////////////////////////////////////////////////////////////
1:         midpointMinimumTestCase();
1:     }
0: 
1:     protected void midpointMinimumTestCase()
1:     {
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:2d9d248
/////////////////////////////////////////////////////////////////////////
0: public abstract class PartitionerTestCase<T extends Token>
1: {
/////////////////////////////////////////////////////////////////////////
0:     public T tok(byte... key)
0:         return partitioner.getToken(key);
0:     }
0: 
0:     public T tok(String key)
0:     {
1:         return tok(key.getBytes());
commit:434564d
/////////////////////////////////////////////////////////////////////////
0:         return partitioner.getToken(string.getBytes());
/////////////////////////////////////////////////////////////////////////
0:         byte[] key = "key".getBytes();
============================================================================