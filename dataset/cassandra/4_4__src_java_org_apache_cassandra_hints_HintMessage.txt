1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing,
1:96d41f0:  * software distributed under the License is distributed on an
1:96d41f0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d41f0:  * KIND, either express or implied.  See the License for the
1:96d41f0:  * specific language governing permissions and limitations
1:96d41f0:  * under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.util.Objects;
1:96d41f0: import java.util.UUID;
1:96d41f0: 
1:96d41f0: import javax.annotation.Nullable;
1:96d41f0: 
1:53a177a: import com.google.common.primitives.Ints;
1:53a177a: 
1:96d41f0: import org.apache.cassandra.db.TypeSizes;
1:96d41f0: import org.apache.cassandra.db.UnknownColumnFamilyException;
1:96d41f0: import org.apache.cassandra.io.IVersionedSerializer;
1:96d41f0: import org.apache.cassandra.io.util.DataInputPlus;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputPlus;
1:96d41f0: import org.apache.cassandra.net.MessageOut;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:e8651b6: import org.apache.cassandra.io.util.TrackedDataInputPlus;
1:96d41f0: import org.apache.cassandra.utils.UUIDSerializer;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * The message we use to dispatch and forward hints.
1:96d41f0:  *
1:96d41f0:  * Encodes the host id the hint is meant for and the hint itself.
1:96d41f0:  * We use the host id to determine whether we should store or apply the hint:
1:96d41f0:  * 1. If host id equals to the receiving node host id, then we apply the hint
1:96d41f0:  * 2. If host id is different from the receiving node's host id, then we store the hint
1:96d41f0:  *
1:96d41f0:  * Scenario (1) means that we are dealing with regular hint dispatch.
1:96d41f0:  * Scenario (2) means that we got a hint from a node that's going through decommissioning and is streaming its hints
1:96d41f0:  * elsewhere first.
1:96d41f0:  */
1:96d41f0: public final class HintMessage
1:96d41f0: {
1:96d41f0:     public static final IVersionedSerializer<HintMessage> serializer = new Serializer();
1:96d41f0: 
1:96d41f0:     final UUID hostId;
1:96d41f0: 
1:96d41f0:     @Nullable // can be null if we fail do decode the hint because of an unknown table id in it
1:96d41f0:     final Hint hint;
1:96d41f0: 
1:96d41f0:     @Nullable // will usually be null, unless a hint deserialization fails due to an unknown table id
1:96d41f0:     final UUID unknownTableID;
1:96d41f0: 
1:96d41f0:     HintMessage(UUID hostId, Hint hint)
1:96d41f0:     {
1:96d41f0:         this.hostId = hostId;
1:96d41f0:         this.hint = hint;
1:96d41f0:         this.unknownTableID = null;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     HintMessage(UUID hostId, UUID unknownTableID)
1:96d41f0:     {
1:96d41f0:         this.hostId = hostId;
1:96d41f0:         this.hint = null;
1:96d41f0:         this.unknownTableID = unknownTableID;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public MessageOut<HintMessage> createMessageOut()
1:96d41f0:     {
1:96d41f0:         return new MessageOut<>(MessagingService.Verb.HINT, this, serializer);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public static class Serializer implements IVersionedSerializer<HintMessage>
1:96d41f0:     {
1:96d41f0:         public long serializedSize(HintMessage message, int version)
1:96d41f0:         {
1:53a177a:             long size = UUIDSerializer.serializer.serializedSize(message.hostId, version);
1:96d41f0: 
1:53a177a:             long hintSize = Hint.serializer.serializedSize(message.hint, version);
1:649a106:             size += TypeSizes.sizeofUnsignedVInt(hintSize);
1:96d41f0:             size += hintSize;
1:96d41f0: 
1:96d41f0:             return size;
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         public void serialize(HintMessage message, DataOutputPlus out, int version) throws IOException
1:96d41f0:         {
1:96d41f0:             Objects.requireNonNull(message.hint); // we should never *send* a HintMessage with null hint
1:96d41f0: 
1:96d41f0:             UUIDSerializer.serializer.serialize(message.hostId, out, version);
1:96d41f0: 
1:96d41f0:             /*
1:96d41f0:              * We are serializing the hint size so that the receiver of the message could gracefully handle
1:96d41f0:              * deserialize failure when a table had been dropped, by simply skipping the unread bytes.
1:96d41f0:              */
1:649a106:             out.writeUnsignedVInt(Hint.serializer.serializedSize(message.hint, version));
1:96d41f0: 
1:96d41f0:             Hint.serializer.serialize(message.hint, out, version);
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         /*
1:96d41f0:          * It's not an exceptional scenario to have a hints file streamed that have partition updates for tables
1:96d41f0:          * that don't exist anymore. We want to handle that case gracefully instead of dropping the connection for every
1:96d41f0:          * one of them.
1:96d41f0:          */
1:96d41f0:         public HintMessage deserialize(DataInputPlus in, int version) throws IOException
1:96d41f0:         {
1:96d41f0:             UUID hostId = UUIDSerializer.serializer.deserialize(in, version);
1:96d41f0: 
1:649a106:             long hintSize = in.readUnsignedVInt();
1:e8651b6:             TrackedDataInputPlus countingIn = new TrackedDataInputPlus(in);
1:96d41f0:             try
1:96d41f0:             {
1:96d41f0:                 return new HintMessage(hostId, Hint.serializer.deserialize(countingIn, version));
1:96d41f0:             }
1:96d41f0:             catch (UnknownColumnFamilyException e)
1:96d41f0:             {
1:53a177a:                 in.skipBytes(Ints.checkedCast(hintSize - countingIn.getBytesRead()));
1:96d41f0:                 return new HintMessage(hostId, e.cfId);
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.TrackedDataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:             TrackedDataInputPlus countingIn = new TrackedDataInputPlus(in);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:649a106
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeofUnsignedVInt(hintSize);
/////////////////////////////////////////////////////////////////////////
1:             out.writeUnsignedVInt(Hint.serializer.serializedSize(message.hint, version));
/////////////////////////////////////////////////////////////////////////
1:             long hintSize = in.readUnsignedVInt();
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.primitives.Ints;
1: 
/////////////////////////////////////////////////////////////////////////
1:             long size = UUIDSerializer.serializer.serializedSize(message.hostId, version);
1:             long hintSize = Hint.serializer.serializedSize(message.hint, version);
0:             size += TypeSizes.sizeofVInt(hintSize);
/////////////////////////////////////////////////////////////////////////
0:             out.writeVInt(Hint.serializer.serializedSize(message.hint, version));
/////////////////////////////////////////////////////////////////////////
0:             long hintSize = in.readVInt();
/////////////////////////////////////////////////////////////////////////
1:                 in.skipBytes(Ints.checkedCast(hintSize - countingIn.getBytesRead()));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.util.Objects;
1: import java.util.UUID;
1: 
1: import javax.annotation.Nullable;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.db.UnknownColumnFamilyException;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.net.MessageOut;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.BytesReadTracker;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: /**
1:  * The message we use to dispatch and forward hints.
1:  *
1:  * Encodes the host id the hint is meant for and the hint itself.
1:  * We use the host id to determine whether we should store or apply the hint:
1:  * 1. If host id equals to the receiving node host id, then we apply the hint
1:  * 2. If host id is different from the receiving node's host id, then we store the hint
1:  *
1:  * Scenario (1) means that we are dealing with regular hint dispatch.
1:  * Scenario (2) means that we got a hint from a node that's going through decommissioning and is streaming its hints
1:  * elsewhere first.
1:  */
1: public final class HintMessage
1: {
1:     public static final IVersionedSerializer<HintMessage> serializer = new Serializer();
1: 
1:     final UUID hostId;
1: 
1:     @Nullable // can be null if we fail do decode the hint because of an unknown table id in it
1:     final Hint hint;
1: 
1:     @Nullable // will usually be null, unless a hint deserialization fails due to an unknown table id
1:     final UUID unknownTableID;
1: 
1:     HintMessage(UUID hostId, Hint hint)
1:     {
1:         this.hostId = hostId;
1:         this.hint = hint;
1:         this.unknownTableID = null;
1:     }
1: 
1:     HintMessage(UUID hostId, UUID unknownTableID)
1:     {
1:         this.hostId = hostId;
1:         this.hint = null;
1:         this.unknownTableID = unknownTableID;
1:     }
1: 
1:     public MessageOut<HintMessage> createMessageOut()
1:     {
1:         return new MessageOut<>(MessagingService.Verb.HINT, this, serializer);
1:     }
1: 
1:     public static class Serializer implements IVersionedSerializer<HintMessage>
1:     {
1:         public long serializedSize(HintMessage message, int version)
1:         {
0:             int size = (int) UUIDSerializer.serializer.serializedSize(message.hostId, version);
1: 
0:             int hintSize = (int) Hint.serializer.serializedSize(message.hint, version);
0:             size += TypeSizes.sizeof(hintSize);
1:             size += hintSize;
1: 
1:             return size;
1:         }
1: 
1:         public void serialize(HintMessage message, DataOutputPlus out, int version) throws IOException
1:         {
1:             Objects.requireNonNull(message.hint); // we should never *send* a HintMessage with null hint
1: 
1:             UUIDSerializer.serializer.serialize(message.hostId, out, version);
1: 
1:             /*
1:              * We are serializing the hint size so that the receiver of the message could gracefully handle
1:              * deserialize failure when a table had been dropped, by simply skipping the unread bytes.
1:              */
0:             out.writeInt((int) Hint.serializer.serializedSize(message.hint, version));
1: 
1:             Hint.serializer.serialize(message.hint, out, version);
1:         }
1: 
1:         /*
1:          * It's not an exceptional scenario to have a hints file streamed that have partition updates for tables
1:          * that don't exist anymore. We want to handle that case gracefully instead of dropping the connection for every
1:          * one of them.
1:          */
1:         public HintMessage deserialize(DataInputPlus in, int version) throws IOException
1:         {
1:             UUID hostId = UUIDSerializer.serializer.deserialize(in, version);
1: 
0:             int hintSize = in.readInt();
0:             BytesReadTracker countingIn = new BytesReadTracker(in);
1:             try
1:             {
1:                 return new HintMessage(hostId, Hint.serializer.deserialize(countingIn, version));
1:             }
1:             catch (UnknownColumnFamilyException e)
1:             {
0:                 in.skipBytes(hintSize - (int) countingIn.getBytesRead());
1:                 return new HintMessage(hostId, e.cfId);
1:             }
1:         }
1:     }
1: }
============================================================================