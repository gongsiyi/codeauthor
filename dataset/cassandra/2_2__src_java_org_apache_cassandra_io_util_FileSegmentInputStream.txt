1:ce63ccc: /*
1:ce63ccc:  * Licensed to the Apache Software Foundation (ASF) under one
1:ce63ccc:  * or more contributor license agreements.  See the NOTICE file
1:ce63ccc:  * distributed with this work for additional information
1:ce63ccc:  * regarding copyright ownership.  The ASF licenses this file
1:ce63ccc:  * to you under the Apache License, Version 2.0 (the
1:ce63ccc:  * "License"); you may not use this file except in compliance
1:ce63ccc:  * with the License.  You may obtain a copy of the License at
1:ce63ccc:  *
1:ce63ccc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ce63ccc:  *
1:ce63ccc:  * Unless required by applicable law or agreed to in writing, software
1:ce63ccc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce63ccc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce63ccc:  * See the License for the specific language governing permissions and
1:ce63ccc:  * limitations under the License.
1:ce63ccc:  */
1:ce63ccc: 
1:ce63ccc: package org.apache.cassandra.io.util;
1:ce63ccc: 
1:ce63ccc: import java.nio.ByteBuffer;
1:ce63ccc: 
1:ce63ccc: /**
1:ce63ccc:  * This is the same as DataInputBuffer, i.e. a stream for a fixed byte buffer,
1:ce63ccc:  * except that we also implement FileDataInput by using an offset and a file path.
1:ce63ccc:  */
1:ce63ccc: public class FileSegmentInputStream extends DataInputBuffer implements FileDataInput
1:ce63ccc: {
1:ce63ccc:     private final String filePath;
1:ce63ccc:     private final long offset;
1:ce63ccc: 
1:ce63ccc:     public FileSegmentInputStream(ByteBuffer buffer, String filePath, long offset)
1:ce63ccc:     {
1:ce63ccc:         super(buffer, false);
1:ce63ccc:         this.filePath = filePath;
1:ce63ccc:         this.offset = offset;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public String getPath()
1:ce63ccc:     {
1:ce63ccc:         return filePath;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     private long size()
1:ce63ccc:     {
1:ce63ccc:         return offset + buffer.capacity();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public boolean isEOF()
1:ce63ccc:     {
1:ce63ccc:         return !buffer.hasRemaining();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public long bytesRemaining()
1:ce63ccc:     {
1:ce63ccc:         return buffer.remaining();
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public void seek(long pos)
1:ce63ccc:     {
1:ce63ccc:         if (pos < 0 || pos > size())
1:ce63ccc:             throw new IllegalArgumentException(String.format("Unable to seek to position %d in %s (%d bytes) in partial mode",
1:ce63ccc:                                                              pos,
1:ce63ccc:                                                              getPath(),
1:ce63ccc:                                                              size()));
1:ce63ccc: 
1:ce63ccc: 
1:ce63ccc:         buffer.position((int) (pos - offset));
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     @Override
1:ce63ccc:     public boolean markSupported()
1:ce63ccc:     {
1:ce63ccc:         return false;
1:ce63ccc:     }
1:ce63ccc: 
1:e8651b6:     public DataPosition mark()
1:ce63ccc:     {
1:ce63ccc:         throw new UnsupportedOperationException();
1:ce63ccc:     }
1:ce63ccc: 
1:e8651b6:     public void reset(DataPosition mark)
1:ce63ccc:     {
1:ce63ccc:         throw new UnsupportedOperationException();
1:ce63ccc:     }
1:ce63ccc: 
1:e8651b6:     public long bytesPastMark(DataPosition mark)
1:ce63ccc:     {
1:ce63ccc:         return 0;
1:ce63ccc:     }
1:ce63ccc: 
1:ce63ccc:     public long getFilePointer()
1:ce63ccc:     {
1:ce63ccc:         return offset + buffer.position();
1:ce63ccc:     }
1:ce63ccc: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1:     public DataPosition mark()
1:     public void reset(DataPosition mark)
1:     public long bytesPastMark(DataPosition mark)
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:ce63ccc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: 
1: /**
1:  * This is the same as DataInputBuffer, i.e. a stream for a fixed byte buffer,
1:  * except that we also implement FileDataInput by using an offset and a file path.
1:  */
1: public class FileSegmentInputStream extends DataInputBuffer implements FileDataInput
1: {
1:     private final String filePath;
1:     private final long offset;
1: 
1:     public FileSegmentInputStream(ByteBuffer buffer, String filePath, long offset)
1:     {
1:         super(buffer, false);
1:         this.filePath = filePath;
1:         this.offset = offset;
1:     }
1: 
1:     public String getPath()
1:     {
1:         return filePath;
1:     }
1: 
1:     private long size()
1:     {
1:         return offset + buffer.capacity();
1:     }
1: 
1:     public boolean isEOF()
1:     {
1:         return !buffer.hasRemaining();
1:     }
1: 
1:     public long bytesRemaining()
1:     {
1:         return buffer.remaining();
1:     }
1: 
1:     public void seek(long pos)
1:     {
1:         if (pos < 0 || pos > size())
1:             throw new IllegalArgumentException(String.format("Unable to seek to position %d in %s (%d bytes) in partial mode",
1:                                                              pos,
1:                                                              getPath(),
1:                                                              size()));
1: 
1: 
1:         buffer.position((int) (pos - offset));
1:     }
1: 
1:     @Override
1:     public boolean markSupported()
1:     {
1:         return false;
1:     }
1: 
0:     public FileMark mark()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public void reset(FileMark mark)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public long bytesPastMark(FileMark mark)
1:     {
1:         return 0;
1:     }
1: 
1:     public long getFilePointer()
1:     {
1:         return offset + buffer.position();
1:     }
1: }
============================================================================