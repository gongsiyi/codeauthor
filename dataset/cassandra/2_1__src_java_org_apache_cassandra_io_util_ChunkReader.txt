1:30bb255: /*
1:30bb255:  * Licensed to the Apache Software Foundation (ASF) under one
1:30bb255:  * or more contributor license agreements.  See the NOTICE file
1:30bb255:  * distributed with this work for additional information
1:30bb255:  * regarding copyright ownership.  The ASF licenses this file
1:30bb255:  * to you under the Apache License, Version 2.0 (the
1:30bb255:  * "License"); you may not use this file except in compliance
1:30bb255:  * with the License.  You may obtain a copy of the License at
1:30bb255:  *
1:30bb255:  *     http://www.apache.org/licenses/LICENSE-2.0
1:30bb255:  *
1:30bb255:  * Unless required by applicable law or agreed to in writing, software
1:30bb255:  * distributed under the License is distributed on an "AS IS" BASIS,
1:30bb255:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:30bb255:  * See the License for the specific language governing permissions and
1:30bb255:  * limitations under the License.
2:30bb255:  */
2:30bb255: 
1:30bb255: package org.apache.cassandra.io.util;
1:30bb255: 
1:30bb255: import java.nio.ByteBuffer;
1:30bb255: 
1:30bb255: import org.apache.cassandra.io.compress.BufferType;
1:30bb255: 
2:30bb255: /**
1:30bb255:  * RandomFileReader component that reads data from a file into a provided buffer and may have requirements over the
1:30bb255:  * size and alignment of reads.
1:30bb255:  * A caching or buffer-managing rebufferer will reference one of these to do the actual reading.
1:30bb255:  * Note: Implementations of this interface must be thread-safe!
1:30bb255:  */
1:30bb255: public interface ChunkReader extends RebuffererFactory
1:30bb255: {
1:30bb255:     /**
1:30bb255:      * Read the chunk at the given position, attempting to fill the capacity of the given buffer.
1:30bb255:      * The filled buffer must be positioned at 0, with limit set at the size of the available data.
1:30bb255:      * The source may have requirements for the positioning and/or size of the buffer (e.g. chunk-aligned and
1:30bb255:      * chunk-sized). These must be satisfied by the caller. 
1:30bb255:      */
1:30bb255:     void readChunk(long position, ByteBuffer buffer);
1:30bb255: 
1:30bb255:     /**
1:30bb255:      * Buffer size required for this rebufferer. Must be power of 2 if alignment is required.
1:30bb255:      */
1:30bb255:     int chunkSize();
1:30bb255: 
1:30bb255:     /**
1:30bb255:      * Specifies type of buffer the caller should attempt to give.
1:30bb255:      * This is not guaranteed to be fulfilled.
1:30bb255:      */
1:30bb255:     BufferType preferredBufferType();
1:30bb255: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.io.compress.BufferType;
1: 
1: /**
1:  * RandomFileReader component that reads data from a file into a provided buffer and may have requirements over the
1:  * size and alignment of reads.
1:  * A caching or buffer-managing rebufferer will reference one of these to do the actual reading.
1:  * Note: Implementations of this interface must be thread-safe!
1:  */
1: public interface ChunkReader extends RebuffererFactory
1: {
1:     /**
1:      * Read the chunk at the given position, attempting to fill the capacity of the given buffer.
1:      * The filled buffer must be positioned at 0, with limit set at the size of the available data.
1:      * The source may have requirements for the positioning and/or size of the buffer (e.g. chunk-aligned and
1:      * chunk-sized). These must be satisfied by the caller. 
1:      */
1:     void readChunk(long position, ByteBuffer buffer);
1: 
1:     /**
1:      * Buffer size required for this rebufferer. Must be power of 2 if alignment is required.
1:      */
1:     int chunkSize();
1: 
1:     /**
0:      * If true, positions passed to this rebufferer must be aligned to chunkSize.
1:      */
0:     boolean alignmentRequired();
1: 
1:     /**
1:      * Specifies type of buffer the caller should attempt to give.
1:      * This is not guaranteed to be fulfilled.
1:      */
1:     BufferType preferredBufferType();
1: }
============================================================================