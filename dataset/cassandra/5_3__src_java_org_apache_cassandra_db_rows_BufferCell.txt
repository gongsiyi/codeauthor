1:2457599: /*
1:2457599:  * Licensed to the Apache Software Foundation (ASF) under one
1:2457599:  * or more contributor license agreements.  See the NOTICE file
1:2457599:  * distributed with this work for additional information
1:2457599:  * regarding copyright ownership.  The ASF licenses this file
1:2457599:  * to you under the Apache License, Version 2.0 (the
1:2457599:  * "License"); you may not use this file except in compliance
1:2457599:  * with the License.  You may obtain a copy of the License at
2:2457599:  *
1:2457599:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2457599:  *
1:2457599:  * Unless required by applicable law or agreed to in writing, software
1:2457599:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2457599:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2457599:  * See the License for the specific language governing permissions and
1:2457599:  * limitations under the License.
2:2457599:  */
1:2457599: package org.apache.cassandra.db.rows;
49:2457599: 
1:2457599: import java.nio.ByteBuffer;
1:2457599: 
1:2457599: import org.apache.cassandra.config.ColumnDefinition;
1:2457599: import org.apache.cassandra.db.marshal.ByteType;
1:2457599: import org.apache.cassandra.utils.ByteBufferUtil;
1:2457599: import org.apache.cassandra.utils.ObjectSizes;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:2457599: 
1:2457599: public class BufferCell extends AbstractCell
21:2457599: {
1:2457599:     private static final long EMPTY_SIZE = ObjectSizes.measure(new BufferCell(ColumnDefinition.regularDef("", "", "", ByteType.instance), 0L, 0, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER, null));
1:2457599: 
1:2457599:     private final long timestamp;
1:2457599:     private final int ttl;
1:2457599:     private final int localDeletionTime;
1:2457599: 
1:2457599:     private final ByteBuffer value;
1:2457599:     private final CellPath path;
1:2457599: 
1:2457599:     public BufferCell(ColumnDefinition column, long timestamp, int ttl, int localDeletionTime, ByteBuffer value, CellPath path)
1:2457599:     {
1:639d4b2:         super(column);
1:9659a38:         assert !column.isPrimaryKeyColumn();
1:2457599:         assert column.isComplex() == (path != null);
1:2457599:         this.timestamp = timestamp;
1:2457599:         this.ttl = ttl;
1:2457599:         this.localDeletionTime = localDeletionTime;
1:2457599:         this.value = value;
1:2457599:         this.path = path;
21:2457599:     }
1:2457599: 
1:e017f94:     public static BufferCell live(ColumnDefinition column, long timestamp, ByteBuffer value)
1:2457599:     {
1:e017f94:         return live(column, timestamp, value, null);
1:2457599:     }
1:2457599: 
1:e017f94:     public static BufferCell live(ColumnDefinition column, long timestamp, ByteBuffer value, CellPath path)
1:2457599:     {
1:2457599:         return new BufferCell(column, timestamp, NO_TTL, NO_DELETION_TIME, value, path);
1:2457599:     }
1:2457599: 
1:2457599:     public static BufferCell expiring(ColumnDefinition column, long timestamp, int ttl, int nowInSec, ByteBuffer value)
1:2457599:     {
1:2457599:         return expiring(column, timestamp, ttl, nowInSec, value, null);
1:2457599:     }
1:2457599: 
1:2457599:     public static BufferCell expiring(ColumnDefinition column, long timestamp, int ttl, int nowInSec, ByteBuffer value, CellPath path)
1:2457599:     {
1:2457599:         assert ttl != NO_TTL;
1:2457599:         return new BufferCell(column, timestamp, ttl, nowInSec + ttl, value, path);
1:2457599:     }
1:2457599: 
1:2457599:     public static BufferCell tombstone(ColumnDefinition column, long timestamp, int nowInSec)
1:2457599:     {
1:2457599:         return tombstone(column, timestamp, nowInSec, null);
1:2457599:     }
1:2457599: 
1:2457599:     public static BufferCell tombstone(ColumnDefinition column, long timestamp, int nowInSec, CellPath path)
1:2457599:     {
1:2457599:         return new BufferCell(column, timestamp, NO_TTL, nowInSec, ByteBufferUtil.EMPTY_BYTE_BUFFER, path);
1:2457599:     }
1:2457599: 
1:2457599:     public long timestamp()
1:2457599:     {
1:2457599:         return timestamp;
1:2457599:     }
1:2457599: 
1:2457599:     public int ttl()
1:2457599:     {
1:2457599:         return ttl;
1:2457599:     }
1:2457599: 
1:2457599:     public int localDeletionTime()
1:2457599:     {
1:2457599:         return localDeletionTime;
1:2457599:     }
1:2457599: 
1:2457599:     public ByteBuffer value()
1:2457599:     {
1:2457599:         return value;
1:2457599:     }
1:2457599: 
1:2457599:     public CellPath path()
1:2457599:     {
1:2457599:         return path;
1:2457599:     }
1:2457599: 
1:86ba227:     public Cell withUpdatedColumn(ColumnDefinition newColumn)
1:86ba227:     {
1:86ba227:         return new BufferCell(newColumn, timestamp, ttl, localDeletionTime, value, path);
1:86ba227:     }
1:86ba227: 
1:2457599:     public Cell withUpdatedValue(ByteBuffer newValue)
1:2457599:     {
1:2457599:         return new BufferCell(column, timestamp, ttl, localDeletionTime, newValue, path);
1:2457599:     }
1:2457599: 
1:2457599:     public Cell copy(AbstractAllocator allocator)
1:2457599:     {
1:2457599:         if (!value.hasRemaining())
3:2457599:             return this;
1:2457599: 
1:2457599:         return new BufferCell(column, timestamp, ttl, localDeletionTime, allocator.clone(value), path == null ? null : path.copy(allocator));
1:2457599:     }
1:2457599: 
1:2457599:     public long unsharedHeapSizeExcludingData()
1:2457599:     {
1:2457599:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(value) + (path == null ? 0 : path.unsharedHeapSizeExcludingData());
1:2457599:     }
1:2457599: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9659a38
/////////////////////////////////////////////////////////////////////////
1:         assert !column.isPrimaryKeyColumn();
commit:1f014b2
commit:e4c344c
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(Cell cell, ColumnDefinition column, DataOutputPlus out, LivenessInfo rowLiveness, SerializationHeader header) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             if (column.isComplex())
0:                 column.cellPathSerializer().serialize(cell.path(), out);
0:                 header.getType(column).writeValue(cell.value(), out);
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(Cell cell, ColumnDefinition column, LivenessInfo rowLiveness, SerializationHeader header)
/////////////////////////////////////////////////////////////////////////
0:             if (column.isComplex())
0:                 size += column.cellPathSerializer().serializedSize(cell.path());
0:                 size += header.getType(column).writtenLength(cell.value());
commit:a87fd71
commit:86ba227
/////////////////////////////////////////////////////////////////////////
1:     public Cell withUpdatedColumn(ColumnDefinition newColumn)
1:     {
1:         return new BufferCell(newColumn, timestamp, ttl, localDeletionTime, value, path);
1:     }
1: 
commit:1d7bacc
/////////////////////////////////////////////////////////////////////////
0:                 return BufferCell.tombstone(column, timestamp, localDeletionTime - ttl, path);
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
0:                 header.writeTimestamp(cell.timestamp(), out);
0:                 header.writeLocalDeletionTime(cell.localDeletionTime(), out);
0:                 header.writeTTL(cell.ttl(), out);
/////////////////////////////////////////////////////////////////////////
0:             long timestamp = useRowTimestamp ? rowLiveness.timestamp() : header.readTimestamp(in);
0:                                   : (isDeleted || isExpiring ? header.readLocalDeletionTime(in) : NO_DELETION_TIME);
0:             int ttl = useRowTTL ? rowLiveness.ttl() : (isExpiring ? header.readTTL(in) : NO_TTL);
/////////////////////////////////////////////////////////////////////////
0:                 size += header.timestampSerializedSize(cell.timestamp());
0:                 size += header.localDeletionTimeSerializedSize(cell.localDeletionTime());
0:                 size += header.ttlSerializedSize(cell.ttl());
/////////////////////////////////////////////////////////////////////////
0:                 header.skipTimestamp(in);
0:                 header.skipLocalDeletionTime(in);
0:                 header.skipTTL(in);
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.context.CounterContext;
1: import org.apache.cassandra.db.marshal.ByteType;
0: import org.apache.cassandra.io.util.DataInputPlus;
0: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.ObjectSizes;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
1: 
1: public class BufferCell extends AbstractCell
1: {
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new BufferCell(ColumnDefinition.regularDef("", "", "", ByteType.instance), 0L, 0, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER, null));
1: 
0:     private final ColumnDefinition column;
1: 
1:     private final long timestamp;
1:     private final int ttl;
1:     private final int localDeletionTime;
1: 
1:     private final ByteBuffer value;
1:     private final CellPath path;
1: 
1:     public BufferCell(ColumnDefinition column, long timestamp, int ttl, int localDeletionTime, ByteBuffer value, CellPath path)
1:     {
1:         assert column.isComplex() == (path != null);
0:         this.column = column;
1:         this.timestamp = timestamp;
1:         this.ttl = ttl;
1:         this.localDeletionTime = localDeletionTime;
1:         this.value = value;
1:         this.path = path;
1:     }
1: 
0:     public static BufferCell live(CFMetaData metadata, ColumnDefinition column, long timestamp, ByteBuffer value)
1:     {
0:         return live(metadata, column, timestamp, value, null);
1:     }
1: 
0:     public static BufferCell live(CFMetaData metadata, ColumnDefinition column, long timestamp, ByteBuffer value, CellPath path)
1:     {
0:         if (metadata.getDefaultTimeToLive() != NO_TTL)
0:             return expiring(column, timestamp, metadata.getDefaultTimeToLive(), FBUtilities.nowInSeconds(), value, path);
1: 
1:         return new BufferCell(column, timestamp, NO_TTL, NO_DELETION_TIME, value, path);
1:     }
1: 
1:     public static BufferCell expiring(ColumnDefinition column, long timestamp, int ttl, int nowInSec, ByteBuffer value)
1:     {
1:         return expiring(column, timestamp, ttl, nowInSec, value, null);
1:     }
1: 
1:     public static BufferCell expiring(ColumnDefinition column, long timestamp, int ttl, int nowInSec, ByteBuffer value, CellPath path)
1:     {
1:         assert ttl != NO_TTL;
1:         return new BufferCell(column, timestamp, ttl, nowInSec + ttl, value, path);
1:     }
1: 
1:     public static BufferCell tombstone(ColumnDefinition column, long timestamp, int nowInSec)
1:     {
1:         return tombstone(column, timestamp, nowInSec, null);
1:     }
1: 
1:     public static BufferCell tombstone(ColumnDefinition column, long timestamp, int nowInSec, CellPath path)
1:     {
1:         return new BufferCell(column, timestamp, NO_TTL, nowInSec, ByteBufferUtil.EMPTY_BYTE_BUFFER, path);
1:     }
1: 
0:     public ColumnDefinition column()
1:     {
0:         return column;
1:     }
1: 
0:     public boolean isCounterCell()
1:     {
0:         return !isTombstone() && column.cellValueType().isCounter();
1:     }
1: 
0:     public boolean isLive(int nowInSec)
1:     {
0:         return localDeletionTime == NO_DELETION_TIME || (ttl != NO_TTL && nowInSec < localDeletionTime);
1:     }
1: 
0:     public boolean isTombstone()
1:     {
0:         return localDeletionTime != NO_DELETION_TIME && ttl == NO_TTL;
1:     }
1: 
0:     public boolean isExpiring()
1:     {
0:         return ttl != NO_TTL;
1:     }
1: 
1:     public long timestamp()
1:     {
1:         return timestamp;
1:     }
1: 
1:     public int ttl()
1:     {
1:         return ttl;
1:     }
1: 
1:     public int localDeletionTime()
1:     {
1:         return localDeletionTime;
1:     }
1: 
1:     public ByteBuffer value()
1:     {
1:         return value;
1:     }
1: 
1:     public CellPath path()
1:     {
1:         return path;
1:     }
1: 
1:     public Cell withUpdatedValue(ByteBuffer newValue)
1:     {
1:         return new BufferCell(column, timestamp, ttl, localDeletionTime, newValue, path);
1:     }
1: 
1:     public Cell copy(AbstractAllocator allocator)
1:     {
1:         if (!value.hasRemaining())
1:             return this;
1: 
1:         return new BufferCell(column, timestamp, ttl, localDeletionTime, allocator.clone(value), path == null ? null : path.copy(allocator));
1:     }
1: 
0:     public Cell markCounterLocalToBeCleared()
1:     {
0:         if (!isCounterCell())
1:             return this;
1: 
0:         ByteBuffer marked = CounterContext.instance().markLocalToBeCleared(value());
0:         return marked == value() ? this : new BufferCell(column, timestamp, ttl, localDeletionTime, marked, path);
1:     }
1: 
0:     public Cell purge(DeletionPurger purger, int nowInSec)
1:     {
0:         if (!isLive(nowInSec))
1:         {
0:             if (purger.shouldPurge(timestamp, localDeletionTime))
0:                 return null;
1: 
0:             // We slightly hijack purging to convert expired but not purgeable columns to tombstones. The reason we do that is
0:             // that once a column has expired it is equivalent to a tombstone but actually using a tombstone is more compact since
0:             // we don't keep the column value. The reason we do it here is that 1) it's somewhat related to dealing with tombstones
0:             // so hopefully not too surprising and 2) we want to this and purging at the same places, so it's simpler/more efficient
0:             // to do both here.
0:             if (isExpiring())
1:             {
0:                 // Note that as long as the expiring column and the tombstone put together live longer than GC grace seconds,
0:                 // we'll fulfil our responsibility to repair. See discussion at
0:                 // http://cassandra-user-incubator-apache-org.3065146.n2.nabble.com/repair-compaction-and-tombstone-rows-td7583481.html
0:                 return BufferCell.tombstone(column, timestamp, localDeletionTime - ttl);
1:             }
1:         }
1:         return this;
1:     }
1: 
0:     public Cell updateAllTimestamp(long newTimestamp)
1:     {
0:         return new BufferCell(column, isTombstone() ? newTimestamp - 1 : newTimestamp, ttl, localDeletionTime, value, path);
1:     }
1: 
0:     public int dataSize()
1:     {
0:         return TypeSizes.sizeof(timestamp)
0:              + TypeSizes.sizeof(ttl)
0:              + TypeSizes.sizeof(localDeletionTime)
0:              + value.remaining()
0:              + (path == null ? 0 : path.dataSize());
1:     }
1: 
1:     public long unsharedHeapSizeExcludingData()
1:     {
1:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(value) + (path == null ? 0 : path.unsharedHeapSizeExcludingData());
1:     }
1: 
0:     /**
0:      * The serialization format for cell is:
0:      *     [ flags ][ timestamp ][ deletion time ][    ttl    ][ path size ][ path ][ value size ][ value ]
0:      *     [   1b  ][ 8b (vint) ][   4b (vint)   ][ 4b (vint) ][ 4b (vint) ][  arb ][  4b (vint) ][  arb  ]
1:      *
0:      * where not all field are always present (in fact, only the [ flags ] are guaranteed to be present). The fields have the following
0:      * meaning:
0:      *   - [ flags ] is the cell flags. It is a byte for which each bit represents a flag whose meaning is explained below (*_MASK constants)
0:      *   - [ timestamp ] is the cell timestamp. Present unless the cell has the USE_TIMESTAMP_MASK.
0:      *   - [ deletion time]: the local deletion time for the cell. Present if either the cell is deleted (IS_DELETED_MASK)
0:      *       or it is expiring (IS_EXPIRING_MASK) but doesn't have the USE_ROW_TTL_MASK.
0:      *   - [ ttl ]: the ttl for the cell. Present if the row is expiring (IS_EXPIRING_MASK) but doesn't have the
0:      *       USE_ROW_TTL_MASK.
0:      *   - [ value size ] is the size of the [ value ] field. It's present unless either the cell has the HAS_EMPTY_VALUE_MASK, or the value
0:      *       for columns of this type have a fixed length.
0:      *   - [ path size ] is the size of the [ path ] field. Present iff this is the cell of a complex column.
0:      *   - [ value ]: the cell value, unless it has the HAS_EMPTY_VALUE_MASK.
0:      *   - [ path ]: the cell path if the column this is a cell of is complex.
1:      */
0:     static class Serializer implements Cell.Serializer
1:     {
0:         private final static int PRESENCE_MASK               = 0x01; // Marks the actual presence of a cell. This is used only when serialized on-disk and
0:                                                                      // on-wire (i.e. an actual ByteBufferBackedCell instance cannot have this flag set).
0:         private final static int IS_DELETED_MASK             = 0x02; // Whether the cell is a tombstone or not.
0:         private final static int IS_EXPIRING_MASK            = 0x04; // Whether the cell is expiring.
0:         private final static int HAS_EMPTY_VALUE_MASK        = 0x08; // Wether the cell has an empty value. This will be the case for tombstone in particular.
0:         private final static int USE_ROW_TIMESTAMP_MASK      = 0x10; // Wether the cell has the same timestamp than the row this is a cell of.
0:         private final static int USE_ROW_TTL_MASK            = 0x20; // Wether the cell has the same ttl than the row this is a cell of.
1: 
0:         public void serialize(Cell cell, DataOutputPlus out, LivenessInfo rowLiveness, SerializationHeader header) throws IOException
1:         {
0:             if (cell == null)
1:             {
0:                 out.writeByte((byte)0);
0:                 return;
1:             }
1: 
0:             boolean hasValue = cell.value().hasRemaining();
0:             boolean isDeleted = cell.isTombstone();
0:             boolean isExpiring = cell.isExpiring();
0:             boolean useRowTimestamp = !rowLiveness.isEmpty() && cell.timestamp() == rowLiveness.timestamp();
0:             boolean useRowTTL = isExpiring && rowLiveness.isExpiring() && cell.ttl() == rowLiveness.ttl() && cell.localDeletionTime() == rowLiveness.localExpirationTime();
0:             int flags = PRESENCE_MASK;
0:             if (!hasValue)
0:                 flags |= HAS_EMPTY_VALUE_MASK;
1: 
0:             if (isDeleted)
0:                 flags |= IS_DELETED_MASK;
0:             else if (isExpiring)
0:                 flags |= IS_EXPIRING_MASK;
1: 
0:             if (useRowTimestamp)
0:                 flags |= USE_ROW_TIMESTAMP_MASK;
0:             if (useRowTTL)
0:                 flags |= USE_ROW_TTL_MASK;
1: 
0:             out.writeByte((byte)flags);
1: 
0:             if (!useRowTimestamp)
0:                 out.writeVInt(header.encodeTimestamp(cell.timestamp()));
1: 
0:             if ((isDeleted || isExpiring) && !useRowTTL)
0:                 out.writeVInt(header.encodeDeletionTime(cell.localDeletionTime()));
0:             if (isExpiring && !useRowTTL)
0:                 out.writeVInt(header.encodeTTL(cell.ttl()));
1: 
0:             if (cell.column().isComplex())
0:                 cell.column().cellPathSerializer().serialize(cell.path(), out);
1: 
0:             if (hasValue)
0:                 header.getType(cell.column()).writeValue(cell.value(), out);
1:         }
1: 
0:         public Cell deserialize(DataInputPlus in, LivenessInfo rowLiveness, ColumnDefinition column, SerializationHeader header, SerializationHelper helper) throws IOException
1:         {
0:             int flags = in.readUnsignedByte();
0:             if ((flags & PRESENCE_MASK) == 0)
0:                 return null;
1: 
0:             boolean hasValue = (flags & HAS_EMPTY_VALUE_MASK) == 0;
0:             boolean isDeleted = (flags & IS_DELETED_MASK) != 0;
0:             boolean isExpiring = (flags & IS_EXPIRING_MASK) != 0;
0:             boolean useRowTimestamp = (flags & USE_ROW_TIMESTAMP_MASK) != 0;
0:             boolean useRowTTL = (flags & USE_ROW_TTL_MASK) != 0;
1: 
0:             long timestamp = useRowTimestamp ? rowLiveness.timestamp() : header.decodeTimestamp(in.readVInt());
1: 
0:             int localDeletionTime = useRowTTL
0:                                   ? rowLiveness.localExpirationTime()
0:                                   : (isDeleted || isExpiring ? header.decodeDeletionTime((int)in.readVInt()) : NO_DELETION_TIME);
1: 
0:             int ttl = useRowTTL
0:                     ? rowLiveness.ttl()
0:                     : (isExpiring ? header.decodeTTL((int)in.readVInt()) : NO_TTL);
1: 
0:             CellPath path = column.isComplex()
0:                           ? column.cellPathSerializer().deserialize(in)
0:                           : null;
1: 
0:             boolean isCounter = localDeletionTime == NO_DELETION_TIME && column.type.isCounter();
1: 
0:             ByteBuffer value = ByteBufferUtil.EMPTY_BYTE_BUFFER;
0:             if (hasValue)
1:             {
0:                 if (helper.canSkipValue(column) || (path != null && helper.canSkipValue(path)))
1:                 {
0:                     header.getType(column).skipValue(in);
1:                 }
0:                 else
1:                 {
0:                     value = header.getType(column).readValue(in);
0:                     if (isCounter)
0:                         value = helper.maybeClearCounterValue(value);
1:                 }
1:             }
1: 
0:             return new BufferCell(column, timestamp, ttl, localDeletionTime, value, path);
1:         }
1: 
0:         public long serializedSize(Cell cell, LivenessInfo rowLiveness, SerializationHeader header)
1:         {
0:             long size = 1; // flags
1: 
0:             if (cell == null)
0:                 return size;
1: 
0:             boolean hasValue = cell.value().hasRemaining();
0:             boolean isDeleted = cell.isTombstone();
0:             boolean isExpiring = cell.isExpiring();
0:             boolean useRowTimestamp = !rowLiveness.isEmpty() && cell.timestamp() == rowLiveness.timestamp();
0:             boolean useRowTTL = isExpiring && rowLiveness.isExpiring() && cell.ttl() == rowLiveness.ttl() && cell.localDeletionTime() == rowLiveness.localExpirationTime();
1: 
0:             if (!useRowTimestamp)
0:                 size += TypeSizes.sizeofVInt(header.encodeTimestamp(cell.timestamp()));
1: 
0:             if ((isDeleted || isExpiring) && !useRowTTL)
0:                 size += TypeSizes.sizeofVInt(header.encodeDeletionTime(cell.localDeletionTime()));
0:             if (isExpiring && !useRowTTL)
0:                 size += TypeSizes.sizeofVInt(header.encodeTTL(cell.ttl()));
1: 
0:             if (cell.column().isComplex())
0:                 size += cell.column().cellPathSerializer().serializedSize(cell.path());
1: 
0:             if (hasValue)
0:                 size += header.getType(cell.column()).writtenLength(cell.value());
1: 
0:             return size;
1:         }
1: 
0:         // Returns if the skipped cell was an actual cell (i.e. it had its presence flag).
0:         public boolean skip(DataInputPlus in, ColumnDefinition column, SerializationHeader header) throws IOException
1:         {
0:             int flags = in.readUnsignedByte();
0:             if ((flags & PRESENCE_MASK) == 0)
0:                 return false;
1: 
0:             boolean hasValue = (flags & HAS_EMPTY_VALUE_MASK) == 0;
0:             boolean isDeleted = (flags & IS_DELETED_MASK) != 0;
0:             boolean isExpiring = (flags & IS_EXPIRING_MASK) != 0;
0:             boolean useRowTimestamp = (flags & USE_ROW_TIMESTAMP_MASK) != 0;
0:             boolean useRowTTL = (flags & USE_ROW_TTL_MASK) != 0;
1: 
0:             if (!useRowTimestamp)
0:                 in.readVInt();
1: 
0:             if (!useRowTTL && (isDeleted || isExpiring))
0:                 in.readVInt();
1: 
0:             if (!useRowTTL && isExpiring)
0:                 in.readVInt();
1: 
0:             if (column.isComplex())
0:                 column.cellPathSerializer().skip(in);
1: 
0:             if (hasValue)
0:                 header.getType(column).skipValue(in);
1: 
0:             return true;
1:         }
1:     }
1: }
author:Alex Petrov
-------------------------------------------------------------------------------
commit:57ead56
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.*;
/////////////////////////////////////////////////////////////////////////
0:                     value = header.getType(column).readValue(in, DatabaseDescriptor.getMaxValueSize());
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:e017f94
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static BufferCell live(ColumnDefinition column, long timestamp, ByteBuffer value)
1:         return live(column, timestamp, value, null);
1:     public static BufferCell live(ColumnDefinition column, long timestamp, ByteBuffer value, CellPath path)
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0d74c3e
/////////////////////////////////////////////////////////////////////////
0:         private final static int IS_DELETED_MASK             = 0x01; // Whether the cell is a tombstone or not.
0:         private final static int IS_EXPIRING_MASK            = 0x02; // Whether the cell is expiring.
0:         private final static int HAS_EMPTY_VALUE_MASK        = 0x04; // Wether the cell has an empty value. This will be the case for tombstone in particular.
0:         private final static int USE_ROW_TIMESTAMP_MASK      = 0x08; // Wether the cell has the same timestamp than the row this is a cell of.
0:         private final static int USE_ROW_TTL_MASK            = 0x10; // Wether the cell has the same ttl than the row this is a cell of.
0:             assert cell != null;
0:             int flags = 0;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super(column);
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
0:         if (metadata.params.defaultTimeToLive != NO_TTL)
0:             return expiring(column, timestamp, metadata.params.defaultTimeToLive, FBUtilities.nowInSeconds(), value, path);
============================================================================