1:3bdcaa3: /*
1:3bdcaa3:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bdcaa3:  * or more contributor license agreements.  See the NOTICE file
1:3bdcaa3:  * distributed with this work for additional information
1:3bdcaa3:  * regarding copyright ownership.  The ASF licenses this file
1:3bdcaa3:  * to you under the Apache License, Version 2.0 (the
1:3bdcaa3:  * "License"); you may not use this file except in compliance
1:3bdcaa3:  * with the License.  You may obtain a copy of the License at
1:3bdcaa3:  *
1:3bdcaa3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3bdcaa3:  *
1:3bdcaa3:  * Unless required by applicable law or agreed to in writing, software
1:3bdcaa3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3bdcaa3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3bdcaa3:  * See the License for the specific language governing permissions and
1:3bdcaa3:  * limitations under the License.
1:3bdcaa3:  */
2:3bdcaa3: 
1:3bdcaa3: package org.apache.cassandra.cql3;
1:3bdcaa3: 
1:3bdcaa3: import java.util.ArrayList;
1:3bdcaa3: import java.util.List;
1:3bdcaa3: import java.util.Map;
1:3bdcaa3: import java.util.concurrent.ConcurrentHashMap;
1:3bdcaa3: import java.util.concurrent.CyclicBarrier;
1:3bdcaa3: 
1:3bdcaa3: import org.junit.After;
1:3bdcaa3: import org.junit.Before;
1:3bdcaa3: import org.junit.BeforeClass;
1:3bdcaa3: import org.junit.Test;
1:3bdcaa3: 
1:3bdcaa3: import com.datastax.driver.core.Row;
1:3bdcaa3: import com.datastax.driver.core.exceptions.NoHostAvailableException;
1:3bdcaa3: import com.datastax.driver.core.exceptions.WriteTimeoutException;
1:53a177a: import org.apache.cassandra.batchlog.BatchlogManager;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:3bdcaa3: import org.apache.cassandra.utils.WrappedRunnable;
1:3bdcaa3: 
1:a3a8dbc: public class ViewLongTest extends CQLTester
2:3bdcaa3: {
1:e0adc16:     ProtocolVersion protocolVersion = ProtocolVersion.V4;
1:a3a8dbc:     private final List<String> views = new ArrayList<>();
1:3bdcaa3: 
1:3bdcaa3:     @BeforeClass
1:3bdcaa3:     public static void startup()
1:3bdcaa3:     {
1:3bdcaa3:         requireNetwork();
2:3bdcaa3:     }
1:3bdcaa3:     @Before
1:3bdcaa3:     public void begin()
1:3bdcaa3:     {
1:a3a8dbc:         views.clear();
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     @After
1:3bdcaa3:     public void end() throws Throwable
1:3bdcaa3:     {
1:a3a8dbc:         for (String viewName : views)
1:3bdcaa3:             executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + viewName);
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     private void createView(String name, String query) throws Throwable
1:3bdcaa3:     {
1:3bdcaa3:         executeNet(protocolVersion, String.format(query, name));
1:3bdcaa3:         // If exception is thrown, the view will not be added to the list; since it shouldn't have been created, this is
1:3bdcaa3:         // the desired behavior
1:a3a8dbc:         views.add(name);
1:3bdcaa3:     }
1:3bdcaa3: 
1:3bdcaa3:     @Test
1:3bdcaa3:     public void testConflictResolution() throws Throwable
1:3bdcaa3:     {
1:3bdcaa3:         final int writers = 96;
1:3bdcaa3:         final int insertsPerWriter = 50;
1:3bdcaa3:         final Map<Integer, Exception> failedWrites = new ConcurrentHashMap<>();
1:3bdcaa3: 
1:3bdcaa3:         createTable("CREATE TABLE %s (" +
1:3bdcaa3:                     "a int," +
1:3bdcaa3:                     "b int," +
1:3bdcaa3:                     "c int," +
1:3bdcaa3:                     "PRIMARY KEY (a, b))");
1:3bdcaa3: 
1:3bdcaa3:         executeNet(protocolVersion, "USE " + keyspace());
1:3bdcaa3: 
1:3bdcaa3:         createView("mv", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE c IS NOT NULL AND a IS NOT NULL AND b IS NOT NULL PRIMARY KEY (c, a, b)");
1:3bdcaa3: 
1:3bdcaa3:         CyclicBarrier semaphore = new CyclicBarrier(writers);
1:3bdcaa3: 
1:3bdcaa3:         Thread[] threads = new Thread[writers];
1:3bdcaa3:         for (int i = 0; i < writers; i++)
1:3bdcaa3:         {
1:3bdcaa3:             final int writer = i;
1:3bdcaa3:             Thread t = new Thread(new WrappedRunnable()
1:3bdcaa3:             {
1:3bdcaa3:                 public void runMayThrow()
1:3bdcaa3:                 {
1:3bdcaa3:                     try
1:3bdcaa3:                     {
1:3bdcaa3:                         int writerOffset = writer * insertsPerWriter;
1:3bdcaa3:                         semaphore.await();
1:3bdcaa3:                         for (int i = 0; i < insertsPerWriter; i++)
1:3bdcaa3:                         {
1:3bdcaa3:                             try
1:3bdcaa3:                             {
1:f00a3da:                                 executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP 1",
1:3bdcaa3:                                            1,
1:3bdcaa3:                                            1,
1:3bdcaa3:                                            i + writerOffset);
1:3bdcaa3:                             }
1:3bdcaa3:                             catch (NoHostAvailableException|WriteTimeoutException e)
1:3bdcaa3:                             {
1:3bdcaa3:                                 failedWrites.put(i + writerOffset, e);
1:3bdcaa3:                             }
1:3bdcaa3:                         }
1:3bdcaa3:                     }
1:3bdcaa3:                     catch (Throwable e)
1:3bdcaa3:                     {
1:3bdcaa3:                         throw new RuntimeException(e);
1:3bdcaa3:                     }
1:3bdcaa3:                 }
1:3bdcaa3:             });
1:3bdcaa3:             t.start();
1:3bdcaa3:             threads[i] = t;
1:3bdcaa3:         }
1:3bdcaa3: 
1:3bdcaa3:         for (int i = 0; i < writers; i++)
1:3bdcaa3:             threads[i].join();
1:3bdcaa3: 
1:3bdcaa3:         for (int i = 0; i < writers * insertsPerWriter; i++)
1:3bdcaa3:         {
1:3bdcaa3:             if (executeNet(protocolVersion, "SELECT COUNT(*) FROM system.batchlog").one().getLong(0) == 0)
1:3bdcaa3:                 break;
1:3bdcaa3:             try
1:3bdcaa3:             {
1:a3a8dbc:                 // This will throw exceptions whenever there are exceptions trying to push the view values out, caused
1:a3a8dbc:                 // by the view becoming overwhelmed.
1:3bdcaa3:                 BatchlogManager.instance.startBatchlogReplay().get();
1:3bdcaa3:             }
1:3bdcaa3:             catch (Throwable ignore)
1:3bdcaa3:             {
1:3bdcaa3: 
1:3bdcaa3:             }
1:3bdcaa3:         }
1:3bdcaa3: 
1:3bdcaa3:         int value = executeNet(protocolVersion, "SELECT c FROM %s WHERE a = 1 AND b = 1").one().getInt("c");
1:3bdcaa3: 
1:3bdcaa3:         List<Row> rows = executeNet(protocolVersion, "SELECT c FROM " + keyspace() + ".mv").all();
1:3bdcaa3: 
1:3bdcaa3:         boolean containsC = false;
1:3bdcaa3:         StringBuilder others = new StringBuilder();
1:3bdcaa3:         StringBuilder overlappingFailedWrites = new StringBuilder();
1:3bdcaa3:         for (Row row : rows)
1:3bdcaa3:         {
1:3bdcaa3:             int c = row.getInt("c");
1:3bdcaa3:             if (c == value)
1:3bdcaa3:                 containsC = true;
1:3bdcaa3:             else
1:3bdcaa3:             {
1:3bdcaa3:                 if (others.length() != 0)
1:3bdcaa3:                     others.append(' ');
1:3bdcaa3:                 others.append(c);
1:3bdcaa3:                 if (failedWrites.containsKey(c))
1:3bdcaa3:                 {
1:3bdcaa3:                     if (overlappingFailedWrites.length() != 0)
1:3bdcaa3:                         overlappingFailedWrites.append(' ');
1:3bdcaa3:                     overlappingFailedWrites.append(c)
1:3bdcaa3:                                            .append(':')
1:3bdcaa3:                                            .append(failedWrites.get(c).getMessage());
1:3bdcaa3:                 }
1:3bdcaa3:             }
1:3bdcaa3:         }
1:3bdcaa3: 
1:3bdcaa3:         if (rows.size() > 1)
1:3bdcaa3:         {
1:3bdcaa3:             throw new AssertionError(String.format("Expected 1 row, but found %d; %s c = %d, and (%s) of which (%s) failed to insert", rows.size(), containsC ? "found row with" : "no rows contained", value, others, overlappingFailedWrites));
1:3bdcaa3:         }
1:3bdcaa3:         else if (rows.isEmpty())
1:3bdcaa3:         {
1:3bdcaa3:             throw new AssertionError(String.format("Could not find row with c = %d", value));
1:3bdcaa3:         }
1:3bdcaa3:         else if (rows.size() == 1 && !containsC)
1:3bdcaa3:         {
1:3bdcaa3:             throw new AssertionError(String.format("Single row had c = %d, expected %d", rows.get(0).getInt("c"), value));
1:3bdcaa3:         }
1:3bdcaa3:     }
1:3bdcaa3: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
1:     ProtocolVersion protocolVersion = ProtocolVersion.V4;
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.batchlog.BatchlogManager;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: public class ViewLongTest extends CQLTester
1:     private final List<String> views = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:         views.clear();
1:         for (String viewName : views)
/////////////////////////////////////////////////////////////////////////
1:         views.add(name);
/////////////////////////////////////////////////////////////////////////
1:                 // This will throw exceptions whenever there are exceptions trying to push the view values out, caused
1:                 // by the view becoming overwhelmed.
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CyclicBarrier;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.Row;
1: import com.datastax.driver.core.exceptions.NoHostAvailableException;
1: import com.datastax.driver.core.exceptions.WriteTimeoutException;
0: import org.apache.cassandra.concurrent.SEPExecutor;
0: import org.apache.cassandra.concurrent.Stage;
0: import org.apache.cassandra.concurrent.StageManager;
0: import org.apache.cassandra.db.BatchlogManager;
1: import org.apache.cassandra.utils.WrappedRunnable;
1: 
0: public class MaterializedViewLongTest extends CQLTester
1: {
0:     int protocolVersion = 4;
0:     private final List<String> materializedViews = new ArrayList<>();
1: 
1:     @BeforeClass
1:     public static void startup()
1:     {
1:         requireNetwork();
1:     }
1:     @Before
1:     public void begin()
1:     {
0:         materializedViews.clear();
1:     }
1: 
1:     @After
1:     public void end() throws Throwable
1:     {
0:         for (String viewName : materializedViews)
1:             executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + viewName);
1:     }
1: 
1:     private void createView(String name, String query) throws Throwable
1:     {
1:         executeNet(protocolVersion, String.format(query, name));
1:         // If exception is thrown, the view will not be added to the list; since it shouldn't have been created, this is
1:         // the desired behavior
0:         materializedViews.add(name);
1:     }
1: 
1:     @Test
1:     public void testConflictResolution() throws Throwable
1:     {
1:         final int writers = 96;
1:         final int insertsPerWriter = 50;
1:         final Map<Integer, Exception> failedWrites = new ConcurrentHashMap<>();
1: 
1:         createTable("CREATE TABLE %s (" +
1:                     "a int," +
1:                     "b int," +
1:                     "c int," +
1:                     "PRIMARY KEY (a, b))");
1: 
1:         executeNet(protocolVersion, "USE " + keyspace());
1: 
1:         createView("mv", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE c IS NOT NULL AND a IS NOT NULL AND b IS NOT NULL PRIMARY KEY (c, a, b)");
1: 
1:         CyclicBarrier semaphore = new CyclicBarrier(writers);
1: 
1:         Thread[] threads = new Thread[writers];
1:         for (int i = 0; i < writers; i++)
1:         {
1:             final int writer = i;
1:             Thread t = new Thread(new WrappedRunnable()
1:             {
1:                 public void runMayThrow()
1:                 {
1:                     try
1:                     {
1:                         int writerOffset = writer * insertsPerWriter;
1:                         semaphore.await();
1:                         for (int i = 0; i < insertsPerWriter; i++)
1:                         {
1:                             try
1:                             {
0:                                 executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",
1:                                            1,
1:                                            1,
1:                                            i + writerOffset);
1:                             }
1:                             catch (NoHostAvailableException|WriteTimeoutException e)
1:                             {
1:                                 failedWrites.put(i + writerOffset, e);
1:                             }
1:                         }
1:                     }
1:                     catch (Throwable e)
1:                     {
1:                         throw new RuntimeException(e);
1:                     }
1:                 }
1:             });
1:             t.start();
1:             threads[i] = t;
1:         }
1: 
1:         for (int i = 0; i < writers; i++)
1:             threads[i].join();
1: 
1:         for (int i = 0; i < writers * insertsPerWriter; i++)
1:         {
1:             if (executeNet(protocolVersion, "SELECT COUNT(*) FROM system.batchlog").one().getLong(0) == 0)
1:                 break;
1:             try
1:             {
0:                 // This will throw exceptions whenever there are exceptions trying to push the materialized view values
0:                 // out, caused by the view becoming overwhelmed.
1:                 BatchlogManager.instance.startBatchlogReplay().get();
1:             }
1:             catch (Throwable ignore)
1:             {
1: 
1:             }
1:         }
1: 
0:         while (!(((SEPExecutor) StageManager.getStage(Stage.MATERIALIZED_VIEW_MUTATION)).getPendingTasks() == 0
0:                  && ((SEPExecutor) StageManager.getStage(Stage.MATERIALIZED_VIEW_MUTATION)).getActiveCount() == 0))
1:         {
0:             Thread.sleep(1);
1:         }
1: 
1:         int value = executeNet(protocolVersion, "SELECT c FROM %s WHERE a = 1 AND b = 1").one().getInt("c");
1: 
1:         List<Row> rows = executeNet(protocolVersion, "SELECT c FROM " + keyspace() + ".mv").all();
1: 
1:         boolean containsC = false;
1:         StringBuilder others = new StringBuilder();
1:         StringBuilder overlappingFailedWrites = new StringBuilder();
1:         for (Row row : rows)
1:         {
1:             int c = row.getInt("c");
1:             if (c == value)
1:                 containsC = true;
1:             else
1:             {
1:                 if (others.length() != 0)
1:                     others.append(' ');
1:                 others.append(c);
1:                 if (failedWrites.containsKey(c))
1:                 {
1:                     if (overlappingFailedWrites.length() != 0)
1:                         overlappingFailedWrites.append(' ');
1:                     overlappingFailedWrites.append(c)
1:                                            .append(':')
1:                                            .append(failedWrites.get(c).getMessage());
1:                 }
1:             }
1:         }
1: 
1:         if (rows.size() > 1)
1:         {
1:             throw new AssertionError(String.format("Expected 1 row, but found %d; %s c = %d, and (%s) of which (%s) failed to insert", rows.size(), containsC ? "found row with" : "no rows contained", value, others, overlappingFailedWrites));
1:         }
1:         else if (rows.isEmpty())
1:         {
1:             throw new AssertionError(String.format("Could not find row with c = %d", value));
1:         }
1:         else if (rows.size() == 1 && !containsC)
1:         {
1:             throw new AssertionError(String.format("Single row had c = %d, expected %d", rows.get(0).getInt("c"), value));
1:         }
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:f00a3da
/////////////////////////////////////////////////////////////////////////
1:                                 executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (?, ?, ?) USING TIMESTAMP 1",
/////////////////////////////////////////////////////////////////////////
commit:3c43775
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.cql3;
0: 
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.CyclicBarrier;
0: 
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: import com.datastax.driver.core.Row;
0: import com.datastax.driver.core.exceptions.NoHostAvailableException;
0: import com.datastax.driver.core.exceptions.WriteTimeoutException;
0: import org.apache.cassandra.concurrent.SEPExecutor;
0: import org.apache.cassandra.concurrent.Stage;
0: import org.apache.cassandra.concurrent.StageManager;
0: import org.apache.cassandra.db.BatchlogManager;
0: import org.apache.cassandra.utils.WrappedRunnable;
0: 
0: public class MaterializedViewLongTest extends CQLTester
0: {
0:     int protocolVersion = 4;
0:     private final List<String> materializedViews = new ArrayList<>();
0: 
0:     @BeforeClass
0:     public static void startup()
0:     {
0:         requireNetwork();
0:     }
0:     @Before
0:     public void begin()
0:     {
0:         materializedViews.clear();
0:     }
0: 
0:     @After
0:     public void end() throws Throwable
0:     {
0:         for (String viewName : materializedViews)
0:             executeNet(protocolVersion, "DROP MATERIALIZED VIEW " + viewName);
0:     }
0: 
0:     private void createView(String name, String query) throws Throwable
0:     {
0:         executeNet(protocolVersion, String.format(query, name));
0:         // If exception is thrown, the view will not be added to the list; since it shouldn't have been created, this is
0:         // the desired behavior
0:         materializedViews.add(name);
0:     }
0: 
0:     @Test
0:     public void testConflictResolution() throws Throwable
0:     {
0:         final int writers = 96;
0:         final int insertsPerWriter = 50;
0:         final Map<Integer, Exception> failedWrites = new ConcurrentHashMap<>();
0: 
0:         createTable("CREATE TABLE %s (" +
0:                     "a int," +
0:                     "b int," +
0:                     "c int," +
0:                     "PRIMARY KEY (a, b))");
0: 
0:         executeNet(protocolVersion, "USE " + keyspace());
0: 
0:         createView("mv", "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE c IS NOT NULL AND a IS NOT NULL AND b IS NOT NULL PRIMARY KEY (c, a, b)");
0: 
0:         CyclicBarrier semaphore = new CyclicBarrier(writers);
0: 
0:         Thread[] threads = new Thread[writers];
0:         for (int i = 0; i < writers; i++)
0:         {
0:             final int writer = i;
0:             Thread t = new Thread(new WrappedRunnable()
0:             {
0:                 public void runMayThrow()
0:                 {
0:                     try
0:                     {
0:                         int writerOffset = writer * insertsPerWriter;
0:                         semaphore.await();
0:                         for (int i = 0; i < insertsPerWriter; i++)
0:                         {
0:                             try
0:                             {
0:                                 executeNet(protocolVersion, "INSERT INTO %s (a, b, c) VALUES (?, ?, ?)",
0:                                            1,
0:                                            1,
0:                                            i + writerOffset);
0:                             }
0:                             catch (NoHostAvailableException|WriteTimeoutException e)
0:                             {
0:                                 failedWrites.put(i + writerOffset, e);
0:                             }
0:                         }
0:                     }
0:                     catch (Throwable e)
0:                     {
0:                         throw new RuntimeException(e);
0:                     }
0:                 }
0:             });
0:             t.start();
0:             threads[i] = t;
0:         }
0: 
0:         for (int i = 0; i < writers; i++)
0:             threads[i].join();
0: 
0:         for (int i = 0; i < writers * insertsPerWriter; i++)
0:         {
0:             if (executeNet(protocolVersion, "SELECT COUNT(*) FROM system.batchlog").one().getLong(0) == 0)
0:                 break;
0:             try
0:             {
0:                 // This will throw exceptions whenever there are exceptions trying to push the materialized view values
0:                 // out, caused by the view becoming overwhelmed.
0:                 BatchlogManager.instance.startBatchlogReplay().get();
0:             }
0:             catch (Throwable ignore)
0:             {
0: 
0:             }
0:         }
0: 
0:         while (!(((SEPExecutor) StageManager.getStage(Stage.MATERIALIZED_VIEW_MUTATION)).getPendingTasks() == 0
0:                  && ((SEPExecutor) StageManager.getStage(Stage.MATERIALIZED_VIEW_MUTATION)).getActiveCount() == 0))
0:         {
0:             Thread.sleep(1);
0:         }
0: 
0:         int value = executeNet(protocolVersion, "SELECT c FROM %s WHERE a = 1 AND b = 1").one().getInt("c");
0: 
0:         List<Row> rows = executeNet(protocolVersion, "SELECT c FROM " + keyspace() + ".mv").all();
0: 
0:         boolean containsC = false;
0:         StringBuilder others = new StringBuilder();
0:         StringBuilder overlappingFailedWrites = new StringBuilder();
0:         for (Row row : rows)
0:         {
0:             int c = row.getInt("c");
0:             if (c == value)
0:                 containsC = true;
0:             else
0:             {
0:                 if (others.length() != 0)
0:                     others.append(' ');
0:                 others.append(c);
0:                 if (failedWrites.containsKey(c))
0:                 {
0:                     if (overlappingFailedWrites.length() != 0)
0:                         overlappingFailedWrites.append(' ');
0:                     overlappingFailedWrites.append(c)
0:                                            .append(':')
0:                                            .append(failedWrites.get(c).getMessage());
0:                 }
0:             }
0:         }
0: 
0:         if (rows.size() > 1)
0:         {
0:             throw new AssertionError(String.format("Expected 1 row, but found %d; %s c = %d, and (%s) of which (%s) failed to insert", rows.size(), containsC ? "found row with" : "no rows contained", value, others, overlappingFailedWrites));
0:         }
0:         else if (rows.isEmpty())
0:         {
0:             throw new AssertionError(String.format("Could not find row with c = %d", value));
0:         }
0:         else if (rows.size() == 1 && !containsC)
0:         {
0:             throw new AssertionError(String.format("Single row had c = %d, expected %d", rows.get(0).getInt("c"), value));
0:         }
0:     }
0: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
============================================================================