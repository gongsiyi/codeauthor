1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
5:a991b64: 
1:a991b64: import java.nio.ByteBuffer;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.util.Objects;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:2457599: import org.apache.cassandra.utils.memory.AbstractAllocator;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A range tombstone marker that represents a boundary between 2 range tombstones (i.e. it closes one range and open another).
1:a991b64:  */
1:2cc26eb: public class RangeTombstoneBoundaryMarker extends AbstractRangeTombstoneMarker<ClusteringBoundary>
4:a991b64: {
1:a991b64:     private final DeletionTime endDeletion;
1:a991b64:     private final DeletionTime startDeletion;
1:a991b64: 
1:2cc26eb:     public RangeTombstoneBoundaryMarker(ClusteringBoundary bound, DeletionTime endDeletion, DeletionTime startDeletion)
1:a991b64:     {
1:a991b64:         super(bound);
1:2457599:         assert bound.isBoundary();
1:a991b64:         this.endDeletion = endDeletion;
1:a991b64:         this.startDeletion = startDeletion;
4:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundaryMarker exclusiveCloseInclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime closeDeletion, DeletionTime openDeletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBoundary bound = ClusteringBoundary.exclusiveCloseInclusiveOpen(reversed, boundValues);
1:a991b64:         DeletionTime endDeletion = reversed ? openDeletion : closeDeletion;
1:a991b64:         DeletionTime startDeletion = reversed ? closeDeletion : openDeletion;
1:a991b64:         return new RangeTombstoneBoundaryMarker(bound, endDeletion, startDeletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public static RangeTombstoneBoundaryMarker inclusiveCloseExclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime closeDeletion, DeletionTime openDeletion)
1:a991b64:     {
1:2cc26eb:         ClusteringBoundary bound = ClusteringBoundary.inclusiveCloseExclusiveOpen(reversed, boundValues);
1:a991b64:         DeletionTime endDeletion = reversed ? openDeletion : closeDeletion;
1:a991b64:         DeletionTime startDeletion = reversed ? closeDeletion : openDeletion;
1:a991b64:         return new RangeTombstoneBoundaryMarker(bound, endDeletion, startDeletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The deletion time for the range tombstone this boundary ends (in clustering order).
1:a991b64:      */
1:a991b64:     public DeletionTime endDeletionTime()
1:a991b64:     {
1:a991b64:         return endDeletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The deletion time for the range tombstone this boundary starts (in clustering order).
1:a991b64:      */
1:a991b64:     public DeletionTime startDeletionTime()
1:a991b64:     {
1:a991b64:         return startDeletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime closeDeletionTime(boolean reversed)
1:a991b64:     {
1:a991b64:         return reversed ? startDeletion : endDeletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime openDeletionTime(boolean reversed)
1:a991b64:     {
1:a991b64:         return reversed ? endDeletion : startDeletion;
1:a991b64:     }
1:a991b64: 
1:7813dee:     public boolean openIsInclusive(boolean reversed)
1:7813dee:     {
1:7813dee:         return (bound.kind() == ClusteringPrefix.Kind.EXCL_END_INCL_START_BOUNDARY) ^ reversed;
1:2457599:     }
1:2457599: 
1:2cc26eb:     public ClusteringBound openBound(boolean reversed)
1:2457599:     {
1:2cc26eb:         return bound.openBound(reversed);
1:2457599:     }
1:2457599: 
1:2cc26eb:     public ClusteringBound closeBound(boolean reversed)
1:2457599:     {
1:2cc26eb:         return bound.closeBound(reversed);
1:7813dee:     }
1:7813dee: 
1:7813dee:     public boolean closeIsInclusive(boolean reversed)
1:7813dee:     {
1:7813dee:         return (bound.kind() == ClusteringPrefix.Kind.INCL_END_EXCL_START_BOUNDARY) ^ reversed;
1:7813dee:     }
1:7813dee: 
1:a991b64:     public boolean isOpen(boolean reversed)
1:a991b64:     {
1:a991b64:         // A boundary always open one side
2:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isClose(boolean reversed)
1:a991b64:     {
1:a991b64:         // A boundary always close one side
1:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:2457599:     public RangeTombstoneBoundaryMarker copy(AbstractAllocator allocator)
1:2457599:     {
1:2457599:         return new RangeTombstoneBoundaryMarker(clustering().copy(allocator), endDeletion, startDeletion);
1:2457599:     }
1:2457599: 
1:2cc26eb:     public static RangeTombstoneBoundaryMarker makeBoundary(boolean reversed, ClusteringBound close, ClusteringBound open, DeletionTime closeDeletion, DeletionTime openDeletion)
1:a991b64:     {
1:2cc26eb:         assert ClusteringPrefix.Kind.compare(close.kind(), open.kind()) == 0 : "Both bound don't form a boundary";
1:a991b64:         boolean isExclusiveClose = close.isExclusive() || (close.isInclusive() && open.isInclusive() && openDeletion.supersedes(closeDeletion));
1:a991b64:         return isExclusiveClose
1:a991b64:              ? exclusiveCloseInclusiveOpen(reversed, close.getRawValues(), closeDeletion, openDeletion)
1:a991b64:              : inclusiveCloseExclusiveOpen(reversed, close.getRawValues(), closeDeletion, openDeletion);
1:a991b64:     }
1:a991b64: 
1:2457599:     public RangeTombstoneBoundMarker createCorrespondingCloseMarker(boolean reversed)
1:a991b64:     {
1:2457599:         return new RangeTombstoneBoundMarker(closeBound(reversed), endDeletion);
1:a991b64:     }
1:a991b64: 
1:2457599:     public RangeTombstoneBoundMarker createCorrespondingOpenMarker(boolean reversed)
1:a991b64:     {
1:2457599:         return new RangeTombstoneBoundMarker(openBound(reversed), startDeletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void digest(MessageDigest digest)
1:a991b64:     {
1:a991b64:         bound.digest(digest);
1:a991b64:         endDeletion.digest(digest);
1:a991b64:         startDeletion.digest(digest);
1:a991b64:     }
1:a991b64: 
1:a991b64:     public String toString(CFMetaData metadata)
1:a991b64:     {
1:2457599:         return String.format("Marker %s@%d-%d", bound.toString(metadata), endDeletion.markedForDeleteAt(), startDeletion.markedForDeleteAt());
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public boolean equals(Object other)
1:a991b64:     {
1:a991b64:         if(!(other instanceof RangeTombstoneBoundaryMarker))
2:a991b64:             return false;
1:a991b64: 
1:a991b64:         RangeTombstoneBoundaryMarker that = (RangeTombstoneBoundaryMarker)other;
1:a991b64:         return this.bound.equals(that.bound)
1:a991b64:             && this.endDeletion.equals(that.endDeletion)
1:a991b64:             && this.startDeletion.equals(that.startDeletion);
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     public int hashCode()
1:a991b64:     {
1:a991b64:         return Objects.hash(bound, endDeletion, startDeletion);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:2cc26eb
/////////////////////////////////////////////////////////////////////////
1: public class RangeTombstoneBoundaryMarker extends AbstractRangeTombstoneMarker<ClusteringBoundary>
1:     public RangeTombstoneBoundaryMarker(ClusteringBoundary bound, DeletionTime endDeletion, DeletionTime startDeletion)
/////////////////////////////////////////////////////////////////////////
1:         ClusteringBoundary bound = ClusteringBoundary.exclusiveCloseInclusiveOpen(reversed, boundValues);
/////////////////////////////////////////////////////////////////////////
1:         ClusteringBoundary bound = ClusteringBoundary.inclusiveCloseExclusiveOpen(reversed, boundValues);
/////////////////////////////////////////////////////////////////////////
1:     public ClusteringBound openBound(boolean reversed)
1:         return bound.openBound(reversed);
1:     public ClusteringBound closeBound(boolean reversed)
1:         return bound.closeBound(reversed);
/////////////////////////////////////////////////////////////////////////
1:     public static RangeTombstoneBoundaryMarker makeBoundary(boolean reversed, ClusteringBound close, ClusteringBound open, DeletionTime closeDeletion, DeletionTime openDeletion)
1:         assert ClusteringPrefix.Kind.compare(close.kind(), open.kind()) == 0 : "Both bound don't form a boundary";
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.memory.AbstractAllocator;
/////////////////////////////////////////////////////////////////////////
1:         assert bound.isBoundary();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public RangeTombstone.Bound openBound(boolean reversed)
1:     {
0:         return bound.withNewKind(bound.kind().openBoundOfBoundary(reversed));
1:     }
1: 
0:     public RangeTombstone.Bound closeBound(boolean reversed)
1:     {
0:         return bound.withNewKind(bound.kind().closeBoundOfBoundary(reversed));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public RangeTombstoneBoundaryMarker copy(AbstractAllocator allocator)
1:     {
1:         return new RangeTombstoneBoundaryMarker(clustering().copy(allocator), endDeletion, startDeletion);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public RangeTombstoneBoundMarker createCorrespondingCloseMarker(boolean reversed)
1:         return new RangeTombstoneBoundMarker(closeBound(reversed), endDeletion);
1:     public RangeTombstoneBoundMarker createCorrespondingOpenMarker(boolean reversed)
1:         return new RangeTombstoneBoundMarker(openBound(reversed), startDeletion);
/////////////////////////////////////////////////////////////////////////
1:         return String.format("Marker %s@%d-%d", bound.toString(metadata), endDeletion.markedForDeleteAt(), startDeletion.markedForDeleteAt());
commit:7813dee
/////////////////////////////////////////////////////////////////////////
1:     public boolean openIsInclusive(boolean reversed)
1:     {
1:         return (bound.kind() == ClusteringPrefix.Kind.EXCL_END_INCL_START_BOUNDARY) ^ reversed;
1:     }
1: 
1:     public boolean closeIsInclusive(boolean reversed)
1:     {
1:         return (bound.kind() == ClusteringPrefix.Kind.INCL_END_EXCL_START_BOUNDARY) ^ reversed;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         assert RangeTombstone.Bound.Kind.compare(close.kind(), open.kind()) == 0 : "Both bound don't form a boundary";
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.security.MessageDigest;
1: import java.util.Objects;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * A range tombstone marker that represents a boundary between 2 range tombstones (i.e. it closes one range and open another).
1:  */
0: public class RangeTombstoneBoundaryMarker extends AbstractRangeTombstoneMarker
1: {
1:     private final DeletionTime endDeletion;
1:     private final DeletionTime startDeletion;
1: 
0:     public RangeTombstoneBoundaryMarker(RangeTombstone.Bound bound, DeletionTime endDeletion, DeletionTime startDeletion)
1:     {
1:         super(bound);
0:         assert bound.kind().isBoundary();
1:         this.endDeletion = endDeletion;
1:         this.startDeletion = startDeletion;
1:     }
1: 
1:     public static RangeTombstoneBoundaryMarker exclusiveCloseInclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime closeDeletion, DeletionTime openDeletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.exclusiveCloseInclusiveOpen(reversed, boundValues);
1:         DeletionTime endDeletion = reversed ? openDeletion : closeDeletion;
1:         DeletionTime startDeletion = reversed ? closeDeletion : openDeletion;
1:         return new RangeTombstoneBoundaryMarker(bound, endDeletion, startDeletion);
1:     }
1: 
1:     public static RangeTombstoneBoundaryMarker inclusiveCloseExclusiveOpen(boolean reversed, ByteBuffer[] boundValues, DeletionTime closeDeletion, DeletionTime openDeletion)
1:     {
0:         RangeTombstone.Bound bound = RangeTombstone.Bound.inclusiveCloseExclusiveOpen(reversed, boundValues);
1:         DeletionTime endDeletion = reversed ? openDeletion : closeDeletion;
1:         DeletionTime startDeletion = reversed ? closeDeletion : openDeletion;
1:         return new RangeTombstoneBoundaryMarker(bound, endDeletion, startDeletion);
1:     }
1: 
0:     public boolean isBoundary()
1:     {
1:         return true;
1:     }
1: 
1:     /**
1:      * The deletion time for the range tombstone this boundary ends (in clustering order).
1:      */
1:     public DeletionTime endDeletionTime()
1:     {
1:         return endDeletion;
1:     }
1: 
1:     /**
1:      * The deletion time for the range tombstone this boundary starts (in clustering order).
1:      */
1:     public DeletionTime startDeletionTime()
1:     {
1:         return startDeletion;
1:     }
1: 
1:     public DeletionTime closeDeletionTime(boolean reversed)
1:     {
1:         return reversed ? startDeletion : endDeletion;
1:     }
1: 
1:     public DeletionTime openDeletionTime(boolean reversed)
1:     {
1:         return reversed ? endDeletion : startDeletion;
1:     }
1: 
1:     public boolean isOpen(boolean reversed)
1:     {
1:         // A boundary always open one side
1:         return true;
1:     }
1: 
1:     public boolean isClose(boolean reversed)
1:     {
1:         // A boundary always close one side
1:         return true;
1:     }
1: 
0:     public static boolean isBoundary(ClusteringComparator comparator, Slice.Bound close, Slice.Bound open)
1:     {
0:         if (!comparator.isOnSameClustering(close, open))
1:             return false;
1: 
0:         // If both bound are exclusive, then it's not a boundary, otherwise it is one.
0:         // Note that most code should never call this with 2 inclusive bound: this would mean we had
0:         // 2 RTs that were overlapping and RangeTombstoneList don't create that. However, old
0:         // code was generating that so supporting this case helps dealing with backward compatibility.
0:         return close.isInclusive() || open.isInclusive();
1:     }
1: 
0:     // Please note that isBoundary *must* have been called (and returned true) before this is called.
0:     public static RangeTombstoneBoundaryMarker makeBoundary(boolean reversed, Slice.Bound close, Slice.Bound open, DeletionTime closeDeletion, DeletionTime openDeletion)
1:     {
1:         boolean isExclusiveClose = close.isExclusive() || (close.isInclusive() && open.isInclusive() && openDeletion.supersedes(closeDeletion));
1:         return isExclusiveClose
1:              ? exclusiveCloseInclusiveOpen(reversed, close.getRawValues(), closeDeletion, openDeletion)
1:              : inclusiveCloseExclusiveOpen(reversed, close.getRawValues(), closeDeletion, openDeletion);
1:     }
1: 
0:     public RangeTombstoneBoundMarker createCorrespondingCloseBound(boolean reversed)
1:     {
0:         return new RangeTombstoneBoundMarker(bound.withNewKind(bound.kind().closeBoundOfBoundary(reversed)), endDeletion);
1:     }
1: 
0:     public RangeTombstoneBoundMarker createCorrespondingOpenBound(boolean reversed)
1:     {
0:         return new RangeTombstoneBoundMarker(bound.withNewKind(bound.kind().openBoundOfBoundary(reversed)), startDeletion);
1:     }
1: 
0:     public void copyTo(RangeTombstoneMarker.Writer writer)
1:     {
0:         copyBoundTo(writer);
0:         writer.writeBoundaryDeletion(endDeletion, startDeletion);
0:         writer.endOfMarker();
1:     }
1: 
1:     public void digest(MessageDigest digest)
1:     {
1:         bound.digest(digest);
1:         endDeletion.digest(digest);
1:         startDeletion.digest(digest);
1:     }
1: 
1:     public String toString(CFMetaData metadata)
1:     {
0:         StringBuilder sb = new StringBuilder();
0:         sb.append("Marker ");
0:         sb.append(bound.toString(metadata));
0:         sb.append("@").append(endDeletion.markedForDeleteAt()).append("-").append(startDeletion.markedForDeleteAt());
0:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if(!(other instanceof RangeTombstoneBoundaryMarker))
1:             return false;
1: 
1:         RangeTombstoneBoundaryMarker that = (RangeTombstoneBoundaryMarker)other;
1:         return this.bound.equals(that.bound)
1:             && this.endDeletion.equals(that.endDeletion)
1:             && this.startDeletion.equals(that.startDeletion);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(bound, endDeletion, startDeletion);
1:     }
1: }
============================================================================