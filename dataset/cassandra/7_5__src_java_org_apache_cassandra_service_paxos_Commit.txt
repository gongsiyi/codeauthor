1:8b0e186: package org.apache.cassandra.service.paxos;
1:60bf7a5: /*
1:60bf7a5:  *
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:60bf7a5:  *
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:60bf7a5:  *
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:60bf7a5:  *
1:60bf7a5:  */
1:60bf7a5: 
1:8b0e186: 
1:8b0e186: import java.io.IOException;
1:0a08525: import java.nio.ByteBuffer;
1:8b0e186: import java.util.UUID;
1:8b0e186: 
1:8b0e186: import com.google.common.base.Objects;
1:8b0e186: 
1:8b0e186: import org.apache.cassandra.config.CFMetaData;
1:6bbb13b: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:8b0e186: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:a991b64: import org.apache.cassandra.net.MessagingService;
1:8b0e186: import org.apache.cassandra.utils.ByteBufferUtil;
1:8b0e186: import org.apache.cassandra.utils.UUIDGen;
1:8b0e186: import org.apache.cassandra.utils.UUIDSerializer;
1:8b0e186: 
1:8b0e186: public class Commit
2:8b0e186: {
1:8b0e186:     public static final CommitSerializer serializer = new CommitSerializer();
1:8b0e186: 
1:8b0e186:     public final UUID ballot;
1:a991b64:     public final PartitionUpdate update;
1:8b0e186: 
1:a991b64:     public Commit(UUID ballot, PartitionUpdate update)
1:8b0e186:     {
1:8b0e186:         assert ballot != null;
2:8b0e186:         assert update != null;
1:8b0e186: 
1:8b0e186:         this.ballot = ballot;
1:8b0e186:         this.update = update;
2:8b0e186:     }
1:8b0e186: 
1:a991b64:     public static Commit newPrepare(DecoratedKey key, CFMetaData metadata, UUID ballot)
1:8b0e186:     {
1:a991b64:         return new Commit(ballot, PartitionUpdate.emptyUpdate(metadata, key));
1:8b0e186:     }
1:8b0e186: 
1:a991b64:     public static Commit newProposal(UUID ballot, PartitionUpdate update)
1:8b0e186:     {
1:2457599:         update.updateAllTimestamp(UUIDGen.microsTimestamp(ballot));
1:2457599:         return new Commit(ballot, update);
1:8b0e186:     }
1:8b0e186: 
1:a991b64:     public static Commit emptyCommit(DecoratedKey key, CFMetaData metadata)
1:8b0e186:     {
1:a991b64:         return new Commit(UUIDGen.minTimeUUID(0), PartitionUpdate.emptyUpdate(metadata, key));
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public boolean isAfter(Commit other)
1:8b0e186:     {
1:8b0e186:         return ballot.timestamp() > other.ballot.timestamp();
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public boolean hasBallot(UUID ballot)
1:8b0e186:     {
1:8b0e186:         return this.ballot.equals(ballot);
1:8b0e186:     }
1:8b0e186: 
1:6bbb13b:     public Mutation makeMutation()
1:8b0e186:     {
1:a991b64:         return new Mutation(update);
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     @Override
1:8b0e186:     public boolean equals(Object o)
1:8b0e186:     {
1:8b0e186:         if (this == o) return true;
1:8b0e186:         if (o == null || getClass() != o.getClass()) return false;
1:8b0e186: 
1:8b0e186:         Commit commit = (Commit) o;
1:8b0e186: 
1:2457599:         return ballot.equals(commit.ballot) && update.equals(commit.update);
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     @Override
1:8b0e186:     public int hashCode()
1:8b0e186:     {
1:a991b64:         return Objects.hashCode(ballot, update);
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     @Override
1:8b0e186:     public String toString()
1:8b0e186:     {
1:a991b64:         return String.format("Commit(%s, %s)", ballot, update);
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public static class CommitSerializer implements IVersionedSerializer<Commit>
1:8b0e186:     {
1:75508ec:         public void serialize(Commit commit, DataOutputPlus out, int version) throws IOException
1:8b0e186:         {
1:a991b64:             if (version < MessagingService.VERSION_30)
1:a991b64:                 ByteBufferUtil.writeWithShortLength(commit.update.partitionKey().getKey(), out);
1:8b0e186: 
1:8b0e186:             UUIDSerializer.serializer.serialize(commit.ballot, out, version);
1:a991b64:             PartitionUpdate.serializer.serialize(commit.update, out, version);
1:8b0e186:         }
1:8b0e186: 
1:03f72ac:         public Commit deserialize(DataInputPlus in, int version) throws IOException
1:8b0e186:         {
1:0a08525:             ByteBuffer key = null;
1:a991b64:             if (version < MessagingService.VERSION_30)
1:0a08525:                 key = ByteBufferUtil.readWithShortLength(in);
1:8b0e186: 
1:a991b64:             UUID ballot = UUIDSerializer.serializer.deserialize(in, version);
1:a991b64:             PartitionUpdate update = PartitionUpdate.serializer.deserialize(in, version, SerializationHelper.Flag.LOCAL, key);
1:a991b64:             return new Commit(ballot, update);
1:8b0e186:         }
1:8b0e186: 
1:8b0e186:         public long serializedSize(Commit commit, int version)
1:8b0e186:         {
1:a991b64:             int size = 0;
1:a991b64:             if (version < MessagingService.VERSION_30)
1:03f72ac:                 size += ByteBufferUtil.serializedSizeWithShortLength(commit.update.partitionKey().getKey());
10:a991b64: 
1:a991b64:             return size
1:8b0e186:                  + UUIDSerializer.serializer.serializedSize(commit.ballot, version)
1:03f72ac:                  + PartitionUpdate.serializer.serializedSize(commit.update, version);
1:8b0e186:         }
1:8b0e186:     }
1:8b0e186: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer key = null;
1:                 key = ByteBufferUtil.readWithShortLength(in);
commit:5cf381f
/////////////////////////////////////////////////////////////////////////
0:         return new Commit(key, ballot, ArrayBackedSortedColumns.factory.create(metadata));
/////////////////////////////////////////////////////////////////////////
0:         return new Commit(key, UUIDGen.minTimeUUID(0), ArrayBackedSortedColumns.factory.create(metadata));
commit:8125047
/////////////////////////////////////////////////////////////////////////
0:                               ColumnFamily.serializer.deserialize(in,
0:                                                                   ArrayBackedSortedColumns.factory,
0:                                                                   ColumnSerializer.Flag.LOCAL,
0:                                                                   version));
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
1:     public Mutation makeMutation()
0:         return new Mutation(key, update);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             DecoratedKey key = null;
0:                 key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:1227751
/////////////////////////////////////////////////////////////////////////
0:     public static Commit newProposal(ByteBuffer key, UUID ballot, ColumnFamily update)
commit:8b0e186
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.service.paxos;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.UUID;
0: import java.nio.ByteBuffer;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.Column;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.EmptyColumns;
0: import org.apache.cassandra.db.RowMutation;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDGen;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: public class Commit
1: {
1:     public static final CommitSerializer serializer = new CommitSerializer();
1: 
0:     public final ByteBuffer key;
1:     public final UUID ballot;
0:     public final ColumnFamily update;
1: 
0:     public Commit(ByteBuffer key, UUID ballot, ColumnFamily update)
1:     {
0:         assert key != null;
1:         assert ballot != null;
1:         assert update != null;
1: 
0:         this.key = key;
1:         this.ballot = ballot;
1:         this.update = update;
1:     }
1: 
0:     public static Commit newPrepare(ByteBuffer key, CFMetaData metadata, UUID ballot)
1:     {
0:         return new Commit(key, ballot, EmptyColumns.factory.create(metadata));
1:     }
1: 
0:     public Commit makeProposal(ColumnFamily update)
1:     {
0:         return new Commit(key, ballot, updatesWithPaxosTime(update, ballot));
1:     }
1: 
0:     public static Commit emptyCommit(ByteBuffer key, CFMetaData metadata)
1:     {
0:         return new Commit(key, UUIDGen.minTimeUUID(0), EmptyColumns.factory.create(metadata));
1:     }
1: 
1:     public boolean isAfter(Commit other)
1:     {
1:         return ballot.timestamp() > other.ballot.timestamp();
1:     }
1: 
1:     public boolean hasBallot(UUID ballot)
1:     {
1:         return this.ballot.equals(ballot);
1:     }
1: 
0:     public RowMutation makeMutation()
1:     {
1:         assert update != null;
0:         return new RowMutation(key, update);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         Commit commit = (Commit) o;
1: 
0:         if (!ballot.equals(commit.ballot)) return false;
0:         if (!key.equals(commit.key)) return false;
0:         if (!update.equals(commit.update)) return false;
1: 
0:         return true;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hashCode(key, ballot, update);
1:     }
1: 
0:     private static ColumnFamily updatesWithPaxosTime(ColumnFamily updates, UUID ballot)
1:     {
0:         ColumnFamily cf = updates.cloneMeShallow();
0:         long t = UUIDGen.microsTimestamp(ballot);
0:         for (Column column : updates)
0:             cf.addColumn(column.name(), column.value(), t);
0:         return cf;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return String.format("Commit(%s, %s, %s)", ByteBufferUtil.bytesToHex(key), ballot, update);
1:     }
1: 
1:     public static class CommitSerializer implements IVersionedSerializer<Commit>
1:     {
0:         public void serialize(Commit commit, DataOutput out, int version) throws IOException
1:         {
0:             ByteBufferUtil.writeWithShortLength(commit.key, out);
1:             UUIDSerializer.serializer.serialize(commit.ballot, out, version);
0:             ColumnFamily.serializer.serialize(commit.update, out, version);
1:         }
1: 
0:         public Commit deserialize(DataInput in, int version) throws IOException
1:         {
0:             return new Commit(ByteBufferUtil.readWithShortLength(in),
0:                               UUIDSerializer.serializer.deserialize(in, version),
0:                               ColumnFamily.serializer.deserialize(in, version));
1:         }
1: 
1:         public long serializedSize(Commit commit, int version)
1:         {
0:             return 2 + commit.key.remaining()
1:                    + UUIDSerializer.serializer.serializedSize(commit.ballot, version)
0:                    + ColumnFamily.serializer.serializedSize(commit.update, version);
1:         }
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer key = null;
0:                 key = ByteBufferUtil.readWithShortLength(in);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         update.updateAllTimestamp(UUIDGen.microsTimestamp(ballot));
1:         return new Commit(ballot, update);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return ballot.equals(commit.ballot) && update.equals(commit.update);
/////////////////////////////////////////////////////////////////////////
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:     public final PartitionUpdate update;
1:     public Commit(UUID ballot, PartitionUpdate update)
1:     public static Commit newPrepare(DecoratedKey key, CFMetaData metadata, UUID ballot)
1:         return new Commit(ballot, PartitionUpdate.emptyUpdate(metadata, key));
1:     public static Commit newProposal(UUID ballot, PartitionUpdate update)
0:         return new Commit(ballot, updatesWithPaxosTime(update, ballot));
1:     public static Commit emptyCommit(DecoratedKey key, CFMetaData metadata)
1:         return new Commit(UUIDGen.minTimeUUID(0), PartitionUpdate.emptyUpdate(metadata, key));
/////////////////////////////////////////////////////////////////////////
1:         return new Mutation(update);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return Objects.hashCode(ballot, update);
0:     private static PartitionUpdate updatesWithPaxosTime(PartitionUpdate update, UUID ballot)
0:         // Using t-1 for tombstones so deletion doesn't trump newly inserted data (#6069)
0:         PartitionUpdate newUpdate = new PartitionUpdate(update.metadata(),
0:                                                         update.partitionKey(),
0:                                                         update.deletionInfo().updateAllTimestamp(t-1),
0:                                                         update.columns(),
0:                                                         update.rowCount());
1: 
0:         if (!update.staticRow().isEmpty())
0:             copyWithUpdatedTimestamp(update.staticRow(), newUpdate.staticWriter(), t);
1: 
0:         for (Row row : update)
0:             copyWithUpdatedTimestamp(row, newUpdate.writer(), t);
1: 
0:         return newUpdate;
0:     }
1: 
0:     private static void copyWithUpdatedTimestamp(Row row, Row.Writer writer, long timestamp)
0:     {
0:         Rows.writeClustering(row.clustering(), writer);
0:         writer.writePartitionKeyLivenessInfo(row.primaryKeyLivenessInfo().withUpdatedTimestamp(timestamp));
0:         writer.writeRowDeletion(row.deletion());
1: 
0:         for (Cell cell : row)
0:             writer.writeCell(cell.column(), cell.isCounterCell(), cell.value(), cell.livenessInfo().withUpdatedTimestamp(timestamp), cell.path());
1: 
0:         for (int i = 0; i < row.columns().complexColumnCount(); i++)
0:         {
0:             ColumnDefinition c = row.columns().getComplex(i);
0:             DeletionTime dt = row.getDeletion(c);
0:             // We use t-1 to make sure that on inserting a collection literal, the deletion that comes with it does not
0:             // end up deleting the inserted data (see #6069)
0:             if (!dt.isLive())
0:                 writer.writeComplexDeletion(c, new SimpleDeletionTime(timestamp-1, dt.localDeletionTime()));
0:         }
0:         writer.endOfRow();
1:         return String.format("Commit(%s, %s)", ballot, update);
1:             if (version < MessagingService.VERSION_30)
1:                 ByteBufferUtil.writeWithShortLength(commit.update.partitionKey().getKey(), out);
1: 
1:             PartitionUpdate.serializer.serialize(commit.update, out, version);
0:             DecoratedKey key = null;
1:             if (version < MessagingService.VERSION_30)
0:                 key = StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(in));
1: 
1:             UUID ballot = UUIDSerializer.serializer.deserialize(in, version);
1:             PartitionUpdate update = PartitionUpdate.serializer.deserialize(in, version, SerializationHelper.Flag.LOCAL, key);
1:             return new Commit(ballot, update);
0:             TypeSizes sizes = TypeSizes.NATIVE;
1: 
1:             int size = 0;
1:             if (version < MessagingService.VERSION_30)
0:                 size += ByteBufferUtil.serializedSizeWithShortLength(commit.update.partitionKey().getKey(), sizes);
1: 
1:             return size
0:                  + UUIDSerializer.serializer.serializedSize(commit.ballot, version)
0:                  + PartitionUpdate.serializer.serializedSize(commit.update, version, sizes);
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Cell;
/////////////////////////////////////////////////////////////////////////
0:         for (Cell cell : updates)
0:             cf.addAtom(cell.withUpdatedTimestamp(t));
commit:fb55849
/////////////////////////////////////////////////////////////////////////
0:         // For the tombstones, we use t-1 so that when insert a collection literall, the range tombstone that deletes the previous values of
0:         // the collection and we want that to have a lower timestamp and our new values. Since tombstones wins over normal insert, using t-1
0:         // should not be a problem in general (see #6069).
0:         cf.deletionInfo().updateAllTimestamp(t-1);
commit:b7a016d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.ColumnSerializer;
0: import org.apache.cassandra.db.UnsortedColumns;
/////////////////////////////////////////////////////////////////////////
0:                               ColumnFamily.serializer.deserialize(in, UnsortedColumns.factory, ColumnSerializer.Flag.LOCAL, version));
commit:37130b5
/////////////////////////////////////////////////////////////////////////
0:         cf.deletionInfo().updateAllTimestamp(t);
commit:e431fb7
/////////////////////////////////////////////////////////////////////////
0:             cf.addAtom(column.withUpdatedTimestamp(t));
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public Commit deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:                 size += ByteBufferUtil.serializedSizeWithShortLength(commit.update.partitionKey().getKey());
1:                  + PartitionUpdate.serializer.serializedSize(commit.update, version);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(Commit commit, DataOutputPlus out, int version) throws IOException
============================================================================