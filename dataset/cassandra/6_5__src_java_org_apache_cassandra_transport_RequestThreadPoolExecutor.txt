1:02d9238: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:02d9238:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:02d9238:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:02d9238:  */
1:6d3a3ee: package org.apache.cassandra.transport;
1:02d9238: 
1:f393504: import java.util.List;
1:6d3a3ee: import java.util.concurrent.TimeUnit;
1:02d9238: 
1:cbf304e: import io.netty.util.concurrent.AbstractEventExecutor;
1:cbf304e: import io.netty.util.concurrent.EventExecutorGroup;
1:cbf304e: import io.netty.util.concurrent.Future;
1:dbf6e62: import org.apache.cassandra.concurrent.LocalAwareExecutorService;
1:a0db8ff: import org.apache.cassandra.config.DatabaseDescriptor;
1:5420b7a: 
1:8896a70: import static org.apache.cassandra.concurrent.SharedExecutorPool.SHARED;
1:02d9238: 
1:cbf304e: public class RequestThreadPoolExecutor extends AbstractEventExecutor
3:02d9238: {
1:6fb89b9:     private final static int MAX_QUEUED_REQUESTS = Integer.getInteger("cassandra.max_queued_native_transport_requests", 128);
1:f393504:     private final static String THREAD_FACTORY_ID = "Native-Transport-Requests";
1:dbf6e62:     private final LocalAwareExecutorService wrapped = SHARED.newExecutor(DatabaseDescriptor.getNativeTransportMaxThreads(),
1:5420b7a:                                                                            MAX_QUEUED_REQUESTS,
1:8896a70:                                                                            "transport",
1:8896a70:                                                                            THREAD_FACTORY_ID);
1:cbf304e: 
1:cbf304e:     public boolean isShuttingDown()
1:02d9238:     {
1:cbf304e:         return wrapped.isShutdown();
2:02d9238:     }
1:f393504: 
1:cbf304e:     public Future<?> shutdownGracefully(long l, long l2, TimeUnit timeUnit)
1:f393504:     {
1:cbf304e:         throw new IllegalStateException();
1:f393504:     }
1:f393504: 
1:cbf304e:     public Future<?> terminationFuture()
1:f393504:     {
1:cbf304e:         throw new IllegalStateException();
1:02d9238:     }
1:f393504: 
1:f393504:     @Override
1:f393504:     public void shutdown()
1:f393504:     {
1:cbf304e:         wrapped.shutdown();
1:f393504:     }
1:f393504: 
1:f393504:     @Override
1:f393504:     public List<Runnable> shutdownNow()
1:f393504:     {
1:cbf304e:         return wrapped.shutdownNow();
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public boolean isShutdown()
1:cbf304e:     {
1:cbf304e:         return wrapped.isShutdown();
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public boolean isTerminated()
1:cbf304e:     {
1:cbf304e:         return wrapped.isTerminated();
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:cbf304e:     {
1:cbf304e:         return wrapped.awaitTermination(timeout, unit);
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public EventExecutorGroup parent()
1:cbf304e:     {
1:cbf304e:         return null;
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public boolean inEventLoop(Thread thread)
1:cbf304e:     {
1:cbf304e:         return false;
1:cbf304e:     }
1:cbf304e: 
1:cbf304e:     public void execute(Runnable command)
1:cbf304e:     {
1:cbf304e:         wrapped.execute(command);
1:f393504:     }
1:f393504: }
============================================================================
author:Nate McCall
-------------------------------------------------------------------------------
commit:465496f
commit:6fb89b9
/////////////////////////////////////////////////////////////////////////
1:     private final static int MAX_QUEUED_REQUESTS = Integer.getInteger("cassandra.max_queued_native_transport_requests", 128);
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbf6e62
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.LocalAwareExecutorService;
/////////////////////////////////////////////////////////////////////////
1:     private final LocalAwareExecutorService wrapped = SHARED.newExecutor(DatabaseDescriptor.getNativeTransportMaxThreads(),
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.cassandra.concurrent.SharedExecutorPool.SHARED;
/////////////////////////////////////////////////////////////////////////
1:                                                                            "transport",
1:                                                                            THREAD_FACTORY_ID);
author:belliottsmith
-------------------------------------------------------------------------------
commit:5420b7a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.concurrent.TracingAwareExecutorService;
0: import static org.apache.cassandra.concurrent.JMXEnabledSharedExecutorPool.SHARED;
1: 
0:     private final TracingAwareExecutorService wrapped = SHARED.newExecutor(DatabaseDescriptor.getNativeTransportMaxThreads(),
1:                                                                            MAX_QUEUED_REQUESTS,
0:                                                                            THREAD_FACTORY_ID,
0:                                                                            "transport");
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.LinkedBlockingQueue;
1: import io.netty.util.concurrent.AbstractEventExecutor;
1: import io.netty.util.concurrent.EventExecutorGroup;
1: import io.netty.util.concurrent.Future;
0: import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
1: public class RequestThreadPoolExecutor extends AbstractEventExecutor
1: 
0:     private final JMXEnabledThreadPoolExecutor wrapped = new JMXEnabledThreadPoolExecutor(DatabaseDescriptor.getNativeTransportMaxThreads(),
0:                                                                                           CORE_THREAD_TIMEOUT_SEC, TimeUnit.SECONDS,
0:                                                                                           new LinkedBlockingQueue<Runnable>(MAX_QUEUED_REQUESTS),
0:                                                                                           new NamedThreadFactory(THREAD_FACTORY_ID),
0:                                                                                           "transport");
1:     public boolean isShuttingDown()
1:         return wrapped.isShutdown();
1:     public Future<?> shutdownGracefully(long l, long l2, TimeUnit timeUnit)
1:         throw new IllegalStateException();
1:     public Future<?> terminationFuture()
1:         throw new IllegalStateException();
1:         wrapped.shutdown();
1:         return wrapped.shutdownNow();
1:     }
1: 
1:     public boolean isShutdown()
1:     {
1:         return wrapped.isShutdown();
1:     }
1: 
1:     public boolean isTerminated()
1:     {
1:         return wrapped.isTerminated();
1:     }
1: 
1:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:     {
1:         return wrapped.awaitTermination(timeout, unit);
1:     }
1: 
1:     public EventExecutorGroup parent()
1:     {
1:         return null;
1:     }
1: 
1:     public boolean inEventLoop(Thread thread)
1:     {
1:         return false;
1:     }
1: 
1:     public void execute(Runnable command)
1:     {
1:         wrapped.execute(command);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f393504
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: import org.apache.cassandra.metrics.ThreadPoolMetrics;
/////////////////////////////////////////////////////////////////////////
1:     private final static String THREAD_FACTORY_ID = "Native-Transport-Requests";
1: 
0:     private final ThreadPoolMetrics metrics;
1: 
/////////////////////////////////////////////////////////////////////////
0:               new NamedThreadFactory(THREAD_FACTORY_ID));
0:         metrics = new ThreadPoolMetrics(this, "transport", THREAD_FACTORY_ID);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void shutdown()
1:     {
0:         if (!isShutdown())
1:         {
0:             metrics.release();
1:         }
0:         super.shutdown();
1:     }
1: 
1:     @Override
1:     public List<Runnable> shutdownNow()
1:     {
0:         if (!isShutdown())
1:         {
0:             metrics.release();
1:         }
0:         return super.shutdownNow();
1:     }
commit:02d9238
/////////////////////////////////////////////////////////////////////////
0: import org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor;
0: import org.jboss.netty.util.ObjectSizeEstimator;
1: 
0: public class RequestThreadPoolExecutor extends MemoryAwareThreadPoolExecutor
0:     // Number of request we accept to queue before blocking. We could allow this to be configured...
0:     private final static int MAX_QUEUED_REQUESTS = 128;
0:         super(DatabaseDescriptor.getNativeTransportMaxThreads(),
0:               0, // We don't use the per-channel limit, only the global one
0:               MAX_QUEUED_REQUESTS,
0:               sizeEstimator(),
1: 
1:     /*
0:      * In theory, the ObjectSizeEstimator should estimate the actual size of a
0:      * request, and MemoryAwareThreadPoolExecutor sets a memory limit on how
0:      * much memory we allow for request before blocking.
1:      *
0:      * However, the memory size used by a CQL query is not very intersting and
0:      * by no mean reflect the memory size it's execution will use (the interesting part).
0:      * Furthermore, we're mainly interested in limiting the number of unhandled requests that
0:      * piles up to implement some back-pressure, and for that, there is no real need to do
0:      * fancy esimation of request size. So we use a trivial estimator that just count the
0:      * number of request.
1:      *
0:      * We could get more fancy later ...
1:      */
0:     private static ObjectSizeEstimator sizeEstimator()
1:     {
0:         return new ObjectSizeEstimator()
1:         {
0:             public int estimateSize(Object o)
1:             {
0:                 return 1;
1:             }
0:         };
1:     }
1: 
0:     @Override
0:     protected void afterExecute(Runnable r, Throwable t)
1:     {
0:         super.afterExecute(r, t);
0:         DebuggableThreadPoolExecutor.logExceptionsAfterExecute(r, t);
1:     }
commit:c22c685
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.LinkedBlockingQueue;
/////////////////////////////////////////////////////////////////////////
0:               new LinkedBlockingQueue<Runnable>(32), // Seems to help smooth latency compared to SynchronousQueue.
commit:a0db8ff
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ArrayBlockingQueue;
0: import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: public class RequestThreadPoolExecutor extends DebuggableThreadPoolExecutor
0:         super(DatabaseDescriptor.getNativeTransportMinThreads(),
0:               DatabaseDescriptor.getNativeTransportMaxThreads(),
0:               new ArrayBlockingQueue(32), // Seems to help smooth latency compared to SynchronousQueue.
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.cassandra.transport;
0: 
1: import java.util.concurrent.TimeUnit;
0: 
0: import org.jboss.netty.handler.execution.OrderedMemoryAwareThreadPoolExecutor;
0: import org.jboss.netty.util.DefaultObjectSizeEstimator;
0: import org.jboss.netty.util.ObjectSizeEstimator;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.concurrent.NamedThreadFactory;
0: 
0: public class RequestThreadPoolExecutor extends OrderedMemoryAwareThreadPoolExecutor
0: {
0:     private final static int CORE_THREAD_TIMEOUT_SEC = 30;
0: 
0:     public RequestThreadPoolExecutor()
0:     {
0:         super(DatabaseDescriptor.getNativeTransportMaxThreads(),
0:               0, 0,
0:               CORE_THREAD_TIMEOUT_SEC, TimeUnit.SECONDS,
0:               new NamedThreadFactory("Native-Transport-Requests"));
0:     }
0: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
============================================================================