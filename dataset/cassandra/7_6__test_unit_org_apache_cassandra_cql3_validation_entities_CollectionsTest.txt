1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
2:01115f7:  */
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:01115f7: 
1:bfd57d1: import java.util.*;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:bc9a61f: import org.apache.cassandra.utils.FBUtilities;
1:01115f7: 
1:6818ba9: import static org.junit.Assert.assertEquals;
1:6818ba9: 
1:01115f7: public class CollectionsTest extends CQLTester
1:01115f7: {
1:01115f7:     @Test
1:01115f7:     public void testMapBulkRemoval() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, text>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s(k, m) VALUES (?, ?)", 0, map("k1", "v1", "k2", "v2", "k3", "v3"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:             row(0, map("k1", "v1", "k2", "v2", "k3", "v3"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m = m - ? WHERE k = ?", set("k2"), 0);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:             row(0, map("k1", "v1", "k3", "v3"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m = m + ?, m = m - ? WHERE k = ?", map("k4", "v4"), set("k3"), 0);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:             row(0, map("k1", "v1", "k4", "v4"))
1:01115f7:         );
1:01115f7:     }
1:2106542: 
1:bc9a61f:     @Test
1:01115f7:     public void testInvalidCollectionsMix() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>, s set<text>, m map<text, text>)");
1:01115f7: 
1:01115f7:         // Note: we force the non-prepared form for some of those tests because a list and a set
1:01115f7:         // have the same serialized format in practice and CQLTester don't validate that the type
1:01115f7:         // of what's passed as a value in the prepared case, so the queries would work (which is ok,
1:01115f7:         // CQLTester is just a "dumb" client).
1:01115f7: 
1:01115f7:         assertInvalid("UPDATE %s SET l = l + { 'a', 'b' } WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s SET l = l - { 'a', 'b' } WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s SET l = l + ? WHERE k = 0", map("a", "b", "c", "d"));
1:01115f7:         assertInvalid("UPDATE %s SET l = l - ? WHERE k = 0", map("a", "b", "c", "d"));
1:01115f7: 
1:01115f7:         assertInvalid("UPDATE %s SET s = s + [ 'a', 'b' ] WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s SET s = s - [ 'a', 'b' ] WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s SET s = s + ? WHERE k = 0", map("a", "b", "c", "d"));
1:01115f7:         assertInvalid("UPDATE %s SET s = s - ? WHERE k = 0", map("a", "b", "c", "d"));
1:01115f7: 
1:01115f7:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", list("a", "b"));
1:01115f7:         assertInvalid("UPDATE %s SET m = m - [ 'a', 'b' ] WHERE k = 0");
1:01115f7:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", set("a", "b"));
1:01115f7:         assertInvalid("UPDATE %s SET m = m - ? WHERE k = 0", map("a", "b", "c", "d"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testSets() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set("v1", "v2", "v3", "v4"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:             row(set("v1", "v2", "v3", "v4"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("DELETE s[?] FROM %s WHERE k = 0", "v1");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:                    row(set("v2", "v3", "v4"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         // Full overwrite
1:01115f7:         execute("UPDATE %s SET s = ? WHERE k = 0", set("v6", "v5"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:                    row(set("v5", "v6"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET s = s + ? WHERE k = 0", set("v7"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:                    row(set("v5", "v6", "v7"))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET s = s - ? WHERE k = 0", set("v6", "v5"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:                    row(set("v7"))
1:01115f7:         );
1:cfa90c0: 
1:cfa90c0:         execute("UPDATE %s SET s += ? WHERE k = 0", set("v5"));
1:cfa90c0:         execute("UPDATE %s SET s += ? WHERE k = 0", set("v6"));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:cfa90c0:                    row(set("v5", "v6", "v7"))
1:cfa90c0:         );
1:cfa90c0: 
1:cfa90c0:         execute("UPDATE %s SET s -= ? WHERE k = 0", set("v6", "v5"));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:cfa90c0:                    row(set("v7"))
1:cfa90c0:         );
1:01115f7: 
1:01115f7:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
1:01115f7: 
1:01115f7:         // Deleting an element that does not exist will succeed
1:01115f7:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
1:01115f7: 
1:01115f7:         execute("DELETE s FROM %s WHERE k = 0");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:01115f7:                    row((Object) null)
1:01115f7:         );
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testMaps() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, int>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map("v1", 1, "v2", 2));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:             row(map("v1", 1, "v2", 2))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m[?] = ?, m[?] = ? WHERE k = 0", "v3", 3, "v4", 4);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:             row(map("v1", 1, "v2", 2, "v3", 3, "v4", 4))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("DELETE m[?] FROM %s WHERE k = 0", "v1");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:             row(map("v2", 2, "v3", 3, "v4", 4))
1:01115f7:         );
1:01115f7: 
1:01115f7:         // Full overwrite
1:01115f7:         execute("UPDATE %s SET m = ? WHERE k = 0", map("v6", 6, "v5", 5));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row(map("v5", 5, "v6", 6))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map("v7", 7));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row(map("v5", 5, "v6", 6, "v7", 7))
1:01115f7:         );
1:01115f7: 
1:cfa90c0:         execute("UPDATE %s SET m = m - ? WHERE k = 0", set("v7"));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:cfa90c0:                    row(map("v5", 5, "v6", 6))
1:cfa90c0:         );
1:cfa90c0: 
1:cfa90c0:         execute("UPDATE %s SET m += ? WHERE k = 0", map("v7", 7));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:cfa90c0:                    row(map("v5", 5, "v6", 6, "v7", 7))
1:cfa90c0:         );
1:cfa90c0: 
1:cfa90c0:         execute("UPDATE %s SET m -= ? WHERE k = 0", set("v7"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row(map("v5", 5, "v6", 6))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("DELETE m[?] FROM %s WHERE k = 0", "v6");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row(map("v5", 5))
1:01115f7:         );
1:01115f7: 
1:01115f7:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row((Object) null)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // Deleting a non-existing key should succeed
1:01115f7:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:                    row((Object) null)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // The empty map is parsed as an empty set (because we don't have enough info at parsing
1:01115f7:         // time when we see a {}) and special cased later. This test checks this work properly
1:01115f7:         execute("UPDATE %s SET m = {} WHERE k = 0");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:01115f7:             row((Object)null)
1:01115f7:         );
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testLists() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list("v1", "v2", "v3"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v2", "v3")));
1:01115f7: 
1:01115f7:         execute("DELETE l[?] FROM %s WHERE k = 0", 1);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v3")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET l[?] = ? WHERE k = 0", 1, "v4");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v4")));
1:01115f7: 
1:01115f7:         // Full overwrite
1:01115f7:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v6", "v5"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET l = l + ? WHERE k = 0", list("v7", "v8"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5", "v7", "v8")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET l = ? + l WHERE k = 0", list("v9"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v5", "v7", "v8")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET l = l - ? WHERE k = 0", list("v5", "v8"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v7")));
1:01115f7: 
1:cfa90c0:         execute("UPDATE %s SET l += ? WHERE k = 0", list("v8"));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v7", "v8")));
1:cfa90c0: 
1:cfa90c0:         execute("UPDATE %s SET l -= ? WHERE k = 0", list("v6", "v8"));
1:cfa90c0: 
1:cfa90c0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v7")));
1:cfa90c0: 
1:01115f7:         execute("DELETE l FROM %s WHERE k = 0");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:01115f7: 
1:01115f7:         assertInvalidMessage("Attempted to delete an element from a list which is null",
1:01115f7:                              "DELETE l[0] FROM %s WHERE k=0 ");
1:01115f7: 
1:01115f7:         assertInvalidMessage("Attempted to set an element on a list which is null",
1:01115f7:                              "UPDATE %s SET l[0] = ? WHERE k=0", list("v10"));
1:01115f7: 
1:a991b64:         execute("UPDATE %s SET l = l - ? WHERE k=0", list("v11"));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testMapWithUnsetValues() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text,text>)");
1:01115f7:         // set up
1:01115f7:         Object m = map("k", "v");
1:01115f7:         execute("INSERT INTO %s (k, m) VALUES (10, ?)", m);
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:01115f7:                    row(m)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // test putting an unset map, should not delete the contents
1:01115f7:         execute("INSERT INTO %s (k, m) VALUES (10, ?)", unset());
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:01115f7:                    row(m)
1:01115f7:         );
1:01115f7:         // test unset variables in a map update operaiotn, should not delete the contents
1:01115f7:         execute("UPDATE %s SET m['k'] = ? WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:01115f7:                    row(m)
1:01115f7:         );
1:01115f7:         assertInvalidMessage("Invalid unset map key", "UPDATE %s SET m[?] = 'foo' WHERE k = 10", unset());
1:01115f7: 
1:01115f7:         // test unset value for map key
1:01115f7:         assertInvalidMessage("Invalid unset map key", "DELETE m[?] FROM %s WHERE k = 10", unset());
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testListWithUnsetValues() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1:01115f7:         // set up
1:01115f7:         Object l = list("foo", "foo");
1:01115f7:         execute("INSERT INTO %s (k, l) VALUES (10, ?)", l);
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:01115f7:                    row(l)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // replace list with unset value
1:01115f7:         execute("INSERT INTO %s (k, l) VALUES (10, ?)", unset());
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:01115f7:                    row(l)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // add to position
1:01115f7:         execute("UPDATE %s SET l[1] = ? WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:01115f7:                    row(l)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // set in index
1:01115f7:         assertInvalidMessage("Invalid unset value for list index", "UPDATE %s SET l[?] = 'foo' WHERE k = 10", unset());
1:01115f7: 
1:01115f7:         // remove element by index
1:01115f7:         execute("DELETE l[?] FROM %s WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:01115f7:                    row(l)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // remove all occurrences of element
1:01115f7:         execute("UPDATE %s SET l = l - ? WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:01115f7:                    row(l)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // select with in clause
1:01115f7:         assertInvalidMessage("Invalid unset value for column k", "SELECT * FROM %s WHERE k IN ?", unset());
1:01115f7:         assertInvalidMessage("Invalid unset value for column k", "SELECT * FROM %s WHERE k IN (?)", unset());
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testSetWithUnsetValues() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1:01115f7: 
1:01115f7:         Object s = set("bar", "baz", "foo");
1:01115f7:         execute("INSERT INTO %s (k, s) VALUES (10, ?)", s);
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:01115f7:                    row(s)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // replace set with unset value
1:01115f7:         execute("INSERT INTO %s (k, s) VALUES (10, ?)", unset());
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:01115f7:                    row(s)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // add to set
1:01115f7:         execute("UPDATE %s SET s = s + ? WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:01115f7:                    row(s)
1:01115f7:         );
1:01115f7: 
1:01115f7:         // remove all occurrences of element
1:01115f7:         execute("UPDATE %s SET s = s - ? WHERE k = 10", unset());
1:01115f7:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:01115f7:                    row(s)
1:01115f7:         );
1:01115f7:     }
1:01115f7: 
1:2106542:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.set_test()
1:2106542:      */
1:01115f7:     @Test
1:01115f7:     public void testSet() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s ( fn text, ln text, tags set<text>, PRIMARY KEY (fn, ln) )");
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + { 'foobar' } WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags - { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT tags FROM %s"),
1:01115f7:                    row(set("foo", "foobar")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = { 'a', 'c', 'b' } WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(set("a", "b", "c")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = { 'm', 'n' } WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(set("m", "n")));
1:01115f7: 
1:01115f7:         execute("DELETE tags['m'] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(set("n")));
1:01115f7: 
1:01115f7:         execute("DELETE tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertEmpty(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:01115f7:     }
1:01115f7: 
2:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.map_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testMap() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (fn text, ln text, m map<text, int>, PRIMARY KEY (fn, ln))");
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m['foo'] = 3 WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET m['bar'] = 4 WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET m['woot'] = 5 WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET m['bar'] = 6 WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("DELETE m['foo'] FROM %s WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT m FROM %s"),
1:01115f7:                    row(map("bar", 6, "woot", 5)));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m = { 'a' : 4 , 'c' : 3, 'b' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(map("a", 4, "b", 2, "c", 3)));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m =  { 'm' : 4 , 'n' : 1, 'o' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(map("m", 4, "n", 1, "o", 2)));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET m = {} WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertEmpty(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.list_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testList() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (fn text, ln text, tags list<text>, PRIMARY KEY (fn, ln))");
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + [ 'bar' ] WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7:         execute("UPDATE %s SET tags = tags + [ 'foobar' ] WHERE fn='Tom' AND ln='Bombadil'");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT tags FROM %s"),
1:01115f7:                    row(list("foo", "bar", "foo", "foobar")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = [ 'a', 'c', 'b', 'c' ] WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(list("a", "c", "b", "c")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = [ 'm', 'n' ] + tags WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(list("m", "n", "a", "c", "b", "c")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags[2] = 'foo', tags[4] = 'bar' WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(list("m", "n", "foo", "c", "bar", "c")));
1:01115f7: 
1:01115f7:         execute("DELETE tags[2] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(list("m", "n", "c", "bar", "c")));
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET tags = tags - [ 'bar' ] WHERE fn='Bilbo' AND ln='Baggins'");
1:01115f7:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:01115f7:                    row(list("m", "n", "c", "c")));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.multi_collection_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testMultiCollections() throws Throwable
1:01115f7:     {
1:01115f7:         UUID id = UUID.fromString("b017f48f-ae67-11e1-9096-005056c00008");
1:01115f7: 
1:01115f7:         createTable("CREATE TABLE %s (k uuid PRIMARY KEY, L list<int>, M map<text, int>, S set<int> )");
1:01115f7: 
1:01115f7:         execute("UPDATE %s SET L = [1, 3, 5] WHERE k = ?", id);
1:01115f7:         execute("UPDATE %s SET L = L + [7, 11, 13] WHERE k = ?;", id);
1:01115f7:         execute("UPDATE %s SET S = {1, 3, 5} WHERE k = ?", id);
1:01115f7:         execute("UPDATE %s SET S = S + {7, 11, 13} WHERE k = ?", id);
1:01115f7:         execute("UPDATE %s SET M = {'foo': 1, 'bar' : 3} WHERE k = ?", id);
1:01115f7:         execute("UPDATE %s SET M = M + {'foobar' : 4} WHERE k = ?", id);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT L, M, S FROM %s WHERE k = ?", id),
1:01115f7:                    row(list(1, 3, 5, 7, 11, 13),
1:01115f7:                        map("bar", 3, "foo", 1, "foobar", 4),
1:01115f7:                        set(1, 3, 5, 7, 11, 13)));
1:01115f7:     }
1:01115f7: 
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.collection_and_regular_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testCollectionAndRegularColumns() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>, c int)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, l, c) VALUES(3, [0, 1, 2], 4)");
1:01115f7:         execute("UPDATE %s SET l[0] = 1, c = 42 WHERE k = 3");
1:01115f7:         assertRows(execute("SELECT l, c FROM %s WHERE k = 3"),
1:01115f7:                    row(list(1, 1, 2), 42));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.multi_list_set_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testMultipleLists() throws Throwable
1:01115f7:     {
1:01115f7:         createTable(" CREATE TABLE %s (k int PRIMARY KEY, l1 list<int>, l2 list<int>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, l1, l2) VALUES (0, [1, 2, 3], [4, 5, 6])");
1:01115f7:         execute("UPDATE %s SET l2[1] = 42, l1[1] = 24  WHERE k = 0");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l1, l2 FROM %s WHERE k = 0"),
1:01115f7:                    row(list(1, 24, 3), list(4, 42, 6)));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test you can add columns in a table with collections (#4982 bug),
1:01115f7:      * migrated from cql_tests.py:TestCQL.alter_with_collections_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testAlterCollections() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (key int PRIMARY KEY, aset set<text>)");
1:01115f7:         execute("ALTER TABLE %s ADD c text");
1:01115f7:         execute("ALTER TABLE %s ADD alist list<text>");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.collection_compact_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testCompactCollections() throws Throwable
1:01115f7:     {
1:01115f7:         String tableName = KEYSPACE + "." + createTableName();
1:01115f7:         assertInvalid(String.format("CREATE TABLE %s (user ascii PRIMARY KEY, mails list < text >) WITH COMPACT STORAGE;", tableName));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.collection_function_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testFunctionsOnCollections() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l set<int>)");
1:01115f7: 
1:01115f7:         assertInvalid("SELECT ttl(l) FROM %s WHERE k = 0");
1:01115f7:         assertInvalid("SELECT writetime(l) FROM %s WHERE k = 0");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.bug_5376()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testInClauseWithCollections() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (key text, c bigint, v text, x set < text >, PRIMARY KEY(key, c) )");
1:01115f7: 
1:01115f7:         assertInvalid("select * from %s where key = 'foo' and c in (1,3,4)");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for bug #5795,
1:01115f7:      * migrated from cql_tests.py:TestCQL.nonpure_function_collection_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testNonPureFunctionCollection() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v list<timeuuid>)");
1:01115f7: 
1:01115f7:         // we just want to make sure this doesn't throw
1:01115f7:         execute("INSERT INTO %s (k, v) VALUES (0, [now()])");
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for 5805 bug,
1:01115f7:      * migrated from cql_tests.py:TestCQL.collection_flush_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testCollectionFlush() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<int>)");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, s) VALUES (1, {1})");
1:01115f7:         flush();
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, s) VALUES (1, {2})");
1:01115f7:         flush();
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(1, set(2)));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for 6276,
1:01115f7:      * migrated from cql_tests.py:TestCQL.drop_and_readd_collection_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testDropAndReaddCollection() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("create table %s (k int primary key, v set<text>, x int)");
1:01115f7:         execute("insert into %s (k, v) VALUES (0, {'fffffffff'})");
1:01115f7:         flush();
1:01115f7:         execute("alter table %s drop v");
1:01115f7:         assertInvalid("alter table %s add v set<int>");
1:01115f7:     }
1:6818ba9: 
1:2106542:     @Test
1:fa7103f:     public void testDropAndReaddDroppedCollection() throws Throwable
19:f797bfa:     {
1:fa7103f:         createTable("create table %s (k int primary key, v frozen<set<text>>, x int)");
1:f797bfa:         execute("insert into %s (k, v) VALUES (0, {'fffffffff'})");
3:f797bfa:         flush();
1:f797bfa:         execute("alter table %s drop v");
1:fa7103f:         execute("alter table %s add v set<int>");
1:01115f7:     }
1:6818ba9: 
1:6818ba9:     @Test
1:6818ba9:     public void testMapWithLargePartition() throws Throwable
1:6818ba9:     {
1:6818ba9:         Random r = new Random();
1:6818ba9:         long seed = System.nanoTime();
1:6818ba9:         System.out.println("Seed " + seed);
1:6818ba9:         r.setSeed(seed);
1:6818ba9: 
1:6818ba9:         int len = (1024 * 1024)/100;
1:6818ba9:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties map<int, text>) with compression = {}");
1:6818ba9: 
1:6818ba9:         final int numKeys = 200;
1:6818ba9:         for (int i = 0; i < numKeys; i++)
1:6818ba9:         {
1:6818ba9:             byte[] b = new byte[len];
1:6818ba9:             r.nextBytes(b);
1:6818ba9:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, new String(b));
1:6818ba9:         }
1:6818ba9: 
1:6818ba9:         flush();
1:6818ba9: 
1:6818ba9:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:6818ba9:         assertEquals(1, rows.length);
1:6818ba9:         assertEquals(numKeys, ((Map) rows[0][0]).size());
1:6818ba9:     }
1:6818ba9: 
1:6818ba9:     @Test
1:6818ba9:     public void testMapWithTwoSStables() throws Throwable
1:6818ba9:     {
1:6818ba9:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties map<int, text>) with compression = {}");
1:6818ba9: 
1:6818ba9:         final int numKeys = 100;
1:6818ba9:         for (int i = 0; i < numKeys; i++)
1:6818ba9:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, "prop_" + Integer.toString(i));
1:6818ba9: 
1:6818ba9:         flush();
1:6818ba9: 
1:6818ba9:         for (int i = numKeys; i < 2*numKeys; i++)
1:6818ba9:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, "prop_" + Integer.toString(i));
1:6818ba9: 
1:6818ba9:         flush();
1:6818ba9: 
1:6818ba9:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:6818ba9:         assertEquals(1, rows.length);
1:6818ba9:         assertEquals(numKeys * 2, ((Map) rows[0][0]).size());
1:6818ba9:     }
1:6818ba9: 
1:6818ba9:     @Test
1:6818ba9:     public void testSetWithTwoSStables() throws Throwable
1:6818ba9:     {
1:6818ba9:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties set<text>) with compression = {}");
1:6818ba9: 
1:6818ba9:         final int numKeys = 100;
1:6818ba9:         for (int i = 0; i < numKeys; i++)
1:6818ba9:             execute("UPDATE %s SET properties = properties + ? WHERE userid = 'user'", set("prop_" + Integer.toString(i)));
1:6818ba9: 
1:6818ba9:         flush();
1:6818ba9: 
1:6818ba9:         for (int i = numKeys; i < 2*numKeys; i++)
1:6818ba9:             execute("UPDATE %s SET properties = properties + ? WHERE userid = 'user'", set("prop_" + Integer.toString(i)));
1:6818ba9: 
1:6818ba9:         flush();
1:01115f7: 
1:6818ba9:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:6818ba9:         assertEquals(1, rows.length);
1:6818ba9:         assertEquals(numKeys * 2, ((Set) rows[0][0]).size());
1:6818ba9:     }
1:01115f7: 
1:01115f7:     @Test
1:2106542:     public void testUpdateStaticList() throws Throwable
1:2106542:     {
1:2106542:         createTable("CREATE TABLE %s (k1 text, k2 text, s_list list<int> static, PRIMARY KEY (k1, k2))");
1:2106542: 
1:2106542:         execute("insert into %s (k1, k2) VALUES ('a','b')");
1:2106542:         execute("update %s set s_list = s_list + [0] where k1='a'");
1:2106542:         assertRows(execute("select s_list from %s where k1='a'"), row(list(0)));
1:2106542: 
1:2106542:         execute("update %s set s_list[0] = 100 where k1='a'");
1:2106542:         assertRows(execute("select s_list from %s where k1='a'"), row(list(100)));
1:2106542: 
1:2106542:         execute("update %s set s_list = s_list + [0] where k1='a'");
1:2106542:         assertRows(execute("select s_list from %s where k1='a'"), row(list(100, 0)));
1:2106542: 
1:2106542:         execute("delete s_list[0] from %s where k1='a'");
1:2106542:         assertRows(execute("select s_list from %s where k1='a'"), row(list(0)));
1:2106542:     }
1:bc9a61f: 
1:6dc595d:     @Test
1:bc9a61f:     public void testListWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1:bc9a61f: 
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 2);
1:bc9a61f:         String largeText2 = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list(largeText, "v2"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE l[?] FROM %s WHERE k = 0", 0);
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v2")));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET l[?] = ? WHERE k = 0", 0, largeText);
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText)));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v1", largeText));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET l = l + ? WHERE k = 0", list("v2", largeText2));
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText, "v2", largeText2)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET l = l - ? WHERE k = 0", list(largeText, "v2"));
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText2)));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE l FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, l) VALUES (0, ['" + largeText + "', 'v2'])");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:bc9a61f:     }
1:bc9a61f: 
1:bc9a61f:     @Test
1:bc9a61f:     public void testMapsWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 2);
1:bc9a61f:         String largeText2 = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, text>)");
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map("k1", largeText, largeText, "v2"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k1", largeText, largeText, "v2")));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET m[?] = ? WHERE k = 0", "k3", largeText);
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k1", largeText, largeText, "v2", "k3", largeText)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET m[?] = ? WHERE k = 0", largeText2, "v4");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k1", largeText, largeText, "v2", "k3", largeText, largeText2, "v4")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE m[?] FROM %s WHERE k = 0", "k1");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map(largeText, "v2", "k3", largeText, largeText2, "v4")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE m[?] FROM %s WHERE k = 0", largeText2);
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map(largeText, "v2", "k3", largeText)));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET m = ? WHERE k = 0", map("k5", largeText, largeText, "v6"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k5", largeText, largeText, "v6")));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map("k7", largeText));
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k5", largeText, largeText, "v6", "k7", largeText)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map(largeText2, "v8"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map("k5", largeText, largeText, "v6", "k7", largeText, largeText2, "v8")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE m FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, m) VALUES (0, {'" + largeText + "' : 'v1', 'k2' : '" + largeText + "'})");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:bc9a61f:                    row(map(largeText, "v1", "k2", largeText)));
1:bc9a61f:     }
1:bc9a61f: 
1:bc9a61f:     @Test
1:bc9a61f:     public void testSetsWithElementsBiggerThan64K() throws Throwable
1:bc9a61f:     {
1:bc9a61f:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1:bc9a61f: 
1:bc9a61f:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 1);
1:bc9a61f:         String largeText = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:bc9a61f:         Arrays.fill(bytes, (byte) 2);
1:bc9a61f:         String largeText2 = new String(bytes);
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set(largeText, "v2"));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v2")));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE s[?] FROM %s WHERE k = 0", largeText);
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v2")));
1:bc9a61f: 
1:bc9a61f:         // Full overwrite
1:bc9a61f:         execute("UPDATE %s SET s = ? WHERE k = 0", set("v1", largeText));
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET s = s + ? WHERE k = 0", set("v2", largeText2));
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText, "v2", largeText2)));
1:bc9a61f: 
1:bc9a61f:         execute("UPDATE %s SET s = s - ? WHERE k = 0", set(largeText, "v2"));
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText2)));
1:bc9a61f: 
1:bc9a61f:         execute("DELETE s FROM %s WHERE k = 0");
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row((Object) null));
1:bc9a61f: 
1:bc9a61f:         execute("INSERT INTO %s(k, s) VALUES (0, {'" + largeText + "', 'v2'})");
1:bc9a61f:         flush();
1:bc9a61f: 
1:bc9a61f:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v2")));
1:bc9a61f:     }
1:4c7b06b: 
1:4c7b06b:     @Test
1:4c7b06b:     public void testRemovalThroughUpdate() throws Throwable
1:4c7b06b:     {
1:4c7b06b:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>)");
1:4c7b06b: 
1:4c7b06b:          execute("INSERT INTO %s(k, l) VALUES(?, ?)", 0, list(1, 2, 3));
1:4c7b06b:          assertRows(execute("SELECT * FROM %s"), row(0, list(1, 2, 3)));
1:4c7b06b: 
1:4c7b06b:          execute("UPDATE %s SET l[0] = null WHERE k=0");
1:4c7b06b:          assertRows(execute("SELECT * FROM %s"), row(0, list(2, 3)));
1:4c7b06b:     }
1:2106542: 
18:f797bfa:     @Test
1:6dc595d:     public void testInvalidInputForList() throws Throwable
1:6dc595d:     {
1:6dc595d:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, l list<text>)");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a list",
1:6dc595d:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, "test");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a list",
1:6dc595d:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a list",
1:6dc595d:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, "");
1:6dc595d:         assertInvalidMessage("The data cannot be deserialized as a list",
1:6dc595d:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, -1);
1:6dc595d:     }
1:6dc595d: 
1:6dc595d:     @Test
1:6dc595d:     public void testInvalidInputForSet() throws Throwable
1:6dc595d:     {
1:6dc595d:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, s set<text>)");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a set",
1:6dc595d:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, "test");
1:6dc595d:         assertInvalidMessage("String didn't validate.",
1:6dc595d:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a set",
1:6dc595d:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, "");
1:6dc595d:         assertInvalidMessage("The data cannot be deserialized as a set",
1:6dc595d:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, -1);
1:6dc595d:     }
1:6dc595d: 
1:6dc595d:     @Test
1:6dc595d:     public void testInvalidInputForMap() throws Throwable
1:6dc595d:     {
1:6dc595d:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, m map<text, text>)");
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a map",
1:6dc595d:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, "test");
1:6dc595d:         assertInvalidMessage("String didn't validate.",
1:6dc595d:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:6dc595d:         assertInvalidMessage("Not enough bytes to read a map",
1:6dc595d:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, "");
1:6dc595d:         assertInvalidMessage("The data cannot be deserialized as a map",
1:6dc595d:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, -1);
1:6dc595d:     }
19:f797bfa: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:bfd57d1
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
commit:7bef418
commit:b7fc5dc
commit:6dc595d
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testInvalidInputForList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, l list<text>)");
1:         assertInvalidMessage("Not enough bytes to read a list",
1:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, "test");
1:         assertInvalidMessage("Not enough bytes to read a list",
1:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:         assertInvalidMessage("Not enough bytes to read a list",
1:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, "");
1:         assertInvalidMessage("The data cannot be deserialized as a list",
1:                              "INSERT INTO %s (pk, l) VALUES (?, ?)", 1, -1);
1:     }
1: 
1:     @Test
1:     public void testInvalidInputForSet() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, s set<text>)");
1:         assertInvalidMessage("Not enough bytes to read a set",
1:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, "test");
1:         assertInvalidMessage("String didn't validate.",
1:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:         assertInvalidMessage("Not enough bytes to read a set",
1:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, "");
1:         assertInvalidMessage("The data cannot be deserialized as a set",
1:                              "INSERT INTO %s (pk, s) VALUES (?, ?)", 1, -1);
1:     }
1: 
1:     @Test
1:     public void testInvalidInputForMap() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s(pk int PRIMARY KEY, m map<text, text>)");
1:         assertInvalidMessage("Not enough bytes to read a map",
1:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, "test");
1:         assertInvalidMessage("String didn't validate.",
1:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, Long.MAX_VALUE);
1:         assertInvalidMessage("Not enough bytes to read a map",
1:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, "");
1:         assertInvalidMessage("The data cannot be deserialized as a map",
1:                              "INSERT INTO %s (pk, m) VALUES (?, ?)", 1, -1);
1:     }
commit:bc9a61f
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testListWithElementsBiggerThan64K() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1: 
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1: 
1:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 2);
1:         String largeText2 = new String(bytes);
1: 
1:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list(largeText, "v2"));
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1: 
1:         execute("DELETE l[?] FROM %s WHERE k = 0", 0);
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v2")));
1: 
1:         execute("UPDATE %s SET l[?] = ? WHERE k = 0", 0, largeText);
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText)));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v1", largeText));
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText)));
1: 
1:         execute("UPDATE %s SET l = l + ? WHERE k = 0", list("v2", largeText2));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText, "v2", largeText2)));
1: 
1:         execute("UPDATE %s SET l = l - ? WHERE k = 0", list(largeText, "v2"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", largeText2)));
1: 
1:         execute("DELETE l FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, l) VALUES (0, ['" + largeText + "', 'v2'])");
1:         flush();
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list(largeText, "v2")));
1:     }
1: 
1:     @Test
1:     public void testMapsWithElementsBiggerThan64K() throws Throwable
1:     {
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 2);
1:         String largeText2 = new String(bytes);
1: 
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, text>)");
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map("k1", largeText, largeText, "v2"));
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k1", largeText, largeText, "v2")));
1: 
1:         execute("UPDATE %s SET m[?] = ? WHERE k = 0", "k3", largeText);
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k1", largeText, largeText, "v2", "k3", largeText)));
1: 
1:         execute("UPDATE %s SET m[?] = ? WHERE k = 0", largeText2, "v4");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k1", largeText, largeText, "v2", "k3", largeText, largeText2, "v4")));
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 0", "k1");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map(largeText, "v2", "k3", largeText, largeText2, "v4")));
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 0", largeText2);
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map(largeText, "v2", "k3", largeText)));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET m = ? WHERE k = 0", map("k5", largeText, largeText, "v6"));
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k5", largeText, largeText, "v6")));
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map("k7", largeText));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k5", largeText, largeText, "v6", "k7", largeText)));
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map(largeText2, "v8"));
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("k5", largeText, largeText, "v6", "k7", largeText, largeText2, "v8")));
1: 
1:         execute("DELETE m FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (0, {'" + largeText + "' : 'v1', 'k2' : '" + largeText + "'})");
1:         flush();
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map(largeText, "v1", "k2", largeText)));
1:     }
1: 
1:     @Test
1:     public void testSetsWithElementsBiggerThan64K() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1: 
1:         byte[] bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 1);
1:         String largeText = new String(bytes);
1: 
1:         bytes = new byte[FBUtilities.MAX_UNSIGNED_SHORT + 10];
1:         Arrays.fill(bytes, (byte) 2);
1:         String largeText2 = new String(bytes);
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set(largeText, "v2"));
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v2")));
1: 
1:         execute("DELETE s[?] FROM %s WHERE k = 0", largeText);
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v2")));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET s = ? WHERE k = 0", set("v1", largeText));
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText)));
1: 
1:         execute("UPDATE %s SET s = s + ? WHERE k = 0", set("v2", largeText2));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText, "v2", largeText2)));
1: 
1:         execute("UPDATE %s SET s = s - ? WHERE k = 0", set(largeText, "v2"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set("v1", largeText2)));
1: 
1:         execute("DELETE s FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, {'" + largeText + "', 'v2'})");
1:         flush();
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"), row(set(largeText, "v2")));
1:     }
author:Alex Petrov
-------------------------------------------------------------------------------
commit:cfa90c0
/////////////////////////////////////////////////////////////////////////
1:         execute("UPDATE %s SET s += ? WHERE k = 0", set("v5"));
1:         execute("UPDATE %s SET s += ? WHERE k = 0", set("v6"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v5", "v6", "v7"))
1:         );
1: 
1:         execute("UPDATE %s SET s -= ? WHERE k = 0", set("v6", "v5"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v7"))
1:         );
1: 
/////////////////////////////////////////////////////////////////////////
1:         execute("UPDATE %s SET m = m - ? WHERE k = 0", set("v7"));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5, "v6", 6))
1:         );
1: 
1:         execute("UPDATE %s SET m += ? WHERE k = 0", map("v7", 7));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5, "v6", 6, "v7", 7))
1:         );
1: 
1:         execute("UPDATE %s SET m -= ? WHERE k = 0", set("v7"));
/////////////////////////////////////////////////////////////////////////
1:         execute("UPDATE %s SET l += ? WHERE k = 0", list("v8"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v7", "v8")));
1: 
1:         execute("UPDATE %s SET l -= ? WHERE k = 0", list("v6", "v8"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v7")));
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4c7b06b
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testRemovalThroughUpdate() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>)");
1: 
1:          execute("INSERT INTO %s(k, l) VALUES(?, ?)", 0, list(1, 2, 3));
1:          assertRows(execute("SELECT * FROM %s"), row(0, list(1, 2, 3)));
1: 
1:          execute("UPDATE %s SET l[0] = null WHERE k=0");
1:          assertRows(execute("SELECT * FROM %s"), row(0, list(2, 3)));
1:     }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:         execute("UPDATE %s SET l = l - ? WHERE k=0", list("v11"));
author:blerer
-------------------------------------------------------------------------------
commit:cc0038b
commit:ec4b4d4
author:Brett Snyder
-------------------------------------------------------------------------------
commit:2106542
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Test for 9838.
1:      */
1:     @Test
1:     public void testUpdateStaticList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k1 text, k2 text, s_list list<int> static, PRIMARY KEY (k1, k2))");
1: 
1:         execute("insert into %s (k1, k2) VALUES ('a','b')");
1:         execute("update %s set s_list = s_list + [0] where k1='a'");
1:         assertRows(execute("select s_list from %s where k1='a'"), row(list(0)));
1: 
1:         execute("update %s set s_list[0] = 100 where k1='a'");
1:         assertRows(execute("select s_list from %s where k1='a'"), row(list(100)));
1: 
1:         execute("update %s set s_list = s_list + [0] where k1='a'");
1:         assertRows(execute("select s_list from %s where k1='a'"), row(list(100, 0)));
1: 
1:         execute("delete s_list[0] from %s where k1='a'");
1:         assertRows(execute("select s_list from %s where k1='a'"), row(list(0)));
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:6818ba9
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import java.util.Random;
0: import java.util.Set;
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testMapWithLargePartition() throws Throwable
1:     {
1:         Random r = new Random();
1:         long seed = System.nanoTime();
1:         System.out.println("Seed " + seed);
1:         r.setSeed(seed);
1: 
1:         int len = (1024 * 1024)/100;
1:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties map<int, text>) with compression = {}");
1: 
1:         final int numKeys = 200;
1:         for (int i = 0; i < numKeys; i++)
1:         {
1:             byte[] b = new byte[len];
1:             r.nextBytes(b);
1:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, new String(b));
1:         }
1: 
1:         flush();
1: 
1:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:         assertEquals(1, rows.length);
1:         assertEquals(numKeys, ((Map) rows[0][0]).size());
1:     }
1: 
1:     @Test
1:     public void testMapWithTwoSStables() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties map<int, text>) with compression = {}");
1: 
1:         final int numKeys = 100;
1:         for (int i = 0; i < numKeys; i++)
1:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, "prop_" + Integer.toString(i));
1: 
1:         flush();
1: 
1:         for (int i = numKeys; i < 2*numKeys; i++)
1:             execute("UPDATE %s SET properties[?] = ? WHERE userid = 'user'", i, "prop_" + Integer.toString(i));
1: 
1:         flush();
1: 
1:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:         assertEquals(1, rows.length);
1:         assertEquals(numKeys * 2, ((Map) rows[0][0]).size());
1:     }
1: 
1:     @Test
1:     public void testSetWithTwoSStables() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, properties set<text>) with compression = {}");
1: 
1:         final int numKeys = 100;
1:         for (int i = 0; i < numKeys; i++)
1:             execute("UPDATE %s SET properties = properties + ? WHERE userid = 'user'", set("prop_" + Integer.toString(i)));
1: 
1:         flush();
1: 
1:         for (int i = numKeys; i < 2*numKeys; i++)
1:             execute("UPDATE %s SET properties = properties + ? WHERE userid = 'user'", set("prop_" + Integer.toString(i)));
1: 
1:         flush();
1: 
1:         Object[][] rows = getRows(execute("SELECT properties from %s where userid = 'user'"));
1:         assertEquals(1, rows.length);
1:         assertEquals(numKeys * 2, ((Set) rows[0][0]).size());
1:     }
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.validation.entities;
1: 
0: import java.util.UUID;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: public class CollectionsTest extends CQLTester
1: {
1:     @Test
1:     public void testMapBulkRemoval() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, text>)");
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (?, ?)", 0, map("k1", "v1", "k2", "v2", "k3", "v3"));
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(0, map("k1", "v1", "k2", "v2", "k3", "v3"))
1:         );
1: 
1:         execute("UPDATE %s SET m = m - ? WHERE k = ?", set("k2"), 0);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(0, map("k1", "v1", "k3", "v3"))
1:         );
1: 
1:         execute("UPDATE %s SET m = m + ?, m = m - ? WHERE k = ?", map("k4", "v4"), set("k3"), 0);
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:             row(0, map("k1", "v1", "k4", "v4"))
1:         );
1:     }
1: 
1:     @Test
1:     public void testInvalidCollectionsMix() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>, s set<text>, m map<text, text>)");
1: 
1:         // Note: we force the non-prepared form for some of those tests because a list and a set
1:         // have the same serialized format in practice and CQLTester don't validate that the type
1:         // of what's passed as a value in the prepared case, so the queries would work (which is ok,
1:         // CQLTester is just a "dumb" client).
1: 
1:         assertInvalid("UPDATE %s SET l = l + { 'a', 'b' } WHERE k = 0");
1:         assertInvalid("UPDATE %s SET l = l - { 'a', 'b' } WHERE k = 0");
1:         assertInvalid("UPDATE %s SET l = l + ? WHERE k = 0", map("a", "b", "c", "d"));
1:         assertInvalid("UPDATE %s SET l = l - ? WHERE k = 0", map("a", "b", "c", "d"));
1: 
1:         assertInvalid("UPDATE %s SET s = s + [ 'a', 'b' ] WHERE k = 0");
1:         assertInvalid("UPDATE %s SET s = s - [ 'a', 'b' ] WHERE k = 0");
1:         assertInvalid("UPDATE %s SET s = s + ? WHERE k = 0", map("a", "b", "c", "d"));
1:         assertInvalid("UPDATE %s SET s = s - ? WHERE k = 0", map("a", "b", "c", "d"));
1: 
1:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", list("a", "b"));
1:         assertInvalid("UPDATE %s SET m = m - [ 'a', 'b' ] WHERE k = 0");
1:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", set("a", "b"));
1:         assertInvalid("UPDATE %s SET m = m - ? WHERE k = 0", map("a", "b", "c", "d"));
1:     }
1: 
1:     @Test
1:     public void testSets() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1: 
1:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set("v1", "v2", "v3", "v4"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:             row(set("v1", "v2", "v3", "v4"))
1:         );
1: 
1:         execute("DELETE s[?] FROM %s WHERE k = 0", "v1");
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v2", "v3", "v4"))
1:         );
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET s = ? WHERE k = 0", set("v6", "v5"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v5", "v6"))
1:         );
1: 
1:         execute("UPDATE %s SET s = s + ? WHERE k = 0", set("v7"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v5", "v6", "v7"))
1:         );
1: 
1:         execute("UPDATE %s SET s = s - ? WHERE k = 0", set("v6", "v5"));
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row(set("v7"))
1:         );
1: 
1:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
1: 
1:         // Deleting an element that does not exist will succeed
1:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
1: 
1:         execute("DELETE s FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
1:                    row((Object) null)
1:         );
1:     }
1: 
1:     @Test
1:     public void testMaps() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, int>)");
1: 
1:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map("v1", 1, "v2", 2));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:             row(map("v1", 1, "v2", 2))
1:         );
1: 
1:         execute("UPDATE %s SET m[?] = ?, m[?] = ? WHERE k = 0", "v3", 3, "v4", 4);
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:             row(map("v1", 1, "v2", 2, "v3", 3, "v4", 4))
1:         );
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 0", "v1");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:             row(map("v2", 2, "v3", 3, "v4", 4))
1:         );
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET m = ? WHERE k = 0", map("v6", 6, "v5", 5));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5, "v6", 6))
1:         );
1: 
1:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map("v7", 7));
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5, "v6", 6, "v7", 7))
1:         );
1: 
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v7");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5, "v6", 6))
1:         );
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 0", "v6");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row(map("v5", 5))
1:         );
1: 
1:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row((Object) null)
1:         );
1: 
1:         // Deleting a non-existing key should succeed
1:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:                    row((Object) null)
1:         );
1: 
1:         // The empty map is parsed as an empty set (because we don't have enough info at parsing
1:         // time when we see a {}) and special cased later. This test checks this work properly
1:         execute("UPDATE %s SET m = {} WHERE k = 0");
1: 
1:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
1:             row((Object)null)
1:         );
1:     }
1: 
1:     @Test
1:     public void testLists() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1: 
1:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list("v1", "v2", "v3"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v2", "v3")));
1: 
1:         execute("DELETE l[?] FROM %s WHERE k = 0", 1);
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v3")));
1: 
1:         execute("UPDATE %s SET l[?] = ? WHERE k = 0", 1, "v4");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v4")));
1: 
1:         // Full overwrite
1:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v6", "v5"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5")));
1: 
1:         execute("UPDATE %s SET l = l + ? WHERE k = 0", list("v7", "v8"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5", "v7", "v8")));
1: 
1:         execute("UPDATE %s SET l = ? + l WHERE k = 0", list("v9"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v5", "v7", "v8")));
1: 
1:         execute("UPDATE %s SET l = l - ? WHERE k = 0", list("v5", "v8"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v7")));
1: 
1:         execute("DELETE l FROM %s WHERE k = 0");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1: 
1:         assertInvalidMessage("Attempted to delete an element from a list which is null",
1:                              "DELETE l[0] FROM %s WHERE k=0 ");
1: 
1:         assertInvalidMessage("Attempted to set an element on a list which is null",
1:                              "UPDATE %s SET l[0] = ? WHERE k=0", list("v10"));
1: 
0:         execute("UPDATE %s SET l = l - ? WHERE k=0 ", list("v11"));
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:     }
1: 
1:     @Test
1:     public void testMapWithUnsetValues() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text,text>)");
1:         // set up
1:         Object m = map("k", "v");
1:         execute("INSERT INTO %s (k, m) VALUES (10, ?)", m);
1:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:                    row(m)
1:         );
1: 
1:         // test putting an unset map, should not delete the contents
1:         execute("INSERT INTO %s (k, m) VALUES (10, ?)", unset());
1:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:                    row(m)
1:         );
1:         // test unset variables in a map update operaiotn, should not delete the contents
1:         execute("UPDATE %s SET m['k'] = ? WHERE k = 10", unset());
1:         assertRows(execute("SELECT m FROM %s WHERE k = 10"),
1:                    row(m)
1:         );
1:         assertInvalidMessage("Invalid unset map key", "UPDATE %s SET m[?] = 'foo' WHERE k = 10", unset());
1: 
1:         // test unset value for map key
1:         assertInvalidMessage("Invalid unset map key", "DELETE m[?] FROM %s WHERE k = 10", unset());
1:     }
1: 
1:     @Test
1:     public void testListWithUnsetValues() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
1:         // set up
1:         Object l = list("foo", "foo");
1:         execute("INSERT INTO %s (k, l) VALUES (10, ?)", l);
1:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:                    row(l)
1:         );
1: 
1:         // replace list with unset value
1:         execute("INSERT INTO %s (k, l) VALUES (10, ?)", unset());
1:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:                    row(l)
1:         );
1: 
1:         // add to position
1:         execute("UPDATE %s SET l[1] = ? WHERE k = 10", unset());
1:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:                    row(l)
1:         );
1: 
1:         // set in index
1:         assertInvalidMessage("Invalid unset value for list index", "UPDATE %s SET l[?] = 'foo' WHERE k = 10", unset());
1: 
1:         // remove element by index
1:         execute("DELETE l[?] FROM %s WHERE k = 10", unset());
1:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:                    row(l)
1:         );
1: 
1:         // remove all occurrences of element
1:         execute("UPDATE %s SET l = l - ? WHERE k = 10", unset());
1:         assertRows(execute("SELECT l FROM %s WHERE k = 10"),
1:                    row(l)
1:         );
1: 
1:         // select with in clause
1:         assertInvalidMessage("Invalid unset value for column k", "SELECT * FROM %s WHERE k IN ?", unset());
1:         assertInvalidMessage("Invalid unset value for column k", "SELECT * FROM %s WHERE k IN (?)", unset());
1:     }
1: 
1:     @Test
1:     public void testSetWithUnsetValues() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
1: 
1:         Object s = set("bar", "baz", "foo");
1:         execute("INSERT INTO %s (k, s) VALUES (10, ?)", s);
1:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:                    row(s)
1:         );
1: 
1:         // replace set with unset value
1:         execute("INSERT INTO %s (k, s) VALUES (10, ?)", unset());
1:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:                    row(s)
1:         );
1: 
1:         // add to set
1:         execute("UPDATE %s SET s = s + ? WHERE k = 10", unset());
1:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:                    row(s)
1:         );
1: 
1:         // remove all occurrences of element
1:         execute("UPDATE %s SET s = s - ? WHERE k = 10", unset());
1:         assertRows(execute("SELECT s FROM %s WHERE k = 10"),
1:                    row(s)
1:         );
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.set_test()
1:      */
1:     @Test
1:     public void testSet() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s ( fn text, ln text, tags set<text>, PRIMARY KEY (fn, ln) )");
1: 
1:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + { 'foobar' } WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags - { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
1: 
1:         assertRows(execute("SELECT tags FROM %s"),
1:                    row(set("foo", "foobar")));
1: 
1:         execute("UPDATE %s SET tags = { 'a', 'c', 'b' } WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(set("a", "b", "c")));
1: 
1:         execute("UPDATE %s SET tags = { 'm', 'n' } WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(set("m", "n")));
1: 
1:         execute("DELETE tags['m'] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(set("n")));
1: 
1:         execute("DELETE tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertEmpty(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.map_test()
1:      */
1:     @Test
1:     public void testMap() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (fn text, ln text, m map<text, int>, PRIMARY KEY (fn, ln))");
1: 
1:         execute("UPDATE %s SET m['foo'] = 3 WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET m['bar'] = 4 WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET m['woot'] = 5 WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET m['bar'] = 6 WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("DELETE m['foo'] FROM %s WHERE fn='Tom' AND ln='Bombadil'");
1: 
1:         assertRows(execute("SELECT m FROM %s"),
1:                    row(map("bar", 6, "woot", 5)));
1: 
1:         execute("UPDATE %s SET m = { 'a' : 4 , 'c' : 3, 'b' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(map("a", 4, "b", 2, "c", 3)));
1: 
1:         execute("UPDATE %s SET m =  { 'm' : 4 , 'n' : 1, 'o' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(map("m", 4, "n", 1, "o", 2)));
1: 
1:         execute("UPDATE %s SET m = {} WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertEmpty(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.list_test()
1:      */
1:     @Test
1:     public void testList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (fn text, ln text, tags list<text>, PRIMARY KEY (fn, ln))");
1: 
1:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + [ 'bar' ] WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
1:         execute("UPDATE %s SET tags = tags + [ 'foobar' ] WHERE fn='Tom' AND ln='Bombadil'");
1: 
1:         assertRows(execute("SELECT tags FROM %s"),
1:                    row(list("foo", "bar", "foo", "foobar")));
1: 
1:         execute("UPDATE %s SET tags = [ 'a', 'c', 'b', 'c' ] WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(list("a", "c", "b", "c")));
1: 
1:         execute("UPDATE %s SET tags = [ 'm', 'n' ] + tags WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(list("m", "n", "a", "c", "b", "c")));
1: 
1:         execute("UPDATE %s SET tags[2] = 'foo', tags[4] = 'bar' WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(list("m", "n", "foo", "c", "bar", "c")));
1: 
1:         execute("DELETE tags[2] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(list("m", "n", "c", "bar", "c")));
1: 
1:         execute("UPDATE %s SET tags = tags - [ 'bar' ] WHERE fn='Bilbo' AND ln='Baggins'");
1:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
1:                    row(list("m", "n", "c", "c")));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.multi_collection_test()
1:      */
1:     @Test
1:     public void testMultiCollections() throws Throwable
1:     {
1:         UUID id = UUID.fromString("b017f48f-ae67-11e1-9096-005056c00008");
1: 
1:         createTable("CREATE TABLE %s (k uuid PRIMARY KEY, L list<int>, M map<text, int>, S set<int> )");
1: 
1:         execute("UPDATE %s SET L = [1, 3, 5] WHERE k = ?", id);
1:         execute("UPDATE %s SET L = L + [7, 11, 13] WHERE k = ?;", id);
1:         execute("UPDATE %s SET S = {1, 3, 5} WHERE k = ?", id);
1:         execute("UPDATE %s SET S = S + {7, 11, 13} WHERE k = ?", id);
1:         execute("UPDATE %s SET M = {'foo': 1, 'bar' : 3} WHERE k = ?", id);
1:         execute("UPDATE %s SET M = M + {'foobar' : 4} WHERE k = ?", id);
1: 
1:         assertRows(execute("SELECT L, M, S FROM %s WHERE k = ?", id),
1:                    row(list(1, 3, 5, 7, 11, 13),
1:                        map("bar", 3, "foo", 1, "foobar", 4),
1:                        set(1, 3, 5, 7, 11, 13)));
1:     }
1: 
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.collection_and_regular_test()
1:      */
1:     @Test
1:     public void testCollectionAndRegularColumns() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>, c int)");
1: 
1:         execute("INSERT INTO %s (k, l, c) VALUES(3, [0, 1, 2], 4)");
1:         execute("UPDATE %s SET l[0] = 1, c = 42 WHERE k = 3");
1:         assertRows(execute("SELECT l, c FROM %s WHERE k = 3"),
1:                    row(list(1, 1, 2), 42));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.multi_list_set_test()
1:      */
1:     @Test
1:     public void testMultipleLists() throws Throwable
1:     {
1:         createTable(" CREATE TABLE %s (k int PRIMARY KEY, l1 list<int>, l2 list<int>)");
1: 
1:         execute("INSERT INTO %s (k, l1, l2) VALUES (0, [1, 2, 3], [4, 5, 6])");
1:         execute("UPDATE %s SET l2[1] = 42, l1[1] = 24  WHERE k = 0");
1: 
1:         assertRows(execute("SELECT l1, l2 FROM %s WHERE k = 0"),
1:                    row(list(1, 24, 3), list(4, 42, 6)));
1:     }
1: 
1:     /**
1:      * Test you can add columns in a table with collections (#4982 bug),
1:      * migrated from cql_tests.py:TestCQL.alter_with_collections_test()
1:      */
1:     @Test
1:     public void testAlterCollections() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int PRIMARY KEY, aset set<text>)");
1:         execute("ALTER TABLE %s ADD c text");
1:         execute("ALTER TABLE %s ADD alist list<text>");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.collection_compact_test()
1:      */
1:     @Test
1:     public void testCompactCollections() throws Throwable
1:     {
1:         String tableName = KEYSPACE + "." + createTableName();
1:         assertInvalid(String.format("CREATE TABLE %s (user ascii PRIMARY KEY, mails list < text >) WITH COMPACT STORAGE;", tableName));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.collection_function_test()
1:      */
1:     @Test
1:     public void testFunctionsOnCollections() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l set<int>)");
1: 
1:         assertInvalid("SELECT ttl(l) FROM %s WHERE k = 0");
1:         assertInvalid("SELECT writetime(l) FROM %s WHERE k = 0");
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.bug_5376()
1:      */
1:     @Test
1:     public void testInClauseWithCollections() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key text, c bigint, v text, x set < text >, PRIMARY KEY(key, c) )");
1: 
1:         assertInvalid("select * from %s where key = 'foo' and c in (1,3,4)");
1:     }
1: 
1:     /**
1:      * Test for bug #5795,
1:      * migrated from cql_tests.py:TestCQL.nonpure_function_collection_test()
1:      */
1:     @Test
1:     public void testNonPureFunctionCollection() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v list<timeuuid>)");
1: 
1:         // we just want to make sure this doesn't throw
1:         execute("INSERT INTO %s (k, v) VALUES (0, [now()])");
1:     }
1: 
1:     /**
1:      * Test for 5805 bug,
1:      * migrated from cql_tests.py:TestCQL.collection_flush_test()
1:      */
1:     @Test
1:     public void testCollectionFlush() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<int>)");
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (1, {1})");
1:         flush();
1: 
1:         execute("INSERT INTO %s (k, s) VALUES (1, {2})");
1:         flush();
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, set(2)));
1:     }
1: 
1:     /**
1:      * Test for 6276,
1:      * migrated from cql_tests.py:TestCQL.drop_and_readd_collection_test()
1:      */
1:     @Test
1:     public void testDropAndReaddCollection() throws Throwable
1:     {
1:         createTable("create table %s (k int primary key, v set<text>, x int)");
1:         execute("insert into %s (k, v) VALUES (0, {'fffffffff'})");
1:         flush();
1:         execute("alter table %s drop v");
1:         assertInvalid("alter table %s add v set<int>");
1:     }
1: 
1: }
commit:f797bfa
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.cql3.validation.entities;
0: 
0: import java.util.UUID;
0: 
0: import org.junit.Test;
0: 
0: import org.apache.cassandra.cql3.CQLTester;
0: 
0: public class CollectionsTest extends CQLTester
1: {
1:     @Test
0:     public void testMapBulkRemoval() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, text>)");
0: 
0:         execute("INSERT INTO %s(k, m) VALUES (?, ?)", 0, map("k1", "v1", "k2", "v2", "k3", "v3"));
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:             row(0, map("k1", "v1", "k2", "v2", "k3", "v3"))
0:         );
0: 
0:         execute("UPDATE %s SET m = m - ? WHERE k = ?", set("k2"), 0);
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:             row(0, map("k1", "v1", "k3", "v3"))
0:         );
0: 
0:         execute("UPDATE %s SET m = m + ?, m = m - ? WHERE k = ?", map("k4", "v4"), set("k3"), 0);
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:             row(0, map("k1", "v1", "k4", "v4"))
0:         );
1:     }
0: 
1:     @Test
0:     public void testInvalidCollectionsMix() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>, s set<text>, m map<text, text>)");
0: 
0:         // Note: we force the non-prepared form for some of those tests because a list and a set
0:         // have the same serialized format in practice and CQLTester don't validate that the type
0:         // of what's passed as a value in the prepared case, so the queries would work (which is ok,
0:         // CQLTester is just a "dumb" client).
0: 
0:         assertInvalid("UPDATE %s SET l = l + { 'a', 'b' } WHERE k = 0");
0:         assertInvalid("UPDATE %s SET l = l - { 'a', 'b' } WHERE k = 0");
0:         assertInvalid("UPDATE %s SET l = l + ? WHERE k = 0", map("a", "b", "c", "d"));
0:         assertInvalid("UPDATE %s SET l = l - ? WHERE k = 0", map("a", "b", "c", "d"));
0: 
0:         assertInvalid("UPDATE %s SET s = s + [ 'a', 'b' ] WHERE k = 0");
0:         assertInvalid("UPDATE %s SET s = s - [ 'a', 'b' ] WHERE k = 0");
0:         assertInvalid("UPDATE %s SET s = s + ? WHERE k = 0", map("a", "b", "c", "d"));
0:         assertInvalid("UPDATE %s SET s = s - ? WHERE k = 0", map("a", "b", "c", "d"));
0: 
0:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", list("a", "b"));
0:         assertInvalid("UPDATE %s SET m = m - [ 'a', 'b' ] WHERE k = 0");
0:         assertInvalid("UPDATE %s SET m = m + ? WHERE k = 0", set("a", "b"));
0:         assertInvalid("UPDATE %s SET m = m - ? WHERE k = 0", map("a", "b", "c", "d"));
1:     }
0: 
1:     @Test
0:     public void testSets() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<text>)");
0: 
0:         execute("INSERT INTO %s(k, s) VALUES (0, ?)", set("v1", "v2", "v3", "v4"));
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:             row(set("v1", "v2", "v3", "v4"))
0:         );
0: 
0:         execute("DELETE s[?] FROM %s WHERE k = 0", "v1");
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:                    row(set("v2", "v3", "v4"))
0:         );
0: 
0:         // Full overwrite
0:         execute("UPDATE %s SET s = ? WHERE k = 0", set("v6", "v5"));
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:                    row(set("v5", "v6"))
0:         );
0: 
0:         execute("UPDATE %s SET s = s + ? WHERE k = 0", set("v7"));
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:                    row(set("v5", "v6", "v7"))
0:         );
0: 
0:         execute("UPDATE %s SET s = s - ? WHERE k = 0", set("v6", "v5"));
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:                    row(set("v7"))
0:         );
0: 
0:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
0: 
0:         // Deleting an element that does not exist will succeed
0:         execute("DELETE s[?] FROM %s WHERE k = 0", set("v7"));
0: 
0:         execute("DELETE s FROM %s WHERE k = 0");
0: 
0:         assertRows(execute("SELECT s FROM %s WHERE k = 0"),
0:                    row((Object) null)
0:         );
1:     }
0: 
1:     @Test
0:     public void testMaps() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, m map<text, int>)");
0: 
0:         execute("INSERT INTO %s(k, m) VALUES (0, ?)", map("v1", 1, "v2", 2));
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:             row(map("v1", 1, "v2", 2))
0:         );
0: 
0:         execute("UPDATE %s SET m[?] = ?, m[?] = ? WHERE k = 0", "v3", 3, "v4", 4);
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:             row(map("v1", 1, "v2", 2, "v3", 3, "v4", 4))
0:         );
0: 
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v1");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:             row(map("v2", 2, "v3", 3, "v4", 4))
0:         );
0: 
0:         // Full overwrite
0:         execute("UPDATE %s SET m = ? WHERE k = 0", map("v6", 6, "v5", 5));
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row(map("v5", 5, "v6", 6))
0:         );
0: 
0:         execute("UPDATE %s SET m = m + ? WHERE k = 0", map("v7", 7));
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row(map("v5", 5, "v6", 6, "v7", 7))
0:         );
0: 
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v7");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row(map("v5", 5, "v6", 6))
0:         );
0: 
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v6");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row(map("v5", 5))
0:         );
0: 
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row((Object) null)
0:         );
0: 
0:         // Deleting a non-existing key should succeed
0:         execute("DELETE m[?] FROM %s WHERE k = 0", "v5");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:                    row((Object) null)
0:         );
0: 
0:         // The empty map is parsed as an empty set (because we don't have enough info at parsing
0:         // time when we see a {}) and special cased later. This test checks this work properly
0:         execute("UPDATE %s SET m = {} WHERE k = 0");
0: 
0:         assertRows(execute("SELECT m FROM %s WHERE k = 0"),
0:             row((Object)null)
0:         );
1:     }
0: 
1:     @Test
0:     public void testLists() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<text>)");
0: 
0:         execute("INSERT INTO %s(k, l) VALUES (0, ?)", list("v1", "v2", "v3"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v2", "v3")));
0: 
0:         execute("DELETE l[?] FROM %s WHERE k = 0", 1);
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v3")));
0: 
0:         execute("UPDATE %s SET l[?] = ? WHERE k = 0", 1, "v4");
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v1", "v4")));
0: 
0:         // Full overwrite
0:         execute("UPDATE %s SET l = ? WHERE k = 0", list("v6", "v5"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5")));
0: 
0:         execute("UPDATE %s SET l = l + ? WHERE k = 0", list("v7", "v8"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v6", "v5", "v7", "v8")));
0: 
0:         execute("UPDATE %s SET l = ? + l WHERE k = 0", list("v9"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v5", "v7", "v8")));
0: 
0:         execute("UPDATE %s SET l = l - ? WHERE k = 0", list("v5", "v8"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row(list("v9", "v6", "v7")));
0: 
0:         execute("DELETE l FROM %s WHERE k = 0");
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
0: 
0:         assertInvalidMessage("Attempted to delete an element from a list which is null",
0:                              "DELETE l[0] FROM %s WHERE k=0 ");
0: 
0:         assertInvalidMessage("Attempted to set an element on a list which is null",
0:                              "UPDATE %s SET l[0] = ? WHERE k=0", list("v10"));
0: 
0:         execute("UPDATE %s SET l = l - ? WHERE k=0 ", list("v11"));
0: 
0:         assertRows(execute("SELECT l FROM %s WHERE k = 0"), row((Object) null));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.set_test()
0:      */
1:     @Test
0:     public void testSet() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s ( fn text, ln text, tags set<text>, PRIMARY KEY (fn, ln) )");
0: 
0:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + { 'foo' } WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + { 'foobar' } WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags - { 'bar' } WHERE fn='Tom' AND ln='Bombadil'");
0: 
0:         assertRows(execute("SELECT tags FROM %s"),
0:                    row(set("foo", "foobar")));
0: 
0:         execute("UPDATE %s SET tags = { 'a', 'c', 'b' } WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(set("a", "b", "c")));
0: 
0:         execute("UPDATE %s SET tags = { 'm', 'n' } WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(set("m", "n")));
0: 
0:         execute("DELETE tags['m'] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(set("n")));
0: 
0:         execute("DELETE tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertEmpty(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.map_test()
0:      */
1:     @Test
0:     public void testMap() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (fn text, ln text, m map<text, int>, PRIMARY KEY (fn, ln))");
0: 
0:         execute("UPDATE %s SET m['foo'] = 3 WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET m['bar'] = 4 WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET m['woot'] = 5 WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET m['bar'] = 6 WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("DELETE m['foo'] FROM %s WHERE fn='Tom' AND ln='Bombadil'");
0: 
0:         assertRows(execute("SELECT m FROM %s"),
0:                    row(map("bar", 6, "woot", 5)));
0: 
0:         execute("UPDATE %s SET m = { 'a' : 4 , 'c' : 3, 'b' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(map("a", 4, "b", 2, "c", 3)));
0: 
0:         execute("UPDATE %s SET m =  { 'm' : 4 , 'n' : 1, 'o' : 2 } WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(map("m", 4, "n", 1, "o", 2)));
0: 
0:         execute("UPDATE %s SET m = {} WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertEmpty(execute("SELECT m FROM %s WHERE fn='Bilbo' AND ln='Baggins'"));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.list_test()
0:      */
1:     @Test
0:     public void testList() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (fn text, ln text, tags list<text>, PRIMARY KEY (fn, ln))");
0: 
0:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + [ 'bar' ] WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + [ 'foo' ] WHERE fn='Tom' AND ln='Bombadil'");
0:         execute("UPDATE %s SET tags = tags + [ 'foobar' ] WHERE fn='Tom' AND ln='Bombadil'");
0: 
0:         assertRows(execute("SELECT tags FROM %s"),
0:                    row(list("foo", "bar", "foo", "foobar")));
0: 
0:         execute("UPDATE %s SET tags = [ 'a', 'c', 'b', 'c' ] WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(list("a", "c", "b", "c")));
0: 
0:         execute("UPDATE %s SET tags = [ 'm', 'n' ] + tags WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(list("m", "n", "a", "c", "b", "c")));
0: 
0:         execute("UPDATE %s SET tags[2] = 'foo', tags[4] = 'bar' WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(list("m", "n", "foo", "c", "bar", "c")));
0: 
0:         execute("DELETE tags[2] FROM %s WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(list("m", "n", "c", "bar", "c")));
0: 
0:         execute("UPDATE %s SET tags = tags - [ 'bar' ] WHERE fn='Bilbo' AND ln='Baggins'");
0:         assertRows(execute("SELECT tags FROM %s WHERE fn='Bilbo' AND ln='Baggins'"),
0:                    row(list("m", "n", "c", "c")));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.multi_collection_test()
0:      */
1:     @Test
0:     public void testMultiCollections() throws Throwable
1:     {
0:         UUID id = UUID.fromString("b017f48f-ae67-11e1-9096-005056c00008");
0: 
0:         createTable("CREATE TABLE %s (k uuid PRIMARY KEY, L list<int>, M map<text, int>, S set<int> )");
0: 
0:         execute("UPDATE %s SET L = [1, 3, 5] WHERE k = ?", id);
0:         execute("UPDATE %s SET L = L + [7, 11, 13] WHERE k = ?;", id);
0:         execute("UPDATE %s SET S = {1, 3, 5} WHERE k = ?", id);
0:         execute("UPDATE %s SET S = S + {7, 11, 13} WHERE k = ?", id);
0:         execute("UPDATE %s SET M = {'foo': 1, 'bar' : 3} WHERE k = ?", id);
0:         execute("UPDATE %s SET M = M + {'foobar' : 4} WHERE k = ?", id);
0: 
0:         assertRows(execute("SELECT L, M, S FROM %s WHERE k = ?", id),
0:                    row(list(1, 3, 5, 7, 11, 13),
0:                        map("bar", 3, "foo", 1, "foobar", 4),
0:                        set(1, 3, 5, 7, 11, 13)));
1:     }
0: 
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.collection_and_regular_test()
0:      */
1:     @Test
0:     public void testCollectionAndRegularColumns() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>, c int)");
0: 
0:         execute("INSERT INTO %s (k, l, c) VALUES(3, [0, 1, 2], 4)");
0:         execute("UPDATE %s SET l[0] = 1, c = 42 WHERE k = 3");
0:         assertRows(execute("SELECT l, c FROM %s WHERE k = 3"),
0:                    row(list(1, 1, 2), 42));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.multi_list_set_test()
0:      */
1:     @Test
0:     public void testMultipleLists() throws Throwable
1:     {
0:         createTable(" CREATE TABLE %s (k int PRIMARY KEY, l1 list<int>, l2 list<int>)");
0: 
0:         execute("INSERT INTO %s (k, l1, l2) VALUES (0, [1, 2, 3], [4, 5, 6])");
0:         execute("UPDATE %s SET l2[1] = 42, l1[1] = 24  WHERE k = 0");
0: 
0:         assertRows(execute("SELECT l1, l2 FROM %s WHERE k = 0"),
0:                    row(list(1, 24, 3), list(4, 42, 6)));
1:     }
0: 
0:     /**
0:      * Test you can add columns in a table with collections (#4982 bug),
0:      * migrated from cql_tests.py:TestCQL.alter_with_collections_test()
0:      */
1:     @Test
0:     public void testAlterCollections() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (key int PRIMARY KEY, aset set<text>)");
0:         execute("ALTER TABLE %s ADD c text");
0:         execute("ALTER TABLE %s ADD alist list<text>");
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.collection_compact_test()
0:      */
1:     @Test
0:     public void testCompactCollections() throws Throwable
1:     {
0:         String tableName = KEYSPACE + "." + createTableName();
0:         assertInvalid(String.format("CREATE TABLE %s (user ascii PRIMARY KEY, mails list < text >) WITH COMPACT STORAGE;", tableName));
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.collection_function_test()
0:      */
1:     @Test
0:     public void testFunctionsOnCollections() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l set<int>)");
0: 
0:         assertInvalid("SELECT ttl(l) FROM %s WHERE k = 0");
0:         assertInvalid("SELECT writetime(l) FROM %s WHERE k = 0");
1:     }
0: 
0:     /**
0:      * Migrated from cql_tests.py:TestCQL.bug_5376()
0:      */
1:     @Test
0:     public void testInClauseWithCollections() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (key text, c bigint, v text, x set < text >, PRIMARY KEY(key, c) )");
0: 
0:         assertInvalid("select * from %s where key = 'foo' and c in (1,3,4)");
1:     }
0: 
0:     /**
0:      * Test for bug #5795,
0:      * migrated from cql_tests.py:TestCQL.nonpure_function_collection_test()
0:      */
1:     @Test
0:     public void testNonPureFunctionCollection() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v list<timeuuid>)");
0: 
0:         // we just want to make sure this doesn't throw
0:         execute("INSERT INTO %s (k, v) VALUES (0, [now()])");
1:     }
0: 
0:     /**
0:      * Test for 5805 bug,
0:      * migrated from cql_tests.py:TestCQL.collection_flush_test()
0:      */
1:     @Test
0:     public void testCollectionFlush() throws Throwable
1:     {
0:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s set<int>)");
0: 
0:         execute("INSERT INTO %s (k, s) VALUES (1, {1})");
1:         flush();
0: 
0:         execute("INSERT INTO %s (k, s) VALUES (1, {2})");
1:         flush();
0: 
0:         assertRows(execute("SELECT * FROM %s"),
0:                    row(1, set(2)));
1:     }
0: 
0:     /**
0:      * Test for 6276,
0:      * migrated from cql_tests.py:TestCQL.drop_and_readd_collection_test()
0:      */
1:     @Test
0:     public void testDropAndReaddCollection() throws Throwable
1:     {
0:         createTable("create table %s (k int primary key, v set<text>, x int)");
1:         execute("insert into %s (k, v) VALUES (0, {'fffffffff'})");
1:         flush();
1:         execute("alter table %s drop v");
0:         assertInvalid("alter table %s add v set<int>");
1:     }
0: 
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:fa7103f
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testDropAndReaddDroppedCollection() throws Throwable
0:     {
1:         createTable("create table %s (k int primary key, v frozen<set<text>>, x int)");
0:         execute("insert into %s (k, v) VALUES (0, {'fffffffff'})");
0:         flush();
0:         execute("alter table %s drop v");
1:         execute("alter table %s add v set<int>");
0:     }
============================================================================