1:2c6948c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:2c6948c:  *
1:2c6948c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:2c6948c:  */
1:2c6948c: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:2c6948c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:2c6948c: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:2c6948c: import java.util.List;
1:2c6948c: import java.util.ArrayList;
1:2c6948c: import java.util.Map;
1:2c6948c: import java.util.HashMap;
1:2c6948c: import java.util.EnumMap;
1:2c6948c: import java.util.Set;
1:2c6948c: import java.util.HashSet;
1:2c6948c: import java.util.EnumSet;
1:2c6948c: import java.util.Collections;
1:2c6948c: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:2c6948c: import java.util.Arrays;
1:2c6948c: import org.slf4j.Logger;
1:2c6948c: import org.slf4j.LoggerFactory;
1:2c6948c: 
1:2c6948c: /**
1:2c6948c:  * The semantics of start keys and tokens are slightly different.
1:2c6948c:  * Keys are start-inclusive; tokens are start-exclusive.  Token
1:2c6948c:  * ranges may also wrap -- that is, the end token may be less
1:2c6948c:  * than the start one.  Thus, a range from keyX to keyX is a
1:2c6948c:  * one-element range, but a range from tokenY to tokenY is the
1:2c6948c:  * full ring.
1:2c6948c:  */
1:bffd9ea: public class KeyRange implements org.apache.thrift.TBase<KeyRange, KeyRange._Fields>, java.io.Serializable, Cloneable, Comparable<KeyRange> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyRange");
1:2c6948c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField START_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("start_token", org.apache.thrift.protocol.TType.STRING, (short)3);
1:4ec9511:   private static final org.apache.thrift.protocol.TField END_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("end_token", org.apache.thrift.protocol.TType.STRING, (short)4);
1:3297a96:   private static final org.apache.thrift.protocol.TField ROW_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_filter", org.apache.thrift.protocol.TType.LIST, (short)6);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
1:2c6948c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new KeyRangeStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new KeyRangeTupleSchemeFactory());
1:2c6948c:   }
1:2c6948c: 
1:b153d45:   public ByteBuffer start_key; // optional
1:b153d45:   public ByteBuffer end_key; // optional
1:b153d45:   public String start_token; // optional
1:b153d45:   public String end_token; // optional
1:b153d45:   public List<IndexExpression> row_filter; // optional
1:7c8c570:   public int count; // required
1:2c6948c: 
1:2c6948c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:2c6948c:     START_KEY((short)1, "start_key"),
1:2c6948c:     END_KEY((short)2, "end_key"),
1:2c6948c:     START_TOKEN((short)3, "start_token"),
1:2c6948c:     END_TOKEN((short)4, "end_token"),
1:3297a96:     ROW_FILTER((short)6, "row_filter"),
1:2c6948c:     COUNT((short)5, "count");
1:2c6948c: 
1:2c6948c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:2c6948c: 
1:2c6948c:     static {
1:2c6948c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:2c6948c:         byName.put(field.getFieldName(), field);
1:2c6948c:       }
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     /**
1:2c6948c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:2c6948c:      */
1:2c6948c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // START_KEY
1:d849c69:           return START_KEY;
1:d849c69:         case 2: // END_KEY
1:d849c69:           return END_KEY;
1:d849c69:         case 3: // START_TOKEN
1:d849c69:           return START_TOKEN;
1:d849c69:         case 4: // END_TOKEN
1:d849c69:           return END_TOKEN;
1:3297a96:         case 6: // ROW_FILTER
1:3297a96:           return ROW_FILTER;
1:d849c69:         case 5: // COUNT
1:d849c69:           return COUNT;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     /**
1:2c6948c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:2c6948c:      * if it is not found.
1:2c6948c:      */
1:2c6948c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:2c6948c:       _Fields fields = findByThriftId(fieldId);
1:2c6948c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:2c6948c:       return fields;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     /**
1:2c6948c:      * Find the _Fields constant that matches name, or null if its not found.
1:2c6948c:      */
1:2c6948c:     public static _Fields findByName(String name) {
1:2c6948c:       return byName.get(name);
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     private final short _thriftId;
1:2c6948c:     private final String _fieldName;
1:2c6948c: 
1:2c6948c:     _Fields(short thriftId, String fieldName) {
1:2c6948c:       _thriftId = thriftId;
1:2c6948c:       _fieldName = fieldName;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     public short getThriftFieldId() {
1:2c6948c:       return _thriftId;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     public String getFieldName() {
1:2c6948c:       return _fieldName;
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   // isset id assignments
1:2c6948c:   private static final int __COUNT_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:b153d45:   private _Fields optionals[] = {_Fields.START_KEY,_Fields.END_KEY,_Fields.START_TOKEN,_Fields.END_TOKEN,_Fields.ROW_FILTER};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:2c6948c:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.START_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("start_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:4ec9511:     tmpMap.put(_Fields.END_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("end_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:3297a96:     tmpMap.put(_Fields.ROW_FILTER, new org.apache.thrift.meta_data.FieldMetaData("row_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:3297a96:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:3297a96:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexExpression.class))));
1:4ec9511:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyRange.class, metaDataMap);
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange() {
1:2c6948c:     this.count = 100;
1:2c6948c: 
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange(
1:2c6948c:     int count)
1:2c6948c:   {
1:2c6948c:     this();
1:2c6948c:     this.count = count;
1:2b69c40:     setCountIsSet(true);
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   /**
1:2c6948c:    * Performs a deep copy on <i>other</i>.
1:2c6948c:    */
1:2c6948c:   public KeyRange(KeyRange other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:2c6948c:     if (other.isSetStart_key()) {
1:4ec9511:       this.start_key = org.apache.thrift.TBaseHelper.copyBinary(other.start_key);
1:e7a385a: ;
1:2c6948c:     }
1:2c6948c:     if (other.isSetEnd_key()) {
1:4ec9511:       this.end_key = org.apache.thrift.TBaseHelper.copyBinary(other.end_key);
1:e7a385a: ;
1:2c6948c:     }
1:2c6948c:     if (other.isSetStart_token()) {
1:2c6948c:       this.start_token = other.start_token;
1:2c6948c:     }
1:2c6948c:     if (other.isSetEnd_token()) {
1:2c6948c:       this.end_token = other.end_token;
1:2c6948c:     }
1:3297a96:     if (other.isSetRow_filter()) {
1:bffd9ea:       List<IndexExpression> __this__row_filter = new ArrayList<IndexExpression>(other.row_filter.size());
1:3297a96:       for (IndexExpression other_element : other.row_filter) {
1:3297a96:         __this__row_filter.add(new IndexExpression(other_element));
1:3297a96:       }
1:3297a96:       this.row_filter = __this__row_filter;
1:3297a96:     }
1:2c6948c:     this.count = other.count;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange deepCopy() {
2:2c6948c:     return new KeyRange(this);
1:2c6948c:   }
1:2c6948c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.start_key = null;
1:e7a385a:     this.end_key = null;
1:e7a385a:     this.start_token = null;
1:e7a385a:     this.end_token = null;
1:3297a96:     this.row_filter = null;
1:e7a385a:     this.count = 100;
1:e7a385a: 
1:2c6948c:   }
1:2c6948c: 
1:f3a4e17:   public byte[] getStart_key() {
1:4ec9511:     setStart_key(org.apache.thrift.TBaseHelper.rightSize(start_key));
1:4ec9511:     return start_key == null ? null : start_key.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForStart_key() {
1:e7a385a:     return start_key;
1:2c6948c:   }
1:2c6948c: 
1:f3a4e17:   public KeyRange setStart_key(byte[] start_key) {
1:4ec9511:     setStart_key(start_key == null ? (ByteBuffer)null : ByteBuffer.wrap(start_key));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public KeyRange setStart_key(ByteBuffer start_key) {
1:2c6948c:     this.start_key = start_key;
1:2c6948c:     return this;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void unsetStart_key() {
1:2c6948c:     this.start_key = null;
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSetStart_key() {
1:2c6948c:     return this.start_key != null;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setStart_keyIsSet(boolean value) {
1:2c6948c:     if (!value) {
1:2c6948c:       this.start_key = null;
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:f3a4e17:   public byte[] getEnd_key() {
1:4ec9511:     setEnd_key(org.apache.thrift.TBaseHelper.rightSize(end_key));
1:4ec9511:     return end_key == null ? null : end_key.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForEnd_key() {
1:e7a385a:     return end_key;
1:2c6948c:   }
1:2c6948c: 
1:f3a4e17:   public KeyRange setEnd_key(byte[] end_key) {
1:4ec9511:     setEnd_key(end_key == null ? (ByteBuffer)null : ByteBuffer.wrap(end_key));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public KeyRange setEnd_key(ByteBuffer end_key) {
1:2c6948c:     this.end_key = end_key;
1:2c6948c:     return this;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void unsetEnd_key() {
1:2c6948c:     this.end_key = null;
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSetEnd_key() {
1:2c6948c:     return this.end_key != null;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setEnd_keyIsSet(boolean value) {
1:2c6948c:     if (!value) {
1:2c6948c:       this.end_key = null;
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public String getStart_token() {
1:2c6948c:     return this.start_token;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange setStart_token(String start_token) {
1:2c6948c:     this.start_token = start_token;
1:2c6948c:     return this;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void unsetStart_token() {
1:2c6948c:     this.start_token = null;
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field start_token is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSetStart_token() {
1:2c6948c:     return this.start_token != null;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setStart_tokenIsSet(boolean value) {
1:2c6948c:     if (!value) {
1:2c6948c:       this.start_token = null;
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public String getEnd_token() {
1:2c6948c:     return this.end_token;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange setEnd_token(String end_token) {
1:2c6948c:     this.end_token = end_token;
1:2c6948c:     return this;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void unsetEnd_token() {
1:2c6948c:     this.end_token = null;
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field end_token is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSetEnd_token() {
1:2c6948c:     return this.end_token != null;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setEnd_tokenIsSet(boolean value) {
1:2c6948c:     if (!value) {
1:2c6948c:       this.end_token = null;
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:3297a96:   public int getRow_filterSize() {
1:3297a96:     return (this.row_filter == null) ? 0 : this.row_filter.size();
1:3297a96:   }
1:3297a96: 
1:3297a96:   public java.util.Iterator<IndexExpression> getRow_filterIterator() {
1:3297a96:     return (this.row_filter == null) ? null : this.row_filter.iterator();
1:3297a96:   }
1:3297a96: 
1:3297a96:   public void addToRow_filter(IndexExpression elem) {
1:3297a96:     if (this.row_filter == null) {
1:3297a96:       this.row_filter = new ArrayList<IndexExpression>();
1:3297a96:     }
1:3297a96:     this.row_filter.add(elem);
1:3297a96:   }
1:3297a96: 
1:3297a96:   public List<IndexExpression> getRow_filter() {
1:3297a96:     return this.row_filter;
1:3297a96:   }
1:3297a96: 
1:3297a96:   public KeyRange setRow_filter(List<IndexExpression> row_filter) {
1:3297a96:     this.row_filter = row_filter;
1:3297a96:     return this;
1:3297a96:   }
1:3297a96: 
1:3297a96:   public void unsetRow_filter() {
1:3297a96:     this.row_filter = null;
1:3297a96:   }
1:3297a96: 
1:3297a96:   /** Returns true if field row_filter is set (has been assigned a value) and false otherwise */
1:3297a96:   public boolean isSetRow_filter() {
1:3297a96:     return this.row_filter != null;
1:3297a96:   }
1:3297a96: 
1:3297a96:   public void setRow_filterIsSet(boolean value) {
1:3297a96:     if (!value) {
1:3297a96:       this.row_filter = null;
1:3297a96:     }
1:3297a96:   }
1:3297a96: 
1:2c6948c:   public int getCount() {
1:2c6948c:     return this.count;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public KeyRange setCount(int count) {
1:2c6948c:     this.count = count;
3:2c6948c:     setCountIsSet(true);
1:2c6948c:     return this;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void unsetCount() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSetCount() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setCountIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public void setFieldValue(_Fields field, Object value) {
1:2c6948c:     switch (field) {
2:2c6948c:     case START_KEY:
1:2c6948c:       if (value == null) {
1:2c6948c:         unsetStart_key();
7:2c6948c:       } else {
1:e7a385a:         setStart_key((ByteBuffer)value);
1:2c6948c:       }
6:2c6948c:       break;
1:2c6948c: 
2:2c6948c:     case END_KEY:
1:2c6948c:       if (value == null) {
1:2c6948c:         unsetEnd_key();
1:2b69c40:       } else {
1:e7a385a:         setEnd_key((ByteBuffer)value);
1:3297a96:       }
1:2b69c40:       break;
1:2c6948c: 
2:2c6948c:     case START_TOKEN:
1:2c6948c:       if (value == null) {
1:2c6948c:         unsetStart_token();
1:2b69c40:       } else {
1:2c6948c:         setStart_token((String)value);
1:2b69c40:       }
1:2b69c40:       break;
1:2c6948c: 
2:2c6948c:     case END_TOKEN:
1:2c6948c:       if (value == null) {
1:2c6948c:         unsetEnd_token();
1:2b69c40:       } else {
1:2c6948c:         setEnd_token((String)value);
1:2b69c40:       }
1:2b69c40:       break;
1:2c6948c: 
1:3297a96:     case ROW_FILTER:
1:3297a96:       if (value == null) {
1:3297a96:         unsetRow_filter();
1:3297a96:       } else {
1:3297a96:         setRow_filter((List<IndexExpression>)value);
1:3297a96:       }
1:3297a96:       break;
1:3297a96: 
2:2c6948c:     case COUNT:
1:2c6948c:       if (value == null) {
1:2c6948c:         unsetCount();
1:2b69c40:       } else {
1:2c6948c:         setCount((Integer)value);
1:2b69c40:       }
1:2b69c40:       break;
1:2c6948c: 
1:2b69c40:     }
1:2b69c40:   }
1:2c6948c: 
1:2c6948c:   public Object getFieldValue(_Fields field) {
1:2c6948c:     switch (field) {
1:2c6948c:     case START_KEY:
1:2c6948c:       return getStart_key();
1:2c6948c: 
1:2c6948c:     case END_KEY:
1:2c6948c:       return getEnd_key();
1:2c6948c: 
1:2c6948c:     case START_TOKEN:
1:2c6948c:       return getStart_token();
1:2c6948c: 
1:2c6948c:     case END_TOKEN:
1:2c6948c:       return getEnd_token();
1:2c6948c: 
1:3297a96:     case ROW_FILTER:
1:3297a96:       return getRow_filter();
1:3297a96: 
1:2c6948c:     case COUNT:
1:7c8c570:       return Integer.valueOf(getCount());
1:2c6948c: 
1:2c6948c:     }
1:2c6948c:     throw new IllegalStateException();
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:2c6948c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:2c6948c:     switch (field) {
1:2c6948c:     case START_KEY:
1:2c6948c:       return isSetStart_key();
1:2c6948c:     case END_KEY:
1:2c6948c:       return isSetEnd_key();
1:2c6948c:     case START_TOKEN:
1:2c6948c:       return isSetStart_token();
1:2c6948c:     case END_TOKEN:
1:2c6948c:       return isSetEnd_token();
1:3297a96:     case ROW_FILTER:
1:3297a96:       return isSetRow_filter();
1:2c6948c:     case COUNT:
1:2c6948c:       return isSetCount();
1:2c6948c:     }
1:2c6948c:     throw new IllegalStateException();
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   @Override
1:2c6948c:   public boolean equals(Object that) {
1:2c6948c:     if (that == null)
1:2c6948c:       return false;
1:2c6948c:     if (that instanceof KeyRange)
1:2c6948c:       return this.equals((KeyRange)that);
1:2c6948c:     return false;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   public boolean equals(KeyRange that) {
1:2c6948c:     if (that == null)
1:2c6948c:       return false;
1:2c6948c: 
1:2c6948c:     boolean this_present_start_key = true && this.isSetStart_key();
1:2c6948c:     boolean that_present_start_key = true && that.isSetStart_key();
1:2c6948c:     if (this_present_start_key || that_present_start_key) {
1:2c6948c:       if (!(this_present_start_key && that_present_start_key))
1:2c6948c:         return false;
1:e7a385a:       if (!this.start_key.equals(that.start_key))
1:2c6948c:         return false;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     boolean this_present_end_key = true && this.isSetEnd_key();
1:2c6948c:     boolean that_present_end_key = true && that.isSetEnd_key();
1:2c6948c:     if (this_present_end_key || that_present_end_key) {
1:2c6948c:       if (!(this_present_end_key && that_present_end_key))
1:2c6948c:         return false;
1:e7a385a:       if (!this.end_key.equals(that.end_key))
1:2c6948c:         return false;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     boolean this_present_start_token = true && this.isSetStart_token();
1:2c6948c:     boolean that_present_start_token = true && that.isSetStart_token();
1:2c6948c:     if (this_present_start_token || that_present_start_token) {
1:2c6948c:       if (!(this_present_start_token && that_present_start_token))
1:2c6948c:         return false;
1:2c6948c:       if (!this.start_token.equals(that.start_token))
1:2c6948c:         return false;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     boolean this_present_end_token = true && this.isSetEnd_token();
1:2c6948c:     boolean that_present_end_token = true && that.isSetEnd_token();
1:2c6948c:     if (this_present_end_token || that_present_end_token) {
1:2c6948c:       if (!(this_present_end_token && that_present_end_token))
1:2c6948c:         return false;
1:2c6948c:       if (!this.end_token.equals(that.end_token))
1:2c6948c:         return false;
1:2c6948c:     }
1:2c6948c: 
1:3297a96:     boolean this_present_row_filter = true && this.isSetRow_filter();
1:3297a96:     boolean that_present_row_filter = true && that.isSetRow_filter();
1:3297a96:     if (this_present_row_filter || that_present_row_filter) {
1:3297a96:       if (!(this_present_row_filter && that_present_row_filter))
1:3297a96:         return false;
1:3297a96:       if (!this.row_filter.equals(that.row_filter))
1:3297a96:         return false;
1:3297a96:     }
1:3297a96: 
1:2c6948c:     boolean this_present_count = true;
1:2c6948c:     boolean that_present_count = true;
1:2c6948c:     if (this_present_count || that_present_count) {
1:2c6948c:       if (!(this_present_count && that_present_count))
1:2c6948c:         return false;
1:2c6948c:       if (this.count != that.count)
1:2c6948c:         return false;
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     return true;
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   @Override
1:2c6948c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_start_key = true && (isSetStart_key());
1:d966ed0:     builder.append(present_start_key);
1:d966ed0:     if (present_start_key)
1:d966ed0:       builder.append(start_key);
1:d966ed0: 
1:d966ed0:     boolean present_end_key = true && (isSetEnd_key());
1:d966ed0:     builder.append(present_end_key);
1:d966ed0:     if (present_end_key)
1:d966ed0:       builder.append(end_key);
1:d966ed0: 
1:d966ed0:     boolean present_start_token = true && (isSetStart_token());
1:d966ed0:     builder.append(present_start_token);
1:d966ed0:     if (present_start_token)
1:d966ed0:       builder.append(start_token);
1:d966ed0: 
1:d966ed0:     boolean present_end_token = true && (isSetEnd_token());
1:d966ed0:     builder.append(present_end_token);
1:d966ed0:     if (present_end_token)
1:d966ed0:       builder.append(end_token);
1:d966ed0: 
1:3297a96:     boolean present_row_filter = true && (isSetRow_filter());
1:3297a96:     builder.append(present_row_filter);
1:3297a96:     if (present_row_filter)
1:3297a96:       builder.append(row_filter);
1:3297a96: 
1:d966ed0:     boolean present_count = true;
1:d966ed0:     builder.append(present_count);
1:d966ed0:     if (present_count)
1:d966ed0:       builder.append(count);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:2c6948c:   }
1:2c6948c: 
1:bffd9ea:   @Override
1:2c6948c:   public int compareTo(KeyRange other) {
1:2c6948c:     if (!getClass().equals(other.getClass())) {
1:2c6948c:       return getClass().getName().compareTo(other.getClass().getName());
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:     int lastComparison = 0;
1:2c6948c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
6:2c6948c:     if (lastComparison != 0) {
6:2c6948c:       return lastComparison;
1:3297a96:     }
1:e7a385a:     if (isSetStart_key()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
1:3297a96:       if (lastComparison != 0) {
1:3297a96:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(other.isSetEnd_key());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetEnd_key()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(other.isSetStart_token());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetStart_token()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, other.start_token);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(other.isSetEnd_token());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetEnd_token()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, other.end_token);
1:2c6948c:       if (lastComparison != 0) {
1:2c6948c:         return lastComparison;
1:2c6948c:       }
1:2c6948c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetRow_filter()).compareTo(other.isSetRow_filter());
1:2c6948c:     if (lastComparison != 0) {
1:2c6948c:       return lastComparison;
1:2c6948c:     }
1:3297a96:     if (isSetRow_filter()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_filter, other.row_filter);
1:3297a96:       if (lastComparison != 0) {
1:3297a96:         return lastComparison;
1:3297a96:       }
1:3297a96:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:2c6948c:     if (lastComparison != 0) {
1:2c6948c:       return lastComparison;
1:2c6948c:     }
1:e7a385a:     if (isSetCount()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:2c6948c:       if (lastComparison != 0) {
1:2c6948c:         return lastComparison;
1:2c6948c:       }
1:2c6948c:     }
2:2c6948c:     return 0;
1:2c6948c:   }
1:2c6948c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:2c6948c:   }
1:2c6948c: 
1:2c6948c:   @Override
1:2c6948c:   public String toString() {
1:2c6948c:     StringBuilder sb = new StringBuilder("KeyRange(");
1:2c6948c:     boolean first = true;
1:2c6948c: 
2:2c6948c:     if (isSetStart_key()) {
1:2c6948c:       sb.append("start_key:");
1:2c6948c:       if (this.start_key == null) {
1:2c6948c:         sb.append("null");
1:2b69c40:       } else {
1:4ec9511:         org.apache.thrift.TBaseHelper.toString(this.start_key, sb);
1:2c6948c:       }
1:2c6948c:       first = false;
1:2c6948c:     }
2:2c6948c:     if (isSetEnd_key()) {
1:3297a96:       if (!first) sb.append(", ");
1:2c6948c:       sb.append("end_key:");
1:2c6948c:       if (this.end_key == null) {
1:2c6948c:         sb.append("null");
1:2c6948c:       } else {
1:4ec9511:         org.apache.thrift.TBaseHelper.toString(this.end_key, sb);
1:2c6948c:       }
1:2c6948c:       first = false;
1:2c6948c:     }
2:2c6948c:     if (isSetStart_token()) {
1:2c6948c:       if (!first) sb.append(", ");
1:2c6948c:       sb.append("start_token:");
1:2c6948c:       if (this.start_token == null) {
1:2c6948c:         sb.append("null");
1:2c6948c:       } else {
1:2c6948c:         sb.append(this.start_token);
1:2c6948c:       }
1:2c6948c:       first = false;
1:2c6948c:     }
2:2c6948c:     if (isSetEnd_token()) {
1:2c6948c:       if (!first) sb.append(", ");
1:2c6948c:       sb.append("end_token:");
1:2c6948c:       if (this.end_token == null) {
1:2c6948c:         sb.append("null");
1:2c6948c:       } else {
1:2c6948c:         sb.append(this.end_token);
1:2c6948c:       }
1:2c6948c:       first = false;
1:2c6948c:     }
1:3297a96:     if (isSetRow_filter()) {
1:2c6948c:       if (!first) sb.append(", ");
1:3297a96:       sb.append("row_filter:");
1:3297a96:       if (this.row_filter == null) {
1:3297a96:         sb.append("null");
1:3297a96:       } else {
1:3297a96:         sb.append(this.row_filter);
1:3297a96:       }
1:3297a96:       first = false;
1:3297a96:     }
1:2c6948c:     if (!first) sb.append(", ");
1:2c6948c:     sb.append("count:");
1:2c6948c:     sb.append(this.count);
1:2c6948c:     first = false;
1:2c6948c:     sb.append(")");
1:2c6948c:     return sb.toString();
1:2c6948c:   }
1:2c6948c: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:2c6948c:     // check for required fields
1:2c6948c:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:2c6948c:   }
1:2c6948c: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class KeyRangeStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public KeyRangeStandardScheme getScheme() {
1:b153d45:       return new KeyRangeStandardScheme();
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:b153d45:   private static class KeyRangeStandardScheme extends StandardScheme<KeyRange> {
1:2c6948c: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeyRange struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:2c6948c:       iprot.readStructBegin();
1:2c6948c:       while (true)
1:3297a96:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:2c6948c:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // START_KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.start_key = iprot.readBinary();
1:b153d45:               struct.setStart_keyIsSet(true);
1:2c6948c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:             }
1:2c6948c:             break;
1:2b69c40:           case 2: // END_KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.end_key = iprot.readBinary();
1:b153d45:               struct.setEnd_keyIsSet(true);
1:2c6948c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:             }
1:2c6948c:             break;
1:2b69c40:           case 3: // START_TOKEN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.start_token = iprot.readString();
1:b153d45:               struct.setStart_tokenIsSet(true);
1:2c6948c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:             }
1:2c6948c:             break;
1:2b69c40:           case 4: // END_TOKEN
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.end_token = iprot.readString();
1:b153d45:               struct.setEnd_tokenIsSet(true);
1:2c6948c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:             }
1:2c6948c:             break;
1:3297a96:           case 6: // ROW_FILTER
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:3297a96:               {
1:b153d45:                 org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
1:b153d45:                 struct.row_filter = new ArrayList<IndexExpression>(_list32.size);
1:b153d45:                 for (int _i33 = 0; _i33 < _list32.size; ++_i33)
1:2c6948c:                 {
1:bffd9ea:                   IndexExpression _elem34;
1:b153d45:                   _elem34 = new IndexExpression();
1:b153d45:                   _elem34.read(iprot);
1:b153d45:                   struct.row_filter.add(_elem34);
1:2c6948c:                 }
1:3297a96:                 iprot.readListEnd();
1:3297a96:               }
1:b153d45:               struct.setRow_filterIsSet(true);
1:3297a96:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:3297a96:             }
1:3297a96:             break;
1:2b69c40:           case 5: // COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.count = iprot.readI32();
1:b153d45:               struct.setCountIsSet(true);
1:2c6948c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:             }
1:2c6948c:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2c6948c:         }
1:2b69c40:         iprot.readFieldEnd();
1:2c6948c:       }
1:2c6948c:       iprot.readStructEnd();
1:2c6948c: 
1:2c6948c:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetCount()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:2c6948c:       }
1:b153d45:       struct.validate();
1:2c6948c:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeyRange struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:2c6948c:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.start_key != null) {
1:b153d45:         if (struct.isSetStart_key()) {
1:2c6948c:           oprot.writeFieldBegin(START_KEY_FIELD_DESC);
1:b153d45:           oprot.writeBinary(struct.start_key);
1:2c6948c:           oprot.writeFieldEnd();
1:2c6948c:         }
1:2c6948c:       }
1:b153d45:       if (struct.end_key != null) {
1:b153d45:         if (struct.isSetEnd_key()) {
1:2c6948c:           oprot.writeFieldBegin(END_KEY_FIELD_DESC);
1:b153d45:           oprot.writeBinary(struct.end_key);
1:2c6948c:           oprot.writeFieldEnd();
1:2c6948c:         }
1:2c6948c:       }
1:b153d45:       if (struct.start_token != null) {
1:b153d45:         if (struct.isSetStart_token()) {
1:2c6948c:           oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
1:b153d45:           oprot.writeString(struct.start_token);
1:2c6948c:           oprot.writeFieldEnd();
1:2c6948c:         }
1:2c6948c:       }
1:b153d45:       if (struct.end_token != null) {
1:b153d45:         if (struct.isSetEnd_token()) {
1:2c6948c:           oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
1:b153d45:           oprot.writeString(struct.end_token);
1:2c6948c:           oprot.writeFieldEnd();
1:2c6948c:         }
1:b153d45:       }
1:2c6948c:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.count);
1:2c6948c:       oprot.writeFieldEnd();
1:b153d45:       if (struct.row_filter != null) {
1:b153d45:         if (struct.isSetRow_filter()) {
1:3297a96:           oprot.writeFieldBegin(ROW_FILTER_FIELD_DESC);
1:3297a96:           {
1:b153d45:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.row_filter.size()));
1:b153d45:             for (IndexExpression _iter35 : struct.row_filter)
1:3297a96:             {
1:b153d45:               _iter35.write(oprot);
1:3297a96:             }
1:3297a96:             oprot.writeListEnd();
1:3297a96:           }
1:3297a96:           oprot.writeFieldEnd();
1:3297a96:         }
1:3297a96:       }
1:2c6948c:       oprot.writeFieldStop();
1:2c6948c:       oprot.writeStructEnd();
1:2c6948c:     }
1:2c6948c: 
1:2c6948c:   }
1:2c6948c: 
1:b153d45:   private static class KeyRangeTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public KeyRangeTupleScheme getScheme() {
1:b153d45:       return new KeyRangeTupleScheme();
1:2c6948c:     }
1:2c6948c:   }
1:2c6948c: 
1:b153d45:   private static class KeyRangeTupleScheme extends TupleScheme<KeyRange> {
1:2c6948c: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, KeyRange struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeI32(struct.count);
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetStart_key()) {
1:b153d45:         optionals.set(0);
1:2c6948c:       }
1:b153d45:       if (struct.isSetEnd_key()) {
1:b153d45:         optionals.set(1);
1:2c6948c:       }
1:b153d45:       if (struct.isSetStart_token()) {
1:b153d45:         optionals.set(2);
1:2c6948c:       }
1:b153d45:       if (struct.isSetEnd_token()) {
1:b153d45:         optionals.set(3);
1:2c6948c:       }
1:b153d45:       if (struct.isSetRow_filter()) {
1:b153d45:         optionals.set(4);
1:2c6948c:       }
1:b153d45:       oprot.writeBitSet(optionals, 5);
1:b153d45:       if (struct.isSetStart_key()) {
1:b153d45:         oprot.writeBinary(struct.start_key);
1:2c6948c:       }
1:b153d45:       if (struct.isSetEnd_key()) {
1:b153d45:         oprot.writeBinary(struct.end_key);
1:2c6948c:       }
1:b153d45:       if (struct.isSetStart_token()) {
1:b153d45:         oprot.writeString(struct.start_token);
38:b153d45:       }
1:b153d45:       if (struct.isSetEnd_token()) {
1:b153d45:         oprot.writeString(struct.end_token);
1:b153d45:       }
1:b153d45:       if (struct.isSetRow_filter()) {
6:b153d45:         {
1:b153d45:           oprot.writeI32(struct.row_filter.size());
1:b153d45:           for (IndexExpression _iter36 : struct.row_filter)
1:b153d45:           {
1:b153d45:             _iter36.write(oprot);
1:b153d45:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:     }
9:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, KeyRange struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.count = iprot.readI32();
1:b153d45:       struct.setCountIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(5);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.start_key = iprot.readBinary();
1:b153d45:         struct.setStart_keyIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.end_key = iprot.readBinary();
1:b153d45:         struct.setEnd_keyIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         struct.start_token = iprot.readString();
1:b153d45:         struct.setStart_tokenIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(3)) {
1:b153d45:         struct.end_token = iprot.readString();
1:b153d45:         struct.setEnd_tokenIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(4)) {
1:b153d45:         {
1:b153d45:           org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:b153d45:           struct.row_filter = new ArrayList<IndexExpression>(_list37.size);
1:b153d45:           for (int _i38 = 0; _i38 < _list37.size; ++_i38)
1:b153d45:           {
1:bffd9ea:             IndexExpression _elem39;
1:b153d45:             _elem39 = new IndexExpression();
1:b153d45:             _elem39.read(iprot);
1:b153d45:             struct.row_filter.add(_elem39);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setRow_filterIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class KeyRange implements org.apache.thrift.TBase<KeyRange, KeyRange._Fields>, java.io.Serializable, Cloneable, Comparable<KeyRange> {
/////////////////////////////////////////////////////////////////////////
1:       List<IndexExpression> __this__row_filter = new ArrayList<IndexExpression>(other.row_filter.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
1:     lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(other.isSetEnd_key());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
1:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(other.isSetStart_token());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, other.start_token);
1:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(other.isSetEnd_token());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, other.end_token);
1:     lastComparison = Boolean.valueOf(isSetRow_filter()).compareTo(other.isSetRow_filter());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_filter, other.row_filter);
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
/////////////////////////////////////////////////////////////////////////
1:                   IndexExpression _elem34;
/////////////////////////////////////////////////////////////////////////
1:             IndexExpression _elem39;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   IndexExpression _elem34; // required
/////////////////////////////////////////////////////////////////////////
0:             IndexExpression _elem39; // required
commit:3297a96
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField ROW_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_filter", org.apache.thrift.protocol.TType.LIST, (short)6);
0:   public List<IndexExpression> row_filter;
/////////////////////////////////////////////////////////////////////////
1:     ROW_FILTER((short)6, "row_filter"),
/////////////////////////////////////////////////////////////////////////
1:         case 6: // ROW_FILTER
1:           return ROW_FILTER;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.ROW_FILTER, new org.apache.thrift.meta_data.FieldMetaData("row_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexExpression.class))));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetRow_filter()) {
0:       List<IndexExpression> __this__row_filter = new ArrayList<IndexExpression>();
1:       for (IndexExpression other_element : other.row_filter) {
1:         __this__row_filter.add(new IndexExpression(other_element));
1:       }
1:       this.row_filter = __this__row_filter;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     this.row_filter = null;
/////////////////////////////////////////////////////////////////////////
1:   public int getRow_filterSize() {
1:     return (this.row_filter == null) ? 0 : this.row_filter.size();
1:   }
1: 
1:   public java.util.Iterator<IndexExpression> getRow_filterIterator() {
1:     return (this.row_filter == null) ? null : this.row_filter.iterator();
1:   }
1: 
1:   public void addToRow_filter(IndexExpression elem) {
1:     if (this.row_filter == null) {
1:       this.row_filter = new ArrayList<IndexExpression>();
1:     }
1:     this.row_filter.add(elem);
1:   }
1: 
1:   public List<IndexExpression> getRow_filter() {
1:     return this.row_filter;
1:   }
1: 
1:   public KeyRange setRow_filter(List<IndexExpression> row_filter) {
1:     this.row_filter = row_filter;
1:     return this;
1:   }
1: 
1:   public void unsetRow_filter() {
1:     this.row_filter = null;
1:   }
1: 
1:   /** Returns true if field row_filter is set (has been assigned a value) and false otherwise */
1:   public boolean isSetRow_filter() {
1:     return this.row_filter != null;
1:   }
1: 
1:   public void setRow_filterIsSet(boolean value) {
1:     if (!value) {
1:       this.row_filter = null;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ROW_FILTER:
1:       if (value == null) {
1:         unsetRow_filter();
1:       } else {
1:         setRow_filter((List<IndexExpression>)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ROW_FILTER:
1:       return getRow_filter();
1: 
/////////////////////////////////////////////////////////////////////////
1:     case ROW_FILTER:
1:       return isSetRow_filter();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_row_filter = true && this.isSetRow_filter();
1:     boolean that_present_row_filter = true && that.isSetRow_filter();
1:     if (this_present_row_filter || that_present_row_filter) {
1:       if (!(this_present_row_filter && that_present_row_filter))
1:         return false;
1:       if (!this.row_filter.equals(that.row_filter))
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_row_filter = true && (isSetRow_filter());
1:     builder.append(present_row_filter);
1:     if (present_row_filter)
1:       builder.append(row_filter);
1: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetRow_filter()).compareTo(typedOther.isSetRow_filter());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetRow_filter()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_filter, typedOther.row_filter);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 6: // ROW_FILTER
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
1:             {
0:               org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
0:               this.row_filter = new ArrayList<IndexExpression>(_list16.size);
0:               for (int _i17 = 0; _i17 < _list16.size; ++_i17)
1:               {
0:                 IndexExpression _elem18;
0:                 _elem18 = new IndexExpression();
0:                 _elem18.read(iprot);
0:                 this.row_filter.add(_elem18);
1:               }
1:               iprot.readListEnd();
1:             }
1:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.row_filter != null) {
1:       if (isSetRow_filter()) {
1:         oprot.writeFieldBegin(ROW_FILTER_FIELD_DESC);
1:         {
0:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.row_filter.size()));
0:           for (IndexExpression _iter19 : this.row_filter)
1:           {
0:             _iter19.write(oprot);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetRow_filter()) {
1:       if (!first) sb.append(", ");
1:       sb.append("row_filter:");
1:       if (this.row_filter == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.row_filter);
1:       }
1:       first = false;
1:     }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                   IndexExpression _elem34; // optional
/////////////////////////////////////////////////////////////////////////
0:             IndexExpression _elem39; // optional
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer start_key;
0:   public ByteBuffer end_key;
/////////////////////////////////////////////////////////////////////////
0:       this.start_key = TBaseHelper.copyBinary(other.start_key);
1: ;
0:       this.end_key = TBaseHelper.copyBinary(other.end_key);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.start_key = null;
1:     this.end_key = null;
1:     this.start_token = null;
1:     this.end_token = null;
1:     this.count = 100;
1: 
0:     setStart_key(TBaseHelper.rightSize(start_key));
0:     return start_key.array();
1:   }
1: 
0:   public ByteBuffer BufferForStart_key() {
1:     return start_key;
0:     setStart_key(ByteBuffer.wrap(start_key));
1:     return this;
1:   }
1: 
1:   public KeyRange setStart_key(ByteBuffer start_key) {
/////////////////////////////////////////////////////////////////////////
0:     setEnd_key(TBaseHelper.rightSize(end_key));
0:     return end_key.array();
1:   }
1: 
0:   public ByteBuffer BufferForEnd_key() {
1:     return end_key;
0:     setEnd_key(ByteBuffer.wrap(end_key));
1:     return this;
1:   }
1: 
1:   public KeyRange setEnd_key(ByteBuffer end_key) {
/////////////////////////////////////////////////////////////////////////
1:         setStart_key((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
1:         setEnd_key((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.start_key.equals(that.start_key))
/////////////////////////////////////////////////////////////////////////
1:       if (!this.end_key.equals(that.end_key))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStart_key()) {
0:       lastComparison = TBaseHelper.compareTo(this.start_key, typedOther.start_key);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetEnd_key()) {
0:       lastComparison = TBaseHelper.compareTo(this.end_key, typedOther.end_key);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStart_token()) {
0:       lastComparison = TBaseHelper.compareTo(this.start_token, typedOther.start_token);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetEnd_token()) {
0:       lastComparison = TBaseHelper.compareTo(this.end_token, typedOther.end_token);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetCount()) {
0:       lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:         TBaseHelper.toString(this.start_key, sb);
/////////////////////////////////////////////////////////////////////////
0:         TBaseHelper.toString(this.end_key, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_start_key = true && (isSetStart_key());
1:     builder.append(present_start_key);
1:     if (present_start_key)
1:       builder.append(start_key);
1: 
1:     boolean present_end_key = true && (isSetEnd_key());
1:     builder.append(present_end_key);
1:     if (present_end_key)
1:       builder.append(end_key);
1: 
1:     boolean present_start_token = true && (isSetStart_token());
1:     builder.append(present_start_token);
1:     if (present_start_token)
1:       builder.append(start_token);
1: 
1:     boolean present_end_token = true && (isSetEnd_token());
1:     builder.append(present_end_token);
1:     if (present_end_token)
1:       builder.append(end_token);
1: 
1:     boolean present_count = true;
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class KeyRange implements TBase<KeyRange, KeyRange._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // START_KEY
1:           return START_KEY;
1:         case 2: // END_KEY
1:           return END_KEY;
1:         case 3: // START_TOKEN
1:           return START_TOKEN;
1:         case 4: // END_TOKEN
1:           return END_TOKEN;
1:         case 5: // COUNT
1:           return COUNT;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.START_KEY, new FieldMetaData("start_key", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.END_KEY, new FieldMetaData("end_key", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.START_TOKEN, new FieldMetaData("start_token", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.END_TOKEN, new FieldMetaData("end_token", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStart_key()) {      lastComparison = TBaseHelper.compareTo(this.start_key, typedOther.start_key);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetEnd_key()) {      lastComparison = TBaseHelper.compareTo(this.end_key, typedOther.end_key);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStart_token()) {      lastComparison = TBaseHelper.compareTo(this.start_token, typedOther.start_token);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetEnd_token()) {      lastComparison = TBaseHelper.compareTo(this.end_token, typedOther.end_token);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(typedOther.isSetStart_key());
0:     if (isSetStart_key()) {      lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(typedOther.isSetEnd_key());
0:     if (isSetEnd_key()) {      lastComparison = TBaseHelper.compareTo(end_key, typedOther.end_key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(typedOther.isSetStart_token());
0:     if (isSetStart_token()) {      lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(typedOther.isSetEnd_token());
0:     if (isSetEnd_token()) {      lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // START_KEY
0:           if (field.type == TType.STRING) {
0:             this.start_key = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // END_KEY
0:           if (field.type == TType.STRING) {
0:             this.end_key = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // START_TOKEN
0:           if (field.type == TType.STRING) {
0:             this.start_token = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 4: // END_TOKEN
0:           if (field.type == TType.STRING) {
0:             this.end_token = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 5: // COUNT
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
1:             setCountIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:2c6948c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
1: /**
1:  * The semantics of start keys and tokens are slightly different.
1:  * Keys are start-inclusive; tokens are start-exclusive.  Token
1:  * ranges may also wrap -- that is, the end token may be less
1:  * than the start one.  Thus, a range from keyX to keyX is a
1:  * one-element range, but a range from tokenY to tokenY is the
1:  * full ring.
1:  */
0: public class KeyRange implements TBase<KeyRange._Fields>, java.io.Serializable, Cloneable, Comparable<KeyRange> {
0:   private static final TStruct STRUCT_DESC = new TStruct("KeyRange");
1: 
0:   private static final TField START_KEY_FIELD_DESC = new TField("start_key", TType.STRING, (short)1);
0:   private static final TField END_KEY_FIELD_DESC = new TField("end_key", TType.STRING, (short)2);
0:   private static final TField START_TOKEN_FIELD_DESC = new TField("start_token", TType.STRING, (short)3);
0:   private static final TField END_TOKEN_FIELD_DESC = new TField("end_token", TType.STRING, (short)4);
0:   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);
1: 
0:   public String start_key;
0:   public String end_key;
0:   public String start_token;
0:   public String end_token;
0:   public int count;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     START_KEY((short)1, "start_key"),
1:     END_KEY((short)2, "end_key"),
1:     START_TOKEN((short)3, "start_token"),
1:     END_TOKEN((short)4, "end_token"),
1:     COUNT((short)5, "count");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __COUNT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.START_KEY, new FieldMetaData("start_key", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.END_KEY, new FieldMetaData("end_key", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.START_TOKEN, new FieldMetaData("start_token", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.END_TOKEN, new FieldMetaData("end_token", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(KeyRange.class, metaDataMap);
1:   }
1: 
1:   public KeyRange() {
1:     this.count = 100;
1: 
1:   }
1: 
1:   public KeyRange(
1:     int count)
1:   {
1:     this();
1:     this.count = count;
1:     setCountIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public KeyRange(KeyRange other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetStart_key()) {
0:       this.start_key = other.start_key;
1:     }
1:     if (other.isSetEnd_key()) {
0:       this.end_key = other.end_key;
1:     }
1:     if (other.isSetStart_token()) {
1:       this.start_token = other.start_token;
1:     }
1:     if (other.isSetEnd_token()) {
1:       this.end_token = other.end_token;
1:     }
1:     this.count = other.count;
1:   }
1: 
1:   public KeyRange deepCopy() {
1:     return new KeyRange(this);
1:   }
1: 
0:   @Deprecated
0:   public KeyRange clone() {
1:     return new KeyRange(this);
1:   }
1: 
0:   public String getStart_key() {
0:     return this.start_key;
1:   }
1: 
0:   public KeyRange setStart_key(String start_key) {
1:     this.start_key = start_key;
1:     return this;
1:   }
1: 
1:   public void unsetStart_key() {
1:     this.start_key = null;
1:   }
1: 
0:   /** Returns true if field start_key is set (has been asigned a value) and false otherwise */
1:   public boolean isSetStart_key() {
1:     return this.start_key != null;
1:   }
1: 
1:   public void setStart_keyIsSet(boolean value) {
1:     if (!value) {
1:       this.start_key = null;
1:     }
1:   }
1: 
0:   public String getEnd_key() {
0:     return this.end_key;
1:   }
1: 
0:   public KeyRange setEnd_key(String end_key) {
1:     this.end_key = end_key;
1:     return this;
1:   }
1: 
1:   public void unsetEnd_key() {
1:     this.end_key = null;
1:   }
1: 
0:   /** Returns true if field end_key is set (has been asigned a value) and false otherwise */
1:   public boolean isSetEnd_key() {
1:     return this.end_key != null;
1:   }
1: 
1:   public void setEnd_keyIsSet(boolean value) {
1:     if (!value) {
1:       this.end_key = null;
1:     }
1:   }
1: 
1:   public String getStart_token() {
1:     return this.start_token;
1:   }
1: 
1:   public KeyRange setStart_token(String start_token) {
1:     this.start_token = start_token;
1:     return this;
1:   }
1: 
1:   public void unsetStart_token() {
1:     this.start_token = null;
1:   }
1: 
0:   /** Returns true if field start_token is set (has been asigned a value) and false otherwise */
1:   public boolean isSetStart_token() {
1:     return this.start_token != null;
1:   }
1: 
1:   public void setStart_tokenIsSet(boolean value) {
1:     if (!value) {
1:       this.start_token = null;
1:     }
1:   }
1: 
1:   public String getEnd_token() {
1:     return this.end_token;
1:   }
1: 
1:   public KeyRange setEnd_token(String end_token) {
1:     this.end_token = end_token;
1:     return this;
1:   }
1: 
1:   public void unsetEnd_token() {
1:     this.end_token = null;
1:   }
1: 
0:   /** Returns true if field end_token is set (has been asigned a value) and false otherwise */
1:   public boolean isSetEnd_token() {
1:     return this.end_token != null;
1:   }
1: 
1:   public void setEnd_tokenIsSet(boolean value) {
1:     if (!value) {
1:       this.end_token = null;
1:     }
1:   }
1: 
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
1:   public KeyRange setCount(int count) {
1:     this.count = count;
1:     setCountIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetCount() {
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field count is set (has been asigned a value) and false otherwise */
1:   public boolean isSetCount() {
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case START_KEY:
1:       if (value == null) {
1:         unsetStart_key();
1:       } else {
0:         setStart_key((String)value);
1:       }
1:       break;
1: 
1:     case END_KEY:
1:       if (value == null) {
1:         unsetEnd_key();
1:       } else {
0:         setEnd_key((String)value);
1:       }
1:       break;
1: 
1:     case START_TOKEN:
1:       if (value == null) {
1:         unsetStart_token();
1:       } else {
1:         setStart_token((String)value);
1:       }
1:       break;
1: 
1:     case END_TOKEN:
1:       if (value == null) {
1:         unsetEnd_token();
1:       } else {
1:         setEnd_token((String)value);
1:       }
1:       break;
1: 
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
1:       } else {
1:         setCount((Integer)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case START_KEY:
1:       return getStart_key();
1: 
1:     case END_KEY:
1:       return getEnd_key();
1: 
1:     case START_TOKEN:
1:       return getStart_token();
1: 
1:     case END_TOKEN:
1:       return getEnd_token();
1: 
1:     case COUNT:
0:       return new Integer(getCount());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case START_KEY:
1:       return isSetStart_key();
1:     case END_KEY:
1:       return isSetEnd_key();
1:     case START_TOKEN:
1:       return isSetStart_token();
1:     case END_TOKEN:
1:       return isSetEnd_token();
1:     case COUNT:
1:       return isSetCount();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof KeyRange)
1:       return this.equals((KeyRange)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(KeyRange that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_start_key = true && this.isSetStart_key();
1:     boolean that_present_start_key = true && that.isSetStart_key();
1:     if (this_present_start_key || that_present_start_key) {
1:       if (!(this_present_start_key && that_present_start_key))
1:         return false;
0:       if (!this.start_key.equals(that.start_key))
1:         return false;
1:     }
1: 
1:     boolean this_present_end_key = true && this.isSetEnd_key();
1:     boolean that_present_end_key = true && that.isSetEnd_key();
1:     if (this_present_end_key || that_present_end_key) {
1:       if (!(this_present_end_key && that_present_end_key))
1:         return false;
0:       if (!this.end_key.equals(that.end_key))
1:         return false;
1:     }
1: 
1:     boolean this_present_start_token = true && this.isSetStart_token();
1:     boolean that_present_start_token = true && that.isSetStart_token();
1:     if (this_present_start_token || that_present_start_token) {
1:       if (!(this_present_start_token && that_present_start_token))
1:         return false;
1:       if (!this.start_token.equals(that.start_token))
1:         return false;
1:     }
1: 
1:     boolean this_present_end_token = true && this.isSetEnd_token();
1:     boolean that_present_end_token = true && that.isSetEnd_token();
1:     if (this_present_end_token || that_present_end_token) {
1:       if (!(this_present_end_token && that_present_end_token))
1:         return false;
1:       if (!this.end_token.equals(that.end_token))
1:         return false;
1:     }
1: 
1:     boolean this_present_count = true;
1:     boolean that_present_count = true;
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(KeyRange other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     KeyRange typedOther = (KeyRange)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(isSetStart_key());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_key()).compareTo(isSetEnd_key());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(end_key, typedOther.end_key);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetStart_token()).compareTo(isSetStart_token());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(start_token, typedOther.start_token);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetEnd_token()).compareTo(isSetEnd_token());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(end_token, typedOther.end_token);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
1:       } else {
0:         switch (fieldId) {
1:           case START_KEY:
0:             if (field.type == TType.STRING) {
0:               this.start_key = iprot.readString();
1:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
1:             break;
1:           case END_KEY:
0:             if (field.type == TType.STRING) {
0:               this.end_key = iprot.readString();
1:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
1:             break;
1:           case START_TOKEN:
0:             if (field.type == TType.STRING) {
0:               this.start_token = iprot.readString();
1:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
1:             break;
1:           case END_TOKEN:
0:             if (field.type == TType.STRING) {
0:               this.end_token = iprot.readString();
1:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
1:             break;
1:           case COUNT:
0:             if (field.type == TType.I32) {
0:               this.count = iprot.readI32();
1:               setCountIsSet(true);
1:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
1:             }
1:             break;
1:         }
0:         iprot.readFieldEnd();
1:       }
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetCount()) {
0:       throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.start_key != null) {
1:       if (isSetStart_key()) {
1:         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
0:         oprot.writeString(this.start_key);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.end_key != null) {
1:       if (isSetEnd_key()) {
1:         oprot.writeFieldBegin(END_KEY_FIELD_DESC);
0:         oprot.writeString(this.end_key);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.start_token != null) {
1:       if (isSetStart_token()) {
1:         oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
0:         oprot.writeString(this.start_token);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.end_token != null) {
1:       if (isSetEnd_token()) {
1:         oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
0:         oprot.writeString(this.end_token);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:     oprot.writeI32(this.count);
1:     oprot.writeFieldEnd();
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("KeyRange(");
1:     boolean first = true;
1: 
1:     if (isSetStart_key()) {
1:       sb.append("start_key:");
1:       if (this.start_key == null) {
1:         sb.append("null");
1:       } else {
0:         sb.append(this.start_key);
1:       }
1:       first = false;
1:     }
1:     if (isSetEnd_key()) {
1:       if (!first) sb.append(", ");
1:       sb.append("end_key:");
1:       if (this.end_key == null) {
1:         sb.append("null");
1:       } else {
0:         sb.append(this.end_key);
1:       }
1:       first = false;
1:     }
1:     if (isSetStart_token()) {
1:       if (!first) sb.append(", ");
1:       sb.append("start_token:");
1:       if (this.start_token == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.start_token);
1:       }
1:       first = false;
1:     }
1:     if (isSetEnd_token()) {
1:       if (!first) sb.append(", ");
1:       sb.append("end_token:");
1:       if (this.end_token == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.end_token);
1:       }
1:       first = false;
1:     }
1:     if (!first) sb.append(", ");
1:     sb.append("count:");
1:     sb.append(this.count);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new KeyRangeStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new KeyRangeTupleSchemeFactory());
1:   }
1: 
1:   public ByteBuffer start_key; // optional
1:   public ByteBuffer end_key; // optional
1:   public String start_token; // optional
1:   public String end_token; // optional
1:   public List<IndexExpression> row_filter; // optional
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.START_KEY,_Fields.END_KEY,_Fields.START_TOKEN,_Fields.END_TOKEN,_Fields.ROW_FILTER};
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class KeyRangeStandardSchemeFactory implements SchemeFactory {
1:     public KeyRangeStandardScheme getScheme() {
1:       return new KeyRangeStandardScheme();
1:     }
1:   }
1: 
1:   private static class KeyRangeStandardScheme extends StandardScheme<KeyRange> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeyRange struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // START_KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start_key = iprot.readBinary();
1:               struct.setStart_keyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // END_KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.end_key = iprot.readBinary();
1:               struct.setEnd_keyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 3: // START_TOKEN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start_token = iprot.readString();
1:               struct.setStart_tokenIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 4: // END_TOKEN
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.end_token = iprot.readString();
1:               struct.setEnd_tokenIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 6: // ROW_FILTER
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
1:                 struct.row_filter = new ArrayList<IndexExpression>(_list32.size);
1:                 for (int _i33 = 0; _i33 < _list32.size; ++_i33)
1:                 {
0:                   IndexExpression _elem34; // required
1:                   _elem34 = new IndexExpression();
1:                   _elem34.read(iprot);
1:                   struct.row_filter.add(_elem34);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setRow_filterIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 5: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetCount()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:       }
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeyRange struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.start_key != null) {
1:         if (struct.isSetStart_key()) {
0:           oprot.writeFieldBegin(START_KEY_FIELD_DESC);
1:           oprot.writeBinary(struct.start_key);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.end_key != null) {
1:         if (struct.isSetEnd_key()) {
0:           oprot.writeFieldBegin(END_KEY_FIELD_DESC);
1:           oprot.writeBinary(struct.end_key);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.start_token != null) {
1:         if (struct.isSetStart_token()) {
0:           oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
1:           oprot.writeString(struct.start_token);
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.end_token != null) {
1:         if (struct.isSetEnd_token()) {
0:           oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
1:           oprot.writeString(struct.end_token);
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:       oprot.writeI32(struct.count);
0:       oprot.writeFieldEnd();
1:       if (struct.row_filter != null) {
1:         if (struct.isSetRow_filter()) {
0:           oprot.writeFieldBegin(ROW_FILTER_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.row_filter.size()));
1:             for (IndexExpression _iter35 : struct.row_filter)
1:             {
1:               _iter35.write(oprot);
1:             }
0:             oprot.writeListEnd();
1:           }
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class KeyRangeTupleSchemeFactory implements SchemeFactory {
1:     public KeyRangeTupleScheme getScheme() {
1:       return new KeyRangeTupleScheme();
1:     }
1:   }
1: 
1:   private static class KeyRangeTupleScheme extends TupleScheme<KeyRange> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, KeyRange struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeI32(struct.count);
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetStart_key()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetEnd_key()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetStart_token()) {
1:         optionals.set(2);
1:       }
1:       if (struct.isSetEnd_token()) {
1:         optionals.set(3);
1:       }
1:       if (struct.isSetRow_filter()) {
1:         optionals.set(4);
1:       }
1:       oprot.writeBitSet(optionals, 5);
1:       if (struct.isSetStart_key()) {
1:         oprot.writeBinary(struct.start_key);
1:       }
1:       if (struct.isSetEnd_key()) {
1:         oprot.writeBinary(struct.end_key);
1:       }
1:       if (struct.isSetStart_token()) {
1:         oprot.writeString(struct.start_token);
1:       }
1:       if (struct.isSetEnd_token()) {
1:         oprot.writeString(struct.end_token);
1:       }
1:       if (struct.isSetRow_filter()) {
1:         {
1:           oprot.writeI32(struct.row_filter.size());
1:           for (IndexExpression _iter36 : struct.row_filter)
1:           {
1:             _iter36.write(oprot);
1:           }
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, KeyRange struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.count = iprot.readI32();
1:       struct.setCountIsSet(true);
1:       BitSet incoming = iprot.readBitSet(5);
1:       if (incoming.get(0)) {
1:         struct.start_key = iprot.readBinary();
1:         struct.setStart_keyIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.end_key = iprot.readBinary();
1:         struct.setEnd_keyIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         struct.start_token = iprot.readString();
1:         struct.setStart_tokenIsSet(true);
1:       }
1:       if (incoming.get(3)) {
1:         struct.end_token = iprot.readString();
1:         struct.setEnd_tokenIsSet(true);
1:       }
1:       if (incoming.get(4)) {
1:         {
1:           org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:           struct.row_filter = new ArrayList<IndexExpression>(_list37.size);
1:           for (int _i38 = 0; _i38 < _list37.size; ++_i38)
1:           {
0:             IndexExpression _elem39; // required
1:             _elem39 = new IndexExpression();
1:             _elem39.read(iprot);
1:             struct.row_filter.add(_elem39);
1:           }
1:         }
1:         struct.setRow_filterIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer start_key; // required
0:   public ByteBuffer end_key; // required
0:   public String start_token; // required
0:   public String end_token; // required
0:   public List<IndexExpression> row_filter; // required
1:   public int count; // required
/////////////////////////////////////////////////////////////////////////
1:       return Integer.valueOf(getCount());
/////////////////////////////////////////////////////////////////////////
0:                 IndexExpression _elem18; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class KeyRange implements org.apache.thrift.TBase<KeyRange, KeyRange._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyRange");
1:   private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField START_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("start_token", org.apache.thrift.protocol.TType.STRING, (short)3);
1:   private static final org.apache.thrift.protocol.TField END_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("end_token", org.apache.thrift.protocol.TType.STRING, (short)4);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.START_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("start_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.END_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("end_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyRange.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.start_key = org.apache.thrift.TBaseHelper.copyBinary(other.start_key);
1:       this.end_key = org.apache.thrift.TBaseHelper.copyBinary(other.end_key);
/////////////////////////////////////////////////////////////////////////
1:     setStart_key(org.apache.thrift.TBaseHelper.rightSize(start_key));
1:     return start_key == null ? null : start_key.array();
1:   public ByteBuffer bufferForStart_key() {
1:     setStart_key(start_key == null ? (ByteBuffer)null : ByteBuffer.wrap(start_key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setEnd_key(org.apache.thrift.TBaseHelper.rightSize(end_key));
1:     return end_key == null ? null : end_key.array();
1:   public ByteBuffer bufferForEnd_key() {
1:     setEnd_key(end_key == null ? (ByteBuffer)null : ByteBuffer.wrap(end_key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field start_token is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field end_token is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, typedOther.start_key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, typedOther.end_key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_token, typedOther.start_token);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_token, typedOther.end_token);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.TBaseHelper.toString(this.start_key, sb);
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.TBaseHelper.toString(this.end_key, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
commit:f3a4e17
/////////////////////////////////////////////////////////////////////////
0:   public byte[] start_key;
0:   public byte[] end_key;
/////////////////////////////////////////////////////////////////////////
0:       this.start_key = new byte[other.start_key.length];
0:       System.arraycopy(other.start_key, 0, start_key, 0, other.start_key.length);
0:       this.end_key = new byte[other.end_key.length];
0:       System.arraycopy(other.end_key, 0, end_key, 0, other.end_key.length);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getStart_key() {
1:   public KeyRange setStart_key(byte[] start_key) {
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getEnd_key() {
1:   public KeyRange setEnd_key(byte[] end_key) {
/////////////////////////////////////////////////////////////////////////
0:         setStart_key((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:         setEnd_key((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.start_key, that.start_key))
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.end_key, that.end_key))
/////////////////////////////////////////////////////////////////////////
0:             this.start_key = iprot.readBinary();
0:             this.end_key = iprot.readBinary();
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeBinary(this.start_key);
0:         oprot.writeBinary(this.end_key);
/////////////////////////////////////////////////////////////////////////
0:           int __start_key_size = Math.min(this.start_key.length, 128);
0:           for (int i = 0; i < __start_key_size; i++) {
0:             if (i != 0) sb.append(" ");
0:             sb.append(Integer.toHexString(this.start_key[i]).length() > 1 ? Integer.toHexString(this.start_key[i]).substring(Integer.toHexString(this.start_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start_key[i]).toUpperCase());
0:           }
0:           if (this.start_key.length > 128) sb.append(" ...");
/////////////////////////////////////////////////////////////////////////
0:           int __end_key_size = Math.min(this.end_key.length, 128);
0:           for (int i = 0; i < __end_key_size; i++) {
0:             if (i != 0) sb.append(" ");
0:             sb.append(Integer.toHexString(this.end_key[i]).length() > 1 ? Integer.toHexString(this.end_key[i]).substring(Integer.toHexString(this.end_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.end_key[i]).toUpperCase());
0:           }
0:           if (this.end_key.length > 128) sb.append(" ...");
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
============================================================================