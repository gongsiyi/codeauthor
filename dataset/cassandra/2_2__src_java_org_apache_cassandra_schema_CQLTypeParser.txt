1:340df43: /*
1:340df43:  * Licensed to the Apache Software Foundation (ASF) under one
1:340df43:  * or more contributor license agreements.  See the NOTICE file
1:340df43:  * distributed with this work for additional information
1:340df43:  * regarding copyright ownership.  The ASF licenses this file
1:340df43:  * to you under the Apache License, Version 2.0 (the
1:340df43:  * "License"); you may not use this file except in compliance
1:340df43:  * with the License.  You may obtain a copy of the License at
1:340df43:  *
1:340df43:  *     http://www.apache.org/licenses/LICENSE-2.0
1:340df43:  *
1:340df43:  * Unless required by applicable law or agreed to in writing, software
1:340df43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:340df43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:340df43:  * See the License for the specific language governing permissions and
1:340df43:  * limitations under the License.
1:340df43:  */
1:340df43: package org.apache.cassandra.schema;
5:340df43: 
1:340df43: import com.google.common.collect.ImmutableSet;
1:340df43: 
1:340df43: import org.apache.cassandra.cql3.*;
1:340df43: import org.apache.cassandra.db.marshal.AbstractType;
1:340df43: import org.apache.cassandra.db.marshal.UserType;
1:340df43: 
1:340df43: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:340df43: 
1:340df43: public final class CQLTypeParser
4:340df43: {
1:340df43:     private static final ImmutableSet<String> PRIMITIVE_TYPES;
1:340df43: 
1:340df43:     static
1:340df43:     {
1:340df43:         ImmutableSet.Builder<String> builder = ImmutableSet.builder();
1:340df43:         for (CQL3Type.Native primitive : CQL3Type.Native.values())
1:340df43:             builder.add(primitive.name().toLowerCase());
1:340df43:         PRIMITIVE_TYPES = builder.build();
4:340df43:     }
1:340df43: 
1:340df43:     public static AbstractType<?> parse(String keyspace, String unparsed, Types userTypes)
1:340df43:     {
1:340df43:         String lowercased = unparsed.toLowerCase();
1:340df43: 
1:340df43:         // fast path for the common case of a primitive type
1:340df43:         if (PRIMITIVE_TYPES.contains(lowercased))
1:340df43:             return CQL3Type.Native.valueOf(unparsed.toUpperCase()).getType();
1:340df43: 
1:340df43:         // special-case top-level UDTs
1:340df43:         UserType udt = userTypes.getNullable(bytes(lowercased));
1:340df43:         if (udt != null)
1:340df43:             return udt;
1:340df43: 
1:18e2fca:         return parseRaw(unparsed).prepareInternal(keyspace, userTypes).getType();
1:340df43:     }
1:340df43: 
1:340df43:     static CQL3Type.Raw parseRaw(String type)
1:340df43:     {
1:e94032a:         return CQLFragmentParser.parseAny(CqlParser::comparatorType, type, "CQL type");
1:340df43:     }
1:340df43: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e94032a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return CQLFragmentParser.parseAny(CqlParser::comparatorType, type, "CQL type");
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:18e2fca
/////////////////////////////////////////////////////////////////////////
1:         return parseRaw(unparsed).prepareInternal(keyspace, userTypes).getType();
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import com.google.common.collect.ImmutableSet;
1: 
0: import org.antlr.runtime.*;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.UserType;
0: import org.apache.cassandra.exceptions.SyntaxException;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: public final class CQLTypeParser
1: {
1:     private static final ImmutableSet<String> PRIMITIVE_TYPES;
1: 
1:     static
1:     {
1:         ImmutableSet.Builder<String> builder = ImmutableSet.builder();
1:         for (CQL3Type.Native primitive : CQL3Type.Native.values())
1:             builder.add(primitive.name().toLowerCase());
1:         PRIMITIVE_TYPES = builder.build();
1:     }
1: 
1:     public static AbstractType<?> parse(String keyspace, String unparsed, Types userTypes)
1:     {
1:         String lowercased = unparsed.toLowerCase();
1: 
1:         // fast path for the common case of a primitive type
1:         if (PRIMITIVE_TYPES.contains(lowercased))
1:             return CQL3Type.Native.valueOf(unparsed.toUpperCase()).getType();
1: 
1:         // special-case top-level UDTs
1:         UserType udt = userTypes.getNullable(bytes(lowercased));
1:         if (udt != null)
1:             return udt;
1: 
0:         return parseRaw(unparsed).prepare(keyspace, userTypes).getType();
1:     }
1: 
1:     static CQL3Type.Raw parseRaw(String type)
1:     {
0:         try
1:         {
0:             // Lexer and parser
0:             ErrorCollector errorCollector = new ErrorCollector(type);
0:             CharStream stream = new ANTLRStringStream(type);
0:             CqlLexer lexer = new CqlLexer(stream);
0:             lexer.addErrorListener(errorCollector);
1: 
0:             TokenStream tokenStream = new CommonTokenStream(lexer);
0:             CqlParser parser = new CqlParser(tokenStream);
0:             parser.addErrorListener(errorCollector);
1: 
0:             // Parse the query string to a statement instance
0:             CQL3Type.Raw rawType = parser.comparatorType();
1: 
0:             // The errorCollector has queue up any errors that the lexer and parser may have encountered
0:             // along the way, if necessary, we turn the last error into exceptions here.
0:             errorCollector.throwFirstSyntaxError();
1: 
0:             return rawType;
1:         }
0:         catch (RuntimeException re)
1:         {
0:             throw new SyntaxException(String.format("Failed parsing statement: [%s] reason: %s %s",
0:                                                     type,
0:                                                     re.getClass().getSimpleName(),
0:                                                     re.getMessage()));
1:         }
0:         catch (RecognitionException e)
1:         {
0:             throw new SyntaxException("Invalid or malformed CQL type: " + e.getMessage());
1:         }
1:     }
1: }
============================================================================