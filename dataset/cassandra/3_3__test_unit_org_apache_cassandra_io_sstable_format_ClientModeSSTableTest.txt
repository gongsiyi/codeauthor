1:a29d206: /*
1:a29d206:  * Licensed to the Apache Software Foundation (ASF) under one
1:a29d206:  * or more contributor license agreements.  See the NOTICE file
1:a29d206:  * distributed with this work for additional information
1:a29d206:  * regarding copyright ownership.  The ASF licenses this file
1:a29d206:  * to you under the Apache License, Version 2.0 (the
1:a29d206:  * "License"); you may not use this file except in compliance
1:a29d206:  * with the License.  You may obtain a copy of the License at
1:a29d206:  *
1:a29d206:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a29d206:  *
1:a29d206:  * Unless required by applicable law or agreed to in writing, software
1:a29d206:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a29d206:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a29d206:  * See the License for the specific language governing permissions and
1:a29d206:  * limitations under the License.
1:a29d206:  */
1:a29d206: package org.apache.cassandra.io.sstable.format;
1:a29d206: 
1:a29d206: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:a29d206: 
1:a29d206: import java.io.File;
1:a29d206: import java.nio.ByteBuffer;
1:a29d206: 
1:a29d206: import com.google.common.util.concurrent.Runnables;
1:a29d206: import org.junit.BeforeClass;
1:a29d206: import org.junit.Test;
1:a29d206: 
1:a29d206: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:a29d206: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:4fb559b: import org.apache.cassandra.db.Slices;
1:a29d206: import org.apache.cassandra.db.filter.ColumnFilter;
1:a29d206: import org.apache.cassandra.db.marshal.BytesType;
1:4fb559b: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:a29d206: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:a29d206: import org.apache.cassandra.exceptions.ConfigurationException;
1:a29d206: import org.apache.cassandra.io.sstable.Descriptor;
1:a29d206: 
1:a29d206: /**
1:a29d206:  * Tests backwards compatibility for SSTables
1:a29d206:  */
1:a29d206: public class ClientModeSSTableTest
1:a29d206: {
1:a29d206:     public static final String LEGACY_SSTABLE_PROP = "legacy-sstable-root";
1:a29d206:     public static final String KSNAME = "Keyspace1";
1:a29d206:     public static final String CFNAME = "Standard1";
1:a29d206: 
1:a29d206:     public static File LEGACY_SSTABLE_ROOT;
1:a29d206: 
1:a29d206:     static CFMetaData metadata;
1:a29d206: 
1:a29d206:     @BeforeClass
1:a29d206:     public static void defineSchema() throws ConfigurationException
1:a29d206:     {
1:9797511:         DatabaseDescriptor.toolInitialization();
1:a29d206: 
1:a29d206:         metadata = CFMetaData.Builder.createDense(KSNAME, CFNAME, false, false)
1:a29d206:                                                 .addPartitionKey("key", BytesType.instance)
1:a29d206:                                                 .addClusteringColumn("column", BytesType.instance)
1:a29d206:                                                 .addRegularColumn("value", BytesType.instance)
1:a29d206:                                                 .withPartitioner(ByteOrderedPartitioner.instance)
1:a29d206:                                                 .build();
1:a29d206: 
1:a29d206:         String scp = System.getProperty(LEGACY_SSTABLE_PROP);
1:a29d206:         assert scp != null;
1:a29d206:         LEGACY_SSTABLE_ROOT = new File(scp).getAbsoluteFile();
1:a29d206:         assert LEGACY_SSTABLE_ROOT.isDirectory();
1:a29d206:     }
1:a29d206: 
1:a29d206:     /**
1:a29d206:      * Get a descriptor for the legacy sstable at the given version.
1:a29d206:      */
1:a29d206:     protected Descriptor getDescriptor(String ver)
1:a29d206:     {
1:a29d206:         File directory = new File(LEGACY_SSTABLE_ROOT + File.separator + ver + File.separator + KSNAME);
1:a29d206:         return new Descriptor(ver, directory, KSNAME, CFNAME, 0, SSTableFormat.Type.LEGACY);
1:a29d206:     }
1:a29d206: 
1:a29d206:     @Test
1:a29d206:     public void testVersions() throws Throwable
1:a29d206:     {
1:a29d206:         boolean notSkipped = false;
1:a29d206: 
1:a29d206:         for (File version : LEGACY_SSTABLE_ROOT.listFiles())
1:a29d206:         {
1:a29d206:             if (!new File(LEGACY_SSTABLE_ROOT + File.separator + version.getName() + File.separator + KSNAME).isDirectory())
1:a29d206:                 continue;
1:a29d206:             if (Version.validate(version.getName()) && SSTableFormat.Type.LEGACY.info.getVersion(version.getName()).isCompatible())
1:a29d206:             {
1:a29d206:                 notSkipped = true;
1:a29d206:                 testVersion(version.getName());
1:a29d206:             }
1:a29d206:         }
1:a29d206: 
1:a29d206:         assert notSkipped;
1:a29d206:     }
1:a29d206: 
1:a29d206:     public void testVersion(String version) throws Throwable
1:a29d206:     {
1:a29d206:         SSTableReader reader = null;
1:a29d206:         try
1:a29d206:         {
1:a29d206:             reader = SSTableReader.openNoValidation(getDescriptor(version), metadata);
1:a29d206: 
1:a29d206:             ByteBuffer key = bytes(Integer.toString(100));
1:a29d206: 
1:4fb559b:             try (UnfilteredRowIterator iter = reader.iterator(metadata.decorateKey(key), Slices.ALL, ColumnFilter.selection(metadata.partitionColumns()), false, false))
1:a29d206:             {
1:a29d206:                 assert iter.next().clustering().get(0).equals(key);
1:a29d206:             }
1:a29d206:         }
1:a29d206:         catch (Throwable e)
1:a29d206:         {
1:a29d206:             System.err.println("Failed to read " + version);
1:a29d206:             throw e;
1:a29d206:         }
1:a29d206:         finally
1:a29d206:         {
1:a29d206:             if (reader != null)
1:a29d206:             {
1:a29d206:                 int globalTidyCount = SSTableReader.GlobalTidy.lookup.size();
1:a29d206:                 reader.selfRef().release();
1:a29d206:                 assert reader.selfRef().globalCount() == 0;
1:a29d206: 
1:a29d206:                 // await clean-up to complete if started.
1:a29d206:                 ScheduledExecutors.nonPeriodicTasks.submit(Runnables.doNothing()).get();
1:a29d206:                 // Ensure clean-up completed.
1:a29d206:                 assert SSTableReader.GlobalTidy.lookup.size() < globalTidyCount;
1:a29d206:             }
1:a29d206:         }
1:a29d206:     }
1:a29d206: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.toolInitialization();
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:4fb559b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Slices;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
/////////////////////////////////////////////////////////////////////////
1:             try (UnfilteredRowIterator iter = reader.iterator(metadata.decorateKey(key), Slices.ALL, ColumnFilter.selection(metadata.partitionColumns()), false, false))
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:a29d206
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.format;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: import java.io.File;
1: import java.nio.ByteBuffer;
1: 
1: import com.google.common.util.concurrent.Runnables;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.db.filter.ColumnFilter;
1: import org.apache.cassandra.db.marshal.BytesType;
0: import org.apache.cassandra.db.rows.SliceableUnfilteredRowIterator;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.format.SSTableFormat;
0: import org.apache.cassandra.io.sstable.format.SSTableReader;
0: import org.apache.cassandra.io.sstable.format.Version;
1: 
1: /**
1:  * Tests backwards compatibility for SSTables
1:  */
1: public class ClientModeSSTableTest
1: {
1:     public static final String LEGACY_SSTABLE_PROP = "legacy-sstable-root";
1:     public static final String KSNAME = "Keyspace1";
1:     public static final String CFNAME = "Standard1";
1: 
1:     public static File LEGACY_SSTABLE_ROOT;
1: 
1:     static CFMetaData metadata;
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
0:         Config.setClientMode(true);
1: 
1:         metadata = CFMetaData.Builder.createDense(KSNAME, CFNAME, false, false)
1:                                                 .addPartitionKey("key", BytesType.instance)
1:                                                 .addClusteringColumn("column", BytesType.instance)
1:                                                 .addRegularColumn("value", BytesType.instance)
1:                                                 .withPartitioner(ByteOrderedPartitioner.instance)
1:                                                 .build();
1: 
1:         String scp = System.getProperty(LEGACY_SSTABLE_PROP);
1:         assert scp != null;
1:         LEGACY_SSTABLE_ROOT = new File(scp).getAbsoluteFile();
1:         assert LEGACY_SSTABLE_ROOT.isDirectory();
1:     }
1: 
1:     /**
1:      * Get a descriptor for the legacy sstable at the given version.
1:      */
1:     protected Descriptor getDescriptor(String ver)
1:     {
1:         File directory = new File(LEGACY_SSTABLE_ROOT + File.separator + ver + File.separator + KSNAME);
1:         return new Descriptor(ver, directory, KSNAME, CFNAME, 0, SSTableFormat.Type.LEGACY);
1:     }
1: 
1:     @Test
1:     public void testVersions() throws Throwable
1:     {
1:         boolean notSkipped = false;
1: 
1:         for (File version : LEGACY_SSTABLE_ROOT.listFiles())
1:         {
1:             if (!new File(LEGACY_SSTABLE_ROOT + File.separator + version.getName() + File.separator + KSNAME).isDirectory())
1:                 continue;
1:             if (Version.validate(version.getName()) && SSTableFormat.Type.LEGACY.info.getVersion(version.getName()).isCompatible())
1:             {
1:                 notSkipped = true;
1:                 testVersion(version.getName());
1:             }
1:         }
1: 
1:         assert notSkipped;
1:     }
1: 
1:     public void testVersion(String version) throws Throwable
1:     {
1:         SSTableReader reader = null;
1:         try
1:         {
1:             reader = SSTableReader.openNoValidation(getDescriptor(version), metadata);
1: 
1:             ByteBuffer key = bytes(Integer.toString(100));
1: 
0:             try (SliceableUnfilteredRowIterator iter = reader.iterator(metadata.decorateKey(key), ColumnFilter.selection(metadata.partitionColumns()), false, false))
1:             {
1:                 assert iter.next().clustering().get(0).equals(key);
1:             }
1:         }
1:         catch (Throwable e)
1:         {
1:             System.err.println("Failed to read " + version);
1:             throw e;
1:         }
1:         finally
1:         {
1:             if (reader != null)
1:             {
1:                 int globalTidyCount = SSTableReader.GlobalTidy.lookup.size();
1:                 reader.selfRef().release();
1:                 assert reader.selfRef().globalCount() == 0;
1: 
1:                 // await clean-up to complete if started.
1:                 ScheduledExecutors.nonPeriodicTasks.submit(Runnables.doNothing()).get();
1:                 // Ensure clean-up completed.
1:                 assert SSTableReader.GlobalTidy.lookup.size() < globalTidyCount;
1:             }
1:         }
1:     }
1: }
============================================================================