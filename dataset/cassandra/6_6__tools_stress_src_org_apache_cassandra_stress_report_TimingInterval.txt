1:e73633c: package org.apache.cassandra.stress.report;
1:9f14856: /*
1:89f275c:  *
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:89f275c:  *
1:9f14856:  */
1:9f14856: 
1:89f275c: import org.HdrHistogram.Histogram;
11:2e1e98a: 
1:2e1e98a: // represents measurements taken over an interval of time
1:2e1e98a: // used for both single timer results and merged timer results
1:2e1e98a: public final class TimingInterval
10:2e1e98a: {
1:e73633c:     private final Histogram responseTime = new Histogram(3);
1:e73633c:     private final Histogram serviceTime = new Histogram(3);
1:e73633c:     private final Histogram waitTime = new Histogram(3);
1:89f275c: 
1:0f5e780:     public static final long[] EMPTY_SAMPLE = new long[0];
1:2e1e98a:     // nanos
1:e73633c:     private long startNs = Long.MAX_VALUE;
1:e73633c:     private long endNs = Long.MIN_VALUE;
1:2e1e98a: 
1:2e1e98a:     // discrete
1:e73633c:     public long partitionCount;
1:e73633c:     public long rowCount;
1:e73633c:     public long errorCount;
1:89f275c:     public final boolean isFixed;
1:2e1e98a: 
1:e73633c:     public TimingInterval(boolean isFixed){
1:e73633c:         this.isFixed = isFixed;
1:e73633c:     }
1:6bbfb55: 
1:6bbfb55:     public String toString()
1:6bbfb55:     {
1:e73633c:         return String.format("Start: %d end: %d maxLatency: %d pCount: %d rcount: %d opCount: %d errors: %d",
1:e73633c:                              startNs, endNs, getLatencyHistogram().getMaxValue(),
1:89f275c:                              partitionCount, rowCount, getLatencyHistogram().getTotalCount(), errorCount);
1:6bbfb55:     }
1:89f275c: 
1:89f275c: 
1:0580fb2:     public double opRate()
1:6bbfb55:     {
1:89f275c:         return getLatencyHistogram().getTotalCount() / ((endNs - startNs) * 0.000000001d);
1:6bbfb55:     }
1:6bbfb55: 
1:0580fb2:     public double adjustedRowRate()
1:6bbfb55:     {
1:89f275c:         return rowCount / ((endNs - (startNs + getLatencyHistogram().getMaxValue())) * 0.000000001d);
1:6bbfb55:     }
1:6bbfb55: 
1:7536429:     public double partitionRate()
1:6bbfb55:     {
1:89f275c:         return partitionCount / ((endNs - startNs) * 0.000000001d);
1:6bbfb55:     }
1:6bbfb55: 
1:7536429:     public double rowRate()
1:7536429:     {
1:89f275c:         return rowCount / ((endNs - startNs) * 0.000000001d);
1:7536429:     }
1:6bbfb55: 
1:89f275c:     public double meanLatencyMs()
1:2e1e98a:     {
1:89f275c:         return getLatencyHistogram().getMean() * 0.000001d;
11:2e1e98a:     }
1:7536429: 
1:89f275c:     public double maxLatencyMs()
1:2e1e98a:     {
1:89f275c:         return getLatencyHistogram().getMaxValue() * 0.000001d;
1:2e1e98a:     }
1:2e1e98a: 
1:89f275c:     public double medianLatencyMs()
1:2e1e98a:     {
1:89f275c:         return getLatencyHistogram().getValueAtPercentile(50.0) * 0.000001d;
1:2e1e98a:     }
1:89f275c: 
1:2e1e98a: 
1:89f275c:     /**
1:89f275c:      * @param percentile between 0.0 and 100.0
1:89f275c:      * @return latency in milliseconds at percentile
1:89f275c:      */
1:89f275c:     public double latencyAtPercentileMs(double percentile)
1:2e1e98a:     {
1:89f275c:         return getLatencyHistogram().getValueAtPercentile(percentile) * 0.000001d;
1:2e1e98a:     }
1:2e1e98a: 
1:89f275c:     public long runTimeMs()
1:2e1e98a:     {
1:89f275c:         return (endNs - startNs) / 1000000;
1:2e1e98a:     }
1:2e1e98a: 
1:89f275c:     public long endNanos()
1:2e1e98a:     {
1:89f275c:         return endNs;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public long startNanos()
1:2e1e98a:     {
1:89f275c:         return startNs;
1:89f275c:     }
1:89f275c: 
1:89f275c:     public Histogram responseTime()
1:89f275c:     {
1:89f275c:         return responseTime;
1:89f275c:     }
1:89f275c: 
1:89f275c:     public Histogram serviceTime()
1:89f275c:     {
1:89f275c:         return serviceTime;
1:89f275c:     }
1:89f275c: 
1:89f275c:     public Histogram waitTime()
1:89f275c:     {
1:89f275c:         return waitTime;
1:89f275c:     }
1:89f275c: 
1:89f275c:     private Histogram getLatencyHistogram()
1:89f275c:     {
1:89f275c:         if (!isFixed || responseTime.getTotalCount() == 0)
1:89f275c:             return serviceTime;
1:89f275c:         else
1:89f275c:             return responseTime;
1:2e1e98a:     }
1:6bbfb55: 
1:6bbfb55:     public static enum TimingParameter
1:6bbfb55:     {
1:6bbfb55:         OPRATE, ROWRATE, ADJROWRATE, PARTITIONRATE, MEANLATENCY, MAXLATENCY, MEDIANLATENCY, RANKLATENCY,
1:6bbfb55:         ERRORCOUNT, PARTITIONCOUNT
1:6bbfb55:     }
1:6bbfb55: 
1:6bbfb55:     String getStringValue(TimingParameter value)
1:6bbfb55:     {
1:6bbfb55:         return getStringValue(value, Float.NaN);
1:6bbfb55:     }
1:6bbfb55: 
1:89f275c:     String getStringValue(TimingParameter value, double rank)
1:6bbfb55:     {
1:6bbfb55:         switch (value)
1:6bbfb55:         {
1:ff4d0f9:             case OPRATE:         return String.format("%,.0f", opRate());
1:ff4d0f9:             case ROWRATE:        return String.format("%,.0f", rowRate());
1:ff4d0f9:             case ADJROWRATE:     return String.format("%,.0f", adjustedRowRate());
1:ff4d0f9:             case PARTITIONRATE:  return String.format("%,.0f", partitionRate());
1:89f275c:             case MEANLATENCY:    return String.format("%,.1f", meanLatencyMs());
1:89f275c:             case MAXLATENCY:     return String.format("%,.1f", maxLatencyMs());
1:89f275c:             case MEDIANLATENCY:  return String.format("%,.1f", medianLatencyMs());
1:89f275c:             case RANKLATENCY:    return String.format("%,.1f", latencyAtPercentileMs(rank));
1:ff4d0f9:             case ERRORCOUNT:     return String.format("%,d", errorCount);
1:ff4d0f9:             case PARTITIONCOUNT: return String.format("%,d", partitionCount);
1:6bbfb55:             default:             throw new IllegalStateException();
1:6bbfb55:         }
1:6bbfb55:     }
1:89f275c: 
1:89f275c:     public long operationCount()
1:89f275c:     {
1:89f275c:         return getLatencyHistogram().getTotalCount();
1:89f275c:     }
1:e73633c: 
1:e73633c: 
1:e73633c:     public void startNanos(long started)
1:e73633c:     {
1:e73633c:         this.startNs = started;
1:e73633c:     }
1:e73633c:     public void endNanos(long ended)
1:e73633c:     {
1:e73633c:         this.endNs = ended;
1:e73633c:     }
1:e73633c: 
1:e73633c: 
1:e73633c:     public void reset()
1:e73633c:     {
1:e73633c:         this.endNs = Long.MIN_VALUE;
1:e73633c:         this.startNs = Long.MAX_VALUE;
1:e73633c:         this.errorCount = 0;
1:e73633c:         this.rowCount = 0;
1:e73633c:         this.partitionCount = 0;
1:e73633c:         if(this.responseTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.responseTime.reset();
1:e73633c:         }
1:e73633c:         if(this.serviceTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.serviceTime.reset();
1:e73633c:         }
1:e73633c:         if(this.waitTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.waitTime.reset();
1:e73633c:         }
1:e73633c:     }
1:e73633c: 
1:e73633c:     public void add(TimingInterval value)
1:e73633c:     {
1:e73633c:         if(this.startNs > value.startNs)
1:e73633c:         {
1:e73633c:             this.startNs = value.startNs;
1:e73633c:         }
1:e73633c:         if(this.endNs < value.endNs)
1:e73633c:         {
1:e73633c:             this.endNs = value.endNs;
1:e73633c:         }
1:e73633c: 
1:e73633c:         this.errorCount += value.errorCount;
1:e73633c:         this.rowCount += value.rowCount;
1:e73633c:         this.partitionCount += value.partitionCount;
1:e73633c: 
1:e73633c:         if (value.responseTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.responseTime.add(value.responseTime);
1:e73633c:         }
1:e73633c:         if (value.serviceTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.serviceTime.add(value.serviceTime);
1:e73633c:         }
1:e73633c:         if (value.waitTime.getTotalCount() != 0)
1:e73633c:         {
1:e73633c:             this.waitTime.add(value.waitTime);
1:e73633c:         }
1:e73633c:     }
1:6bbfb55:  }
1:2e1e98a: 
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.report;
/////////////////////////////////////////////////////////////////////////
1:     private final Histogram responseTime = new Histogram(3);
1:     private final Histogram serviceTime = new Histogram(3);
1:     private final Histogram waitTime = new Histogram(3);
1:     private long startNs = Long.MAX_VALUE;
1:     private long endNs = Long.MIN_VALUE;
1:     public long partitionCount;
1:     public long rowCount;
1:     public long errorCount;
1:     public TimingInterval(boolean isFixed){
1:         this.isFixed = isFixed;
1:     }
1:         return String.format("Start: %d end: %d maxLatency: %d pCount: %d rcount: %d opCount: %d errors: %d",
1:                              startNs, endNs, getLatencyHistogram().getMaxValue(),
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public void startNanos(long started)
1:     {
1:         this.startNs = started;
1:     }
1:     public void endNanos(long ended)
1:     {
1:         this.endNs = ended;
1:     }
1: 
1: 
1:     public void reset()
1:     {
1:         this.endNs = Long.MIN_VALUE;
1:         this.startNs = Long.MAX_VALUE;
1:         this.errorCount = 0;
1:         this.rowCount = 0;
1:         this.partitionCount = 0;
1:         if(this.responseTime.getTotalCount() != 0)
1:         {
1:             this.responseTime.reset();
1:         }
1:         if(this.serviceTime.getTotalCount() != 0)
1:         {
1:             this.serviceTime.reset();
1:         }
1:         if(this.waitTime.getTotalCount() != 0)
1:         {
1:             this.waitTime.reset();
1:         }
1:     }
1: 
1:     public void add(TimingInterval value)
1:     {
1:         if(this.startNs > value.startNs)
1:         {
1:             this.startNs = value.startNs;
1:         }
1:         if(this.endNs < value.endNs)
1:         {
1:             this.endNs = value.endNs;
1:         }
1: 
1:         this.errorCount += value.errorCount;
1:         this.rowCount += value.rowCount;
1:         this.partitionCount += value.partitionCount;
1: 
1:         if (value.responseTime.getTotalCount() != 0)
1:         {
1:             this.responseTime.add(value.responseTime);
1:         }
1:         if (value.serviceTime.getTotalCount() != 0)
1:         {
1:             this.serviceTime.add(value.serviceTime);
1:         }
1:         if (value.waitTime.getTotalCount() != 0)
1:         {
1:             this.waitTime.add(value.waitTime);
1:         }
1:     }
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1: import org.HdrHistogram.Histogram;
0:     private final Histogram responseTime;
0:     private final Histogram serviceTime;
0:     private final Histogram waitTime;
1: 
0:     private final long startNs;
0:     private final long endNs;
1:     public final boolean isFixed;
0:         return String.format("Start: %d end: %d maxLatency: %d pauseStart: %d" +
0:                              " pCount: %d rcount: %d opCount: %d errors: %d",
0:                              startNs, endNs, getLatencyHistogram().getMaxValue(), pauseStart,
1:                              partitionCount, rowCount, getLatencyHistogram().getTotalCount(), errorCount);
0:         startNs = endNs = time;
0:         partitionCount = rowCount = errorCount = 0;
0:         pauseStart = 0;
0:         responseTime = new Histogram(3);
0:         serviceTime = new Histogram(3);
0:         waitTime = new Histogram(3);
0:         isFixed = false;
0:     TimingInterval(long start, long end, long maxPauseStart, long partitionCount,
0:                    long rowCount, long errorCount, Histogram r, Histogram s, Histogram w, boolean isFixed)
0:         this.startNs = start;
0:         this.endNs = Math.max(end, start);
0:         this.pauseStart = maxPauseStart;
0:         this.responseTime = r;
0:         this.serviceTime = s;
0:         this.waitTime = w;
0:         this.isFixed = isFixed;
1: 
0:     static TimingInterval merge(Iterable<TimingInterval> intervals, long start)
0:         long partitionCount = 0, rowCount = 0, errorCount = 0;
0:         long pauseStart = 0;
0:         Histogram responseTime = new Histogram(3);
0:         Histogram serviceTime = new Histogram(3);
0:         Histogram waitTime = new Histogram(3);
0:         boolean isFixed = false;
0:                 end = Math.max(end, interval.endNs);
1: 
0:                 if (interval.getLatencyHistogram().getMaxValue() > serviceTime.getMaxValue())
0:                     pauseStart = interval.pauseStart;
0:                 responseTime.add(interval.responseTime);
0:                 serviceTime.add(interval.serviceTime);
0:                 waitTime.add(interval.waitTime);
0:                 isFixed |= interval.isFixed;
0:         return new TimingInterval(start, end, pauseStart, partitionCount, rowCount,
0:                                   errorCount, responseTime, serviceTime, waitTime, isFixed);
1:         return getLatencyHistogram().getTotalCount() / ((endNs - startNs) * 0.000000001d);
1:         return rowCount / ((endNs - (startNs + getLatencyHistogram().getMaxValue())) * 0.000000001d);
1:         return partitionCount / ((endNs - startNs) * 0.000000001d);
1:         return rowCount / ((endNs - startNs) * 0.000000001d);
1:     public double meanLatencyMs()
1:         return getLatencyHistogram().getMean() * 0.000001d;
1:     public double maxLatencyMs()
1:         return getLatencyHistogram().getMaxValue() * 0.000001d;
1:     public double medianLatencyMs()
1:         return getLatencyHistogram().getValueAtPercentile(50.0) * 0.000001d;
1: 
1:     /**
1:      * @param percentile between 0.0 and 100.0
1:      * @return latency in milliseconds at percentile
1:      */
1:     public double latencyAtPercentileMs(double percentile)
1:         return getLatencyHistogram().getValueAtPercentile(percentile) * 0.000001d;
1:     public long runTimeMs()
1:         return (endNs - startNs) / 1000000;
1:     public long endNanos()
1:         return endNs;
1:         return startNs;
1:     }
1: 
1:     public Histogram responseTime()
1:     {
1:         return responseTime;
1:     }
1: 
1:     public Histogram serviceTime()
1:     {
1:         return serviceTime;
1:     }
1: 
1:     public Histogram waitTime()
1:     {
1:         return waitTime;
1:     }
1: 
1:     private Histogram getLatencyHistogram()
1:     {
1:         if (!isFixed || responseTime.getTotalCount() == 0)
1:             return serviceTime;
1:         else
1:             return responseTime;
/////////////////////////////////////////////////////////////////////////
1:     String getStringValue(TimingParameter value, double rank)
/////////////////////////////////////////////////////////////////////////
1:             case MEANLATENCY:    return String.format("%,.1f", meanLatencyMs());
1:             case MAXLATENCY:     return String.format("%,.1f", maxLatencyMs());
1:             case MEDIANLATENCY:  return String.format("%,.1f", medianLatencyMs());
1:             case RANKLATENCY:    return String.format("%,.1f", latencyAtPercentileMs(rank));
1: 
1:     public long operationCount()
1:     {
1:         return getLatencyHistogram().getTotalCount();
1:     }
author:Giampaolo Trapasso
-------------------------------------------------------------------------------
commit:ff4d0f9
/////////////////////////////////////////////////////////////////////////
1:             case OPRATE:         return String.format("%,.0f", opRate());
1:             case ROWRATE:        return String.format("%,.0f", rowRate());
1:             case ADJROWRATE:     return String.format("%,.0f", adjustedRowRate());
1:             case PARTITIONRATE:  return String.format("%,.0f", partitionRate());
0:             case MEANLATENCY:    return String.format("%,.1f", meanLatency());
0:             case MAXLATENCY:     return String.format("%,.1f", maxLatency());
0:             case MEDIANLATENCY:  return String.format("%,.1f", medianLatency());
0:             case RANKLATENCY:    return String.format("%,.1f", rankLatency(rank));
1:             case ERRORCOUNT:     return String.format("%,d", errorCount);
1:             case PARTITIONCOUNT: return String.format("%,d", partitionCount);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:     public static final long[] EMPTY_SAMPLE = new long[0];
/////////////////////////////////////////////////////////////////////////
0:         sample = new SampleOfLongs(EMPTY_SAMPLE, 1d);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:     public final long errorCount;
1:     public String toString()
1:     {
0:         return String.format("Start: %d end: %d maxLatency: %d pauseLength: %d pauseStart: %d totalLatency: %d" +
0:                              " pCount: %d rcount: %d opCount: %d errors: %d", start, end, maxLatency, pauseLength,
0:                              pauseStart, totalLatency, partitionCount, rowCount, operationCount, errorCount);
1:     }
1: 
0:         partitionCount = rowCount = operationCount = errorCount = 0;
1: 
0:     TimingInterval(long start, long end, long maxLatency, long pauseStart, long pauseLength, long partitionCount,
0:                    long rowCount, long totalLatency, long operationCount, long errorCount, SampleOfLongs sample)
/////////////////////////////////////////////////////////////////////////
0:         this.errorCount = errorCount;
/////////////////////////////////////////////////////////////////////////
0:     static TimingInterval merge(Iterable<TimingInterval> intervals, int maxSamples, long start)
0:         long operationCount = 0, partitionCount = 0, rowCount = 0, errorCount = 0;
0:             if (interval != null)
0:                 end = Math.max(end, interval.end);
0:                 operationCount += interval.operationCount;
0:                 maxLatency = Math.max(interval.maxLatency, maxLatency);
0:                 totalLatency += interval.totalLatency;
0:                 partitionCount += interval.partitionCount;
0:                 rowCount += interval.rowCount;
0:                 errorCount += interval.errorCount;
0:                 latencies.addAll(Arrays.asList(interval.sample));
0:                 if (interval.pauseLength > 0)
1:                 {
0:                     pauseStart = Math.max(pauseStart, interval.pauseStart);
0:                     pauseEnd = Math.min(pauseEnd, interval.pauseStart + interval.pauseLength);
1:                 }
1: 
0:         if (pauseEnd < pauseStart || pauseStart <= 0)
1:         {
1:         }
1: 
0:         return new TimingInterval(start, end, maxLatency, pauseStart, pauseEnd - pauseStart, partitionCount, rowCount,
0:                                   totalLatency, operationCount, errorCount, SampleOfLongs.merge(rnd, latencies, maxSamples));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public long runTime()
1:     {
0:         return (end - start) / 1000000;
1:     }
1: 
1: 
1:     public static enum TimingParameter
1:     {
1:         OPRATE, ROWRATE, ADJROWRATE, PARTITIONRATE, MEANLATENCY, MAXLATENCY, MEDIANLATENCY, RANKLATENCY,
1:         ERRORCOUNT, PARTITIONCOUNT
1:     }
1: 
1:     String getStringValue(TimingParameter value)
1:     {
1:         return getStringValue(value, Float.NaN);
1:     }
1: 
0:     String getStringValue(TimingParameter value, float rank)
1:     {
1:         switch (value)
1:         {
0:             case OPRATE:         return String.format("%.0f", opRate());
0:             case ROWRATE:        return String.format("%.0f", rowRate());
0:             case ADJROWRATE:     return String.format("%.0f", adjustedRowRate());
0:             case PARTITIONRATE:  return String.format("%.0f", partitionRate());
0:             case MEANLATENCY:    return String.format("%.1f", meanLatency());
0:             case MAXLATENCY:     return String.format("%.1f", maxLatency());
0:             case MEDIANLATENCY:  return String.format("%.1f", medianLatency());
0:             case RANKLATENCY:    return String.format("%.1f", rankLatency(rank));
0:             case ERRORCOUNT:     return String.format("%d", errorCount);
0:             case PARTITIONCOUNT: return String.format("%d", partitionCount);
1:             default:             throw new IllegalStateException();
1:         }
1:     }
1:  }
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
commit:cdba5aa
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ThreadLocalRandom;
/////////////////////////////////////////////////////////////////////////
0:     static TimingInterval merge(List<TimingInterval> intervals, int maxSamples, long start)
0:         ThreadLocalRandom rnd = ThreadLocalRandom.current();
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1:     public double opRate()
1:     public double adjustedRowRate()
0:         return rowCount / ((end - (start + pauseLength)) * 0.000000001d);
commit:7536429
/////////////////////////////////////////////////////////////////////////
0:     public final long partitionCount;
0:     public final long rowCount;
/////////////////////////////////////////////////////////////////////////
0:         partitionCount = rowCount = operationCount = 0;
0:     TimingInterval(long start, long end, long maxLatency, long pauseStart, long pauseLength, long partitionCount, long rowCount, long totalLatency, long operationCount, SampleOfLongs sample)
0:         this.partitionCount = partitionCount;
0:         this.rowCount = rowCount;
/////////////////////////////////////////////////////////////////////////
0:         long operationCount = 0, partitionCount = 0, rowCount = 0;
/////////////////////////////////////////////////////////////////////////
0:             partitionCount += interval.partitionCount;
0:             rowCount += interval.rowCount;
/////////////////////////////////////////////////////////////////////////
0:         return new TimingInterval(start, end, maxLatency, pauseStart, pauseEnd - pauseStart, partitionCount, rowCount, totalLatency, operationCount,
/////////////////////////////////////////////////////////////////////////
1:     public double partitionRate()
0:         return partitionCount / ((end - start) * 0.000000001d);
1:     }
1: 
1:     public double rowRate()
1:     {
0:         return rowCount / ((end - start) * 0.000000001d);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.stress.util;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
0: import java.util.Random;
1: 
1: // represents measurements taken over an interval of time
1: // used for both single timer results and merged timer results
1: public final class TimingInterval
1: {
1:     // nanos
0:     private final long start;
0:     private final long end;
0:     public final long maxLatency;
0:     public final long pauseLength;
0:     public final long pauseStart;
0:     public final long totalLatency;
1: 
1:     // discrete
0:     public final long keyCount;
0:     public final long operationCount;
1: 
0:     final SampleOfLongs sample;
1: 
0:     TimingInterval(long time)
1:     {
0:         start = end = time;
0:         maxLatency = totalLatency = 0;
0:         keyCount = operationCount = 0;
0:         pauseStart = pauseLength = 0;
0:         sample = new SampleOfLongs(new long[0], 1d);
1:     }
0:     TimingInterval(long start, long end, long maxLatency, long pauseStart, long pauseLength, long keyCount, long totalLatency, long operationCount, SampleOfLongs sample)
1:     {
0:         this.start = start;
0:         this.end = Math.max(end, start);
0:         this.maxLatency = maxLatency;
0:         this.keyCount = keyCount;
0:         this.totalLatency = totalLatency;
0:         this.operationCount = operationCount;
0:         this.pauseStart = pauseStart;
0:         this.pauseLength = pauseLength;
0:         this.sample = sample;
1:     }
1: 
0:     // merge multiple timer intervals together
0:     static TimingInterval merge(Random rnd, List<TimingInterval> intervals, int maxSamples, long start)
1:     {
0:         int operationCount = 0, keyCount = 0;
0:         long maxLatency = 0, totalLatency = 0;
0:         List<SampleOfLongs> latencies = new ArrayList<>();
0:         long end = 0;
0:         long pauseStart = 0, pauseEnd = Long.MAX_VALUE;
0:         for (TimingInterval interval : intervals)
1:         {
0:             end = Math.max(end, interval.end);
0:             operationCount += interval.operationCount;
0:             maxLatency = Math.max(interval.maxLatency, maxLatency);
0:             totalLatency += interval.totalLatency;
0:             keyCount += interval.keyCount;
0:             latencies.addAll(Arrays.asList(interval.sample));
0:             if (interval.pauseLength > 0)
1:             {
0:                 pauseStart = Math.max(pauseStart, interval.pauseStart);
0:                 pauseEnd = Math.min(pauseEnd, interval.pauseStart + interval.pauseLength);
1:             }
1:         }
0:         if (pauseEnd < pauseStart)
0:             pauseEnd = pauseStart = 0;
0:         return new TimingInterval(start, end, maxLatency, pauseStart, pauseEnd - pauseStart, keyCount, totalLatency, operationCount,
0:                 SampleOfLongs.merge(rnd, latencies, maxSamples));
1: 
1:     }
1: 
0:     public double realOpRate()
1:     {
0:         return operationCount / ((end - start) * 0.000000001d);
1:     }
1: 
0:     public double adjustedOpRate()
1:     {
0:         return operationCount / ((end - (start + pauseLength)) * 0.000000001d);
1:     }
1: 
0:     public double keyRate()
1:     {
0:         return keyCount / ((end - start) * 0.000000001d);
1:     }
1: 
0:     public double meanLatency()
1:     {
0:         return (totalLatency / (double) operationCount) * 0.000001d;
1:     }
1: 
0:     public double maxLatency()
1:     {
0:         return maxLatency * 0.000001d;
1:     }
1: 
0:     public long runTime()
1:     {
0:         return (end - start) / 1000000;
1:     }
1: 
0:     public double medianLatency()
1:     {
0:         return sample.medianLatency();
1:     }
1: 
0:     // 0 < rank < 1
0:     public double rankLatency(float rank)
1:     {
0:         return sample.rankLatency(rank);
1:     }
1: 
0:     public final long endNanos()
1:     {
0:         return end;
1:     }
1: 
0:     public final long endMillis()
1:     {
0:         return end / 1000000;
1:     }
1: 
1:     public long startNanos()
1:     {
0:         return start;
1:     }
1: }
1: 
============================================================================