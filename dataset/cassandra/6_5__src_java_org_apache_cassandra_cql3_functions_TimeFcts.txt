1:c08aaab: /*
1:c08aaab:  * Licensed to the Apache Software Foundation (ASF) under one
1:c08aaab:  * or more contributor license agreements.  See the NOTICE file
1:c08aaab:  * distributed with this work for additional information
1:c08aaab:  * regarding copyright ownership.  The ASF licenses this file
1:c08aaab:  * to you under the Apache License, Version 2.0 (the
1:c08aaab:  * "License"); you may not use this file except in compliance
1:c08aaab:  * with the License.  You may obtain a copy of the License at
1:c08aaab:  *
1:c08aaab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c08aaab:  *
1:c08aaab:  * Unless required by applicable law or agreed to in writing, software
1:c08aaab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c08aaab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c08aaab:  * See the License for the specific language governing permissions and
1:c08aaab:  * limitations under the License.
1:c08aaab:  */
1:c08aaab: package org.apache.cassandra.cql3.functions;
1:c08aaab: 
1:c08aaab: import java.nio.ByteBuffer;
1:3566843: import java.util.Collection;
1:c08aaab: import java.util.Date;
1:c08aaab: import java.util.List;
1:c08aaab: 
1:3566843: import com.google.common.collect.ImmutableList;
1:c08aaab: import org.slf4j.Logger;
1:c08aaab: import org.slf4j.LoggerFactory;
1:c08aaab: 
1:c08aaab: import org.apache.cassandra.db.marshal.*;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:c08aaab: import org.apache.cassandra.utils.ByteBufferUtil;
1:c08aaab: import org.apache.cassandra.utils.UUIDGen;
1:c08aaab: 
1:c08aaab: public abstract class TimeFcts
1:c08aaab: {
1:c08aaab:     public static Logger logger = LoggerFactory.getLogger(TimeFcts.class);
1:c08aaab: 
1:3566843:     public static Collection<Function> all()
1:3566843:     {
1:3566843:         return ImmutableList.of(nowFct,
1:3566843:                                 minTimeuuidFct,
1:3566843:                                 maxTimeuuidFct,
1:3566843:                                 dateOfFct,
1:3566843:                                 unixTimestampOfFct,
1:3566843:                                 timeUuidtoDate,
1:3566843:                                 timeUuidToTimestamp,
1:3566843:                                 timeUuidToUnixTimestamp,
1:3566843:                                 timestampToUnixTimestamp,
1:3566843:                                 timestampToDate,
1:3566843:                                 dateToUnixTimestamp,
1:3566843:                                 dateToTimestamp);
1:3566843:     }
1:3566843: 
1:c08aaab:     public static final Function nowFct = new NativeScalarFunction("now", TimeUUIDType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             return ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     public static final Function minTimeuuidFct = new NativeScalarFunction("mintimeuuid", TimeUUIDType.instance, TimestampType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:2d991a7:             return UUIDGen.toByteBuffer(UUIDGen.minTimeUUID(TimestampType.instance.compose(bb).getTime()));
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     public static final Function maxTimeuuidFct = new NativeScalarFunction("maxtimeuuid", TimeUUIDType.instance, TimestampType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:2d991a7:             return UUIDGen.toByteBuffer(UUIDGen.maxTimeUUID(TimestampType.instance.compose(bb).getTime()));
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of <code>TIMEUUID</code> into a value of type <code>TIMESTAMP</code>.
1:c08aaab:      * @deprecated Replaced by the {@link #timeUuidToTimestamp} function
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction dateOfFct = new NativeScalarFunction("dateof", TimestampType.instance, TimeUUIDType.instance)
1:c08aaab:     {
1:c08aaab:         private volatile boolean hasLoggedDeprecationWarning;
1:c08aaab: 
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             if (!hasLoggedDeprecationWarning)
1:c08aaab:             {
1:c08aaab:                 hasLoggedDeprecationWarning = true;
1:c08aaab:                 logger.warn("The function 'dateof' is deprecated." +
1:c08aaab:                             " Use the function 'toTimestamp' instead.");
1:c08aaab:             }
1:c08aaab: 
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:c08aaab:             return ByteBufferUtil.bytes(timeInMillis);
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of type <code>TIMEUUID</code> into an UNIX timestamp.
1:c08aaab:      * @deprecated Replaced by the {@link #timeUuidToUnixTimestamp} function
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction unixTimestampOfFct = new NativeScalarFunction("unixtimestampof", LongType.instance, TimeUUIDType.instance)
1:c08aaab:     {
1:c08aaab:         private volatile boolean hasLoggedDeprecationWarning;
1:c08aaab: 
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             if (!hasLoggedDeprecationWarning)
1:c08aaab:             {
1:c08aaab:                 hasLoggedDeprecationWarning = true;
1:c08aaab:                 logger.warn("The function 'unixtimestampof' is deprecated." +
1:c08aaab:                             " Use the function 'toUnixTimestamp' instead.");
1:c08aaab:             }
1:c08aaab: 
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             return ByteBufferUtil.bytes(UUIDGen.unixTimestamp(UUIDGen.getUUID(bb)));
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of <code>TIMEUUID</code> into a value of type <code>DATE</code>.
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction timeUuidtoDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimeUUIDType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:c08aaab:             return SimpleDateType.instance.fromTimeInMillis(timeInMillis);
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of type <code>TIMEUUID</code> into a value of type <code>TIMESTAMP</code>.
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction timeUuidToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, TimeUUIDType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:c08aaab:             return TimestampType.instance.fromTimeInMillis(timeInMillis);
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of type <code>TIMEUUID</code> into an UNIX timestamp.
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction timeUuidToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimeUUIDType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             return ByteBufferUtil.bytes(UUIDGen.unixTimestamp(UUIDGen.getUUID(bb)));
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:     /**
1:c08aaab:      * Function that convert a value of type <code>TIMESTAMP</code> into an UNIX timestamp.
1:c08aaab:      */
1:269c5d4:     public static final NativeScalarFunction timestampToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimestampType.instance)
1:c08aaab:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:         {
1:c08aaab:             ByteBuffer bb = parameters.get(0);
1:c08aaab:             if (bb == null)
1:c08aaab:                 return null;
1:c08aaab: 
1:c08aaab:             Date date = TimestampType.instance.compose(bb);
1:c08aaab:             return date == null ? null : ByteBufferUtil.bytes(date.getTime());
1:c08aaab:         }
1:c08aaab:     };
1:c08aaab: 
1:c08aaab:    /**
1:c08aaab:     * Function that convert a value of type <code>TIMESTAMP</code> into a <code>DATE</code>.
1:c08aaab:     */
1:269c5d4:    public static final NativeScalarFunction timestampToDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimestampType.instance)
1:c08aaab:    {
1:e0adc16:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:        {
1:c08aaab:            ByteBuffer bb = parameters.get(0);
1:c08aaab:            if (bb == null)
1:c08aaab:                return null;
1:c08aaab: 
1:c08aaab:            Date date = TimestampType.instance.compose(bb);
1:c08aaab:            return date == null ? null : SimpleDateType.instance.fromTimeInMillis(date.getTime());
1:c08aaab:        }
1:c08aaab:    };
1:c08aaab: 
1:c08aaab:    /**
1:c08aaab:     * Function that convert a value of type <code>TIMESTAMP</code> into a <code>DATE</code>.
1:c08aaab:     */
1:269c5d4:    public static final NativeScalarFunction dateToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, SimpleDateType.instance)
1:c08aaab:    {
1:e0adc16:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:        {
1:c08aaab:            ByteBuffer bb = parameters.get(0);
1:c08aaab:            if (bb == null)
1:c08aaab:                return null;
1:c08aaab: 
1:c08aaab:            long millis = SimpleDateType.instance.toTimeInMillis(bb);
1:c08aaab:            return TimestampType.instance.fromTimeInMillis(millis);
1:c08aaab:        }
1:c08aaab:    };
1:c08aaab: 
1:c08aaab:    /**
1:c08aaab:     * Function that convert a value of type <code>DATE</code> into an UNIX timestamp.
1:c08aaab:     */
1:269c5d4:    public static final NativeScalarFunction dateToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, SimpleDateType.instance)
1:c08aaab:    {
1:e0adc16:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:c08aaab:        {
1:c08aaab:            ByteBuffer bb = parameters.get(0);
1:c08aaab:            if (bb == null)
1:c08aaab:                return null;
1:c08aaab: 
1:c08aaab:            return ByteBufferUtil.bytes(SimpleDateType.instance.toTimeInMillis(bb));
1:c08aaab:        }
1:c08aaab:    };
1:c08aaab: }
1:c08aaab: 
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:        public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:blerer
-------------------------------------------------------------------------------
commit:269c5d4
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction dateOfFct = new NativeScalarFunction("dateof", TimestampType.instance, TimeUUIDType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction unixTimestampOfFct = new NativeScalarFunction("unixtimestampof", LongType.instance, TimeUUIDType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction timeUuidtoDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimeUUIDType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction timeUuidToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, TimeUUIDType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction timeUuidToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimeUUIDType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final NativeScalarFunction timestampToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimestampType.instance)
/////////////////////////////////////////////////////////////////////////
1:    public static final NativeScalarFunction timestampToDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimestampType.instance)
/////////////////////////////////////////////////////////////////////////
1:    public static final NativeScalarFunction dateToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, SimpleDateType.instance)
/////////////////////////////////////////////////////////////////////////
1:    public static final NativeScalarFunction dateToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, SimpleDateType.instance)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2d991a7
/////////////////////////////////////////////////////////////////////////
1:             return UUIDGen.toByteBuffer(UUIDGen.minTimeUUID(TimestampType.instance.compose(bb).getTime()));
/////////////////////////////////////////////////////////////////////////
1:             return UUIDGen.toByteBuffer(UUIDGen.maxTimeUUID(TimestampType.instance.compose(bb).getTime()));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import com.google.common.collect.ImmutableList;
/////////////////////////////////////////////////////////////////////////
1:     public static Collection<Function> all()
1:     {
1:         return ImmutableList.of(nowFct,
1:                                 minTimeuuidFct,
1:                                 maxTimeuuidFct,
1:                                 dateOfFct,
1:                                 unixTimestampOfFct,
1:                                 timeUuidtoDate,
1:                                 timeUuidToTimestamp,
1:                                 timeUuidToUnixTimestamp,
1:                                 timestampToUnixTimestamp,
1:                                 timestampToDate,
1:                                 dateToUnixTimestamp,
1:                                 dateToTimestamp);
1:     }
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:c08aaab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Date;
1: import java.util.List;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.serializers.TimestampSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: public abstract class TimeFcts
1: {
1:     public static Logger logger = LoggerFactory.getLogger(TimeFcts.class);
1: 
1:     public static final Function nowFct = new NativeScalarFunction("now", TimeUUIDType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             return ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:         }
1:     };
1: 
1:     public static final Function minTimeuuidFct = new NativeScalarFunction("mintimeuuid", TimeUUIDType.instance, TimestampType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
0:             return ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.minTimeUUID(TimestampType.instance.compose(bb).getTime())));
1:         }
1:     };
1: 
1:     public static final Function maxTimeuuidFct = new NativeScalarFunction("maxtimeuuid", TimeUUIDType.instance, TimestampType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
0:             return ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.maxTimeUUID(TimestampType.instance.compose(bb).getTime())));
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of <code>TIMEUUID</code> into a value of type <code>TIMESTAMP</code>.
1:      * @deprecated Replaced by the {@link #timeUuidToTimestamp} function
1:      */
0:     public static final Function dateOfFct = new NativeScalarFunction("dateof", TimestampType.instance, TimeUUIDType.instance)
1:     {
1:         private volatile boolean hasLoggedDeprecationWarning;
1: 
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             if (!hasLoggedDeprecationWarning)
1:             {
1:                 hasLoggedDeprecationWarning = true;
1:                 logger.warn("The function 'dateof' is deprecated." +
1:                             " Use the function 'toTimestamp' instead.");
1:             }
1: 
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:             return ByteBufferUtil.bytes(timeInMillis);
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of type <code>TIMEUUID</code> into an UNIX timestamp.
1:      * @deprecated Replaced by the {@link #timeUuidToUnixTimestamp} function
1:      */
0:     public static final Function unixTimestampOfFct = new NativeScalarFunction("unixtimestampof", LongType.instance, TimeUUIDType.instance)
1:     {
1:         private volatile boolean hasLoggedDeprecationWarning;
1: 
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             if (!hasLoggedDeprecationWarning)
1:             {
1:                 hasLoggedDeprecationWarning = true;
1:                 logger.warn("The function 'unixtimestampof' is deprecated." +
1:                             " Use the function 'toUnixTimestamp' instead.");
1:             }
1: 
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             return ByteBufferUtil.bytes(UUIDGen.unixTimestamp(UUIDGen.getUUID(bb)));
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of <code>TIMEUUID</code> into a value of type <code>DATE</code>.
1:      */
0:     public static final Function timeUuidtoDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimeUUIDType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:             return SimpleDateType.instance.fromTimeInMillis(timeInMillis);
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of type <code>TIMEUUID</code> into a value of type <code>TIMESTAMP</code>.
1:      */
0:     public static final Function timeUuidToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, TimeUUIDType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             long timeInMillis = UUIDGen.unixTimestamp(UUIDGen.getUUID(bb));
1:             return TimestampType.instance.fromTimeInMillis(timeInMillis);
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of type <code>TIMEUUID</code> into an UNIX timestamp.
1:      */
0:     public static final Function timeUuidToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimeUUIDType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             return ByteBufferUtil.bytes(UUIDGen.unixTimestamp(UUIDGen.getUUID(bb)));
1:         }
1:     };
1: 
1:     /**
1:      * Function that convert a value of type <code>TIMESTAMP</code> into an UNIX timestamp.
1:      */
0:     public static final Function timestampToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, TimestampType.instance)
1:     {
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:         {
1:             ByteBuffer bb = parameters.get(0);
1:             if (bb == null)
1:                 return null;
1: 
1:             Date date = TimestampType.instance.compose(bb);
1:             return date == null ? null : ByteBufferUtil.bytes(date.getTime());
1:         }
1:     };
1: 
1:    /**
1:     * Function that convert a value of type <code>TIMESTAMP</code> into a <code>DATE</code>.
1:     */
0:    public static final Function timestampToDate = new NativeScalarFunction("todate", SimpleDateType.instance, TimestampType.instance)
1:    {
0:        public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:        {
1:            ByteBuffer bb = parameters.get(0);
1:            if (bb == null)
1:                return null;
1: 
1:            Date date = TimestampType.instance.compose(bb);
1:            return date == null ? null : SimpleDateType.instance.fromTimeInMillis(date.getTime());
1:        }
1:    };
1: 
1:    /**
1:     * Function that convert a value of type <code>TIMESTAMP</code> into a <code>DATE</code>.
1:     */
0:    public static final Function dateToTimestamp = new NativeScalarFunction("totimestamp", TimestampType.instance, SimpleDateType.instance)
1:    {
0:        public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:        {
1:            ByteBuffer bb = parameters.get(0);
1:            if (bb == null)
1:                return null;
1: 
1:            long millis = SimpleDateType.instance.toTimeInMillis(bb);
1:            return TimestampType.instance.fromTimeInMillis(millis);
1:        }
1:    };
1: 
1:    /**
1:     * Function that convert a value of type <code>DATE</code> into an UNIX timestamp.
1:     */
0:    public static final Function dateToUnixTimestamp = new NativeScalarFunction("tounixtimestamp", LongType.instance, SimpleDateType.instance)
1:    {
0:        public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
1:        {
1:            ByteBuffer bb = parameters.get(0);
1:            if (bb == null)
1:                return null;
1: 
1:            return ByteBufferUtil.bytes(SimpleDateType.instance.toTimeInMillis(bb));
1:        }
1:    };
1: }
1: 
============================================================================