1:75409a1: /**
1:75409a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:75409a1:  * or more contributor license agreements.  See the NOTICE file
1:75409a1:  * distributed with this work for additional information
1:75409a1:  * regarding copyright ownership.  The ASF licenses this file
1:75409a1:  * to you under the Apache License, Version 2.0 (the
1:75409a1:  * "License"); you may not use this file except in compliance
1:75409a1:  * with the License.  You may obtain a copy of the License at
1:75409a1:  *
1:75409a1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:75409a1:  *
1:75409a1:  * Unless required by applicable law or agreed to in writing,
1:75409a1:  * software distributed under the License is distributed on an
1:75409a1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:75409a1:  * KIND, either express or implied.  See the License for the
1:75409a1:  * specific language governing permissions and limitations
1:75409a1:  * under the License.
1:75409a1:  */
1:75409a1: package org.apache.cassandra.io.util;
1:75409a1: 
1:75409a1: import java.io.File;
1:75409a1: import java.io.IOException;
1:6312f33: import java.io.RandomAccessFile;
1:75409a1: import java.nio.charset.Charset;
1:75409a1: import java.nio.file.Files;
1:6312f33: import java.nio.file.Path;
1:6312f33: import java.nio.file.Paths;
1:6312f33: import java.util.Arrays;
1:75409a1: 
1:9797511: import org.junit.BeforeClass;
1:75409a1: import org.junit.Test;
1:75409a1: 
1:6312f33: import org.apache.cassandra.config.DatabaseDescriptor;
1:6312f33: 
1:75409a1: import static org.junit.Assert.assertEquals;
1:75409a1: import static org.junit.Assert.assertTrue;
1:75409a1: 
1:75409a1: public class FileUtilsTest
1:75409a1: {
1:75409a1: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:75409a1:     @Test
1:75409a1:     public void testTruncate() throws IOException
1:75409a1:     {
1:75409a1:         File file = FileUtils.createTempFile("testTruncate", "1");
1:75409a1:         final String expected = "The quick brown fox jumps over the lazy dog";
1:75409a1: 
1:75409a1:         Files.write(file.toPath(), expected.getBytes());
1:75409a1:         assertTrue(file.exists());
1:75409a1: 
1:75409a1:         byte[] b = Files.readAllBytes(file.toPath());
1:75409a1:         assertEquals(expected, new String(b, Charset.forName("UTF-8")));
1:75409a1: 
1:75409a1:         FileUtils.truncate(file.getAbsolutePath(), 10);
1:75409a1:         b = Files.readAllBytes(file.toPath());
1:75409a1:         assertEquals("The quick ", new String(b, Charset.forName("UTF-8")));
1:75409a1: 
1:75409a1:         FileUtils.truncate(file.getAbsolutePath(), 0);
1:75409a1:         b = Files.readAllBytes(file.toPath());
1:75409a1:         assertEquals(0, b.length);
1:75409a1:     }
1:75409a1: 
1:6312f33:     @Test
1:6312f33:     public void testFolderSize() throws Exception
1:6312f33:     {
1:6312f33:         File folder = createFolder(Paths.get(DatabaseDescriptor.getAllDataFileLocations()[0], "testFolderSize"));
1:6312f33:         folder.deleteOnExit();
1:6312f33: 
1:6312f33:         File childFolder = createFolder(Paths.get(folder.getPath(), "child"));
1:6312f33: 
1:6312f33:         File[] files = {
1:6312f33:                        createFile(new File(folder, "001"), 10000),
1:6312f33:                        createFile(new File(folder, "002"), 1000),
1:6312f33:                        createFile(new File(folder, "003"), 100),
1:6312f33:                        createFile(new File(childFolder, "001"), 1000),
1:6312f33:                        createFile(new File(childFolder, "002"), 2000),
1:6312f33:         };
1:6312f33: 
1:6312f33:         assertEquals(0, FileUtils.folderSize(new File(folder, "i_dont_exist")));
1:6312f33:         assertEquals(files[0].length(), FileUtils.folderSize(files[0]));
1:6312f33: 
1:6312f33:         long size = FileUtils.folderSize(folder);
1:6312f33:         assertEquals(Arrays.stream(files).mapToLong(f -> f.length()).sum(), size);
1:6312f33:     }
1:6312f33: 
1:6312f33:     private File createFolder(Path path)
1:6312f33:     {
1:6312f33:         File folder = path.toFile();
1:6312f33:         FileUtils.createDirectory(folder);
1:6312f33:         return folder;
1:6312f33:     }
1:6312f33: 
1:6312f33:     private File createFile(File file, long size)
1:6312f33:     {
1:9484783:         try (RandomAccessFile f = new RandomAccessFile(file, "rw"))
1:6312f33:         {
1:6312f33:             f.setLength(size);
1:6312f33:         }
1:6312f33:         catch (Exception e)
1:6312f33:         {
1:6312f33:             System.err.println(e);
1:6312f33:         }
1:6312f33:         return file;
1:6312f33:     }
1:75409a1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9484783
/////////////////////////////////////////////////////////////////////////
1:         try (RandomAccessFile f = new RandomAccessFile(file, "rw"))
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:6312f33
/////////////////////////////////////////////////////////////////////////
1: import java.io.RandomAccessFile;
1: import java.nio.file.Path;
1: import java.nio.file.Paths;
1: import java.util.Arrays;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.schema.SchemaKeyspace;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testFolderSize() throws Exception
1:     {
1:         File folder = createFolder(Paths.get(DatabaseDescriptor.getAllDataFileLocations()[0], "testFolderSize"));
1:         folder.deleteOnExit();
1: 
1:         File childFolder = createFolder(Paths.get(folder.getPath(), "child"));
1: 
1:         File[] files = {
1:                        createFile(new File(folder, "001"), 10000),
1:                        createFile(new File(folder, "002"), 1000),
1:                        createFile(new File(folder, "003"), 100),
1:                        createFile(new File(childFolder, "001"), 1000),
1:                        createFile(new File(childFolder, "002"), 2000),
1:         };
1: 
1:         assertEquals(0, FileUtils.folderSize(new File(folder, "i_dont_exist")));
1:         assertEquals(files[0].length(), FileUtils.folderSize(files[0]));
1: 
1:         long size = FileUtils.folderSize(folder);
1:         assertEquals(Arrays.stream(files).mapToLong(f -> f.length()).sum(), size);
1:     }
1: 
1:     private File createFolder(Path path)
1:     {
1:         File folder = path.toFile();
1:         FileUtils.createDirectory(folder);
1:         return folder;
1:     }
1: 
1:     private File createFile(File file, long size)
1:     {
0:         try
1:         {
0:             RandomAccessFile f = new RandomAccessFile(file, "rw");
1:             f.setLength(size);
1:         }
1:         catch (Exception e)
1:         {
1:             System.err.println(e);
1:         }
1:         return file;
1:     }
commit:75409a1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.charset.Charset;
1: import java.nio.file.Files;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class FileUtilsTest
1: {
1: 
1:     @Test
1:     public void testTruncate() throws IOException
1:     {
1:         File file = FileUtils.createTempFile("testTruncate", "1");
1:         final String expected = "The quick brown fox jumps over the lazy dog";
1: 
1:         Files.write(file.toPath(), expected.getBytes());
1:         assertTrue(file.exists());
1: 
1:         byte[] b = Files.readAllBytes(file.toPath());
1:         assertEquals(expected, new String(b, Charset.forName("UTF-8")));
1: 
1:         FileUtils.truncate(file.getAbsolutePath(), 10);
1:         b = Files.readAllBytes(file.toPath());
1:         assertEquals("The quick ", new String(b, Charset.forName("UTF-8")));
1: 
1:         FileUtils.truncate(file.getAbsolutePath(), 0);
1:         b = Files.readAllBytes(file.toPath());
1:         assertEquals(0, b.length);
1:     }
1: 
1: }
============================================================================