1:768e717: /*
1:768e717:  * Licensed to the Apache Software Foundation (ASF) under one
1:768e717:  * or more contributor license agreements.  See the NOTICE file
1:768e717:  * distributed with this work for additional information
1:768e717:  * regarding copyright ownership.  The ASF licenses this file
1:768e717:  * to you under the Apache License, Version 2.0 (the
1:768e717:  * "License"); you may not use this file except in compliance
1:768e717:  * with the License.  You may obtain a copy of the License at
1:768e717:  *
1:768e717:  *     http://www.apache.org/licenses/LICENSE-2.0
1:768e717:  *
1:768e717:  * Unless required by applicable law or agreed to in writing, software
1:768e717:  * distributed under the License is distributed on an "AS IS" BASIS,
1:768e717:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:768e717:  * See the License for the specific language governing permissions and
1:768e717:  * limitations under the License.
1:768e717:  */
1:768e717: 
1:768e717: package org.apache.cassandra.tools.nodetool.stats;
1:768e717: 
1:768e717: import java.time.Instant;
1:768e717: import java.time.LocalDateTime;
1:768e717: import java.time.ZoneId;
1:768e717: import java.util.ArrayList;
1:768e717: import java.util.HashMap;
1:768e717: import java.util.Collections;
1:768e717: import java.util.List;
1:768e717: import java.util.Map;
1:768e717: import java.util.Set;
1:768e717: import javax.management.openmbean.TabularData;
1:768e717: 
1:768e717: import org.apache.cassandra.tools.NodeProbe;
1:768e717: 
1:768e717: public class CompactionHistoryHolder implements StatsHolder
1:768e717: {
1:768e717:     public final NodeProbe probe;
1:768e717:     public List<String> indexNames;
1:768e717: 
1:768e717:     public CompactionHistoryHolder(NodeProbe probe)
1:768e717:     {
1:768e717:         this.probe = probe;
1:768e717:     }
1:768e717: 
1:768e717:     /**
1:768e717:      * Allows the Compaction History output to be ordered by 'compactedAt' - that is the
1:768e717:      * time at which compaction finished.
1:768e717:      */
1:768e717:     private static class CompactionHistoryRow implements Comparable<CompactionHistoryHolder.CompactionHistoryRow>
1:768e717:     {
1:768e717:         private final String id;
1:768e717:         private final String ksName;
1:768e717:         private final String cfName;
1:768e717:         private final long compactedAt;
1:768e717:         private final long bytesIn;
1:768e717:         private final long bytesOut;
1:768e717:         private final String rowMerged;
1:768e717: 
1:768e717:         CompactionHistoryRow(String id, String ksName, String cfName, long compactedAt, long bytesIn, long bytesOut, String rowMerged)
1:768e717:         {
1:768e717:             this.id = id;
1:768e717:             this.ksName = ksName;
1:768e717:             this.cfName = cfName;
1:768e717:             this.compactedAt = compactedAt;
1:768e717:             this.bytesIn = bytesIn;
1:768e717:             this.bytesOut = bytesOut;
1:768e717:             this.rowMerged = rowMerged;
1:768e717:         }
1:768e717: 
1:768e717:         public int compareTo(CompactionHistoryHolder.CompactionHistoryRow chr)
1:768e717:         {
1:768e717:             return Long.signum(chr.compactedAt - this.compactedAt);
1:768e717:         }
1:768e717: 
1:768e717:         private HashMap<String, Object> getAllAsMap()
1:768e717:         {
1:768e717:             HashMap<String, Object> compaction = new HashMap<>();
1:768e717:             compaction.put("id", this.id);
1:768e717:             compaction.put("keyspace_name", this.ksName);
1:768e717:             compaction.put("columnfamily_name", this.cfName);
1:768e717:             Instant instant = Instant.ofEpochMilli(this.compactedAt);
1:768e717:             LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
1:768e717:             compaction.put("compacted_at", ldt.toString());
1:768e717:             compaction.put("bytes_in", this.bytesIn);
1:768e717:             compaction.put("bytes_out", this.bytesOut);
1:768e717:             compaction.put("rows_merged", this.rowMerged);
1:768e717:             return compaction;
1:768e717:         }
1:768e717:     }
1:768e717: 
1:768e717:     @Override
1:768e717:     public Map<String, Object> convert2Map()
1:768e717:     {
1:768e717:         HashMap<String, Object> result = new HashMap<>();
1:768e717:         ArrayList<Map<String, Object>> compactions = new ArrayList<>();
1:768e717: 
1:768e717:         TabularData tabularData = probe.getCompactionHistory();
1:768e717:         this.indexNames = tabularData.getTabularType().getIndexNames();
1:768e717: 
1:768e717:         if (tabularData.isEmpty()) return result;
1:768e717: 
1:768e717:         List<CompactionHistoryHolder.CompactionHistoryRow> chrList = new ArrayList<>();
1:768e717:         Set<?> values = tabularData.keySet();
1:768e717:         for (Object eachValue : values)
1:768e717:         {
1:768e717:             List<?> value = (List<?>) eachValue;
1:768e717:             CompactionHistoryHolder.CompactionHistoryRow chr = new CompactionHistoryHolder.CompactionHistoryRow(
1:768e717:                 (String)value.get(0),
1:768e717:                 (String)value.get(1),
1:768e717:                 (String)value.get(2),
1:768e717:                 (Long)value.get(3),
1:768e717:                 (Long)value.get(4),
1:768e717:                 (Long)value.get(5),
1:768e717:                 (String)value.get(6)
1:768e717:             );
1:768e717:             chrList.add(chr);
1:768e717:         }
1:768e717: 
1:768e717:         Collections.sort(chrList);
1:768e717:         for (CompactionHistoryHolder.CompactionHistoryRow chr : chrList)
1:768e717:         {
1:768e717:             compactions.add(chr.getAllAsMap());
1:768e717:         }
1:768e717:         result.put("CompactionHistory", compactions);
1:768e717:         return result;
1:768e717:     }
1:768e717: }
============================================================================
author:Masataka Yamaguchi
-------------------------------------------------------------------------------
commit:768e717
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.time.Instant;
1: import java.time.LocalDateTime;
1: import java.time.ZoneId;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: 
1: public class CompactionHistoryHolder implements StatsHolder
1: {
1:     public final NodeProbe probe;
1:     public List<String> indexNames;
1: 
1:     public CompactionHistoryHolder(NodeProbe probe)
1:     {
1:         this.probe = probe;
1:     }
1: 
1:     /**
1:      * Allows the Compaction History output to be ordered by 'compactedAt' - that is the
1:      * time at which compaction finished.
1:      */
1:     private static class CompactionHistoryRow implements Comparable<CompactionHistoryHolder.CompactionHistoryRow>
1:     {
1:         private final String id;
1:         private final String ksName;
1:         private final String cfName;
1:         private final long compactedAt;
1:         private final long bytesIn;
1:         private final long bytesOut;
1:         private final String rowMerged;
1: 
1:         CompactionHistoryRow(String id, String ksName, String cfName, long compactedAt, long bytesIn, long bytesOut, String rowMerged)
1:         {
1:             this.id = id;
1:             this.ksName = ksName;
1:             this.cfName = cfName;
1:             this.compactedAt = compactedAt;
1:             this.bytesIn = bytesIn;
1:             this.bytesOut = bytesOut;
1:             this.rowMerged = rowMerged;
1:         }
1: 
1:         public int compareTo(CompactionHistoryHolder.CompactionHistoryRow chr)
1:         {
1:             return Long.signum(chr.compactedAt - this.compactedAt);
1:         }
1: 
1:         private HashMap<String, Object> getAllAsMap()
1:         {
1:             HashMap<String, Object> compaction = new HashMap<>();
1:             compaction.put("id", this.id);
1:             compaction.put("keyspace_name", this.ksName);
1:             compaction.put("columnfamily_name", this.cfName);
1:             Instant instant = Instant.ofEpochMilli(this.compactedAt);
1:             LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
1:             compaction.put("compacted_at", ldt.toString());
1:             compaction.put("bytes_in", this.bytesIn);
1:             compaction.put("bytes_out", this.bytesOut);
1:             compaction.put("rows_merged", this.rowMerged);
1:             return compaction;
1:         }
1:     }
1: 
1:     @Override
1:     public Map<String, Object> convert2Map()
1:     {
1:         HashMap<String, Object> result = new HashMap<>();
1:         ArrayList<Map<String, Object>> compactions = new ArrayList<>();
1: 
1:         TabularData tabularData = probe.getCompactionHistory();
1:         this.indexNames = tabularData.getTabularType().getIndexNames();
1: 
1:         if (tabularData.isEmpty()) return result;
1: 
1:         List<CompactionHistoryHolder.CompactionHistoryRow> chrList = new ArrayList<>();
1:         Set<?> values = tabularData.keySet();
1:         for (Object eachValue : values)
1:         {
1:             List<?> value = (List<?>) eachValue;
1:             CompactionHistoryHolder.CompactionHistoryRow chr = new CompactionHistoryHolder.CompactionHistoryRow(
1:                 (String)value.get(0),
1:                 (String)value.get(1),
1:                 (String)value.get(2),
1:                 (Long)value.get(3),
1:                 (Long)value.get(4),
1:                 (Long)value.get(5),
1:                 (String)value.get(6)
1:             );
1:             chrList.add(chr);
1:         }
1: 
1:         Collections.sort(chrList);
1:         for (CompactionHistoryHolder.CompactionHistoryRow chr : chrList)
1:         {
1:             compactions.add(chr.getAllAsMap());
1:         }
1:         result.put("CompactionHistory", compactions);
1:         return result;
1:     }
1: }
============================================================================