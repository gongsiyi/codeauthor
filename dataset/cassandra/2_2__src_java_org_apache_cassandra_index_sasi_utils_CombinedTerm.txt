1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
5:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:5c4d5c7: import java.util.*;
1:72790dc: 
1:5c4d5c7: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndex.DataTerm;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public class CombinedTerm implements CombinedValue<DataTerm>
3:72790dc: {
1:72790dc:     private final AbstractType<?> comparator;
1:72790dc:     private final DataTerm term;
1:5c4d5c7:     private final List<DataTerm> mergedTerms = new ArrayList<>();
1:72790dc: 
1:72790dc:     public CombinedTerm(AbstractType<?> comparator, DataTerm term)
1:72790dc:     {
1:72790dc:         this.comparator = comparator;
1:72790dc:         this.term = term;
3:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer getTerm()
1:72790dc:     {
1:72790dc:         return term.getTerm();
1:72790dc:     }
1:72790dc: 
1:2ca2fff:     public boolean isPartial()
1:2ca2fff:     {
1:2ca2fff:         return term.isPartial();
1:2ca2fff:     }
1:2ca2fff: 
1:5c4d5c7:     public RangeIterator<Long, Token> getTokenIterator()
1:72790dc:     {
1:5c4d5c7:         RangeIterator.Builder<Long, Token> union = RangeUnionIterator.builder();
1:5c4d5c7:         union.add(term.getTokens());
1:5c4d5c7:         mergedTerms.stream().map(OnDiskIndex.DataTerm::getTokens).forEach(union::add);
1:5c4d5c7: 
1:5c4d5c7:         return union.build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public TokenTreeBuilder getTokenTreeBuilder()
1:72790dc:     {
1:5c4d5c7:         return new StaticTokenTreeBuilder(this).finish();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void merge(CombinedValue<DataTerm> other)
1:72790dc:     {
1:72790dc:         if (!(other instanceof CombinedTerm))
1:72790dc:             return;
1:72790dc: 
1:72790dc:         CombinedTerm o = (CombinedTerm) other;
1:72790dc: 
1:72790dc:         assert comparator == o.comparator;
1:72790dc: 
1:5c4d5c7:         mergedTerms.add(o.term);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public DataTerm get()
1:72790dc:     {
1:72790dc:         return term;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int compareTo(CombinedValue<DataTerm> o)
1:72790dc:     {
1:72790dc:         return term.compareTo(comparator, o.get().getTerm());
1:72790dc:     }
1:72790dc: }
============================================================================
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
1:     public boolean isPartial()
1:     {
1:         return term.isPartial();
1:     }
1: 
commit:5c4d5c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.cassandra.index.sasi.disk.*;
1:     private final List<DataTerm> mergedTerms = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:     public RangeIterator<Long, Token> getTokenIterator()
1:         RangeIterator.Builder<Long, Token> union = RangeUnionIterator.builder();
1:         union.add(term.getTokens());
1:         mergedTerms.stream().map(OnDiskIndex.DataTerm::getTokens).forEach(union::add);
1: 
1:         return union.build();
1:         return new StaticTokenTreeBuilder(this).finish();
/////////////////////////////////////////////////////////////////////////
1:         mergedTerms.add(o.term);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.Map;
0: import java.util.TreeMap;
1: 
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndex.DataTerm;
0: import org.apache.cassandra.index.sasi.disk.Token;
0: import org.apache.cassandra.index.sasi.disk.TokenTree;
0: import org.apache.cassandra.index.sasi.disk.TokenTreeBuilder;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
0: import com.carrotsearch.hppc.LongOpenHashSet;
0: import com.carrotsearch.hppc.LongSet;
0: import com.carrotsearch.hppc.cursors.LongCursor;
1: 
1: public class CombinedTerm implements CombinedValue<DataTerm>
1: {
1:     private final AbstractType<?> comparator;
1:     private final DataTerm term;
0:     private final TreeMap<Long, LongSet> tokens;
1: 
1:     public CombinedTerm(AbstractType<?> comparator, DataTerm term)
1:     {
1:         this.comparator = comparator;
1:         this.term = term;
0:         this.tokens = new TreeMap<>();
1: 
0:         RangeIterator<Long, Token> tokens = term.getTokens();
0:         while (tokens.hasNext())
1:         {
0:             Token current = tokens.next();
0:             LongSet offsets = this.tokens.get(current.get());
0:             if (offsets == null)
0:                 this.tokens.put(current.get(), (offsets = new LongOpenHashSet()));
1: 
0:             for (Long offset : ((TokenTree.OnDiskToken) current).getOffsets())
0:                 offsets.add(offset);
1:         }
1:     }
1: 
1:     public ByteBuffer getTerm()
1:     {
1:         return term.getTerm();
1:     }
1: 
0:     public Map<Long, LongSet> getTokens()
1:     {
0:         return tokens;
1:     }
1: 
1:     public TokenTreeBuilder getTokenTreeBuilder()
1:     {
0:         return new TokenTreeBuilder(tokens).finish();
1:     }
1: 
1:     public void merge(CombinedValue<DataTerm> other)
1:     {
1:         if (!(other instanceof CombinedTerm))
1:             return;
1: 
1:         CombinedTerm o = (CombinedTerm) other;
1: 
1:         assert comparator == o.comparator;
1: 
0:         for (Map.Entry<Long, LongSet> token : o.tokens.entrySet())
1:         {
0:             LongSet offsets = this.tokens.get(token.getKey());
0:             if (offsets == null)
0:                 this.tokens.put(token.getKey(), (offsets = new LongOpenHashSet()));
1: 
0:             for (LongCursor offset : token.getValue())
0:                 offsets.add(offset.value);
1:         }
1:     }
1: 
1:     public DataTerm get()
1:     {
1:         return term;
1:     }
1: 
1:     public int compareTo(CombinedValue<DataTerm> o)
1:     {
1:         return term.compareTo(comparator, o.get().getTerm());
1:     }
1: }
============================================================================