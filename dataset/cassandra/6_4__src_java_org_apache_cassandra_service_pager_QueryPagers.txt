1:e48ff29: /*
1:e48ff29:  * Licensed to the Apache Software Foundation (ASF) under one
1:e48ff29:  * or more contributor license agreements.  See the NOTICE file
1:e48ff29:  * distributed with this work for additional information
1:e48ff29:  * regarding copyright ownership.  The ASF licenses this file
1:e48ff29:  * to you under the Apache License, Version 2.0 (the
1:e48ff29:  * "License"); you may not use this file except in compliance
1:e48ff29:  * with the License.  You may obtain a copy of the License at
1:e48ff29:  *
1:e48ff29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e48ff29:  *
1:e48ff29:  * Unless required by applicable law or agreed to in writing, software
1:e48ff29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e48ff29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e48ff29:  * See the License for the specific language governing permissions and
1:e48ff29:  * limitations under the License.
2:e48ff29:  */
1:e48ff29: package org.apache.cassandra.service.pager;
17:e48ff29: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:e48ff29: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.filter.*;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:e48ff29: import org.apache.cassandra.exceptions.RequestExecutionException;
1:e48ff29: import org.apache.cassandra.exceptions.RequestValidationException;
1:85ea373: import org.apache.cassandra.service.ClientState;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:e48ff29: 
2:e48ff29: /**
1:a991b64:  * Static utility methods for paging.
1:e48ff29:  */
1:e48ff29: public class QueryPagers
23:e48ff29: {
1:e48ff29:     private QueryPagers() {};
1:b068a9c: 
1:e48ff29:     /**
1:e48ff29:      * Convenience method that count (live) cells/rows for a given slice of a row, but page underneath.
1:e48ff29:      */
1:a991b64:     public static int countPaged(CFMetaData metadata,
1:a991b64:                                  DecoratedKey key,
1:a991b64:                                  ColumnFilter columnFilter,
1:a991b64:                                  ClusteringIndexFilter filter,
1:a991b64:                                  DataLimits limits,
1:7646203:                                  ConsistencyLevel consistencyLevel,
1:a991b64:                                  ClientState state,
1:7646203:                                  final int pageSize,
1:a991b64:                                  int nowInSec,
1:aa83c94:                                  boolean isForThrift,
1:aa83c94:                                  long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
1:b068a9c:     {
1:a991b64:         SinglePartitionReadCommand command = SinglePartitionReadCommand.create(isForThrift, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, key, filter);
1:e0adc16:         final SinglePartitionPager pager = new SinglePartitionPager(command, null, ProtocolVersion.CURRENT);
1:e48ff29: 
1:a991b64:         int count = 0;
1:e48ff29:         while (!pager.isExhausted())
1:a991b64:         {
1:aa83c94:             try (PartitionIterator iter = pager.fetchPage(pageSize, consistencyLevel, state, queryStartNanoTime))
1:e48ff29:             {
1:6094974:                 DataLimits.Counter counter = limits.newCounter(nowInSec, true);
1:6094974:                 PartitionIterators.consume(counter.applyTo(iter));
1:6094974:                 count += counter.counted();
1:a991b64:             }
1:b068a9c:         }
1:a991b64:         return count;
22:e48ff29:     }
1:e48ff29: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         final SinglePartitionPager pager = new SinglePartitionPager(command, null, ProtocolVersion.CURRENT);
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:                                  boolean isForThrift,
1:                                  long queryStartNanoTime) throws RequestValidationException, RequestExecutionException
/////////////////////////////////////////////////////////////////////////
1:             try (PartitionIterator iter = pager.fetchPage(pageSize, consistencyLevel, state, queryStartNanoTime))
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
0:             try (PartitionIterator iter = pager.fetchPage(pageSize, consistencyLevel, state))
1:                 DataLimits.Counter counter = limits.newCounter(nowInSec, true);
1:                 PartitionIterators.consume(counter.applyTo(iter));
1:                 count += counter.counted();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:b99c863
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.Server;
/////////////////////////////////////////////////////////////////////////
0:         final SinglePartitionPager pager = new SinglePartitionPager(command, null, Server.CURRENT_VERSION);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.filter.*;
1: import org.apache.cassandra.db.partitions.*;
1:  * Static utility methods for paging.
1:     public static int countPaged(CFMetaData metadata,
1:                                  DecoratedKey key,
1:                                  ColumnFilter columnFilter,
1:                                  ClusteringIndexFilter filter,
1:                                  DataLimits limits,
1:                                  ClientState state,
1:                                  int nowInSec,
0:                                  boolean isForThrift) throws RequestValidationException, RequestExecutionException
1:         SinglePartitionReadCommand command = SinglePartitionReadCommand.create(isForThrift, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, key, filter);
0:         final SinglePartitionPager pager = new SinglePartitionPager(command, null);
1:         int count = 0;
0:             try (CountingPartitionIterator iter = new CountingPartitionIterator(pager.fetchPage(pageSize, consistencyLevel, state), limits, nowInSec))
1:             {
0:                 PartitionIterators.consume(iter);
0:                 count += iter.counter().counted();
1:             }
1:         return count;
commit:7c6993f
commit:6218993
/////////////////////////////////////////////////////////////////////////
0:             return new MultiPartitionPager(commands, consistencyLevel, local, state, ((Pageable.ReadCommands) command).limitForQuery);
/////////////////////////////////////////////////////////////////////////
commit:85ea373
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.ClientState;
/////////////////////////////////////////////////////////////////////////
0:     private static QueryPager pager(ReadCommand command, ConsistencyLevel consistencyLevel, ClientState cState, boolean local, PagingState state)
0:             return new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, cState, local);
0:             return new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, cState, local, state);
0:     private static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, ClientState cState, boolean local, PagingState state)
0:                 return pager(commands.get(0), consistencyLevel, cState, local, state);
0:             return new MultiPartitionPager(commands, consistencyLevel, cState, local, state);
0:             return pager((ReadCommand)command, consistencyLevel, cState, local, state);
/////////////////////////////////////////////////////////////////////////
0:     public static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, ClientState cState)
0:         return pager(command, consistencyLevel, cState, false, null);
0:     public static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, ClientState cState, PagingState state)
0:         return pager(command, consistencyLevel, cState, false, state);
0:         return pager(command, null, null, true, null);
/////////////////////////////////////////////////////////////////////////
0:         final SliceQueryPager pager = new SliceQueryPager(command, null, null, true);
/////////////////////////////////////////////////////////////////////////
0:                                  ClientState cState,
0:         final SliceQueryPager pager = new SliceQueryPager(command, consistencyLevel, cState, false);
commit:7c4a889
commit:c843b6b
/////////////////////////////////////////////////////////////////////////
0:             RangeSliceCommand rsc = (RangeSliceCommand)command;
0:             // We don't support paging for thrift in general because the way thrift RangeSliceCommand count rows
0:             // independently of cells makes things harder (see RangeSliceQueryPager). The one case where we do
0:             // get a RangeSliceCommand from CQL3 without the countCQL3Rows flag set is for DISTINCT. In that case
0:             // however, the underlying sliceQueryFilter count is 1, so that the RSC limit is still a limit on the
0:             // number of CQL3 rows returned.
0:             assert rsc.countCQL3Rows || (rsc.predicate instanceof SliceQueryFilter && ((SliceQueryFilter)rsc.predicate).count == 1);
0:             return rsc.maxResults > pageSize;
commit:1273476
commit:7c32ffb
/////////////////////////////////////////////////////////////////////////
0:             // Using long on purpose, as we could overflow otherwise
0:             long maxQueried = 0;
/////////////////////////////////////////////////////////////////////////
0:             return new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, local);
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
0:         ColumnCounter counter = filter.columnCounter(Schema.instance.getCFMetaData(keyspace, columnFamily).comparator, now);
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0:     private static QueryPager pager(ReadCommand command, ConsistencyLevel consistencyLevel, boolean local, PagingState state)
0:             return new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, local, state);
0:             return new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, local, state);
0:     private static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, boolean local, PagingState state)
0:                 return pager(commands.get(0), consistencyLevel, local, state);
0:             return new MultiPartitionPager(commands, consistencyLevel, local, state);
0:             return pager((ReadCommand)command, consistencyLevel, local, state);
0:                 return new RangeNamesQueryPager(rangeCommand, consistencyLevel, local, state);
0:                 return new RangeSliceQueryPager(rangeCommand, consistencyLevel, local, state);
0:         return pager(command, consistencyLevel, false, null);
1:     }
1: 
0:     public static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, PagingState state)
1:     {
0:         return pager(command, consistencyLevel, false, state);
0:         return pager(command, null, true, null);
commit:7646203
/////////////////////////////////////////////////////////////////////////
0:                                  String columnFamily,
0:                                  ByteBuffer key,
0:                                  SliceQueryFilter filter,
1:                                  ConsistencyLevel consistencyLevel,
1:                                  final int pageSize,
0:                                  long now) throws RequestValidationException, RequestExecutionException
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service.pager;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.Iterator;
0: import java.util.List;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
0: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.filter.ColumnCounter;
0: import org.apache.cassandra.db.filter.NamesQueryFilter;
0: import org.apache.cassandra.db.filter.SliceQueryFilter;
0: import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: 
1: /**
0:  * Static utility methods to create query pagers.
1:  */
1: public class QueryPagers
1: {
1:     private QueryPagers() {};
1: 
0:     private static int maxQueried(ReadCommand command)
1:     {
0:         if (command instanceof SliceByNamesReadCommand)
1:         {
0:             NamesQueryFilter filter = ((SliceByNamesReadCommand)command).filter;
0:             return filter.countCQL3Rows() ? 1 : filter.columns.size();
1:         }
0:         else
1:         {
0:             SliceQueryFilter filter = ((SliceFromReadCommand)command).filter;
0:             return filter.count;
1:         }
1:     }
1: 
0:     public static boolean mayNeedPaging(Pageable command, int pageSize)
1:     {
0:         if (command instanceof Pageable.ReadCommands)
1:         {
0:             List<ReadCommand> commands = ((Pageable.ReadCommands)command).commands;
1: 
0:             int maxQueried = 0;
0:             for (ReadCommand readCmd : commands)
0:                 maxQueried += maxQueried(readCmd);
1: 
0:             return maxQueried > pageSize;
1:         }
0:         else if (command instanceof ReadCommand)
1:         {
0:             return maxQueried((ReadCommand)command) > pageSize;
1:         }
0:         else
1:         {
0:             assert command instanceof RangeSliceCommand;
0:             // We can never be sure a range slice won't need paging
0:             return true;
1:         }
1:     }
1: 
0:     private static QueryPager pager(ReadCommand command, ConsistencyLevel consistencyLevel, boolean local)
1:     {
0:         if (command instanceof SliceByNamesReadCommand)
0:             return new NamesQueryPager((SliceByNamesReadCommand)command, consistencyLevel, local);
0:         else
0:             return new SliceQueryPager((SliceFromReadCommand)command, consistencyLevel, local);
1:     }
1: 
0:     private static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel, boolean local)
1:     {
0:         if (command instanceof Pageable.ReadCommands)
1:         {
0:             List<ReadCommand> commands = ((Pageable.ReadCommands)command).commands;
0:             if (commands.size() == 1)
0:                 return pager(commands.get(0), consistencyLevel, local);
1: 
0:             return new MultiPartitionPager(commands, consistencyLevel, local);
1:         }
0:         else if (command instanceof ReadCommand)
1:         {
0:             return pager((ReadCommand)command, consistencyLevel, local);
1:         }
0:         else
1:         {
0:             assert command instanceof RangeSliceCommand;
0:             RangeSliceCommand rangeCommand = (RangeSliceCommand)command;
0:             if (rangeCommand.predicate instanceof NamesQueryFilter)
0:                 return new RangeNamesQueryPager(rangeCommand, consistencyLevel, local);
0:             else
0:                 return new RangeSliceQueryPager(rangeCommand, consistencyLevel, local);
1:         }
1:     }
1: 
0:     public static QueryPager pager(Pageable command, ConsistencyLevel consistencyLevel)
1:     {
0:         return pager(command, consistencyLevel, false);
1:     }
1: 
0:     public static QueryPager localPager(Pageable command)
1:     {
0:         return pager(command, null, true);
1:     }
1: 
1:     /**
0:      * Convenience method to (locally) page an internal row.
0:      * Used to 2ndary index a wide row without dying.
1:      */
0:     public static Iterator<ColumnFamily> pageRowLocally(final ColumnFamilyStore cfs, ByteBuffer key, final int pageSize)
1:     {
0:         SliceFromReadCommand command = new SliceFromReadCommand(cfs.metadata.ksName, key, cfs.name, System.currentTimeMillis(), new IdentityQueryFilter());
0:         final SliceQueryPager pager = new SliceQueryPager(command, null, true);
1: 
0:         return new Iterator<ColumnFamily>()
1:         {
0:             // We don't use AbstractIterator because we don't want hasNext() to do an actual query
0:             public boolean hasNext()
1:             {
0:                 return !pager.isExhausted();
1:             }
1: 
0:             public ColumnFamily next()
1:             {
0:                 try
1:                 {
0:                     List<Row> rows = pager.fetchPage(pageSize);
0:                     ColumnFamily cf = rows.isEmpty() ? null : rows.get(0).cf;
0:                     return cf == null ? EmptyColumns.factory.create(cfs.metadata) : cf;
1:                 }
0:                 catch (Exception e)
1:                 {
0:                     throw new RuntimeException(e);
1:                 }
1:             }
1: 
0:             public void remove()
1:             {
0:                 throw new UnsupportedOperationException();
1:             }
0:         };
1:     }
1: 
1:     /**
1:      * Convenience method that count (live) cells/rows for a given slice of a row, but page underneath.
1:      */
0:     public static int countPaged(String keyspace,
0:                                 String columnFamily,
0:                                 ByteBuffer key,
0:                                 SliceQueryFilter filter,
0:                                 ConsistencyLevel consistencyLevel,
0:                                 final int pageSize,
0:                                 long now) throws RequestValidationException, RequestExecutionException
1:     {
0:         SliceFromReadCommand command = new SliceFromReadCommand(keyspace, key, columnFamily, now, filter);
0:         final SliceQueryPager pager = new SliceQueryPager(command, consistencyLevel, false);
1: 
0:         ColumnCounter counter = filter.columnCounter(Schema.instance.getComparator(keyspace, columnFamily), now);
1:         while (!pager.isExhausted())
1:         {
0:             List<Row> next = pager.fetchPage(pageSize);
0:             if (!next.isEmpty())
0:                 counter.countAll(next.get(0).cf);
1:         }
0:         return counter.live();
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:5cf381f
/////////////////////////////////////////////////////////////////////////
0:                     return cf == null ? ArrayBackedSortedColumns.factory.create(cfs.metadata) : cf;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
============================================================================