1:0f977c5: /*
1:0f977c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0f977c5:  * or more contributor license agreements.  See the NOTICE file
1:0f977c5:  * distributed with this work for additional information
1:0f977c5:  * regarding copyright ownership.  The ASF licenses this file
1:0f977c5:  * to you under the Apache License, Version 2.0 (the
1:0f977c5:  * "License"); you may not use this file except in compliance
1:0f977c5:  * with the License.  You may obtain a copy of the License at
1:0f977c5:  *
1:0f977c5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0f977c5:  *
1:0f977c5:  * Unless required by applicable law or agreed to in writing, software
1:0f977c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0f977c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0f977c5:  * See the License for the specific language governing permissions and
1:0f977c5:  * limitations under the License.
1:0f977c5:  */
1:0f977c5: package org.apache.cassandra.db.composites;
6:0f977c5: 
1:0f977c5: import org.apache.cassandra.db.marshal.*;
1:0f977c5: import org.apache.cassandra.utils.ByteBufferUtil;
1:0f977c5: import org.junit.Test;
1:0f977c5: 
1:a991b64: import java.nio.ByteBuffer;
1:0f977c5: 
1:0f977c5: public class CTypeTest
2:0f977c5: {
1:0f977c5:     @Test
1:0f977c5:     public void testCompoundType()
1:0f977c5:     {
1:a991b64:         CompositeType baseType = CompositeType.getInstance(AsciiType.instance, UUIDType.instance, LongType.instance);
1:0f977c5: 
1:a991b64:         ByteBuffer a1 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("a"))
1:a991b64:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:a991b64:                 .add(ByteBufferUtil.bytes(1)).build();
1:a991b64:         ByteBuffer a2 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("a"))
1:a991b64:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:a991b64:                 .add(ByteBufferUtil.bytes(100)).build();
1:a991b64:         ByteBuffer b1 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("a"))
1:a991b64:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:a991b64:                 .add(ByteBufferUtil.bytes(1)).build();
1:a991b64:         ByteBuffer b2 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("a"))
1:a991b64:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:a991b64:                 .add(ByteBufferUtil.bytes(100)).build();
1:a991b64:         ByteBuffer c1 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("z"))
1:a991b64:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:a991b64:                 .add(ByteBufferUtil.bytes(1)).build();
1:a991b64:         ByteBuffer c2 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("z"))
1:a991b64:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:a991b64:                 .add(ByteBufferUtil.bytes(100)).build();
1:a991b64:         ByteBuffer d1 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("z"))
1:a991b64:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:a991b64:                 .add(ByteBufferUtil.bytes(1)).build();
1:a991b64:         ByteBuffer d2 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.bytes("z"))
1:a991b64:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:a991b64:                 .add(ByteBufferUtil.bytes(100)).build();
1:a991b64:         ByteBuffer z1 = baseType.builder()
1:a991b64:                 .add(ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:a991b64:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:a991b64:                 .add(ByteBufferUtil.bytes(100)).build();
1:0f977c5: 
1:a991b64:         assert baseType.compare(a1,a2) < 0;
1:a991b64:         assert baseType.compare(a2,b1) < 0;
1:a991b64:         assert baseType.compare(b1,b2) < 0;
1:a991b64:         assert baseType.compare(b2,c1) < 0;
1:a991b64:         assert baseType.compare(c1,c2) < 0;
1:a991b64:         assert baseType.compare(c2,d1) < 0;
1:a991b64:         assert baseType.compare(d1,d2) < 0;
1:0f977c5: 
1:a991b64:         assert baseType.compare(a2,a1) > 0;
1:a991b64:         assert baseType.compare(b1,a2) > 0;
1:a991b64:         assert baseType.compare(b2,b1) > 0;
1:a991b64:         assert baseType.compare(c1,b2) > 0;
1:a991b64:         assert baseType.compare(c2,c1) > 0;
1:a991b64:         assert baseType.compare(d1,c2) > 0;
1:a991b64:         assert baseType.compare(d2,d1) > 0;
1:0f977c5: 
1:a991b64:         assert baseType.compare(z1,a1) < 0;
1:a991b64:         assert baseType.compare(z1,a2) < 0;
1:a991b64:         assert baseType.compare(z1,b1) < 0;
1:a991b64:         assert baseType.compare(z1,b2) < 0;
1:a991b64:         assert baseType.compare(z1,c1) < 0;
1:a991b64:         assert baseType.compare(z1,c2) < 0;
1:a991b64:         assert baseType.compare(z1,d1) < 0;
1:a991b64:         assert baseType.compare(z1,d2) < 0;
1:0f977c5: 
1:a991b64:         assert baseType.compare(a1,a1) == 0;
1:a991b64:         assert baseType.compare(a2,a2) == 0;
1:a991b64:         assert baseType.compare(b1,b1) == 0;
1:a991b64:         assert baseType.compare(b2,b2) == 0;
1:a991b64:         assert baseType.compare(c1,c1) == 0;
1:a991b64:         assert baseType.compare(c2,c2) == 0;
1:a991b64:         assert baseType.compare(z1,z1) == 0;
2:0f977c5:     }
1:0f977c5: 
1:0f977c5:     @Test
1:0f977c5:     public void testSimpleType2()
1:0f977c5:     {
1:a991b64:         CompositeType baseType = CompositeType.getInstance(UUIDType.instance);
1:a991b64:         ByteBuffer a = baseType.builder().add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000")).build();
1:a991b64:         ByteBuffer z = baseType.builder().add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff")).build();
1:0f977c5: 
1:a991b64:         assert baseType.compare(a,z) < 0;
1:a991b64:         assert baseType.compare(z,a) > 0;
1:a991b64:         assert baseType.compare(a,a) == 0;
1:a991b64:         assert baseType.compare(z,z) == 0;
1:0f977c5:     }
1:0f977c5: 
1:0f977c5:     @Test
1:0f977c5:     public void testSimpleType1()
1:0f977c5:     {
1:a991b64:         CompositeType baseType = CompositeType.getInstance(BytesType.instance);
1:a991b64:         ByteBuffer a = baseType.builder().add(ByteBufferUtil.bytes("a")).build();
1:a991b64:         ByteBuffer z = baseType.builder().add(ByteBufferUtil.bytes("z")).build();
1:0f977c5: 
1:a991b64:         assert baseType.compare(a,z) < 0;
1:a991b64:         assert baseType.compare(z,a) > 0;
1:a991b64:         assert baseType.compare(a,a) == 0;
1:a991b64:         assert baseType.compare(z,z) == 0;
1:0f977c5:     }
1:0f977c5: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1:         CompositeType baseType = CompositeType.getInstance(AsciiType.instance, UUIDType.instance, LongType.instance);
1:         ByteBuffer a1 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("a"))
1:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:                 .add(ByteBufferUtil.bytes(1)).build();
1:         ByteBuffer a2 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("a"))
1:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:                 .add(ByteBufferUtil.bytes(100)).build();
1:         ByteBuffer b1 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("a"))
1:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:                 .add(ByteBufferUtil.bytes(1)).build();
1:         ByteBuffer b2 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("a"))
1:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:                 .add(ByteBufferUtil.bytes(100)).build();
1:         ByteBuffer c1 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("z"))
1:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:                 .add(ByteBufferUtil.bytes(1)).build();
1:         ByteBuffer c2 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("z"))
1:                 .add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"))
1:                 .add(ByteBufferUtil.bytes(100)).build();
1:         ByteBuffer d1 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("z"))
1:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:                 .add(ByteBufferUtil.bytes(1)).build();
1:         ByteBuffer d2 = baseType.builder()
1:                 .add(ByteBufferUtil.bytes("z"))
1:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:                 .add(ByteBufferUtil.bytes(100)).build();
1:         ByteBuffer z1 = baseType.builder()
1:                 .add(ByteBufferUtil.EMPTY_BYTE_BUFFER)
1:                 .add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"))
1:                 .add(ByteBufferUtil.bytes(100)).build();
1:         assert baseType.compare(a1,a2) < 0;
1:         assert baseType.compare(a2,b1) < 0;
1:         assert baseType.compare(b1,b2) < 0;
1:         assert baseType.compare(b2,c1) < 0;
1:         assert baseType.compare(c1,c2) < 0;
1:         assert baseType.compare(c2,d1) < 0;
1:         assert baseType.compare(d1,d2) < 0;
1:         assert baseType.compare(a2,a1) > 0;
1:         assert baseType.compare(b1,a2) > 0;
1:         assert baseType.compare(b2,b1) > 0;
1:         assert baseType.compare(c1,b2) > 0;
1:         assert baseType.compare(c2,c1) > 0;
1:         assert baseType.compare(d1,c2) > 0;
1:         assert baseType.compare(d2,d1) > 0;
1:         assert baseType.compare(z1,a1) < 0;
1:         assert baseType.compare(z1,a2) < 0;
1:         assert baseType.compare(z1,b1) < 0;
1:         assert baseType.compare(z1,b2) < 0;
1:         assert baseType.compare(z1,c1) < 0;
1:         assert baseType.compare(z1,c2) < 0;
1:         assert baseType.compare(z1,d1) < 0;
1:         assert baseType.compare(z1,d2) < 0;
1:         assert baseType.compare(a1,a1) == 0;
1:         assert baseType.compare(a2,a2) == 0;
1:         assert baseType.compare(b1,b1) == 0;
1:         assert baseType.compare(b2,b2) == 0;
1:         assert baseType.compare(c1,c1) == 0;
1:         assert baseType.compare(c2,c2) == 0;
1:         assert baseType.compare(z1,z1) == 0;
1:         CompositeType baseType = CompositeType.getInstance(UUIDType.instance);
1:         ByteBuffer a = baseType.builder().add(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000")).build();
1:         ByteBuffer z = baseType.builder().add(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff")).build();
1:         assert baseType.compare(a,z) < 0;
1:         assert baseType.compare(z,a) > 0;
1:         assert baseType.compare(a,a) == 0;
1:         assert baseType.compare(z,z) == 0;
1:         CompositeType baseType = CompositeType.getInstance(BytesType.instance);
1:         ByteBuffer a = baseType.builder().add(ByteBufferUtil.bytes("a")).build();
1:         ByteBuffer z = baseType.builder().add(ByteBufferUtil.bytes("z")).build();
1:         assert baseType.compare(a,z) < 0;
1:         assert baseType.compare(z,a) > 0;
1:         assert baseType.compare(a,a) == 0;
1:         assert baseType.compare(z,z) == 0;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e77ea12
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0f977c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.composites;
1: 
0: import com.google.common.collect.Lists;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.junit.Test;
1: 
0: import java.util.List;
1: 
1: public class CTypeTest
1: {
0:     static final List<AbstractType<?>> types = Lists.newArrayList();
0:     static
1:     {
0:         types.add(UTF8Type.instance);
0:         types.add(UUIDType.instance);
0:         types.add(Int32Type.instance);
1:     }
1: 
0:     static final CellNameType cdtype = new CompoundDenseCellNameType(types);
0:     static final CellNameType stype1 = new SimpleDenseCellNameType(BytesType.instance);
0:     static final CellNameType stype2 = new SimpleDenseCellNameType(UUIDType.instance);
1: 
1:     @Test
1:     public void testCompoundType()
1:     {
0:         Composite a1 = cdtype.makeCellName("a",UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"), 1);
0:         Composite a2 = cdtype.makeCellName("a",UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"), 100);
0:         Composite b1 = cdtype.makeCellName("a",UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"), 1);
0:         Composite b2 = cdtype.makeCellName("a",UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"), 100);
0:         Composite c1 = cdtype.makeCellName("z",UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"), 1);
0:         Composite c2 = cdtype.makeCellName("z",UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"), 100);
0:         Composite d1 = cdtype.makeCellName("z",UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"), 1);
0:         Composite d2 = cdtype.makeCellName("z",UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"), 100);
1: 
0:         Composite z1 = cdtype.makeCellName(ByteBufferUtil.EMPTY_BYTE_BUFFER,UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"), 100);
1: 
0:         assert cdtype.compare(a1,a2) < 0;
0:         assert cdtype.compare(a2,b1) < 0;
0:         assert cdtype.compare(b1,b2) < 0;
0:         assert cdtype.compare(b2,c1) < 0;
0:         assert cdtype.compare(c1,c2) < 0;
0:         assert cdtype.compare(c2,d1) < 0;
0:         assert cdtype.compare(d1,d2) < 0;
1: 
0:         assert cdtype.compare(a2,a1) > 0;
0:         assert cdtype.compare(b1,a2) > 0;
0:         assert cdtype.compare(b2,b1) > 0;
0:         assert cdtype.compare(c1,b2) > 0;
0:         assert cdtype.compare(c2,c1) > 0;
0:         assert cdtype.compare(d1,c2) > 0;
0:         assert cdtype.compare(d2,d1) > 0;
1: 
0:         assert cdtype.compare(z1,a1) < 0;
0:         assert cdtype.compare(z1,a2) < 0;
0:         assert cdtype.compare(z1,b1) < 0;
0:         assert cdtype.compare(z1,b2) < 0;
0:         assert cdtype.compare(z1,c1) < 0;
0:         assert cdtype.compare(z1,c2) < 0;
0:         assert cdtype.compare(z1,d1) < 0;
0:         assert cdtype.compare(z1,d2) < 0;
1: 
0:         assert cdtype.compare(a1,a1) == 0;
0:         assert cdtype.compare(a2,a2) == 0;
0:         assert cdtype.compare(b1,b1) == 0;
0:         assert cdtype.compare(b2,b2) == 0;
0:         assert cdtype.compare(c1,c1) == 0;
0:         assert cdtype.compare(c2,c2) == 0;
0:         assert cdtype.compare(z1,z1) == 0;
1:     }
1: 
1:     @Test
1:     public void testSimpleType2()
1:     {
0:         CellName a = stype2.makeCellName(UUIDType.instance.fromString("00000000-0000-0000-0000-000000000000"));
0:         CellName z = stype2.makeCellName(UUIDType.instance.fromString("ffffffff-ffff-ffff-ffff-ffffffffffff"));
0:         Composite empty = Composites.EMPTY;
1: 
0:         assert stype2.compare(a,z) < 0;
0:         assert stype2.compare(z,a) > 0;
0:         assert stype2.compare(a,a) == 0;
0:         assert stype2.compare(z,z) == 0;
0:         assert stype2.compare(empty, a) < 0;
0:         assert stype2.compare(a,empty) > 0;
0:         assert stype2.compare(empty, empty) == 0;
1:     }
1: 
1: 
1:     @Test
1:     public void testSimpleType1()
1:     {
0:         CellName a = stype1.makeCellName(ByteBufferUtil.bytes("a"));
0:         CellName z = stype1.makeCellName(ByteBufferUtil.bytes("z"));
0:         Composite empty = Composites.EMPTY;
1: 
0:         assert stype1.compare(a,z) < 0;
0:         assert stype1.compare(z,a) > 0;
0:         assert stype1.compare(a,a) == 0;
0:         assert stype1.compare(z,z) == 0;
0:         assert stype1.compare(empty, a) < 0;
0:         assert stype1.compare(a,empty) > 0;
0:         assert stype1.compare(empty, empty) == 0;
1: 
1:     }
1: 
1: }
============================================================================