1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.Closeable;
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.nio.MappedByteBuffer;
1:72790dc: import java.nio.channels.FileChannel.MapMode;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.io.util.ChannelProxy;
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: import org.apache.cassandra.io.util.RandomAccessReader;
1:72790dc: 
1:72790dc: import com.google.common.annotations.VisibleForTesting;
1:72790dc: 
1:72790dc: public class MappedBuffer implements Closeable
1:72790dc: {
1:72790dc:     private final MappedByteBuffer[] pages;
1:72790dc: 
1:72790dc:     private long position, limit;
1:72790dc:     private final long capacity;
1:72790dc:     private final int pageSize, sizeBits;
1:72790dc: 
1:72790dc:     private MappedBuffer(MappedBuffer other)
1:72790dc:     {
1:72790dc:         this.sizeBits = other.sizeBits;
1:72790dc:         this.pageSize = other.pageSize;
1:72790dc:         this.position = other.position;
1:72790dc:         this.limit = other.limit;
1:72790dc:         this.capacity = other.capacity;
1:72790dc:         this.pages = other.pages;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public MappedBuffer(RandomAccessReader file)
1:72790dc:     {
1:72790dc:         this(file.getChannel(), 30);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public MappedBuffer(ChannelProxy file)
1:72790dc:     {
1:72790dc:         this(file, 30);
1:72790dc:     }
1:72790dc: 
1:72790dc:     @VisibleForTesting
1:72790dc:     protected MappedBuffer(ChannelProxy file, int numPageBits)
1:72790dc:     {
1:72790dc:         if (numPageBits > Integer.SIZE - 1)
1:72790dc:             throw new IllegalArgumentException("page size can't be bigger than 1G");
1:72790dc: 
1:72790dc:         sizeBits = numPageBits;
1:72790dc:         pageSize = 1 << sizeBits;
1:72790dc:         position = 0;
1:72790dc:         limit = capacity = file.size();
1:72790dc:         pages = new MappedByteBuffer[(int) (file.size() / pageSize) + 1];
1:72790dc: 
1:72790dc:         try
1:72790dc:         {
1:72790dc:             long offset = 0;
1:72790dc:             for (int i = 0; i < pages.length; i++)
1:72790dc:             {
1:72790dc:                 long pageSize = Math.min(this.pageSize, (capacity - offset));
1:72790dc:                 pages[i] = file.map(MapMode.READ_ONLY, offset, pageSize);
1:72790dc:                 offset += pageSize;
1:72790dc:             }
1:72790dc:         }
1:72790dc:         finally
1:72790dc:         {
1:72790dc:             file.close();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int comparePageTo(long offset, int length, AbstractType<?> comparator, ByteBuffer other)
1:72790dc:     {
1:72790dc:         return comparator.compare(getPageRegion(offset, length), other);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long capacity()
1:72790dc:     {
1:72790dc:         return capacity;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long position()
1:72790dc:     {
1:72790dc:         return position;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public MappedBuffer position(long newPosition)
1:72790dc:     {
1:72790dc:         if (newPosition < 0 || newPosition > limit)
1:72790dc:             throw new IllegalArgumentException("position: " + newPosition + ", limit: " + limit);
1:72790dc: 
1:72790dc:         position = newPosition;
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long limit()
1:72790dc:     {
1:72790dc:         return limit;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public MappedBuffer limit(long newLimit)
1:72790dc:     {
1:72790dc:         if (newLimit < position || newLimit > capacity)
1:72790dc:             throw new IllegalArgumentException();
1:72790dc: 
1:72790dc:         limit = newLimit;
1:72790dc:         return this;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long remaining()
1:72790dc:     {
1:72790dc:         return limit - position;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasRemaining()
1:72790dc:     {
1:72790dc:         return remaining() > 0;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public byte get()
1:72790dc:     {
1:72790dc:         return get(position++);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public byte get(long pos)
1:72790dc:     {
1:72790dc:         return pages[getPage(pos)].get(getPageOffset(pos));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public short getShort()
1:72790dc:     {
1:72790dc:         short value = getShort(position);
1:72790dc:         position += 2;
1:72790dc:         return value;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public short getShort(long pos)
1:72790dc:     {
1:72790dc:         if (isPageAligned(pos, 2))
1:72790dc:             return pages[getPage(pos)].getShort(getPageOffset(pos));
1:72790dc: 
1:72790dc:         int ch1 = get(pos)     & 0xff;
1:72790dc:         int ch2 = get(pos + 1) & 0xff;
1:72790dc:         return (short) ((ch1 << 8) + ch2);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int getInt()
1:72790dc:     {
1:72790dc:         int value = getInt(position);
1:72790dc:         position += 4;
1:72790dc:         return value;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public int getInt(long pos)
1:72790dc:     {
1:72790dc:         if (isPageAligned(pos, 4))
1:72790dc:             return pages[getPage(pos)].getInt(getPageOffset(pos));
1:72790dc: 
1:72790dc:         int ch1 = get(pos)     & 0xff;
1:72790dc:         int ch2 = get(pos + 1) & 0xff;
1:72790dc:         int ch3 = get(pos + 2) & 0xff;
1:72790dc:         int ch4 = get(pos + 3) & 0xff;
1:72790dc: 
1:72790dc:         return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public long getLong()
1:72790dc:     {
1:72790dc:         long value = getLong(position);
1:72790dc:         position += 8;
1:72790dc:         return value;
1:72790dc:     }
1:72790dc: 
1:72790dc: 
1:72790dc:     public long getLong(long pos)
1:72790dc:     {
1:72790dc:         // fast path if the long could be retrieved from a single page
1:72790dc:         // that would avoid multiple expensive look-ups into page array.
1:72790dc:         return (isPageAligned(pos, 8))
1:72790dc:                 ? pages[getPage(pos)].getLong(getPageOffset(pos))
1:72790dc:                 : ((long) (getInt(pos)) << 32) + (getInt(pos + 4) & 0xFFFFFFFFL);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer getPageRegion(long position, int length)
1:72790dc:     {
1:72790dc:         if (!isPageAligned(position, length))
1:72790dc:             throw new IllegalArgumentException(String.format("range: %s-%s wraps more than one page", position, length));
1:72790dc: 
1:72790dc:         ByteBuffer slice = pages[getPage(position)].duplicate();
1:72790dc: 
1:72790dc:         int pageOffset = getPageOffset(position);
1:72790dc:         slice.position(pageOffset).limit(pageOffset + length);
1:72790dc: 
1:72790dc:         return slice;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public MappedBuffer duplicate()
1:72790dc:     {
1:72790dc:         return new MappedBuffer(this);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void close()
1:72790dc:     {
1:54836ec:         if (!FileUtils.isCleanerAvailable)
1:72790dc:             return;
1:72790dc: 
1:72790dc:         /*
1:72790dc:          * Try forcing the unmapping of pages using undocumented unsafe sun APIs.
1:72790dc:          * If this fails (non Sun JVM), we'll have to wait for the GC to finalize the mapping.
1:72790dc:          * If this works and a thread tries to access any page, hell will unleash on earth.
1:72790dc:          */
1:72790dc:         try
1:72790dc:         {
1:72790dc:             for (MappedByteBuffer segment : pages)
1:72790dc:                 FileUtils.clean(segment);
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:72790dc:             // This is not supposed to happen
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private int getPage(long position)
1:72790dc:     {
1:72790dc:         return (int) (position >> sizeBits);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private int getPageOffset(long position)
1:72790dc:     {
1:72790dc:         return (int) (position & pageSize - 1);
1:72790dc:     }
1:72790dc: 
1:72790dc:     private boolean isPageAligned(long position, int length)
1:72790dc:     {
1:72790dc:         return pageSize - (getPageOffset(position) + length) > 0;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:54836ec
/////////////////////////////////////////////////////////////////////////
1:         if (!FileUtils.isCleanerAvailable)
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.Closeable;
1: import java.nio.ByteBuffer;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel.MapMode;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.io.util.ChannelProxy;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.io.util.RandomAccessReader;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: public class MappedBuffer implements Closeable
1: {
1:     private final MappedByteBuffer[] pages;
1: 
1:     private long position, limit;
1:     private final long capacity;
1:     private final int pageSize, sizeBits;
1: 
1:     private MappedBuffer(MappedBuffer other)
1:     {
1:         this.sizeBits = other.sizeBits;
1:         this.pageSize = other.pageSize;
1:         this.position = other.position;
1:         this.limit = other.limit;
1:         this.capacity = other.capacity;
1:         this.pages = other.pages;
1:     }
1: 
1:     public MappedBuffer(RandomAccessReader file)
1:     {
1:         this(file.getChannel(), 30);
1:     }
1: 
1:     public MappedBuffer(ChannelProxy file)
1:     {
1:         this(file, 30);
1:     }
1: 
1:     @VisibleForTesting
1:     protected MappedBuffer(ChannelProxy file, int numPageBits)
1:     {
1:         if (numPageBits > Integer.SIZE - 1)
1:             throw new IllegalArgumentException("page size can't be bigger than 1G");
1: 
1:         sizeBits = numPageBits;
1:         pageSize = 1 << sizeBits;
1:         position = 0;
1:         limit = capacity = file.size();
1:         pages = new MappedByteBuffer[(int) (file.size() / pageSize) + 1];
1: 
1:         try
1:         {
1:             long offset = 0;
1:             for (int i = 0; i < pages.length; i++)
1:             {
1:                 long pageSize = Math.min(this.pageSize, (capacity - offset));
1:                 pages[i] = file.map(MapMode.READ_ONLY, offset, pageSize);
1:                 offset += pageSize;
1:             }
1:         }
1:         finally
1:         {
1:             file.close();
1:         }
1:     }
1: 
1:     public int comparePageTo(long offset, int length, AbstractType<?> comparator, ByteBuffer other)
1:     {
1:         return comparator.compare(getPageRegion(offset, length), other);
1:     }
1: 
1:     public long capacity()
1:     {
1:         return capacity;
1:     }
1: 
1:     public long position()
1:     {
1:         return position;
1:     }
1: 
1:     public MappedBuffer position(long newPosition)
1:     {
1:         if (newPosition < 0 || newPosition > limit)
1:             throw new IllegalArgumentException("position: " + newPosition + ", limit: " + limit);
1: 
1:         position = newPosition;
1:         return this;
1:     }
1: 
1:     public long limit()
1:     {
1:         return limit;
1:     }
1: 
1:     public MappedBuffer limit(long newLimit)
1:     {
1:         if (newLimit < position || newLimit > capacity)
1:             throw new IllegalArgumentException();
1: 
1:         limit = newLimit;
1:         return this;
1:     }
1: 
1:     public long remaining()
1:     {
1:         return limit - position;
1:     }
1: 
1:     public boolean hasRemaining()
1:     {
1:         return remaining() > 0;
1:     }
1: 
1:     public byte get()
1:     {
1:         return get(position++);
1:     }
1: 
1:     public byte get(long pos)
1:     {
1:         return pages[getPage(pos)].get(getPageOffset(pos));
1:     }
1: 
1:     public short getShort()
1:     {
1:         short value = getShort(position);
1:         position += 2;
1:         return value;
1:     }
1: 
1:     public short getShort(long pos)
1:     {
1:         if (isPageAligned(pos, 2))
1:             return pages[getPage(pos)].getShort(getPageOffset(pos));
1: 
1:         int ch1 = get(pos)     & 0xff;
1:         int ch2 = get(pos + 1) & 0xff;
1:         return (short) ((ch1 << 8) + ch2);
1:     }
1: 
1:     public int getInt()
1:     {
1:         int value = getInt(position);
1:         position += 4;
1:         return value;
1:     }
1: 
1:     public int getInt(long pos)
1:     {
1:         if (isPageAligned(pos, 4))
1:             return pages[getPage(pos)].getInt(getPageOffset(pos));
1: 
1:         int ch1 = get(pos)     & 0xff;
1:         int ch2 = get(pos + 1) & 0xff;
1:         int ch3 = get(pos + 2) & 0xff;
1:         int ch4 = get(pos + 3) & 0xff;
1: 
1:         return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4);
1:     }
1: 
1:     public long getLong()
1:     {
1:         long value = getLong(position);
1:         position += 8;
1:         return value;
1:     }
1: 
1: 
1:     public long getLong(long pos)
1:     {
1:         // fast path if the long could be retrieved from a single page
1:         // that would avoid multiple expensive look-ups into page array.
1:         return (isPageAligned(pos, 8))
1:                 ? pages[getPage(pos)].getLong(getPageOffset(pos))
1:                 : ((long) (getInt(pos)) << 32) + (getInt(pos + 4) & 0xFFFFFFFFL);
1:     }
1: 
1:     public ByteBuffer getPageRegion(long position, int length)
1:     {
1:         if (!isPageAligned(position, length))
1:             throw new IllegalArgumentException(String.format("range: %s-%s wraps more than one page", position, length));
1: 
1:         ByteBuffer slice = pages[getPage(position)].duplicate();
1: 
1:         int pageOffset = getPageOffset(position);
1:         slice.position(pageOffset).limit(pageOffset + length);
1: 
1:         return slice;
1:     }
1: 
1:     public MappedBuffer duplicate()
1:     {
1:         return new MappedBuffer(this);
1:     }
1: 
1:     public void close()
1:     {
0:         if (!FileUtils.isCleanerAvailable())
1:             return;
1: 
1:         /*
1:          * Try forcing the unmapping of pages using undocumented unsafe sun APIs.
1:          * If this fails (non Sun JVM), we'll have to wait for the GC to finalize the mapping.
1:          * If this works and a thread tries to access any page, hell will unleash on earth.
1:          */
1:         try
1:         {
1:             for (MappedByteBuffer segment : pages)
1:                 FileUtils.clean(segment);
1:         }
1:         catch (Exception e)
1:         {
1:             // This is not supposed to happen
1:         }
1:     }
1: 
1:     private int getPage(long position)
1:     {
1:         return (int) (position >> sizeBits);
1:     }
1: 
1:     private int getPageOffset(long position)
1:     {
1:         return (int) (position & pageSize - 1);
1:     }
1: 
1:     private boolean isPageAligned(long position, int length)
1:     {
1:         return pageSize - (getPageOffset(position) + length) > 0;
1:     }
1: }
============================================================================