1:48727b4: /*
1:48727b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:48727b4:  * or more contributor license agreements.  See the NOTICE file
1:48727b4:  * distributed with this work for additional information
1:48727b4:  * regarding copyright ownership.  The ASF licenses this file
1:48727b4:  * to you under the Apache License, Version 2.0 (the
1:48727b4:  * "License"); you may not use this file except in compliance
1:48727b4:  * with the License.  You may obtain a copy of the License at
1:48727b4:  *
1:48727b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:48727b4:  *
1:48727b4:  * Unless required by applicable law or agreed to in writing, software
1:48727b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:48727b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48727b4:  * See the License for the specific language governing permissions and
1:48727b4:  * limitations under the License.
1:48727b4:  */
1:8e360f8: package org.apache.cassandra.stress.settings;
1:8e360f8: 
1:8e360f8: import java.util.Arrays;
1:8e360f8: import java.util.List;
1:8e360f8: import java.util.Map;
1:8e360f8: 
1:8e360f8: import com.google.common.base.Function;
1:8e360f8: 
1:8e360f8: import org.apache.cassandra.config.CFMetaData;
1:8e360f8: import org.apache.cassandra.exceptions.ConfigurationException;
1:8e360f8: 
1:8e360f8: /**
1:8e360f8:  * For specifying replication options
1:8e360f8:  */
1:8e360f8: class OptionCompaction extends OptionMulti
1:8e360f8: {
1:8e360f8: 
1:8e360f8:     private final OptionSimple strategy = new OptionSimple("strategy=", new StrategyAdapter(), null, "The compaction strategy to use", false);
1:8e360f8: 
1:8e360f8:     public OptionCompaction()
1:8e360f8:     {
1:8e360f8:         super("compaction", "Define the compaction strategy and any parameters", true);
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     public String getStrategy()
1:8e360f8:     {
1:8e360f8:         return strategy.value();
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     public Map<String, String> getOptions()
1:8e360f8:     {
1:8e360f8:         return extraOptions();
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     protected List<? extends Option> options()
1:8e360f8:     {
1:8e360f8:         return Arrays.asList(strategy);
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     @Override
1:8e360f8:     public boolean happy()
1:8e360f8:     {
1:8e360f8:         return true;
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     private static final class StrategyAdapter implements Function<String, String>
1:8e360f8:     {
1:8e360f8: 
1:8e360f8:         public String apply(String name)
1:8e360f8:         {
1:8e360f8:             try
1:8e360f8:             {
1:8e360f8:                 CFMetaData.createCompactionStrategy(name);
1:8e360f8:             } catch (ConfigurationException e)
1:8e360f8:             {
1:8e360f8:                 throw new IllegalArgumentException("Invalid compaction strategy: " + name);
1:8e360f8:             }
1:8e360f8:             return name;
1:8e360f8:         }
1:8e360f8:     }
1:8e360f8: 
1:8e360f8: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:48727b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8e360f8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import com.google.common.base.Function;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
1: /**
1:  * For specifying replication options
1:  */
1: class OptionCompaction extends OptionMulti
1: {
1: 
1:     private final OptionSimple strategy = new OptionSimple("strategy=", new StrategyAdapter(), null, "The compaction strategy to use", false);
1: 
1:     public OptionCompaction()
1:     {
1:         super("compaction", "Define the compaction strategy and any parameters", true);
1:     }
1: 
1:     public String getStrategy()
1:     {
1:         return strategy.value();
1:     }
1: 
1:     public Map<String, String> getOptions()
1:     {
1:         return extraOptions();
1:     }
1: 
1:     protected List<? extends Option> options()
1:     {
1:         return Arrays.asList(strategy);
1:     }
1: 
1:     @Override
1:     public boolean happy()
1:     {
1:         return true;
1:     }
1: 
1:     private static final class StrategyAdapter implements Function<String, String>
1:     {
1: 
1:         public String apply(String name)
1:         {
1:             try
1:             {
1:                 CFMetaData.createCompactionStrategy(name);
1:             } catch (ConfigurationException e)
1:             {
1:                 throw new IllegalArgumentException("Invalid compaction strategy: " + name);
1:             }
1:             return name;
1:         }
1:     }
1: 
1: }
============================================================================