1:d8b1fc3: /*
1:d8b1fc3: * Licensed to the Apache Software Foundation (ASF) under one
1:d8b1fc3: * or more contributor license agreements.  See the NOTICE file
1:d8b1fc3: * distributed with this work for additional information
1:d8b1fc3: * regarding copyright ownership.  The ASF licenses this file
1:d8b1fc3: * to you under the Apache License, Version 2.0 (the
1:d8b1fc3: * "License"); you may not use this file except in compliance
1:d8b1fc3: * with the License.  You may obtain a copy of the License at
1:d8b1fc3: *
1:d8b1fc3: *    http://www.apache.org/licenses/LICENSE-2.0
1:d8b1fc3: *
1:d8b1fc3: * Unless required by applicable law or agreed to in writing,
1:d8b1fc3: * software distributed under the License is distributed on an
1:d8b1fc3: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d8b1fc3: * KIND, either express or implied.  See the License for the
1:d8b1fc3: * specific language governing permissions and limitations
1:d8b1fc3: * under the License.
1:d8b1fc3: */
1:d8b1fc3: package org.apache.cassandra.utils;
1:2a585c0: 
1:d8b1fc3: import java.util.Arrays;
1:d8b1fc3: import java.util.Iterator;
10:d8b1fc3: 
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:d8b1fc3: import com.google.common.collect.Iterators;
1:d8b1fc3: import com.google.common.collect.Ordering;
1:d8b1fc3: import org.junit.Before;
1:d8b1fc3: import org.junit.Test;
1:d8b1fc3: 
1:d8b1fc3: public class MergeIteratorTest
3:d8b1fc3: {
1:d8b1fc3:     CLI<String> all = null, cat = null, a = null, b = null, c = null, d = null;
1:2a585c0: 
1:d8b1fc3:     @Before
1:d8b1fc3:     public void clear()
1:d8b1fc3:     {
1:d8b1fc3:         all = new CLI("1", "2", "3", "3", "4", "5", "6", "7", "8", "8", "9");
1:d8b1fc3:         cat = new CLI("1", "2", "33", "4", "5", "6", "7", "88", "9");
1:d8b1fc3:         a = new CLI("1", "3", "5", "8");
1:d8b1fc3:         b = new CLI("2", "4", "6");
1:d8b1fc3:         c = new CLI("3", "7", "8", "9");
1:d8b1fc3:         d = new CLI();
3:d8b1fc3:     }
1:07cdfd0: 
1:d8b1fc3:     /** Test that duplicate values are concatted. */
2:d8b1fc3:     @Test
1:d8b1fc3:     public void testManyToOne() throws Exception
1:d8b1fc3:     {
1:d8b1fc3:         MergeIterator.Reducer<String,String> reducer = new MergeIterator.Reducer<String,String>()
1:d8b1fc3:         {
1:d8b1fc3:             String concatted = "";
1:2fd3268: 
1:a991b64:             @Override
1:a991b64:             public void reduce(int idx, String current)
1:2a585c0:             {
1:a991b64:                 concatted += current;
1:2a585c0:             }
1:2fd3268: 
1:d8b1fc3:             public String getReduced()
1:d8b1fc3:             {
1:d8b1fc3:                 String tmp = concatted;
1:d8b1fc3:                 concatted = "";
1:d8b1fc3:                 return tmp;
1:d8b1fc3:             }
1:d8b1fc3:         };
1:a4f75e2:         IMergeIterator<String,String> smi = MergeIterator.get(Arrays.asList(a, b, c, d),
1:a991b64:                 Ordering.<String>natural(),
1:a991b64:                 reducer);
1:d8b1fc3:         assert Iterators.elementsEqual(cat, smi);
2:d8b1fc3:         smi.close();
2:d8b1fc3:         assert a.closed && b.closed && c.closed && d.closed;
1:d8b1fc3:     }
1:2fd3268: 
1:d8b1fc3:     // closeable list iterator
1:d8b1fc3:     public static class CLI<E> extends AbstractIterator<E> implements CloseableIterator<E>
1:d8b1fc3:     {
1:d8b1fc3:         Iterator<E> iter;
1:d8b1fc3:         boolean closed = false;
1:d8b1fc3:         public CLI(E... items)
1:d8b1fc3:         {
1:d8b1fc3:             this.iter = Arrays.asList(items).iterator();
1:d8b1fc3:         }
1:07cdfd0: 
1:d8b1fc3:         protected E computeNext()
1:d8b1fc3:         {
1:d8b1fc3:             if (!iter.hasNext()) return endOfData();
1:d8b1fc3:             return iter.next();
1:d8b1fc3:         }
1:07cdfd0: 
1:d8b1fc3:         public void close()
1:d8b1fc3:         {
1:d8b1fc3:             assert !this.closed;
1:d8b1fc3:             this.closed = true;
1:d8b1fc3:         }
1:d8b1fc3:     }
1:d8b1fc3: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             public void reduce(int idx, String current)
1:                 concatted += current;
/////////////////////////////////////////////////////////////////////////
1:                 Ordering.<String>natural(),
1:                 reducer);
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ea82722
/////////////////////////////////////////////////////////////////////////
commit:2a585c0
/////////////////////////////////////////////////////////////////////////
1: 
0:             public boolean trivialReduceIsTrivial()
1:             {
0:                 return false; // technically true, but let's not optimize anything away here...
1:             }
1: 
commit:a4f75e2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         IMergeIterator<String,String> smi = MergeIterator.get(Arrays.asList(a, b, c, d),
commit:d8b1fc3
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Arrays;
0: import java.util.Comparator;
1: import java.util.Iterator;
0: import java.util.List;
1: 
0: import com.google.common.collect.AbstractIterator;
1: import com.google.common.collect.Iterators;
1: import com.google.common.collect.Ordering;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MergeIteratorTest
1: {
1:     CLI<String> all = null, cat = null, a = null, b = null, c = null, d = null;
1: 
1:     @Before
1:     public void clear()
1:     {
1:         all = new CLI("1", "2", "3", "3", "4", "5", "6", "7", "8", "8", "9");
1:         cat = new CLI("1", "2", "33", "4", "5", "6", "7", "88", "9");
1:         a = new CLI("1", "3", "5", "8");
1:         b = new CLI("2", "4", "6");
1:         c = new CLI("3", "7", "8", "9");
1:         d = new CLI();
1:     }
1: 
1:     @Test
0:     public void testOneToOne() throws Exception
1:     {
0:         MergeIterator<String,String> smi = MergeIterator.get(Arrays.asList(a, b, c, d),
0:                                                              Ordering.<String>natural());
0:         assert Iterators.elementsEqual(all, smi);
1:         smi.close();
1:         assert a.closed && b.closed && c.closed && d.closed;
1:     }
1: 
1:     /** Test that duplicate values are concatted. */
1:     @Test
1:     public void testManyToOne() throws Exception
1:     {
1:         MergeIterator.Reducer<String,String> reducer = new MergeIterator.Reducer<String,String>()
1:         {
1:             String concatted = "";
0:             public void reduce(String value)
1:             {
0:                 concatted += value;
1:             }
1:             
1:             public String getReduced()
1:             {
1:                 String tmp = concatted;
1:                 concatted = "";
1:                 return tmp;
1:             }
1:         };
0:         MergeIterator<String,String> smi = MergeIterator.get(Arrays.asList(a, b, c, d),
0:                                                              Ordering.<String>natural(),
0:                                                              reducer);
1:         assert Iterators.elementsEqual(cat, smi);
1:         smi.close();
1:         assert a.closed && b.closed && c.closed && d.closed;
1:     }
1: 
1:     // closeable list iterator
1:     public static class CLI<E> extends AbstractIterator<E> implements CloseableIterator<E>
1:     {
1:         Iterator<E> iter;
1:         boolean closed = false;
1:         public CLI(E... items)
1:         {
1:             this.iter = Arrays.asList(items).iterator();
1:         }
1:         
1:         protected E computeNext()
1:         {
1:             if (!iter.hasNext()) return endOfData();
1:             return iter.next();
1:         }
1:         
1:         public void close()
1:         {
1:             assert !this.closed;
1:             this.closed = true;
1:         }
1:     }
1: }
============================================================================