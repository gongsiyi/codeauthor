1:0580fb2: /*
1:0580fb2: * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2: * or more contributor license agreements.  See the NOTICE file
1:0580fb2: * distributed with this work for additional information
1:0580fb2: * regarding copyright ownership.  The ASF licenses this file
1:0580fb2: * to you under the Apache License, Version 2.0 (the
1:0580fb2: * "License"); you may not use this file except in compliance
1:0580fb2: * with the License.  You may obtain a copy of the License at
1:0580fb2: *
1:0580fb2: *    http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2: *
1:0580fb2: * Unless required by applicable law or agreed to in writing,
1:0580fb2: * software distributed under the License is distributed on an
1:0580fb2: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2: * KIND, either express or implied.  See the License for the
1:0580fb2: * specific language governing permissions and limitations
1:0580fb2: * under the License.
1:0580fb2: */
1:0580fb2: package org.apache.cassandra.stress.generate;
2:0580fb2: 
1:0580fb2: import java.util.Map;
1:0580fb2: import java.util.concurrent.ConcurrentHashMap;
1:0580fb2: import java.util.concurrent.ConcurrentSkipListMap;
1:0580fb2: import java.util.concurrent.atomic.AtomicLong;
1:0580fb2: 
1:0580fb2: import org.apache.cassandra.stress.Operation;
1:0580fb2: import org.apache.cassandra.stress.settings.StressSettings;
1:17dd4cc: import org.apache.cassandra.utils.LockedDynamicList;
1:0580fb2: 
1:0580fb2: public class SeedManager
4:0580fb2: {
1:0580fb2: 
1:0580fb2:     final Distribution visits;
1:0580fb2:     final Generator writes;
1:0580fb2:     final Generator reads;
1:6c579a0:     final ConcurrentHashMap<Long, Seed> managing = new ConcurrentHashMap<>();
1:17dd4cc:     final LockedDynamicList<Seed> sampleFrom;
1:0580fb2:     final Distribution sample;
1:6c579a0:     final long sampleOffset;
1:6c579a0:     final int sampleSize;
1:6c579a0:     final boolean updateSampleImmediately;
1:0580fb2: 
1:0580fb2:     public SeedManager(StressSettings settings)
1:0580fb2:     {
1:0580fb2:         Generator writes, reads;
1:0580fb2:         if (settings.generate.sequence != null)
1:0580fb2:         {
1:0580fb2:             long[] seq = settings.generate.sequence;
1:0580fb2:             if (settings.generate.readlookback != null)
1:0580fb2:             {
1:0580fb2:                 LookbackableWriteGenerator series = new LookbackableWriteGenerator(seq[0], seq[1], settings.generate.wrap, settings.generate.readlookback.get());
1:0580fb2:                 writes = series;
1:0580fb2:                 reads = series.reads;
4:0580fb2:             }
2:0580fb2:             else
1:0580fb2:             {
1:0580fb2:                 writes = reads = new SeriesGenerator(seq[0], seq[1], settings.generate.wrap);
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2:         else
1:0580fb2:         {
1:0580fb2:             writes = reads = new RandomGenerator(settings.generate.distribution.get());
1:0580fb2:         }
1:0580fb2:         this.visits = settings.insert.visits.get();
1:0580fb2:         this.writes = writes;
1:0580fb2:         this.reads = reads;
1:6c579a0:         Distribution sample = settings.insert.revisit.get();
1:6c579a0:         this.sampleOffset = Math.min(sample.minValue(), sample.maxValue());
1:6c579a0:         long sampleSize = 1 + Math.max(sample.minValue(), sample.maxValue()) - sampleOffset;
1:6c579a0:         if (sampleOffset < 0 || sampleSize > Integer.MAX_VALUE)
1:6c579a0:             throw new IllegalArgumentException("sample range is invalid");
1:17dd4cc:         this.sampleFrom = new LockedDynamicList<>((int) sampleSize);
1:6c579a0:         this.sample = DistributionInverted.invert(sample);
1:6c579a0:         this.sampleSize = (int) sampleSize;
1:6c579a0:         this.updateSampleImmediately = visits.average() > 1;
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public Seed next(Operation op)
1:0580fb2:     {
1:0580fb2:         if (!op.isWrite())
1:0580fb2:         {
1:0580fb2:             Seed seed = reads.next(-1);
1:0580fb2:             if (seed == null)
1:0580fb2:                 return null;
1:0580fb2:             Seed managing = this.managing.get(seed);
1:0580fb2:             return managing == null ? seed : managing;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         while (true)
1:0580fb2:         {
1:6c579a0:             int index = (int) (sample.next() - sampleOffset);
1:0580fb2:             Seed seed = sampleFrom.get(index);
1:6c579a0:             if (seed != null && seed.isSaved())
2:0580fb2:                 return seed;
1:0580fb2: 
1:0580fb2:             seed = writes.next((int) visits.next());
1:0580fb2:             if (seed == null)
1:0580fb2:                 return null;
1:6c579a0:             if (managing.putIfAbsent(seed.seed, seed) == null)
1:6c579a0:             {
1:6c579a0:                 if (!updateSampleImmediately || seed.save(sampleFrom, sampleSize))
1:6c579a0:                     return seed;
1:6c579a0:                 managing.remove(seed.seed, seed);
1:6c579a0:             }
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     public void markLastWrite(Seed seed, boolean first)
1:0580fb2:     {
1:6c579a0:         // we could have multiple iterators mark the last write simultaneously,
1:6c579a0:         // so we ensure we remove conditionally, and only remove the exact seed we were operating over
1:6c579a0:         // this is important because, to ensure correctness, we do not support calling remove multiple
1:6c579a0:         // times on the same DynamicList.Node
1:6c579a0:         if (managing.remove(seed.seed, seed) && !first)
1:6c579a0:             seed.remove(sampleFrom);
1:0580fb2:     }
1:0580fb2: 
1:6c579a0:     public void markFirstWrite(Seed seed, boolean last)
1:0580fb2:     {
1:6c579a0:         if (!last && !updateSampleImmediately)
1:6c579a0:             seed.save(sampleFrom, Integer.MAX_VALUE);
1:6c579a0:         writes.finishWrite(seed);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private abstract class Generator
1:0580fb2:     {
1:0580fb2:         abstract Seed next(int visits);
1:0580fb2:         void finishWrite(Seed seed) { }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private class RandomGenerator extends Generator
1:0580fb2:     {
1:0580fb2: 
1:0580fb2:         final Distribution distribution;
1:0580fb2: 
1:0580fb2:         public RandomGenerator(Distribution distribution)
1:0580fb2:         {
1:0580fb2:             this.distribution = distribution;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         public Seed next(int visits)
1:0580fb2:         {
1:0580fb2:             return new Seed(distribution.next(), visits);
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private class SeriesGenerator extends Generator
1:0580fb2:     {
1:0580fb2: 
1:0580fb2:         final long start;
1:0580fb2:         final long totalCount;
1:0580fb2:         final boolean wrap;
1:0580fb2:         final AtomicLong next = new AtomicLong();
1:0580fb2: 
1:0580fb2:         public SeriesGenerator(long start, long end, boolean wrap)
1:0580fb2:         {
1:0580fb2:             this.wrap = wrap;
1:0580fb2:             if (start > end)
1:0580fb2:                 throw new IllegalStateException();
1:0580fb2:             this.start = start;
1:0580fb2:             this.totalCount = 1 + end - start;
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         public Seed next(int visits)
1:0580fb2:         {
1:0580fb2:             long next = this.next.getAndIncrement();
1:0580fb2:             if (!wrap && next >= totalCount)
1:0580fb2:                 return null;
1:0580fb2:             return new Seed(start + (next % totalCount), visits);
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     private class LookbackableWriteGenerator extends SeriesGenerator
1:0580fb2:     {
1:0580fb2: 
1:0580fb2:         final AtomicLong writeCount = new AtomicLong();
1:0580fb2:         final ConcurrentSkipListMap<Seed, Seed> afterMin = new ConcurrentSkipListMap<>();
1:0580fb2:         final LookbackReadGenerator reads;
1:0580fb2: 
1:0580fb2:         public LookbackableWriteGenerator(long start, long end, boolean wrap, Distribution readLookback)
1:0580fb2:         {
1:0580fb2:             super(start, end, wrap);
1:0580fb2:             this.writeCount.set(0);
1:0580fb2:             reads = new LookbackReadGenerator(readLookback);
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         public Seed next(int visits)
1:0580fb2:         {
1:0580fb2:             long next = this.next.getAndIncrement();
1:0580fb2:             if (!wrap && next >= totalCount)
1:0580fb2:                 return null;
1:0580fb2:             return new Seed(start + (next % totalCount), visits);
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         void finishWrite(Seed seed)
1:0580fb2:         {
1:0580fb2:             if (seed.seed <= writeCount.get())
1:0580fb2:                 return;
1:0580fb2:             afterMin.put(seed, seed);
1:0580fb2:             while (true)
1:0580fb2:             {
1:0580fb2:                 Map.Entry<Seed, Seed> head = afterMin.firstEntry();
1:0580fb2:                 if (head == null)
1:0580fb2:                     return;
1:0580fb2:                 long min = this.writeCount.get();
1:0580fb2:                 if (head.getKey().seed <= min)
1:0580fb2:                     return;
1:0580fb2:                 if (head.getKey().seed == min + 1 && this.writeCount.compareAndSet(min, min + 1))
1:0580fb2:                 {
1:0580fb2:                     afterMin.remove(head.getKey());
1:0580fb2:                     continue;
1:0580fb2:                 }
1:0580fb2:                 return;
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:         private class LookbackReadGenerator extends Generator
1:0580fb2:         {
1:0580fb2: 
1:0580fb2:             final Distribution lookback;
1:0580fb2: 
1:0580fb2:             public LookbackReadGenerator(Distribution lookback)
1:0580fb2:             {
1:0580fb2:                 this.lookback = lookback;
1:0580fb2:                 if (lookback.maxValue() > start + totalCount)
1:0580fb2:                     throw new IllegalArgumentException("Invalid lookback distribution; max value is " + lookback.maxValue()
1:0580fb2:                                                        + ", but series only ranges from " + writeCount + " to " + (start + totalCount));
1:0580fb2:             }
1:0580fb2: 
1:0580fb2:             public Seed next(int visits)
1:0580fb2:             {
1:0580fb2:                 long lookback = this.lookback.next();
1:0580fb2:                 long range = writeCount.get();
1:0580fb2:                 long startOffset = range - lookback;
1:0580fb2:                 if (startOffset < 0)
1:0580fb2:                 {
1:0580fb2:                     if (range == totalCount && !wrap)
1:0580fb2:                         return null;
1:0580fb2:                     startOffset = range == 0 ? 0 : lookback % range;
1:0580fb2:                 }
1:0580fb2:                 return new Seed(start + startOffset, visits);
1:0580fb2:             }
1:0580fb2:         }
1:0580fb2: 
1:0580fb2:     }
1:0580fb2: 
1:0580fb2: }
============================================================================
author:stefania
-------------------------------------------------------------------------------
commit:17dd4cc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.LockedDynamicList;
/////////////////////////////////////////////////////////////////////////
1:     final LockedDynamicList<Seed> sampleFrom;
/////////////////////////////////////////////////////////////////////////
1:         this.sampleFrom = new LockedDynamicList<>((int) sampleSize);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
1:     final ConcurrentHashMap<Long, Seed> managing = new ConcurrentHashMap<>();
1:     final long sampleOffset;
1:     final int sampleSize;
1:     final boolean updateSampleImmediately;
/////////////////////////////////////////////////////////////////////////
1:         Distribution sample = settings.insert.revisit.get();
1:         this.sampleOffset = Math.min(sample.minValue(), sample.maxValue());
1:         long sampleSize = 1 + Math.max(sample.minValue(), sample.maxValue()) - sampleOffset;
1:         if (sampleOffset < 0 || sampleSize > Integer.MAX_VALUE)
1:             throw new IllegalArgumentException("sample range is invalid");
0:         this.sampleFrom = new DynamicList<>((int) sampleSize);
1:         this.sample = DistributionInverted.invert(sample);
1:         this.sampleSize = (int) sampleSize;
1:         this.updateSampleImmediately = visits.average() > 1;
/////////////////////////////////////////////////////////////////////////
1:             int index = (int) (sample.next() - sampleOffset);
1:             if (seed != null && seed.isSaved())
1:             if (managing.putIfAbsent(seed.seed, seed) == null)
1:             {
1:                 if (!updateSampleImmediately || seed.save(sampleFrom, sampleSize))
1:                     return seed;
1:                 managing.remove(seed.seed, seed);
1:             }
1:     public void markLastWrite(Seed seed, boolean first)
1:         // we could have multiple iterators mark the last write simultaneously,
1:         // so we ensure we remove conditionally, and only remove the exact seed we were operating over
1:         // this is important because, to ensure correctness, we do not support calling remove multiple
1:         // times on the same DynamicList.Node
1:         if (managing.remove(seed.seed, seed) && !first)
1:             seed.remove(sampleFrom);
1:     public void markFirstWrite(Seed seed, boolean last)
1:         if (!last && !updateSampleImmediately)
1:             seed.save(sampleFrom, Integer.MAX_VALUE);
1:         writes.finishWrite(seed);
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.stress.generate;
1: 
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentSkipListMap;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.util.DynamicList;
1: 
1: public class SeedManager
1: {
1: 
1:     final Distribution visits;
1:     final Generator writes;
1:     final Generator reads;
0:     final ConcurrentHashMap<Seed, Seed> managing = new ConcurrentHashMap<>();
0:     final DynamicList<Seed> sampleFrom;
1:     final Distribution sample;
1: 
1:     public SeedManager(StressSettings settings)
1:     {
1:         Generator writes, reads;
1:         if (settings.generate.sequence != null)
1:         {
1:             long[] seq = settings.generate.sequence;
1:             if (settings.generate.readlookback != null)
1:             {
1:                 LookbackableWriteGenerator series = new LookbackableWriteGenerator(seq[0], seq[1], settings.generate.wrap, settings.generate.readlookback.get());
1:                 writes = series;
1:                 reads = series.reads;
1:             }
1:             else
1:             {
1:                 writes = reads = new SeriesGenerator(seq[0], seq[1], settings.generate.wrap);
1:             }
1:         }
1:         else
1:         {
1:             writes = reads = new RandomGenerator(settings.generate.distribution.get());
1:         }
1:         this.visits = settings.insert.visits.get();
1:         this.writes = writes;
1:         this.reads = reads;
0:         this.sample = DistributionInverted.invert(settings.insert.revisit.get());
0:         if (sample.maxValue() > Integer.MAX_VALUE || sample.minValue() < 0)
0:             throw new IllegalArgumentException();
0:         this.sampleFrom = new DynamicList<>((int) sample.maxValue());
1:     }
1: 
1:     public Seed next(Operation op)
1:     {
1:         if (!op.isWrite())
1:         {
1:             Seed seed = reads.next(-1);
1:             if (seed == null)
1:                 return null;
1:             Seed managing = this.managing.get(seed);
1:             return managing == null ? seed : managing;
1:         }
1: 
1:         while (true)
1:         {
0:             int index = (int) sample.next();
1:             Seed seed = sampleFrom.get(index);
0:             if (seed != null && seed.take())
1:                 return seed;
1: 
1:             seed = writes.next((int) visits.next());
1:             if (seed == null)
1:                 return null;
0:             // seeds are created HELD, so if we insert it successfully we have it exclusively for our write
0:             if (managing.putIfAbsent(seed, seed) == null)
1:                 return seed;
1:         }
1:     }
1: 
0:     public void markVisited(Seed seed, int[] position)
1:     {
0:         boolean first = seed.position == null;
0:         seed.position = position;
0:         finishedWriting(seed, first, false);
1:     }
1: 
0:     public void markFinished(Seed seed)
1:     {
0:         finishedWriting(seed, seed.position == null, true);
1:     }
1: 
0:     void finishedWriting(Seed seed, boolean first, boolean completed)
1:     {
0:         if (!completed)
1:         {
0:             if (first)
0:                 seed.poolNode = sampleFrom.append(seed);
0:             seed.yield();
1:         }
1:         else
1:         {
0:             if (!first)
0:                 sampleFrom.remove(seed.poolNode);
0:             managing.remove(seed);
1:         }
0:         if (first)
0:             writes.finishWrite(seed);
1:     }
1: 
1:     private abstract class Generator
1:     {
1:         abstract Seed next(int visits);
1:         void finishWrite(Seed seed) { }
1:     }
1: 
1:     private class RandomGenerator extends Generator
1:     {
1: 
1:         final Distribution distribution;
1: 
1:         public RandomGenerator(Distribution distribution)
1:         {
1:             this.distribution = distribution;
1:         }
1: 
1:         public Seed next(int visits)
1:         {
1:             return new Seed(distribution.next(), visits);
1:         }
1:     }
1: 
1:     private class SeriesGenerator extends Generator
1:     {
1: 
1:         final long start;
1:         final long totalCount;
1:         final boolean wrap;
1:         final AtomicLong next = new AtomicLong();
1: 
1:         public SeriesGenerator(long start, long end, boolean wrap)
1:         {
1:             this.wrap = wrap;
1:             if (start > end)
1:                 throw new IllegalStateException();
1:             this.start = start;
1:             this.totalCount = 1 + end - start;
1:         }
1: 
1:         public Seed next(int visits)
1:         {
1:             long next = this.next.getAndIncrement();
1:             if (!wrap && next >= totalCount)
1:                 return null;
1:             return new Seed(start + (next % totalCount), visits);
1:         }
1:     }
1: 
1:     private class LookbackableWriteGenerator extends SeriesGenerator
1:     {
1: 
1:         final AtomicLong writeCount = new AtomicLong();
1:         final ConcurrentSkipListMap<Seed, Seed> afterMin = new ConcurrentSkipListMap<>();
1:         final LookbackReadGenerator reads;
1: 
1:         public LookbackableWriteGenerator(long start, long end, boolean wrap, Distribution readLookback)
1:         {
1:             super(start, end, wrap);
1:             this.writeCount.set(0);
1:             reads = new LookbackReadGenerator(readLookback);
1:         }
1: 
1:         public Seed next(int visits)
1:         {
1:             long next = this.next.getAndIncrement();
1:             if (!wrap && next >= totalCount)
1:                 return null;
1:             return new Seed(start + (next % totalCount), visits);
1:         }
1: 
1:         void finishWrite(Seed seed)
1:         {
1:             if (seed.seed <= writeCount.get())
1:                 return;
1:             afterMin.put(seed, seed);
1:             while (true)
1:             {
1:                 Map.Entry<Seed, Seed> head = afterMin.firstEntry();
1:                 if (head == null)
1:                     return;
1:                 long min = this.writeCount.get();
1:                 if (head.getKey().seed <= min)
1:                     return;
1:                 if (head.getKey().seed == min + 1 && this.writeCount.compareAndSet(min, min + 1))
1:                 {
1:                     afterMin.remove(head.getKey());
1:                     continue;
1:                 }
1:                 return;
1:             }
1:         }
1: 
1:         private class LookbackReadGenerator extends Generator
1:         {
1: 
1:             final Distribution lookback;
1: 
1:             public LookbackReadGenerator(Distribution lookback)
1:             {
1:                 this.lookback = lookback;
1:                 if (lookback.maxValue() > start + totalCount)
1:                     throw new IllegalArgumentException("Invalid lookback distribution; max value is " + lookback.maxValue()
1:                                                        + ", but series only ranges from " + writeCount + " to " + (start + totalCount));
1:             }
1: 
1:             public Seed next(int visits)
1:             {
1:                 long lookback = this.lookback.next();
1:                 long range = writeCount.get();
1:                 long startOffset = range - lookback;
1:                 if (startOffset < 0)
1:                 {
1:                     if (range == totalCount && !wrap)
1:                         return null;
1:                     startOffset = range == 0 ? 0 : lookback % range;
1:                 }
1:                 return new Seed(start + startOffset, visits);
1:             }
1:         }
1: 
1:     }
1: 
1: }
============================================================================