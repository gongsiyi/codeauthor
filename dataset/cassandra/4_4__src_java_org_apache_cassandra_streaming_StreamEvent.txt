1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.net.InetAddress;
1:fa4255f: import java.util.Collections;
1:fa4255f: import java.util.Map;
1:690fbf3: import java.util.Set;
1:5151169: import java.util.UUID;
1:5151169: 
1:690fbf3: import com.google.common.collect.ImmutableSet;
1:690fbf3: 
1:fa4255f: import org.apache.cassandra.dht.Range;
1:fa4255f: import org.apache.cassandra.dht.Token;
1:fa4255f: 
1:5151169: public abstract class StreamEvent
1:5151169: {
1:5151169:     public static enum Type
1:5151169:     {
1:5151169:         STREAM_PREPARED,
1:5151169:         STREAM_COMPLETE,
1:5151169:         FILE_PROGRESS,
1:5151169:     }
1:5151169: 
1:5151169:     public final Type eventType;
1:5151169:     public final UUID planId;
1:5151169: 
1:5151169:     protected StreamEvent(Type eventType, UUID planId)
1:5151169:     {
1:5151169:         this.eventType = eventType;
1:5151169:         this.planId = planId;
1:5151169:     }
1:5151169: 
1:5151169:     public static class SessionCompleteEvent extends StreamEvent
1:5151169:     {
1:5151169:         public final InetAddress peer;
1:5151169:         public final boolean success;
1:44fa2cd:         public final int sessionIndex;
1:690fbf3:         public final Set<StreamRequest> requests;
1:fa4255f:         public final String description;
1:fa4255f:         public final Map<String, Set<Range<Token>>> transferredRangesPerKeyspace;
1:5151169: 
1:5151169:         public SessionCompleteEvent(StreamSession session)
1:5151169:         {
1:5151169:             super(Type.STREAM_COMPLETE, session.planId());
1:5151169:             this.peer = session.peer;
1:5151169:             this.success = session.isSuccess();
1:44fa2cd:             this.sessionIndex = session.sessionIndex();
1:690fbf3:             this.requests = ImmutableSet.copyOf(session.requests);
1:fa4255f:             this.description = session.description();
1:fa4255f:             this.transferredRangesPerKeyspace = Collections.unmodifiableMap(session.transferredRangesPerKeyspace);
1:5151169:         }
1:5151169:     }
1:5151169: 
1:5151169:     public static class ProgressEvent extends StreamEvent
1:5151169:     {
1:5151169:         public final ProgressInfo progress;
1:5151169: 
1:5151169:         public ProgressEvent(UUID planId, ProgressInfo progress)
1:5151169:         {
1:5151169:             super(Type.FILE_PROGRESS, planId);
1:5151169:             this.progress = progress;
1:5151169:         }
1:5151169: 
1:5151169:         @Override
1:5151169:         public String toString()
1:5151169:         {
1:182051c:             return "<ProgressEvent " + progress + ">";
1:5151169:         }
1:5151169:     }
1:5151169: 
1:5151169:     public static class SessionPreparedEvent extends StreamEvent
1:5151169:     {
1:5151169:         public final SessionInfo session;
1:5151169: 
1:5151169:         public SessionPreparedEvent(UUID planId, SessionInfo session)
1:5151169:         {
1:5151169:             super(Type.STREAM_PREPARED, planId);
1:5151169:             this.session = session;
1:5151169:         }
1:5151169:     }
1:5151169: }
============================================================================
author:Kaide Mu
-------------------------------------------------------------------------------
commit:fa4255f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Map;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
1: 
/////////////////////////////////////////////////////////////////////////
1:         public final String description;
1:         public final Map<String, Set<Range<Token>>> transferredRangesPerKeyspace;
/////////////////////////////////////////////////////////////////////////
1:             this.description = session.description();
1:             this.transferredRangesPerKeyspace = Collections.unmodifiableMap(session.transferredRangesPerKeyspace);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:690fbf3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import com.google.common.collect.ImmutableSet;
1: 
/////////////////////////////////////////////////////////////////////////
1:         public final Set<StreamRequest> requests;
/////////////////////////////////////////////////////////////////////////
1:             this.requests = ImmutableSet.copyOf(session.requests);
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
1: import java.net.InetAddress;
1: import java.util.UUID;
1: 
1: public abstract class StreamEvent
1: {
1:     public static enum Type
1:     {
1:         STREAM_PREPARED,
1:         STREAM_COMPLETE,
1:         FILE_PROGRESS,
1:     }
1: 
1:     public final Type eventType;
1:     public final UUID planId;
1: 
1:     protected StreamEvent(Type eventType, UUID planId)
1:     {
1:         this.eventType = eventType;
1:         this.planId = planId;
1:     }
1: 
1:     public static class SessionCompleteEvent extends StreamEvent
1:     {
1:         public final InetAddress peer;
1:         public final boolean success;
1: 
1:         public SessionCompleteEvent(StreamSession session)
1:         {
1:             super(Type.STREAM_COMPLETE, session.planId());
1:             this.peer = session.peer;
1:             this.success = session.isSuccess();
1:         }
1:     }
1: 
1:     public static class ProgressEvent extends StreamEvent
1:     {
1:         public final ProgressInfo progress;
1: 
1:         public ProgressEvent(UUID planId, ProgressInfo progress)
1:         {
1:             super(Type.FILE_PROGRESS, planId);
1:             this.progress = progress;
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
0:             return "<ProgressEvent " + progress.toString() + ">";
1:         }
1:     }
1: 
1:     public static class SessionPreparedEvent extends StreamEvent
1:     {
1:         public final SessionInfo session;
1: 
1:         public SessionPreparedEvent(UUID planId, SessionInfo session)
1:         {
1:             super(Type.STREAM_PREPARED, planId);
1:             this.session = session;
1:         }
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:182051c
/////////////////////////////////////////////////////////////////////////
1:             return "<ProgressEvent " + progress + ">";
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
1:         public final int sessionIndex;
1:             this.sessionIndex = session.sessionIndex();
============================================================================