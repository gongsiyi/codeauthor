1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
6:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
9:a991b64: 
6:a991b64: /**
1:a991b64:  * An iterator over rows belonging to a partition.
1:a991b64:  *
1:a991b64:  * A RowIterator is an UnfilteredRowIterator to which any deletion information has been
1:a991b64:  * filtered out. As such, all cell of all rows returned by this iterator are,
1:a991b64:  * by definition, live, and hence code using a RowIterator don't have to worry
1:a991b64:  * about tombstones and other deletion information.
1:a991b64:  *
1:a991b64:  * Note that as for UnfilteredRowIterator, the rows returned must be in clustering order (or
1:a991b64:  * reverse clustering order if isReverseOrder is true), and the Row objects returned
1:a991b64:  * by next() are only valid until the next call to hasNext() or next().
1:a991b64:  */
1:6094974: public interface RowIterator extends BaseRowIterator<Row>
1:a991b64: {
1:a991b64:     /**
1:a991b64:      * Returns whether the provided iterator has no data.
1:a991b64:      */
1:a991b64:     public default boolean isEmpty()
1:a991b64:     {
1:a991b64:         return staticRow().isEmpty() && !hasNext();
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: public interface RowIterator extends BaseRowIterator<Row>
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.util.Iterator;
1: 
0: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * An iterator over rows belonging to a partition.
1:  *
1:  * A RowIterator is an UnfilteredRowIterator to which any deletion information has been
1:  * filtered out. As such, all cell of all rows returned by this iterator are,
1:  * by definition, live, and hence code using a RowIterator don't have to worry
1:  * about tombstones and other deletion information.
1:  *
1:  * Note that as for UnfilteredRowIterator, the rows returned must be in clustering order (or
1:  * reverse clustering order if isReverseOrder is true), and the Row objects returned
1:  * by next() are only valid until the next call to hasNext() or next().
1:  */
0: public interface RowIterator extends Iterator<Row>, AutoCloseable
1: {
1:     /**
0:      * The metadata for the table this iterator on.
1:      */
0:     public CFMetaData metadata();
1: 
1:     /**
0:      * Whether or not the rows returned by this iterator are in reversed
0:      * clustering order.
1:      */
0:     public boolean isReverseOrder();
1: 
1:     /**
0:      * A subset of the columns for the (static and regular) rows returned by this iterator.
0:      * Every row returned by this iterator must guarantee that it has only those columns.
1:      */
0:     public PartitionColumns columns();
1: 
1:     /**
0:      * The partition key of the partition this in an iterator over.
1:      */
0:     public DecoratedKey partitionKey();
1: 
1:     /**
0:      * The static part corresponding to this partition (this can be an empty
0:      * row).
1:      */
0:     public Row staticRow();
1: 
0:     public void close();
1: 
1:     /**
1:      * Returns whether the provided iterator has no data.
1:      */
1:     public default boolean isEmpty()
1:     {
1:         return staticRow().isEmpty() && !hasNext();
1:     }
1: }
============================================================================