1:3a044a9: /*
1:3a044a9:  * Licensed to the Apache Software Foundation (ASF) under one
1:3a044a9:  * or more contributor license agreements.  See the NOTICE file
1:3a044a9:  * distributed with this work for additional information
1:3a044a9:  * regarding copyright ownership.  The ASF licenses this file
1:3a044a9:  * to you under the Apache License, Version 2.0 (the
1:3a044a9:  * "License"); you may not use this file except in compliance
1:3a044a9:  * with the License.  You may obtain a copy of the License at
1:3a044a9:  *
1:3a044a9:  *    http://www.apache.org/licenses/LICENSE-2.0
1:3a044a9:  *
1:3a044a9:  * Unless required by applicable law or agreed to in writing,
1:3a044a9:  * software distributed under the License is distributed on an
1:3a044a9:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3a044a9:  * KIND, either express or implied.  See the License for the
1:3a044a9:  * specific language governing permissions and limitations
1:3a044a9:  * under the License.
1:3a044a9:  */
1:3a044a9: package org.apache.cassandra.db.marshal;
2:3a044a9: 
1:e7a385a: import static org.junit.Assert.assertArrayEquals;
1:e7a385a: import static org.junit.Assert.assertEquals;
1:e7a385a: import static org.junit.Assert.assertTrue;
1:e7a385a: 
1:3a044a9: import java.math.BigInteger;
1:e7a385a: import java.nio.ByteBuffer;
1:3a044a9: import java.util.Arrays;
1:3a044a9: import java.util.Random;
1:3a044a9: 
1:3a044a9: import org.junit.ComparisonFailure;
1:3a044a9: import org.junit.Test;
1:3a044a9: 
1:3a044a9: public class IntegerTypeTest
1:3a044a9: {
1:3a044a9:     private static void assertSignum(String message, int expected, double value)
1:3a044a9:     {
1:3a044a9:         int signum = (int)Math.signum(value);
1:3a044a9:         if (signum != expected)
1:3a044a9:             throw new ComparisonFailure(message, Integer.toString(expected), Integer.toString(signum));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     private final IntegerType comparator = IntegerType.instance;
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testTrimming()
1:3a044a9:     {
1:e7a385a:         ByteBuffer n1, n2;
1:e7a385a:         n1 = ByteBuffer.wrap(new byte[] {0});
1:e7a385a:         n2 = ByteBuffer.wrap(new byte[] {0, 0, 0, 0});
1:3a044a9:         assertEquals(0, comparator.compare(n1, n2));
1:e7a385a:         n1 = ByteBuffer.wrap(new byte[] {1, 0, 0, 1});
1:e7a385a:         n2 = ByteBuffer.wrap(new byte[] {0, 0, 0, 1, 0, 0, 1});
1:3a044a9:         assertEquals(0, comparator.compare(n1, n2));
1:e7a385a:         n1 = ByteBuffer.wrap(new byte[] {-1, 0, 0, -1 });
1:e7a385a:         n2 = ByteBuffer.wrap(new byte[] {-1, -1, -1, -1, 0, 0, -1});
1:3a044a9:         assertEquals(0, comparator.compare(n1, n2));
1:e7a385a:         n1 = ByteBuffer.wrap(new byte[] {-1, 0});
1:e7a385a:         n2 = ByteBuffer.wrap(new byte[] {0, -1, 0});
1:3a044a9:         assertSignum("", -1, comparator.compare(n1, n2));
1:e7a385a:         n1 = ByteBuffer.wrap(new byte[] {1, 0});
1:e7a385a:         n2 = ByteBuffer.wrap(new byte[] {0, -1, 0});
1:3a044a9:         assertSignum("", -1, comparator.compare(n1, n2));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test(expected = NullPointerException.class)
1:3a044a9:     public void testNullLeft()
1:3a044a9:     {
1:e7a385a:         comparator.compare(null, ByteBuffer.wrap(new byte[1]));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test(expected = NullPointerException.class)
1:3a044a9:     public void testNullRight()
1:3a044a9:     {
1:e7a385a:         comparator.compare(ByteBuffer.wrap(new byte[1]), null);
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test(expected = NullPointerException.class)
1:3a044a9:     public void testNullBoth()
1:3a044a9:     {
1:3a044a9:         comparator.compare(null, null);
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testZeroLengthArray()
1:3a044a9:     {
1:e7a385a:         assertSignum("0-1", -1, comparator.compare(ByteBuffer.wrap(new byte[0]), ByteBuffer.wrap(new byte[1])));
1:e7a385a:         assertSignum("1-0", 1, comparator.compare(ByteBuffer.wrap(new byte[1]), ByteBuffer.wrap(new byte[0])));
1:e7a385a:         assertSignum("0-0", 0, comparator.compare(ByteBuffer.wrap(new byte[0]), ByteBuffer.wrap(new byte[0])));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testSanity()
1:3a044a9:     {
1:e7a385a:         ByteBuffer nN = ByteBuffer.wrap(new byte[] {-1});
1:e7a385a:         ByteBuffer nZ = ByteBuffer.wrap(new byte[] {0});
1:e7a385a:         ByteBuffer nP = ByteBuffer.wrap(new byte[] {1});
1:3a044a9:         assertSignum("ZN", 1, comparator.compare(nZ, nN));
1:3a044a9:         assertSignum("NZ", -1, comparator.compare(nN, nZ));
1:3a044a9:         assertSignum("ZP", -1, comparator.compare(nZ, nP));
1:3a044a9:         assertSignum("PZ", 1, comparator.compare(nP, nZ));
1:3a044a9:         assertSignum("PN", 1, comparator.compare(nP, nN));
1:3a044a9:         assertSignum("NP", -1, comparator.compare(nN, nP));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testSameLength()
1:3a044a9:     {
1:e7a385a:         ByteBuffer n1 = ByteBuffer.wrap(new byte[] {-2, 2, -4, -5});
1:e7a385a:         ByteBuffer n2 = ByteBuffer.wrap(new byte[] {-2, 3, -5, -4});
1:e7a385a:         ByteBuffer p1 = ByteBuffer.wrap(new byte[] {2, 3, -4, -5});
1:e7a385a:         ByteBuffer p2 = ByteBuffer.wrap(new byte[] {2, -2, -5, -4});
1:3a044a9: 
1:3a044a9:         assertSignum("n1n2", -1, comparator.compare(n1, n2));
1:3a044a9:         assertSignum("n2n1", 1, comparator.compare(n2, n1));
1:3a044a9: 
1:3a044a9:         assertSignum("p1p2", -1, comparator.compare(p1, p2));
1:3a044a9:         assertSignum("p2p1", 1, comparator.compare(p2, p1));
1:3a044a9: 
1:3a044a9:         assertSignum("p1n1", 1, comparator.compare(p1, n1));
1:3a044a9:         assertSignum("p1n2", 1, comparator.compare(p1, n2));
1:3a044a9:         assertSignum("n1p1", -1, comparator.compare(n1, p1));
1:3a044a9:         assertSignum("n2p1", -1, comparator.compare(n2, p1));
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testCommonPrefix()
1:3a044a9:     {
1:e7a385a:         ByteBuffer[] data = {
1:e7a385a:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1, 0})
1:3a044a9:         };
1:3a044a9: 
1:3a044a9:         Arrays.sort(data, comparator);
1:e7a385a:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0}, data[0].array());
1:e7a385a:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0},data[1].array());
1:e7a385a:         assertArrayEquals(new byte[]{-1, 0, 0, 1},data[2].array());
1:e7a385a:         assertArrayEquals(new byte[]{-1, 0, 0, 1},data[3].array());
1:e7a385a:         assertArrayEquals(new byte[]{1, 0, 0, 1},data[4].array());
1:e7a385a:         assertArrayEquals(new byte[]{1, 0, 0, 1},data[5].array());
1:e7a385a:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0},data[6].array());
1:e7a385a:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0},data[7].array());
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testSorting()
1:3a044a9:     {
1:e7a385a:         ByteBuffer[] data = {
1:e7a385a:                 ByteBuffer.wrap(new byte[]{ 1, 0, 0, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-2, 0, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{ 3, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-4}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{ 4}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-3, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{ 2, 0, 0}),
1:e7a385a:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 0})
1:3a044a9:         };
1:3a044a9: 
1:3a044a9:         Arrays.sort(data, comparator);
1:e7a385a:         assertArrayEquals("-1", new byte[] {-1, 0, 0, 0}, data[0].array());
1:e7a385a:         assertArrayEquals("-2", new byte[] {-2, 0, 0}, data[1].array());
1:e7a385a:         assertArrayEquals("-3", new byte[] {-3, 0}, data[2].array());
1:e7a385a:         assertArrayEquals("-4", new byte[] {-4}, data[3].array());
1:e7a385a:         assertArrayEquals(" 4", new byte[] { 4}, data[4].array());
1:e7a385a:         assertArrayEquals(" 3", new byte[] { 3, 0}, data[5].array());
1:e7a385a:         assertArrayEquals(" 2", new byte[] { 2, 0, 0}, data[6].array());
1:e7a385a:         assertArrayEquals(" 1", new byte[] { 1, 0, 0, 0}, data[7].array());
1:3a044a9:     }
1:3a044a9: 
1:3a044a9:     @Test
1:3a044a9:     public void testSortingSpecialExtendedVersion()
1:3a044a9:     {
1:3a044a9:         Random rng = new Random(-9078270684023566599L);
1:3a044a9: 
1:e7a385a:         ByteBuffer[] data = new ByteBuffer[10000];
1:3a044a9:         for (int i = 0; i < data.length; i++)
1:3a044a9:         {
1:e7a385a:             data[i] = ByteBuffer.allocate(rng.nextInt(32) + 1);
1:e7a385a:             rng.nextBytes(data[i].array());
1:3a044a9:         }
1:3a044a9: 
1:3a044a9:         Arrays.sort(data, comparator);
1:3a044a9: 
1:3a044a9:         for (int i = 1; i < data.length; i++)
1:3a044a9:         {
1:e7a385a:             BigInteger i0 = new BigInteger(data[i - 1].array());
1:e7a385a:             BigInteger i1 = new BigInteger(data[i].array());
1:3a044a9:             assertTrue("#" + i, i0.compareTo(i1) <= 0);
1:3a044a9:         }
1:3a044a9:     }
1:3a044a9: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer n1, n2;
1:         n1 = ByteBuffer.wrap(new byte[] {0});
1:         n2 = ByteBuffer.wrap(new byte[] {0, 0, 0, 0});
1:         n1 = ByteBuffer.wrap(new byte[] {1, 0, 0, 1});
1:         n2 = ByteBuffer.wrap(new byte[] {0, 0, 0, 1, 0, 0, 1});
1:         n1 = ByteBuffer.wrap(new byte[] {-1, 0, 0, -1 });
1:         n2 = ByteBuffer.wrap(new byte[] {-1, -1, -1, -1, 0, 0, -1});
1:         n1 = ByteBuffer.wrap(new byte[] {-1, 0});
1:         n2 = ByteBuffer.wrap(new byte[] {0, -1, 0});
1:         n1 = ByteBuffer.wrap(new byte[] {1, 0});
1:         n2 = ByteBuffer.wrap(new byte[] {0, -1, 0});
1:         comparator.compare(null, ByteBuffer.wrap(new byte[1]));
1:         comparator.compare(ByteBuffer.wrap(new byte[1]), null);
/////////////////////////////////////////////////////////////////////////
1:         assertSignum("0-1", -1, comparator.compare(ByteBuffer.wrap(new byte[0]), ByteBuffer.wrap(new byte[1])));
1:         assertSignum("1-0", 1, comparator.compare(ByteBuffer.wrap(new byte[1]), ByteBuffer.wrap(new byte[0])));
1:         assertSignum("0-0", 0, comparator.compare(ByteBuffer.wrap(new byte[0]), ByteBuffer.wrap(new byte[0])));
1:         ByteBuffer nN = ByteBuffer.wrap(new byte[] {-1});
1:         ByteBuffer nZ = ByteBuffer.wrap(new byte[] {0});
1:         ByteBuffer nP = ByteBuffer.wrap(new byte[] {1});
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer n1 = ByteBuffer.wrap(new byte[] {-2, 2, -4, -5});
1:         ByteBuffer n2 = ByteBuffer.wrap(new byte[] {-2, 3, -5, -4});
1:         ByteBuffer p1 = ByteBuffer.wrap(new byte[] {2, 3, -4, -5});
1:         ByteBuffer p2 = ByteBuffer.wrap(new byte[] {2, -2, -5, -4});
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer[] data = {
1:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1}),
1:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1, 0}),
1:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1}),
1:                 ByteBuffer.wrap(new byte[]{1, 0, 0, 1, 0}),
1:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1}),
1:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1, 0}),
1:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1}),
1:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 1, 0})
1:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0}, data[0].array());
1:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0},data[1].array());
1:         assertArrayEquals(new byte[]{-1, 0, 0, 1},data[2].array());
1:         assertArrayEquals(new byte[]{-1, 0, 0, 1},data[3].array());
1:         assertArrayEquals(new byte[]{1, 0, 0, 1},data[4].array());
1:         assertArrayEquals(new byte[]{1, 0, 0, 1},data[5].array());
1:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0},data[6].array());
1:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0},data[7].array());
1:         ByteBuffer[] data = {
1:                 ByteBuffer.wrap(new byte[]{ 1, 0, 0, 0}),
1:                 ByteBuffer.wrap(new byte[]{-2, 0, 0}),
1:                 ByteBuffer.wrap(new byte[]{ 3, 0}),
1:                 ByteBuffer.wrap(new byte[]{-4}),
1:                 ByteBuffer.wrap(new byte[]{ 4}),
1:                 ByteBuffer.wrap(new byte[]{-3, 0}),
1:                 ByteBuffer.wrap(new byte[]{ 2, 0, 0}),
1:                 ByteBuffer.wrap(new byte[]{-1, 0, 0, 0})
1:         assertArrayEquals("-1", new byte[] {-1, 0, 0, 0}, data[0].array());
1:         assertArrayEquals("-2", new byte[] {-2, 0, 0}, data[1].array());
1:         assertArrayEquals("-3", new byte[] {-3, 0}, data[2].array());
1:         assertArrayEquals("-4", new byte[] {-4}, data[3].array());
1:         assertArrayEquals(" 4", new byte[] { 4}, data[4].array());
1:         assertArrayEquals(" 3", new byte[] { 3, 0}, data[5].array());
1:         assertArrayEquals(" 2", new byte[] { 2, 0, 0}, data[6].array());
1:         assertArrayEquals(" 1", new byte[] { 1, 0, 0, 0}, data[7].array());
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer[] data = new ByteBuffer[10000];
1:             data[i] = ByteBuffer.allocate(rng.nextInt(32) + 1);
1:             rng.nextBytes(data[i].array());
1:             BigInteger i0 = new BigInteger(data[i - 1].array());
1:             BigInteger i1 = new BigInteger(data[i].array());
commit:3a044a9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.math.BigInteger;
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: import org.junit.ComparisonFailure;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class IntegerTypeTest
1: {
1:     private static void assertSignum(String message, int expected, double value)
1:     {
1:         int signum = (int)Math.signum(value);
1:         if (signum != expected)
1:             throw new ComparisonFailure(message, Integer.toString(expected), Integer.toString(signum));
1:     }
1: 
1:     private final IntegerType comparator = IntegerType.instance;
1: 
1:     @Test
1:     public void testTrimming()
1:     {
0:         byte[] n1, n2;
0:         n1 = new byte[] {0};
0:         n2 = new byte[] {0, 0, 0, 0};
1:         assertEquals(0, comparator.compare(n1, n2));
0:         n1 = new byte[] {1, 0, 0, 1};
0:         n2 = new byte[] {0, 0, 0, 1, 0, 0, 1};
1:         assertEquals(0, comparator.compare(n1, n2));
0:         n1 = new byte[] {-1, 0, 0, -1 };
0:         n2 = new byte[] {-1, -1, -1, -1, 0, 0, -1};
1:         assertEquals(0, comparator.compare(n1, n2));
0:         n1 = new byte[] {-1, 0};
0:         n2 = new byte[] {0, -1, 0};
1:         assertSignum("", -1, comparator.compare(n1, n2));
0:         n1 = new byte[] {1, 0};
0:         n2 = new byte[] {0, -1, 0};
1:         assertSignum("", -1, comparator.compare(n1, n2));
1:     }
1: 
1:     @Test(expected = NullPointerException.class)
1:     public void testNullLeft()
1:     {
0:         comparator.compare(null, new byte[1]);
1:     }
1: 
1:     @Test(expected = NullPointerException.class)
1:     public void testNullRight()
1:     {
0:         comparator.compare(new byte[1], null);
1:     }
1: 
1:     @Test(expected = NullPointerException.class)
1:     public void testNullBoth()
1:     {
1:         comparator.compare(null, null);
1:     }
1: 
1:     @Test
1:     public void testZeroLengthArray()
1:     {
0:         assertSignum("0-1", -1, comparator.compare(new byte[0], new byte[1]));
0:         assertSignum("1-0", 1, comparator.compare(new byte[1], new byte[0]));
0:         assertSignum("0-0", 0, comparator.compare(new byte[0], new byte[0]));
1:     }
1: 
1:     @Test
1:     public void testSanity()
1:     {
0:         byte[] nN = new byte[] {-1};
0:         byte[] nZ = new byte[] {0};
0:         byte[] nP = new byte[] {1};
1:         assertSignum("ZN", 1, comparator.compare(nZ, nN));
1:         assertSignum("NZ", -1, comparator.compare(nN, nZ));
1:         assertSignum("ZP", -1, comparator.compare(nZ, nP));
1:         assertSignum("PZ", 1, comparator.compare(nP, nZ));
1:         assertSignum("PN", 1, comparator.compare(nP, nN));
1:         assertSignum("NP", -1, comparator.compare(nN, nP));
1:     }
1: 
1:     @Test
1:     public void testSameLength()
1:     {
0:         byte[] n1 = new byte[] {-2, 2, -4, -5};
0:         byte[] n2 = new byte[] {-2, 3, -5, -4};
0:         byte[] p1 = new byte[] {2, 3, -4, -5};
0:         byte[] p2 = new byte[] {2, -2, -5, -4};
1: 
1:         assertSignum("n1n2", -1, comparator.compare(n1, n2));
1:         assertSignum("n2n1", 1, comparator.compare(n2, n1));
1: 
1:         assertSignum("p1p2", -1, comparator.compare(p1, p2));
1:         assertSignum("p2p1", 1, comparator.compare(p2, p1));
1: 
1:         assertSignum("p1n1", 1, comparator.compare(p1, n1));
1:         assertSignum("p1n2", 1, comparator.compare(p1, n2));
1:         assertSignum("n1p1", -1, comparator.compare(n1, p1));
1:         assertSignum("n2p1", -1, comparator.compare(n2, p1));
1:     }
1: 
1:     @Test
1:     public void testCommonPrefix()
1:     {
0:         byte[][] data = {
0:                 {1, 0, 0, 1},
0:                 {1, 0, 0, 1, 0},
0:                 {1, 0, 0, 1},
0:                 {1, 0, 0, 1, 0},
0:                 {-1, 0, 0, 1},
0:                 {-1, 0, 0, 1, 0},
0:                 {-1, 0, 0, 1},
0:                 {-1, 0, 0, 1, 0}
1:         };
1: 
1:         Arrays.sort(data, comparator);
0:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0}, data[0]);
0:         assertArrayEquals(new byte[]{-1, 0, 0, 1, 0}, data[1]);
0:         assertArrayEquals(new byte[]{-1, 0, 0, 1}, data[2]);
0:         assertArrayEquals(new byte[]{-1, 0, 0, 1}, data[3]);
0:         assertArrayEquals(new byte[]{1, 0, 0, 1}, data[4]);
0:         assertArrayEquals(new byte[]{1, 0, 0, 1}, data[5]);
0:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0}, data[6]);
0:         assertArrayEquals(new byte[]{1, 0, 0, 1, 0}, data[7]);
1:     }
1: 
1:     @Test
1:     public void testSorting()
1:     {
0:         byte[][] data = {
0:                 { 1, 0, 0, 0},
0:                 {-2, 0, 0},
0:                 { 3, 0},
0:                 {-4},
0:                 { 4},
0:                 {-3, 0},
0:                 { 2, 0, 0},
0:                 {-1, 0, 0, 0}
1:         };
1: 
1:         Arrays.sort(data, comparator);
0:         assertArrayEquals("-1", new byte[] {-1, 0, 0, 0}, data[0]);
0:         assertArrayEquals("-2", new byte[] {-2, 0, 0}, data[1]);
0:         assertArrayEquals("-3", new byte[] {-3, 0}, data[2]);
0:         assertArrayEquals("-4", new byte[] {-4}, data[3]);
0:         assertArrayEquals(" 4", new byte[] { 4}, data[4]);
0:         assertArrayEquals(" 3", new byte[] { 3, 0}, data[5]);
0:         assertArrayEquals(" 2", new byte[] { 2, 0, 0}, data[6]);
0:         assertArrayEquals(" 1", new byte[] { 1, 0, 0, 0}, data[7]);
1:     }
1: 
1:     @Test
1:     public void testSortingSpecialExtendedVersion()
1:     {
1:         Random rng = new Random(-9078270684023566599L);
1: 
0:         byte[][] data = new byte[10000][];
1:         for (int i = 0; i < data.length; i++)
1:         {
0:             data[i] = new byte[rng.nextInt(32) + 1];
0:             rng.nextBytes(data[i]);
1:         }
1: 
1:         Arrays.sort(data, comparator);
1: 
1:         for (int i = 1; i < data.length; i++)
1:         {
0:             BigInteger i0 = new BigInteger(data[i - 1]);
0:             BigInteger i1 = new BigInteger(data[i]);
1:             assertTrue("#" + i, i0.compareTo(i1) <= 0);
1:         }
1:     }
1: }
============================================================================