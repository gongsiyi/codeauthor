1:b31845c: /*
1:b31845c:  * Licensed to the Apache Software Foundation (ASF) under one
1:b31845c:  * or more contributor license agreements.  See the NOTICE file
1:b31845c:  * distributed with this work for additional information
1:b31845c:  * regarding copyright ownership.  The ASF licenses this file
1:b31845c:  * to you under the Apache License, Version 2.0 (the
1:b31845c:  * "License"); you may not use this file except in compliance
1:b31845c:  * with the License.  You may obtain a copy of the License at
1:b31845c:  *
1:b31845c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b31845c:  *
1:b31845c:  * Unless required by applicable law or agreed to in writing, software
1:b31845c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b31845c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b31845c:  * See the License for the specific language governing permissions and
1:b31845c:  * limitations under the License.
1:b31845c:  */
1:b31845c: package org.apache.cassandra.schema;
1:b31845c: 
1:b31845c: import java.util.HashMap;
1:b31845c: import java.util.Map;
1:b31845c: 
1:b31845c: import com.google.common.base.MoreObjects;
1:b31845c: import com.google.common.base.Objects;
1:b31845c: import com.google.common.collect.ImmutableMap;
1:b31845c: 
1:b31845c: import org.apache.cassandra.config.DatabaseDescriptor;
1:b31845c: import org.apache.cassandra.locator.*;
1:b31845c: import org.apache.cassandra.service.StorageService;
1:b31845c: 
1:b31845c: public final class ReplicationParams
1:b31845c: {
1:b31845c:     public static final String CLASS = "class";
1:b31845c: 
1:b31845c:     public final Class<? extends AbstractReplicationStrategy> klass;
1:b31845c:     public final ImmutableMap<String, String> options;
1:b31845c: 
1:b31845c:     private ReplicationParams(Class<? extends AbstractReplicationStrategy> klass, Map<String, String> options)
1:b31845c:     {
1:b31845c:         this.klass = klass;
1:b31845c:         this.options = ImmutableMap.copyOf(options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     static ReplicationParams local()
1:b31845c:     {
1:b31845c:         return new ReplicationParams(LocalStrategy.class, ImmutableMap.of());
1:b31845c:     }
1:b31845c: 
1:b31845c:     static ReplicationParams simple(int replicationFactor)
1:b31845c:     {
1:b31845c:         return new ReplicationParams(SimpleStrategy.class, ImmutableMap.of("replication_factor", Integer.toString(replicationFactor)));
1:b31845c:     }
1:b31845c: 
1:c7e74f3:     static ReplicationParams nts(Object... args)
1:c7e74f3:     {
1:c7e74f3:         assert args.length % 2 == 0;
1:c7e74f3: 
1:c7e74f3:         Map<String, String> options = new HashMap<>();
1:c7e74f3:         for (int i = 0; i < args.length; i += 2)
1:c7e74f3:         {
1:c7e74f3:             String dc = (String) args[i];
1:c7e74f3:             Integer rf = (Integer) args[i + 1];
1:c7e74f3:             options.put(dc, rf.toString());
1:c7e74f3:         }
1:c7e74f3: 
1:c7e74f3:         return new ReplicationParams(NetworkTopologyStrategy.class, options);
1:c7e74f3:     }
1:c7e74f3: 
1:b31845c:     public void validate(String name)
1:b31845c:     {
1:b31845c:         // Attempt to instantiate the ARS, which will throw a ConfigurationException if the options aren't valid.
1:b31845c:         TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:b31845c:         IEndpointSnitch eps = DatabaseDescriptor.getEndpointSnitch();
1:b31845c:         AbstractReplicationStrategy.validateReplicationStrategy(name, klass, tmd, eps, options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public static ReplicationParams fromMap(Map<String, String> map)
1:b31845c:     {
1:b31845c:         Map<String, String> options = new HashMap<>(map);
1:b31845c:         String className = options.remove(CLASS);
1:b31845c:         Class<? extends AbstractReplicationStrategy> klass = AbstractReplicationStrategy.getClass(className);
1:b31845c:         return new ReplicationParams(klass, options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     public Map<String, String> asMap()
1:b31845c:     {
1:b31845c:         Map<String, String> map = new HashMap<>(options);
1:b31845c:         map.put(CLASS, klass.getName());
1:b31845c:         return map;
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public boolean equals(Object o)
1:b31845c:     {
1:b31845c:         if (this == o)
1:b31845c:             return true;
1:b31845c: 
1:b31845c:         if (!(o instanceof ReplicationParams))
1:b31845c:             return false;
1:b31845c: 
1:b31845c:         ReplicationParams r = (ReplicationParams) o;
1:b31845c: 
1:b31845c:         return klass.equals(r.klass) && options.equals(r.options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public int hashCode()
1:b31845c:     {
1:b31845c:         return Objects.hashCode(klass, options);
1:b31845c:     }
1:b31845c: 
1:b31845c:     @Override
1:b31845c:     public String toString()
1:b31845c:     {
1:b31845c:         MoreObjects.ToStringHelper helper = MoreObjects.toStringHelper(this);
1:b31845c:         helper.add(CLASS, klass.getName());
1:b31845c:         for (Map.Entry<String, String> entry : options.entrySet())
1:b31845c:             helper.add(entry.getKey(), entry.getValue());
1:b31845c:         return helper.toString();
1:b31845c:     }
1:b31845c: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:c7e74f3
/////////////////////////////////////////////////////////////////////////
1:     static ReplicationParams nts(Object... args)
1:     {
1:         assert args.length % 2 == 0;
1: 
1:         Map<String, String> options = new HashMap<>();
1:         for (int i = 0; i < args.length; i += 2)
1:         {
1:             String dc = (String) args[i];
1:             Integer rf = (Integer) args[i + 1];
1:             options.put(dc, rf.toString());
1:         }
1: 
1:         return new ReplicationParams(NetworkTopologyStrategy.class, options);
1:     }
1: 
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.schema;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.base.MoreObjects;
1: import com.google.common.base.Objects;
1: import com.google.common.collect.ImmutableMap;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.locator.*;
1: import org.apache.cassandra.service.StorageService;
1: 
1: public final class ReplicationParams
1: {
1:     public static final String CLASS = "class";
1: 
1:     public final Class<? extends AbstractReplicationStrategy> klass;
1:     public final ImmutableMap<String, String> options;
1: 
1:     private ReplicationParams(Class<? extends AbstractReplicationStrategy> klass, Map<String, String> options)
1:     {
1:         this.klass = klass;
1:         this.options = ImmutableMap.copyOf(options);
1:     }
1: 
1:     static ReplicationParams local()
1:     {
1:         return new ReplicationParams(LocalStrategy.class, ImmutableMap.of());
1:     }
1: 
1:     static ReplicationParams simple(int replicationFactor)
1:     {
1:         return new ReplicationParams(SimpleStrategy.class, ImmutableMap.of("replication_factor", Integer.toString(replicationFactor)));
1:     }
1: 
1:     public void validate(String name)
1:     {
1:         // Attempt to instantiate the ARS, which will throw a ConfigurationException if the options aren't valid.
1:         TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:         IEndpointSnitch eps = DatabaseDescriptor.getEndpointSnitch();
1:         AbstractReplicationStrategy.validateReplicationStrategy(name, klass, tmd, eps, options);
1:     }
1: 
1:     public static ReplicationParams fromMap(Map<String, String> map)
1:     {
1:         Map<String, String> options = new HashMap<>(map);
1:         String className = options.remove(CLASS);
1:         Class<? extends AbstractReplicationStrategy> klass = AbstractReplicationStrategy.getClass(className);
1:         return new ReplicationParams(klass, options);
1:     }
1: 
1:     public Map<String, String> asMap()
1:     {
1:         Map<String, String> map = new HashMap<>(options);
1:         map.put(CLASS, klass.getName());
1:         return map;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof ReplicationParams))
1:             return false;
1: 
1:         ReplicationParams r = (ReplicationParams) o;
1: 
1:         return klass.equals(r.klass) && options.equals(r.options);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(klass, options);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         MoreObjects.ToStringHelper helper = MoreObjects.toStringHelper(this);
1:         helper.add(CLASS, klass.getName());
1:         for (Map.Entry<String, String> entry : options.entrySet())
1:             helper.add(entry.getKey(), entry.getValue());
1:         return helper.toString();
1:     }
1: }
============================================================================