1:fbd287a: /*
1:fbd287a:  * Licensed to the Apache Software Foundation (ASF) under one
1:fbd287a:  * or more contributor license agreements.  See the NOTICE file
1:fbd287a:  * distributed with this work for additional information
1:fbd287a:  * regarding copyright ownership.  The ASF licenses this file
1:fbd287a:  * to you under the Apache License, Version 2.0 (the
1:fbd287a:  * "License"); you may not use this file except in compliance
1:fbd287a:  * with the License.  You may obtain a copy of the License at
1:fbd287a:  *
1:fbd287a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fbd287a:  *
1:fbd287a:  * Unless required by applicable law or agreed to in writing, software
1:fbd287a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fbd287a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fbd287a:  * See the License for the specific language governing permissions and
1:fbd287a:  * limitations under the License.
1:fbd287a:  */
1:fbd287a: package org.apache.cassandra.io;
1:fbd287a: 
1:fbd287a: import java.io.IOException;
1:fbd287a: 
1:fbd287a: import org.apache.cassandra.io.util.DataInputPlus;
1:fbd287a: import org.apache.cassandra.io.util.DataOutputPlus;
1:fbd287a: 
1:fbd287a: /**
1:fbd287a:  * A serializer which forwards all its method calls to another serializer. Subclasses should override one or more
1:fbd287a:  * methods to modify the behavior of the backing serializer as desired per the decorator pattern.
1:fbd287a:  */
1:fbd287a: public abstract class ForwardingVersionedSerializer<T> implements IVersionedSerializer<T>
1:fbd287a: {
1:fbd287a:     protected ForwardingVersionedSerializer()
1:fbd287a:     {
1:fbd287a:     }
1:fbd287a: 
1:fbd287a:     /**
1:fbd287a:      * Returns the backing delegate instance that methods are forwarded to.
1:fbd287a:      *
1:fbd287a:      * @param version the server version
1:fbd287a:      * @return the backing delegate instance that methods are forwarded to.
1:fbd287a:      */
1:fbd287a:     protected abstract IVersionedSerializer<T> delegate(int version);
1:fbd287a: 
1:fbd287a:     public void serialize(T t, DataOutputPlus out, int version) throws IOException
1:fbd287a:     {
1:fbd287a:         delegate(version).serialize(t, out, version);
1:fbd287a:     }
1:fbd287a: 
1:fbd287a:     public T deserialize(DataInputPlus in, int version) throws IOException
1:fbd287a:     {
1:fbd287a:         return delegate(version).deserialize(in, version);
1:fbd287a:     }
1:fbd287a: 
1:fbd287a:     public long serializedSize(T t, int version)
1:fbd287a:     {
1:fbd287a:         return delegate(version).serializedSize(t, version);
1:fbd287a:     }
1:fbd287a: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:fbd287a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: 
1: /**
1:  * A serializer which forwards all its method calls to another serializer. Subclasses should override one or more
1:  * methods to modify the behavior of the backing serializer as desired per the decorator pattern.
1:  */
1: public abstract class ForwardingVersionedSerializer<T> implements IVersionedSerializer<T>
1: {
1:     protected ForwardingVersionedSerializer()
1:     {
1:     }
1: 
1:     /**
1:      * Returns the backing delegate instance that methods are forwarded to.
1:      *
1:      * @param version the server version
1:      * @return the backing delegate instance that methods are forwarded to.
1:      */
1:     protected abstract IVersionedSerializer<T> delegate(int version);
1: 
1:     public void serialize(T t, DataOutputPlus out, int version) throws IOException
1:     {
1:         delegate(version).serialize(t, out, version);
1:     }
1: 
1:     public T deserialize(DataInputPlus in, int version) throws IOException
1:     {
1:         return delegate(version).deserialize(in, version);
1:     }
1: 
1:     public long serializedSize(T t, int version)
1:     {
1:         return delegate(version).serializedSize(t, version);
1:     }
1: }
============================================================================