1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.file.Files;
1:96d41f0: import java.util.*;
1:96d41f0: 
1:7f6d039: import com.google.common.collect.ImmutableMap;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.*;
1:96d41f0: 
1:96d41f0: public class HintsCatalogTest
1:96d41f0: {
1:96d41f0:     @Test
1:96d41f0:     public void loadCompletenessAndOrderTest() throws IOException
1:96d41f0:     {
1:96d41f0:         File directory = Files.createTempDirectory(null).toFile();
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             loadCompletenessAndOrderTest(directory);
1:96d41f0:         }
1:96d41f0:         finally
1:96d41f0:         {
1:96d41f0:             directory.deleteOnExit();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public static void loadCompletenessAndOrderTest(File directory) throws IOException
1:96d41f0:     {
1:96d41f0:         UUID hostId1 = UUID.randomUUID();
1:96d41f0:         UUID hostId2 = UUID.randomUUID();
1:96d41f0: 
1:96d41f0:         long timestamp1 = System.currentTimeMillis();
1:96d41f0:         long timestamp2 = System.currentTimeMillis() + 1;
1:96d41f0:         long timestamp3 = System.currentTimeMillis() + 2;
1:96d41f0:         long timestamp4 = System.currentTimeMillis() + 3;
1:96d41f0: 
1:96d41f0:         HintsDescriptor descriptor1 = new HintsDescriptor(hostId1, timestamp1);
1:96d41f0:         HintsDescriptor descriptor2 = new HintsDescriptor(hostId2, timestamp3);
1:96d41f0:         HintsDescriptor descriptor3 = new HintsDescriptor(hostId2, timestamp2);
1:96d41f0:         HintsDescriptor descriptor4 = new HintsDescriptor(hostId1, timestamp4);
1:96d41f0: 
1:96d41f0:         writeDescriptor(directory, descriptor1);
1:96d41f0:         writeDescriptor(directory, descriptor2);
1:96d41f0:         writeDescriptor(directory, descriptor3);
1:96d41f0:         writeDescriptor(directory, descriptor4);
1:96d41f0: 
1:7f6d039:         HintsCatalog catalog = HintsCatalog.load(directory, ImmutableMap.of());
1:96d41f0:         assertEquals(2, catalog.stores().count());
1:96d41f0: 
1:96d41f0:         HintsStore store1 = catalog.get(hostId1);
1:96d41f0:         assertNotNull(store1);
1:96d41f0:         assertEquals(descriptor1, store1.poll());
1:96d41f0:         assertEquals(descriptor4, store1.poll());
1:96d41f0:         assertNull(store1.poll());
1:96d41f0: 
1:96d41f0:         HintsStore store2 = catalog.get(hostId2);
1:96d41f0:         assertNotNull(store2);
1:96d41f0:         assertEquals(descriptor3, store2.poll());
1:96d41f0:         assertEquals(descriptor2, store2.poll());
1:96d41f0:         assertNull(store2.poll());
1:96d41f0:     }
1:96d41f0: 
1:cee22ad:     @Test
1:cee22ad:     public void deleteHintsTest() throws IOException
1:cee22ad:     {
1:cee22ad:         File directory = Files.createTempDirectory(null).toFile();
1:cee22ad:         UUID hostId1 = UUID.randomUUID();
1:cee22ad:         UUID hostId2 = UUID.randomUUID();
1:cee22ad:         long now = System.currentTimeMillis();
1:cee22ad:         writeDescriptor(directory, new HintsDescriptor(hostId1, now));
1:cee22ad:         writeDescriptor(directory, new HintsDescriptor(hostId1, now+1));
1:cee22ad:         writeDescriptor(directory, new HintsDescriptor(hostId2, now+2));
1:cee22ad:         writeDescriptor(directory, new HintsDescriptor(hostId2, now+3));
1:cee22ad: 
1:cee22ad:         // load catalog containing two stores (one for each host)
1:cee22ad:         HintsCatalog catalog = HintsCatalog.load(directory, ImmutableMap.of());
1:cee22ad:         assertEquals(2, catalog.stores().count());
1:cee22ad:         assertTrue(catalog.hasFiles());
1:cee22ad: 
1:cee22ad:         // delete all hints from store 1
1:cee22ad:         assertTrue(catalog.get(hostId1).hasFiles());
1:cee22ad:         catalog.deleteAllHints(hostId1);
1:cee22ad:         assertFalse(catalog.get(hostId1).hasFiles());
1:cee22ad:         // stores are still keepts for each host, even after deleting hints
1:cee22ad:         assertEquals(2, catalog.stores().count());
1:cee22ad:         assertTrue(catalog.hasFiles());
1:cee22ad: 
1:cee22ad:         // delete all hints from all stores
1:cee22ad:         catalog.deleteAllHints();
1:cee22ad:         assertEquals(2, catalog.stores().count());
1:cee22ad:         assertFalse(catalog.hasFiles());
1:cee22ad:     }
1:cee22ad: 
1:96d41f0:     @SuppressWarnings("EmptyTryBlock")
1:96d41f0:     private static void writeDescriptor(File directory, HintsDescriptor descriptor) throws IOException
1:96d41f0:     {
1:96d41f0:         try (HintsWriter ignored = HintsWriter.create(directory, descriptor))
1:96d41f0:         {
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void deleteHintsTest() throws IOException
1:     {
1:         File directory = Files.createTempDirectory(null).toFile();
1:         UUID hostId1 = UUID.randomUUID();
1:         UUID hostId2 = UUID.randomUUID();
1:         long now = System.currentTimeMillis();
1:         writeDescriptor(directory, new HintsDescriptor(hostId1, now));
1:         writeDescriptor(directory, new HintsDescriptor(hostId1, now+1));
1:         writeDescriptor(directory, new HintsDescriptor(hostId2, now+2));
1:         writeDescriptor(directory, new HintsDescriptor(hostId2, now+3));
1: 
1:         // load catalog containing two stores (one for each host)
1:         HintsCatalog catalog = HintsCatalog.load(directory, ImmutableMap.of());
1:         assertEquals(2, catalog.stores().count());
1:         assertTrue(catalog.hasFiles());
1: 
1:         // delete all hints from store 1
1:         assertTrue(catalog.get(hostId1).hasFiles());
1:         catalog.deleteAllHints(hostId1);
1:         assertFalse(catalog.get(hostId1).hasFiles());
1:         // stores are still keepts for each host, even after deleting hints
1:         assertEquals(2, catalog.stores().count());
1:         assertTrue(catalog.hasFiles());
1: 
1:         // delete all hints from all stores
1:         catalog.deleteAllHints();
1:         assertEquals(2, catalog.stores().count());
1:         assertFalse(catalog.hasFiles());
1:     }
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:7f6d039
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableMap;
/////////////////////////////////////////////////////////////////////////
1:         HintsCatalog catalog = HintsCatalog.load(directory, ImmutableMap.of());
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
0:         HintsCatalog catalog = HintsCatalog.load(directory, HintsService.EMPTY_PARAMS);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.file.Files;
1: import java.util.*;
1: 
1: import org.junit.Test;
1: 
1: import static junit.framework.Assert.*;
1: 
1: public class HintsCatalogTest
1: {
1:     @Test
1:     public void loadCompletenessAndOrderTest() throws IOException
1:     {
1:         File directory = Files.createTempDirectory(null).toFile();
1:         try
1:         {
1:             loadCompletenessAndOrderTest(directory);
1:         }
1:         finally
1:         {
1:             directory.deleteOnExit();
1:         }
1:     }
1: 
1:     public static void loadCompletenessAndOrderTest(File directory) throws IOException
1:     {
1:         UUID hostId1 = UUID.randomUUID();
1:         UUID hostId2 = UUID.randomUUID();
1: 
1:         long timestamp1 = System.currentTimeMillis();
1:         long timestamp2 = System.currentTimeMillis() + 1;
1:         long timestamp3 = System.currentTimeMillis() + 2;
1:         long timestamp4 = System.currentTimeMillis() + 3;
1: 
1:         HintsDescriptor descriptor1 = new HintsDescriptor(hostId1, timestamp1);
1:         HintsDescriptor descriptor2 = new HintsDescriptor(hostId2, timestamp3);
1:         HintsDescriptor descriptor3 = new HintsDescriptor(hostId2, timestamp2);
1:         HintsDescriptor descriptor4 = new HintsDescriptor(hostId1, timestamp4);
1: 
1:         writeDescriptor(directory, descriptor1);
1:         writeDescriptor(directory, descriptor2);
1:         writeDescriptor(directory, descriptor3);
1:         writeDescriptor(directory, descriptor4);
1: 
0:         HintsCatalog catalog = HintsCatalog.load(directory);
1:         assertEquals(2, catalog.stores().count());
1: 
1:         HintsStore store1 = catalog.get(hostId1);
1:         assertNotNull(store1);
1:         assertEquals(descriptor1, store1.poll());
1:         assertEquals(descriptor4, store1.poll());
1:         assertNull(store1.poll());
1: 
1:         HintsStore store2 = catalog.get(hostId2);
1:         assertNotNull(store2);
1:         assertEquals(descriptor3, store2.poll());
1:         assertEquals(descriptor2, store2.poll());
1:         assertNull(store2.poll());
1:     }
1: 
1:     @SuppressWarnings("EmptyTryBlock")
1:     private static void writeDescriptor(File directory, HintsDescriptor descriptor) throws IOException
1:     {
1:         try (HintsWriter ignored = HintsWriter.create(directory, descriptor))
1:         {
1:         }
1:     }
1: }
============================================================================