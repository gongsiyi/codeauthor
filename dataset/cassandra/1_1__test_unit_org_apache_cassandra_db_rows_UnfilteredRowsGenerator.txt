1:d40ac78: /*
1:d40ac78:  * Licensed to the Apache Software Foundation (ASF) under one
1:d40ac78:  * or more contributor license agreements.  See the NOTICE file
1:d40ac78:  * distributed with this work for additional information
1:d40ac78:  * regarding copyright ownership.  The ASF licenses this file
1:d40ac78:  * to you under the Apache License, Version 2.0 (the
1:d40ac78:  * "License"); you may not use this file except in compliance
1:d40ac78:  * with the License.  You may obtain a copy of the License at
1:d40ac78:  *
1:d40ac78:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d40ac78:  *
1:d40ac78:  * Unless required by applicable law or agreed to in writing, software
1:d40ac78:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d40ac78:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d40ac78:  * See the License for the specific language governing permissions and
1:d40ac78:  * limitations under the License.
1:d40ac78:  */
1:d40ac78: package org.apache.cassandra.db.rows;
1:d40ac78: 
1:d40ac78: import java.nio.ByteBuffer;
1:d40ac78: import java.util.*;
1:d40ac78: import java.util.function.Function;
1:d40ac78: import java.util.regex.Matcher;
1:d40ac78: import java.util.regex.Pattern;
1:d40ac78: 
1:d40ac78: import org.junit.Assert;
1:d40ac78: 
1:d40ac78: import org.apache.cassandra.config.CFMetaData;
1:d40ac78: import org.apache.cassandra.db.*;
1:d40ac78: import org.apache.cassandra.db.marshal.Int32Type;
1:d40ac78: import org.apache.cassandra.db.rows.Unfiltered.Kind;
1:d40ac78: import org.apache.cassandra.utils.btree.BTree;
1:d40ac78: 
1:d40ac78: public class UnfilteredRowsGenerator
1:d40ac78: {
1:d40ac78:     final boolean reversed;
1:d40ac78:     final Comparator<Clusterable> comparator;
1:d40ac78: 
1:d40ac78:     public UnfilteredRowsGenerator(Comparator<Clusterable> comparator, boolean reversed)
1:d40ac78:     {
1:d40ac78:         this.reversed = reversed;
1:d40ac78:         this.comparator = comparator;
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     String str(Clusterable curr)
1:d40ac78:     {
1:d40ac78:         if (curr == null)
1:d40ac78:             return "null";
1:d40ac78:         String val = Int32Type.instance.getString(curr.clustering().get(0));
1:d40ac78:         if (curr instanceof RangeTombstoneMarker)
1:d40ac78:         {
1:d40ac78:             RangeTombstoneMarker marker = (RangeTombstoneMarker) curr;
1:d40ac78:             if (marker.isClose(reversed))
1:d40ac78:                 val = "[" + marker.closeDeletionTime(reversed).markedForDeleteAt() + "]" + (marker.closeIsInclusive(reversed) ? "<=" : "<") + val;
1:d40ac78:             if (marker.isOpen(reversed))
1:d40ac78:                 val = val + (marker.openIsInclusive(reversed) ? "<=" : "<") + "[" + marker.openDeletionTime(reversed).markedForDeleteAt() + "]";
1:d40ac78:         }
1:d40ac78:         else if (curr instanceof Row)
1:d40ac78:         {
1:d40ac78:             Row row = (Row) curr;
1:d40ac78:             String delTime = "";
1:d40ac78:             if (!row.deletion().time().isLive())
1:d40ac78:                 delTime = "D" + row.deletion().time().markedForDeleteAt();
1:d40ac78:             val = val + "[" + row.primaryKeyLivenessInfo().timestamp() + delTime + "]";
1:d40ac78:         }
1:d40ac78:         return val;
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public void verifyValid(List<Unfiltered> list)
1:d40ac78:     {
1:d40ac78:         verifyValid(list, reversed);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     void verifyValid(List<Unfiltered> list, boolean reversed)
1:d40ac78:     {
1:d40ac78:         int reversedAsMultiplier = reversed ? -1 : 1;
1:d40ac78:         try {
1:d40ac78:             RangeTombstoneMarker prev = null;
1:d40ac78:             Unfiltered prevUnfiltered = null;
1:d40ac78:             for (Unfiltered unfiltered : list)
1:d40ac78:             {
1:d40ac78:                 Assert.assertTrue("Order violation prev " + str(prevUnfiltered) + " curr " + str(unfiltered),
1:d40ac78:                                   prevUnfiltered == null || comparator.compare(prevUnfiltered, unfiltered) * reversedAsMultiplier < 0);
1:d40ac78:                 prevUnfiltered = unfiltered;
1:d40ac78: 
1:d40ac78:                 if (unfiltered.kind() == Kind.RANGE_TOMBSTONE_MARKER)
1:d40ac78:                 {
1:d40ac78:                     RangeTombstoneMarker curr = (RangeTombstoneMarker) unfiltered;
1:d40ac78:                     if (prev != null)
1:d40ac78:                     {
1:d40ac78:                         if (curr.isClose(reversed))
1:d40ac78:                         {
1:d40ac78:                             Assert.assertTrue(str(unfiltered) + " follows another close marker " + str(prev), prev.isOpen(reversed));
1:d40ac78:                             Assert.assertEquals("Deletion time mismatch for open " + str(prev) + " and close " + str(unfiltered),
1:d40ac78:                                                 prev.openDeletionTime(reversed),
1:d40ac78:                                                 curr.closeDeletionTime(reversed));
1:d40ac78:                         }
1:d40ac78:                         else
1:d40ac78:                             Assert.assertFalse(str(curr) + " follows another open marker " + str(prev), prev.isOpen(reversed));
1:d40ac78:                     }
1:d40ac78: 
1:d40ac78:                     prev = curr;
1:d40ac78:                 }
1:d40ac78:             }
1:d40ac78:             Assert.assertFalse("Cannot end in open marker " + str(prev), prev != null && prev.isOpen(reversed));
1:d40ac78: 
1:d40ac78:         } catch (AssertionError e) {
1:d40ac78:             System.out.println(e);
1:d40ac78:             dumpList(list);
1:d40ac78:             throw e;
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public List<Unfiltered> generateSource(Random r, int items, int range, int del_range, Function<Integer, Integer> timeGenerator)
1:d40ac78:     {
1:d40ac78:         int[] positions = new int[items + 1];
1:d40ac78:         for (int i=0; i<items; ++i)
1:d40ac78:             positions[i] = r.nextInt(range);
1:d40ac78:         positions[items] = range;
1:d40ac78:         Arrays.sort(positions);
1:d40ac78: 
1:d40ac78:         List<Unfiltered> content = new ArrayList<>(items);
1:d40ac78:         int prev = -1;
1:d40ac78:         for (int i=0; i<items; ++i)
1:d40ac78:         {
1:d40ac78:             int pos = positions[i];
1:d40ac78:             int sz = positions[i + 1] - pos;
1:d40ac78:             if (sz == 0 && pos == prev)
1:d40ac78:                 // Filter out more than two of the same position.
1:d40ac78:                 continue;
1:d40ac78:             if (r.nextBoolean() || pos == prev)
1:d40ac78:             {
1:d40ac78:                 int span;
1:d40ac78:                 boolean includesStart;
1:d40ac78:                 boolean includesEnd;
1:d40ac78:                 if (pos > prev)
1:d40ac78:                 {
1:d40ac78:                     span = r.nextInt(sz + 1);
1:d40ac78:                     includesStart = span > 0 ? r.nextBoolean() : true;
1:d40ac78:                     includesEnd = span > 0 ? r.nextBoolean() : true;
1:d40ac78:                 }
1:d40ac78:                 else
1:d40ac78:                 {
1:d40ac78:                     span = 1 + r.nextInt(sz);
1:d40ac78:                     includesStart = false;
1:d40ac78:                     includesEnd = r.nextBoolean();
1:d40ac78:                 }
1:d40ac78:                 int deltime = r.nextInt(del_range);
1:d40ac78:                 DeletionTime dt = new DeletionTime(deltime, deltime);
1:d40ac78:                 content.add(new RangeTombstoneBoundMarker(boundFor(pos, true, includesStart), dt));
1:d40ac78:                 content.add(new RangeTombstoneBoundMarker(boundFor(pos + span, false, includesEnd), dt));
1:d40ac78:                 prev = pos + span - (includesEnd ? 0 : 1);
1:d40ac78:             }
1:d40ac78:             else
1:d40ac78:             {
1:d40ac78:                 content.add(emptyRowAt(pos, timeGenerator));
1:d40ac78:                 prev = pos;
1:d40ac78:             }
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         attachBoundaries(content);
1:d40ac78:         if (reversed)
1:d40ac78:         {
1:d40ac78:             Collections.reverse(content);
1:d40ac78:         }
1:d40ac78:         verifyValid(content);
1:d40ac78:         if (items <= 20)
1:d40ac78:             dumpList(content);
1:d40ac78:         return content;
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     /**
1:d40ac78:      * Constructs a list of unfiltereds with integer clustering according to the specification string.
1:d40ac78:      *
1:d40ac78:      * The string is a space-delimited sorted list that can contain:
1:d40ac78:      *  * open tombstone markers, e.g. xx<[yy] where xx is the clustering, yy is the deletion time, and "<" stands for
1:d40ac78:      *    non-inclusive (<= for inclusive).
1:d40ac78:      *  * close tombstone markers, e.g. [yy]<=xx. Adjacent close and open markers (e.g. [yy]<=xx xx<[zz]) are combined
1:d40ac78:      *    into boundary markers.
1:d40ac78:      *  * empty rows, e.g. xx or xx[yy] or xx[yyDzz] where xx is the clustering, yy is the live time and zz is deletion
1:d40ac78:      *    time.
1:d40ac78:      *
1:d40ac78:      * @param input Specification.
1:d40ac78:      * @param default_liveness Liveness to use for rows if not explicitly specified.
1:d40ac78:      * @return Parsed list.
1:d40ac78:      */
1:d40ac78:     public List<Unfiltered> parse(String input, int default_liveness)
1:d40ac78:     {
1:d40ac78:         String[] split = input.split(" ");
1:d40ac78:         Pattern open = Pattern.compile("(\\d+)<(=)?\\[(\\d+)\\]");
1:d40ac78:         Pattern close = Pattern.compile("\\[(\\d+)\\]<(=)?(\\d+)");
1:d40ac78:         Pattern row = Pattern.compile("(\\d+)(\\[(\\d+)(?:D(\\d+))?\\])?");
1:d40ac78:         List<Unfiltered> out = new ArrayList<>(split.length);
1:d40ac78:         for (String s : split)
1:d40ac78:         {
1:d40ac78:             Matcher m = open.matcher(s);
1:d40ac78:             if (m.matches())
1:d40ac78:             {
1:d40ac78:                 out.add(openMarker(Integer.parseInt(m.group(1)), Integer.parseInt(m.group(3)), m.group(2) != null));
1:d40ac78:                 continue;
1:d40ac78:             }
1:d40ac78:             m = close.matcher(s);
1:d40ac78:             if (m.matches())
1:d40ac78:             {
1:d40ac78:                 out.add(closeMarker(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(1)), m.group(2) != null));
1:d40ac78:                 continue;
1:d40ac78:             }
1:d40ac78:             m = row.matcher(s);
1:d40ac78:             if (m.matches())
1:d40ac78:             {
1:d40ac78:                 int live = m.group(3) != null ? Integer.parseInt(m.group(3)) : default_liveness;
1:d40ac78:                 int delTime = m.group(4) != null ? Integer.parseInt(m.group(4)) : -1;
1:d40ac78:                 out.add(emptyRowAt(Integer.parseInt(m.group(1)), live, delTime));
1:d40ac78:                 continue;
1:d40ac78:             }
1:d40ac78:             Assert.fail("Can't parse " + s);
1:d40ac78:         }
1:d40ac78:         attachBoundaries(out);
1:d40ac78:         return out;
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static Row emptyRowAt(int pos, Function<Integer, Integer> timeGenerator)
1:d40ac78:     {
1:d40ac78:         final Clustering clustering = clusteringFor(pos);
1:d40ac78:         final LivenessInfo live = LivenessInfo.create(timeGenerator.apply(pos), UnfilteredRowIteratorsMergeTest.nowInSec);
1:d40ac78:         return BTreeRow.noCellLiveRow(clustering, live);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static Row emptyRowAt(int pos, int time, int deletionTime)
1:d40ac78:     {
1:d40ac78:         final Clustering clustering = clusteringFor(pos);
1:d40ac78:         final LivenessInfo live = LivenessInfo.create(time, UnfilteredRowIteratorsMergeTest.nowInSec);
1:d40ac78:         final DeletionTime delTime = deletionTime == -1 ? DeletionTime.LIVE : new DeletionTime(deletionTime, deletionTime);
1:d40ac78:         return BTreeRow.create(clustering, live, Row.Deletion.regular(delTime), BTree.empty());
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static Clustering clusteringFor(int i)
1:d40ac78:     {
1:d40ac78:         return Clustering.make(Int32Type.instance.decompose(i));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static ClusteringBound boundFor(int pos, boolean start, boolean inclusive)
1:d40ac78:     {
1:d40ac78:         return ClusteringBound.create(ClusteringBound.boundKind(start, inclusive), new ByteBuffer[] {Int32Type.instance.decompose(pos)});
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static void attachBoundaries(List<Unfiltered> content)
1:d40ac78:     {
1:d40ac78:         int di = 0;
1:d40ac78:         RangeTombstoneMarker prev = null;
1:d40ac78:         for (int si = 0; si < content.size(); ++si)
1:d40ac78:         {
1:d40ac78:             Unfiltered currUnfiltered = content.get(si);
1:d40ac78:             RangeTombstoneMarker curr = currUnfiltered.kind() == Kind.RANGE_TOMBSTONE_MARKER ?
1:d40ac78:                                         (RangeTombstoneMarker) currUnfiltered :
1:d40ac78:                                         null;
1:d40ac78:             if (prev != null && curr != null && prev.isClose(false) && curr.isOpen(false) && prev.clustering().invert().equals(curr.clustering()))
1:d40ac78:             {
1:d40ac78:                 // Join. Prefer not to use merger to check its correctness.
1:d40ac78:                 ClusteringBound b = (ClusteringBound) prev.clustering();
1:d40ac78:                 ClusteringBoundary boundary = ClusteringBoundary.create(
1:d40ac78:                         b.isInclusive() ? ClusteringBound.Kind.INCL_END_EXCL_START_BOUNDARY : ClusteringBound.Kind.EXCL_END_INCL_START_BOUNDARY,
1:d40ac78:                         b.getRawValues());
1:d40ac78:                 prev = new RangeTombstoneBoundaryMarker(boundary, prev.closeDeletionTime(false), curr.openDeletionTime(false));
1:d40ac78:                 currUnfiltered = prev;
1:d40ac78:                 --di;
1:d40ac78:             }
1:d40ac78:             content.set(di++, currUnfiltered);
1:d40ac78:             prev = curr;
1:d40ac78:         }
1:d40ac78:         for (int pos = content.size() - 1; pos >= di; --pos)
1:d40ac78:             content.remove(pos);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static RangeTombstoneMarker openMarker(int pos, int delTime, boolean inclusive)
1:d40ac78:     {
1:d40ac78:         return marker(pos, delTime, true, inclusive);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static RangeTombstoneMarker closeMarker(int pos, int delTime, boolean inclusive)
1:d40ac78:     {
1:d40ac78:         return marker(pos, delTime, false, inclusive);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private static RangeTombstoneMarker marker(int pos, int delTime, boolean isStart, boolean inclusive)
1:d40ac78:     {
1:d40ac78:         return new RangeTombstoneBoundMarker(ClusteringBound.create(ClusteringBound.boundKind(isStart, inclusive),
1:d40ac78:                                                                     new ByteBuffer[] {clusteringFor(pos).get(0)}),
1:d40ac78:                                              new DeletionTime(delTime, delTime));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public static UnfilteredRowIterator source(Iterable<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey)
1:d40ac78:     {
1:d40ac78:         return source(content, metadata, partitionKey, DeletionTime.LIVE);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public static UnfilteredRowIterator source(Iterable<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey, DeletionTime delTime)
1:d40ac78:     {
1:d40ac78:         return new Source(content.iterator(), metadata, partitionKey, delTime, false);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     static class Source extends AbstractUnfilteredRowIterator implements UnfilteredRowIterator
1:d40ac78:     {
1:d40ac78:         Iterator<Unfiltered> content;
1:d40ac78: 
1:d40ac78:         protected Source(Iterator<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey, DeletionTime partitionLevelDeletion, boolean reversed)
1:d40ac78:         {
1:d40ac78:             super(metadata,
1:d40ac78:                   partitionKey,
1:d40ac78:                   partitionLevelDeletion,
1:d40ac78:                   metadata.partitionColumns(),
1:d40ac78:                   Rows.EMPTY_STATIC_ROW,
1:d40ac78:                   reversed,
1:d40ac78:                   EncodingStats.NO_STATS);
1:d40ac78:             this.content = content;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         protected Unfiltered computeNext()
1:d40ac78:         {
1:d40ac78:             return content.hasNext() ? content.next() : endOfData();
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public String str(List<Unfiltered> list)
1:d40ac78:     {
1:d40ac78:         StringBuilder builder = new StringBuilder();
1:d40ac78:         for (Unfiltered u : list)
1:d40ac78:         {
1:d40ac78:             builder.append(str(u));
1:d40ac78:             builder.append(' ');
1:d40ac78:         }
1:d40ac78:         return builder.toString();
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     public void dumpList(List<Unfiltered> list)
1:d40ac78:     {
1:d40ac78:         System.out.println(str(list));
1:d40ac78:     }
1:d40ac78: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: import java.util.function.Function;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.junit.Assert;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.rows.Unfiltered.Kind;
1: import org.apache.cassandra.utils.btree.BTree;
1: 
1: public class UnfilteredRowsGenerator
1: {
1:     final boolean reversed;
1:     final Comparator<Clusterable> comparator;
1: 
1:     public UnfilteredRowsGenerator(Comparator<Clusterable> comparator, boolean reversed)
1:     {
1:         this.reversed = reversed;
1:         this.comparator = comparator;
1:     }
1: 
1:     String str(Clusterable curr)
1:     {
1:         if (curr == null)
1:             return "null";
1:         String val = Int32Type.instance.getString(curr.clustering().get(0));
1:         if (curr instanceof RangeTombstoneMarker)
1:         {
1:             RangeTombstoneMarker marker = (RangeTombstoneMarker) curr;
1:             if (marker.isClose(reversed))
1:                 val = "[" + marker.closeDeletionTime(reversed).markedForDeleteAt() + "]" + (marker.closeIsInclusive(reversed) ? "<=" : "<") + val;
1:             if (marker.isOpen(reversed))
1:                 val = val + (marker.openIsInclusive(reversed) ? "<=" : "<") + "[" + marker.openDeletionTime(reversed).markedForDeleteAt() + "]";
1:         }
1:         else if (curr instanceof Row)
1:         {
1:             Row row = (Row) curr;
1:             String delTime = "";
1:             if (!row.deletion().time().isLive())
1:                 delTime = "D" + row.deletion().time().markedForDeleteAt();
1:             val = val + "[" + row.primaryKeyLivenessInfo().timestamp() + delTime + "]";
1:         }
1:         return val;
1:     }
1: 
1:     public void verifyValid(List<Unfiltered> list)
1:     {
1:         verifyValid(list, reversed);
1:     }
1: 
1:     void verifyValid(List<Unfiltered> list, boolean reversed)
1:     {
1:         int reversedAsMultiplier = reversed ? -1 : 1;
1:         try {
1:             RangeTombstoneMarker prev = null;
1:             Unfiltered prevUnfiltered = null;
1:             for (Unfiltered unfiltered : list)
1:             {
1:                 Assert.assertTrue("Order violation prev " + str(prevUnfiltered) + " curr " + str(unfiltered),
1:                                   prevUnfiltered == null || comparator.compare(prevUnfiltered, unfiltered) * reversedAsMultiplier < 0);
1:                 prevUnfiltered = unfiltered;
1: 
1:                 if (unfiltered.kind() == Kind.RANGE_TOMBSTONE_MARKER)
1:                 {
1:                     RangeTombstoneMarker curr = (RangeTombstoneMarker) unfiltered;
1:                     if (prev != null)
1:                     {
1:                         if (curr.isClose(reversed))
1:                         {
1:                             Assert.assertTrue(str(unfiltered) + " follows another close marker " + str(prev), prev.isOpen(reversed));
1:                             Assert.assertEquals("Deletion time mismatch for open " + str(prev) + " and close " + str(unfiltered),
1:                                                 prev.openDeletionTime(reversed),
1:                                                 curr.closeDeletionTime(reversed));
1:                         }
1:                         else
1:                             Assert.assertFalse(str(curr) + " follows another open marker " + str(prev), prev.isOpen(reversed));
1:                     }
1: 
1:                     prev = curr;
1:                 }
1:             }
1:             Assert.assertFalse("Cannot end in open marker " + str(prev), prev != null && prev.isOpen(reversed));
1: 
1:         } catch (AssertionError e) {
1:             System.out.println(e);
1:             dumpList(list);
1:             throw e;
1:         }
1:     }
1: 
1:     public List<Unfiltered> generateSource(Random r, int items, int range, int del_range, Function<Integer, Integer> timeGenerator)
1:     {
1:         int[] positions = new int[items + 1];
1:         for (int i=0; i<items; ++i)
1:             positions[i] = r.nextInt(range);
1:         positions[items] = range;
1:         Arrays.sort(positions);
1: 
1:         List<Unfiltered> content = new ArrayList<>(items);
1:         int prev = -1;
1:         for (int i=0; i<items; ++i)
1:         {
1:             int pos = positions[i];
1:             int sz = positions[i + 1] - pos;
1:             if (sz == 0 && pos == prev)
1:                 // Filter out more than two of the same position.
1:                 continue;
1:             if (r.nextBoolean() || pos == prev)
1:             {
1:                 int span;
1:                 boolean includesStart;
1:                 boolean includesEnd;
1:                 if (pos > prev)
1:                 {
1:                     span = r.nextInt(sz + 1);
1:                     includesStart = span > 0 ? r.nextBoolean() : true;
1:                     includesEnd = span > 0 ? r.nextBoolean() : true;
1:                 }
1:                 else
1:                 {
1:                     span = 1 + r.nextInt(sz);
1:                     includesStart = false;
1:                     includesEnd = r.nextBoolean();
1:                 }
1:                 int deltime = r.nextInt(del_range);
1:                 DeletionTime dt = new DeletionTime(deltime, deltime);
1:                 content.add(new RangeTombstoneBoundMarker(boundFor(pos, true, includesStart), dt));
1:                 content.add(new RangeTombstoneBoundMarker(boundFor(pos + span, false, includesEnd), dt));
1:                 prev = pos + span - (includesEnd ? 0 : 1);
1:             }
1:             else
1:             {
1:                 content.add(emptyRowAt(pos, timeGenerator));
1:                 prev = pos;
1:             }
1:         }
1: 
1:         attachBoundaries(content);
1:         if (reversed)
1:         {
1:             Collections.reverse(content);
1:         }
1:         verifyValid(content);
1:         if (items <= 20)
1:             dumpList(content);
1:         return content;
1:     }
1: 
1:     /**
1:      * Constructs a list of unfiltereds with integer clustering according to the specification string.
1:      *
1:      * The string is a space-delimited sorted list that can contain:
1:      *  * open tombstone markers, e.g. xx<[yy] where xx is the clustering, yy is the deletion time, and "<" stands for
1:      *    non-inclusive (<= for inclusive).
1:      *  * close tombstone markers, e.g. [yy]<=xx. Adjacent close and open markers (e.g. [yy]<=xx xx<[zz]) are combined
1:      *    into boundary markers.
1:      *  * empty rows, e.g. xx or xx[yy] or xx[yyDzz] where xx is the clustering, yy is the live time and zz is deletion
1:      *    time.
1:      *
1:      * @param input Specification.
1:      * @param default_liveness Liveness to use for rows if not explicitly specified.
1:      * @return Parsed list.
1:      */
1:     public List<Unfiltered> parse(String input, int default_liveness)
1:     {
1:         String[] split = input.split(" ");
1:         Pattern open = Pattern.compile("(\\d+)<(=)?\\[(\\d+)\\]");
1:         Pattern close = Pattern.compile("\\[(\\d+)\\]<(=)?(\\d+)");
1:         Pattern row = Pattern.compile("(\\d+)(\\[(\\d+)(?:D(\\d+))?\\])?");
1:         List<Unfiltered> out = new ArrayList<>(split.length);
1:         for (String s : split)
1:         {
1:             Matcher m = open.matcher(s);
1:             if (m.matches())
1:             {
1:                 out.add(openMarker(Integer.parseInt(m.group(1)), Integer.parseInt(m.group(3)), m.group(2) != null));
1:                 continue;
1:             }
1:             m = close.matcher(s);
1:             if (m.matches())
1:             {
1:                 out.add(closeMarker(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(1)), m.group(2) != null));
1:                 continue;
1:             }
1:             m = row.matcher(s);
1:             if (m.matches())
1:             {
1:                 int live = m.group(3) != null ? Integer.parseInt(m.group(3)) : default_liveness;
1:                 int delTime = m.group(4) != null ? Integer.parseInt(m.group(4)) : -1;
1:                 out.add(emptyRowAt(Integer.parseInt(m.group(1)), live, delTime));
1:                 continue;
1:             }
1:             Assert.fail("Can't parse " + s);
1:         }
1:         attachBoundaries(out);
1:         return out;
1:     }
1: 
1:     static Row emptyRowAt(int pos, Function<Integer, Integer> timeGenerator)
1:     {
1:         final Clustering clustering = clusteringFor(pos);
1:         final LivenessInfo live = LivenessInfo.create(timeGenerator.apply(pos), UnfilteredRowIteratorsMergeTest.nowInSec);
1:         return BTreeRow.noCellLiveRow(clustering, live);
1:     }
1: 
1:     static Row emptyRowAt(int pos, int time, int deletionTime)
1:     {
1:         final Clustering clustering = clusteringFor(pos);
1:         final LivenessInfo live = LivenessInfo.create(time, UnfilteredRowIteratorsMergeTest.nowInSec);
1:         final DeletionTime delTime = deletionTime == -1 ? DeletionTime.LIVE : new DeletionTime(deletionTime, deletionTime);
1:         return BTreeRow.create(clustering, live, Row.Deletion.regular(delTime), BTree.empty());
1:     }
1: 
1:     static Clustering clusteringFor(int i)
1:     {
1:         return Clustering.make(Int32Type.instance.decompose(i));
1:     }
1: 
1:     static ClusteringBound boundFor(int pos, boolean start, boolean inclusive)
1:     {
1:         return ClusteringBound.create(ClusteringBound.boundKind(start, inclusive), new ByteBuffer[] {Int32Type.instance.decompose(pos)});
1:     }
1: 
1:     static void attachBoundaries(List<Unfiltered> content)
1:     {
1:         int di = 0;
1:         RangeTombstoneMarker prev = null;
1:         for (int si = 0; si < content.size(); ++si)
1:         {
1:             Unfiltered currUnfiltered = content.get(si);
1:             RangeTombstoneMarker curr = currUnfiltered.kind() == Kind.RANGE_TOMBSTONE_MARKER ?
1:                                         (RangeTombstoneMarker) currUnfiltered :
1:                                         null;
1:             if (prev != null && curr != null && prev.isClose(false) && curr.isOpen(false) && prev.clustering().invert().equals(curr.clustering()))
1:             {
1:                 // Join. Prefer not to use merger to check its correctness.
1:                 ClusteringBound b = (ClusteringBound) prev.clustering();
1:                 ClusteringBoundary boundary = ClusteringBoundary.create(
1:                         b.isInclusive() ? ClusteringBound.Kind.INCL_END_EXCL_START_BOUNDARY : ClusteringBound.Kind.EXCL_END_INCL_START_BOUNDARY,
1:                         b.getRawValues());
1:                 prev = new RangeTombstoneBoundaryMarker(boundary, prev.closeDeletionTime(false), curr.openDeletionTime(false));
1:                 currUnfiltered = prev;
1:                 --di;
1:             }
1:             content.set(di++, currUnfiltered);
1:             prev = curr;
1:         }
1:         for (int pos = content.size() - 1; pos >= di; --pos)
1:             content.remove(pos);
1:     }
1: 
1:     static RangeTombstoneMarker openMarker(int pos, int delTime, boolean inclusive)
1:     {
1:         return marker(pos, delTime, true, inclusive);
1:     }
1: 
1:     static RangeTombstoneMarker closeMarker(int pos, int delTime, boolean inclusive)
1:     {
1:         return marker(pos, delTime, false, inclusive);
1:     }
1: 
1:     private static RangeTombstoneMarker marker(int pos, int delTime, boolean isStart, boolean inclusive)
1:     {
1:         return new RangeTombstoneBoundMarker(ClusteringBound.create(ClusteringBound.boundKind(isStart, inclusive),
1:                                                                     new ByteBuffer[] {clusteringFor(pos).get(0)}),
1:                                              new DeletionTime(delTime, delTime));
1:     }
1: 
1:     public static UnfilteredRowIterator source(Iterable<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey)
1:     {
1:         return source(content, metadata, partitionKey, DeletionTime.LIVE);
1:     }
1: 
1:     public static UnfilteredRowIterator source(Iterable<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey, DeletionTime delTime)
1:     {
1:         return new Source(content.iterator(), metadata, partitionKey, delTime, false);
1:     }
1: 
1:     static class Source extends AbstractUnfilteredRowIterator implements UnfilteredRowIterator
1:     {
1:         Iterator<Unfiltered> content;
1: 
1:         protected Source(Iterator<Unfiltered> content, CFMetaData metadata, DecoratedKey partitionKey, DeletionTime partitionLevelDeletion, boolean reversed)
1:         {
1:             super(metadata,
1:                   partitionKey,
1:                   partitionLevelDeletion,
1:                   metadata.partitionColumns(),
1:                   Rows.EMPTY_STATIC_ROW,
1:                   reversed,
1:                   EncodingStats.NO_STATS);
1:             this.content = content;
1:         }
1: 
1:         @Override
1:         protected Unfiltered computeNext()
1:         {
1:             return content.hasNext() ? content.next() : endOfData();
1:         }
1:     }
1: 
1:     public String str(List<Unfiltered> list)
1:     {
1:         StringBuilder builder = new StringBuilder();
1:         for (Unfiltered u : list)
1:         {
1:             builder.append(str(u));
1:             builder.append(' ');
1:         }
1:         return builder.toString();
1:     }
1: 
1:     public void dumpList(List<Unfiltered> list)
1:     {
1:         System.out.println(str(list));
1:     }
1: }
============================================================================