1:b7ae07e: /*
1:b7ae07e:  * Licensed to the Apache Software Foundation (ASF) under one
1:b7ae07e:  * or more contributor license agreements.  See the NOTICE file
1:b7ae07e:  * distributed with this work for additional information
1:b7ae07e:  * regarding copyright ownership.  The ASF licenses this file
1:b7ae07e:  * to you under the Apache License, Version 2.0 (the
1:b7ae07e:  * "License"); you may not use this file except in compliance
1:b7ae07e:  * with the License.  You may obtain a copy of the License at
1:b7ae07e:  *
1:b7ae07e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b7ae07e:  *
1:b7ae07e:  * Unless required by applicable law or agreed to in writing, software
1:b7ae07e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b7ae07e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7ae07e:  * See the License for the specific language governing permissions and
1:b7ae07e:  * limitations under the License.
1:b7ae07e:  */
5:b7ae07e: 
1:b7ae07e: package org.apache.cassandra.db;
1:b7ae07e: 
1:b7ae07e: import java.io.BufferedReader;
1:b7ae07e: import java.io.File;
1:b7ae07e: import java.io.FileReader;
1:b7ae07e: import java.io.FileWriter;
1:b7ae07e: import java.io.IOException;
1:b7ae07e: import java.io.PrintWriter;
1:b7ae07e: import java.nio.file.Files;
1:b7ae07e: import java.nio.file.Paths;
1:b7ae07e: 
1:b7ae07e: import com.google.common.annotations.VisibleForTesting;
1:b7ae07e: import org.slf4j.Logger;
1:b7ae07e: import org.slf4j.LoggerFactory;
1:b7ae07e: 
1:b7ae07e: import org.apache.cassandra.config.DatabaseDescriptor;
1:b7ae07e: import org.apache.cassandra.io.util.FileUtils;
1:b7ae07e: 
1:b7ae07e: 
1:b7ae07e: public class WindowsFailedSnapshotTracker
4:b7ae07e: {
1:b7ae07e:     private static final Logger logger = LoggerFactory.getLogger(WindowsFailedSnapshotTracker.class);
1:b7ae07e:     private static PrintWriter _failedSnapshotFile;
1:b7ae07e: 
1:b7ae07e:     @VisibleForTesting
1:b7ae07e:     // Need to handle null for unit tests
1:b7ae07e:     public static final String TODELETEFILE = System.getenv("CASSANDRA_HOME") == null
1:b7ae07e:                  ? ".toDelete"
1:b7ae07e:                  : System.getenv("CASSANDRA_HOME") + File.separator + ".toDelete";
1:b7ae07e: 
1:b7ae07e:     public static void deleteOldSnapshots()
1:b7ae07e:     {
1:b7ae07e:         if (new File(TODELETEFILE).exists())
1:b7ae07e:         {
1:b7ae07e:             try
1:b7ae07e:             {
1:127f7c5:                 try (BufferedReader reader = new BufferedReader(new FileReader(TODELETEFILE)))
1:b7ae07e:                 {
1:127f7c5:                     String snapshotDirectory;
1:127f7c5:                     while ((snapshotDirectory = reader.readLine()) != null)
1:e777301:                     {
1:127f7c5:                         File f = new File(snapshotDirectory);
1:e777301: 
1:127f7c5:                         // Skip folders that aren't a subset of temp or a data folder. We don't want people to accidentally
1:127f7c5:                         // delete something important by virtue of adding something invalid to the .toDelete file.
1:127f7c5:                         boolean validFolder = FileUtils.isSubDirectory(new File(System.getenv("TEMP")), f);
1:127f7c5:                         for (String s : DatabaseDescriptor.getAllDataFileLocations())
1:127f7c5:                             validFolder |= FileUtils.isSubDirectory(new File(s), f);
1:127f7c5: 
1:127f7c5:                         if (!validFolder)
1:127f7c5:                         {
1:127f7c5:                             logger.warn("Skipping invalid directory found in .toDelete: {}. Only %TEMP% or data file subdirectories are valid.", f);
1:127f7c5:                             continue;
1:127f7c5:                         }
1:127f7c5: 
1:127f7c5:                         // Could be a non-existent directory if deletion worked on previous JVM shutdown.
1:127f7c5:                         if (f.exists())
1:127f7c5:                         {
1:127f7c5:                             logger.warn("Discovered obsolete snapshot. Deleting directory [{}]", snapshotDirectory);
1:127f7c5:                             FileUtils.deleteRecursive(new File(snapshotDirectory));
1:127f7c5:                         }
1:e777301:                     }
1:e777301:                 }
1:e777301: 
1:b7ae07e:                 // Only delete the old .toDelete file if we succeed in deleting all our known bad snapshots.
1:b7ae07e:                 Files.delete(Paths.get(TODELETEFILE));
4:b7ae07e:             }
1:b7ae07e:             catch (IOException e)
1:e777301:             {
1:f147ca9:                 logger.warn("Failed to open {}. Obsolete snapshots from previous runs will not be deleted.", TODELETEFILE, e);
1:b7ae07e:             }
1:b7ae07e:         }
1:b7ae07e: 
1:b7ae07e:         try
1:b7ae07e:         {
1:b7ae07e:             _failedSnapshotFile = new PrintWriter(new FileWriter(TODELETEFILE, true));
1:b7ae07e:         }
1:b7ae07e:         catch (IOException e)
1:b7ae07e:         {
1:b7ae07e:             throw new RuntimeException(String.format("Failed to create failed snapshot tracking file [%s]. Aborting", TODELETEFILE));
1:b7ae07e:         }
1:b7ae07e:     }
1:b7ae07e: 
1:b7ae07e:     public static synchronized void handleFailedSnapshot(File dir)
1:b7ae07e:     {
1:8ebd590:         assert _failedSnapshotFile != null : "_failedSnapshotFile not initialized within WindowsFailedSnapshotTracker";
1:b7ae07e:         FileUtils.deleteRecursiveOnExit(dir);
1:b7ae07e:         _failedSnapshotFile.println(dir.toString());
1:b7ae07e:         _failedSnapshotFile.flush();
1:b7ae07e:     }
1:b7ae07e: 
1:b7ae07e:     @VisibleForTesting
1:b7ae07e:     public static void resetForTests()
1:b7ae07e:     {
1:b7ae07e:         _failedSnapshotFile.close();
1:b7ae07e:     }
1:b7ae07e: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f147ca9
/////////////////////////////////////////////////////////////////////////
1:                 logger.warn("Failed to open {}. Obsolete snapshots from previous runs will not be deleted.", TODELETEFILE, e);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
1:                 try (BufferedReader reader = new BufferedReader(new FileReader(TODELETEFILE)))
1:                     String snapshotDirectory;
1:                     while ((snapshotDirectory = reader.readLine()) != null)
1:                         File f = new File(snapshotDirectory);
1:                         // Skip folders that aren't a subset of temp or a data folder. We don't want people to accidentally
1:                         // delete something important by virtue of adding something invalid to the .toDelete file.
1:                         boolean validFolder = FileUtils.isSubDirectory(new File(System.getenv("TEMP")), f);
1:                         for (String s : DatabaseDescriptor.getAllDataFileLocations())
1:                             validFolder |= FileUtils.isSubDirectory(new File(s), f);
1: 
1:                         if (!validFolder)
1:                         {
1:                             logger.warn("Skipping invalid directory found in .toDelete: {}. Only %TEMP% or data file subdirectories are valid.", f);
1:                             continue;
1:                         }
1: 
1:                         // Could be a non-existent directory if deletion worked on previous JVM shutdown.
1:                         if (f.exists())
1:                         {
1:                             logger.warn("Discovered obsolete snapshot. Deleting directory [{}]", snapshotDirectory);
1:                             FileUtils.deleteRecursive(new File(snapshotDirectory));
1:                         }
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:                 try (BufferedReader reader = new BufferedReader(new FileReader(TODELETEFILE)))
0:                     String snapshotDirectory;
0:                     while ((snapshotDirectory = reader.readLine()) != null)
0:                         File f = new File(snapshotDirectory);
0:                         // Skip folders that aren't a subset of temp or a data folder. We don't want people to accidentally
0:                         // delete something important by virtue of adding something invalid to the .toDelete file.
0:                         boolean validFolder = FileUtils.isSubDirectory(new File(System.getenv("TEMP")), f);
0:                         for (String s : DatabaseDescriptor.getAllDataFileLocations())
0:                             validFolder |= FileUtils.isSubDirectory(new File(s), f);
1: 
0:                         if (!validFolder)
1:                         {
0:                             logger.warn("Skipping invalid directory found in .toDelete: {}. Only %TEMP% or data file subdirectories are valid.", f);
0:                             continue;
1:                         }
1: 
0:                         // Could be a non-existent directory if deletion worked on previous JVM shutdown.
0:                         if (f.exists())
1:                         {
0:                             logger.warn("Discovered obsolete snapshot. Deleting directory [{}]", snapshotDirectory);
0:                             FileUtils.deleteRecursive(new File(snapshotDirectory));
1:                         }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:8ebd590
/////////////////////////////////////////////////////////////////////////
1:         assert _failedSnapshotFile != null : "_failedSnapshotFile not initialized within WindowsFailedSnapshotTracker";
commit:b7ae07e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileReader;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.nio.file.Files;
1: import java.nio.file.Paths;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: 
1: public class WindowsFailedSnapshotTracker
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(WindowsFailedSnapshotTracker.class);
1:     private static PrintWriter _failedSnapshotFile;
1: 
1:     @VisibleForTesting
1:     // Need to handle null for unit tests
1:     public static final String TODELETEFILE = System.getenv("CASSANDRA_HOME") == null
1:                  ? ".toDelete"
1:                  : System.getenv("CASSANDRA_HOME") + File.separator + ".toDelete";
1: 
1:     public static void deleteOldSnapshots()
1:     {
1:         if (new File(TODELETEFILE).exists())
1:         {
1:             try
1:             {
0:                 BufferedReader reader = new BufferedReader(new FileReader(TODELETEFILE));
0:                 String snapshotDirectory;
0:                 while ((snapshotDirectory = reader.readLine()) != null)
1:                 {
0:                     File f = new File(snapshotDirectory);
1: 
0:                     // Skip folders that aren't a subset of temp or a data folder. We don't want people to accidentally
0:                     // delete something important by virtue of adding something invalid to the .toDelete file.
0:                     boolean validFolder = FileUtils.isSubDirectory(new File(System.getenv("TEMP")), f);
0:                     for (String s : DatabaseDescriptor.getAllDataFileLocations())
0:                         validFolder |= FileUtils.isSubDirectory(new File(s), f);
1: 
0:                     if (!validFolder)
1:                     {
0:                         logger.warn("Skipping invalid directory found in .toDelete: {}. Only %TEMP% or data file subdirectories are valid.", f);
0:                         continue;
1:                     }
1: 
0:                     // Could be a non-existent directory if deletion worked on previous JVM shutdown.
0:                     if (f.exists())
1:                     {
0:                         logger.warn("Discovered obsolete snapshot. Deleting directory [{}]", snapshotDirectory);
0:                         FileUtils.deleteRecursive(new File(snapshotDirectory));
1:                     }
1:                 }
0:                 reader.close();
1: 
1:                 // Only delete the old .toDelete file if we succeed in deleting all our known bad snapshots.
1:                 Files.delete(Paths.get(TODELETEFILE));
1:             }
1:             catch (IOException e)
1:             {
0:                 logger.warn("Failed to open {}. Obsolete snapshots from previous runs will not be deleted.", TODELETEFILE);
0:                 logger.warn("Exception: " + e);
1:             }
1:         }
1: 
1:         try
1:         {
1:             _failedSnapshotFile = new PrintWriter(new FileWriter(TODELETEFILE, true));
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(String.format("Failed to create failed snapshot tracking file [%s]. Aborting", TODELETEFILE));
1:         }
1:     }
1: 
1:     public static synchronized void handleFailedSnapshot(File dir)
1:     {
0:         assert(_failedSnapshotFile != null);
1:         FileUtils.deleteRecursiveOnExit(dir);
1:         _failedSnapshotFile.println(dir.toString());
1:         _failedSnapshotFile.flush();
1:     }
1: 
1:     @VisibleForTesting
1:     public static void resetForTests()
1:     {
1:         _failedSnapshotFile.close();
1:     }
1: }
============================================================================