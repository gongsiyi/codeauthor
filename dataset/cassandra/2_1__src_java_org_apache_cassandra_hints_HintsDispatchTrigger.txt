1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.util.concurrent.atomic.AtomicBoolean;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.gms.ApplicationState;
1:96d41f0: import org.apache.cassandra.gms.Gossiper;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.utils.FBUtilities.getBroadcastAddress;
1:96d41f0: 
1:96d41f0: /**
1:96d41f0:  * A simple dispatch trigger that's being run every 10 seconds.
1:96d41f0:  *
1:96d41f0:  * Goes through all hint stores and schedules for dispatch all the hints for hosts that are:
1:96d41f0:  * 1. Not currently scheduled for dispatch, and
1:96d41f0:  * 2. Either have some hint files, or an active hint writer, and
1:96d41f0:  * 3. Are live, and
1:96d41f0:  * 4. Have matching schema versions
1:96d41f0:  *
1:96d41f0:  * What does triggering a hints store for dispatch mean?
1:96d41f0:  * - If there are existing hint files, it means submitting them for dispatch;
1:96d41f0:  * - If there is an active writer, closing it, for the next run to pick it up.
1:96d41f0:  */
1:96d41f0: final class HintsDispatchTrigger implements Runnable
1:96d41f0: {
1:96d41f0:     private final HintsCatalog catalog;
1:96d41f0:     private final HintsWriteExecutor writeExecutor;
1:96d41f0:     private final HintsDispatchExecutor dispatchExecutor;
1:96d41f0:     private final AtomicBoolean isPaused;
1:96d41f0: 
1:96d41f0:     HintsDispatchTrigger(HintsCatalog catalog,
1:96d41f0:                          HintsWriteExecutor writeExecutor,
1:96d41f0:                          HintsDispatchExecutor dispatchExecutor,
1:96d41f0:                          AtomicBoolean isPaused)
1:96d41f0:     {
1:96d41f0:         this.catalog = catalog;
1:96d41f0:         this.writeExecutor = writeExecutor;
1:96d41f0:         this.dispatchExecutor = dispatchExecutor;
1:96d41f0:         this.isPaused = isPaused;
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public void run()
1:96d41f0:     {
1:96d41f0:         if (isPaused.get())
1:96d41f0:             return;
1:96d41f0: 
1:96d41f0:         catalog.stores()
1:96d41f0:                .filter(store -> !isScheduled(store))
1:96d41f0:                .filter(HintsStore::isLive)
1:96d41f0:                .filter(store -> store.isWriting() || store.hasFiles())
1:96d41f0:                .filter(store -> Gossiper.instance.valuesEqual(getBroadcastAddress(), store.address(), ApplicationState.SCHEMA))
1:96d41f0:                .forEach(this::schedule);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void schedule(HintsStore store)
1:96d41f0:     {
1:96d41f0:         if (store.hasFiles())
1:96d41f0:             dispatchExecutor.dispatch(store);
1:96d41f0: 
1:96d41f0:         if (store.isWriting())
1:96d41f0:             writeExecutor.closeWriter(store);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private boolean isScheduled(HintsStore store)
1:96d41f0:     {
1:96d41f0:         return dispatchExecutor.isScheduled(store);
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.cassandra.gms.ApplicationState;
0: import org.apache.cassandra.gms.FailureDetector;
1: import org.apache.cassandra.gms.Gossiper;
1: 
1: import static org.apache.cassandra.utils.FBUtilities.getBroadcastAddress;
1: 
1: /**
1:  * A simple dispatch trigger that's being run every 10 seconds.
1:  *
1:  * Goes through all hint stores and schedules for dispatch all the hints for hosts that are:
1:  * 1. Not currently scheduled for dispatch, and
1:  * 2. Either have some hint files, or an active hint writer, and
1:  * 3. Are live, and
1:  * 4. Have matching schema versions
1:  *
1:  * What does triggering a hints store for dispatch mean?
1:  * - If there are existing hint files, it means submitting them for dispatch;
1:  * - If there is an active writer, closing it, for the next run to pick it up.
1:  */
1: final class HintsDispatchTrigger implements Runnable
1: {
1:     private final HintsCatalog catalog;
1:     private final HintsWriteExecutor writeExecutor;
1:     private final HintsDispatchExecutor dispatchExecutor;
1:     private final AtomicBoolean isPaused;
1: 
1:     HintsDispatchTrigger(HintsCatalog catalog,
1:                          HintsWriteExecutor writeExecutor,
1:                          HintsDispatchExecutor dispatchExecutor,
1:                          AtomicBoolean isPaused)
1:     {
1:         this.catalog = catalog;
1:         this.writeExecutor = writeExecutor;
1:         this.dispatchExecutor = dispatchExecutor;
1:         this.isPaused = isPaused;
1:     }
1: 
1:     public void run()
1:     {
1:         if (isPaused.get())
1:             return;
1: 
1:         catalog.stores()
1:                .filter(store -> !isScheduled(store))
1:                .filter(HintsStore::isLive)
1:                .filter(store -> store.isWriting() || store.hasFiles())
1:                .filter(store -> Gossiper.instance.valuesEqual(getBroadcastAddress(), store.address(), ApplicationState.SCHEMA))
1:                .forEach(this::schedule);
1:     }
1: 
1:     private void schedule(HintsStore store)
1:     {
1:         if (store.hasFiles())
1:             dispatchExecutor.dispatch(store);
1: 
1:         if (store.isWriting())
1:             writeExecutor.closeWriter(store);
1:     }
1: 
1:     private boolean isScheduled(HintsStore store)
1:     {
1:         return dispatchExecutor.isScheduled(store);
1:     }
1: }
============================================================================