1:680e9bd: /*
1:680e9bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:680e9bd:  * or more contributor license agreements.  See the NOTICE file
1:680e9bd:  * distributed with this work for additional information
1:680e9bd:  * regarding copyright ownership.  The ASF licenses this file
1:680e9bd:  * to you under the Apache License, Version 2.0 (the
1:680e9bd:  * "License"); you may not use this file except in compliance
1:680e9bd:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:680e9bd:  */
1:07cf56f: package org.apache.cassandra.service;
6:dc9992a: 
1:dc9992a: import org.slf4j.Logger;
1:dc9992a: import org.slf4j.LoggerFactory;
1:dc9992a: 
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:b867050: import org.apache.cassandra.utils.concurrent.Accumulator;
1:dc9992a: 
1:a991b64: public abstract class ResponseResolver
6:dc9992a: {
1:a991b64:     protected static final Logger logger = LoggerFactory.getLogger(ResponseResolver.class);
1:dc9992a: 
1:a991b64:     protected final Keyspace keyspace;
1:a991b64:     protected final ReadCommand command;
1:a991b64:     protected final ConsistencyLevel consistency;
1:a991b64: 
1:b867050:     // Accumulator gives us non-blocking thread-safety with optimal algorithmic constraints
1:a991b64:     protected final Accumulator<MessageIn<ReadResponse>> responses;
1:dc9992a: 
1:a991b64:     public ResponseResolver(Keyspace keyspace, ReadCommand command, ConsistencyLevel consistency, int maxResponseCount)
1:dc9992a:     {
1:a991b64:         this.keyspace = keyspace;
1:a991b64:         this.command = command;
1:a991b64:         this.consistency = consistency;
1:a991b64:         this.responses = new Accumulator<>(maxResponseCount);
6:dc9992a:     }
1:388c690: 
1:a991b64:     public abstract PartitionIterator getData();
1:a991b64:     public abstract PartitionIterator resolve() throws DigestMismatchException;
1:a991b64: 
1:a991b64:     public abstract boolean isDataPresent();
1:a991b64: 
1:a06be23:     public void preprocess(MessageIn<ReadResponse> message)
1:388c690:     {
1:a991b64:         responses.add(message);
1:388c690:     }
1:dc9992a: 
1:a06be23:     public Iterable<MessageIn<ReadResponse>> getMessages()
1:dc9992a:     {
1:a991b64:         return responses;
1:dc9992a:     }
1:dc9992a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.partitions.*;
1: public abstract class ResponseResolver
1:     protected static final Logger logger = LoggerFactory.getLogger(ResponseResolver.class);
1:     protected final Keyspace keyspace;
1:     protected final ReadCommand command;
1:     protected final ConsistencyLevel consistency;
1: 
1:     protected final Accumulator<MessageIn<ReadResponse>> responses;
1:     public ResponseResolver(Keyspace keyspace, ReadCommand command, ConsistencyLevel consistency, int maxResponseCount)
1:         this.keyspace = keyspace;
1:         this.command = command;
1:         this.consistency = consistency;
1:         this.responses = new Accumulator<>(maxResponseCount);
1:     public abstract PartitionIterator getData();
1:     public abstract PartitionIterator resolve() throws DigestMismatchException;
1: 
1:     public abstract boolean isDataPresent();
1: 
1:         responses.add(message);
1:         return responses;
commit:353309f
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     protected static final Logger logger = LoggerFactory.getLogger(AbstractRowResolver.class);
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.service;
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:b867050
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.concurrent.Accumulator;
1:     // Accumulator gives us non-blocking thread-safety with optimal algorithmic constraints
0:     protected final Accumulator<MessageIn<ReadResponse>> replies;
0:     public AbstractRowResolver(ByteBuffer key, String keyspaceName, int maxResponseCount)
0:         this.replies = new Accumulator<>(maxResponseCount);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:cf3f5b6
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     protected final List<MessageIn<ReadResponse>> replies = Collections.synchronizedList(new ArrayList<MessageIn<ReadResponse>>());
commit:dbf3e1c
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0:     // synchronizedList gives us thread-safety without the overhead of guaranteeing uniqueness like a Set would
0:     protected final Collection<MessageIn<ReadResponse>> replies = Collections.synchronizedList(new ArrayList<MessageIn<ReadResponse>>());
commit:74e96b4
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
0: import java.util.concurrent.ConcurrentLinkedQueue;
/////////////////////////////////////////////////////////////////////////
0:     // CLQ gives us thread-safety without the overhead of guaranteeing uniqueness like a Set would
0:     protected final Collection<MessageIn<ReadResponse>> replies = new ConcurrentLinkedQueue<>();
commit:5577ff6
/////////////////////////////////////////////////////////////////////////
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.Set;
0: import org.cliffc.high_scale_lib.NonBlockingHashSet;
0: public abstract class AbstractRowResolver implements IResponseResolver<ReadResponse, Row>
0:     protected final Set<MessageIn<ReadResponse>> replies = new NonBlockingHashSet<MessageIn<ReadResponse>>();
/////////////////////////////////////////////////////////////////////////
1:     public void preprocess(MessageIn<ReadResponse> message)
0:         replies.add(message);
0:         MessageIn<ReadResponse> message = MessageIn.create(FBUtilities.getBroadcastAddress(),
0:                                                            result,
0:                                                            Collections.<String, byte[]>emptyMap(),
0:                                                            MessagingService.Verb.INTERNAL_RESPONSE,
0:                                                            MessagingService.current_version);
0:         replies.add(message);
1:     public Iterable<MessageIn<ReadResponse>> getMessages()
0:         return replies;
commit:021ec71
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0:     private static final MessageIn FAKE_MESSAGE = new MessageIn(FBUtilities.getBroadcastAddress(), MessagingService.Verb.INTERNAL_RESPONSE, ArrayUtils.EMPTY_BYTE_ARRAY, -1);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     private static final MessageIn FAKE_MESSAGE = new MessageIn(FBUtilities.getBroadcastAddress(), StorageService.Verb.INTERNAL_RESPONSE, ArrayUtils.EMPTY_BYTE_ARRAY, -1);
0:     protected final ConcurrentMap<MessageIn, ReadResponse> replies = new NonBlockingHashMap<MessageIn, ReadResponse>();
/////////////////////////////////////////////////////////////////////////
0:     public void preprocess(MessageIn message)
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<MessageIn> getMessages()
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
0:     protected final DecoratedKey key;
commit:a19f7f1
/////////////////////////////////////////////////////////////////////////
0:     protected final DecoratedKey<?> key;
commit:388c690
/////////////////////////////////////////////////////////////////////////
1: 
0:     public int getMaxLiveColumns()
1:     {
0:         throw new UnsupportedOperationException();
1:     }
commit:b111610
commit:5e6539a
/////////////////////////////////////////////////////////////////////////
commit:fad6615
commit:489cafe
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.service;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.DataInputStream;
0: import java.io.IOError;
0: import java.io.IOException;
0: import java.nio.ByteBuffer;
0: import java.util.concurrent.ConcurrentMap;
1: 
0: import org.apache.commons.lang.ArrayUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.ReadResponse;
0: import org.apache.cassandra.db.Row;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.cliffc.high_scale_lib.NonBlockingHashMap;
1: 
0: public abstract class AbstractRowResolver implements IResponseResolver<Row>
1: {
0:     protected static Logger logger = LoggerFactory.getLogger(AbstractRowResolver.class);
1: 
0:     private static final Message FAKE_MESSAGE = new Message(FBUtilities.getLocalAddress(), StorageService.Verb.INTERNAL_RESPONSE, ArrayUtils.EMPTY_BYTE_ARRAY);
1: 
0:     protected final String table;
0:     protected final ConcurrentMap<Message, ReadResponse> replies = new NonBlockingHashMap<Message, ReadResponse>();
0:     protected final DecoratedKey key;
1: 
0:     public AbstractRowResolver(ByteBuffer key, String table)
1:     {
0:         this.key = StorageService.getPartitioner().decorateKey(key);
0:         this.table = table;
1:     }
1: 
0:     public void preprocess(Message message)
1:     {
0:         byte[] body = message.getMessageBody();
0:         ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
0:         try
1:         {
0:             ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
0:             if (logger.isDebugEnabled())
0:                 logger.debug("Preprocessed {} response", result.isDigestQuery() ? "digest" : "data");
0:             replies.put(message, result);
1:         }
0:         catch (IOException e)
1:         {
0:             throw new IOError(e);
1:         }
1:     }
1: 
0:     /** hack so local reads don't force de/serialization of an extra real Message */
0:     public void injectPreProcessed(ReadResponse result)
1:     {
0:         assert replies.get(FAKE_MESSAGE) == null; // should only be one local reply
0:         replies.put(FAKE_MESSAGE, result);
1:     }
1: 
0:     public Iterable<Message> getMessages()
1:     {
0:         return replies.keySet();
1:     }
1: 
0:     public int getMessageCount()
1:     {
0:         return replies.size();
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:01370bb
/////////////////////////////////////////////////////////////////////////
0:     public void preprocess(MessageIn<ReadResponse> message)
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:     protected final String keyspaceName;
0:     public AbstractRowResolver(ByteBuffer key, String keyspaceName)
0:         this.keyspaceName = keyspaceName;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:c25a6a1
/////////////////////////////////////////////////////////////////////////
0:     public boolean preprocess(MessageIn<ReadResponse> message)
0:         MessageIn<ReadResponse> toReplace = null;
0:         for (MessageIn<ReadResponse> reply : replies)
0:         {
0:             if (reply.from.equals(message.from))
0:             {
0:                 if (!message.payload.isDigestQuery())
0:                     toReplace = reply;
0:                 break;
0:             }
0:         }
0:         // replace old message
0:         if (toReplace != null)
0:         {
0:             replies.remove(toReplace);
0:             replies.add(message);
0:             return false;
0:         }
0:         return true;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         FastByteArrayInputStream bufIn = new FastByteArrayInputStream(body);
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:     private static final Message FAKE_MESSAGE = new Message(FBUtilities.getBroadcastAddress(), StorageService.Verb.INTERNAL_RESPONSE, ArrayUtils.EMPTY_BYTE_ARRAY, -1);
author:Eric Evans
-------------------------------------------------------------------------------
commit:680e9bd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================