1:c08aaab: /*
1:c08aaab:  * Licensed to the Apache Software Foundation (ASF) under one
1:c08aaab:  * or more contributor license agreements.  See the NOTICE file
1:c08aaab:  * distributed with this work for additional information
1:c08aaab:  * regarding copyright ownership.  The ASF licenses this file
1:c08aaab:  * to you under the Apache License, Version 2.0 (the
1:c08aaab:  * "License"); you may not use this file except in compliance
1:c08aaab:  * with the License.  You may obtain a copy of the License at
1:c08aaab:  *
1:c08aaab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c08aaab:  *
1:c08aaab:  * Unless required by applicable law or agreed to in writing, software
1:c08aaab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c08aaab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c08aaab:  * See the License for the specific language governing permissions and
1:c08aaab:  * limitations under the License.
1:c08aaab:  */
1:c08aaab: package org.apache.cassandra.cql3.functions;
1:c08aaab: 
1:c08aaab: import java.nio.ByteBuffer;
1:c08aaab: import java.util.Arrays;
1:c08aaab: import java.util.List;
1:c08aaab: 
1:c08aaab: import org.junit.Test;
1:c08aaab: 
1:c08aaab: import org.apache.cassandra.db.marshal.LongType;
1:c08aaab: import org.apache.cassandra.db.marshal.SimpleDateType;
1:c08aaab: import org.apache.cassandra.db.marshal.TimeUUIDType;
1:c08aaab: import org.apache.cassandra.db.marshal.TimestampType;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:c08aaab: import org.apache.cassandra.utils.ByteBufferUtil;
1:c08aaab: import org.apache.cassandra.utils.UUIDGen;
1:c08aaab: import org.joda.time.DateTime;
1:c08aaab: import org.joda.time.DateTimeZone;
1:c08aaab: import org.joda.time.format.DateTimeFormat;
1:c08aaab: 
1:c08aaab: import static org.junit.Assert.assertEquals;
1:c08aaab: import static org.junit.Assert.assertNull;
1:c08aaab: 
1:c08aaab: public class TimeFctsTest
1:c08aaab: {
1:c08aaab:     @Test
1:c08aaab:     public void testMinTimeUuid()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.minTimeuuidFct, input);
1:c08aaab:         assertEquals(UUIDGen.minTimeUUID(timeInMillis), TimeUUIDType.instance.compose(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testMaxTimeUuid()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.maxTimeuuidFct, input);
1:c08aaab:         assertEquals(UUIDGen.maxTimeUUID(timeInMillis), TimeUUIDType.instance.compose(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testDateOf()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.dateOfFct, input);
1:c08aaab:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimeUuidToTimestamp()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timeUuidToTimestamp, input);
1:c08aaab:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testUnixTimestampOfFct()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.unixTimestampOfFct, input);
1:c08aaab:         assertEquals(timeInMillis, LongType.instance.compose(output).longValue());
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimeUuidToUnixTimestamp()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timeUuidToUnixTimestamp, input);
1:c08aaab:         assertEquals(timeInMillis, LongType.instance.compose(output).longValue());
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimeUuidToDate()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                 .withZone(DateTimeZone.UTC)
1:c08aaab:                 .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         long timeInMillis = dateTime.getMillis();
1:c08aaab:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timeUuidtoDate, input);
1:c08aaab: 
1:c08aaab:         long expectedTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:c08aaab:                                           .withZone(DateTimeZone.UTC)
1:c08aaab:                                           .parseDateTime("2015-05-21")
1:c08aaab:                                           .getMillis();
1:c08aaab: 
1:c08aaab:         assertEquals(expectedTime, SimpleDateType.instance.toTimeInMillis(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testDateToTimestamp()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:c08aaab:                                           .withZone(DateTimeZone.UTC)
1:c08aaab:                                           .parseDateTime("2015-05-21");
1:c08aaab: 
1:c08aaab:         ByteBuffer input = SimpleDateType.instance.fromString("2015-05-21");
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.dateToTimestamp, input);
1:c08aaab:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testDateToUnixTimestamp()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:c08aaab:                                           .withZone(DateTimeZone.UTC)
1:c08aaab:                                           .parseDateTime("2015-05-21");
1:c08aaab: 
1:c08aaab:         ByteBuffer input = SimpleDateType.instance.fromString("2015-05-21");
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.dateToUnixTimestamp, input);
1:c08aaab:         assertEquals(dateTime.getMillis(), LongType.instance.compose(output).longValue());
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimestampToDate()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:c08aaab:                                           .withZone(DateTimeZone.UTC)
1:c08aaab:                                           .parseDateTime("2015-05-21");
1:c08aaab: 
1:c08aaab:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timestampToDate, input);
1:c08aaab:         assertEquals(dateTime.getMillis(), SimpleDateType.instance.toTimeInMillis(output));
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimestampToDateWithEmptyInput()
1:c08aaab:     {
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timestampToDate, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:c08aaab:         assertNull(output);
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimestampToUnixTimestamp()
1:c08aaab:     {
1:c08aaab:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:c08aaab:                                           .withZone(DateTimeZone.UTC)
1:c08aaab:                                           .parseDateTime("2015-05-21 11:03:02");
1:c08aaab: 
1:c08aaab:         ByteBuffer input = TimestampType.instance.decompose(dateTime.toDate());
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timestampToUnixTimestamp, input);
1:c08aaab:         assertEquals(dateTime.getMillis(), LongType.instance.compose(output).longValue());
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     @Test
1:c08aaab:     public void testTimestampToUnixTimestampWithEmptyInput()
1:c08aaab:     {
1:c08aaab:         ByteBuffer output = executeFunction(TimeFcts.timestampToUnixTimestamp, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:c08aaab:         assertNull(output);
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     private static ByteBuffer executeFunction(Function function, ByteBuffer input)
1:c08aaab:     {
1:c08aaab:         List<ByteBuffer> params = Arrays.asList(input);
1:e0adc16:         return ((ScalarFunction) function).execute(ProtocolVersion.CURRENT, params);
1:c08aaab:     }
1:c08aaab: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         return ((ScalarFunction) function).execute(ProtocolVersion.CURRENT, params);
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:c08aaab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.db.marshal.LongType;
1: import org.apache.cassandra.db.marshal.SimpleDateType;
1: import org.apache.cassandra.db.marshal.TimeUUIDType;
1: import org.apache.cassandra.db.marshal.TimestampType;
0: import org.apache.cassandra.transport.Server;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.UUIDGen;
1: import org.joda.time.DateTime;
1: import org.joda.time.DateTimeZone;
1: import org.joda.time.format.DateTimeFormat;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: 
1: public class TimeFctsTest
1: {
1:     @Test
1:     public void testMinTimeUuid()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:         ByteBuffer output = executeFunction(TimeFcts.minTimeuuidFct, input);
1:         assertEquals(UUIDGen.minTimeUUID(timeInMillis), TimeUUIDType.instance.compose(output));
1:     }
1: 
1:     @Test
1:     public void testMaxTimeUuid()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:         ByteBuffer output = executeFunction(TimeFcts.maxTimeuuidFct, input);
1:         assertEquals(UUIDGen.maxTimeUUID(timeInMillis), TimeUUIDType.instance.compose(output));
1:     }
1: 
1:     @Test
1:     public void testDateOf()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:         ByteBuffer output = executeFunction(TimeFcts.dateOfFct, input);
1:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:     }
1: 
1:     @Test
1:     public void testTimeUuidToTimestamp()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:         ByteBuffer output = executeFunction(TimeFcts.timeUuidToTimestamp, input);
1:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:     }
1: 
1:     @Test
1:     public void testUnixTimestampOfFct()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:         ByteBuffer output = executeFunction(TimeFcts.unixTimestampOfFct, input);
1:         assertEquals(timeInMillis, LongType.instance.compose(output).longValue());
1:     }
1: 
1:     @Test
1:     public void testTimeUuidToUnixTimestamp()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:         ByteBuffer output = executeFunction(TimeFcts.timeUuidToUnixTimestamp, input);
1:         assertEquals(timeInMillis, LongType.instance.compose(output).longValue());
1:     }
1: 
1:     @Test
1:     public void testTimeUuidToDate()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                 .withZone(DateTimeZone.UTC)
1:                 .parseDateTime("2015-05-21 11:03:02");
1: 
1:         long timeInMillis = dateTime.getMillis();
1:         ByteBuffer input = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timeInMillis, 0));
1:         ByteBuffer output = executeFunction(TimeFcts.timeUuidtoDate, input);
1: 
1:         long expectedTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:                                           .withZone(DateTimeZone.UTC)
1:                                           .parseDateTime("2015-05-21")
1:                                           .getMillis();
1: 
1:         assertEquals(expectedTime, SimpleDateType.instance.toTimeInMillis(output));
1:     }
1: 
1:     @Test
1:     public void testDateToTimestamp()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:                                           .withZone(DateTimeZone.UTC)
1:                                           .parseDateTime("2015-05-21");
1: 
1:         ByteBuffer input = SimpleDateType.instance.fromString("2015-05-21");
1:         ByteBuffer output = executeFunction(TimeFcts.dateToTimestamp, input);
1:         assertEquals(dateTime.toDate(), TimestampType.instance.compose(output));
1:     }
1: 
1:     @Test
1:     public void testDateToUnixTimestamp()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:                                           .withZone(DateTimeZone.UTC)
1:                                           .parseDateTime("2015-05-21");
1: 
1:         ByteBuffer input = SimpleDateType.instance.fromString("2015-05-21");
1:         ByteBuffer output = executeFunction(TimeFcts.dateToUnixTimestamp, input);
1:         assertEquals(dateTime.getMillis(), LongType.instance.compose(output).longValue());
1:     }
1: 
1:     @Test
1:     public void testTimestampToDate()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd")
1:                                           .withZone(DateTimeZone.UTC)
1:                                           .parseDateTime("2015-05-21");
1: 
1:         ByteBuffer input = TimestampType.instance.fromString("2015-05-21 11:03:02+00");
1:         ByteBuffer output = executeFunction(TimeFcts.timestampToDate, input);
1:         assertEquals(dateTime.getMillis(), SimpleDateType.instance.toTimeInMillis(output));
1:     }
1: 
1:     @Test
1:     public void testTimestampToDateWithEmptyInput()
1:     {
1:         ByteBuffer output = executeFunction(TimeFcts.timestampToDate, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:         assertNull(output);
1:     }
1: 
1:     @Test
1:     public void testTimestampToUnixTimestamp()
1:     {
1:         DateTime dateTime = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss")
1:                                           .withZone(DateTimeZone.UTC)
1:                                           .parseDateTime("2015-05-21 11:03:02");
1: 
1:         ByteBuffer input = TimestampType.instance.decompose(dateTime.toDate());
1:         ByteBuffer output = executeFunction(TimeFcts.timestampToUnixTimestamp, input);
1:         assertEquals(dateTime.getMillis(), LongType.instance.compose(output).longValue());
1:     }
1: 
1:     @Test
1:     public void testTimestampToUnixTimestampWithEmptyInput()
1:     {
1:         ByteBuffer output = executeFunction(TimeFcts.timestampToUnixTimestamp, ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:         assertNull(output);
1:     }
1: 
1:     private static ByteBuffer executeFunction(Function function, ByteBuffer input)
1:     {
1:         List<ByteBuffer> params = Arrays.asList(input);
0:         return ((ScalarFunction) function).execute(Server.CURRENT_VERSION, params);
1:     }
1: }
============================================================================