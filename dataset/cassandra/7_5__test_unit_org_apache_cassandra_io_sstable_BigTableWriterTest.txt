1:8704006: /*
1:8704006: * Licensed to the Apache Software Foundation (ASF) under one
1:8704006: * or more contributor license agreements.  See the NOTICE file
1:8704006: * distributed with this work for additional information
1:8704006: * regarding copyright ownership.  The ASF licenses this file
1:8704006: * to you under the Apache License, Version 2.0 (the
1:8704006: * "License"); you may not use this file except in compliance
1:8704006: * with the License.  You may obtain a copy of the License at
1:8704006: *
1:8704006: *    http://www.apache.org/licenses/LICENSE-2.0
1:8704006: *
1:8704006: * Unless required by applicable law or agreed to in writing,
1:8704006: * software distributed under the License is distributed on an
1:8704006: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8704006: * KIND, either express or implied.  See the License for the
1:8704006: * specific language governing permissions and limitations
1:8704006: * under the License.
1:8704006: */
1:8704006: package org.apache.cassandra.io.sstable;
1:8704006: 
1:8704006: import java.io.File;
1:8704006: import java.io.IOException;
1:8704006: 
1:8704006: import org.junit.BeforeClass;
1:8704006: 
1:8704006: import junit.framework.Assert;
1:8704006: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.UpdateBuilder;
1:8704006: import org.apache.cassandra.db.ColumnFamilyStore;
1:8704006: import org.apache.cassandra.db.Keyspace;
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:a991b64: import org.apache.cassandra.db.marshal.*;
1:c055ab9: import org.apache.cassandra.db.rows.EncodingStats;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:8704006: import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
1:8704006: 
1:8704006: public class BigTableWriterTest extends AbstractTransactionalTest
1:8704006: {
1:8704006:     public static final String KEYSPACE1 = "BigTableWriterTest";
1:8704006:     public static final String CF_STANDARD = "Standard1";
1:8704006: 
1:8704006:     private static ColumnFamilyStore cfs;
1:8704006: 
1:8704006:     @BeforeClass
1:8704006:     public static void defineSchema() throws Exception
1:8704006:     {
1:8704006:         SchemaLoader.prepareServer();
1:8704006:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:a991b64:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD, 0, Int32Type.instance, AsciiType.instance, Int32Type.instance));
1:8704006:         cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD);
1:8704006:     }
1:8704006: 
1:8704006:     protected TestableTransaction newTest() throws IOException
1:8704006:     {
1:8704006:         return new TestableBTW();
1:8704006:     }
1:8704006: 
1:8704006:     private static class TestableBTW extends TestableTransaction
1:8704006:     {
1:8704006:         final File file;
1:8704006:         final Descriptor descriptor;
1:b09e60f:         final SSTableTxnWriter writer;
1:8704006: 
1:605bcdc:         private TestableBTW()
1:8704006:         {
1:9ed2727:             this(cfs.getSSTablePath(cfs.getDirectories().getDirectoryForNewSSTables()));
1:8704006:         }
1:8704006: 
1:605bcdc:         private TestableBTW(String file)
1:8704006:         {
1:6584331:             this(file, SSTableTxnWriter.create(cfs, file, 0, 0, new SerializationHeader(true, cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)));
1:8704006:         }
1:8704006: 
1:605bcdc:         private TestableBTW(String file, SSTableTxnWriter sw)
1:8704006:         {
1:8704006:             super(sw);
1:8704006:             this.file = new File(file);
1:8704006:             this.descriptor = Descriptor.fromFilename(file);
1:8704006:             this.writer = sw;
1:a991b64: 
1:8704006:             for (int i = 0; i < 100; i++)
1:a991b64:             {
1:a991b64:                 UpdateBuilder update = UpdateBuilder.create(cfs.metadata, i);
1:a991b64:                 for (int j = 0; j < 10; j++)
1:a991b64:                     update.newRow(j).add("val", SSTableRewriterTest.random(0, 1000));
1:a991b64:                 writer.append(update.build().unfilteredIterator());
1:a991b64:             }
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertInProgress() throws Exception
1:8704006:         {
1:b09e60f:             assertExists(Component.DATA, Component.PRIMARY_INDEX);
1:b09e60f:             assertNotExists(Component.FILTER, Component.SUMMARY);
1:8704006:             Assert.assertTrue(file.length() > 0);
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertPrepared() throws Exception
1:8704006:         {
1:b09e60f:             assertExists(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertAborted() throws Exception
1:8704006:         {
1:b09e60f:             assertNotExists(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:8704006:             Assert.assertFalse(file.exists());
1:8704006:         }
1:8704006: 
1:8704006:         protected void assertCommitted() throws Exception
1:8704006:         {
1:8704006:             assertPrepared();
1:8704006:         }
1:8704006: 
1:605bcdc:         @Override
1:605bcdc:         protected boolean commitCanThrow()
1:605bcdc:         {
1:605bcdc:             return true;
1:605bcdc:         }
1:605bcdc: 
1:b09e60f:         private void assertExists(Component ... components)
1:8704006:         {
1:8704006:             for (Component component : components)
1:b09e60f:                 Assert.assertTrue(new File(descriptor.filenameFor(component)).exists());
1:8704006:         }
1:605bcdc: 
1:b09e60f:         private void assertNotExists(Component ... components)
1:8704006:         {
1:8704006:             for (Component component : components)
1:b09e60f:                 Assert.assertFalse(component.toString(), new File(descriptor.filenameFor(component)).exists());
1:8704006:         }
1:8704006:     }
1:8704006: 
1:8704006: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6584331
/////////////////////////////////////////////////////////////////////////
1:             this(file, SSTableTxnWriter.create(cfs, file, 0, 0, new SerializationHeader(true, cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)));
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.EncodingStats;
/////////////////////////////////////////////////////////////////////////
0:             this(file, SSTableWriter.create(file, 0, 0, new SerializationHeader(cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)));
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.UpdateBuilder;
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.db.rows.RowStats;
/////////////////////////////////////////////////////////////////////////
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD, 0, Int32Type.instance, AsciiType.instance, Int32Type.instance));
/////////////////////////////////////////////////////////////////////////
0:             this(file, SSTableWriter.create(file, 0, 0, new SerializationHeader(cfs.metadata, cfs.metadata.partitionColumns(), RowStats.NO_STATS)));
/////////////////////////////////////////////////////////////////////////
1: 
1:             {
1:                 UpdateBuilder update = UpdateBuilder.create(cfs.metadata, i);
1:                 for (int j = 0; j < 10; j++)
1:                     update.newRow(j).add("val", SSTableRewriterTest.random(0, 1000));
1:                 writer.append(update.build().unfilteredIterator());
1:             }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1:             this(cfs.getSSTablePath(cfs.getDirectories().getDirectoryForNewSSTables()));
0:             this(file, SSTableTxnWriter.create(cfs, file, 0, 0, new SerializationHeader(cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)));
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:605bcdc
/////////////////////////////////////////////////////////////////////////
1:         private TestableBTW()
1:         private TestableBTW(String file)
1:         private TestableBTW(String file, SSTableTxnWriter sw)
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         protected boolean commitCanThrow()
1:         {
1:             return true;
1:         }
1: 
1: 
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1:         final SSTableTxnWriter writer;
0:             this(cfs.getSSTablePath(cfs.directories.getDirectoryForNewSSTables()));
0:             this(file, SSTableTxnWriter.create(file, 0, 0, new SerializationHeader(cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)));
0:         private TestableBTW(String file, SSTableTxnWriter sw) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             assertExists(Component.DATA, Component.PRIMARY_INDEX);
1:             assertNotExists(Component.FILTER, Component.SUMMARY);
1:             assertExists(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:             assertNotExists(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
/////////////////////////////////////////////////////////////////////////
1:         private void assertExists(Component ... components)
1:                 Assert.assertTrue(new File(descriptor.filenameFor(component)).exists());
1:         private void assertNotExists(Component ... components)
1:                 Assert.assertFalse(component.toString(), new File(descriptor.filenameFor(component)).exists());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.sstable.format.SSTableWriter;
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:8704006
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
0: import org.junit.After;
1: import org.junit.BeforeClass;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.Util;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.ArrayBackedSortedColumns;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.Keyspace;
0: import org.apache.cassandra.io.sstable.format.SSTableWriter;
0: import org.apache.cassandra.locator.SimpleStrategy;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.concurrent.AbstractTransactionalTest;
1: 
1: public class BigTableWriterTest extends AbstractTransactionalTest
1: {
1:     public static final String KEYSPACE1 = "BigTableWriterTest";
1:     public static final String CF_STANDARD = "Standard1";
1: 
1:     private static ColumnFamilyStore cfs;
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws Exception
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD));
1:         cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD);
1:     }
1: 
1:     protected TestableTransaction newTest() throws IOException
1:     {
1:         return new TestableBTW();
1:     }
1: 
1:     private static class TestableBTW extends TestableTransaction
1:     {
1:         final File file;
1:         final Descriptor descriptor;
0:         final SSTableWriter writer;
1: 
0:         private TestableBTW() throws IOException
1:         {
0:             this(cfs.getTempSSTablePath(cfs.directories.getDirectoryForNewSSTables()));
1:         }
1: 
0:         private TestableBTW(String file) throws IOException
1:         {
0:             this(file, SSTableWriter.create(file, 0, 0));
1:         }
1: 
0:         private TestableBTW(String file, SSTableWriter sw) throws IOException
1:         {
1:             super(sw);
1:             this.file = new File(file);
1:             this.descriptor = Descriptor.fromFilename(file);
1:             this.writer = sw;
0:             ArrayBackedSortedColumns cf = ArrayBackedSortedColumns.factory.create(cfs.metadata);
0:             for (int i = 0; i < 10; i++)
0:                 cf.addColumn(Util.cellname(i), SSTableRewriterTest.random(0, 1000), 1);
1:             for (int i = 0; i < 100; i++)
0:                 writer.append(StorageService.getPartitioner().decorateKey(ByteBufferUtil.bytes(i)), cf);
1:         }
1: 
1:         protected void assertInProgress() throws Exception
1:         {
0:             assertExists(Descriptor.Type.TEMP, Component.DATA, Component.PRIMARY_INDEX);
0:             assertNotExists(Descriptor.Type.TEMP, Component.FILTER, Component.SUMMARY);
0:             assertNotExists(Descriptor.Type.FINAL, Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:             Assert.assertTrue(file.length() > 0);
1:         }
1: 
1:         protected void assertPrepared() throws Exception
1:         {
0:             assertNotExists(Descriptor.Type.TEMP, Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
0:             assertExists(Descriptor.Type.FINAL, Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:         }
1: 
1:         protected void assertAborted() throws Exception
1:         {
0:             assertNotExists(Descriptor.Type.TEMP, Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
0:             assertNotExists(Descriptor.Type.FINAL, Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.SUMMARY);
1:             Assert.assertFalse(file.exists());
1:         }
1: 
1:         protected void assertCommitted() throws Exception
1:         {
1:             assertPrepared();
1:         }
1: 
0:         private void assertExists(Descriptor.Type type, Component ... components)
1:         {
1:             for (Component component : components)
0:                 Assert.assertTrue(new File(descriptor.asType(type).filenameFor(component)).exists());
1:         }
0:         private void assertNotExists(Descriptor.Type type, Component ... components)
1:         {
1:             for (Component component : components)
0:                 Assert.assertFalse(type.toString() + " " + component.toString(), new File(descriptor.asType(type).filenameFor(component)).exists());
1:         }
1:     }
1: 
1: }
============================================================================