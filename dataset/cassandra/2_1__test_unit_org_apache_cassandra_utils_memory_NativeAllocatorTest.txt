1:71ccc87: /*
1:71ccc87: * Licensed to the Apache Software Foundation (ASF) under one
1:71ccc87: * or more contributor license agreements.  See the NOTICE file
1:71ccc87: * distributed with this work for additional information
1:71ccc87: * regarding copyright ownership.  The ASF licenses this file
1:71ccc87: * to you under the Apache License, Version 2.0 (the
1:71ccc87: * "License"); you may not use this file except in compliance
1:71ccc87: * with the License.  You may obtain a copy of the License at
1:71ccc87: *
1:71ccc87: *    http://www.apache.org/licenses/LICENSE-2.0
1:71ccc87: *
1:71ccc87: * Unless required by applicable law or agreed to in writing,
1:71ccc87: * software distributed under the License is distributed on an
1:71ccc87: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:71ccc87: * KIND, either express or implied.  See the License for the
1:71ccc87: * specific language governing permissions and limitations
1:71ccc87: * under the License.
1:71ccc87: */
1:71ccc87: package org.apache.cassandra.utils.memory;
2:71ccc87: 
1:71ccc87: import java.util.concurrent.*;
1:71ccc87: import java.util.concurrent.atomic.AtomicReference;
1:71ccc87: 
1:71ccc87: import com.google.common.util.concurrent.Uninterruptibles;
1:71ccc87: import org.junit.Test;
1:71ccc87: 
1:71ccc87: import junit.framework.Assert;
1:71ccc87: import org.apache.cassandra.utils.concurrent.OpOrder;
1:71ccc87: 
1:71ccc87: public class NativeAllocatorTest
1:71ccc87: {
1:71ccc87: 
1:71ccc87:     @Test
1:71ccc87:     public void testBookKeeping() throws ExecutionException, InterruptedException
1:71ccc87:     {
1:71ccc87:         {
1:71ccc87:             final ScheduledExecutorService exec = Executors.newScheduledThreadPool(2);
1:71ccc87:             final OpOrder order = new OpOrder();
1:71ccc87:             final OpOrder.Group group = order.start();
1:71ccc87:             final CountDownLatch canClean = new CountDownLatch(1);
1:71ccc87:             final CountDownLatch isClean = new CountDownLatch(1);
1:71ccc87:             final AtomicReference<NativeAllocator> allocatorRef = new AtomicReference<>();
1:71ccc87:             final AtomicReference<OpOrder.Barrier> barrier = new AtomicReference<>();
1:71ccc87:             final NativeAllocator allocator = new NativeAllocator(new NativePool(1, 100, 0.75f, new Runnable()
1:71ccc87:             {
1:71ccc87:                 public void run()
1:71ccc87:                 {
1:71ccc87:                     try
1:71ccc87:                     {
1:71ccc87:                         canClean.await();
1:71ccc87:                     }
1:71ccc87:                     catch (InterruptedException e)
1:71ccc87:                     {
1:71ccc87:                         throw new AssertionError();
1:71ccc87:                     }
1:71ccc87:                     if (isClean.getCount() > 0)
1:71ccc87:                     {
1:b757db1:                         allocatorRef.get().offHeap().released(80);
1:71ccc87:                         isClean.countDown();
1:71ccc87:                     }
1:71ccc87:                 }
1:71ccc87:             }));
1:71ccc87:             allocatorRef.set(allocator);
1:71ccc87:             final Runnable markBlocking = new Runnable()
1:71ccc87:             {
1:71ccc87: 
1:71ccc87:                 public void run()
1:71ccc87:                 {
1:71ccc87:                     barrier.set(order.newBarrier());
1:71ccc87:                     barrier.get().issue();
1:71ccc87:                     barrier.get().markBlocking();
1:71ccc87:                 }
1:71ccc87:             };
1:71ccc87:             final Runnable run = new Runnable()
1:71ccc87:             {
1:71ccc87:                 public void run()
1:71ccc87:                 {
1:71ccc87:                     // allocate normal, check accounted and not cleaned
1:71ccc87:                     allocator.allocate(10, group);
1:71ccc87:                     Assert.assertEquals(10, allocator.offHeap().owns());
1:b757db1:                     // confirm adjustment works
1:b757db1:                     allocator.offHeap().adjust(-10, group);
1:b757db1:                     Assert.assertEquals(0, allocator.offHeap().owns());
1:b757db1:                     allocator.offHeap().adjust(10, group);
1:b757db1:                     Assert.assertEquals(10, allocator.offHeap().owns());
1:b757db1:                     // confirm we cannot allocate negative
1:b757db1:                     boolean success = false;
1:b757db1:                     try
1:b757db1:                     {
1:b757db1:                         allocator.offHeap().allocate(-10, group);
1:b757db1:                     }
1:b757db1:                     catch (AssertionError e)
1:b757db1:                     {
1:b757db1:                         success = true;
1:b757db1:                     }
1:b757db1:                     Assert.assertTrue(success);
1:71ccc87:                     Uninterruptibles.sleepUninterruptibly(10L, TimeUnit.MILLISECONDS);
1:71ccc87:                     Assert.assertEquals(1, isClean.getCount());
1:71ccc87: 
1:71ccc87:                     // allocate above watermark, check cleaned
1:71ccc87:                     allocator.allocate(70, group);
1:71ccc87:                     Assert.assertEquals(80, allocator.offHeap().owns());
1:71ccc87:                     canClean.countDown();
1:71ccc87:                     try
1:71ccc87:                     {
1:71ccc87:                         isClean.await(10L, TimeUnit.MILLISECONDS);
1:71ccc87:                     }
1:71ccc87:                     catch (InterruptedException e)
1:71ccc87:                     {
1:71ccc87:                         throw new AssertionError();
1:71ccc87:                     }
1:71ccc87:                     Assert.assertEquals(0, isClean.getCount());
1:71ccc87:                     Assert.assertEquals(0, allocator.offHeap().owns());
1:71ccc87: 
1:71ccc87:                     // allocate above limit, check we block until "marked blocking"
1:71ccc87:                     exec.schedule(markBlocking, 10L, TimeUnit.MILLISECONDS);
1:71ccc87:                     allocator.allocate(110, group);
1:71ccc87:                     Assert.assertNotNull(barrier.get());
1:71ccc87:                     Assert.assertEquals(110, allocator.offHeap().owns());
1:71ccc87:                 }
1:71ccc87:             };
1:71ccc87:             exec.submit(run).get();
1:71ccc87:         }
1:71ccc87:     }
1:71ccc87: 
1:71ccc87: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:dea6ab1
commit:b757db1
/////////////////////////////////////////////////////////////////////////
1:                         allocatorRef.get().offHeap().released(80);
/////////////////////////////////////////////////////////////////////////
1:                     // confirm adjustment works
1:                     allocator.offHeap().adjust(-10, group);
1:                     Assert.assertEquals(0, allocator.offHeap().owns());
1:                     allocator.offHeap().adjust(10, group);
1:                     Assert.assertEquals(10, allocator.offHeap().owns());
1:                     // confirm we cannot allocate negative
1:                     boolean success = false;
1:                     try
1:                     {
1:                         allocator.offHeap().allocate(-10, group);
1:                     }
1:                     catch (AssertionError e)
1:                     {
1:                         success = true;
1:                     }
1:                     Assert.assertTrue(success);
commit:71ccc87
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.memory;
1: 
1: import java.util.concurrent.*;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import com.google.common.util.concurrent.Uninterruptibles;
1: 
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.utils.concurrent.OpOrder;
1: 
1: public class NativeAllocatorTest
1: {
1: 
1:     @Test
1:     public void testBookKeeping() throws ExecutionException, InterruptedException
1:     {
1:         {
1:             final ScheduledExecutorService exec = Executors.newScheduledThreadPool(2);
1:             final OpOrder order = new OpOrder();
1:             final OpOrder.Group group = order.start();
1:             final CountDownLatch canClean = new CountDownLatch(1);
1:             final CountDownLatch isClean = new CountDownLatch(1);
1:             final AtomicReference<NativeAllocator> allocatorRef = new AtomicReference<>();
1:             final AtomicReference<OpOrder.Barrier> barrier = new AtomicReference<>();
1:             final NativeAllocator allocator = new NativeAllocator(new NativePool(1, 100, 0.75f, new Runnable()
1:             {
1:                 public void run()
1:                 {
1:                     try
1:                     {
1:                         canClean.await();
1:                     }
1:                     catch (InterruptedException e)
1:                     {
1:                         throw new AssertionError();
1:                     }
1:                     if (isClean.getCount() > 0)
1:                     {
0:                         allocatorRef.get().offHeap().release(80);
1:                         isClean.countDown();
1:                     }
1:                 }
1:             }));
1:             allocatorRef.set(allocator);
1:             final Runnable markBlocking = new Runnable()
1:             {
1: 
1:                 public void run()
1:                 {
1:                     barrier.set(order.newBarrier());
1:                     barrier.get().issue();
1:                     barrier.get().markBlocking();
1:                 }
1:             };
1:             final Runnable run = new Runnable()
1:             {
1:                 public void run()
1:                 {
1:                     // allocate normal, check accounted and not cleaned
1:                     allocator.allocate(10, group);
1:                     Assert.assertEquals(10, allocator.offHeap().owns());
1:                     Uninterruptibles.sleepUninterruptibly(10L, TimeUnit.MILLISECONDS);
1:                     Assert.assertEquals(1, isClean.getCount());
1: 
1:                     // allocate above watermark, check cleaned
1:                     allocator.allocate(70, group);
1:                     Assert.assertEquals(80, allocator.offHeap().owns());
1:                     canClean.countDown();
1:                     try
1:                     {
1:                         isClean.await(10L, TimeUnit.MILLISECONDS);
1:                     }
1:                     catch (InterruptedException e)
1:                     {
1:                         throw new AssertionError();
1:                     }
1:                     Assert.assertEquals(0, isClean.getCount());
1:                     Assert.assertEquals(0, allocator.offHeap().owns());
1: 
1:                     // allocate above limit, check we block until "marked blocking"
1:                     exec.schedule(markBlocking, 10L, TimeUnit.MILLISECONDS);
1:                     allocator.allocate(110, group);
1:                     Assert.assertNotNull(barrier.get());
1:                     Assert.assertEquals(110, allocator.offHeap().owns());
1:                 }
1:             };
1:             exec.submit(run).get();
1:         }
1:     }
1: 
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
============================================================================