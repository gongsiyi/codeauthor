1:54601f1: package org.apache.cassandra;
1:f07804e: /*
1:f07804e:  * 
1:f07804e:  * Licensed to the Apache Software Foundation (ASF) under one
1:f07804e:  * or more contributor license agreements.  See the NOTICE file
1:f07804e:  * distributed with this work for additional information
1:f07804e:  * regarding copyright ownership.  The ASF licenses this file
1:f07804e:  * to you under the Apache License, Version 2.0 (the
1:f07804e:  * "License"); you may not use this file except in compliance
1:f07804e:  * with the License.  You may obtain a copy of the License at
1:f07804e:  * 
1:f07804e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f07804e:  * 
1:f07804e:  * Unless required by applicable law or agreed to in writing,
1:f07804e:  * software distributed under the License is distributed on an
1:f07804e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f07804e:  * KIND, either express or implied.  See the License for the
1:f07804e:  * specific language governing permissions and limitations
1:f07804e:  * under the License.
1:f07804e:  * 
1:f07804e:  */
1:f07804e: 
1:54601f1: 
1:54601f1: import org.junit.Ignore;
1:54601f1: import org.junit.runners.model.FrameworkMethod;
1:54601f1: 
1:54601f1: import java.io.IOException;
1:54601f1: import java.io.InputStream;
1:54601f1: import java.io.InputStreamReader;
1:54601f1: import java.io.LineNumberReader;
1:54601f1: import java.lang.reflect.Method;
1:54601f1: import java.util.Comparator;
1:54601f1: 
1:54601f1: public class MethodComparator<T> implements Comparator<T>
1:54601f1: {
1:54601f1:     private static final char[] METHOD_SEPARATORS = {1, 7};
1:54601f1: 
1:54601f1:     private MethodComparator()
1:54601f1:     {
1:54601f1:     }
1:54601f1: 
1:54601f1:     public static MethodComparator<FrameworkMethod> getFrameworkMethodComparatorForJUnit4()
1:54601f1:     {
1:54601f1:         return new MethodComparator<FrameworkMethod>();
1:54601f1:     }
1:54601f1: 
1:54601f1:     @Override
1:54601f1:     public int compare(T o1, T o2)
1:54601f1:     {
1:54601f1:         final MethodPosition methodPosition1 = this.getIndexOfMethodPosition(o1);
1:54601f1:         final MethodPosition methodPosition2 = this.getIndexOfMethodPosition(o2);
1:54601f1:         return methodPosition1.compareTo(methodPosition2);
1:54601f1:     }
1:54601f1: 
1:54601f1:     private MethodPosition getIndexOfMethodPosition(final Object method)
1:54601f1:     {
1:54601f1:         if (method instanceof FrameworkMethod)
1:54601f1:         {
1:54601f1:             return this.getIndexOfMethodPosition((FrameworkMethod) method);
1:54601f1:         }
1:54601f1:         else if (method instanceof Method)
1:54601f1:         {
1:54601f1:             return this.getIndexOfMethodPosition((Method) method);
1:54601f1:         }
1:54601f1:         else
1:54601f1:         {
1:54601f1:             return new NullMethodPosition();
1:54601f1:         }
1:54601f1:     }
1:54601f1: 
1:54601f1:     private MethodPosition getIndexOfMethodPosition(final FrameworkMethod frameworkMethod)
1:54601f1:     {
1:54601f1:         return getIndexOfMethodPosition(frameworkMethod.getMethod());
1:54601f1:     }
1:54601f1: 
1:54601f1:     private MethodPosition getIndexOfMethodPosition(final Method method)
1:54601f1:     {
1:54601f1:         if (method.getAnnotation(Ignore.class) == null)
1:54601f1:         {
1:e085e82:             final Class<?> aClass = method.getDeclaringClass();
1:54601f1:             return getIndexOfMethodPosition(aClass, method.getName());
1:54601f1:         }
1:54601f1:         else
1:54601f1:         {
1:54601f1:             return new NullMethodPosition();
1:54601f1:         }
1:54601f1:     }
1:54601f1: 
1:e085e82:     private MethodPosition getIndexOfMethodPosition(final Class<?> aClass, final String methodName)
1:54601f1:     {
1:54601f1:         MethodPosition methodPosition;
1:54601f1:         for (final char methodSeparator : METHOD_SEPARATORS)
1:54601f1:         {
1:54601f1:             methodPosition = getIndexOfMethodPosition(aClass, methodName, methodSeparator);
1:54601f1:             if (!(methodPosition instanceof NullMethodPosition))
1:54601f1:             {
1:54601f1:                 return methodPosition;
1:54601f1:             }
1:54601f1:         }
1:54601f1:         return new NullMethodPosition();
1:54601f1:     }
1:54601f1: 
1:e085e82:     private MethodPosition getIndexOfMethodPosition(final Class<?> aClass, final String methodName, final char methodSeparator)
1:54601f1:     {
1:54601f1:         final InputStream inputStream = aClass.getResourceAsStream(aClass.getSimpleName() + ".class");
1:54601f1:         final LineNumberReader lineNumberReader = new LineNumberReader(new InputStreamReader(inputStream));
1:54601f1:         final String methodNameWithSeparator = methodName + methodSeparator;
1:54601f1:         try
1:54601f1:         {
1:54601f1:             try
1:54601f1:             {
1:54601f1:                 String line;
1:54601f1:                 while ((line = lineNumberReader.readLine()) != null)
1:54601f1:                 {
1:54601f1:                     if (line.contains(methodNameWithSeparator))
1:54601f1:                     {
1:54601f1:                         return new MethodPosition(lineNumberReader.getLineNumber(), line.indexOf(methodNameWithSeparator));
1:54601f1:                     }
1:54601f1:                 }
1:54601f1:             }
1:54601f1:             finally
1:54601f1:             {
1:54601f1:                 lineNumberReader.close();
1:54601f1:             }
1:54601f1:         }
1:54601f1:         catch (IOException e)
1:54601f1:         {
1:54601f1:             return new NullMethodPosition();
1:54601f1:         }
1:54601f1:         return new NullMethodPosition();
1:54601f1:     }
1:54601f1: 
1:54601f1:     private static class MethodPosition implements Comparable<MethodPosition>
1:54601f1:     {
1:54601f1:         private final Integer lineNumber;
1:54601f1:         private final Integer indexInLine;
1:54601f1: 
1:54601f1:         public MethodPosition(int lineNumber, int indexInLine)
1:54601f1:         {
1:54601f1:             this.lineNumber = lineNumber;
1:54601f1:             this.indexInLine = indexInLine;
1:54601f1:         }
1:54601f1: 
1:54601f1:         @Override
1:54601f1:         public int compareTo(MethodPosition o)
1:54601f1:         {
1:54601f1: 
1:54601f1:             // If line numbers are equal, then compare by indexes in this line.
1:54601f1:             if (this.lineNumber.equals(o.lineNumber))
1:54601f1:             {
1:54601f1:                 return this.indexInLine.compareTo(o.indexInLine);
1:54601f1:             }
1:54601f1:             else
1:54601f1:             {
1:54601f1:                 return this.lineNumber.compareTo(o.lineNumber);
1:54601f1:             }
1:54601f1:         }
1:54601f1:     }
1:54601f1: 
1:54601f1:     private static class NullMethodPosition extends MethodPosition
1:54601f1:     {
1:54601f1:         public NullMethodPosition()
1:54601f1:         {
1:54601f1:             super(-1, -1);
1:54601f1:         }
1:54601f1:     }
1:54601f1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:e085e82
/////////////////////////////////////////////////////////////////////////
1:             final Class<?> aClass = method.getDeclaringClass();
/////////////////////////////////////////////////////////////////////////
1:     private MethodPosition getIndexOfMethodPosition(final Class<?> aClass, final String methodName)
/////////////////////////////////////////////////////////////////////////
1:     private MethodPosition getIndexOfMethodPosition(final Class<?> aClass, final String methodName, final char methodSeparator)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f07804e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:54601f1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra;
1: 
1: import org.junit.Ignore;
1: import org.junit.runners.model.FrameworkMethod;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.io.LineNumberReader;
1: import java.lang.reflect.Method;
1: import java.util.Comparator;
1: 
1: public class MethodComparator<T> implements Comparator<T>
1: {
1:     private static final char[] METHOD_SEPARATORS = {1, 7};
1: 
1:     private MethodComparator()
1:     {
1:     }
1: 
1:     public static MethodComparator<FrameworkMethod> getFrameworkMethodComparatorForJUnit4()
1:     {
1:         return new MethodComparator<FrameworkMethod>();
1:     }
1: 
1:     @Override
1:     public int compare(T o1, T o2)
1:     {
1:         final MethodPosition methodPosition1 = this.getIndexOfMethodPosition(o1);
1:         final MethodPosition methodPosition2 = this.getIndexOfMethodPosition(o2);
1:         return methodPosition1.compareTo(methodPosition2);
1:     }
1: 
1:     private MethodPosition getIndexOfMethodPosition(final Object method)
1:     {
1:         if (method instanceof FrameworkMethod)
1:         {
1:             return this.getIndexOfMethodPosition((FrameworkMethod) method);
1:         }
1:         else if (method instanceof Method)
1:         {
1:             return this.getIndexOfMethodPosition((Method) method);
1:         }
1:         else
1:         {
1:             return new NullMethodPosition();
1:         }
1:     }
1: 
1:     private MethodPosition getIndexOfMethodPosition(final FrameworkMethod frameworkMethod)
1:     {
1:         return getIndexOfMethodPosition(frameworkMethod.getMethod());
1:     }
1: 
1:     private MethodPosition getIndexOfMethodPosition(final Method method)
1:     {
0:         final Class aClass = method.getDeclaringClass();
1:         if (method.getAnnotation(Ignore.class) == null)
1:         {
1:             return getIndexOfMethodPosition(aClass, method.getName());
1:         }
1:         else
1:         {
1:             return new NullMethodPosition();
1:         }
1:     }
1: 
0:     private MethodPosition getIndexOfMethodPosition(final Class aClass, final String methodName)
1:     {
1:         MethodPosition methodPosition;
1:         for (final char methodSeparator : METHOD_SEPARATORS)
1:         {
1:             methodPosition = getIndexOfMethodPosition(aClass, methodName, methodSeparator);
1:             if (!(methodPosition instanceof NullMethodPosition))
1:             {
1:                 return methodPosition;
1:             }
1:         }
1:         return new NullMethodPosition();
1:     }
1: 
0:     private MethodPosition getIndexOfMethodPosition(final Class aClass, final String methodName, final char methodSeparator)
1:     {
1:         final InputStream inputStream = aClass.getResourceAsStream(aClass.getSimpleName() + ".class");
1:         final LineNumberReader lineNumberReader = new LineNumberReader(new InputStreamReader(inputStream));
1:         final String methodNameWithSeparator = methodName + methodSeparator;
1:         try
1:         {
1:             try
1:             {
1:                 String line;
1:                 while ((line = lineNumberReader.readLine()) != null)
1:                 {
1:                     if (line.contains(methodNameWithSeparator))
1:                     {
1:                         return new MethodPosition(lineNumberReader.getLineNumber(), line.indexOf(methodNameWithSeparator));
1:                     }
1:                 }
1:             }
1:             finally
1:             {
1:                 lineNumberReader.close();
1:             }
1:         }
1:         catch (IOException e)
1:         {
1:             return new NullMethodPosition();
1:         }
1:         return new NullMethodPosition();
1:     }
1: 
1:     private static class MethodPosition implements Comparable<MethodPosition>
1:     {
1:         private final Integer lineNumber;
1:         private final Integer indexInLine;
1: 
1:         public MethodPosition(int lineNumber, int indexInLine)
1:         {
1:             this.lineNumber = lineNumber;
1:             this.indexInLine = indexInLine;
1:         }
1: 
1:         @Override
1:         public int compareTo(MethodPosition o)
1:         {
1: 
1:             // If line numbers are equal, then compare by indexes in this line.
1:             if (this.lineNumber.equals(o.lineNumber))
1:             {
1:                 return this.indexInLine.compareTo(o.indexInLine);
1:             }
1:             else
1:             {
1:                 return this.lineNumber.compareTo(o.lineNumber);
1:             }
1:         }
1:     }
1: 
1:     private static class NullMethodPosition extends MethodPosition
1:     {
1:         public NullMethodPosition()
1:         {
1:             super(-1, -1);
1:         }
1:     }
1: }
commit:814c05e
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra;
0: 
0: import org.junit.Ignore;
0: import org.junit.runners.model.FrameworkMethod;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.InputStreamReader;
0: import java.io.LineNumberReader;
0: import java.lang.reflect.Method;
0: import java.util.Comparator;
0: 
0: public class MethodComparator<T> implements Comparator<T>
0: {
0:     private static final char[] METHOD_SEPARATORS = {1, 7};
0: 
0:     private MethodComparator()
0:     {
0:     }
0: 
0:     public static MethodComparator<FrameworkMethod> getFrameworkMethodComparatorForJUnit4()
0:     {
0:         return new MethodComparator<FrameworkMethod>();
0:     }
0: 
0:     @Override
0:     public int compare(T o1, T o2)
0:     {
0:         final MethodPosition methodPosition1 = this.getIndexOfMethodPosition(o1);
0:         final MethodPosition methodPosition2 = this.getIndexOfMethodPosition(o2);
0:         return methodPosition1.compareTo(methodPosition2);
0:     }
0: 
0:     private MethodPosition getIndexOfMethodPosition(final Object method)
0:     {
0:         if (method instanceof FrameworkMethod)
0:         {
0:             return this.getIndexOfMethodPosition((FrameworkMethod) method);
0:         }
0:         else if (method instanceof Method)
0:         {
0:             return this.getIndexOfMethodPosition((Method) method);
0:         }
0:         else
0:         {
0:             return new NullMethodPosition();
0:         }
0:     }
0: 
0:     private MethodPosition getIndexOfMethodPosition(final FrameworkMethod frameworkMethod)
0:     {
0:         return getIndexOfMethodPosition(frameworkMethod.getMethod());
0:     }
0: 
0:     private MethodPosition getIndexOfMethodPosition(final Method method)
0:     {
0:         final Class aClass = method.getDeclaringClass();
0:         if (method.getAnnotation(Ignore.class) == null)
0:         {
0:             return getIndexOfMethodPosition(aClass, method.getName());
0:         }
0:         else
0:         {
0:             return new NullMethodPosition();
0:         }
0:     }
0: 
0:     private MethodPosition getIndexOfMethodPosition(final Class aClass, final String methodName)
0:     {
0:         MethodPosition methodPosition;
0:         for (final char methodSeparator : METHOD_SEPARATORS)
0:         {
0:             methodPosition = getIndexOfMethodPosition(aClass, methodName, methodSeparator);
0:             if (!(methodPosition instanceof NullMethodPosition))
0:             {
0:                 return methodPosition;
0:             }
0:         }
0:         return new NullMethodPosition();
0:     }
0: 
0:     private MethodPosition getIndexOfMethodPosition(final Class aClass, final String methodName, final char methodSeparator)
0:     {
0:         final InputStream inputStream = aClass.getResourceAsStream(aClass.getSimpleName() + ".class");
0:         final LineNumberReader lineNumberReader = new LineNumberReader(new InputStreamReader(inputStream));
0:         final String methodNameWithSeparator = methodName + methodSeparator;
0:         try
0:         {
0:             try
0:             {
0:                 String line;
0:                 while ((line = lineNumberReader.readLine()) != null)
0:                 {
0:                     if (line.contains(methodNameWithSeparator))
0:                     {
0:                         return new MethodPosition(lineNumberReader.getLineNumber(), line.indexOf(methodNameWithSeparator));
0:                     }
0:                 }
0:             }
0:             finally
0:             {
0:                 lineNumberReader.close();
0:             }
0:         }
0:         catch (IOException e)
0:         {
0:             return new NullMethodPosition();
0:         }
0:         return new NullMethodPosition();
0:     }
0: 
0:     private static class MethodPosition implements Comparable<MethodPosition>
0:     {
0:         private final Integer lineNumber;
0:         private final Integer indexInLine;
0: 
0:         public MethodPosition(int lineNumber, int indexInLine)
0:         {
0:             this.lineNumber = lineNumber;
0:             this.indexInLine = indexInLine;
0:         }
0: 
0:         @Override
0:         public int compareTo(MethodPosition o)
0:         {
0: 
0:             // If line numbers are equal, then compare by indexes in this line.
0:             if (this.lineNumber.equals(o.lineNumber))
0:             {
0:                 return this.indexInLine.compareTo(o.indexInLine);
0:             }
0:             else
0:             {
0:                 return this.lineNumber.compareTo(o.lineNumber);
0:             }
0:         }
0:     }
0: 
0:     private static class NullMethodPosition extends MethodPosition
0:     {
0:         public NullMethodPosition()
0:         {
0:             super(-1, -1);
0:         }
0:     }
0: }
============================================================================