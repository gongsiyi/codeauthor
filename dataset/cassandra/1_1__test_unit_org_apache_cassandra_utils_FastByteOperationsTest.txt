1:75508ec: /*
1:75508ec:  * Licensed to the Apache Software Foundation (ASF) under one
1:75508ec:  * or more contributor license agreements.  See the NOTICE file
1:75508ec:  * distributed with this work for additional information
1:75508ec:  * regarding copyright ownership.  The ASF licenses this file
1:75508ec:  * to you under the Apache License, Version 2.0 (the
1:75508ec:  * "License"); you may not use this file except in compliance
1:75508ec:  * with the License.  You may obtain a copy of the License at
1:75508ec:  *
1:75508ec:  *     http://www.apache.org/licenses/LICENSE-2.0
1:75508ec:  *
1:75508ec:  * Unless required by applicable law or agreed to in writing, software
1:75508ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:75508ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:75508ec:  * See the License for the specific language governing permissions and
1:75508ec:  * limitations under the License.
1:75508ec:  */
1:75508ec: package org.apache.cassandra.utils;
1:75508ec: 
1:75508ec: import java.nio.ByteBuffer;
1:75508ec: import java.util.Arrays;
1:75508ec: import java.util.Random;
1:75508ec: 
1:75508ec: import org.junit.Test;
1:75508ec: 
1:75508ec: public class FastByteOperationsTest
1:75508ec: {
1:75508ec: 
1:75508ec:     private static final FastByteOperations.PureJavaOperations PJO = new FastByteOperations.PureJavaOperations();
1:75508ec:     private static final FastByteOperations.UnsafeOperations UO = new FastByteOperations.UnsafeOperations();
1:75508ec:     private static final Random rand = new Random(0);
1:75508ec:     private static final ByteBuffer dbuf1 = ByteBuffer.allocateDirect(150);
1:75508ec:     private static final ByteBuffer dbuf2 = ByteBuffer.allocateDirect(150);
1:75508ec:     private static final ByteBuffer hbuf1 = ByteBuffer.allocate(150);
1:75508ec:     private static final ByteBuffer hbuf2 = ByteBuffer.allocate(150);
1:75508ec: 
1:75508ec:     @Test
1:75508ec:     public void testFastByteCopy()
1:75508ec:     {
1:75508ec:         byte[] bytes1 = new byte[128];
1:75508ec:         byte[] empty = new byte[128];
1:75508ec:         rand.nextBytes(bytes1);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, true), PJO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, false), PJO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, true), PJO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, false), PJO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, true), UO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, false), UO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, true), UO);
1:75508ec:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, false), UO);
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops)
1:75508ec:     {
1:75508ec:         byte[] result = new byte[src.remaining()];
1:75508ec:         ops.copy(src, src.position(), trg, trg.position(), src.remaining());
1:75508ec:         ops.copy(trg, trg.position(), result, 0, trg.remaining());
1:75508ec:         assert firstdiff(canon, result) < 0;
1:75508ec:     }
1:75508ec: 
1:75508ec:     private static int firstdiff(byte[] canon, byte[] test)
1:75508ec:     {
1:75508ec:         for (int i = 0 ; i < canon.length ; i++)
1:75508ec:             if (canon[i] != test[i])
1:75508ec:                 return i;
1:75508ec:         return -1;
1:75508ec:     }
1:75508ec: 
1:75508ec:     @Test
1:75508ec:     public void testFastByteComparisons()
1:75508ec:     {
1:75508ec:         byte[] bytes1 = new byte[128];
1:75508ec:         for (int i = 0 ; i < 1000 ; i++)
1:75508ec:         {
1:75508ec:             rand.nextBytes(bytes1);
1:75508ec:             for (int j = 0 ; j < 16 ; j++)
1:75508ec:             {
1:75508ec:                 byte[] bytes2 = Arrays.copyOf(bytes1, bytes1.length - j);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, 1);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, -1);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, 1);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, -1);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, 128);
1:75508ec:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, 128);
1:75508ec:             }
1:75508ec:         }
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testTwiddleOneByteComparisons(byte[] bytes1, byte[] bytes2, int count, boolean start, int inc)
1:75508ec:     {
1:75508ec:         for (int j = 0 ; j < count ; j++)
1:75508ec:         {
1:75508ec:             int index = start ? j : bytes2.length - (j + 1);
1:75508ec:             bytes2[index] += inc;
1:75508ec:             testComparisons(bytes1, bytes2);
1:75508ec:             bytes2[index] -= inc;
1:75508ec:         }
1:75508ec:     }
1:75508ec: 
1:75508ec:     private static ByteBuffer wrap1(byte[] bytes, boolean direct)
1:75508ec:     {
1:75508ec:         return slice(bytes, direct ? dbuf1 : hbuf1);
1:75508ec:     }
1:75508ec: 
1:75508ec:     private static ByteBuffer wrap2(byte[] bytes, boolean direct)
1:75508ec:     {
1:75508ec:         return slice(bytes, direct ? dbuf2 : hbuf2);
1:75508ec:     }
1:75508ec: 
1:75508ec:     private static ByteBuffer slice(byte[] bytes, ByteBuffer buf)
1:75508ec:     {
1:75508ec:         buf = buf.duplicate();
1:75508ec:         buf.position((buf.limit() - bytes.length) / 2);
1:75508ec:         buf.limit(buf.position() + bytes.length);
1:75508ec:         buf.duplicate().put(bytes);
1:75508ec:         return buf;
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testComparisons(byte[] bytes1, byte[] bytes2)
1:75508ec:     {
1:75508ec:         testComparison(bytes1, bytes2);
1:75508ec:         testComparison(bytes2, bytes1);
1:75508ec:         testComparison(wrap1(bytes1, false), bytes2);
1:75508ec:         testComparison(wrap2(bytes2, false), bytes1);
1:75508ec:         testComparison(wrap1(bytes1, false), wrap2(bytes2, false));
1:75508ec:         testComparison(wrap2(bytes2, false), wrap1(bytes1, false));
1:75508ec:         testComparison(wrap1(bytes1, true), bytes2);
1:75508ec:         testComparison(wrap2(bytes2, true), bytes1);
1:75508ec:         testComparison(wrap1(bytes1, true), wrap2(bytes2, true));
1:75508ec:         testComparison(wrap2(bytes2, true), wrap1(bytes1, true));
1:75508ec:         testComparison(wrap1(bytes1, true), wrap2(bytes2, false));
1:75508ec:         testComparison(wrap1(bytes1, false), wrap2(bytes2, true));
1:75508ec:         testComparison(wrap2(bytes2, true), wrap1(bytes1, false));
1:75508ec:         testComparison(wrap2(bytes2, false), wrap1(bytes1, true));
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testComparison(byte[] bytes1, byte[] bytes2)
1:75508ec:     {
1:75508ec:         assert sameComparisonResult(PJO.compare(bytes1, 0, bytes1.length, bytes2, 0, bytes2.length), UO.compare(bytes1, 0, bytes1.length, bytes2, 0, bytes2.length));
1:75508ec:         assert sameComparisonResult(PJO.compare(bytes1, 10, bytes1.length - 10, bytes2, 10, bytes2.length - 10), UO.compare(bytes1, 10, bytes1.length - 10, bytes2, 10, bytes2.length - 10));
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testComparison(ByteBuffer bytes1, byte[] bytes2)
1:75508ec:     {
1:75508ec:         assert sameComparisonResult(PJO.compare(bytes1, bytes2, 0, bytes2.length), UO.compare(bytes1, bytes2, 0, bytes2.length));
1:75508ec:         assert sameComparisonResult(PJO.compare(bytes1, bytes2, 10, bytes2.length - 10), UO.compare(bytes1, bytes2, 10, bytes2.length - 10));
1:75508ec:     }
1:75508ec: 
1:75508ec:     private void testComparison(ByteBuffer bytes1, ByteBuffer bytes2)
1:75508ec:     {
1:75508ec:         assert sameComparisonResult(PJO.compare(bytes1, bytes2), UO.compare(bytes1, bytes2));
1:75508ec:     }
1:75508ec: 
1:75508ec:     static boolean sameComparisonResult(int exp, int act)
1:75508ec:     {
1:75508ec:         if (exp < 0)
1:75508ec:             return act < 0;
1:75508ec:         if (exp > 0)
1:75508ec:             return act > 0;
1:75508ec:         return act == 0;
1:75508ec:     }
1:75508ec: }
============================================================================
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: import org.junit.Test;
1: 
1: public class FastByteOperationsTest
1: {
1: 
1:     private static final FastByteOperations.PureJavaOperations PJO = new FastByteOperations.PureJavaOperations();
1:     private static final FastByteOperations.UnsafeOperations UO = new FastByteOperations.UnsafeOperations();
1:     private static final Random rand = new Random(0);
1:     private static final ByteBuffer dbuf1 = ByteBuffer.allocateDirect(150);
1:     private static final ByteBuffer dbuf2 = ByteBuffer.allocateDirect(150);
1:     private static final ByteBuffer hbuf1 = ByteBuffer.allocate(150);
1:     private static final ByteBuffer hbuf2 = ByteBuffer.allocate(150);
1: 
1:     @Test
1:     public void testFastByteCopy()
1:     {
1:         byte[] bytes1 = new byte[128];
1:         byte[] empty = new byte[128];
1:         rand.nextBytes(bytes1);
1:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, true), PJO);
1:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, false), PJO);
1:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, true), PJO);
1:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, false), PJO);
1:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, true), UO);
1:         testCopy(bytes1, wrap1(bytes1, true), wrap2(empty, false), UO);
1:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, true), UO);
1:         testCopy(bytes1, wrap1(bytes1, false), wrap2(empty, false), UO);
1:     }
1: 
1:     private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops)
1:     {
1:         byte[] result = new byte[src.remaining()];
1:         ops.copy(src, src.position(), trg, trg.position(), src.remaining());
1:         ops.copy(trg, trg.position(), result, 0, trg.remaining());
1:         assert firstdiff(canon, result) < 0;
1:     }
1: 
1:     private static int firstdiff(byte[] canon, byte[] test)
1:     {
1:         for (int i = 0 ; i < canon.length ; i++)
1:             if (canon[i] != test[i])
1:                 return i;
1:         return -1;
1:     }
1: 
1:     @Test
1:     public void testFastByteComparisons()
1:     {
1:         byte[] bytes1 = new byte[128];
1:         for (int i = 0 ; i < 1000 ; i++)
1:         {
1:             rand.nextBytes(bytes1);
1:             for (int j = 0 ; j < 16 ; j++)
1:             {
1:                 byte[] bytes2 = Arrays.copyOf(bytes1, bytes1.length - j);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, 1);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, -1);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, 1);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, -1);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, true, 128);
1:                 testTwiddleOneByteComparisons(bytes1, bytes2, 16, false, 128);
1:             }
1:         }
1:     }
1: 
1:     private void testTwiddleOneByteComparisons(byte[] bytes1, byte[] bytes2, int count, boolean start, int inc)
1:     {
1:         for (int j = 0 ; j < count ; j++)
1:         {
1:             int index = start ? j : bytes2.length - (j + 1);
1:             bytes2[index] += inc;
1:             testComparisons(bytes1, bytes2);
1:             bytes2[index] -= inc;
1:         }
1:     }
1: 
1:     private static ByteBuffer wrap1(byte[] bytes, boolean direct)
1:     {
1:         return slice(bytes, direct ? dbuf1 : hbuf1);
1:     }
1: 
1:     private static ByteBuffer wrap2(byte[] bytes, boolean direct)
1:     {
1:         return slice(bytes, direct ? dbuf2 : hbuf2);
1:     }
1: 
1:     private static ByteBuffer slice(byte[] bytes, ByteBuffer buf)
1:     {
1:         buf = buf.duplicate();
1:         buf.position((buf.limit() - bytes.length) / 2);
1:         buf.limit(buf.position() + bytes.length);
1:         buf.duplicate().put(bytes);
1:         return buf;
1:     }
1: 
1:     private void testComparisons(byte[] bytes1, byte[] bytes2)
1:     {
1:         testComparison(bytes1, bytes2);
1:         testComparison(bytes2, bytes1);
1:         testComparison(wrap1(bytes1, false), bytes2);
1:         testComparison(wrap2(bytes2, false), bytes1);
1:         testComparison(wrap1(bytes1, false), wrap2(bytes2, false));
1:         testComparison(wrap2(bytes2, false), wrap1(bytes1, false));
1:         testComparison(wrap1(bytes1, true), bytes2);
1:         testComparison(wrap2(bytes2, true), bytes1);
1:         testComparison(wrap1(bytes1, true), wrap2(bytes2, true));
1:         testComparison(wrap2(bytes2, true), wrap1(bytes1, true));
1:         testComparison(wrap1(bytes1, true), wrap2(bytes2, false));
1:         testComparison(wrap1(bytes1, false), wrap2(bytes2, true));
1:         testComparison(wrap2(bytes2, true), wrap1(bytes1, false));
1:         testComparison(wrap2(bytes2, false), wrap1(bytes1, true));
1:     }
1: 
1:     private void testComparison(byte[] bytes1, byte[] bytes2)
1:     {
1:         assert sameComparisonResult(PJO.compare(bytes1, 0, bytes1.length, bytes2, 0, bytes2.length), UO.compare(bytes1, 0, bytes1.length, bytes2, 0, bytes2.length));
1:         assert sameComparisonResult(PJO.compare(bytes1, 10, bytes1.length - 10, bytes2, 10, bytes2.length - 10), UO.compare(bytes1, 10, bytes1.length - 10, bytes2, 10, bytes2.length - 10));
1:     }
1: 
1:     private void testComparison(ByteBuffer bytes1, byte[] bytes2)
1:     {
1:         assert sameComparisonResult(PJO.compare(bytes1, bytes2, 0, bytes2.length), UO.compare(bytes1, bytes2, 0, bytes2.length));
1:         assert sameComparisonResult(PJO.compare(bytes1, bytes2, 10, bytes2.length - 10), UO.compare(bytes1, bytes2, 10, bytes2.length - 10));
1:     }
1: 
1:     private void testComparison(ByteBuffer bytes1, ByteBuffer bytes2)
1:     {
1:         assert sameComparisonResult(PJO.compare(bytes1, bytes2), UO.compare(bytes1, bytes2));
1:     }
1: 
1:     static boolean sameComparisonResult(int exp, int act)
1:     {
1:         if (exp < 0)
1:             return act < 0;
1:         if (exp > 0)
1:             return act > 0;
1:         return act == 0;
1:     }
1: }
============================================================================