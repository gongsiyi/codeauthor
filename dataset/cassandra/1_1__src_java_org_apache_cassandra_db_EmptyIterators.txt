1:6094974: /*
1:6094974: * Licensed to the Apache Software Foundation (ASF) under one
1:6094974: * or more contributor license agreements.  See the NOTICE file
1:6094974: * distributed with this work for additional information
1:6094974: * regarding copyright ownership.  The ASF licenses this file
1:6094974: * to you under the Apache License, Version 2.0 (the
1:6094974: * "License"); you may not use this file except in compliance
1:6094974: * with the License.  You may obtain a copy of the License at
1:6094974: *
1:6094974: *    http://www.apache.org/licenses/LICENSE-2.0
1:6094974: *
1:6094974: * Unless required by applicable law or agreed to in writing,
1:6094974: * software distributed under the License is distributed on an
1:6094974: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6094974: * KIND, either express or implied.  See the License for the
1:6094974: * specific language governing permissions and limitations
1:6094974: * under the License.
1:6094974: */
1:6094974: package org.apache.cassandra.db;
1:6094974: 
1:6094974: import java.util.NoSuchElementException;
1:6094974: 
1:6094974: import org.apache.cassandra.config.CFMetaData;
1:6094974: import org.apache.cassandra.db.partitions.BasePartitionIterator;
1:6094974: import org.apache.cassandra.db.partitions.PartitionIterator;
1:6094974: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1:6094974: import org.apache.cassandra.db.rows.*;
1:6094974: 
1:6094974: public class EmptyIterators
1:6094974: {
1:6094974: 
1:6094974:     private static class EmptyBasePartitionIterator<R extends BaseRowIterator<?>> implements BasePartitionIterator<R>
1:6094974:     {
1:6094974:         EmptyBasePartitionIterator()
1:6094974:         {
1:6094974:         }
1:6094974: 
1:6094974:         public void close()
1:6094974:         {
1:6094974:         }
1:6094974: 
1:6094974:         public boolean hasNext()
1:6094974:         {
1:6094974:             return false;
1:6094974:         }
1:6094974: 
1:6094974:         public R next()
1:6094974:         {
1:6094974:             throw new NoSuchElementException();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static class EmptyUnfilteredPartitionIterator extends EmptyBasePartitionIterator<UnfilteredRowIterator> implements UnfilteredPartitionIterator
1:6094974:     {
1:6094974:         final CFMetaData metadata;
1:6094974:         final boolean isForThrift;
1:6094974: 
1:6094974:         public EmptyUnfilteredPartitionIterator(CFMetaData metadata, boolean isForThrift)
1:6094974:         {
1:6094974:             this.metadata = metadata;
1:6094974:             this.isForThrift = isForThrift;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isForThrift()
1:6094974:         {
1:6094974:             return isForThrift;
1:6094974:         }
1:6094974: 
1:6094974:         public CFMetaData metadata()
1:6094974:         {
1:6094974:             return metadata;
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static class EmptyPartitionIterator extends EmptyBasePartitionIterator<RowIterator> implements PartitionIterator
1:6094974:     {
1:6094974:         public static final EmptyPartitionIterator instance = new EmptyPartitionIterator();
1:6094974:         private EmptyPartitionIterator()
1:6094974:         {
1:6094974:             super();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static class EmptyBaseRowIterator<U extends Unfiltered> implements BaseRowIterator<U>
1:6094974:     {
1:6094974:         final PartitionColumns columns;
1:6094974:         final CFMetaData metadata;
1:6094974:         final DecoratedKey partitionKey;
1:6094974:         final boolean isReverseOrder;
1:6094974:         final Row staticRow;
1:6094974: 
1:6094974:         EmptyBaseRowIterator(PartitionColumns columns, CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow)
1:6094974:         {
1:6094974:             this.columns = columns;
1:6094974:             this.metadata = metadata;
1:6094974:             this.partitionKey = partitionKey;
1:6094974:             this.isReverseOrder = isReverseOrder;
1:6094974:             this.staticRow = staticRow;
1:6094974:         }
1:6094974: 
1:6094974:         public CFMetaData metadata()
1:6094974:         {
1:6094974:             return metadata;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isReverseOrder()
1:6094974:         {
1:6094974:             return isReverseOrder;
1:6094974:         }
1:6094974: 
1:6094974:         public PartitionColumns columns()
1:6094974:         {
1:6094974:             return columns;
1:6094974:         }
1:6094974: 
1:6094974:         public DecoratedKey partitionKey()
1:6094974:         {
1:6094974:             return partitionKey;
1:6094974:         }
1:6094974: 
1:6094974:         public Row staticRow()
1:6094974:         {
1:6094974:             return staticRow;
1:6094974:         }
1:6094974: 
1:6094974:         public void close()
1:6094974:         {
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isEmpty()
1:6094974:         {
1:6094974:             return staticRow == Rows.EMPTY_STATIC_ROW;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean hasNext()
1:6094974:         {
1:6094974:             return false;
1:6094974:         }
1:6094974: 
1:6094974:         public U next()
1:6094974:         {
1:6094974:             throw new NoSuchElementException();
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static class EmptyUnfilteredRowIterator extends EmptyBaseRowIterator<Unfiltered> implements UnfilteredRowIterator
1:6094974:     {
1:6094974:         final DeletionTime partitionLevelDeletion;
1:6094974:         public EmptyUnfilteredRowIterator(PartitionColumns columns, CFMetaData metadata, DecoratedKey partitionKey,
1:6094974:                                           boolean isReverseOrder, Row staticRow, DeletionTime partitionLevelDeletion)
1:6094974:         {
1:6094974:             super(columns, metadata, partitionKey, isReverseOrder, staticRow);
1:6094974:             this.partitionLevelDeletion = partitionLevelDeletion;
1:6094974:         }
1:6094974: 
1:6094974:         public boolean isEmpty()
1:6094974:         {
1:6094974:             return partitionLevelDeletion == DeletionTime.LIVE && super.isEmpty();
1:6094974:         }
1:6094974: 
1:6094974:         public DeletionTime partitionLevelDeletion()
1:6094974:         {
1:6094974:             return partitionLevelDeletion;
1:6094974:         }
1:6094974: 
1:6094974:         public EncodingStats stats()
1:6094974:         {
1:6094974:             return EncodingStats.NO_STATS;
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     private static class EmptyRowIterator extends EmptyBaseRowIterator<Row> implements RowIterator
1:6094974:     {
1:6094974:         public EmptyRowIterator(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow)
1:6094974:         {
1:6094974:             super(PartitionColumns.NONE, metadata, partitionKey, isReverseOrder, staticRow);
1:6094974:         }
1:6094974:     }
1:6094974: 
1:6094974:     public static UnfilteredPartitionIterator unfilteredPartition(CFMetaData metadata, boolean isForThrift)
1:6094974:     {
1:6094974:         return new EmptyUnfilteredPartitionIterator(metadata, isForThrift);
1:6094974:     }
1:6094974: 
1:6094974:     public static PartitionIterator partition()
1:6094974:     {
1:6094974:         return EmptyPartitionIterator.instance;
1:6094974:     }
1:6094974: 
1:6094974:     // this method is the only one that can return a non-empty iterator, but it still has no rows, so it seems cleanest to keep it here
1:6094974:     public static UnfilteredRowIterator unfilteredRow(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow, DeletionTime partitionDeletion)
1:6094974:     {
1:6094974:         PartitionColumns columns = PartitionColumns.NONE;
1:6094974:         if (!staticRow.isEmpty())
1:6094974:             columns = new PartitionColumns(Columns.from(staticRow.columns()), Columns.NONE);
1:6094974:         else
1:6094974:             staticRow = Rows.EMPTY_STATIC_ROW;
1:6094974: 
1:6094974:         if (partitionDeletion.isLive())
1:6094974:             partitionDeletion = DeletionTime.LIVE;
1:6094974: 
1:6094974:         return new EmptyUnfilteredRowIterator(columns, metadata, partitionKey, isReverseOrder, staticRow, partitionDeletion);
1:6094974:     }
1:6094974: 
1:6094974:     public static UnfilteredRowIterator unfilteredRow(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder)
1:6094974:     {
1:6094974:         return new EmptyUnfilteredRowIterator(PartitionColumns.NONE, metadata, partitionKey, isReverseOrder, Rows.EMPTY_STATIC_ROW, DeletionTime.LIVE);
1:6094974:     }
1:6094974: 
1:6094974:     public static RowIterator row(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder)
1:6094974:     {
1:6094974:         return new EmptyRowIterator(metadata, partitionKey, isReverseOrder, Rows.EMPTY_STATIC_ROW);
1:6094974:     }
1:6094974: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:6094974
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
1: import java.util.NoSuchElementException;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.partitions.BasePartitionIterator;
1: import org.apache.cassandra.db.partitions.PartitionIterator;
1: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1: import org.apache.cassandra.db.rows.*;
1: 
1: public class EmptyIterators
1: {
1: 
1:     private static class EmptyBasePartitionIterator<R extends BaseRowIterator<?>> implements BasePartitionIterator<R>
1:     {
1:         EmptyBasePartitionIterator()
1:         {
1:         }
1: 
1:         public void close()
1:         {
1:         }
1: 
1:         public boolean hasNext()
1:         {
1:             return false;
1:         }
1: 
1:         public R next()
1:         {
1:             throw new NoSuchElementException();
1:         }
1:     }
1: 
1:     private static class EmptyUnfilteredPartitionIterator extends EmptyBasePartitionIterator<UnfilteredRowIterator> implements UnfilteredPartitionIterator
1:     {
1:         final CFMetaData metadata;
1:         final boolean isForThrift;
1: 
1:         public EmptyUnfilteredPartitionIterator(CFMetaData metadata, boolean isForThrift)
1:         {
1:             this.metadata = metadata;
1:             this.isForThrift = isForThrift;
1:         }
1: 
1:         public boolean isForThrift()
1:         {
1:             return isForThrift;
1:         }
1: 
1:         public CFMetaData metadata()
1:         {
1:             return metadata;
1:         }
1:     }
1: 
1:     private static class EmptyPartitionIterator extends EmptyBasePartitionIterator<RowIterator> implements PartitionIterator
1:     {
1:         public static final EmptyPartitionIterator instance = new EmptyPartitionIterator();
1:         private EmptyPartitionIterator()
1:         {
1:             super();
1:         }
1:     }
1: 
1:     private static class EmptyBaseRowIterator<U extends Unfiltered> implements BaseRowIterator<U>
1:     {
1:         final PartitionColumns columns;
1:         final CFMetaData metadata;
1:         final DecoratedKey partitionKey;
1:         final boolean isReverseOrder;
1:         final Row staticRow;
1: 
1:         EmptyBaseRowIterator(PartitionColumns columns, CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow)
1:         {
1:             this.columns = columns;
1:             this.metadata = metadata;
1:             this.partitionKey = partitionKey;
1:             this.isReverseOrder = isReverseOrder;
1:             this.staticRow = staticRow;
1:         }
1: 
1:         public CFMetaData metadata()
1:         {
1:             return metadata;
1:         }
1: 
1:         public boolean isReverseOrder()
1:         {
1:             return isReverseOrder;
1:         }
1: 
1:         public PartitionColumns columns()
1:         {
1:             return columns;
1:         }
1: 
1:         public DecoratedKey partitionKey()
1:         {
1:             return partitionKey;
1:         }
1: 
1:         public Row staticRow()
1:         {
1:             return staticRow;
1:         }
1: 
1:         public void close()
1:         {
1:         }
1: 
1:         public boolean isEmpty()
1:         {
1:             return staticRow == Rows.EMPTY_STATIC_ROW;
1:         }
1: 
1:         public boolean hasNext()
1:         {
1:             return false;
1:         }
1: 
1:         public U next()
1:         {
1:             throw new NoSuchElementException();
1:         }
1:     }
1: 
1:     private static class EmptyUnfilteredRowIterator extends EmptyBaseRowIterator<Unfiltered> implements UnfilteredRowIterator
1:     {
1:         final DeletionTime partitionLevelDeletion;
1:         public EmptyUnfilteredRowIterator(PartitionColumns columns, CFMetaData metadata, DecoratedKey partitionKey,
1:                                           boolean isReverseOrder, Row staticRow, DeletionTime partitionLevelDeletion)
1:         {
1:             super(columns, metadata, partitionKey, isReverseOrder, staticRow);
1:             this.partitionLevelDeletion = partitionLevelDeletion;
1:         }
1: 
1:         public boolean isEmpty()
1:         {
1:             return partitionLevelDeletion == DeletionTime.LIVE && super.isEmpty();
1:         }
1: 
1:         public DeletionTime partitionLevelDeletion()
1:         {
1:             return partitionLevelDeletion;
1:         }
1: 
1:         public EncodingStats stats()
1:         {
1:             return EncodingStats.NO_STATS;
1:         }
1:     }
1: 
1:     private static class EmptyRowIterator extends EmptyBaseRowIterator<Row> implements RowIterator
1:     {
1:         public EmptyRowIterator(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow)
1:         {
1:             super(PartitionColumns.NONE, metadata, partitionKey, isReverseOrder, staticRow);
1:         }
1:     }
1: 
1:     public static UnfilteredPartitionIterator unfilteredPartition(CFMetaData metadata, boolean isForThrift)
1:     {
1:         return new EmptyUnfilteredPartitionIterator(metadata, isForThrift);
1:     }
1: 
1:     public static PartitionIterator partition()
1:     {
1:         return EmptyPartitionIterator.instance;
1:     }
1: 
1:     // this method is the only one that can return a non-empty iterator, but it still has no rows, so it seems cleanest to keep it here
1:     public static UnfilteredRowIterator unfilteredRow(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder, Row staticRow, DeletionTime partitionDeletion)
1:     {
1:         PartitionColumns columns = PartitionColumns.NONE;
1:         if (!staticRow.isEmpty())
1:             columns = new PartitionColumns(Columns.from(staticRow.columns()), Columns.NONE);
1:         else
1:             staticRow = Rows.EMPTY_STATIC_ROW;
1: 
1:         if (partitionDeletion.isLive())
1:             partitionDeletion = DeletionTime.LIVE;
1: 
1:         return new EmptyUnfilteredRowIterator(columns, metadata, partitionKey, isReverseOrder, staticRow, partitionDeletion);
1:     }
1: 
1:     public static UnfilteredRowIterator unfilteredRow(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder)
1:     {
1:         return new EmptyUnfilteredRowIterator(PartitionColumns.NONE, metadata, partitionKey, isReverseOrder, Rows.EMPTY_STATIC_ROW, DeletionTime.LIVE);
1:     }
1: 
1:     public static RowIterator row(CFMetaData metadata, DecoratedKey partitionKey, boolean isReverseOrder)
1:     {
1:         return new EmptyRowIterator(metadata, partitionKey, isReverseOrder, Rows.EMPTY_STATIC_ROW);
1:     }
1: }
============================================================================