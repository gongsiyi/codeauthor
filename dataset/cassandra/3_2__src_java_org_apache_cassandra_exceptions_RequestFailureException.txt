1:c6525da: /*
1:c6525da:  * Licensed to the Apache Software Foundation (ASF) under one
1:c6525da:  * or more contributor license agreements.  See the NOTICE file
1:c6525da:  * distributed with this work for additional information
1:c6525da:  * regarding copyright ownership.  The ASF licenses this file
1:c6525da:  * to you under the Apache License, Version 2.0 (the
1:c6525da:  * "License"); you may not use this file except in compliance
1:c6525da:  * with the License.  You may obtain a copy of the License at
1:c6525da:  *
1:c6525da:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c6525da:  *
1:c6525da:  * Unless required by applicable law or agreed to in writing, software
1:c6525da:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c6525da:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c6525da:  * See the License for the specific language governing permissions and
1:c6525da:  * limitations under the License.
1:c6525da:  */
1:c6525da: package org.apache.cassandra.exceptions;
1:c6525da: 
1:39df31a: import java.net.InetAddress;
1:39df31a: import java.util.HashMap;
1:39df31a: import java.util.Map;
1:39df31a: 
1:c6525da: import org.apache.cassandra.db.ConsistencyLevel;
1:c6525da: 
1:c6525da: public class RequestFailureException extends RequestExecutionException
1:c6525da: {
1:c6525da:     public final ConsistencyLevel consistency;
1:c6525da:     public final int received;
1:c6525da:     public final int blockFor;
1:39df31a:     public final Map<InetAddress, RequestFailureReason> failureReasonByEndpoint;
1:c6525da: 
1:39df31a:     protected RequestFailureException(ExceptionCode code, ConsistencyLevel consistency, int received, int blockFor, Map<InetAddress, RequestFailureReason> failureReasonByEndpoint)
1:c6525da:     {
1:39df31a:         super(code, String.format("Operation failed - received %d responses and %d failures", received, failureReasonByEndpoint.size()));
1:c6525da:         this.consistency = consistency;
1:c6525da:         this.received = received;
1:c6525da:         this.blockFor = blockFor;
1:39df31a: 
1:39df31a:         // It is possible for the passed in failureReasonByEndpoint map
1:39df31a:         // to have new entries added after this exception is constructed
1:39df31a:         // (e.g. a delayed failure response from a replica). So to be safe
1:39df31a:         // we make a copy of the map at this point to ensure it will not be
1:39df31a:         // modified any further. Otherwise, there could be implications when
1:39df31a:         // we encode this map for transport.
1:39df31a:         this.failureReasonByEndpoint = new HashMap<>(failureReasonByEndpoint);
1:c6525da:     }
1:c6525da: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1:     public final Map<InetAddress, RequestFailureReason> failureReasonByEndpoint;
1:     protected RequestFailureException(ExceptionCode code, ConsistencyLevel consistency, int received, int blockFor, Map<InetAddress, RequestFailureReason> failureReasonByEndpoint)
1:         super(code, String.format("Operation failed - received %d responses and %d failures", received, failureReasonByEndpoint.size()));
1: 
1:         // It is possible for the passed in failureReasonByEndpoint map
1:         // to have new entries added after this exception is constructed
1:         // (e.g. a delayed failure response from a replica). So to be safe
1:         // we make a copy of the map at this point to ensure it will not be
1:         // modified any further. Otherwise, there could be implications when
1:         // we encode this map for transport.
1:         this.failureReasonByEndpoint = new HashMap<>(failureReasonByEndpoint);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:c059a56
/////////////////////////////////////////////////////////////////////////
0:         super(code, String.format("Operation failed - received %d responses and %d failures", received, failures));
author:Christian Spriegel
-------------------------------------------------------------------------------
commit:c6525da
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.exceptions;
1: 
1: import org.apache.cassandra.db.ConsistencyLevel;
1: 
1: public class RequestFailureException extends RequestExecutionException
1: {
1:     public final ConsistencyLevel consistency;
1:     public final int received;
0:     public final int failures;
1:     public final int blockFor;
1: 
0:     protected RequestFailureException(ExceptionCode code, ConsistencyLevel consistency, int received, int failures, int blockFor)
1:     {
0:         super(code, String.format("Operation failed - received %d responses and %d failures.", received, failures));
1:         this.consistency = consistency;
1:         this.received = received;
0:         this.failures = failures;
1:         this.blockFor = blockFor;
1:     }
1: }
============================================================================