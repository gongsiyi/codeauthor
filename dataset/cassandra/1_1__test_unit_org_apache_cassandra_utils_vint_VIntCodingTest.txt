1:1491a40: /*
1:1491a40: * Licensed to the Apache Software Foundation (ASF) under one
1:1491a40: * or more contributor license agreements.  See the NOTICE file
1:1491a40: * distributed with this work for additional information
1:1491a40: * regarding copyright ownership.  The ASF licenses this file
1:1491a40: * to you under the Apache License, Version 2.0 (the
1:1491a40: * "License"); you may not use this file except in compliance
1:1491a40: * with the License.  You may obtain a copy of the License at
1:1491a40: *
1:1491a40: *    http://www.apache.org/licenses/LICENSE-2.0
1:1491a40: *
1:1491a40: * Unless required by applicable law or agreed to in writing,
1:1491a40: * software distributed under the License is distributed on an
1:1491a40: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1491a40: * KIND, either express or implied.  See the License for the
1:1491a40: * specific language governing permissions and limitations
1:1491a40: * under the License.
1:1491a40: */
1:1491a40: package org.apache.cassandra.utils.vint;
1:1491a40: 
1:1491a40: import java.io.ByteArrayOutputStream;
1:1491a40: import java.io.DataOutputStream;
1:1491a40: 
1:1491a40: import org.apache.cassandra.io.util.DataOutputBuffer;
1:1491a40: import org.junit.Test;
1:1491a40: 
1:1491a40: import junit.framework.Assert;
1:1491a40: 
1:1491a40: public class VIntCodingTest
1:1491a40: {
1:1491a40: 
1:1491a40:     @Test
1:1491a40:     public void testComputeSize() throws Exception
1:1491a40:     {
1:1491a40:         assertEncodedAtExpectedSize(0L, 1);
1:1491a40: 
1:1491a40:         for (int size = 1 ; size < 8 ; size++)
1:1491a40:         {
1:1491a40:             assertEncodedAtExpectedSize((1L << 7 * size) - 1, size);
1:1491a40:             assertEncodedAtExpectedSize(1L << 7 * size, size + 1);
1:1491a40:         }
1:1491a40:         Assert.assertEquals(9, VIntCoding.computeUnsignedVIntSize(Long.MAX_VALUE));
1:1491a40:     }
1:1491a40: 
1:1491a40:     private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception
1:1491a40:     {
1:1491a40:         Assert.assertEquals(expectedSize, VIntCoding.computeUnsignedVIntSize(value));
1:1491a40:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:1491a40:         DataOutputStream dos = new DataOutputStream(baos);
1:1491a40:         VIntCoding.writeUnsignedVInt(value, dos);
1:1491a40:         dos.flush();
1:1491a40:         Assert.assertEquals( expectedSize, baos.toByteArray().length);
1:1491a40: 
1:1491a40:         DataOutputBuffer dob = new DataOutputBuffer();
1:1491a40:         dob.writeUnsignedVInt(value);
1:1491a40:         Assert.assertEquals( expectedSize, dob.buffer().remaining());
1:1491a40:         dob.close();
1:1491a40:     }
1:1491a40: 
1:1491a40:     @Test
1:1491a40:     public void testReadExtraBytesCount()
1:1491a40:     {
1:1491a40:         for (int i = 1 ; i < 8 ; i++)
1:1491a40:             Assert.assertEquals(i, VIntCoding.numberOfExtraBytesToRead((byte) ((0xFF << (8 - i)) & 0xFF)));
1:1491a40:     }
1:1491a40: 
1:1491a40:     /*
1:1491a40:      * Quick sanity check that 1 byte encodes up to 127 as expected
1:1491a40:      */
1:1491a40:     @Test
1:1491a40:     public void testOneByteCapacity() throws Exception {
1:1491a40:         int biggestOneByte = 127;
1:1491a40: 
1:1491a40:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:1491a40:         DataOutputStream dos = new DataOutputStream(baos);
1:1491a40:         VIntCoding.writeUnsignedVInt(biggestOneByte, dos);
1:1491a40:         dos.flush();
1:1491a40:         Assert.assertEquals( 1, baos.toByteArray().length);
1:1491a40: 
1:1491a40:         DataOutputBuffer dob = new DataOutputBuffer();
1:1491a40:         dob.writeUnsignedVInt(biggestOneByte);
1:1491a40:         Assert.assertEquals( 1, dob.buffer().remaining());
1:1491a40:         dob.close();
1:1491a40:     }
1:1491a40: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1491a40
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.vint;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: 
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: 
1: public class VIntCodingTest
1: {
1: 
1:     @Test
1:     public void testComputeSize() throws Exception
1:     {
1:         assertEncodedAtExpectedSize(0L, 1);
1: 
1:         for (int size = 1 ; size < 8 ; size++)
1:         {
1:             assertEncodedAtExpectedSize((1L << 7 * size) - 1, size);
1:             assertEncodedAtExpectedSize(1L << 7 * size, size + 1);
1:         }
1:         Assert.assertEquals(9, VIntCoding.computeUnsignedVIntSize(Long.MAX_VALUE));
1:     }
1: 
1:     private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception
1:     {
1:         Assert.assertEquals(expectedSize, VIntCoding.computeUnsignedVIntSize(value));
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         VIntCoding.writeUnsignedVInt(value, dos);
1:         dos.flush();
1:         Assert.assertEquals( expectedSize, baos.toByteArray().length);
1: 
1:         DataOutputBuffer dob = new DataOutputBuffer();
1:         dob.writeUnsignedVInt(value);
1:         Assert.assertEquals( expectedSize, dob.buffer().remaining());
1:         dob.close();
1:     }
1: 
1:     @Test
1:     public void testReadExtraBytesCount()
1:     {
1:         for (int i = 1 ; i < 8 ; i++)
1:             Assert.assertEquals(i, VIntCoding.numberOfExtraBytesToRead((byte) ((0xFF << (8 - i)) & 0xFF)));
1:     }
1: 
1:     /*
1:      * Quick sanity check that 1 byte encodes up to 127 as expected
1:      */
1:     @Test
1:     public void testOneByteCapacity() throws Exception {
1:         int biggestOneByte = 127;
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         VIntCoding.writeUnsignedVInt(biggestOneByte, dos);
1:         dos.flush();
1:         Assert.assertEquals( 1, baos.toByteArray().length);
1: 
1:         DataOutputBuffer dob = new DataOutputBuffer();
1:         dob.writeUnsignedVInt(biggestOneByte);
1:         Assert.assertEquals( 1, dob.buffer().remaining());
1:         dob.close();
1:     }
1: }
============================================================================