1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.IOException;
1:72790dc: import java.util.*;
1:72790dc: import java.util.stream.Collectors;
1:72790dc: 
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Range Union Iterator is used to return sorted stream of elements from multiple RangeIterator instances.
1:72790dc:  *
1:72790dc:  * PriorityQueue is used as a sorting mechanism for the ranges, where each computeNext() operation would poll
1:72790dc:  * from the queue (and push when done), which returns range that contains the smallest element, because
1:72790dc:  * sorting is done on the moving window of range iteration {@link RangeIterator#getCurrent()}. Once retrieved
1:72790dc:  * the smallest element (return candidate) is attempted to be merged with other ranges, because there could
1:72790dc:  * be equal elements in adjacent ranges, such ranges are poll'ed only if their {@link RangeIterator#getCurrent()}
1:72790dc:  * equals to the return candidate.
1:72790dc:  *
1:72790dc:  * @param <K> The type used to sort ranges.
1:72790dc:  * @param <D> The container type which is going to be returned by {@link Iterator#next()}.
1:72790dc:  */
1:733d1ee: @SuppressWarnings("resource")
1:72790dc: public class RangeUnionIterator<K extends Comparable<K>, D extends CombinedValue<K>> extends RangeIterator<K, D>
1:72790dc: {
1:72790dc:     private final PriorityQueue<RangeIterator<K, D>> ranges;
1:72790dc: 
1:72790dc:     private RangeUnionIterator(Builder.Statistics<K, D> statistics, PriorityQueue<RangeIterator<K, D>> ranges)
1:72790dc:     {
1:72790dc:         super(statistics);
1:72790dc:         this.ranges = ranges;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public D computeNext()
1:72790dc:     {
1:72790dc:         RangeIterator<K, D> head = null;
1:72790dc: 
1:72790dc:         while (!ranges.isEmpty())
1:72790dc:         {
1:72790dc:             head = ranges.poll();
1:72790dc:             if (head.hasNext())
1:72790dc:                 break;
1:72790dc: 
1:72790dc:             FileUtils.closeQuietly(head);
1:72790dc:         }
1:72790dc: 
1:72790dc:         if (head == null || !head.hasNext())
1:72790dc:             return endOfData();
1:72790dc: 
1:72790dc:         D candidate = head.next();
1:72790dc: 
1:72790dc:         List<RangeIterator<K, D>> processedRanges = new ArrayList<>();
1:72790dc: 
1:72790dc:         if (head.hasNext())
1:72790dc:             processedRanges.add(head);
1:72790dc:         else
1:72790dc:             FileUtils.closeQuietly(head);
1:72790dc: 
1:72790dc:         while (!ranges.isEmpty())
1:72790dc:         {
1:72790dc:             // peek here instead of poll is an optimization
1:72790dc:             // so we can re-insert less ranges back if candidate
1:72790dc:             // is less than head of the current range.
1:72790dc:             RangeIterator<K, D> range = ranges.peek();
1:72790dc: 
1:72790dc:             int cmp = candidate.get().compareTo(range.getCurrent());
1:72790dc: 
1:72790dc:             assert cmp <= 0;
1:72790dc: 
1:72790dc:             if (cmp < 0)
1:72790dc:             {
1:72790dc:                 break; // candidate is smaller than next token, return immediately
1:72790dc:             }
1:72790dc:             else if (cmp == 0)
1:72790dc:             {
1:72790dc:                 candidate.merge(range.next()); // consume and merge
1:72790dc: 
1:72790dc:                 range = ranges.poll();
1:72790dc:                 // re-prioritize changed range
1:72790dc: 
1:72790dc:                 if (range.hasNext())
1:72790dc:                     processedRanges.add(range);
1:72790dc:                 else
1:72790dc:                     FileUtils.closeQuietly(range);
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:72790dc:         ranges.addAll(processedRanges);
1:72790dc:         return candidate;
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected void performSkipTo(K nextToken)
1:72790dc:     {
1:72790dc:         List<RangeIterator<K, D>> changedRanges = new ArrayList<>();
1:72790dc: 
1:72790dc:         while (!ranges.isEmpty())
1:72790dc:         {
1:72790dc:             if (ranges.peek().getCurrent().compareTo(nextToken) >= 0)
1:72790dc:                 break;
1:72790dc: 
1:72790dc:             RangeIterator<K, D> head = ranges.poll();
1:72790dc: 
1:72790dc:             if (head.getMaximum().compareTo(nextToken) >= 0)
1:72790dc:             {
1:72790dc:                 head.skipTo(nextToken);
1:72790dc:                 changedRanges.add(head);
1:72790dc:                 continue;
1:72790dc:             }
1:72790dc: 
1:72790dc:             FileUtils.closeQuietly(head);
1:72790dc:         }
1:72790dc: 
1:72790dc:         ranges.addAll(changedRanges.stream().collect(Collectors.toList()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void close() throws IOException
1:72790dc:     {
1:72790dc:         ranges.forEach(FileUtils::closeQuietly);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static <K extends Comparable<K>, D extends CombinedValue<K>> Builder<K, D> builder()
1:72790dc:     {
1:72790dc:         return new Builder<>();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static <K extends Comparable<K>, D extends CombinedValue<K>> RangeIterator<K, D> build(List<RangeIterator<K, D>> tokens)
1:72790dc:     {
1:72790dc:         return new Builder<K, D>().add(tokens).build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static class Builder<K extends Comparable<K>, D extends CombinedValue<K>> extends RangeIterator.Builder<K, D>
1:72790dc:     {
1:72790dc:         public Builder()
1:72790dc:         {
1:72790dc:             super(IteratorType.UNION);
1:72790dc:         }
1:72790dc: 
1:72790dc:         protected RangeIterator<K, D> buildIterator()
1:72790dc:         {
1:72790dc:             return new RangeUnionIterator<>(statistics, ranges);
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:733d1ee
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings("resource")
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.IOException;
1: import java.util.*;
1: import java.util.stream.Collectors;
1: 
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: /**
1:  * Range Union Iterator is used to return sorted stream of elements from multiple RangeIterator instances.
1:  *
1:  * PriorityQueue is used as a sorting mechanism for the ranges, where each computeNext() operation would poll
1:  * from the queue (and push when done), which returns range that contains the smallest element, because
1:  * sorting is done on the moving window of range iteration {@link RangeIterator#getCurrent()}. Once retrieved
1:  * the smallest element (return candidate) is attempted to be merged with other ranges, because there could
1:  * be equal elements in adjacent ranges, such ranges are poll'ed only if their {@link RangeIterator#getCurrent()}
1:  * equals to the return candidate.
1:  *
1:  * @param <K> The type used to sort ranges.
1:  * @param <D> The container type which is going to be returned by {@link Iterator#next()}.
1:  */
1: public class RangeUnionIterator<K extends Comparable<K>, D extends CombinedValue<K>> extends RangeIterator<K, D>
1: {
1:     private final PriorityQueue<RangeIterator<K, D>> ranges;
1: 
1:     private RangeUnionIterator(Builder.Statistics<K, D> statistics, PriorityQueue<RangeIterator<K, D>> ranges)
1:     {
1:         super(statistics);
1:         this.ranges = ranges;
1:     }
1: 
1:     public D computeNext()
1:     {
1:         RangeIterator<K, D> head = null;
1: 
1:         while (!ranges.isEmpty())
1:         {
1:             head = ranges.poll();
1:             if (head.hasNext())
1:                 break;
1: 
1:             FileUtils.closeQuietly(head);
1:         }
1: 
1:         if (head == null || !head.hasNext())
1:             return endOfData();
1: 
1:         D candidate = head.next();
1: 
1:         List<RangeIterator<K, D>> processedRanges = new ArrayList<>();
1: 
1:         if (head.hasNext())
1:             processedRanges.add(head);
1:         else
1:             FileUtils.closeQuietly(head);
1: 
1:         while (!ranges.isEmpty())
1:         {
1:             // peek here instead of poll is an optimization
1:             // so we can re-insert less ranges back if candidate
1:             // is less than head of the current range.
1:             RangeIterator<K, D> range = ranges.peek();
1: 
1:             int cmp = candidate.get().compareTo(range.getCurrent());
1: 
1:             assert cmp <= 0;
1: 
1:             if (cmp < 0)
1:             {
1:                 break; // candidate is smaller than next token, return immediately
1:             }
1:             else if (cmp == 0)
1:             {
1:                 candidate.merge(range.next()); // consume and merge
1: 
1:                 range = ranges.poll();
1:                 // re-prioritize changed range
1: 
1:                 if (range.hasNext())
1:                     processedRanges.add(range);
1:                 else
1:                     FileUtils.closeQuietly(range);
1:             }
1:         }
1: 
1:         ranges.addAll(processedRanges);
1:         return candidate;
1:     }
1: 
1:     protected void performSkipTo(K nextToken)
1:     {
1:         List<RangeIterator<K, D>> changedRanges = new ArrayList<>();
1: 
1:         while (!ranges.isEmpty())
1:         {
1:             if (ranges.peek().getCurrent().compareTo(nextToken) >= 0)
1:                 break;
1: 
1:             RangeIterator<K, D> head = ranges.poll();
1: 
1:             if (head.getMaximum().compareTo(nextToken) >= 0)
1:             {
1:                 head.skipTo(nextToken);
1:                 changedRanges.add(head);
1:                 continue;
1:             }
1: 
1:             FileUtils.closeQuietly(head);
1:         }
1: 
1:         ranges.addAll(changedRanges.stream().collect(Collectors.toList()));
1:     }
1: 
1:     public void close() throws IOException
1:     {
1:         ranges.forEach(FileUtils::closeQuietly);
1:     }
1: 
1:     public static <K extends Comparable<K>, D extends CombinedValue<K>> Builder<K, D> builder()
1:     {
1:         return new Builder<>();
1:     }
1: 
1:     public static <K extends Comparable<K>, D extends CombinedValue<K>> RangeIterator<K, D> build(List<RangeIterator<K, D>> tokens)
1:     {
1:         return new Builder<K, D>().add(tokens).build();
1:     }
1: 
1:     public static class Builder<K extends Comparable<K>, D extends CombinedValue<K>> extends RangeIterator.Builder<K, D>
1:     {
1:         public Builder()
1:         {
1:             super(IteratorType.UNION);
1:         }
1: 
1:         protected RangeIterator<K, D> buildIterator()
1:         {
1:             return new RangeUnionIterator<>(statistics, ranges);
1:         }
1:     }
1: }
============================================================================