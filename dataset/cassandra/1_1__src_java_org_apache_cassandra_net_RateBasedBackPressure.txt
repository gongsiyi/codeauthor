1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.net;
1:d43b9ce: 
1:d43b9ce: import java.net.InetAddress;
1:d43b9ce: import java.util.Map;
1:d43b9ce: import java.util.Set;
1:d43b9ce: import java.util.concurrent.ExecutionException;
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: 
1:d43b9ce: import com.google.common.annotations.VisibleForTesting;
1:d43b9ce: import com.google.common.cache.Cache;
1:d43b9ce: import com.google.common.cache.CacheBuilder;
1:d43b9ce: import com.google.common.collect.ImmutableMap;
1:d43b9ce: import com.google.common.util.concurrent.RateLimiter;
1:d43b9ce: 
1:d43b9ce: import org.slf4j.Logger;
1:d43b9ce: import org.slf4j.LoggerFactory;
1:d43b9ce: 
1:d43b9ce: import org.apache.cassandra.config.DatabaseDescriptor;
1:d43b9ce: import org.apache.cassandra.config.ParameterizedClass;
1:d43b9ce: import org.apache.cassandra.utils.NoSpamLogger;
1:d43b9ce: import org.apache.cassandra.utils.SystemTimeSource;
1:d43b9ce: import org.apache.cassandra.utils.TimeSource;
1:d43b9ce: import org.apache.cassandra.utils.concurrent.IntervalLock;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * Back-pressure algorithm based on rate limiting according to the ratio between incoming and outgoing rates, computed
1:d43b9ce:  * over a sliding time window with size equal to write RPC timeout.
1:d43b9ce:  */
1:d43b9ce: public class RateBasedBackPressure implements BackPressureStrategy<RateBasedBackPressureState>
1:d43b9ce: {
1:d43b9ce:     static final String HIGH_RATIO = "high_ratio";
1:d43b9ce:     static final String FACTOR = "factor";
1:d43b9ce:     static final String FLOW = "flow";
1:d43b9ce:     private static final String BACK_PRESSURE_HIGH_RATIO = "0.90";
1:d43b9ce:     private static final String BACK_PRESSURE_FACTOR = "5";
1:d43b9ce:     private static final String BACK_PRESSURE_FLOW = "FAST";
1:d43b9ce: 
1:d43b9ce:     private static final Logger logger = LoggerFactory.getLogger(RateBasedBackPressure.class);
1:d43b9ce:     private static final NoSpamLogger tenSecsNoSpamLogger = NoSpamLogger.getLogger(logger, 10, TimeUnit.SECONDS);
1:d43b9ce:     private static final NoSpamLogger oneMinNoSpamLogger = NoSpamLogger.getLogger(logger, 1, TimeUnit.MINUTES);
1:d43b9ce: 
1:d43b9ce:     protected final TimeSource timeSource;
1:d43b9ce:     protected final double highRatio;
1:d43b9ce:     protected final int factor;
1:d43b9ce:     protected final Flow flow;
1:d43b9ce:     protected final long windowSize;
1:d43b9ce: 
1:d43b9ce:     private final Cache<Set<RateBasedBackPressureState>, IntervalRateLimiter> rateLimiters =
1:d43b9ce:             CacheBuilder.newBuilder().expireAfterAccess(1, TimeUnit.HOURS).build();
1:d43b9ce: 
1:d43b9ce:     enum Flow
1:d43b9ce:     {
1:d43b9ce:         FAST,
1:d43b9ce:         SLOW
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     public static ParameterizedClass withDefaultParams()
1:d43b9ce:     {
1:d43b9ce:         return new ParameterizedClass(RateBasedBackPressure.class.getName(),
1:d43b9ce:                                       ImmutableMap.of(HIGH_RATIO, BACK_PRESSURE_HIGH_RATIO,
1:d43b9ce:                                                       FACTOR, BACK_PRESSURE_FACTOR,
1:d43b9ce:                                                       FLOW, BACK_PRESSURE_FLOW));
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     public RateBasedBackPressure(Map<String, Object> args)
1:d43b9ce:     {
1:d43b9ce:         this(args, new SystemTimeSource(), DatabaseDescriptor.getWriteRpcTimeout());
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @VisibleForTesting
1:d43b9ce:     public RateBasedBackPressure(Map<String, Object> args, TimeSource timeSource, long windowSize)
1:d43b9ce:     {
1:d43b9ce:         if (args.size() != 3)
1:d43b9ce:         {
1:d43b9ce:             throw new IllegalArgumentException(RateBasedBackPressure.class.getCanonicalName()
1:d43b9ce:                     + " requires 3 arguments: high ratio, back-pressure factor and flow type.");
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         try
1:d43b9ce:         {
1:d43b9ce:             highRatio = Double.parseDouble(args.getOrDefault(HIGH_RATIO, "").toString().trim());
1:d43b9ce:             factor = Integer.parseInt(args.getOrDefault(FACTOR, "").toString().trim());
1:d43b9ce:             flow = Flow.valueOf(args.getOrDefault(FLOW, "").toString().trim().toUpperCase());
1:d43b9ce:         }
1:d43b9ce:         catch (Exception ex)
1:d43b9ce:         {
1:d43b9ce:             throw new IllegalArgumentException(ex.getMessage(), ex);
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         if (highRatio <= 0 || highRatio > 1)
1:d43b9ce:         {
1:d43b9ce:             throw new IllegalArgumentException("Back-pressure high ratio must be > 0 and <= 1");
1:d43b9ce:         }
1:d43b9ce:         if (factor < 1)
1:d43b9ce:         {
1:d43b9ce:             throw new IllegalArgumentException("Back-pressure factor must be >= 1");
1:d43b9ce:         }
1:d43b9ce:         if (windowSize < 10)
1:d43b9ce:         {
1:d43b9ce:             throw new IllegalArgumentException("Back-pressure window size must be >= 10");
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         this.timeSource = timeSource;
1:d43b9ce:         this.windowSize = windowSize;
1:d43b9ce: 
1:d43b9ce:         logger.info("Initialized back-pressure with high ratio: {}, factor: {}, flow: {}, window size: {}.",
1:d43b9ce:                     highRatio, factor, flow, windowSize);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public void apply(Set<RateBasedBackPressureState> states, long timeout, TimeUnit unit)
1:d43b9ce:     {
1:d43b9ce:         // Go through the back-pressure states, try updating each of them and collect min/max rates:
1:d43b9ce:         boolean isUpdated = false;
1:d43b9ce:         double minRateLimit = Double.POSITIVE_INFINITY;
1:d43b9ce:         double maxRateLimit = Double.NEGATIVE_INFINITY;
1:d43b9ce:         double minIncomingRate = Double.POSITIVE_INFINITY;
1:d43b9ce:         RateLimiter currentMin = null;
1:d43b9ce:         RateLimiter currentMax = null;
1:d43b9ce:         for (RateBasedBackPressureState backPressure : states)
1:d43b9ce:         {
1:d43b9ce:             // Get the incoming/outgoing rates:
1:d43b9ce:             double incomingRate = backPressure.incomingRate.get(TimeUnit.SECONDS);
1:d43b9ce:             double outgoingRate = backPressure.outgoingRate.get(TimeUnit.SECONDS);
1:d43b9ce:             // Compute the min incoming rate:
1:d43b9ce:             if (incomingRate < minIncomingRate)
1:d43b9ce:                 minIncomingRate = incomingRate;
1:d43b9ce: 
1:d43b9ce:             // Try acquiring the interval lock:
1:d43b9ce:             if (backPressure.tryIntervalLock(windowSize))
1:d43b9ce:             {
1:d43b9ce:                 // If acquired, proceed updating thi back-pressure state rate limit:
1:d43b9ce:                 isUpdated = true;
1:d43b9ce:                 try
1:d43b9ce:                 {
1:d43b9ce:                     RateLimiter limiter = backPressure.rateLimiter;
1:d43b9ce: 
1:d43b9ce:                     // If we have sent any outgoing requests during this time window, go ahead with rate limiting
1:d43b9ce:                     // (this is safe against concurrent back-pressure state updates thanks to the rw-locking in
1:d43b9ce:                     // RateBasedBackPressureState):
1:d43b9ce:                     if (outgoingRate > 0)
1:d43b9ce:                     {
1:d43b9ce:                         // Compute the incoming/outgoing ratio:
1:d43b9ce:                         double actualRatio = incomingRate / outgoingRate;
1:d43b9ce: 
1:d43b9ce:                         // If the ratio is above the high mark, try growing by the back-pressure factor:
1:d43b9ce:                         if (actualRatio >= highRatio)
1:d43b9ce:                         {
1:d43b9ce:                             // Only if the outgoing rate is able to keep up with the rate increase:
1:d43b9ce:                             if (limiter.getRate() <= outgoingRate)
1:d43b9ce:                             {
1:d43b9ce:                                 double newRate = limiter.getRate() + ((limiter.getRate() * factor) / 100);
1:d43b9ce:                                 if (newRate > 0 && newRate != Double.POSITIVE_INFINITY)
1:d43b9ce:                                 {
1:d43b9ce:                                     limiter.setRate(newRate);
1:d43b9ce:                                 }
1:d43b9ce:                             }
1:d43b9ce:                         }
1:d43b9ce:                         // If below, set the rate limiter at the incoming rate, decreased by factor:
1:d43b9ce:                         else
1:d43b9ce:                         {
1:d43b9ce:                             // Only if the new rate is actually less than the actual rate:
1:d43b9ce:                             double newRate = incomingRate - ((incomingRate * factor) / 100);
1:d43b9ce:                             if (newRate > 0 && newRate < limiter.getRate())
1:d43b9ce:                             {
1:d43b9ce:                                 limiter.setRate(newRate);
1:d43b9ce:                             }
1:d43b9ce:                         }
1:d43b9ce: 
1:d43b9ce:                         logger.trace("Back-pressure state for {}: incoming rate {}, outgoing rate {}, ratio {}, rate limiting {}",
1:d43b9ce:                                      backPressure.getHost(), incomingRate, outgoingRate, actualRatio, limiter.getRate());
1:d43b9ce:                     }
1:d43b9ce:                     // Otherwise reset the rate limiter:
1:d43b9ce:                     else
1:d43b9ce:                     {
1:d43b9ce:                         limiter.setRate(Double.POSITIVE_INFINITY);
1:d43b9ce:                     }
1:d43b9ce: 
1:d43b9ce:                     // Housekeeping: pruning windows and resetting the last check timestamp!
1:d43b9ce:                     backPressure.incomingRate.prune();
1:d43b9ce:                     backPressure.outgoingRate.prune();
1:d43b9ce:                 }
1:d43b9ce:                 finally
1:d43b9ce:                 {
1:d43b9ce:                     backPressure.releaseIntervalLock();
1:d43b9ce:                 }
1:d43b9ce:             }
1:d43b9ce:             if (backPressure.rateLimiter.getRate() <= minRateLimit)
1:d43b9ce:             {
1:d43b9ce:                 minRateLimit = backPressure.rateLimiter.getRate();
1:d43b9ce:                 currentMin = backPressure.rateLimiter;
1:d43b9ce:             }
1:d43b9ce:             if (backPressure.rateLimiter.getRate() >= maxRateLimit)
1:d43b9ce:             {
1:d43b9ce:                 maxRateLimit = backPressure.rateLimiter.getRate();
1:d43b9ce:                 currentMax = backPressure.rateLimiter;
1:d43b9ce:             }
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         // Now find the rate limiter corresponding to the replica group represented by these back-pressure states:
1:d43b9ce:         if (!states.isEmpty())
1:d43b9ce:         {
1:d43b9ce:             try
1:d43b9ce:             {
1:d43b9ce:                 // Get the rate limiter:
1:d43b9ce:                 IntervalRateLimiter rateLimiter = rateLimiters.get(states, () -> new IntervalRateLimiter(timeSource));
1:d43b9ce: 
1:d43b9ce:                 // If the back-pressure was updated and we acquire the interval lock for the rate limiter of this group:
1:d43b9ce:                 if (isUpdated && rateLimiter.tryIntervalLock(windowSize))
1:d43b9ce:                 {
1:d43b9ce:                     try
1:d43b9ce:                     {
1:d43b9ce:                         // Update the rate limiter value based on the configured flow:
1:d43b9ce:                         if (flow.equals(Flow.FAST))
1:d43b9ce:                             rateLimiter.limiter = currentMax;
1:d43b9ce:                         else
1:d43b9ce:                             rateLimiter.limiter = currentMin;
1:d43b9ce: 
1:d43b9ce:                         tenSecsNoSpamLogger.info("{} currently applied for remote replicas: {}", rateLimiter.limiter, states);
1:d43b9ce:                     }
1:d43b9ce:                     finally
1:d43b9ce:                     {
1:d43b9ce:                         rateLimiter.releaseIntervalLock();
1:d43b9ce:                     }
1:d43b9ce:                 }
1:d43b9ce:                 // Assigning a single rate limiter per replica group once per window size allows the back-pressure rate
1:d43b9ce:                 // limiting to be stable within the group itself.
1:d43b9ce: 
1:d43b9ce:                 // Finally apply the rate limit with a max pause time equal to the provided timeout minus the
1:d43b9ce:                 // response time computed from the incoming rate, to reduce the number of client timeouts by taking into
1:d43b9ce:                 // account how long it could take to process responses after back-pressure:
1:d43b9ce:                 long responseTimeInNanos = (long) (TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS) / minIncomingRate);
1:d43b9ce:                 doRateLimit(rateLimiter.limiter, Math.max(0, TimeUnit.NANOSECONDS.convert(timeout, unit) - responseTimeInNanos));
1:d43b9ce:             }
1:d43b9ce:             catch (ExecutionException ex)
1:d43b9ce:             {
1:d43b9ce:                 throw new IllegalStateException(ex);
1:d43b9ce:             }
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Override
1:d43b9ce:     public RateBasedBackPressureState newState(InetAddress host)
1:d43b9ce:     {
1:d43b9ce:         return new RateBasedBackPressureState(host, timeSource, windowSize);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @VisibleForTesting
1:d43b9ce:     RateLimiter getRateLimiterForReplicaGroup(Set<RateBasedBackPressureState> states)
1:d43b9ce:     {
1:d43b9ce:         IntervalRateLimiter rateLimiter = rateLimiters.getIfPresent(states);
1:d43b9ce:         return rateLimiter != null ? rateLimiter.limiter : RateLimiter.create(Double.POSITIVE_INFINITY);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @VisibleForTesting
1:d43b9ce:     boolean doRateLimit(RateLimiter rateLimiter, long timeoutInNanos)
1:d43b9ce:     {
1:d43b9ce:         if (!rateLimiter.tryAcquire(1, timeoutInNanos, TimeUnit.NANOSECONDS))
1:d43b9ce:         {
1:d43b9ce:             timeSource.sleepUninterruptibly(timeoutInNanos, TimeUnit.NANOSECONDS);
1:d43b9ce:             oneMinNoSpamLogger.info("Cannot apply {} due to exceeding write timeout, pausing {} nanoseconds instead.",
1:d43b9ce:                                     rateLimiter, timeoutInNanos);
1:d43b9ce: 
1:d43b9ce:             return false;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         return true;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     private static class IntervalRateLimiter extends IntervalLock
1:d43b9ce:     {
1:d43b9ce:         public volatile RateLimiter limiter = RateLimiter.create(Double.POSITIVE_INFINITY);
1:d43b9ce: 
1:d43b9ce:         IntervalRateLimiter(TimeSource timeSource)
1:d43b9ce:         {
1:d43b9ce:             super(timeSource);
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.net.InetAddress;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.cache.Cache;
1: import com.google.common.cache.CacheBuilder;
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.util.concurrent.RateLimiter;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.config.ParameterizedClass;
1: import org.apache.cassandra.utils.NoSpamLogger;
1: import org.apache.cassandra.utils.SystemTimeSource;
1: import org.apache.cassandra.utils.TimeSource;
1: import org.apache.cassandra.utils.concurrent.IntervalLock;
1: 
1: /**
1:  * Back-pressure algorithm based on rate limiting according to the ratio between incoming and outgoing rates, computed
1:  * over a sliding time window with size equal to write RPC timeout.
1:  */
1: public class RateBasedBackPressure implements BackPressureStrategy<RateBasedBackPressureState>
1: {
1:     static final String HIGH_RATIO = "high_ratio";
1:     static final String FACTOR = "factor";
1:     static final String FLOW = "flow";
1:     private static final String BACK_PRESSURE_HIGH_RATIO = "0.90";
1:     private static final String BACK_PRESSURE_FACTOR = "5";
1:     private static final String BACK_PRESSURE_FLOW = "FAST";
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(RateBasedBackPressure.class);
1:     private static final NoSpamLogger tenSecsNoSpamLogger = NoSpamLogger.getLogger(logger, 10, TimeUnit.SECONDS);
1:     private static final NoSpamLogger oneMinNoSpamLogger = NoSpamLogger.getLogger(logger, 1, TimeUnit.MINUTES);
1: 
1:     protected final TimeSource timeSource;
1:     protected final double highRatio;
1:     protected final int factor;
1:     protected final Flow flow;
1:     protected final long windowSize;
1: 
1:     private final Cache<Set<RateBasedBackPressureState>, IntervalRateLimiter> rateLimiters =
1:             CacheBuilder.newBuilder().expireAfterAccess(1, TimeUnit.HOURS).build();
1: 
1:     enum Flow
1:     {
1:         FAST,
1:         SLOW
1:     }
1: 
1:     public static ParameterizedClass withDefaultParams()
1:     {
1:         return new ParameterizedClass(RateBasedBackPressure.class.getName(),
1:                                       ImmutableMap.of(HIGH_RATIO, BACK_PRESSURE_HIGH_RATIO,
1:                                                       FACTOR, BACK_PRESSURE_FACTOR,
1:                                                       FLOW, BACK_PRESSURE_FLOW));
1:     }
1: 
1:     public RateBasedBackPressure(Map<String, Object> args)
1:     {
1:         this(args, new SystemTimeSource(), DatabaseDescriptor.getWriteRpcTimeout());
1:     }
1: 
1:     @VisibleForTesting
1:     public RateBasedBackPressure(Map<String, Object> args, TimeSource timeSource, long windowSize)
1:     {
1:         if (args.size() != 3)
1:         {
1:             throw new IllegalArgumentException(RateBasedBackPressure.class.getCanonicalName()
1:                     + " requires 3 arguments: high ratio, back-pressure factor and flow type.");
1:         }
1: 
1:         try
1:         {
1:             highRatio = Double.parseDouble(args.getOrDefault(HIGH_RATIO, "").toString().trim());
1:             factor = Integer.parseInt(args.getOrDefault(FACTOR, "").toString().trim());
1:             flow = Flow.valueOf(args.getOrDefault(FLOW, "").toString().trim().toUpperCase());
1:         }
1:         catch (Exception ex)
1:         {
1:             throw new IllegalArgumentException(ex.getMessage(), ex);
1:         }
1: 
1:         if (highRatio <= 0 || highRatio > 1)
1:         {
1:             throw new IllegalArgumentException("Back-pressure high ratio must be > 0 and <= 1");
1:         }
1:         if (factor < 1)
1:         {
1:             throw new IllegalArgumentException("Back-pressure factor must be >= 1");
1:         }
1:         if (windowSize < 10)
1:         {
1:             throw new IllegalArgumentException("Back-pressure window size must be >= 10");
1:         }
1: 
1:         this.timeSource = timeSource;
1:         this.windowSize = windowSize;
1: 
1:         logger.info("Initialized back-pressure with high ratio: {}, factor: {}, flow: {}, window size: {}.",
1:                     highRatio, factor, flow, windowSize);
1:     }
1: 
1:     @Override
1:     public void apply(Set<RateBasedBackPressureState> states, long timeout, TimeUnit unit)
1:     {
1:         // Go through the back-pressure states, try updating each of them and collect min/max rates:
1:         boolean isUpdated = false;
1:         double minRateLimit = Double.POSITIVE_INFINITY;
1:         double maxRateLimit = Double.NEGATIVE_INFINITY;
1:         double minIncomingRate = Double.POSITIVE_INFINITY;
1:         RateLimiter currentMin = null;
1:         RateLimiter currentMax = null;
1:         for (RateBasedBackPressureState backPressure : states)
1:         {
1:             // Get the incoming/outgoing rates:
1:             double incomingRate = backPressure.incomingRate.get(TimeUnit.SECONDS);
1:             double outgoingRate = backPressure.outgoingRate.get(TimeUnit.SECONDS);
1:             // Compute the min incoming rate:
1:             if (incomingRate < minIncomingRate)
1:                 minIncomingRate = incomingRate;
1: 
1:             // Try acquiring the interval lock:
1:             if (backPressure.tryIntervalLock(windowSize))
1:             {
1:                 // If acquired, proceed updating thi back-pressure state rate limit:
1:                 isUpdated = true;
1:                 try
1:                 {
1:                     RateLimiter limiter = backPressure.rateLimiter;
1: 
1:                     // If we have sent any outgoing requests during this time window, go ahead with rate limiting
1:                     // (this is safe against concurrent back-pressure state updates thanks to the rw-locking in
1:                     // RateBasedBackPressureState):
1:                     if (outgoingRate > 0)
1:                     {
1:                         // Compute the incoming/outgoing ratio:
1:                         double actualRatio = incomingRate / outgoingRate;
1: 
1:                         // If the ratio is above the high mark, try growing by the back-pressure factor:
1:                         if (actualRatio >= highRatio)
1:                         {
1:                             // Only if the outgoing rate is able to keep up with the rate increase:
1:                             if (limiter.getRate() <= outgoingRate)
1:                             {
1:                                 double newRate = limiter.getRate() + ((limiter.getRate() * factor) / 100);
1:                                 if (newRate > 0 && newRate != Double.POSITIVE_INFINITY)
1:                                 {
1:                                     limiter.setRate(newRate);
1:                                 }
1:                             }
1:                         }
1:                         // If below, set the rate limiter at the incoming rate, decreased by factor:
1:                         else
1:                         {
1:                             // Only if the new rate is actually less than the actual rate:
1:                             double newRate = incomingRate - ((incomingRate * factor) / 100);
1:                             if (newRate > 0 && newRate < limiter.getRate())
1:                             {
1:                                 limiter.setRate(newRate);
1:                             }
1:                         }
1: 
1:                         logger.trace("Back-pressure state for {}: incoming rate {}, outgoing rate {}, ratio {}, rate limiting {}",
1:                                      backPressure.getHost(), incomingRate, outgoingRate, actualRatio, limiter.getRate());
1:                     }
1:                     // Otherwise reset the rate limiter:
1:                     else
1:                     {
1:                         limiter.setRate(Double.POSITIVE_INFINITY);
1:                     }
1: 
1:                     // Housekeeping: pruning windows and resetting the last check timestamp!
1:                     backPressure.incomingRate.prune();
1:                     backPressure.outgoingRate.prune();
1:                 }
1:                 finally
1:                 {
1:                     backPressure.releaseIntervalLock();
1:                 }
1:             }
1:             if (backPressure.rateLimiter.getRate() <= minRateLimit)
1:             {
1:                 minRateLimit = backPressure.rateLimiter.getRate();
1:                 currentMin = backPressure.rateLimiter;
1:             }
1:             if (backPressure.rateLimiter.getRate() >= maxRateLimit)
1:             {
1:                 maxRateLimit = backPressure.rateLimiter.getRate();
1:                 currentMax = backPressure.rateLimiter;
1:             }
1:         }
1: 
1:         // Now find the rate limiter corresponding to the replica group represented by these back-pressure states:
1:         if (!states.isEmpty())
1:         {
1:             try
1:             {
1:                 // Get the rate limiter:
1:                 IntervalRateLimiter rateLimiter = rateLimiters.get(states, () -> new IntervalRateLimiter(timeSource));
1: 
1:                 // If the back-pressure was updated and we acquire the interval lock for the rate limiter of this group:
1:                 if (isUpdated && rateLimiter.tryIntervalLock(windowSize))
1:                 {
1:                     try
1:                     {
1:                         // Update the rate limiter value based on the configured flow:
1:                         if (flow.equals(Flow.FAST))
1:                             rateLimiter.limiter = currentMax;
1:                         else
1:                             rateLimiter.limiter = currentMin;
1: 
1:                         tenSecsNoSpamLogger.info("{} currently applied for remote replicas: {}", rateLimiter.limiter, states);
1:                     }
1:                     finally
1:                     {
1:                         rateLimiter.releaseIntervalLock();
1:                     }
1:                 }
1:                 // Assigning a single rate limiter per replica group once per window size allows the back-pressure rate
1:                 // limiting to be stable within the group itself.
1: 
1:                 // Finally apply the rate limit with a max pause time equal to the provided timeout minus the
1:                 // response time computed from the incoming rate, to reduce the number of client timeouts by taking into
1:                 // account how long it could take to process responses after back-pressure:
1:                 long responseTimeInNanos = (long) (TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS) / minIncomingRate);
1:                 doRateLimit(rateLimiter.limiter, Math.max(0, TimeUnit.NANOSECONDS.convert(timeout, unit) - responseTimeInNanos));
1:             }
1:             catch (ExecutionException ex)
1:             {
1:                 throw new IllegalStateException(ex);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public RateBasedBackPressureState newState(InetAddress host)
1:     {
1:         return new RateBasedBackPressureState(host, timeSource, windowSize);
1:     }
1: 
1:     @VisibleForTesting
1:     RateLimiter getRateLimiterForReplicaGroup(Set<RateBasedBackPressureState> states)
1:     {
1:         IntervalRateLimiter rateLimiter = rateLimiters.getIfPresent(states);
1:         return rateLimiter != null ? rateLimiter.limiter : RateLimiter.create(Double.POSITIVE_INFINITY);
1:     }
1: 
1:     @VisibleForTesting
1:     boolean doRateLimit(RateLimiter rateLimiter, long timeoutInNanos)
1:     {
1:         if (!rateLimiter.tryAcquire(1, timeoutInNanos, TimeUnit.NANOSECONDS))
1:         {
1:             timeSource.sleepUninterruptibly(timeoutInNanos, TimeUnit.NANOSECONDS);
1:             oneMinNoSpamLogger.info("Cannot apply {} due to exceeding write timeout, pausing {} nanoseconds instead.",
1:                                     rateLimiter, timeoutInNanos);
1: 
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: 
1:     private static class IntervalRateLimiter extends IntervalLock
1:     {
1:         public volatile RateLimiter limiter = RateLimiter.create(Double.POSITIVE_INFINITY);
1: 
1:         IntervalRateLimiter(TimeSource timeSource)
1:         {
1:             super(timeSource);
1:         }
1:     }
1: }
============================================================================