1:07cf56f: /*
1:295aedb:  * Licensed to the Apache Software Foundation (ASF) under one
1:295aedb:  * or more contributor license agreements.  See the NOTICE file
1:295aedb:  * distributed with this work for additional information
1:295aedb:  * regarding copyright ownership.  The ASF licenses this file
1:295aedb:  * to you under the Apache License, Version 2.0 (the
1:295aedb:  * "License"); you may not use this file except in compliance
1:295aedb:  * with the License.  You may obtain a copy of the License at
1:295aedb:  *
1:295aedb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:295aedb:  *
1:295aedb:  * Unless required by applicable law or agreed to in writing, software
1:295aedb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:295aedb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:295aedb:  * See the License for the specific language governing permissions and
1:295aedb:  * limitations under the License.
4:69cedbf:  */
1:295aedb: package org.apache.cassandra.service;
7:295aedb: 
1:295aedb: import java.util.concurrent.ExecutionException;
1:295aedb: 
1:295aedb: public interface CacheServiceMBean
1:295aedb: {
1:295aedb:     public int getRowCacheSavePeriodInSeconds();
1:295aedb:     public void setRowCacheSavePeriodInSeconds(int rcspis);
1:295aedb: 
1:295aedb:     public int getKeyCacheSavePeriodInSeconds();
1:295aedb:     public void setKeyCacheSavePeriodInSeconds(int kcspis);
1:295aedb: 
1:714c423:     public int getCounterCacheSavePeriodInSeconds();
1:714c423:     public void setCounterCacheSavePeriodInSeconds(int ccspis);
1:714c423: 
1:df046d6:     public int getRowCacheKeysToSave();
1:df046d6:     public void setRowCacheKeysToSave(int rckts);
1:df046d6: 
1:df046d6:     public int getKeyCacheKeysToSave();
1:df046d6:     public void setKeyCacheKeysToSave(int kckts);
1:df046d6: 
1:714c423:     public int getCounterCacheKeysToSave();
1:714c423:     public void setCounterCacheKeysToSave(int cckts);
1:714c423: 
1:69cedbf:     /**
1:295aedb:      * invalidate the key cache; for use after invalidating row cache
1:69cedbf:      */
1:295aedb:     public void invalidateKeyCache();
1:295aedb: 
1:69cedbf:     /**
1:295aedb:      * invalidate the row cache; for use after bulk loading via BinaryMemtable
1:69cedbf:      */
1:295aedb:     public void invalidateRowCache();
1:295aedb: 
1:714c423:     public void invalidateCounterCache();
1:714c423: 
1:0267293:     public void setRowCacheCapacityInMB(long capacity);
1:295aedb: 
1:0267293:     public void setKeyCacheCapacityInMB(long capacity);
1:295aedb: 
1:714c423:     public void setCounterCacheCapacityInMB(long capacity);
1:714c423: 
1:69cedbf:     /**
1:295aedb:      * save row and key caches
1:295aedb:      *
1:295aedb:      * @throws ExecutionException when attempting to retrieve the result of a task that aborted by throwing an exception
1:295aedb:      * @throws InterruptedException when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity.
1:69cedbf:      */
1:295aedb:     public void saveCaches() throws ExecutionException, InterruptedException;
1:295aedb: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:714c423
/////////////////////////////////////////////////////////////////////////
1:     public int getCounterCacheSavePeriodInSeconds();
1:     public void setCounterCacheSavePeriodInSeconds(int ccspis);
1: 
1:     public int getCounterCacheKeysToSave();
1:     public void setCounterCacheKeysToSave(int cckts);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void invalidateCounterCache();
1: 
1:     public void setCounterCacheCapacityInMB(long capacity);
1: 
commit:e79d9fb
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:fb7b71f
commit:df046d6
/////////////////////////////////////////////////////////////////////////
1:     public int getRowCacheKeysToSave();
1:     public void setRowCacheKeysToSave(int rckts);
1: 
1:     public int getKeyCacheKeysToSave();
1:     public void setKeyCacheKeysToSave(int kckts);
1: 
commit:02b59eb
commit:99b245d
/////////////////////////////////////////////////////////////////////////
0:     public long getRowCacheSize(); // in bytes
0:     public long getRowCacheEntries();
0:     public long getKeyCacheEntries();
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#hits
1:      */
0:     @Deprecated
0:     @Deprecated
1:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#requests
1:      */
0:     @Deprecated
0:     @Deprecated
1:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#recentHitRate
1:      */
0:     @Deprecated
0:     @Deprecated
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#capacityInBytes
1:      */
0:     @Deprecated
0:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#capacityInBytes
1:      */
0:     @Deprecated
0:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#size
1:      */
0:     @Deprecated
0:     /**
0:      * @see org.apache.cassandra.metrics.CacheMetrics#size
1:      */
0:     @Deprecated
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:ac362da
commit:0267293
/////////////////////////////////////////////////////////////////////////
0:     public long getRowCacheCapacityInMB();
0:     public long getRowCacheCapacityInBytes();
1:     public void setRowCacheCapacityInMB(long capacity);
0:     public long getKeyCacheCapacityInMB();
0:     public long getKeyCacheCapacityInBytes();
1:     public void setKeyCacheCapacityInMB(long capacity);
0:     public long getRowCacheSize();
0:     public long getKeyCacheSize();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.cassandra.service;
1: 
1: import java.util.concurrent.ExecutionException;
1: 
1: public interface CacheServiceMBean
1: {
0:     public long getKeyCacheHits();
0:     public long getRowCacheHits();
1: 
0:     public long getKeyCacheRequests();
0:     public long getRowCacheRequests();
1: 
0:     public double getKeyCacheRecentHitRate();
0:     public double getRowCacheRecentHitRate();
1: 
1:     public int getRowCacheSavePeriodInSeconds();
1:     public void setRowCacheSavePeriodInSeconds(int rcspis);
1: 
1:     public int getKeyCacheSavePeriodInSeconds();
1:     public void setKeyCacheSavePeriodInSeconds(int kcspis);
1: 
0:     /**
1:      * invalidate the key cache; for use after invalidating row cache
0:      */
1:     public void invalidateKeyCache();
1: 
0:     /**
1:      * invalidate the row cache; for use after bulk loading via BinaryMemtable
0:      */
1:     public void invalidateRowCache();
1: 
0:     public int getRowCacheCapacityInMB();
0:     public int getRowCacheCapacityInBytes();
0:     public void setRowCacheCapacityInMB(int capacity);
1: 
0:     public int getKeyCacheCapacityInMB();
0:     public int getKeyCacheCapacityInBytes();
0:     public void setKeyCacheCapacityInMB(int capacity);
1: 
0:     public int getRowCacheSize();
1: 
0:     public int getKeyCacheSize();
1: 
0:     /**
0:      * sets each cache's maximum capacity to "reduce_cache_capacity_to" of its current size
0:      */
0:     public void reduceCacheSizes();
1: 
0:     /**
1:      * save row and key caches
1:      *
1:      * @throws ExecutionException when attempting to retrieve the result of a task that aborted by throwing an exception
1:      * @throws InterruptedException when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity.
0:      */
1:     public void saveCaches() throws ExecutionException, InterruptedException;
1: }
============================================================================