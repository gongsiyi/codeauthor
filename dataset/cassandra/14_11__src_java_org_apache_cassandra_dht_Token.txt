1:88edbed: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:07cf56f:  */
1:907d92e: package org.apache.cassandra.dht;
1:84eeb28: 
1:23aa01b: import java.io.DataInput;
1:907d92e: import java.io.IOException;
1:7520b43: import java.io.Serializable;
1:e7a385a: import java.nio.ByteBuffer;
1:554223b: 
1:a991b64: import org.apache.cassandra.db.PartitionPosition;
1:806facc: import org.apache.cassandra.db.TypeSizes;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:3787d6c: import org.apache.cassandra.utils.ByteBufferUtil;
1:6a9a336: 
1:ad84e4d: public abstract class Token implements RingPosition<Token>, Serializable
9:907d92e: {
1:7594c1b:     private static final long serialVersionUID = 1L;
1:7594c1b: 
1:587cb58:     public static final TokenSerializer serializer = new TokenSerializer();
11:907d92e: 
1:ad84e4d:     public static abstract class TokenFactory
1:907d92e:     {
1:ad84e4d:         public abstract ByteBuffer toByteArray(Token token);
1:ad84e4d:         public abstract Token fromByteArray(ByteBuffer bytes);
1:ad84e4d:         public abstract String toString(Token token); // serialize as string, not necessarily human-readable
1:ad84e4d:         public abstract Token fromString(String string); // deserialize
1:907d92e: 
1:6a9a336:         public abstract void validate(String token) throws ConfigurationException;
10:907d92e:     }
1:554223b: 
1:806facc:     public static class TokenSerializer implements IPartitionerDependentSerializer<Token>
1:554223b:     {
1:806facc:         public void serialize(Token token, DataOutputPlus out, int version) throws IOException
1:554223b:         {
1:806facc:             IPartitioner p = token.getPartitioner();
1:e7a385a:             ByteBuffer b = p.getTokenFactory().toByteArray(token);
1:60d9c7f:             ByteBufferUtil.writeWithLength(b, out);
1:554223b:         }
1:554223b: 
1:806facc:         public Token deserialize(DataInput in, IPartitioner p, int version) throws IOException
1:8541cca:         {
1:60d9c7f:             int size = in.readInt();
1:907d92e:             byte[] bytes = new byte[size];
1:60d9c7f:             in.readFully(bytes);
1:e7a385a:             return p.getTokenFactory().fromByteArray(ByteBuffer.wrap(bytes));
1:554223b:         }
1:07893d7: 
1:806facc:         public long serializedSize(Token object, int version)
1:84eeb28:         {
1:806facc:             IPartitioner p = object.getPartitioner();
1:f81cc74:             ByteBuffer b = p.getTokenFactory().toByteArray(object);
1:03f72ac:             return TypeSizes.sizeof(b.remaining()) + b.remaining();
1:07893d7:         }
1:84eeb28:     }
1:8541cca: 
1:07893d7:     abstract public IPartitioner getPartitioner();
1:07893d7:     abstract public long getHeapSize();
1:6eef6f7:     abstract public Object getTokenValue();
1:6eef6f7: 
1:9a3fa88:     /**
1:9a3fa88:      * Returns a measure for the token space covered between this token and next.
1:9a3fa88:      * Used by the token allocation algorithm (see CASSANDRA-7032).
1:9a3fa88:      */
1:9a3fa88:     abstract public double size(Token next);
1:9a3fa88:     /**
1:9a3fa88:      * Returns a token that is slightly greater than this. Used to avoid clashes
1:9a3fa88:      * between nodes in separate datacentres trying to use the same token via
1:9a3fa88:      * the token allocation algorithm.
1:9a3fa88:      */
1:9a3fa88:     abstract public Token increaseSlightly();
1:9a3fa88: 
1:ad84e4d:     public Token getToken()
1:907d92e:     {
1:554223b:         return this;
1:554223b:     }
1:554223b: 
1:07893d7:     public Token minValue()
1:554223b:     {
1:07893d7:         return getPartitioner().getMinimumToken();
1:554223b:     }
1:554223b: 
1:554223b:     public boolean isMinimum()
1:554223b:     {
1:07893d7:         return this.equals(minValue());
1:554223b:     }
1:554223b: 
1:554223b:     /*
1:554223b:      * A token corresponds to the range of all the keys having this token.
1:554223b:      * A token is thus no comparable directly to a key. But to be able to select
1:554223b:      * keys given tokens, we introduce two "fake" keys for each token T:
1:554223b:      *   - lowerBoundKey: a "fake" key representing the lower bound T represents.
1:554223b:      *                    In other words, lowerBoundKey is the smallest key that
1:554223b:      *                    have token T.
1:554223b:      *   - upperBoundKey: a "fake" key representing the upper bound T represents.
1:554223b:      *                    In other words, upperBoundKey is the largest key that
1:554223b:      *                    have token T.
1:554223b:      *
1:554223b:      * Note that those are "fake" keys and should only be used for comparison
1:554223b:      * of other keys, for selection of keys when only a token is known.
1:554223b:      */
1:554223b:     public KeyBound minKeyBound()
1:554223b:     {
1:35f7bc5:         return new KeyBound(this, true);
1:554223b:     }
1:554223b: 
1:554223b:     public KeyBound maxKeyBound()
1:554223b:     {
1:554223b:         /*
1:554223b:          * For each token, we needs both minKeyBound and maxKeyBound
1:554223b:          * because a token corresponds to a range of keys. But the minimun
1:554223b:          * token corresponds to no key, so it is valid and actually much
1:554223b:          * simpler to associate the same value for minKeyBound and
1:554223b:          * maxKeyBound for the minimun token.
1:554223b:          */
1:07893d7:         if (isMinimum())
1:35f7bc5:             return minKeyBound();
1:35f7bc5:         return new KeyBound(this, false);
1:554223b:     }
1:554223b: 
1:ad84e4d:     @SuppressWarnings("unchecked")
1:ad84e4d:     public <R extends RingPosition<R>> R upperBound(Class<R> klass)
1:554223b:     {
1:554223b:         if (klass.equals(getClass()))
1:5f184a0:             return (R)this;
1:554223b:         else
1:5f184a0:             return (R)maxKeyBound();
1:554223b:     }
1:554223b: 
1:a991b64:     public static class KeyBound implements PartitionPosition
1:554223b:     {
1:35f7bc5:         private final Token token;
1:554223b:         public final boolean isMinimumBound;
1:554223b: 
1:35f7bc5:         private KeyBound(Token t, boolean isMinimumBound)
1:554223b:         {
1:35f7bc5:             this.token = t;
1:554223b:             this.isMinimumBound = isMinimumBound;
1:554223b:         }
1:554223b: 
1:554223b:         public Token getToken()
1:554223b:         {
1:35f7bc5:             return token;
1:554223b:         }
1:554223b: 
1:a991b64:         public int compareTo(PartitionPosition pos)
1:554223b:         {
1:554223b:             if (this == pos)
1:554223b:                 return 0;
1:554223b: 
1:554223b:             int cmp = getToken().compareTo(pos.getToken());
1:554223b:             if (cmp != 0)
1:554223b:                 return cmp;
1:554223b: 
1:35f7bc5:             if (isMinimumBound)
1:35f7bc5:                 return ((pos instanceof KeyBound) && ((KeyBound)pos).isMinimumBound) ? 0 : -1;
1:35f7bc5:             else
1:35f7bc5:                 return ((pos instanceof KeyBound) && !((KeyBound)pos).isMinimumBound) ? 0 : 1;
1:554223b:         }
1:554223b: 
1:07893d7:         public IPartitioner getPartitioner()
1:554223b:         {
1:07893d7:             return getToken().getPartitioner();
1:554223b:         }
1:554223b: 
1:07893d7:         public KeyBound minValue()
1:554223b:         {
1:07893d7:             return getPartitioner().getMinimumToken().minKeyBound();
1:554223b:         }
1:554223b: 
1:8541cca:         public boolean isMinimum()
1:554223b:         {
1:07893d7:             return getToken().isMinimum();
1:8541cca:         }
1:554223b: 
1:a991b64:         public PartitionPosition.Kind kind()
1:07893d7:         {
1:a991b64:             return isMinimumBound ? PartitionPosition.Kind.MIN_BOUND : PartitionPosition.Kind.MAX_BOUND;
1:907d92e:         }
1:554223b: 
1:554223b:         @Override
1:554223b:         public boolean equals(Object obj)
1:554223b:         {
1:554223b:             if (this == obj)
1:554223b:                 return true;
1:554223b:             if (obj == null || this.getClass() != obj.getClass())
1:554223b:                 return false;
1:554223b: 
1:554223b:             KeyBound other = (KeyBound)obj;
1:35f7bc5:             return token.equals(other.token) && isMinimumBound == other.isMinimumBound;
1:554223b:         }
1:554223b: 
1:554223b:         @Override
1:554223b:         public int hashCode()
1:554223b:         {
1:554223b:             return getToken().hashCode() + (isMinimumBound ? 0 : 1);
1:554223b:         }
1:554223b: 
1:554223b:         @Override
1:554223b:         public String toString()
1:554223b:         {
1:554223b:             return String.format("%s(%s)", isMinimumBound ? "min" : "max", getToken().toString());
1:554223b:         }
1:554223b:     }
1:907d92e: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:             return TypeSizes.sizeof(b.remaining()) + b.remaining();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.PartitionPosition;
/////////////////////////////////////////////////////////////////////////
1:     public static class KeyBound implements PartitionPosition
/////////////////////////////////////////////////////////////////////////
1:         public int compareTo(PartitionPosition pos)
/////////////////////////////////////////////////////////////////////////
1:         public PartitionPosition.Kind kind()
1:             return isMinimumBound ? PartitionPosition.Kind.MIN_BOUND : PartitionPosition.Kind.MAX_BOUND;
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:35f7bc5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new KeyBound(this, true);
/////////////////////////////////////////////////////////////////////////
1:             return minKeyBound();
1:         return new KeyBound(this, false);
/////////////////////////////////////////////////////////////////////////
0:     public <T extends RingPosition> T upperBound(Class<T> klass)
/////////////////////////////////////////////////////////////////////////
0:     public static class KeyBound extends RowPosition
1:         private final Token token;
1:         private KeyBound(Token t, boolean isMinimumBound)
1:             this.token = t;
1:             return token;
/////////////////////////////////////////////////////////////////////////
1:             if (isMinimumBound)
1:                 return ((pos instanceof KeyBound) && ((KeyBound)pos).isMinimumBound) ? 0 : -1;
1:             else
1:                 return ((pos instanceof KeyBound) && !((KeyBound)pos).isMinimumBound) ? 0 : 1;
/////////////////////////////////////////////////////////////////////////
1:             return token.equals(other.token) && isMinimumBound == other.isMinimumBound;
commit:6ea00a3
/////////////////////////////////////////////////////////////////////////
0: public abstract class Token<T> implements RingPosition<Token<T>>
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.RowPosition;
0: public abstract class Token<T> implements RingPosition<Token<T>>, Serializable
/////////////////////////////////////////////////////////////////////////
0:     private final transient KeyBound minimumBound = new KeyBound(true);
0:     private final transient KeyBound maximumBound = new KeyBound(false);
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         if (this == obj)
1:             return true;
1:         if (obj == null || this.getClass() != obj.getClass())
1: 
0:         return token.equals(((Token<T>)obj).token);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Token<T> getToken()
1:     {
1:         return this;
1:     }
1: 
0:     public boolean isMinimum(IPartitioner partitioner)
1:     {
0:         return this.equals(partitioner.getMinimumToken());
1:     }
1: 
1:     public boolean isMinimum()
1:     {
0:         return isMinimum(StorageService.getPartitioner());
1:     }
1: 
1:     /*
1:      * A token corresponds to the range of all the keys having this token.
1:      * A token is thus no comparable directly to a key. But to be able to select
1:      * keys given tokens, we introduce two "fake" keys for each token T:
1:      *   - lowerBoundKey: a "fake" key representing the lower bound T represents.
1:      *                    In other words, lowerBoundKey is the smallest key that
1:      *                    have token T.
1:      *   - upperBoundKey: a "fake" key representing the upper bound T represents.
1:      *                    In other words, upperBoundKey is the largest key that
1:      *                    have token T.
1:      *
1:      * Note that those are "fake" keys and should only be used for comparison
1:      * of other keys, for selection of keys when only a token is known.
1:      */
0:     public KeyBound minKeyBound(IPartitioner partitioner)
1:     {
0:         return minimumBound;
1:     }
1: 
1:     public KeyBound minKeyBound()
1:     {
0:         return minKeyBound(null);
1:     }
1: 
0:     public KeyBound maxKeyBound(IPartitioner partitioner)
1:     {
1:         /*
1:          * For each token, we needs both minKeyBound and maxKeyBound
1:          * because a token corresponds to a range of keys. But the minimun
1:          * token corresponds to no key, so it is valid and actually much
1:          * simpler to associate the same value for minKeyBound and
1:          * maxKeyBound for the minimun token.
1:          */
0:         if (isMinimum(partitioner))
0:             return minimumBound;
0:         return maximumBound;
1:     }
1: 
1:     public KeyBound maxKeyBound()
1:     {
0:         return maxKeyBound(StorageService.getPartitioner());
1:     }
1: 
0:     public <T extends RingPosition> T asSplitValue(Class<T> klass)
1:     {
1:         if (klass.equals(getClass()))
0:             return (T)this;
1:         else
0:             return (T)maxKeyBound();
1:     }
1: 
0:     public class KeyBound extends RowPosition
1:     {
1:         public final boolean isMinimumBound;
1: 
0:         private KeyBound(boolean isMinimumBound)
1:         {
1:             this.isMinimumBound = isMinimumBound;
1:         }
1: 
1:         public Token getToken()
1:         {
0:             return Token.this;
1:         }
1: 
0:         public int compareTo(RowPosition pos)
1:         {
1:             if (this == pos)
1:                 return 0;
1: 
1:             int cmp = getToken().compareTo(pos.getToken());
1:             if (cmp != 0)
1:                 return cmp;
1: 
0:             // We've already eliminated the == case
0:             return isMinimumBound ? -1 : 1;
1:         }
1: 
0:         public boolean isMinimum(IPartitioner partitioner)
1:         {
0:             return getToken().isMinimum(partitioner);
1:         }
1: 
0:         public RowPosition.Kind kind()
1:         {
0:             return isMinimumBound ? RowPosition.Kind.MIN_BOUND : RowPosition.Kind.MAX_BOUND;
1:         }
1: 
0:         @Override
1:         public boolean equals(Object obj)
1:         {
0:             if (this == obj)
0:                 return true;
0:             if (obj == null || this.getClass() != obj.getClass())
1:                 return false;
1: 
1:             KeyBound other = (KeyBound)obj;
0:             return getToken().equals(other.getToken());
1:         }
1: 
0:         @Override
1:         public int hashCode()
1:         {
1:             return getToken().hashCode() + (isMinimumBound ? 0 : 1);
1:         }
1: 
0:         @Override
1:         public String toString()
1:         {
1:             return String.format("%s(%s)", isMinimumBound ? "min" : "max", getToken().toString());
1:         }
1:     }
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns a measure for the token space covered between this token and next.
1:      * Used by the token allocation algorithm (see CASSANDRA-7032).
1:      */
1:     abstract public double size(Token next);
1:     /**
1:      * Returns a token that is slightly greater than this. Used to avoid clashes
1:      * between nodes in separate datacentres trying to use the same token via
1:      * the token allocation algorithm.
1:      */
1:     abstract public Token increaseSlightly();
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:806facc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
0: import org.apache.cassandra.exceptions.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public static class TokenSerializer implements IPartitionerDependentSerializer<Token>
1:         public void serialize(Token token, DataOutputPlus out, int version) throws IOException
1:             IPartitioner p = token.getPartitioner();
1:         public Token deserialize(DataInput in, IPartitioner p, int version) throws IOException
1:         public long serializedSize(Token object, int version)
1:             IPartitioner p = object.getPartitioner();
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:     abstract public IPartitioner getPartitioner();
1:     abstract public long getHeapSize();
/////////////////////////////////////////////////////////////////////////
1:     public Token minValue()
1:         return getPartitioner().getMinimumToken();
1:         return this.equals(minValue());
/////////////////////////////////////////////////////////////////////////
0:     public KeyBound minKeyBound()
0:     public KeyBound maxKeyBound()
/////////////////////////////////////////////////////////////////////////
1:         if (isMinimum())
/////////////////////////////////////////////////////////////////////////
1:         public IPartitioner getPartitioner()
1:             return getToken().getPartitioner();
1:         }
1: 
1:         public KeyBound minValue()
1:         {
1:             return getPartitioner().getMinimumToken().minKeyBound();
1:             return getToken().isMinimum();
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public abstract class Token implements RingPosition<Token>, Serializable
1:     public static abstract class TokenFactory
1:         public abstract ByteBuffer toByteArray(Token token);
1:         public abstract Token fromByteArray(ByteBuffer bytes);
1:         public abstract String toString(Token token); // serialize as string, not necessarily human-readable
1:         public abstract Token fromString(String string); // deserialize
/////////////////////////////////////////////////////////////////////////
1:     public Token getToken()
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     public <R extends RingPosition<R>> R upperBound(Class<R> klass)
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:6eef6f7
/////////////////////////////////////////////////////////////////////////
1:     abstract public Object getTokenValue();
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:     public static class KeyBound implements RowPosition
/////////////////////////////////////////////////////////////////////////
1:         public boolean isMinimum()
1:         {
0:             return isMinimum(StorageService.getPartitioner());
1:         }
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(Token token, DataOutputPlus out) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(Token token, DataOutput out) throws IOException
1:             ByteBufferUtil.writeWithLength(b, out);
0:         public Token deserialize(DataInput in) throws IOException
1:             int size = in.readInt();
1:             in.readFully(bytes);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(Token object, TypeSizes typeSizes)
0:             return TypeSizes.NATIVE.sizeof(b.remaining()) + b.remaining();
commit:25f40db
/////////////////////////////////////////////////////////////////////////
0: public abstract class Token<T> implements RingPosition<Token<T>>, Serializable
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.ISerializer;
/////////////////////////////////////////////////////////////////////////
0:     public static class TokenSerializer implements ISerializer<Token>
/////////////////////////////////////////////////////////////////////////
1: 
0:         public long serializedSize(Token object)
1:         {
0:             throw new UnsupportedOperationException();
1:         }
commit:6a9a336
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1: 
1:         public abstract void validate(String token) throws ConfigurationException;
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public final T token;
/////////////////////////////////////////////////////////////////////////
0:         public abstract ByteBuffer toByteArray(Token<T> token);
0:         public abstract Token<T> fromByteArray(ByteBuffer bytes);
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer b = p.getTokenFactory().toByteArray(token);
0:             dos.writeInt(b.remaining());
0:             dos.write(b.array(),b.position()+b.arrayOffset(),b.remaining());
/////////////////////////////////////////////////////////////////////////
1:             return p.getTokenFactory().fromByteArray(ByteBuffer.wrap(bytes));
commit:7594c1b
/////////////////////////////////////////////////////////////////////////
1:     private static final long serialVersionUID = 1L;
1: 
commit:23aa01b
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
0: import java.io.DataOutput;
0: import org.apache.cassandra.io.ICompactSerializer2;
/////////////////////////////////////////////////////////////////////////
0:     public static class TokenSerializer implements ICompactSerializer2<Token>
0:         public void serialize(Token token, DataOutput dos) throws IOException
/////////////////////////////////////////////////////////////////////////
0:         public Token deserialize(DataInput dis) throws IOException
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
0: public abstract class Token<T> implements Comparable<Token<T>>, Serializable
/////////////////////////////////////////////////////////////////////////
0:     abstract public int compareTo(Token<T> o);
/////////////////////////////////////////////////////////////////////////
0:     public static abstract class TokenFactory<T>
commit:7520b43
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
0: public abstract class Token<T extends Comparable> implements Comparable<Token<T>>, Serializable
commit:88edbed
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
commit:ec29172
/////////////////////////////////////////////////////////////////////////
0:         public abstract String toString(Token<T> token); // serialize as string, not necessarily human-readable
0:         public abstract Token<T> fromString(String string); // deserialize
commit:71739ef
commit:907d92e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.dht;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.service.StorageService;
1: 
0: public abstract class Token<T extends Comparable> implements Comparable<Token<T>>
1: {
0:     private static final TokenSerializer serializer = new TokenSerializer();
0:     public static TokenSerializer serializer()
1:     {
0:         return serializer;
1:     }
1: 
0:     T token;
1: 
0:     protected Token(T token)
1:     {
0:         this.token = token;
1:     }
1: 
0:     /**
0:      * This determines the comparison for node destination purposes.
0:      */
0:     public int compareTo(Token<T> o)
1:     {
0:         return token.compareTo(o.token);
1:     }
1: 
0:     public String toString()
1:     {
0:         return "Token(" + token + ")";
1:     }
1: 
0:     public boolean equals(Object obj)
1:     {
0:         if (!(obj instanceof Token)) {
0:             return false;
1:         }
0:         return token.equals(((Token)obj).token);
1:     }
1: 
0:     public int hashCode()
1:     {
0:         return token.hashCode();
1:     }
1: 
0:     public static abstract class TokenFactory<T extends Comparable>
1:     {
0:         public abstract byte[] toByteArray(Token<T> token);
0:         public abstract Token<T> fromByteArray(byte[] bytes);
0:         public abstract Token<T> fromString(String string);
1:     }
1: 
0:     public static class TokenSerializer implements ICompactSerializer<Token>
1:     {
0:         public void serialize(Token token, DataOutputStream dos) throws IOException
1:         {
0:             IPartitioner p = StorageService.getPartitioner();
0:             byte[] b = p.getTokenFactory().toByteArray(token);
0:             dos.writeInt(b.length);
0:             dos.write(b);
1:         }
1: 
0:         public Token deserialize(DataInputStream dis) throws IOException
1:         {
0:             IPartitioner p = StorageService.getPartitioner();
0:             int size = dis.readInt();
1:             byte[] bytes = new byte[size];
0:             dis.readFully(bytes);
0:             return p.getTokenFactory().fromByteArray(bytes);
1:         }
1:     }
1: }
commit:dd61d51
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.dht;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.service.StorageService;
0: 
0: public abstract class Token<T extends Comparable> implements Comparable<Token<T>>
0: {
0:     private static final TokenSerializer serializer = new TokenSerializer();
0:     public static TokenSerializer serializer()
0:     {
0:         return serializer;
0:     }
0: 
0:     T token;
0: 
0:     protected Token(T token)
0:     {
0:         this.token = token;
0:     }
0: 
0:     /**
0:      * This determines the comparison for node destination purposes.
0:      */
0:     public int compareTo(Token<T> o)
0:     {
0:         return token.compareTo(o.token);
0:     }
0: 
0:     public String toString()
0:     {
0:         return "Token(" + token + ")";
0:     }
0: 
0:     public boolean equals(Object obj)
0:     {
0:         if (!(obj instanceof Token)) {
0:             return false;
0:         }
0:         return token.equals(((Token)obj).token);
0:     }
0: 
0:     public int hashCode()
0:     {
0:         return token.hashCode();
0:     }
0: 
0:     public static abstract class TokenFactory<T extends Comparable>
0:     {
0:         public abstract byte[] toByteArray(Token<T> token);
0:         public abstract Token<T> fromByteArray(byte[] bytes);
0:         public abstract Token<T> fromString(String string);
0:     }
0: 
0:     public static class TokenSerializer implements ICompactSerializer<Token>
0:     {
0:         public void serialize(Token token, DataOutputStream dos) throws IOException
0:         {
0:             IPartitioner p = StorageService.getPartitioner();
0:             byte[] b = p.getTokenFactory().toByteArray(token);
0:             dos.writeInt(b.length);
0:             dos.write(b);
0:         }
0: 
0:         public Token deserialize(DataInputStream dis) throws IOException
0:         {
0:             IPartitioner p = StorageService.getPartitioner();
0:             int size = dis.readInt();
0:             byte[] bytes = new byte[size];
0:             dis.readFully(bytes);
0:             return p.getTokenFactory().fromByteArray(bytes);
0:         }
0:     }
0: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:5f184a0
/////////////////////////////////////////////////////////////////////////
0:     public <R extends RingPosition> R upperBound(Class<R> klass)
1:             return (R)this;
1:             return (R)maxKeyBound();
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final TokenSerializer serializer = new TokenSerializer();
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
0:             IPartitioner p = StorageService.getPartitioner();
1:             ByteBuffer b = p.getTokenFactory().toByteArray(object);
0:             return DBTypeSizes.NATIVE.sizeof(b.remaining()) + b.remaining();
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(Token object, DBTypeSizes typeSizes)
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             ByteBufferUtil.writeWithLength(b, dos);
author:Jun Rao
-------------------------------------------------------------------------------
commit:c4992f4
/////////////////////////////////////////////////////////////////////////
0:         return token.toString();
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:bd884e4
/////////////////////////////////////////////////////////////////////////
============================================================================