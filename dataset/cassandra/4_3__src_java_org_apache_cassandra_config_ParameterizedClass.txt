1:44f8254: /*
1:44f8254:  * Licensed to the Apache Software Foundation (ASF) under one
1:44f8254:  * or more contributor license agreements.  See the NOTICE file
1:44f8254:  * distributed with this work for additional information
1:44f8254:  * regarding copyright ownership.  The ASF licenses this file
1:44f8254:  * to you under the Apache License, Version 2.0 (the
1:44f8254:  * "License"); you may not use this file except in compliance
1:44f8254:  * with the License.  You may obtain a copy of the License at
1:44f8254:  *
1:44f8254:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44f8254:  *
1:44f8254:  * Unless required by applicable law or agreed to in writing, software
1:44f8254:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44f8254:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44f8254:  * See the License for the specific language governing permissions and
1:44f8254:  * limitations under the License.
1:44f8254:  */
1:44f8254: package org.apache.cassandra.config;
1:44f8254: 
1:44f8254: import java.util.List;
1:44f8254: import java.util.Map;
1:44f8254: 
1:44f8254: import com.google.common.base.Objects;
1:44f8254: 
1:8a03181: public class ParameterizedClass
1:44f8254: {
1:c20566f:     public static final String CLASS_NAME = "class_name";
1:c20566f:     public static final String PARAMETERS = "parameters";
1:c20566f: 
1:44f8254:     public String class_name;
1:44f8254:     public Map<String, String> parameters;
1:44f8254: 
1:8a03181:     public ParameterizedClass(String class_name, Map<String, String> parameters)
1:44f8254:     {
1:44f8254:         this.class_name = class_name;
1:44f8254:         this.parameters = parameters;
1:44f8254:     }
1:44f8254: 
1:44f8254:     @SuppressWarnings("unchecked")
1:e89d548:     public ParameterizedClass(Map<String, ?> p)
1:44f8254:     {
1:c20566f:         this((String)p.get(CLASS_NAME),
1:c20566f:              p.containsKey(PARAMETERS) ? (Map<String, String>)((List<?>)p.get(PARAMETERS)).get(0) : null);
1:44f8254:     }
1:44f8254: 
1:44f8254:     @Override
1:44f8254:     public boolean equals(Object that)
1:44f8254:     {
1:8a03181:         return that instanceof ParameterizedClass && equals((ParameterizedClass) that);
1:44f8254:     }
1:44f8254: 
1:8a03181:     public boolean equals(ParameterizedClass that)
1:44f8254:     {
1:44f8254:         return Objects.equal(class_name, that.class_name) && Objects.equal(parameters, that.parameters);
1:44f8254:     }
1:44f8254: 
1:44f8254:     @Override
1:44f8254:     public String toString()
1:44f8254:     {
1:44f8254:         return class_name + (parameters == null ? "" : parameters.toString());
1:44f8254:     }
1:44f8254: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.ImmutableMap;
1:     public static final String CLASS_NAME = "class_name";
1:     public static final String PARAMETERS = "parameters";
1: 
/////////////////////////////////////////////////////////////////////////
1:         this((String)p.get(CLASS_NAME),
1:              p.containsKey(PARAMETERS) ? (Map<String, String>)((List<?>)p.get(PARAMETERS)).get(0) : null);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e89d548
/////////////////////////////////////////////////////////////////////////
1:     public ParameterizedClass(Map<String, ?> p)
0:              p.containsKey("parameters") ? (Map<String, String>)((List<?>)p.get("parameters")).get(0) : null);
author:blambov
-------------------------------------------------------------------------------
commit:8a03181
/////////////////////////////////////////////////////////////////////////
1: public class ParameterizedClass
1:     public ParameterizedClass(String class_name, Map<String, String> parameters)
0:     public ParameterizedClass(LinkedHashMap<String, ?> p)
/////////////////////////////////////////////////////////////////////////
1:         return that instanceof ParameterizedClass && equals((ParameterizedClass) that);
1:     public boolean equals(ParameterizedClass that)
commit:44f8254
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.config;
1: 
0: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import com.google.common.base.Objects;
1: 
0: public class ParametrizedClass
1: {
1:     public String class_name;
1:     public Map<String, String> parameters;
1: 
0:     public ParametrizedClass(String class_name, Map<String, String> parameters)
1:     {
1:         this.class_name = class_name;
1:         this.parameters = parameters;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
0:     public ParametrizedClass(LinkedHashMap<String, ?> p)
1:     {
0:         this((String)p.get("class_name"),
0:                 p.containsKey("parameters") ? (Map<String, String>)((List<?>)p.get("parameters")).get(0) : null);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object that)
1:     {
0:         return that instanceof ParametrizedClass && equals((ParametrizedClass) that);
1:     }
1: 
0:     public boolean equals(ParametrizedClass that)
1:     {
1:         return Objects.equal(class_name, that.class_name) && Objects.equal(parameters, that.parameters);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return class_name + (parameters == null ? "" : parameters.toString());
1:     }
1: }
============================================================================