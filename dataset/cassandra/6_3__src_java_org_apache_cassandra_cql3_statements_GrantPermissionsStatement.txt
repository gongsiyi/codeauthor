1:879b694: /*
1:bcec7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:bcec7a5:  * or more contributor license agreements.  See the NOTICE file
1:bcec7a5:  * distributed with this work for additional information
1:bcec7a5:  * regarding copyright ownership.  The ASF licenses this file
1:bcec7a5:  * to you under the Apache License, Version 2.0 (the
1:bcec7a5:  * "License"); you may not use this file except in compliance
1:bcec7a5:  * with the License.  You may obtain a copy of the License at
1:bcec7a5:  *
1:879b694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bcec7a5:  *
1:879b694:  * Unless required by applicable law or agreed to in writing, software
1:879b694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:879b694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:879b694:  * See the License for the specific language governing permissions and
1:879b694:  * limitations under the License.
1:bcec7a5:  */
1:bcec7a5: package org.apache.cassandra.cql3.statements;
6:bcec7a5: 
1:5a3eb1a: import java.util.Set;
1:bcec7a5: 
1:217721a: import org.apache.cassandra.auth.IResource;
1:bcec7a5: import org.apache.cassandra.auth.Permission;
1:bddfa9e: import org.apache.cassandra.config.DatabaseDescriptor;
1:879b694: import org.apache.cassandra.cql3.RoleName;
1:0b83682: import org.apache.cassandra.exceptions.RequestExecutionException;
1:0b83682: import org.apache.cassandra.exceptions.RequestValidationException;
1:bcec7a5: import org.apache.cassandra.service.ClientState;
1:bcec7a5: import org.apache.cassandra.transport.messages.ResultMessage;
1:bcec7a5: 
1:217721a: public class GrantPermissionsStatement extends PermissionsManagementStatement
3:bcec7a5: {
1:217721a:     public GrantPermissionsStatement(Set<Permission> permissions, IResource resource, RoleName grantee)
1:bcec7a5:     {
1:879b694:         super(permissions, resource, grantee);
3:bcec7a5:     }
1:bcec7a5: 
1:0b83682:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:bcec7a5:     {
1:879b694:         DatabaseDescriptor.getAuthorizer().grant(state.getUser(), permissions, resource, grantee);
1:bcec7a5:         return null;
1:bcec7a5:     }
1:bcec7a5: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.IResource;
/////////////////////////////////////////////////////////////////////////
1: public class GrantPermissionsStatement extends PermissionsManagementStatement
1:     public GrantPermissionsStatement(Set<Permission> permissions, IResource resource, RoleName grantee)
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.RoleName;
/////////////////////////////////////////////////////////////////////////
0:     public GrantStatement(Set<Permission> permissions, DataResource resource, RoleName grantee)
1:         super(permissions, resource, grantee);
1:         DatabaseDescriptor.getAuthorizer().grant(state.getUser(), permissions, resource, grantee);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b5a232b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.DataResource;
/////////////////////////////////////////////////////////////////////////
0:     public GrantStatement(Set<Permission> permissions, DataResource resource, String username)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0b83682
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ClientState state) throws UnauthorizedException, InvalidRequestException
0:         DatabaseDescriptor.getAuthorizer().grant(state.getUser(), permissions, resource, username);
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
0: import org.apache.cassandra.auth.IResource;
/////////////////////////////////////////////////////////////////////////
0:     public GrantStatement(Set<Permission> permissions, IResource resource, String username)
0:         super(permissions, resource, username);
0:         state.grantPermission(permissions, resource, username);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f32110c
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c74a871
/////////////////////////////////////////////////////////////////////////
0: public class GrantStatement extends PermissionAlteringStatement
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:bcec7a5
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
1: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.cql3.CFName;
0: import org.apache.cassandra.cql3.CQLStatement;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
0: public class GrantStatement extends ParsedStatement implements CQLStatement
1: {
0:     private final Permission permission;
0:     private final CFName resource;
0:     private final String username;
0:     private final boolean grantOption;
1: 
0:     public GrantStatement(Permission permission, CFName resource, String username, boolean grantOption)
1:     {
0:         this.permission = permission;
0:         this.resource = resource;
0:         this.username = username;
0:         this.grantOption = grantOption;
1:     }
1: 
0:     public int getBoundsTerms()
1:     {
0:         return 0;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
0:     {}
1: 
0:     public void validate(ClientState state) throws InvalidRequestException
0:     {}
1: 
0:     public ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException
1:     {
0:         state.grantPermission(permission, username, resource, grantOption);
1:         return null;
1:     }
1: 
0:     public Prepared prepare() throws InvalidRequestException
1:     {
0:         return new Prepared(this);
1:     }
1: }
commit:aba5a37
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.cassandra.cql3.statements;
0: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
0: 
0: import org.apache.cassandra.auth.Permission;
0: import org.apache.cassandra.cql3.CFName;
0: import org.apache.cassandra.cql3.CQLStatement;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.thrift.*;
0: 
0: public class GrantStatement extends ParsedStatement implements CQLStatement
0: {
0:     private final Permission permission;
0:     private final CFName resource;
0:     private final String username;
0:     private final boolean grantOption;
0: 
0:     public GrantStatement(Permission permission, CFName resource, String username, boolean grantOption)
0:     {
0:         this.permission = permission;
0:         this.resource = resource;
0:         this.username = username;
0:         this.grantOption = grantOption;
0:     }
0: 
0:     public int getBoundsTerms()
0:     {
0:         return 0;
0:     }
0: 
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {}
0: 
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException
0:     {}
0: 
0:     public CqlResult execute(ClientState state, List<ByteBuffer> variables) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException
0:     {
0:         state.grantPermission(permission, username, resource, grantOption);
0:         return null;
0:     }
0: 
0:     public Prepared prepare() throws InvalidRequestException
0:     {
0:         return new Prepared(this);
0:     }
0: }
============================================================================