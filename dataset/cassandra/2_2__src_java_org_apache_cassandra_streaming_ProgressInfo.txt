1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming;
1:5151169: 
1:5151169: import java.io.Serializable;
1:5151169: import java.net.InetAddress;
1:5151169: 
1:5151169: import com.google.common.base.Objects;
1:5151169: 
1:5151169: /**
1:5151169:  * ProgressInfo contains file transfer progress.
1:5151169:  */
1:5151169: public class ProgressInfo implements Serializable
1:5151169: {
1:5151169:     /**
1:5151169:      * Direction of the stream.
1:5151169:      */
1:5151169:     public static enum Direction
1:5151169:     {
1:5151169:         OUT(0),
1:5151169:         IN(1);
1:5151169: 
1:5151169:         public final byte code;
1:5151169: 
1:5151169:         private Direction(int code)
1:5151169:         {
1:5151169:             this.code = (byte) code;
1:5151169:         }
1:5151169: 
1:5151169:         public static Direction fromByte(byte direction)
1:5151169:         {
1:5151169:             return direction == 0 ? OUT : IN;
1:5151169:         }
1:5151169:     }
1:5151169: 
1:5151169:     public final InetAddress peer;
1:44fa2cd:     public final int sessionIndex;
1:5151169:     public final String fileName;
1:5151169:     public final Direction direction;
1:5151169:     public final long currentBytes;
1:5151169:     public final long totalBytes;
1:5151169: 
1:44fa2cd:     public ProgressInfo(InetAddress peer, int sessionIndex, String fileName, Direction direction, long currentBytes, long totalBytes)
1:5151169:     {
1:5151169:         assert totalBytes > 0;
1:5151169: 
1:5151169:         this.peer = peer;
1:44fa2cd:         this.sessionIndex = sessionIndex;
1:5151169:         this.fileName = fileName;
1:5151169:         this.direction = direction;
1:5151169:         this.currentBytes = currentBytes;
1:5151169:         this.totalBytes = totalBytes;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * @return true if file transfer is completed
1:5151169:      */
1:5151169:     public boolean isCompleted()
1:5151169:     {
1:44fa2cd:         return currentBytes >= totalBytes;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * ProgressInfo is considered to be equal only when all attributes except currentBytes are equal.
1:5151169:      */
1:5151169:     @Override
1:5151169:     public boolean equals(Object o)
1:5151169:     {
1:5151169:         if (this == o) return true;
1:5151169:         if (o == null || getClass() != o.getClass()) return false;
1:5151169: 
1:5151169:         ProgressInfo that = (ProgressInfo) o;
1:5151169: 
1:5151169:         if (totalBytes != that.totalBytes) return false;
1:5151169:         if (direction != that.direction) return false;
1:5151169:         if (!fileName.equals(that.fileName)) return false;
1:44fa2cd:         if (sessionIndex != that.sessionIndex) return false;
1:5151169:         return peer.equals(that.peer);
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public int hashCode()
1:5151169:     {
1:44fa2cd:         return Objects.hashCode(peer, sessionIndex, fileName, direction, totalBytes);
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public String toString()
1:5151169:     {
1:5151169:         StringBuilder sb = new StringBuilder(fileName);
1:5151169:         sb.append(" ").append(currentBytes);
1:5151169:         sb.append("/").append(totalBytes).append(" bytes");
1:5151169:         sb.append("(").append(currentBytes*100/totalBytes).append("%) ");
1:5151169:         sb.append(direction == Direction.OUT ? "sent to " : "received from ");
1:44fa2cd:         sb.append("idx:").append(sessionIndex);
1:5151169:         sb.append(peer);
1:5151169:         return sb.toString();
1:5151169:     }
1:5151169: }
============================================================================
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
1:     public final int sessionIndex;
1:     public ProgressInfo(InetAddress peer, int sessionIndex, String fileName, Direction direction, long currentBytes, long totalBytes)
1:         this.sessionIndex = sessionIndex;
/////////////////////////////////////////////////////////////////////////
1:         return currentBytes >= totalBytes;
/////////////////////////////////////////////////////////////////////////
1:         if (sessionIndex != that.sessionIndex) return false;
1:         return Objects.hashCode(peer, sessionIndex, fileName, direction, totalBytes);
/////////////////////////////////////////////////////////////////////////
1:         sb.append("idx:").append(sessionIndex);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming;
1: 
1: import java.io.Serializable;
1: import java.net.InetAddress;
1: 
1: import com.google.common.base.Objects;
1: 
1: /**
1:  * ProgressInfo contains file transfer progress.
1:  */
1: public class ProgressInfo implements Serializable
1: {
1:     /**
1:      * Direction of the stream.
1:      */
1:     public static enum Direction
1:     {
1:         OUT(0),
1:         IN(1);
1: 
1:         public final byte code;
1: 
1:         private Direction(int code)
1:         {
1:             this.code = (byte) code;
1:         }
1: 
1:         public static Direction fromByte(byte direction)
1:         {
1:             return direction == 0 ? OUT : IN;
1:         }
1:     }
1: 
1:     public final InetAddress peer;
1:     public final String fileName;
1:     public final Direction direction;
1:     public final long currentBytes;
1:     public final long totalBytes;
1: 
0:     public ProgressInfo(InetAddress peer, String fileName, Direction direction, long currentBytes, long totalBytes)
1:     {
1:         assert totalBytes > 0;
1: 
1:         this.peer = peer;
1:         this.fileName = fileName;
1:         this.direction = direction;
1:         this.currentBytes = currentBytes;
1:         this.totalBytes = totalBytes;
1:     }
1: 
1:     /**
1:      * @return true if file transfer is completed
1:      */
1:     public boolean isCompleted()
1:     {
0:         return currentBytes == totalBytes;
1:     }
1: 
1:     /**
1:      * ProgressInfo is considered to be equal only when all attributes except currentBytes are equal.
1:      */
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         ProgressInfo that = (ProgressInfo) o;
1: 
1:         if (totalBytes != that.totalBytes) return false;
1:         if (direction != that.direction) return false;
1:         if (!fileName.equals(that.fileName)) return false;
1:         return peer.equals(that.peer);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hashCode(peer, fileName, direction, totalBytes);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder(fileName);
1:         sb.append(" ").append(currentBytes);
1:         sb.append("/").append(totalBytes).append(" bytes");
1:         sb.append("(").append(currentBytes*100/totalBytes).append("%) ");
1:         sb.append(direction == Direction.OUT ? "sent to " : "received from ");
1:         sb.append(peer);
1:         return sb.toString();
1:     }
1: }
============================================================================