1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: 
1:0626be8: package org.apache.cassandra.index.transactions;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Base interface for the handling of index updates.
1:0626be8:  * There are 3 types of transaction where indexes are updated to stay in sync with the base table, each represented by
1:0626be8:  * a subinterface:
1:0626be8:  * * {@code UpdateTransaction}
1:0626be8:  *   Used on the regular write path and when indexing newly acquired SSTables from streaming or sideloading. This type
1:0626be8:  *   of transaction may include both row inserts and updates to rows previously existing in the base Memtable. Instances
1:0626be8:  *   are scoped to a single partition update and are obtained from the factory method
1:6b7db8a:  *   {@code SecondaryIndexManager#newUpdateTransaction}
1:0626be8:  *
1:0626be8:  * * {@code CompactionTransaction}
1:0626be8:  *   Used during compaction when stale entries which have been superceded are cleaned up from the index. As rows in a
1:0626be8:  *   partition are merged during the compaction, index entries for any purged rows are cleaned from the index to
1:0626be8:  *   compensate for the fact that they may not have been removed at write time if the data in the base table had been
1:0626be8:  *   already flushed to disk (and so was processed as an insert, not an update by the UpdateTransaction). These
1:0626be8:  *   transactions are currently scoped to a single row within a partition, but this could be improved to batch process
1:0626be8:  *   multiple rows within a single partition.
1:0626be8:  *
1:0626be8:  * * @{code CleanupTransaction}
1:0626be8:  *   During cleanup no merging is required, the only thing to do is to notify indexes of the partitions being removed,
1:0626be8:  *   along with the rows within those partitions. Like with compaction, these transactions are currently scoped to a
1:0626be8:  *   single row within a partition, but this could be improved with batching.
1:0626be8:  */
1:0626be8: public interface IndexTransaction
1:0626be8: {
1:0626be8:     /**
1:0626be8:      * Used to differentiate between type of index transaction when obtaining
1:0626be8:      * a handler from Index implementations.
1:0626be8:      */
1:0626be8:     public enum Type
1:0626be8:     {
1:0626be8:         UPDATE, COMPACTION, CLEANUP
1:0626be8:     }
1:0626be8: 
1:0626be8:     void start();
1:0626be8:     void commit();
1:0626be8: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  *   {@code SecondaryIndexManager#newUpdateTransaction}
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.transactions;
1: 
1: /**
1:  * Base interface for the handling of index updates.
1:  * There are 3 types of transaction where indexes are updated to stay in sync with the base table, each represented by
1:  * a subinterface:
1:  * * {@code UpdateTransaction}
1:  *   Used on the regular write path and when indexing newly acquired SSTables from streaming or sideloading. This type
1:  *   of transaction may include both row inserts and updates to rows previously existing in the base Memtable. Instances
1:  *   are scoped to a single partition update and are obtained from the factory method
0:  *   @{code SecondaryIndexManager#newUpdateTransaction}
1:  *
1:  * * {@code CompactionTransaction}
1:  *   Used during compaction when stale entries which have been superceded are cleaned up from the index. As rows in a
1:  *   partition are merged during the compaction, index entries for any purged rows are cleaned from the index to
1:  *   compensate for the fact that they may not have been removed at write time if the data in the base table had been
1:  *   already flushed to disk (and so was processed as an insert, not an update by the UpdateTransaction). These
1:  *   transactions are currently scoped to a single row within a partition, but this could be improved to batch process
1:  *   multiple rows within a single partition.
1:  *
1:  * * @{code CleanupTransaction}
1:  *   During cleanup no merging is required, the only thing to do is to notify indexes of the partitions being removed,
1:  *   along with the rows within those partitions. Like with compaction, these transactions are currently scoped to a
1:  *   single row within a partition, but this could be improved with batching.
1:  */
1: public interface IndexTransaction
1: {
1:     /**
1:      * Used to differentiate between type of index transaction when obtaining
1:      * a handler from Index implementations.
1:      */
1:     public enum Type
1:     {
1:         UPDATE, COMPACTION, CLEANUP
1:     }
1: 
1:     void start();
1:     void commit();
1: }
============================================================================