1:07cf56f: /*
1:554223b:  * Licensed to the Apache Software Foundation (ASF) under one
1:554223b:  * or more contributor license agreements.  See the NOTICE file
1:554223b:  * distributed with this work for additional information
1:554223b:  * regarding copyright ownership.  The ASF licenses this file
1:554223b:  * to you under the Apache License, Version 2.0 (the
1:554223b:  * "License"); you may not use this file except in compliance
1:554223b:  * with the License.  You may obtain a copy of the License at
1:554223b:  *
1:554223b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:554223b:  *
1:554223b:  * Unless required by applicable law or agreed to in writing, software
1:554223b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:554223b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:554223b:  * See the License for the specific language governing permissions and
1:554223b:  * limitations under the License.
1:554223b:  */
1:554223b: package org.apache.cassandra.db;
2:554223b: 
1:554223b: import java.io.DataInput;
1:554223b: import java.io.IOException;
1:554223b: import java.nio.ByteBuffer;
1:554223b: 
1:554223b: import org.apache.cassandra.dht.*;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:554223b: import org.apache.cassandra.utils.ByteBufferUtil;
1:554223b: 
1:a991b64: public interface PartitionPosition extends RingPosition<PartitionPosition>
1:554223b: {
1:554223b:     public static enum Kind
1:554223b:     {
1:554223b:         // Only add new values to the end of the enum, the ordinal is used
1:554223b:         // during serialization
1:554223b:         ROW_KEY, MIN_BOUND, MAX_BOUND;
1:554223b: 
1:554223b:         private static final Kind[] allKinds = Kind.values();
1:554223b: 
1:554223b:         static Kind fromOrdinal(int ordinal)
1:554223b:         {
1:554223b:             return allKinds[ordinal];
1:554223b:         }
1:554223b:     }
1:554223b: 
1:8541cca:     public static final class ForKey
1:554223b:     {
1:a991b64:         public static PartitionPosition get(ByteBuffer key, IPartitioner p)
1:554223b:         {
1:554223b:             return key == null || key.remaining() == 0 ? p.getMinimumToken().minKeyBound() : p.decorateKey(key);
1:554223b:         }
1:554223b:     }
1:554223b: 
1:587cb58:     public static final RowPositionSerializer serializer = new RowPositionSerializer();
1:554223b: 
1:8541cca:     public Kind kind();
1:8541cca:     public boolean isMinimum();
1:554223b: 
1:a991b64:     public static class RowPositionSerializer implements IPartitionerDependentSerializer<PartitionPosition>
1:554223b:     {
1:554223b:         /*
1:554223b:          * We need to be able to serialize both Token.KeyBound and
1:554223b:          * DecoratedKey. To make this compact, we first write a byte whose
1:554223b:          * meaning is:
1:554223b:          *   - 0: DecoratedKey
1:554223b:          *   - 1: a 'minimum' Token.KeyBound
1:554223b:          *   - 2: a 'maximum' Token.KeyBound
1:554223b:          * In the case of the DecoratedKey, we then serialize the key (the
1:554223b:          * token is recreated on the other side). In the other cases, we then
1:554223b:          * serialize the token.
1:554223b:          */
1:a991b64:         public void serialize(PartitionPosition pos, DataOutputPlus out, int version) throws IOException
1:554223b:         {
1:554223b:             Kind kind = pos.kind();
1:60d9c7f:             out.writeByte(kind.ordinal());
1:554223b:             if (kind == Kind.ROW_KEY)
1:8541cca:                 ByteBufferUtil.writeWithShortLength(((DecoratedKey)pos).getKey(), out);
1:554223b:             else
1:806facc:                 Token.serializer.serialize(pos.getToken(), out, version);
1:554223b:         }
1:554223b: 
1:a991b64:         public PartitionPosition deserialize(DataInput in, IPartitioner p, int version) throws IOException
1:554223b:         {
1:60d9c7f:             Kind kind = Kind.fromOrdinal(in.readByte());
1:554223b:             if (kind == Kind.ROW_KEY)
1:554223b:             {
1:60d9c7f:                 ByteBuffer k = ByteBufferUtil.readWithShortLength(in);
1:0a08525:                 return p.decorateKey(k);
1:554223b:             }
1:554223b:             else
1:554223b:             {
1:806facc:                 Token t = Token.serializer.deserialize(in, p, version);
1:554223b:                 return kind == Kind.MIN_BOUND ? t.minKeyBound() : t.maxKeyBound();
1:554223b:             }
1:554223b:         }
1:554223b: 
1:a991b64:         public long serializedSize(PartitionPosition pos, int version)
1:554223b:         {
1:554223b:             Kind kind = pos.kind();
1:cb25a8f:             int size = 1; // 1 byte for enum
1:cb25a8f:             if (kind == Kind.ROW_KEY)
1:554223b:             {
1:8541cca:                 int keySize = ((DecoratedKey)pos).getKey().remaining();
1:03f72ac:                 size += TypeSizes.sizeof((short) keySize) + keySize;
1:554223b:             }
1:cb25a8f:             else
2:8541cca:             {
1:806facc:                 size += Token.serializer.serializedSize(pos.getToken(), version);
1:554223b:             }
1:cb25a8f:             return size;
1:554223b:         }
1:554223b:     }
2:8541cca: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:                 return p.decorateKey(k);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                 return StorageService.getPartitioner().decorateKey(k);
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(RowPosition pos, DataOutput out) throws IOException
1:             out.writeByte(kind.ordinal());
0:                 ByteBufferUtil.writeWithShortLength(((DecoratedKey)pos).key, out);
0:                 Token.serializer.serialize(pos.getToken(), out);
0:         public RowPosition deserialize(DataInput in) throws IOException
1:             Kind kind = Kind.fromOrdinal(in.readByte());
1:                 ByteBuffer k = ByteBufferUtil.readWithShortLength(in);
0:                 Token t = Token.serializer.deserialize(in);
commit:6018709
/////////////////////////////////////////////////////////////////////////
0:         return (key == null || key.remaining() == 0)
0:                ? p.getMinimumToken().minKeyBound()
0:                : p.decorateKey(key);
commit:4a3fa3c
/////////////////////////////////////////////////////////////////////////
0:                 size += typeSizes.sizeof((short) keySize) + keySize;
0:                 size += Token.serializer.serializedSize(pos.getToken(), typeSizes);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(RowPosition pos, TypeSizes typeSizes)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:                 return p.decorateKey(k);
commit:806facc
/////////////////////////////////////////////////////////////////////////
0:     public static class RowPositionSerializer implements IPartitionerDependentSerializer<RowPosition>
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(RowPosition pos, DataOutputPlus out, int version) throws IOException
1:                 Token.serializer.serialize(pos.getToken(), out, version);
0:         public RowPosition deserialize(DataInput in, IPartitioner p, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:                 Token t = Token.serializer.deserialize(in, p, version);
0:         public long serializedSize(RowPosition pos, int version)
0:                 size += TypeSizes.NATIVE.sizeof((short) keySize) + keySize;
1:                 size += Token.serializer.serializedSize(pos.getToken(), version);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1:                 size += TypeSizes.sizeof((short) keySize) + keySize;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: public interface PartitionPosition extends RingPosition<PartitionPosition>
/////////////////////////////////////////////////////////////////////////
1:         public static PartitionPosition get(ByteBuffer key, IPartitioner p)
/////////////////////////////////////////////////////////////////////////
1:     public static class RowPositionSerializer implements IPartitionerDependentSerializer<PartitionPosition>
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(PartitionPosition pos, DataOutputPlus out, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public PartitionPosition deserialize(DataInput in, IPartitioner p, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(PartitionPosition pos, int version)
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
commit:f95fc45
/////////////////////////////////////////////////////////////////////////
0:             return DBConstants.BOOL_SIZE
0:                 + (kind == Kind.ROW_KEY ? DBConstants.SHORT_SIZE + ((DecoratedKey)pos).key.remaining()
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.dht.*;
0: import org.apache.cassandra.io.ISerializer;
0: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: public abstract class RowPosition implements RingPosition<RowPosition>
1: {
1:     public static enum Kind
1:     {
1:         // Only add new values to the end of the enum, the ordinal is used
1:         // during serialization
1:         ROW_KEY, MIN_BOUND, MAX_BOUND;
1: 
1:         private static final Kind[] allKinds = Kind.values();
1: 
1:         static Kind fromOrdinal(int ordinal)
1:         {
1:             return allKinds[ordinal];
1:         }
1:     }
1: 
0:     private static final RowPositionSerializer serializer = new RowPositionSerializer();
0:     public static RowPositionSerializer serializer()
1:     {
0:         return serializer;
1:     }
1: 
0:     public static RowPosition forKey(ByteBuffer key, IPartitioner p)
1:     {
1:         return key == null || key.remaining() == 0 ? p.getMinimumToken().minKeyBound() : p.decorateKey(key);
1:     }
1: 
0:     public abstract Token getToken();
0:     public abstract Kind kind();
1: 
0:     public boolean isMinimum()
1:     {
0:         return isMinimum(StorageService.getPartitioner());
1:     }
1: 
0:     public static class RowPositionSerializer implements ISerializer<RowPosition>
1:     {
1:         /*
1:          * We need to be able to serialize both Token.KeyBound and
1:          * DecoratedKey. To make this compact, we first write a byte whose
1:          * meaning is:
1:          *   - 0: DecoratedKey
1:          *   - 1: a 'minimum' Token.KeyBound
1:          *   - 2: a 'maximum' Token.KeyBound
1:          * In the case of the DecoratedKey, we then serialize the key (the
1:          * token is recreated on the other side). In the other cases, we then
1:          * serialize the token.
1:          */
0:         public void serialize(RowPosition pos, DataOutput dos) throws IOException
1:         {
1:             Kind kind = pos.kind();
0:             dos.writeByte(kind.ordinal());
1:             if (kind == Kind.ROW_KEY)
0:                 ByteBufferUtil.writeWithShortLength(((DecoratedKey)pos).key, dos);
1:             else
0:                 Token.serializer().serialize(pos.getToken(), dos);
1:         }
1: 
0:         public RowPosition deserialize(DataInput dis) throws IOException
1:         {
0:             Kind kind = Kind.fromOrdinal(dis.readByte());
1:             if (kind == Kind.ROW_KEY)
1:             {
0:                 ByteBuffer k = ByteBufferUtil.readWithShortLength(dis);
0:                 return StorageService.getPartitioner().decorateKey(k);
1:             }
1:             else
1:             {
0:                 Token t = Token.serializer().deserialize(dis);
1:                 return kind == Kind.MIN_BOUND ? t.minKeyBound() : t.maxKeyBound();
1:             }
1:         }
1: 
0:         public long serializedSize(RowPosition pos)
1:         {
1:             Kind kind = pos.kind();
0:             return DBConstants.boolSize
0:                 + (kind == Kind.ROW_KEY ? DBConstants.shortSize + ((DecoratedKey)pos).key.remaining()
0:                                         : Token.serializer().serializedSize(pos.getToken()));
1:         }
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0: public interface RowPosition extends RingPosition<RowPosition>
/////////////////////////////////////////////////////////////////////////
1:     public static final class ForKey
1:     {
0:         public static RowPosition get(ByteBuffer key, IPartitioner p)
1:         {
0:             return key == null || key.remaining() == 0 ? p.getMinimumToken().minKeyBound() : p.decorateKey(key);
1:         }
1:     }
0: 
1:     public Kind kind();
1:     public boolean isMinimum();
/////////////////////////////////////////////////////////////////////////
1:                 ByteBufferUtil.writeWithShortLength(((DecoratedKey)pos).getKey(), out);
/////////////////////////////////////////////////////////////////////////
1:                 int keySize = ((DecoratedKey)pos).getKey().remaining();
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(RowPosition pos, DataOutputPlus out) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final RowPositionSerializer serializer = new RowPositionSerializer();
/////////////////////////////////////////////////////////////////////////
0:                 Token.serializer.serialize(pos.getToken(), dos);
/////////////////////////////////////////////////////////////////////////
0:                 Token t = Token.serializer.deserialize(dis);
/////////////////////////////////////////////////////////////////////////
0:                 Token.serializer.serializedSize(pos.getToken(), typeSizes);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(RowPosition pos, DBTypeSizes typeSizes)
1:             int size = 1; // 1 byte for enum
1:             if (kind == Kind.ROW_KEY)
0:             {
0:                 int keySize = ((DecoratedKey)pos).key.remaining();
0:                 size += (typeSizes.sizeof((short) keySize) + keySize);
0:             }
1:             else
0:             {
0:                 Token.serializer().serializedSize(pos.getToken(), typeSizes);
0:             }
1:             return size;
============================================================================