1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
3:01115f7: 
1:01115f7: package org.apache.cassandra.cql3.validation.operations;
1:2e3727e: 
1:01115f7: import org.junit.Test;
1:2e3727e: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: 
1:01115f7: public class BatchTest extends CQLTester
1:01115f7: {
1:01115f7:     /**
1:01115f7:      * Test batch statements
1:01115f7:      * migrated from cql_tests.py:TestCQL.batch_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testBatch() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, name text, password text)");
1:01115f7: 
1:01115f7:         String query = "BEGIN BATCH\n"
1:01115f7:                        + "INSERT INTO %1$s (userid, password, name) VALUES ('user2', 'ch@ngem3b', 'second user');\n"
1:01115f7:                        + "UPDATE %1$s SET password = 'ps22dhds' WHERE userid = 'user3';\n"
1:01115f7:                        + "INSERT INTO %1$s (userid, password) VALUES ('user4', 'ch@ngem3c');\n"
1:01115f7:                        + "DELETE name FROM %1$s WHERE userid = 'user1';\n"
1:01115f7:                        + "APPLY BATCH;";
1:01115f7: 
1:01115f7:         execute(query);
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.batch_and_list_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testBatchAndList() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>)");
1:01115f7: 
1:01115f7:         execute("BEGIN BATCH " +
1:01115f7:                 "UPDATE %1$s SET l = l +[ 1 ] WHERE k = 0; " +
1:01115f7:                 "UPDATE %1$s SET l = l + [ 2 ] WHERE k = 0; " +
1:01115f7:                 "UPDATE %1$s SET l = l + [ 3 ] WHERE k = 0; " +
1:01115f7:                 "APPLY BATCH");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 0"),
1:01115f7:                    row(list(1, 2, 3)));
1:01115f7: 
1:01115f7:         execute("BEGIN BATCH " +
1:01115f7:                 "UPDATE %1$s SET l =[ 1 ] + l WHERE k = 1; " +
1:01115f7:                 "UPDATE %1$s SET l = [ 2 ] + l WHERE k = 1; " +
1:01115f7:                 "UPDATE %1$s SET l = [ 3 ] + l WHERE k = 1; " +
1:01115f7:                 "APPLY BATCH ");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT l FROM %s WHERE k = 1"),
1:01115f7:                    row(list(3, 2, 1)));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.bug_6115_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testBatchDeleteInsert() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v))");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, v) VALUES (0, 1)");
1:01115f7:         execute("BEGIN BATCH DELETE FROM %1$s WHERE k=0 AND v=1; INSERT INTO %1$s (k, v) VALUES (0, 2); APPLY BATCH");
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s"),
1:01115f7:                    row(0, 2));
1:01115f7:     }
1:01115f7: 
1:01115f7:     @Test
1:01115f7:     public void testBatchWithUnset() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s text, i int)");
1:01115f7: 
1:01115f7:         // test batch and update
1:01115f7:         execute("BEGIN BATCH " +
1:2e3727e:                 "INSERT INTO %1$s (k, s, i) VALUES (100, 'batchtext', 7); " +
1:2e3727e:                 "INSERT INTO %1$s (k, s, i) VALUES (111, 'batchtext', 7); " +
1:2e3727e:                 "UPDATE %1$s SET s=?, i=? WHERE k = 100; " +
1:2e3727e:                 "UPDATE %1$s SET s=?, i=? WHERE k=111; " +
1:01115f7:                 "APPLY BATCH;", null, unset(), unset(), null);
1:01115f7:         assertRows(execute("SELECT k, s, i FROM %s where k in (100,111)"),
1:01115f7:                    row(100, null, 7),
1:01115f7:                    row(111, "batchtext", null)
1:01115f7:         );
1:01115f7:     }
1:2e3727e: 
1:2e3727e:     @Test
1:2e3727e:     public void testBatchRangeDelete() throws Throwable
1:2e3727e:     {
1:2e3727e:         createTable("CREATE TABLE %s (partitionKey int," +
1:2e3727e:                 "clustering int," +
1:2e3727e:                 "value int," +
1:2e3727e:                 " PRIMARY KEY (partitionKey, clustering)) WITH COMPACT STORAGE");
1:2e3727e: 
1:2e3727e:         int value = 0;
1:2e3727e:         for (int partitionKey = 0; partitionKey < 4; partitionKey++)
1:2e3727e:             for (int clustering1 = 0; clustering1 < 5; clustering1++)
1:2e3727e:                 execute("INSERT INTO %s (partitionKey, clustering, value) VALUES (?, ?, ?)",
1:2e3727e:                         partitionKey, clustering1, value++);
1:2e3727e: 
1:2e3727e:         execute("BEGIN BATCH " +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 1;" +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 0 AND  clustering >= 4;" +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 0 AND clustering <= 0;" +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 2 AND clustering >= 0 AND clustering <= 3;" +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 2 AND clustering <= 3 AND clustering >= 4;" +
1:2e3727e:                 "DELETE FROM %1$s WHERE partitionKey = 3 AND (clustering) >= (3) AND (clustering) <= (6);" +
1:2e3727e:                 "APPLY BATCH;");
1:2e3727e: 
1:2e3727e:         assertRows(execute("SELECT * FROM %s"),
1:2e3727e:                    row(0, 1, 1),
1:2e3727e:                    row(0, 2, 2),
1:2e3727e:                    row(0, 3, 3),
1:2e3727e:                    row(2, 4, 14),
1:2e3727e:                    row(3, 0, 15),
1:2e3727e:                    row(3, 1, 16),
1:2e3727e:                    row(3, 2, 17));
1:2e3727e:     }
1:2e3727e: 
1:2e3727e:     @Test
1:2e3727e:     public void testBatchUpdate() throws Throwable
1:2e3727e:     {
1:2e3727e:         createTable("CREATE TABLE %s (partitionKey int," +
1:2e3727e:                 "clustering_1 int," +
1:2e3727e:                 "value int," +
1:2e3727e:                 " PRIMARY KEY (partitionKey, clustering_1))");
1:2e3727e: 
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 1, 1)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 2, 2)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 3, 3)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 4, 4)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 5, 5)");
1:2e3727e:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 6, 6)");
1:2e3727e: 
1:2e3727e:         execute("BEGIN BATCH " +
1:bfd57d1:                 "UPDATE %1$s SET value = 7 WHERE partitionKey = 0 AND clustering_1 = 1;" +
1:bfd57d1:                 "UPDATE %1$s SET value = 8 WHERE partitionKey = 0 AND (clustering_1) = (2);" +
1:bfd57d1:                 "UPDATE %1$s SET value = 10 WHERE partitionKey = 0 AND clustering_1 IN (3, 4);" +
1:bfd57d1:                 "UPDATE %1$s SET value = 20 WHERE partitionKey = 0 AND (clustering_1) IN ((5), (6));" +
1:2e3727e:                 "APPLY BATCH;");
1:2e3727e: 
1:2e3727e:         assertRows(execute("SELECT * FROM %s"),
1:2e3727e:                    row(0, 0, 0),
1:2e3727e:                    row(0, 1, 7),
1:2e3727e:                    row(0, 2, 8),
1:2e3727e:                    row(0, 3, 10),
1:2e3727e:                    row(0, 4, 10),
1:2e3727e:                    row(0, 5, 20),
1:2e3727e:                    row(0, 6, 20));
1:2e3727e:     }
1:a90de7c: 
1:a90de7c:     @Test
1:a90de7c:     public void testBatchEmpty() throws Throwable
1:a90de7c:     {
1:a90de7c:         assertEmpty(execute("BEGIN BATCH APPLY BATCH;"));
1:a90de7c:     }
1:f901a74: 
1:f901a74:     @Test
1:f901a74:     public void testBatchMultipleTable() throws Throwable
1:f901a74:     {
1:f901a74:         String tbl1 = KEYSPACE + "." + createTableName();
1:f901a74:         String tbl2 = KEYSPACE + "." + createTableName();
1:f901a74: 
1:f901a74:         schemaChange(String.format("CREATE TABLE %s (k1 int PRIMARY KEY, v11 int, v12 int)", tbl1));
1:f901a74:         schemaChange(String.format("CREATE TABLE %s (k2 int PRIMARY KEY, v21 int, v22 int)", tbl2));
1:f901a74: 
1:f901a74:         execute("BEGIN BATCH " +
1:f901a74:                 String.format("UPDATE %s SET v11 = 1 WHERE k1 = 0;", tbl1) +
1:f901a74:                 String.format("UPDATE %s SET v12 = 2 WHERE k1 = 0;", tbl1) +
1:f901a74:                 String.format("UPDATE %s SET v21 = 3 WHERE k2 = 0;", tbl2) +
1:f901a74:                 String.format("UPDATE %s SET v22 = 4 WHERE k2 = 0;", tbl2) +
1:f901a74:                 "APPLY BATCH;");
1:f901a74: 
1:f901a74:         assertRows(execute(String.format("SELECT * FROM %s", tbl1)), row(0, 1, 2));
1:f901a74:         assertRows(execute(String.format("SELECT * FROM %s", tbl2)), row(0, 3, 4));
1:f901a74: 
1:f901a74:         flush();
1:f901a74: 
1:f901a74:         assertRows(execute(String.format("SELECT * FROM %s", tbl1)), row(0, 1, 2));
1:f901a74:         assertRows(execute(String.format("SELECT * FROM %s", tbl2)), row(0, 3, 4));
1:f901a74:     }
1:01115f7: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:bfd57d1
/////////////////////////////////////////////////////////////////////////
1:                 "UPDATE %1$s SET value = 7 WHERE partitionKey = 0 AND clustering_1 = 1;" +
1:                 "UPDATE %1$s SET value = 8 WHERE partitionKey = 0 AND (clustering_1) = (2);" +
1:                 "UPDATE %1$s SET value = 10 WHERE partitionKey = 0 AND clustering_1 IN (3, 4);" +
1:                 "UPDATE %1$s SET value = 20 WHERE partitionKey = 0 AND (clustering_1) IN ((5), (6));" +
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f901a74
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testBatchMultipleTable() throws Throwable
1:     {
1:         String tbl1 = KEYSPACE + "." + createTableName();
1:         String tbl2 = KEYSPACE + "." + createTableName();
1: 
1:         schemaChange(String.format("CREATE TABLE %s (k1 int PRIMARY KEY, v11 int, v12 int)", tbl1));
1:         schemaChange(String.format("CREATE TABLE %s (k2 int PRIMARY KEY, v21 int, v22 int)", tbl2));
1: 
1:         execute("BEGIN BATCH " +
1:                 String.format("UPDATE %s SET v11 = 1 WHERE k1 = 0;", tbl1) +
1:                 String.format("UPDATE %s SET v12 = 2 WHERE k1 = 0;", tbl1) +
1:                 String.format("UPDATE %s SET v21 = 3 WHERE k2 = 0;", tbl2) +
1:                 String.format("UPDATE %s SET v22 = 4 WHERE k2 = 0;", tbl2) +
1:                 "APPLY BATCH;");
1: 
1:         assertRows(execute(String.format("SELECT * FROM %s", tbl1)), row(0, 1, 2));
1:         assertRows(execute(String.format("SELECT * FROM %s", tbl2)), row(0, 3, 4));
1: 
1:         flush();
1: 
1:         assertRows(execute(String.format("SELECT * FROM %s", tbl1)), row(0, 1, 2));
1:         assertRows(execute(String.format("SELECT * FROM %s", tbl2)), row(0, 3, 4));
1:     }
author:blerer
-------------------------------------------------------------------------------
commit:a90de7c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testBatchEmpty() throws Throwable
1:     {
1:         assertEmpty(execute("BEGIN BATCH APPLY BATCH;"));
1:     }
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
1: 
0: import static org.apache.commons.lang3.StringUtils.isEmpty;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 "INSERT INTO %1$s (k, s, i) VALUES (100, 'batchtext', 7); " +
1:                 "INSERT INTO %1$s (k, s, i) VALUES (111, 'batchtext', 7); " +
1:                 "UPDATE %1$s SET s=?, i=? WHERE k = 100; " +
1:                 "UPDATE %1$s SET s=?, i=? WHERE k=111; " +
1: 
1:     @Test
1:     public void testBatchRangeDelete() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (partitionKey int," +
1:                 "clustering int," +
1:                 "value int," +
1:                 " PRIMARY KEY (partitionKey, clustering)) WITH COMPACT STORAGE");
1: 
1:         int value = 0;
1:         for (int partitionKey = 0; partitionKey < 4; partitionKey++)
1:             for (int clustering1 = 0; clustering1 < 5; clustering1++)
1:                 execute("INSERT INTO %s (partitionKey, clustering, value) VALUES (?, ?, ?)",
1:                         partitionKey, clustering1, value++);
1: 
1:         execute("BEGIN BATCH " +
1:                 "DELETE FROM %1$s WHERE partitionKey = 1;" +
1:                 "DELETE FROM %1$s WHERE partitionKey = 0 AND  clustering >= 4;" +
1:                 "DELETE FROM %1$s WHERE partitionKey = 0 AND clustering <= 0;" +
1:                 "DELETE FROM %1$s WHERE partitionKey = 2 AND clustering >= 0 AND clustering <= 3;" +
1:                 "DELETE FROM %1$s WHERE partitionKey = 2 AND clustering <= 3 AND clustering >= 4;" +
1:                 "DELETE FROM %1$s WHERE partitionKey = 3 AND (clustering) >= (3) AND (clustering) <= (6);" +
1:                 "APPLY BATCH;");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 1, 1),
1:                    row(0, 2, 2),
1:                    row(0, 3, 3),
1:                    row(2, 4, 14),
1:                    row(3, 0, 15),
1:                    row(3, 1, 16),
1:                    row(3, 2, 17));
1:     }
1: 
1:     @Test
1:     public void testBatchUpdate() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (partitionKey int," +
1:                 "clustering_1 int," +
1:                 "value int," +
1:                 " PRIMARY KEY (partitionKey, clustering_1))");
1: 
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 1, 1)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 2, 2)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 3, 3)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 4, 4)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 5, 5)");
1:         execute("INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 6, 6)");
1: 
1:         execute("BEGIN BATCH " +
0:                 "UPDATE %1$s SET value = 7 WHERE partitionKey = 0 AND clustering_1 = 1" +
0:                 "UPDATE %1$s SET value = 8 WHERE partitionKey = 0 AND (clustering_1) = (2)" +
0:                 "UPDATE %1$s SET value = 10 WHERE partitionKey = 0 AND clustering_1 IN (3, 4)" +
0:                 "UPDATE %1$s SET value = 20 WHERE partitionKey = 0 AND (clustering_1) IN ((5), (6))" +
1:                 "APPLY BATCH;");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 0, 0),
1:                    row(0, 1, 7),
1:                    row(0, 2, 8),
1:                    row(0, 3, 10),
1:                    row(0, 4, 10),
1:                    row(0, 5, 20),
1:                    row(0, 6, 20));
1:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.validation.operations;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: public class BatchTest extends CQLTester
1: {
1:     /**
1:      * Test batch statements
1:      * migrated from cql_tests.py:TestCQL.batch_test()
1:      */
1:     @Test
1:     public void testBatch() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid text PRIMARY KEY, name text, password text)");
1: 
1:         String query = "BEGIN BATCH\n"
1:                        + "INSERT INTO %1$s (userid, password, name) VALUES ('user2', 'ch@ngem3b', 'second user');\n"
1:                        + "UPDATE %1$s SET password = 'ps22dhds' WHERE userid = 'user3';\n"
1:                        + "INSERT INTO %1$s (userid, password) VALUES ('user4', 'ch@ngem3c');\n"
1:                        + "DELETE name FROM %1$s WHERE userid = 'user1';\n"
1:                        + "APPLY BATCH;";
1: 
1:         execute(query);
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.batch_and_list_test()
1:      */
1:     @Test
1:     public void testBatchAndList() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, l list<int>)");
1: 
1:         execute("BEGIN BATCH " +
1:                 "UPDATE %1$s SET l = l +[ 1 ] WHERE k = 0; " +
1:                 "UPDATE %1$s SET l = l + [ 2 ] WHERE k = 0; " +
1:                 "UPDATE %1$s SET l = l + [ 3 ] WHERE k = 0; " +
1:                 "APPLY BATCH");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 0"),
1:                    row(list(1, 2, 3)));
1: 
1:         execute("BEGIN BATCH " +
1:                 "UPDATE %1$s SET l =[ 1 ] + l WHERE k = 1; " +
1:                 "UPDATE %1$s SET l = [ 2 ] + l WHERE k = 1; " +
1:                 "UPDATE %1$s SET l = [ 3 ] + l WHERE k = 1; " +
1:                 "APPLY BATCH ");
1: 
1:         assertRows(execute("SELECT l FROM %s WHERE k = 1"),
1:                    row(list(3, 2, 1)));
1:     }
1: 
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.bug_6115_test()
1:      */
1:     @Test
1:     public void testBatchDeleteInsert() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v))");
1: 
1:         execute("INSERT INTO %s (k, v) VALUES (0, 1)");
1:         execute("BEGIN BATCH DELETE FROM %1$s WHERE k=0 AND v=1; INSERT INTO %1$s (k, v) VALUES (0, 2); APPLY BATCH");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(0, 2));
1:     }
1: 
1:     @Test
1:     public void testBatchWithUnset() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, s text, i int)");
1: 
1:         // test batch and update
0:         String qualifiedTable = keyspace() + "." + currentTable();
1:         execute("BEGIN BATCH " +
0:                 "INSERT INTO %s (k, s, i) VALUES (100, 'batchtext', 7); " +
0:                 "INSERT INTO " + qualifiedTable + " (k, s, i) VALUES (111, 'batchtext', 7); " +
0:                 "UPDATE " + qualifiedTable + " SET s=?, i=? WHERE k = 100; " +
0:                 "UPDATE " + qualifiedTable + " SET s=?, i=? WHERE k=111; " +
1:                 "APPLY BATCH;", null, unset(), unset(), null);
1:         assertRows(execute("SELECT k, s, i FROM %s where k in (100,111)"),
1:                    row(100, null, 7),
1:                    row(111, "batchtext", null)
1:         );
1:     }
1: }
============================================================================