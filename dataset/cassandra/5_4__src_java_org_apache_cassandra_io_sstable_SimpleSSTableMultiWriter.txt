1:9ed2727: /*
1:9ed2727:  * Licensed to the Apache Software Foundation (ASF) under one
1:9ed2727:  * or more contributor license agreements.  See the NOTICE file
1:9ed2727:  * distributed with this work for additional information
1:9ed2727:  * regarding copyright ownership.  The ASF licenses this file
1:9ed2727:  * to you under the Apache License, Version 2.0 (the
1:9ed2727:  * "License"); you may not use this file except in compliance
1:9ed2727:  * with the License.  You may obtain a copy of the License at
1:9ed2727:  *
1:9ed2727:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9ed2727:  *
1:9ed2727:  * Unless required by applicable law or agreed to in writing, software
1:9ed2727:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ed2727:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ed2727:  * See the License for the specific language governing permissions and
1:9ed2727:  * limitations under the License.
1:9ed2727:  */
1:9ed2727: 
1:9ed2727: package org.apache.cassandra.io.sstable;
1:9ed2727: 
1:9ed2727: import java.util.Collection;
1:9ed2727: import java.util.Collections;
1:9ed2727: import java.util.UUID;
1:9ed2727: 
1:9ed2727: import org.apache.cassandra.config.CFMetaData;
1:9ed2727: import org.apache.cassandra.db.RowIndexEntry;
1:9ed2727: import org.apache.cassandra.db.SerializationHeader;
1:9ed2727: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:9ed2727: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:f81a91d: import org.apache.cassandra.index.Index;
1:9ed2727: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:9ed2727: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1:9ed2727: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:9ed2727: 
1:9ed2727: public class SimpleSSTableMultiWriter implements SSTableMultiWriter
1:9ed2727: {
1:9ed2727:     private final SSTableWriter writer;
1:e2c6341:     private final LifecycleTransaction txn;
1:9ed2727: 
1:e2c6341:     protected SimpleSSTableMultiWriter(SSTableWriter writer, LifecycleTransaction txn)
1:9ed2727:     {
1:e2c6341:         this.txn = txn;
1:9ed2727:         this.writer = writer;
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public boolean append(UnfilteredRowIterator partition)
1:9ed2727:     {
1:e777301:         RowIndexEntry<?> indexEntry = writer.append(partition);
1:9ed2727:         return indexEntry != null;
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public Collection<SSTableReader> finish(long repairedAt, long maxDataAge, boolean openResult)
1:9ed2727:     {
1:9ed2727:         return Collections.singleton(writer.finish(repairedAt, maxDataAge, openResult));
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public Collection<SSTableReader> finish(boolean openResult)
1:9ed2727:     {
1:9ed2727:         return Collections.singleton(writer.finish(openResult));
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public Collection<SSTableReader> finished()
1:9ed2727:     {
1:9ed2727:         return Collections.singleton(writer.finished());
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public SSTableMultiWriter setOpenResult(boolean openResult)
1:9ed2727:     {
1:9ed2727:         writer.setOpenResult(openResult);
1:9ed2727:         return this;
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public String getFilename()
1:9ed2727:     {
1:9ed2727:         return writer.getFilename();
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public long getFilePointer()
1:9ed2727:     {
1:9ed2727:         return writer.getFilePointer();
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public UUID getCfId()
1:9ed2727:     {
1:9ed2727:         return writer.metadata.cfId;
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public Throwable commit(Throwable accumulate)
1:9ed2727:     {
1:9ed2727:         return writer.commit(accumulate);
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public Throwable abort(Throwable accumulate)
1:9ed2727:     {
1:e2c6341:         txn.untrackNew(writer);
1:9ed2727:         return writer.abort(accumulate);
1:9ed2727:     }
1:9ed2727: 
1:9ed2727:     public void prepareToCommit()
1:9ed2727:     {
1:9ed2727:         writer.prepareToCommit();
1:9ed2727:     }
1:9ed2727: 
1:e777301:     public void close()
1:9ed2727:     {
1:9ed2727:         writer.close();
1:9ed2727:     }
1:9ed2727: 
1:e777301:     @SuppressWarnings("resource") // SimpleSSTableMultiWriter closes writer
1:9ed2727:     public static SSTableMultiWriter create(Descriptor descriptor,
1:9ed2727:                                             long keyCount,
1:9ed2727:                                             long repairedAt,
1:9ed2727:                                             CFMetaData cfm,
1:9ed2727:                                             MetadataCollector metadataCollector,
1:9ed2727:                                             SerializationHeader header,
1:f81a91d:                                             Collection<Index> indexes,
1:9ed2727:                                             LifecycleTransaction txn)
1:9ed2727:     {
1:f81a91d:         SSTableWriter writer = SSTableWriter.create(descriptor, keyCount, repairedAt, cfm, metadataCollector, header, indexes, txn);
1:e2c6341:         return new SimpleSSTableMultiWriter(writer, txn);
1:9ed2727:     }
1:9ed2727: }
============================================================================
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
1:     private final LifecycleTransaction txn;
1:     protected SimpleSSTableMultiWriter(SSTableWriter writer, LifecycleTransaction txn)
1:         this.txn = txn;
/////////////////////////////////////////////////////////////////////////
1:         txn.untrackNew(writer);
/////////////////////////////////////////////////////////////////////////
1:         return new SimpleSSTableMultiWriter(writer, txn);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.Index;
/////////////////////////////////////////////////////////////////////////
1:                                             Collection<Index> indexes,
1:         SSTableWriter writer = SSTableWriter.create(descriptor, keyCount, repairedAt, cfm, metadataCollector, header, indexes, txn);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:0798905
/////////////////////////////////////////////////////////////////////////
0:     protected SimpleSSTableMultiWriter(SSTableWriter writer)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e777301
/////////////////////////////////////////////////////////////////////////
1:         RowIndexEntry<?> indexEntry = writer.append(partition);
/////////////////////////////////////////////////////////////////////////
1:     public void close()
1:     @SuppressWarnings("resource") // SimpleSSTableMultiWriter closes writer
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.RowIndexEntry;
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1: 
1: public class SimpleSSTableMultiWriter implements SSTableMultiWriter
1: {
1:     private final SSTableWriter writer;
1: 
0:     private SimpleSSTableMultiWriter(SSTableWriter writer)
1:     {
1:         this.writer = writer;
1:     }
1: 
1:     public boolean append(UnfilteredRowIterator partition)
1:     {
0:         RowIndexEntry indexEntry = writer.append(partition);
1:         return indexEntry != null;
1:     }
1: 
1:     public Collection<SSTableReader> finish(long repairedAt, long maxDataAge, boolean openResult)
1:     {
1:         return Collections.singleton(writer.finish(repairedAt, maxDataAge, openResult));
1:     }
1: 
1:     public Collection<SSTableReader> finish(boolean openResult)
1:     {
1:         return Collections.singleton(writer.finish(openResult));
1:     }
1: 
1:     public Collection<SSTableReader> finished()
1:     {
1:         return Collections.singleton(writer.finished());
1:     }
1: 
1:     public SSTableMultiWriter setOpenResult(boolean openResult)
1:     {
1:         writer.setOpenResult(openResult);
1:         return this;
1:     }
1: 
1:     public String getFilename()
1:     {
1:         return writer.getFilename();
1:     }
1: 
1:     public long getFilePointer()
1:     {
1:         return writer.getFilePointer();
1:     }
1: 
1:     public UUID getCfId()
1:     {
1:         return writer.metadata.cfId;
1:     }
1: 
1:     public Throwable commit(Throwable accumulate)
1:     {
1:         return writer.commit(accumulate);
1:     }
1: 
1:     public Throwable abort(Throwable accumulate)
1:     {
1:         return writer.abort(accumulate);
1:     }
1: 
1:     public void prepareToCommit()
1:     {
1:         writer.prepareToCommit();
1:     }
1: 
0:     public void close() throws Exception
1:     {
1:         writer.close();
1:     }
1: 
1:     public static SSTableMultiWriter create(Descriptor descriptor,
1:                                             long keyCount,
1:                                             long repairedAt,
1:                                             CFMetaData cfm,
1:                                             MetadataCollector metadataCollector,
1:                                             SerializationHeader header,
1:                                             LifecycleTransaction txn)
1:     {
0:         SSTableWriter writer = SSTableWriter.create(descriptor, keyCount, repairedAt, cfm, metadataCollector, header, txn);
0:         return new SimpleSSTableMultiWriter(writer);
1:     }
1: }
============================================================================