1:a2b1278: /*
1:a2b1278:  * Licensed to the Apache Software Foundation (ASF) under one
1:a2b1278:  * or more contributor license agreements.  See the NOTICE file
1:a2b1278:  * distributed with this work for additional information
1:a2b1278:  * regarding copyright ownership.  The ASF licenses this file
1:a2b1278:  * to you under the Apache License, Version 2.0 (the
1:a2b1278:  * "License"); you may not use this file except in compliance
1:a2b1278:  * with the License.  You may obtain a copy of the License at
1:a2b1278:  *
1:a2b1278:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a2b1278:  *
1:a2b1278:  * Unless required by applicable law or agreed to in writing, software
1:a2b1278:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a2b1278:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2b1278:  * See the License for the specific language governing permissions and
1:a2b1278:  * limitations under the License.
1:a2b1278:  */
1:a2b1278: package org.apache.cassandra.db.compaction;
1:a2b1278: 
1:a2b1278: import javax.management.openmbean.*;
1:a2b1278: import java.util.Map;
1:a2b1278: import java.util.UUID;
1:a2b1278: 
1:a2b1278: import com.google.common.base.Throwables;
1:a2b1278: import org.apache.cassandra.cql3.UntypedResultSet;
1:a2b1278: import org.apache.cassandra.db.marshal.Int32Type;
1:a2b1278: import org.apache.cassandra.db.marshal.LongType;
1:a2b1278: import org.apache.cassandra.utils.FBUtilities;
1:a2b1278: 
1:a2b1278: public class CompactionHistoryTabularData
1:a2b1278: {
1:a2b1278:     private static final String[] ITEM_NAMES = new String[]{ "id", "keyspace_name", "columnfamily_name", "compacted_at",
1:a2b1278:                                                              "bytes_in", "bytes_out", "rows_merged" };
1:a2b1278: 
1:a2b1278:     private static final String[] ITEM_DESCS = new String[]{ "time uuid", "keyspace name",
1:a2b1278:                                                              "column family name", "compaction finished at",
1:a2b1278:                                                              "total bytes in", "total bytes out", "total rows merged" };
1:a2b1278: 
1:a2b1278:     private static final String TYPE_NAME = "CompactionHistory";
1:a2b1278: 
1:a2b1278:     private static final String ROW_DESC = "CompactionHistory";
1:a2b1278: 
1:a2b1278:     private static final OpenType<?>[] ITEM_TYPES;
1:a2b1278: 
1:a2b1278:     private static final CompositeType COMPOSITE_TYPE;
1:a2b1278: 
1:a2b1278:     private static final TabularType TABULAR_TYPE;
1:a2b1278: 
1:68d2526:     static 
1:68d2526:     {
1:a2b1278:         try
1:a2b1278:         {
1:a2b1278:             ITEM_TYPES = new OpenType[]{ SimpleType.STRING, SimpleType.STRING, SimpleType.STRING, SimpleType.LONG,
1:a2b1278:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.STRING };
1:a2b1278: 
1:a2b1278:             COMPOSITE_TYPE = new CompositeType(TYPE_NAME, ROW_DESC, ITEM_NAMES, ITEM_DESCS, ITEM_TYPES);
1:a2b1278: 
1:a2b1278:             TABULAR_TYPE = new TabularType(TYPE_NAME, ROW_DESC, COMPOSITE_TYPE, ITEM_NAMES);
1:a2b1278:         }
1:a2b1278:         catch (OpenDataException e)
1:a2b1278:         {
1:a2b1278:             throw Throwables.propagate(e);
1:a2b1278:         }
1:a2b1278:     }
1:a2b1278: 
1:a2b1278:     public static TabularData from(UntypedResultSet resultSet) throws OpenDataException
1:a2b1278:     {
1:a2b1278:         TabularDataSupport result = new TabularDataSupport(TABULAR_TYPE);
1:a2b1278:         for (UntypedResultSet.Row row : resultSet)
1:a2b1278:         {
1:a2b1278:             UUID id = row.getUUID(ITEM_NAMES[0]);
1:a2b1278:             String ksName = row.getString(ITEM_NAMES[1]);
1:a2b1278:             String cfName = row.getString(ITEM_NAMES[2]);
1:a2b1278:             long compactedAt = row.getLong(ITEM_NAMES[3]);
1:a2b1278:             long bytesIn = row.getLong(ITEM_NAMES[4]);
1:a2b1278:             long bytesOut = row.getLong(ITEM_NAMES[5]);
1:a2b1278:             Map<Integer, Long> rowMerged = row.getMap(ITEM_NAMES[6], Int32Type.instance, LongType.instance);
1:a2b1278: 
1:a2b1278:             result.put(new CompositeDataSupport(COMPOSITE_TYPE, ITEM_NAMES,
1:a2b1278:                        new Object[]{ id.toString(), ksName, cfName, compactedAt, bytesIn, bytesOut,
1:a2b1278:                                      "{" + FBUtilities.toString(rowMerged) + "}" }));
1:a2b1278:         }
1:a2b1278:         return result;
1:a2b1278:     }
1:a2b1278: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     static 
1:     {
author:lantao yan
-------------------------------------------------------------------------------
commit:a2b1278
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
1: 
1: import javax.management.openmbean.*;
1: import java.util.Map;
1: import java.util.UUID;
1: 
1: import com.google.common.base.Throwables;
1: import org.apache.cassandra.cql3.UntypedResultSet;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.LongType;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class CompactionHistoryTabularData
1: {
1:     private static final String[] ITEM_NAMES = new String[]{ "id", "keyspace_name", "columnfamily_name", "compacted_at",
1:                                                              "bytes_in", "bytes_out", "rows_merged" };
1: 
1:     private static final String[] ITEM_DESCS = new String[]{ "time uuid", "keyspace name",
1:                                                              "column family name", "compaction finished at",
1:                                                              "total bytes in", "total bytes out", "total rows merged" };
1: 
1:     private static final String TYPE_NAME = "CompactionHistory";
1: 
1:     private static final String ROW_DESC = "CompactionHistory";
1: 
1:     private static final OpenType<?>[] ITEM_TYPES;
1: 
1:     private static final CompositeType COMPOSITE_TYPE;
1: 
1:     private static final TabularType TABULAR_TYPE;
1: 
0:     static {
1:         try
1:         {
1:             ITEM_TYPES = new OpenType[]{ SimpleType.STRING, SimpleType.STRING, SimpleType.STRING, SimpleType.LONG,
1:                                          SimpleType.LONG, SimpleType.LONG, SimpleType.STRING };
1: 
1:             COMPOSITE_TYPE = new CompositeType(TYPE_NAME, ROW_DESC, ITEM_NAMES, ITEM_DESCS, ITEM_TYPES);
1: 
1:             TABULAR_TYPE = new TabularType(TYPE_NAME, ROW_DESC, COMPOSITE_TYPE, ITEM_NAMES);
1:         }
1:         catch (OpenDataException e)
1:         {
1:             throw Throwables.propagate(e);
1:         }
1:     }
1: 
1:     public static TabularData from(UntypedResultSet resultSet) throws OpenDataException
1:     {
1:         TabularDataSupport result = new TabularDataSupport(TABULAR_TYPE);
1:         for (UntypedResultSet.Row row : resultSet)
1:         {
1:             UUID id = row.getUUID(ITEM_NAMES[0]);
1:             String ksName = row.getString(ITEM_NAMES[1]);
1:             String cfName = row.getString(ITEM_NAMES[2]);
1:             long compactedAt = row.getLong(ITEM_NAMES[3]);
1:             long bytesIn = row.getLong(ITEM_NAMES[4]);
1:             long bytesOut = row.getLong(ITEM_NAMES[5]);
1:             Map<Integer, Long> rowMerged = row.getMap(ITEM_NAMES[6], Int32Type.instance, LongType.instance);
1: 
1:             result.put(new CompositeDataSupport(COMPOSITE_TYPE, ITEM_NAMES,
1:                        new Object[]{ id.toString(), ksName, cfName, compactedAt, bytesIn, bytesOut,
1:                                      "{" + FBUtilities.toString(rowMerged) + "}" }));
1:         }
1:         return result;
1:     }
1: }
============================================================================