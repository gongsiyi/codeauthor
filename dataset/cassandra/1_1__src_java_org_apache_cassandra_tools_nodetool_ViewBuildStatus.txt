1:21448c5: /*
1:21448c5:  * Licensed to the Apache Software Foundation (ASF) under one
1:21448c5:  * or more contributor license agreements.  See the NOTICE file
1:21448c5:  * distributed with this work for additional information
1:21448c5:  * regarding copyright ownership.  The ASF licenses this file
1:21448c5:  * to you under the Apache License, Version 2.0 (the
1:21448c5:  * "License"); you may not use this file except in compliance
1:21448c5:  * with the License.  You may obtain a copy of the License at
1:21448c5:  *
1:21448c5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21448c5:  *
1:21448c5:  * Unless required by applicable law or agreed to in writing, software
1:21448c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21448c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21448c5:  * See the License for the specific language governing permissions and
1:21448c5:  * limitations under the License.
1:21448c5:  */
1:21448c5: 
1:21448c5: package org.apache.cassandra.tools.nodetool;
1:21448c5: 
1:21448c5: import java.util.ArrayList;
1:21448c5: import java.util.List;
1:21448c5: import java.util.Map;
1:21448c5: 
1:21448c5: import io.airlift.command.Arguments;
1:21448c5: import io.airlift.command.Command;
1:21448c5: import org.apache.cassandra.tools.NodeProbe;
1:21448c5: import org.apache.cassandra.tools.NodeTool;
1:21448c5: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1:21448c5: 
1:21448c5: import static com.google.common.base.Preconditions.checkArgument;
1:21448c5: 
1:21448c5: @Command(name = "viewbuildstatus", description = "Show progress of a materialized view build")
1:21448c5: public class ViewBuildStatus extends NodeTool.NodeToolCmd
1:21448c5: {
1:21448c5:     private final static String SUCCESS = "SUCCESS";
1:21448c5: 
1:21448c5:     @Arguments(usage = "<keyspace> <view> | <keyspace.view>", description = "The keyspace and view name")
1:21448c5:     private List<String> args = new ArrayList<>();
1:21448c5: 
1:21448c5:     protected void execute(NodeProbe probe)
1:21448c5:     {
1:21448c5:         String keyspace = null, view = null;
1:21448c5:         if (args.size() == 2)
1:21448c5:         {
1:21448c5:             keyspace = args.get(0);
1:21448c5:             view = args.get(1);
1:21448c5:         }
1:21448c5:         else if (args.size() == 1)
1:21448c5:         {
1:21448c5:             String[] input = args.get(0).split("\\.");
1:21448c5:             checkArgument(input.length == 2, "viewbuildstatus requires keyspace and view name arguments");
1:21448c5:             keyspace = input[0];
1:21448c5:             view = input[1];
1:21448c5:         }
1:21448c5:         else
1:21448c5:         {
1:21448c5:             checkArgument(false, "viewbuildstatus requires keyspace and view name arguments");
1:21448c5:         }
1:21448c5: 
1:21448c5:         Map<String, String> buildStatus = probe.getViewBuildStatuses(keyspace, view);
1:21448c5:         boolean failed = false;
1:21448c5:         TableBuilder builder = new TableBuilder();
1:21448c5: 
1:21448c5:         builder.add("Host", "Info");
1:21448c5:         for (Map.Entry<String, String> status : buildStatus.entrySet())
1:21448c5:         {
1:21448c5:             if (!status.getValue().equals(SUCCESS)) {
1:21448c5:                 failed = true;
1:21448c5:             }
1:21448c5:             builder.add(status.getKey(), status.getValue());
1:21448c5:         }
1:21448c5: 
1:21448c5:         if (failed) {
1:21448c5:             System.out.println(String.format("%s.%s has not finished building; node status is below.", keyspace, view));
1:21448c5:             System.out.println();
1:21448c5:             builder.printTo(System.out);
1:21448c5:             System.exit(1);
1:21448c5:         } else {
1:21448c5:             System.out.println(String.format("%s.%s has finished building", keyspace, view));
1:21448c5:             System.exit(0);
1:21448c5:         }
1:21448c5:     }
1:21448c5: }
============================================================================
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:21448c5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool;
1: import org.apache.cassandra.tools.nodetool.formatter.TableBuilder;
1: 
1: import static com.google.common.base.Preconditions.checkArgument;
1: 
1: @Command(name = "viewbuildstatus", description = "Show progress of a materialized view build")
1: public class ViewBuildStatus extends NodeTool.NodeToolCmd
1: {
1:     private final static String SUCCESS = "SUCCESS";
1: 
1:     @Arguments(usage = "<keyspace> <view> | <keyspace.view>", description = "The keyspace and view name")
1:     private List<String> args = new ArrayList<>();
1: 
1:     protected void execute(NodeProbe probe)
1:     {
1:         String keyspace = null, view = null;
1:         if (args.size() == 2)
1:         {
1:             keyspace = args.get(0);
1:             view = args.get(1);
1:         }
1:         else if (args.size() == 1)
1:         {
1:             String[] input = args.get(0).split("\\.");
1:             checkArgument(input.length == 2, "viewbuildstatus requires keyspace and view name arguments");
1:             keyspace = input[0];
1:             view = input[1];
1:         }
1:         else
1:         {
1:             checkArgument(false, "viewbuildstatus requires keyspace and view name arguments");
1:         }
1: 
1:         Map<String, String> buildStatus = probe.getViewBuildStatuses(keyspace, view);
1:         boolean failed = false;
1:         TableBuilder builder = new TableBuilder();
1: 
1:         builder.add("Host", "Info");
1:         for (Map.Entry<String, String> status : buildStatus.entrySet())
1:         {
1:             if (!status.getValue().equals(SUCCESS)) {
1:                 failed = true;
1:             }
1:             builder.add(status.getKey(), status.getValue());
1:         }
1: 
1:         if (failed) {
1:             System.out.println(String.format("%s.%s has not finished building; node status is below.", keyspace, view));
1:             System.out.println();
1:             builder.printTo(System.out);
1:             System.exit(1);
1:         } else {
1:             System.out.println(String.format("%s.%s has finished building", keyspace, view));
1:             System.exit(0);
1:         }
1:     }
1: }
============================================================================