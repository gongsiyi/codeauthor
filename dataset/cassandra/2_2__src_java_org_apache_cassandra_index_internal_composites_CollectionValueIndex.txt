1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
1:0626be8: 
1:0626be8: import java.nio.ByteBuffer;
1:0626be8: 
1:0626be8: import org.apache.cassandra.config.ColumnDefinition;
1:0626be8: import org.apache.cassandra.cql3.Operator;
1:0626be8: import org.apache.cassandra.db.*;
1:0626be8: import org.apache.cassandra.db.marshal.CollectionType;
1:0626be8: import org.apache.cassandra.db.marshal.SetType;
1:0626be8: import org.apache.cassandra.db.rows.*;
1:0626be8: import org.apache.cassandra.index.internal.CassandraIndex;
1:0626be8: import org.apache.cassandra.index.internal.IndexEntry;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Index the value of a collection cell.
1:0626be8:  *
1:0626be8:  * This is a lot like an index on REGULAR, except that we also need to make
1:0626be8:  * the collection key part of the index entry so that:
1:0626be8:  *   1) we don't have to scan the whole collection at query time to know the
1:0626be8:  *   entry is stale and if it still satisfies the query.
1:0626be8:  *   2) if a collection has multiple time the same value, we need one entry
1:0626be8:  *   for each so that if we delete one of the value only we only delete the
1:0626be8:  *   entry corresponding to that value.
1:0626be8:  */
1:0626be8: public class CollectionValueIndex extends CassandraIndex
1:0626be8: {
1:0626be8:     public CollectionValueIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:0626be8:                                       Clustering clustering,
1:0626be8:                                       CellPath path, ByteBuffer cellValue)
1:0626be8:     {
1:0626be8:         return cellValue;
1:0626be8:     }
1:0626be8: 
1:0626be8:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:0626be8:                                                ClusteringPrefix prefix,
1:0626be8:                                                CellPath path)
1:0626be8:     {
1:0626be8:         CBuilder builder = CBuilder.create(getIndexComparator());
1:0626be8:         builder.add(partitionKey);
1:0626be8:         for (int i = 0; i < prefix.size(); i++)
1:0626be8:             builder.add(prefix.get(i));
1:0626be8: 
1:9e74891:         // When indexing a static column, prefix will be empty but only the
1:9e74891:         // partition key is needed at query time.
1:9e74891:         // In the non-static case, cell will be present during indexing but
1:9e74891:         // not when searching (CASSANDRA-7525).
1:0626be8:         if (prefix.size() == baseCfs.metadata.clusteringColumns().size() && path != null)
1:0626be8:             builder.add(path.get(0));
1:0626be8: 
1:0626be8:         return builder;
1:0626be8:     }
1:0626be8: 
1:0626be8:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:0626be8:     {
1:0626be8:         Clustering clustering = indexEntry.clustering();
1:9e74891:         Clustering indexedEntryClustering = null;
1:9e74891:         if (getIndexedColumn().isStatic())
1:9e74891:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:9e74891:         else
1:9e74891:         {
1:9e74891:             CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:9e74891:             for (int i = 0; i < baseCfs.getComparator().size(); i++)
1:9e74891:                 builder.add(clustering.get(i + 1));
1:9e74891:             indexedEntryClustering = builder.build();
1:9e74891:         }
1:0626be8: 
1:0626be8:         return new IndexEntry(indexedValue,
1:0626be8:                                 clustering,
1:0626be8:                                 indexEntry.primaryKeyLivenessInfo().timestamp(),
1:0626be8:                                 clustering.get(0),
1:9e74891:                                 indexedEntryClustering);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public boolean supportsOperator(ColumnDefinition indexedColumn, Operator operator)
1:0626be8:     {
1:0626be8:         return operator == Operator.CONTAINS && !(indexedColumn.type instanceof SetType);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:0626be8:     {
1:0626be8:         ColumnDefinition columnDef = indexedColumn;
1:0626be8:         ComplexColumnData complexData = data.getComplexColumnData(columnDef);
1:0626be8:         if (complexData == null)
1:0626be8:             return true;
1:0626be8: 
1:0626be8:         for (Cell cell : complexData)
1:0626be8:         {
1:0626be8:             if (cell.isLive(nowInSec) && ((CollectionType) columnDef.type).valueComparator()
1:0626be8:                                                                           .compare(indexValue, cell.value()) == 0)
1:0626be8:                 return false;
1:0626be8:         }
1:0626be8:         return true;
1:0626be8:     }
1:0626be8: }
============================================================================
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:9e74891
/////////////////////////////////////////////////////////////////////////
1:         // When indexing a static column, prefix will be empty but only the
1:         // partition key is needed at query time.
1:         // In the non-static case, cell will be present during indexing but
1:         // not when searching (CASSANDRA-7525).
/////////////////////////////////////////////////////////////////////////
1:         Clustering indexedEntryClustering = null;
1:         if (getIndexedColumn().isStatic())
1:             indexedEntryClustering = Clustering.STATIC_CLUSTERING;
1:         else
1:         {
1:             CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:             for (int i = 0; i < baseCfs.getComparator().size(); i++)
1:                 builder.add(clustering.get(i + 1));
1:             indexedEntryClustering = builder.build();
1:         }
1:                                 indexedEntryClustering);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.internal.composites;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.Operator;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.CollectionType;
1: import org.apache.cassandra.db.marshal.SetType;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.internal.IndexEntry;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: /**
1:  * Index the value of a collection cell.
1:  *
1:  * This is a lot like an index on REGULAR, except that we also need to make
1:  * the collection key part of the index entry so that:
1:  *   1) we don't have to scan the whole collection at query time to know the
1:  *   entry is stale and if it still satisfies the query.
1:  *   2) if a collection has multiple time the same value, we need one entry
1:  *   for each so that if we delete one of the value only we only delete the
1:  *   entry corresponding to that value.
1:  */
1: public class CollectionValueIndex extends CassandraIndex
1: {
1:     public CollectionValueIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:                                       Clustering clustering,
1:                                       CellPath path, ByteBuffer cellValue)
1:     {
1:         return cellValue;
1:     }
1: 
1:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:                                                ClusteringPrefix prefix,
1:                                                CellPath path)
1:     {
1:         CBuilder builder = CBuilder.create(getIndexComparator());
1:         builder.add(partitionKey);
1:         for (int i = 0; i < prefix.size(); i++)
1:             builder.add(prefix.get(i));
1: 
0:         // When indexing, cell will be present, but when searching, it won't  (CASSANDRA-7525)
1:         if (prefix.size() == baseCfs.metadata.clusteringColumns().size() && path != null)
1:             builder.add(path.get(0));
1: 
1:         return builder;
1:     }
1: 
1:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:     {
1:         Clustering clustering = indexEntry.clustering();
0:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
0:         for (int i = 0; i < baseCfs.getComparator().size(); i++)
0:             builder.add(clustering.get(i + 1));
1: 
1:         return new IndexEntry(indexedValue,
1:                                 clustering,
1:                                 indexEntry.primaryKeyLivenessInfo().timestamp(),
1:                                 clustering.get(0),
0:                                 builder.build());
1:     }
1: 
1:     public boolean supportsOperator(ColumnDefinition indexedColumn, Operator operator)
1:     {
1:         return operator == Operator.CONTAINS && !(indexedColumn.type instanceof SetType);
1:     }
1: 
1:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:     {
1:         ColumnDefinition columnDef = indexedColumn;
1:         ComplexColumnData complexData = data.getComplexColumnData(columnDef);
1:         if (complexData == null)
1:             return true;
1: 
1:         for (Cell cell : complexData)
1:         {
1:             if (cell.isLive(nowInSec) && ((CollectionType) columnDef.type).valueComparator()
1:                                                                           .compare(indexValue, cell.value()) == 0)
1:                 return false;
1:         }
1:         return true;
1:     }
1: }
============================================================================