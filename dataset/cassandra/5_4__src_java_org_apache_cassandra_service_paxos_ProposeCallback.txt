1:8b0e186: package org.apache.cassandra.service.paxos;
1:60bf7a5: /*
1:60bf7a5:  * 
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:60bf7a5:  * 
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:60bf7a5:  * 
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:60bf7a5:  * 
1:60bf7a5:  */
1:60bf7a5: 
1:8b0e186: 
1:8b0e186: import java.util.concurrent.atomic.AtomicInteger;
1:8b0e186: 
1:f5e1cbc: import org.apache.cassandra.db.ConsistencyLevel;
1:8b0e186: import org.slf4j.Logger;
1:8b0e186: import org.slf4j.LoggerFactory;
1:8b0e186: 
1:8b0e186: import org.apache.cassandra.net.MessageIn;
1:8b0e186: 
1:6ec4eef: /**
1:6ec4eef:  * ProposeCallback has two modes of operation, controlled by the failFast parameter.
1:6ec4eef:  *
1:6ec4eef:  * In failFast mode, we will return a failure as soon as a majority of nodes reject
1:6ec4eef:  * the proposal. This is used when replaying a proposal from an earlier leader.
1:6ec4eef:  *
1:6ec4eef:  * Otherwise, we wait for either all replicas to reply or until we achieve
1:6ec4eef:  * the desired quorum. We continue to wait for all replicas even after we know we cannot succeed
1:6ec4eef:  * because we need to know if no node at all have accepted or if at least one has.
1:6ec4eef:  * In the former case, a proposer is guaranteed no-one will
1:6ec4eef:  * replay its value; in the latter we don't, so we must timeout in case another
1:6ec4eef:  * leader replays it before we can; see CASSANDRA-6013
1:6ec4eef:  */
1:8b0e186: public class ProposeCallback extends AbstractPaxosCallback<Boolean>
1:8b0e186: {
1:8b0e186:     private static final Logger logger = LoggerFactory.getLogger(ProposeCallback.class);
1:8b0e186: 
1:6ec4eef:     private final AtomicInteger accepts = new AtomicInteger(0);
1:6ec4eef:     private final int requiredAccepts;
1:6ec4eef:     private final boolean failFast;
1:8b0e186: 
1:aa83c94:     public ProposeCallback(int totalTargets, int requiredTargets, boolean failFast, ConsistencyLevel consistency, long queryStartNanoTime)
1:8b0e186:     {
1:aa83c94:         super(totalTargets, consistency, queryStartNanoTime);
1:6ec4eef:         this.requiredAccepts = requiredTargets;
1:6ec4eef:         this.failFast = failFast;
1:8b0e186:     }
1:8b0e186: 
1:8b0e186:     public void response(MessageIn<Boolean> msg)
1:8b0e186:     {
1:23d4822:         logger.trace("Propose response {} from {}", msg.payload, msg.from);
1:8b0e186: 
1:8b0e186:         if (msg.payload)
1:6ec4eef:             accepts.incrementAndGet();
1:6ec4eef: 
1:8b0e186:         latch.countDown();
1:8b0e186: 
1:6ec4eef:         if (isSuccessful() || (failFast && (latch.getCount() + accepts.get() < requiredAccepts)))
1:8b0e186:         {
1:6ec4eef:             while (latch.getCount() > 0)
1:6ec4eef:                 latch.countDown();
1:8b0e186:         }
1:8b0e186:     }
1:6ec4eef: 
1:6ec4eef:     public int getAcceptCount()
1:6ec4eef:     {
1:6ec4eef:         return accepts.get();
1:8b0e186:     }
1:6ec4eef: 
1:6ec4eef:     public boolean isSuccessful()
1:6ec4eef:     {
1:6ec4eef:         return accepts.get() >= requiredAccepts;
1:6ec4eef:     }
1:6ec4eef: 
1:6ec4eef:     // Note: this is only reliable if !failFast
1:6ec4eef:     public boolean isFullyRefused()
1:6ec4eef:     {
1:6ec4eef:         // We need to check the latch first to avoid racing with a late arrival
1:6ec4eef:         // between the latch check and the accepts one
1:6ec4eef:         return latch.getCount() == 0 && accepts.get() == 0;
1:6ec4eef:     }
1:6ec4eef: }
============================================================================
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:23d4822
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Propose response {} from {}", msg.payload, msg.from);
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public ProposeCallback(int totalTargets, int requiredTargets, boolean failFast, ConsistencyLevel consistency, long queryStartNanoTime)
1:         super(totalTargets, consistency, queryStartNanoTime);
author:Wei Deng
-------------------------------------------------------------------------------
commit:11b9315
/////////////////////////////////////////////////////////////////////////
0:         logger.trace("Propose response {} from {}", msg.payload, msg.from);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f5e1cbc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.ConsistencyLevel;
/////////////////////////////////////////////////////////////////////////
0:     public ProposeCallback(int totalTargets, int requiredTargets, boolean failFast, ConsistencyLevel consistency)
0:         super(totalTargets, consistency);
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:8b0e186
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.service.paxos;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.net.MessageIn;
1: 
1: public class ProposeCallback extends AbstractPaxosCallback<Boolean>
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(ProposeCallback.class);
1: 
0:     private final AtomicInteger successful = new AtomicInteger(0);
1: 
0:     public ProposeCallback(int targets)
1:     {
0:         super(targets);
1:     }
1: 
1:     public void response(MessageIn<Boolean> msg)
1:     {
0:         logger.debug("Propose response {} from {}", msg.payload, msg.from);
1: 
1:         if (msg.payload)
0:             successful.incrementAndGet();
1:         latch.countDown();
1:     }
1: 
0:     public int getSuccessful()
1:     {
0:         return successful.get();
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:6ec4eef
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * ProposeCallback has two modes of operation, controlled by the failFast parameter.
1:  *
1:  * In failFast mode, we will return a failure as soon as a majority of nodes reject
1:  * the proposal. This is used when replaying a proposal from an earlier leader.
1:  *
1:  * Otherwise, we wait for either all replicas to reply or until we achieve
1:  * the desired quorum. We continue to wait for all replicas even after we know we cannot succeed
1:  * because we need to know if no node at all have accepted or if at least one has.
1:  * In the former case, a proposer is guaranteed no-one will
1:  * replay its value; in the latter we don't, so we must timeout in case another
1:  * leader replays it before we can; see CASSANDRA-6013
1:  */
1:     private final AtomicInteger accepts = new AtomicInteger(0);
1:     private final int requiredAccepts;
1:     private final boolean failFast;
0:     public ProposeCallback(int totalTargets, int requiredTargets, boolean failFast)
0:         super(totalTargets);
1:         this.requiredAccepts = requiredTargets;
1:         this.failFast = failFast;
/////////////////////////////////////////////////////////////////////////
1:             accepts.incrementAndGet();
1: 
1: 
1:         if (isSuccessful() || (failFast && (latch.getCount() + accepts.get() < requiredAccepts)))
1:         {
1:             while (latch.getCount() > 0)
1:                 latch.countDown();
1:         }
1:     public int getAcceptCount()
1:         return accepts.get();
1:     }
1: 
1:     public boolean isSuccessful()
1:     {
1:         return accepts.get() >= requiredAccepts;
1:     }
1: 
1:     // Note: this is only reliable if !failFast
1:     public boolean isFullyRefused()
1:     {
1:         // We need to check the latch first to avoid racing with a late arrival
1:         // between the latch check and the accepts one
1:         return latch.getCount() == 0 && accepts.get() == 0;
============================================================================