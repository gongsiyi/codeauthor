1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
4:96d41f0: 
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.io.OutputStream;
1:96d41f0: import java.nio.ByteBuffer;
1:96d41f0: import java.nio.channels.FileChannel;
1:4cc2b67: import java.nio.charset.StandardCharsets;
1:96d41f0: import java.nio.file.Files;
1:96d41f0: import java.nio.file.StandardOpenOption;
1:96d41f0: import java.util.zip.CRC32;
1:96d41f0: 
1:c20566f: import com.google.common.annotations.VisibleForTesting;
1:c20566f: 
1:96d41f0: import org.apache.cassandra.config.DatabaseDescriptor;
1:96d41f0: import org.apache.cassandra.io.FSWriteError;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBuffer;
1:96d41f0: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1:96d41f0: import org.apache.cassandra.utils.CLibrary;
1:96d41f0: import org.apache.cassandra.utils.SyncUtil;
1:96d41f0: import org.apache.cassandra.utils.Throwables;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1:96d41f0: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1:96d41f0: import static org.apache.cassandra.utils.Throwables.perform;
1:96d41f0: 
1:c20566f: class HintsWriter implements AutoCloseable
4:96d41f0: {
1:96d41f0:     static final int PAGE_SIZE = 4096;
1:96d41f0: 
1:96d41f0:     private final File directory;
1:96d41f0:     private final HintsDescriptor descriptor;
1:96d41f0:     private final File file;
1:90033b9:     protected final FileChannel channel;
1:96d41f0:     private final int fd;
1:90033b9:     protected final CRC32 globalCRC;
1:96d41f0: 
1:96d41f0:     private volatile long lastSyncPosition = 0L;
1:96d41f0: 
1:c20566f:     protected HintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:96d41f0:     {
1:96d41f0:         this.directory = directory;
1:96d41f0:         this.descriptor = descriptor;
1:96d41f0:         this.file = file;
1:96d41f0:         this.channel = channel;
1:96d41f0:         this.fd = fd;
1:96d41f0:         this.globalCRC = globalCRC;
4:96d41f0:     }
1:96d41f0: 
1:e777301:     @SuppressWarnings("resource") // HintsWriter owns channel
1:96d41f0:     static HintsWriter create(File directory, HintsDescriptor descriptor) throws IOException
1:063e917:     {
1:96d41f0:         File file = new File(directory, descriptor.fileName());
1:96d41f0: 
1:96d41f0:         FileChannel channel = FileChannel.open(file.toPath(), StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);
1:96d41f0:         int fd = CLibrary.getfd(channel);
1:96d41f0: 
1:96d41f0:         CRC32 crc = new CRC32();
1:96d41f0: 
1:05660a5:         try (DataOutputBuffer dob = DataOutputBuffer.scratchBuffer.get())
1:c20566f:         {
1:96d41f0:             // write the descriptor
1:96d41f0:             descriptor.serialize(dob);
1:96d41f0:             ByteBuffer descriptorBytes = dob.buffer();
1:96d41f0:             updateChecksum(crc, descriptorBytes);
1:96d41f0:             channel.write(descriptorBytes);
1:96d41f0:         }
1:96d41f0:         catch (Throwable e)
1:96d41f0:         {
1:96d41f0:             channel.close();
1:96d41f0:             throw e;
1:063e917:         }
1:96d41f0: 
1:90033b9:         if (descriptor.isEncrypted())
1:90033b9:             return new EncryptedHintsWriter(directory, descriptor, file, channel, fd, crc);
1:c20566f:         if (descriptor.isCompressed())
1:c20566f:             return new CompressedHintsWriter(directory, descriptor, file, channel, fd, crc);
1:90033b9:         return new HintsWriter(directory, descriptor, file, channel, fd, crc);
1:c20566f:     }
1:96d41f0: 
1:96d41f0:     HintsDescriptor descriptor()
1:96d41f0:     {
1:96d41f0:         return descriptor;
1:c20566f:     }
1:96d41f0: 
1:96d41f0:     private void writeChecksum()
1:96d41f0:     {
1:96d41f0:         File checksumFile = new File(directory, descriptor.checksumFileName());
1:96d41f0:         try (OutputStream out = Files.newOutputStream(checksumFile.toPath()))
1:96d41f0:         {
1:4cc2b67:             out.write(Integer.toHexString((int) globalCRC.getValue()).getBytes(StandardCharsets.UTF_8));
1:96d41f0:         }
1:96d41f0:         catch (IOException e)
1:96d41f0:         {
1:96d41f0:             throw new FSWriteError(e, checksumFile);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public void close()
1:96d41f0:     {
1:96d41f0:         perform(file, Throwables.FileOpType.WRITE, this::doFsync, channel::close);
1:96d41f0: 
1:96d41f0:         writeChecksum();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     public void fsync()
1:96d41f0:     {
1:96d41f0:         perform(file, Throwables.FileOpType.WRITE, this::doFsync);
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private void doFsync() throws IOException
1:96d41f0:     {
1:96d41f0:         SyncUtil.force(channel, true);
1:96d41f0:         lastSyncPosition = channel.position();
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     Session newSession(ByteBuffer buffer)
1:96d41f0:     {
2:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             return new Session(buffer, channel.size());
1:96d41f0:         }
1:96d41f0:         catch (IOException e)
1:96d41f0:         {
1:96d41f0:             throw new FSWriteError(e, file);
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     /**
1:c20566f:      * Writes byte buffer into the file channel. Buffer should be flipped before calling this
1:c20566f:      */
1:c20566f:     protected void writeBuffer(ByteBuffer bb) throws IOException
1:c20566f:     {
1:c20566f:         updateChecksum(globalCRC, bb);
1:c20566f:         channel.write(bb);
1:c20566f:     }
1:c20566f: 
1:c20566f:     /**
1:96d41f0:      * The primary goal of the Session class is to be able to share the same buffers among potentially dozens or hundreds
1:96d41f0:      * of hints writers, and ensure that their contents are always written to the underlying channels in the end.
1:96d41f0:      */
1:96d41f0:     final class Session implements AutoCloseable
1:96d41f0:     {
1:96d41f0:         private final ByteBuffer buffer;
1:96d41f0: 
1:96d41f0:         private final long initialSize;
1:96d41f0:         private long bytesWritten;
1:96d41f0: 
1:96d41f0:         Session(ByteBuffer buffer, long initialSize)
1:96d41f0:         {
2:96d41f0:             buffer.clear();
1:96d41f0:             bytesWritten = 0L;
1:96d41f0: 
1:96d41f0:             this.buffer = buffer;
1:96d41f0:             this.initialSize = initialSize;
1:96d41f0:         }
1:96d41f0: 
1:c20566f:         @VisibleForTesting
1:c20566f:         long getBytesWritten()
1:c20566f:         {
1:c20566f:             return bytesWritten;
1:c20566f:         }
1:c20566f: 
1:96d41f0:         long position()
1:96d41f0:         {
1:96d41f0:             return initialSize + bytesWritten;
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         /**
1:96d41f0:          * Appends the serialized hint (with CRC included) to this session's aggregation buffer,
1:96d41f0:          * writes to the underlying channel when the buffer is overflown.
1:96d41f0:          *
1:96d41f0:          * @param hint the serialized hint (with CRC included)
1:96d41f0:          * @throws IOException
1:96d41f0:          */
1:96d41f0:         void append(ByteBuffer hint) throws IOException
1:96d41f0:         {
1:96d41f0:             bytesWritten += hint.remaining();
1:96d41f0: 
1:c20566f:             // if the hint to write won't fit in the aggregation buffer, flush it
1:c20566f:             if (hint.remaining() > buffer.remaining())
1:c20566f:             {
1:c20566f:                 buffer.flip();
1:c20566f:                 writeBuffer(buffer);
1:c20566f:                 buffer.clear();
1:c20566f:             }
1:c20566f: 
1:c20566f:             // if the hint fits in the aggregation buffer, then update the aggregation buffer,
1:c20566f:             // otherwise write the hint buffer to the channel
1:96d41f0:             if (hint.remaining() <= buffer.remaining())
1:96d41f0:             {
1:96d41f0:                 buffer.put(hint);
1:96d41f0:             }
1:c20566f:             else
1:c20566f:             {
1:c20566f:                 writeBuffer(hint);
1:c20566f:             }
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         /**
1:96d41f0:          * Serializes and appends the hint (with CRC included) to this session's aggregation buffer,
1:96d41f0:          * writes to the underlying channel when the buffer is overflown.
1:96d41f0:          *
1:96d41f0:          * Used mainly by tests and {@link LegacyHintsMigrator}
1:96d41f0:          *
1:96d41f0:          * @param hint the unserialized hint
1:96d41f0:          * @throws IOException
1:96d41f0:          */
1:96d41f0:         void append(Hint hint) throws IOException
1:c20566f:         {
1:96d41f0:             int hintSize = (int) Hint.serializer.serializedSize(hint, descriptor.messagingVersion());
1:96d41f0:             int totalSize = hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE;
1:96d41f0: 
1:96d41f0:             if (totalSize > buffer.remaining())
1:96d41f0:                 flushBuffer();
1:96d41f0: 
1:96d41f0:             ByteBuffer hintBuffer = totalSize <= buffer.remaining()
1:96d41f0:                                   ? buffer
1:96d41f0:                                   : ByteBuffer.allocate(totalSize);
1:96d41f0: 
1:96d41f0:             CRC32 crc = new CRC32();
1:96d41f0:             try (DataOutputBufferFixed out = new DataOutputBufferFixed(hintBuffer))
1:96d41f0:             {
1:96d41f0:                 out.writeInt(hintSize);
1:96d41f0:                 updateChecksumInt(crc, hintSize);
1:96d41f0:                 out.writeInt((int) crc.getValue());
1:96d41f0: 
1:96d41f0:                 Hint.serializer.serialize(hint, out, descriptor.messagingVersion());
1:96d41f0:                 updateChecksum(crc, hintBuffer, hintBuffer.position() - hintSize, hintSize);
1:96d41f0:                 out.writeInt((int) crc.getValue());
1:96d41f0:             }
1:96d41f0: 
1:96d41f0:             if (hintBuffer == buffer)
1:96d41f0:                 bytesWritten += totalSize;
1:c20566f:             else
1:96d41f0:                 append((ByteBuffer) hintBuffer.flip());
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         /**
1:96d41f0:          * Closes the session - flushes the aggregation buffer (if not empty), does page aligning, and potentially fsyncs.
1:96d41f0:          * @throws IOException
1:96d41f0:          */
1:96d41f0:         public void close() throws IOException
1:96d41f0:         {
1:96d41f0:             flushBuffer();
1:96d41f0:             maybeFsync();
1:96d41f0:             maybeSkipCache();
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         private void flushBuffer() throws IOException
1:96d41f0:         {
2:96d41f0:             buffer.flip();
1:96d41f0: 
1:96d41f0:             if (buffer.remaining() > 0)
1:96d41f0:             {
1:c20566f:                 writeBuffer(buffer);
1:96d41f0:             }
1:96d41f0: 
1:96d41f0:             buffer.clear();
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         private void maybeFsync()
1:96d41f0:         {
1:4cc2b67:             if (position() >= lastSyncPosition + DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024L)
1:96d41f0:                 fsync();
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         private void maybeSkipCache()
1:96d41f0:         {
1:96d41f0:             long position = position();
1:96d41f0: 
1:96d41f0:             // don't skip page cache for tiny files, on the assumption that if they are tiny, the target node is probably
1:96d41f0:             // alive, and if so, the file will be closed and dispatched shortly (within a minute), and the file will be dropped.
1:4cc2b67:             if (position >= DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024L)
1:96d41f0:                 CLibrary.trySkipCache(fd, 0, position - (position % PAGE_SIZE), file.getPath());
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:05660a5
/////////////////////////////////////////////////////////////////////////
1:         try (DataOutputBuffer dob = DataOutputBuffer.scratchBuffer.get())
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
0:         try (DataOutputBuffer ignored = dob = DataOutputBuffer.scratchBuffer.get())
author:Robert Stupp
-------------------------------------------------------------------------------
commit:063e917
/////////////////////////////////////////////////////////////////////////
0:         DataOutputBuffer dob = null;
0:         try (DataOutputBuffer ignored = dob = DataOutputBuffer.RECYCLER.get())
/////////////////////////////////////////////////////////////////////////
0:         finally
1:         {
0:             dob.recycle();
1:         }
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected final FileChannel channel;
1:     protected final CRC32 globalCRC;
/////////////////////////////////////////////////////////////////////////
1:         if (descriptor.isEncrypted())
1:             return new EncryptedHintsWriter(directory, descriptor, file, channel, fd, crc);
1:         return new HintsWriter(directory, descriptor, file, channel, fd, crc);
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
1: 
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1: class HintsWriter implements AutoCloseable
/////////////////////////////////////////////////////////////////////////
1:     protected HintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
/////////////////////////////////////////////////////////////////////////
1:         if (descriptor.isCompressed())
1:         {
1:             return new CompressedHintsWriter(directory, descriptor, file, channel, fd, crc);
1:         }
1:         else
1:         {
0:             return new HintsWriter(directory, descriptor, file, channel, fd, crc);
1:         }
/////////////////////////////////////////////////////////////////////////
1:      * Writes byte buffer into the file channel. Buffer should be flipped before calling this
1:      */
1:     protected void writeBuffer(ByteBuffer bb) throws IOException
1:     {
1:         updateChecksum(globalCRC, bb);
1:         channel.write(bb);
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:         @VisibleForTesting
1:         long getBytesWritten()
1:         {
1:             return bytesWritten;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             // if the hint to write won't fit in the aggregation buffer, flush it
1:             if (hint.remaining() > buffer.remaining())
1:             {
1:                 buffer.flip();
1:                 writeBuffer(buffer);
1:                 buffer.clear();
1:             }
1: 
1:             // if the hint fits in the aggregation buffer, then update the aggregation buffer,
1:             // otherwise write the hint buffer to the channel
1:             else
1:             {
1:                 writeBuffer(hint);
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 writeBuffer(buffer);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e777301
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource") // HintsWriter owns channel
/////////////////////////////////////////////////////////////////////////
0:         try (DataOutputBuffer dob = new DataOutputBuffer())
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:4cc2b67
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:             out.write(Integer.toHexString((int) globalCRC.getValue()).getBytes(StandardCharsets.UTF_8));
/////////////////////////////////////////////////////////////////////////
1:             if (position() >= lastSyncPosition + DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024L)
/////////////////////////////////////////////////////////////////////////
1:             if (position >= DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024L)
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.FileChannel;
1: import java.nio.file.Files;
1: import java.nio.file.StandardOpenOption;
1: import java.util.zip.CRC32;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSWriteError;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1: import org.apache.cassandra.utils.CLibrary;
1: import org.apache.cassandra.utils.SyncUtil;
1: import org.apache.cassandra.utils.Throwables;
1: 
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksum;
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1: import static org.apache.cassandra.utils.Throwables.perform;
1: 
0: final class HintsWriter implements AutoCloseable
1: {
1:     static final int PAGE_SIZE = 4096;
1: 
1:     private final File directory;
1:     private final HintsDescriptor descriptor;
1:     private final File file;
0:     private final FileChannel channel;
1:     private final int fd;
0:     private final CRC32 globalCRC;
1: 
1:     private volatile long lastSyncPosition = 0L;
1: 
0:     private HintsWriter(File directory, HintsDescriptor descriptor, File file, FileChannel channel, int fd, CRC32 globalCRC)
1:     {
1:         this.directory = directory;
1:         this.descriptor = descriptor;
1:         this.file = file;
1:         this.channel = channel;
1:         this.fd = fd;
1:         this.globalCRC = globalCRC;
1:     }
1: 
1:     static HintsWriter create(File directory, HintsDescriptor descriptor) throws IOException
1:     {
1:         File file = new File(directory, descriptor.fileName());
1: 
1:         FileChannel channel = FileChannel.open(file.toPath(), StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);
1:         int fd = CLibrary.getfd(channel);
1: 
1:         CRC32 crc = new CRC32();
1: 
1:         try
1:         {
1:             // write the descriptor
0:             DataOutputBuffer dob = new DataOutputBuffer();
1:             descriptor.serialize(dob);
1:             ByteBuffer descriptorBytes = dob.buffer();
1:             updateChecksum(crc, descriptorBytes);
1:             channel.write(descriptorBytes);
1:         }
1:         catch (Throwable e)
1:         {
1:             channel.close();
1:             throw e;
1:         }
1: 
0:         return new HintsWriter(directory, descriptor, file, channel, fd, crc);
1:     }
1: 
1:     HintsDescriptor descriptor()
1:     {
1:         return descriptor;
1:     }
1: 
1:     private void writeChecksum()
1:     {
1:         File checksumFile = new File(directory, descriptor.checksumFileName());
1:         try (OutputStream out = Files.newOutputStream(checksumFile.toPath()))
1:         {
0:             out.write(Integer.toHexString((int) globalCRC.getValue()).getBytes());
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, checksumFile);
1:         }
1:     }
1: 
1:     public void close()
1:     {
1:         perform(file, Throwables.FileOpType.WRITE, this::doFsync, channel::close);
1: 
1:         writeChecksum();
1:     }
1: 
1:     public void fsync()
1:     {
1:         perform(file, Throwables.FileOpType.WRITE, this::doFsync);
1:     }
1: 
1:     private void doFsync() throws IOException
1:     {
1:         SyncUtil.force(channel, true);
1:         lastSyncPosition = channel.position();
1:     }
1: 
1:     Session newSession(ByteBuffer buffer)
1:     {
1:         try
1:         {
1:             return new Session(buffer, channel.size());
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, file);
1:         }
1:     }
1: 
1:     /**
1:      * The primary goal of the Session class is to be able to share the same buffers among potentially dozens or hundreds
1:      * of hints writers, and ensure that their contents are always written to the underlying channels in the end.
1:      */
1:     final class Session implements AutoCloseable
1:     {
1:         private final ByteBuffer buffer;
1: 
1:         private final long initialSize;
1:         private long bytesWritten;
1: 
1:         Session(ByteBuffer buffer, long initialSize)
1:         {
1:             buffer.clear();
1:             bytesWritten = 0L;
1: 
1:             this.buffer = buffer;
1:             this.initialSize = initialSize;
1:         }
1: 
1:         long position()
1:         {
1:             return initialSize + bytesWritten;
1:         }
1: 
1:         /**
1:          * Appends the serialized hint (with CRC included) to this session's aggregation buffer,
1:          * writes to the underlying channel when the buffer is overflown.
1:          *
1:          * @param hint the serialized hint (with CRC included)
1:          * @throws IOException
1:          */
1:         void append(ByteBuffer hint) throws IOException
1:         {
1:             bytesWritten += hint.remaining();
1: 
0:             // if the hint fits in the aggregation buffer, then just update the aggregation buffer,
0:             // otherwise write both the aggregation buffer and the new buffer to the channel
1:             if (hint.remaining() <= buffer.remaining())
1:             {
1:                 buffer.put(hint);
0:                 return;
1:             }
1: 
1:             buffer.flip();
1: 
0:             // update file-global CRC checksum
0:             updateChecksum(globalCRC, buffer);
0:             updateChecksum(globalCRC, hint);
1: 
0:             channel.write(new ByteBuffer[] { buffer, hint });
1:             buffer.clear();
1:         }
1: 
1:         /**
1:          * Serializes and appends the hint (with CRC included) to this session's aggregation buffer,
1:          * writes to the underlying channel when the buffer is overflown.
1:          *
1:          * Used mainly by tests and {@link LegacyHintsMigrator}
1:          *
1:          * @param hint the unserialized hint
1:          * @throws IOException
1:          */
1:         void append(Hint hint) throws IOException
1:         {
1:             int hintSize = (int) Hint.serializer.serializedSize(hint, descriptor.messagingVersion());
1:             int totalSize = hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE;
1: 
1:             if (totalSize > buffer.remaining())
1:                 flushBuffer();
1: 
1:             ByteBuffer hintBuffer = totalSize <= buffer.remaining()
1:                                   ? buffer
1:                                   : ByteBuffer.allocate(totalSize);
1: 
1:             CRC32 crc = new CRC32();
1:             try (DataOutputBufferFixed out = new DataOutputBufferFixed(hintBuffer))
1:             {
1:                 out.writeInt(hintSize);
1:                 updateChecksumInt(crc, hintSize);
1:                 out.writeInt((int) crc.getValue());
1: 
1:                 Hint.serializer.serialize(hint, out, descriptor.messagingVersion());
1:                 updateChecksum(crc, hintBuffer, hintBuffer.position() - hintSize, hintSize);
1:                 out.writeInt((int) crc.getValue());
1:             }
1: 
1:             if (hintBuffer == buffer)
1:                 bytesWritten += totalSize;
0:             else
1:                 append((ByteBuffer) hintBuffer.flip());
1:         }
1: 
1:         /**
1:          * Closes the session - flushes the aggregation buffer (if not empty), does page aligning, and potentially fsyncs.
1:          * @throws IOException
1:          */
1:         public void close() throws IOException
1:         {
1:             flushBuffer();
1:             maybeFsync();
1:             maybeSkipCache();
1:         }
1: 
1:         private void flushBuffer() throws IOException
1:         {
1:             buffer.flip();
1: 
1:             if (buffer.remaining() > 0)
1:             {
0:                 updateChecksum(globalCRC, buffer);
0:                 channel.write(buffer);
1:             }
1: 
1:             buffer.clear();
1:         }
1: 
1:         private void maybeFsync()
1:         {
0:             if (position() >= lastSyncPosition + DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024)
1:                 fsync();
1:         }
1: 
1:         private void maybeSkipCache()
1:         {
1:             long position = position();
1: 
1:             // don't skip page cache for tiny files, on the assumption that if they are tiny, the target node is probably
1:             // alive, and if so, the file will be closed and dispatched shortly (within a minute), and the file will be dropped.
0:             if (position >= DatabaseDescriptor.getTrickleFsyncIntervalInKb() * 1024)
1:                 CLibrary.trySkipCache(fd, 0, position - (position % PAGE_SIZE), file.getPath());
1:         }
1:     }
1: }
============================================================================