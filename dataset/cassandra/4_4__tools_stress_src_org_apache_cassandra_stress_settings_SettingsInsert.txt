1:0580fb2: package org.apache.cassandra.stress.settings;
1:0580fb2: /*
1:0580fb2:  * 
1:0580fb2:  * Licensed to the Apache Software Foundation (ASF) under one
1:0580fb2:  * or more contributor license agreements.  See the NOTICE file
1:0580fb2:  * distributed with this work for additional information
1:0580fb2:  * regarding copyright ownership.  The ASF licenses this file
1:0580fb2:  * to you under the Apache License, Version 2.0 (the
1:0580fb2:  * "License"); you may not use this file except in compliance
1:0580fb2:  * with the License.  You may obtain a copy of the License at
1:0580fb2:  * 
1:0580fb2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0580fb2:  * 
1:0580fb2:  * Unless required by applicable law or agreed to in writing,
1:0580fb2:  * software distributed under the License is distributed on an
1:0580fb2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0580fb2:  * KIND, either express or implied.  See the License for the
1:0580fb2:  * specific language governing permissions and limitations
1:0580fb2:  * under the License.
1:0580fb2:  * 
1:0580fb2:  */
1:0580fb2: 
1:0580fb2: 
1:0580fb2: import java.io.Serializable;
1:0580fb2: import java.util.Arrays;
1:0580fb2: import java.util.List;
1:0580fb2: import java.util.Map;
1:0580fb2: 
1:0580fb2: import com.datastax.driver.core.BatchStatement;
1:0580fb2: import org.apache.cassandra.stress.generate.DistributionFactory;
1:0580fb2: import org.apache.cassandra.stress.generate.RatioDistributionFactory;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:0580fb2: 
1:0580fb2: public class SettingsInsert implements Serializable
1:0580fb2: {
1:0580fb2: 
1:0580fb2:     public final DistributionFactory revisit;
1:0580fb2:     public final DistributionFactory visits;
1:0580fb2:     public final DistributionFactory batchsize;
1:0580fb2:     public final RatioDistributionFactory selectRatio;
1:6d29ed0:     public final RatioDistributionFactory rowPopulationRatio;
1:0580fb2:     public final BatchStatement.Type batchType;
1:0580fb2: 
1:0580fb2:     private SettingsInsert(InsertOptions options)
1:0580fb2:     {
1:0580fb2:         this.visits= options.visits.get();
1:0580fb2:         this.revisit = options.revisit.get();
1:0580fb2:         this.batchsize = options.partitions.get();
1:0580fb2:         this.selectRatio = options.selectRatio.get();
1:6d29ed0:         this.rowPopulationRatio = options.rowPopulationRatio.get();
1:f708c1e: 
1:f708c1e: 
1:6d29ed0: 
1:0580fb2:         this.batchType = !options.batchType.setByUser() ? null : BatchStatement.Type.valueOf(options.batchType.value());
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // Option Declarations
1:0580fb2: 
1:0580fb2:     private static class InsertOptions extends GroupedOptions
1:0580fb2:     {
1:0580fb2:         final OptionDistribution visits = new OptionDistribution("visits=", "fixed(1)", "The target number of inserts to split a partition into; if more than one, the partition will be placed in the revisit set");
1:0580fb2:         final OptionDistribution revisit = new OptionDistribution("revisit=", "uniform(1..1M)", "The distribution with which we revisit partial writes (see visits); implicitly defines size of revisit collection");
1:0580fb2:         final OptionDistribution partitions = new OptionDistribution("partitions=", null, "The number of partitions to update in a single batch", false);
1:0580fb2:         final OptionSimple batchType = new OptionSimple("batchtype=", "unlogged|logged|counter", null, "Specify the type of batch statement (LOGGED, UNLOGGED or COUNTER)", false);
1:0580fb2:         final OptionRatioDistribution selectRatio = new OptionRatioDistribution("select-ratio=", null, "The uniform probability of visiting any CQL row in the generated partition", false);
1:f708c1e:         final OptionRatioDistribution rowPopulationRatio = new OptionRatioDistribution("row-population-ratio=", "fixed(1)/1", "The percent of a given rows columns to populate", false);
1:0580fb2: 
1:0580fb2:         @Override
1:0580fb2:         public List<? extends Option> options()
1:0580fb2:         {
1:6d29ed0:             return Arrays.asList(revisit, visits, partitions, batchType, selectRatio, rowPopulationRatio);
1:0580fb2:         }
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     // CLI Utility Methods
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2: 
1:938faa2:         if (revisit != null)
1:938faa2:         {
1:938faa2:             out.println("  Revisits: " +revisit.getConfigAsString());
1:938faa2:         }
1:938faa2:         if (visits != null)
1:938faa2:         {
1:938faa2:             out.println("  Visits: " + visits.getConfigAsString());
1:938faa2:         }
1:938faa2:         if (batchsize != null)
1:938faa2:         {
1:938faa2:             out.println("  Batchsize: " +batchsize.getConfigAsString());
1:938faa2:         }
1:938faa2:         if (batchsize != null)
1:938faa2:         {
1:938faa2:             out.println("  Select Ratio: " +selectRatio.getConfigAsString());
1:938faa2:         }
1:938faa2:         if (rowPopulationRatio != null)
1:938faa2:         {
1:938faa2:             out.println("  Row Population Ratio: " +rowPopulationRatio.getConfigAsString());
1:938faa2:         }
1:938faa2:         if (batchType != null)
1:938faa2:         {
1:938faa2:             out.printf("  Batch Type: %s%n", batchType);
1:938faa2:         } else {
1:938faa2:             out.println("  Batch Type: not batching");
1:938faa2:         }
1:938faa2:     }
1:938faa2: 
1:0580fb2: 
1:0580fb2:     public static SettingsInsert get(Map<String, String[]> clArgs)
1:0580fb2:     {
1:0580fb2:         String[] params = clArgs.remove("-insert");
1:0580fb2:         if (params == null)
1:0580fb2:             return new SettingsInsert(new InsertOptions());
1:0580fb2: 
1:0580fb2:         InsertOptions options = GroupedOptions.select(params, new InsertOptions());
1:0580fb2:         if (options == null)
1:0580fb2:         {
1:0580fb2:             printHelp();
1:0580fb2:             System.out.println("Invalid -insert options provided, see output for valid options");
1:0580fb2:             System.exit(1);
1:0580fb2:         }
1:0580fb2:         return new SettingsInsert(options);
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static void printHelp()
1:0580fb2:     {
1:0580fb2:         GroupedOptions.printOptions(System.out, "-insert", new InsertOptions());
1:0580fb2:     }
1:0580fb2: 
1:0580fb2:     public static Runnable helpPrinter()
1:0580fb2:     {
1:0580fb2:         return new Runnable()
1:0580fb2:         {
1:0580fb2:             @Override
1:0580fb2:             public void run()
1:0580fb2:             {
1:0580fb2:                 printHelp();
1:0580fb2:             }
1:0580fb2:         };
1:0580fb2:     }
1:0580fb2: }
1:0580fb2: 
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1: 
1:         if (revisit != null)
1:         {
1:             out.println("  Revisits: " +revisit.getConfigAsString());
1:         }
1:         if (visits != null)
1:         {
1:             out.println("  Visits: " + visits.getConfigAsString());
1:         }
1:         if (batchsize != null)
1:         {
1:             out.println("  Batchsize: " +batchsize.getConfigAsString());
1:         }
1:         if (batchsize != null)
1:         {
1:             out.println("  Select Ratio: " +selectRatio.getConfigAsString());
1:         }
1:         if (rowPopulationRatio != null)
1:         {
1:             out.println("  Row Population Ratio: " +rowPopulationRatio.getConfigAsString());
1:         }
1:         if (batchType != null)
1:         {
1:             out.printf("  Batch Type: %s%n", batchType);
1:         } else {
1:             out.println("  Batch Type: not batching");
1:         }
1:     }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:f708c1e
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         final OptionRatioDistribution rowPopulationRatio = new OptionRatioDistribution("row-population-ratio=", "fixed(1)/1", "The percent of a given rows columns to populate", false);
commit:6d29ed0
/////////////////////////////////////////////////////////////////////////
1:     public final RatioDistributionFactory rowPopulationRatio;
/////////////////////////////////////////////////////////////////////////
1:         this.rowPopulationRatio = options.rowPopulationRatio.get();
1: 
/////////////////////////////////////////////////////////////////////////
0:         final OptionRatioDistribution rowPopulationRatio = new OptionRatioDistribution("row-population-ratio=", null, "The percent of a given rows columns to populate", false);
1:             return Arrays.asList(revisit, visits, partitions, batchType, selectRatio, rowPopulationRatio);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import com.datastax.driver.core.BatchStatement;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.RatioDistributionFactory;
1: 
1: public class SettingsInsert implements Serializable
1: {
1: 
1:     public final DistributionFactory revisit;
1:     public final DistributionFactory visits;
1:     public final DistributionFactory batchsize;
1:     public final RatioDistributionFactory selectRatio;
1:     public final BatchStatement.Type batchType;
1: 
1:     private SettingsInsert(InsertOptions options)
1:     {
1:         this.visits= options.visits.get();
1:         this.revisit = options.revisit.get();
1:         this.batchsize = options.partitions.get();
1:         this.selectRatio = options.selectRatio.get();
1:         this.batchType = !options.batchType.setByUser() ? null : BatchStatement.Type.valueOf(options.batchType.value());
1:     }
1: 
1:     // Option Declarations
1: 
1:     private static class InsertOptions extends GroupedOptions
1:     {
1:         final OptionDistribution visits = new OptionDistribution("visits=", "fixed(1)", "The target number of inserts to split a partition into; if more than one, the partition will be placed in the revisit set");
1:         final OptionDistribution revisit = new OptionDistribution("revisit=", "uniform(1..1M)", "The distribution with which we revisit partial writes (see visits); implicitly defines size of revisit collection");
1:         final OptionDistribution partitions = new OptionDistribution("partitions=", null, "The number of partitions to update in a single batch", false);
1:         final OptionSimple batchType = new OptionSimple("batchtype=", "unlogged|logged|counter", null, "Specify the type of batch statement (LOGGED, UNLOGGED or COUNTER)", false);
1:         final OptionRatioDistribution selectRatio = new OptionRatioDistribution("select-ratio=", null, "The uniform probability of visiting any CQL row in the generated partition", false);
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             return Arrays.asList(revisit, visits, partitions, batchType, selectRatio);
1:         }
1:     }
1: 
1:     // CLI Utility Methods
1: 
1:     public static SettingsInsert get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-insert");
1:         if (params == null)
1:             return new SettingsInsert(new InsertOptions());
1: 
1:         InsertOptions options = GroupedOptions.select(params, new InsertOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -insert options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsInsert(options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-insert", new InsertOptions());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
1: 
============================================================================