1:389bac7: /*
1:389bac7: * Licensed to the Apache Software Foundation (ASF) under one
1:389bac7: * or more contributor license agreements.  See the NOTICE file
1:389bac7: * distributed with this work for additional information
1:389bac7: * regarding copyright ownership.  The ASF licenses this file
1:389bac7: * to you under the Apache License, Version 2.0 (the
1:389bac7: * "License"); you may not use this file except in compliance
1:389bac7: * with the License.  You may obtain a copy of the License at
1:389bac7: *
1:389bac7: *    http://www.apache.org/licenses/LICENSE-2.0
1:389bac7: *
1:389bac7: * Unless required by applicable law or agreed to in writing,
1:389bac7: * software distributed under the License is distributed on an
1:389bac7: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:389bac7: * KIND, either express or implied.  See the License for the
1:389bac7: * specific language governing permissions and limitations
1:389bac7: * under the License.
1:389bac7: */
1:389bac7: package org.apache.cassandra.service;
1:389bac7: 
1:389bac7: import java.net.InetAddress;
1:389bac7: import java.util.List;
1:389bac7: 
1:389bac7: import org.junit.BeforeClass;
1:389bac7: import org.junit.Test;
1:389bac7: 
1:a991b64: import org.apache.cassandra.db.PartitionPosition;
1:96d41f0: import org.apache.cassandra.config.DatabaseDescriptor;
1:a991b64: import org.apache.cassandra.dht.*;
1:389bac7: import org.apache.cassandra.locator.TokenMetadata;
1:a991b64: 
1:a991b64: import static org.apache.cassandra.Util.rp;
1:389bac7: import static org.apache.cassandra.Util.token;
1:389bac7: import static org.junit.Assert.assertEquals;
1:389bac7: 
1:d2a3827: public class StorageProxyTest
1:389bac7: {
1:a991b64:     private static Range<PartitionPosition> range(PartitionPosition left, PartitionPosition right)
1:554223b:     {
1:a991b64:         return new Range<PartitionPosition>(left, right);
1:554223b:     }
1:389bac7: 
1:a991b64:     private static Bounds<PartitionPosition> bounds(PartitionPosition left, PartitionPosition right)
1:35f7bc5:     {
1:a991b64:         return new Bounds<PartitionPosition>(left, right);
1:35f7bc5:     }
1:35f7bc5: 
1:a991b64:     private static ExcludingBounds<PartitionPosition> exBounds(PartitionPosition left, PartitionPosition right)
1:35f7bc5:     {
1:a991b64:         return new ExcludingBounds<PartitionPosition>(left, right);
1:35f7bc5:     }
1:35f7bc5: 
1:a991b64:     private static IncludingExcludingBounds<PartitionPosition> incExBounds(PartitionPosition left, PartitionPosition right)
1:554223b:     {
1:a991b64:         return new IncludingExcludingBounds<PartitionPosition>(left, right);
1:554223b:     }
1:554223b: 
1:a991b64:     private static PartitionPosition startOf(String key)
1:554223b:     {
1:0a08525:         return token(key).minKeyBound();
1:554223b:     }
1:554223b: 
1:a991b64:     private static PartitionPosition endOf(String key)
1:554223b:     {
1:0a08525:         return token(key).maxKeyBound();
1:554223b:     }
1:554223b: 
1:554223b:     private static Range<Token> tokenRange(String left, String right)
1:554223b:     {
1:554223b:         return new Range<Token>(token(left), token(right));
1:554223b:     }
1:554223b: 
1:554223b:     private static Bounds<Token> tokenBounds(String left, String right)
1:554223b:     {
1:554223b:         return new Bounds<Token>(token(left), token(right));
1:554223b:     }
1:554223b: 
1:389bac7:     @BeforeClass
1:389bac7:     public static void beforeClass() throws Throwable
1:389bac7:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:96d41f0:         DatabaseDescriptor.getHintsDirectory().mkdir();
1:389bac7:         TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:389bac7:         tmd.updateNormalToken(token("1"), InetAddress.getByName("127.0.0.1"));
1:389bac7:         tmd.updateNormalToken(token("6"), InetAddress.getByName("127.0.0.6"));
1:389bac7:     }
1:389bac7: 
1:554223b:     // test getRestrictedRanges for token
1:554223b:     private void testGRR(AbstractBounds<Token> queryRange, AbstractBounds<Token>... expected)
1:389bac7:     {
1:554223b:         // Testing for tokens
1:554223b:         List<AbstractBounds<Token>> restricted = StorageProxy.getRestrictedRanges(queryRange);
1:389bac7:         assertEquals(restricted.toString(), expected.length, restricted.size());
1:389bac7:         for (int i = 0; i < expected.length; i++)
1:389bac7:             assertEquals("Mismatch for index " + i + ": " + restricted, expected[i], restricted.get(i));
1:389bac7:     }
1:389bac7: 
1:554223b:     // test getRestrictedRanges for keys
1:a991b64:     private void testGRRKeys(AbstractBounds<PartitionPosition> queryRange, AbstractBounds<PartitionPosition>... expected)
1:554223b:     {
1:554223b:         // Testing for keys
1:a991b64:         List<AbstractBounds<PartitionPosition>> restrictedKeys = StorageProxy.getRestrictedRanges(queryRange);
1:554223b:         assertEquals(restrictedKeys.toString(), expected.length, restrictedKeys.size());
1:554223b:         for (int i = 0; i < expected.length; i++)
1:554223b:             assertEquals("Mismatch for index " + i + ": " + restrictedKeys, expected[i], restrictedKeys.get(i));
1:554223b: 
1:554223b:     }
1:554223b: 
1:389bac7:     @Test
1:389bac7:     public void testGRR() throws Throwable
1:389bac7:     {
1:389bac7:         // no splits
1:554223b:         testGRR(tokenRange("2", "5"), tokenRange("2", "5"));
1:554223b:         testGRR(tokenBounds("2", "5"), tokenBounds("2", "5"));
1:389bac7:         // single split
1:554223b:         testGRR(tokenRange("2", "7"), tokenRange("2", "6"), tokenRange("6", "7"));
1:554223b:         testGRR(tokenBounds("2", "7"), tokenBounds("2", "6"), tokenRange("6", "7"));
1:389bac7:         // single split starting from min
1:554223b:         testGRR(tokenRange("", "2"), tokenRange("", "1"), tokenRange("1", "2"));
1:554223b:         testGRR(tokenBounds("", "2"), tokenBounds("", "1"), tokenRange("1", "2"));
1:389bac7:         // single split ending with max
1:554223b:         testGRR(tokenRange("5", ""), tokenRange("5", "6"), tokenRange("6", ""));
1:554223b:         testGRR(tokenBounds("5", ""), tokenBounds("5", "6"), tokenRange("6", ""));
1:389bac7:         // two splits
1:554223b:         testGRR(tokenRange("0", "7"), tokenRange("0", "1"), tokenRange("1", "6"), tokenRange("6", "7"));
1:554223b:         testGRR(tokenBounds("0", "7"), tokenBounds("0", "1"), tokenRange("1", "6"), tokenRange("6", "7"));
1:389bac7: 
4:554223b: 
1:554223b:         // Keys
1:554223b:         // no splits
1:554223b:         testGRRKeys(range(rp("2"), rp("5")), range(rp("2"), rp("5")));
1:554223b:         testGRRKeys(bounds(rp("2"), rp("5")), bounds(rp("2"), rp("5")));
1:35f7bc5:         testGRRKeys(exBounds(rp("2"), rp("5")), exBounds(rp("2"), rp("5")));
1:554223b:         // single split testGRRKeys(range("2", "7"), range(rp("2"), endOf("6")), range(endOf("6"), rp("7")));
1:554223b:         testGRRKeys(bounds(rp("2"), rp("7")), bounds(rp("2"), endOf("6")), range(endOf("6"), rp("7")));
1:35f7bc5:         testGRRKeys(exBounds(rp("2"), rp("7")), range(rp("2"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("2"), rp("7")), bounds(rp("2"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:554223b:         // single split starting from min
1:554223b:         testGRRKeys(range(rp(""), rp("2")), range(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:554223b:         testGRRKeys(bounds(rp(""), rp("2")), bounds(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:35f7bc5:         testGRRKeys(exBounds(rp(""), rp("2")), range(rp(""), endOf("1")), exBounds(endOf("1"), rp("2")));
1:35f7bc5:         testGRRKeys(incExBounds(rp(""), rp("2")), bounds(rp(""), endOf("1")), exBounds(endOf("1"), rp("2")));
1:554223b:         // single split ending with max
1:554223b:         testGRRKeys(range(rp("5"), rp("")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:554223b:         testGRRKeys(bounds(rp("5"), rp("")), bounds(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:35f7bc5:         testGRRKeys(exBounds(rp("5"), rp("")), range(rp("5"), endOf("6")), exBounds(endOf("6"), rp("")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("5"), rp("")), bounds(rp("5"), endOf("6")), exBounds(endOf("6"), rp("")));
1:554223b:         // two splits
1:554223b:         testGRRKeys(range(rp("0"), rp("7")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("7")));
1:554223b:         testGRRKeys(bounds(rp("0"), rp("7")), bounds(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("7")));
1:35f7bc5:         testGRRKeys(exBounds(rp("0"), rp("7")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("0"), rp("7")), bounds(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:389bac7:     }
1:554223b: 
1:389bac7:     @Test
1:389bac7:     public void testGRRExact() throws Throwable
1:389bac7:     {
1:389bac7:         // min
1:554223b:         testGRR(tokenRange("1", "5"), tokenRange("1", "5"));
1:554223b:         testGRR(tokenBounds("1", "5"), tokenBounds("1", "1"), tokenRange("1", "5"));
1:389bac7:         // max
1:554223b:         testGRR(tokenRange("2", "6"), tokenRange("2", "6"));
1:554223b:         testGRR(tokenBounds("2", "6"), tokenBounds("2", "6"));
1:389bac7:         // both
1:554223b:         testGRR(tokenRange("1", "6"), tokenRange("1", "6"));
1:554223b:         testGRR(tokenBounds("1", "6"), tokenBounds("1", "1"), tokenRange("1", "6"));
1:389bac7: 
1:554223b: 
1:554223b:         // Keys
1:554223b:         // min
1:554223b:         testGRRKeys(range(endOf("1"), endOf("5")), range(endOf("1"), endOf("5")));
1:554223b:         testGRRKeys(range(rp("1"), endOf("5")), range(rp("1"), endOf("1")), range(endOf("1"), endOf("5")));
1:554223b:         testGRRKeys(bounds(startOf("1"), endOf("5")), bounds(startOf("1"), endOf("1")), range(endOf("1"), endOf("5")));
1:35f7bc5:         testGRRKeys(exBounds(endOf("1"), rp("5")), exBounds(endOf("1"), rp("5")));
1:35f7bc5:         testGRRKeys(exBounds(rp("1"), rp("5")), range(rp("1"), endOf("1")), exBounds(endOf("1"), rp("5")));
1:35f7bc5:         testGRRKeys(exBounds(startOf("1"), endOf("5")), range(startOf("1"), endOf("1")), exBounds(endOf("1"), endOf("5")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("1"), rp("5")), bounds(rp("1"), endOf("1")), exBounds(endOf("1"), rp("5")));
1:554223b:         // max
1:554223b:         testGRRKeys(range(endOf("2"), endOf("6")), range(endOf("2"), endOf("6")));
1:554223b:         testGRRKeys(bounds(startOf("2"), endOf("6")), bounds(startOf("2"), endOf("6")));
1:35f7bc5:         testGRRKeys(exBounds(rp("2"), rp("6")), exBounds(rp("2"), rp("6")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("2"), rp("6")), incExBounds(rp("2"), rp("6")));
1:554223b:         // bothKeys
1:554223b:         testGRRKeys(range(rp("1"), rp("6")), range(rp("1"), endOf("1")), range(endOf("1"), rp("6")));
1:554223b:         testGRRKeys(bounds(rp("1"), rp("6")), bounds(rp("1"), endOf("1")), range(endOf("1"), rp("6")));
1:35f7bc5:         testGRRKeys(exBounds(rp("1"), rp("6")), range(rp("1"), endOf("1")), exBounds(endOf("1"), rp("6")));
1:35f7bc5:         testGRRKeys(incExBounds(rp("1"), rp("6")), bounds(rp("1"), endOf("1")), exBounds(endOf("1"), rp("6")));
1:389bac7:     }
1:554223b: 
1:389bac7:     @Test
1:389bac7:     public void testGRRWrapped() throws Throwable
1:389bac7:     {
1:389bac7:         // one token in wrapped range
1:554223b:         testGRR(tokenRange("7", "0"), tokenRange("7", ""), tokenRange("", "0"));
1:389bac7:         // two tokens in wrapped range
1:554223b:         testGRR(tokenRange("5", "0"), tokenRange("5", "6"), tokenRange("6", ""), tokenRange("", "0"));
1:554223b:         testGRR(tokenRange("7", "2"), tokenRange("7", ""), tokenRange("", "1"), tokenRange("1", "2"));
1:389bac7:         // full wraps
1:554223b:         testGRR(tokenRange("0", "0"), tokenRange("0", "1"), tokenRange("1", "6"), tokenRange("6", ""), tokenRange("", "0"));
1:554223b:         testGRR(tokenRange("", ""), tokenRange("", "1"), tokenRange("1", "6"), tokenRange("6", ""));
1:8fbf2e7:         // wrap on member tokens
1:554223b:         testGRR(tokenRange("6", "6"), tokenRange("6", ""), tokenRange("", "1"), tokenRange("1", "6"));
1:554223b:         testGRR(tokenRange("6", "1"), tokenRange("6", ""), tokenRange("", "1"));
1:389bac7:         // end wrapped
1:554223b:         testGRR(tokenRange("5", ""), tokenRange("5", "6"), tokenRange("6", ""));
1:389bac7: 
1:554223b:         // Keys
1:554223b:         // one token in wrapped range
1:554223b:         testGRRKeys(range(rp("7"), rp("0")), range(rp("7"), rp("")), range(rp(""), rp("0")));
1:554223b:         // two tokens in wrapped range
1:554223b:         testGRRKeys(range(rp("5"), rp("0")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("0")));
1:554223b:         testGRRKeys(range(rp("7"), rp("2")), range(rp("7"), rp("")), range(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:554223b:         // full wraps
1:554223b:         testGRRKeys(range(rp("0"), rp("0")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("0")));
1:554223b:         testGRRKeys(range(rp(""), rp("")), range(rp(""), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")));
1:554223b:         // wrap on member tokens
1:554223b:         testGRRKeys(range(rp("6"), rp("6")), range(rp("6"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), endOf("1")), range(endOf("1"), rp("6")));
1:554223b:         testGRRKeys(range(rp("6"), rp("1")), range(rp("6"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("1")));
1:554223b:         // end wrapped
1:554223b:         testGRRKeys(range(rp("5"), rp("")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:389bac7:     }
1:554223b: 
1:389bac7:     @Test
1:389bac7:     public void testGRRExactBounds() throws Throwable
1:389bac7:     {
1:389bac7:         // equal tokens are special cased as non-wrapping for bounds
1:554223b:         testGRR(tokenBounds("0", "0"), tokenBounds("0", "0"));
1:602605f:         // completely empty bounds match everything
1:554223b:         testGRR(tokenBounds("", ""), tokenBounds("", "1"), tokenRange("1", "6"), tokenRange("6", ""));
1:554223b: 
1:554223b:         // Keys
1:554223b:         // equal tokens are special cased as non-wrapping for bounds
1:554223b:         testGRRKeys(bounds(rp("0"), rp("0")), bounds(rp("0"), rp("0")));
1:554223b:         // completely empty bounds match everything
1:554223b:         testGRRKeys(bounds(rp(""), rp("")), bounds(rp(""), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")));
1:35f7bc5:         testGRRKeys(exBounds(rp(""), rp("")), range(rp(""), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("")));
1:35f7bc5:         testGRRKeys(incExBounds(rp(""), rp("")), bounds(rp(""), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("")));
1:389bac7:     }
1:389bac7: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.getHintsDirectory().mkdir();
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         return token(key).minKeyBound();
1:         return token(key).maxKeyBound();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(key)).minKeyBound();
0:         return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(key)).maxKeyBound();
commit:8fbf2e7
/////////////////////////////////////////////////////////////////////////
1:         // wrap on member tokens
0:         testGRR(range("6", "1"), range("6", ""), range("", "1"));
commit:602605f
/////////////////////////////////////////////////////////////////////////
1:         // completely empty bounds match everything
0:         testGRR(bounds("", ""), bounds("", "1"), range("1", "6"), range("6", ""));
commit:9c5a6d5
/////////////////////////////////////////////////////////////////////////
0:         // wrap on member token
0:         testGRR(range("6", "6"), range("6", ""), range("", "1"), range("1", "6"));
commit:389bac7
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.service;
1: 
1: import java.net.InetAddress;
1: import java.util.List;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
1: 
0: import org.apache.cassandra.CleanupHelper;
0: import static org.apache.cassandra.Util.range;
0: import static org.apache.cassandra.Util.bounds;
1: import static org.apache.cassandra.Util.token;
1: 
0: import org.apache.cassandra.dht.AbstractBounds;
1: import org.apache.cassandra.locator.TokenMetadata;
1: 
0: public class StorageProxyTest extends CleanupHelper
1: {
1:     @BeforeClass
1:     public static void beforeClass() throws Throwable
1:     {
1:         TokenMetadata tmd = StorageService.instance.getTokenMetadata();
1:         tmd.updateNormalToken(token("1"), InetAddress.getByName("127.0.0.1"));
1:         tmd.updateNormalToken(token("6"), InetAddress.getByName("127.0.0.6"));
1:     }
1: 
0:     private void testGRR(AbstractBounds queryRange, AbstractBounds... expected)
1:     {
0:         List<AbstractBounds> restricted = StorageProxy.getRestrictedRanges(queryRange);
1:         assertEquals(restricted.toString(), expected.length, restricted.size());
1:         for (int i = 0; i < expected.length; i++)
1:             assertEquals("Mismatch for index " + i + ": " + restricted, expected[i], restricted.get(i));
1:     }
1: 
1:     @Test
1:     public void testGRR() throws Throwable
1:     {
1:         // no splits
0:         testGRR(range("2", "5"), range("2", "5"));
0:         testGRR(bounds("2", "5"), bounds("2", "5"));
1:         // single split
0:         testGRR(range("2", "7"), range("2", "6"), range("6", "7"));
0:         testGRR(bounds("2", "7"), bounds("2", "6"), range("6", "7"));
1:         // single split starting from min
0:         testGRR(range("", "2"), range("", "1"), range("1", "2"));
0:         testGRR(bounds("", "2"), bounds("", "1"), range("1", "2"));
1:         // single split ending with max
0:         testGRR(range("5", ""), range("5", "6"), range("6", ""));
0:         testGRR(bounds("5", ""), bounds("5", "6"), range("6", ""));
1:         // two splits
0:         testGRR(range("0", "7"), range("0", "1"), range("1", "6"), range("6", "7"));
0:         testGRR(bounds("0", "7"), bounds("0", "1"), range("1", "6"), range("6", "7"));
1:     }
1: 
1:     @Test
1:     public void testGRRExact() throws Throwable
1:     {
1:         // min
0:         testGRR(range("1", "5"), range("1", "5"));
0:         testGRR(bounds("1", "5"), bounds("1", "1"), range("1", "5"));
1:         // max
0:         testGRR(range("2", "6"), range("2", "6"));
0:         testGRR(bounds("2", "6"), bounds("2", "6"));
1:         // both
0:         testGRR(range("1", "6"), range("1", "6"));
0:         testGRR(bounds("1", "6"), bounds("1", "1"), range("1", "6"));
1:     }
1: 
1:     @Test
1:     public void testGRRWrapped() throws Throwable
1:     {
1:         // one token in wrapped range
0:         testGRR(range("7", "0"), range("7", ""), range("", "0"));
1:         // two tokens in wrapped range
0:         testGRR(range("5", "0"), range("5", "6"), range("6", ""), range("", "0"));
0:         testGRR(range("7", "2"), range("7", ""), range("", "1"), range("1", "2"));
1:         // full wraps
0:         testGRR(range("0", "0"), range("0", "1"), range("1", "6"), range("6", ""), range("", "0"));
0:         testGRR(range("", ""), range("", "1"), range("1", "6"), range("6", ""));
1:         // end wrapped
0:         testGRR(range("5", ""), range("5", "6"), range("6", ""));
1:     }
1: 
1:     @Test
1:     public void testGRRExactBounds() throws Throwable
1:     {
1:         // equal tokens are special cased as non-wrapping for bounds
0:         testGRR(bounds("0", "0"), bounds("0", "0"));
1:     }
1: }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         return token(key).minKeyBound();
0:         return token(key).maxKeyBound();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.PartitionPosition;
1: import org.apache.cassandra.dht.*;
1: import static org.apache.cassandra.Util.rp;
0: import static org.apache.cassandra.Util.token;
0: import static org.junit.Assert.assertEquals;
1: 
1:     private static Range<PartitionPosition> range(PartitionPosition left, PartitionPosition right)
1:         return new Range<PartitionPosition>(left, right);
1:     private static Bounds<PartitionPosition> bounds(PartitionPosition left, PartitionPosition right)
1:         return new Bounds<PartitionPosition>(left, right);
1:     private static ExcludingBounds<PartitionPosition> exBounds(PartitionPosition left, PartitionPosition right)
1:         return new ExcludingBounds<PartitionPosition>(left, right);
1:     private static IncludingExcludingBounds<PartitionPosition> incExBounds(PartitionPosition left, PartitionPosition right)
1:         return new IncludingExcludingBounds<PartitionPosition>(left, right);
1:     private static PartitionPosition startOf(String key)
1:     private static PartitionPosition endOf(String key)
/////////////////////////////////////////////////////////////////////////
1:     private void testGRRKeys(AbstractBounds<PartitionPosition> queryRange, AbstractBounds<PartitionPosition>... expected)
1:         List<AbstractBounds<PartitionPosition>> restrictedKeys = StorageProxy.getRestrictedRanges(queryRange);
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.SchemaLoader;
/////////////////////////////////////////////////////////////////////////
0: public class StorageProxyTest extends SchemaLoader
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:35f7bc5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.dht.ExcludingBounds;
0: import org.apache.cassandra.dht.IncludingExcludingBounds;
/////////////////////////////////////////////////////////////////////////
0:     private static ExcludingBounds<RowPosition> exBounds(RowPosition left, RowPosition right)
1:     {
0:         return new ExcludingBounds<RowPosition>(left, right);
1:     }
1: 
0:     private static IncludingExcludingBounds<RowPosition> incExBounds(RowPosition left, RowPosition right)
1:     {
0:         return new IncludingExcludingBounds<RowPosition>(left, right);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         testGRRKeys(exBounds(rp("2"), rp("5")), exBounds(rp("2"), rp("5")));
1:         testGRRKeys(exBounds(rp("2"), rp("7")), range(rp("2"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:         testGRRKeys(incExBounds(rp("2"), rp("7")), bounds(rp("2"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:         testGRRKeys(exBounds(rp(""), rp("2")), range(rp(""), endOf("1")), exBounds(endOf("1"), rp("2")));
1:         testGRRKeys(incExBounds(rp(""), rp("2")), bounds(rp(""), endOf("1")), exBounds(endOf("1"), rp("2")));
1:         testGRRKeys(exBounds(rp("5"), rp("")), range(rp("5"), endOf("6")), exBounds(endOf("6"), rp("")));
1:         testGRRKeys(incExBounds(rp("5"), rp("")), bounds(rp("5"), endOf("6")), exBounds(endOf("6"), rp("")));
1:         testGRRKeys(exBounds(rp("0"), rp("7")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("7")));
1:         testGRRKeys(incExBounds(rp("0"), rp("7")), bounds(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("7")));
/////////////////////////////////////////////////////////////////////////
1:         testGRRKeys(exBounds(endOf("1"), rp("5")), exBounds(endOf("1"), rp("5")));
1:         testGRRKeys(exBounds(rp("1"), rp("5")), range(rp("1"), endOf("1")), exBounds(endOf("1"), rp("5")));
1:         testGRRKeys(exBounds(startOf("1"), endOf("5")), range(startOf("1"), endOf("1")), exBounds(endOf("1"), endOf("5")));
1:         testGRRKeys(incExBounds(rp("1"), rp("5")), bounds(rp("1"), endOf("1")), exBounds(endOf("1"), rp("5")));
1:         testGRRKeys(exBounds(rp("2"), rp("6")), exBounds(rp("2"), rp("6")));
1:         testGRRKeys(incExBounds(rp("2"), rp("6")), incExBounds(rp("2"), rp("6")));
1:         testGRRKeys(exBounds(rp("1"), rp("6")), range(rp("1"), endOf("1")), exBounds(endOf("1"), rp("6")));
1:         testGRRKeys(incExBounds(rp("1"), rp("6")), bounds(rp("1"), endOf("1")), exBounds(endOf("1"), rp("6")));
/////////////////////////////////////////////////////////////////////////
1:         testGRRKeys(exBounds(rp(""), rp("")), range(rp(""), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("")));
1:         testGRRKeys(incExBounds(rp(""), rp("")), bounds(rp(""), endOf("1")), range(endOf("1"), endOf("6")), exBounds(endOf("6"), rp("")));
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.Util.rp;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.RowPosition;
0: import org.apache.cassandra.dht.Bounds;
0: import org.apache.cassandra.dht.Range;
0: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: import java.util.Arrays;
0:     private static Range<RowPosition> range(RowPosition left, RowPosition right)
1:     {
0:         return new Range<RowPosition>(left, right);
1:     }
1: 
0:     private static Bounds<RowPosition> bounds(RowPosition left, RowPosition right)
1:     {
0:         return new Bounds<RowPosition>(left, right);
1:     }
1: 
0:     private static RowPosition startOf(String key)
1:     {
0:         return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(key)).minKeyBound();
1:     }
1: 
0:     private static RowPosition endOf(String key)
1:     {
0:         return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(key)).maxKeyBound();
1:     }
1: 
1:     private static Range<Token> tokenRange(String left, String right)
1:     {
1:         return new Range<Token>(token(left), token(right));
1:     }
1: 
1:     private static Bounds<Token> tokenBounds(String left, String right)
1:     {
1:         return new Bounds<Token>(token(left), token(right));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     // test getRestrictedRanges for token
1:     private void testGRR(AbstractBounds<Token> queryRange, AbstractBounds<Token>... expected)
1:         // Testing for tokens
1:         List<AbstractBounds<Token>> restricted = StorageProxy.getRestrictedRanges(queryRange);
1:     // test getRestrictedRanges for keys
0:     private void testGRRKeys(AbstractBounds<RowPosition> queryRange, AbstractBounds<RowPosition>... expected)
1:     {
1:         // Testing for keys
0:         List<AbstractBounds<RowPosition>> restrictedKeys = StorageProxy.getRestrictedRanges(queryRange);
1:         assertEquals(restrictedKeys.toString(), expected.length, restrictedKeys.size());
1:         for (int i = 0; i < expected.length; i++)
1:             assertEquals("Mismatch for index " + i + ": " + restrictedKeys, expected[i], restrictedKeys.get(i));
1: 
1:     }
1: 
1:         testGRR(tokenRange("2", "5"), tokenRange("2", "5"));
1:         testGRR(tokenBounds("2", "5"), tokenBounds("2", "5"));
1:         testGRR(tokenRange("2", "7"), tokenRange("2", "6"), tokenRange("6", "7"));
1:         testGRR(tokenBounds("2", "7"), tokenBounds("2", "6"), tokenRange("6", "7"));
1:         testGRR(tokenRange("", "2"), tokenRange("", "1"), tokenRange("1", "2"));
1:         testGRR(tokenBounds("", "2"), tokenBounds("", "1"), tokenRange("1", "2"));
1:         testGRR(tokenRange("5", ""), tokenRange("5", "6"), tokenRange("6", ""));
1:         testGRR(tokenBounds("5", ""), tokenBounds("5", "6"), tokenRange("6", ""));
1:         testGRR(tokenRange("0", "7"), tokenRange("0", "1"), tokenRange("1", "6"), tokenRange("6", "7"));
1:         testGRR(tokenBounds("0", "7"), tokenBounds("0", "1"), tokenRange("1", "6"), tokenRange("6", "7"));
1: 
1: 
1:         // Keys
1:         // no splits
1:         testGRRKeys(range(rp("2"), rp("5")), range(rp("2"), rp("5")));
1:         testGRRKeys(bounds(rp("2"), rp("5")), bounds(rp("2"), rp("5")));
1:         // single split testGRRKeys(range("2", "7"), range(rp("2"), endOf("6")), range(endOf("6"), rp("7")));
1:         testGRRKeys(bounds(rp("2"), rp("7")), bounds(rp("2"), endOf("6")), range(endOf("6"), rp("7")));
1:         // single split starting from min
1:         testGRRKeys(range(rp(""), rp("2")), range(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:         testGRRKeys(bounds(rp(""), rp("2")), bounds(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:         // single split ending with max
1:         testGRRKeys(range(rp("5"), rp("")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:         testGRRKeys(bounds(rp("5"), rp("")), bounds(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:         // two splits
1:         testGRRKeys(range(rp("0"), rp("7")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("7")));
1:         testGRRKeys(bounds(rp("0"), rp("7")), bounds(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("7")));
1: 
1:         testGRR(tokenRange("1", "5"), tokenRange("1", "5"));
1:         testGRR(tokenBounds("1", "5"), tokenBounds("1", "1"), tokenRange("1", "5"));
1:         testGRR(tokenRange("2", "6"), tokenRange("2", "6"));
1:         testGRR(tokenBounds("2", "6"), tokenBounds("2", "6"));
1:         testGRR(tokenRange("1", "6"), tokenRange("1", "6"));
1:         testGRR(tokenBounds("1", "6"), tokenBounds("1", "1"), tokenRange("1", "6"));
1: 
1: 
1:         // Keys
1:         // min
1:         testGRRKeys(range(endOf("1"), endOf("5")), range(endOf("1"), endOf("5")));
1:         testGRRKeys(range(rp("1"), endOf("5")), range(rp("1"), endOf("1")), range(endOf("1"), endOf("5")));
1:         testGRRKeys(bounds(startOf("1"), endOf("5")), bounds(startOf("1"), endOf("1")), range(endOf("1"), endOf("5")));
1:         // max
1:         testGRRKeys(range(endOf("2"), endOf("6")), range(endOf("2"), endOf("6")));
1:         testGRRKeys(bounds(startOf("2"), endOf("6")), bounds(startOf("2"), endOf("6")));
1:         // bothKeys
1:         testGRRKeys(range(rp("1"), rp("6")), range(rp("1"), endOf("1")), range(endOf("1"), rp("6")));
1:         testGRRKeys(bounds(rp("1"), rp("6")), bounds(rp("1"), endOf("1")), range(endOf("1"), rp("6")));
1:         testGRR(tokenRange("7", "0"), tokenRange("7", ""), tokenRange("", "0"));
1:         testGRR(tokenRange("5", "0"), tokenRange("5", "6"), tokenRange("6", ""), tokenRange("", "0"));
1:         testGRR(tokenRange("7", "2"), tokenRange("7", ""), tokenRange("", "1"), tokenRange("1", "2"));
1:         testGRR(tokenRange("0", "0"), tokenRange("0", "1"), tokenRange("1", "6"), tokenRange("6", ""), tokenRange("", "0"));
1:         testGRR(tokenRange("", ""), tokenRange("", "1"), tokenRange("1", "6"), tokenRange("6", ""));
1:         testGRR(tokenRange("6", "6"), tokenRange("6", ""), tokenRange("", "1"), tokenRange("1", "6"));
1:         testGRR(tokenRange("6", "1"), tokenRange("6", ""), tokenRange("", "1"));
1:         testGRR(tokenRange("5", ""), tokenRange("5", "6"), tokenRange("6", ""));
1: 
1:         // Keys
1:         // one token in wrapped range
1:         testGRRKeys(range(rp("7"), rp("0")), range(rp("7"), rp("")), range(rp(""), rp("0")));
1:         // two tokens in wrapped range
1:         testGRRKeys(range(rp("5"), rp("0")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("0")));
1:         testGRRKeys(range(rp("7"), rp("2")), range(rp("7"), rp("")), range(rp(""), endOf("1")), range(endOf("1"), rp("2")));
1:         // full wraps
1:         testGRRKeys(range(rp("0"), rp("0")), range(rp("0"), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("0")));
1:         testGRRKeys(range(rp(""), rp("")), range(rp(""), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")));
1:         // wrap on member tokens
1:         testGRRKeys(range(rp("6"), rp("6")), range(rp("6"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), endOf("1")), range(endOf("1"), rp("6")));
1:         testGRRKeys(range(rp("6"), rp("1")), range(rp("6"), endOf("6")), range(endOf("6"), rp("")), range(rp(""), rp("1")));
1:         // end wrapped
1:         testGRRKeys(range(rp("5"), rp("")), range(rp("5"), endOf("6")), range(endOf("6"), rp("")));
1:         testGRR(tokenBounds("0", "0"), tokenBounds("0", "0"));
1:         testGRR(tokenBounds("", ""), tokenBounds("", "1"), tokenRange("1", "6"), tokenRange("6", ""));
1: 
1:         // Keys
1:         // equal tokens are special cased as non-wrapping for bounds
1:         testGRRKeys(bounds(rp("0"), rp("0")), bounds(rp("0"), rp("0")));
1:         // completely empty bounds match everything
1:         testGRRKeys(bounds(rp(""), rp("")), bounds(rp(""), endOf("1")), range(endOf("1"), endOf("6")), range(endOf("6"), rp("")));
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class StorageProxyTest
============================================================================