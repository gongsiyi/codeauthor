1:07cf56f: /*
1:37b0793:  * Licensed to the Apache Software Foundation (ASF) under one
1:37b0793:  * or more contributor license agreements.  See the NOTICE file
1:37b0793:  * distributed with this work for additional information
1:37b0793:  * regarding copyright ownership.  The ASF licenses this file
1:37b0793:  * to you under the Apache License, Version 2.0 (the
1:37b0793:  * "License"); you may not use this file except in compliance
1:37b0793:  * with the License.  You may obtain a copy of the License at
1:37b0793:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:37b0793:  *
1:37b0793:  * Unless required by applicable law or agreed to in writing, software
1:37b0793:  * distributed under the License is distributed on an "AS IS" BASIS,
1:37b0793:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:37b0793:  * See the License for the specific language governing permissions and
1:37b0793:  * limitations under the License.
1:37b0793:  */
1:37b0793: package org.apache.cassandra.db;
1:8eca4ad: 
1:5a6f0b8: import java.util.Collection;
1:8eca4ad: 
1:37b0793: import org.slf4j.Logger;
1:37b0793: import org.slf4j.LoggerFactory;
5:37b0793: 
1:37b0793: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:37b0793: import org.apache.cassandra.net.MessagingService;
1:7d6c876: import org.apache.cassandra.schema.SchemaKeyspace;
1:37b0793: import org.apache.cassandra.service.MigrationManager;
1:37b0793: 
2:37b0793: /**
1:6bbb13b:  * Sends it's current schema state in form of mutations in reply to the remote node's request.
1:37b0793:  * Such a request is made when one of the nodes, by means of Gossip, detects schema disagreement in the ring.
1:37b0793:  */
1:37b0793: public class MigrationRequestVerbHandler implements IVerbHandler
3:37b0793: {
1:37b0793:     private static final Logger logger = LoggerFactory.getLogger(MigrationRequestVerbHandler.class);
1:8eca4ad: 
1:1936648:     public void doVerb(MessageIn message, int id)
1:37b0793:     {
1:4a849ef:         logger.trace("Received migration request from {}.", message.from);
1:6bbb13b:         MessageOut<Collection<Mutation>> response = new MessageOut<>(MessagingService.Verb.INTERNAL_RESPONSE,
1:7d6c876:                                                                      SchemaKeyspace.convertSchemaToMutations(),
1:6bbb13b:                                                                      MigrationManager.MigrationsSerializer.instance);
1:a06be23:         MessagingService.instance().sendReply(response, id, message.from);
3:37b0793:     }
1:37b0793: }
============================================================================
author:blerer
-------------------------------------------------------------------------------
commit:aa60cde
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Received migration request from {}.", message.from);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:7d6c876
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.SchemaKeyspace;
/////////////////////////////////////////////////////////////////////////
1:                                                                      SchemaKeyspace.convertSchemaToMutations(),
commit:3e9d345
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.schema.LegacySchemaTables;
/////////////////////////////////////////////////////////////////////////
0:                                                                      LegacySchemaTables.convertSchemaToMutations(),
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1:  * Sends it's current schema state in form of mutations in reply to the remote node's request.
/////////////////////////////////////////////////////////////////////////
1:         MessageOut<Collection<Mutation>> response = new MessageOut<>(MessagingService.Verb.INTERNAL_RESPONSE,
0:                                                                      SystemKeyspace.serializeSchema(),
1:                                                                      MigrationManager.MigrationsSerializer.instance);
commit:25c9293
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:         Collection<RowMutation> schema = SystemKeyspace.serializeSchema();
commit:346ac0c
commit:8eca4ad
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (message.version < MessagingService.VERSION_12)
0:             logger.debug("Returning empty response to the migration request from {} (version < 1.2).", message.from);
1: 
0:         Collection<RowMutation> schema = message.version < MessagingService.VERSION_12
0:                                          ? Collections.EMPTY_SET
0:                                          : SystemTable.serializeSchema();
1: 
0:                                                                                                schema,
author:Dave Brosius
-------------------------------------------------------------------------------
commit:997ab95
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
0:         Collection<RowMutation> schema = SystemTable.serializeSchema();
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn message, int id)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0:         logger.debug("Received migration request from {}.", message.from);
1:         MessagingService.instance().sendReply(response, id, message.from);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         MessageOut<Collection<RowMutation>> response = new MessageOut<Collection<RowMutation>>(MessagingService.Verb.INTERNAL_RESPONSE,
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:         MessageOut<Collection<RowMutation>> response = new MessageOut<Collection<RowMutation>>(StorageService.Verb.INTERNAL_RESPONSE,
0:                                                                                                SystemTable.serializeSchema(),
0:                                                                                                MigrationManager.MigrationsSerializer.instance);
0:         MessagingService.instance().sendReply(response, id, message.getFrom());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:37b0793
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
0: import java.io.IOError;
0: import java.io.IOException;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.service.MigrationManager;
1: 
1: /**
0:  * Sends it's current schema state in form of row mutations in reply to the remote node's request.
1:  * Such a request is made when one of the nodes, by means of Gossip, detects schema disagreement in the ring.
1:  */
1: public class MigrationRequestVerbHandler implements IVerbHandler
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(MigrationRequestVerbHandler.class);
1: 
0:     public void doVerb(Message message, String id)
1:     {
0:         logger.debug("Received migration request from {}.", message.getFrom());
1: 
0:         try
1:         {
0:             Message response = message.getInternalReply(MigrationManager.serializeSchema(SystemTable.serializeSchema(), message.getVersion()), message.getVersion());
0:             MessagingService.instance().sendReply(response, id, message.getFrom());
1:         }
0:         catch (IOException e)
1:         {
0:             throw new IOError(e);
1:         }
1:     }
1: }
============================================================================