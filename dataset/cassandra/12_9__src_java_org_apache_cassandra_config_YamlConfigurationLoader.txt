1:2575275: /*
1:2575275:  * Licensed to the Apache Software Foundation (ASF) under one
1:2575275:  * or more contributor license agreements.  See the NOTICE file
1:2575275:  * distributed with this work for additional information
1:2575275:  * regarding copyright ownership.  The ASF licenses this file
1:2575275:  * to you under the Apache License, Version 2.0 (the
1:2575275:  * "License"); you may not use this file except in compliance
1:2575275:  * with the License.  You may obtain a copy of the License at
1:2575275:  *
1:2575275:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2575275:  *
1:2575275:  * Unless required by applicable law or agreed to in writing, software
1:2575275:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2575275:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2575275:  * See the License for the specific language governing permissions and
1:2575275:  * limitations under the License.
1:2575275:  */
1:2575275: package org.apache.cassandra.config;
1:2575275: 
1:31f6ec1: import java.beans.IntrospectionException;
1:3834a85: import java.io.ByteArrayInputStream;
1:756c85e: import java.io.File;
1:2575275: import java.io.IOException;
1:ee4bada: import java.io.InputStream;
1:2575275: import java.net.URL;
1:31f6ec1: import java.util.HashSet;
1:ee4bada: 
1:e89d548: import java.util.List;
1:3834a85: import java.util.Map;
1:31f6ec1: import java.util.Set;
1:2575275: 
1:e89d548: import com.google.common.collect.Lists;
1:e89d548: import com.google.common.collect.Maps;
1:e89d548: import com.google.common.collect.Sets;
1:3834a85: import com.google.common.io.ByteStreams;
1:ee4bada: 
1:ee4bada: import org.apache.commons.lang3.SystemUtils;
1:ee4bada: 
1:2575275: import org.slf4j.Logger;
1:2575275: import org.slf4j.LoggerFactory;
1:2575275: 
1:2575275: import org.apache.cassandra.exceptions.ConfigurationException;
1:2575275: import org.yaml.snakeyaml.TypeDescription;
1:2575275: import org.yaml.snakeyaml.Yaml;
1:e89d548: import org.yaml.snakeyaml.constructor.Constructor;
1:2575275: import org.yaml.snakeyaml.error.YAMLException;
1:31f6ec1: import org.yaml.snakeyaml.introspector.MissingProperty;
1:31f6ec1: import org.yaml.snakeyaml.introspector.Property;
1:31f6ec1: import org.yaml.snakeyaml.introspector.PropertyUtils;
1:2575275: 
1:2575275: public class YamlConfigurationLoader implements ConfigurationLoader
1:2575275: {
1:2575275:     private static final Logger logger = LoggerFactory.getLogger(YamlConfigurationLoader.class);
1:2575275: 
1:2575275:     private final static String DEFAULT_CONFIGURATION = "cassandra.yaml";
1:2575275: 
1:2575275:     /**
1:2575275:      * Inspect the classpath to find storage configuration file
1:2575275:      */
1:de420e5:     private static URL getStorageConfigURL() throws ConfigurationException
1:2575275:     {
1:2575275:         String configUrl = System.getProperty("cassandra.config");
1:2575275:         if (configUrl == null)
1:2575275:             configUrl = DEFAULT_CONFIGURATION;
1:2575275: 
1:2575275:         URL url;
2:2575275:         try
1:2575275:         {
1:2575275:             url = new URL(configUrl);
1:2575275:             url.openStream().close(); // catches well-formed but bogus URLs
1:2575275:         }
1:2575275:         catch (Exception e)
1:2575275:         {
1:2575275:             ClassLoader loader = DatabaseDescriptor.class.getClassLoader();
1:2575275:             url = loader.getResource(configUrl);
1:2575275:             if (url == null)
1:2575275:             {
1:756c85e:                 String required = "file:" + File.separator + File.separator;
1:756c85e:                 if (!configUrl.startsWith(required))
1:a991b64:                     throw new ConfigurationException(String.format(
1:a991b64:                         "Expecting URI in variable: [cassandra.config]. Found[%s]. Please prefix the file with [%s%s] for local " +
1:a991b64:                         "files and [%s<server>%s] for remote files. If you are executing this from an external tool, it needs " +
1:a991b64:                         "to set Config.setClientMode(true) to avoid loading configuration.",
1:a991b64:                         configUrl, required, File.separator, required, File.separator));
1:756c85e:                 throw new ConfigurationException("Cannot locate " + configUrl + ".  If this is a local file, please confirm you've provided " + required + File.separator + " as a URI prefix.");
1:2575275:             }
1:563cea1:         }
1:dfd78d0: 
1:de420e5:         logger.info("Configuration location: {}", url);
1:de420e5: 
1:2575275:         return url;
1:2575275:     }
1:de420e5: 
1:9797511:     private static URL storageConfigURL;
1:2575275: 
1:0ce9abd:     @Override
1:2575275:     public Config loadConfig() throws ConfigurationException
1:2575275:     {
1:9797511:         if (storageConfigURL == null)
1:9797511:             storageConfigURL = getStorageConfigURL();
1:de420e5:         return loadConfig(storageConfigURL);
1:2575275:     }
1:2575275: 
1:563cea1:     public Config loadConfig(URL url) throws ConfigurationException
1:2575275:     {
1:2575275:         try
1:563cea1:         {
1:de420e5:             logger.debug("Loading settings from {}", url);
1:3834a85:             byte[] configBytes;
1:3834a85:             try (InputStream is = url.openStream())
1:756c85e:             {
1:3834a85:                 configBytes = ByteStreams.toByteArray(is);
1:756c85e:             }
1:2575275:             catch (IOException e)
1:2575275:             {
1:2575275:                 // getStorageConfigURL should have ruled this out
1:2575275:                 throw new AssertionError(e);
1:2575275:             }
1:2575275: 
1:e89d548:             Constructor constructor = new CustomConstructor(Config.class);
1:ee4bada:             PropertiesChecker propertiesChecker = new PropertiesChecker();
1:31f6ec1:             constructor.setPropertyUtils(propertiesChecker);
1:19ad1ca:             Yaml yaml = new Yaml(constructor);
1:ee4bada:             Config result = loadConfig(yaml, configBytes);
1:31f6ec1:             propertiesChecker.check();
1:31f6ec1:             return result;
1:2575275:         }
1:2575275:         catch (YAMLException e)
1:498ee24:         {
1:ee4bada:             throw new ConfigurationException("Invalid yaml: " + url + SystemUtils.LINE_SEPARATOR
1:ee4bada:                                              +  " Error: " + e.getMessage(), false);
1:498ee24:         }
1:498ee24:     }
1:89cdfd8: 
1:e89d548:     static class CustomConstructor extends Constructor
1:e89d548:     {
1:e89d548:         CustomConstructor(Class<?> theRoot)
1:e89d548:         {
1:e89d548:             super(theRoot);
1:e89d548: 
1:e89d548:             TypeDescription seedDesc = new TypeDescription(ParameterizedClass.class);
1:e89d548:             seedDesc.putMapPropertyType("parameters", String.class, String.class);
1:e89d548:             addTypeDescription(seedDesc);
1:e89d548:         }
1:e89d548: 
1:e89d548:         @Override
1:e89d548:         protected List<Object> createDefaultList(int initSize)
1:e89d548:         {
1:e89d548:             return Lists.newCopyOnWriteArrayList();
1:e89d548:         }
1:e89d548: 
1:e89d548:         @Override
1:e89d548:         protected Map<Object, Object> createDefaultMap()
1:e89d548:         {
1:e89d548:             return Maps.newConcurrentMap();
1:e89d548:         }
1:e89d548: 
1:e89d548:         @Override
1:e89d548:         protected Set<Object> createDefaultSet(int initSize)
1:e89d548:         {
1:e89d548:             return Sets.newConcurrentHashSet();
1:e89d548:         }
1:e89d548: 
1:e89d548:         @Override
1:e89d548:         protected Set<Object> createDefaultSet()
1:e89d548:         {
1:e89d548:             return Sets.newConcurrentHashSet();
1:e89d548:         }
1:e89d548:     }
1:e89d548: 
1:ee4bada:     private Config loadConfig(Yaml yaml, byte[] configBytes)
1:ee4bada:     {
1:ee4bada:         Config config = yaml.loadAs(new ByteArrayInputStream(configBytes), Config.class);
1:ee4bada:         // If the configuration file is empty yaml will return null. In this case we should use the default
1:ee4bada:         // configuration to avoid hitting a NPE at a later stage.
1:ee4bada:         return config == null ? new Config() : config;
1:ee4bada:     }
1:ee4bada: 
1:ee4bada:     /**
1:ee4bada:      * Utility class to check that there are no extra properties and that properties that are not null by default
1:ee4bada:      * are not set to null.
1:ee4bada:      */
1:ee4bada:     private static class PropertiesChecker extends PropertyUtils
1:2575275:     {
1:31f6ec1:         private final Set<String> missingProperties = new HashSet<>();
1:89cdfd8: 
1:ee4bada:         private final Set<String> nullProperties = new HashSet<>();
1:ee4bada: 
1:ee4bada:         public PropertiesChecker()
1:498ee24:         {
1:31f6ec1:             setSkipMissingProperties(true);
1:2575275:         }
1:89cdfd8: 
1:31f6ec1:         @Override
1:31f6ec1:         public Property getProperty(Class<? extends Object> type, String name) throws IntrospectionException
1:3834a85:         {
1:ee4bada:             final Property result = super.getProperty(type, name);
1:ee4bada: 
1:31f6ec1:             if (result instanceof MissingProperty)
1:3834a85:             {
1:31f6ec1:                 missingProperties.add(result.getName());
1:2575275:             }
1:ee4bada: 
1:ee4bada:             return new Property(result.getName(), result.getType())
1:ee4bada:             {
1:ee4bada:                 @Override
1:ee4bada:                 public void set(Object object, Object value) throws Exception
1:ee4bada:                 {
1:ee4bada:                     if (value == null && get(object) != null)
1:ee4bada:                     {
1:ee4bada:                         nullProperties.add(getName());
1:ee4bada:                     }
1:ee4bada:                     result.set(object, value);
1:ee4bada:                 }
1:ee4bada: 
1:ee4bada:                 @Override
1:ee4bada:                 public Class<?>[] getActualTypeArguments()
1:ee4bada:                 {
1:ee4bada:                     return result.getActualTypeArguments();
1:ee4bada:                 }
1:ee4bada: 
1:ee4bada:                 @Override
1:ee4bada:                 public Object get(Object object)
1:ee4bada:                 {
1:ee4bada:                     return result.get(object);
1:ee4bada:                 }
1:ee4bada:             };
1:2575275:         }
1:89cdfd8: 
1:31f6ec1:         public void check() throws ConfigurationException
5:31f6ec1:         {
1:ee4bada:             if (!nullProperties.isEmpty())
1:ee4bada:             {
1:ee4bada:                 throw new ConfigurationException("Invalid yaml. Those properties " + nullProperties + " are not valid", false);
1:ee4bada:             }
1:ee4bada: 
1:89cdfd8:             if (!missingProperties.isEmpty())
1:31f6ec1:             {
1:ee4bada:                 throw new ConfigurationException("Invalid yaml. Please remove properties " + missingProperties + " from your cassandra.yaml", false);
1:3834a85:             }
1:3834a85:         }
5:31f6ec1:     }
1:31f6ec1: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:     private static URL storageConfigURL;
1:         if (storageConfigURL == null)
1:             storageConfigURL = getStorageConfigURL();
commit:de420e5
/////////////////////////////////////////////////////////////////////////
1:     private static URL getStorageConfigURL() throws ConfigurationException
/////////////////////////////////////////////////////////////////////////
1:         logger.info("Configuration location: {}", url);
1: 
0:     private static final URL storageConfigURL = getStorageConfigURL();
1: 
1:         return loadConfig(storageConfigURL);
1:             logger.debug("Loading settings from {}", url);
commit:dfd78d0
/////////////////////////////////////////////////////////////////////////
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:ee4bada
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.commons.lang3.SystemUtils;
1: 
/////////////////////////////////////////////////////////////////////////
1:             PropertiesChecker propertiesChecker = new PropertiesChecker();
1:             Config result = loadConfig(yaml, configBytes);
1:             throw new ConfigurationException("Invalid yaml: " + url + SystemUtils.LINE_SEPARATOR
1:                                              +  " Error: " + e.getMessage(), false);
/////////////////////////////////////////////////////////////////////////
1:     private Config loadConfig(Yaml yaml, byte[] configBytes)
1:     {
1:         Config config = yaml.loadAs(new ByteArrayInputStream(configBytes), Config.class);
1:         // If the configuration file is empty yaml will return null. In this case we should use the default
1:         // configuration to avoid hitting a NPE at a later stage.
1:         return config == null ? new Config() : config;
1:     }
1: 
1:     /**
1:      * Utility class to check that there are no extra properties and that properties that are not null by default
1:      * are not set to null.
1:      */
1:     private static class PropertiesChecker extends PropertyUtils
1:         private final Set<String> nullProperties = new HashSet<>();
1: 
1:         public PropertiesChecker()
/////////////////////////////////////////////////////////////////////////
1:             final Property result = super.getProperty(type, name);
1: 
1: 
1:             return new Property(result.getName(), result.getType())
1:             {
1:                 @Override
1:                 public void set(Object object, Object value) throws Exception
1:                 {
1:                     if (value == null && get(object) != null)
1:                     {
1:                         nullProperties.add(getName());
1:                     }
1:                     result.set(object, value);
1:                 }
1: 
1:                 @Override
1:                 public Class<?>[] getActualTypeArguments()
1:                 {
1:                     return result.getActualTypeArguments();
1:                 }
1: 
1:                 @Override
1:                 public Object get(Object object)
1:                 {
1:                     return result.get(object);
1:                 }
1:             };
1:             if (!nullProperties.isEmpty())
1:             {
1:                 throw new ConfigurationException("Invalid yaml. Those properties " + nullProperties + " are not valid", false);
1:             }
1: 
1:                 throw new ConfigurationException("Invalid yaml. Please remove properties " + missingProperties + " from your cassandra.yaml", false);
author:Jason Brown
-------------------------------------------------------------------------------
commit:2d420e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:621f446
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e89d548
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Maps;
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1: import org.yaml.snakeyaml.constructor.Constructor;
/////////////////////////////////////////////////////////////////////////
1:             Constructor constructor = new CustomConstructor(Config.class);
/////////////////////////////////////////////////////////////////////////
1:     static class CustomConstructor extends Constructor
1:     {
1:         CustomConstructor(Class<?> theRoot)
1:         {
1:             super(theRoot);
1: 
1:             TypeDescription seedDesc = new TypeDescription(ParameterizedClass.class);
1:             seedDesc.putMapPropertyType("parameters", String.class, String.class);
1:             addTypeDescription(seedDesc);
1:         }
1: 
1:         @Override
1:         protected List<Object> createDefaultList(int initSize)
1:         {
1:             return Lists.newCopyOnWriteArrayList();
1:         }
1: 
1:         @Override
1:         protected Map<Object, Object> createDefaultMap()
1:         {
1:             return Maps.newConcurrentMap();
1:         }
1: 
1:         @Override
1:         protected Set<Object> createDefaultSet(int initSize)
1:         {
1:             return Sets.newConcurrentHashSet();
1:         }
1: 
1:         @Override
1:         protected Set<Object> createDefaultSet()
1:         {
1:             return Sets.newConcurrentHashSet();
1:         }
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:                     throw new ConfigurationException(String.format(
1:                         "Expecting URI in variable: [cassandra.config]. Found[%s]. Please prefix the file with [%s%s] for local " +
1:                         "files and [%s<server>%s] for remote files. If you are executing this from an external tool, it needs " +
1:                         "to set Config.setClientMode(true) to avoid loading configuration.",
1:                         configUrl, required, File.separator, required, File.separator));
commit:2575275
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.config;
1: 
1: import java.io.IOException;
0: import java.io.InputStream;
1: import java.net.URL;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: 
0: import org.yaml.snakeyaml.Loader;
1: import org.yaml.snakeyaml.TypeDescription;
1: import org.yaml.snakeyaml.Yaml;
1: import org.yaml.snakeyaml.error.YAMLException;
1: 
1: public class YamlConfigurationLoader implements ConfigurationLoader
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(YamlConfigurationLoader.class);
1: 
1:     private final static String DEFAULT_CONFIGURATION = "cassandra.yaml";
1: 
1:     /**
1:      * Inspect the classpath to find storage configuration file
1:      */
0:     private URL getStorageConfigURL() throws ConfigurationException
1:     {
1:         String configUrl = System.getProperty("cassandra.config");
1:         if (configUrl == null)
1:             configUrl = DEFAULT_CONFIGURATION;
1: 
1:         URL url;
1:         try
1:         {
1:             url = new URL(configUrl);
1:             url.openStream().close(); // catches well-formed but bogus URLs
1:         }
1:         catch (Exception e)
1:         {
1:             ClassLoader loader = DatabaseDescriptor.class.getClassLoader();
1:             url = loader.getResource(configUrl);
1:             if (url == null)
0:                 throw new ConfigurationException("Cannot locate " + configUrl);
1:         }
1: 
1:         return url;
1:     }
1: 
1:     public Config loadConfig() throws ConfigurationException
1:     {
1:         try
1:         {
0:             URL url = getStorageConfigURL();
0:             logger.info("Loading settings from " + url);
0:             InputStream input;
1:             try
1:             {
0:                 input = url.openStream();
1:             }
1:             catch (IOException e)
1:             {
1:                 // getStorageConfigURL should have ruled this out
1:                 throw new AssertionError(e);
1:             }
0:             org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(Config.class);
0:             TypeDescription seedDesc = new TypeDescription(SeedProviderDef.class);
0:             seedDesc.putMapPropertyType("parameters", String.class, String.class);
0:             constructor.addTypeDescription(seedDesc);
0:             Yaml yaml = new Yaml(new Loader(constructor));
0:             return (Config)yaml.load(input);
1:         }
1:         catch (YAMLException e)
1:         {
0:             throw new ConfigurationException("Invalid yaml", e);
1:         }
1:     }
1: }
author:blambov
-------------------------------------------------------------------------------
commit:8a03181
/////////////////////////////////////////////////////////////////////////
0:             TypeDescription seedDesc = new TypeDescription(ParameterizedClass.class);
commit:44f8254
/////////////////////////////////////////////////////////////////////////
0:             TypeDescription seedDesc = new TypeDescription(ParametrizedClass.class);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:69f794a
/////////////////////////////////////////////////////////////////////////
0:             throw new ConfigurationException("Invalid yaml: " + url, e);
commit:0ce9abd
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:b74c2ad
/////////////////////////////////////////////////////////////////////////
0:         logger.info("Node configuration:[{}]", Joiner.on("; ").join(configMap.entrySet()));
commit:ed4d455
/////////////////////////////////////////////////////////////////////////
commit:19ad1ca
/////////////////////////////////////////////////////////////////////////
1:             Yaml yaml = new Yaml(constructor);
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:8d570fa
commit:89cdfd8
/////////////////////////////////////////////////////////////////////////
0:     static URL getStorageConfigURL() throws ConfigurationException
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static class MissingPropertiesChecker extends PropertyUtils
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
1:             if (!missingProperties.isEmpty())
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a64f414
commit:022e3ee
/////////////////////////////////////////////////////////////////////////
0:                             " for local files or " + required + "<server>" + File.separator + " for remote files. Aborting. If you are executing this from an external tool, it needs to set Config.setClientMode(true) to avoid loading configuration.");
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:ff88f23
commit:de5bb58
commit:563cea1
/////////////////////////////////////////////////////////////////////////
0:         return loadConfig(getStorageConfigURL());
1:     }
0: 
1:     public Config loadConfig(URL url) throws ConfigurationException
1:     {
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:32358d6
commit:756c85e
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:             {
1:                 String required = "file:" + File.separator + File.separator;
1:                 if (!configUrl.startsWith(required))
0:                     throw new ConfigurationException("Expecting URI in variable: [cassandra.config].  Please prefix the file with " + required + File.separator +
0:                             " for local files or " + required + "<server>" + File.separator + " for remote files.  Aborting.");
1:                 throw new ConfigurationException("Cannot locate " + configUrl + ".  If this is a local file, please confirm you've provided " + required + File.separator + " as a URI prefix.");
1:             }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:6921af2
commit:2420cb4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ba83acd
commit:498ee24
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:     private static final String FILE_PREFIX = "file:///";
/////////////////////////////////////////////////////////////////////////
1:         {
1:         }
0:         else if (!FBUtilities.isUnix() && !configUrl.startsWith(FILE_PREFIX))
1:         {
0:             String format = "Non-unix environment detected, %s prefix not supplied at the beginning of file path but is required. Changing path to %s";
0:             configUrl = FILE_PREFIX + configUrl;
0:             logger.warn(String.format(format, FILE_PREFIX, configUrl));
1:         }
commit:f628bd8
commit:500c62d
/////////////////////////////////////////////////////////////////////////
0:             result.configHintedHandoff();
commit:ee020c9
/////////////////////////////////////////////////////////////////////////
commit:f64b31c
/////////////////////////////////////////////////////////////////////////
0:             result.configHintedHandoff();
commit:3834a85
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
0: import java.io.IOException;
1: import java.util.Map;
0: import java.util.TreeMap;
0: import com.google.common.base.Joiner;
1: import com.google.common.io.ByteStreams;
0: 
/////////////////////////////////////////////////////////////////////////
1:             byte[] configBytes;
1:             try (InputStream is = url.openStream())
1:                 configBytes = ByteStreams.toByteArray(is);
0:             
0:             logConfig(configBytes);
0:             
/////////////////////////////////////////////////////////////////////////
0:             Config result = yaml.loadAs(new ByteArrayInputStream(configBytes), Config.class);
/////////////////////////////////////////////////////////////////////////
1:     }
0: 
0:     private void logConfig(byte[] configBytes)
1:     {
0:         Map<Object, Object> configMap = new TreeMap<>((Map<?, ?>) new Yaml().load(new ByteArrayInputStream(configBytes)));
0:         // these keys contain passwords, don't log them
0:         for (String sensitiveKey : new String[] { "client_encryption_options", "server_encryption_options" })
0:             if (configMap.containsKey(sensitiveKey))
1:             {
0:                 configMap.put(sensitiveKey, "<REDACTED>");
1:             }
0:         logger.info("Node configuration:[" + Joiner.on("; ").join(configMap.entrySet()) + "]");
commit:31f6ec1
/////////////////////////////////////////////////////////////////////////
1: import java.beans.IntrospectionException;
1: import java.util.HashSet;
1: import java.util.Set;
1: import org.yaml.snakeyaml.introspector.MissingProperty;
1: import org.yaml.snakeyaml.introspector.Property;
1: import org.yaml.snakeyaml.introspector.PropertyUtils;
/////////////////////////////////////////////////////////////////////////
0:             MissingPropertiesChecker propertiesChecker = new MissingPropertiesChecker();
1:             constructor.setPropertyUtils(propertiesChecker);
0:             Config result = yaml.loadAs(input, Config.class);
1:             propertiesChecker.check();
1:             return result;
/////////////////////////////////////////////////////////////////////////
0:     
0:     private static class MissingPropertiesChecker extends PropertyUtils 
1:     {
1:         private final Set<String> missingProperties = new HashSet<>();
0:         
0:         public MissingPropertiesChecker()
1:         {
1:             setSkipMissingProperties(true);
1:         }
0:         
1:         @Override
1:         public Property getProperty(Class<? extends Object> type, String name) throws IntrospectionException
1:         {
0:             Property result = super.getProperty(type, name);
1:             if (result instanceof MissingProperty)
1:             {
1:                 missingProperties.add(result.getName());
1:             }
0:             return result;
1:         }
0:         
1:         public void check() throws ConfigurationException
1:         {
0:             if (!missingProperties.isEmpty()) 
1:             {
0:                 throw new ConfigurationException("Invalid yaml. Please remove properties " + missingProperties + " from your cassandra.yaml");
1:             }
1:         }
1:     }
commit:6f467d9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
0:         InputStream input = null;
0:             logger.info("Loading settings from {}", url);
/////////////////////////////////////////////////////////////////////////
0:         finally
0:         {
0:             FileUtils.closeQuietly(input);
0:         }
============================================================================