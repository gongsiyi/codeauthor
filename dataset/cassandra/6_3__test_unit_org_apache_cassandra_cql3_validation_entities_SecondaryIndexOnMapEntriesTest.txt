1:3f55c35: /*
1:3f55c35:  * Licensed to the Apache Software Foundation (ASF) under one
1:3f55c35:  * or more contributor license agreements.  See the NOTICE file
1:3f55c35:  * distributed with this work for additional information
1:3f55c35:  * regarding copyright ownership.  The ASF licenses this file
1:3f55c35:  * to you under the Apache License, Version 2.0 (the
1:3f55c35:  * "License"); you may not use this file except in compliance
1:3f55c35:  * with the License.  You may obtain a copy of the License at
1:3f55c35:  *
1:3f55c35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3f55c35:  *
1:3f55c35:  * Unless required by applicable law or agreed to in writing, software
1:3f55c35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f55c35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f55c35:  * See the License for the specific language governing permissions and
1:3f55c35:  * limitations under the License.
1:3f55c35:  */
1:01115f7: package org.apache.cassandra.cql3.validation.entities;
1:3f55c35: 
1:01115f7: import org.apache.cassandra.config.DatabaseDescriptor;
1:01115f7: import org.apache.cassandra.cql3.UntypedResultSet;
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:3f55c35: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3f55c35: import org.apache.commons.lang3.StringUtils;
1:01115f7: import org.junit.BeforeClass;
1:3f55c35: import org.junit.Test;
1:3f55c35: 
1:3f55c35: import java.util.ArrayList;
1:3f55c35: import java.util.List;
1:3f55c35: import java.util.Map;
1:3f55c35: 
1:3f55c35: import static org.junit.Assert.assertTrue;
1:3f55c35: import static org.junit.Assert.fail;
1:3f55c35: 
1:3f55c35: public class SecondaryIndexOnMapEntriesTest extends CQLTester
1:3f55c35: {
1:01115f7:     @BeforeClass
1:01115f7:     public static void setUp()
1:01115f7:     {
1:0a08525:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:01115f7:     }
1:01115f7: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldNotCreateIndexOnFrozenMaps() throws Throwable
1:3f55c35:     {
1:3f55c35:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v FROZEN<MAP<TEXT, TEXT>>)");
1:3f55c35:         assertIndexInvalidForColumn("v");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldNotCreateIndexOnNonMapTypes() throws Throwable
1:3f55c35:     {
1:3f55c35:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, i INT, t TEXT, b BLOB, s SET<TEXT>, l LIST<TEXT>, tu TUPLE<TEXT>)");
1:3f55c35:         assertIndexInvalidForColumn("i");
1:3f55c35:         assertIndexInvalidForColumn("t");
1:3f55c35:         assertIndexInvalidForColumn("b");
1:3f55c35:         assertIndexInvalidForColumn("s");
1:3f55c35:         assertIndexInvalidForColumn("l");
1:3f55c35:         assertIndexInvalidForColumn("tu");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldValidateMapKeyAndValueTypes() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35: 
1:3f55c35:         String query = "SELECT * FROM %s WHERE v[?] = ?";
1:3f55c35:         Object validKey = "valid key";
1:3f55c35:         Object invalidKey = 31415;
1:3f55c35:         Object validValue = 31415;
1:3f55c35:         Object invalidValue = "invalid value";
1:3f55c35:         assertInvalid(query, invalidKey, invalidValue);
1:3f55c35:         assertInvalid(query, invalidKey, validValue);
1:3f55c35:         assertInvalid(query, validKey, invalidValue);
1:3f55c35:         assertReturnsNoRows(query, validKey, validValue);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldFindRowsMatchingSingleEqualityRestriction() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35:         Object[] foo = insertIntoSimpleTable("foo", map("a", 1,
1:3f55c35:                                                         "c", 3));
1:3f55c35:         Object[] bar = insertIntoSimpleTable("bar", map("a", 1,
1:3f55c35:                                                         "b", 2));
1:3f55c35:         Object[] baz = insertIntoSimpleTable("baz", map("b", 2,
1:3f55c35:                                                         "c", 5,
1:3f55c35:                                                         "d", 4));
1:3f55c35:         Object[] qux = insertIntoSimpleTable("qux", map("b", 2,
1:3f55c35:                                                         "d", 4));
1:3f55c35: 
1:3f55c35:         assertRowsForConditions(entry("a", 1), bar, foo);
1:3f55c35:         assertRowsForConditions(entry("b", 2), bar, baz, qux);
1:3f55c35:         assertRowsForConditions(entry("c", 3), foo);
1:3f55c35:         assertRowsForConditions(entry("c", 5), baz);
1:3f55c35:         assertRowsForConditions(entry("d", 4), baz, qux);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testRequireFilteringDirectiveIfMultipleRestrictionsSpecified() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35:         String baseQuery = "SELECT * FROM %s WHERE v['foo'] = 31415 AND v['baz'] = 31416";
1:3f55c35:         assertInvalid(baseQuery);
1:3f55c35:         assertReturnsNoRows(baseQuery + " ALLOW FILTERING");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldFindRowsMatchingMultipleEqualityRestrictions() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35: 
1:3f55c35:         Object[] foo = insertIntoSimpleTable("foo", map("k1", 1));
1:3f55c35:         Object[] bar = insertIntoSimpleTable("bar", map("k1", 1,
1:3f55c35:                                                         "k2", 2));
1:3f55c35:         Object[] baz = insertIntoSimpleTable("baz", map("k2", 2,
1:3f55c35:                                                         "k3", 3));
1:3f55c35:         Object[] qux = insertIntoSimpleTable("qux", map("k2", 2,
1:3f55c35:                                                         "k3", 3,
1:3f55c35:                                                         "k4", 4));
1:3f55c35: 
1:3f55c35:         assertRowsForConditions(entry("k1", 1),
1:3f55c35:                                 bar, foo);
1:3f55c35:         assertRowsForConditions(entry("k1", 1).entry("k2", 2),
1:3f55c35:                                 bar);
1:3f55c35:         assertNoRowsForConditions(entry("k1", 1).entry("k2", 2).entry("k3", 3));
1:3f55c35:         assertRowsForConditions(entry("k2", 2).entry("k3", 3),
1:3f55c35:                                 baz, qux);
1:3f55c35:         assertRowsForConditions(entry("k2", 2).entry("k3", 3).entry("k4", 4),
1:3f55c35:                                 qux);
1:3f55c35:         assertRowsForConditions(entry("k3", 3).entry("k4", 4),
1:3f55c35:                                 qux);
1:3f55c35:         assertNoRowsForConditions(entry("k3", 3).entry("k4", 4).entry("k5", 5));
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldFindRowsMatchingEqualityAndContainsRestrictions() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35: 
1:3f55c35:         Object[] foo = insertIntoSimpleTable("foo", map("common", 31415,
1:3f55c35:                                                         "k1", 1,
1:3f55c35:                                                         "k2", 2,
1:3f55c35:                                                         "k3", 3));
1:3f55c35:         Object[] bar = insertIntoSimpleTable("bar", map("common", 31415,
1:3f55c35:                                                         "k3", 3,
1:3f55c35:                                                         "k4", 4,
1:3f55c35:                                                         "k5", 5));
1:3f55c35:         Object[] baz = insertIntoSimpleTable("baz", map("common", 31415,
1:3f55c35:                                                         "k5", 5,
1:3f55c35:                                                         "k6", 6,
1:3f55c35:                                                         "k7", 7));
1:3f55c35: 
1:3f55c35:         assertRowsForConditions(entry("common", 31415),
1:3f55c35:                                 bar, baz, foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k1"),
1:3f55c35:                                 foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k2"),
1:3f55c35:                                 foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k3"),
1:3f55c35:                                 bar, foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k3").value(2),
1:3f55c35:                                 foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k3").value(3),
1:3f55c35:                                 bar, foo);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k3").value(4),
1:3f55c35:                                 bar);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k3").key("k5"),
1:3f55c35:                                 bar);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k5"),
1:3f55c35:                                 bar, baz);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k5").value(4),
1:3f55c35:                                 bar);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k5").value(5),
1:3f55c35:                                 bar, baz);
1:3f55c35:         assertRowsForConditions(entry("common", 31415).key("k5").value(6),
1:3f55c35:                                 baz);
1:3f55c35:         assertNoRowsForConditions(entry("common", 31415).key("k5").value(8));
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldNotAcceptUnsupportedRelationsOnEntries() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35:         assertInvalidRelation("< 31415");
1:3f55c35:         assertInvalidRelation("<= 31415");
1:3f55c35:         assertInvalidRelation("> 31415");
1:3f55c35:         assertInvalidRelation(">= 31415");
1:3f55c35:         assertInvalidRelation("IN (31415, 31416, 31417)");
1:3f55c35:         assertInvalidRelation("CONTAINS 31415");
1:3f55c35:         assertInvalidRelation("CONTAINS KEY 'foo'");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldRecognizeAlteredOrDeletedMapEntries() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35:         Object[] foo = insertIntoSimpleTable("foo", map("common", 31415,
1:3f55c35:                                                         "target", 8192));
1:3f55c35:         Object[] bar = insertIntoSimpleTable("bar", map("common", 31415,
1:3f55c35:                                                         "target", 8192));
1:3f55c35:         Object[] baz = insertIntoSimpleTable("baz", map("common", 31415,
1:3f55c35:                                                         "target", 8192));
1:3f55c35: 
1:3f55c35:         assertRowsForConditions(entry("target", 8192),
1:3f55c35:                                 bar, baz, foo);
1:3f55c35:         baz = updateMapInSimpleTable(baz, "target", 4096);
1:3f55c35:         assertRowsForConditions(entry("target", 8192),
1:3f55c35:                                 bar, foo);
1:3f55c35:         bar = updateMapInSimpleTable(bar, "target", null);
1:3f55c35:         assertRowsForConditions(entry("target", 8192),
1:3f55c35:                                 foo);
1:3f55c35:         execute("DELETE FROM %s WHERE k = 'foo'");
1:3f55c35:         assertNoRowsForConditions(entry("target", 8192));
1:3f55c35:         assertRowsForConditions(entry("common", 31415),
1:3f55c35:                                 bar, baz);
1:3f55c35:         assertRowsForConditions(entry("target", 4096),
1:3f55c35:                                 baz);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldRejectQueriesForNullEntries() throws Throwable
1:3f55c35:     {
1:3f55c35:         createSimpleTableAndIndex();
1:3f55c35:         assertInvalid("SELECT * FROM %s WHERE v['somekey'] = null");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     @Test
1:3f55c35:     public void testShouldTreatQueriesAgainstFrozenMapIndexesAsInvalid() throws Throwable
1:3f55c35:     {
1:3f55c35:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v FROZEN<MAP<TEXT, TEXT>>)");
1:3f55c35:         createIndex("CREATE INDEX ON %s(FULL(V))");
1:3f55c35: 
1:3f55c35:         try
1:3f55c35:         {
1:3f55c35:             execute("SELECT * FROM %s WHERE v['somekey'] = 'somevalue'");
1:3f55c35:             fail("Expected index query to fail");
1:3f55c35:         }
1:3f55c35:         catch (InvalidRequestException e)
1:3f55c35:         {
1:3f55c35:             String expectedMessage = "Map-entry equality predicates on frozen map column v are not supported";
1:3f55c35:             assertTrue("Expected error message to contain '" + expectedMessage + "' but got '" +
1:3f55c35:                        e.getMessage() + "'", e.getMessage().contains(expectedMessage));
1:3f55c35:         }
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void assertIndexInvalidForColumn(String colname) throws Throwable
1:3f55c35:     {
1:3f55c35:         String query = String.format("CREATE INDEX ON %%s(ENTRIES(%s))", colname);
1:3f55c35:         assertInvalid(query);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void assertReturnsNoRows(String query, Object... params) throws Throwable
1:3f55c35:     {
1:3f55c35:         assertRows(execute(query, params));
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void createSimpleTableAndIndex() throws Throwable
1:3f55c35:     {
1:3f55c35:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v MAP<TEXT, INT>)");
1:3f55c35:         createIndex("CREATE INDEX ON %s(ENTRIES(v))");
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private Object[] insertIntoSimpleTable(String key, Object value) throws Throwable
1:3f55c35:     {
1:3f55c35:         String query = "INSERT INTO %s (k, v) VALUES (?, ?)";
1:3f55c35:         execute(query, key, value);
1:3f55c35:         return row(key, value);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void assertRowsForConditions(IndexWhereClause whereClause, Object[]... rows) throws Throwable
1:3f55c35:     {
1:3f55c35:         assertRows(execute("SELECT * FROM %s WHERE " + whereClause.text(), whereClause.params()), rows);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void assertNoRowsForConditions(IndexWhereClause whereClause) throws Throwable
1:3f55c35:     {
1:3f55c35:         assertRowsForConditions(whereClause);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private void assertInvalidRelation(String rel) throws Throwable
1:3f55c35:     {
1:3f55c35:         String query = "SELECT * FROM %s WHERE v " + rel;
1:3f55c35:         assertInvalid(query);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private Object[] updateMapInSimpleTable(Object[] row, String mapKey, Integer mapValue) throws Throwable
1:3f55c35:     {
1:3f55c35:         execute("UPDATE %s SET v[?] = ? WHERE k = ?", mapKey, mapValue, row[0]);
1:3f55c35:         UntypedResultSet rawResults = execute("SELECT * FROM %s WHERE k = ?", row[0]);
1:3f55c35:         Map<Object, Object> value = (Map<Object, Object>)row[1];
1:3f55c35:         if (mapValue == null)
1:3f55c35:         {
1:3f55c35:             value.remove(mapKey);
1:3f55c35:         }
1:3f55c35:         else
1:3f55c35:         {
1:3f55c35:             value.put(mapKey, mapValue);
1:3f55c35:         }
1:3f55c35:         return row;
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private IndexWhereClause entry(Object key, Object value)
1:3f55c35:     {
1:3f55c35:         return (new IndexWhereClause()).entry(key, value);
1:3f55c35:     }
1:3f55c35: 
1:3f55c35:     private static final class IndexWhereClause
1:3f55c35:     {
1:3f55c35:         private final List<String> preds = new ArrayList<>();
1:3f55c35:         private final List<Object> params = new ArrayList<>();
1:3f55c35: 
1:3f55c35:         public IndexWhereClause entry(Object key, Object value)
1:3f55c35:         {
1:3f55c35:             preds.add("v[?] = ?");
1:3f55c35:             params.add(key);
1:3f55c35:             params.add(value);
1:3f55c35:             return this;
1:3f55c35:         }
1:3f55c35: 
1:3f55c35:         public IndexWhereClause key(Object key)
1:3f55c35:         {
1:3f55c35:             preds.add("v CONTAINS KEY ?");
1:3f55c35:             params.add(key);
1:3f55c35:             return this;
1:3f55c35:         }
1:3f55c35: 
1:3f55c35:         public IndexWhereClause value(Object value)
1:3f55c35:         {
1:3f55c35:             preds.add("v CONTAINS ?");
1:3f55c35:             params.add(value);
1:3f55c35:             return this;
1:3f55c35:         }
1:3f55c35: 
1:3f55c35:         public String text()
1:3f55c35:         {
1:3f55c35:             if (preds.size() == 1)
1:3f55c35:                 return preds.get(0);
1:3f55c35:             return StringUtils.join(preds, " AND ") + " ALLOW FILTERING";
1:3f55c35:         }
1:3f55c35: 
1:3f55c35:         public Object[] params()
1:3f55c35:         {
1:3f55c35:             return params.toArray();
1:3f55c35:         }
1:3f55c35:     }
1:3f55c35: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.entities;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.UntypedResultSet;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setUp()
1:     {
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Samuel Klock
-------------------------------------------------------------------------------
commit:3f55c35
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.commons.lang3.StringUtils;
1: import org.junit.Test;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class SecondaryIndexOnMapEntriesTest extends CQLTester
1: {
1:     @Test
1:     public void testShouldNotCreateIndexOnFrozenMaps() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v FROZEN<MAP<TEXT, TEXT>>)");
1:         assertIndexInvalidForColumn("v");
1:     }
1: 
1:     @Test
1:     public void testShouldNotCreateIndexOnNonMapTypes() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, i INT, t TEXT, b BLOB, s SET<TEXT>, l LIST<TEXT>, tu TUPLE<TEXT>)");
1:         assertIndexInvalidForColumn("i");
1:         assertIndexInvalidForColumn("t");
1:         assertIndexInvalidForColumn("b");
1:         assertIndexInvalidForColumn("s");
1:         assertIndexInvalidForColumn("l");
1:         assertIndexInvalidForColumn("tu");
1:     }
1: 
1:     @Test
1:     public void testShouldValidateMapKeyAndValueTypes() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1: 
1:         String query = "SELECT * FROM %s WHERE v[?] = ?";
1:         Object validKey = "valid key";
1:         Object invalidKey = 31415;
1:         Object validValue = 31415;
1:         Object invalidValue = "invalid value";
1:         assertInvalid(query, invalidKey, invalidValue);
1:         assertInvalid(query, invalidKey, validValue);
1:         assertInvalid(query, validKey, invalidValue);
1:         assertReturnsNoRows(query, validKey, validValue);
1:     }
1: 
1:     @Test
1:     public void testShouldFindRowsMatchingSingleEqualityRestriction() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1:         Object[] foo = insertIntoSimpleTable("foo", map("a", 1,
1:                                                         "c", 3));
1:         Object[] bar = insertIntoSimpleTable("bar", map("a", 1,
1:                                                         "b", 2));
1:         Object[] baz = insertIntoSimpleTable("baz", map("b", 2,
1:                                                         "c", 5,
1:                                                         "d", 4));
1:         Object[] qux = insertIntoSimpleTable("qux", map("b", 2,
1:                                                         "d", 4));
1: 
1:         assertRowsForConditions(entry("a", 1), bar, foo);
1:         assertRowsForConditions(entry("b", 2), bar, baz, qux);
1:         assertRowsForConditions(entry("c", 3), foo);
1:         assertRowsForConditions(entry("c", 5), baz);
1:         assertRowsForConditions(entry("d", 4), baz, qux);
1:     }
1: 
1:     @Test
1:     public void testRequireFilteringDirectiveIfMultipleRestrictionsSpecified() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1:         String baseQuery = "SELECT * FROM %s WHERE v['foo'] = 31415 AND v['baz'] = 31416";
1:         assertInvalid(baseQuery);
1:         assertReturnsNoRows(baseQuery + " ALLOW FILTERING");
1:     }
1: 
1:     @Test
1:     public void testShouldFindRowsMatchingMultipleEqualityRestrictions() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1: 
1:         Object[] foo = insertIntoSimpleTable("foo", map("k1", 1));
1:         Object[] bar = insertIntoSimpleTable("bar", map("k1", 1,
1:                                                         "k2", 2));
1:         Object[] baz = insertIntoSimpleTable("baz", map("k2", 2,
1:                                                         "k3", 3));
1:         Object[] qux = insertIntoSimpleTable("qux", map("k2", 2,
1:                                                         "k3", 3,
1:                                                         "k4", 4));
1: 
1:         assertRowsForConditions(entry("k1", 1),
1:                                 bar, foo);
1:         assertRowsForConditions(entry("k1", 1).entry("k2", 2),
1:                                 bar);
1:         assertNoRowsForConditions(entry("k1", 1).entry("k2", 2).entry("k3", 3));
1:         assertRowsForConditions(entry("k2", 2).entry("k3", 3),
1:                                 baz, qux);
1:         assertRowsForConditions(entry("k2", 2).entry("k3", 3).entry("k4", 4),
1:                                 qux);
1:         assertRowsForConditions(entry("k3", 3).entry("k4", 4),
1:                                 qux);
1:         assertNoRowsForConditions(entry("k3", 3).entry("k4", 4).entry("k5", 5));
1:     }
1: 
1:     @Test
1:     public void testShouldFindRowsMatchingEqualityAndContainsRestrictions() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1: 
1:         Object[] foo = insertIntoSimpleTable("foo", map("common", 31415,
1:                                                         "k1", 1,
1:                                                         "k2", 2,
1:                                                         "k3", 3));
1:         Object[] bar = insertIntoSimpleTable("bar", map("common", 31415,
1:                                                         "k3", 3,
1:                                                         "k4", 4,
1:                                                         "k5", 5));
1:         Object[] baz = insertIntoSimpleTable("baz", map("common", 31415,
1:                                                         "k5", 5,
1:                                                         "k6", 6,
1:                                                         "k7", 7));
1: 
1:         assertRowsForConditions(entry("common", 31415),
1:                                 bar, baz, foo);
1:         assertRowsForConditions(entry("common", 31415).key("k1"),
1:                                 foo);
1:         assertRowsForConditions(entry("common", 31415).key("k2"),
1:                                 foo);
1:         assertRowsForConditions(entry("common", 31415).key("k3"),
1:                                 bar, foo);
1:         assertRowsForConditions(entry("common", 31415).key("k3").value(2),
1:                                 foo);
1:         assertRowsForConditions(entry("common", 31415).key("k3").value(3),
1:                                 bar, foo);
1:         assertRowsForConditions(entry("common", 31415).key("k3").value(4),
1:                                 bar);
1:         assertRowsForConditions(entry("common", 31415).key("k3").key("k5"),
1:                                 bar);
1:         assertRowsForConditions(entry("common", 31415).key("k5"),
1:                                 bar, baz);
1:         assertRowsForConditions(entry("common", 31415).key("k5").value(4),
1:                                 bar);
1:         assertRowsForConditions(entry("common", 31415).key("k5").value(5),
1:                                 bar, baz);
1:         assertRowsForConditions(entry("common", 31415).key("k5").value(6),
1:                                 baz);
1:         assertNoRowsForConditions(entry("common", 31415).key("k5").value(8));
1:     }
1: 
1:     @Test
1:     public void testShouldNotAcceptUnsupportedRelationsOnEntries() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1:         assertInvalidRelation("< 31415");
1:         assertInvalidRelation("<= 31415");
1:         assertInvalidRelation("> 31415");
1:         assertInvalidRelation(">= 31415");
1:         assertInvalidRelation("IN (31415, 31416, 31417)");
1:         assertInvalidRelation("CONTAINS 31415");
1:         assertInvalidRelation("CONTAINS KEY 'foo'");
1:     }
1: 
1:     @Test
1:     public void testShouldRecognizeAlteredOrDeletedMapEntries() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1:         Object[] foo = insertIntoSimpleTable("foo", map("common", 31415,
1:                                                         "target", 8192));
1:         Object[] bar = insertIntoSimpleTable("bar", map("common", 31415,
1:                                                         "target", 8192));
1:         Object[] baz = insertIntoSimpleTable("baz", map("common", 31415,
1:                                                         "target", 8192));
1: 
1:         assertRowsForConditions(entry("target", 8192),
1:                                 bar, baz, foo);
1:         baz = updateMapInSimpleTable(baz, "target", 4096);
1:         assertRowsForConditions(entry("target", 8192),
1:                                 bar, foo);
1:         bar = updateMapInSimpleTable(bar, "target", null);
1:         assertRowsForConditions(entry("target", 8192),
1:                                 foo);
1:         execute("DELETE FROM %s WHERE k = 'foo'");
1:         assertNoRowsForConditions(entry("target", 8192));
1:         assertRowsForConditions(entry("common", 31415),
1:                                 bar, baz);
1:         assertRowsForConditions(entry("target", 4096),
1:                                 baz);
1:     }
1: 
1:     @Test
1:     public void testShouldRejectQueriesForNullEntries() throws Throwable
1:     {
1:         createSimpleTableAndIndex();
1:         assertInvalid("SELECT * FROM %s WHERE v['somekey'] = null");
1:     }
1: 
1:     @Test
1:     public void testShouldTreatQueriesAgainstFrozenMapIndexesAsInvalid() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v FROZEN<MAP<TEXT, TEXT>>)");
1:         createIndex("CREATE INDEX ON %s(FULL(V))");
1: 
1:         try
1:         {
1:             execute("SELECT * FROM %s WHERE v['somekey'] = 'somevalue'");
1:             fail("Expected index query to fail");
1:         }
1:         catch (InvalidRequestException e)
1:         {
1:             String expectedMessage = "Map-entry equality predicates on frozen map column v are not supported";
1:             assertTrue("Expected error message to contain '" + expectedMessage + "' but got '" +
1:                        e.getMessage() + "'", e.getMessage().contains(expectedMessage));
1:         }
1:     }
1: 
1:     private void assertIndexInvalidForColumn(String colname) throws Throwable
1:     {
1:         String query = String.format("CREATE INDEX ON %%s(ENTRIES(%s))", colname);
1:         assertInvalid(query);
1:     }
1: 
1:     private void assertReturnsNoRows(String query, Object... params) throws Throwable
1:     {
1:         assertRows(execute(query, params));
1:     }
1: 
1:     private void createSimpleTableAndIndex() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k TEXT PRIMARY KEY, v MAP<TEXT, INT>)");
1:         createIndex("CREATE INDEX ON %s(ENTRIES(v))");
1:     }
1: 
1:     private Object[] insertIntoSimpleTable(String key, Object value) throws Throwable
1:     {
1:         String query = "INSERT INTO %s (k, v) VALUES (?, ?)";
1:         execute(query, key, value);
1:         return row(key, value);
1:     }
1: 
1:     private void assertRowsForConditions(IndexWhereClause whereClause, Object[]... rows) throws Throwable
1:     {
1:         assertRows(execute("SELECT * FROM %s WHERE " + whereClause.text(), whereClause.params()), rows);
1:     }
1: 
1:     private void assertNoRowsForConditions(IndexWhereClause whereClause) throws Throwable
1:     {
1:         assertRowsForConditions(whereClause);
1:     }
1: 
1:     private void assertInvalidRelation(String rel) throws Throwable
1:     {
1:         String query = "SELECT * FROM %s WHERE v " + rel;
1:         assertInvalid(query);
1:     }
1: 
1:     private Object[] updateMapInSimpleTable(Object[] row, String mapKey, Integer mapValue) throws Throwable
1:     {
1:         execute("UPDATE %s SET v[?] = ? WHERE k = ?", mapKey, mapValue, row[0]);
1:         UntypedResultSet rawResults = execute("SELECT * FROM %s WHERE k = ?", row[0]);
1:         Map<Object, Object> value = (Map<Object, Object>)row[1];
1:         if (mapValue == null)
1:         {
1:             value.remove(mapKey);
1:         }
1:         else
1:         {
1:             value.put(mapKey, mapValue);
1:         }
1:         return row;
1:     }
1: 
1:     private IndexWhereClause entry(Object key, Object value)
1:     {
1:         return (new IndexWhereClause()).entry(key, value);
1:     }
1: 
1:     private static final class IndexWhereClause
1:     {
1:         private final List<String> preds = new ArrayList<>();
1:         private final List<Object> params = new ArrayList<>();
1: 
1:         public IndexWhereClause entry(Object key, Object value)
1:         {
1:             preds.add("v[?] = ?");
1:             params.add(key);
1:             params.add(value);
1:             return this;
1:         }
1: 
1:         public IndexWhereClause key(Object key)
1:         {
1:             preds.add("v CONTAINS KEY ?");
1:             params.add(key);
1:             return this;
1:         }
1: 
1:         public IndexWhereClause value(Object value)
1:         {
1:             preds.add("v CONTAINS ?");
1:             params.add(value);
1:             return this;
1:         }
1: 
1:         public String text()
1:         {
1:             if (preds.size() == 1)
1:                 return preds.get(0);
1:             return StringUtils.join(preds, " AND ") + " ALLOW FILTERING";
1:         }
1: 
1:         public Object[] params()
1:         {
1:             return params.toArray();
1:         }
1:     }
1: }
============================================================================