1:7d857b4: /*
1:7d857b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:7d857b4:  * or more contributor license agreements.  See the NOTICE file
1:7d857b4:  * distributed with this work for additional information
1:7d857b4:  * regarding copyright ownership.  The ASF licenses this file
1:7d857b4:  * to you under the Apache License, Version 2.0 (the
1:7d857b4:  * "License"); you may not use this file except in compliance
1:7d857b4:  * with the License.  You may obtain a copy of the License at
1:7d857b4:  *
1:7d857b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7d857b4:  *
1:7d857b4:  * Unless required by applicable law or agreed to in writing, software
1:7d857b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d857b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d857b4:  * See the License for the specific language governing permissions and
1:7d857b4:  * limitations under the License.
1:7d857b4:  */
1:7d857b4: 
1:7d857b4: package org.apache.cassandra.index.sasi;
1:7d857b4: 
1:7d857b4: import java.io.IOException;
1:7d857b4: 
1:7d857b4: import org.apache.cassandra.db.*;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:7d857b4: import org.apache.cassandra.io.*;
1:7d857b4: import org.apache.cassandra.io.sstable.format.*;
1:7d857b4: 
1:7d857b4: 
1:7d857b4: public interface KeyFetcher
1:7d857b4: {
1:7d857b4:     public Clustering getClustering(long offset);
1:7d857b4:     public DecoratedKey getPartitionKey(long offset);
1:7d857b4: 
1:7d857b4:     public RowKey getRowKey(long partitionOffset, long rowOffset);
1:7d857b4: 
1:7d857b4:     /**
1:7d857b4:      * Fetches clustering and partition key from the sstable.
1:7d857b4:      *
1:7d857b4:      * Currently, clustering key is fetched from the data file of the sstable and partition key is
1:7d857b4:      * read from the index file. Reading from index file helps us to warm up key cache in this case.
1:7d857b4:      */
1:7d857b4:     public static class SSTableKeyFetcher implements KeyFetcher
1:7d857b4:     {
1:7d857b4:         private final SSTableReader sstable;
1:7d857b4: 
1:7d857b4:         public SSTableKeyFetcher(SSTableReader reader)
1:7d857b4:         {
1:7d857b4:             sstable = reader;
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         @Override
1:7d857b4:         public Clustering getClustering(long offset)
1:7d857b4:         {
1:7d857b4:             try
1:7d857b4:             {
1:7d857b4:                 return sstable.clusteringAt(offset);
1:7d857b4:             }
1:7d857b4:             catch (IOException e)
1:7d857b4:             {
1:7d857b4:                 throw new FSReadError(new IOException("Failed to read clustering from " + sstable.descriptor, e), sstable.getFilename());
1:7d857b4:             }
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         @Override
1:7d857b4:         public DecoratedKey getPartitionKey(long offset)
1:7d857b4:         {
1:7d857b4:             try
1:7d857b4:             {
1:7d857b4:                 return sstable.keyAt(offset);
1:7d857b4:             }
1:7d857b4:             catch (IOException e)
1:7d857b4:             {
1:7d857b4:                 throw new FSReadError(new IOException("Failed to read key from " + sstable.descriptor, e), sstable.getFilename());
1:7d857b4:             }
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         @Override
1:7d857b4:         public RowKey getRowKey(long partitionOffset, long rowOffset)
1:7d857b4:         {
1:7d857b4:             if (rowOffset == KeyOffsets.NO_OFFSET)
1:7d857b4:                 return new RowKey(getPartitionKey(partitionOffset), null, sstable.metadata.comparator);
1:7d857b4:             else
1:7d857b4:                 return new RowKey(getPartitionKey(partitionOffset), getClustering(rowOffset), sstable.metadata.comparator);
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         public int hashCode()
1:7d857b4:         {
1:7d857b4:             return sstable.descriptor.hashCode();
1:7d857b4:         }
1:7d857b4: 
1:7d857b4:         public boolean equals(Object other)
1:7d857b4:         {
1:7d857b4:             return other instanceof SSTableKeyFetcher
1:7d857b4:                    && sstable.descriptor.equals(((SSTableKeyFetcher) other).sstable.descriptor);
1:7d857b4:         }
1:7d857b4:     }
1:7d857b4: 
1:7d857b4: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.index.sasi.disk.*;
1: import org.apache.cassandra.io.*;
1: import org.apache.cassandra.io.sstable.format.*;
1: 
1: 
1: public interface KeyFetcher
1: {
1:     public Clustering getClustering(long offset);
1:     public DecoratedKey getPartitionKey(long offset);
1: 
1:     public RowKey getRowKey(long partitionOffset, long rowOffset);
1: 
1:     /**
1:      * Fetches clustering and partition key from the sstable.
1:      *
1:      * Currently, clustering key is fetched from the data file of the sstable and partition key is
1:      * read from the index file. Reading from index file helps us to warm up key cache in this case.
1:      */
1:     public static class SSTableKeyFetcher implements KeyFetcher
1:     {
1:         private final SSTableReader sstable;
1: 
1:         public SSTableKeyFetcher(SSTableReader reader)
1:         {
1:             sstable = reader;
1:         }
1: 
1:         @Override
1:         public Clustering getClustering(long offset)
1:         {
1:             try
1:             {
1:                 return sstable.clusteringAt(offset);
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new FSReadError(new IOException("Failed to read clustering from " + sstable.descriptor, e), sstable.getFilename());
1:             }
1:         }
1: 
1:         @Override
1:         public DecoratedKey getPartitionKey(long offset)
1:         {
1:             try
1:             {
1:                 return sstable.keyAt(offset);
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new FSReadError(new IOException("Failed to read key from " + sstable.descriptor, e), sstable.getFilename());
1:             }
1:         }
1: 
1:         @Override
1:         public RowKey getRowKey(long partitionOffset, long rowOffset)
1:         {
1:             if (rowOffset == KeyOffsets.NO_OFFSET)
1:                 return new RowKey(getPartitionKey(partitionOffset), null, sstable.metadata.comparator);
1:             else
1:                 return new RowKey(getPartitionKey(partitionOffset), getClustering(rowOffset), sstable.metadata.comparator);
1:         }
1: 
1:         public int hashCode()
1:         {
1:             return sstable.descriptor.hashCode();
1:         }
1: 
1:         public boolean equals(Object other)
1:         {
1:             return other instanceof SSTableKeyFetcher
1:                    && sstable.descriptor.equals(((SSTableKeyFetcher) other).sstable.descriptor);
1:         }
1:     }
1: 
1: }
============================================================================