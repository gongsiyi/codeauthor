1:4ed0060: /*
1:4ed0060:  * Licensed to the Apache Software Foundation (ASF) under one
1:4ed0060:  * or more contributor license agreements.  See the NOTICE file
1:4ed0060:  * distributed with this work for additional information
1:4ed0060:  * regarding copyright ownership.  The ASF licenses this file
1:4ed0060:  * to you under the Apache License, Version 2.0 (the
1:4ed0060:  * "License"); you may not use this file except in compliance
1:4ed0060:  * with the License.  You may obtain a copy of the License at
1:4ed0060:  *
1:4ed0060:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4ed0060:  *
1:4ed0060:  * Unless required by applicable law or agreed to in writing, software
1:4ed0060:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4ed0060:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ed0060:  * See the License for the specific language governing permissions and
1:4ed0060:  * limitations under the License.
1:4ed0060:  */
1:4ed0060: 
1:4ed0060: package org.apache.cassandra.cql3.selection;
1:4ed0060: 
1:4ed0060: import java.math.BigDecimal;
1:4ed0060: import java.util.*;
1:4ed0060: 
1:4ed0060: import org.junit.Test;
1:4ed0060: 
1:4ed0060: import org.apache.cassandra.cql3.*;
1:4ed0060: import org.apache.cassandra.db.marshal.*;
1:4ed0060: import org.apache.cassandra.transport.messages.ResultMessage;
1:4ed0060: 
1:4ed0060: import static org.junit.Assert.assertEquals;
1:4ed0060: 
1:4ed0060: public class TermSelectionTest extends CQLTester
1:4ed0060: {
1:4ed0060:     // Helper method for testSelectLiteral()
1:4ed0060:     private void assertConstantResult(UntypedResultSet result, Object constant)
1:4ed0060:     {
1:4ed0060:         assertRows(result,
1:4ed0060:                    row(1, "one", constant),
1:4ed0060:                    row(2, "two", constant),
1:4ed0060:                    row(3, "three", constant));
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testSelectLiteral() throws Throwable
1:4ed0060:     {
1:4ed0060:         createTable("CREATE TABLE %s (pk int, ck int, t text, PRIMARY KEY (pk, ck) )");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 1, 'one')");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 2, 'two')");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 3, 'three')");
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, 'a const' FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (text)'a const' FROM %s"), "a const");
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, 42 FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (int)42 FROM %s"), 42);
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, (1, 'foo') FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (tuple<int, text>)(1, 'foo') FROM %s"), tuple(1, "foo"));
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, [1, 2, 3] FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (list<int>)[1, 2, 3] FROM %s"), list(1, 2, 3));
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, {1, 2, 3} FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (set<int>){1, 2, 3} FROM %s"), set(1, 2, 3));
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, {1: 'foo', 2: 'bar', 3: 'baz'} FROM %s");
1:4ed0060:         assertConstantResult(execute("SELECT ck, t, (map<int, text>){1: 'foo', 2: 'bar', 3: 'baz'} FROM %s"), map(1, "foo", 2, "bar", 3, "baz"));
1:4ed0060: 
1:4ed0060:         assertColumnNames(execute("SELECT ck, t, (int)42, (int)43 FROM %s"), "ck", "t", "(int)42", "(int)43");
1:4ed0060:         assertRows(execute("SELECT ck, t, (int) 42, (int) 43 FROM %s"),
1:4ed0060:                    row(1, "one", 42, 43),
1:4ed0060:                    row(2, "two", 42, 43),
1:4ed0060:                    row(3, "three", 42, 43));
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testSelectUDTLiteral() throws Throwable
1:4ed0060:     {
1:4ed0060:         String type = createType("CREATE TYPE %s(a int, b text)");
1:4ed0060:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v " + type + ")");
1:4ed0060: 
1:4ed0060:         execute("INSERT INTO %s(k, v) VALUES (?, ?)", 0, userType("a", 3, "b", "foo"));
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT k, v, { a: 4, b: 'bar'} FROM %s");
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT k, v, (" + type + "){ a: 4, b: 'bar'} FROM %s"),
1:4ed0060:             row(0, userType("a", 3, "b", "foo"), userType("a", 4, "b", "bar"))
1:4ed0060:         );
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testInvalidSelect() throws Throwable
1:4ed0060:     {
1:4ed0060:         // Creates a table just so we can reference it in the (invalid) SELECT below
1:4ed0060:         createTable("CREATE TABLE %s (k int PRIMARY KEY)");
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT ? FROM %s");
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT k, ? FROM %s");
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Cannot infer type for term", "SELECT k, null FROM %s");
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     private void assertColumnSpec(ColumnSpecification spec, String expectedName, AbstractType<?> expectedType)
1:4ed0060:     {
1:4ed0060:         assertEquals(expectedName, spec.name.toString());
1:4ed0060:         assertEquals(expectedType, spec.type);
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testSelectPrepared() throws Throwable
1:4ed0060:     {
1:4ed0060:         createTable("CREATE TABLE %s (pk int, ck int, t text, PRIMARY KEY (pk, ck) )");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 1, 'one')");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 2, 'two')");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 3, 'three')");
1:4ed0060: 
1:4ed0060:         String query = "SELECT (int)?, (decimal):adecimal, (text)?, (tuple<int,text>):atuple, pk, ck, t FROM %s WHERE pk = ?";
1:4ed0060:         ResultMessage.Prepared prepared = prepare(query);
1:4ed0060: 
1:4ed0060:         List<ColumnSpecification> boundNames = prepared.metadata.names;
1:4ed0060: 
1:4ed0060:         // 5 bound variables
1:4ed0060:         assertEquals(5, boundNames.size());
1:4ed0060:         assertColumnSpec(boundNames.get(0), "[selection]", Int32Type.instance);
1:4ed0060:         assertColumnSpec(boundNames.get(1), "adecimal", DecimalType.instance);
1:4ed0060:         assertColumnSpec(boundNames.get(2), "[selection]", UTF8Type.instance);
1:4ed0060:         assertColumnSpec(boundNames.get(3), "atuple", TypeParser.parse("TupleType(Int32Type,UTF8Type)"));
1:4ed0060:         assertColumnSpec(boundNames.get(4), "pk", Int32Type.instance);
1:4ed0060: 
1:4ed0060: 
1:4ed0060:         List<ColumnSpecification> resultNames = prepared.resultMetadata.names;
1:4ed0060: 
1:4ed0060:         // 7 result "columns"
1:4ed0060:         assertEquals(7, resultNames.size());
1:4ed0060:         assertColumnSpec(resultNames.get(0), "(int)?", Int32Type.instance);
1:4ed0060:         assertColumnSpec(resultNames.get(1), "(decimal)?", DecimalType.instance);
1:4ed0060:         assertColumnSpec(resultNames.get(2), "(text)?", UTF8Type.instance);
1:4ed0060:         assertColumnSpec(resultNames.get(3), "(tuple<int, text>)?", TypeParser.parse("TupleType(Int32Type,UTF8Type)"));
1:4ed0060:         assertColumnSpec(resultNames.get(4), "pk", Int32Type.instance);
1:4ed0060:         assertColumnSpec(resultNames.get(5), "ck", Int32Type.instance);
1:4ed0060:         assertColumnSpec(resultNames.get(6), "t", UTF8Type.instance);
1:4ed0060: 
1:4ed0060:         assertRows(execute(query, 88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"), 1),
1:4ed0060:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:4ed0060:                        1, 1, "one"),
1:4ed0060:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:4ed0060:                        1, 2, "two"),
1:4ed0060:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:4ed0060:                        1, 3, "three"));
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testConstantFunctionArgs() throws Throwable
1:4ed0060:     {
1:4ed0060:         String fInt = createFunction(KEYSPACE,
1:4ed0060:                                      "int,int",
1:4ed0060:                                      "CREATE FUNCTION %s (val1 int, val2 int) " +
1:4ed0060:                                      "CALLED ON NULL INPUT " +
1:4ed0060:                                      "RETURNS int " +
1:4ed0060:                                      "LANGUAGE java\n" +
1:4ed0060:                                      "AS 'return Math.max(val1, val2);';");
1:4ed0060:         String fFloat = createFunction(KEYSPACE,
1:4ed0060:                                        "float,float",
1:4ed0060:                                        "CREATE FUNCTION %s (val1 float, val2 float) " +
1:4ed0060:                                        "CALLED ON NULL INPUT " +
1:4ed0060:                                        "RETURNS float " +
1:4ed0060:                                        "LANGUAGE java\n" +
1:4ed0060:                                        "AS 'return Math.max(val1, val2);';");
1:4ed0060:         String fText = createFunction(KEYSPACE,
1:4ed0060:                                       "text,text",
1:4ed0060:                                       "CREATE FUNCTION %s (val1 text, val2 text) " +
1:4ed0060:                                       "CALLED ON NULL INPUT " +
1:4ed0060:                                       "RETURNS text " +
1:4ed0060:                                       "LANGUAGE java\n" +
1:4ed0060:                                       "AS 'return val2;';");
1:4ed0060:         String fAscii = createFunction(KEYSPACE,
1:4ed0060:                                        "ascii,ascii",
1:4ed0060:                                        "CREATE FUNCTION %s (val1 ascii, val2 ascii) " +
1:4ed0060:                                        "CALLED ON NULL INPUT " +
1:4ed0060:                                        "RETURNS ascii " +
1:4ed0060:                                        "LANGUAGE java\n" +
1:4ed0060:                                        "AS 'return val2;';");
1:4ed0060:         String fTimeuuid = createFunction(KEYSPACE,
1:4ed0060:                                           "timeuuid,timeuuid",
1:4ed0060:                                           "CREATE FUNCTION %s (val1 timeuuid, val2 timeuuid) " +
1:4ed0060:                                           "CALLED ON NULL INPUT " +
1:4ed0060:                                           "RETURNS timeuuid " +
1:4ed0060:                                           "LANGUAGE java\n" +
1:4ed0060:                                           "AS 'return val2;';");
1:4ed0060: 
1:4ed0060:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, valInt int, valFloat float, valText text, valAscii ascii, valTimeuuid timeuuid)");
1:4ed0060:         execute("INSERT INTO %s (pk, valInt, valFloat, valText, valAscii, valTimeuuid) " +
1:4ed0060:                 "VALUES (1, 10, 10.0, '100', '100', 2deb23e0-96b5-11e5-b26d-a939dd1405a3)");
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, " + fInt + "(valInt, 100) FROM %s"),
1:4ed0060:                    row(1, 100));
1:4ed0060:         assertRows(execute("SELECT pk, " + fInt + "(valInt, (int)100) FROM %s"),
1:4ed0060:                    row(1, 100));
1:4ed0060:         assertInvalidMessage("Type error: (bigint)100 cannot be passed as argument 1 of function",
1:4ed0060:                              "SELECT pk, " + fInt + "(valInt, (bigint)100) FROM %s");
1:4ed0060:         assertRows(execute("SELECT pk, " + fFloat + "(valFloat, (float)100.00) FROM %s"),
1:4ed0060:                    row(1, 100f));
1:4ed0060:         assertRows(execute("SELECT pk, " + fText + "(valText, 'foo') FROM %s"),
1:4ed0060:                    row(1, "foo"));
1:4ed0060:         assertRows(execute("SELECT pk, " + fAscii + "(valAscii, (ascii)'foo') FROM %s"),
1:4ed0060:                    row(1, "foo"));
1:4ed0060:         assertRows(execute("SELECT pk, " + fTimeuuid + "(valTimeuuid, (timeuuid)34617f80-96b5-11e5-b26d-a939dd1405a3) FROM %s"),
1:4ed0060:                    row(1, UUID.fromString("34617f80-96b5-11e5-b26d-a939dd1405a3")));
1:4ed0060: 
1:4ed0060:         // ambiguous
1:4ed0060: 
1:4ed0060:         String fAmbiguousFunc1 = createFunction(KEYSPACE,
1:4ed0060:                                                 "int,bigint",
1:4ed0060:                                                 "CREATE FUNCTION %s (val1 int, val2 bigint) " +
1:4ed0060:                                                 "CALLED ON NULL INPUT " +
1:4ed0060:                                                 "RETURNS bigint " +
1:4ed0060:                                                 "LANGUAGE java\n" +
1:4ed0060:                                                 "AS 'return Math.max((long)val1, val2);';");
1:4ed0060:         assertRows(execute("SELECT pk, " + fAmbiguousFunc1 + "(valInt, 100) FROM %s"),
1:4ed0060:                    row(1, 100L));
1:4ed0060:         createFunctionOverload(fAmbiguousFunc1, "int,int",
1:4ed0060:                                                 "CREATE FUNCTION %s (val1 int, val2 int) " +
1:4ed0060:                                                 "CALLED ON NULL INPUT " +
1:4ed0060:                                                 "RETURNS bigint " +
1:4ed0060:                                                 "LANGUAGE java\n" +
1:4ed0060:                                                 "AS 'return (long)Math.max(val1, val2);';");
1:4ed0060:         assertInvalidMessage("Ambiguous call to function cql_test_keyspace.function_",
1:4ed0060:                              "SELECT pk, " + fAmbiguousFunc1 + "(valInt, 100) FROM %s");
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testPreparedFunctionArgs() throws Throwable
1:4ed0060:     {
1:4ed0060:         createTable("CREATE TABLE %s (pk int, ck int, t text, i int, PRIMARY KEY (pk, ck) )");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 1, 'one', 50)");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 2, 'two', 100)");
1:4ed0060:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 3, 'three', 150)");
1:4ed0060: 
1:4ed0060:         String fIntMax = createFunction(KEYSPACE,
1:4ed0060:                                         "int,int",
1:4ed0060:                                         "CREATE FUNCTION %s (val1 int, val2 int) " +
1:4ed0060:                                         "CALLED ON NULL INPUT " +
1:4ed0060:                                         "RETURNS int " +
1:4ed0060:                                         "LANGUAGE java\n" +
1:4ed0060:                                         "AS 'return Math.max(val1, val2);';");
1:4ed0060: 
1:4ed0060:         // weak typing
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 0),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 100),
1:4ed0060:                    row(1, 1, 100),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 200),
1:4ed0060:                    row(1, 1, 200),
1:4ed0060:                    row(1, 2, 200),
1:4ed0060:                    row(1, 3, 200));
1:4ed0060: 
1:4ed0060:         // explicit typing
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 0),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 100),
1:4ed0060:                    row(1, 1, 100),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 200),
1:4ed0060:                    row(1, 1, 200),
1:4ed0060:                    row(1, 2, 200),
1:4ed0060:                    row(1, 3, 200));
1:4ed0060: 
1:4ed0060:         // weak typing
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(1,1)", 0),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(2,1)", 0));
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(?,1)", 0, 1),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(?,1)", 0, 2));
1:4ed0060: 
1:4ed0060:         // explicit typing
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)1,(int)1)", 0),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)2,(int)1)", 0));
1:4ed0060: 
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)?,(int)1)", 0, 1),
1:4ed0060:                    row(1, 1, 50),
1:4ed0060:                    row(1, 2, 100),
1:4ed0060:                    row(1, 3, 150));
1:4ed0060:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)?,(int)1)", 0, 2));
1:4ed0060: 
1:4ed0060:         assertInvalidMessage("Invalid unset value for argument", "SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)1,(int)1)", unset());
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Test
1:4ed0060:     public void testInsertUpdateDelete() throws Throwable
1:4ed0060:     {
1:4ed0060:         String fIntMax = createFunction(KEYSPACE,
1:4ed0060:                                         "int,int",
1:4ed0060:                                         "CREATE FUNCTION %s (val1 int, val2 int) " +
1:4ed0060:                                         "CALLED ON NULL INPUT " +
1:4ed0060:                                         "RETURNS int " +
1:4ed0060:                                         "LANGUAGE java\n" +
1:4ed0060:                                         "AS 'return Math.max(val1, val2);';");
1:4ed0060: 
1:4ed0060:         createTable("CREATE TABLE %s (pk int, ck int, t text, i int, PRIMARY KEY (pk, ck) )");
1:4ed0060: 
1:4ed0060:         execute("UPDATE %s SET i = " + fIntMax + "(100, 200) WHERE pk = 1 AND ck = 1");
1:4ed0060:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 1"),
1:4ed0060:                    row(200));
1:4ed0060: 
1:4ed0060:         execute("UPDATE %s SET i = " + fIntMax + "(100, 300) WHERE pk = 1 AND ck = " + fIntMax + "(1,2)");
1:4ed0060:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"),
1:4ed0060:                    row(300));
1:4ed0060: 
1:4ed0060:         execute("DELETE FROM %s WHERE pk = 1 AND ck = " + fIntMax + "(1,2)");
1:4ed0060:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"));
1:4ed0060: 
1:4ed0060:         execute("INSERT INTO %s (pk, ck, i) VALUES (1, " + fIntMax + "(1,2), " + fIntMax + "(100, 300))");
1:4ed0060:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"),
1:4ed0060:                    row(300));
1:4ed0060:     }
1:4ed0060: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.selection;
1: 
1: import java.math.BigDecimal;
0: import java.math.BigInteger;
1: import java.util.*;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNull;
1: 
1: public class TermSelectionTest extends CQLTester
1: {
1:     // Helper method for testSelectLiteral()
1:     private void assertConstantResult(UntypedResultSet result, Object constant)
1:     {
1:         assertRows(result,
1:                    row(1, "one", constant),
1:                    row(2, "two", constant),
1:                    row(3, "three", constant));
1:     }
1: 
1:     @Test
1:     public void testSelectLiteral() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pk int, ck int, t text, PRIMARY KEY (pk, ck) )");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 1, 'one')");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 2, 'two')");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 3, 'three')");
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, 'a const' FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (text)'a const' FROM %s"), "a const");
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, 42 FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (int)42 FROM %s"), 42);
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, (1, 'foo') FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (tuple<int, text>)(1, 'foo') FROM %s"), tuple(1, "foo"));
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, [1, 2, 3] FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (list<int>)[1, 2, 3] FROM %s"), list(1, 2, 3));
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, {1, 2, 3} FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (set<int>){1, 2, 3} FROM %s"), set(1, 2, 3));
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ck, t, {1: 'foo', 2: 'bar', 3: 'baz'} FROM %s");
1:         assertConstantResult(execute("SELECT ck, t, (map<int, text>){1: 'foo', 2: 'bar', 3: 'baz'} FROM %s"), map(1, "foo", 2, "bar", 3, "baz"));
1: 
1:         assertColumnNames(execute("SELECT ck, t, (int)42, (int)43 FROM %s"), "ck", "t", "(int)42", "(int)43");
1:         assertRows(execute("SELECT ck, t, (int) 42, (int) 43 FROM %s"),
1:                    row(1, "one", 42, 43),
1:                    row(2, "two", 42, 43),
1:                    row(3, "three", 42, 43));
1:     }
1: 
1:     @Test
1:     public void testSelectUDTLiteral() throws Throwable
1:     {
1:         String type = createType("CREATE TYPE %s(a int, b text)");
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v " + type + ")");
1: 
1:         execute("INSERT INTO %s(k, v) VALUES (?, ?)", 0, userType("a", 3, "b", "foo"));
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT k, v, { a: 4, b: 'bar'} FROM %s");
1: 
1:         assertRows(execute("SELECT k, v, (" + type + "){ a: 4, b: 'bar'} FROM %s"),
1:             row(0, userType("a", 3, "b", "foo"), userType("a", 4, "b", "bar"))
1:         );
1:     }
1: 
1:     @Test
1:     public void testInvalidSelect() throws Throwable
1:     {
1:         // Creates a table just so we can reference it in the (invalid) SELECT below
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY)");
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT ? FROM %s");
1:         assertInvalidMessage("Cannot infer type for term", "SELECT k, ? FROM %s");
1: 
1:         assertInvalidMessage("Cannot infer type for term", "SELECT k, null FROM %s");
1:     }
1: 
1:     private void assertColumnSpec(ColumnSpecification spec, String expectedName, AbstractType<?> expectedType)
1:     {
1:         assertEquals(expectedName, spec.name.toString());
1:         assertEquals(expectedType, spec.type);
1:     }
1: 
1:     @Test
1:     public void testSelectPrepared() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pk int, ck int, t text, PRIMARY KEY (pk, ck) )");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 1, 'one')");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 2, 'two')");
1:         execute("INSERT INTO %s (pk, ck, t) VALUES (1, 3, 'three')");
1: 
1:         String query = "SELECT (int)?, (decimal):adecimal, (text)?, (tuple<int,text>):atuple, pk, ck, t FROM %s WHERE pk = ?";
1:         ResultMessage.Prepared prepared = prepare(query);
1: 
1:         List<ColumnSpecification> boundNames = prepared.metadata.names;
1: 
1:         // 5 bound variables
1:         assertEquals(5, boundNames.size());
1:         assertColumnSpec(boundNames.get(0), "[selection]", Int32Type.instance);
1:         assertColumnSpec(boundNames.get(1), "adecimal", DecimalType.instance);
1:         assertColumnSpec(boundNames.get(2), "[selection]", UTF8Type.instance);
1:         assertColumnSpec(boundNames.get(3), "atuple", TypeParser.parse("TupleType(Int32Type,UTF8Type)"));
1:         assertColumnSpec(boundNames.get(4), "pk", Int32Type.instance);
1: 
1: 
1:         List<ColumnSpecification> resultNames = prepared.resultMetadata.names;
1: 
1:         // 7 result "columns"
1:         assertEquals(7, resultNames.size());
1:         assertColumnSpec(resultNames.get(0), "(int)?", Int32Type.instance);
1:         assertColumnSpec(resultNames.get(1), "(decimal)?", DecimalType.instance);
1:         assertColumnSpec(resultNames.get(2), "(text)?", UTF8Type.instance);
1:         assertColumnSpec(resultNames.get(3), "(tuple<int, text>)?", TypeParser.parse("TupleType(Int32Type,UTF8Type)"));
1:         assertColumnSpec(resultNames.get(4), "pk", Int32Type.instance);
1:         assertColumnSpec(resultNames.get(5), "ck", Int32Type.instance);
1:         assertColumnSpec(resultNames.get(6), "t", UTF8Type.instance);
1: 
1:         assertRows(execute(query, 88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"), 1),
1:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:                        1, 1, "one"),
1:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:                        1, 2, "two"),
1:                    row(88, BigDecimal.TEN, "foo bar baz", tuple(42, "ursus"),
1:                        1, 3, "three"));
1:     }
1: 
1:     @Test
1:     public void testConstantFunctionArgs() throws Throwable
1:     {
1:         String fInt = createFunction(KEYSPACE,
1:                                      "int,int",
1:                                      "CREATE FUNCTION %s (val1 int, val2 int) " +
1:                                      "CALLED ON NULL INPUT " +
1:                                      "RETURNS int " +
1:                                      "LANGUAGE java\n" +
1:                                      "AS 'return Math.max(val1, val2);';");
1:         String fFloat = createFunction(KEYSPACE,
1:                                        "float,float",
1:                                        "CREATE FUNCTION %s (val1 float, val2 float) " +
1:                                        "CALLED ON NULL INPUT " +
1:                                        "RETURNS float " +
1:                                        "LANGUAGE java\n" +
1:                                        "AS 'return Math.max(val1, val2);';");
1:         String fText = createFunction(KEYSPACE,
1:                                       "text,text",
1:                                       "CREATE FUNCTION %s (val1 text, val2 text) " +
1:                                       "CALLED ON NULL INPUT " +
1:                                       "RETURNS text " +
1:                                       "LANGUAGE java\n" +
1:                                       "AS 'return val2;';");
1:         String fAscii = createFunction(KEYSPACE,
1:                                        "ascii,ascii",
1:                                        "CREATE FUNCTION %s (val1 ascii, val2 ascii) " +
1:                                        "CALLED ON NULL INPUT " +
1:                                        "RETURNS ascii " +
1:                                        "LANGUAGE java\n" +
1:                                        "AS 'return val2;';");
1:         String fTimeuuid = createFunction(KEYSPACE,
1:                                           "timeuuid,timeuuid",
1:                                           "CREATE FUNCTION %s (val1 timeuuid, val2 timeuuid) " +
1:                                           "CALLED ON NULL INPUT " +
1:                                           "RETURNS timeuuid " +
1:                                           "LANGUAGE java\n" +
1:                                           "AS 'return val2;';");
1: 
1:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, valInt int, valFloat float, valText text, valAscii ascii, valTimeuuid timeuuid)");
1:         execute("INSERT INTO %s (pk, valInt, valFloat, valText, valAscii, valTimeuuid) " +
1:                 "VALUES (1, 10, 10.0, '100', '100', 2deb23e0-96b5-11e5-b26d-a939dd1405a3)");
1: 
1:         assertRows(execute("SELECT pk, " + fInt + "(valInt, 100) FROM %s"),
1:                    row(1, 100));
1:         assertRows(execute("SELECT pk, " + fInt + "(valInt, (int)100) FROM %s"),
1:                    row(1, 100));
1:         assertInvalidMessage("Type error: (bigint)100 cannot be passed as argument 1 of function",
1:                              "SELECT pk, " + fInt + "(valInt, (bigint)100) FROM %s");
1:         assertRows(execute("SELECT pk, " + fFloat + "(valFloat, (float)100.00) FROM %s"),
1:                    row(1, 100f));
1:         assertRows(execute("SELECT pk, " + fText + "(valText, 'foo') FROM %s"),
1:                    row(1, "foo"));
1:         assertRows(execute("SELECT pk, " + fAscii + "(valAscii, (ascii)'foo') FROM %s"),
1:                    row(1, "foo"));
1:         assertRows(execute("SELECT pk, " + fTimeuuid + "(valTimeuuid, (timeuuid)34617f80-96b5-11e5-b26d-a939dd1405a3) FROM %s"),
1:                    row(1, UUID.fromString("34617f80-96b5-11e5-b26d-a939dd1405a3")));
1: 
1:         // ambiguous
1: 
1:         String fAmbiguousFunc1 = createFunction(KEYSPACE,
1:                                                 "int,bigint",
1:                                                 "CREATE FUNCTION %s (val1 int, val2 bigint) " +
1:                                                 "CALLED ON NULL INPUT " +
1:                                                 "RETURNS bigint " +
1:                                                 "LANGUAGE java\n" +
1:                                                 "AS 'return Math.max((long)val1, val2);';");
1:         assertRows(execute("SELECT pk, " + fAmbiguousFunc1 + "(valInt, 100) FROM %s"),
1:                    row(1, 100L));
1:         createFunctionOverload(fAmbiguousFunc1, "int,int",
1:                                                 "CREATE FUNCTION %s (val1 int, val2 int) " +
1:                                                 "CALLED ON NULL INPUT " +
1:                                                 "RETURNS bigint " +
1:                                                 "LANGUAGE java\n" +
1:                                                 "AS 'return (long)Math.max(val1, val2);';");
1:         assertInvalidMessage("Ambiguous call to function cql_test_keyspace.function_",
1:                              "SELECT pk, " + fAmbiguousFunc1 + "(valInt, 100) FROM %s");
1:     }
1: 
1:     @Test
1:     public void testPreparedFunctionArgs() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pk int, ck int, t text, i int, PRIMARY KEY (pk, ck) )");
1:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 1, 'one', 50)");
1:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 2, 'two', 100)");
1:         execute("INSERT INTO %s (pk, ck, t, i) VALUES (1, 3, 'three', 150)");
1: 
1:         String fIntMax = createFunction(KEYSPACE,
1:                                         "int,int",
1:                                         "CREATE FUNCTION %s (val1 int, val2 int) " +
1:                                         "CALLED ON NULL INPUT " +
1:                                         "RETURNS int " +
1:                                         "LANGUAGE java\n" +
1:                                         "AS 'return Math.max(val1, val2);';");
1: 
1:         // weak typing
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 0),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 100),
1:                    row(1, 1, 100),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s", 200),
1:                    row(1, 1, 200),
1:                    row(1, 2, 200),
1:                    row(1, 3, 200));
1: 
1:         // explicit typing
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 0),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 100),
1:                    row(1, 1, 100),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s", 200),
1:                    row(1, 1, 200),
1:                    row(1, 2, 200),
1:                    row(1, 3, 200));
1: 
1:         // weak typing
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(1,1)", 0),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(2,1)", 0));
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(?,1)", 0, 1),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, ?) FROM %s WHERE pk = " + fIntMax + "(?,1)", 0, 2));
1: 
1:         // explicit typing
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)1,(int)1)", 0),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)2,(int)1)", 0));
1: 
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)?,(int)1)", 0, 1),
1:                    row(1, 1, 50),
1:                    row(1, 2, 100),
1:                    row(1, 3, 150));
1:         assertRows(execute("SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)?,(int)1)", 0, 2));
1: 
1:         assertInvalidMessage("Invalid unset value for argument", "SELECT pk, ck, " + fIntMax + "(i, (int)?) FROM %s WHERE pk = " + fIntMax + "((int)1,(int)1)", unset());
1:     }
1: 
1:     @Test
1:     public void testInsertUpdateDelete() throws Throwable
1:     {
1:         String fIntMax = createFunction(KEYSPACE,
1:                                         "int,int",
1:                                         "CREATE FUNCTION %s (val1 int, val2 int) " +
1:                                         "CALLED ON NULL INPUT " +
1:                                         "RETURNS int " +
1:                                         "LANGUAGE java\n" +
1:                                         "AS 'return Math.max(val1, val2);';");
1: 
1:         createTable("CREATE TABLE %s (pk int, ck int, t text, i int, PRIMARY KEY (pk, ck) )");
1: 
1:         execute("UPDATE %s SET i = " + fIntMax + "(100, 200) WHERE pk = 1 AND ck = 1");
1:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 1"),
1:                    row(200));
1: 
1:         execute("UPDATE %s SET i = " + fIntMax + "(100, 300) WHERE pk = 1 AND ck = " + fIntMax + "(1,2)");
1:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"),
1:                    row(300));
1: 
1:         execute("DELETE FROM %s WHERE pk = 1 AND ck = " + fIntMax + "(1,2)");
1:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"));
1: 
1:         execute("INSERT INTO %s (pk, ck, i) VALUES (1, " + fIntMax + "(1,2), " + fIntMax + "(100, 300))");
1:         assertRows(execute("SELECT i FROM %s WHERE pk = 1 AND ck = 2"),
1:                    row(300));
1:     }
1: }
============================================================================