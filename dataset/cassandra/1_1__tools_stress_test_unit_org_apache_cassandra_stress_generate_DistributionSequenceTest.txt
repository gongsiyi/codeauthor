1:e4f6045: /*
1:e4f6045:  * Licensed to the Apache Software Foundation (ASF) under one
1:e4f6045:  * or more contributor license agreements.  See the NOTICE file
1:e4f6045:  * distributed with this work for additional information
1:e4f6045:  * regarding copyright ownership.  The ASF licenses this file
1:e4f6045:  * to you under the Apache License, Version 2.0 (the
1:e4f6045:  * "License"); you may not use this file except in compliance
1:e4f6045:  * with the License.  You may obtain a copy of the License at
1:e4f6045:  *
1:e4f6045:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e4f6045:  *
1:e4f6045:  * Unless required by applicable law or agreed to in writing, software
1:e4f6045:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e4f6045:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e4f6045:  * See the License for the specific language governing permissions and
1:e4f6045:  * limitations under the License.
1:e4f6045:  */
1:e4f6045: 
1:e4f6045: package org.apache.cassandra.stress.generate;
1:e4f6045: 
1:e4f6045: import org.junit.Test;
1:e4f6045: 
1:e4f6045: import org.apache.cassandra.stress.settings.OptionDistribution;
1:e4f6045: 
1:e4f6045: import static org.junit.Assert.*;
1:e4f6045: 
1:e4f6045: public class DistributionSequenceTest
1:e4f6045: {
1:e4f6045:     @Test
1:e4f6045:     public void simpleSequence() throws Exception
1:e4f6045:     {
1:e4f6045:         Distribution dist = OptionDistribution.get("seq(1..10)").get();
1:e4f6045:         assertTrue(dist instanceof DistributionSequence);
1:e4f6045: 
1:e4f6045:         assertEquals(1, dist.minValue());
1:e4f6045:         assertEquals(10, dist.maxValue());
1:e4f6045:         assertEquals(5, dist.average());
1:e4f6045: 
1:e4f6045:         assertEquals(1, dist.inverseCumProb(0d));
1:e4f6045:         assertEquals(10, dist.inverseCumProb(1d));
1:e4f6045: 
1:e4f6045:         long min = dist.next();
1:e4f6045:         assertEquals(1,min);
1:e4f6045: 
1:e4f6045:         long last = min;
1:e4f6045:         for (int i=0; i<9; i++)
1:e4f6045:         {
1:e4f6045:             long next = dist.next();
1:e4f6045:             assertEquals(next, last+1); //increase by one each step
1:e4f6045:             last = next;
1:e4f6045:         }
1:e4f6045: 
1:e4f6045:         assertEquals(1, dist.next()); // wrapping
1:e4f6045:     }
1:e4f6045: 
1:e4f6045: 
1:e4f6045:     @Test
1:e4f6045:     public void negValueSequence() throws Exception
1:e4f6045:     {
1:e4f6045:         Distribution dist = OptionDistribution.get("seq(-1000..-10)").get();
1:e4f6045:         assertTrue(dist instanceof DistributionSequence);
1:e4f6045: 
1:e4f6045:         assertEquals(-1000, dist.minValue());
1:e4f6045:         assertEquals( -10, dist.maxValue());
1:e4f6045:         assertEquals(-504, dist.average());
1:e4f6045: 
1:e4f6045:         assertEquals(-1000, dist.inverseCumProb(0d));
1:e4f6045:         assertEquals(-10, dist.inverseCumProb(1d));
1:e4f6045: 
1:e4f6045:         long min = dist.next();
1:e4f6045:         assertEquals(-1000, min);
1:e4f6045: 
1:e4f6045:         long last = min;
1:e4f6045:         long next = dist.next();
1:e4f6045:         while (last<next)
1:e4f6045:         {
1:e4f6045:             assertEquals(next, last+1); //increase by one each step
1:e4f6045:             last = next;
1:e4f6045:             next = dist.next();
1:e4f6045:         }
1:e4f6045: 
1:e4f6045:         assertEquals(-10, last); // wrapping
1:e4f6045:         assertEquals(-1000, next); // wrapping
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     @Test
1:e4f6045:     public void bigSequence() throws Exception
1:e4f6045:     {
1:e4f6045:         Distribution dist = OptionDistribution.get(String.format("seq(1..%d)", Long.MAX_VALUE)).get();
1:e4f6045:         assertTrue(dist instanceof DistributionSequence);
1:e4f6045: 
1:e4f6045:         assertEquals(1, dist.minValue());
1:e4f6045:         assertEquals(Long.MAX_VALUE, dist.maxValue());
1:e4f6045: 
1:e4f6045:         assertEquals(1, dist.inverseCumProb(0d));
1:e4f6045:         assertEquals(Long.MAX_VALUE, dist.inverseCumProb(1d));
1:7c759e2: 
1:e4f6045:     }
1:7c759e2: 
1:7c759e2:     @Test
1:7c759e2:     public void setSeed() throws Exception
1:7c759e2:     {
1:7c759e2:         Distribution dist = OptionDistribution.get("seq(1..10)").get();
1:7c759e2:         assertTrue(dist instanceof DistributionSequence);
1:7c759e2: 
1:7c759e2:         for (int seed=1; seed<500; seed+=seed)
1:7c759e2:         {
1:7c759e2:             dist.setSeed(seed);
1:7c759e2:             assertEquals(1, dist.minValue());
1:7c759e2:             assertEquals(10, dist.maxValue());
1:7c759e2:             assertEquals(5, dist.average());
1:7c759e2: 
1:7c759e2:             assertEquals(1, dist.inverseCumProb(0d));
1:7c759e2:             assertEquals(10, dist.inverseCumProb(1d));
1:e4f6045: 
1:7c759e2:             long last = dist.next();
1:7c759e2:             for (int i = 0; i < 9; i++)
1:7c759e2:             {
1:7c759e2:                 long next = dist.next();
1:7c759e2:                 if (next>1)
1:7c759e2:                 {
1:7c759e2:                     assertEquals(next, last + 1); //increase by one each step
1:7c759e2:                 }else{
1:7c759e2:                     assertEquals(last, 10); //wrap after the end
1:7c759e2:                 }
1:7c759e2:                 last = next;
1:7c759e2:             }
1:7c759e2:         }
1:7c759e2:     }
1:e4f6045: }
============================================================================
author:Ben Slater
-------------------------------------------------------------------------------
commit:7c759e2
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void setSeed() throws Exception
1:     {
1:         Distribution dist = OptionDistribution.get("seq(1..10)").get();
1:         assertTrue(dist instanceof DistributionSequence);
1: 
1:         for (int seed=1; seed<500; seed+=seed)
1:         {
1:             dist.setSeed(seed);
1:             assertEquals(1, dist.minValue());
1:             assertEquals(10, dist.maxValue());
1:             assertEquals(5, dist.average());
1: 
1:             assertEquals(1, dist.inverseCumProb(0d));
1:             assertEquals(10, dist.inverseCumProb(1d));
1: 
1:             long last = dist.next();
1:             for (int i = 0; i < 9; i++)
1:             {
1:                 long next = dist.next();
1:                 if (next>1)
1:                 {
1:                     assertEquals(next, last + 1); //increase by one each step
1:                 }else{
1:                     assertEquals(last, 10); //wrap after the end
1:                 }
1:                 last = next;
1:             }
1:         }
1:     }
commit:e4f6045
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress.generate;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.stress.settings.OptionDistribution;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class DistributionSequenceTest
1: {
1:     @Test
1:     public void simpleSequence() throws Exception
1:     {
1:         Distribution dist = OptionDistribution.get("seq(1..10)").get();
1:         assertTrue(dist instanceof DistributionSequence);
1: 
1:         assertEquals(1, dist.minValue());
1:         assertEquals(10, dist.maxValue());
1:         assertEquals(5, dist.average());
1: 
1:         assertEquals(1, dist.inverseCumProb(0d));
1:         assertEquals(10, dist.inverseCumProb(1d));
1: 
1:         long min = dist.next();
1:         assertEquals(1,min);
1: 
1:         long last = min;
1:         for (int i=0; i<9; i++)
1:         {
1:             long next = dist.next();
1:             assertEquals(next, last+1); //increase by one each step
1:             last = next;
1:         }
1: 
1:         assertEquals(1, dist.next()); // wrapping
1:     }
1: 
1: 
1:     @Test
1:     public void negValueSequence() throws Exception
1:     {
1:         Distribution dist = OptionDistribution.get("seq(-1000..-10)").get();
1:         assertTrue(dist instanceof DistributionSequence);
1: 
1:         assertEquals(-1000, dist.minValue());
1:         assertEquals( -10, dist.maxValue());
1:         assertEquals(-504, dist.average());
1: 
1:         assertEquals(-1000, dist.inverseCumProb(0d));
1:         assertEquals(-10, dist.inverseCumProb(1d));
1: 
1:         long min = dist.next();
1:         assertEquals(-1000, min);
1: 
1:         long last = min;
1:         long next = dist.next();
1:         while (last<next)
1:         {
1:             assertEquals(next, last+1); //increase by one each step
1:             last = next;
1:             next = dist.next();
1:         }
1: 
1:         assertEquals(-10, last); // wrapping
1:         assertEquals(-1000, next); // wrapping
1:     }
1: 
1:     @Test
1:     public void bigSequence() throws Exception
1:     {
1:         Distribution dist = OptionDistribution.get(String.format("seq(1..%d)", Long.MAX_VALUE)).get();
1:         assertTrue(dist instanceof DistributionSequence);
1: 
1:         assertEquals(1, dist.minValue());
1:         assertEquals(Long.MAX_VALUE, dist.maxValue());
1: 
1:         assertEquals(1, dist.inverseCumProb(0d));
1:         assertEquals(Long.MAX_VALUE, dist.inverseCumProb(1d));
1: 
1:     }
1: }
============================================================================