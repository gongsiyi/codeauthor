1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
4:a991b64: 
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: 
1:a991b64: public abstract class AbstractUnfilteredRowIterator extends AbstractIterator<Unfiltered> implements UnfilteredRowIterator
2:a991b64: {
1:a991b64:     protected final CFMetaData metadata;
1:a991b64:     protected final DecoratedKey partitionKey;
1:a991b64:     protected final DeletionTime partitionLevelDeletion;
1:a991b64:     protected final PartitionColumns columns;
1:a991b64:     protected final Row staticRow;
1:a991b64:     protected final boolean isReverseOrder;
1:c055ab9:     protected final EncodingStats stats;
1:a991b64: 
1:a991b64:     protected AbstractUnfilteredRowIterator(CFMetaData metadata,
1:a991b64:                                             DecoratedKey partitionKey,
1:a991b64:                                             DeletionTime partitionLevelDeletion,
1:a991b64:                                             PartitionColumns columns,
1:a991b64:                                             Row staticRow,
1:a991b64:                                             boolean isReverseOrder,
1:c055ab9:                                             EncodingStats stats)
1:a991b64:     {
1:a991b64:         this.metadata = metadata;
1:a991b64:         this.partitionKey = partitionKey;
1:a991b64:         this.partitionLevelDeletion = partitionLevelDeletion;
1:a991b64:         this.columns = columns;
1:a991b64:         this.staticRow = staticRow;
1:a991b64:         this.isReverseOrder = isReverseOrder;
1:a991b64:         this.stats = stats;
2:a991b64:     }
1:a991b64: 
1:a991b64:     public CFMetaData metadata()
1:a991b64:     {
1:a991b64:         return metadata;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionColumns columns()
1:a991b64:     {
1:a991b64:         return columns;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isReverseOrder()
1:a991b64:     {
1:a991b64:         return isReverseOrder;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DecoratedKey partitionKey()
1:a991b64:     {
1:a991b64:         return partitionKey;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime partitionLevelDeletion()
1:a991b64:     {
1:a991b64:         return partitionLevelDeletion;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Row staticRow()
1:a991b64:     {
1:a991b64:         return staticRow;
1:a991b64:     }
1:a991b64: 
1:c055ab9:     public EncodingStats stats()
1:a991b64:     {
1:a991b64:         return stats;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void close()
1:a991b64:     {
1:a991b64:     }
1:a991b64: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected final EncodingStats stats;
/////////////////////////////////////////////////////////////////////////
1:                                             EncodingStats stats)
/////////////////////////////////////////////////////////////////////////
1:     public EncodingStats stats()
commit:2457599
/////////////////////////////////////////////////////////////////////////
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import java.util.Objects;
1: 
0: import com.google.common.collect.AbstractIterator;
0: import com.google.common.collect.Iterators;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: public abstract class AbstractUnfilteredRowIterator extends AbstractIterator<Unfiltered> implements UnfilteredRowIterator
1: {
1:     protected final CFMetaData metadata;
1:     protected final DecoratedKey partitionKey;
1:     protected final DeletionTime partitionLevelDeletion;
1:     protected final PartitionColumns columns;
1:     protected final Row staticRow;
1:     protected final boolean isReverseOrder;
0:     protected final RowStats stats;
1: 
1:     protected AbstractUnfilteredRowIterator(CFMetaData metadata,
1:                                             DecoratedKey partitionKey,
1:                                             DeletionTime partitionLevelDeletion,
1:                                             PartitionColumns columns,
1:                                             Row staticRow,
1:                                             boolean isReverseOrder,
0:                                             RowStats stats)
1:     {
1:         this.metadata = metadata;
1:         this.partitionKey = partitionKey;
1:         this.partitionLevelDeletion = partitionLevelDeletion;
1:         this.columns = columns;
1:         this.staticRow = staticRow;
1:         this.isReverseOrder = isReverseOrder;
1:         this.stats = stats;
1:     }
1: 
1:     public CFMetaData metadata()
1:     {
1:         return metadata;
1:     }
1: 
1:     public PartitionColumns columns()
1:     {
1:         return columns;
1:     }
1: 
1:     public boolean isReverseOrder()
1:     {
1:         return isReverseOrder;
1:     }
1: 
1:     public DecoratedKey partitionKey()
1:     {
1:         return partitionKey;
1:     }
1: 
1:     public DeletionTime partitionLevelDeletion()
1:     {
1:         return partitionLevelDeletion;
1:     }
1: 
1:     public Row staticRow()
1:     {
1:         return staticRow;
1:     }
1: 
0:     public RowStats stats()
1:     {
1:         return stats;
1:     }
1: 
1:     public void close()
1:     {
1:     }
1: 
0:     public static boolean equal(UnfilteredRowIterator a, UnfilteredRowIterator b)
1:     {
0:         return Objects.equals(a.columns(), b.columns())
0:             && Objects.equals(a.metadata(), b.metadata())
0:             && Objects.equals(a.isReverseOrder(), b.isReverseOrder())
0:             && Objects.equals(a.partitionKey(), b.partitionKey())
0:             && Objects.equals(a.partitionLevelDeletion(), b.partitionLevelDeletion())
0:             && Objects.equals(a.staticRow(), b.staticRow())
0:             && Objects.equals(a.stats(), b.stats())
0:             && Objects.equals(a.metadata(), b.metadata())
0:             && Iterators.elementsEqual(a, b);
1:     }
1: 
1: }
============================================================================