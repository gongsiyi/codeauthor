1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.TimeUnit;
1:d43b9ce: 
1:d43b9ce: public interface TimeSource
1:d43b9ce: {
1:d43b9ce:     /**
1:d43b9ce:      *
1:d43b9ce:      * @return the current time in milliseconds
1:d43b9ce:      */
1:d43b9ce:     long currentTimeMillis();
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      *
1:d43b9ce:      * @return Returns the current time value in nanoseconds.
1:d43b9ce:      *
1:d43b9ce:      * <p>This method can only be used to measure elapsed time and is
1:d43b9ce:      * not related to any other notion of system or wall-clock time.
1:d43b9ce:      */
1:d43b9ce:     long nanoTime();
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Sleep for the given amount of time uninterruptibly.
1:d43b9ce:      *
1:d43b9ce:      * @param  sleepFor given amout.
1:d43b9ce:      * @param  unit time unit
1:d43b9ce:      * @return The time source itself after the given sleep period.
1:d43b9ce:      */
1:d43b9ce:     TimeSource sleepUninterruptibly(long sleepFor, TimeUnit unit);
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Sleep for the given amount of time. This operation could interrupted.
1:d43b9ce:      * Hence after returning from this method, it is not guaranteed
1:d43b9ce:      * that the request amount of time has passed.
1:d43b9ce:      *
1:d43b9ce:      * @param  sleepFor given amout.
1:d43b9ce:      * @param  unit time unit
1:d43b9ce:      * @return The time source itself after the given sleep period.
1:d43b9ce:      */
1:d43b9ce:     TimeSource sleep(long sleepFor, TimeUnit unit) throws InterruptedException;
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: public interface TimeSource
1: {
1:     /**
1:      *
1:      * @return the current time in milliseconds
1:      */
1:     long currentTimeMillis();
1: 
1:     /**
1:      *
1:      * @return Returns the current time value in nanoseconds.
1:      *
1:      * <p>This method can only be used to measure elapsed time and is
1:      * not related to any other notion of system or wall-clock time.
1:      */
1:     long nanoTime();
1: 
1:     /**
1:      * Sleep for the given amount of time uninterruptibly.
1:      *
1:      * @param  sleepFor given amout.
1:      * @param  unit time unit
1:      * @return The time source itself after the given sleep period.
1:      */
1:     TimeSource sleepUninterruptibly(long sleepFor, TimeUnit unit);
1: 
1:     /**
1:      * Sleep for the given amount of time. This operation could interrupted.
1:      * Hence after returning from this method, it is not guaranteed
1:      * that the request amount of time has passed.
1:      *
1:      * @param  sleepFor given amout.
1:      * @param  unit time unit
1:      * @return The time source itself after the given sleep period.
1:      */
1:     TimeSource sleep(long sleepFor, TimeUnit unit) throws InterruptedException;
1: }
============================================================================