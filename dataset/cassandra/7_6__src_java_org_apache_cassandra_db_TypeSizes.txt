1:cb25a8f: /*
1:cb25a8f:  * Licensed to the Apache Software Foundation (ASF) under one
1:cb25a8f:  * or more contributor license agreements.  See the NOTICE file
1:cb25a8f:  * distributed with this work for additional information
1:cb25a8f:  * regarding copyright ownership.  The ASF licenses this file
1:cb25a8f:  * to you under the Apache License, Version 2.0 (the
1:cb25a8f:  * "License"); you may not use this file except in compliance
1:cb25a8f:  * with the License.  You may obtain a copy of the License at
1:cb25a8f:  *
1:cb25a8f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cb25a8f:  *
1:cb25a8f:  * Unless required by applicable law or agreed to in writing, software
1:cb25a8f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cb25a8f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cb25a8f:  * See the License for the specific language governing permissions and
1:cb25a8f:  * limitations under the License.
1:cb25a8f:  */
1:cb25a8f: package org.apache.cassandra.db;
10:cb25a8f: 
1:490a099: import java.nio.ByteBuffer;
1:90170d1: import java.util.UUID;
1:490a099: 
1:1491a40: import org.apache.cassandra.utils.vint.VIntCoding;
1:1491a40: 
1:03f72ac: public final class TypeSizes
1:70554b2: {
1:03f72ac: 
1:03f72ac:     private TypeSizes(){}
1:70554b2: 
2:cb25a8f:     private static final int BOOL_SIZE = 1;
1:cb25a8f:     private static final int SHORT_SIZE = 2;
1:cb25a8f:     private static final int INT_SIZE = 4;
1:cb25a8f:     private static final int LONG_SIZE = 8;
1:90170d1:     private static final int UUID_SIZE = 16;
1:70554b2: 
1:70554b2:     /** assumes UTF8 */
1:03f72ac:     public static int sizeof(String value)
1:70554b2:     {
1:70554b2:         int length = encodedUTF8Length(value);
1:70554b2:         assert length <= Short.MAX_VALUE;
1:70554b2:         return sizeof((short) length) + length;
1:70554b2:     }
1:90170d1: 
1:70554b2:     public static int encodedUTF8Length(String st)
1:90170d1:     {
1:70554b2:         int strlen = st.length();
1:70554b2:         int utflen = 0;
1:70554b2:         for (int i = 0; i < strlen; i++)
1:90170d1:         {
1:70554b2:             int c = st.charAt(i);
1:70554b2:             if ((c >= 0x0001) && (c <= 0x007F))
1:70554b2:                 utflen++;
1:70554b2:             else if (c > 0x07FF)
1:70554b2:                 utflen += 3;
1:70554b2:             else
1:70554b2:                 utflen += 2;
1:90170d1:         }
1:70554b2:         return utflen;
1:70554b2:     }
1:70554b2: 
1:03f72ac:     public static int sizeofWithShortLength(ByteBuffer value)
1:490a099:     {
1:490a099:         return sizeof((short) value.remaining()) + value.remaining();
1:490a099:     }
1:490a099: 
1:03f72ac:     public static int sizeofWithLength(ByteBuffer value)
1:490a099:     {
1:490a099:         return sizeof(value.remaining()) + value.remaining();
1:490a099:     }
1:490a099: 
1:2457599:     public static int sizeofWithVIntLength(ByteBuffer value)
1:2457599:     {
1:649a106:         return sizeofUnsignedVInt(value.remaining()) + value.remaining();
1:2457599:     }
1:2457599: 
1:03f72ac:     public static int sizeof(boolean value)
1:70554b2:     {
1:03f72ac:         return BOOL_SIZE;
1:70554b2:     }
1:cb25a8f: 
1:03f72ac:     public static int sizeof(short value)
14:cb25a8f:     {
1:03f72ac:         return SHORT_SIZE;
1:03f72ac:     }
1:cb25a8f: 
1:03f72ac:     public static int sizeof(int value)
1:03f72ac:     {
1:03f72ac:         return INT_SIZE;
1:03f72ac:     }
1:cb25a8f: 
1:03f72ac:     public static int sizeof(long value)
1:03f72ac:     {
1:03f72ac:         return LONG_SIZE;
1:03f72ac:     }
1:90170d1: 
1:03f72ac:     public static int sizeof(UUID value)
1:03f72ac:     {
1:03f72ac:         return UUID_SIZE;
1:03f72ac:     }
1:cb25a8f: 
1:03f72ac:     public static int sizeofVInt(long value)
1:03f72ac:     {
1:03f72ac:         return VIntCoding.computeVIntSize(value);
1:90170d1:     }
1:5786b32: 
1:5786b32:     public static int sizeofUnsignedVInt(long value)
1:5786b32:     {
1:5786b32:         return VIntCoding.computeUnsignedVIntSize(value);
1:5786b32:     }
14:cb25a8f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:649a106
/////////////////////////////////////////////////////////////////////////
1:         return sizeofUnsignedVInt(value.remaining()) + value.remaining();
commit:5786b32
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static int sizeofUnsignedVInt(long value)
1:     {
1:         return VIntCoding.computeUnsignedVIntSize(value);
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:     public static int sizeofWithVIntLength(ByteBuffer value)
1:     {
0:         return sizeofVInt(value.remaining()) + value.remaining();
1:     }
1: 
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: public final class TypeSizes
1: 
1:     private TypeSizes(){}
/////////////////////////////////////////////////////////////////////////
1:     public static int sizeof(String value)
/////////////////////////////////////////////////////////////////////////
1:     public static int sizeofWithShortLength(ByteBuffer value)
1:     public static int sizeofWithLength(ByteBuffer value)
1:     public static int sizeof(boolean value)
1:         return BOOL_SIZE;
1:     public static int sizeof(short value)
1:         return SHORT_SIZE;
1:     }
1:     public static int sizeof(int value)
1:     {
1:         return INT_SIZE;
1:     }
1:     public static int sizeof(long value)
1:     {
1:         return LONG_SIZE;
1:     }
1:     public static int sizeof(UUID value)
1:     {
1:         return UUID_SIZE;
1:     }
1:     public static int sizeofVInt(long value)
1:     {
1:         return VIntCoding.computeVIntSize(value);
commit:1491a40
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.vint.VIntCoding;
1: 
/////////////////////////////////////////////////////////////////////////
0:             return VIntCoding.computeVIntSize(i);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:90170d1
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:     private static final int UUID_SIZE = 16;
0:     public abstract int sizeof(UUID value);
/////////////////////////////////////////////////////////////////////////
1: 
0:         public int sizeof(UUID value)
1:         {
0:             return UUID_SIZE;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
0:         public int sizeof(UUID value)
1:         {
0:             return sizeofVInt(value.getMostSignificantBits()) + sizeofVInt(value.getLeastSignificantBits());
1:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:490a099
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public int sizeofWithShortLength(ByteBuffer value)
1:     {
1:         return sizeof((short) value.remaining()) + value.remaining();
1:     }
1: 
0:     public int sizeofWithLength(ByteBuffer value)
1:     {
1:         return sizeof(value.remaining()) + value.remaining();
1:     }
1: 
commit:70554b2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** assumes UTF8 */
0:     public int sizeof(String value)
1:     {
1:         int length = encodedUTF8Length(value);
1:         assert length <= Short.MAX_VALUE;
1:         return sizeof((short) length) + length;
1:     }
1: 
1:     public static int encodedUTF8Length(String st)
1:     {
1:         int strlen = st.length();
1:         int utflen = 0;
1:         for (int i = 0; i < strlen; i++)
1:         {
1:             int c = st.charAt(i);
1:             if ((c >= 0x0001) && (c <= 0x007F))
1:                 utflen++;
1:             else if (c > 0x07FF)
1:                 utflen += 3;
1:             else
1:                 utflen += 2;
1:         }
1:         return utflen;
1:     }
1: 
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
0: public abstract class TypeSizes
0:     public static final TypeSizes NATIVE = new NativeDBTypeSizes();
0:     public static final TypeSizes VINT = new VIntEncodedTypeSizes();
/////////////////////////////////////////////////////////////////////////
0:     public static class NativeDBTypeSizes extends TypeSizes
/////////////////////////////////////////////////////////////////////////
0:     public static class VIntEncodedTypeSizes extends TypeSizes
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
0: public abstract class DBTypeSizes
1: {
0:     public static final DBTypeSizes NATIVE = new NativeDBTypeSizes();
0:     public static final DBTypeSizes VINT = new VIntEncodedDBTypeSizes();
1: 
1:     private static final int BOOL_SIZE = 1;
1:     private static final int SHORT_SIZE = 2;
1:     private static final int INT_SIZE = 4;
1:     private static final int LONG_SIZE = 8;
1: 
0:     public abstract int sizeof(boolean value);
0:     public abstract int sizeof(short value);
0:     public abstract int sizeof(int value);
0:     public abstract int sizeof(long value);
1: 
0:     public static class NativeDBTypeSizes extends DBTypeSizes
1:     {
0:         public int sizeof(boolean value)
1:         {
0:             return BOOL_SIZE;
1:         }
1: 
0:         public int sizeof(short value)
1:         {
0:             return SHORT_SIZE;
1:         }
1: 
0:         public int sizeof(int value)
1:         {
0:             return INT_SIZE;
1:         }
1: 
0:         public int sizeof(long value)
1:         {
0:             return LONG_SIZE;
1:         }
1:     }
1: 
0:     public static class VIntEncodedDBTypeSizes extends DBTypeSizes
1:     {
1:         private static final int BOOL_SIZE = 1;
1: 
0:         public int sizeofVInt(long i)
1:         {
0:             if (i >= -112 && i <= 127)
0:                 return 1;
1: 
0:             int size = 0;
0:             int len = -112;
0:             if (i < 0)
1:             {
0:                 i ^= -1L; // take one's complement'
0:                 len = -120;
1:             }
0:             long tmp = i;
0:             while (tmp != 0)
1:             {
0:                 tmp = tmp >> 8;
0:                 len--;
1:             }
0:             size++;
0:             len = (len < -120) ? -(len + 120) : -(len + 112);
0:             size += len;
0:             return size;
1:         }
1: 
0:         public int sizeof(long i)
1:         {
0:             return sizeofVInt(i);
1:         }
1: 
0:         public int sizeof(boolean i)
1:         {
0:             return BOOL_SIZE;
1:         }
1: 
0:         public int sizeof(short i)
1:         {
0:             return sizeofVInt(i);
1:         }
1: 
0:         public int sizeof(int i)
1:         {
0:             return sizeofVInt(i);
1:         }
1:     }
1: }
============================================================================