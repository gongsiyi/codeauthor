1:178d7b6: /*
1:178d7b6: * Licensed to the Apache Software Foundation (ASF) under one
1:178d7b6: * or more contributor license agreements.  See the NOTICE file
1:178d7b6: * distributed with this work for additional information
1:178d7b6: * regarding copyright ownership.  The ASF licenses this file
1:178d7b6: * to you under the Apache License, Version 2.0 (the
1:178d7b6: * "License"); you may not use this file except in compliance
1:178d7b6: * with the License.  You may obtain a copy of the License at
1:178d7b6: *
1:178d7b6: *    http://www.apache.org/licenses/LICENSE-2.0
1:178d7b6: *
1:178d7b6: * Unless required by applicable law or agreed to in writing,
1:178d7b6: * software distributed under the License is distributed on an
1:178d7b6: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:178d7b6: * KIND, either express or implied.  See the License for the
1:178d7b6: * specific language governing permissions and limitations
1:178d7b6: * under the License.
1:178d7b6: */
1:178d7b6: package org.apache.cassandra.utils.concurrent;
1:178d7b6: 
1:178d7b6: import java.util.Iterator;
1:178d7b6: 
1:178d7b6: import org.junit.Test;
1:178d7b6: 
1:178d7b6: import static org.junit.Assert.*;
1:178d7b6: 
1:178d7b6: public class AccumulatorTest
1:178d7b6: {
1:178d7b6:     @Test
1:178d7b6:     public void testAddMoreThanCapacity()
1:178d7b6:     {
1:178d7b6:         Accumulator<Integer> accu = new Accumulator(4);
1:178d7b6: 
1:178d7b6:         accu.add(1);
1:178d7b6:         accu.add(2);
1:178d7b6:         accu.add(3);
1:178d7b6:         accu.add(4);
1:178d7b6: 
1:178d7b6:         try
1:178d7b6:         {
1:178d7b6:             accu.add(5);
1:178d7b6:             fail();
1:178d7b6:         }
1:178d7b6:         catch (IllegalStateException e)
1:178d7b6:         {
1:178d7b6:             // Expected
1:178d7b6:         }
1:178d7b6:     }
1:178d7b6: 
1:178d7b6:     @Test
1:178d7b6:     public void testIsEmptyAndSize()
1:178d7b6:     {
1:178d7b6:         Accumulator<Integer> accu = new Accumulator(4);
1:178d7b6: 
1:178d7b6:         assertTrue(accu.isEmpty());
1:178d7b6:         assertEquals(0, accu.size());
1:178d7b6: 
1:178d7b6:         accu.add(1);
1:178d7b6:         accu.add(2);
1:178d7b6: 
1:178d7b6:         assertTrue(!accu.isEmpty());
1:178d7b6:         assertEquals(2, accu.size());
1:178d7b6: 
1:178d7b6:         accu.add(3);
1:178d7b6:         accu.add(4);
1:178d7b6: 
1:178d7b6:         assertTrue(!accu.isEmpty());
1:178d7b6:         assertEquals(4, accu.size());
1:178d7b6:     }
1:178d7b6: 
1:178d7b6:     @Test
1:178d7b6:     public void testGetAndIterator()
1:178d7b6:     {
1:178d7b6:         Accumulator<String> accu = new Accumulator(4);
1:178d7b6: 
1:178d7b6:         accu.add("3");
1:178d7b6:         accu.add("2");
1:178d7b6:         accu.add("4");
1:178d7b6: 
1:178d7b6:         assertEquals("3", accu.get(0));
1:178d7b6:         assertEquals("2", accu.get(1));
1:178d7b6:         assertEquals("4", accu.get(2));
1:178d7b6: 
1:178d7b6:         try
1:178d7b6:         {
1:178d7b6:             assertEquals(null, accu.get(3));
1:178d7b6:             fail();
1:178d7b6:         }
1:178d7b6:         catch (IndexOutOfBoundsException e)
1:178d7b6:         {
1:178d7b6:             // Expected
1:178d7b6:         }
1:178d7b6: 
1:178d7b6:         accu.add("0");
1:178d7b6: 
1:178d7b6:         assertEquals("0", accu.get(3));
1:178d7b6: 
1:178d7b6:         Iterator<String> iter = accu.iterator();
1:178d7b6: 
1:178d7b6:         assertEquals("3", iter.next());
1:178d7b6:         assertEquals("2", iter.next());
1:178d7b6:         assertEquals("4", iter.next());
1:178d7b6:         assertEquals("0", iter.next());
1:178d7b6:         assertFalse(iter.hasNext());
1:178d7b6:     }
1:178d7b6: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:178d7b6
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.Iterator;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class AccumulatorTest
1: {
1:     @Test
1:     public void testAddMoreThanCapacity()
1:     {
1:         Accumulator<Integer> accu = new Accumulator(4);
1: 
1:         accu.add(1);
1:         accu.add(2);
1:         accu.add(3);
1:         accu.add(4);
1: 
1:         try
1:         {
1:             accu.add(5);
1:             fail();
1:         }
1:         catch (IllegalStateException e)
1:         {
1:             // Expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testIsEmptyAndSize()
1:     {
1:         Accumulator<Integer> accu = new Accumulator(4);
1: 
1:         assertTrue(accu.isEmpty());
1:         assertEquals(0, accu.size());
1: 
1:         accu.add(1);
1:         accu.add(2);
1: 
1:         assertTrue(!accu.isEmpty());
1:         assertEquals(2, accu.size());
1: 
1:         accu.add(3);
1:         accu.add(4);
1: 
1:         assertTrue(!accu.isEmpty());
1:         assertEquals(4, accu.size());
1:     }
1: 
1:     @Test
1:     public void testGetAndIterator()
1:     {
1:         Accumulator<String> accu = new Accumulator(4);
1: 
1:         accu.add("3");
1:         accu.add("2");
1:         accu.add("4");
1: 
1:         assertEquals("3", accu.get(0));
1:         assertEquals("2", accu.get(1));
1:         assertEquals("4", accu.get(2));
1: 
1:         try
1:         {
1:             assertEquals(null, accu.get(3));
1:             fail();
1:         }
1:         catch (IndexOutOfBoundsException e)
1:         {
1:             // Expected
1:         }
1: 
1:         accu.add("0");
1: 
1:         assertEquals("0", accu.get(3));
1: 
1:         Iterator<String> iter = accu.iterator();
1: 
1:         assertEquals("3", iter.next());
1:         assertEquals("2", iter.next());
1:         assertEquals("4", iter.next());
1:         assertEquals("0", iter.next());
1:         assertFalse(iter.hasNext());
1:     }
1: }
============================================================================