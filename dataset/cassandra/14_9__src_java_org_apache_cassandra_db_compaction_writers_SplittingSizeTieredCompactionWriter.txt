1:910170c: /*
1:910170c:  * Licensed to the Apache Software Foundation (ASF) under one
1:910170c:  * or more contributor license agreements.  See the NOTICE file
1:910170c:  * distributed with this work for additional information
1:910170c:  * regarding copyright ownership.  The ASF licenses this file
1:910170c:  * to you under the Apache License, Version 2.0 (the
1:910170c:  * "License"); you may not use this file except in compliance
1:910170c:  * with the License.  You may obtain a copy of the License at
1:910170c:  *
1:910170c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:910170c:  *
1:910170c:  * Unless required by applicable law or agreed to in writing, software
1:910170c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:910170c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:910170c:  * See the License for the specific language governing permissions and
1:910170c:  * limitations under the License.
1:910170c:  */
1:910170c: package org.apache.cassandra.db.compaction.writers;
4:910170c: 
1:910170c: import java.util.Arrays;
1:910170c: import java.util.Set;
1:910170c: 
1:910170c: import org.slf4j.Logger;
1:910170c: import org.slf4j.LoggerFactory;
1:910170c: 
1:910170c: import org.apache.cassandra.db.ColumnFamilyStore;
1:9ed2727: import org.apache.cassandra.db.Directories;
1:910170c: import org.apache.cassandra.db.RowIndexEntry;
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:a991b64: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1:e5a76bd: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:910170c: import org.apache.cassandra.io.sstable.Descriptor;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:910170c: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1:910170c: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:910170c: 
1:910170c: /**
1:910170c:  * CompactionAwareWriter that splits input in differently sized sstables
1:910170c:  *
1:910170c:  * Biggest sstable will be total_compaction_size / 2, second biggest total_compaction_size / 4 etc until
1:910170c:  * the result would be sub 50MB, all those are put in the same
1:910170c:  */
1:910170c: public class SplittingSizeTieredCompactionWriter extends CompactionAwareWriter
3:910170c: {
1:910170c:     private static final Logger logger = LoggerFactory.getLogger(SplittingSizeTieredCompactionWriter.class);
1:910170c: 
1:e87008b:     public static final long DEFAULT_SMALLEST_SSTABLE_BYTES = 50_000_000;
1:910170c:     private final double[] ratios;
1:910170c:     private final long totalSize;
1:910170c:     private final Set<SSTableReader> allSSTables;
1:910170c:     private long currentBytesToWrite;
1:910170c:     private int currentRatioIndex = 0;
1:e2c6341:     private Directories.DataDirectory location;
1:910170c: 
1:9ed2727:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
1:910170c:     {
1:9ed2727:         this(cfs, directories, txn, nonExpiredSSTables, DEFAULT_SMALLEST_SSTABLE_BYTES);
1:e2c6341:     }
1:910170c: 
1:9ed2727:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, long smallestSSTable)
1:910170c:     {
1:9ed2727:         super(cfs, directories, txn, nonExpiredSSTables, false, false);
1:e5a76bd:         this.allSSTables = txn.originals();
1:b09e60f:         totalSize = cfs.getExpectedCompactedFileSize(nonExpiredSSTables, txn.opType());
1:910170c:         double[] potentialRatios = new double[20];
1:910170c:         double currentRatio = 1;
1:910170c:         for (int i = 0; i < potentialRatios.length; i++)
1:910170c:         {
1:910170c:             currentRatio /= 2;
1:910170c:             potentialRatios[i] = currentRatio;
3:910170c:         }
1:910170c: 
1:910170c:         int noPointIndex = 0;
1:910170c:         // find how many sstables we should create - 50MB min sstable size
1:910170c:         for (double ratio : potentialRatios)
1:910170c:         {
1:910170c:             noPointIndex++;
1:910170c:             if (ratio * totalSize < smallestSSTable)
1:910170c:             {
1:910170c:                 break;
1:910170c:             }
1:910170c:         }
1:910170c:         ratios = Arrays.copyOfRange(potentialRatios, 0, noPointIndex);
1:910170c:         currentBytesToWrite = Math.round(totalSize * ratios[currentRatioIndex]);
1:910170c:     }
1:910170c: 
1:e2c6341:     @Override
1:9ed2727:     public boolean realAppend(UnfilteredRowIterator partition)
1:e2c6341:     {
1:a991b64:         RowIndexEntry rie = sstableWriter.append(partition);
1:0f1e838:         if (sstableWriter.currentWriter().getEstimatedOnDiskBytesWritten() > currentBytesToWrite && currentRatioIndex < ratios.length - 1) // if we underestimate how many keys we have, the last sstable might get more than we expect
1:910170c:         {
1:910170c:             currentRatioIndex++;
1:910170c:             currentBytesToWrite = Math.round(totalSize * ratios[currentRatioIndex]);
1:e2c6341:             switchCompactionLocation(location);
1:e2c6341:             logger.debug("Switching writer, currentBytesToWrite = {}", currentBytesToWrite);
1:910170c:         }
1:910170c:         return rie != null;
1:910170c:     }
1:910170c: 
1:e2c6341:     @Override
1:9ed2727:     public void switchCompactionLocation(Directories.DataDirectory location)
1:910170c:     {
1:e2c6341:         this.location = location;
1:910170c:         long currentPartitionsToWrite = Math.round(ratios[currentRatioIndex] * estimatedTotalKeys);
1:6a4d106:         @SuppressWarnings("resource")
1:9ed2727:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(location))),
2:910170c:                                                     currentPartitionsToWrite,
2:910170c:                                                     minRepairedAt,
2:910170c:                                                     cfs.metadata,
1:9ed2727:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
1:9ed2727:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
1:f81a91d:                                                     cfs.indexManager.listIndexes(),
1:9ed2727:                                                     txn);
1:4a849ef:         logger.trace("Switching writer, currentPartitionsToWrite = {}", currentPartitionsToWrite);
2:910170c:         sstableWriter.switchWriter(writer);
1:910170c:     }
1:910170c: }
============================================================================
author:Tom Petracca
-------------------------------------------------------------------------------
commit:0f1e838
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (sstableWriter.currentWriter().getEstimatedOnDiskBytesWritten() > currentBytesToWrite && currentRatioIndex < ratios.length - 1) // if we underestimate how many keys we have, the last sstable might get more than we expect
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:6a4d106
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource")
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:2952500
/////////////////////////////////////////////////////////////////////////
commit:e2c6341
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     private Directories.DataDirectory location;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             switchCompactionLocation(location);
1:             logger.debug("Switching writer, currentBytesToWrite = {}", currentBytesToWrite);
1:     @Override
1:         this.location = location;
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @Override
0:     public List<SSTableReader> finish(long repairedAt)
1:     {
0:         return sstableWriter.setRepairedAt(repairedAt).finish();
commit:e87008b
/////////////////////////////////////////////////////////////////////////
1:     public static final long DEFAULT_SMALLEST_SSTABLE_BYTES = 50_000_000;
commit:910170c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction.writers;
1: 
0: import java.io.File;
1: import java.util.Arrays;
0: import java.util.List;
1: import java.util.Set;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.RowIndexEntry;
0: import org.apache.cassandra.db.compaction.AbstractCompactedRow;
0: import org.apache.cassandra.db.compaction.CompactionTask;
0: import org.apache.cassandra.db.compaction.OperationType;
1: import org.apache.cassandra.io.sstable.Descriptor;
0: import org.apache.cassandra.io.sstable.SSTableRewriter;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.format.SSTableWriter;
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1: 
1: /**
1:  * CompactionAwareWriter that splits input in differently sized sstables
1:  *
1:  * Biggest sstable will be total_compaction_size / 2, second biggest total_compaction_size / 4 etc until
1:  * the result would be sub 50MB, all those are put in the same
1:  */
1: public class SplittingSizeTieredCompactionWriter extends CompactionAwareWriter
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(SplittingSizeTieredCompactionWriter.class);
1: 
0:     private static final long DEFAULT_SMALLEST_SSTABLE_BYTES = 50_000_000;
1:     private final double[] ratios;
0:     private final SSTableRewriter sstableWriter;
1:     private final long totalSize;
1:     private final Set<SSTableReader> allSSTables;
1:     private long currentBytesToWrite;
1:     private int currentRatioIndex = 0;
1: 
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables, OperationType compactionType)
1:     {
0:         this(cfs, allSSTables, nonExpiredSSTables, compactionType, DEFAULT_SMALLEST_SSTABLE_BYTES);
1:     }
1: 
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables, OperationType compactionType, long smallestSSTable)
1:     {
0:         super(cfs, nonExpiredSSTables);
0:         this.allSSTables = allSSTables;
0:         totalSize = cfs.getExpectedCompactedFileSize(nonExpiredSSTables, compactionType);
1:         double[] potentialRatios = new double[20];
1:         double currentRatio = 1;
1:         for (int i = 0; i < potentialRatios.length; i++)
1:         {
1:             currentRatio /= 2;
1:             potentialRatios[i] = currentRatio;
1:         }
1: 
1:         int noPointIndex = 0;
1:         // find how many sstables we should create - 50MB min sstable size
1:         for (double ratio : potentialRatios)
1:         {
1:             noPointIndex++;
1:             if (ratio * totalSize < smallestSSTable)
1:             {
1:                 break;
1:             }
1:         }
1:         ratios = Arrays.copyOfRange(potentialRatios, 0, noPointIndex);
0:         sstableWriter = new SSTableRewriter(cfs, allSSTables, CompactionTask.getMaxDataAge(nonExpiredSSTables), false);
0:         File sstableDirectory = cfs.directories.getLocationForDisk(getWriteDirectory(Math.round(totalSize * ratios[currentRatioIndex])));
0:         long currentPartitionsToWrite = Math.round(estimatedTotalKeys * ratios[currentRatioIndex]);
1:         currentBytesToWrite = Math.round(totalSize * ratios[currentRatioIndex]);
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getTempSSTablePath(sstableDirectory)),
1:                                                                             currentPartitionsToWrite,
1:                                                                             minRepairedAt,
1:                                                                             cfs.metadata,
0:                                                                             cfs.partitioner,
0:                                                                             new MetadataCollector(allSSTables, cfs.metadata.comparator, 0));
1: 
1:         sstableWriter.switchWriter(writer);
0:         logger.debug("Ratios={}, expectedKeys = {}, totalSize = {}, currentPartitionsToWrite = {}, currentBytesToWrite = {}", ratios, estimatedTotalKeys, totalSize, currentPartitionsToWrite, currentBytesToWrite);
1:     }
1: 
0:     @Override
0:     public boolean append(AbstractCompactedRow row)
1:     {
0:         RowIndexEntry rie = sstableWriter.append(row);
0:         if (sstableWriter.currentWriter().getOnDiskFilePointer() > currentBytesToWrite && currentRatioIndex < ratios.length - 1) // if we underestimate how many keys we have, the last sstable might get more than we expect
1:         {
1:             currentRatioIndex++;
1:             currentBytesToWrite = Math.round(totalSize * ratios[currentRatioIndex]);
1:             long currentPartitionsToWrite = Math.round(ratios[currentRatioIndex] * estimatedTotalKeys);
0:             File sstableDirectory = cfs.directories.getLocationForDisk(getWriteDirectory(Math.round(totalSize * ratios[currentRatioIndex])));
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getTempSSTablePath(sstableDirectory)),
1:                                                                                 currentPartitionsToWrite,
1:                                                                                 minRepairedAt,
1:                                                                                 cfs.metadata,
0:                                                                                 cfs.partitioner,
0:                                                                                 new MetadataCollector(allSSTables, cfs.metadata.comparator, 0));
1:             sstableWriter.switchWriter(writer);
0:             logger.debug("Switching writer, currentPartitionsToWrite = {}", currentPartitionsToWrite);
1:         }
1:         return rie != null;
1:     }
1: 
1: 
0:     @Override
0:     public void abort()
1:     {
0:         sstableWriter.abort();
1:     }
1: 
0:     @Override
0:     public List<SSTableReader> finish()
1:     {
0:         return sstableWriter.finish();
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
1:                                                     cfs.indexManager.listIndexes(),
author:blerer
-------------------------------------------------------------------------------
commit:aa60cde
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
0:         logger.trace("Ratios={}, expectedKeys = {}, totalSize = {}, currentPartitionsToWrite = {}, currentBytesToWrite = {}", ratios, estimatedTotalKeys, totalSize, currentPartitionsToWrite, currentBytesToWrite);
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Switching writer, currentPartitionsToWrite = {}", currentPartitionsToWrite);
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
1:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
1:         this(cfs, directories, txn, nonExpiredSSTables, DEFAULT_SMALLEST_SSTABLE_BYTES);
1:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, long smallestSSTable)
1:         super(cfs, directories, txn, nonExpiredSSTables, false, false);
/////////////////////////////////////////////////////////////////////////
0:         switchCompactionLocation(getWriteDirectory(currentBytesToWrite));
1:     public boolean realAppend(UnfilteredRowIterator partition)
0:             switchCompactionLocation(getWriteDirectory(Math.round(totalSize * ratios[currentRatioIndex])));
0: 
1:     public void switchCompactionLocation(Directories.DataDirectory location)
0:     {
0:         long currentPartitionsToWrite = Math.round(ratios[currentRatioIndex] * estimatedTotalKeys);
0:         @SuppressWarnings("resource")
1:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(getDirectories().getLocationForDisk(location))),
0:                                                     currentPartitionsToWrite,
0:                                                     minRepairedAt,
0:                                                     cfs.metadata,
1:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
1:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
1:                                                     txn);
0:         logger.debug("Switching writer, currentPartitionsToWrite = {}", currentPartitionsToWrite);
0:         sstableWriter.switchWriter(writer);
0: 
0:     }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:605bcdc
/////////////////////////////////////////////////////////////////////////
0:         super(cfs, txn, nonExpiredSSTables, false, false);
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables)
0:         this(cfs, txn, nonExpiredSSTables, DEFAULT_SMALLEST_SSTABLE_BYTES);
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, long smallestSSTable)
1:         totalSize = cfs.getExpectedCompactedFileSize(nonExpiredSSTables, txn.opType());
/////////////////////////////////////////////////////////////////////////
0:         SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
0:                                                     currentPartitionsToWrite,
0:                                                     minRepairedAt,
0:                                                     cfs.metadata,
0:                                                     cfs.partitioner,
0:                                                     new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
0:                                                     SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
0:                                                     txn);
/////////////////////////////////////////////////////////////////////////
0:             SSTableWriter writer = SSTableWriter.create(Descriptor.fromFilename(cfs.getSSTablePath(sstableDirectory)),
0:                                                         currentPartitionsToWrite,
0:                                                         minRepairedAt,
0:                                                         cfs.metadata,
0:                                                         cfs.partitioner,
0:                                                         new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
0:                                                         SerializationHeader.make(cfs.metadata, nonExpiredSSTables),
0:                                                         txn);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:                                                     cfs.partitioner,
/////////////////////////////////////////////////////////////////////////
0:                                                         cfs.partitioner,
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SerializationHeader;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
/////////////////////////////////////////////////////////////////////////
0:                                                                             new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
0:                                                                             SerializationHeader.make(cfs.metadata, nonExpiredSSTables));
0:     public boolean append(UnfilteredRowIterator partition)
1:         RowIndexEntry rie = sstableWriter.append(partition);
/////////////////////////////////////////////////////////////////////////
0:                                                                                 new MetadataCollector(allSSTables, cfs.metadata.comparator, 0),
0:                                                                                 SerializationHeader.make(cfs.metadata, nonExpiredSSTables));
0: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
0:             @SuppressWarnings("resource")
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
/////////////////////////////////////////////////////////////////////////
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, OperationType compactionType)
0:         this(cfs, txn, nonExpiredSSTables, compactionType, DEFAULT_SMALLEST_SSTABLE_BYTES);
0:     public SplittingSizeTieredCompactionWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables, OperationType compactionType, long smallestSSTable)
0:         super(cfs, txn, nonExpiredSSTables, false);
1:         this.allSSTables = txn.originals();
commit:8704006
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         super(cfs, allSSTables, nonExpiredSSTables, false);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================