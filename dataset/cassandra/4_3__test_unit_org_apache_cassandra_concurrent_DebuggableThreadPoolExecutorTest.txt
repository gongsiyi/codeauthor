1:e8fa865: package org.apache.cassandra.concurrent;
1:e8fa865: /*
1:e8fa865:  *
1:e8fa865:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8fa865:  * or more contributor license agreements.  See the NOTICE file
1:e8fa865:  * distributed with this work for additional information
1:e8fa865:  * regarding copyright ownership.  The ASF licenses this file
1:e8fa865:  * to you under the Apache License, Version 2.0 (the
1:e8fa865:  * "License"); you may not use this file except in compliance
1:e8fa865:  * with the License.  You may obtain a copy of the License at
1:e8fa865:  *
1:e8fa865:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8fa865:  *
1:e8fa865:  * Unless required by applicable law or agreed to in writing,
1:e8fa865:  * software distributed under the License is distributed on an
1:e8fa865:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8fa865:  * KIND, either express or implied.  See the License for the
1:e8fa865:  * specific language governing permissions and limitations
1:e8fa865:  * under the License.
1:e8fa865:  *
1:e8fa865:  */
1:e8fa865: 
1:e8fa865: 
1:e8fa865: import java.util.concurrent.LinkedBlockingQueue;
1:e8fa865: import java.util.concurrent.TimeUnit;
1:e8fa865: 
1:9797511: import org.junit.BeforeClass;
1:e8fa865: import org.junit.Test;
1:e8fa865: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:e8fa865: import org.apache.cassandra.utils.WrappedRunnable;
1:e8fa865: 
1:e8fa865: public class DebuggableThreadPoolExecutorTest
1:e8fa865: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:e8fa865:     @Test
1:9639f95:     public void testSerialization()
1:e8fa865:     {
1:e8fa865:         LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1);
1:e8fa865:         DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1,
1:e8fa865:                                                                                  Integer.MAX_VALUE,
1:e8fa865:                                                                                  TimeUnit.MILLISECONDS,
1:e8fa865:                                                                                  q,
1:e8fa865:                                                                                  new NamedThreadFactory("TEST"));
1:e8fa865:         WrappedRunnable runnable = new WrappedRunnable()
1:e8fa865:         {
1:e8fa865:             public void runMayThrow() throws InterruptedException
1:e8fa865:             {
1:e8fa865:                 Thread.sleep(50);
1:e8fa865:             }
1:e8fa865:         };
1:1d2c122:         long start = System.nanoTime();
1:e8fa865:         for (int i = 0; i < 10; i++)
1:e8fa865:         {
1:569feed:             executor.execute(runnable);
1:e8fa865:         }
1:e8fa865:         assert q.size() > 0 : q.size();
1:e8fa865:         while (executor.getCompletedTaskCount() < 10)
1:e8fa865:             continue;
1:1d2c122:         long delta = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:e8fa865:         assert delta >= 9 * 50 : delta;
1:e8fa865:     }
1:e8fa865: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9639f95
/////////////////////////////////////////////////////////////////////////
1:     public void testSerialization()
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
1:         long start = System.nanoTime();
/////////////////////////////////////////////////////////////////////////
1:         long delta = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
commit:4ef269d
/////////////////////////////////////////////////////////////////////////
commit:569feed
/////////////////////////////////////////////////////////////////////////
1:             executor.execute(runnable);
commit:e8fa865
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.concurrent;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.utils.WrappedRunnable;
1: 
1: public class DebuggableThreadPoolExecutorTest
1: {
1:     @Test
0:     public void testSerialization() throws InterruptedException
1:     {
1:         LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1);
1:         DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1,
0:                                                                                  1,
1:                                                                                  Integer.MAX_VALUE,
1:                                                                                  TimeUnit.MILLISECONDS,
1:                                                                                  q,
1:                                                                                  new NamedThreadFactory("TEST"));
1:         WrappedRunnable runnable = new WrappedRunnable()
1:         {
1:             public void runMayThrow() throws InterruptedException
1:             {
1:                 Thread.sleep(50);
1:             }
1:         };
0:         long start = System.currentTimeMillis();
1:         for (int i = 0; i < 10; i++)
1:         {
0:             executor.submit(runnable);
1:         }
1:         assert q.size() > 0 : q.size();
1:         while (executor.getCompletedTaskCount() < 10)
1:             continue;
0:         long delta = System.currentTimeMillis() - start;
1:         assert delta >= 9 * 50 : delta;
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
============================================================================