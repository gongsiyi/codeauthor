1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
1:5151169:  */
1:5151169: package org.apache.cassandra.streaming.messages;
1:5151169: 
1:5151169: import java.io.*;
1:5151169: import java.nio.channels.Channels;
1:5151169: import java.nio.channels.ReadableByteChannel;
1:5151169: import java.util.ArrayList;
1:5151169: import java.util.Collection;
1:5151169: 
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
1:16499ca: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1:5151169: import org.apache.cassandra.streaming.StreamRequest;
1:5151169: import org.apache.cassandra.streaming.StreamSession;
1:5151169: import org.apache.cassandra.streaming.StreamSummary;
1:5151169: 
1:5151169: public class PrepareMessage extends StreamMessage
1:5151169: {
1:5151169:     public static Serializer<PrepareMessage> serializer = new Serializer<PrepareMessage>()
1:5151169:     {
1:127f7c5:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
1:5151169:         public PrepareMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:5151169:         {
1:03f72ac:             DataInputPlus input = new DataInputStreamPlus(Channels.newInputStream(in));
1:5151169:             PrepareMessage message = new PrepareMessage();
1:5151169:             // requests
1:5151169:             int numRequests = input.readInt();
1:5151169:             for (int i = 0; i < numRequests; i++)
1:5151169:                 message.requests.add(StreamRequest.serializer.deserialize(input, version));
1:5151169:             // summaries
1:5151169:             int numSummaries = input.readInt();
1:5151169:             for (int i = 0; i < numSummaries; i++)
1:5151169:                 message.summaries.add(StreamSummary.serializer.deserialize(input, version));
1:5151169:             return message;
1:5151169:         }
1:5151169: 
1:16499ca:         public void serialize(PrepareMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
1:5151169:         {
1:5151169:             // requests
1:75508ec:             out.writeInt(message.requests.size());
1:5151169:             for (StreamRequest request : message.requests)
1:75508ec:                 StreamRequest.serializer.serialize(request, out, version);
1:5151169:             // summaries
1:75508ec:             out.writeInt(message.summaries.size());
1:5151169:             for (StreamSummary summary : message.summaries)
1:75508ec:                 StreamSummary.serializer.serialize(summary, out, version);
1:5151169:         }
1:5151169:     };
1:5151169: 
1:5151169:     /**
1:5151169:      * Streaming requests
1:5151169:      */
1:5151169:     public final Collection<StreamRequest> requests = new ArrayList<>();
1:5151169: 
1:5151169:     /**
1:5151169:      * Summaries of streaming out
1:5151169:      */
1:5151169:     public final Collection<StreamSummary> summaries = new ArrayList<>();
1:5151169: 
1:5151169:     public PrepareMessage()
1:5151169:     {
1:5151169:         super(Type.PREPARE);
1:5151169:     }
1:5151169: 
1:5151169:     @Override
1:5151169:     public String toString()
1:5151169:     {
1:1e73b33:         final StringBuilder sb = new StringBuilder("Prepare (");
1:5151169:         sb.append(requests.size()).append(" requests, ");
1:5151169:         int totalFile = 0;
1:5151169:         for (StreamSummary summary : summaries)
1:5151169:             totalFile += summary.files;
1:1e73b33:         sb.append(" ").append(totalFile).append(" files");
1:5151169:         sb.append('}');
1:5151169:         return sb.toString();
1:5151169:     }
1:5151169: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:127f7c5
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
commit:e777301
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("resource") // Not closing constructed DataInputPlus's as the channel needs to remain open.
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:             DataInputPlus input = new DataInputStreamPlus(Channels.newInputStream(in));
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputStreamPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(PrepareMessage message, DataOutputStreamPlus out, int version, StreamSession session) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataOutputPlus;
0: import org.apache.cassandra.io.util.DataOutputStreamAndChannel;
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(PrepareMessage message, DataOutputStreamAndChannel out, int version, StreamSession session) throws IOException
1:             out.writeInt(message.requests.size());
1:                 StreamRequest.serializer.serialize(request, out, version);
1:             out.writeInt(message.summaries.size());
1:                 StreamSummary.serializer.serialize(summary, out, version);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:1e73b33
/////////////////////////////////////////////////////////////////////////
1:         final StringBuilder sb = new StringBuilder("Prepare (");
1:         sb.append(" ").append(totalFile).append(" files");
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.messages;
1: 
1: import java.io.*;
1: import java.nio.channels.Channels;
1: import java.nio.channels.ReadableByteChannel;
0: import java.nio.channels.WritableByteChannel;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: import org.apache.cassandra.streaming.StreamRequest;
1: import org.apache.cassandra.streaming.StreamSession;
1: import org.apache.cassandra.streaming.StreamSummary;
1: 
1: public class PrepareMessage extends StreamMessage
1: {
1:     public static Serializer<PrepareMessage> serializer = new Serializer<PrepareMessage>()
1:     {
1:         public PrepareMessage deserialize(ReadableByteChannel in, int version, StreamSession session) throws IOException
1:         {
0:             DataInput input = new DataInputStream(Channels.newInputStream(in));
1:             PrepareMessage message = new PrepareMessage();
1:             // requests
1:             int numRequests = input.readInt();
1:             for (int i = 0; i < numRequests; i++)
1:                 message.requests.add(StreamRequest.serializer.deserialize(input, version));
1:             // summaries
1:             int numSummaries = input.readInt();
1:             for (int i = 0; i < numSummaries; i++)
1:                 message.summaries.add(StreamSummary.serializer.deserialize(input, version));
1:             return message;
1:         }
1: 
0:         public void serialize(PrepareMessage message, WritableByteChannel out, int version, StreamSession session) throws IOException
1:         {
0:             DataOutput output = new DataOutputStream(Channels.newOutputStream(out));
1:             // requests
0:             output.writeInt(message.requests.size());
1:             for (StreamRequest request : message.requests)
0:                 StreamRequest.serializer.serialize(request, output, version);
1:             // summaries
0:             output.writeInt(message.summaries.size());
1:             for (StreamSummary summary : message.summaries)
0:                 StreamSummary.serializer.serialize(summary, output, version);
1:         }
1:     };
1: 
1:     /**
1:      * Streaming requests
1:      */
1:     public final Collection<StreamRequest> requests = new ArrayList<>();
1: 
1:     /**
1:      * Summaries of streaming out
1:      */
1:     public final Collection<StreamSummary> summaries = new ArrayList<>();
1: 
1:     public PrepareMessage()
1:     {
1:         super(Type.PREPARE);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         final StringBuilder sb = new StringBuilder("PrepareMessage{");
1:         sb.append(requests.size()).append(" requests, ");
1:         int totalFile = 0;
1:         for (StreamSummary summary : summaries)
1:             totalFile += summary.files;
0:         sb.append(totalFile).append(" files receiving");
1:         sb.append('}');
1:         return sb.toString();
1:     }
1: }
============================================================================