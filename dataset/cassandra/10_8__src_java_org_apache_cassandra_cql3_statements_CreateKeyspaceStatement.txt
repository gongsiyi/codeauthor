1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
1:655ccc3:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.cql3.statements;
8:655ccc3: 
1:01d26dd: import java.util.regex.Pattern;
1:e31e216: 
1:9072757: import org.apache.cassandra.auth.*;
1:655ccc3: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:9072757: import org.apache.cassandra.exceptions.*;
1:31e3f61: import org.apache.cassandra.locator.LocalStrategy;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:9072757: import org.apache.cassandra.service.*;
1:655ccc3: import org.apache.cassandra.thrift.ThriftValidation;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:769fe89: 
1:655ccc3: /** A <code>CREATE KEYSPACE</code> statement parsed from a CQL query. */
1:655ccc3: public class CreateKeyspaceStatement extends SchemaAlteringStatement
1:769fe89: {
1:01d26dd:     private static final Pattern PATTERN_WORD_CHARS = Pattern.compile("\\w+");
1:01d26dd: 
1:655ccc3:     private final String name;
1:31e3f61:     private final KeyspaceAttributes attrs;
1:b73f9d4:     private final boolean ifNotExists;
1:769fe89: 
1:655ccc3:     /**
1:655ccc3:      * Creates a new <code>CreateKeyspaceStatement</code> instance for a given
1:655ccc3:      * keyspace name and keyword arguments.
1:655ccc3:      *
1:655ccc3:      * @param name the name of the keyspace to create
1:655ccc3:      * @param attrs map of the raw keyword arguments that followed the <code>WITH</code> keyword.
1:655ccc3:      */
1:31e3f61:     public CreateKeyspaceStatement(String name, KeyspaceAttributes attrs, boolean ifNotExists)
1:655ccc3:     {
1:655ccc3:         super();
1:655ccc3:         this.name = name;
1:655ccc3:         this.attrs = attrs;
1:b73f9d4:         this.ifNotExists = ifNotExists;
1:769fe89:     }
1:11f7d72: 
1:11f7d72:     @Override
1:11f7d72:     public String keyspace()
1:11f7d72:     {
1:11f7d72:         return name;
1:11f7d72:     }
1:11f7d72: 
1:5b0ec50:     public void checkAccess(ClientState state) throws UnauthorizedException
1:11f7d72:     {
1:5a3eb1a:         state.hasAllKeyspacesAccess(Permission.CREATE);
1:11f7d72:     }
1:769fe89: 
1:655ccc3:     /**
1:655ccc3:      * The <code>CqlParser</code> only goes as far as extracting the keyword arguments
1:655ccc3:      * from these statements, so this method is responsible for processing and
1:655ccc3:      * validating.
1:655ccc3:      *
1:655ccc3:      * @throws InvalidRequestException if arguments are missing or unacceptable
1:655ccc3:      */
1:3a2faf9:     public void validate(ClientState state) throws RequestValidationException
1:655ccc3:     {
1:655ccc3:         ThriftValidation.validateKeyspaceNotSystem(name);
1:769fe89: 
1:655ccc3:         // keyspace name
1:01d26dd:         if (!PATTERN_WORD_CHARS.matcher(name).matches())
1:655ccc3:             throw new InvalidRequestException(String.format("\"%s\" is not a valid keyspace name", name));
1:9797511:         if (name.length() > SchemaConstants.NAME_LENGTH)
1:9797511:             throw new InvalidRequestException(String.format("Keyspace names shouldn't be more than %s characters long (got \"%s\")", SchemaConstants.NAME_LENGTH, name));
1:769fe89: 
1:2ce7b9b:         attrs.validate();
1:2ce7b9b: 
1:2ce7b9b:         if (attrs.getReplicationStrategyClass() == null)
1:2ce7b9b:             throw new ConfigurationException("Missing mandatory replication strategy class");
1:655ccc3: 
1:c315745:         // The strategy is validated through KSMetaData.validate() in announceNewKeyspace below.
1:c315745:         // However, for backward compatibility with thrift, this doesn't validate unexpected options yet,
1:c315745:         // so doing proper validation here.
1:31e3f61:         KeyspaceParams params = attrs.asNewKeyspaceParams();
1:31e3f61:         params.validate(name);
1:31e3f61:         if (params.replication.klass.equals(LocalStrategy.class))
1:31e3f61:             throw new ConfigurationException("Unable to use given strategy class: LocalStrategy is reserved for internal use.");
1:655ccc3:     }
1:655ccc3: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:655ccc3:     {
1:a89597d:         KeyspaceMetadata ksm = KeyspaceMetadata.create(name, attrs.asNewKeyspaceParams());
1:b73f9d4:         try
1:b73f9d4:         {
1:31e3f61:             MigrationManager.announceNewKeyspace(ksm, isLocalOnly);
1:2cbd776:             return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, keyspace());
1:b73f9d4:         }
1:b73f9d4:         catch (AlreadyExistsException e)
1:b73f9d4:         {
1:e4d5eda:             if (ifNotExists)
1:2cbd776:                 return null;
1:b73f9d4:             throw e;
1:b73f9d4:         }
1:655ccc3:     }
1:2ce7b9b: 
1:9072757:     protected void grantPermissionsToCreator(QueryState state)
1:655ccc3:     {
1:655ccc3:         try
1:655ccc3:         {
1:cb5897f:             RoleResource role = RoleResource.role(state.getClientState().getUser().getName());
1:cb5897f:             DataResource keyspace = DataResource.keyspace(keyspace());
1:9072757:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:cb5897f:                                                      keyspace.applicablePermissions(),
1:cb5897f:                                                      keyspace,
1:cb5897f:                                                      role);
1:cb5897f:             FunctionResource functions = FunctionResource.keyspace(keyspace());
1:cb5897f:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:cb5897f:                                                      functions.applicablePermissions(),
1:cb5897f:                                                      functions,
1:cb5897f:                                                      role);
1:655ccc3:         }
1:9072757:         catch (RequestExecutionException e)
1:655ccc3:         {
1:9072757:             throw new RuntimeException(e);
1:655ccc3:         }
1:655ccc3:     }
1:655ccc3: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         if (name.length() > SchemaConstants.NAME_LENGTH)
1:             throw new InvalidRequestException(String.format("Keyspace names shouldn't be more than %s characters long (got \"%s\")", SchemaConstants.NAME_LENGTH, name));
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: 
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:     private static final Pattern PATTERN_WORD_CHARS = Pattern.compile("\\w+");
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (!PATTERN_WORD_CHARS.matcher(name).matches())
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException
1:             return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, keyspace());
1:                 return null;
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
0:         return new Event.SchemaChange(Event.SchemaChange.Change.CREATED, keyspace());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws RequestValidationException
0:             MigrationManager.announceNewKeyspace(attrs.asKSMetadata(name), isLocalOnly);
commit:b73f9d4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.AlreadyExistsException;
/////////////////////////////////////////////////////////////////////////
1:     private final boolean ifNotExists;
/////////////////////////////////////////////////////////////////////////
0:     public CreateKeyspaceStatement(String name, KSPropDefs attrs, boolean ifNotExists)
1:         this.ifNotExists = ifNotExists;
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
0:             MigrationManager.announceNewKeyspace(attrs.asKSMetadata(name));
1:         }
1:         catch (AlreadyExistsException e)
1:         {
0:             if (!ifNotExists)
1:                 throw e;
1:         }
commit:3d93a3c
commit:c315745
/////////////////////////////////////////////////////////////////////////
1:         // The strategy is validated through KSMetaData.validate() in announceNewKeyspace below.
1:         // However, for backward compatibility with thrift, this doesn't validate unexpected options yet,
1:         // so doing proper validation here.
0:         AbstractReplicationStrategy.validateReplicationStrategy(name,
0:                                                                 attrs.getReplicationStrategyClass(),
0:                                                                 StorageService.instance.getTokenMetadata(),
0:                                                                 DatabaseDescriptor.getEndpointSnitch(),
0:                                                                 attrs.getReplicationOptions());
commit:11f7d72
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.messages.ResultMessage;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String keyspace()
1:     {
1:         return name;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         return ResultMessage.SchemaChange.Change.CREATED;
1:     }
commit:2ce7b9b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.KSPropDefs;
/////////////////////////////////////////////////////////////////////////
0:     private final KSPropDefs attrs;
/////////////////////////////////////////////////////////////////////////
0:     public CreateKeyspaceStatement(String name, KSPropDefs attrs)
/////////////////////////////////////////////////////////////////////////
1:             attrs.validate();
1: 
1:             if (attrs.getReplicationStrategyClass() == null)
1:                 throw new ConfigurationException("Missing mandatory replication strategy class");
1: 
0:             // trial run to let ARS validate class + per-class options
0:                                                                   AbstractReplicationStrategy.getClass(attrs.getReplicationStrategyClass()),
0:                                                                   attrs.getReplicationOptions());
/////////////////////////////////////////////////////////////////////////
0:         MigrationManager.announceNewKeyspace(attrs.asKSMetadata(name));
commit:1e126da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.KSPropDefs;
/////////////////////////////////////////////////////////////////////////
0:     private final KSPropDefs attrs;
/////////////////////////////////////////////////////////////////////////
0:     public CreateKeyspaceStatement(String name, KSPropDefs attrs)
/////////////////////////////////////////////////////////////////////////
0:         attrs.validate();
0:         if (attrs.getReplicationStrategyClass() == null)
0:             throw new ConfigurationException("Missing mandatory replication strategy class");
0:                                                               AbstractReplicationStrategy.getClass(attrs.getReplicationStrategyClass()),
0:                                                               attrs.getReplicationOptions());
0:     public void announceMigration() throws RequestValidationException
0:         MigrationManager.announceNewKeyspace(attrs.asKSMetadata(name));
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ClientState state) throws RequestValidationException
/////////////////////////////////////////////////////////////////////////
0:         AbstractReplicationStrategy.createReplicationStrategy(name,
0:                                                               AbstractReplicationStrategy.getClass(strategyClass),
0:                                                               StorageService.instance.getTokenMetadata(),
0:                                                               DatabaseDescriptor.getEndpointSnitch(),
0:                                                               strategyOptions);
commit:769fe89
/////////////////////////////////////////////////////////////////////////
0:     private static String REPLICATION_PARAMETERS_PREFIX = "replication";
0:     private static String REPLICATION_STRATEGY_CLASS_KEY = "class";
1: 
0:     private final Map<String, Map<String, String>> attrs;
/////////////////////////////////////////////////////////////////////////
0:     public CreateKeyspaceStatement(String name, Map<String, Map<String, String>> attrs)
/////////////////////////////////////////////////////////////////////////
0:         if (!attrs.containsKey(REPLICATION_PARAMETERS_PREFIX))
0:             throw new InvalidRequestException("missing required argument '" +  REPLICATION_PARAMETERS_PREFIX + "'");
0:         Map<String, String> replication_parameters = attrs.get(REPLICATION_PARAMETERS_PREFIX);
1: 
0:         strategyClass = replication_parameters.get(REPLICATION_STRATEGY_CLASS_KEY);
1: 
0:         if (strategyClass == null)
0:             throw new InvalidRequestException("missing required field '" + REPLICATION_STRATEGY_CLASS_KEY + "' for '" + REPLICATION_PARAMETERS_PREFIX + "' option");
1: 
0:         for (Map.Entry<String, String> entry : replication_parameters.entrySet())
1:         {
0:             if (entry.getKey().equals(REPLICATION_STRATEGY_CLASS_KEY))
0:                 continue;
1: 
0:             strategyOptions.put(entry.getKey(), entry.getValue());
1:         }
commit:1ec8464
commit:5b57673
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
0:         if (name.length() > Schema.NAME_LENGTH)
0:             throw new InvalidRequestException(String.format("Keyspace names shouldn't be more than %s characters long (got \"%s\")", Schema.NAME_LENGTH, name));
commit:522730a
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.newKeyspace(name, strategyClass, strategyOptions);
0:         MigrationManager.announceNewKeyspace(ksm);
commit:ad4541e
commit:86f5eaa
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.newKeyspace(name, strategyClass, strategyOptions);
0:         MigrationManager.announceNewKeyspace(ksm);
commit:15ae2f6
commit:438acfc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.MigrationManager;
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
0:         MigrationManager.announceNewKeyspace(KSMetaData.fromThrift(ksd));
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private final Map<String, String> strategyOptions = new HashMap<String, String>();
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.io.IOException;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.migration.AddKeyspace;
0: import org.apache.cassandra.db.migration.Migration;
0: import org.apache.cassandra.locator.AbstractReplicationStrategy;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.service.StorageService;
0: import org.apache.cassandra.thrift.CfDef;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.thrift.KsDef;
0: import org.apache.cassandra.thrift.SchemaDisagreementException;
1: import org.apache.cassandra.thrift.ThriftValidation;
1: 
1: /** A <code>CREATE KEYSPACE</code> statement parsed from a CQL query. */
1: public class CreateKeyspaceStatement extends SchemaAlteringStatement
1: {
1:     private final String name;
0:     private final Map<String, String> attrs;
0:     private String strategyClass;
0:     private Map<String, String> strategyOptions = new HashMap<String, String>();
1: 
1:     /**
1:      * Creates a new <code>CreateKeyspaceStatement</code> instance for a given
1:      * keyspace name and keyword arguments.
1:      *
1:      * @param name the name of the keyspace to create
1:      * @param attrs map of the raw keyword arguments that followed the <code>WITH</code> keyword.
1:      */
0:     public CreateKeyspaceStatement(String name, Map<String, String> attrs)
1:     {
1:         super();
1:         this.name = name;
1:         this.attrs = attrs;
1:     }
1: 
1:     /**
1:      * The <code>CqlParser</code> only goes as far as extracting the keyword arguments
1:      * from these statements, so this method is responsible for processing and
1:      * validating.
1:      *
1:      * @throws InvalidRequestException if arguments are missing or unacceptable
1:      */
0:     @Override
0:     public void validate(ClientState state) throws InvalidRequestException, SchemaDisagreementException
1:     {
0:         super.validate(state);
1:         ThriftValidation.validateKeyspaceNotSystem(name);
1: 
1:         // keyspace name
0:         if (!name.matches("\\w+"))
1:             throw new InvalidRequestException(String.format("\"%s\" is not a valid keyspace name", name));
0:         if (name.length() > 32)
0:             throw new InvalidRequestException(String.format("Keyspace names shouldn't be more than 32 character long (got \"%s\")", name));
1: 
0:         // required
0:         if (!attrs.containsKey("strategy_class"))
0:             throw new InvalidRequestException("missing required argument \"strategy_class\"");
0:         strategyClass = attrs.get("strategy_class");
1: 
0:         // optional
0:         for (String key : attrs.keySet())
0:             if ((key.contains(":")) && (key.startsWith("strategy_options")))
0:                 strategyOptions.put(key.split(":")[1], attrs.get(key));
1: 
0:         // trial run to let ARS validate class + per-class options
1:         try
1:         {
0:             AbstractReplicationStrategy.createReplicationStrategy(name,
0:                                                                   AbstractReplicationStrategy.getClass(strategyClass),
0:                                                                   StorageService.instance.getTokenMetadata(),
0:                                                                   DatabaseDescriptor.getEndpointSnitch(),
0:                                                                   strategyOptions);
1:         }
0:         catch (ConfigurationException e)
1:         {
0:             throw new InvalidRequestException(e.getMessage());
1:         }
1:     }
1: 
0:     public Migration getMigration() throws InvalidRequestException, ConfigurationException, IOException
1:     {
0:         KsDef ksd = new KsDef(name, strategyClass, Collections.<CfDef>emptyList());
0:         ksd.setStrategy_options(strategyOptions);
0:         ThriftValidation.validateKsDef(ksd);
0:         ThriftValidation.validateKeyspaceNotYetExisting(name);
0:         return new AddKeyspace(KSMetaData.fromThrift(ksd));
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = KeyspaceMetadata.create(name, attrs.asNewKeyspaceParams());
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.locator.LocalStrategy;
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:     private final KeyspaceAttributes attrs;
/////////////////////////////////////////////////////////////////////////
1:     public CreateKeyspaceStatement(String name, KeyspaceAttributes attrs, boolean ifNotExists)
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceParams params = attrs.asNewKeyspaceParams();
1:         params.validate(name);
1:         if (params.replication.klass.equals(LocalStrategy.class))
1:             throw new ConfigurationException("Unable to use given strategy class: LocalStrategy is reserved for internal use.");
0:         KSMetaData ksm = KSMetaData.create(name, attrs.asNewKeyspaceParams());
1:             MigrationManager.announceNewKeyspace(ksm, isLocalOnly);
commit:be9a70e
/////////////////////////////////////////////////////////////////////////
commit:663bdfb
/////////////////////////////////////////////////////////////////////////
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1:         state.hasAllKeyspacesAccess(Permission.CREATE);
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
1:             RoleResource role = RoleResource.role(state.getClientState().getUser().getName());
1:             DataResource keyspace = DataResource.keyspace(keyspace());
1:                                                      keyspace.applicablePermissions(),
1:                                                      keyspace,
1:                                                      role);
1:             FunctionResource functions = FunctionResource.keyspace(keyspace());
1:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
1:                                                      functions.applicablePermissions(),
1:                                                      functions,
1:                                                      role);
commit:9072757
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.*;
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void grantPermissionsToCreator(QueryState state)
0:     {
0:         try
0:         {
0:             DataResource resource = DataResource.keyspace(keyspace());
1:             DatabaseDescriptor.getAuthorizer().grant(AuthenticatedUser.SYSTEM_USER,
0:                                                      resource.applicablePermissions(),
0:                                                      resource,
0:                                                      RoleResource.role(state.getClientState().getUser().getName()));
0:         }
1:         catch (RequestExecutionException e)
0:         {
1:             throw new RuntimeException(e);
0:         }
0:     }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:664efd4
commit:e4d5eda
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration() throws RequestValidationException
0:             return true;
1:             if (ifNotExists)
0:                 return false;
0:             throw e;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:5b0ec50
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state) throws UnauthorizedException
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f32110c
/////////////////////////////////////////////////////////////////////////
0:         state.hasKeyspaceAccess(name, Permission.WRITE);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:804dd09
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.UnauthorizedException;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
commit:bcec7a5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {
0:         state.hasKeyspaceAccess(name, Permission.CREATE);
0:     }
0: 
commit:aba5a37
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.Permission;
/////////////////////////////////////////////////////////////////////////
0:     public void checkAccess(ClientState state) throws InvalidRequestException
0:     {
0:         state.hasKeyspaceAccess(name, Permission.CREATE);
0:     }
0: 
commit:71f5d91
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void validate(ClientState state) throws InvalidRequestException
============================================================================