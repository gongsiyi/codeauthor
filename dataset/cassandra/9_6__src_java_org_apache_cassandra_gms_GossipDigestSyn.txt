1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
2:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.gms;
21:066ef58: 
1:84eeb28: import java.io.*;
1:e98eb1c: import java.util.ArrayList;
1:e98eb1c: import java.util.List;
1:e98eb1c: 
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:84eeb28: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:2e1b1a5: 
2:066ef58: /**
1:066ef58:  * This is the first message that gets sent out as a start of the Gossip protocol in a
1:066ef58:  * round.
1:066ef58:  */
1:9471e8d: public class GossipDigestSyn
13:066ef58: {
1:587cb58:     public static final IVersionedSerializer<GossipDigestSyn> serializer = new GossipDigestSynSerializer();
1:2ac485b: 
1:5a6e2b0:     final String clusterId;
1:0525ae2:     final String partioner;
1:5a6e2b0:     final List<GossipDigest> gDigests;
1:2ac485b: 
1:0525ae2:     public GossipDigestSyn(String clusterId, String partioner, List<GossipDigest> gDigests)
1:066ef58:     {
1:910b663:         this.clusterId = clusterId;
1:0525ae2:         this.partioner = partioner;
1:910b663:         this.gDigests = gDigests;
14:066ef58:     }
1:7dffa83: 
1:066ef58:     List<GossipDigest> getGossipDigests()
1:84eeb28:     {
1:910b663:         return gDigests;
1:84eeb28:     }
1:7dffa83: }
1:b207956: 
1:066ef58: class GossipDigestSerializationHelper
1:066ef58: {
1:75508ec:     static void serialize(List<GossipDigest> gDigestList, DataOutputPlus out, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         out.writeInt(gDigestList.size());
1:587cb58:         for (GossipDigest gDigest : gDigestList)
1:60d9c7f:             GossipDigest.serializer.serialize(gDigest, out, version);
1:066ef58:     }
1:5b9fc26: 
1:03f72ac:     static List<GossipDigest> deserialize(DataInputPlus in, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         int size = in.readInt();
1:7dffa83:         List<GossipDigest> gDigests = new ArrayList<GossipDigest>(size);
1:587cb58:         for (int i = 0; i < size; ++i)
1:60d9c7f:             gDigests.add(GossipDigest.serializer.deserialize(in, version));
1:066ef58:         return gDigests;
1:066ef58:     }
1:066ef58: 
1:5b9fc26:     static int serializedSize(List<GossipDigest> digests, int version)
1:066ef58:     {
1:03f72ac:         int size = TypeSizes.sizeof(digests.size());
1:5b9fc26:         for (GossipDigest digest : digests)
1:587cb58:             size += GossipDigest.serializer.serializedSize(digest, version);
1:5b9fc26:         return size;
1:066ef58:     }
1:066ef58: }
1:066ef58: 
1:9471e8d: class GossipDigestSynSerializer implements IVersionedSerializer<GossipDigestSyn>
1:066ef58: {
1:75508ec:     public void serialize(GossipDigestSyn gDigestSynMessage, DataOutputPlus out, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         out.writeUTF(gDigestSynMessage.clusterId);
1:7f2c3a8:         out.writeUTF(gDigestSynMessage.partioner);
1:60d9c7f:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests, out, version);
1:066ef58:     }
1:066ef58: 
1:03f72ac:     public GossipDigestSyn deserialize(DataInputPlus in, int version) throws IOException
1:066ef58:     {
1:60d9c7f:         String clusterId = in.readUTF();
1:0525ae2:         String partioner = null;
1:7f2c3a8:         partioner = in.readUTF();
1:60d9c7f:         List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(in, version);
1:0525ae2:         return new GossipDigestSyn(clusterId, partioner, gDigests);
1:066ef58:     }
1:066ef58: 
1:5b9fc26:     public long serializedSize(GossipDigestSyn syn, int version)
1:066ef58:     {
1:03f72ac:         long size = TypeSizes.sizeof(syn.clusterId);
1:03f72ac:         size += TypeSizes.sizeof(syn.partioner);
1:0525ae2:         size += GossipDigestSerializationHelper.serializedSize(syn.gDigests, version);
1:0525ae2:         return size;
1:066ef58:     }
1:066ef58: }
1:066ef58: 
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:     static List<GossipDigest> deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         int size = TypeSizes.sizeof(digests.size());
/////////////////////////////////////////////////////////////////////////
1:     public GossipDigestSyn deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         long size = TypeSizes.sizeof(syn.clusterId);
1:         size += TypeSizes.sizeof(syn.partioner);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:     static void serialize(List<GossipDigest> gDigestList, DataOutputPlus out, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:     public void serialize(GossipDigestSyn gDigestSynMessage, DataOutputPlus out, int version) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:997ab95
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
1:         out.writeUTF(gDigestSynMessage.partioner);
/////////////////////////////////////////////////////////////////////////
1:         partioner = in.readUTF();
/////////////////////////////////////////////////////////////////////////
0:         size += TypeSizes.NATIVE.sizeof(syn.partioner);
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(List<GossipDigest> gDigestList, DataOutput out, int version) throws IOException
1:         out.writeInt(gDigestList.size());
1:             GossipDigest.serializer.serialize(gDigest, out, version);
0:     static List<GossipDigest> deserialize(DataInput in, int version) throws IOException
1:         int size = in.readInt();
1:             gDigests.add(GossipDigest.serializer.deserialize(in, version));
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigestSyn gDigestSynMessage, DataOutput out, int version) throws IOException
1:         out.writeUTF(gDigestSynMessage.clusterId);
0:             out.writeUTF(gDigestSynMessage.partioner);
1:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests, out, version);
0:     public GossipDigestSyn deserialize(DataInput in, int version) throws IOException
1:         String clusterId = in.readUTF();
0:             partioner = in.readUTF();
1:         List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(in, version);
commit:b207956
/////////////////////////////////////////////////////////////////////////
1: 
commit:70554b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return TypeSizes.NATIVE.sizeof(syn.clusterId) + GossipDigestSerializationHelper.serializedSize(syn.gDigests, version);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         int size = TypeSizes.NATIVE.sizeof(digests.size());
commit:5b9fc26
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:     
1:     static int serializedSize(List<GossipDigest> digests, int version)
0:         int size = DBTypeSizes.NATIVE.sizeof(digests.size());
1:         for (GossipDigest digest : digests)
0:             size += GossipDigest.serializer().serializedSize(digest, version);
1:         return size;
/////////////////////////////////////////////////////////////////////////
1:     public long serializedSize(GossipDigestSyn syn, int version)
0:         return FBUtilities.serializedUTF8Size(syn.clusterId) + GossipDigestSerializationHelper.serializedSize(syn.gDigests, version);
commit:9471e8d
/////////////////////////////////////////////////////////////////////////
1: public class GossipDigestSyn
0:     private static final IVersionedSerializer<GossipDigestSyn> serializer;
0:         serializer = new GossipDigestSynSerializer();
0:     public static IVersionedSerializer<GossipDigestSyn> serializer()
0:     public GossipDigestSyn(String clusterId, List<GossipDigest> gDigests)
/////////////////////////////////////////////////////////////////////////
1: class GossipDigestSynSerializer implements IVersionedSerializer<GossipDigestSyn>
0:     public void serialize(GossipDigestSyn gDigestSynMessage, DataOutput dos, int version) throws IOException
0:     public GossipDigestSyn deserialize(DataInput dis, int version) throws IOException
0:         return new GossipDigestSyn(clusterId, gDigests);
0:     public long serializedSize(GossipDigestSyn gossipDigestSynMessage, int version)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: public class GossipDigestSynMessage
commit:84eeb28
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.IVersionedSerializer;
/////////////////////////////////////////////////////////////////////////
0:     private static IVersionedSerializer<GossipDigestSynMessage> serializer_;
/////////////////////////////////////////////////////////////////////////
0:     public static IVersionedSerializer<GossipDigestSynMessage> serializer()
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(List<GossipDigest> gDigestList, DataOutput dos, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:     static List<GossipDigest> deserialize(DataInput dis, int version) throws IOException
0:             gDigests.add(GossipDigest.serializer().deserialize(dis, version));
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutput dos, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:     static Map<InetAddress, EndpointState> deserialize(DataInput dis, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0: class GossipDigestSynMessageSerializer implements IVersionedSerializer<GossipDigestSynMessage>
0:     public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutput dos, int version) throws IOException
0:     public GossipDigestSynMessage deserialize(DataInput dis, int version) throws IOException
0:     public long serializedSize(GossipDigestSynMessage gossipDigestSynMessage, int version)
1:     {
0:         throw new UnsupportedOperationException();
1:     }
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
0: import java.util.HashMap;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Map.Entry;
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1: 
commit:7dffa83
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
0:         dos.writeInt(gDigestList.size());
1:         List<GossipDigest> gDigests = new ArrayList<GossipDigest>(size);
0:             assert dis.available() > 0;
0:             gDigests.add(GossipDigest.serializer().deserialize(dis));                
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos) throws IOException
0:         dos.writeInt(epStateMap.size());
0:         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);
1: 
0:             assert dis.available() > 0;
1:         }
commit:7a4a709
/////////////////////////////////////////////////////////////////////////
0: class EndpointStatesSerializationHelper
0:     private static final Logger logger_ = LoggerFactory.getLogger(EndpointStatesSerializationHelper.class);
/////////////////////////////////////////////////////////////////////////
0:                 logger_.info("Remaining bytes zero. Stopping deserialization in EndpointState.");
commit:2e1b1a5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1: 
/////////////////////////////////////////////////////////////////////////
0:     static boolean serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos) throws IOException
0:         for (Entry<InetAddress, EndpointState> entry : epStateMap.entrySet())
/////////////////////////////////////////////////////////////////////////
0:             CompactEndpointSerializationHelper.serialize(ep, dos);
0:             EndpointState.serializer().serialize(entry.getValue(), dos);
0:     static Map<InetAddress, EndpointState> deserialize(DataInputStream dis) throws IOException
0:         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>();
/////////////////////////////////////////////////////////////////////////
0:             InetAddress ep = CompactEndpointSerializationHelper.deserialize(dis);
0:             EndpointState epState = EndpointState.serializer().deserialize(dis);
commit:2ac485b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         for (Entry<InetAddress, EndPointState> entry : epStateMap.entrySet())
0:             InetAddress ep = entry.getKey();
/////////////////////////////////////////////////////////////////////////
0:             EndPointState.serializer().serialize(entry.getValue(), dos);
commit:2444d3b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger_ = Logger.getLogger(EndPointStatesSerializationHelper.class);
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:     static boolean serialize(Map<InetAddress, EndPointState> epStateMap, DataOutputStream dos) throws IOException
0:         Set<InetAddress> eps = epStateMap.keySet();
0:         for( InetAddress ep : eps )
/////////////////////////////////////////////////////////////////////////
0:     static Map<InetAddress, EndPointState> deserialize(DataInputStream dis) throws IOException
0:         Map<InetAddress, EndPointState> epStateMap = new HashMap<InetAddress, EndPointState>();
/////////////////////////////////////////////////////////////////////////
0:             InetAddress ep = CompactEndPointSerializationHelper.deserialize(dis);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.*;
1: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.CompactEndPointSerializationHelper;
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.utils.Log4jLogger;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.utils.*;
1: 
1: 
1: /**
1:  * This is the first message that gets sent out as a start of the Gossip protocol in a 
1:  * round. 
1:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
0: class GossipDigestSynMessage
1: {
0:     private static ICompactSerializer<GossipDigestSynMessage> serializer_;
0:     static
1:     {
0:         serializer_ = new GossipDigestSynMessageSerializer();
1:     }
1:     
0:     String clusterId_;
0:     List<GossipDigest> gDigests_ = new ArrayList<GossipDigest>();
1: 
0:     public static ICompactSerializer<GossipDigestSynMessage> serializer()
1:     {
0:         return serializer_;
1:     }
1:  
0:     public GossipDigestSynMessage(String clusterId, List<GossipDigest> gDigests)
1:     {      
0:         clusterId_ = clusterId;
0:         gDigests_ = gDigests;
1:     }
1:     
1:     List<GossipDigest> getGossipDigests()
1:     {
0:         return gDigests_;
1:     }
1: }
1: 
1: class GossipDigestSerializationHelper
1: {
0:     private static Logger logger_ = Logger.getLogger(GossipDigestSerializationHelper.class);
1:     
0:     static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
1:     {
0:         boolean bVal = true;
0:         int size = gDigestList.size();                        
0:         dos.writeInt(size);
1:         
0:         int estimate = 0;            
0:         for ( GossipDigest gDigest : gDigestList )
1:         {
0:             if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
1:             {
0:                 logger_.info("@@@@ Breaking out to respect the MTU size in GD @@@@");
0:                 bVal = false;
0:                 break;
1:             }
0:             int pre = dos.size();               
0:             GossipDigest.serializer().serialize( gDigest, dos );
0:             int post = dos.size();
0:             estimate = post - pre;
1:         }
0:         return bVal;
1:     }
1: 
0:     static List<GossipDigest> deserialize(DataInputStream dis) throws IOException
1:     {
0:         int size = dis.readInt();            
0:         List<GossipDigest> gDigests = new ArrayList<GossipDigest>();
1:         
0:         for ( int i = 0; i < size; ++i )
1:         {
0:             if ( dis.available() == 0 )
1:             {
0:                 logger_.info("Remaining bytes zero. Stopping deserialization of GossipDigests.");
0:                 break;
1:             }
1:                             
0:             GossipDigest gDigest = GossipDigest.serializer().deserialize(dis);                
0:             gDigests.add( gDigest );                
1:         }        
1:         return gDigests;
1:     }
1: }
1: 
0: class EndPointStatesSerializationHelper
1: {
0:     private static Log4jLogger logger_ = new Log4jLogger(EndPointStatesSerializationHelper.class.getName());
1:     
0:     static boolean serialize(Map<EndPoint, EndPointState> epStateMap, DataOutputStream dos) throws IOException
1:     {
0:         boolean bVal = true;
0:         int estimate = 0;                
0:         int size = epStateMap.size();
0:         dos.writeInt(size);
1:     
0:         Set<EndPoint> eps = epStateMap.keySet();
0:         for( EndPoint ep : eps )
1:         {
0:             if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
1:             {
0:                 logger_.info("@@@@ Breaking out to respect the MTU size in EPS. Estimate is " + estimate + " @@@@");
0:                 bVal = false;
0:                 break;
1:             }
1:     
0:             int pre = dos.size();
0:             CompactEndPointSerializationHelper.serialize(ep, dos);
0:             EndPointState epState = epStateMap.get(ep);            
0:             EndPointState.serializer().serialize(epState, dos);
0:             int post = dos.size();
0:             estimate = post - pre;
1:         }
0:         return bVal;
1:     }
1: 
0:     static Map<EndPoint, EndPointState> deserialize(DataInputStream dis) throws IOException
1:     {
0:         int size = dis.readInt();            
0:         Map<EndPoint, EndPointState> epStateMap = new HashMap<EndPoint, EndPointState>();
1:         
0:         for ( int i = 0; i < size; ++i )
1:         {
0:             if ( dis.available() == 0 )
1:             {
0:                 logger_.info("Remaining bytes zero. Stopping deserialization in EndPointState.");
0:                 break;
1:             }
0:             // int length = dis.readInt();            
0:             EndPoint ep = CompactEndPointSerializationHelper.deserialize(dis);
0:             EndPointState epState = EndPointState.serializer().deserialize(dis);            
0:             epStateMap.put(ep, epState);
1:         }        
0:         return epStateMap;
1:     }
1: }
1: 
0: class GossipDigestSynMessageSerializer implements ICompactSerializer<GossipDigestSynMessage>
1: {   
0:     public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos) throws IOException
1:     {    
0:         dos.writeUTF(gDigestSynMessage.clusterId_);
0:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos);
1:     }
1: 
0:     public GossipDigestSynMessage deserialize(DataInputStream dis) throws IOException
1:     {
0:         String clusterId = dis.readUTF();
0:         List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis);
0:         return new GossipDigestSynMessage(clusterId, gDigests);
1:     }
1: 
1: }
1: 
commit:71739ef
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:0525ae2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:     final String partioner;
1:     public GossipDigestSyn(String clusterId, String partioner, List<GossipDigest> gDigests)
1:         this.partioner = partioner;
/////////////////////////////////////////////////////////////////////////
0:         if (version >= MessagingService.VERSION_12)
0:             dos.writeUTF(gDigestSynMessage.partioner);
1:         String partioner = null;
0:         if (version >= MessagingService.VERSION_12)
0:             partioner = dis.readUTF();
1:         return new GossipDigestSyn(clusterId, partioner, gDigests);
0:         long size = TypeSizes.NATIVE.sizeof(syn.clusterId);
0:         if (version >= MessagingService.VERSION_12)
0:             size += TypeSizes.NATIVE.sizeof(syn.partioner);
1:         size += GossipDigestSerializationHelper.serializedSize(syn.gDigests, version);
1:         return size;
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
1:     public static final IVersionedSerializer<GossipDigestSyn> serializer = new GossipDigestSynSerializer();
/////////////////////////////////////////////////////////////////////////
1:         for (GossipDigest gDigest : gDigestList)
0:             GossipDigest.serializer.serialize(gDigest, dos, version);
1:         for (int i = 0; i < size; ++i)
0:             gDigests.add(GossipDigest.serializer.deserialize(dis, version));
/////////////////////////////////////////////////////////////////////////
1:             size += GossipDigest.serializer.serializedSize(digest, version);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  * This is the first message that gets sent out as a start of the Gossip protocol in a
0:  * round.
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     {
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         int size = dis.readInt();
0: 
0:         }
/////////////////////////////////////////////////////////////////////////
0:         int size = dis.readInt();
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * This is the first message that gets sent out as a start of the Gossip protocol in a
0:  * round.
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     {
0: 
/////////////////////////////////////////////////////////////////////////
0:         int size = dis.readInt();
0: 
0:         }
/////////////////////////////////////////////////////////////////////////
0:         int size = dis.readInt();
/////////////////////////////////////////////////////////////////////////
0: {
0:     {
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private static final IVersionedSerializer<GossipDigestSynMessage> serializer;
1:     final String clusterId;
1:     final List<GossipDigest> gDigests;
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:910b663
/////////////////////////////////////////////////////////////////////////
0:     private static IVersionedSerializer<GossipDigestSynMessage> serializer;
0:         serializer = new GossipDigestSynMessageSerializer();
0:     String clusterId;
0:     List<GossipDigest> gDigests = new ArrayList<GossipDigest>();
0:         return serializer;
1:         this.clusterId = clusterId;
1:         this.gDigests = gDigests;
1:         return gDigests;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         dos.writeUTF(gDigestSynMessage.clusterId);
0:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests, dos, version);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos, int version) throws IOException
0:             GossipDigest.serializer().serialize( gDigest, dos, version);
0:     static List<GossipDigest> deserialize(DataInputStream dis, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             gDigests.add(GossipDigest.serializer().deserialize(dis, version));                
/////////////////////////////////////////////////////////////////////////
0:     static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos, int version) throws IOException
0:             EndpointState.serializer().serialize(entry.getValue(), dos, version);
0:     static Map<InetAddress, EndpointState> deserialize(DataInputStream dis, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
0:             EndpointState epState = EndpointState.serializer().deserialize(dis, version);
/////////////////////////////////////////////////////////////////////////
0:     public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos, int version) throws IOException
0:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos, version);
0:     public GossipDigestSynMessage deserialize(DataInputStream dis, int version) throws IOException
0:         List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis, version);
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger_ = LoggerFactory.getLogger(GossipDigestSerializationHelper.class);
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger_ = LoggerFactory.getLogger(EndPointStatesSerializationHelper.class);
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.gms;
0: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
0: import java.io.IOException;
0: import java.util.*;
0: 
0: import org.apache.cassandra.io.ICompactSerializer;
0: import org.apache.cassandra.net.CompactEndPointSerializationHelper;
0: import org.apache.cassandra.net.EndPoint;
0: import org.apache.cassandra.utils.Log4jLogger;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.utils.*;
0: 
0: 
0: /**
0:  * This is the first message that gets sent out as a start of the Gossip protocol in a 
0:  * round. 
0:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: class GossipDigestSynMessage
0: {
0:     private static ICompactSerializer<GossipDigestSynMessage> serializer_;
0:     static
0:     {
0:         serializer_ = new GossipDigestSynMessageSerializer();
0:     }
0:     
0:     String clusterId_;
0:     List<GossipDigest> gDigests_ = new ArrayList<GossipDigest>();
0: 
0:     public static ICompactSerializer<GossipDigestSynMessage> serializer()
0:     {
0:         return serializer_;
0:     }
0:  
0:     public GossipDigestSynMessage(String clusterId, List<GossipDigest> gDigests)
0:     {      
0:         clusterId_ = clusterId;
0:         gDigests_ = gDigests;
0:     }
0:     
0:     List<GossipDigest> getGossipDigests()
0:     {
0:         return gDigests_;
0:     }
0: }
0: 
0: class GossipDigestSerializationHelper
0: {
0:     private static Logger logger_ = Logger.getLogger(GossipDigestSerializationHelper.class);
0:     
0:     static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
0:     {
0:         boolean bVal = true;
0:         int size = gDigestList.size();                        
0:         dos.writeInt(size);
0:         
0:         int estimate = 0;            
0:         for ( GossipDigest gDigest : gDigestList )
0:         {
0:             if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
0:             {
0:                 logger_.info("@@@@ Breaking out to respect the MTU size in GD @@@@");
0:                 bVal = false;
0:                 break;
0:             }
0:             int pre = dos.size();               
0:             GossipDigest.serializer().serialize( gDigest, dos );
0:             int post = dos.size();
0:             estimate = post - pre;
0:         }
0:         return bVal;
0:     }
0: 
0:     static List<GossipDigest> deserialize(DataInputStream dis) throws IOException
0:     {
0:         int size = dis.readInt();            
0:         List<GossipDigest> gDigests = new ArrayList<GossipDigest>();
0:         
0:         for ( int i = 0; i < size; ++i )
0:         {
0:             if ( dis.available() == 0 )
0:             {
0:                 logger_.info("Remaining bytes zero. Stopping deserialization of GossipDigests.");
0:                 break;
0:             }
0:                             
0:             GossipDigest gDigest = GossipDigest.serializer().deserialize(dis);                
0:             gDigests.add( gDigest );                
0:         }        
0:         return gDigests;
0:     }
0: }
0: 
0: class EndPointStatesSerializationHelper
0: {
0:     private static Log4jLogger logger_ = new Log4jLogger(EndPointStatesSerializationHelper.class.getName());
0:     
0:     static boolean serialize(Map<EndPoint, EndPointState> epStateMap, DataOutputStream dos) throws IOException
0:     {
0:         boolean bVal = true;
0:         int estimate = 0;                
0:         int size = epStateMap.size();
0:         dos.writeInt(size);
0:     
0:         Set<EndPoint> eps = epStateMap.keySet();
0:         for( EndPoint ep : eps )
0:         {
0:             if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
0:             {
0:                 logger_.info("@@@@ Breaking out to respect the MTU size in EPS. Estimate is " + estimate + " @@@@");
0:                 bVal = false;
0:                 break;
0:             }
0:     
0:             int pre = dos.size();
0:             CompactEndPointSerializationHelper.serialize(ep, dos);
0:             EndPointState epState = epStateMap.get(ep);            
0:             EndPointState.serializer().serialize(epState, dos);
0:             int post = dos.size();
0:             estimate = post - pre;
0:         }
0:         return bVal;
0:     }
0: 
0:     static Map<EndPoint, EndPointState> deserialize(DataInputStream dis) throws IOException
0:     {
0:         int size = dis.readInt();            
0:         Map<EndPoint, EndPointState> epStateMap = new HashMap<EndPoint, EndPointState>();
0:         
0:         for ( int i = 0; i < size; ++i )
0:         {
0:             if ( dis.available() == 0 )
0:             {
0:                 logger_.info("Remaining bytes zero. Stopping deserialization in EndPointState.");
0:                 break;
0:             }
0:             // int length = dis.readInt();            
0:             EndPoint ep = CompactEndPointSerializationHelper.deserialize(dis);
0:             EndPointState epState = EndPointState.serializer().deserialize(dis);            
0:             epStateMap.put(ep, epState);
0:         }        
0:         return epStateMap;
0:     }
0: }
0: 
0: class GossipDigestSynMessageSerializer implements ICompactSerializer<GossipDigestSynMessage>
0: {   
0:     public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos) throws IOException
0:     {    
0:         dos.writeUTF(gDigestSynMessage.clusterId_);
0:         GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos);
0:     }
0: 
0:     public GossipDigestSynMessage deserialize(DataInputStream dis) throws IOException
0:     {
0:         String clusterId = dis.readUTF();
0:         List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis);
0:         return new GossipDigestSynMessage(clusterId, gDigests);
0:     }
0: 
0: }
0: 
============================================================================