1:27d25c6: /*
1:27d25c6:  * Licensed to the Apache Software Foundation (ASF) under one
1:27d25c6:  * or more contributor license agreements.  See the NOTICE file
1:27d25c6:  * distributed with this work for additional information
1:27d25c6:  * regarding copyright ownership.  The ASF licenses this file
1:27d25c6:  * to you under the Apache License, Version 2.0 (the
1:27d25c6:  * "License"); you may not use this file except in compliance
1:27d25c6:  * with the License.  You may obtain a copy of the License at
1:27d25c6:  *
1:27d25c6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d25c6:  *
1:27d25c6:  * Unless required by applicable law or agreed to in writing, software
1:27d25c6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d25c6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d25c6:  * See the License for the specific language governing permissions and
1:27d25c6:  * limitations under the License.
1:27d25c6:  */
1:27d25c6: 
1:27d25c6: package org.apache.cassandra.tools.nodetool.stats;
1:27d25c6: 
1:27d25c6: import java.io.PrintStream;
1:52c81d7: import java.util.Collections;
1:27d25c6: import java.util.HashMap;
1:27d25c6: import java.util.Map;
1:27d25c6: 
1:27d25c6: public class TpStatsPrinter
1:27d25c6: {
1:27d25c6:     public static StatsPrinter from(String format)
1:27d25c6:     {
1:27d25c6:         switch (format)
1:27d25c6:         {
1:27d25c6:             case "json":
1:27d25c6:                 return new StatsPrinter.JsonPrinter();
1:27d25c6:             case "yaml":
1:27d25c6:                 return new StatsPrinter.YamlPrinter();
1:27d25c6:             default:
1:27d25c6:                 return new DefaultPrinter();
1:27d25c6:         }
1:27d25c6: 
1:27d25c6:     }
1:27d25c6: 
1:27d25c6:     public static class DefaultPrinter implements StatsPrinter<TpStatsHolder>
1:27d25c6:     {
1:27d25c6:         @Override
1:27d25c6:         public void print(TpStatsHolder data, PrintStream out)
1:27d25c6:         {
1:27d25c6:             Map<String, Object> convertData = data.convert2Map();
1:27d25c6: 
1:27d25c6:             out.printf("%-30s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");
1:27d25c6: 
1:52c81d7:             Map<Object, Object> threadPools = convertData.get("ThreadPools") instanceof Map<?, ?> ? (Map)convertData.get("ThreadPools") : Collections.emptyMap();
1:27d25c6:             for (Map.Entry<Object, Object> entry : threadPools.entrySet())
1:27d25c6:             {
1:52c81d7:                 Map values = entry.getValue() instanceof Map<?, ?> ? (Map)entry.getValue() : Collections.emptyMap();
1:27d25c6:                 out.printf("%-30s%10s%10s%15s%10s%18s%n",
1:27d25c6:                            entry.getKey(),
1:27d25c6:                            values.get("ActiveTasks"),
1:27d25c6:                            values.get("PendingTasks"),
1:27d25c6:                            values.get("CompletedTasks"),
1:27d25c6:                            values.get("CurrentlyBlockedTasks"),
1:b3dcb06:                            values.get("TotalBlockedTasks"));
1:27d25c6:             }
1:27d25c6: 
1:27d25c6:             out.printf("%n%-20s%10s%n", "Message type", "Dropped");
1:27d25c6: 
1:52c81d7:             Map<Object, Object> droppedMessages = convertData.get("DroppedMessage") instanceof Map<?, ?> ? (Map)convertData.get("DroppedMessage") : Collections.emptyMap();
1:27d25c6:             for (Map.Entry<Object, Object> entry : droppedMessages.entrySet())
1:27d25c6:             {
1:27d25c6:                 out.printf("%-20s%10s%n", entry.getKey(), entry.getValue());
1:27d25c6:             }
1:27d25c6:         }
1:27d25c6:     }
1:27d25c6: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:52c81d7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:             Map<Object, Object> threadPools = convertData.get("ThreadPools") instanceof Map<?, ?> ? (Map)convertData.get("ThreadPools") : Collections.emptyMap();
1:                 Map values = entry.getValue() instanceof Map<?, ?> ? (Map)entry.getValue() : Collections.emptyMap();
/////////////////////////////////////////////////////////////////////////
1:             Map<Object, Object> droppedMessages = convertData.get("DroppedMessage") instanceof Map<?, ?> ? (Map)convertData.get("DroppedMessage") : Collections.emptyMap();
commit:b3dcb06
/////////////////////////////////////////////////////////////////////////
1:                            values.get("TotalBlockedTasks"));
author:Hiroyuki Nishi
-------------------------------------------------------------------------------
commit:27d25c6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.tools.nodetool.stats;
1: 
1: import java.io.PrintStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class TpStatsPrinter
1: {
1:     public static StatsPrinter from(String format)
1:     {
1:         switch (format)
1:         {
1:             case "json":
1:                 return new StatsPrinter.JsonPrinter();
1:             case "yaml":
1:                 return new StatsPrinter.YamlPrinter();
1:             default:
1:                 return new DefaultPrinter();
1:         }
1: 
1:     }
1: 
1:     public static class DefaultPrinter implements StatsPrinter<TpStatsHolder>
1:     {
1:         @Override
1:         public void print(TpStatsHolder data, PrintStream out)
1:         {
1:             Map<String, Object> convertData = data.convert2Map();
1: 
1:             out.printf("%-30s%10s%10s%15s%10s%18s%n", "Pool Name", "Active", "Pending", "Completed", "Blocked", "All time blocked");
1: 
0:             Map<Object, Object> threadPools = convertData.get("ThreadPools") instanceof HashMap<?, ?> ? (HashMap)convertData.get("ThreadPools") : new HashMap();
1:             for (Map.Entry<Object, Object> entry : threadPools.entrySet())
1:             {
0:                 HashMap values = entry.getValue() instanceof HashMap<?, ?> ? (HashMap)entry.getValue() : new HashMap();
1:                 out.printf("%-30s%10s%10s%15s%10s%18s%n",
1:                            entry.getKey(),
1:                            values.get("ActiveTasks"),
1:                            values.get("PendingTasks"),
1:                            values.get("CompletedTasks"),
1:                            values.get("CurrentlyBlockedTasks"),
0:                            values.get("TotalBlockedTasks"),
0:                            values.get("ActiveTasks"));
1:             }
1: 
1:             out.printf("%n%-20s%10s%n", "Message type", "Dropped");
1: 
0:             Map<Object, Object> droppedMessages = convertData.get("DroppedMessage") instanceof HashMap<?, ?> ? (HashMap)convertData.get("DroppedMessage") : new HashMap();
1:             for (Map.Entry<Object, Object> entry : droppedMessages.entrySet())
1:             {
1:                 out.printf("%-20s%10s%n", entry.getKey(), entry.getValue());
1:             }
1:         }
1:     }
1: }
============================================================================