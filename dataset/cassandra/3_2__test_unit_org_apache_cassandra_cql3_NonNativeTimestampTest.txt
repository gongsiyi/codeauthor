1:e95e569: /*
1:e95e569:  * Licensed to the Apache Software Foundation (ASF) under one
1:e95e569:  * or more contributor license agreements.  See the NOTICE file
1:e95e569:  * distributed with this work for additional information
1:e95e569:  * regarding copyright ownership.  The ASF licenses this file
1:e95e569:  * to you under the Apache License, Version 2.0 (the
1:e95e569:  * "License"); you may not use this file except in compliance
1:e95e569:  * with the License.  You may obtain a copy of the License at
1:e95e569:  *
1:e95e569:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e95e569:  *
1:e95e569:  * Unless required by applicable law or agreed to in writing, software
1:e95e569:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e95e569:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e95e569:  * See the License for the specific language governing permissions and
1:e95e569:  * limitations under the License.
1:e95e569:  */
1:e95e569: package org.apache.cassandra.cql3;
4:e95e569: 
1:e95e569: import org.junit.Test;
1:e95e569: 
1:e95e569: import static junit.framework.Assert.assertEquals;
1:e95e569: import static junit.framework.Assert.assertFalse;
1:e95e569: import static org.junit.Assert.assertTrue;
1:e95e569: 
1:a991b64: public class NonNativeTimestampTest extends CQLTester
2:e95e569: {
1:e95e569:     @Test
1:a991b64:     public void setServerTimestampForNonCqlNativeStatements() throws Throwable
1:e95e569:     {
1:a991b64:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1:e95e569: 
1:a991b64:         execute("INSERT INTO %s (k, v) values (1, ?)", 2);
1:a991b64: 
1:a991b64:         UntypedResultSet.Row row = execute("SELECT v, writetime(v) AS wt FROM %s WHERE k = 1").one();
1:e95e569:         assertEquals(2, row.getInt("v"));
1:e95e569:         long timestamp1 = row.getLong("wt");
1:e95e569:         assertFalse(timestamp1 == -1l);
1:e95e569: 
1:e95e569:         // per CASSANDRA-8246 the two updates will have the same (incorrect)
1:e95e569:         // timestamp, so reconcilliation is by value and the "older" update wins
1:a991b64:         execute("INSERT INTO %s (k, v) values (1, ?)", 1);
1:a991b64: 
1:a991b64:         row = execute("SELECT v, writetime(v) AS wt FROM %s WHERE k = 1").one();
1:e95e569:         assertEquals(1, row.getInt("v"));
1:e95e569:         assertTrue(row.getLong("wt") > timestamp1);
2:e95e569:     }
1:e95e569: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:c87b6a3
/////////////////////////////////////////////////////////////////////////
0:     public void setServerTimestampForNonCqlNativeStatements() throws RequestValidationException, RequestExecutionException
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: public class NonNativeTimestampTest extends CQLTester
1:     public void setServerTimestampForNonCqlNativeStatements() throws Throwable
1:         createTable("CREATE TABLE %s (k int PRIMARY KEY, v int)");
1:         execute("INSERT INTO %s (k, v) values (1, ?)", 2);
1: 
1:         UntypedResultSet.Row row = execute("SELECT v, writetime(v) AS wt FROM %s WHERE k = 1").one();
1:         execute("INSERT INTO %s (k, v) values (1, ?)", 1);
1: 
1:         row = execute("SELECT v, writetime(v) AS wt FROM %s WHERE k = 1").one();
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:e95e569
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
0: import java.io.UnsupportedEncodingException;
0: import java.nio.ByteBuffer;
0: import java.nio.charset.CharacterCodingException;
0: import java.util.Arrays;
0: import java.util.Collections;
1: 
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.exceptions.RequestExecutionException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
0: import org.apache.cassandra.service.EmbeddedCassandraService;
0: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
0: public class NonNativeTimestampTest extends SchemaLoader
1: {
0:     @BeforeClass
0:     public static void setup() throws Exception
1:     {
0:         Schema.instance.clear();
0:         EmbeddedCassandraService cassandra = new EmbeddedCassandraService();
0:         cassandra.start();
1:     }
1: 
1:     @Test
0:     public void setServerTimestampForNonCqlNativeStatements() throws RequestValidationException, RequestExecutionException, CharacterCodingException, UnsupportedEncodingException
1:     {
0:         String createKsCQL = "CREATE KEYSPACE non_native_ts_test" +
0:                              " WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };";
0:         String createTableCQL = "CREATE TABLE non_native_ts_test.table_0 (k int PRIMARY KEY, v int)";
0:         String insertCQL = "INSERT INTO non_native_ts_test.table_0 (k, v) values (1, ?)";
0:         String selectCQL = "SELECT v, writetime(v) AS wt FROM non_native_ts_test.table_0 WHERE k = 1";
1: 
0:         QueryProcessor.instance.process(createKsCQL,
0:                                         QueryState.forInternalCalls(),
0:                                         QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList()));
0:         QueryProcessor.instance.process(createTableCQL,
0:                                         QueryState.forInternalCalls(),
0:                                         QueryOptions.forInternalCalls(Collections.<ByteBuffer>emptyList()));
0:         QueryProcessor.instance.process(insertCQL,
0:                                         QueryState.forInternalCalls(),
0:                                         QueryOptions.forInternalCalls(ConsistencyLevel.ONE,
0:                                                                       Arrays.asList(ByteBufferUtil.bytes(2))));
0:         UntypedResultSet.Row row = QueryProcessor.instance.executeInternal(selectCQL).one();
1:         assertEquals(2, row.getInt("v"));
1:         long timestamp1 = row.getLong("wt");
1:         assertFalse(timestamp1 == -1l);
1: 
1:         // per CASSANDRA-8246 the two updates will have the same (incorrect)
1:         // timestamp, so reconcilliation is by value and the "older" update wins
0:         QueryProcessor.instance.process(insertCQL,
0:                                         QueryState.forInternalCalls(),
0:                                         QueryOptions.forInternalCalls(ConsistencyLevel.ONE,
0:                                                                       Arrays.asList(ByteBufferUtil.bytes(1))));
0:         row = QueryProcessor.executeInternal(selectCQL).one();
1:         assertEquals(1, row.getInt("v"));
1:         assertTrue(row.getLong("wt") > timestamp1);
1:     }
1: }
============================================================================