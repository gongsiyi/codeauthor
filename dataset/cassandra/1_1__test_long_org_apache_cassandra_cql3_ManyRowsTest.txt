1:01115f7: /*
1:01115f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:01115f7:  * or more contributor license agreements.  See the NOTICE file
1:01115f7:  * distributed with this work for additional information
1:01115f7:  * regarding copyright ownership.  The ASF licenses this file
1:01115f7:  * to you under the Apache License, Version 2.0 (the
1:01115f7:  * "License"); you may not use this file except in compliance
1:01115f7:  * with the License.  You may obtain a copy of the License at
1:01115f7:  *
1:01115f7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:01115f7:  *
1:01115f7:  * Unless required by applicable law or agreed to in writing, software
1:01115f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:01115f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:01115f7:  * See the License for the specific language governing permissions and
1:01115f7:  * limitations under the License.
1:01115f7:  */
1:01115f7: 
1:01115f7: package org.apache.cassandra.cql3;
1:01115f7: 
1:01115f7: import java.util.ArrayList;
1:01115f7: import java.util.HashSet;
1:01115f7: import java.util.List;
1:01115f7: import java.util.Random;
1:01115f7: import java.util.Set;
1:01115f7: 
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: public class ManyRowsTest extends CQLTester
1:01115f7: {
1:01115f7:     /**
1:01115f7:      * Migrated from cql_tests.py:TestCQL.large_count_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testLargeCount() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k))");
1:01115f7: 
1:01115f7:         // We know we page at 10K, so test counting just before, at 10K, just after and
1:01115f7:         // a bit after that.
1:01115f7:         for (int k = 1; k < 10000; k++)
1:01115f7:             execute("INSERT INTO %s (k) VALUES (?)", k);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(9999L));
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k) VALUES (?)", 10000);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(10000L));
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k) VALUES (?)", 10001);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(10001L));
1:01115f7: 
1:01115f7:         for (int k = 10002; k < 15001; k++)
1:01115f7:             execute("INSERT INTO %s (k) VALUES (?)", k);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(15000L));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test for CASSANDRA-8410,
1:01115f7:      * migrated from cql_tests.py:TestCQL.large_clustering_in_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testLargeClustering() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, c int, v int, PRIMARY KEY (k, c) )");
1:01115f7: 
1:01115f7:         execute("INSERT INTO %s (k, c, v) VALUES (?, ?, ?)", 0, 0, 0);
1:01115f7: 
1:01115f7:         // try to fetch one existing row and 9999 non-existing rows
1:01115f7:         List<Integer> inValues = new ArrayList(10000);
1:01115f7:         for (int i = 0; i < 10000; i++)
1:01115f7:             inValues.add(i);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k=? AND c IN ?", 0, inValues),
1:01115f7:                    row(0, 0, 0));
1:01115f7: 
1:01115f7:         // insert approximately 1000 random rows between 0 and 10k
1:01115f7:         Random rnd = new Random();
1:01115f7:         Set<Integer> clusteringValues = new HashSet<>();
1:01115f7:         for (int i = 0; i < 1000; i++)
1:01115f7:             clusteringValues.add(rnd.nextInt(10000));
1:01115f7: 
1:01115f7:         clusteringValues.add(0);
1:01115f7: 
1:01115f7:         for (int i : clusteringValues) // TODO - this was done in parallel by dtests
1:01115f7:             execute("INSERT INTO %s (k, c, v) VALUES (?, ?, ?)", 0, i, i);
1:01115f7: 
1:01115f7:         assertRowCount(execute("SELECT * FROM %s WHERE k=? AND c IN ?", 0, inValues), clusteringValues.size());
1:01115f7:     }
1:01115f7: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Random;
1: import java.util.Set;
1: 
1: import org.junit.Test;
1: 
1: public class ManyRowsTest extends CQLTester
1: {
1:     /**
1:      * Migrated from cql_tests.py:TestCQL.large_count_test()
1:      */
1:     @Test
1:     public void testLargeCount() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k))");
1: 
1:         // We know we page at 10K, so test counting just before, at 10K, just after and
1:         // a bit after that.
1:         for (int k = 1; k < 10000; k++)
1:             execute("INSERT INTO %s (k) VALUES (?)", k);
1: 
1:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(9999L));
1: 
1:         execute("INSERT INTO %s (k) VALUES (?)", 10000);
1: 
1:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(10000L));
1: 
1:         execute("INSERT INTO %s (k) VALUES (?)", 10001);
1: 
1:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(10001L));
1: 
1:         for (int k = 10002; k < 15001; k++)
1:             execute("INSERT INTO %s (k) VALUES (?)", k);
1: 
1:         assertRows(execute("SELECT COUNT(*) FROM %s"), row(15000L));
1:     }
1: 
1:     /**
1:      * Test for CASSANDRA-8410,
1:      * migrated from cql_tests.py:TestCQL.large_clustering_in_test()
1:      */
1:     @Test
1:     public void testLargeClustering() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, c int, v int, PRIMARY KEY (k, c) )");
1: 
1:         execute("INSERT INTO %s (k, c, v) VALUES (?, ?, ?)", 0, 0, 0);
1: 
1:         // try to fetch one existing row and 9999 non-existing rows
1:         List<Integer> inValues = new ArrayList(10000);
1:         for (int i = 0; i < 10000; i++)
1:             inValues.add(i);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE k=? AND c IN ?", 0, inValues),
1:                    row(0, 0, 0));
1: 
1:         // insert approximately 1000 random rows between 0 and 10k
1:         Random rnd = new Random();
1:         Set<Integer> clusteringValues = new HashSet<>();
1:         for (int i = 0; i < 1000; i++)
1:             clusteringValues.add(rnd.nextInt(10000));
1: 
1:         clusteringValues.add(0);
1: 
1:         for (int i : clusteringValues) // TODO - this was done in parallel by dtests
1:             execute("INSERT INTO %s (k, c, v) VALUES (?, ?, ?)", 0, i, i);
1: 
1:         assertRowCount(execute("SELECT * FROM %s WHERE k=? AND c IN ?", 0, inValues), clusteringValues.size());
1:     }
1: }
============================================================================