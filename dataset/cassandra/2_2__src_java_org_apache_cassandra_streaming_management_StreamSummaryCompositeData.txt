1:a0d6ed1: /*
1:a0d6ed1:  * Licensed to the Apache Software Foundation (ASF) under one
1:a0d6ed1:  * or more contributor license agreements.  See the NOTICE file
1:a0d6ed1:  * distributed with this work for additional information
1:a0d6ed1:  * regarding copyright ownership.  The ASF licenses this file
1:a0d6ed1:  * to you under the Apache License, Version 2.0 (the
1:a0d6ed1:  * "License"); you may not use this file except in compliance
1:a0d6ed1:  * with the License.  You may obtain a copy of the License at
1:a0d6ed1:  *
1:a0d6ed1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a0d6ed1:  *
1:a0d6ed1:  * Unless required by applicable law or agreed to in writing, software
1:a0d6ed1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0d6ed1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0d6ed1:  * See the License for the specific language governing permissions and
1:a0d6ed1:  * limitations under the License.
1:a0d6ed1:  */
1:a0d6ed1: package org.apache.cassandra.streaming.management;
1:a0d6ed1: 
1:a0d6ed1: import java.util.HashMap;
1:a0d6ed1: import java.util.Map;
1:a0d6ed1: import java.util.UUID;
1:a0d6ed1: import javax.management.openmbean.*;
1:a0d6ed1: 
1:a0d6ed1: import com.google.common.base.Throwables;
1:a0d6ed1: 
1:a0d6ed1: import org.apache.cassandra.streaming.StreamSummary;
1:a0d6ed1: 
1:a0d6ed1: /**
1:a0d6ed1:  */
1:a0d6ed1: public class StreamSummaryCompositeData
1:a0d6ed1: {
1:a0d6ed1:     private static final String[] ITEM_NAMES = new String[]{"cfId",
1:a0d6ed1:                                                             "files",
1:a0d6ed1:                                                             "totalSize"};
1:a0d6ed1:     private static final String[] ITEM_DESCS = new String[]{"ColumnFamilu ID",
1:a0d6ed1:                                                             "Number of files",
1:a0d6ed1:                                                             "Total bytes of the files"};
1:a0d6ed1:     private static final OpenType<?>[] ITEM_TYPES = new OpenType[]{SimpleType.STRING,
1:a0d6ed1:                                                                    SimpleType.INTEGER,
1:a0d6ed1:                                                                    SimpleType.LONG};
1:a0d6ed1: 
1:a0d6ed1:     public static final CompositeType COMPOSITE_TYPE;
1:68d2526:     static
1:68d2526:     {
1:a0d6ed1:         try
1:a0d6ed1:         {
1:a0d6ed1:             COMPOSITE_TYPE = new CompositeType(StreamSummary.class.getName(),
1:a0d6ed1:                                                "StreamSummary",
1:a0d6ed1:                                                ITEM_NAMES,
1:a0d6ed1:                                                ITEM_DESCS,
1:a0d6ed1:                                                ITEM_TYPES);
1:a0d6ed1:         }
1:a0d6ed1:         catch (OpenDataException e)
1:a0d6ed1:         {
1:a0d6ed1:             throw Throwables.propagate(e);
1:a0d6ed1:         }
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public static CompositeData toCompositeData(StreamSummary streamSummary)
1:a0d6ed1:     {
1:a0d6ed1:         Map<String, Object> valueMap = new HashMap<>();
1:a0d6ed1:         valueMap.put(ITEM_NAMES[0], streamSummary.cfId.toString());
1:a0d6ed1:         valueMap.put(ITEM_NAMES[1], streamSummary.files);
1:a0d6ed1:         valueMap.put(ITEM_NAMES[2], streamSummary.totalSize);
1:a0d6ed1:         try
1:a0d6ed1:         {
1:a0d6ed1:             return new CompositeDataSupport(COMPOSITE_TYPE, valueMap);
1:a0d6ed1:         }
1:a0d6ed1:         catch (OpenDataException e)
1:a0d6ed1:         {
1:a0d6ed1:             throw Throwables.propagate(e);
1:a0d6ed1:         }
1:a0d6ed1:     }
1:a0d6ed1: 
1:a0d6ed1:     public static StreamSummary fromCompositeData(CompositeData cd)
1:a0d6ed1:     {
1:a0d6ed1:         Object[] values = cd.getAll(ITEM_NAMES);
1:a0d6ed1:         return new StreamSummary(UUID.fromString((String) values[0]),
1:a0d6ed1:                                  (int) values[1],
1:a0d6ed1:                                  (long) values[2]);
1:a0d6ed1:     }
1:a0d6ed1: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:a0d6ed1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.management;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.UUID;
1: import javax.management.openmbean.*;
1: 
1: import com.google.common.base.Throwables;
1: 
1: import org.apache.cassandra.streaming.StreamSummary;
1: 
1: /**
1:  */
1: public class StreamSummaryCompositeData
1: {
1:     private static final String[] ITEM_NAMES = new String[]{"cfId",
1:                                                             "files",
1:                                                             "totalSize"};
1:     private static final String[] ITEM_DESCS = new String[]{"ColumnFamilu ID",
1:                                                             "Number of files",
1:                                                             "Total bytes of the files"};
1:     private static final OpenType<?>[] ITEM_TYPES = new OpenType[]{SimpleType.STRING,
1:                                                                    SimpleType.INTEGER,
1:                                                                    SimpleType.LONG};
1: 
1:     public static final CompositeType COMPOSITE_TYPE;
0:     static  {
1:         try
1:         {
1:             COMPOSITE_TYPE = new CompositeType(StreamSummary.class.getName(),
1:                                                "StreamSummary",
1:                                                ITEM_NAMES,
1:                                                ITEM_DESCS,
1:                                                ITEM_TYPES);
1:         }
1:         catch (OpenDataException e)
1:         {
1:             throw Throwables.propagate(e);
1:         }
1:     }
1: 
1:     public static CompositeData toCompositeData(StreamSummary streamSummary)
1:     {
1:         Map<String, Object> valueMap = new HashMap<>();
1:         valueMap.put(ITEM_NAMES[0], streamSummary.cfId.toString());
1:         valueMap.put(ITEM_NAMES[1], streamSummary.files);
1:         valueMap.put(ITEM_NAMES[2], streamSummary.totalSize);
1:         try
1:         {
1:             return new CompositeDataSupport(COMPOSITE_TYPE, valueMap);
1:         }
1:         catch (OpenDataException e)
1:         {
1:             throw Throwables.propagate(e);
1:         }
1:     }
1: 
1:     public static StreamSummary fromCompositeData(CompositeData cd)
1:     {
1:         Object[] values = cd.getAll(ITEM_NAMES);
1:         return new StreamSummary(UUID.fromString((String) values[0]),
1:                                  (int) values[1],
1:                                  (long) values[2]);
1:     }
1: }
============================================================================