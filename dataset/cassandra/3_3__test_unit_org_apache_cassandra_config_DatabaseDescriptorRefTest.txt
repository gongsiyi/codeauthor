1:9797511: /*
1:9797511:  * Licensed to the Apache Software Foundation (ASF) under one
1:9797511:  * or more contributor license agreements.  See the NOTICE file
1:9797511:  * distributed with this work for additional information
1:9797511:  * regarding copyright ownership.  The ASF licenses this file
1:9797511:  * to you under the Apache License, Version 2.0 (the
1:9797511:  * "License"); you may not use this file except in compliance
1:9797511:  * with the License.  You may obtain a copy of the License at
1:9797511:  *
1:9797511:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9797511:  *
1:9797511:  * Unless required by applicable law or agreed to in writing, software
1:9797511:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9797511:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9797511:  * See the License for the specific language governing permissions and
1:9797511:  * limitations under the License.
1:9797511:  */
1:9797511: 
1:9797511: package org.apache.cassandra.config;
1:9797511: 
1:9797511: import java.io.ByteArrayOutputStream;
1:9797511: import java.io.IOException;
1:9797511: import java.io.InputStream;
1:9797511: import java.io.PrintStream;
1:9797511: import java.lang.management.ManagementFactory;
1:9797511: import java.lang.management.ThreadInfo;
1:9797511: import java.lang.management.ThreadMXBean;
1:9797511: import java.lang.reflect.Method;
1:9797511: import java.net.URL;
1:9797511: import java.util.ArrayList;
1:9797511: import java.util.Arrays;
1:9797511: import java.util.Collections;
1:9797511: import java.util.HashMap;
1:9797511: import java.util.HashSet;
1:9797511: import java.util.List;
1:9797511: import java.util.Map;
1:9797511: import java.util.Set;
1:9797511: 
1:9797511: import org.junit.Test;
1:9797511: 
1:9797511: import org.apache.cassandra.utils.Pair;
1:9797511: 
1:9797511: import static org.junit.Assert.assertEquals;
1:9797511: import static org.junit.Assert.fail;
1:9797511: 
1:9797511: /**
1:9797511:  * Verifies that {@link DatabaseDescriptor#clientInitialization()} } and a couple of <i>apply</i> methods
1:9797511:  * do not somehow lazily initialize any unwanted part of Cassandra like schema, commit log or start
1:9797511:  * unexpected threads.
1:9797511:  *
1:9797511:  * {@link DatabaseDescriptor#toolInitialization()} is tested via unit tests extending
1:9797511:  * {@link org.apache.cassandra.tools.ToolsTester}.
1:9797511:  */
1:9797511: public class DatabaseDescriptorRefTest
1:9797511: {
1:9797511:     static final String[] validClasses = {
1:9797511:     "org.apache.cassandra.auth.IInternodeAuthenticator",
1:9797511:     "org.apache.cassandra.auth.IAuthenticator",
1:9797511:     "org.apache.cassandra.auth.IAuthorizer",
1:9797511:     "org.apache.cassandra.auth.IRoleManager",
1:9797511:     "org.apache.cassandra.config.DatabaseDescriptor",
1:9797511:     "org.apache.cassandra.config.ConfigurationLoader",
1:9797511:     "org.apache.cassandra.config.Config",
1:9797511:     "org.apache.cassandra.config.Config$1",
1:9797511:     "org.apache.cassandra.config.Config$RequestSchedulerId",
1:9797511:     "org.apache.cassandra.config.Config$CommitLogSync",
1:9797511:     "org.apache.cassandra.config.Config$DiskAccessMode",
1:9797511:     "org.apache.cassandra.config.Config$DiskFailurePolicy",
1:9797511:     "org.apache.cassandra.config.Config$CommitFailurePolicy",
1:9797511:     "org.apache.cassandra.config.Config$DiskOptimizationStrategy",
1:9797511:     "org.apache.cassandra.config.Config$InternodeCompression",
1:9797511:     "org.apache.cassandra.config.Config$MemtableAllocationType",
1:9797511:     "org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy",
1:9797511:     "org.apache.cassandra.config.RequestSchedulerOptions",
1:9797511:     "org.apache.cassandra.config.ParameterizedClass",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption",
1:9797511:     "org.apache.cassandra.config.YamlConfigurationLoader",
1:9797511:     "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker",
1:9797511:     "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1",
1:9797511:     "org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor",
1:9797511:     "org.apache.cassandra.config.TransparentDataEncryptionOptions",
1:9797511:     "org.apache.cassandra.dht.IPartitioner",
1:9797511:     "org.apache.cassandra.exceptions.ConfigurationException",
1:9797511:     "org.apache.cassandra.exceptions.RequestValidationException",
1:9797511:     "org.apache.cassandra.exceptions.CassandraException",
1:9797511:     "org.apache.cassandra.exceptions.TransportException",
1:9797511:     "org.apache.cassandra.locator.IEndpointSnitch",
1:9797511:     "org.apache.cassandra.io.FSWriteError",
1:9797511:     "org.apache.cassandra.io.FSError",
1:9797511:     "org.apache.cassandra.io.compress.ICompressor",
1:9797511:     "org.apache.cassandra.io.compress.LZ4Compressor",
1:9797511:     "org.apache.cassandra.io.sstable.metadata.MetadataType",
1:9797511:     "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus",
1:9797511:     "org.apache.cassandra.io.util.DataOutputBuffer",
1:9797511:     "org.apache.cassandra.io.util.DataOutputBufferFixed",
1:9797511:     "org.apache.cassandra.io.util.DataOutputStreamPlus",
1:9797511:     "org.apache.cassandra.io.util.DataOutputPlus",
1:9797511:     "org.apache.cassandra.io.util.DiskOptimizationStrategy",
1:cf5cd15:     "org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy",
1:9797511:     "org.apache.cassandra.locator.SimpleSeedProvider",
1:9797511:     "org.apache.cassandra.locator.SeedProvider",
1:d43b9ce:     "org.apache.cassandra.net.BackPressureStrategy",
1:9797511:     "org.apache.cassandra.scheduler.IRequestScheduler",
1:9797511:     "org.apache.cassandra.security.EncryptionContext",
1:9797511:     "org.apache.cassandra.service.CacheService$CacheType",
1:9797511:     "org.apache.cassandra.utils.FBUtilities",
1:9797511:     "org.apache.cassandra.utils.FBUtilities$1",
1:9797511:     "org.apache.cassandra.utils.CloseableIterator",
1:9797511:     "org.apache.cassandra.utils.Pair",
1:9797511:     "org.apache.cassandra.OffsetAwareConfigurationLoader",
1:9797511:     "org.apache.cassandra.ConsoleAppender",
1:9797511:     "org.apache.cassandra.ConsoleAppender$1",
1:9797511:     "org.apache.cassandra.LogbackStatusListener",
1:9797511:     "org.apache.cassandra.LogbackStatusListener$1",
1:9797511:     "org.apache.cassandra.LogbackStatusListener$2",
1:9797511:     "org.apache.cassandra.TeeingAppender",
1:9797511:     // generated classes
1:9797511:     "org.apache.cassandra.config.ConfigBeanInfo",
1:9797511:     "org.apache.cassandra.config.ConfigCustomizer",
1:9797511:     "org.apache.cassandra.config.EncryptionOptionsBeanInfo",
1:9797511:     "org.apache.cassandra.config.EncryptionOptionsCustomizer",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptionsBeanInfo",
1:9797511:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptionsCustomizer",
1:9797511:     "org.apache.cassandra.ConsoleAppenderBeanInfo",
1:9797511:     "org.apache.cassandra.ConsoleAppenderCustomizer",
1:9797511:     };
1:9797511: 
1:9797511:     static final Set<String> checkedClasses = new HashSet<>(Arrays.asList(validClasses));
1:9797511: 
1:9797511:     @Test
1:9797511:     public void testDatabaseDescriptorRef() throws Throwable
1:9797511:     {
1:9797511:         PrintStream out = System.out;
1:9797511:         PrintStream err = System.err;
1:9797511: 
1:9797511:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1:9797511:         int threadCount = threads.getThreadCount();
1:9797511: 
1:9797511:         ClassLoader delegate = Thread.currentThread().getContextClassLoader();
1:9797511: 
1:9797511:         List<Pair<String, Exception>> violations = Collections.synchronizedList(new ArrayList<>());
1:9797511: 
1:9797511:         ClassLoader cl = new ClassLoader(null)
1:9797511:         {
1:9797511:             final Map<String, Class<?>> classMap = new HashMap<>();
1:9797511: 
1:9797511:             public URL getResource(String name)
1:9797511:             {
1:9797511:                 return delegate.getResource(name);
1:9797511:             }
1:9797511: 
1:9797511:             public InputStream getResourceAsStream(String name)
1:9797511:             {
1:9797511:                 return delegate.getResourceAsStream(name);
1:9797511:             }
1:9797511: 
1:9797511:             protected Class<?> findClass(String name) throws ClassNotFoundException
1:9797511:             {
1:9797511:                 Class<?> cls = classMap.get(name);
1:9797511:                 if (cls != null)
1:9797511:                     return cls;
1:9797511: 
1:9797511:                 if (name.startsWith("org.apache.cassandra."))
1:9797511:                 {
1:9797511:                     // out.println(name);
1:9797511: 
1:9797511:                     if (!checkedClasses.contains(name))
1:9797511:                         violations.add(Pair.create(name, new Exception()));
1:9797511:                 }
1:9797511: 
1:9797511:                 URL url = delegate.getResource(name.replace('.', '/') + ".class");
1:9797511:                 if (url == null)
1:9797511:                     throw new ClassNotFoundException(name);
1:9797511:                 try (InputStream in = url.openConnection().getInputStream())
1:9797511:                 {
1:9797511:                     ByteArrayOutputStream os = new ByteArrayOutputStream();
1:9797511:                     int c;
1:9797511:                     while ((c = in.read()) != -1)
1:9797511:                         os.write(c);
1:9797511:                     byte[] data = os.toByteArray();
1:9797511:                     cls = defineClass(name, data, 0, data.length);
1:9797511:                     classMap.put(name, cls);
1:9797511:                     return cls;
1:9797511:                 }
1:9797511:                 catch (IOException e)
1:9797511:                 {
1:9797511:                     throw new ClassNotFoundException(name, e);
1:9797511:                 }
1:9797511:             }
1:9797511:         };
1:9797511: 
1:9797511:         Thread.currentThread().setContextClassLoader(cl);
1:9797511: 
1:9797511:         assertEquals("thread started", threadCount, threads.getThreadCount());
1:9797511: 
1:9797511:         Class cDatabaseDescriptor = Class.forName("org.apache.cassandra.config.DatabaseDescriptor", true, cl);
1:9797511: 
1:9797511:         for (String methodName : new String[]{
1:9797511:             "clientInitialization",
1:9797511:             "applyAddressConfig",
1:9797511:             "applyThriftHSHA",
1:9797511:             "applyInitialTokens",
1:9797511:             // no seed provider in default configuration for clients
1:9797511:             // "applySeedProvider",
1:9797511:             // definitely not safe for clients - implicitly instantiates schema
1:9797511:             // "applyPartitioner",
1:9797511:             // definitely not safe for clients - implicitly instantiates StorageService
1:9797511:             // "applySnitch",
1:9797511:             "applyEncryptionContext",
1:9797511:             // starts "REQUEST-SCHEDULER" thread via RoundRobinScheduler
1:9797511:             // "applyRequestScheduler",
1:9797511:         })
1:9797511:         {
1:9797511:             Method method = cDatabaseDescriptor.getDeclaredMethod(methodName);
1:9797511:             method.invoke(null);
1:9797511: 
1:9797511:             if ("clientInitialization".equals(methodName) &&
1:9797511:                 threadCount + 1 == threads.getThreadCount())
1:9797511:             {
1:9797511:                 // ignore the "AsyncAppender-Worker-ASYNC" thread
1:9797511:                 threadCount++;
1:9797511:             }
1:9797511: 
1:9797511:             if (threadCount != threads.getThreadCount())
1:9797511:             {
1:9797511:                 for (ThreadInfo threadInfo : threads.getThreadInfo(threads.getAllThreadIds()))
1:9797511:                     out.println("Thread #" + threadInfo.getThreadId() + ": " + threadInfo.getThreadName());
1:9797511:                 assertEquals("thread started in " + methodName, threadCount, ManagementFactory.getThreadMXBean().getThreadCount());
1:9797511:             }
1:9797511: 
1:9797511:             checkViolations(err, violations);
1:9797511:         }
1:9797511:     }
1:9797511: 
1:9797511:     private void checkViolations(PrintStream err, List<Pair<String, Exception>> violations)
1:9797511:     {
1:9797511:         if (!violations.isEmpty())
1:9797511:         {
1:9797511:             for (Pair<String, Exception> violation : new ArrayList<>(violations))
1:9797511:             {
1:9797511:                 err.println();
1:9797511:                 err.println();
1:9797511:                 err.println("VIOLATION: " + violation.left);
1:9797511:                 violation.right.printStackTrace(err);
1:9797511:             }
1:9797511: 
1:9797511:             fail();
1:9797511:         }
1:9797511:     }
1:9797511: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:cf5cd15
/////////////////////////////////////////////////////////////////////////
1:     "org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy",
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1:     "org.apache.cassandra.net.BackPressureStrategy",
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.config;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.PrintStream;
1: import java.lang.management.ManagementFactory;
1: import java.lang.management.ThreadInfo;
1: import java.lang.management.ThreadMXBean;
1: import java.lang.reflect.Method;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.utils.Pair;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: /**
1:  * Verifies that {@link DatabaseDescriptor#clientInitialization()} } and a couple of <i>apply</i> methods
1:  * do not somehow lazily initialize any unwanted part of Cassandra like schema, commit log or start
1:  * unexpected threads.
1:  *
1:  * {@link DatabaseDescriptor#toolInitialization()} is tested via unit tests extending
1:  * {@link org.apache.cassandra.tools.ToolsTester}.
1:  */
1: public class DatabaseDescriptorRefTest
1: {
1:     static final String[] validClasses = {
1:     "org.apache.cassandra.auth.IInternodeAuthenticator",
1:     "org.apache.cassandra.auth.IAuthenticator",
1:     "org.apache.cassandra.auth.IAuthorizer",
1:     "org.apache.cassandra.auth.IRoleManager",
1:     "org.apache.cassandra.config.DatabaseDescriptor",
1:     "org.apache.cassandra.config.ConfigurationLoader",
1:     "org.apache.cassandra.config.Config",
1:     "org.apache.cassandra.config.Config$1",
1:     "org.apache.cassandra.config.Config$RequestSchedulerId",
1:     "org.apache.cassandra.config.Config$CommitLogSync",
1:     "org.apache.cassandra.config.Config$DiskAccessMode",
1:     "org.apache.cassandra.config.Config$DiskFailurePolicy",
1:     "org.apache.cassandra.config.Config$CommitFailurePolicy",
1:     "org.apache.cassandra.config.Config$DiskOptimizationStrategy",
1:     "org.apache.cassandra.config.Config$InternodeCompression",
1:     "org.apache.cassandra.config.Config$MemtableAllocationType",
1:     "org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy",
1:     "org.apache.cassandra.config.RequestSchedulerOptions",
1:     "org.apache.cassandra.config.ParameterizedClass",
1:     "org.apache.cassandra.config.EncryptionOptions",
1:     "org.apache.cassandra.config.EncryptionOptions$ClientEncryptionOptions",
1:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions",
1:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions$InternodeEncryption",
1:     "org.apache.cassandra.config.YamlConfigurationLoader",
1:     "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker",
1:     "org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1",
1:     "org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor",
1:     "org.apache.cassandra.config.TransparentDataEncryptionOptions",
1:     "org.apache.cassandra.dht.IPartitioner",
1:     "org.apache.cassandra.exceptions.ConfigurationException",
1:     "org.apache.cassandra.exceptions.RequestValidationException",
1:     "org.apache.cassandra.exceptions.CassandraException",
1:     "org.apache.cassandra.exceptions.TransportException",
1:     "org.apache.cassandra.locator.IEndpointSnitch",
1:     "org.apache.cassandra.io.FSWriteError",
1:     "org.apache.cassandra.io.FSError",
1:     "org.apache.cassandra.io.compress.ICompressor",
1:     "org.apache.cassandra.io.compress.LZ4Compressor",
1:     "org.apache.cassandra.io.sstable.metadata.MetadataType",
1:     "org.apache.cassandra.io.util.BufferedDataOutputStreamPlus",
1:     "org.apache.cassandra.io.util.DataOutputBuffer",
1:     "org.apache.cassandra.io.util.DataOutputBufferFixed",
1:     "org.apache.cassandra.io.util.DataOutputStreamPlus",
1:     "org.apache.cassandra.io.util.DataOutputPlus",
1:     "org.apache.cassandra.io.util.DiskOptimizationStrategy",
1:     "org.apache.cassandra.locator.SimpleSeedProvider",
1:     "org.apache.cassandra.locator.SeedProvider",
1:     "org.apache.cassandra.scheduler.IRequestScheduler",
1:     "org.apache.cassandra.security.EncryptionContext",
1:     "org.apache.cassandra.service.CacheService$CacheType",
1:     "org.apache.cassandra.utils.FBUtilities",
1:     "org.apache.cassandra.utils.FBUtilities$1",
1:     "org.apache.cassandra.utils.CloseableIterator",
1:     "org.apache.cassandra.utils.Pair",
1:     "org.apache.cassandra.OffsetAwareConfigurationLoader",
1:     "org.apache.cassandra.ConsoleAppender",
1:     "org.apache.cassandra.ConsoleAppender$1",
1:     "org.apache.cassandra.LogbackStatusListener",
1:     "org.apache.cassandra.LogbackStatusListener$1",
1:     "org.apache.cassandra.LogbackStatusListener$2",
1:     "org.apache.cassandra.TeeingAppender",
1:     // generated classes
1:     "org.apache.cassandra.config.ConfigBeanInfo",
1:     "org.apache.cassandra.config.ConfigCustomizer",
1:     "org.apache.cassandra.config.EncryptionOptionsBeanInfo",
1:     "org.apache.cassandra.config.EncryptionOptionsCustomizer",
1:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptionsBeanInfo",
1:     "org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptionsCustomizer",
1:     "org.apache.cassandra.ConsoleAppenderBeanInfo",
1:     "org.apache.cassandra.ConsoleAppenderCustomizer",
1:     };
1: 
1:     static final Set<String> checkedClasses = new HashSet<>(Arrays.asList(validClasses));
1: 
1:     @Test
1:     public void testDatabaseDescriptorRef() throws Throwable
1:     {
1:         PrintStream out = System.out;
1:         PrintStream err = System.err;
1: 
1:         ThreadMXBean threads = ManagementFactory.getThreadMXBean();
1:         int threadCount = threads.getThreadCount();
1: 
1:         ClassLoader delegate = Thread.currentThread().getContextClassLoader();
1: 
1:         List<Pair<String, Exception>> violations = Collections.synchronizedList(new ArrayList<>());
1: 
1:         ClassLoader cl = new ClassLoader(null)
1:         {
1:             final Map<String, Class<?>> classMap = new HashMap<>();
1: 
1:             public URL getResource(String name)
1:             {
1:                 return delegate.getResource(name);
1:             }
1: 
1:             public InputStream getResourceAsStream(String name)
1:             {
1:                 return delegate.getResourceAsStream(name);
1:             }
1: 
1:             protected Class<?> findClass(String name) throws ClassNotFoundException
1:             {
1:                 Class<?> cls = classMap.get(name);
1:                 if (cls != null)
1:                     return cls;
1: 
1:                 if (name.startsWith("org.apache.cassandra."))
1:                 {
1:                     // out.println(name);
1: 
1:                     if (!checkedClasses.contains(name))
1:                         violations.add(Pair.create(name, new Exception()));
1:                 }
1: 
1:                 URL url = delegate.getResource(name.replace('.', '/') + ".class");
1:                 if (url == null)
1:                     throw new ClassNotFoundException(name);
1:                 try (InputStream in = url.openConnection().getInputStream())
1:                 {
1:                     ByteArrayOutputStream os = new ByteArrayOutputStream();
1:                     int c;
1:                     while ((c = in.read()) != -1)
1:                         os.write(c);
1:                     byte[] data = os.toByteArray();
1:                     cls = defineClass(name, data, 0, data.length);
1:                     classMap.put(name, cls);
1:                     return cls;
1:                 }
1:                 catch (IOException e)
1:                 {
1:                     throw new ClassNotFoundException(name, e);
1:                 }
1:             }
1:         };
1: 
1:         Thread.currentThread().setContextClassLoader(cl);
1: 
1:         assertEquals("thread started", threadCount, threads.getThreadCount());
1: 
1:         Class cDatabaseDescriptor = Class.forName("org.apache.cassandra.config.DatabaseDescriptor", true, cl);
1: 
1:         for (String methodName : new String[]{
1:             "clientInitialization",
1:             "applyAddressConfig",
1:             "applyThriftHSHA",
1:             "applyInitialTokens",
1:             // no seed provider in default configuration for clients
1:             // "applySeedProvider",
1:             // definitely not safe for clients - implicitly instantiates schema
1:             // "applyPartitioner",
1:             // definitely not safe for clients - implicitly instantiates StorageService
1:             // "applySnitch",
1:             "applyEncryptionContext",
1:             // starts "REQUEST-SCHEDULER" thread via RoundRobinScheduler
1:             // "applyRequestScheduler",
1:         })
1:         {
1:             Method method = cDatabaseDescriptor.getDeclaredMethod(methodName);
1:             method.invoke(null);
1: 
1:             if ("clientInitialization".equals(methodName) &&
1:                 threadCount + 1 == threads.getThreadCount())
1:             {
1:                 // ignore the "AsyncAppender-Worker-ASYNC" thread
1:                 threadCount++;
1:             }
1: 
1:             if (threadCount != threads.getThreadCount())
1:             {
1:                 for (ThreadInfo threadInfo : threads.getThreadInfo(threads.getAllThreadIds()))
1:                     out.println("Thread #" + threadInfo.getThreadId() + ": " + threadInfo.getThreadName());
1:                 assertEquals("thread started in " + methodName, threadCount, ManagementFactory.getThreadMXBean().getThreadCount());
1:             }
1: 
1:             checkViolations(err, violations);
1:         }
1:     }
1: 
1:     private void checkViolations(PrintStream err, List<Pair<String, Exception>> violations)
1:     {
1:         if (!violations.isEmpty())
1:         {
1:             for (Pair<String, Exception> violation : new ArrayList<>(violations))
1:             {
1:                 err.println();
1:                 err.println();
1:                 err.println("VIOLATION: " + violation.left);
1:                 violation.right.printStackTrace(err);
1:             }
1: 
1:             fail();
1:         }
1:     }
1: }
============================================================================