1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.auth;
1:5a3eb1a: 
1:5a3eb1a: import java.util.Set;
1:5a3eb1a: 
1:5a3eb1a: import org.apache.cassandra.exceptions.ConfigurationException;
1:0b83682: import org.apache.cassandra.exceptions.RequestExecutionException;
1:0b83682: import org.apache.cassandra.exceptions.RequestValidationException;
1:5a3eb1a: 
1:5a3eb1a: /**
1:5a3eb1a:  * Primary Cassandra authorization interface.
1:5a3eb1a:  */
1:5a3eb1a: public interface IAuthorizer
1:5a3eb1a: {
1:5a3eb1a:     /**
1:f54eab7:      * Whether or not the authorizer will attempt authorization.
1:f54eab7:      * If false the authorizer will not be called for authorization of resources.
1:f54eab7:      */
1:f54eab7:     default boolean requireAuthorization()
1:f54eab7:     {
1:f54eab7:         return true;
1:f54eab7:     }
1:f54eab7: 
1:f54eab7:     /**
1:879b694:      * Returns a set of permissions of a user on a resource.
1:79e1e80:      * Since Roles were introduced in version 2.2, Cassandra does not distinguish in any
1:879b694:      * meaningful way between users and roles. A role may or may not have login privileges
1:879b694:      * and roles may be granted to other roles. In fact, Cassandra does not really have the
1:879b694:      * concept of a user, except to link a client session to role. AuthenticatedUser can be
1:879b694:      * thought of as a manifestation of a role, linked to a specific client connection.
1:5a3eb1a:      *
1:5a3eb1a:      * @param user Authenticated user requesting authorization.
1:5a3eb1a:      * @param resource Resource for which the authorization is being requested. @see DataResource.
1:5a3eb1a:      * @return Set of permissions of the user on the resource. Should never return null. Use Permission.NONE instead.
1:5a3eb1a:      */
1:bddfa9e:     Set<Permission> authorize(AuthenticatedUser user, IResource resource);
1:5a3eb1a: 
1:5a3eb1a:     /**
1:879b694:      * Grants a set of permissions on a resource to a role.
1:5a3eb1a:      * The opposite of revoke().
1:9072757:      * This method is optional and may be called internally, so implementations which do
1:9072757:      * not support it should be sure to throw UnsupportedOperationException.
1:5a3eb1a:      *
1:5a3eb1a:      * @param performer User who grants the permissions.
1:5a3eb1a:      * @param permissions Set of permissions to grant.
1:5a3eb1a:      * @param resource Resource on which to grant the permissions.
1:217721a:      * @param grantee Role to which the permissions are to be granted.
1:5a3eb1a:      *
1:0b83682:      * @throws RequestValidationException
1:0b83682:      * @throws RequestExecutionException
1:9072757:      * @throws java.lang.UnsupportedOperationException
1:5a3eb1a:      */
1:217721a:     void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource grantee)
1:0b83682:     throws RequestValidationException, RequestExecutionException;
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Revokes a set of permissions on a resource from a user.
1:5a3eb1a:      * The opposite of grant().
1:9072757:      * This method is optional and may be called internally, so implementations which do
1:9072757:      * not support it should be sure to throw UnsupportedOperationException.
1:5a3eb1a:      *
1:5a3eb1a:      * @param performer User who revokes the permissions.
1:5a3eb1a:      * @param permissions Set of permissions to revoke.
1:217721a:      * @param revokee Role from which to the permissions are to be revoked.
1:5a3eb1a:      * @param resource Resource on which to revoke the permissions.
1:5a3eb1a:      *
1:0b83682:      * @throws RequestValidationException
1:0b83682:      * @throws RequestExecutionException
1:9072757:      * @throws java.lang.UnsupportedOperationException
1:5a3eb1a:      */
1:217721a:     void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource revokee)
1:0b83682:     throws RequestValidationException, RequestExecutionException;
1:5a3eb1a: 
1:5a3eb1a:     /**
1:879b694:      * Returns a list of permissions on a resource granted to a role.
1:9072757:      * This method is optional and may be called internally, so implementations which do
1:9072757:      * not support it should be sure to throw UnsupportedOperationException.
1:5a3eb1a:      *
1:5a3eb1a:      * @param performer User who wants to see the permissions.
1:879b694:      * @param permissions Set of Permission values the user is interested in. The result should only include the
1:879b694:      *                    matching ones.
1:879b694:      * @param resource The resource on which permissions are requested. Can be null, in which case permissions on all
1:879b694:      *                 resources should be returned.
1:217721a:      * @param grantee The role whose permissions are requested. Can be null, in which case permissions of every
1:879b694:      *           role should be returned.
1:5a3eb1a:      *
1:5a3eb1a:      * @return All of the matching permission that the requesting user is authorized to know about.
1:5a3eb1a:      *
1:0b83682:      * @throws RequestValidationException
1:0b83682:      * @throws RequestExecutionException
1:9072757:      * @throws java.lang.UnsupportedOperationException
1:5a3eb1a:      */
1:217721a:     Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource grantee)
1:0b83682:     throws RequestValidationException, RequestExecutionException;
1:5a3eb1a: 
1:5a3eb1a:     /**
1:879b694:      * Called before deleting a role with DROP ROLE statement (or the alias provided for compatibility,
1:879b694:      * DROP USER) so that a new role with the same name wouldn't inherit permissions of the deleted one in the future.
1:217721a:      * This removes all permissions granted to the Role in question.
1:9072757:      * This method is optional and may be called internally, so implementations which do
1:9072757:      * not support it should be sure to throw UnsupportedOperationException.
1:5a3eb1a:      *
1:879b694:      * @param revokee The role to revoke all permissions from.
1:9072757:      * @throws java.lang.UnsupportedOperationException
1:5a3eb1a:      */
1:217721a:     void revokeAllFrom(RoleResource revokee);
1:5a3eb1a: 
1:5a3eb1a:     /**
1:217721a:      * This method is called after a resource is removed (i.e. keyspace, table or role is dropped) and revokes all
1:217721a:      * permissions granted on the IResource in question.
1:9072757:      * This method is optional and may be called internally, so implementations which do
1:9072757:      * not support it should be sure to throw UnsupportedOperationException.
1:5a3eb1a:      *
1:5a3eb1a:      * @param droppedResource The resource to revoke all permissions on.
1:9072757:      * @throws java.lang.UnsupportedOperationException
1:5a3eb1a:      */
1:217721a:     void revokeAllOn(IResource droppedResource);
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:5a3eb1a:      *
1:0b83682:      * @return Keyspaces, column families that will be unmodifiable by users; other resources.
1:5a3eb1a:      */
1:bddfa9e:     Set<? extends IResource> protectedResources();
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Validates configuration of IAuthorizer implementation (if configurable).
1:5a3eb1a:      *
1:5a3eb1a:      * @throws ConfigurationException when there is a configuration error.
1:5a3eb1a:      */
1:bddfa9e:     void validateConfiguration() throws ConfigurationException;
1:5a3eb1a: 
1:5a3eb1a:     /**
1:5a3eb1a:      * Setup is called once upon system startup to initialize the IAuthorizer.
1:5a3eb1a:      *
1:5a3eb1a:      * For example, use this method to create any required keyspaces/column families.
1:5a3eb1a:      */
1:bddfa9e:     void setup();
1:5a3eb1a: }
============================================================================
author:Mike Adamson
-------------------------------------------------------------------------------
commit:f54eab7
/////////////////////////////////////////////////////////////////////////
1:      * Whether or not the authorizer will attempt authorization.
1:      * If false the authorizer will not be called for authorization of resources.
1:      */
1:     default boolean requireAuthorization()
1:     {
1:         return true;
1:     }
1: 
1:     /**
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:79e1e80
/////////////////////////////////////////////////////////////////////////
1:      * Since Roles were introduced in version 2.2, Cassandra does not distinguish in any
commit:9072757
/////////////////////////////////////////////////////////////////////////
1:      * This method is optional and may be called internally, so implementations which do
1:      * not support it should be sure to throw UnsupportedOperationException.
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.lang.UnsupportedOperationException
/////////////////////////////////////////////////////////////////////////
1:      * This method is optional and may be called internally, so implementations which do
1:      * not support it should be sure to throw UnsupportedOperationException.
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.lang.UnsupportedOperationException
1:      * This method is optional and may be called internally, so implementations which do
1:      * not support it should be sure to throw UnsupportedOperationException.
/////////////////////////////////////////////////////////////////////////
1:      * @throws java.lang.UnsupportedOperationException
/////////////////////////////////////////////////////////////////////////
1:      * This method is optional and may be called internally, so implementations which do
1:      * not support it should be sure to throw UnsupportedOperationException.
1:      * @throws java.lang.UnsupportedOperationException
1:      * This method is optional and may be called internally, so implementations which do
1:      * not support it should be sure to throw UnsupportedOperationException.
1:      * @throws java.lang.UnsupportedOperationException
commit:217721a
/////////////////////////////////////////////////////////////////////////
1:      * @param grantee Role to which the permissions are to be granted.
1:     void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource grantee)
/////////////////////////////////////////////////////////////////////////
1:      * @param revokee Role from which to the permissions are to be revoked.
1:     void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource revokee)
/////////////////////////////////////////////////////////////////////////
1:      * @param grantee The role whose permissions are requested. Can be null, in which case permissions of every
/////////////////////////////////////////////////////////////////////////
1:     Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, RoleResource grantee)
1:      * This removes all permissions granted to the Role in question.
1:     void revokeAllFrom(RoleResource revokee);
1:      * This method is called after a resource is removed (i.e. keyspace, table or role is dropped) and revokes all
1:      * permissions granted on the IResource in question.
1:     void revokeAllOn(IResource droppedResource);
commit:879b694
/////////////////////////////////////////////////////////////////////////
1:      * Returns a set of permissions of a user on a resource.
0:      * Since Roles were introduced in version 3.0, Cassandra does not distinguish in any
1:      * meaningful way between users and roles. A role may or may not have login privileges
1:      * and roles may be granted to other roles. In fact, Cassandra does not really have the
1:      * concept of a user, except to link a client session to role. AuthenticatedUser can be
1:      * thought of as a manifestation of a role, linked to a specific client connection.
/////////////////////////////////////////////////////////////////////////
1:      * Grants a set of permissions on a resource to a role.
0:      * @param to Name of the role to which the permissions are to be granted.
0:     void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String grantee)
/////////////////////////////////////////////////////////////////////////
0:      * @param revokee Name of the role from which to the permissions are to be revoked.
0:     void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String revokee)
1:      * Returns a list of permissions on a resource granted to a role.
1:      * @param permissions Set of Permission values the user is interested in. The result should only include the
1:      *                    matching ones.
1:      * @param resource The resource on which permissions are requested. Can be null, in which case permissions on all
1:      *                 resources should be returned.
0:      * @param of The name of the role whose permissions are requested. Can be null, in which case permissions of every
1:      *           role should be returned.
0:     Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String grantee)
1:      * Called before deleting a role with DROP ROLE statement (or the alias provided for compatibility,
1:      * DROP USER) so that a new role with the same name wouldn't inherit permissions of the deleted one in the future.
1:      * @param revokee The role to revoke all permissions from.
0:     void revokeAll(String revokee);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:222ea95
/////////////////////////////////////////////////////////////////////////
0:      * @param grantee name of the role to which the permissions are to be granted.
/////////////////////////////////////////////////////////////////////////
0:      * @param grantee The name of the role whose permissions are requested. Can be null, in which case permissions of every
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0b83682
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:     throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:     throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:      * @throws RequestValidationException
1:      * @throws RequestExecutionException
1:     throws RequestValidationException, RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
1:      * @return Keyspaces, column families that will be unmodifiable by users; other resources.
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1:     Set<Permission> authorize(AuthenticatedUser user, IResource resource);
/////////////////////////////////////////////////////////////////////////
0:     void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String to)
/////////////////////////////////////////////////////////////////////////
0:     void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String from)
/////////////////////////////////////////////////////////////////////////
0:     Set<PermissionDetails> list(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String of)
/////////////////////////////////////////////////////////////////////////
0:     void revokeAll(String droppedUser);
0:     void revokeAll(IResource droppedResource);
1:     Set<? extends IResource> protectedResources();
1:     void validateConfiguration() throws ConfigurationException;
1:     void setup();
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Set;
1: 
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
1: 
1: /**
1:  * Primary Cassandra authorization interface.
1:  */
1: public interface IAuthorizer
1: {
1:     /**
0:      * The primary IAuthorizer method. Returns a set of permissions of a user on a resource.
1:      *
1:      * @param user Authenticated user requesting authorization.
1:      * @param resource Resource for which the authorization is being requested. @see DataResource.
1:      * @return Set of permissions of the user on the resource. Should never return null. Use Permission.NONE instead.
1:      */
0:     public Set<Permission> authorize(AuthenticatedUser user, IResource resource);
1: 
1:     /**
0:      * Grants a set of permissions on a resource to a user.
1:      * The opposite of revoke().
1:      *
1:      * @param performer User who grants the permissions.
1:      * @param permissions Set of permissions to grant.
0:      * @param to Grantee of the permissions.
1:      * @param resource Resource on which to grant the permissions.
1:      *
0:      * @throws UnauthorizedException if the granting user isn't allowed to grant (and revoke) the permissions on the resource.
0:      * @throws InvalidRequestException upon parameter misconfiguration or internal error.
1:      */
0:     public void grant(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String to)
0:     throws UnauthorizedException, InvalidRequestException;
1: 
1:     /**
1:      * Revokes a set of permissions on a resource from a user.
1:      * The opposite of grant().
1:      *
1:      * @param performer User who revokes the permissions.
1:      * @param permissions Set of permissions to revoke.
0:      * @param from Revokee of the permissions.
1:      * @param resource Resource on which to revoke the permissions.
1:      *
0:      * @throws UnauthorizedException if the revoking user isn't allowed to revoke the permissions on the resource.
0:      * @throws InvalidRequestException upon parameter misconfiguration or internal error.
1:      */
0:     public void revoke(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String from)
0:     throws UnauthorizedException, InvalidRequestException;
1: 
1:     /**
0:      * Returns a list of permissions on a resource of a user.
1:      *
1:      * @param performer User who wants to see the permissions.
0:      * @param permissions Set of Permission values the user is interested in. The result should only include the matching ones.
0:      * @param resource The resource on which permissions are requested. Can be null, in which case permissions on all resources
0:      *                 should be returned.
0:      * @param of The user whose permissions are requested. Can be null, in which case permissions of every user should be returned.
1:      *
1:      * @return All of the matching permission that the requesting user is authorized to know about.
1:      *
0:      * @throws UnauthorizedException if the user isn't allowed to view the requested permissions.
0:      * @throws InvalidRequestException upon parameter misconfiguration or internal error.
1:      */
0:     public Set<PermissionDetails> listPermissions(AuthenticatedUser performer, Set<Permission> permissions, IResource resource, String of)
0:     throws UnauthorizedException, InvalidRequestException;
1: 
1:     /**
0:      * This method is called before deleting a user with DROP USER query so that a new user with the same
0:      * name wouldn't inherit permissions of the deleted user in the future.
1:      *
0:      * @param droppedUser The user to revoke all permissions from.
1:      */
0:     public void revokeAll(String droppedUser);
1: 
1:     /**
0:      * This method is called after a resource is removed (i.e. keyspace or a table is dropped).
1:      *
1:      * @param droppedResource The resource to revoke all permissions on.
1:      */
0:     public void revokeAll(IResource droppedResource);
1: 
1:     /**
1:      * Set of resources that should be made inaccessible to users and only accessible internally.
1:      *
0:      * @return Keyspaces, column families that will be unreadable and unmodifiable by users; other resources.
1:      */
0:     public Set<? extends IResource> protectedResources();
1: 
1:     /**
1:      * Validates configuration of IAuthorizer implementation (if configurable).
1:      *
1:      * @throws ConfigurationException when there is a configuration error.
1:      */
0:     public void validateConfiguration() throws ConfigurationException;
1: 
1:     /**
1:      * Setup is called once upon system startup to initialize the IAuthorizer.
1:      *
1:      * For example, use this method to create any required keyspaces/column families.
1:      */
0:     public void setup();
1: }
============================================================================