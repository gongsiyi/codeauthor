1:655ccc3: /*
1:655ccc3:  * Licensed to the Apache Software Foundation (ASF) under one
1:655ccc3:  * or more contributor license agreements.  See the NOTICE file
1:655ccc3:  * distributed with this work for additional information
1:655ccc3:  * regarding copyright ownership.  The ASF licenses this file
1:655ccc3:  * to you under the Apache License, Version 2.0 (the
1:655ccc3:  * "License"); you may not use this file except in compliance
1:655ccc3:  * with the License.  You may obtain a copy of the License at
3:655ccc3:  *
1:655ccc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:655ccc3:  *
1:655ccc3:  * Unless required by applicable law or agreed to in writing, software
1:655ccc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:655ccc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:655ccc3:  * See the License for the specific language governing permissions and
1:655ccc3:  * limitations under the License.
1:655ccc3:  */
1:655ccc3: package org.apache.cassandra.utils;
3:655ccc3: 
1:655ccc3: import java.util.Arrays;
1:2385dc2: import java.util.regex.Matcher;
1:2385dc2: import java.util.regex.Pattern;
1:655ccc3: 
1:655ccc3: import com.google.common.base.Objects;
1:2385dc2: import org.apache.commons.lang3.StringUtils;
1:655ccc3: 
1:655ccc3: /**
1:2385dc2:  * Implements versioning used in Cassandra and CQL.
1:6536c05:  * <p>
1:2385dc2:  * Note: The following code uses a slight variation from the semver document (http://semver.org).
1:6536c05:  * </p>
1:655ccc3:  */
1:2385dc2: public class CassandraVersion implements Comparable<CassandraVersion>
2:655ccc3: {
1:5347d72:     /**
1:5347d72:      * note: 3rd group matches to words but only allows number and checked after regexp test.
1:5347d72:      * this is because 3rd and the last can be identical.
1:5347d72:      **/
1:5347d72:     private static final String VERSION_REGEXP = "(\\d+)\\.(\\d+)(?:\\.(\\w+))?(\\-[.\\w]+)?([.+][.\\w]+)?";
1:01d26dd:     private static final Pattern PATTERN_WHITESPACE = Pattern.compile("\\w+");
1:01d26dd: 
1:655ccc3:     private static final Pattern pattern = Pattern.compile(VERSION_REGEXP);
1:2385dc2:     private static final Pattern SNAPSHOT = Pattern.compile("-SNAPSHOT");
1:655ccc3: 
1:655ccc3:     public final int major;
1:655ccc3:     public final int minor;
1:655ccc3:     public final int patch;
1:655ccc3: 
1:655ccc3:     private final String[] preRelease;
1:655ccc3:     private final String[] build;
1:655ccc3: 
1:655ccc3:     /**
1:2385dc2:      * Parse a version from a string.
1:655ccc3:      *
1:655ccc3:      * @param version the string to parse
1:655ccc3:      * @throws IllegalArgumentException if the provided string does not
1:2385dc2:      *                                  represent a version
1:655ccc3:      */
1:2385dc2:     public CassandraVersion(String version)
1:655ccc3:     {
1:2385dc2:         String stripped = SNAPSHOT.matcher(version).replaceFirst("");
1:2385dc2:         Matcher matcher = pattern.matcher(stripped);
1:655ccc3:         if (!matcher.matches())
1:2385dc2:             throw new IllegalArgumentException("Invalid version value: " + version);
1:655ccc3: 
1:655ccc3:         try
1:655ccc3:         {
1:8b374b2:             this.major = Integer.parseInt(matcher.group(1));
1:8b374b2:             this.minor = Integer.parseInt(matcher.group(2));
1:5347d72:             this.patch = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0;
1:655ccc3: 
1:655ccc3:             String pr = matcher.group(4);
1:655ccc3:             String bld = matcher.group(5);
1:655ccc3: 
1:2385dc2:             this.preRelease = pr == null || pr.isEmpty() ? null : parseIdentifiers(stripped, pr);
1:2385dc2:             this.build = bld == null || bld.isEmpty() ? null : parseIdentifiers(stripped, bld);
2:655ccc3:         }
1:655ccc3:         catch (NumberFormatException e)
1:655ccc3:         {
1:5347d72:             throw new IllegalArgumentException("Invalid version value: " + version, e);
1:655ccc3:         }
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     private static String[] parseIdentifiers(String version, String str)
1:655ccc3:     {
1:655ccc3:         // Drop initial - or +
1:655ccc3:         str = str.substring(1);
1:01d26dd:         String[] parts = StringUtils.split(str, '.');
1:655ccc3:         for (String part : parts)
1:655ccc3:         {
1:01d26dd:             if (!PATTERN_WHITESPACE.matcher(part).matches())
1:2385dc2:                 throw new IllegalArgumentException("Invalid version value: " + version);
1:655ccc3:         }
1:655ccc3:         return parts;
1:655ccc3:     }
1:655ccc3: 
1:2385dc2:     public int compareTo(CassandraVersion other)
1:655ccc3:     {
1:655ccc3:         if (major < other.major)
1:655ccc3:             return -1;
1:655ccc3:         if (major > other.major)
1:655ccc3:             return 1;
1:655ccc3: 
1:655ccc3:         if (minor < other.minor)
1:655ccc3:             return -1;
1:655ccc3:         if (minor > other.minor)
1:655ccc3:             return 1;
1:655ccc3: 
1:655ccc3:         if (patch < other.patch)
1:655ccc3:             return -1;
1:655ccc3:         if (patch > other.patch)
1:655ccc3:             return 1;
1:655ccc3: 
1:655ccc3:         int c = compareIdentifiers(preRelease, other.preRelease, 1);
1:655ccc3:         if (c != 0)
1:655ccc3:             return c;
1:655ccc3: 
1:655ccc3:         return compareIdentifiers(build, other.build, -1);
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     /**
1:655ccc3:      * Returns a version that is backward compatible with this version amongst a list
1:655ccc3:      * of provided version, or null if none can be found.
1:6536c05:      * <p>
1:655ccc3:      * For instance:
1:2385dc2:      * "2.0.0".findSupportingVersion("2.0.0", "3.0.0") == "2.0.0"
1:2385dc2:      * "2.0.0".findSupportingVersion("2.1.3", "3.0.0") == "2.1.3"
1:2385dc2:      * "2.0.0".findSupportingVersion("3.0.0") == null
1:2385dc2:      * "2.0.3".findSupportingVersion("2.0.0") == "2.0.0"
1:2385dc2:      * "2.1.0".findSupportingVersion("2.0.0") == null
1:6536c05:      * </p>
1:655ccc3:      */
1:2385dc2:     public CassandraVersion findSupportingVersion(CassandraVersion... versions)
1:655ccc3:     {
1:2385dc2:         for (CassandraVersion version : versions)
1:655ccc3:         {
1:655ccc3:             if (isSupportedBy(version))
1:655ccc3:                 return version;
1:655ccc3:         }
1:655ccc3:         return null;
1:655ccc3:     }
1:655ccc3: 
1:2385dc2:     public boolean isSupportedBy(CassandraVersion version)
1:655ccc3:     {
1:8af61ac:         return version != null && major == version.major && this.compareTo(version) <= 0;
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     private static int compareIdentifiers(String[] ids1, String[] ids2, int defaultPred)
1:655ccc3:     {
1:655ccc3:         if (ids1 == null)
1:655ccc3:             return ids2 == null ? 0 : defaultPred;
1:655ccc3:         else if (ids2 == null)
1:655ccc3:             return -defaultPred;
1:655ccc3: 
1:655ccc3:         int min = Math.min(ids1.length, ids2.length);
1:655ccc3:         for (int i = 0; i < min; i++)
1:655ccc3:         {
1:655ccc3:             Integer i1 = tryParseInt(ids1[i]);
1:655ccc3:             Integer i2 = tryParseInt(ids2[i]);
1:655ccc3: 
1:655ccc3:             if (i1 != null)
1:655ccc3:             {
1:655ccc3:                 // integer have precedence
1:655ccc3:                 if (i2 == null || i1 < i2)
1:655ccc3:                     return -1;
1:655ccc3:                 else if (i1 > i2)
1:655ccc3:                     return 1;
1:655ccc3:             }
1:655ccc3:             else
1:655ccc3:             {
1:655ccc3:                 // integer have precedence
1:655ccc3:                 if (i2 != null)
1:655ccc3:                     return 1;
1:655ccc3: 
1:655ccc3:                 int c = ids1[i].compareTo(ids2[i]);
1:655ccc3:                 if (c != 0)
1:655ccc3:                     return c;
1:655ccc3:             }
1:655ccc3:         }
1:655ccc3: 
1:655ccc3:         if (ids1.length < ids2.length)
1:655ccc3:             return -1;
1:655ccc3:         if (ids1.length > ids2.length)
1:655ccc3:             return 1;
1:655ccc3:         return 0;
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     private static Integer tryParseInt(String str)
1:655ccc3:     {
1:655ccc3:         try
1:655ccc3:         {
1:655ccc3:             return Integer.valueOf(str);
1:655ccc3:         }
1:655ccc3:         catch (NumberFormatException e)
1:655ccc3:         {
1:655ccc3:             return null;
1:655ccc3:         }
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     @Override
1:655ccc3:     public boolean equals(Object o)
1:655ccc3:     {
1:2385dc2:         if (!(o instanceof CassandraVersion))
1:655ccc3:             return false;
1:2385dc2:         CassandraVersion that = (CassandraVersion) o;
1:655ccc3:         return major == that.major
1:2385dc2:                && minor == that.minor
1:2385dc2:                && patch == that.patch
1:2385dc2:                && Arrays.equals(preRelease, that.preRelease)
1:2385dc2:                && Arrays.equals(build, that.build);
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     @Override
1:655ccc3:     public int hashCode()
1:655ccc3:     {
1:655ccc3:         return Objects.hashCode(major, minor, patch, preRelease, build);
1:655ccc3:     }
1:655ccc3: 
1:655ccc3:     @Override
1:655ccc3:     public String toString()
1:655ccc3:     {
1:655ccc3:         StringBuilder sb = new StringBuilder();
1:655ccc3:         sb.append(major).append('.').append(minor).append('.').append(patch);
1:655ccc3:         if (preRelease != null)
1:655ccc3:             sb.append('-').append(StringUtils.join(preRelease, "."));
1:655ccc3:         if (build != null)
1:655ccc3:             sb.append('+').append(StringUtils.join(build, "."));
1:655ccc3:         return sb.toString();
1:655ccc3:     }
1:655ccc3: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:8af61ac
/////////////////////////////////////////////////////////////////////////
1:         return version != null && major == version.major && this.compareTo(version) <= 0;
author:Alexander Shopov
-------------------------------------------------------------------------------
commit:01d26dd
/////////////////////////////////////////////////////////////////////////
1:     private static final Pattern PATTERN_WHITESPACE = Pattern.compile("\\w+");
1: 
/////////////////////////////////////////////////////////////////////////
1:         String[] parts = StringUtils.split(str, '.');
1:             if (!PATTERN_WHITESPACE.matcher(part).matches())
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:80c51c0
/////////////////////////////////////////////////////////////////////////
commit:5347d72
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * note: 3rd group matches to words but only allows number and checked after regexp test.
1:      * this is because 3rd and the last can be identical.
1:      **/
1:     private static final String VERSION_REGEXP = "(\\d+)\\.(\\d+)(?:\\.(\\w+))?(\\-[.\\w]+)?([.+][.\\w]+)?";
/////////////////////////////////////////////////////////////////////////
1:             this.patch = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0;
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("Invalid version value: " + version, e);
commit:2385dc2
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: import org.apache.commons.lang3.StringUtils;
1:  * Implements versioning used in Cassandra and CQL.
0:  * <p/>
1:  * Note: The following code uses a slight variation from the semver document (http://semver.org).
1: public class CassandraVersion implements Comparable<CassandraVersion>
1:     private static final Pattern SNAPSHOT = Pattern.compile("-SNAPSHOT");
/////////////////////////////////////////////////////////////////////////
0:     private CassandraVersion(int major, int minor, int patch, String[] preRelease, String[] build)
/////////////////////////////////////////////////////////////////////////
1:      * Parse a version from a string.
1:      *                                  represent a version
1:     public CassandraVersion(String version)
1:         String stripped = SNAPSHOT.matcher(version).replaceFirst("");
1:         Matcher matcher = pattern.matcher(stripped);
1:             throw new IllegalArgumentException("Invalid version value: " + version);
/////////////////////////////////////////////////////////////////////////
1:             this.preRelease = pr == null || pr.isEmpty() ? null : parseIdentifiers(stripped, pr);
1:             this.build = bld == null || bld.isEmpty() ? null : parseIdentifiers(stripped, bld);
1:             throw new IllegalArgumentException("Invalid version value: " + version);
/////////////////////////////////////////////////////////////////////////
0:                 throw new IllegalArgumentException("Invalid version value: " + version);
1:     public int compareTo(CassandraVersion other)
/////////////////////////////////////////////////////////////////////////
0:      * <p/>
1:      * "2.0.0".findSupportingVersion("2.0.0", "3.0.0") == "2.0.0"
1:      * "2.0.0".findSupportingVersion("2.1.3", "3.0.0") == "2.1.3"
1:      * "2.0.0".findSupportingVersion("3.0.0") == null
1:      * "2.0.3".findSupportingVersion("2.0.0") == "2.0.0"
1:      * "2.1.0".findSupportingVersion("2.0.0") == null
1:     public CassandraVersion findSupportingVersion(CassandraVersion... versions)
1:         for (CassandraVersion version : versions)
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSupportedBy(CassandraVersion version)
/////////////////////////////////////////////////////////////////////////
1:         if (!(o instanceof CassandraVersion))
1:         CassandraVersion that = (CassandraVersion) o;
1:                && minor == that.minor
1:                && patch == that.patch
1:                && Arrays.equals(preRelease, that.preRelease)
1:                && Arrays.equals(build, that.build);
commit:93478ab
/////////////////////////////////////////////////////////////////////////
0:     private static final String VERSION_REGEXP = "(\\d+)\\.(\\d+)\\.(\\d+)(\\-[.\\w]+)?([.+][.\\w]+)?";
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6536c05
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * </p>
/////////////////////////////////////////////////////////////////////////
1:      * <p>
1:      * </p>
commit:8b374b2
/////////////////////////////////////////////////////////////////////////
1:             this.major = Integer.parseInt(matcher.group(1));
1:             this.minor = Integer.parseInt(matcher.group(2));
0:             this.patch = Integer.parseInt(matcher.group(3));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang3.StringUtils;
commit:455a0fc
/////////////////////////////////////////////////////////////////////////
0:         return major == version.major && this.compareTo(version) <= 0;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:d49bae6
/////////////////////////////////////////////////////////////////////////
0:         return major == version.major && minor <= version.minor && patch <= version.patch;
commit:655ccc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
0: import java.util.regex.Pattern;
0: import java.util.regex.Matcher;
1: import java.util.Arrays;
1: 
0: import org.apache.commons.lang.StringUtils;
1: import com.google.common.base.Objects;
1: 
1: /**
0:  * Implements semantic versioning as defined at http://semver.org/.
1:  *
0:  * Note: The following code uses a slight variation from the document above in
0:  * that it doesn't allow dashes in pre-release and build identifier.
1:  */
0: public class SemanticVersion implements Comparable<SemanticVersion>
1: {
0:     private static final String VERSION_REGEXP = "(\\d+)\\.(\\d+)\\.(\\d+)(\\-[.\\w]+)?(\\+[.\\w]+)?";
1:     private static final Pattern pattern = Pattern.compile(VERSION_REGEXP);
1: 
1:     public final int major;
1:     public final int minor;
1:     public final int patch;
1: 
1:     private final String[] preRelease;
1:     private final String[] build;
1: 
0:     private SemanticVersion(int major, int minor, int patch, String[] preRelease, String[] build)
1:     {
0:         this.major = major;
0:         this.minor = minor;
0:         this.patch = patch;
0:         this.preRelease = preRelease;
0:         this.build = build;
1:     }
1: 
1:     /**
0:      * Parse a semantic version from a string.
1:      *
1:      * @param version the string to parse
1:      * @throws IllegalArgumentException if the provided string does not
0:      * represent a semantic version
1:      */
0:     public SemanticVersion(String version)
1:     {
0:         Matcher matcher = pattern.matcher(version);
1:         if (!matcher.matches())
0:             throw new IllegalArgumentException("Invalid version value: " + version + " (see http://semver.org/ for details)");
1: 
1:         try
1:         {
0:             this.major = Integer.valueOf(matcher.group(1));
0:             this.minor = Integer.valueOf(matcher.group(2));
0:             this.patch = Integer.valueOf(matcher.group(3));
1: 
1:             String pr = matcher.group(4);
1:             String bld = matcher.group(5);
1: 
0:             this.preRelease = pr == null || pr.isEmpty() ? null : parseIdentifiers(version, pr);
0:             this.build = bld == null || bld.isEmpty() ? null : parseIdentifiers(version, bld);
1: 
1:         }
1:         catch (NumberFormatException e)
1:         {
0:             throw new IllegalArgumentException("Invalid version value: " + version + " (see http://semver.org/ for details)");
1:         }
1:     }
1: 
1:     private static String[] parseIdentifiers(String version, String str)
1:     {
1:         // Drop initial - or +
1:         str = str.substring(1);
0:         String[] parts = str.split("\\.");
1:         for (String part : parts)
1:         {
0:             if (!part.matches("\\w+"))
0:                 throw new IllegalArgumentException("Invalid version value: " + version + " (see http://semver.org/ for details)");
1:         }
1:         return parts;
1:     }
1: 
0:     public int compareTo(SemanticVersion other)
1:     {
1:         if (major < other.major)
1:             return -1;
1:         if (major > other.major)
1:             return 1;
1: 
1:         if (minor < other.minor)
1:             return -1;
1:         if (minor > other.minor)
1:             return 1;
1: 
1:         if (patch < other.patch)
1:             return -1;
1:         if (patch > other.patch)
1:             return 1;
1: 
1:         int c = compareIdentifiers(preRelease, other.preRelease, 1);
1:         if (c != 0)
1:             return c;
1: 
1:         return compareIdentifiers(build, other.build, -1);
1:     }
1: 
1:     /**
1:      * Returns a version that is backward compatible with this version amongst a list
1:      * of provided version, or null if none can be found.
1:      *
1:      * For instance:
0:      *   "2.0.0".findSupportingVersion("2.0.0", "3.0.0") == "2.0.0"
0:      *   "2.0.0".findSupportingVersion("2.1.3", "3.0.0") == "2.1.3"
0:      *   "2.0.0".findSupportingVersion("3.0.0") == null
0:      *   "2.0.3".findSupportingVersion("2.0.0") == "2.0.0"
0:      *   "2.1.0".findSupportingVersion("2.0.0") == null
1:      */
0:     public SemanticVersion findSupportingVersion(SemanticVersion... versions)
1:     {
0:         for (SemanticVersion version : versions)
1:         {
1:             if (isSupportedBy(version))
1:                 return version;
1:         }
1:         return null;
1:     }
1: 
0:     public boolean isSupportedBy(SemanticVersion version)
1:     {
0:         return major == version.major && minor <= version.minor;
1:     }
1: 
1:     private static int compareIdentifiers(String[] ids1, String[] ids2, int defaultPred)
1:     {
1:         if (ids1 == null)
1:             return ids2 == null ? 0 : defaultPred;
1:         else if (ids2 == null)
1:             return -defaultPred;
1: 
1:         int min = Math.min(ids1.length, ids2.length);
1:         for (int i = 0; i < min; i++)
1:         {
1:             Integer i1 = tryParseInt(ids1[i]);
1:             Integer i2 = tryParseInt(ids2[i]);
1: 
1:             if (i1 != null)
1:             {
1:                 // integer have precedence
1:                 if (i2 == null || i1 < i2)
1:                     return -1;
1:                 else if (i1 > i2)
1:                     return 1;
1:             }
1:             else
1:             {
1:                 // integer have precedence
1:                 if (i2 != null)
1:                     return 1;
1: 
1:                 int c = ids1[i].compareTo(ids2[i]);
1:                 if (c != 0)
1:                     return c;
1:             }
1:         }
1: 
1:         if (ids1.length < ids2.length)
1:             return -1;
1:         if (ids1.length > ids2.length)
1:             return 1;
1:         return 0;
1:     }
1: 
1:     private static Integer tryParseInt(String str)
1:     {
1:         try
1:         {
1:             return Integer.valueOf(str);
1:         }
1:         catch (NumberFormatException e)
1:         {
1:             return null;
1:         }
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
0:         if(!(o instanceof SemanticVersion))
1:             return false;
0:         SemanticVersion that = (SemanticVersion)o;
1:         return major == that.major
0:             && minor == that.minor
0:             && patch == that.patch
0:             && Arrays.equals(preRelease, that.preRelease)
0:             && Arrays.equals(build, that.build);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(major, minor, patch, preRelease, build);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(major).append('.').append(minor).append('.').append(patch);
1:         if (preRelease != null)
1:             sb.append('-').append(StringUtils.join(preRelease, "."));
1:         if (build != null)
1:             sb.append('+').append(StringUtils.join(build, "."));
1:         return sb.toString();
1:     }
1: }
============================================================================