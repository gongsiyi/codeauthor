1:2f41243: /*
1:2f41243:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f41243:  * or more contributor license agreements.  See the NOTICE file
1:2f41243:  * distributed with this work for additional information
1:2f41243:  * regarding copyright ownership.  The ASF licenses this file
1:2f41243:  * to you under the Apache License, Version 2.0 (the
1:2f41243:  * "License"); you may not use this file except in compliance
1:2f41243:  * with the License.  You may obtain a copy of the License at
1:2f41243:  *
1:2f41243:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f41243:  *
1:2f41243:  * Unless required by applicable law or agreed to in writing, software
1:2f41243:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f41243:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f41243:  * See the License for the specific language governing permissions and
1:2f41243:  * limitations under the License.
1:2f41243:  */
1:2f41243: package org.apache.cassandra.db;
1:2f41243: 
1:2f41243: import java.nio.ByteBuffer;
1:2f41243: 
1:2f41243: import org.apache.cassandra.utils.ObjectSizes;
1:2f41243: 
1:2f41243: public abstract class AbstractBufferClusteringPrefix extends AbstractClusteringPrefix
1:2f41243: {
1:2f41243:     public static final ByteBuffer[] EMPTY_VALUES_ARRAY = new ByteBuffer[0];
1:2f41243:     private static final long EMPTY_SIZE = ObjectSizes.measure(Clustering.make(EMPTY_VALUES_ARRAY));
1:2f41243: 
1:2f41243:     protected final Kind kind;
1:2f41243:     protected final ByteBuffer[] values;
1:2f41243: 
1:2f41243:     protected AbstractBufferClusteringPrefix(Kind kind, ByteBuffer[] values)
1:2f41243:     {
1:2f41243:         this.kind = kind;
1:2f41243:         this.values = values;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public Kind kind()
1:2f41243:     {
1:2f41243:         return kind;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public ClusteringPrefix clustering()
1:2f41243:     {
1:2f41243:         return this;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public int size()
1:2f41243:     {
1:2f41243:         return values.length;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public ByteBuffer get(int i)
1:2f41243:     {
1:2f41243:         return values[i];
1:2f41243:     }
1:2f41243: 
1:2f41243:     public ByteBuffer[] getRawValues()
1:2f41243:     {
1:2f41243:         return values;
1:2f41243:     }
1:2f41243: 
1:2f41243:     public long unsharedHeapSize()
1:2f41243:     {
1:2f41243:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(values);
1:2f41243:     }
1:2f41243: 
1:2f41243:     public long unsharedHeapSizeExcludingData()
1:2f41243:     {
1:2f41243:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(values);
1:2f41243:     }
1:2f41243: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:2f41243
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.utils.ObjectSizes;
1: 
1: public abstract class AbstractBufferClusteringPrefix extends AbstractClusteringPrefix
1: {
1:     public static final ByteBuffer[] EMPTY_VALUES_ARRAY = new ByteBuffer[0];
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(Clustering.make(EMPTY_VALUES_ARRAY));
1: 
1:     protected final Kind kind;
1:     protected final ByteBuffer[] values;
1: 
1:     protected AbstractBufferClusteringPrefix(Kind kind, ByteBuffer[] values)
1:     {
1:         this.kind = kind;
1:         this.values = values;
1:     }
1: 
1:     public Kind kind()
1:     {
1:         return kind;
1:     }
1: 
1:     public ClusteringPrefix clustering()
1:     {
1:         return this;
1:     }
1: 
1:     public int size()
1:     {
1:         return values.length;
1:     }
1: 
1:     public ByteBuffer get(int i)
1:     {
1:         return values[i];
1:     }
1: 
1:     public ByteBuffer[] getRawValues()
1:     {
1:         return values;
1:     }
1: 
1:     public long unsharedHeapSize()
1:     {
1:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(values);
1:     }
1: 
1:     public long unsharedHeapSizeExcludingData()
1:     {
1:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapExcludingData(values);
1:     }
1: }
============================================================================