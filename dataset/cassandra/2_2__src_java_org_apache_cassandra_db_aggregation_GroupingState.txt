1:4205011: /*
1:4205011:  * Licensed to the Apache Software Foundation (ASF) under one
1:4205011:  * or more contributor license agreements.  See the NOTICE file
1:4205011:  * distributed with this work for additional information
1:4205011:  * regarding copyright ownership.  The ASF licenses this file
1:4205011:  * to you under the Apache License, Version 2.0 (the
1:4205011:  * "License"); you may not use this file except in compliance
1:4205011:  * with the License.  You may obtain a copy of the License at
1:4205011:  *
1:4205011:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4205011:  *
1:4205011:  * Unless required by applicable law or agreed to in writing, software
1:4205011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4205011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4205011:  * See the License for the specific language governing permissions and
1:4205011:  * limitations under the License.
1:4205011:  */
1:4205011: package org.apache.cassandra.db.aggregation;
1:4205011: 
1:4205011: import java.io.IOException;
1:4205011: import java.nio.ByteBuffer;
1:4205011: 
1:4205011: import org.apache.cassandra.db.Clustering;
1:4205011: import org.apache.cassandra.db.ClusteringComparator;
1:4205011: import org.apache.cassandra.db.TypeSizes;
1:4205011: import org.apache.cassandra.io.util.DataInputPlus;
1:4205011: import org.apache.cassandra.io.util.DataOutputPlus;
1:4205011: import org.apache.cassandra.utils.ByteBufferUtil;
1:4205011: 
1:4205011: /**
1:4205011:  * {@code GroupMaker} state.
1:4205011:  *
1:4205011:  * <p>The state contains the primary key of the last row that has been processed by the previous
1:4205011:  * {@code GroupMaker} used. It can be passed to a {@code GroupMaker} to allow to resuming the grouping.
1:4205011:  * </p>
1:4205011:  * <p>
1:4205011:  * {@code GroupingState} is only used for internal paging. When a new page is requested by a client the initial state
1:143a7d9:  * will always be empty.</p>
1:143a7d9:  * <p>
1:4205011:  * If the state has a partition key but no clustering, it means that the previous group ended at the end of the
1:4205011:  * previous partition. If the clustering is not null it means that we are in the middle of a group.
1:4205011:  * </p>
1:4205011:  */
1:4205011: public final class GroupingState
1:4205011: {
1:4205011:     public static final GroupingState.Serializer serializer = new Serializer();
1:4205011: 
1:4205011:     public static final GroupingState EMPTY_STATE = new GroupingState(null, null);
1:4205011: 
1:4205011:     /**
1:4205011:      * The last row partition key.
1:4205011:      */
1:4205011:     private final ByteBuffer partitionKey;
1:4205011: 
1:4205011:     /**
1:4205011:      * The last row clustering
1:4205011:      */
1:4205011:     final Clustering clustering;
1:4205011: 
1:4205011:     public GroupingState(ByteBuffer partitionKey, Clustering clustering)
1:4205011:     {
1:4205011:         this.partitionKey = partitionKey;
1:4205011:         this.clustering = clustering;
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Returns the last row partition key or <code>null</code> if no rows has been processed yet.
1:4205011:      * @return the last row partition key or <code>null</code> if no rows has been processed yet
1:4205011:      */
1:4205011:     public ByteBuffer partitionKey()
1:4205011:     {
1:4205011:         return partitionKey;
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Returns the last row clustering or <code>null</code> if either no rows has been processed yet or the last
1:4205011:      * row was a static row.
1:4205011:      * @return he last row clustering or <code>null</code> if either no rows has been processed yet or the last
1:4205011:      * row was a static row
1:4205011:      */
1:4205011:     public Clustering clustering()
1:4205011:     {
1:4205011:         return clustering;
1:4205011:     }
1:4205011: 
1:4205011:     /**
1:4205011:      * Checks if the state contains a Clustering for the last row that has been processed.
1:4205011:      * @return <code>true</code> if the state contains a Clustering for the last row that has been processed,
1:4205011:      * <code>false</code> otherwise.
1:4205011:      */
1:4205011:     public boolean hasClustering()
1:4205011:     {
1:4205011:         return clustering != null;
1:4205011:     }
1:4205011: 
1:4205011:     public static class Serializer
1:4205011:     {
1:4205011:         public void serialize(GroupingState state, DataOutputPlus out, int version, ClusteringComparator comparator) throws IOException
1:4205011:         {
1:4205011:             boolean hasPartitionKey = state.partitionKey != null;
1:4205011:             out.writeBoolean(hasPartitionKey);
1:4205011:             if (hasPartitionKey)
1:4205011:             {
1:4205011:                 ByteBufferUtil.writeWithVIntLength(state.partitionKey, out);
1:4205011:                 boolean hasClustering = state.hasClustering();
1:4205011:                 out.writeBoolean(hasClustering);
1:4205011:                 if (hasClustering)
1:4205011:                     Clustering.serializer.serialize(state.clustering, out, version, comparator.subtypes());
1:4205011:             }
1:4205011:         }
1:4205011: 
1:4205011:         public GroupingState deserialize(DataInputPlus in, int version, ClusteringComparator comparator) throws IOException
1:4205011:         {
1:4205011:             if (!in.readBoolean())
1:4205011:                 return GroupingState.EMPTY_STATE;
1:4205011: 
1:4205011:             ByteBuffer partitionKey = ByteBufferUtil.readWithVIntLength(in);
1:4205011:             Clustering clustering = null;
1:4205011:             if (in.readBoolean())
1:4205011:                 clustering = Clustering.serializer.deserialize(in, version, comparator.subtypes());
1:4205011: 
1:4205011:             return new GroupingState(partitionKey, clustering);
1:4205011:         }
1:4205011: 
1:4205011:         public long serializedSize(GroupingState state, int version, ClusteringComparator comparator)
1:4205011:         {
1:4205011:             boolean hasPartitionKey = state.partitionKey != null;
1:4205011:             long size = TypeSizes.sizeof(hasPartitionKey);
1:4205011:             if (hasPartitionKey)
1:4205011:             {
1:4205011:                 size += ByteBufferUtil.serializedSizeWithVIntLength(state.partitionKey);
1:4205011:                 boolean hasClustering = state.hasClustering();
1:4205011:                 size += TypeSizes.sizeof(hasClustering);
1:4205011:                 if (hasClustering)
1:4205011:                 {
1:4205011:                     size += Clustering.serializer.serializedSize(state.clustering, version, comparator.subtypes());
1:4205011:                 }
1:4205011:             }
1:4205011:             return size;
1:4205011:         }
1:4205011:     }
1:4205011: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:143a7d9
/////////////////////////////////////////////////////////////////////////
1:  * will always be empty.</p>
1:  * <p>
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.aggregation;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.ClusteringComparator;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: /**
1:  * {@code GroupMaker} state.
1:  *
1:  * <p>The state contains the primary key of the last row that has been processed by the previous
1:  * {@code GroupMaker} used. It can be passed to a {@code GroupMaker} to allow to resuming the grouping.
1:  * </p>
1:  * <p>
1:  * {@code GroupingState} is only used for internal paging. When a new page is requested by a client the initial state
0:  * will always be empty.<br/>
1:  * If the state has a partition key but no clustering, it means that the previous group ended at the end of the
1:  * previous partition. If the clustering is not null it means that we are in the middle of a group.
1:  * </p>
1:  */
1: public final class GroupingState
1: {
1:     public static final GroupingState.Serializer serializer = new Serializer();
1: 
1:     public static final GroupingState EMPTY_STATE = new GroupingState(null, null);
1: 
1:     /**
1:      * The last row partition key.
1:      */
1:     private final ByteBuffer partitionKey;
1: 
1:     /**
1:      * The last row clustering
1:      */
1:     final Clustering clustering;
1: 
1:     public GroupingState(ByteBuffer partitionKey, Clustering clustering)
1:     {
1:         this.partitionKey = partitionKey;
1:         this.clustering = clustering;
1:     }
1: 
1:     /**
1:      * Returns the last row partition key or <code>null</code> if no rows has been processed yet.
1:      * @return the last row partition key or <code>null</code> if no rows has been processed yet
1:      */
1:     public ByteBuffer partitionKey()
1:     {
1:         return partitionKey;
1:     }
1: 
1:     /**
1:      * Returns the last row clustering or <code>null</code> if either no rows has been processed yet or the last
1:      * row was a static row.
1:      * @return he last row clustering or <code>null</code> if either no rows has been processed yet or the last
1:      * row was a static row
1:      */
1:     public Clustering clustering()
1:     {
1:         return clustering;
1:     }
1: 
1:     /**
1:      * Checks if the state contains a Clustering for the last row that has been processed.
1:      * @return <code>true</code> if the state contains a Clustering for the last row that has been processed,
1:      * <code>false</code> otherwise.
1:      */
1:     public boolean hasClustering()
1:     {
1:         return clustering != null;
1:     }
1: 
1:     public static class Serializer
1:     {
1:         public void serialize(GroupingState state, DataOutputPlus out, int version, ClusteringComparator comparator) throws IOException
1:         {
1:             boolean hasPartitionKey = state.partitionKey != null;
1:             out.writeBoolean(hasPartitionKey);
1:             if (hasPartitionKey)
1:             {
1:                 ByteBufferUtil.writeWithVIntLength(state.partitionKey, out);
1:                 boolean hasClustering = state.hasClustering();
1:                 out.writeBoolean(hasClustering);
1:                 if (hasClustering)
1:                     Clustering.serializer.serialize(state.clustering, out, version, comparator.subtypes());
1:             }
1:         }
1: 
1:         public GroupingState deserialize(DataInputPlus in, int version, ClusteringComparator comparator) throws IOException
1:         {
1:             if (!in.readBoolean())
1:                 return GroupingState.EMPTY_STATE;
1: 
1:             ByteBuffer partitionKey = ByteBufferUtil.readWithVIntLength(in);
1:             Clustering clustering = null;
1:             if (in.readBoolean())
1:                 clustering = Clustering.serializer.deserialize(in, version, comparator.subtypes());
1: 
1:             return new GroupingState(partitionKey, clustering);
1:         }
1: 
1:         public long serializedSize(GroupingState state, int version, ClusteringComparator comparator)
1:         {
1:             boolean hasPartitionKey = state.partitionKey != null;
1:             long size = TypeSizes.sizeof(hasPartitionKey);
1:             if (hasPartitionKey)
1:             {
1:                 size += ByteBufferUtil.serializedSizeWithVIntLength(state.partitionKey);
1:                 boolean hasClustering = state.hasClustering();
1:                 size += TypeSizes.sizeof(hasClustering);
1:                 if (hasClustering)
1:                 {
1:                     size += Clustering.serializer.serializedSize(state.clustering, version, comparator.subtypes());
1:                 }
1:             }
1:             return size;
1:         }
1:     }
1: }
============================================================================