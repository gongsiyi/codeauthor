1:37e9bce: /*
1:37e9bce:  * Licensed to the Apache Software Foundation (ASF) under one
1:37e9bce:  * or more contributor license agreements.  See the NOTICE file
1:37e9bce:  * distributed with this work for additional information
1:37e9bce:  * regarding copyright ownership.  The ASF licenses this file
1:37e9bce:  * to you under the Apache License, Version 2.0 (the
1:37e9bce:  * "License"); you may not use this file except in compliance
1:37e9bce:  * with the License.  You may obtain a copy of the License at
1:37e9bce:  *
1:37e9bce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:37e9bce:  *
1:37e9bce:  * Unless required by applicable law or agreed to in writing, software
1:37e9bce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:37e9bce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:37e9bce:  * See the License for the specific language governing permissions and
1:37e9bce:  * limitations under the License.
1:37e9bce:  */
1:37e9bce: package org.apache.cassandra.cql3;
1:37e9bce: 
1:dca37a6: import org.apache.cassandra.config.CFMetaData;
1:dca37a6: import org.apache.cassandra.config.ColumnDefinition;
1:dca37a6: 
1:37e9bce: import java.util.Arrays;
1:65a7088: import java.util.Collections;
1:37e9bce: import java.util.List;
1:37e9bce: 
1:37e9bce: public class VariableSpecifications
2:37e9bce: {
1:37e9bce:     private final List<ColumnIdentifier> variableNames;
1:37e9bce:     private final ColumnSpecification[] specs;
1:dca37a6:     private final ColumnDefinition[] targetColumns;
1:37e9bce: 
1:37e9bce:     public VariableSpecifications(List<ColumnIdentifier> variableNames)
1:37e9bce:     {
1:37e9bce:         this.variableNames = variableNames;
1:37e9bce:         this.specs = new ColumnSpecification[variableNames.size()];
1:dca37a6:         this.targetColumns = new ColumnDefinition[variableNames.size()];
2:37e9bce:     }
1:37e9bce: 
1:65a7088:     /**
1:65a7088:      * Returns an empty instance of <code>VariableSpecifications</code>.
1:65a7088:      * @return an empty instance of <code>VariableSpecifications</code>
1:65a7088:      */
1:65a7088:     public static VariableSpecifications empty()
1:65a7088:     {
1:65a7088:         return new VariableSpecifications(Collections.<ColumnIdentifier> emptyList());
1:65a7088:     }
1:65a7088: 
1:37e9bce:     public int size()
1:37e9bce:     {
1:37e9bce:         return variableNames.size();
1:37e9bce:     }
1:37e9bce: 
1:37e9bce:     public List<ColumnSpecification> getSpecifications()
1:37e9bce:     {
1:37e9bce:         return Arrays.asList(specs);
1:dca37a6:     }
1:37e9bce: 
1:dca37a6:     /**
1:dca37a6:      * Returns an array with the same length as the number of partition key columns for the table corresponding
1:dca37a6:      * to cfm.  Each short in the array represents the bind index of the marker that holds the value for that
1:dca37a6:      * partition key column.  If there are no bind markers for any of the partition key columns, null is returned.
1:dca37a6:      *
1:dca37a6:      * Callers of this method should ensure that all statements operate on the same table.
1:dca37a6:      */
1:49d6045:     public short[] getPartitionKeyBindIndexes(CFMetaData cfm)
1:dca37a6:     {
1:49d6045:         short[] partitionKeyPositions = new short[cfm.partitionKeyColumns().size()];
1:49d6045:         boolean[] set = new boolean[partitionKeyPositions.length];
1:dca37a6:         for (int i = 0; i < targetColumns.length; i++)
1:dca37a6:         {
1:dca37a6:             ColumnDefinition targetColumn = targetColumns[i];
1:dca37a6:             if (targetColumn != null && targetColumn.isPartitionKey())
1:dca37a6:             {
1:dca37a6:                 assert targetColumn.ksName.equals(cfm.ksName) && targetColumn.cfName.equals(cfm.cfName);
1:dca37a6:                 partitionKeyPositions[targetColumn.position()] = (short) i;
1:49d6045:                 set[targetColumn.position()] = true;
1:dca37a6:             }
1:dca37a6:         }
1:dca37a6: 
1:49d6045:         for (boolean b : set)
1:49d6045:             if (!b)
1:dca37a6:                 return null;
1:dca37a6: 
1:dca37a6:         return partitionKeyPositions;
1:dca37a6:     }
1:dca37a6: 
1:37e9bce:     public void add(int bindIndex, ColumnSpecification spec)
1:dca37a6:     {
1:dca37a6:         if (spec instanceof ColumnDefinition)
1:dca37a6:             targetColumns[bindIndex] = (ColumnDefinition) spec;
1:dca37a6: 
1:dca37a6:         ColumnIdentifier bindMarkerName = variableNames.get(bindIndex);
1:37e9bce:         // Use the user name, if there is one
1:dca37a6:         if (bindMarkerName != null)
1:dca37a6:             spec = new ColumnSpecification(spec.ksName, spec.cfName, bindMarkerName, spec.type);
1:37e9bce:         specs[bindIndex] = spec;
1:37e9bce:     }
1:8d87e0e: 
1:8d87e0e:     @Override
1:8d87e0e:     public String toString()
1:8d87e0e:     {
1:8d87e0e:         return Arrays.toString(specs);
1:8d87e0e:     }
1:37e9bce: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:49d6045
/////////////////////////////////////////////////////////////////////////
1:     public short[] getPartitionKeyBindIndexes(CFMetaData cfm)
1:         short[] partitionKeyPositions = new short[cfm.partitionKeyColumns().size()];
1:         boolean[] set = new boolean[partitionKeyPositions.length];
/////////////////////////////////////////////////////////////////////////
1:                 set[targetColumn.position()] = true;
1:         for (boolean b : set)
1:             if (!b)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:dca37a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final ColumnDefinition[] targetColumns;
1:         this.targetColumns = new ColumnDefinition[variableNames.size()];
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns an array with the same length as the number of partition key columns for the table corresponding
1:      * to cfm.  Each short in the array represents the bind index of the marker that holds the value for that
1:      * partition key column.  If there are no bind markers for any of the partition key columns, null is returned.
1:      *
1:      * Callers of this method should ensure that all statements operate on the same table.
1:      */
0:     public Short[] getPartitionKeyBindIndexes(CFMetaData cfm)
1:     {
0:         Short[] partitionKeyPositions = new Short[cfm.partitionKeyColumns().size()];
1:         for (int i = 0; i < targetColumns.length; i++)
1:         {
1:             ColumnDefinition targetColumn = targetColumns[i];
1:             if (targetColumn != null && targetColumn.isPartitionKey())
1:             {
1:                 assert targetColumn.ksName.equals(cfm.ksName) && targetColumn.cfName.equals(cfm.cfName);
1:                 partitionKeyPositions[targetColumn.position()] = (short) i;
1:             }
1:         }
1: 
0:         for (Short bindIndex : partitionKeyPositions)
1:         {
0:             if (bindIndex == null)
1:                 return null;
1:         }
1: 
1:         return partitionKeyPositions;
1:     }
1: 
1:         if (spec instanceof ColumnDefinition)
1:             targetColumns[bindIndex] = (ColumnDefinition) spec;
1: 
1:         ColumnIdentifier bindMarkerName = variableNames.get(bindIndex);
1:         if (bindMarkerName != null)
1:             spec = new ColumnSpecification(spec.ksName, spec.cfName, bindMarkerName, spec.type);
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns an empty instance of <code>VariableSpecifications</code>.
1:      * @return an empty instance of <code>VariableSpecifications</code>
1:      */
1:     public static VariableSpecifications empty()
1:     {
1:         return new VariableSpecifications(Collections.<ColumnIdentifier> emptyList());
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:8d87e0e
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return Arrays.toString(specs);
1:     }
commit:37e9bce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: public class VariableSpecifications
1: {
1:     private final List<ColumnIdentifier> variableNames;
1:     private final ColumnSpecification[] specs;
1: 
1:     public VariableSpecifications(List<ColumnIdentifier> variableNames)
1:     {
1:         this.variableNames = variableNames;
1:         this.specs = new ColumnSpecification[variableNames.size()];
1:     }
1: 
1:     public int size()
1:     {
1:         return variableNames.size();
1:     }
1: 
1:     public List<ColumnSpecification> getSpecifications()
1:     {
1:         return Arrays.asList(specs);
1:     }
1: 
1:     public void add(int bindIndex, ColumnSpecification spec)
1:     {
0:         ColumnIdentifier name = variableNames.get(bindIndex);
1:         // Use the user name, if there is one
0:         if (name != null)
0:             spec = new ColumnSpecification(spec.ksName, spec.cfName, name, spec.type);
1:         specs[bindIndex] = spec;
1:     }
1: }
============================================================================