1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1aeca2b:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
2:07cdfd0: 
1:e7a385a: import java.nio.ByteBuffer;
1:7bd9590: import java.util.UUID;
1:a67f779: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:a67f779: import org.apache.cassandra.cql3.Term;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.TimeUUIDSerializer;
1:8be7e5c: 
1:a0d45f7: public class TimeUUIDType extends AbstractType<UUID>
3:8be7e5c: {
1:242b717:     public static final TimeUUIDType instance = new TimeUUIDType();
1:e9c6742: 
1:e9c6742:     TimeUUIDType()
1:e9c6742:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:e9c6742:     } // singleton
1:8be7e5c: 
1:4df4f79:     public boolean isEmptyValueMeaningless()
1:8be7e5c:     {
1:4df4f79:         return true;
4:8be7e5c:     }
1:a67f779: 
1:07594ee:     public int compareCustom(ByteBuffer b1, ByteBuffer b2)
1:a67f779:     {
1:6d26625:         // Compare for length
1:6d26625:         int s1 = b1.position(), s2 = b2.position();
1:6d26625:         int l1 = b1.limit(), l2 = b2.limit();
1:a67f779: 
1:6d26625:         // should we assert exactly 16 bytes (or 0)? seems prudent
1:6d26625:         boolean p1 = l1 - s1 == 16, p2 = l2 - s2 == 16;
1:6d26625:         if (!(p1 & p2))
1:6d26625:         {
1:6d26625:             assert p1 | (l1 == s1);
1:6d26625:             assert p2 | (l2 == s2);
1:6d26625:             return p1 ? 1 : p2 ? -1 : 0;
1:6d26625:         }
1:6d26625: 
1:6d26625:         long msb1 = b1.getLong(s1);
1:6d26625:         long msb2 = b2.getLong(s2);
1:6d26625:         msb1 = reorderTimestampBytes(msb1);
1:6d26625:         msb2 = reorderTimestampBytes(msb2);
1:6d26625: 
1:6d26625:         assert (msb1 & topbyte(0xf0L)) == topbyte(0x10L);
1:6d26625:         assert (msb2 & topbyte(0xf0L)) == topbyte(0x10L);
1:6d26625: 
1:6d26625:         int c = Long.compare(msb1, msb2);
1:6d26625:         if (c != 0)
1:6d26625:             return c;
1:6d26625: 
1:6d26625:         // this has to be a signed per-byte comparison for compatibility
1:6d26625:         // so we transform the bytes so that a simple long comparison is equivalent
1:6d26625:         long lsb1 = signedBytesToNativeLong(b1.getLong(s1 + 8));
1:6d26625:         long lsb2 = signedBytesToNativeLong(b2.getLong(s2 + 8));
1:6d26625:         return Long.compare(lsb1, lsb2);
1:a67f779:     }
1:8be7e5c: 
1:6d26625:     // takes as input 8 signed bytes in native machine order
1:6d26625:     // returns the first byte unchanged, and the following 7 bytes converted to an unsigned representation
1:6d26625:     // which is the same as a 2's complement long in native format
1:6d26625:     private static long signedBytesToNativeLong(long signedBytes)
1:8be7e5c:     {
1:6d26625:         return signedBytes ^ 0x0080808080808080L;
1:6d26625:     }
1:8be7e5c: 
1:6d26625:     private static long topbyte(long topbyte)
1:6d26625:     {
1:6d26625:         return topbyte << 56;
1:6d26625:     }
1:8be7e5c: 
1:6d26625:     protected static long reorderTimestampBytes(long input)
1:6d26625:     {
1:6d26625:         return    (input <<  48)
1:6d26625:                   | ((input <<  16) & 0xFFFF00000000L)
1:6d26625:                   |  (input >>> 32);
1:8be7e5c:     }
1:8be7e5c: 
1:8be7e5c:     public ByteBuffer fromString(String source) throws MarshalException
1:8be7e5c:     {
1:d76adf5:         ByteBuffer parsed = UUIDType.parse(source);
1:d76adf5:         if (parsed == null)
1:31e669a:             throw new MarshalException(String.format("Unknown timeuuid representation: %s", source));
1:d76adf5:         if (parsed.remaining() == 16 && UUIDType.version(parsed) != 1)
1:d76adf5:             throw new MarshalException("TimeUUID supports only version 1 UUIDs");
1:d76adf5:         return parsed;
1:2635632:     }
1:8be7e5c: 
1:d76adf5:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:8be7e5c:     {
1:8be7e5c:         try
1:8be7e5c:         {
1:c7b02d1:             return new Constants.Value(fromString((String) parsed));
1:8be7e5c:         }
1:c7b02d1:         catch (ClassCastException exc)
1:8be7e5c:         {
1:c7b02d1:             throw new MarshalException(
1:c7b02d1:                     String.format("Expected a string representation of a timeuuid, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:8be7e5c:         }
1:8be7e5c:     }
1:8be7e5c: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.TIMEUUID;
1:a67f779:     }
1:e9c6742: 
1:fc8b76f:     public TypeSerializer<UUID> getSerializer()
1:e9c6742:     {
1:e9c6742:         return TimeUUIDSerializer.instance;
1:e9c6742:     }
1:a991b64: 
1:a991b64:     @Override
1:a991b64:     protected int valueLengthIfFixed()
1:a991b64:     {
1:a991b64:         return 16;
1:a991b64:     }
1:8be7e5c: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer b1, ByteBuffer b2)
commit:d76adf5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer parsed = UUIDType.parse(source);
1:         if (parsed == null)
1:         if (parsed.remaining() == 16 && UUIDType.version(parsed) != 1)
1:             throw new MarshalException("TimeUUID supports only version 1 UUIDs");
1:         return parsed;
1:     @Override
commit:6d26625
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer b1, ByteBuffer b2)
1:         // Compare for length
1:         int s1 = b1.position(), s2 = b2.position();
1:         int l1 = b1.limit(), l2 = b2.limit();
1:         // should we assert exactly 16 bytes (or 0)? seems prudent
1:         boolean p1 = l1 - s1 == 16, p2 = l2 - s2 == 16;
1:         if (!(p1 & p2))
1:         {
1:             assert p1 | (l1 == s1);
1:             assert p2 | (l2 == s2);
1:             return p1 ? 1 : p2 ? -1 : 0;
1:         }
1: 
1:         long msb1 = b1.getLong(s1);
1:         long msb2 = b2.getLong(s2);
1:         msb1 = reorderTimestampBytes(msb1);
1:         msb2 = reorderTimestampBytes(msb2);
1: 
1:         assert (msb1 & topbyte(0xf0L)) == topbyte(0x10L);
1:         assert (msb2 & topbyte(0xf0L)) == topbyte(0x10L);
1: 
1:         int c = Long.compare(msb1, msb2);
1:         if (c != 0)
1:             return c;
1: 
1:         // this has to be a signed per-byte comparison for compatibility
1:         // so we transform the bytes so that a simple long comparison is equivalent
1:         long lsb1 = signedBytesToNativeLong(b1.getLong(s1 + 8));
1:         long lsb2 = signedBytesToNativeLong(b2.getLong(s2 + 8));
1:         return Long.compare(lsb1, lsb2);
1:     // takes as input 8 signed bytes in native machine order
1:     // returns the first byte unchanged, and the following 7 bytes converted to an unsigned representation
1:     // which is the same as a 2's complement long in native format
1:     private static long signedBytesToNativeLong(long signedBytes)
1:         return signedBytes ^ 0x0080808080808080L;
1:     }
1:     private static long topbyte(long topbyte)
1:     {
1:         return topbyte << 56;
1:     }
1:     protected static long reorderTimestampBytes(long input)
1:     {
1:         return    (input <<  48)
1:                   | ((input <<  16) & 0xFFFF00000000L)
1:                   |  (input >>> 32);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected int valueLengthIfFixed()
1:     {
1:         return 16;
1:     }
commit:e024a1c
commit:2635632
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.serializers.TimestampSerializer;
/////////////////////////////////////////////////////////////////////////
1:         }
0:         else
0:             idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(TimestampSerializer.dateStringToTimestamp(source)));
commit:64e4628
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.TimeUUIDSerializer;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<UUID> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
0: import org.apache.cassandra.type.TimeUUIDSerializer;
/////////////////////////////////////////////////////////////////////////
1:     TimeUUIDType()
1:     {
1:     } // singleton
0:         return TimeUUIDSerializer.instance.serialize(bytes);
0:         return TimeUUIDSerializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         int d = (o1.get(o1Pos + 6) & 0xF) - (o2.get(o2Pos + 6) & 0xF);
0:         d = (o1.get(o1Pos + 7) & 0xFF) - (o2.get(o2Pos + 7) & 0xFF);
0:         d = (o1.get(o1Pos + 4) & 0xFF) - (o2.get(o2Pos + 4) & 0xFF);
0:         d = (o1.get(o1Pos + 5) & 0xFF) - (o2.get(o2Pos + 5) & 0xFF);
0:         d = (o1.get(o1Pos + 1) & 0xFF) - (o2.get(o2Pos + 1) & 0xFF);
0:         d = (o1.get(o1Pos + 2) & 0xFF) - (o2.get(o2Pos + 2) & 0xFF);
0:         return (o1.get(o1Pos + 3) & 0xFF) - (o2.get(o2Pos + 3) & 0xFF);
0:         return TimeUUIDSerializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         } else
/////////////////////////////////////////////////////////////////////////
0:         } else
/////////////////////////////////////////////////////////////////////////
0:         TimeUUIDSerializer.instance.validate(bytes);
1: 
1: 
0:     @Override
0:     public AbstractSerializer<UUID> asComposer()
1:     {
1:         return TimeUUIDSerializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             throw new MarshalException(String.format("Unknown timeuuid representation: %s", source));
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.UUID);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.TIMEUUID;
1:     }
commit:8be7e5c
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Matcher;
/////////////////////////////////////////////////////////////////////////
0:     static final Pattern functionPattern = Pattern.compile("(\\w+)\\((.*)\\)");
/////////////////////////////////////////////////////////////////////////
0:     // This accepts dates are valid TimeUUID represensation, which is bogus
0:     // (see #4936) but kept for CQL2 for compatibility sake.
0:     @Override
0:     public ByteBuffer fromStringCQL2(String source) throws MarshalException
/////////////////////////////////////////////////////////////////////////
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
0:         // Return an empty ByteBuffer for an empty string.
0:         if (source.isEmpty())
0:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
0:         ByteBuffer idBytes = null;
1: 
0:         // ffffffff-ffff-ffff-ffff-ffffffffff
0:         if (regexPattern.matcher(source).matches())
1:         {
0:             UUID uuid = null;
1:             try
1:             {
0:                 uuid = UUID.fromString(source);
0:                 idBytes = decompose(uuid);
1:             }
0:             catch (IllegalArgumentException e)
1:             {
0:                 throw new MarshalException(String.format("Unable to make UUID from '%s'", source), e);
1:             }
1: 
0:             if (uuid.version() != 1)
0:                 throw new MarshalException("TimeUUID supports only version 1 UUIDs");
1:         }
0:         else
1:         {
0:             Matcher m = functionPattern.matcher(source);
0:             if (!m.matches())
0:                 throw new MarshalException(String.format("Unable to make a time-based UUID from '%s'", source));
1: 
0:             String fct = m.group(1);
0:             String arg = m.group(2);
1: 
0:             if (fct.equalsIgnoreCase("minTimeUUID"))
1:             {
0:                 idBytes = decompose(UUIDGen.minTimeUUID(DateType.dateStringToTimestamp(arg)));
1:             }
0:             else if (fct.equalsIgnoreCase("maxTimeUUID"))
1:             {
0:                 idBytes = decompose(UUIDGen.maxTimeUUID(DateType.dateStringToTimestamp(arg)));
1:             }
0:             else if (fct.equalsIgnoreCase("now"))
1:             {
0:                 if (!arg.trim().isEmpty())
0:                     throw new MarshalException(String.format("The 'now' timeuuid method takes no argument ('%s' provided)", arg));
1: 
0:                 idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes());
1:             }
0:             else
1:             {
0:                 throw new MarshalException(String.format("Unknown timeuuid method '%s'", fct));
1:             }
1:         }
1: 
0:         return idBytes;
1:     }
1: 
commit:a0f5dc5
commit:e53d980
/////////////////////////////////////////////////////////////////////////
0:             idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(DateType.dateStringToTimestamp(source)));
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmptyValueMeaningless()
0:     {
1:         return true;
0:     }
0: 
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Constants;
0: import org.apache.cassandra.cql3.Term;
/////////////////////////////////////////////////////////////////////////
1:     public Term fromJSONObject(Object parsed) throws MarshalException
0:     {
0:         try
0:         {
1:             return new Constants.Value(fromString((String) parsed));
0:         }
1:         catch (ClassCastException exc)
0:         {
1:             throw new MarshalException(
1:                     String.format("Expected a string representation of a timeuuid, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
0:         }
0:     }
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
0:         if (!o1.hasRemaining() || !o2.hasRemaining())
0:             return o1.hasRemaining() ? 1 : o2.hasRemaining() ? -1 : 0;
0: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:2621707
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
0:         return JdbcTimeUUID.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.term.TimeUUIDTerm;
0: import static org.apache.cassandra.cql.term.DateTerm.iso8601Patterns;
0: 
0:         return TimeUUIDTerm.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:         try
0:             return TimeUUIDTerm.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.term.MarshalException e)
0:             throw new MarshalException(e.getMessage());
0:         return TimeUUIDTerm.instance.toString(uuid);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
1: public class TimeUUIDType extends AbstractType<UUID>
/////////////////////////////////////////////////////////////////////////
commit:99661fb
/////////////////////////////////////////////////////////////////////////
0:         // Return an empty ByteBuffer for an empty string.
0:         if (source.isEmpty())
0:             return ByteBuffer.allocate(0);
0:         
commit:5996eb5
/////////////////////////////////////////////////////////////////////////
0:         else if (source.toLowerCase().equals("now"))
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcTimeUUID;
0: import static org.apache.cassandra.cql.jdbc.JdbcDate.iso8601Patterns;
/////////////////////////////////////////////////////////////////////////
0:         return JdbcTimeUUID.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:             return JdbcTimeUUID.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: public class TimeUUIDType extends AbstractUUIDType
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(UUID value)
0:     {
0:         return ByteBuffer.wrap(UUIDGen.decompose(value));
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:                 idBytes = decompose(uuid);
commit:de2ae8f
/////////////////////////////////////////////////////////////////////////
0:     static final Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
0:     static final String[] iso8601Patterns = new String[] {
commit:456c989
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
commit:ef25537
/////////////////////////////////////////////////////////////////////////
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: import org.safehaus.uuid.UUIDGenerator;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public ByteBuffer fromString(String source)
0:     {
0:         UUID uuid = UUID.fromString(source);
0: 
0:         if (uuid.version() != 1)
0:             throw new IllegalArgumentException("TimeUUID supports only version 1 UUIDs");
0: 
0:         return ByteBuffer.wrap(UUIDGen.decompose(uuid));
0:     }
commit:9b5c44c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
0:         UUID uuid = UUIDGen.getUUID(bytes);
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:         if (o1.remaining() == 0)
0:             return o2.remaining() == 0 ? 0 : -1;
0:         if (o2.remaining() == 0)
0:         return o1.compareTo(o2);
0:     private static int compareTimestampBytes(ByteBuffer o1, ByteBuffer o2)
0:         int o1Pos = o1.position()+o1.arrayOffset();
0:         int o2Pos = o2.position()+o2.arrayOffset();
0:         
0:         int d = (o1.array()[o1Pos+6] & 0xF) - (o2.array()[o2Pos+6] & 0xF);
0:         d = (o1.array()[o1Pos+7] & 0xFF) - (o2.array()[o2Pos+7] & 0xFF);
0:         d = (o1.array()[o1Pos+4] & 0xFF) - (o2.array()[o2Pos+4] & 0xFF);
0:         d = (o1.array()[o1Pos+5] & 0xFF) - (o2.array()[o2Pos+5] & 0xFF);
0:         d = (o1.array()[o1Pos+0] & 0xFF) - (o2.array()[o2Pos+0] & 0xFF);
0:         d = (o1.array()[o1Pos+1] & 0xFF) - (o2.array()[o2Pos+1] & 0xFF);
0:         d = (o1.array()[o1Pos+2] & 0xFF) - (o2.array()[o2Pos+2] & 0xFF);
0:         return (o1.array()[o1Pos+3] & 0xFF) - (o2.array()[o2Pos+3] & 0xFF);
0:     public String getString(ByteBuffer bytes)
0:         if (bytes.remaining() == 0)
0:         if (bytes.remaining() != 16)
commit:b07301d
/////////////////////////////////////////////////////////////////////////
0:         int res = compareTimestampBytes(o1, o2);
0:         if (res != 0)
0:             return res;
0:         return FBUtilities.compareByteArrays(o1, o2);
0:     private static int compareTimestampBytes(byte[] o1, byte[] o2)
0:         int d = (o1[6] & 0xF) - (o2[6] & 0xF);
0:         if (d != 0) return d;
0:         d = (o1[7] & 0xFF) - (o2[7] & 0xFF);
0:         if (d != 0) return d;
0:         d = (o1[4] & 0xFF) - (o2[4] & 0xFF);
0:         if (d != 0) return d;
0:         d = (o1[5] & 0xFF) - (o2[5] & 0xFF);
0:         if (d != 0) return d;
0:         d = (o1[0] & 0xFF) - (o2[0] & 0xFF);
0:         if (d != 0) return d;
0:         d = (o1[1] & 0xFF) - (o2[1] & 0xFF);
0:         if (d != 0) return d;
0:         d = (o1[2] & 0xFF) - (o2[2] & 0xFF);
0:         if (d != 0) return d;
0:         return (o1[3] & 0xFF) - (o2[3] & 0xFF);
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:     public static final TimeUUIDType instance = new TimeUUIDType();
0: 
0:     TimeUUIDType() {} // singleton
0: 
commit:2db7830
/////////////////////////////////////////////////////////////////////////
0:         long t1 = getTimestamp(o1);
0:         long t2 = getTimestamp(o2);
0:     static long getTimestamp(byte[] bytes)
0:     {
0:         long low = 0;
0:         int mid = 0;
0:         int hi = 0;
0: 
0:         for (int i = 0; i < 4; i++)
0:             low = (low << 8) | (bytes[i] & 0xff);
0:         for (int i = 4; i < 6; i++)
0:             mid = (mid << 8) | (bytes[i] & 0xff);
0:         for (int i = 6; i < 8; i++)
0:             hi = (hi << 8) | (bytes[i] & 0xff);
0: 
0:         return low + ((long)mid << 32) + ((long)(hi & 0x0FFF) << 48);
0:     }
0: 
commit:405524e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         return t1 < t2 ? -1 : (t1 > t2 ? 1 : FBUtilities.compareByteArrays(o1, o2));
commit:bb464c1
/////////////////////////////////////////////////////////////////////////
0:         if (bytes.length == 0)
0:         {
0:             return "";
0:         }
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:480650b
/////////////////////////////////////////////////////////////////////////
0:         if (o1.length == 0)
0:         {
0:             return o2.length == 0 ? 0 : -1;
0:         }
0:         if (o2.length == 0)
0:         {
0:             return 1;
0:         }
0:         
commit:88b0ee7
/////////////////////////////////////////////////////////////////////////
commit:7bd9590
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
1: import java.util.UUID;
0: import java.nio.ByteBuffer;
0: 
0: public class TimeUUIDType extends AbstractType
0: {
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         long t1 = LexicalUUIDType.getUUID(o1).timestamp();
0:         long t2 = LexicalUUIDType.getUUID(o2).timestamp();
0:         return t1 < t2 ? -1 : (t1 > t2 ? 1 : 0);
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         if (bytes.length != 16)
0:         {
0:             throw new MarshalException("UUIDs must be exactly 16 bytes");
0:         }
0:         UUID uuid = LexicalUUIDType.getUUID(bytes);
0:         if (uuid.version() != 1)
0:         {
0:             throw new MarshalException("TimeUUID only makes sense with version 1 UUIDs");
0:         }
0:         return uuid.toString();
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:             idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getBroadcastAddress())));
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(UUID uuid)
0:     {
0:         return uuid.toString();
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<UUID> getType()
0:     {
0:         return UUID.class;
0:     }
commit:c706239
/////////////////////////////////////////////////////////////////////////
0:                 throw new MarshalException(String.format("unable to make version 1 UUID from '%s'", source), e);
/////////////////////////////////////////////////////////////////////////
0:                 throw new MarshalException(String.format("unable to coerce '%s' to version 1 UUID", source), e1);
commit:189133e
/////////////////////////////////////////////////////////////////////////
0: import java.text.ParseException;
0: import java.util.regex.Pattern;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.commons.lang.time.DateUtils;
0:     
0:     private Pattern regexPattern = Pattern.compile("[A-Fa-f0-9]{8}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{4}\\-[A-Fa-f0-9]{12}");
0:     private static String[] iso8601Patterns = new String[] {
0:         "yyyy-MM-dd HH:mm",
0:         "yyyy-MM-dd HH:mm:ss",
0:         "yyyy-MM-dd HH:mmZ",
0:         "yyyy-MM-dd HH:mm:ssZ",
0:         "yyyy-MM-dd'T'HH:mm",
0:         "yyyy-MM-dd'T'HH:mmZ",
0:         "yyyy-MM-dd'T'HH:mm:ss",
0:         "yyyy-MM-dd'T'HH:mm:ssZ",
0:         "yyyy-MM-dd",
0:         "yyyy-MM-ddZ"
0:     };
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer idBytes = null;
0:         
0:         // ffffffff-ffff-ffff-ffff-ffffffffff
0:         if (regexPattern.matcher(source).matches())
0:             UUID uuid = null;
0:             try
0:             {
0:                 uuid = UUID.fromString(source);
0:                 idBytes = ByteBuffer.wrap(UUIDGen.decompose(uuid));
0:             }
0:             catch (IllegalArgumentException e)
0:             {
0:                 throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
0:             }
0:             
0:             if (uuid.version() != 1)
0:                 throw new MarshalException("TimeUUID supports only version 1 UUIDs");
0:         else if (source.equals("") || source.toLowerCase().equals("now"))
0:             idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress())));
0:         // Milliseconds since epoch?
0:         else if (source.matches("^\\d+$"))
0:         {
0:             try
0:             {
0:                 idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(Long.parseLong(source)));
0:             }
0:             catch (NumberFormatException e)
0:             {
0:                 throw new MarshalException(String.format("unable to make version 1 UUID from '%s'"), e);
0:             }
0:         }
0:         // Last chance, attempt to parse as date-time string
0:         else
0:         {
0:             try
0:             {
0:                 long timestamp = DateUtils.parseDate(source, iso8601Patterns).getTime();
0:                 idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timestamp));
0:             }
0:             catch (ParseException e1)
0:             {
0:                 throw new MarshalException(String.format("unable to coherce '%s' to version 1 UUID"), e1);
0:             }
0:         }
0:             
0:         return idBytes;
commit:4417e22
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer fromString(String source) throws MarshalException
0:         UUID uuid = null;
0:         try
0:         {
0:             uuid = UUID.fromString(source);
0:         }
0:         catch (IllegalArgumentException e)
0:         {
0:             throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
0:         }
0:             throw new MarshalException("TimeUUID supports only version 1 UUIDs");
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
0: public class TimeUUIDType extends AbstractType<UUID>
0:     public UUID compose(ByteBuffer bytes)
0:     {
0:         return UUIDGen.getUUID(bytes);
0:     }
0: 
commit:df9e121
/////////////////////////////////////////////////////////////////////////
0:             if ((slice.get() & 0xf0) != 0x10)
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         if (bytes.remaining() != 16 && bytes.remaining() != 0)
0:             throw new MarshalException(String.format("TimeUUID should be 16 or 0 bytes (%d)", bytes.remaining()));
0:         ByteBuffer slice = bytes.slice();
0:         // version is bits 4-7 of byte 6.
0:         if (bytes.remaining() > 0)
0:         {
0:             slice.position(6);
0:             if ((slice.get() & 0x0f) != 1)
0:                 throw new MarshalException("Invalid version for TimeUUID type.");
0:         }
0:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0:         int o1Pos = o1.position();
0:         int o2Pos = o2.position();
0: 
0:         int d = (o1.get(o1Pos+6) & 0xF) - (o2.get(o2Pos+6) & 0xF);
0: 
0:         d = (o1.get(o1Pos+7) & 0xFF) - (o2.get(o2Pos+7) & 0xFF);
0: 
0:         d = (o1.get(o1Pos+4) & 0xFF) - (o2.get(o2Pos+4) & 0xFF);
0: 
0:         d = (o1.get(o1Pos+5) & 0xFF) - (o2.get(o2Pos+5) & 0xFF);
0: 
0:         d = (o1.get(o1Pos) & 0xFF) - (o2.get(o2Pos) & 0xFF);
0: 
0:         d = (o1.get(o1Pos+1) & 0xFF) - (o2.get(o2Pos+1) & 0xFF);
0: 
0:         d = (o1.get(o1Pos+2) & 0xFF) - (o2.get(o2Pos+2) & 0xFF);
0: 
0:         return (o1.get(o1Pos+3) & 0xFF) - (o2.get(o2Pos+3) & 0xFF);
============================================================================