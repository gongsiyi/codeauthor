1:37b93bf: /*
1:37b93bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:37b93bf:  * or more contributor license agreements.  See the NOTICE file
1:37b93bf:  * distributed with this work for additional information
1:37b93bf:  * regarding copyright ownership.  The ASF licenses this file
1:37b93bf:  * to you under the Apache License, Version 2.0 (the
1:37b93bf:  * "License"); you may not use this file except in compliance
1:37b93bf:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:37b93bf:  */
1:e8651b6: package org.apache.cassandra.io.util;
4:37b93bf: 
1:37b93bf: import java.io.DataInput;
1:37b93bf: import java.io.DataInputStream;
1:37b93bf: import java.io.IOException;
1:03f72ac: 
1:37b93bf: /**
1:37b93bf:  * This class is to track bytes read from given DataInput
1:37b93bf:  */
1:e8651b6: public class TrackedDataInputPlus implements DataInputPlus, BytesReadTracker
1:37b93bf: {
1:37b93bf:     private long bytesRead;
1:e777301:     final DataInput source;
1:37b93bf: 
1:e8651b6:     public TrackedDataInputPlus(DataInput source)
1:37b93bf:     {
1:37b93bf:         this.source = source;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public long getBytesRead()
1:37b93bf:     {
1:37b93bf:         return bytesRead;
1:37b93bf:     }
1:0fe7942: 
1:37b93bf:     /**
1:0fe7942:      * reset counter to @param count
1:37b93bf:      */
1:0fe7942:     public void reset(long count)
1:37b93bf:     {
1:0fe7942:         bytesRead = count;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public boolean readBoolean() throws IOException
1:37b93bf:     {
1:37b93bf:         boolean bool = source.readBoolean();
2:37b93bf:         bytesRead += 1;
1:37b93bf:         return bool;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public byte readByte() throws IOException
1:37b93bf:     {
1:37b93bf:         byte b = source.readByte();
1:37b93bf:         bytesRead += 1;
1:37b93bf:         return b;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public char readChar() throws IOException
1:37b93bf:     {
1:37b93bf:         char c = source.readChar();
1:c024da4:         bytesRead += 2;
1:37b93bf:         return c;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public double readDouble() throws IOException
1:37b93bf:     {
1:37b93bf:         double d = source.readDouble();
1:37b93bf:         bytesRead += 8;
1:37b93bf:         return d;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public float readFloat() throws IOException
1:37b93bf:     {
1:37b93bf:         float f = source.readFloat();
1:37b93bf:         bytesRead += 4;
1:37b93bf:         return f;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public void readFully(byte[] b, int off, int len) throws IOException
1:37b93bf:     {
1:37b93bf:         source.readFully(b, off, len);
1:37b93bf:         bytesRead += len;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public void readFully(byte[] b) throws IOException
1:37b93bf:     {
1:37b93bf:         source.readFully(b);
1:37b93bf:         bytesRead += b.length;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public int readInt() throws IOException
1:37b93bf:     {
1:37b93bf:         int i = source.readInt();
1:37b93bf:         bytesRead += 4;
1:37b93bf:         return i;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public String readLine() throws IOException
1:37b93bf:     {
1:37b93bf:         // since this method is deprecated and cannot track bytes read
1:37b93bf:         // just throw exception
1:37b93bf:         throw new UnsupportedOperationException();
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public long readLong() throws IOException
1:37b93bf:     {
1:37b93bf:         long l = source.readLong();
1:37b93bf:         bytesRead += 8;
1:37b93bf:         return l;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public short readShort() throws IOException
1:37b93bf:     {
1:37b93bf:         short s = source.readShort();
1:37b93bf:         bytesRead += 2;
1:37b93bf:         return s;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public String readUTF() throws IOException
1:37b93bf:     {
1:37b93bf:         return DataInputStream.readUTF(this);
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public int readUnsignedByte() throws IOException
1:37b93bf:     {
1:37b93bf:         int i = source.readUnsignedByte();
1:37b93bf:         bytesRead += 1;
1:37b93bf:         return i;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public int readUnsignedShort() throws IOException
1:37b93bf:     {
1:37b93bf:         int i = source.readUnsignedShort();
1:37b93bf:         bytesRead += 2;
1:37b93bf:         return i;
1:37b93bf:     }
1:37b93bf: 
1:37b93bf:     public int skipBytes(int n) throws IOException
1:37b93bf:     {
1:37b93bf:         int skipped = source.skipBytes(n);
1:c024da4:         bytesRead += skipped;
1:37b93bf:         return skipped;
1:37b93bf:     }
1:37b93bf: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.io.util;
1: public class TrackedDataInputPlus implements DataInputPlus, BytesReadTracker
1:     public TrackedDataInputPlus(DataInput source)
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e777301
/////////////////////////////////////////////////////////////////////////
1:     final DataInput source;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DataInputPlus;
1: 
0: public class BytesReadTracker implements DataInputPlus
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private final DataInput source;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:0fe7942
/////////////////////////////////////////////////////////////////////////
1: 
1:      * reset counter to @param count
1:     public void reset(long count)
1:         bytesRead = count;
commit:c024da4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         bytesRead += 2;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         bytesRead += skipped;
commit:37b93bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
0: package org.apache.cassandra.utils;
1: 
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: 
1: /**
1:  * This class is to track bytes read from given DataInput
1:  */
0: public class BytesReadTracker implements DataInput
1: {
1: 
1:     private long bytesRead;
0:     private DataInput source;
1: 
0:     public BytesReadTracker(DataInput source)
1:     {
1:         this.source = source;
1:     }
1: 
1:     public long getBytesRead()
1:     {
1:         return bytesRead;
1:     }
1:     
1:     /**
0:      * reset counter to 0
1:      */
0:     public void reset()
1:     {
0:         bytesRead = 0;
1:     }
1: 
0:     @Override
1:     public boolean readBoolean() throws IOException
1:     {
1:         boolean bool = source.readBoolean();
1:         bytesRead += 1;
1:         return bool;
1:     }
1: 
0:     @Override
1:     public byte readByte() throws IOException
1:     {
1:         byte b = source.readByte();
1:         bytesRead += 1;
1:         return b;
1:     }
1: 
0:     @Override
1:     public char readChar() throws IOException
1:     {
1:         char c = source.readChar();
1:         bytesRead += 1;
1:         return c;
1:     }
1: 
0:     @Override
1:     public double readDouble() throws IOException
1:     {
1:         double d = source.readDouble();
1:         bytesRead += 8;
1:         return d;
1:     }
1: 
0:     @Override
1:     public float readFloat() throws IOException
1:     {
1:         float f = source.readFloat();
1:         bytesRead += 4;
1:         return f;
1:     }
1: 
0:     @Override
1:     public void readFully(byte[] b, int off, int len) throws IOException
1:     {
1:         source.readFully(b, off, len);
1:         bytesRead += len;
1:     }
1: 
0:     @Override
1:     public void readFully(byte[] b) throws IOException
1:     {
1:         source.readFully(b);
1:         bytesRead += b.length;
1:     }
1: 
0:     @Override
1:     public int readInt() throws IOException
1:     {
1:         int i = source.readInt();
1:         bytesRead += 4;
1:         return i;
1:     }
1: 
0:     @Override
1:     public String readLine() throws IOException
1:     {
1:         // since this method is deprecated and cannot track bytes read
1:         // just throw exception
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     @Override
1:     public long readLong() throws IOException
1:     {
1:         long l = source.readLong();
1:         bytesRead += 8;
1:         return l;
1:     }
1: 
0:     @Override
1:     public short readShort() throws IOException
1:     {
1:         short s = source.readShort();
1:         bytesRead += 2;
1:         return s;
1:     }
1: 
0:     @Override
1:     public String readUTF() throws IOException
1:     {
1:         return DataInputStream.readUTF(this);
1:     }
1: 
0:     @Override
1:     public int readUnsignedByte() throws IOException
1:     {
1:         int i = source.readUnsignedByte();
1:         bytesRead += 1;
1:         return i;
1:     }
1: 
0:     @Override
1:     public int readUnsignedShort() throws IOException
1:     {
1:         int i = source.readUnsignedShort();
1:         bytesRead += 2;
1:         return i;
1:     }
1: 
0:     @Override
1:     public int skipBytes(int n) throws IOException
1:     {
1:         int skipped = source.skipBytes(n);
0:         bytesRead += n;
1:         return skipped;
1:     }
1: }
============================================================================