1:6b3fe5e: /*
1:6b3fe5e:  * Licensed to the Apache Software Foundation (ASF) under one
1:6b3fe5e:  * or more contributor license agreements.  See the NOTICE file
1:6b3fe5e:  * distributed with this work for additional information
1:6b3fe5e:  * regarding copyright ownership.  The ASF licenses this file
1:6b3fe5e:  * to you under the Apache License, Version 2.0 (the
1:6b3fe5e:  * "License"); you may not use this file except in compliance
1:6b3fe5e:  * with the License.  You may obtain a copy of the License at
1:6b3fe5e:  *
1:6b3fe5e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6b3fe5e:  *
1:6b3fe5e:  * Unless required by applicable law or agreed to in writing, software
1:6b3fe5e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b3fe5e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b3fe5e:  * See the License for the specific language governing permissions and
1:6b3fe5e:  * limitations under the License.
1:6b3fe5e:  */
1:642546a: package org.apache.cassandra.net;
1:6b3fe5e: 
1:642546a: import java.net.InetAddress;
1:6b3fe5e: 
1:642546a: public interface IMessageSink
1:6b3fe5e: {
1:6b3fe5e:     /**
1:642546a:      * Allow or drop an outgoing message
1:6b3fe5e:      *
1:642546a:      * @return true if the message is allowed, false if it should be dropped
1:6b3fe5e:      */
1:642546a:     boolean allowOutgoingMessage(MessageOut message, int id, InetAddress to);
1:642546a: 
1:642546a:     /**
1:642546a:      * Allow or drop an incoming message
1:642546a:      *
1:642546a:      * @return true if the message is allowed, false if it should be dropped
1:642546a:      */
1:642546a:     boolean allowIncomingMessage(MessageIn message, int id);
1:6b3fe5e: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:642546a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.net;
1: import java.net.InetAddress;
1: public interface IMessageSink
1:      * Allow or drop an outgoing message
1:      * @return true if the message is allowed, false if it should be dropped
1:     boolean allowOutgoingMessage(MessageOut message, int id, InetAddress to);
1: 
1:     /**
1:      * Allow or drop an incoming message
1:      *
1:      * @return true if the message is allowed, false if it should be dropped
1:      */
1:     boolean allowIncomingMessage(MessageIn message, int id);
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
0:      * Transform or drop a write request (represented by a Mutation).
0:      * @param mutation the Mutation to be applied locally.
commit:6b3fe5e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.sink;
1: 
0: import org.apache.cassandra.db.IMutation;
1: 
0: public interface IRequestSink
1: {
1:     /**
0:      * Transform or drop a write request (represented by a RowMutation).
1:      *
0:      * @param mutation the RowMutation to be applied locally.
0:      * @return null if the mutation is to be dropped, or the transformed mutation to apply, which may be just
0:      * the original mutation.
1:      */
0:     IMutation handleWriteRequest(IMutation mutation);
1: }
============================================================================