1:ef5bbed: /*
1:ef5bbed:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef5bbed:  * or more contributor license agreements.  See the NOTICE file
1:ef5bbed:  * distributed with this work for additional information
1:ef5bbed:  * regarding copyright ownership.  The ASF licenses this file
1:ef5bbed:  * to you under the Apache License, Version 2.0 (the
1:ef5bbed:  * "License"); you may not use this file except in compliance
1:ef5bbed:  * with the License.  You may obtain a copy of the License at
1:ef5bbed:  *
1:ef5bbed:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ef5bbed:  *
1:ef5bbed:  * Unless required by applicable law or agreed to in writing, software
1:ef5bbed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef5bbed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef5bbed:  * See the License for the specific language governing permissions and
1:ef5bbed:  * limitations under the License.
1:ef5bbed:  */
1:ef5bbed: 
1:ef5bbed: package org.apache.cassandra.io.sstable;
1:ef5bbed: 
1:ef5bbed: import java.io.IOException;
1:ef5bbed: 
1:ef5bbed: import org.apache.cassandra.db.ClusteringPrefix;
1:ef5bbed: import org.apache.cassandra.db.DeletionTime;
1:ef5bbed: import org.apache.cassandra.db.RowIndexEntry;
1:ef5bbed: import org.apache.cassandra.db.TypeSizes;
1:ef5bbed: import org.apache.cassandra.io.ISerializer;
1:ef5bbed: import org.apache.cassandra.io.sstable.format.Version;
1:ef5bbed: import org.apache.cassandra.io.util.DataInputPlus;
1:ef5bbed: import org.apache.cassandra.io.util.DataOutputPlus;
1:ef5bbed: import org.apache.cassandra.utils.ObjectSizes;
1:ef5bbed: 
1:ef5bbed: /**
1:ef5bbed:  * {@code IndexInfo} is embedded in the indexed version of {@link RowIndexEntry}.
1:ef5bbed:  * Each instance roughly covers a range of {@link org.apache.cassandra.config.Config#column_index_size_in_kb column_index_size_in_kb} kB
1:ef5bbed:  * and contains the first and last clustering value (or slice bound), its offset in the data file and width in the data file.
1:ef5bbed:  * <p>
1:ef5bbed:  * Each {@code IndexInfo} object is serialized as follows.
1:ef5bbed:  * </p>
1:ef5bbed:  * <p>
1:0628099:  * Serialization format changed in 3.0; the {@link #endOpenMarker} has been introduced and integer fields are
1:0628099:  * stored using varint encoding.
1:ef5bbed:  * </p>
1:ef5bbed:  * <p>
1:ef5bbed:  * {@code
1:ef5bbed:  *    (*) IndexInfo.firstName (ClusteringPrefix serializer, either Clustering.serializer.serialize or Slice.Bound.serializer.serialize)
1:ef5bbed:  *    (*) IndexInfo.lastName (ClusteringPrefix serializer, either Clustering.serializer.serialize or Slice.Bound.serializer.serialize)
1:ef5bbed:  * (long) IndexInfo.offset
1:ef5bbed:  * (long) IndexInfo.width
1:ef5bbed:  * (bool) IndexInfo.endOpenMarker != null              (if 3.0)
1:ef5bbed:  *  (int) IndexInfo.endOpenMarker.localDeletionTime    (if 3.0 && IndexInfo.endOpenMarker != null)
1:ef5bbed:  * (long) IndexInfo.endOpenMarker.markedForDeletionAt  (if 3.0 && IndexInfo.endOpenMarker != null)
1:ef5bbed:  * }
1:ef5bbed:  * </p>
1:ef5bbed:  */
1:ef5bbed: public class IndexInfo
1:ef5bbed: {
1:ef5bbed:     private static final long EMPTY_SIZE = ObjectSizes.measure(new IndexInfo(null, null, 0, 0, null));
1:ef5bbed: 
1:ef5bbed:     public final long offset;
1:ef5bbed:     public final long width;
1:ef5bbed:     public final ClusteringPrefix firstName;
1:ef5bbed:     public final ClusteringPrefix lastName;
1:ef5bbed: 
1:ef5bbed:     // If at the end of the index block there is an open range tombstone marker, this marker
1:ef5bbed:     // deletion infos. null otherwise.
1:ef5bbed:     public final DeletionTime endOpenMarker;
1:ef5bbed: 
1:ef5bbed:     public IndexInfo(ClusteringPrefix firstName,
1:ef5bbed:                      ClusteringPrefix lastName,
1:ef5bbed:                      long offset,
1:ef5bbed:                      long width,
1:ef5bbed:                      DeletionTime endOpenMarker)
1:ef5bbed:     {
1:ef5bbed:         this.firstName = firstName;
1:ef5bbed:         this.lastName = lastName;
1:ef5bbed:         this.offset = offset;
1:ef5bbed:         this.width = width;
1:ef5bbed:         this.endOpenMarker = endOpenMarker;
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     public static class Serializer implements ISerializer<IndexInfo>
1:ef5bbed:     {
1:ef5bbed:         // This is the default index size that we use to delta-encode width when serializing so we get better vint-encoding.
1:ef5bbed:         // This is imperfect as user can change the index size and ideally we would save the index size used with each index file
1:ef5bbed:         // to use as base. However, that's a bit more involved a change that we want for now and very seldom do use change the index
1:ef5bbed:         // size so using the default is almost surely better than using no base at all.
1:ef5bbed:         public static final long WIDTH_BASE = 64 * 1024;
1:ef5bbed: 
1:ef5bbed:         private final ISerializer<ClusteringPrefix> clusteringSerializer;
1:ef5bbed:         private final Version version;
1:ef5bbed: 
1:ef5bbed:         public Serializer(Version version, ISerializer<ClusteringPrefix> clusteringSerializer)
1:ef5bbed:         {
1:ef5bbed:             this.clusteringSerializer = clusteringSerializer;
1:ef5bbed:             this.version = version;
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public void serialize(IndexInfo info, DataOutputPlus out) throws IOException
1:ef5bbed:         {
1:ef5bbed:             assert version.storeRows() : "We read old index files but we should never write them";
1:ef5bbed: 
1:ef5bbed:             clusteringSerializer.serialize(info.firstName, out);
1:ef5bbed:             clusteringSerializer.serialize(info.lastName, out);
1:ef5bbed:             out.writeUnsignedVInt(info.offset);
1:ef5bbed:             out.writeVInt(info.width - WIDTH_BASE);
1:ef5bbed: 
1:ef5bbed:             out.writeBoolean(info.endOpenMarker != null);
1:ef5bbed:             if (info.endOpenMarker != null)
1:ef5bbed:                 DeletionTime.serializer.serialize(info.endOpenMarker, out);
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public void skip(DataInputPlus in) throws IOException
1:ef5bbed:         {
1:ef5bbed:             clusteringSerializer.skip(in);
1:ef5bbed:             clusteringSerializer.skip(in);
1:ef5bbed:             if (version.storeRows())
1:ef5bbed:             {
1:ef5bbed:                 in.readUnsignedVInt();
1:ef5bbed:                 in.readVInt();
1:ef5bbed:                 if (in.readBoolean())
1:ef5bbed:                     DeletionTime.serializer.skip(in);
1:ef5bbed:             }
1:ef5bbed:             else
1:ef5bbed:             {
1:ef5bbed:                 in.skipBytes(TypeSizes.sizeof(0L));
1:ef5bbed:                 in.skipBytes(TypeSizes.sizeof(0L));
1:ef5bbed:             }
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public IndexInfo deserialize(DataInputPlus in) throws IOException
1:ef5bbed:         {
1:ef5bbed:             ClusteringPrefix firstName = clusteringSerializer.deserialize(in);
1:ef5bbed:             ClusteringPrefix lastName = clusteringSerializer.deserialize(in);
1:ef5bbed:             long offset;
1:ef5bbed:             long width;
1:ef5bbed:             DeletionTime endOpenMarker = null;
1:ef5bbed:             if (version.storeRows())
1:ef5bbed:             {
1:ef5bbed:                 offset = in.readUnsignedVInt();
1:ef5bbed:                 width = in.readVInt() + WIDTH_BASE;
1:ef5bbed:                 if (in.readBoolean())
1:ef5bbed:                     endOpenMarker = DeletionTime.serializer.deserialize(in);
1:ef5bbed:             }
1:ef5bbed:             else
1:ef5bbed:             {
1:ef5bbed:                 offset = in.readLong();
1:ef5bbed:                 width = in.readLong();
1:ef5bbed:             }
1:ef5bbed:             return new IndexInfo(firstName, lastName, offset, width, endOpenMarker);
1:ef5bbed:         }
1:ef5bbed: 
1:ef5bbed:         public long serializedSize(IndexInfo info)
1:ef5bbed:         {
1:ef5bbed:             assert version.storeRows() : "We read old index files but we should never write them";
1:ef5bbed: 
1:ef5bbed:             long size = clusteringSerializer.serializedSize(info.firstName)
1:ef5bbed:                         + clusteringSerializer.serializedSize(info.lastName)
1:ef5bbed:                         + TypeSizes.sizeofUnsignedVInt(info.offset)
1:ef5bbed:                         + TypeSizes.sizeofVInt(info.width - WIDTH_BASE)
1:ef5bbed:                         + TypeSizes.sizeof(info.endOpenMarker != null);
1:ef5bbed: 
1:ef5bbed:             if (info.endOpenMarker != null)
1:ef5bbed:                 size += DeletionTime.serializer.serializedSize(info.endOpenMarker);
1:ef5bbed:             return size;
1:ef5bbed:         }
1:ef5bbed:     }
1:ef5bbed: 
1:ef5bbed:     public long unsharedHeapSize()
1:ef5bbed:     {
1:ef5bbed:         return EMPTY_SIZE
1:ef5bbed:              + firstName.unsharedHeapSize()
1:ef5bbed:              + lastName.unsharedHeapSize()
1:ef5bbed:              + (endOpenMarker == null ? 0 : endOpenMarker.unsharedHeapSize());
1:ef5bbed:     }
1:ef5bbed: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0628099
/////////////////////////////////////////////////////////////////////////
1:  * Serialization format changed in 3.0; the {@link #endOpenMarker} has been introduced and integer fields are
1:  * stored using varint encoding.
commit:ef5bbed
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.sstable;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.ClusteringPrefix;
1: import org.apache.cassandra.db.DeletionTime;
1: import org.apache.cassandra.db.RowIndexEntry;
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.ISerializer;
1: import org.apache.cassandra.io.sstable.format.Version;
1: import org.apache.cassandra.io.util.DataInputPlus;
1: import org.apache.cassandra.io.util.DataOutputPlus;
1: import org.apache.cassandra.utils.ObjectSizes;
1: 
1: /**
1:  * {@code IndexInfo} is embedded in the indexed version of {@link RowIndexEntry}.
1:  * Each instance roughly covers a range of {@link org.apache.cassandra.config.Config#column_index_size_in_kb column_index_size_in_kb} kB
1:  * and contains the first and last clustering value (or slice bound), its offset in the data file and width in the data file.
1:  * <p>
1:  * Each {@code IndexInfo} object is serialized as follows.
1:  * </p>
1:  * <p>
0:  * Serialization format changed in 3.0. First, the {@code endOpenMarker} has been introduced.
0:  * Second, the <i>order</i> of the fields in serialized representation changed to allow future
0:  * optimizations to access {@code offset} and {@code width} fields directly without skipping
0:  * {@code firstName}/{@code lastName}.
1:  * </p>
1:  * <p>
1:  * {@code
1:  *    (*) IndexInfo.firstName (ClusteringPrefix serializer, either Clustering.serializer.serialize or Slice.Bound.serializer.serialize)
1:  *    (*) IndexInfo.lastName (ClusteringPrefix serializer, either Clustering.serializer.serialize or Slice.Bound.serializer.serialize)
1:  * (long) IndexInfo.offset
1:  * (long) IndexInfo.width
1:  * (bool) IndexInfo.endOpenMarker != null              (if 3.0)
1:  *  (int) IndexInfo.endOpenMarker.localDeletionTime    (if 3.0 && IndexInfo.endOpenMarker != null)
1:  * (long) IndexInfo.endOpenMarker.markedForDeletionAt  (if 3.0 && IndexInfo.endOpenMarker != null)
1:  * }
1:  * </p>
1:  */
1: public class IndexInfo
1: {
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new IndexInfo(null, null, 0, 0, null));
1: 
1:     public final long offset;
1:     public final long width;
1:     public final ClusteringPrefix firstName;
1:     public final ClusteringPrefix lastName;
1: 
1:     // If at the end of the index block there is an open range tombstone marker, this marker
1:     // deletion infos. null otherwise.
1:     public final DeletionTime endOpenMarker;
1: 
1:     public IndexInfo(ClusteringPrefix firstName,
1:                      ClusteringPrefix lastName,
1:                      long offset,
1:                      long width,
1:                      DeletionTime endOpenMarker)
1:     {
1:         this.firstName = firstName;
1:         this.lastName = lastName;
1:         this.offset = offset;
1:         this.width = width;
1:         this.endOpenMarker = endOpenMarker;
1:     }
1: 
1:     public static class Serializer implements ISerializer<IndexInfo>
1:     {
1:         // This is the default index size that we use to delta-encode width when serializing so we get better vint-encoding.
1:         // This is imperfect as user can change the index size and ideally we would save the index size used with each index file
1:         // to use as base. However, that's a bit more involved a change that we want for now and very seldom do use change the index
1:         // size so using the default is almost surely better than using no base at all.
1:         public static final long WIDTH_BASE = 64 * 1024;
1: 
1:         private final ISerializer<ClusteringPrefix> clusteringSerializer;
1:         private final Version version;
1: 
1:         public Serializer(Version version, ISerializer<ClusteringPrefix> clusteringSerializer)
1:         {
1:             this.clusteringSerializer = clusteringSerializer;
1:             this.version = version;
1:         }
1: 
1:         public void serialize(IndexInfo info, DataOutputPlus out) throws IOException
1:         {
1:             assert version.storeRows() : "We read old index files but we should never write them";
1: 
1:             clusteringSerializer.serialize(info.firstName, out);
1:             clusteringSerializer.serialize(info.lastName, out);
1:             out.writeUnsignedVInt(info.offset);
1:             out.writeVInt(info.width - WIDTH_BASE);
1: 
1:             out.writeBoolean(info.endOpenMarker != null);
1:             if (info.endOpenMarker != null)
1:                 DeletionTime.serializer.serialize(info.endOpenMarker, out);
1:         }
1: 
1:         public void skip(DataInputPlus in) throws IOException
1:         {
1:             clusteringSerializer.skip(in);
1:             clusteringSerializer.skip(in);
1:             if (version.storeRows())
1:             {
1:                 in.readUnsignedVInt();
1:                 in.readVInt();
1:                 if (in.readBoolean())
1:                     DeletionTime.serializer.skip(in);
1:             }
1:             else
1:             {
1:                 in.skipBytes(TypeSizes.sizeof(0L));
1:                 in.skipBytes(TypeSizes.sizeof(0L));
1:             }
1:         }
1: 
1:         public IndexInfo deserialize(DataInputPlus in) throws IOException
1:         {
1:             ClusteringPrefix firstName = clusteringSerializer.deserialize(in);
1:             ClusteringPrefix lastName = clusteringSerializer.deserialize(in);
1:             long offset;
1:             long width;
1:             DeletionTime endOpenMarker = null;
1:             if (version.storeRows())
1:             {
1:                 offset = in.readUnsignedVInt();
1:                 width = in.readVInt() + WIDTH_BASE;
1:                 if (in.readBoolean())
1:                     endOpenMarker = DeletionTime.serializer.deserialize(in);
1:             }
1:             else
1:             {
1:                 offset = in.readLong();
1:                 width = in.readLong();
1:             }
1:             return new IndexInfo(firstName, lastName, offset, width, endOpenMarker);
1:         }
1: 
1:         public long serializedSize(IndexInfo info)
1:         {
1:             assert version.storeRows() : "We read old index files but we should never write them";
1: 
1:             long size = clusteringSerializer.serializedSize(info.firstName)
1:                         + clusteringSerializer.serializedSize(info.lastName)
1:                         + TypeSizes.sizeofUnsignedVInt(info.offset)
1:                         + TypeSizes.sizeofVInt(info.width - WIDTH_BASE)
1:                         + TypeSizes.sizeof(info.endOpenMarker != null);
1: 
1:             if (info.endOpenMarker != null)
1:                 size += DeletionTime.serializer.serializedSize(info.endOpenMarker);
1:             return size;
1:         }
1:     }
1: 
1:     public long unsharedHeapSize()
1:     {
1:         return EMPTY_SIZE
1:              + firstName.unsharedHeapSize()
1:              + lastName.unsharedHeapSize()
1:              + (endOpenMarker == null ? 0 : endOpenMarker.unsharedHeapSize());
1:     }
1: }
============================================================================