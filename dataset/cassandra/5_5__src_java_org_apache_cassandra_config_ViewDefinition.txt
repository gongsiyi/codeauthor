1:a3a8dbc: /*
1:a3a8dbc:  * Licensed to the Apache Software Foundation (ASF) under one
1:a3a8dbc:  * or more contributor license agreements.  See the NOTICE file
1:a3a8dbc:  * distributed with this work for additional information
1:a3a8dbc:  * regarding copyright ownership.  The ASF licenses this file
1:a3a8dbc:  * to you under the Apache License, Version 2.0 (the
1:a3a8dbc:  * "License"); you may not use this file except in compliance
1:a3a8dbc:  * with the License.  You may obtain a copy of the License at
1:a3a8dbc:  *
1:a3a8dbc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a3a8dbc:  *
1:a3a8dbc:  * Unless required by applicable law or agreed to in writing, software
1:a3a8dbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a3a8dbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a3a8dbc:  * See the License for the specific language governing permissions and
1:a3a8dbc:  * limitations under the License.
1:a3a8dbc:  */
1:a3a8dbc: package org.apache.cassandra.config;
5:a3a8dbc: 
1:5a4253b: import java.util.List;
1:a3a8dbc: import java.util.Objects;
1:a3a8dbc: import java.util.UUID;
1:5a4253b: import java.util.stream.Collectors;
1:a3a8dbc: 
1:5a4253b: import org.antlr.runtime.*;
1:5a4253b: import org.apache.cassandra.cql3.*;
1:5a4253b: import org.apache.cassandra.cql3.statements.SelectStatement;
1:5a4253b: import org.apache.cassandra.db.view.View;
1:5a4253b: import org.apache.cassandra.exceptions.SyntaxException;
1:a3a8dbc: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:a3a8dbc: import org.apache.commons.lang3.builder.ToStringBuilder;
1:a3a8dbc: 
1:a3a8dbc: public class ViewDefinition
1:a3a8dbc: {
1:a3a8dbc:     public final String ksName;
1:a3a8dbc:     public final String viewName;
1:a3a8dbc:     public final UUID baseTableId;
1:5a4253b:     public final String baseTableName;
1:a3a8dbc:     public final boolean includeAllColumns;
1:a3a8dbc:     public final CFMetaData metadata;
1:a3a8dbc: 
1:5a4253b:     public SelectStatement.RawStatement select;
1:5a4253b:     public String whereClause;
1:5a4253b: 
1:a3a8dbc:     public ViewDefinition(ViewDefinition def)
1:a3a8dbc:     {
1:5a4253b:         this(def.ksName, def.viewName, def.baseTableId, def.baseTableName, def.includeAllColumns, def.select, def.whereClause, def.metadata);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     /**
1:a3a8dbc:      * @param viewName          Name of the view
1:a3a8dbc:      * @param baseTableId       Internal ID of the table which this view is based off of
1:a3a8dbc:      * @param includeAllColumns Whether to include all columns or not
1:a3a8dbc:      */
1:5a4253b:     public ViewDefinition(String ksName, String viewName, UUID baseTableId, String baseTableName, boolean includeAllColumns, SelectStatement.RawStatement select, String whereClause, CFMetaData metadata)
1:a3a8dbc:     {
1:a3a8dbc:         this.ksName = ksName;
1:a3a8dbc:         this.viewName = viewName;
1:a3a8dbc:         this.baseTableId = baseTableId;
1:5a4253b:         this.baseTableName = baseTableName;
1:a3a8dbc:         this.includeAllColumns = includeAllColumns;
1:5a4253b:         this.select = select;
1:5a4253b:         this.whereClause = whereClause;
1:a3a8dbc:         this.metadata = metadata;
1:a3a8dbc:     }
1:5a4253b: 
1:a3a8dbc:     /**
1:a3a8dbc:      * @return true if the view specified by this definition will include the column, false otherwise
1:a3a8dbc:      */
1:a3a8dbc:     public boolean includes(ColumnIdentifier column)
1:a3a8dbc:     {
1:a3a8dbc:         return metadata.getColumnDefinition(column) != null;
1:a3a8dbc:     }
1:5a4253b: 
1:a3a8dbc:     public ViewDefinition copy()
1:a3a8dbc:     {
1:5a4253b:         return new ViewDefinition(ksName, viewName, baseTableId, baseTableName, includeAllColumns, select, whereClause, metadata.copy());
1:a3a8dbc:     }
1:5a4253b: 
1:a3a8dbc:     public CFMetaData baseTableMetadata()
1:a3a8dbc:     {
1:a3a8dbc:         return Schema.instance.getCFMetaData(baseTableId);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public boolean equals(Object o)
1:a3a8dbc:     {
1:a3a8dbc:         if (this == o)
1:a3a8dbc:             return true;
1:a3a8dbc: 
1:a3a8dbc:         if (!(o instanceof ViewDefinition))
1:a3a8dbc:             return false;
1:a3a8dbc: 
1:a3a8dbc:         ViewDefinition other = (ViewDefinition) o;
1:a3a8dbc:         return Objects.equals(ksName, other.ksName)
1:a3a8dbc:                && Objects.equals(viewName, other.viewName)
1:a3a8dbc:                && Objects.equals(baseTableId, other.baseTableId)
1:a3a8dbc:                && Objects.equals(includeAllColumns, other.includeAllColumns)
1:5a4253b:                && Objects.equals(whereClause, other.whereClause)
1:a3a8dbc:                && Objects.equals(metadata, other.metadata);
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public int hashCode()
1:a3a8dbc:     {
1:a3a8dbc:         return new HashCodeBuilder(29, 1597)
1:a3a8dbc:                .append(ksName)
1:a3a8dbc:                .append(viewName)
1:a3a8dbc:                .append(baseTableId)
1:a3a8dbc:                .append(includeAllColumns)
1:5a4253b:                .append(whereClause)
1:a3a8dbc:                .append(metadata)
1:a3a8dbc:                .toHashCode();
1:a3a8dbc:     }
1:a3a8dbc: 
1:a3a8dbc:     @Override
1:a3a8dbc:     public String toString()
1:a3a8dbc:     {
1:a3a8dbc:         return new ToStringBuilder(this)
1:a3a8dbc:                .append("ksName", ksName)
1:a3a8dbc:                .append("viewName", viewName)
1:a3a8dbc:                .append("baseTableId", baseTableId)
1:5a4253b:                .append("baseTableName", baseTableName)
1:a3a8dbc:                .append("includeAllColumns", includeAllColumns)
1:5a4253b:                .append("whereClause", whereClause)
1:a3a8dbc:                .append("metadata", metadata)
1:a3a8dbc:                .toString();
1:a3a8dbc:     }
1:5a4253b: 
1:5a4253b:     /**
1:6b7db8a:      * Replace the column 'from' with 'to' in this materialized view definition's partition,
1:5a4253b:      * clustering, or included columns.
1:68d2526:      * @param from the existing column
1:68d2526:      * @param to the new column
1:5a4253b:      */
1:5a4253b:     public void renameColumn(ColumnIdentifier from, ColumnIdentifier to)
1:5a4253b:     {
1:5a4253b:         metadata.renameColumn(from, to);
1:5a4253b: 
1:5a4253b:         // convert whereClause to Relations, rename ids in Relations, then convert back to whereClause
1:5a4253b:         List<Relation> relations = whereClauseToRelations(whereClause);
1:4ed0060:         ColumnDefinition.Raw fromRaw = ColumnDefinition.Raw.forQuoted(from.toString());
1:4ed0060:         ColumnDefinition.Raw toRaw = ColumnDefinition.Raw.forQuoted(to.toString());
1:5a4253b:         List<Relation> newRelations = relations.stream()
1:5a4253b:                 .map(r -> r.renameIdentifier(fromRaw, toRaw))
1:5a4253b:                 .collect(Collectors.toList());
1:5a4253b: 
1:5a4253b:         this.whereClause = View.relationsToWhereClause(newRelations);
1:5a4253b:         String rawSelect = View.buildSelectStatement(baseTableName, metadata.allColumns(), whereClause);
1:5a4253b:         this.select = (SelectStatement.RawStatement) QueryProcessor.parseStatement(rawSelect);
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     private static List<Relation> whereClauseToRelations(String whereClause)
1:5a4253b:     {
1:5a4253b:         try
1:5a4253b:         {
1:e94032a:             List<Relation> relations = CQLFragmentParser.parseAnyUnhandled(CqlParser::whereClause, whereClause).build().relations;
1:5a4253b: 
1:5a4253b:             return relations;
1:5a4253b:         }
1:5a4253b:         catch (RecognitionException | SyntaxException exc)
1:5a4253b:         {
1:5a4253b:             throw new RuntimeException("Unexpected error parsing materialized view's where clause while handling column rename: ", exc);
1:5a4253b:         }
1:5a4253b:     }
1:a3a8dbc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:      * @param from the existing column
1:      * @param to the new column
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      * Replace the column 'from' with 'to' in this materialized view definition's partition,
0:      * @param from the existing column 
0:      * @param to the new column 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition.Raw fromRaw = ColumnDefinition.Raw.forQuoted(from.toString());
1:         ColumnDefinition.Raw toRaw = ColumnDefinition.Raw.forQuoted(to.toString());
commit:a87fd71
commit:86ba227
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e94032a
/////////////////////////////////////////////////////////////////////////
1:             List<Relation> relations = CQLFragmentParser.parseAnyUnhandled(CqlParser::whereClause, whereClause).build().relations;
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.stream.Collectors;
1: import org.antlr.runtime.*;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.cql3.statements.SelectStatement;
1: import org.apache.cassandra.db.view.View;
1: import org.apache.cassandra.exceptions.SyntaxException;
1:     public final String baseTableName;
1:     public SelectStatement.RawStatement select;
1:     public String whereClause;
1: 
1:         this(def.ksName, def.viewName, def.baseTableId, def.baseTableName, def.includeAllColumns, def.select, def.whereClause, def.metadata);
/////////////////////////////////////////////////////////////////////////
1:     public ViewDefinition(String ksName, String viewName, UUID baseTableId, String baseTableName, boolean includeAllColumns, SelectStatement.RawStatement select, String whereClause, CFMetaData metadata)
1:         this.baseTableName = baseTableName;
1:         this.select = select;
1:         this.whereClause = whereClause;
/////////////////////////////////////////////////////////////////////////
1:         return new ViewDefinition(ksName, viewName, baseTableId, baseTableName, includeAllColumns, select, whereClause, metadata.copy());
/////////////////////////////////////////////////////////////////////////
1:                && Objects.equals(whereClause, other.whereClause)
/////////////////////////////////////////////////////////////////////////
1:                .append(whereClause)
/////////////////////////////////////////////////////////////////////////
1:                .append("baseTableName", baseTableName)
1:                .append("whereClause", whereClause)
1: 
1:     /**
0:      * Replace the column {@param from} with {@param to} in this materialized view definition's partition,
1:      * clustering, or included columns.
1:      */
1:     public void renameColumn(ColumnIdentifier from, ColumnIdentifier to)
1:     {
1:         metadata.renameColumn(from, to);
1: 
1:         // convert whereClause to Relations, rename ids in Relations, then convert back to whereClause
1:         List<Relation> relations = whereClauseToRelations(whereClause);
0:         ColumnIdentifier.Raw fromRaw = new ColumnIdentifier.Literal(from.toString(), true);
0:         ColumnIdentifier.Raw toRaw = new ColumnIdentifier.Literal(to.toString(), true);
1:         List<Relation> newRelations = relations.stream()
1:                 .map(r -> r.renameIdentifier(fromRaw, toRaw))
1:                 .collect(Collectors.toList());
1: 
1:         this.whereClause = View.relationsToWhereClause(newRelations);
1:         String rawSelect = View.buildSelectStatement(baseTableName, metadata.allColumns(), whereClause);
1:         this.select = (SelectStatement.RawStatement) QueryProcessor.parseStatement(rawSelect);
1:     }
1: 
1:     private static List<Relation> whereClauseToRelations(String whereClause)
1:     {
0:         ErrorCollector errorCollector = new ErrorCollector(whereClause);
0:         CharStream stream = new ANTLRStringStream(whereClause);
0:         CqlLexer lexer = new CqlLexer(stream);
0:         lexer.addErrorListener(errorCollector);
1: 
0:         TokenStream tokenStream = new CommonTokenStream(lexer);
0:         CqlParser parser = new CqlParser(tokenStream);
0:         parser.addErrorListener(errorCollector);
1: 
1:         try
1:         {
0:             List<Relation> relations = parser.whereClause().build().relations;
1: 
0:             // The errorCollector has queued up any errors that the lexer and parser may have encountered
0:             // along the way, if necessary, we turn the last error into exceptions here.
0:             errorCollector.throwFirstSyntaxError();
1: 
1:             return relations;
1:         }
1:         catch (RecognitionException | SyntaxException exc)
1:         {
1:             throw new RuntimeException("Unexpected error parsing materialized view's where clause while handling column rename: ", exc);
1:         }
1:     }
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:a3a8dbc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.config;
1: 
1: import java.util.Objects;
1: import java.util.UUID;
1: 
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
1: import org.apache.commons.lang3.builder.ToStringBuilder;
1: 
0: import org.apache.cassandra.cql3.ColumnIdentifier;
1: 
1: public class ViewDefinition
1: {
1:     public final String ksName;
1:     public final String viewName;
1:     public final UUID baseTableId;
1:     public final boolean includeAllColumns;
0:     // The order of partititon columns and clustering columns is important, so we cannot switch these two to sets
1:     public final CFMetaData metadata;
1: 
1:     public ViewDefinition(ViewDefinition def)
1:     {
0:         this(def.ksName, def.viewName, def.baseTableId, def.includeAllColumns, def.metadata);
1:     }
1: 
1:     /**
1:      * @param viewName          Name of the view
1:      * @param baseTableId       Internal ID of the table which this view is based off of
1:      * @param includeAllColumns Whether to include all columns or not
1:      */
0:     public ViewDefinition(String ksName, String viewName, UUID baseTableId, boolean includeAllColumns, CFMetaData metadata)
1:     {
1:         this.ksName = ksName;
1:         this.viewName = viewName;
1:         this.baseTableId = baseTableId;
1:         this.includeAllColumns = includeAllColumns;
1:         this.metadata = metadata;
1:     }
1: 
1:     /**
1:      * @return true if the view specified by this definition will include the column, false otherwise
1:      */
1:     public boolean includes(ColumnIdentifier column)
1:     {
1:         return metadata.getColumnDefinition(column) != null;
1:     }
1: 
1:     public ViewDefinition copy()
1:     {
0:         return new ViewDefinition(ksName, viewName, baseTableId, includeAllColumns, metadata.copy());
1:     }
1: 
1:     public CFMetaData baseTableMetadata()
1:     {
1:         return Schema.instance.getCFMetaData(baseTableId);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof ViewDefinition))
1:             return false;
1: 
1:         ViewDefinition other = (ViewDefinition) o;
1:         return Objects.equals(ksName, other.ksName)
1:                && Objects.equals(viewName, other.viewName)
1:                && Objects.equals(baseTableId, other.baseTableId)
1:                && Objects.equals(includeAllColumns, other.includeAllColumns)
1:                && Objects.equals(metadata, other.metadata);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return new HashCodeBuilder(29, 1597)
1:                .append(ksName)
1:                .append(viewName)
1:                .append(baseTableId)
1:                .append(includeAllColumns)
1:                .append(metadata)
1:                .toHashCode();
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return new ToStringBuilder(this)
1:                .append("ksName", ksName)
1:                .append("viewName", viewName)
1:                .append("baseTableId", baseTableId)
1:                .append("includeAllColumns", includeAllColumns)
1:                .append("metadata", metadata)
1:                .toString();
1:     }
1: }
============================================================================