1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
6:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
6:a991b64:  */
1:a991b64: package org.apache.cassandra.db;
7:a991b64: 
1:2457599: import java.util.Objects;
1:a991b64: import java.security.MessageDigest;
1:a991b64: 
1:2457599: import org.apache.cassandra.serializers.MarshalException;
1:2457599: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
6:a991b64: /**
1:2457599:  * Stores the information relating to the liveness of the primary key columns of a row.
3:a991b64:  * <p>
1:2457599:  * A {@code LivenessInfo} can first be empty. If it isn't, it contains at least a timestamp,
1:2457599:  * which is the timestamp for the row primary key columns. On top of that, the info can be
1:2457599:  * ttl'ed, in which case the {@code LivenessInfo} also has both a ttl and a local expiration time.
1:45f1db0:  * <p>
1:45f1db0:  * Please note that if a liveness info is ttl'ed, that expiration is <b>only</b> an expiration
1:45f1db0:  * of the liveness info itself (so, of the timestamp), and once the info expires it becomes
1:45f1db0:  * {@code EMPTY}. But if a row has a liveness info which expires, the rest of the row data is
1:45f1db0:  * unaffected (of course, the rest of said row data might be ttl'ed on its own but this is
1:45f1db0:  * separate).
1:a991b64:  */
1:2457599: public class LivenessInfo
1:a991b64: {
1:a991b64:     public static final long NO_TIMESTAMP = Long.MIN_VALUE;
1:a991b64:     public static final int NO_TTL = 0;
1:2457599:     public static final int NO_EXPIRATION_TIME = Integer.MAX_VALUE;
1:2457599: 
1:2457599:     public static final LivenessInfo EMPTY = new LivenessInfo(NO_TIMESTAMP);
1:2457599: 
1:2457599:     protected final long timestamp;
1:2457599: 
1:2457599:     protected LivenessInfo(long timestamp)
1:2457599:     {
1:2457599:         this.timestamp = timestamp;
1:2457599:     }
1:2457599: 
1:e017f94:     public static LivenessInfo create(long timestamp, int nowInSec)
1:2457599:     {
1:2457599:         return new LivenessInfo(timestamp);
1:2457599:     }
1:2457599: 
1:2457599:     public static LivenessInfo expiring(long timestamp, int ttl, int nowInSec)
1:2457599:     {
1:2457599:         return new ExpiringLivenessInfo(timestamp, ttl, nowInSec + ttl);
1:2457599:     }
1:2457599: 
1:e017f94:     public static LivenessInfo create(long timestamp, int ttl, int nowInSec)
1:2457599:     {
1:2457599:         return ttl == NO_TTL
1:e017f94:              ? create(timestamp, nowInSec)
1:2457599:              : expiring(timestamp, ttl, nowInSec);
1:2457599:     }
1:2457599: 
1:e017f94:     // Note that this ctor takes the expiration time, not the current time.
1:2457599:     // Use when you know that's what you want.
1:e017f94:     public static LivenessInfo withExpirationTime(long timestamp, int ttl, int localExpirationTime)
1:2457599:     {
1:2457599:         return ttl == NO_TTL ? new LivenessInfo(timestamp) : new ExpiringLivenessInfo(timestamp, ttl, localExpirationTime);
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * Whether this liveness info is empty (has no timestamp).
1:a991b64:      *
1:2457599:      * @return whether this liveness info is empty or not.
1:a991b64:      */
1:2457599:     public boolean isEmpty()
1:2457599:     {
1:2457599:         return timestamp == NO_TIMESTAMP;
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * The timestamp for this liveness info.
1:a991b64:      *
1:2457599:      * @return the liveness info timestamp (or {@link #NO_TIMESTAMP} if the info is empty).
1:a991b64:      */
1:2457599:     public long timestamp()
1:2457599:     {
1:2457599:         return timestamp;
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * Whether the info has a ttl.
1:2457599:      */
1:2457599:     public boolean isExpiring()
1:2457599:     {
1:2457599:         return false;
1:2457599:     }
1:2457599: 
1:2457599:     /**
1:2457599:      * The ttl (if any) on the row primary key columns or {@link #NO_TTL} if it is not
1:a991b64:      * expiring.
1:a991b64:      *
1:a991b64:      * Please note that this value is the TTL that was set originally and is thus not
1:2457599:      * changing.
1:a991b64:      */
1:2457599:     public int ttl()
1:2457599:     {
1:2457599:         return NO_TTL;
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * The expiration time (in seconds) if the info is expiring ({@link #NO_EXPIRATION_TIME} otherwise).
1:a991b64:      *
1:a991b64:      */
1:2457599:     public int localExpirationTime()
1:2457599:     {
1:2457599:         return NO_EXPIRATION_TIME;
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:2457599:      * Whether that info is still live.
1:a991b64:      *
1:2457599:      * A {@code LivenessInfo} is live if it is either not expiring, or if its expiration time if after
1:2457599:      * {@code nowInSec}.
1:a991b64:      *
2:a991b64:      * @param nowInSec the current time in seconds.
1:2457599:      * @return whether this liveness info is live or not.
1:a991b64:      */
1:2457599:     public boolean isLive(int nowInSec)
1:2457599:     {
1:2457599:         return !isEmpty();
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Adds this liveness information to the provided digest.
1:a991b64:      *
1:a991b64:      * @param digest the digest to add this liveness information to.
1:a991b64:      */
1:2457599:     public void digest(MessageDigest digest)
1:2457599:     {
1:2457599:         FBUtilities.updateWithLong(digest, timestamp());
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Validate the data contained by this liveness information.
1:a991b64:      *
1:a991b64:      * @throws MarshalException if some of the data is corrupted.
1:a991b64:      */
1:2457599:     public void validate()
1:2457599:     {
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The size of the (useful) data this liveness information contains.
1:a991b64:      *
1:a991b64:      * @return the size of the data this liveness information contains.
1:a991b64:      */
1:2457599:     public int dataSize()
1:2457599:     {
1:2457599:         return TypeSizes.sizeof(timestamp());
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Whether this liveness information supersedes another one (that is
1:a991b64:      * whether is has a greater timestamp than the other or not).
1:a991b64:      *
1:a991b64:      * @param other the {@code LivenessInfo} to compare this info to.
1:a991b64:      *
1:a991b64:      * @return whether this {@code LivenessInfo} supersedes {@code other}.
1:a991b64:      */
1:2457599:     public boolean supersedes(LivenessInfo other)
1:2457599:     {
1:2457599:         return timestamp > other.timestamp;
1:2457599:     }
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * Returns a copy of this liveness info updated with the provided timestamp.
1:a991b64:      *
1:a991b64:      * @param newTimestamp the timestamp for the returned info.
1:a991b64:      * @return if this liveness info has a timestamp, a copy of it with {@code newTimestamp}
1:a991b64:      * as timestamp. If it has no timestamp however, this liveness info is returned
1:a991b64:      * unchanged.
1:a991b64:      */
1:2457599:     public LivenessInfo withUpdatedTimestamp(long newTimestamp)
1:2457599:     {
1:2457599:         return new LivenessInfo(newTimestamp);
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public String toString()
1:2457599:     {
1:2457599:         return String.format("[ts=%d]", timestamp);
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public boolean equals(Object other)
1:2457599:     {
1:2457599:         if(!(other instanceof LivenessInfo))
1:2457599:             return false;
1:2457599: 
1:2457599:         LivenessInfo that = (LivenessInfo)other;
1:2457599:         return this.timestamp() == that.timestamp()
1:2457599:             && this.ttl() == that.ttl()
1:2457599:             && this.localExpirationTime() == that.localExpirationTime();
1:2457599:     }
1:2457599: 
1:2457599:     @Override
1:2457599:     public int hashCode()
1:2457599:     {
1:2457599:         return Objects.hash(timestamp(), ttl(), localExpirationTime());
1:2457599:     }
1:2457599: 
1:2457599:     private static class ExpiringLivenessInfo extends LivenessInfo
1:2457599:     {
1:2457599:         private final int ttl;
1:2457599:         private final int localExpirationTime;
1:2457599: 
1:2457599:         private ExpiringLivenessInfo(long timestamp, int ttl, int localExpirationTime)
1:2457599:         {
1:2457599:             super(timestamp);
1:2457599:             assert ttl != NO_TTL && localExpirationTime != NO_EXPIRATION_TIME;
1:2457599:             this.ttl = ttl;
1:2457599:             this.localExpirationTime = localExpirationTime;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public int ttl()
1:2457599:         {
1:2457599:             return ttl;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public int localExpirationTime()
1:2457599:         {
1:2457599:             return localExpirationTime;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public boolean isExpiring()
1:2457599:         {
1:2457599:             return true;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public boolean isLive(int nowInSec)
1:2457599:         {
1:2457599:             return nowInSec < localExpirationTime;
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public void digest(MessageDigest digest)
1:2457599:         {
1:2457599:             super.digest(digest);
1:2457599:             FBUtilities.updateWithInt(digest, localExpirationTime);
1:2457599:             FBUtilities.updateWithInt(digest, ttl);
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public void validate()
1:2457599:         {
1:2457599:             if (ttl < 0)
1:2457599:                 throw new MarshalException("A TTL should not be negative");
1:2457599:             if (localExpirationTime < 0)
1:2457599:                 throw new MarshalException("A local expiration time should not be negative");
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public int dataSize()
1:2457599:         {
1:2457599:             return super.dataSize()
1:2457599:                  + TypeSizes.sizeof(ttl)
1:2457599:                  + TypeSizes.sizeof(localExpirationTime);
1:2457599: 
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public LivenessInfo withUpdatedTimestamp(long newTimestamp)
1:2457599:         {
1:2457599:             return new ExpiringLivenessInfo(newTimestamp, ttl, localExpirationTime);
1:2457599:         }
1:2457599: 
1:2457599:         @Override
1:2457599:         public String toString()
1:2457599:         {
1:2457599:             return String.format("[ts=%d ttl=%d, let=%d]", timestamp, ttl, localExpirationTime);
1:2457599:         }
1:2457599:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:e9ef792
commit:45f1db0
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * Please note that if a liveness info is ttl'ed, that expiration is <b>only</b> an expiration
1:  * of the liveness info itself (so, of the timestamp), and once the info expires it becomes
1:  * {@code EMPTY}. But if a row has a liveness info which expires, the rest of the row data is
1:  * unaffected (of course, the rest of said row data might be ttl'ed on its own but this is
1:  * separate).
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import java.util.Objects;
0: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.utils.FBUtilities;
1:  * Stores the information relating to the liveness of the primary key columns of a row.
1:  * A {@code LivenessInfo} can first be empty. If it isn't, it contains at least a timestamp,
1:  * which is the timestamp for the row primary key columns. On top of that, the info can be
1:  * ttl'ed, in which case the {@code LivenessInfo} also has both a ttl and a local expiration time.
1: public class LivenessInfo
1:     public static final int NO_EXPIRATION_TIME = Integer.MAX_VALUE;
1:     public static final LivenessInfo EMPTY = new LivenessInfo(NO_TIMESTAMP);
1: 
1:     protected final long timestamp;
1: 
1:     protected LivenessInfo(long timestamp)
1:     {
1:         this.timestamp = timestamp;
1:     }
1: 
0:     public static LivenessInfo create(CFMetaData metadata, long timestamp, int nowInSec)
1:     {
0:         int defaultTTL = metadata.getDefaultTimeToLive();
0:         if (defaultTTL != NO_TTL)
0:             return expiring(timestamp, defaultTTL, nowInSec);
1: 
1:         return new LivenessInfo(timestamp);
1:     }
1: 
1:     public static LivenessInfo expiring(long timestamp, int ttl, int nowInSec)
1:     {
1:         return new ExpiringLivenessInfo(timestamp, ttl, nowInSec + ttl);
1:     }
1: 
0:     public static LivenessInfo create(CFMetaData metadata, long timestamp, int ttl, int nowInSec)
1:     {
1:         return ttl == NO_TTL
0:              ? create(metadata, timestamp, nowInSec)
1:              : expiring(timestamp, ttl, nowInSec);
1:     }
1: 
0:     // Note that this ctor ignores the default table ttl and takes the expiration time, not the current time.
1:     // Use when you know that's what you want.
0:     public static LivenessInfo create(long timestamp, int ttl, int localExpirationTime)
1:     {
1:         return ttl == NO_TTL ? new LivenessInfo(timestamp) : new ExpiringLivenessInfo(timestamp, ttl, localExpirationTime);
1:     }
1:      * Whether this liveness info is empty (has no timestamp).
1:      * @return whether this liveness info is empty or not.
1:     public boolean isEmpty()
1:     {
1:         return timestamp == NO_TIMESTAMP;
1:     }
1:      * The timestamp for this liveness info.
1:      * @return the liveness info timestamp (or {@link #NO_TIMESTAMP} if the info is empty).
1:     public long timestamp()
1:     {
1:         return timestamp;
1:     }
1:      * Whether the info has a ttl.
1:      */
1:     public boolean isExpiring()
1:     {
1:         return false;
1:     }
1: 
1:     /**
1:      * The ttl (if any) on the row primary key columns or {@link #NO_TTL} if it is not
1:      * changing.
1:     public int ttl()
1:     {
1:         return NO_TTL;
1:     }
1:      * The expiration time (in seconds) if the info is expiring ({@link #NO_EXPIRATION_TIME} otherwise).
1:     public int localExpirationTime()
1:     {
1:         return NO_EXPIRATION_TIME;
1:     }
1:      * Whether that info is still live.
1:      * A {@code LivenessInfo} is live if it is either not expiring, or if its expiration time if after
1:      * {@code nowInSec}.
1:      * @return whether this liveness info is live or not.
1:     public boolean isLive(int nowInSec)
1:     {
1:         return !isEmpty();
1:     }
1:     public void digest(MessageDigest digest)
1:     {
1:         FBUtilities.updateWithLong(digest, timestamp());
1:     }
1:     public void validate()
1:     {
1:     }
1:     public int dataSize()
1:     {
1:         return TypeSizes.sizeof(timestamp());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public boolean supersedes(LivenessInfo other)
1:     {
1:         return timestamp > other.timestamp;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public LivenessInfo withUpdatedTimestamp(long newTimestamp)
1:     {
1:         return new LivenessInfo(newTimestamp);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("[ts=%d]", timestamp);
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other)
1:     {
1:         if(!(other instanceof LivenessInfo))
1:             return false;
1: 
1:         LivenessInfo that = (LivenessInfo)other;
1:         return this.timestamp() == that.timestamp()
1:             && this.ttl() == that.ttl()
1:             && this.localExpirationTime() == that.localExpirationTime();
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hash(timestamp(), ttl(), localExpirationTime());
1:     }
1: 
1:     private static class ExpiringLivenessInfo extends LivenessInfo
1:     {
1:         private final int ttl;
1:         private final int localExpirationTime;
1: 
1:         private ExpiringLivenessInfo(long timestamp, int ttl, int localExpirationTime)
1:         {
1:             super(timestamp);
1:             assert ttl != NO_TTL && localExpirationTime != NO_EXPIRATION_TIME;
1:             this.ttl = ttl;
1:             this.localExpirationTime = localExpirationTime;
1:         }
1: 
1:         @Override
1:         public int ttl()
1:         {
1:             return ttl;
1:         }
1: 
1:         @Override
1:         public int localExpirationTime()
1:         {
1:             return localExpirationTime;
1:         }
1: 
1:         @Override
1:         public boolean isExpiring()
1:         {
1:             return true;
1:         }
1: 
1:         @Override
1:         public boolean isLive(int nowInSec)
1:         {
1:             return nowInSec < localExpirationTime;
1:         }
1: 
1:         @Override
1:         public void digest(MessageDigest digest)
1:         {
1:             super.digest(digest);
1:             FBUtilities.updateWithInt(digest, localExpirationTime);
1:             FBUtilities.updateWithInt(digest, ttl);
1:         }
1: 
1:         @Override
1:         public void validate()
1:         {
1:             if (ttl < 0)
1:                 throw new MarshalException("A TTL should not be negative");
1:             if (localExpirationTime < 0)
1:                 throw new MarshalException("A local expiration time should not be negative");
1:         }
1: 
1:         @Override
1:         public int dataSize()
1:         {
1:             return super.dataSize()
1:                  + TypeSizes.sizeof(ttl)
1:                  + TypeSizes.sizeof(localExpirationTime);
1: 
1:         }
1: 
1:         @Override
1:         public LivenessInfo withUpdatedTimestamp(long newTimestamp)
1:         {
1:             return new ExpiringLivenessInfo(newTimestamp, ttl, localExpirationTime);
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return String.format("[ts=%d ttl=%d, let=%d]", timestamp, ttl, localExpirationTime);
1:         }
1:     }
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.security.MessageDigest;
1: 
0: import org.apache.cassandra.db.*;
1: 
1: /**
0:  * Groups the informations necessary to decide the liveness of a given piece of
0:  * column data.
1:  * <p>
0:  * In practice, a {@code LivenessInfo} groups 3 informations:
0:  *   1) the data timestamp. It is sometimes allowed for a given piece of data to have
0:  *      no timestamp (for {@link Row#partitionKeyLivenessInfo} more precisely), but if that
0:  *      is the case it means the data has no liveness info at all.
0:  *   2) the data ttl if relevant.
0:  *   2) the data local deletion time if relevant (that is, if either the data has a ttl or is deleted).
1:  */
0: public interface LivenessInfo extends Aliasable<LivenessInfo>
1: {
1:     public static final long NO_TIMESTAMP = Long.MIN_VALUE;
1:     public static final int NO_TTL = 0;
0:     public static final int NO_DELETION_TIME = Integer.MAX_VALUE;
1: 
0:     public static final LivenessInfo NONE = new SimpleLivenessInfo(NO_TIMESTAMP, NO_TTL, NO_DELETION_TIME);
1: 
1:     /**
0:      * The timestamp at which the data was inserted or {@link NO_TIMESTAMP}
0:      * if it has no timestamp (which may or may not be allowed).
1:      *
0:      * @return the liveness info timestamp.
1:      */
0:     public long timestamp();
1: 
1:     /**
0:      * Whether this liveness info has a timestamp or not.
1:      * <p>
0:      * Note that if this return {@code false}, then both {@link #hasTTL} and
0:      * {@link #hasLocalDeletionTime} must return {@code false} too.
1:      *
0:      * @return whether this liveness info has a timestamp or not.
1:      */
0:     public boolean hasTimestamp();
1: 
1:     /**
0:      * The ttl (if any) on the data or {@link NO_TTL} if the data is not
1:      * expiring.
1:      *
1:      * Please note that this value is the TTL that was set originally and is thus not
0:      * changing. If you want to figure out how much time the data has before it expires,
0:      * then you should use {@link #remainingTTL}.
1:      */
0:     public int ttl();
1: 
1:     /**
0:      * Whether this liveness info has a TTL or not.
1:      *
0:      * @return whether this liveness info has a TTL or not.
1:      */
0:     public boolean hasTTL();
1: 
1:     /**
0:      * The deletion time (in seconds) on the data if applicable ({@link NO_DELETION}
0:      * otherwise).
1:      *
0:      * There is 3 cases in practice:
0:      *   1) the data is neither deleted nor expiring: it then has neither {@code ttl()}
0:      *      nor {@code localDeletionTime()}.
0:      *   2) the data is expiring/expired: it then has both a {@code ttl()} and a
0:      *      {@code localDeletionTime()}. Whether it's still live or is expired depends
0:      *      on the {@code localDeletionTime()}.
0:      *   3) the data is deleted: it has no {@code ttl()} but has a
0:      *      {@code localDeletionTime()}.
1:      */
0:     public int localDeletionTime();
1: 
1:     /**
0:      * Whether this liveness info has a local deletion time or not.
1:      *
0:      * @return whether this liveness info has a local deletion time or not.
1:      */
0:     public boolean hasLocalDeletionTime();
1: 
1:     /**
0:      * The actual remaining time to live (in seconds) for the data this is
0:      * the liveness information of.
1:      *
0:      * {@code #ttl} returns the initial TTL sets on the piece of data while this
0:      * method computes how much time the data actually has to live given the
0:      * current time.
1:      *
1:      * @param nowInSec the current time in seconds.
0:      * @return the remaining time to live (in seconds) the data has, or
0:      * {@code -1} if the data is either expired or not expiring.
1:      */
0:     public int remainingTTL(int nowInSec);
1: 
1:     /**
0:      * Checks whether a given piece of data is live given the current time.
1:      *
1:      * @param nowInSec the current time in seconds.
0:      * @return whether the data having this liveness info is live or not.
1:      */
0:     public boolean isLive(int nowInSec);
1: 
1:     /**
1:      * Adds this liveness information to the provided digest.
1:      *
1:      * @param digest the digest to add this liveness information to.
1:      */
0:     public void digest(MessageDigest digest);
1: 
1:     /**
1:      * Validate the data contained by this liveness information.
1:      *
1:      * @throws MarshalException if some of the data is corrupted.
1:      */
0:     public void validate();
1: 
1:     /**
1:      * The size of the (useful) data this liveness information contains.
1:      *
1:      * @return the size of the data this liveness information contains.
1:      */
0:     public int dataSize();
1: 
1:     /**
1:      * Whether this liveness information supersedes another one (that is
1:      * whether is has a greater timestamp than the other or not).
1:      *
1:      * @param other the {@code LivenessInfo} to compare this info to.
1:      *
1:      * @return whether this {@code LivenessInfo} supersedes {@code other}.
1:      */
0:     public boolean supersedes(LivenessInfo other);
1: 
1:     /**
0:      * Returns the result of merging this info to another one (that is, it
0:      * return this info if it supersedes the other one, or the other one
0:      * otherwise).
1:      */
0:     public LivenessInfo mergeWith(LivenessInfo other);
1: 
1:     /**
0:      * Whether this liveness information can be purged.
1:      * <p>
0:      * A liveness info can be purged if it is not live and hasn't been so
0:      * for longer than gcGrace (or more precisely, it's local deletion time
0:      * is smaller than gcBefore, which is itself "now - gcGrace").
1:      *
0:      * @param maxPurgeableTimestamp the biggest timestamp that can be purged.
0:      * A liveness info will not be considered purgeable if its timestamp is
0:      * greater than this value, even if it mets the other criteria for purging.
0:      * @param gcBefore the local deletion time before which deleted/expired
0:      * liveness info can be purged.
1:      *
0:      * @return whether this liveness information can be purged.
1:      */
0:     public boolean isPurgeable(long maxPurgeableTimestamp, int gcBefore);
1: 
1:     /**
1:      * Returns a copy of this liveness info updated with the provided timestamp.
1:      *
1:      * @param newTimestamp the timestamp for the returned info.
1:      * @return if this liveness info has a timestamp, a copy of it with {@code newTimestamp}
1:      * as timestamp. If it has no timestamp however, this liveness info is returned
1:      * unchanged.
1:      */
0:     public LivenessInfo withUpdatedTimestamp(long newTimestamp);
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:e017f94
/////////////////////////////////////////////////////////////////////////
1:     public static LivenessInfo create(long timestamp, int nowInSec)
/////////////////////////////////////////////////////////////////////////
1:     public static LivenessInfo create(long timestamp, int ttl, int nowInSec)
1:              ? create(timestamp, nowInSec)
1:     // Note that this ctor takes the expiration time, not the current time.
1:     public static LivenessInfo withExpirationTime(long timestamp, int ttl, int localExpirationTime)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
0:         int defaultTTL = metadata.params.defaultTimeToLive;
============================================================================