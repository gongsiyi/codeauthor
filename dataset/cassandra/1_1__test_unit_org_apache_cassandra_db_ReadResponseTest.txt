1:24682d2: /*
1:24682d2:  * Licensed to the Apache Software Foundation (ASF) under one
1:24682d2:  * or more contributor license agreements.  See the NOTICE file
1:24682d2:  * distributed with this work for additional information
1:24682d2:  * regarding copyright ownership.  The ASF licenses this file
1:24682d2:  * to you under the Apache License, Version 2.0 (the
1:24682d2:  * "License"); you may not use this file except in compliance
1:24682d2:  * with the License.  You may obtain a copy of the License at
1:24682d2:  *
1:24682d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:24682d2:  *
1:24682d2:  * Unless required by applicable law or agreed to in writing, software
1:24682d2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:24682d2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:24682d2:  * See the License for the specific language governing permissions and
1:24682d2:  * limitations under the License.
1:24682d2:  */
1:24682d2: package org.apache.cassandra.db;
1:24682d2: 
1:24682d2: import java.util.*;
1:24682d2: 
1:24682d2: import org.junit.After;
1:24682d2: import org.junit.Before;
1:24682d2: import org.junit.Test;
1:24682d2: 
1:24682d2: import org.apache.cassandra.Util;
1:24682d2: import org.apache.cassandra.config.CFMetaData;
1:24682d2: import org.apache.cassandra.config.DatabaseDescriptor;
1:24682d2: import org.apache.cassandra.cql3.CQLTester;
1:24682d2: import org.apache.cassandra.db.rows.Rows;
1:24682d2: import org.apache.cassandra.db.rows.UnfilteredRowIterators;
1:24682d2: import org.apache.cassandra.db.partitions.ImmutableBTreePartition;
1:24682d2: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1:24682d2: import org.apache.cassandra.db.marshal.AsciiType;
1:24682d2: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:24682d2: import org.apache.cassandra.dht.IPartitioner;
1:24682d2: 
1:24682d2: import static org.junit.Assert.assertEquals;
1:24682d2: 
1:24682d2: public class ReadResponseTest extends CQLTester
1:24682d2: {
1:24682d2:     private IPartitioner partitionerToRestore;
1:24682d2: 
1:24682d2:     @Before
1:24682d2:     public void setupPartitioner()
1:24682d2:     {
1:24682d2:         // Using an ordered partitioner to be able to predict keys order in the following tests.
1:24682d2:         partitionerToRestore = DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:24682d2:     }
1:24682d2: 
1:24682d2:     @After
1:24682d2:     public void resetPartitioner()
1:24682d2:     {
1:24682d2:         DatabaseDescriptor.setPartitionerUnsafe(partitionerToRestore);
1:24682d2:     }
1:24682d2: 
1:24682d2:     @Test
1:24682d2:     public void testLegacyResponseSkipWrongBounds()
1:24682d2:     {
1:24682d2:         createTable("CREATE TABLE %s (k text PRIMARY KEY)");
1:24682d2: 
1:24682d2:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:24682d2: 
1:24682d2:         // Test that if a legacy response contains keys at the boundary of the requested key range that shouldn't be present, those
1:24682d2:         // are properly skipped. See CASSANDRA-9857 for context.
1:24682d2: 
1:24682d2:         List<ImmutableBTreePartition> responses = Arrays.asList(makePartition(cfs.metadata, "k1"),
1:24682d2:                                                                 makePartition(cfs.metadata, "k2"),
1:24682d2:                                                                 makePartition(cfs.metadata, "k3"));
1:24682d2:         ReadResponse.LegacyRemoteDataResponse response = new ReadResponse.LegacyRemoteDataResponse(responses);
1:24682d2: 
1:3e37b4a:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k3").build()), "k2");
1:3e37b4a:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k0").toKeyExcl("k3").build()), "k1", "k2");
1:3e37b4a:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k4").build()), "k2", "k3");
1:24682d2: 
1:3e37b4a:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k3").build()), "k1", "k2");
1:3e37b4a:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k4").build()), "k1", "k2", "k3");
1:24682d2:     }
1:24682d2: 
1:24682d2:     private void assertPartitions(UnfilteredPartitionIterator actual, String... expectedKeys)
1:24682d2:     {
1:24682d2:         int i = 0;
1:24682d2:         while (i < expectedKeys.length && actual.hasNext())
1:24682d2:         {
1:24682d2:             String actualKey = AsciiType.instance.getString(actual.next().partitionKey().getKey());
1:24682d2:             assertEquals(expectedKeys[i++], actualKey);
1:24682d2:         }
1:24682d2: 
1:24682d2:         if (i < expectedKeys.length)
1:24682d2:             throw new AssertionError("Got less results than expected: " + expectedKeys[i] + " is not in the result");
1:24682d2:         if (actual.hasNext())
1:24682d2:             throw new AssertionError("Got more results than expected: first unexpected key is " + AsciiType.instance.getString(actual.next().partitionKey().getKey()));
1:24682d2:     }
1:24682d2: 
1:24682d2:     private static ImmutableBTreePartition makePartition(CFMetaData metadata, String key)
1:24682d2:     {
1:24682d2:         return ImmutableBTreePartition.create(UnfilteredRowIterators.noRowsIterator(metadata, Util.dk(key), Rows.EMPTY_STATIC_ROW, new DeletionTime(0, 0), false));
1:24682d2:     }
1:24682d2: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3e37b4a
/////////////////////////////////////////////////////////////////////////
1:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k3").build()), "k2");
1:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k0").toKeyExcl("k3").build()), "k1", "k2");
1:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k4").build()), "k2", "k3");
1:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k3").build()), "k1", "k2");
1:         assertPartitions(response.makeIterator(Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k4").build()), "k1", "k2", "k3");
commit:24682d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db;
1: 
1: import java.util.*;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.db.rows.Rows;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterators;
1: import org.apache.cassandra.db.partitions.ImmutableBTreePartition;
1: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1: import org.apache.cassandra.dht.IPartitioner;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class ReadResponseTest extends CQLTester
1: {
1:     private IPartitioner partitionerToRestore;
1: 
1:     @Before
1:     public void setupPartitioner()
1:     {
1:         // Using an ordered partitioner to be able to predict keys order in the following tests.
1:         partitionerToRestore = DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:     }
1: 
1:     @After
1:     public void resetPartitioner()
1:     {
1:         DatabaseDescriptor.setPartitionerUnsafe(partitionerToRestore);
1:     }
1: 
1:     @Test
1:     public void testLegacyResponseSkipWrongBounds()
1:     {
1:         createTable("CREATE TABLE %s (k text PRIMARY KEY)");
1: 
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1: 
1:         // Test that if a legacy response contains keys at the boundary of the requested key range that shouldn't be present, those
1:         // are properly skipped. See CASSANDRA-9857 for context.
1: 
1:         List<ImmutableBTreePartition> responses = Arrays.asList(makePartition(cfs.metadata, "k1"),
1:                                                                 makePartition(cfs.metadata, "k2"),
1:                                                                 makePartition(cfs.metadata, "k3"));
1:         ReadResponse.LegacyRemoteDataResponse response = new ReadResponse.LegacyRemoteDataResponse(responses);
1: 
0:         assertPartitions(response.makeIterator(cfs.metadata, Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k3").build()), "k2");
0:         assertPartitions(response.makeIterator(cfs.metadata, Util.cmd(cfs).fromKeyExcl("k0").toKeyExcl("k3").build()), "k1", "k2");
0:         assertPartitions(response.makeIterator(cfs.metadata, Util.cmd(cfs).fromKeyExcl("k1").toKeyExcl("k4").build()), "k2", "k3");
1: 
0:         assertPartitions(response.makeIterator(cfs.metadata, Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k3").build()), "k1", "k2");
0:         assertPartitions(response.makeIterator(cfs.metadata, Util.cmd(cfs).fromKeyIncl("k1").toKeyExcl("k4").build()), "k1", "k2", "k3");
1:     }
1: 
1:     private void assertPartitions(UnfilteredPartitionIterator actual, String... expectedKeys)
1:     {
1:         int i = 0;
1:         while (i < expectedKeys.length && actual.hasNext())
1:         {
1:             String actualKey = AsciiType.instance.getString(actual.next().partitionKey().getKey());
1:             assertEquals(expectedKeys[i++], actualKey);
1:         }
1: 
1:         if (i < expectedKeys.length)
1:             throw new AssertionError("Got less results than expected: " + expectedKeys[i] + " is not in the result");
1:         if (actual.hasNext())
1:             throw new AssertionError("Got more results than expected: first unexpected key is " + AsciiType.instance.getString(actual.next().partitionKey().getKey()));
1:     }
1: 
1:     private static ImmutableBTreePartition makePartition(CFMetaData metadata, String key)
1:     {
1:         return ImmutableBTreePartition.create(UnfilteredRowIterators.noRowsIterator(metadata, Util.dk(key), Rows.EMPTY_STATIC_ROW, new DeletionTime(0, 0), false));
1:     }
1: }
============================================================================