1:e0adc16: /*
1:e0adc16:  * Licensed to the Apache Software Foundation (ASF) under one
1:e0adc16:  * or more contributor license agreements.  See the NOTICE file
1:e0adc16:  * distributed with this work for additional information
1:e0adc16:  * regarding copyright ownership.  The ASF licenses this file
1:e0adc16:  * to you under the Apache License, Version 2.0 (the
1:e0adc16:  * "License"); you may not use this file except in compliance
1:e0adc16:  * with the License.  You may obtain a copy of the License at
1:e0adc16:  *
1:e0adc16:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e0adc16:  *
1:e0adc16:  * Unless required by applicable law or agreed to in writing, software
1:e0adc16:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e0adc16:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e0adc16:  * See the License for the specific language governing permissions and
1:e0adc16:  * limitations under the License.
1:e0adc16:  */
1:e0adc16: 
1:e0adc16: package org.apache.cassandra.transport;
1:e0adc16: 
1:e0adc16: import org.junit.Assert;
1:e0adc16: import org.junit.Test;
1:e0adc16: 
1:e0adc16: public class ProtocolVersionTest
1:e0adc16: {
1:e0adc16:     @Test
1:e0adc16:     public void testDecode()
1:e0adc16:     {
1:e0adc16:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:e0adc16:             Assert.assertEquals(version, ProtocolVersion.decode(version.asInt()));
1:e0adc16: 
1:e0adc16:         for (ProtocolVersion version : ProtocolVersion.UNSUPPORTED)
1:e0adc16:         { // unsupported old versions
1:e0adc16:             try
1:e0adc16:             {
1:e0adc16:                 Assert.assertEquals(version, ProtocolVersion.decode(version.asInt()));
1:e0adc16:                 Assert.fail("Expected invalid protocol exception");
1:e0adc16:             }
1:e0adc16:             catch (ProtocolException ex)
1:e0adc16:             {
1:e0adc16:                 Assert.assertNotNull(ex.getForcedProtocolVersion());
1:e0adc16:                 Assert.assertEquals(version, ex.getForcedProtocolVersion());
1:e0adc16:             }
1:e0adc16:         }
1:e0adc16: 
1:e0adc16:         try
1:e0adc16:         { // unsupported newer version
1:e0adc16:             Assert.assertEquals(null, ProtocolVersion.decode(63));
1:e0adc16:             Assert.fail("Expected invalid protocol exception");
1:e0adc16:         }
1:e0adc16:         catch (ProtocolException ex)
1:e0adc16:         {
1:e0adc16:             Assert.assertNotNull(ex.getForcedProtocolVersion());
1:e0adc16:             Assert.assertEquals(ProtocolVersion.MAX_SUPPORTED_VERSION, ex.getForcedProtocolVersion());
1:e0adc16:         }
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     @Test
1:e0adc16:     public void testSupportedVersions()
1:e0adc16:     {
1:e0adc16:         Assert.assertTrue(ProtocolVersion.supportedVersions().size() >= 2); // at least one OS and one DSE
1:e0adc16:         Assert.assertNotNull(ProtocolVersion.CURRENT);
1:e0adc16: 
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V4.isBeta());
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V5.isBeta());
1:e0adc16:     }
1:e0adc16: 
1:e0adc16:     @Test
1:e0adc16:     public void testComparisons()
1:e0adc16:     {
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V1.isSmallerOrEqualTo(ProtocolVersion.V1));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V2.isSmallerOrEqualTo(ProtocolVersion.V2));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V3.isSmallerOrEqualTo(ProtocolVersion.V3));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V4.isSmallerOrEqualTo(ProtocolVersion.V4));
1:e0adc16: 
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V1.isGreaterOrEqualTo(ProtocolVersion.V1));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V2.isGreaterOrEqualTo(ProtocolVersion.V2));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V3.isGreaterOrEqualTo(ProtocolVersion.V3));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V4.isGreaterOrEqualTo(ProtocolVersion.V4));
1:e0adc16: 
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V1.isSmallerThan(ProtocolVersion.V2));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V2.isSmallerThan(ProtocolVersion.V3));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V3.isSmallerThan(ProtocolVersion.V4));
1:e0adc16: 
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V1.isGreaterThan(ProtocolVersion.V2));
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V2.isGreaterThan(ProtocolVersion.V3));
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V3.isGreaterThan(ProtocolVersion.V4));
1:e0adc16: 
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V4.isGreaterThan(ProtocolVersion.V3));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V3.isGreaterThan(ProtocolVersion.V2));
1:e0adc16:         Assert.assertTrue(ProtocolVersion.V2.isGreaterThan(ProtocolVersion.V1));
1:e0adc16: 
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V4.isSmallerThan(ProtocolVersion.V3));
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V3.isSmallerThan(ProtocolVersion.V2));
1:e0adc16:         Assert.assertFalse(ProtocolVersion.V2.isSmallerThan(ProtocolVersion.V1));
1:e0adc16:     }
1:e0adc16: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.transport;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class ProtocolVersionTest
1: {
1:     @Test
1:     public void testDecode()
1:     {
1:         for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:             Assert.assertEquals(version, ProtocolVersion.decode(version.asInt()));
1: 
1:         for (ProtocolVersion version : ProtocolVersion.UNSUPPORTED)
1:         { // unsupported old versions
1:             try
1:             {
1:                 Assert.assertEquals(version, ProtocolVersion.decode(version.asInt()));
1:                 Assert.fail("Expected invalid protocol exception");
1:             }
1:             catch (ProtocolException ex)
1:             {
1:                 Assert.assertNotNull(ex.getForcedProtocolVersion());
1:                 Assert.assertEquals(version, ex.getForcedProtocolVersion());
1:             }
1:         }
1: 
1:         try
1:         { // unsupported newer version
1:             Assert.assertEquals(null, ProtocolVersion.decode(63));
1:             Assert.fail("Expected invalid protocol exception");
1:         }
1:         catch (ProtocolException ex)
1:         {
1:             Assert.assertNotNull(ex.getForcedProtocolVersion());
1:             Assert.assertEquals(ProtocolVersion.MAX_SUPPORTED_VERSION, ex.getForcedProtocolVersion());
1:         }
1:     }
1: 
1:     @Test
1:     public void testSupportedVersions()
1:     {
1:         Assert.assertTrue(ProtocolVersion.supportedVersions().size() >= 2); // at least one OS and one DSE
1:         Assert.assertNotNull(ProtocolVersion.CURRENT);
1: 
1:         Assert.assertFalse(ProtocolVersion.V4.isBeta());
1:         Assert.assertTrue(ProtocolVersion.V5.isBeta());
1:     }
1: 
1:     @Test
1:     public void testComparisons()
1:     {
1:         Assert.assertTrue(ProtocolVersion.V1.isSmallerOrEqualTo(ProtocolVersion.V1));
1:         Assert.assertTrue(ProtocolVersion.V2.isSmallerOrEqualTo(ProtocolVersion.V2));
1:         Assert.assertTrue(ProtocolVersion.V3.isSmallerOrEqualTo(ProtocolVersion.V3));
1:         Assert.assertTrue(ProtocolVersion.V4.isSmallerOrEqualTo(ProtocolVersion.V4));
1: 
1:         Assert.assertTrue(ProtocolVersion.V1.isGreaterOrEqualTo(ProtocolVersion.V1));
1:         Assert.assertTrue(ProtocolVersion.V2.isGreaterOrEqualTo(ProtocolVersion.V2));
1:         Assert.assertTrue(ProtocolVersion.V3.isGreaterOrEqualTo(ProtocolVersion.V3));
1:         Assert.assertTrue(ProtocolVersion.V4.isGreaterOrEqualTo(ProtocolVersion.V4));
1: 
1:         Assert.assertTrue(ProtocolVersion.V1.isSmallerThan(ProtocolVersion.V2));
1:         Assert.assertTrue(ProtocolVersion.V2.isSmallerThan(ProtocolVersion.V3));
1:         Assert.assertTrue(ProtocolVersion.V3.isSmallerThan(ProtocolVersion.V4));
1: 
1:         Assert.assertFalse(ProtocolVersion.V1.isGreaterThan(ProtocolVersion.V2));
1:         Assert.assertFalse(ProtocolVersion.V2.isGreaterThan(ProtocolVersion.V3));
1:         Assert.assertFalse(ProtocolVersion.V3.isGreaterThan(ProtocolVersion.V4));
1: 
1:         Assert.assertTrue(ProtocolVersion.V4.isGreaterThan(ProtocolVersion.V3));
1:         Assert.assertTrue(ProtocolVersion.V3.isGreaterThan(ProtocolVersion.V2));
1:         Assert.assertTrue(ProtocolVersion.V2.isGreaterThan(ProtocolVersion.V1));
1: 
1:         Assert.assertFalse(ProtocolVersion.V4.isSmallerThan(ProtocolVersion.V3));
1:         Assert.assertFalse(ProtocolVersion.V3.isSmallerThan(ProtocolVersion.V2));
1:         Assert.assertFalse(ProtocolVersion.V2.isSmallerThan(ProtocolVersion.V1));
1:     }
1: }
============================================================================