1:16499ca: /*
1:16499ca:  * Licensed to the Apache Software Foundation (ASF) under one
1:16499ca:  * or more contributor license agreements.  See the NOTICE file
1:16499ca:  * distributed with this work for additional information
1:16499ca:  * regarding copyright ownership.  The ASF licenses this file
1:16499ca:  * to you under the Apache License, Version 2.0 (the
1:16499ca:  * "License"); you may not use this file except in compliance
1:16499ca:  * with the License.  You may obtain a copy of the License at
1:16499ca:  *
1:16499ca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:16499ca:  *
1:16499ca:  * Unless required by applicable law or agreed to in writing, software
1:16499ca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:16499ca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:16499ca:  * See the License for the specific language governing permissions and
1:16499ca:  * limitations under the License.
1:16499ca:  */
1:16499ca: package org.apache.cassandra.io.util;
1:16499ca: 
1:16499ca: import java.io.IOException;
1:16499ca: import java.io.OutputStream;
1:16499ca: import java.nio.channels.WritableByteChannel;
1:16499ca: 
1:16499ca: /**
1:16499ca:  * When possible use {@link WrappedDataOutputStreamPlus} instead of this class, as it will
1:16499ca:  * be more efficient when using Plus methods. This class is only for situations where it cannot be used.
1:16499ca:  *
1:16499ca:  * The channel provided by this class is just a wrapper around the output stream.
1:16499ca:  */
1:16499ca: public class WrappedDataOutputStreamPlus extends UnbufferedDataOutputStreamPlus
1:16499ca: {
1:16499ca:     protected final OutputStream out;
1:16499ca:     public WrappedDataOutputStreamPlus(OutputStream out)
1:16499ca:     {
1:16499ca:         super();
1:16499ca:         this.out = out;
1:16499ca:     }
1:16499ca: 
1:16499ca:     public WrappedDataOutputStreamPlus(OutputStream out, WritableByteChannel channel)
1:16499ca:     {
1:16499ca:         super(channel);
1:16499ca:         this.out = out;
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(byte[] buffer, int offset, int count) throws IOException
1:16499ca:     {
1:16499ca:         out.write(buffer, offset, count);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void write(int oneByte) throws IOException
1:16499ca:     {
1:16499ca:         out.write(oneByte);
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void close() throws IOException
1:16499ca:     {
1:16499ca:         out.close();
1:16499ca:     }
1:16499ca: 
1:16499ca:     @Override
1:16499ca:     public void flush() throws IOException
1:16499ca:     {
1:16499ca:         out.flush();
1:16499ca:     }
1:16499ca: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.nio.channels.WritableByteChannel;
1: 
1: /**
1:  * When possible use {@link WrappedDataOutputStreamPlus} instead of this class, as it will
1:  * be more efficient when using Plus methods. This class is only for situations where it cannot be used.
1:  *
1:  * The channel provided by this class is just a wrapper around the output stream.
1:  */
1: public class WrappedDataOutputStreamPlus extends UnbufferedDataOutputStreamPlus
1: {
1:     protected final OutputStream out;
1:     public WrappedDataOutputStreamPlus(OutputStream out)
1:     {
1:         super();
1:         this.out = out;
1:     }
1: 
1:     public WrappedDataOutputStreamPlus(OutputStream out, WritableByteChannel channel)
1:     {
1:         super(channel);
1:         this.out = out;
1:     }
1: 
1:     @Override
1:     public void write(byte[] buffer, int offset, int count) throws IOException
1:     {
1:         out.write(buffer, offset, count);
1:     }
1: 
1:     @Override
1:     public void write(int oneByte) throws IOException
1:     {
1:         out.write(oneByte);
1:     }
1: 
1:     @Override
1:     public void close() throws IOException
1:     {
1:         out.close();
1:     }
1: 
1:     @Override
1:     public void flush() throws IOException
1:     {
1:         out.flush();
1:     }
1: }
============================================================================