1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:5a3ffc0: package org.apache.cassandra.hadoop;
1:5a3ffc0: 
1:5a3ffc0: import org.apache.hadoop.mapred.Counters;
1:5a3ffc0: import org.apache.hadoop.mapred.InputSplit;
1:5a3ffc0: import org.apache.hadoop.mapred.Reporter;
1:5a3ffc0: import org.apache.hadoop.mapreduce.StatusReporter;
1:5a3ffc0: 
1:5a3ffc0: /**
1:5a3ffc0:  * A reporter that works with both mapred and mapreduce APIs.
1:5a3ffc0:  */
1:68d2526: public class ReporterWrapper extends StatusReporter implements Reporter
1:68d2526: {
1:5a3ffc0:     private Reporter wrappedReporter;
1:5a3ffc0: 
1:68d2526:     public ReporterWrapper(Reporter reporter)
1:68d2526:     {
1:5a3ffc0:         wrappedReporter = reporter;
2:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public Counters.Counter getCounter(Enum<?> anEnum)
1:68d2526:     {
1:5a3ffc0:         return wrappedReporter.getCounter(anEnum);
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public Counters.Counter getCounter(String s, String s1)
1:68d2526:     {
1:5a3ffc0:         return wrappedReporter.getCounter(s, s1);
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public void incrCounter(Enum<?> anEnum, long l)
1:68d2526:     {
1:5a3ffc0:         wrappedReporter.incrCounter(anEnum, l);
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public void incrCounter(String s, String s1, long l)
1:68d2526:     {
1:5a3ffc0:         wrappedReporter.incrCounter(s, s1, l);
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public InputSplit getInputSplit() throws UnsupportedOperationException
1:68d2526:     {
1:5a3ffc0:         return wrappedReporter.getInputSplit();
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public void progress()
1:68d2526:     {
1:5a3ffc0:         wrappedReporter.progress();
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     // @Override
1:68d2526:     public float getProgress()
1:68d2526:     {
1:5a3ffc0:         throw new UnsupportedOperationException();
1:5a3ffc0:     }
1:5a3ffc0: 
1:5a3ffc0:     @Override
1:68d2526:     public void setStatus(String s)
1:68d2526:     {
1:5a3ffc0:         wrappedReporter.setStatus(s);
1:9f14856:     }
1:5a3ffc0: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public class ReporterWrapper extends StatusReporter implements Reporter
1: {
1:     public ReporterWrapper(Reporter reporter)
1:     {
1:     public Counters.Counter getCounter(Enum<?> anEnum)
1:     {
1:     public Counters.Counter getCounter(String s, String s1)
1:     {
1:     public void incrCounter(Enum<?> anEnum, long l)
1:     {
1:     public void incrCounter(String s, String s1, long l)
1:     {
1:     public InputSplit getInputSplit() throws UnsupportedOperationException
1:     {
1:     public void progress()
1:     {
1:     public float getProgress()
1:     {
1:     public void setStatus(String s)
1:     {
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:5a3ffc0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.hadoop;
1: 
1: import org.apache.hadoop.mapred.Counters;
1: import org.apache.hadoop.mapred.InputSplit;
1: import org.apache.hadoop.mapred.Reporter;
1: import org.apache.hadoop.mapreduce.StatusReporter;
1: 
1: /**
1:  * A reporter that works with both mapred and mapreduce APIs.
1:  */
0: public class ReporterWrapper extends StatusReporter implements Reporter {
1:     private Reporter wrappedReporter;
1: 
0:     public ReporterWrapper(Reporter reporter) {
1:         wrappedReporter = reporter;
1:     }
1: 
1:     @Override
0:     public Counters.Counter getCounter(Enum<?> anEnum) {
1:         return wrappedReporter.getCounter(anEnum);
1:     }
1: 
1:     @Override
0:     public Counters.Counter getCounter(String s, String s1) {
1:         return wrappedReporter.getCounter(s, s1);
1:     }
1: 
1:     @Override
0:     public void incrCounter(Enum<?> anEnum, long l) {
1:         wrappedReporter.incrCounter(anEnum, l);
1:     }
1: 
1:     @Override
0:     public void incrCounter(String s, String s1, long l) {
1:         wrappedReporter.incrCounter(s, s1, l);
1:     }
1: 
1:     @Override
0:     public InputSplit getInputSplit() throws UnsupportedOperationException {
1:         return wrappedReporter.getInputSplit();
1:     }
1: 
1:     @Override
0:     public void progress() {
1:         wrappedReporter.progress();
1:     }
1: 
1:     // @Override
0:     public float getProgress() {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     @Override
0:     public void setStatus(String s) {
1:         wrappedReporter.setStatus(s);
1:     }
1: }
============================================================================