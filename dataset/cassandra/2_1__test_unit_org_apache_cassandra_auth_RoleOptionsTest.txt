1:2f3fd41: /*
1:2f3fd41:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f3fd41:  * or more contributor license agreements.  See the NOTICE file
1:2f3fd41:  * distributed with this work for additional information
1:2f3fd41:  * regarding copyright ownership.  The ASF licenses this file
1:2f3fd41:  * to you under the Apache License, Version 2.0 (the
1:2f3fd41:  * "License"); you may not use this file except in compliance
1:2f3fd41:  * with the License.  You may obtain a copy of the License at
1:2f3fd41:  *
1:2f3fd41:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f3fd41:  *
1:2f3fd41:  * Unless required by applicable law or agreed to in writing, software
1:2f3fd41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f3fd41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f3fd41:  * See the License for the specific language governing permissions and
1:2f3fd41:  * limitations under the License.
1:2f3fd41:  */
1:2f3fd41: package org.apache.cassandra.auth;
1:2f3fd41: 
1:2f3fd41: import java.lang.reflect.Field;
1:2f3fd41: import java.util.*;
1:2f3fd41: 
1:2f3fd41: import com.google.common.collect.ImmutableSet;
1:2f3fd41: import org.junit.Test;
1:2f3fd41: 
1:2f3fd41: import org.apache.cassandra.config.DatabaseDescriptor;
1:2f3fd41: import org.apache.cassandra.exceptions.*;
1:2f3fd41: import org.apache.cassandra.utils.FBUtilities;
1:2f3fd41: 
1:2f3fd41: import static org.junit.Assert.assertEquals;
1:2f3fd41: import static org.junit.Assert.assertFalse;
1:2f3fd41: import static org.junit.Assert.assertTrue;
1:2f3fd41: import static org.junit.Assert.fail;
1:2f3fd41: 
1:2f3fd41: public class RoleOptionsTest
1:2f3fd41: {
1:2f3fd41:     @Test
1:2f3fd41:     public void validateValueTypes()
1:2f3fd41:     {
1:2f3fd41:         setupRoleManager(getRoleManager(IRoleManager.Option.values()));
1:2f3fd41: 
1:2f3fd41:         RoleOptions opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.LOGIN, "test");
1:2f3fd41:         assertInvalidOptions(opts, "Invalid value for property 'LOGIN'. It must be a boolean");
1:2f3fd41: 
1:2f3fd41:         opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.PASSWORD, 99);
1:2f3fd41:         assertInvalidOptions(opts, "Invalid value for property 'PASSWORD'. It must be a string");
1:2f3fd41: 
1:2f3fd41:         opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.SUPERUSER, new HashSet<>());
1:2f3fd41:         assertInvalidOptions(opts, "Invalid value for property 'SUPERUSER'. It must be a boolean");
1:2f3fd41: 
1:2f3fd41:         opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.OPTIONS, false);
1:2f3fd41:         assertInvalidOptions(opts, "Invalid value for property 'OPTIONS'. It must be a map");
1:2f3fd41: 
1:2f3fd41:         opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:2f3fd41:         opts.setOption(IRoleManager.Option.SUPERUSER, false);
1:2f3fd41:         opts.setOption(IRoleManager.Option.PASSWORD, "test");
1:2f3fd41:         opts.setOption(IRoleManager.Option.OPTIONS, Collections.singletonMap("key", "value"));
1:2f3fd41:         opts.validate();
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     @Test
1:2f3fd41:     public void rejectUnsupportedOptions()
1:2f3fd41:     {
1:2f3fd41:         // Our hypothetical IRoleManager only supports the LOGIN option
1:2f3fd41:         IRoleManager roleManager = getRoleManager(IRoleManager.Option.LOGIN);
1:2f3fd41:         setupRoleManager(roleManager);
1:2f3fd41:         RoleOptions opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.PASSWORD, "test");
1:2f3fd41:         assertInvalidOptions(opts, String.format("%s doesn't support PASSWORD", roleManager.getClass().getName()));
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     @Test
1:2f3fd41:     public void rejectSettingSameOptionMultipleTimes()
1:2f3fd41:     {
1:2f3fd41:         RoleOptions opts = new RoleOptions();
1:2f3fd41:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:2f3fd41:         try
1:2f3fd41:         {
1:2f3fd41:             opts.setOption(IRoleManager.Option.LOGIN, false);
1:2f3fd41:         }
1:2f3fd41:         catch (SyntaxException e)
1:2f3fd41:         {
1:2f3fd41:             assertEquals("Multiple definition for property 'LOGIN'", e.getMessage());
1:2f3fd41:         }
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     @Test
1:2f3fd41:     public void emptyByDefault()
1:2f3fd41:     {
1:2f3fd41:         RoleOptions opts = new RoleOptions();
1:2f3fd41:         assertTrue(opts.isEmpty());
1:2f3fd41:         assertFalse(opts.getLogin().isPresent());
1:2f3fd41: 
1:2f3fd41:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:2f3fd41:         assertFalse(opts.isEmpty());
1:2f3fd41:         assertTrue(opts.getLogin().isPresent());
1:2f3fd41:         assertTrue(opts.getLogin().get());
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     private void assertInvalidOptions(RoleOptions opts, String message)
1:2f3fd41:     {
1:2f3fd41:         try
1:2f3fd41:         {
1:2f3fd41:             opts.validate();
1:2f3fd41:             fail("Expected error but didn't get one");
1:2f3fd41:         }
1:2f3fd41:         catch (InvalidRequestException e)
1:2f3fd41:         {
1:2f3fd41:             assertTrue(e.getMessage().equals(message));
1:2f3fd41:         }
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     private void setupRoleManager(IRoleManager manager)
1:2f3fd41:     {
1:2f3fd41:         Field field = FBUtilities.getProtectedField(DatabaseDescriptor.class, "roleManager");
1:2f3fd41:         try
1:2f3fd41:         {
1:2f3fd41:             field.set(null, manager);
1:2f3fd41:         }
1:2f3fd41:         catch (IllegalAccessException e)
1:2f3fd41:         {
1:2f3fd41:             fail("Error setting IRoleManager instance for test");
1:2f3fd41:         }
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     private IRoleManager getRoleManager(final IRoleManager.Option...supportedOptions)
1:2f3fd41:     {
1:2f3fd41:         return new IRoleManager()
1:2f3fd41:         {
1:2f3fd41:             public Set<Option> supportedOptions()
1:2f3fd41:             {
1:2f3fd41:                 return ImmutableSet.copyOf(supportedOptions);
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public Set<Option> alterableOptions()
1:2f3fd41:             {
1:2f3fd41:                 return null;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void createRole(AuthenticatedUser performer,
1:2f3fd41:                                    RoleResource role,
1:2f3fd41:                                    RoleOptions options) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void dropRole(AuthenticatedUser performer,
1:2f3fd41:                                  RoleResource role) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void alterRole(AuthenticatedUser performer,
1:2f3fd41:                                   RoleResource role,
1:2f3fd41:                                   RoleOptions options) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void grantRole(AuthenticatedUser performer,
1:2f3fd41:                                   RoleResource role,
1:2f3fd41:                                   RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void revokeRole(AuthenticatedUser performer,
1:2f3fd41:                                    RoleResource role,
1:2f3fd41:                                    RoleResource revokee) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public Set<RoleResource> getRoles(RoleResource grantee,
1:2f3fd41:                                               boolean includeInherited) throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41:                 return null;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException
1:2f3fd41:             {
1:2f3fd41:                 return null;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public boolean isSuper(RoleResource role)
1:2f3fd41:             {
1:2f3fd41:                 return false;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public boolean canLogin(RoleResource role)
1:2f3fd41:             {
1:2f3fd41:                 return false;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public Map<String, String> getCustomOptions(RoleResource role)
1:2f3fd41:             {
1:2f3fd41:                 return Collections.EMPTY_MAP;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public boolean isExistingRole(RoleResource role)
1:2f3fd41:             {
1:2f3fd41:                 return false;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public Set<? extends IResource> protectedResources()
1:2f3fd41:             {
1:2f3fd41:                 return null;
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void validateConfiguration() throws ConfigurationException
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41: 
1:2f3fd41:             public void setup()
1:2f3fd41:             {
1:2f3fd41: 
1:2f3fd41:             }
1:2f3fd41:         };
1:2f3fd41:     }
1:2f3fd41: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:201004d
/////////////////////////////////////////////////////////////////////////
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.lang.reflect.Field;
1: import java.util.*;
1: 
1: import com.google.common.collect.ImmutableSet;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class RoleOptionsTest
1: {
1:     @Test
1:     public void validateValueTypes()
1:     {
1:         setupRoleManager(getRoleManager(IRoleManager.Option.values()));
1: 
1:         RoleOptions opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.LOGIN, "test");
1:         assertInvalidOptions(opts, "Invalid value for property 'LOGIN'. It must be a boolean");
1: 
1:         opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.PASSWORD, 99);
1:         assertInvalidOptions(opts, "Invalid value for property 'PASSWORD'. It must be a string");
1: 
1:         opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.SUPERUSER, new HashSet<>());
1:         assertInvalidOptions(opts, "Invalid value for property 'SUPERUSER'. It must be a boolean");
1: 
1:         opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.OPTIONS, false);
1:         assertInvalidOptions(opts, "Invalid value for property 'OPTIONS'. It must be a map");
1: 
1:         opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:         opts.setOption(IRoleManager.Option.SUPERUSER, false);
1:         opts.setOption(IRoleManager.Option.PASSWORD, "test");
1:         opts.setOption(IRoleManager.Option.OPTIONS, Collections.singletonMap("key", "value"));
1:         opts.validate();
1:     }
1: 
1:     @Test
1:     public void rejectUnsupportedOptions()
1:     {
1:         // Our hypothetical IRoleManager only supports the LOGIN option
1:         IRoleManager roleManager = getRoleManager(IRoleManager.Option.LOGIN);
1:         setupRoleManager(roleManager);
1:         RoleOptions opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.PASSWORD, "test");
1:         assertInvalidOptions(opts, String.format("%s doesn't support PASSWORD", roleManager.getClass().getName()));
1:     }
1: 
1:     @Test
1:     public void rejectSettingSameOptionMultipleTimes()
1:     {
1:         RoleOptions opts = new RoleOptions();
1:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:         try
1:         {
1:             opts.setOption(IRoleManager.Option.LOGIN, false);
1:         }
1:         catch (SyntaxException e)
1:         {
1:             assertEquals("Multiple definition for property 'LOGIN'", e.getMessage());
1:         }
1:     }
1: 
1:     @Test
1:     public void emptyByDefault()
1:     {
1:         RoleOptions opts = new RoleOptions();
1:         assertTrue(opts.isEmpty());
1:         assertFalse(opts.getLogin().isPresent());
1: 
1:         opts.setOption(IRoleManager.Option.LOGIN, true);
1:         assertFalse(opts.isEmpty());
1:         assertTrue(opts.getLogin().isPresent());
1:         assertTrue(opts.getLogin().get());
1:     }
1: 
1:     private void assertInvalidOptions(RoleOptions opts, String message)
1:     {
1:         try
1:         {
1:             opts.validate();
1:             fail("Expected error but didn't get one");
1:         }
1:         catch (InvalidRequestException e)
1:         {
1:             assertTrue(e.getMessage().equals(message));
1:         }
1:     }
1: 
1:     private void setupRoleManager(IRoleManager manager)
1:     {
1:         Field field = FBUtilities.getProtectedField(DatabaseDescriptor.class, "roleManager");
0:         field.setAccessible(true);
1:         try
1:         {
1:             field.set(null, manager);
1:         }
1:         catch (IllegalAccessException e)
1:         {
1:             fail("Error setting IRoleManager instance for test");
1:         }
1:     }
1: 
1:     private IRoleManager getRoleManager(final IRoleManager.Option...supportedOptions)
1:     {
1:         return new IRoleManager()
1:         {
1:             public Set<Option> supportedOptions()
1:             {
1:                 return ImmutableSet.copyOf(supportedOptions);
1:             }
1: 
1:             public Set<Option> alterableOptions()
1:             {
1:                 return null;
1:             }
1: 
1:             public void createRole(AuthenticatedUser performer,
1:                                    RoleResource role,
1:                                    RoleOptions options) throws RequestValidationException, RequestExecutionException
1:             {
1: 
1:             }
1: 
1:             public void dropRole(AuthenticatedUser performer,
1:                                  RoleResource role) throws RequestValidationException, RequestExecutionException
1:             {
1: 
1:             }
1: 
1:             public void alterRole(AuthenticatedUser performer,
1:                                   RoleResource role,
1:                                   RoleOptions options) throws RequestValidationException, RequestExecutionException
1:             {
1: 
1:             }
1: 
1:             public void grantRole(AuthenticatedUser performer,
1:                                   RoleResource role,
1:                                   RoleResource grantee) throws RequestValidationException, RequestExecutionException
1:             {
1: 
1:             }
1: 
1:             public void revokeRole(AuthenticatedUser performer,
1:                                    RoleResource role,
1:                                    RoleResource revokee) throws RequestValidationException, RequestExecutionException
1:             {
1: 
1:             }
1: 
1:             public Set<RoleResource> getRoles(RoleResource grantee,
1:                                               boolean includeInherited) throws RequestValidationException, RequestExecutionException
1:             {
1:                 return null;
1:             }
1: 
1:             public Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException
1:             {
1:                 return null;
1:             }
1: 
1:             public boolean isSuper(RoleResource role)
1:             {
1:                 return false;
1:             }
1: 
1:             public boolean canLogin(RoleResource role)
1:             {
1:                 return false;
1:             }
1: 
1:             public Map<String, String> getCustomOptions(RoleResource role)
1:             {
1:                 return Collections.EMPTY_MAP;
1:             }
1: 
1:             public boolean isExistingRole(RoleResource role)
1:             {
1:                 return false;
1:             }
1: 
1:             public Set<? extends IResource> protectedResources()
1:             {
1:                 return null;
1:             }
1: 
1:             public void validateConfiguration() throws ConfigurationException
1:             {
1: 
1:             }
1: 
1:             public void setup()
1:             {
1: 
1:             }
1:         };
1:     }
1: }
============================================================================