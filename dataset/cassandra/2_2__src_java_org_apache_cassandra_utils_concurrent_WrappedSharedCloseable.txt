1:207751c: /*
1:207751c: * Licensed to the Apache Software Foundation (ASF) under one
1:207751c: * or more contributor license agreements.  See the NOTICE file
1:207751c: * distributed with this work for additional information
1:207751c: * regarding copyright ownership.  The ASF licenses this file
1:207751c: * to you under the Apache License, Version 2.0 (the
1:207751c: * "License"); you may not use this file except in compliance
1:207751c: * with the License.  You may obtain a copy of the License at
1:207751c: *
1:207751c: *    http://www.apache.org/licenses/LICENSE-2.0
1:207751c: *
1:207751c: * Unless required by applicable law or agreed to in writing,
1:207751c: * software distributed under the License is distributed on an
1:207751c: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:207751c: * KIND, either express or implied.  See the License for the
1:207751c: * specific language governing permissions and limitations
1:207751c: * under the License.
1:207751c: */
1:207751c: package org.apache.cassandra.utils.concurrent;
1:f3c0e11: 
1:f3c0e11: import java.util.Arrays;
1:a7f4134: 
1:a7f4134: import static org.apache.cassandra.utils.Throwables.maybeFail;
1:a7f4134: import static org.apache.cassandra.utils.Throwables.merge;
1:a7f4134: 
1:207751c: /**
1:207751c:  * An implementation of SharedCloseable that wraps a normal AutoCloseable,
1:207751c:  * ensuring its close method is only called when all instances of SharedCloseable have been
1:207751c:  */
1:207751c: public abstract class WrappedSharedCloseable extends SharedCloseableImpl
4:207751c: {
1:f3c0e11:     final AutoCloseable[] wrapped;
3:207751c: 
1:207751c:     public WrappedSharedCloseable(final AutoCloseable closeable)
1:207751c:     {
1:1e92ce4:         this(new AutoCloseable[] {closeable});
1:f3c0e11:     }
1:f3c0e11: 
1:f3c0e11:     public WrappedSharedCloseable(final AutoCloseable[] closeable)
1:f3c0e11:     {
1:a7f4134:         super(new Tidy(closeable));
1:207751c:         wrapped = closeable;
3:207751c:     }
1:207751c: 
1:a7f4134:     static final class Tidy implements RefCounted.Tidy
1:a7f4134:     {
1:a7f4134:         final AutoCloseable[] closeable;
1:a7f4134:         Tidy(AutoCloseable[] closeable)
1:a7f4134:         {
1:a7f4134:             this.closeable = closeable;
1:a7f4134:         }
1:a7f4134: 
1:a7f4134:         public void tidy() throws Exception
1:a7f4134:         {
1:a7f4134:             Throwable fail = null;
1:a7f4134:             for (AutoCloseable c : closeable)
1:a7f4134:             {
1:a7f4134:                 try
1:a7f4134:                 {
1:a7f4134:                     c.close();
1:a7f4134:                 }
1:a7f4134:                 catch (Throwable t)
1:a7f4134:                 {
1:a7f4134:                     fail = merge(fail, t);
1:a7f4134:                 }
1:a7f4134:             }
1:a7f4134:             maybeFail(fail);
1:a7f4134:         }
1:a7f4134: 
1:a7f4134:         public String name()
1:a7f4134:     {
1:a7f4134:         return Arrays.toString(closeable);
1:a7f4134:     }
1:a7f4134:     }
1:a7f4134: 
1:207751c:     protected WrappedSharedCloseable(WrappedSharedCloseable copy)
1:207751c:     {
1:207751c:         super(copy);
1:207751c:         wrapped = copy.wrapped;
1:207751c:     }
1:207751c: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         this(new AutoCloseable[] {closeable});
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:a7f4134
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.Throwables;
1: 
1: import static org.apache.cassandra.utils.Throwables.maybeFail;
1: import static org.apache.cassandra.utils.Throwables.merge;
1: 
/////////////////////////////////////////////////////////////////////////
1:         super(new Tidy(closeable));
1:     static final class Tidy implements RefCounted.Tidy
1:     {
1:         final AutoCloseable[] closeable;
1:         Tidy(AutoCloseable[] closeable)
1:         {
1:             this.closeable = closeable;
1:         }
1: 
1:         public void tidy() throws Exception
1:         {
1:             Throwable fail = null;
1:             for (AutoCloseable c : closeable)
1:             {
1:                 try
1:                 {
1:                     c.close();
1:                 }
1:                 catch (Throwable t)
1:                 {
1:                     fail = merge(fail, t);
1:                 }
1:             }
1:             maybeFail(fail);
1:         }
1: 
1:         public String name()
1:     {
1:         return Arrays.toString(closeable);
1:     }
1:     }
1: 
commit:f3c0e11
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
1:     final AutoCloseable[] wrapped;
0:         this(new AutoCloseable[] { closeable});
1:     }
1: 
1:     public WrappedSharedCloseable(final AutoCloseable[] closeable)
1:     {
0:                 for (AutoCloseable c : closeable)
0:                     c.close();
0:                 return Arrays.toString(closeable);
commit:207751c
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: /**
1:  * An implementation of SharedCloseable that wraps a normal AutoCloseable,
1:  * ensuring its close method is only called when all instances of SharedCloseable have been
1:  */
1: public abstract class WrappedSharedCloseable extends SharedCloseableImpl
1: {
0:     final AutoCloseable wrapped;
1: 
1:     public WrappedSharedCloseable(final AutoCloseable closeable)
1:     {
0:         super(new RefCounted.Tidy()
1:         {
0:             public void tidy() throws Exception
1:             {
0:                 closeable.close();
1:             }
1: 
0:             public String name()
1:             {
0:                 return closeable.toString();
1:             }
0:         });
1:         wrapped = closeable;
1:     }
1: 
1:     protected WrappedSharedCloseable(WrappedSharedCloseable copy)
1:     {
1:         super(copy);
1:         wrapped = copy.wrapped;
1:     }
1: }
============================================================================