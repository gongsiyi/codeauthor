1:7650fc1: /*
1:cf9a581:  * Licensed to the Apache Software Foundation (ASF) under one
1:cf9a581:  * or more contributor license agreements.  See the NOTICE file
1:cf9a581:  * distributed with this work for additional information
1:cf9a581:  * regarding copyright ownership.  The ASF licenses this file
1:cf9a581:  * to you under the Apache License, Version 2.0 (the
1:cf9a581:  * "License"); you may not use this file except in compliance
1:cf9a581:  * with the License.  You may obtain a copy of the License at
1:cf9a581:  *
1:cf9a581:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cf9a581:  *
1:cf9a581:  * Unless required by applicable law or agreed to in writing, software
1:cf9a581:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cf9a581:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf9a581:  * See the License for the specific language governing permissions and
1:cf9a581:  * limitations under the License.
1:cf9a581:  */
1:f67b7a4: 
1:cf9a581: package org.apache.cassandra.locator;
1:f67b7a4: 
1:cf9a581: import java.net.InetAddress;
1:f67b7a4: import java.util.concurrent.atomic.AtomicReference;
1:1108ede: import java.util.Map;
1:f67b7a4: 
1:cf9a581: import org.slf4j.Logger;
1:cf9a581: import org.slf4j.LoggerFactory;
9:7eec23e: 
1:0e96e58: import org.apache.cassandra.db.SystemKeyspace;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:cf9a581: import org.apache.cassandra.gms.ApplicationState;
1:cf9a581: import org.apache.cassandra.gms.EndpointState;
1:cf9a581: import org.apache.cassandra.gms.Gossiper;
1:7eec23e: import org.apache.cassandra.service.StorageService;
1:f67b7a4: import org.apache.cassandra.utils.FBUtilities;
1:7eec23e: 
1:7eec23e: 
1:ded233e: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch// implements IEndpointStateChangeSubscriber
8:7eec23e: {
1:cf9a581:     private static final Logger logger = LoggerFactory.getLogger(GossipingPropertyFileSnitch.class);
1:f67b7a4: 
1:cf9a581:     private PropertyFileSnitch psnitch;
1:f67b7a4: 
1:7650fc1:     private final String myDC;
1:7650fc1:     private final String myRack;
1:7650fc1:     private final boolean preferLocal;
1:7650fc1:     private final AtomicReference<ReconnectableSnitchHelper> snitchHelperReference;
1:f67b7a4: 
1:f67b7a4:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:f67b7a4:     private static final String DEFAULT_DC = "UNKNOWN_DC";
1:f67b7a4:     private static final String DEFAULT_RACK = "UNKNOWN_RACK";
1:f67b7a4: 
1:cf9a581:     public GossipingPropertyFileSnitch() throws ConfigurationException
1:f67b7a4:     {
1:7650fc1:         SnitchProperties properties = loadConfiguration();
1:f67b7a4: 
1:7650fc1:         myDC = properties.get("dc", DEFAULT_DC).trim();
1:7650fc1:         myRack = properties.get("rack", DEFAULT_RACK).trim();
1:7650fc1:         preferLocal = Boolean.parseBoolean(properties.get("prefer_local", "false"));
1:7650fc1:         snitchHelperReference = new AtomicReference<>();
1:f67b7a4: 
1:f67b7a4:         try
1:f67b7a4:         {
1:cf9a581:             psnitch = new PropertyFileSnitch();
1:db9bc69:             logger.info("Loaded {} for compatibility", PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);
1:f67b7a4:         }
2:cf9a581:         catch (ConfigurationException e)
1:f67b7a4:         {
1:db9bc69:             logger.info("Unable to load {}; compatibility mode disabled", PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);
1:7650fc1:         }
1:f67b7a4:     }
1:f67b7a4: 
1:7650fc1:     private static SnitchProperties loadConfiguration() throws ConfigurationException
1:7650fc1:     {
1:7650fc1:         final SnitchProperties properties = new SnitchProperties();
1:7650fc1:         if (!properties.contains("dc") || !properties.contains("rack"))
1:7650fc1:             throw new ConfigurationException("DC or rack not found in snitch properties, check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);
1:7650fc1: 
1:7650fc1:         return properties;
1:f67b7a4:     }
1:f67b7a4: 
2:cf9a581:     /**
1:cf9a581:      * Return the data center for which an endpoint resides in
1:cf9a581:      *
1:cf9a581:      * @param endpoint the endpoint to process
1:cf9a581:      * @return string of data center
1:cf9a581:      */
1:cf9a581:     public String getDatacenter(InetAddress endpoint)
1:f67b7a4:     {
1:eb775fe:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:eb775fe:             return myDC;
1:f67b7a4: 
1:cf9a581:         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:cf9a581:         if (epState == null || epState.getApplicationState(ApplicationState.DC) == null)
1:f67b7a4:         {
1:cf9a581:             if (psnitch == null)
1:f67b7a4:             {
1:1108ede:                 if (savedEndpoints == null)
1:0e96e58:                     savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:1108ede:                 if (savedEndpoints.containsKey(endpoint))
1:1108ede:                     return savedEndpoints.get(endpoint).get("data_center");
1:2354d62:                 return DEFAULT_DC;
1:f67b7a4:             }
1:cf9a581:             else
1:cf9a581:                 return psnitch.getDatacenter(endpoint);
1:f67b7a4:         }
1:cf9a581:         return epState.getApplicationState(ApplicationState.DC).value;
1:f67b7a4:     }
1:f67b7a4: 
1:cf9a581:     /**
1:cf9a581:      * Return the rack for which an endpoint resides in
1:cf9a581:      *
1:cf9a581:      * @param endpoint the endpoint to process
1:cf9a581:      * @return string of rack
1:cf9a581:      */
1:cf9a581:     public String getRack(InetAddress endpoint)
1:f67b7a4:     {
1:eb775fe:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:eb775fe:             return myRack;
1:f67b7a4: 
1:cf9a581:         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:cf9a581:         if (epState == null || epState.getApplicationState(ApplicationState.RACK) == null)
1:7eec23e:         {
1:cf9a581:             if (psnitch == null)
1:7eec23e:             {
1:1108ede:                 if (savedEndpoints == null)
1:0e96e58:                     savedEndpoints = SystemKeyspace.loadDcRackInfo();
1:1108ede:                 if (savedEndpoints.containsKey(endpoint))
1:1108ede:                     return savedEndpoints.get(endpoint).get("rack");
1:2354d62:                 return DEFAULT_RACK;
7:7eec23e:             }
1:cf9a581:             else
1:cf9a581:                 return psnitch.getRack(endpoint);
1:7eec23e:         }
1:cf9a581:         return epState.getApplicationState(ApplicationState.RACK).value;
1:7eec23e:     }
1:f67b7a4: 
1:7eec23e:     public void gossiperStarting()
1:f67b7a4:     {
1:7eec23e:         super.gossiperStarting();
1:f67b7a4: 
1:7eec23e:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP,
1:f67b7a4:                 StorageService.instance.valueFactory.internalIP(FBUtilities.getLocalAddress().getHostAddress()));
1:f67b7a4: 
1:7650fc1:         loadGossiperState();
1:f67b7a4:     }
1:f67b7a4: 
1:7650fc1:     private void loadGossiperState()
1:f67b7a4:     {
1:7650fc1:         assert Gossiper.instance != null;
1:7650fc1: 
1:7650fc1:         ReconnectableSnitchHelper pendingHelper = new ReconnectableSnitchHelper(this, myDC, preferLocal);
1:7650fc1:         Gossiper.instance.register(pendingHelper);
1:7650fc1: 
1:7650fc1:         pendingHelper = snitchHelperReference.getAndSet(pendingHelper);
1:7650fc1:         if (pendingHelper != null)
1:7650fc1:             Gossiper.instance.unregister(pendingHelper);
1:f67b7a4:     }
1:7eec23e: }
============================================================================
author:Stefania
-------------------------------------------------------------------------------
commit:7650fc1
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final String myDC;
1:     private final String myRack;
1:     private final boolean preferLocal;
1:     private final AtomicReference<ReconnectableSnitchHelper> snitchHelperReference;
1:         SnitchProperties properties = loadConfiguration();
1:         myDC = properties.get("dc", DEFAULT_DC).trim();
1:         myRack = properties.get("rack", DEFAULT_RACK).trim();
1:         preferLocal = Boolean.parseBoolean(properties.get("prefer_local", "false"));
1:         snitchHelperReference = new AtomicReference<>();
/////////////////////////////////////////////////////////////////////////
1:     }
1:     private static SnitchProperties loadConfiguration() throws ConfigurationException
1:     {
1:         final SnitchProperties properties = new SnitchProperties();
1:         if (!properties.contains("dc") || !properties.contains("rack"))
1:             throw new ConfigurationException("DC or rack not found in snitch properties, check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);
1: 
1:         return properties;
/////////////////////////////////////////////////////////////////////////
1:         loadGossiperState();
1:     private void loadGossiperState()
1:         assert Gossiper.instance != null;
1: 
1:         ReconnectableSnitchHelper pendingHelper = new ReconnectableSnitchHelper(this, myDC, preferLocal);
1:         Gossiper.instance.register(pendingHelper);
1: 
1:         pendingHelper = snitchHelperReference.getAndSet(pendingHelper);
1:         if (pendingHelper != null)
1:             Gossiper.instance.unregister(pendingHelper);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:a2f0da0
commit:4b1d59e
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SystemKeyspace;
/////////////////////////////////////////////////////////////////////////
1:                     savedEndpoints = SystemKeyspace.loadDcRackInfo();
/////////////////////////////////////////////////////////////////////////
1:                     savedEndpoints = SystemKeyspace.loadDcRackInfo();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:89bccb6
/////////////////////////////////////////////////////////////////////////
0:         if (!newDc.equals(myDC) || !newRack.equals(myRack) || (preferLocal != newPreferLocal))
commit:db9bc69
/////////////////////////////////////////////////////////////////////////
1:             logger.info("Loaded {} for compatibility", PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);
1:             logger.info("Unable to load {}; compatibility mode disabled", PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);
commit:7dd87c1
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:f67b7a4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.ResourceWatcher;
0: import org.apache.cassandra.utils.WrappedRunnable;
/////////////////////////////////////////////////////////////////////////
0:     private volatile String myDC;
0:     private volatile String myRack;
0:     private volatile boolean preferLocal;
0:     private AtomicReference<ReconnectableSnitchHelper> snitchHelperReference;
0:     private volatile boolean gossipStarted;
1: 
1:     private Map<InetAddress, Map<String, String>> savedEndpoints;
1:     private static final String DEFAULT_DC = "UNKNOWN_DC";
1:     private static final String DEFAULT_RACK = "UNKNOWN_RACK";
1: 
0:     private static final int DEFAULT_REFRESH_PERIOD_IN_SECONDS = 60;
1:     
0:         this(DEFAULT_REFRESH_PERIOD_IN_SECONDS);
1:     }
0:     public GossipingPropertyFileSnitch(int refreshPeriodInSeconds) throws ConfigurationException
1:     {
0:         snitchHelperReference = new AtomicReference<ReconnectableSnitchHelper>();
1: 
0:         reloadConfiguration();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try
1:         {
0:             FBUtilities.resourceToFile(SnitchProperties.RACKDC_PROPERTY_FILENAME);
0:             Runnable runnable = new WrappedRunnable()
1:             {
0:                 protected void runMayThrow() throws ConfigurationException
1:                 {
0:                     reloadConfiguration();
1:                 }
0:             };
0:             ResourceWatcher.watch(SnitchProperties.RACKDC_PROPERTY_FILENAME, runnable, refreshPeriodInSeconds * 1000);
1:         }
0:         catch (ConfigurationException ex)
1:         {
0:             logger.error("{} found, but does not look like a plain file. Will not watch it for changes", SnitchProperties.RACKDC_PROPERTY_FILENAME);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:                 StorageService.instance.valueFactory.internalIP(FBUtilities.getLocalAddress().getHostAddress()));
1: 
0:         reloadGossiperState();
1: 
0:         gossipStarted = true;
1:     }
1:     
0:     private void reloadConfiguration() throws ConfigurationException
1:     {
0:         final SnitchProperties properties = new SnitchProperties();
1: 
0:         String newDc = properties.get("dc", null);
0:         String newRack = properties.get("rack", null);
0:         if (newDc == null || newRack == null)
0:             throw new ConfigurationException("DC or rack not found in snitch properties, check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);
1: 
0:         newDc = newDc.trim();
0:         newRack = newRack.trim();
0:         final boolean newPreferLocal = Boolean.parseBoolean(properties.get("prefer_local", "false"));
1: 
0:         if (myDC != newDc || myRack != newRack || (preferLocal != newPreferLocal))
1:         {
0:             myDC = newDc;
0:             myRack = newRack;
0:             preferLocal = newPreferLocal;
1: 
0:             reloadGossiperState();
1: 
0:             if (StorageService.instance != null)
0:                 StorageService.instance.getTokenMetadata().invalidateCachedRings();
1: 
0:             if (gossipStarted)
0:                 StorageService.instance.gossipSnitchInfo();
1:         }
1:     }
1: 
0:     private void reloadGossiperState()
1:     {
0:         if (Gossiper.instance != null)
1:         {
0:             ReconnectableSnitchHelper pendingHelper = new ReconnectableSnitchHelper(this, myDC, preferLocal);
0:             Gossiper.instance.register(pendingHelper);
1:             
0:             pendingHelper = snitchHelperReference.getAndSet(pendingHelper);
0:             if (pendingHelper != null)
0:                 Gossiper.instance.unregister(pendingHelper);
1:         }
0:         // else this will eventually rerun at gossiperStarting()
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ded233e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch// implements IEndpointStateChangeSubscriber
/////////////////////////////////////////////////////////////////////////
0:     private final boolean preferLocal;
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.register(new ReconnectableSnitchHelper(this, myDC, preferLocal));
commit:e75e33f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch// implements IEndpointStateChangeSubscriber
/////////////////////////////////////////////////////////////////////////
0:     private final boolean preferLocal;
/////////////////////////////////////////////////////////////////////////
0:         Gossiper.instance.register(new ReconnectableSnitchHelper(this, myDC, preferLocal));
commit:ec14be9
/////////////////////////////////////////////////////////////////////////
0:             logger.info("Loaded " + PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME + " for compatibility");
0:             logger.info("Unable to load " + PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME + "; compatibility mode disabled");
author:Brandon Williams
-------------------------------------------------------------------------------
commit:7eec23e
/////////////////////////////////////////////////////////////////////////
0: import java.net.UnknownHostException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.gms.IEndpointStateChangeSubscriber;
0: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.service.StorageService;
1: 
0: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch implements IEndpointStateChangeSubscriber
/////////////////////////////////////////////////////////////////////////
0:     private boolean preferLocal;
/////////////////////////////////////////////////////////////////////////
0:         preferLocal = Boolean.parseBoolean(SnitchProperties.get("prefer_local", "false"));
/////////////////////////////////////////////////////////////////////////
1: 
0:     // IEndpointStateChangeSubscriber methods
1: 
0:     public void onJoin(InetAddress endpoint, EndpointState epState)
1:     {
0:         if (preferLocal && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
1:     }
1: 
0:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
1:     {
0:         if (preferLocal && state == ApplicationState.INTERNAL_IP)
0:             reConnect(endpoint, value);
1:     }
1: 
0:     public void onAlive(InetAddress endpoint, EndpointState state)
1:     {
0:         if (preferLocal && state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
1:     }
1: 
0:     public void onDead(InetAddress endpoint, EndpointState state)
1:     {
0:         // do nothing
1:     }
1: 
0:     public void onRestart(InetAddress endpoint, EndpointState state)
1:     {
0:         // do nothing
1:     }
1: 
0:     public void onRemove(InetAddress endpoint)
1:     {
0:         // do nothing.
1:     }
1: 
0:     private void reConnect(InetAddress endpoint, VersionedValue versionedValue)
1:     {
0:         if (!getDatacenter(endpoint).equals(myDC))
0:             return; // do nothing return back...
1: 
0:         try
1:         {
0:             InetAddress remoteIP = InetAddress.getByName(versionedValue.value);
0:             MessagingService.instance().getConnectionPool(endpoint).reset(remoteIP);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the endpoint %s", remoteIP, endpoint));
1:         }
0:         catch (UnknownHostException e)
1:         {
0:             logger.error("Error in getting the IP address resolved", e);
1:         }
1:     }
1: 
0:     @Override
1:     public void gossiperStarting()
1:     {
1:         super.gossiperStarting();
1:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP,
0:                                                    StorageService.instance.valueFactory.internalIP(FBUtilities.getLocalAddress().getHostAddress()));
0:         Gossiper.instance.register(this);
1:     }
commit:4ef8a8a
/////////////////////////////////////////////////////////////////////////
0: import java.net.UnknownHostException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.gms.IEndpointStateChangeSubscriber;
0: import org.apache.cassandra.gms.VersionedValue;
0: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.service.StorageService;
0: 
0: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch implements IEndpointStateChangeSubscriber
/////////////////////////////////////////////////////////////////////////
0:     private boolean preferLocal;
/////////////////////////////////////////////////////////////////////////
0:         preferLocal = Boolean.parseBoolean(SnitchProperties.get("prefer_local", "false"));
/////////////////////////////////////////////////////////////////////////
0: 
0:     // IEndpointStateChangeSubscriber methods
0: 
0:     public void onJoin(InetAddress endpoint, EndpointState epState)
0:     {
0:         if (preferLocal && epState.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, epState.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)
0:     {
0:         if (preferLocal && state == ApplicationState.INTERNAL_IP)
0:             reConnect(endpoint, value);
0:     }
0: 
0:     public void onAlive(InetAddress endpoint, EndpointState state)
0:     {
0:         if (preferLocal && state.getApplicationState(ApplicationState.INTERNAL_IP) != null)
0:             reConnect(endpoint, state.getApplicationState(ApplicationState.INTERNAL_IP));
0:     }
0: 
0:     public void onDead(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing
0:     }
0: 
0:     public void onRestart(InetAddress endpoint, EndpointState state)
0:     {
0:         // do nothing
0:     }
0: 
0:     public void onRemove(InetAddress endpoint)
0:     {
0:         // do nothing.
0:     }
0: 
0:     private void reConnect(InetAddress endpoint, VersionedValue versionedValue)
0:     {
0:         if (!getDatacenter(endpoint).equals(myDC))
0:             return; // do nothing return back...
0: 
0:         try
0:         {
0:             InetAddress remoteIP = InetAddress.getByName(versionedValue.value);
0:             MessagingService.instance().getConnectionPool(endpoint).reset(remoteIP);
0:             logger.debug(String.format("Intiated reconnect to an Internal IP %s for the endpoint %s", remoteIP, endpoint));
0:         }
0:         catch (UnknownHostException e)
0:         {
0:             logger.error("Error in getting the IP address resolved", e);
0:         }
0:     }
0: 
0:     @Override
0:     public void gossiperStarting()
0:     {
0:         super.gossiperStarting();
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP,
0:                                                    StorageService.instance.valueFactory.internalIP(FBUtilities.getLocalAddress().getHostAddress()));
0:         Gossiper.instance.register(this);
0:     }
commit:6206d8a
/////////////////////////////////////////////////////////////////////////
0:             throw new ConfigurationException("DC or rack not found in snitch properties, check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);
commit:551da4c
/////////////////////////////////////////////////////////////////////////
0:         myDC = myDC.trim();
0:         myRack = myRack.trim();
commit:2354d62
/////////////////////////////////////////////////////////////////////////
0:     private String DEFAULT_DC = "UNKNOWN_DC";
0:     private String DEFAULT_RACK = "UNKNOWN_RACK";
/////////////////////////////////////////////////////////////////////////
1:                 return DEFAULT_DC;
/////////////////////////////////////////////////////////////////////////
1:                 return DEFAULT_RACK;
commit:1108ede
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
0: import org.apache.cassandra.db.SystemTable;
/////////////////////////////////////////////////////////////////////////
0:     private Map<InetAddress, Map<String, String>> savedEndpoints;
/////////////////////////////////////////////////////////////////////////
0:             {
1:                 if (savedEndpoints == null)
0:                     savedEndpoints = SystemTable.loadDcRackInfo();
1:                 if (savedEndpoints.containsKey(endpoint))
1:                     return savedEndpoints.get(endpoint).get("data_center");
0:             }
/////////////////////////////////////////////////////////////////////////
0:             {
1:                 if (savedEndpoints == null)
0:                     savedEndpoints = SystemTable.loadDcRackInfo();
1:                 if (savedEndpoints.containsKey(endpoint))
1:                     return savedEndpoints.get(endpoint).get("rack");
0:             }
commit:cf9a581
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.locator;
0: 
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.gms.ApplicationState;
1: import org.apache.cassandra.gms.EndpointState;
1: import org.apache.cassandra.gms.Gossiper;
0: import org.apache.cassandra.io.util.FileUtils;
0: import org.apache.cassandra.service.StorageService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
0: import java.io.InputStream;
1: import java.net.InetAddress;
0: import java.util.Map;
0: import java.util.Properties;
0: 
0: public class GossipingPropertyFileSnitch extends AbstractNetworkTopologySnitch
0: {
1:     private static final Logger logger = LoggerFactory.getLogger(GossipingPropertyFileSnitch.class);
0: 
0:     public static final String RACKDC_PROPERTY_FILENAME = "cassandra-rackdc.properties";
1:     private PropertyFileSnitch psnitch;
0:     private String myDC;
0:     private String myRack;
0: 
1:     public GossipingPropertyFileSnitch() throws ConfigurationException
0:     {
0:         try
0:         {
0:             loadConfiguration();
0:         }
1:         catch (ConfigurationException e)
0:         {
0:             throw new RuntimeException("Unable to load " + RACKDC_PROPERTY_FILENAME + " : ", e);
0:         }
0:         try
0:         {
1:             psnitch = new PropertyFileSnitch();
0:             logger.info("Loaded " + PropertyFileSnitch.RACK_PROPERTY_FILENAME + " for compatibility");
0:         }
1:         catch (ConfigurationException e)
0:         {
0:             logger.info("Unable to load " + PropertyFileSnitch.RACK_PROPERTY_FILENAME + "; compatibility mode disabled");
0:         }
0:     }
0: 
0:     private void loadConfiguration() throws ConfigurationException
0:     {
0:         InputStream stream = GossipingPropertyFileSnitch.class.getClassLoader().getResourceAsStream(RACKDC_PROPERTY_FILENAME);
0:         Properties properties = new Properties();
0:         try
0:         {
0:             properties.load(stream);
0:         }
0:         catch (Exception e)
0:         {
0:             throw new ConfigurationException("Unable to read " + RACKDC_PROPERTY_FILENAME, e);
0:         }
0:         finally
0:         {
0:             FileUtils.closeQuietly(stream);
0:         }
0:         for (Map.Entry<Object, Object> entry : properties.entrySet())
0:         {
0:             String key = (String) entry.getKey();
0:             String value = (String) entry.getValue();
0:             if (key.equals("dc"))
0:                 myDC = value;
0:             else if (key.equals("rack"))
0:                 myRack = value;
0:         }
0:         if (myDC == null || myRack == null)
0:             throw new ConfigurationException("DC or rack not found in " + RACKDC_PROPERTY_FILENAME);
0:     }
0: 
1:     /**
1:      * Return the data center for which an endpoint resides in
1:      *
1:      * @param endpoint the endpoint to process
1:      * @return string of data center
1:      */
1:     public String getDatacenter(InetAddress endpoint)
0:     {
1:         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:         if (epState == null || epState.getApplicationState(ApplicationState.DC) == null)
0:         {
1:             if (psnitch == null)
0:                 throw new RuntimeException("Could not retrieve DC for " + endpoint + " from gossip and PFS compatibility is disabled");
1:             else
1:                 return psnitch.getDatacenter(endpoint);
0:         }
1:         return epState.getApplicationState(ApplicationState.DC).value;
0:     }
0: 
1:     /**
1:      * Return the rack for which an endpoint resides in
1:      *
1:      * @param endpoint the endpoint to process
1:      * @return string of rack
1:      */
1:     public String getRack(InetAddress endpoint)
0:     {
1:         EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);
1:         if (epState == null || epState.getApplicationState(ApplicationState.RACK) == null)
0:         {
1:             if (psnitch == null)
0:                 throw new RuntimeException("Could not retrieve rack for " + endpoint + " from gossip and PFS compatibility is disabled");
1:             else
1:                 return psnitch.getRack(endpoint);
0:         }
1:         return epState.getApplicationState(ApplicationState.RACK).value;
0:     }
0: 
0:     @Override
0:     public void gossiperStarting()
0:     {
0:         // Share info via gossip.
0:         logger.info("Adding ApplicationState DC=" + myDC + " rack=" + myRack);
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.DC, StorageService.instance.valueFactory.datacenter(myDC));
0:         Gossiper.instance.addLocalApplicationState(ApplicationState.RACK, StorageService.instance.valueFactory.rack(myRack));
0:     }
0: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:fa1f9ba
commit:082ea28
/////////////////////////////////////////////////////////////////////////
0:             throw new ConfigurationException("DC or rack not found in snitch properties, Plz check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);
commit:9939458
/////////////////////////////////////////////////////////////////////////
0:         myDC = SnitchProperties.get("dc", null);
0:         myRack = SnitchProperties.get("rack", null);
0:         if (myDC == null || myRack == null)
0:             throw new ConfigurationException("DC or rack not found in snitch properties");
/////////////////////////////////////////////////////////////////////////
commit:e90dcd5
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0:         myDC = SnitchProperties.get("dc", null);
0:         myRack = SnitchProperties.get("rack", null);
0:         if (myDC == null || myRack == null)
0:             throw new ConfigurationException("DC or rack not found in snitch properties");
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:eb775fe
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return myDC;
0: 
/////////////////////////////////////////////////////////////////////////
1:         if (endpoint.equals(FBUtilities.getBroadcastAddress()))
1:             return myRack;
0: 
/////////////////////////////////////////////////////////////////////////
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
============================================================================