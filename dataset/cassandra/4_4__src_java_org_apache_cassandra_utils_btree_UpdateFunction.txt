1:9f14856: /*
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  */
1:4b54b8a: package org.apache.cassandra.utils.btree;
4:5f82aa3: 
1:e51f83b: import java.util.function.BiFunction;
1:e51f83b: 
1:4b54b8a: import com.google.common.base.Function;
1:4b54b8a: /**
1:4b54b8a:  * An interface defining a function to be applied to both the object we are replacing in a BTree and
1:4b54b8a:  * the object that is intended to replace it, returning the object to actually replace it.
1:4b54b8a:  */
1:a991b64: public interface UpdateFunction<K, V> extends Function<K, V>
2:5250d7f: {
1:4b54b8a:     /**
1:4b54b8a:      * @param replacing the value in the original tree we have matched
1:4b54b8a:      * @param update the value in the updating collection that matched
1:4b54b8a:      * @return the value to insert into the new tree
1:4b54b8a:      */
1:a991b64:     V apply(V replacing, K update);
1:371507a: 
1:4b54b8a:     /**
1:4b54b8a:      * @return true if we should fail the update
1:4b54b8a:      */
1:4b54b8a:     boolean abortEarly();
1:5f82aa3: 
1:4b54b8a:     /**
1:4b54b8a:      * @param heapSize extra heap space allocated (over previous tree)
1:4b54b8a:      */
1:4b54b8a:     void allocated(long heapSize);
1:5f82aa3: 
1:e51f83b:     public static final class Simple<V> implements UpdateFunction<V, V>
1:5250d7f:     {
1:e51f83b:         private final BiFunction<V, V, V> wrapped;
1:e51f83b:         public Simple(BiFunction<V, V, V> wrapped)
1:5250d7f:         {
1:e51f83b:             this.wrapped = wrapped;
2:5250d7f:         }
1:5250d7f: 
1:e51f83b:         public V apply(V v) { return v; }
1:e51f83b:         public V apply(V replacing, V update) { return wrapped.apply(replacing, update); }
1:e51f83b:         public boolean abortEarly() { return false; }
1:e51f83b:         public void allocated(long heapSize) { }
1:5250d7f: 
1:e51f83b:         public static <V> Simple<V> of(BiFunction<V, V, V> f)
1:5250d7f:         {
1:e51f83b:             return new Simple<>(f);
1:e51f83b:         }
1:5250d7f:     }
1:5250d7f: 
1:e51f83b:     static final Simple<Object> noOp = Simple.of((a, b) -> a);
1:5250d7f: 
1:5250d7f:     public static <K> UpdateFunction<K, K> noOp()
1:5250d7f:     {
1:5250d7f:         return (UpdateFunction<K, K>) noOp;
1:5250d7f:     }
1:5250d7f: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1: import java.util.function.BiFunction;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final class Simple<V> implements UpdateFunction<V, V>
1:         private final BiFunction<V, V, V> wrapped;
1:         public Simple(BiFunction<V, V, V> wrapped)
1:             this.wrapped = wrapped;
1:         public V apply(V v) { return v; }
1:         public V apply(V replacing, V update) { return wrapped.apply(replacing, update); }
1:         public boolean abortEarly() { return false; }
1:         public void allocated(long heapSize) { }
1:         public static <V> Simple<V> of(BiFunction<V, V, V> f)
1:             return new Simple<>(f);
1:     }
1:     static final Simple<Object> noOp = Simple.of((a, b) -> a);
commit:5250d7f
/////////////////////////////////////////////////////////////////////////
0:     static final UpdateFunction<Object, Object> noOp = new UpdateFunction<Object, Object>()
1:     {
0:         public Object apply(Object replacing, Object updating)
1:         {
0:             return updating;
1:         }
1: 
0:         public boolean abortEarly()
1:         {
0:             return false;
1:         }
1: 
0:         public void allocated(long heapSize)
1:         {
1:         }
1: 
0:         public Object apply(Object k)
1:         {
0:             return k;
1:         }
0:     };
1: 
1:     public static <K> UpdateFunction<K, K> noOp()
1:     {
1:         return (UpdateFunction<K, K>) noOp;
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: public interface UpdateFunction<K, V> extends Function<K, V>
1:     V apply(V replacing, K update);
/////////////////////////////////////////////////////////////////////////
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Dave Brosius
-------------------------------------------------------------------------------
commit:371507a
/////////////////////////////////////////////////////////////////////////
1:         
0:         private NoOp()
0:         {
0:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:0cb1e3d
/////////////////////////////////////////////////////////////////////////
commit:5f82aa3
/////////////////////////////////////////////////////////////////////////
0:     public static final class NoOp<V> implements UpdateFunction<V>
0:     {
1: 
0:         private static final NoOp INSTANCE = new NoOp();
0:         public static <V> NoOp<V> instance()
0:         {
0:             return INSTANCE;
0:         }
1: 
0:         public V apply(V replacing, V update)
0:         {
0:             return update;
0:         }
1: 
0:         public V apply(V update)
0:         {
0:             return update;
0:         }
1: 
0:         public boolean abortEarly()
0:         {
0:             return false;
0:         }
1: 
0:         public void allocated(long heapSize)
0:         {
0:         }
0:     }
1: 
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.utils.btree;
0: 
1: import com.google.common.base.Function;
0: 
1: /**
1:  * An interface defining a function to be applied to both the object we are replacing in a BTree and
1:  * the object that is intended to replace it, returning the object to actually replace it.
0:  *
0:  * @param <V>
1:  */
0: public interface UpdateFunction<V> extends Function<V, V>
0: {
1:     /**
1:      * @param replacing the value in the original tree we have matched
1:      * @param update the value in the updating collection that matched
1:      * @return the value to insert into the new tree
1:      */
0:     V apply(V replacing, V update);
0: 
1:     /**
1:      * @return true if we should fail the update
1:      */
1:     boolean abortEarly();
0: 
1:     /**
1:      * @param heapSize extra heap space allocated (over previous tree)
1:      */
1:     void allocated(long heapSize);
0: 
0: }
============================================================================