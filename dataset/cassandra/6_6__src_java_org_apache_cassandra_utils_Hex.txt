1:07cf56f: /*
1:56492f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:56492f5:  * or more contributor license agreements.  See the NOTICE file
1:56492f5:  * distributed with this work for additional information
1:56492f5:  * regarding copyright ownership.  The ASF licenses this file
1:56492f5:  * to you under the Apache License, Version 2.0 (the
1:56492f5:  * "License"); you may not use this file except in compliance
1:56492f5:  * with the License.  You may obtain a copy of the License at
1:56492f5:  *
1:56492f5:  *     http://www.apache.org/licenses/LICENSE-2.0
1:56492f5:  *
1:56492f5:  * Unless required by applicable law or agreed to in writing, software
1:56492f5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56492f5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56492f5:  * See the License for the specific language governing permissions and
1:56492f5:  * limitations under the License.
1:56492f5:  */
1:56492f5: package org.apache.cassandra.utils;
1:2fd3268: 
1:56492f5: import java.lang.reflect.Constructor;
1:7a3e697: import java.lang.reflect.InvocationTargetException;
1:7a3e697: 
1:7a3e697: import org.slf4j.Logger;
1:7a3e697: import org.slf4j.LoggerFactory;
9:56492f5: 
1:56492f5: public class Hex
1:56492f5: {
1:56492f5:     private static final Constructor<String> stringConstructor = getProtectedConstructor(String.class, int.class, int.class, char[].class);
1:56492f5:     private final static byte[] charToByte = new byte[256];
1:7a3e697:     private static final Logger logger = LoggerFactory.getLogger(Hex.class);
1:07cdfd0: 
1:56492f5:     // package protected for use by ByteBufferUtil. Do not modify this array !!
1:56492f5:     static final char[] byteToChar = new char[16];
1:56492f5:     static
1:56492f5:     {
1:56492f5:         for (char c = 0; c < charToByte.length; ++c)
1:56492f5:         {
1:56492f5:             if (c >= '0' && c <= '9')
1:56492f5:                 charToByte[c] = (byte)(c - '0');
1:56492f5:             else if (c >= 'A' && c <= 'F')
1:56492f5:                 charToByte[c] = (byte)(c - 'A' + 10);
1:56492f5:             else if (c >= 'a' && c <= 'f')
1:56492f5:                 charToByte[c] = (byte)(c - 'a' + 10);
1:56492f5:             else
1:56492f5:                 charToByte[c] = (byte)-1;
1:7a3e697:         }
1:2fd3268: 
1:56492f5:         for (int i = 0; i < 16; ++i)
1:56492f5:         {
1:56492f5:             byteToChar[i] = Integer.toHexString(i).charAt(0);
2:56492f5:         }
1:56492f5:     }
1:07cdfd0: 
1:56492f5:     public static byte[] hexToBytes(String str)
1:56492f5:     {
1:56492f5:         if (str.length() % 2 == 1)
1:3eefbac:             throw new NumberFormatException("An hex string representing bytes must have an even length");
1:2fd3268: 
1:56492f5:         byte[] bytes = new byte[str.length() / 2];
2:56492f5:         for (int i = 0; i < bytes.length; i++)
1:56492f5:         {
1:56492f5:             byte halfByte1 = charToByte[str.charAt(i * 2)];
1:56492f5:             byte halfByte2 = charToByte[str.charAt(i * 2 + 1)];
1:56492f5:             if (halfByte1 == -1 || halfByte2 == -1)
1:56492f5:                 throw new NumberFormatException("Non-hex characters in " + str);
1:56492f5:             bytes[i] = (byte)((halfByte1 << 4) | halfByte2);
1:56492f5:         }
1:56492f5:         return bytes;
1:56492f5:     }
1:2fd3268: 
1:56492f5:     public static String bytesToHex(byte... bytes)
1:56492f5:     {
1:1db386e:         return bytesToHex(bytes, 0, bytes.length);
1:1db386e:     }
1:1db386e: 
1:1db386e:     public static String bytesToHex(byte bytes[], int offset, int length)
1:1db386e:     {
1:1db386e:         char[] c = new char[length * 2];
1:1db386e:         for (int i = 0; i < length; i++)
1:56492f5:         {
1:1db386e:             int bint = bytes[i + offset];
1:56492f5:             c[i * 2] = byteToChar[(bint & 0xf0) >> 4];
1:56492f5:             c[1 + i * 2] = byteToChar[bint & 0x0f];
1:56492f5:         }
1:3eefbac: 
1:56492f5:         return wrapCharArray(c);
1:56492f5:     }
1:07cdfd0: 
2:56492f5:     /**
1:56492f5:      * Create a String from a char array with zero-copy (if available), using reflection to access a package-protected constructor of String.
1:56492f5:      * */
1:56492f5:     public static String wrapCharArray(char[] c)
1:56492f5:     {
1:56492f5:         if (c == null)
1:56492f5:             return null;
1:56492f5: 
1:56492f5:         String s = null;
1:56492f5: 
1:56492f5:         if (stringConstructor != null)
1:56492f5:         {
1:56492f5:             try
1:56492f5:             {
1:56492f5:                 s = stringConstructor.newInstance(0, c.length, c);
1:1db386e:             }
1:68d2526:             catch (InvocationTargetException ite)
1:68d2526:             {
1:7a3e697:                 // The underlying constructor failed. Unwrapping the exception.
1:7a3e697:                 Throwable cause = ite.getCause();
1:7a3e697:                 logger.error("Underlying string constructor threw an error: {}",
1:7a3e697:                     cause == null ? ite.getMessage() : cause.getMessage());
1:56492f5:             }
1:56492f5:             catch (Exception e)
1:56492f5:             {
1:f25da97:                 JVMStabilityInspector.inspectThrowable(e);
1:56492f5:                 // Swallowing as we'll just use a copying constructor
1:56492f5:             }
1:56492f5:         }
1:56492f5:         return s == null ? new String(c) : s;
1:56492f5:     }
1:07cdfd0: 
1:56492f5:     /**
1:56492f5:      * Used to get access to protected/private constructor of the specified class
1:56492f5:      * @param klass - name of the class
1:56492f5:      * @param paramTypes - types of the constructor parameters
1:56492f5:      * @return Constructor if successful, null if the constructor cannot be
1:56492f5:      * accessed
1:56492f5:      */
1:e4e6e90:     public static <T> Constructor<T> getProtectedConstructor(Class<T> klass, Class<?>... paramTypes)
1:56492f5:     {
1:e4e6e90:         Constructor<T> c;
1:56492f5:         try
1:56492f5:         {
1:56492f5:             c = klass.getDeclaredConstructor(paramTypes);
1:56492f5:             c.setAccessible(true);
1:56492f5:             return c;
1:56492f5:         }
1:56492f5:         catch (Exception e)
1:56492f5:         {
1:56492f5:             return null;
1:56492f5:         }
1:56492f5:     }
1:56492f5: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:             catch (InvocationTargetException ite)
1:             {
commit:e4e6e90
/////////////////////////////////////////////////////////////////////////
1:     public static <T> Constructor<T> getProtectedConstructor(Class<T> klass, Class<?>... paramTypes)
1:         Constructor<T> c;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:1db386e
/////////////////////////////////////////////////////////////////////////
1:         return bytesToHex(bytes, 0, bytes.length);
1:     }
1: 
1:     public static String bytesToHex(byte bytes[], int offset, int length)
1:     {
1:         char[] c = new char[length * 2];
1:         for (int i = 0; i < length; i++)
1:             int bint = bytes[i + offset];
/////////////////////////////////////////////////////////////////////////
1:             }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:0705e8a
commit:f25da97
/////////////////////////////////////////////////////////////////////////
1:                 JVMStabilityInspector.inspectThrowable(e);
author:Ding Yuan
-------------------------------------------------------------------------------
commit:7a3e697
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.InvocationTargetException;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger logger = LoggerFactory.getLogger(Hex.class);
/////////////////////////////////////////////////////////////////////////
1:             } 
0:             catch (InvocationTargetException ite) {
1:                 // The underlying constructor failed. Unwrapping the exception.
1:                 Throwable cause = ite.getCause();
1:                 logger.error("Underlying string constructor threw an error: {}",
1:                     cause == null ? ite.getMessage() : cause.getMessage());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
commit:3eefbac
/////////////////////////////////////////////////////////////////////////
1:             throw new NumberFormatException("An hex string representing bytes must have an even length");
1: 
author:Eric Evans
-------------------------------------------------------------------------------
commit:56492f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.lang.reflect.Constructor;
1: 
1: public class Hex
1: {
1:     private static final Constructor<String> stringConstructor = getProtectedConstructor(String.class, int.class, int.class, char[].class);
1:     private final static byte[] charToByte = new byte[256];
1:     
1:     // package protected for use by ByteBufferUtil. Do not modify this array !!
1:     static final char[] byteToChar = new char[16];
1:     static
1:     {
1:         for (char c = 0; c < charToByte.length; ++c)
1:         {
1:             if (c >= '0' && c <= '9')
1:                 charToByte[c] = (byte)(c - '0');
1:             else if (c >= 'A' && c <= 'F')
1:                 charToByte[c] = (byte)(c - 'A' + 10);
1:             else if (c >= 'a' && c <= 'f')
1:                 charToByte[c] = (byte)(c - 'a' + 10);
1:             else
1:                 charToByte[c] = (byte)-1;
1:         }
1: 
1:         for (int i = 0; i < 16; ++i)
1:         {
1:             byteToChar[i] = Integer.toHexString(i).charAt(0);
1:         }
1:     }
1:     
1:     public static byte[] hexToBytes(String str)
1:     {
1:         if (str.length() % 2 == 1)
0:             str = "0" + str;
1:         byte[] bytes = new byte[str.length() / 2];
1:         for (int i = 0; i < bytes.length; i++)
1:         {
1:             byte halfByte1 = charToByte[str.charAt(i * 2)];
1:             byte halfByte2 = charToByte[str.charAt(i * 2 + 1)];
1:             if (halfByte1 == -1 || halfByte2 == -1)
1:                 throw new NumberFormatException("Non-hex characters in " + str);
1:             bytes[i] = (byte)((halfByte1 << 4) | halfByte2);
1:         }
1:         return bytes;
1:     }
1: 
1:     public static String bytesToHex(byte... bytes)
1:     {
0:         char[] c = new char[bytes.length * 2];
1:         for (int i = 0; i < bytes.length; i++)
1:         {
0:             int bint = bytes[i];
1:             c[i * 2] = byteToChar[(bint & 0xf0) >> 4];
1:             c[1 + i * 2] = byteToChar[bint & 0x0f];
1:         }
1: 
1:         return wrapCharArray(c);
1:     }
1:     
1:     /**
1:      * Create a String from a char array with zero-copy (if available), using reflection to access a package-protected constructor of String.
1:      * */
1:     public static String wrapCharArray(char[] c)
1:     {
1:         if (c == null)
1:             return null;
1: 
1:         String s = null;
1: 
1:         if (stringConstructor != null)
1:         {
1:             try
1:             {
1:                 s = stringConstructor.newInstance(0, c.length, c);
1:             }
1:             catch (Exception e)
1:             {
1:                 // Swallowing as we'll just use a copying constructor
1:             }
1:         }
1:         return s == null ? new String(c) : s;
1:     }
1:     
1:     /**
1:      * Used to get access to protected/private constructor of the specified class
1:      * @param klass - name of the class
1:      * @param paramTypes - types of the constructor parameters
1:      * @return Constructor if successful, null if the constructor cannot be
1:      * accessed
1:      */
0:     public static Constructor getProtectedConstructor(Class klass, Class... paramTypes)
1:     {
0:         Constructor c;
1:         try
1:         {
1:             c = klass.getDeclaredConstructor(paramTypes);
1:             c.setAccessible(true);
1:             return c;
1:         }
1:         catch (Exception e)
1:         {
1:             return null;
1:         }
1:     }
1: }
============================================================================