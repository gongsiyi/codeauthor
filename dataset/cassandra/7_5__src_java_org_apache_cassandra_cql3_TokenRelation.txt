1:65a7088: /*
1:65a7088:  * Licensed to the Apache Software Foundation (ASF) under one
1:65a7088:  * or more contributor license agreements.  See the NOTICE file
1:65a7088:  * distributed with this work for additional information
1:65a7088:  * regarding copyright ownership.  The ASF licenses this file
1:65a7088:  * to you under the Apache License, Version 2.0 (the
1:65a7088:  * "License"); you may not use this file except in compliance
1:65a7088:  * with the License.  You may obtain a copy of the License at
1:65a7088:  *
1:65a7088:  *     http://www.apache.org/licenses/LICENSE-2.0
1:65a7088:  *
1:65a7088:  * Unless required by applicable law or agreed to in writing, software
1:65a7088:  * distributed under the License is distributed on an "AS IS" BASIS,
1:65a7088:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:65a7088:  * See the License for the specific language governing permissions and
1:65a7088:  * limitations under the License.
1:65a7088:  */
1:65a7088: package org.apache.cassandra.cql3;
1:65a7088: 
1:65a7088: import java.util.ArrayList;
1:65a7088: import java.util.Collections;
1:65a7088: import java.util.List;
1:5a4253b: import java.util.stream.Collectors;
1:65a7088: 
1:65a7088: import com.google.common.base.Joiner;
1:65a7088: 
1:65a7088: import org.apache.cassandra.config.CFMetaData;
1:65a7088: import org.apache.cassandra.config.ColumnDefinition;
1:65a7088: import org.apache.cassandra.cql3.Term.Raw;
1:65a7088: import org.apache.cassandra.cql3.restrictions.Restriction;
1:65a7088: import org.apache.cassandra.cql3.restrictions.TokenRestriction;
1:65a7088: import org.apache.cassandra.cql3.statements.Bound;
1:65a7088: import org.apache.cassandra.exceptions.InvalidRequestException;
1:65a7088: 
1:65a7088: import static org.apache.cassandra.cql3.statements.RequestValidations.checkContainsNoDuplicates;
1:65a7088: import static org.apache.cassandra.cql3.statements.RequestValidations.checkContainsOnly;
1:65a7088: import static org.apache.cassandra.cql3.statements.RequestValidations.checkTrue;
1:65a7088: import static org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest;
1:65a7088: 
1:65a7088: /**
1:65a7088:  * A relation using the token function.
1:65a7088:  * Examples:
1:65a7088:  * <ul>
1:65a7088:  * <li>SELECT ... WHERE token(a) &gt; token(1)</li>
1:65a7088:  * <li>SELECT ... WHERE token(a, b) &gt; token(1, 3)</li>
1:65a7088:  * </ul>
1:65a7088:  */
1:65a7088: public final class TokenRelation extends Relation
2:65a7088: {
1:4ed0060:     private final List<ColumnDefinition.Raw> entities;
1:65a7088: 
1:65a7088:     private final Term.Raw value;
1:65a7088: 
1:4ed0060:     public TokenRelation(List<ColumnDefinition.Raw> entities, Operator type, Term.Raw value)
1:65a7088:     {
1:65a7088:         this.entities = entities;
1:65a7088:         this.relationType = type;
1:65a7088:         this.value = value;
2:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:65a7088:     public boolean onToken()
1:65a7088:     {
1:65a7088:         return true;
1:65a7088:     }
1:65a7088: 
1:5a4253b:     public Term.Raw getValue()
1:5a4253b:     {
1:5a4253b:         return value;
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     public List<? extends Term.Raw> getInValues()
1:5a4253b:     {
1:5a4253b:         return null;
1:5a4253b:     }
1:5a4253b: 
1:65a7088:     @Override
1:65a7088:     protected Restriction newEQRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         List<ColumnDefinition> columnDefs = getColumnDefinitions(cfm);
1:65a7088:         Term term = toTerm(toReceivers(cfm, columnDefs), value, cfm.ksName, boundNames);
1:0a08525:         return new TokenRestriction.EQRestriction(cfm, columnDefs, term);
1:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:65a7088:     protected Restriction newINRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         throw invalidRequest("%s cannot be used with the token function", operator());
1:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:65a7088:     protected Restriction newSliceRestriction(CFMetaData cfm,
1:65a7088:                                               VariableSpecifications boundNames,
1:65a7088:                                               Bound bound,
1:65a7088:                                               boolean inclusive) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         List<ColumnDefinition> columnDefs = getColumnDefinitions(cfm);
1:65a7088:         Term term = toTerm(toReceivers(cfm, columnDefs), value, cfm.ksName, boundNames);
1:0a08525:         return new TokenRestriction.SliceRestriction(cfm, columnDefs, bound, inclusive, term);
1:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:65a7088:     protected Restriction newContainsRestriction(CFMetaData cfm, VariableSpecifications boundNames, boolean isKey) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         throw invalidRequest("%s cannot be used with the token function", operator());
1:65a7088:     }
1:65a7088: 
1:65a7088:     @Override
1:5a4253b:     protected Restriction newIsNotRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:5a4253b:     {
1:5a4253b:         throw invalidRequest("%s cannot be used with the token function", operator());
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     @Override
1:3928665:     protected Restriction newLikeRestriction(CFMetaData cfm, VariableSpecifications boundNames, Operator operator) throws InvalidRequestException
1:3928665:     {
1:3928665:         throw invalidRequest("%s cannot be used with the token function", operator);
1:3928665:     }
1:3928665: 
1:3928665:     @Override
1:65a7088:     protected Term toTerm(List<? extends ColumnSpecification> receivers,
1:65a7088:                           Raw raw,
1:65a7088:                           String keyspace,
1:65a7088:                           VariableSpecifications boundNames) throws InvalidRequestException
1:65a7088:     {
1:65a7088:         Term term = raw.prepare(keyspace, receivers.get(0));
1:65a7088:         term.collectMarkerSpecification(boundNames);
1:65a7088:         return term;
1:65a7088:     }
1:65a7088: 
1:4ed0060:     public Relation renameIdentifier(ColumnDefinition.Raw from, ColumnDefinition.Raw to)
1:5a4253b:     {
1:5a4253b:         if (!entities.contains(from))
1:5a4253b:             return this;
1:5a4253b: 
1:4ed0060:         List<ColumnDefinition.Raw> newEntities = entities.stream().map(e -> e.equals(from) ? to : e).collect(Collectors.toList());
1:5a4253b:         return new TokenRelation(newEntities, operator(), value);
1:5a4253b:     }
1:5a4253b: 
1:65a7088:     @Override
1:65a7088:     public String toString()
1:65a7088:     {
1:62fc314:         return String.format("token%s %s %s", Tuples.tupleToString(entities), relationType, value);
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Returns the definition of the columns to which apply the token restriction.
1:65a7088:      *
1:65a7088:      * @param cfm the column family metadata
1:65a7088:      * @return the definition of the columns to which apply the token restriction.
1:65a7088:      * @throws InvalidRequestException if the entity cannot be resolved
1:65a7088:      */
1:65a7088:     private List<ColumnDefinition> getColumnDefinitions(CFMetaData cfm) throws InvalidRequestException
1:65a7088:     {
1:4ed0060:         List<ColumnDefinition> columnDefs = new ArrayList<>(entities.size());
1:4ed0060:         for ( ColumnDefinition.Raw raw : entities)
1:4ed0060:             columnDefs.add(raw.prepare(cfm));
1:65a7088:         return columnDefs;
1:65a7088:     }
1:65a7088: 
1:65a7088:     /**
1:65a7088:      * Returns the receivers for this relation.
1:65a7088:      *
1:65a7088:      * @param cfm the Column Family meta data
1:65a7088:      * @param columnDefs the column definitions
1:65a7088:      * @return the receivers for the specified relation.
1:65a7088:      * @throws InvalidRequestException if the relation is invalid
1:65a7088:      */
1:65a7088:     private static List<? extends ColumnSpecification> toReceivers(CFMetaData cfm,
1:65a7088:                                                                    List<ColumnDefinition> columnDefs)
1:65a7088:                                                                    throws InvalidRequestException
1:65a7088:     {
1:65a7088: 
1:65a7088:         if (!columnDefs.equals(cfm.partitionKeyColumns()))
1:65a7088:         {
1:65a7088:             checkTrue(columnDefs.containsAll(cfm.partitionKeyColumns()),
1:65a7088:                       "The token() function must be applied to all partition key components or none of them");
1:65a7088: 
1:65a7088:             checkContainsNoDuplicates(columnDefs, "The token() function contains duplicate partition key components");
1:65a7088: 
1:65a7088:             checkContainsOnly(columnDefs, cfm.partitionKeyColumns(), "The token() function must contains only partition key components");
1:65a7088: 
1:65a7088:             throw invalidRequest("The token function arguments must be in the partition key order: %s",
1:65a7088:                                  Joiner.on(", ").join(ColumnDefinition.toIdentifiers(cfm.partitionKeyColumns())));
1:65a7088:         }
1:65a7088: 
1:65a7088:         ColumnDefinition firstColumn = columnDefs.get(0);
1:65a7088:         return Collections.singletonList(new ColumnSpecification(firstColumn.ksName,
1:65a7088:                                                                  firstColumn.cfName,
1:65a7088:                                                                  new ColumnIdentifier("partition key token", true),
1:0a08525:                                                                  cfm.partitioner.getTokenValidator()));
1:65a7088:     }
1:65a7088: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:     private final List<ColumnDefinition.Raw> entities;
1:     public TokenRelation(List<ColumnDefinition.Raw> entities, Operator type, Term.Raw value)
/////////////////////////////////////////////////////////////////////////
1:     public Relation renameIdentifier(ColumnDefinition.Raw from, ColumnDefinition.Raw to)
1:         List<ColumnDefinition.Raw> newEntities = entities.stream().map(e -> e.equals(from) ? to : e).collect(Collectors.toList());
/////////////////////////////////////////////////////////////////////////
1:         List<ColumnDefinition> columnDefs = new ArrayList<>(entities.size());
1:         for ( ColumnDefinition.Raw raw : entities)
1:             columnDefs.add(raw.prepare(cfm));
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.EQRestriction(cfm.getKeyValidatorAsClusteringComparator(), columnDefs, term);
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.SliceRestriction(cfm.getKeyValidatorAsClusteringComparator(), columnDefs, bound, inclusive, term);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3928665
/////////////////////////////////////////////////////////////////////////
1:     protected Restriction newLikeRestriction(CFMetaData cfm, VariableSpecifications boundNames, Operator operator) throws InvalidRequestException
1:     {
1:         throw invalidRequest("%s cannot be used with the token function", operator);
1:     }
1: 
1:     @Override
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1:     public Term.Raw getValue()
1:     {
1:         return value;
1:     }
1: 
1:     public List<? extends Term.Raw> getInValues()
1:     {
1:         return null;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected Restriction newIsNotRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:     {
1:         throw invalidRequest("%s cannot be used with the token function", operator());
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     public Relation renameIdentifier(ColumnIdentifier.Raw from, ColumnIdentifier.Raw to)
1:     {
1:         if (!entities.contains(from))
1:             return this;
1: 
0:         List<ColumnIdentifier.Raw> newEntities = entities.stream().map(e -> e.equals(from) ? to : e).collect(Collectors.toList());
1:         return new TokenRelation(newEntities, operator(), value);
1:     }
1: 
author:blerer
-------------------------------------------------------------------------------
commit:be2c26f
commit:62fc314
/////////////////////////////////////////////////////////////////////////
1:         return String.format("token%s %s %s", Tuples.tupleToString(entities), relationType, value);
commit:493859b
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.EQ(cfm.getKeyValidatorAsCType(), columnDefs, term);
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.Slice(cfm.getKeyValidatorAsCType(), columnDefs, bound, inclusive, term);
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import com.google.common.base.Joiner;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.cql3.Term.Raw;
1: import org.apache.cassandra.cql3.restrictions.Restriction;
1: import org.apache.cassandra.cql3.restrictions.TokenRestriction;
1: import org.apache.cassandra.cql3.statements.Bound;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.service.StorageService;
1: 
1: import static org.apache.cassandra.cql3.statements.RequestValidations.checkContainsNoDuplicates;
1: import static org.apache.cassandra.cql3.statements.RequestValidations.checkContainsOnly;
1: import static org.apache.cassandra.cql3.statements.RequestValidations.checkTrue;
1: import static org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest;
1: 
1: /**
1:  * A relation using the token function.
1:  * Examples:
1:  * <ul>
1:  * <li>SELECT ... WHERE token(a) &gt; token(1)</li>
1:  * <li>SELECT ... WHERE token(a, b) &gt; token(1, 3)</li>
1:  * </ul>
1:  */
1: public final class TokenRelation extends Relation
1: {
0:     private final List<ColumnIdentifier.Raw> entities;
1: 
1:     private final Term.Raw value;
1: 
0:     public TokenRelation(List<ColumnIdentifier.Raw> entities, Operator type, Term.Raw value)
1:     {
1:         this.entities = entities;
1:         this.relationType = type;
1:         this.value = value;
1:     }
1: 
1:     @Override
1:     public boolean onToken()
1:     {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected Restriction newEQRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:     {
1:         List<ColumnDefinition> columnDefs = getColumnDefinitions(cfm);
1:         Term term = toTerm(toReceivers(cfm, columnDefs), value, cfm.ksName, boundNames);
0:         return new TokenRestriction.EQ(columnDefs, term);
1:     }
1: 
1:     @Override
1:     protected Restriction newINRestriction(CFMetaData cfm, VariableSpecifications boundNames) throws InvalidRequestException
1:     {
1:         throw invalidRequest("%s cannot be used with the token function", operator());
1:     }
1: 
1:     @Override
1:     protected Restriction newSliceRestriction(CFMetaData cfm,
1:                                               VariableSpecifications boundNames,
1:                                               Bound bound,
1:                                               boolean inclusive) throws InvalidRequestException
1:     {
1:         List<ColumnDefinition> columnDefs = getColumnDefinitions(cfm);
1:         Term term = toTerm(toReceivers(cfm, columnDefs), value, cfm.ksName, boundNames);
0:         return new TokenRestriction.Slice(columnDefs, bound, inclusive, term);
1:     }
1: 
1:     @Override
1:     protected Restriction newContainsRestriction(CFMetaData cfm, VariableSpecifications boundNames, boolean isKey) throws InvalidRequestException
1:     {
1:         throw invalidRequest("%s cannot be used with the token function", operator());
1:     }
1: 
1:     @Override
1:     protected Term toTerm(List<? extends ColumnSpecification> receivers,
1:                           Raw raw,
1:                           String keyspace,
1:                           VariableSpecifications boundNames) throws InvalidRequestException
1:     {
1:         Term term = raw.prepare(keyspace, receivers.get(0));
1:         term.collectMarkerSpecification(boundNames);
1:         return term;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return String.format("token(%s) %s %s", Tuples.tupleToString(entities), relationType, value);
1:     }
1: 
1:     /**
1:      * Returns the definition of the columns to which apply the token restriction.
1:      *
1:      * @param cfm the column family metadata
1:      * @return the definition of the columns to which apply the token restriction.
1:      * @throws InvalidRequestException if the entity cannot be resolved
1:      */
1:     private List<ColumnDefinition> getColumnDefinitions(CFMetaData cfm) throws InvalidRequestException
1:     {
0:         List<ColumnDefinition> columnDefs = new ArrayList<>();
0:         for ( ColumnIdentifier.Raw raw : entities)
1:         {
0:             columnDefs.add(toColumnDefinition(cfm, raw));
1:         }
1:         return columnDefs;
1:     }
1: 
1:     /**
1:      * Returns the receivers for this relation.
1:      *
1:      * @param cfm the Column Family meta data
1:      * @param columnDefs the column definitions
1:      * @return the receivers for the specified relation.
1:      * @throws InvalidRequestException if the relation is invalid
1:      */
1:     private static List<? extends ColumnSpecification> toReceivers(CFMetaData cfm,
1:                                                                    List<ColumnDefinition> columnDefs)
1:                                                                    throws InvalidRequestException
1:     {
1: 
1:         if (!columnDefs.equals(cfm.partitionKeyColumns()))
1:         {
1:             checkTrue(columnDefs.containsAll(cfm.partitionKeyColumns()),
1:                       "The token() function must be applied to all partition key components or none of them");
1: 
1:             checkContainsNoDuplicates(columnDefs, "The token() function contains duplicate partition key components");
1: 
1:             checkContainsOnly(columnDefs, cfm.partitionKeyColumns(), "The token() function must contains only partition key components");
1: 
1:             throw invalidRequest("The token function arguments must be in the partition key order: %s",
1:                                  Joiner.on(", ").join(ColumnDefinition.toIdentifiers(cfm.partitionKeyColumns())));
1:         }
1: 
1:         ColumnDefinition firstColumn = columnDefs.get(0);
1:         return Collections.singletonList(new ColumnSpecification(firstColumn.ksName,
1:                                                                  firstColumn.cfName,
1:                                                                  new ColumnIdentifier("partition key token", true),
0:                                                                  StorageService.getPartitioner().getTokenValidator()));
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new TokenRestriction.EQRestriction(cfm, columnDefs, term);
/////////////////////////////////////////////////////////////////////////
1:         return new TokenRestriction.SliceRestriction(cfm, columnDefs, bound, inclusive, term);
/////////////////////////////////////////////////////////////////////////
1:                                                                  cfm.partitioner.getTokenValidator()));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.EQRestriction(cfm.getKeyValidatorAsClusteringComparator(), columnDefs, term);
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.SliceRestriction(cfm.getKeyValidatorAsClusteringComparator(), columnDefs, bound, inclusive, term);
/////////////////////////////////////////////////////////////////////////
0:                                                                  StorageService.getPartitioner().getTokenValidator()));
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.EQRestriction(cfm, columnDefs, term);
/////////////////////////////////////////////////////////////////////////
0:         return new TokenRestriction.SliceRestriction(cfm, columnDefs, bound, inclusive, term);
/////////////////////////////////////////////////////////////////////////
0:                                                                  cfm.partitioner.getTokenValidator()));
============================================================================