1:5630e15: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:5630e15:  *
1:5630e15:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:5630e15:  */
1:5630e15: package org.apache.cassandra.thrift;
1:5630e15: /*
1:5630e15:  * 
1:5630e15:  * Licensed to the Apache Software Foundation (ASF) under one
1:5630e15:  * or more contributor license agreements.  See the NOTICE file
1:5630e15:  * distributed with this work for additional information
1:5630e15:  * regarding copyright ownership.  The ASF licenses this file
1:5630e15:  * to you under the Apache License, Version 2.0 (the
1:5630e15:  * "License"); you may not use this file except in compliance
1:5630e15:  * with the License.  You may obtain a copy of the License at
1:5630e15:  * 
1:5630e15:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5630e15:  * 
1:5630e15:  * Unless required by applicable law or agreed to in writing,
1:5630e15:  * software distributed under the License is distributed on an
1:5630e15:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5630e15:  * KIND, either express or implied.  See the License for the
1:5630e15:  * specific language governing permissions and limitations
1:5630e15:  * under the License.
1:5630e15:  * 
1:5630e15:  */
9:5630e15: 
1:5630e15: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:5630e15: import java.util.List;
1:5630e15: import java.util.ArrayList;
1:5630e15: import java.util.Map;
1:5630e15: import java.util.HashMap;
1:5630e15: import java.util.EnumMap;
1:5630e15: import java.util.Set;
1:5630e15: import java.util.HashSet;
1:5630e15: import java.util.EnumSet;
1:5630e15: import java.util.Collections;
1:5630e15: import java.util.BitSet;
1:5630e15: import java.nio.ByteBuffer;
1:5630e15: import java.util.Arrays;
1:5630e15: import org.slf4j.Logger;
1:5630e15: import org.slf4j.LoggerFactory;
1:5630e15: 
1:5630e15: /**
1:7f63b1f:  * Row returned from a CQL query.
1:7f63b1f:  * 
1:7f63b1f:  * This struct is used for both CQL2 and CQL3 queries.  For CQL2, the partition key
1:7f63b1f:  * is special-cased and is always returned.  For CQL3, it is not special cased;
1:7f63b1f:  * it will be included in the columns list if it was included in the SELECT and
1:7f63b1f:  * the key field is always null.
1:5630e15:  */
1:bffd9ea: public class CqlRow implements org.apache.thrift.TBase<CqlRow, CqlRow._Fields>, java.io.Serializable, Cloneable, Comparable<CqlRow> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlRow");
1:5630e15: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:5630e15: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CqlRowStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CqlRowTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:7c8c570:   public ByteBuffer key; // required
1:7c8c570:   public List<Column> columns; // required
1:c8afd76: 
1:5630e15:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:5630e15:     KEY((short)1, "key"),
1:5630e15:     COLUMNS((short)2, "columns");
1:5630e15: 
1:5630e15:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:5630e15: 
1:5630e15:     static {
1:5630e15:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:5630e15:         byName.put(field.getFieldName(), field);
1:c8afd76:       }
1:c8afd76:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByThriftId(int fieldId) {
1:5630e15:       switch(fieldId) {
2:5630e15:         case 1: // KEY
1:5630e15:           return KEY;
2:5630e15:         case 2: // COLUMNS
1:5630e15:           return COLUMNS;
2:5630e15:         default:
1:5630e15:           return null;
1:c8afd76:       }
20:5630e15:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches fieldId, throwing an exception
1:5630e15:      * if it is not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:5630e15:       _Fields fields = findByThriftId(fieldId);
1:5630e15:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:5630e15:       return fields;
1:5630e15:     }
1:5630e15: 
1:5630e15:     /**
1:5630e15:      * Find the _Fields constant that matches name, or null if its not found.
1:5630e15:      */
1:5630e15:     public static _Fields findByName(String name) {
1:5630e15:       return byName.get(name);
1:5630e15:     }
1:5630e15: 
1:5630e15:     private final short _thriftId;
1:5630e15:     private final String _fieldName;
1:5630e15: 
1:5630e15:     _Fields(short thriftId, String fieldName) {
1:5630e15:       _thriftId = thriftId;
1:5630e15:       _fieldName = fieldName;
1:5630e15:     }
1:5630e15: 
1:5630e15:     public short getThriftFieldId() {
1:5630e15:       return _thriftId;
1:5630e15:     }
1:5630e15: 
1:5630e15:     public String getFieldName() {
1:5630e15:       return _fieldName;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   // isset id assignments
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:5630e15:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:5630e15:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlRow.class, metaDataMap);
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow() {
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow(
1:5630e15:     ByteBuffer key,
1:5630e15:     List<Column> columns)
6:5630e15:   {
1:5630e15:     this();
1:5630e15:     this.key = key;
1:5630e15:     this.columns = columns;
1:5630e15:   }
1:5630e15: 
1:5630e15:   /**
1:5630e15:    * Performs a deep copy on <i>other</i>.
1:5630e15:    */
1:5630e15:   public CqlRow(CqlRow other) {
1:5630e15:     if (other.isSetKey()) {
1:4ec9511:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
1:5630e15: ;
1:5630e15:     }
1:5630e15:     if (other.isSetColumns()) {
1:bffd9ea:       List<Column> __this__columns = new ArrayList<Column>(other.columns.size());
1:5630e15:       for (Column other_element : other.columns) {
1:5630e15:         __this__columns.add(new Column(other_element));
1:5630e15:       }
1:5630e15:       this.columns = __this__columns;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow deepCopy() {
1:5630e15:     return new CqlRow(this);
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public void clear() {
1:5630e15:     this.key = null;
1:5630e15:     this.columns = null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public byte[] getKey() {
1:4ec9511:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:4ec9511:     return key == null ? null : key.array();
1:5630e15:   }
1:5630e15: 
1:4ec9511:   public ByteBuffer bufferForKey() {
1:5630e15:     return key;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow setKey(byte[] key) {
1:4ec9511:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow setKey(ByteBuffer key) {
1:5630e15:     this.key = key;
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void unsetKey() {
1:5630e15:     this.key = null;
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSetKey() {
1:5630e15:     return this.key != null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setKeyIsSet(boolean value) {
1:5630e15:     if (!value) {
1:5630e15:       this.key = null;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public int getColumnsSize() {
1:5630e15:     return (this.columns == null) ? 0 : this.columns.size();
1:5630e15:   }
1:5630e15: 
1:5630e15:   public java.util.Iterator<Column> getColumnsIterator() {
1:5630e15:     return (this.columns == null) ? null : this.columns.iterator();
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void addToColumns(Column elem) {
1:5630e15:     if (this.columns == null) {
1:5630e15:       this.columns = new ArrayList<Column>();
1:5630e15:     }
1:5630e15:     this.columns.add(elem);
1:5630e15:   }
1:5630e15: 
1:5630e15:   public List<Column> getColumns() {
1:5630e15:     return this.columns;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public CqlRow setColumns(List<Column> columns) {
1:5630e15:     this.columns = columns;
1:5630e15:     return this;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void unsetColumns() {
1:5630e15:     this.columns = null;
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSetColumns() {
1:5630e15:     return this.columns != null;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setColumnsIsSet(boolean value) {
1:5630e15:     if (!value) {
1:5630e15:       this.columns = null;
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public void setFieldValue(_Fields field, Object value) {
1:5630e15:     switch (field) {
1:5630e15:     case KEY:
1:5630e15:       if (value == null) {
1:5630e15:         unsetKey();
3:5630e15:       } else {
1:5630e15:         setKey((ByteBuffer)value);
1:5630e15:       }
4:5630e15:       break;
1:5630e15: 
1:5630e15:     case COLUMNS:
1:5630e15:       if (value == null) {
1:5630e15:         unsetColumns();
1:5630e15:       } else {
1:5630e15:         setColumns((List<Column>)value);
1:5630e15:       }
1:5630e15:       break;
1:5630e15: 
1:5630e15:     }
1:5630e15:   }
1:5630e15: 
1:5630e15:   public Object getFieldValue(_Fields field) {
1:5630e15:     switch (field) {
1:5630e15:     case KEY:
1:5630e15:       return getKey();
1:5630e15: 
1:5630e15:     case COLUMNS:
1:5630e15:       return getColumns();
1:5630e15: 
1:5630e15:     }
1:5630e15:     throw new IllegalStateException();
1:5630e15:   }
1:5630e15: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:5630e15:   public boolean isSet(_Fields field) {
1:5630e15:     if (field == null) {
1:5630e15:       throw new IllegalArgumentException();
1:5630e15:     }
1:5630e15: 
1:5630e15:     switch (field) {
1:5630e15:     case KEY:
1:5630e15:       return isSetKey();
1:5630e15:     case COLUMNS:
1:5630e15:       return isSetColumns();
1:5630e15:     }
1:5630e15:     throw new IllegalStateException();
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public boolean equals(Object that) {
1:5630e15:     if (that == null)
1:5630e15:       return false;
1:5630e15:     if (that instanceof CqlRow)
1:5630e15:       return this.equals((CqlRow)that);
1:5630e15:     return false;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public boolean equals(CqlRow that) {
1:5630e15:     if (that == null)
1:5630e15:       return false;
1:5630e15: 
1:5630e15:     boolean this_present_key = true && this.isSetKey();
1:5630e15:     boolean that_present_key = true && that.isSetKey();
1:5630e15:     if (this_present_key || that_present_key) {
1:5630e15:       if (!(this_present_key && that_present_key))
1:5630e15:         return false;
1:5630e15:       if (!this.key.equals(that.key))
1:5630e15:         return false;
1:5630e15:     }
1:5630e15: 
1:5630e15:     boolean this_present_columns = true && this.isSetColumns();
1:5630e15:     boolean that_present_columns = true && that.isSetColumns();
1:5630e15:     if (this_present_columns || that_present_columns) {
1:5630e15:       if (!(this_present_columns && that_present_columns))
1:5630e15:         return false;
1:5630e15:       if (!this.columns.equals(that.columns))
1:5630e15:         return false;
1:5630e15:     }
1:5630e15: 
1:5630e15:     return true;
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public int hashCode() {
1:5630e15:     HashCodeBuilder builder = new HashCodeBuilder();
1:5630e15: 
1:5630e15:     boolean present_key = true && (isSetKey());
1:5630e15:     builder.append(present_key);
1:5630e15:     if (present_key)
1:5630e15:       builder.append(key);
1:5630e15: 
1:5630e15:     boolean present_columns = true && (isSetColumns());
1:5630e15:     builder.append(present_columns);
1:5630e15:     if (present_columns)
1:5630e15:       builder.append(columns);
1:5630e15: 
1:5630e15:     return builder.toHashCode();
1:5630e15:   }
1:5630e15: 
1:bffd9ea:   @Override
1:5630e15:   public int compareTo(CqlRow other) {
1:5630e15:     if (!getClass().equals(other.getClass())) {
1:5630e15:       return getClass().getName().compareTo(other.getClass().getName());
1:5630e15:     }
1:5630e15: 
1:5630e15:     int lastComparison = 0;
1:5630e15: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:5630e15:     }
1:5630e15:     if (isSetKey()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:5630e15:       if (lastComparison != 0) {
1:5630e15:         return lastComparison;
1:5630e15:       }
1:5630e15:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:5630e15:     if (lastComparison != 0) {
1:5630e15:       return lastComparison;
1:5630e15:     }
1:5630e15:     if (isSetColumns()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
1:5630e15:       if (lastComparison != 0) {
1:5630e15:         return lastComparison;
1:5630e15:       }
1:5630e15:     }
1:5630e15:     return 0;
1:5630e15:   }
1:5630e15: 
1:5630e15:   public _Fields fieldForId(int fieldId) {
1:5630e15:     return _Fields.findByThriftId(fieldId);
1:5630e15:   }
1:5630e15: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:5630e15:   }
1:5630e15: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:5630e15:   }
1:5630e15: 
1:5630e15:   @Override
1:5630e15:   public String toString() {
1:5630e15:     StringBuilder sb = new StringBuilder("CqlRow(");
1:5630e15:     boolean first = true;
1:5630e15: 
1:5630e15:     sb.append("key:");
1:5630e15:     if (this.key == null) {
1:5630e15:       sb.append("null");
1:5630e15:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
1:5630e15:     }
1:5630e15:     first = false;
1:5630e15:     if (!first) sb.append(", ");
1:5630e15:     sb.append("columns:");
1:5630e15:     if (this.columns == null) {
1:5630e15:       sb.append("null");
1:5630e15:     } else {
1:5630e15:       sb.append(this.columns);
1:5630e15:     }
1:5630e15:     first = false;
1:5630e15:     sb.append(")");
1:5630e15:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:5630e15:     // check for required fields
1:5630e15:     if (key == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:4ec9511:     }
1:5630e15:     if (columns == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:4ec9511:     }
1:b153d45:     // check for sub-struct validity
1:4ec9511:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class CqlRowStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlRowStandardScheme getScheme() {
1:b153d45:       return new CqlRowStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlRowStandardScheme extends StandardScheme<CqlRow> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlRow struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           case 1: // KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.key = iprot.readBinary();
1:b153d45:               struct.setKeyIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 2: // COLUMNS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:b153d45:               {
1:a965977:                 org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
1:a965977:                 struct.columns = new ArrayList<Column>(_list164.size);
1:a965977:                 for (int _i165 = 0; _i165 < _list164.size; ++_i165)
1:b153d45:                 {
1:bffd9ea:                   Column _elem166;
1:a965977:                   _elem166 = new Column();
1:a965977:                   _elem166.read(iprot);
1:a965977:                   struct.columns.add(_elem166);
1:b153d45:                 }
1:b153d45:                 iprot.readListEnd();
1:b153d45:               }
1:b153d45:               struct.setColumnsIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlRow struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.key != null) {
1:b153d45:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.key);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.columns != null) {
1:b153d45:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:b153d45:         {
1:b153d45:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
1:a965977:           for (Column _iter167 : struct.columns)
1:b153d45:           {
1:a965977:             _iter167.write(oprot);
1:b153d45:           }
1:b153d45:           oprot.writeListEnd();
1:b153d45:         }
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlRowTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CqlRowTupleScheme getScheme() {
1:b153d45:       return new CqlRowTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CqlRowTupleScheme extends TupleScheme<CqlRow> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlRow struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.key);
1:b153d45:       {
1:b153d45:         oprot.writeI32(struct.columns.size());
1:a965977:         for (Column _iter168 : struct.columns)
1:b153d45:         {
1:a965977:           _iter168.write(oprot);
1:b153d45:         }
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlRow struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.key = iprot.readBinary();
1:b153d45:       struct.setKeyIsSet(true);
1:b153d45:       {
1:a965977:         org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:a965977:         struct.columns = new ArrayList<Column>(_list169.size);
1:a965977:         for (int _i170 = 0; _i170 < _list169.size; ++_i170)
1:b153d45:         {
1:bffd9ea:           Column _elem171;
1:a965977:           _elem171 = new Column();
1:a965977:           _elem171.read(iprot);
1:a965977:           struct.columns.add(_elem171);
1:b153d45:         }
1:b153d45:       }
1:b153d45:       struct.setColumnsIsSet(true);
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:c8afd76: }
1:c8afd76: 
============================================================================
author:Jake Luciani
-------------------------------------------------------------------------------
commit:7f63b1f
/////////////////////////////////////////////////////////////////////////
1:  * Row returned from a CQL query.
1:  * 
1:  * This struct is used for both CQL2 and CQL3 queries.  For CQL2, the partition key
1:  * is special-cased and is always returned.  For CQL3, it is not special cased;
1:  * it will be included in the columns list if it was included in the SELECT and
1:  * the key field is always null.
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CqlRowStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CqlRowTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class CqlRowStandardSchemeFactory implements SchemeFactory {
1:     public CqlRowStandardScheme getScheme() {
1:       return new CqlRowStandardScheme();
1:     }
1:   }
1: 
1:   private static class CqlRowStandardScheme extends StandardScheme<CqlRow> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CqlRow struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.key = iprot.readBinary();
1:               struct.setKeyIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // COLUMNS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
0:                 org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
0:                 struct.columns = new ArrayList<Column>(_list138.size);
0:                 for (int _i139 = 0; _i139 < _list138.size; ++_i139)
1:                 {
0:                   Column _elem140; // required
0:                   _elem140 = new Column();
0:                   _elem140.read(iprot);
0:                   struct.columns.add(_elem140);
1:                 }
1:                 iprot.readListEnd();
1:               }
1:               struct.setColumnsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CqlRow struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.key != null) {
1:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:         oprot.writeBinary(struct.key);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.columns != null) {
1:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:         {
1:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
0:           for (Column _iter141 : struct.columns)
1:           {
0:             _iter141.write(oprot);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class CqlRowTupleSchemeFactory implements SchemeFactory {
1:     public CqlRowTupleScheme getScheme() {
1:       return new CqlRowTupleScheme();
1:     }
1:   }
1: 
1:   private static class CqlRowTupleScheme extends TupleScheme<CqlRow> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CqlRow struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.key);
1:       {
1:         oprot.writeI32(struct.columns.size());
0:         for (Column _iter142 : struct.columns)
1:         {
0:           _iter142.write(oprot);
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CqlRow struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.key = iprot.readBinary();
1:       struct.setKeyIsSet(true);
1:       {
0:         org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.columns = new ArrayList<Column>(_list143.size);
0:         for (int _i144 = 0; _i144 < _list143.size; ++_i144)
1:         {
0:           Column _elem145; // required
0:           _elem145 = new Column();
0:           _elem145.read(iprot);
0:           struct.columns.add(_elem145);
1:         }
1:       }
1:       struct.setColumnsIsSet(true);
1:     }
1:   }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CqlRow implements org.apache.thrift.TBase<CqlRow, CqlRow._Fields>, java.io.Serializable, Cloneable, Comparable<CqlRow> {
/////////////////////////////////////////////////////////////////////////
1:       List<Column> __this__columns = new ArrayList<Column>(other.columns.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
/////////////////////////////////////////////////////////////////////////
1:                   Column _elem166;
/////////////////////////////////////////////////////////////////////////
1:           Column _elem171;
commit:a965977
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
1:                 struct.columns = new ArrayList<Column>(_list164.size);
1:                 for (int _i165 = 0; _i165 < _list164.size; ++_i165)
0:                   Column _elem166; // required
1:                   _elem166 = new Column();
1:                   _elem166.read(iprot);
1:                   struct.columns.add(_elem166);
/////////////////////////////////////////////////////////////////////////
1:           for (Column _iter167 : struct.columns)
1:             _iter167.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:         for (Column _iter168 : struct.columns)
1:           _iter168.write(oprot);
/////////////////////////////////////////////////////////////////////////
1:         org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:         struct.columns = new ArrayList<Column>(_list169.size);
1:         for (int _i170 = 0; _i170 < _list169.size; ++_i170)
0:           Column _elem171; // required
1:           _elem171 = new Column();
1:           _elem171.read(iprot);
1:           struct.columns.add(_elem171);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
0:                 struct.columns = new ArrayList<Column>(_list166.size);
0:                 for (int _i167 = 0; _i167 < _list166.size; ++_i167)
0:                   Column _elem168; // required
0:                   _elem168 = new Column();
0:                   _elem168.read(iprot);
0:                   struct.columns.add(_elem168);
/////////////////////////////////////////////////////////////////////////
0:           for (Column _iter169 : struct.columns)
0:             _iter169.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter170 : struct.columns)
0:           _iter170.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.columns = new ArrayList<Column>(_list171.size);
0:         for (int _i172 = 0; _i172 < _list171.size; ++_i172)
0:           Column _elem173; // required
0:           _elem173 = new Column();
0:           _elem173.read(iprot);
0:           struct.columns.add(_elem173);
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   Column _elem160; // required
/////////////////////////////////////////////////////////////////////////
0:           Column _elem165; // required
commit:1ea2a60
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list69.size);
0:               for (int _i70 = 0; _i70 < _list69.size; ++_i70)
0:                 Column _elem71; // required
0:                 _elem71 = new Column();
0:                 _elem71.read(iprot);
0:                 this.columns.add(_elem71);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter72 : this.columns)
0:           _iter72.write(oprot);
commit:087d24a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list73.size);
0:               for (int _i74 = 0; _i74 < _list73.size; ++_i74)
0:                 Column _elem75; // required
0:                 _elem75 = new Column();
0:                 _elem75.read(iprot);
0:                 this.columns.add(_elem75);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter76 : this.columns)
0:           _iter76.write(oprot);
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list69.size);
0:               for (int _i70 = 0; _i70 < _list69.size; ++_i70)
0:                 Column _elem71;
0:                 _elem71 = new Column();
0:                 _elem71.read(iprot);
0:                 this.columns.add(_elem71);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter72 : this.columns)
0:           _iter72.write(oprot);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
0:                 struct.columns = new ArrayList<Column>(_list158.size);
0:                 for (int _i159 = 0; _i159 < _list158.size; ++_i159)
0:                   Column _elem160; // optional
0:                   _elem160 = new Column();
0:                   _elem160.read(iprot);
0:                   struct.columns.add(_elem160);
/////////////////////////////////////////////////////////////////////////
0:           for (Column _iter161 : struct.columns)
0:             _iter161.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter162 : struct.columns)
0:           _iter162.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.columns = new ArrayList<Column>(_list163.size);
0:         for (int _i164 = 0; _i164 < _list163.size; ++_i164)
0:           Column _elem165; // optional
0:           _elem165 = new Column();
0:           _elem165.read(iprot);
0:           struct.columns.add(_elem165);
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                 org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
0:                 struct.columns = new ArrayList<Column>(_list146.size);
0:                 for (int _i147 = 0; _i147 < _list146.size; ++_i147)
0:                   Column _elem148; // optional
0:                   _elem148 = new Column();
0:                   _elem148.read(iprot);
0:                   struct.columns.add(_elem148);
/////////////////////////////////////////////////////////////////////////
0:           for (Column _iter149 : struct.columns)
0:             _iter149.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter150 : struct.columns)
0:           _iter150.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:         org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
0:         struct.columns = new ArrayList<Column>(_list151.size);
0:         for (int _i152 = 0; _i152 < _list151.size; ++_i152)
0:           Column _elem153; // optional
0:           _elem153 = new Column();
0:           _elem153.read(iprot);
0:           struct.columns.add(_elem153);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b8434fc
commit:b391600
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list61.size);
0:               for (int _i62 = 0; _i62 < _list61.size; ++_i62)
0:                 Column _elem63;
0:                 _elem63 = new Column();
0:                 _elem63.read(iprot);
0:                 this.columns.add(_elem63);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter64 : this.columns)
0:           _iter64.write(oprot);
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:129d80a
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list47.size);
0:               for (int _i48 = 0; _i48 < _list47.size; ++_i48)
0:                 Column _elem49;
0:                 _elem49 = new Column();
0:                 _elem49.read(iprot);
0:                 this.columns.add(_elem49);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter50 : this.columns)
0:           _iter50.write(oprot);
commit:4f9b160
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:effb653
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list61.size);
0:               for (int _i62 = 0; _i62 < _list61.size; ++_i62)
0:                 Column _elem63;
0:                 _elem63 = new Column();
0:                 _elem63.read(iprot);
0:                 this.columns.add(_elem63);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter64 : this.columns)
0:           _iter64.write(oprot);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer key; // required
1:   public List<Column> columns; // required
/////////////////////////////////////////////////////////////////////////
0:                 Column _elem71; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list52.size);
0:               for (int _i53 = 0; _i53 < _list52.size; ++_i53)
0:                 Column _elem54;
0:                 _elem54 = new Column();
0:                 _elem54.read(iprot);
0:                 this.columns.add(_elem54);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter55 : this.columns)
0:           _iter55.write(oprot);
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list57.size);
0:               for (int _i58 = 0; _i58 < _list57.size; ++_i58)
0:                 Column _elem59;
0:                 _elem59 = new Column();
0:                 _elem59.read(iprot);
0:                 this.columns.add(_elem59);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter60 : this.columns)
0:           _iter60.write(oprot);
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class CqlRow implements org.apache.thrift.TBase<CqlRow, CqlRow._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlRow");
1:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlRow.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
/////////////////////////////////////////////////////////////////////////
1:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:     return key == null ? null : key.array();
1:   public ByteBuffer bufferForKey() {
1:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
author:Eric Evans
-------------------------------------------------------------------------------
commit:5630e15
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.transport.*;
0: import org.apache.thrift.protocol.*;
1: 
1: /**
0:  * Row returned from a CQL query
1:  */
0: public class CqlRow implements TBase<CqlRow, CqlRow._Fields>, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("CqlRow");
1: 
0:   private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
0:   private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short)2);
1: 
0:   public ByteBuffer key;
0:   public List<Column> columns;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     KEY((short)1, "key"),
1:     COLUMNS((short)2, "columns");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // KEY
1:           return KEY;
1:         case 2: // COLUMNS
1:           return COLUMNS;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, Column.class))));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     FieldMetaData.addStructMetaDataMap(CqlRow.class, metaDataMap);
1:   }
1: 
1:   public CqlRow() {
1:   }
1: 
1:   public CqlRow(
1:     ByteBuffer key,
1:     List<Column> columns)
1:   {
1:     this();
1:     this.key = key;
1:     this.columns = columns;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CqlRow(CqlRow other) {
1:     if (other.isSetKey()) {
0:       this.key = TBaseHelper.copyBinary(other.key);
1: ;
1:     }
1:     if (other.isSetColumns()) {
0:       List<Column> __this__columns = new ArrayList<Column>();
1:       for (Column other_element : other.columns) {
1:         __this__columns.add(new Column(other_element));
1:       }
1:       this.columns = __this__columns;
1:     }
1:   }
1: 
1:   public CqlRow deepCopy() {
1:     return new CqlRow(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.key = null;
1:     this.columns = null;
1:   }
1: 
1:   public byte[] getKey() {
0:     setKey(TBaseHelper.rightSize(key));
0:     return key.array();
1:   }
1: 
0:   public ByteBuffer BufferForKey() {
1:     return key;
1:   }
1: 
1:   public CqlRow setKey(byte[] key) {
0:     setKey(ByteBuffer.wrap(key));
1:     return this;
1:   }
1: 
1:   public CqlRow setKey(ByteBuffer key) {
1:     this.key = key;
1:     return this;
1:   }
1: 
1:   public void unsetKey() {
1:     this.key = null;
1:   }
1: 
0:   /** Returns true if field key is set (has been asigned a value) and false otherwise */
1:   public boolean isSetKey() {
1:     return this.key != null;
1:   }
1: 
1:   public void setKeyIsSet(boolean value) {
1:     if (!value) {
1:       this.key = null;
1:     }
1:   }
1: 
1:   public int getColumnsSize() {
1:     return (this.columns == null) ? 0 : this.columns.size();
1:   }
1: 
1:   public java.util.Iterator<Column> getColumnsIterator() {
1:     return (this.columns == null) ? null : this.columns.iterator();
1:   }
1: 
1:   public void addToColumns(Column elem) {
1:     if (this.columns == null) {
1:       this.columns = new ArrayList<Column>();
1:     }
1:     this.columns.add(elem);
1:   }
1: 
1:   public List<Column> getColumns() {
1:     return this.columns;
1:   }
1: 
1:   public CqlRow setColumns(List<Column> columns) {
1:     this.columns = columns;
1:     return this;
1:   }
1: 
1:   public void unsetColumns() {
1:     this.columns = null;
1:   }
1: 
0:   /** Returns true if field columns is set (has been asigned a value) and false otherwise */
1:   public boolean isSetColumns() {
1:     return this.columns != null;
1:   }
1: 
1:   public void setColumnsIsSet(boolean value) {
1:     if (!value) {
1:       this.columns = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case KEY:
1:       if (value == null) {
1:         unsetKey();
1:       } else {
1:         setKey((ByteBuffer)value);
1:       }
1:       break;
1: 
1:     case COLUMNS:
1:       if (value == null) {
1:         unsetColumns();
1:       } else {
1:         setColumns((List<Column>)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case KEY:
1:       return getKey();
1: 
1:     case COLUMNS:
1:       return getColumns();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case KEY:
1:       return isSetKey();
1:     case COLUMNS:
1:       return isSetColumns();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CqlRow)
1:       return this.equals((CqlRow)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CqlRow that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_key = true && this.isSetKey();
1:     boolean that_present_key = true && that.isSetKey();
1:     if (this_present_key || that_present_key) {
1:       if (!(this_present_key && that_present_key))
1:         return false;
1:       if (!this.key.equals(that.key))
1:         return false;
1:     }
1: 
1:     boolean this_present_columns = true && this.isSetColumns();
1:     boolean that_present_columns = true && that.isSetColumns();
1:     if (this_present_columns || that_present_columns) {
1:       if (!(this_present_columns && that_present_columns))
1:         return false;
1:       if (!this.columns.equals(that.columns))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_key = true && (isSetKey());
1:     builder.append(present_key);
1:     if (present_key)
1:       builder.append(key);
1: 
1:     boolean present_columns = true && (isSetColumns());
1:     builder.append(present_columns);
1:     if (present_columns)
1:       builder.append(columns);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CqlRow other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CqlRow typedOther = (CqlRow)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetKey()) {
0:       lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetColumns()) {
0:       lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // KEY
0:           if (field.type == TType.STRING) {
0:             this.key = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // COLUMNS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list42 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list42.size);
0:               for (int _i43 = 0; _i43 < _list42.size; ++_i43)
1:               {
0:                 Column _elem44;
0:                 _elem44 = new Column();
0:                 _elem44.read(iprot);
0:                 this.columns.add(_elem44);
1:               }
0:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.key != null) {
0:       oprot.writeFieldBegin(KEY_FIELD_DESC);
0:       oprot.writeBinary(this.key);
0:       oprot.writeFieldEnd();
1:     }
0:     if (this.columns != null) {
0:       oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:       {
0:         oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
0:         for (Column _iter45 : this.columns)
1:         {
0:           _iter45.write(oprot);
1:         }
0:         oprot.writeListEnd();
1:       }
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CqlRow(");
1:     boolean first = true;
1: 
1:     sb.append("key:");
1:     if (this.key == null) {
1:       sb.append("null");
1:     } else {
0:       TBaseHelper.toString(this.key, sb);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("columns:");
1:     if (this.columns == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.columns);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (key == null) {
0:       throw new TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:     }
1:     if (columns == null) {
0:       throw new TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
============================================================================