1:765ab3f: /*
1:765ab3f:  * Licensed to the Apache Software Foundation (ASF) under one
1:765ab3f:  * or more contributor license agreements.  See the NOTICE file
1:765ab3f:  * distributed with this work for additional information
1:765ab3f:  * regarding copyright ownership.  The ASF licenses this file
1:765ab3f:  * to you under the Apache License, Version 2.0 (the
1:765ab3f:  * "License"); you may not use this file except in compliance
1:765ab3f:  * with the License.  You may obtain a copy of the License at
1:765ab3f:  *
1:765ab3f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:765ab3f:  *
1:765ab3f:  * Unless required by applicable law or agreed to in writing, software
1:765ab3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:765ab3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:765ab3f:  * See the License for the specific language governing permissions and
1:765ab3f:  * limitations under the License.
1:765ab3f:  */
1:765ab3f: package org.apache.cassandra.security;
1:765ab3f: 
1:765ab3f: import java.io.IOException;
1:7374e9b: import java.util.Arrays;
1:765ab3f: import java.util.Collections;
1:7374e9b: import java.util.HashMap;
1:7374e9b: import java.util.Map;
1:765ab3f: import javax.crypto.Cipher;
1:765ab3f: 
1:765ab3f: import com.google.common.annotations.VisibleForTesting;
1:765ab3f: import com.google.common.base.Objects;
1:765ab3f: 
1:765ab3f: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1:765ab3f: import org.apache.cassandra.exceptions.ConfigurationException;
1:765ab3f: import org.apache.cassandra.io.compress.ICompressor;
1:765ab3f: import org.apache.cassandra.io.compress.LZ4Compressor;
1:7374e9b: import org.apache.cassandra.utils.Hex;
1:765ab3f: 
1:765ab3f: /**
1:765ab3f:  * A (largely) immutable wrapper for the application-wide file-level encryption settings.
1:765ab3f:  */
1:765ab3f: public class EncryptionContext
1:765ab3f: {
1:765ab3f:     public static final String ENCRYPTION_CIPHER = "encCipher";
1:765ab3f:     public static final String ENCRYPTION_KEY_ALIAS = "encKeyAlias";
1:765ab3f:     public static final String ENCRYPTION_IV = "encIV";
1:765ab3f: 
1:765ab3f:     private final TransparentDataEncryptionOptions tdeOptions;
1:765ab3f:     private final ICompressor compressor;
1:765ab3f:     private final CipherFactory cipherFactory;
1:765ab3f: 
1:7374e9b:     private final byte[] iv;
1:765ab3f:     private final int chunkLength;
1:765ab3f: 
1:765ab3f:     public EncryptionContext()
1:765ab3f:     {
1:765ab3f:         this(new TransparentDataEncryptionOptions());
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions)
1:765ab3f:     {
1:7374e9b:         this(tdeOptions, null, true);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     @VisibleForTesting
1:7374e9b:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions, byte[] iv, boolean init)
1:765ab3f:     {
1:765ab3f:         this.tdeOptions = tdeOptions;
1:765ab3f:         compressor = LZ4Compressor.create(Collections.<String, String>emptyMap());
1:765ab3f:         chunkLength = tdeOptions.chunk_length_kb * 1024;
1:7374e9b:         this.iv = iv;
1:765ab3f: 
1:765ab3f:         // always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,
1:7374e9b:         // but has existing commitlogs and sstables on disk that are still encrypted (and still need to be read)
1:765ab3f:         CipherFactory factory = null;
1:765ab3f: 
1:765ab3f:         if (tdeOptions.enabled && init)
1:765ab3f:         {
1:765ab3f:             try
1:765ab3f:             {
1:765ab3f:                 factory = new CipherFactory(tdeOptions);
1:765ab3f:             }
1:765ab3f:             catch (Exception e)
1:765ab3f:             {
1:765ab3f:                 throw new ConfigurationException("failed to load key provider for transparent data encryption", e);
1:765ab3f:             }
1:765ab3f:         }
1:765ab3f: 
1:765ab3f:         cipherFactory = factory;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public ICompressor getCompressor()
1:765ab3f:     {
1:765ab3f:         return compressor;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public Cipher getEncryptor() throws IOException
1:765ab3f:     {
1:765ab3f:         return cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1:765ab3f:     }
1:765ab3f: 
1:7374e9b:     public Cipher getDecryptor() throws IOException
1:765ab3f:     {
1:7374e9b:         if (iv == null || iv.length == 0)
1:7374e9b:             throw new IllegalStateException("no initialization vector (IV) found in this context");
1:7374e9b:         return cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, iv);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public boolean isEnabled()
1:765ab3f:     {
1:765ab3f:         return tdeOptions.enabled;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public int getChunkLength()
1:765ab3f:     {
1:765ab3f:         return chunkLength;
1:765ab3f:     }
1:765ab3f: 
1:7374e9b:     public byte[] getIV()
1:7374e9b:     {
1:7374e9b:         return iv;
1:7374e9b:     }
1:7374e9b: 
1:765ab3f:     public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions()
1:765ab3f:     {
1:765ab3f:         return tdeOptions;
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public boolean equals(Object o)
1:765ab3f:     {
1:765ab3f:         return o instanceof EncryptionContext && equals((EncryptionContext) o);
1:765ab3f:     }
1:765ab3f: 
1:765ab3f:     public boolean equals(EncryptionContext other)
1:765ab3f:     {
1:7374e9b:         return Objects.equal(tdeOptions, other.tdeOptions)
1:7374e9b:                && Objects.equal(compressor, other.compressor)
1:7374e9b:                && Arrays.equals(iv, other.iv);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     public Map<String, String> toHeaderParameters()
1:7374e9b:     {
1:7374e9b:         Map<String, String> map = new HashMap<>(3);
1:7374e9b:         // add compression options, someday ...
1:7374e9b:         if (tdeOptions.enabled)
1:7374e9b:         {
1:7374e9b:             map.put(ENCRYPTION_CIPHER, tdeOptions.cipher);
1:7374e9b:             map.put(ENCRYPTION_KEY_ALIAS, tdeOptions.key_alias);
1:7374e9b: 
1:7374e9b:             if (iv != null && iv.length > 0)
1:7374e9b:                 map.put(ENCRYPTION_IV, Hex.bytesToHex(iv));
1:7374e9b:         }
1:7374e9b:         return map;
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * If encryption headers are found in the {@code parameters},
1:7374e9b:      * those headers are merged with the application-wide {@code encryptionContext}.
1:7374e9b:      */
1:7374e9b:     public static EncryptionContext createFromMap(Map<?, ?> parameters, EncryptionContext encryptionContext)
1:7374e9b:     {
1:7374e9b:         if (parameters == null || parameters.isEmpty())
1:7374e9b:             return new EncryptionContext(new TransparentDataEncryptionOptions(false));
1:7374e9b: 
1:7374e9b:         String keyAlias = (String)parameters.get(ENCRYPTION_KEY_ALIAS);
1:7374e9b:         String cipher = (String)parameters.get(ENCRYPTION_CIPHER);
1:7374e9b:         String ivString = (String)parameters.get(ENCRYPTION_IV);
1:7374e9b:         if (keyAlias == null || cipher == null)
1:7374e9b:             return new EncryptionContext(new TransparentDataEncryptionOptions(false));
1:7374e9b: 
1:7374e9b:         TransparentDataEncryptionOptions tdeOptions = new TransparentDataEncryptionOptions(cipher, keyAlias, encryptionContext.getTransparentDataEncryptionOptions().key_provider);
1:7374e9b:         byte[] iv = ivString != null ? Hex.hexToBytes(ivString) : null;
1:7374e9b:         return new EncryptionContext(tdeOptions, iv, true);
1:765ab3f:     }
1:765ab3f: }
============================================================================
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Hex;
/////////////////////////////////////////////////////////////////////////
1:     private final byte[] iv;
/////////////////////////////////////////////////////////////////////////
1:         this(tdeOptions, null, true);
1:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions, byte[] iv, boolean init)
1:         this.iv = iv;
1:         // but has existing commitlogs and sstables on disk that are still encrypted (and still need to be read)
/////////////////////////////////////////////////////////////////////////
1:     public Cipher getDecryptor() throws IOException
1:         if (iv == null || iv.length == 0)
1:             throw new IllegalStateException("no initialization vector (IV) found in this context");
1:         return cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, iv);
/////////////////////////////////////////////////////////////////////////
1:     public byte[] getIV()
1:     {
1:         return iv;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return Objects.equal(tdeOptions, other.tdeOptions)
1:                && Objects.equal(compressor, other.compressor)
1:                && Arrays.equals(iv, other.iv);
1:     }
1: 
1:     public Map<String, String> toHeaderParameters()
1:     {
1:         Map<String, String> map = new HashMap<>(3);
1:         // add compression options, someday ...
1:         if (tdeOptions.enabled)
1:         {
1:             map.put(ENCRYPTION_CIPHER, tdeOptions.cipher);
1:             map.put(ENCRYPTION_KEY_ALIAS, tdeOptions.key_alias);
1: 
1:             if (iv != null && iv.length > 0)
1:                 map.put(ENCRYPTION_IV, Hex.bytesToHex(iv));
1:         }
1:         return map;
1:     }
1: 
1:     /**
1:      * If encryption headers are found in the {@code parameters},
1:      * those headers are merged with the application-wide {@code encryptionContext}.
1:      */
1:     public static EncryptionContext createFromMap(Map<?, ?> parameters, EncryptionContext encryptionContext)
1:     {
1:         if (parameters == null || parameters.isEmpty())
1:             return new EncryptionContext(new TransparentDataEncryptionOptions(false));
1: 
1:         String keyAlias = (String)parameters.get(ENCRYPTION_KEY_ALIAS);
1:         String cipher = (String)parameters.get(ENCRYPTION_CIPHER);
1:         String ivString = (String)parameters.get(ENCRYPTION_IV);
1:         if (keyAlias == null || cipher == null)
1:             return new EncryptionContext(new TransparentDataEncryptionOptions(false));
1: 
1:         TransparentDataEncryptionOptions tdeOptions = new TransparentDataEncryptionOptions(cipher, keyAlias, encryptionContext.getTransparentDataEncryptionOptions().key_provider);
1:         byte[] iv = ivString != null ? Hex.hexToBytes(ivString) : null;
1:         return new EncryptionContext(tdeOptions, iv, true);
commit:765ab3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.security;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
1: import javax.crypto.Cipher;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.compress.LZ4Compressor;
1: 
1: /**
1:  * A (largely) immutable wrapper for the application-wide file-level encryption settings.
1:  */
1: public class EncryptionContext
1: {
1:     public static final String ENCRYPTION_CIPHER = "encCipher";
1:     public static final String ENCRYPTION_KEY_ALIAS = "encKeyAlias";
1:     public static final String ENCRYPTION_IV = "encIV";
1: 
1:     private final TransparentDataEncryptionOptions tdeOptions;
1:     private final ICompressor compressor;
1:     private final CipherFactory cipherFactory;
1: 
1:     private final int chunkLength;
1: 
1:     public EncryptionContext()
1:     {
1:         this(new TransparentDataEncryptionOptions());
1:     }
1: 
1:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions)
1:     {
0:         this(tdeOptions, true);
1:     }
1: 
1:     @VisibleForTesting
0:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions, boolean init)
1:     {
1:         this.tdeOptions = tdeOptions;
1:         compressor = LZ4Compressor.create(Collections.<String, String>emptyMap());
1:         chunkLength = tdeOptions.chunk_length_kb * 1024;
1: 
1:         // always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,
0:         // but has existing commitlogs and sstables on disk that are still git addencrypted (and still need to be read)
1:         CipherFactory factory = null;
1: 
1:         if (tdeOptions.enabled && init)
1:         {
1:             try
1:             {
1:                 factory = new CipherFactory(tdeOptions);
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new ConfigurationException("failed to load key provider for transparent data encryption", e);
1:             }
1:         }
1: 
1:         cipherFactory = factory;
1:     }
1: 
1:     public ICompressor getCompressor()
1:     {
1:         return compressor;
1:     }
1: 
1:     public Cipher getEncryptor() throws IOException
1:     {
1:         return cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
1:     }
1: 
0:     public Cipher getDecryptor(byte[] IV) throws IOException
1:     {
0:         return cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, IV);
1:     }
1: 
1:     public boolean isEnabled()
1:     {
1:         return tdeOptions.enabled;
1:     }
1: 
1:     public int getChunkLength()
1:     {
1:         return chunkLength;
1:     }
1: 
1:     public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions()
1:     {
1:         return tdeOptions;
1:     }
1: 
1:     public boolean equals(Object o)
1:     {
1:         return o instanceof EncryptionContext && equals((EncryptionContext) o);
1:     }
1: 
1:     public boolean equals(EncryptionContext other)
1:     {
0:         return Objects.equal(tdeOptions, other.tdeOptions) && Objects.equal(compressor, other.compressor);
1:     }
1: }
commit:72f5fbd
/////////////////////////////////////////////////////////////////////////
commit:37160e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.cassandra.security;
0: 
0: import java.io.IOException;
0: import java.util.Collections;
0: import javax.crypto.Cipher;
0: 
0: import com.google.common.annotations.VisibleForTesting;
0: import com.google.common.base.Objects;
0: 
0: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.io.compress.ICompressor;
0: import org.apache.cassandra.io.compress.LZ4Compressor;
0: 
0: /**
0:  * A (largely) immutable wrapper for the application-wide file-level encryption settings.
0:  */
0: public class EncryptionContext
0: {
0:     public static final String ENCRYPTION_CIPHER = "encCipher";
0:     public static final String ENCRYPTION_KEY_ALIAS = "encKeyAlias";
0:     public static final String ENCRYPTION_IV = "encIV";
0: 
0:     private final TransparentDataEncryptionOptions tdeOptions;
0:     private final ICompressor compressor;
0:     private final CipherFactory cipherFactory;
0: 
0:     private final int chunkLength;
0: 
0:     public EncryptionContext()
0:     {
0:         this(new TransparentDataEncryptionOptions());
0:     }
0: 
0:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions)
0:     {
0:         this(tdeOptions, true);
0:     }
0: 
0:     @VisibleForTesting
0:     public EncryptionContext(TransparentDataEncryptionOptions tdeOptions, boolean init)
0:     {
0:         this.tdeOptions = tdeOptions;
0:         compressor = LZ4Compressor.create(Collections.<String, String>emptyMap());
0:         chunkLength = tdeOptions.chunk_length_kb * 1024;
0: 
0:         // always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,
0:         // but has existing commitlogs and sstables on disk that are still git addencrypted (and still need to be read)
0:         CipherFactory factory = null;
0: 
0:         if (tdeOptions.enabled && init)
0:         {
0:             try
0:             {
0:                 factory = new CipherFactory(tdeOptions);
0:             }
0:             catch (Exception e)
0:             {
0:                 throw new ConfigurationException("failed to load key provider for transparent data encryption", e);
0:             }
0:         }
0: 
0:         cipherFactory = factory;
0:     }
0: 
0:     public ICompressor getCompressor()
0:     {
0:         return compressor;
0:     }
0: 
0:     public Cipher getEncryptor() throws IOException
0:     {
0:         return cipherFactory.getEncryptor(tdeOptions.cipher, tdeOptions.key_alias);
0:     }
0: 
0:     public Cipher getDecryptor(byte[] IV) throws IOException
0:     {
0:         return cipherFactory.getDecryptor(tdeOptions.cipher, tdeOptions.key_alias, IV);
0:     }
0: 
0:     public boolean isEnabled()
0:     {
0:         return tdeOptions.enabled;
0:     }
0: 
0:     public int getChunkLength()
0:     {
0:         return chunkLength;
0:     }
0: 
0:     public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions()
0:     {
0:         return tdeOptions;
0:     }
0: 
0:     public boolean equals(Object o)
0:     {
0:         return o instanceof EncryptionContext && equals((EncryptionContext) o);
0:     }
0: 
0:     public boolean equals(EncryptionContext other)
0:     {
0:         return Objects.equal(tdeOptions, other.tdeOptions) && Objects.equal(compressor, other.compressor);
0:     }
0: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ef59624
/////////////////////////////////////////////////////////////////////////
============================================================================