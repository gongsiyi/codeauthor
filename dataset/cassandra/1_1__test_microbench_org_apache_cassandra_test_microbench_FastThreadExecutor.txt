1:dc9ed46: /*
1:dc9ed46:  * Licensed to the Apache Software Foundation (ASF) under one
1:dc9ed46:  * or more contributor license agreements.  See the NOTICE file
1:dc9ed46:  * distributed with this work for additional information
1:dc9ed46:  * regarding copyright ownership.  The ASF licenses this file
1:dc9ed46:  * to you under the Apache License, Version 2.0 (the
1:dc9ed46:  * "License"); you may not use this file except in compliance
1:dc9ed46:  * with the License.  You may obtain a copy of the License at
1:dc9ed46:  *
1:dc9ed46:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dc9ed46:  *
1:dc9ed46:  * Unless required by applicable law or agreed to in writing, software
1:dc9ed46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc9ed46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc9ed46:  * See the License for the specific language governing permissions and
1:dc9ed46:  * limitations under the License.
1:dc9ed46:  */
1:dc9ed46: 
1:dc9ed46: package org.apache.cassandra.test.microbench;
1:dc9ed46: 
1:dc9ed46: import java.util.Collections;
1:dc9ed46: import java.util.List;
1:dc9ed46: import java.util.concurrent.AbstractExecutorService;
1:dc9ed46: import java.util.concurrent.CountDownLatch;
1:dc9ed46: import java.util.concurrent.LinkedBlockingQueue;
1:dc9ed46: import java.util.concurrent.TimeUnit;
1:dc9ed46: 
1:dc9ed46: import io.netty.util.concurrent.FastThreadLocalThread;
1:dc9ed46: 
1:dc9ed46: /**
1:dc9ed46:  * Created to test perf of FastThreadLocal
1:dc9ed46:  *
1:dc9ed46:  * Used in MutationBench via:
1:dc9ed46:  * jvmArgsAppend = {"-Djmh.executor=CUSTOM", "-Djmh.executor.class=org.apache.cassandra.test.microbench.FastThreadExecutor"}
1:dc9ed46:  */
1:dc9ed46: public class FastThreadExecutor extends AbstractExecutorService
1:dc9ed46: {
1:dc9ed46:     final FastThreadLocalThread thread;
1:dc9ed46:     final LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
1:dc9ed46:     final CountDownLatch shutdown = new CountDownLatch(1);
1:dc9ed46: 
1:dc9ed46:     public FastThreadExecutor(int size, String name)
1:dc9ed46:     {
1:dc9ed46:         assert size == 1;
1:dc9ed46: 
1:dc9ed46:         thread = new FastThreadLocalThread(() -> {
1:dc9ed46:             Runnable work = null;
1:dc9ed46:             try
1:dc9ed46:             {
1:dc9ed46:                 while ((work = queue.take()) != null)
1:dc9ed46:                     work.run();
1:dc9ed46:             }
1:dc9ed46:             catch (InterruptedException e)
1:dc9ed46:             {
1:dc9ed46:                 shutdown.countDown();
1:dc9ed46:             }
1:dc9ed46:         });
1:dc9ed46: 
1:dc9ed46:         thread.setName(name + "-1");
1:dc9ed46:         thread.setDaemon(true);
1:dc9ed46: 
1:dc9ed46:         thread.start();
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46: 
1:dc9ed46:     public void shutdown()
1:dc9ed46:     {
1:dc9ed46:         thread.interrupt();
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public List<Runnable> shutdownNow()
1:dc9ed46:     {
1:dc9ed46:         thread.interrupt();
1:dc9ed46:         return Collections.emptyList();
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public boolean isShutdown()
1:dc9ed46:     {
1:dc9ed46:         return shutdown.getCount() == 0;
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public boolean isTerminated()
1:dc9ed46:     {
1:dc9ed46:         return shutdown.getCount() == 0;
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:dc9ed46:     {
1:dc9ed46:         return shutdown.await(timeout, unit);
1:dc9ed46:     }
1:dc9ed46: 
1:dc9ed46:     public void execute(Runnable command)
1:dc9ed46:     {
1:dc9ed46:         while(!queue.add(command));
1:dc9ed46:     }
1:dc9ed46: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:dc9ed46
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.test.microbench;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.concurrent.AbstractExecutorService;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: 
1: import io.netty.util.concurrent.FastThreadLocalThread;
1: 
1: /**
1:  * Created to test perf of FastThreadLocal
1:  *
1:  * Used in MutationBench via:
1:  * jvmArgsAppend = {"-Djmh.executor=CUSTOM", "-Djmh.executor.class=org.apache.cassandra.test.microbench.FastThreadExecutor"}
1:  */
1: public class FastThreadExecutor extends AbstractExecutorService
1: {
1:     final FastThreadLocalThread thread;
1:     final LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
1:     final CountDownLatch shutdown = new CountDownLatch(1);
1: 
1:     public FastThreadExecutor(int size, String name)
1:     {
1:         assert size == 1;
1: 
1:         thread = new FastThreadLocalThread(() -> {
1:             Runnable work = null;
1:             try
1:             {
1:                 while ((work = queue.take()) != null)
1:                     work.run();
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 shutdown.countDown();
1:             }
1:         });
1: 
1:         thread.setName(name + "-1");
1:         thread.setDaemon(true);
1: 
1:         thread.start();
1:     }
1: 
1: 
1:     public void shutdown()
1:     {
1:         thread.interrupt();
1:     }
1: 
1:     public List<Runnable> shutdownNow()
1:     {
1:         thread.interrupt();
1:         return Collections.emptyList();
1:     }
1: 
1:     public boolean isShutdown()
1:     {
1:         return shutdown.getCount() == 0;
1:     }
1: 
1:     public boolean isTerminated()
1:     {
1:         return shutdown.getCount() == 0;
1:     }
1: 
1:     public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:     {
1:         return shutdown.await(timeout, unit);
1:     }
1: 
1:     public void execute(Runnable command)
1:     {
1:         while(!queue.add(command));
1:     }
1: }
============================================================================