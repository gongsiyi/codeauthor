1:fc518cb: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
4:fc518cb:  *
1:fc518cb:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:fc518cb:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:fc518cb: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:fc518cb: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:fc518cb: import java.util.List;
1:fc518cb: import java.util.ArrayList;
1:fc518cb: import java.util.Map;
1:fc518cb: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:fc518cb: import java.util.Set;
1:fc518cb: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:fc518cb: import java.util.Collections;
1:fc518cb: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:fc518cb: import java.util.Arrays;
1:fc518cb: import org.slf4j.Logger;
1:fc518cb: import org.slf4j.LoggerFactory;
1:fc518cb: 
1:4e8691a: /**
1:4e8691a:  * A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.
1:fc518cb:  * 
1:4e8691a:  * @param key. a row key
1:4e8691a:  * @param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
1:4e8691a:  *                 a SlicePredicate.
1:fc518cb:  */
1:bffd9ea: public class KeySlice implements org.apache.thrift.TBase<KeySlice, KeySlice._Fields>, java.io.Serializable, Cloneable, Comparable<KeySlice> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeySlice");
1:fc518cb: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:fc518cb: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:fc518cb:   static {
1:b153d45:     schemes.put(StandardScheme.class, new KeySliceStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new KeySliceTupleSchemeFactory());
1:b153d45:   }
1:fc518cb: 
1:7c8c570:   public ByteBuffer key; // required
1:7c8c570:   public List<ColumnOrSuperColumn> columns; // required
1:fc518cb: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     KEY((short)1, "key"),
1:04d5ec3:     COLUMNS((short)2, "columns");
1:fc518cb: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:b153d45: 
1:b153d45:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
2:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // KEY
1:d849c69:           return KEY;
1:d849c69:         case 2: // COLUMNS
1:d849c69:           return COLUMNS;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
2:04d5ec3:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:4ec9511: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:4ec9511: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:b153d45:     }
1:b43c785: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
1:b153d45:   }
10:04d5ec3: 
1:fc518cb:   // isset id assignments
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnOrSuperColumn.class))));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeySlice.class, metaDataMap);
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public KeySlice() {
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public KeySlice(
1:e7a385a:     ByteBuffer key,
1:fc518cb:     List<ColumnOrSuperColumn> columns)
1:fc518cb:   {
1:fc518cb:     this();
1:fc518cb:     this.key = key;
1:fc518cb:     this.columns = columns;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   /**
1:fc518cb:    * Performs a deep copy on <i>other</i>.
1:fc518cb:    */
1:fc518cb:   public KeySlice(KeySlice other) {
1:fc518cb:     if (other.isSetKey()) {
1:4ec9511:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
1:e7a385a: ;
1:fc518cb:     }
1:fc518cb:     if (other.isSetColumns()) {
1:bffd9ea:       List<ColumnOrSuperColumn> __this__columns = new ArrayList<ColumnOrSuperColumn>(other.columns.size());
1:fc518cb:       for (ColumnOrSuperColumn other_element : other.columns) {
1:fc518cb:         __this__columns.add(new ColumnOrSuperColumn(other_element));
1:fc518cb:       }
1:fc518cb:       this.columns = __this__columns;
1:fc518cb:     }
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public KeySlice deepCopy() {
2:fc518cb:     return new KeySlice(this);
1:fc518cb:   }
1:fc518cb: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.key = null;
1:e7a385a:     this.columns = null;
1:fc518cb:   }
1:fc518cb: 
1:f3a4e17:   public byte[] getKey() {
1:4ec9511:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:4ec9511:     return key == null ? null : key.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForKey() {
1:e7a385a:     return key;
1:fc518cb:   }
1:fc518cb: 
1:f3a4e17:   public KeySlice setKey(byte[] key) {
1:4ec9511:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public KeySlice setKey(ByteBuffer key) {
1:fc518cb:     this.key = key;
1:fc518cb:     return this;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public void unsetKey() {
1:fc518cb:     this.key = null;
1:fc518cb:   }
1:fc518cb: 
1:4ec9511:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
1:fc518cb:   public boolean isSetKey() {
1:fc518cb:     return this.key != null;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public void setKeyIsSet(boolean value) {
1:fc518cb:     if (!value) {
1:fc518cb:       this.key = null;
1:fc518cb:     }
1:fc518cb:   }
1:fc518cb: 
1:4e8691a:   public int getColumnsSize() {
1:4e8691a:     return (this.columns == null) ? 0 : this.columns.size();
1:fc518cb:   }
1:fc518cb: 
1:4e8691a:   public java.util.Iterator<ColumnOrSuperColumn> getColumnsIterator() {
1:4e8691a:     return (this.columns == null) ? null : this.columns.iterator();
1:fc518cb:   }
1:b153d45: 
1:4e8691a:   public void addToColumns(ColumnOrSuperColumn elem) {
1:4e8691a:     if (this.columns == null) {
1:4e8691a:       this.columns = new ArrayList<ColumnOrSuperColumn>();
1:b153d45:     }
1:4e8691a:     this.columns.add(elem);
1:b153d45:   }
1:04d5ec3: 
1:fc518cb:   public List<ColumnOrSuperColumn> getColumns() {
1:fc518cb:     return this.columns;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public KeySlice setColumns(List<ColumnOrSuperColumn> columns) {
1:fc518cb:     this.columns = columns;
1:fc518cb:     return this;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public void unsetColumns() {
1:fc518cb:     this.columns = null;
1:fc518cb:   }
1:fc518cb: 
1:4ec9511:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
1:fc518cb:   public boolean isSetColumns() {
1:fc518cb:     return this.columns != null;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public void setColumnsIsSet(boolean value) {
1:fc518cb:     if (!value) {
1:fc518cb:       this.columns = null;
1:fc518cb:     }
1:fc518cb:   }
1:fc518cb: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
2:fc518cb:     case KEY:
1:fc518cb:       if (value == null) {
1:fc518cb:         unsetKey();
3:fc518cb:       } else {
1:e7a385a:         setKey((ByteBuffer)value);
1:fc518cb:       }
4:fc518cb:       break;
1:fc518cb: 
2:fc518cb:     case COLUMNS:
1:fc518cb:       if (value == null) {
1:fc518cb:         unsetColumns();
1:2b69c40:       } else {
1:fc518cb:         setColumns((List<ColumnOrSuperColumn>)value);
1:2b69c40:       }
1:2b69c40:       break;
1:fc518cb: 
1:fc518cb:     }
1:fc518cb:   }
1:fc518cb: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:fc518cb:     case KEY:
1:fc518cb:       return getKey();
1:fc518cb: 
1:fc518cb:     case COLUMNS:
1:fc518cb:       return getColumns();
1:fc518cb: 
1:fc518cb:     }
1:04d5ec3:     throw new IllegalStateException();
1:fc518cb:   }
1:fc518cb: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:fc518cb:     case KEY:
1:fc518cb:       return isSetKey();
1:fc518cb:     case COLUMNS:
1:fc518cb:       return isSetColumns();
1:fc518cb:     }
1:04d5ec3:     throw new IllegalStateException();
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   @Override
1:fc518cb:   public boolean equals(Object that) {
1:fc518cb:     if (that == null)
1:fc518cb:       return false;
1:fc518cb:     if (that instanceof KeySlice)
1:fc518cb:       return this.equals((KeySlice)that);
1:fc518cb:     return false;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   public boolean equals(KeySlice that) {
1:fc518cb:     if (that == null)
1:fc518cb:       return false;
1:fc518cb: 
1:fc518cb:     boolean this_present_key = true && this.isSetKey();
1:fc518cb:     boolean that_present_key = true && that.isSetKey();
1:fc518cb:     if (this_present_key || that_present_key) {
1:fc518cb:       if (!(this_present_key && that_present_key))
1:fc518cb:         return false;
1:e7a385a:       if (!this.key.equals(that.key))
1:fc518cb:         return false;
1:fc518cb:     }
1:fc518cb: 
1:fc518cb:     boolean this_present_columns = true && this.isSetColumns();
1:fc518cb:     boolean that_present_columns = true && that.isSetColumns();
1:fc518cb:     if (this_present_columns || that_present_columns) {
1:fc518cb:       if (!(this_present_columns && that_present_columns))
1:fc518cb:         return false;
1:fc518cb:       if (!this.columns.equals(that.columns))
1:fc518cb:         return false;
1:fc518cb:     }
1:fc518cb: 
1:fc518cb:     return true;
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   @Override
1:fc518cb:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_key = true && (isSetKey());
1:d966ed0:     builder.append(present_key);
1:d966ed0:     if (present_key)
1:d966ed0:       builder.append(key);
1:d966ed0: 
1:d966ed0:     boolean present_columns = true && (isSetColumns());
1:d966ed0:     builder.append(present_columns);
1:d966ed0:     if (present_columns)
1:d966ed0:       builder.append(columns);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:fc518cb:   }
1:fc518cb: 
1:bffd9ea:   @Override
1:fc518cb:   public int compareTo(KeySlice other) {
1:fc518cb:     if (!getClass().equals(other.getClass())) {
1:fc518cb:       return getClass().getName().compareTo(other.getClass().getName());
1:fc518cb:     }
1:fc518cb: 
1:fc518cb:     int lastComparison = 0;
1:fc518cb: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
3:fc518cb:     if (lastComparison != 0) {
3:fc518cb:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetKey()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:fc518cb:     }
1:e7a385a:     if (isSetColumns()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
1:fc518cb:       if (lastComparison != 0) {
1:fc518cb:         return lastComparison;
1:fc518cb:       }
1:fc518cb:     }
2:fc518cb:     return 0;
1:fc518cb:   }
1:fc518cb: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:fc518cb:   }
1:fc518cb: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:fc518cb:   }
1:fc518cb: 
1:fc518cb:   @Override
1:fc518cb:   public String toString() {
1:fc518cb:     StringBuilder sb = new StringBuilder("KeySlice(");
1:fc518cb:     boolean first = true;
1:fc518cb: 
1:fc518cb:     sb.append("key:");
1:fc518cb:     if (this.key == null) {
1:fc518cb:       sb.append("null");
1:fc518cb:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
1:fc518cb:     }
1:fc518cb:     first = false;
1:fc518cb:     if (!first) sb.append(", ");
1:fc518cb:     sb.append("columns:");
1:fc518cb:     if (this.columns == null) {
1:fc518cb:       sb.append("null");
1:fc518cb:     } else {
1:fc518cb:       sb.append(this.columns);
1:fc518cb:     }
1:fc518cb:     first = false;
1:fc518cb:     sb.append(")");
1:fc518cb:     return sb.toString();
1:fc518cb:   }
1:fc518cb: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:fc518cb:     // check for required fields
1:fc518cb:     if (key == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:fc518cb:     }
1:fc518cb:     if (columns == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:fc518cb:     }
1:b153d45:     // check for sub-struct validity
1:fc518cb:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class KeySliceStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public KeySliceStandardScheme getScheme() {
1:b153d45:       return new KeySliceStandardScheme();
1:fc518cb:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class KeySliceStandardScheme extends StandardScheme<KeySlice> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeySlice struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:fc518cb:       iprot.readStructBegin();
1:fc518cb:       while (true)
1:2b69c40:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:fc518cb:           break;
1:fc518cb:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.key = iprot.readBinary();
1:b153d45:               struct.setKeyIsSet(true);
1:fc518cb:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:fc518cb:             }
1:fc518cb:             break;
1:2b69c40:           case 2: // COLUMNS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:fc518cb:               {
1:b153d45:                 org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
1:b153d45:                 struct.columns = new ArrayList<ColumnOrSuperColumn>(_list40.size);
1:b153d45:                 for (int _i41 = 0; _i41 < _list40.size; ++_i41)
1:fc518cb:                 {
1:bffd9ea:                   ColumnOrSuperColumn _elem42;
1:b153d45:                   _elem42 = new ColumnOrSuperColumn();
1:b153d45:                   _elem42.read(iprot);
1:b153d45:                   struct.columns.add(_elem42);
1:b153d45:                 }
1:2b69c40:                 iprot.readListEnd();
1:2b69c40:               }
1:b153d45:               struct.setColumnsIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:2b69c40:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:fc518cb:       iprot.readStructEnd();
1:b153d45: 
1:fc518cb:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeySlice struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:fc518cb:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.key != null) {
1:fc518cb:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.key);
1:fc518cb:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.columns != null) {
1:fc518cb:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:fc518cb:         {
1:b153d45:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
1:b153d45:           for (ColumnOrSuperColumn _iter43 : struct.columns)
1:fc518cb:           {
1:b153d45:             _iter43.write(oprot);
1:fc518cb:           }
1:fc518cb:           oprot.writeListEnd();
1:b153d45:         }
1:fc518cb:         oprot.writeFieldEnd();
1:b153d45:       }
1:fc518cb:       oprot.writeFieldStop();
1:fc518cb:       oprot.writeStructEnd();
1:fc518cb:     }
1:fc518cb: 
1:fc518cb:   }
1:fc518cb: 
1:b153d45:   private static class KeySliceTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public KeySliceTupleScheme getScheme() {
1:b153d45:       return new KeySliceTupleScheme();
1:fc518cb:     }
1:fc518cb:   }
1:fc518cb: 
1:b153d45:   private static class KeySliceTupleScheme extends TupleScheme<KeySlice> {
1:fc518cb: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, KeySlice struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.key);
1:fc518cb:       {
1:b153d45:         oprot.writeI32(struct.columns.size());
1:b153d45:         for (ColumnOrSuperColumn _iter44 : struct.columns)
1:fc518cb:         {
1:b153d45:           _iter44.write(oprot);
1:fc518cb:         }
1:fc518cb:       }
1:fc518cb:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, KeySlice struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.key = iprot.readBinary();
1:b153d45:       struct.setKeyIsSet(true);
8:b153d45:       {
1:b153d45:         org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:b153d45:         struct.columns = new ArrayList<ColumnOrSuperColumn>(_list45.size);
1:b153d45:         for (int _i46 = 0; _i46 < _list45.size; ++_i46)
1:b153d45:         {
1:bffd9ea:           ColumnOrSuperColumn _elem47;
1:b153d45:           _elem47 = new ColumnOrSuperColumn();
1:b153d45:           _elem47.read(iprot);
1:b153d45:           struct.columns.add(_elem47);
1:fc518cb:         }
1:b153d45:       }
1:b153d45:       struct.setColumnsIsSet(true);
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class KeySlice implements org.apache.thrift.TBase<KeySlice, KeySlice._Fields>, java.io.Serializable, Cloneable, Comparable<KeySlice> {
/////////////////////////////////////////////////////////////////////////
1:       List<ColumnOrSuperColumn> __this__columns = new ArrayList<ColumnOrSuperColumn>(other.columns.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
1:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
/////////////////////////////////////////////////////////////////////////
1:                   ColumnOrSuperColumn _elem42;
/////////////////////////////////////////////////////////////////////////
1:           ColumnOrSuperColumn _elem47;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   ColumnOrSuperColumn _elem42; // required
/////////////////////////////////////////////////////////////////////////
0:           ColumnOrSuperColumn _elem47; // required
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list20.size);
0:               for (int _i21 = 0; _i21 < _list20.size; ++_i21)
0:                 ColumnOrSuperColumn _elem22;
0:                 _elem22 = new ColumnOrSuperColumn();
0:                 _elem22.read(iprot);
0:                 this.columns.add(_elem22);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter23 : this.columns)
0:           _iter23.write(oprot);
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                   ColumnOrSuperColumn _elem42; // optional
/////////////////////////////////////////////////////////////////////////
0:           ColumnOrSuperColumn _elem47; // optional
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer key;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer key,
/////////////////////////////////////////////////////////////////////////
0:       this.key = TBaseHelper.copyBinary(other.key);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.key = null;
1:     this.columns = null;
0:     setKey(TBaseHelper.rightSize(key));
0:     return key.array();
1:   }
1: 
0:   public ByteBuffer BufferForKey() {
1:     return key;
0:     setKey(ByteBuffer.wrap(key));
1:     return this;
1:   }
1: 
1:   public KeySlice setKey(ByteBuffer key) {
/////////////////////////////////////////////////////////////////////////
1:         setKey((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.key.equals(that.key))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetKey()) {
0:       lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumns()) {
0:       lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.key, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_key = true && (isSetKey());
1:     builder.append(present_key);
1:     if (present_key)
1:       builder.append(key);
1: 
1:     boolean present_columns = true && (isSetColumns());
1:     builder.append(present_columns);
1:     if (present_columns)
1:       builder.append(columns);
1: 
1:     return builder.toHashCode();
commit:49f34a2
/////////////////////////////////////////////////////////////////////////
0:               TList _list12 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list12.size);
0:               for (int _i13 = 0; _i13 < _list12.size; ++_i13)
0:                 ColumnOrSuperColumn _elem14;
0:                 _elem14 = new ColumnOrSuperColumn();
0:                 _elem14.read(iprot);
0:                 this.columns.add(_elem14);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter15 : this.columns)
0:           _iter15.write(oprot);
commit:4fb3d18
/////////////////////////////////////////////////////////////////////////
0:               TList _list16 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list16.size);
0:               for (int _i17 = 0; _i17 < _list16.size; ++_i17)
0:                 ColumnOrSuperColumn _elem18;
0:                 _elem18 = new ColumnOrSuperColumn();
0:                 _elem18.read(iprot);
0:                 this.columns.add(_elem18);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter19 : this.columns)
0:           _iter19.write(oprot);
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class KeySlice implements TBase<KeySlice, KeySlice._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // KEY
1:           return KEY;
1:         case 2: // COLUMNS
1:           return COLUMNS;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
commit:078c56c
/////////////////////////////////////////////////////////////////////////
0:               TList _list20 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list20.size);
0:               for (int _i21 = 0; _i21 < _list20.size; ++_i21)
0:                 ColumnOrSuperColumn _elem22;
0:                 _elem22 = new ColumnOrSuperColumn();
0:                 _elem22.read(iprot);
0:                 this.columns.add(_elem22);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter23 : this.columns)
0:           _iter23.write(oprot);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:7d2115b
/////////////////////////////////////////////////////////////////////////
0:               TList _list12 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list12.size);
0:               for (int _i13 = 0; _i13 < _list12.size; ++_i13)
0:                 ColumnOrSuperColumn _elem14;
0:                 _elem14 = new ColumnOrSuperColumn();
0:                 _elem14.read(iprot);
0:                 this.columns.add(_elem14);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter15 : this.columns)
0:           _iter15.write(oprot);
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
0:     if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
0:     if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // KEY
0:           if (field.type == TType.STRING) {
0:             this.key = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // COLUMNS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list8 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list8.size);
0:               for (int _i9 = 0; _i9 < _list8.size; ++_i9)
0:                 ColumnOrSuperColumn _elem10;
0:                 _elem10 = new ColumnOrSuperColumn();
0:                 _elem10.read(iprot);
0:                 this.columns.add(_elem10);
1:               iprot.readListEnd();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:fc518cb
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class KeySlice implements TBase, java.io.Serializable, Cloneable, Comparable<KeySlice> {
0:   private static final TStruct STRUCT_DESC = new TStruct("KeySlice");
0:   private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
0:   private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short)2);
1: 
0:   public String key;
0:   public List<ColumnOrSuperColumn> columns;
0:   public static final int KEY = 1;
0:   public static final int COLUMNS = 2;
1: 
1:   // isset id assignments
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, ColumnOrSuperColumn.class))));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(KeySlice.class, metaDataMap);
1:   }
1: 
1:   public KeySlice() {
1:   }
1: 
1:   public KeySlice(
0:     String key,
1:     List<ColumnOrSuperColumn> columns)
1:   {
1:     this();
1:     this.key = key;
1:     this.columns = columns;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public KeySlice(KeySlice other) {
1:     if (other.isSetKey()) {
0:       this.key = other.key;
1:     }
1:     if (other.isSetColumns()) {
0:       List<ColumnOrSuperColumn> __this__columns = new ArrayList<ColumnOrSuperColumn>();
1:       for (ColumnOrSuperColumn other_element : other.columns) {
1:         __this__columns.add(new ColumnOrSuperColumn(other_element));
1:       }
1:       this.columns = __this__columns;
1:     }
1:   }
1: 
1:   public KeySlice deepCopy() {
1:     return new KeySlice(this);
1:   }
1: 
0:   @Deprecated
0:   public KeySlice clone() {
1:     return new KeySlice(this);
1:   }
1: 
0:   public String getKey() {
0:     return this.key;
1:   }
1: 
0:   public KeySlice setKey(String key) {
1:     this.key = key;
1:     return this;
1:   }
1: 
1:   public void unsetKey() {
1:     this.key = null;
1:   }
1: 
0:   // Returns true if field key is set (has been asigned a value) and false otherwise
1:   public boolean isSetKey() {
1:     return this.key != null;
1:   }
1: 
1:   public void setKeyIsSet(boolean value) {
1:     if (!value) {
1:       this.key = null;
1:     }
1:   }
1: 
1:   public List<ColumnOrSuperColumn> getColumns() {
1:     return this.columns;
1:   }
1: 
1:   public KeySlice setColumns(List<ColumnOrSuperColumn> columns) {
1:     this.columns = columns;
1:     return this;
1:   }
1: 
1:   public void unsetColumns() {
1:     this.columns = null;
1:   }
1: 
0:   // Returns true if field columns is set (has been asigned a value) and false otherwise
1:   public boolean isSetColumns() {
1:     return this.columns != null;
1:   }
1: 
1:   public void setColumnsIsSet(boolean value) {
1:     if (!value) {
1:       this.columns = null;
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case KEY:
1:       if (value == null) {
1:         unsetKey();
1:       } else {
0:         setKey((String)value);
1:       }
1:       break;
1: 
1:     case COLUMNS:
1:       if (value == null) {
1:         unsetColumns();
1:       } else {
1:         setColumns((List<ColumnOrSuperColumn>)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case KEY:
1:       return getKey();
1: 
1:     case COLUMNS:
1:       return getColumns();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case KEY:
1:       return isSetKey();
1:     case COLUMNS:
1:       return isSetColumns();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof KeySlice)
1:       return this.equals((KeySlice)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(KeySlice that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_key = true && this.isSetKey();
1:     boolean that_present_key = true && that.isSetKey();
1:     if (this_present_key || that_present_key) {
1:       if (!(this_present_key && that_present_key))
1:         return false;
0:       if (!this.key.equals(that.key))
1:         return false;
1:     }
1: 
1:     boolean this_present_columns = true && this.isSetColumns();
1:     boolean that_present_columns = true && that.isSetColumns();
1:     if (this_present_columns || that_present_columns) {
1:       if (!(this_present_columns && that_present_columns))
1:         return false;
1:       if (!this.columns.equals(that.columns))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(KeySlice other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     KeySlice typedOther = (KeySlice)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(key, typedOther.key);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(isSetColumns());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
1:         case KEY:
0:           if (field.type == TType.STRING) {
0:             this.key = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case COLUMNS:
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list8 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list8.size);
0:               for (int _i9 = 0; _i9 < _list8.size; ++_i9)
1:               {
0:                 ColumnOrSuperColumn _elem10;
0:                 _elem10 = new ColumnOrSuperColumn();
0:                 _elem10.read(iprot);
0:                 this.columns.add(_elem10);
1:               }
0:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.key != null) {
1:       oprot.writeFieldBegin(KEY_FIELD_DESC);
0:       oprot.writeString(this.key);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.columns != null) {
1:       oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:       {
0:         oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
0:         for (ColumnOrSuperColumn _iter11 : this.columns)
1:         {
0:           _iter11.write(oprot);
1:         }
1:         oprot.writeListEnd();
1:       }
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("KeySlice(");
1:     boolean first = true;
1: 
1:     sb.append("key:");
1:     if (this.key == null) {
1:       sb.append("null");
1:     } else {
0:       sb.append(this.key);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("columns:");
1:     if (this.columns == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.columns);
1:     }
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (key == null) {
0:       throw new TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:     }
1:     if (columns == null) {
0:       throw new TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new KeySliceStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new KeySliceTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class KeySliceStandardSchemeFactory implements SchemeFactory {
1:     public KeySliceStandardScheme getScheme() {
1:       return new KeySliceStandardScheme();
1:     }
1:   }
1: 
1:   private static class KeySliceStandardScheme extends StandardScheme<KeySlice> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, KeySlice struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.key = iprot.readBinary();
1:               struct.setKeyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // COLUMNS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
1:                 struct.columns = new ArrayList<ColumnOrSuperColumn>(_list40.size);
1:                 for (int _i41 = 0; _i41 < _list40.size; ++_i41)
1:                 {
0:                   ColumnOrSuperColumn _elem42; // required
1:                   _elem42 = new ColumnOrSuperColumn();
1:                   _elem42.read(iprot);
1:                   struct.columns.add(_elem42);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setColumnsIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, KeySlice struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.key != null) {
0:         oprot.writeFieldBegin(KEY_FIELD_DESC);
1:         oprot.writeBinary(struct.key);
0:         oprot.writeFieldEnd();
1:       }
1:       if (struct.columns != null) {
0:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:         {
1:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
1:           for (ColumnOrSuperColumn _iter43 : struct.columns)
1:           {
1:             _iter43.write(oprot);
1:           }
0:           oprot.writeListEnd();
1:         }
0:         oprot.writeFieldEnd();
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class KeySliceTupleSchemeFactory implements SchemeFactory {
1:     public KeySliceTupleScheme getScheme() {
1:       return new KeySliceTupleScheme();
1:     }
1:   }
1: 
1:   private static class KeySliceTupleScheme extends TupleScheme<KeySlice> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, KeySlice struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.key);
1:       {
1:         oprot.writeI32(struct.columns.size());
1:         for (ColumnOrSuperColumn _iter44 : struct.columns)
1:         {
1:           _iter44.write(oprot);
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, KeySlice struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.key = iprot.readBinary();
1:       struct.setKeyIsSet(true);
1:       {
1:         org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:         struct.columns = new ArrayList<ColumnOrSuperColumn>(_list45.size);
1:         for (int _i46 = 0; _i46 < _list45.size; ++_i46)
1:         {
0:           ColumnOrSuperColumn _elem47; // required
1:           _elem47 = new ColumnOrSuperColumn();
1:           _elem47.read(iprot);
1:           struct.columns.add(_elem47);
1:         }
1:       }
1:       struct.setColumnsIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer key; // required
1:   public List<ColumnOrSuperColumn> columns; // required
/////////////////////////////////////////////////////////////////////////
0:                 ColumnOrSuperColumn _elem22; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class KeySlice implements org.apache.thrift.TBase<KeySlice, KeySlice._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeySlice");
1:   private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnOrSuperColumn.class))));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeySlice.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
/////////////////////////////////////////////////////////////////////////
1:     setKey(org.apache.thrift.TBaseHelper.rightSize(key));
1:     return key == null ? null : key.array();
1:   public ByteBuffer bufferForKey() {
1:     setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.key, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
0:     }
0:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
commit:f3a4e17
/////////////////////////////////////////////////////////////////////////
0:   public byte[] key;
/////////////////////////////////////////////////////////////////////////
0:     byte[] key,
/////////////////////////////////////////////////////////////////////////
0:       this.key = new byte[other.key.length];
0:       System.arraycopy(other.key, 0, key, 0, other.key.length);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getKey() {
1:   public KeySlice setKey(byte[] key) {
/////////////////////////////////////////////////////////////////////////
0:         setKey((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.key, that.key))
/////////////////////////////////////////////////////////////////////////
0:             this.key = iprot.readBinary();
/////////////////////////////////////////////////////////////////////////
0:       oprot.writeBinary(this.key);
/////////////////////////////////////////////////////////////////////////
0:         int __key_size = Math.min(this.key.length, 128);
0:         for (int i = 0; i < __key_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
0:         }
0:         if (this.key.length > 128) sb.append(" ...");
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:               TList _list16 = iprot.readListBegin();
0:               this.columns = new ArrayList<ColumnOrSuperColumn>(_list16.size);
0:               for (int _i17 = 0; _i17 < _list16.size; ++_i17)
0:                 ColumnOrSuperColumn _elem18;
0:                 _elem18 = new ColumnOrSuperColumn();
0:                 _elem18.read(iprot);
0:                 this.columns.add(_elem18);
/////////////////////////////////////////////////////////////////////////
0:         for (ColumnOrSuperColumn _iter19 : this.columns)
0:           _iter19.write(oprot);
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class KeySlice implements TBase<KeySlice._Fields>, java.io.Serializable, Cloneable, Comparable<KeySlice> {
1: 
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     KEY((short)1, "key"),
1:     COLUMNS((short)2, "columns");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
0:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field key is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field columns is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case KEY:
0:             if (field.type == TType.STRING) {
0:               this.key = iprot.readString();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             break;
0:           case COLUMNS:
0:             if (field.type == TType.LIST) {
0:               {
0:                 TList _list8 = iprot.readListBegin();
0:                 this.columns = new ArrayList<ColumnOrSuperColumn>(_list8.size);
0:                 for (int _i9 = 0; _i9 < _list8.size; ++_i9)
0:                 {
0:                   ColumnOrSuperColumn _elem10;
0:                   _elem10 = new ColumnOrSuperColumn();
0:                   _elem10.read(iprot);
0:                   this.columns.add(_elem10);
0:                 }
0:                 iprot.readListEnd();
0:               }
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.
0:  * 
1:  * @param key. a row key
1:  * @param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
1:  *                 a SlicePredicate.
0:  */
/////////////////////////////////////////////////////////////////////////
1:   public int getColumnsSize() {
1:     return (this.columns == null) ? 0 : this.columns.size();
0:   }
0: 
1:   public java.util.Iterator<ColumnOrSuperColumn> getColumnsIterator() {
1:     return (this.columns == null) ? null : this.columns.iterator();
0:   }
0: 
1:   public void addToColumns(ColumnOrSuperColumn elem) {
1:     if (this.columns == null) {
1:       this.columns = new ArrayList<ColumnOrSuperColumn>();
0:     }
1:     this.columns.add(elem);
0:   }
0: 
============================================================================