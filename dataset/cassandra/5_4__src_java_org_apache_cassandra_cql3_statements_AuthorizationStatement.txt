1:5a3eb1a: /*
1:5a3eb1a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5a3eb1a:  * or more contributor license agreements.  See the NOTICE file
1:5a3eb1a:  * distributed with this work for additional information
1:5a3eb1a:  * regarding copyright ownership.  The ASF licenses this file
1:5a3eb1a:  * to you under the Apache License, Version 2.0 (the
1:5a3eb1a:  * "License"); you may not use this file except in compliance
1:5a3eb1a:  * with the License.  You may obtain a copy of the License at
1:5a3eb1a:  *
1:5a3eb1a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a3eb1a:  *
1:5a3eb1a:  * Unless required by applicable law or agreed to in writing, software
1:5a3eb1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a3eb1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a3eb1a:  * See the License for the specific language governing permissions and
1:5a3eb1a:  * limitations under the License.
1:5a3eb1a:  */
1:5a3eb1a: package org.apache.cassandra.cql3.statements;
2:5a3eb1a: 
1:5a3eb1a: 
1:5a3eb1a: import org.apache.cassandra.auth.DataResource;
1:217721a: import org.apache.cassandra.auth.IResource;
1:5a3eb1a: import org.apache.cassandra.cql3.CQLStatement;
1:bfd73be: import org.apache.cassandra.cql3.QueryOptions;
1:217721a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:217721a: import org.apache.cassandra.exceptions.RequestExecutionException;
1:217721a: import org.apache.cassandra.exceptions.RequestValidationException;
1:5a3eb1a: import org.apache.cassandra.service.ClientState;
1:5a3eb1a: import org.apache.cassandra.service.QueryState;
1:5a3eb1a: import org.apache.cassandra.transport.messages.ResultMessage;
1:5a3eb1a: 
1:5a3eb1a: public abstract class AuthorizationStatement extends ParsedStatement implements CQLStatement
1:5a3eb1a: {
1:5a3eb1a:     @Override
1:5a3eb1a:     public Prepared prepare()
1:5a3eb1a:     {
1:5a3eb1a:         return new Prepared(this);
1:5a3eb1a:     }
1:5a3eb1a: 
1:b97c523:     public int getBoundTerms()
1:5a3eb1a:     {
1:5a3eb1a:         return 0;
1:5a3eb1a:     }
1:5a3eb1a: 
1:aa83c94:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime)
1:bddfa9e:     throws RequestValidationException, RequestExecutionException
1:5a3eb1a:     {
1:bddfa9e:         return execute(state.getClientState());
1:5a3eb1a:     }
1:5a3eb1a: 
1:bddfa9e:     public abstract ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException;
1:5a3eb1a: 
1:1147ee3:     public ResultMessage executeInternal(QueryState state, QueryOptions options)
1:5a3eb1a:     {
1:5a3eb1a:         // executeInternal is for local query only, thus altering permission doesn't make sense and is not supported
1:5a3eb1a:         throw new UnsupportedOperationException();
1:5a3eb1a:     }
1:5a3eb1a: 
1:217721a:     public static IResource maybeCorrectResource(IResource resource, ClientState state) throws InvalidRequestException
1:5a3eb1a:     {
1:217721a:         if (DataResource.class.isInstance(resource))
1:217721a:         {
1:217721a:             DataResource dataResource = (DataResource) resource;
1:217721a:             if (dataResource.isTableLevel() && dataResource.getKeyspace() == null)
1:217721a:                 return DataResource.table(state.getKeyspace(), dataResource.getTable());
1:217721a:         }
1:5a3eb1a:         return resource;
1:5a3eb1a:     }
1:5a3eb1a: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage execute(QueryState state, QueryOptions options, long queryStartNanoTime)
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:217721a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.IResource;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.RequestExecutionException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
/////////////////////////////////////////////////////////////////////////
1:     public static IResource maybeCorrectResource(IResource resource, ClientState state) throws InvalidRequestException
1:         if (DataResource.class.isInstance(resource))
1:         {
1:             DataResource dataResource = (DataResource) resource;
1:             if (dataResource.isTableLevel() && dataResource.getKeyspace() == null)
1:                 return DataResource.table(state.getKeyspace(), dataResource.getTable());
1:         }
commit:879b694
/////////////////////////////////////////////////////////////////////////
0:         if (resource.isTableLevel() && resource.getKeyspace() == null)
0:             return DataResource.table(state.getKeyspace(), resource.getTable());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1147ee3
/////////////////////////////////////////////////////////////////////////
1:     public ResultMessage executeInternal(QueryState state, QueryOptions options)
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.QueryOptions;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(QueryState state, QueryOptions options)
commit:b068a9c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.service.pager.PagingState;
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize, PagingState pagingState)
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables, int pageSize)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b1435ff
commit:b97c523
/////////////////////////////////////////////////////////////////////////
1:     public int getBoundTerms()
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables)
1:     throws RequestValidationException, RequestExecutionException
1:         return execute(state.getClientState());
1:     public abstract ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException;
commit:5a3eb1a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.nio.ByteBuffer;
0: import java.util.List;
1: 
1: import org.apache.cassandra.auth.DataResource;
1: import org.apache.cassandra.cql3.CQLStatement;
0: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.exceptions.*;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
1: public abstract class AuthorizationStatement extends ParsedStatement implements CQLStatement
1: {
1:     @Override
1:     public Prepared prepare()
1:     {
1:         return new Prepared(this);
1:     }
1: 
0:     public int getBoundsTerms()
1:     {
1:         return 0;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws InvalidRequestException, UnauthorizedException
0:     {}
1: 
0:     public ResultMessage execute(ConsistencyLevel cl, QueryState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException
1:     {
0:         return execute(state.getClientState(), variables);
1:     }
1: 
0:     public abstract ResultMessage execute(ClientState state, List<ByteBuffer> variables) throws UnauthorizedException, InvalidRequestException;
1: 
0:     public ResultMessage executeInternal(QueryState state)
1:     {
1:         // executeInternal is for local query only, thus altering permission doesn't make sense and is not supported
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     public static DataResource maybeCorrectResource(DataResource resource, ClientState state) throws InvalidRequestException
1:     {
0:         if (resource.isColumnFamilyLevel() && resource.getKeyspace() == null)
0:             return DataResource.columnFamily(state.getKeyspace(), resource.getColumnFamily());
1:         return resource;
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
============================================================================