1:7536429: package org.apache.cassandra.stress.settings;
1:7536429: /*
1:7536429:  * 
1:7536429:  * Licensed to the Apache Software Foundation (ASF) under one
1:7536429:  * or more contributor license agreements.  See the NOTICE file
1:7536429:  * distributed with this work for additional information
1:7536429:  * regarding copyright ownership.  The ASF licenses this file
1:7536429:  * to you under the Apache License, Version 2.0 (the
1:7536429:  * "License"); you may not use this file except in compliance
1:7536429:  * with the License.  You may obtain a copy of the License at
1:7536429:  * 
1:7536429:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7536429:  * 
1:7536429:  * Unless required by applicable law or agreed to in writing,
1:7536429:  * software distributed under the License is distributed on an
1:7536429:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7536429:  * KIND, either express or implied.  See the License for the
1:7536429:  * specific language governing permissions and limitations
1:7536429:  * under the License.
1:7536429:  * 
1:7536429:  */
7:7536429: 
1:0580fb2: 
1:7536429: import java.io.File;
1:aca80da: import java.net.URI;
1:73b2dcc: import java.util.Arrays;
1:3bee990: import java.util.Collections;
1:7536429: import java.util.List;
1:24f6f03: import java.util.Map;
1:7536429: 
1:7536429: import org.apache.cassandra.stress.Operation;
1:7536429: import org.apache.cassandra.stress.StressProfile;
1:7536429: import org.apache.cassandra.stress.generate.DistributionFactory;
1:7536429: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:0580fb2: import org.apache.cassandra.stress.generate.SeedManager;
1:f27ab29: import org.apache.cassandra.stress.generate.TokenRangeIterator;
1:7536429: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1:7536429: import org.apache.cassandra.stress.operations.SampledOpDistributionFactory;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:24f6f03: 
1:7536429: // Settings unique to the mixed command type
1:7536429: public class SettingsCommandUser extends SettingsCommand
1:7536429: {
1:232e12b: 
1:7536429:     // Ratios for selecting commands - index for each Command, NaN indicates the command is not requested
1:24f6f03:     private final Map<String, Double> ratios;
1:7536429:     private final DistributionFactory clustering;
1:7536429:     public final StressProfile profile;
1:938faa2:     private final Options options;
1:7536429: 
1:7536429:     public SettingsCommandUser(Options options)
1:7536429:     {
1:7536429:         super(Command.USER, options.parent);
1:7536429: 
1:938faa2:         this.options = options;
1:7536429:         clustering = options.clustering.get();
1:7536429:         ratios = options.ops.ratios();
1:7536429: 
1:aca80da:         String yamlPath = options.profile.value();
1:aca80da:         File yamlFile = new File(yamlPath);
1:b876424:         profile = StressProfile.load(yamlFile.exists() ? yamlFile.toURI() : URI.create(yamlPath));
1:7536429: 
1:7536429:         if (ratios.size() == 0)
1:7536429:             throw new IllegalArgumentException("Must specify at least one command with a non-zero ratio");
1:7536429:     }
1:7536429: 
1:29ff2d2:     public boolean hasInsertOnly()
1:29ff2d2:     {
1:29ff2d2:         return ratios.size() == 1 && ratios.containsKey("insert");
1:29ff2d2:     }
1:7536429: 
1:7536429:     public OpDistributionFactory getFactory(final StressSettings settings)
1:7536429:     {
1:0580fb2:         final SeedManager seeds = new SeedManager(settings);
1:f27ab29:         final TokenRangeIterator tokenRangeIterator = profile.tokenRangeQueries.isEmpty()
1:f27ab29:                                                       ? null
1:f27ab29:                                                       : new TokenRangeIterator(settings,
1:f27ab29:                                                                                profile.maybeLoadTokenRanges(settings));
1:f27ab29: 
1:7536429:         return new SampledOpDistributionFactory<String>(ratios, clustering)
1:7536429:         {
1:f27ab29:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, String key, boolean isWarmup)
1:7536429:             {
1:7536429:                 if (key.equalsIgnoreCase("insert"))
1:3bee990:                     return Collections.singletonList(profile.getInsert(timer, generator, seeds, settings));
1:3bee990:                 if (key.equalsIgnoreCase("validate"))
1:3bee990:                     return profile.getValidate(timer, generator, seeds, settings);
1:f27ab29: 
1:f27ab29:                 if (profile.tokenRangeQueries.containsKey(key))
1:f27ab29:                     return Collections.singletonList(profile.getBulkReadQueries(key, timer, settings, tokenRangeIterator, isWarmup));
1:f27ab29: 
1:f27ab29:                 return Collections.singletonList(profile.getQuery(key, timer, generator, seeds, settings, isWarmup));
1:7536429:             }
1:232e12b: 
1:7536429:             protected PartitionGenerator newGenerator()
1:7536429:             {
1:6c579a0:                 return profile.newGenerator(settings);
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:232e12b: 
1:6bbfb55:     public void truncateTables(StressSettings settings)
1:6bbfb55:     {
1:6bbfb55:         profile.truncateTable(settings);
1:6bbfb55:     }
1:6bbfb55: 
1:7536429:     static final class Options extends GroupedOptions
1:7536429:     {
1:7536429:         final SettingsCommand.Options parent;
1:7536429:         protected Options(SettingsCommand.Options parent)
1:7536429:         {
1:7536429:             this.parent = parent;
1:7536429:         }
1:0580fb2:         final OptionDistribution clustering = new OptionDistribution("clustering=", "gaussian(1..10)", "Distribution clustering runs of operations of the same kind");
1:73b2dcc:         final OptionSimple profile = new OptionSimple("profile=", ".*", null, "Specify the path to a yaml cql3 profile", true);
1:7536429:         final OptionAnyProbabilities ops = new OptionAnyProbabilities("ops", "Specify the ratios for inserts/queries to perform; e.g. ops(insert=2,<query1>=1) will perform 2 inserts for each query1");
1:24f6f03: 
1:7536429:         @Override
1:7536429:         public List<? extends Option> options()
1:7536429:         {
1:73b2dcc:             return merge(Arrays.asList(ops, profile, clustering), parent.options());
1:7536429:         }
1:7536429:     }
1:7536429: 
1:7536429:     // CLI utility methods
1:7536429: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         super.printSettings(out);
1:938faa2:         out.printf("  Command Ratios: %s%n", ratios);
1:938faa2:         out.printf("  Command Clustering Distribution: %s%n", options.clustering.getOptionAsString());
1:938faa2:         out.printf("  Profile File: %s%n", options.profile.value());
1:938faa2:         // profile.noSettings(out);
1:938faa2:     }
1:938faa2: 
1:938faa2: 
1:7536429:     public static SettingsCommandUser build(String[] params)
1:7536429:     {
1:7536429:         GroupedOptions options = GroupedOptions.select(params,
1:7536429:                 new Options(new Uncertainty()),
1:530c9f5:                 new Options(new Duration()),
2:7536429:                 new Options(new Count()));
1:7536429:         if (options == null)
1:7536429:         {
1:7536429:             printHelp();
1:7536429:             System.out.println("Invalid USER options provided, see output for valid options");
1:7536429:             System.exit(1);
1:7536429:         }
1:7536429:         return new SettingsCommandUser((Options) options);
1:7536429:     }
1:7536429: 
1:7536429:     public static void printHelp()
1:7536429:     {
1:7536429:         GroupedOptions.printOptions(System.out, "user",
1:7536429:                                     new Options(new Uncertainty()),
1:530c9f5:                                     new Options(new Count()),
1:530c9f5:                                     new Options(new Duration()));
1:7536429:     }
1:7536429: 
1:7536429:     public static Runnable helpPrinter()
1:7536429:     {
1:7536429:         return new Runnable()
1:7536429:         {
1:7536429:             @Override
1:7536429:             public void run()
1:7536429:             {
1:7536429:                 printHelp();
1:7536429:             }
1:7536429:         };
1:7536429:     }
1:7536429: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
/////////////////////////////////////////////////////////////////////////
1:     private final Options options;
1:         this.options = options;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         super.printSettings(out);
1:         out.printf("  Command Ratios: %s%n", ratios);
1:         out.printf("  Command Clustering Distribution: %s%n", options.clustering.getOptionAsString());
1:         out.printf("  Profile File: %s%n", options.profile.value());
1:         // profile.noSettings(out);
1:     }
1: 
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.generate.TokenRangeIterator;
/////////////////////////////////////////////////////////////////////////
1:         final TokenRangeIterator tokenRangeIterator = profile.tokenRangeQueries.isEmpty()
1:                                                       ? null
1:                                                       : new TokenRangeIterator(settings,
1:                                                                                profile.maybeLoadTokenRanges(settings));
1: 
1:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, String key, boolean isWarmup)
1: 
1:                 if (profile.tokenRangeQueries.containsKey(key))
1:                     return Collections.singletonList(profile.getBulkReadQueries(key, timer, settings, tokenRangeIterator, isWarmup));
1: 
1:                 return Collections.singletonList(profile.getQuery(key, timer, generator, seeds, settings, isWarmup));
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.generate.TokenRangeIterator;
/////////////////////////////////////////////////////////////////////////
0:         final TokenRangeIterator tokenRangeIterator = profile.tokenRangeQueries.isEmpty()
0:                                                       ? null
0:                                                       : new TokenRangeIterator(settings,
0:                                                                                profile.maybeLoadTokenRanges(settings));
1: 
0:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, String key, boolean isWarmup)
1: 
0:                 if (profile.tokenRangeQueries.containsKey(key))
0:                     return Collections.singletonList(profile.getBulkReadQueries(key, timer, settings, tokenRangeIterator, isWarmup));
1: 
0:                 return Collections.singletonList(profile.getQuery(key, timer, generator, seeds, settings, isWarmup));
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:b876424
/////////////////////////////////////////////////////////////////////////
1:         profile = StressProfile.load(yamlFile.exists() ? yamlFile.toURI() : URI.create(yamlPath));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:3bee990
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0:             protected List<? extends Operation> get(Timer timer, PartitionGenerator generator, String key)
1:                     return Collections.singletonList(profile.getInsert(timer, generator, seeds, settings));
1:                 if (key.equalsIgnoreCase("validate"))
1:                     return profile.getValidate(timer, generator, seeds, settings);
0:                 return Collections.singletonList(profile.getQuery(key, timer, generator, seeds, settings));
commit:6bbfb55
/////////////////////////////////////////////////////////////////////////
1:     public void truncateTables(StressSettings settings)
1:     {
1:         profile.truncateTable(settings);
1:     }
1: 
commit:6c579a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     return profile.getInsert(timer, generator, seeds, settings);
0:                 return profile.getQuery(key, timer, generator, seeds, settings);
1:                 return profile.newGenerator(settings);
commit:73b2dcc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.Comparator;
/////////////////////////////////////////////////////////////////////////
1:         final OptionSimple profile = new OptionSimple("profile=", ".*", null, "Specify the path to a yaml cql3 profile", true);
1:             return merge(Arrays.asList(ops, profile, clustering), parent.options());
commit:530c9f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 new Options(new Duration()),
/////////////////////////////////////////////////////////////////////////
1:                                     new Options(new Count()),
1:                                     new Options(new Duration()));
commit:77d0c17
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.ImmutableList;
1: 
0: import com.datastax.driver.core.BatchStatement;
1: import org.apache.cassandra.stress.generate.SeedManager;
/////////////////////////////////////////////////////////////////////////
1:         final SeedManager seeds = new SeedManager(settings);
/////////////////////////////////////////////////////////////////////////
0:                 return profile.newGenerator(settings, seeds);
/////////////////////////////////////////////////////////////////////////
1:         final OptionDistribution clustering = new OptionDistribution("clustering=", "gaussian(1..10)", "Distribution clustering runs of operations of the same kind");
0:             return ImmutableList.<Option>builder().add(ops, clustering, profile).addAll(parent.options()).build();
commit:24f6f03
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.math3.util.Pair;
1: 
1:     private final Map<String, Double> ratios;
/////////////////////////////////////////////////////////////////////////
0:         final List<Pair<String,Double>> mathPairs = new ArrayList<>();
0:         for (Map.Entry entry: ratios.entrySet())
0:             mathPairs.add(new Pair(entry.getKey(), entry.getValue()));
1: 
0:         return new SampledOpDistributionFactory<String>(mathPairs, clustering)
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.io.File;
0: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.commons.math3.util.Pair;
1: 
1: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.StressProfile;
1: import org.apache.cassandra.stress.generate.DistributionFactory;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.operations.OpDistributionFactory;
1: import org.apache.cassandra.stress.operations.SampledOpDistributionFactory;
0: import org.apache.cassandra.stress.util.Timer;
1: 
1: // Settings unique to the mixed command type
1: public class SettingsCommandUser extends SettingsCommand
1: {
1: 
1:     // Ratios for selecting commands - index for each Command, NaN indicates the command is not requested
0:     private final List<Pair<String, Double>> ratios;
1:     private final DistributionFactory clustering;
1:     public final StressProfile profile;
1: 
1:     public SettingsCommandUser(Options options)
1:     {
1:         super(Command.USER, options.parent);
1: 
1:         clustering = options.clustering.get();
1:         ratios = options.ops.ratios();
0:         profile = StressProfile.load(new File(options.profile.value()));
1: 
1:         if (ratios.size() == 0)
1:             throw new IllegalArgumentException("Must specify at least one command with a non-zero ratio");
1:     }
1: 
1:     public OpDistributionFactory getFactory(final StressSettings settings)
1:     {
1:         return new SampledOpDistributionFactory<String>(ratios, clustering)
1:         {
0:             protected Operation get(Timer timer, PartitionGenerator generator, String key)
1:             {
1:                 if (key.equalsIgnoreCase("insert"))
0:                     return profile.getInsert(timer, generator, settings);
0:                 return profile.getQuery(key, timer, generator, settings);
1:             }
1: 
1:             protected PartitionGenerator newGenerator()
1:             {
0:                 return profile.newGenerator(settings);
1:             }
1:         };
1:     }
1: 
1:     static final class Options extends GroupedOptions
1:     {
1:         final SettingsCommand.Options parent;
1:         protected Options(SettingsCommand.Options parent)
1:         {
1:             this.parent = parent;
1:         }
0:         final OptionDistribution clustering = new OptionDistribution("clustering=", "GAUSSIAN(1..10)", "Distribution clustering runs of operations of the same kind");
0:         final OptionSimple profile = new OptionSimple("profile=", ".*", null, "Specify the path to a yaml cql3 profile", false);
1:         final OptionAnyProbabilities ops = new OptionAnyProbabilities("ops", "Specify the ratios for inserts/queries to perform; e.g. ops(insert=2,<query1>=1) will perform 2 inserts for each query1");
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
0:             final List<Option> options = new ArrayList<>();
0:             options.add(clustering);
0:             options.add(ops);
0:             options.add(profile);
0:             options.addAll(parent.options());
0:             return options;
1:         }
1: 
1:     }
1: 
1:     // CLI utility methods
1: 
1:     public static SettingsCommandUser build(String[] params)
1:     {
1:         GroupedOptions options = GroupedOptions.select(params,
1:                 new Options(new Uncertainty()),
1:                 new Options(new Count()));
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid USER options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsCommandUser((Options) options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "user",
1:                                     new Options(new Uncertainty()),
1:                                     new Options(new Count()));
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 printHelp();
1:             }
1:         };
1:     }
1: }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:29ff2d2
/////////////////////////////////////////////////////////////////////////
1:     public boolean hasInsertOnly()
1:     {
1:         return ratios.size() == 1 && ratios.containsKey("insert");
1:     }
0: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:aca80da
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0: 
1:         String yamlPath = options.profile.value();
1:         File yamlFile = new File(yamlPath);
0:         if (yamlFile.exists())
0:         {
0:             yamlPath = "file:///" + yamlFile.getAbsolutePath();
0:         }
0: 
0:         profile = StressProfile.load(URI.create(yamlPath));
============================================================================