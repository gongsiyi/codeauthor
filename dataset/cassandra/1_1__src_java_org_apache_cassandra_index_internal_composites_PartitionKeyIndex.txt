1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
1:0626be8: 
1:0626be8: import java.nio.ByteBuffer;
1:0626be8: 
1:0626be8: import org.apache.cassandra.db.*;
1:0626be8: import org.apache.cassandra.db.marshal.CompositeType;
1:0626be8: import org.apache.cassandra.db.rows.CellPath;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: import org.apache.cassandra.index.internal.CassandraIndex;
1:0626be8: import org.apache.cassandra.index.internal.IndexEntry;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Index on a PARTITION_KEY column definition.
1:0626be8:  *
1:0626be8:  * This suppose a composite row key:
1:0626be8:  *   rk = rk_0 ... rk_n
1:0626be8:  *
1:0626be8:  * The corresponding index entry will be:
1:0626be8:  *   - index row key will be rk_i (where i == columnDef.componentIndex)
1:0626be8:  *   - cell name will be: rk ck
1:0626be8:  *     where rk is the fully partition key and ck the clustering keys of the
1:0626be8:  *     original cell names (thus excluding the last column name as we want to refer to
1:0626be8:  *     the whole CQL3 row, not just the cell itself)
1:0626be8:  *
1:0626be8:  * Note that contrarily to other type of index, we repeat the indexed value in
1:0626be8:  * the index cell name (we use the whole partition key). The reason is that we
1:0626be8:  * want to order the index cell name by partitioner first, and skipping a part
1:0626be8:  * of the row key would change the order.
1:0626be8:  */
1:0626be8: public class PartitionKeyIndex extends CassandraIndex
1:0626be8: {
1:0626be8:     public PartitionKeyIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:0626be8:                                       Clustering clustering,
1:0626be8:                                       CellPath path,
1:0626be8:                                       ByteBuffer cellValue)
1:0626be8:     {
1:0626be8:         CompositeType keyComparator = (CompositeType)baseCfs.metadata.getKeyValidator();
1:0626be8:         ByteBuffer[] components = keyComparator.split(partitionKey);
1:0626be8:         return components[indexedColumn.position()];
1:0626be8:     }
1:0626be8: 
1:0626be8:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:0626be8:                                                ClusteringPrefix prefix,
1:0626be8:                                                CellPath path)
1:0626be8:     {
1:0626be8:         CBuilder builder = CBuilder.create(getIndexComparator());
1:0626be8:         builder.add(partitionKey);
1:0626be8:         for (int i = 0; i < prefix.size(); i++)
1:0626be8:             builder.add(prefix.get(i));
1:0626be8:         return builder;
1:0626be8:     }
1:0626be8: 
1:0626be8:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:0626be8:     {
1:0626be8:         int ckCount = baseCfs.metadata.clusteringColumns().size();
1:0626be8:         Clustering clustering = indexEntry.clustering();
1:0626be8:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:0626be8:         for (int i = 0; i < ckCount; i++)
1:0626be8:             builder.add(clustering.get(i + 1));
1:0626be8: 
1:0626be8:         return new IndexEntry(indexedValue,
1:0626be8:                               clustering,
1:0626be8:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:0626be8:                               clustering.get(0),
1:0626be8:                               builder.build());
1:0626be8:     }
1:0626be8: 
1:0626be8:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:0626be8:     {
1:0626be8:         return !data.hasLiveData(nowInSec);
1:0626be8:     }
1:0626be8: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.internal.composites;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.CompositeType;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.internal.IndexEntry;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: /**
1:  * Index on a PARTITION_KEY column definition.
1:  *
1:  * This suppose a composite row key:
1:  *   rk = rk_0 ... rk_n
1:  *
1:  * The corresponding index entry will be:
1:  *   - index row key will be rk_i (where i == columnDef.componentIndex)
1:  *   - cell name will be: rk ck
1:  *     where rk is the fully partition key and ck the clustering keys of the
1:  *     original cell names (thus excluding the last column name as we want to refer to
1:  *     the whole CQL3 row, not just the cell itself)
1:  *
1:  * Note that contrarily to other type of index, we repeat the indexed value in
1:  * the index cell name (we use the whole partition key). The reason is that we
1:  * want to order the index cell name by partitioner first, and skipping a part
1:  * of the row key would change the order.
1:  */
1: public class PartitionKeyIndex extends CassandraIndex
1: {
1:     public PartitionKeyIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:                                       Clustering clustering,
1:                                       CellPath path,
1:                                       ByteBuffer cellValue)
1:     {
1:         CompositeType keyComparator = (CompositeType)baseCfs.metadata.getKeyValidator();
1:         ByteBuffer[] components = keyComparator.split(partitionKey);
1:         return components[indexedColumn.position()];
1:     }
1: 
1:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:                                                ClusteringPrefix prefix,
1:                                                CellPath path)
1:     {
1:         CBuilder builder = CBuilder.create(getIndexComparator());
1:         builder.add(partitionKey);
1:         for (int i = 0; i < prefix.size(); i++)
1:             builder.add(prefix.get(i));
1:         return builder;
1:     }
1: 
1:     public IndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry)
1:     {
1:         int ckCount = baseCfs.metadata.clusteringColumns().size();
1:         Clustering clustering = indexEntry.clustering();
1:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:         for (int i = 0; i < ckCount; i++)
1:             builder.add(clustering.get(i + 1));
1: 
1:         return new IndexEntry(indexedValue,
1:                               clustering,
1:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:                               clustering.get(0),
1:                               builder.build());
1:     }
1: 
1:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:     {
1:         return !data.hasLiveData(nowInSec);
1:     }
1: }
============================================================================