1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3.functions;
1:31e669a: 
1:31e669a: import java.nio.ByteBuffer;
1:31e669a: import java.util.ArrayList;
1:31e669a: import java.util.List;
1:5a4253b: import java.util.stream.Collectors;
1:31e669a: 
1:37e9bce: import org.apache.cassandra.cql3.*;
1:48f6446: import org.apache.cassandra.cql3.statements.RequestValidations;
1:cb5897f: import org.apache.cassandra.db.marshal.*;
1:31e669a: import org.apache.cassandra.exceptions.InvalidRequestException;
1:b70eaf3: import org.apache.cassandra.serializers.MarshalException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:b70eaf3: import org.apache.cassandra.utils.ByteBufferUtil;
1:31e669a: 
1:31e669a: public class FunctionCall extends Term.NonTerminal
1:31e669a: {
1:0cad81a:     private final ScalarFunction fun;
1:31e669a:     private final List<Term> terms;
1:31e669a: 
1:0cad81a:     private FunctionCall(ScalarFunction fun, List<Term> terms)
1:31e669a:     {
1:31e669a:         this.fun = fun;
1:31e669a:         this.terms = terms;
1:31e669a:     }
1:b70eaf3: 
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:b70eaf3:     {
1:89464ea:         Terms.addFunctions(terms, functions);
1:89464ea:         fun.addFunctionsTo(functions);
1:b70eaf3:     }
1:31e669a: 
1:37e9bce:     public void collectMarkerSpecification(VariableSpecifications boundNames)
1:ce4e4b9:     {
1:31e669a:         for (Term t : terms)
1:31e669a:             t.collectMarkerSpecification(boundNames);
1:ef57456:     }
1:31e669a: 
1:9872b74:     public Term.Terminal bind(QueryOptions options) throws InvalidRequestException
1:ef57456:     {
1:9872b74:         return makeTerminal(fun, bindAndGet(options), options.getProtocolVersion());
1:31e669a:     }
1:31e669a: 
1:9872b74:     public ByteBuffer bindAndGet(QueryOptions options) throws InvalidRequestException
1:31e669a:     {
1:b4d7f3b:         List<ByteBuffer> buffers = new ArrayList<>(terms.size());
1:31e669a:         for (Term t : terms)
1:31e669a:         {
1:48f6446:             ByteBuffer functionArg = t.bindAndGet(options);
1:48f6446:             RequestValidations.checkBindValueSet(functionArg, "Invalid unset value for argument in call to function %s", fun.name().name);
1:48f6446:             buffers.add(functionArg);
1:31e669a:         }
1:794d68b:         return executeInternal(options.getProtocolVersion(), fun, buffers);
1:31e669a:     }
1:31e669a: 
1:e0adc16:     private static ByteBuffer executeInternal(ProtocolVersion protocolVersion, ScalarFunction fun, List<ByteBuffer> params) throws InvalidRequestException
1:31e669a:     {
1:794d68b:         ByteBuffer result = fun.execute(protocolVersion, params);
1:b70eaf3:         try
1:b70eaf3:         {
1:b70eaf3:             // Check the method didn't lied on it's declared return type
1:b70eaf3:             if (result != null)
1:b70eaf3:                 fun.returnType().validate(result);
1:b70eaf3:             return result;
1:b70eaf3:         }
1:b70eaf3:         catch (MarshalException e)
1:b70eaf3:         {
1:b70eaf3:             throw new RuntimeException(String.format("Return of function %s (%s) is not a valid value for its declared return type %s",
1:c7b02d1:                                                      fun, ByteBufferUtil.bytesToHex(result), fun.returnType().asCQL3Type()), e);
1:b70eaf3:         }
1:31e669a:     }
1:31e669a: 
1:ce4e4b9:     public boolean containsBindMarker()
1:ce4e4b9:     {
1:ce4e4b9:         for (Term t : terms)
1:31e669a:         {
1:ce4e4b9:             if (t.containsBindMarker())
1:ce4e4b9:                 return true;
1:ce4e4b9:         }
1:ce4e4b9:         return false;
1:ce4e4b9:     }
1:ce4e4b9: 
1:e0adc16:     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result, ProtocolVersion version) throws InvalidRequestException
1:31e669a:     {
1:677230d:         if (fun.returnType().isCollection())
1:31e669a:         {
1:677230d:             switch (((CollectionType) fun.returnType()).kind)
1:31e669a:             {
1:677230d:                 case LIST:
1:677230d:                     return Lists.Value.fromSerialized(result, (ListType) fun.returnType(), version);
1:677230d:                 case SET:
1:677230d:                     return Sets.Value.fromSerialized(result, (SetType) fun.returnType(), version);
1:677230d:                 case MAP:
1:677230d:                     return Maps.Value.fromSerialized(result, (MapType) fun.returnType(), version);
1:31e669a:             }
1:31e669a:         }
1:677230d:         else if (fun.returnType().isUDT())
1:31e669a:         {
1:677230d:             return UserTypes.Value.fromSerialized(result, (UserType) fun.returnType());
1:31e669a:         }
1:31e669a: 
1:31e669a:         return new Constants.Value(result);
1:31e669a:     }
1:31e669a: 
1:5a4253b:     public static class Raw extends Term.Raw
1:31e669a:     {
1:b4d7f3b:         private FunctionName name;
1:31e669a:         private final List<Term.Raw> terms;
1:31e669a: 
1:44fa12e:         public Raw(FunctionName name, List<Term.Raw> terms)
1:31e669a:         {
1:44fa12e:             this.name = name;
1:31e669a:             this.terms = terms;
1:31e669a:         }
1:31e669a: 
1:d63d07b:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:31e669a:         {
1:3566843:             Function fun = FunctionResolver.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
2:25411bf:             if (fun == null)
1:44fa12e:                 throw new InvalidRequestException(String.format("Unknown function %s called", name));
1:0cad81a:             if (fun.isAggregate())
1:0cad81a:                 throw new InvalidRequestException("Aggregation function are not supported in the where clause");
1:31e669a: 
1:0cad81a:             ScalarFunction scalarFun = (ScalarFunction) fun;
1:0cad81a: 
1:44fa12e:             // Functions.get() will complain if no function "name" type check with the provided arguments.
1:44fa12e:             // We still have to validate that the return type matches however
1:1de8e39:             if (!scalarFun.testAssignment(keyspace, receiver).isAssignable())
1:44fa12e:                 throw new InvalidRequestException(String.format("Type error: cannot assign result of function %s (type %s) to %s (type %s)",
1:0cad81a:                                                                 scalarFun.name(), scalarFun.returnType().asCQL3Type(),
1:44fa12e:                                                                 receiver.name, receiver.type.asCQL3Type()));
1:677230d: 
1:85401dc:             if (fun.argTypes().size() != terms.size())
1:85401dc:                 throw new InvalidRequestException(String.format("Incorrect number of arguments specified for function %s (expected %d, found %d)",
1:c7b02d1:                                                                 fun, fun.argTypes().size(), terms.size()));
1:c7b02d1: 
1:b4d7f3b:             List<Term> parameters = new ArrayList<>(terms.size());
2:31e669a:             for (int i = 0; i < terms.size(); i++)
1:31e669a:             {
1:3566843:                 Term t = terms.get(i).prepare(keyspace, FunctionResolver.makeArgSpec(receiver.ksName, receiver.cfName, scalarFun, i));
1:31e669a:                 parameters.add(t);
1:31e669a:             }
1:31e669a: 
1:7d68ced:             return new FunctionCall(scalarFun, parameters);
1:31e669a:         }
1:31e669a: 
1:44fa12e:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:31e669a:         {
1:44fa12e:             // Note: Functions.get() will return null if the function doesn't exist, or throw is no function matching
1:44fa12e:             // the arguments can be found. We may get one of those if an undefined/wrong function is used as argument
1:44fa12e:             // of another, existing, function. In that case, we return true here because we'll throw a proper exception
1:44fa12e:             // later with a more helpful error message that if we were to return false here.
1:44fa12e:             try
1:44fa12e:             {
1:3566843:                 Function fun = FunctionResolver.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
1:31e669a: 
1:c7b02d1:                 // Because fromJson() can return whatever type the receiver is, we'll always get EXACT_MATCH.  To
1:c7b02d1:                 // handle potentially ambiguous function calls with fromJson() as an argument, always return
1:c7b02d1:                 // WEAKLY_ASSIGNABLE to force the user to typecast if necessary
1:c7b02d1:                 if (fun != null && fun.name().equals(FromJsonFct.NAME))
1:c7b02d1:                     return TestResult.WEAKLY_ASSIGNABLE;
1:31e669a: 
1:44fa12e:                 if (fun != null && receiver.type.equals(fun.returnType()))
1:44fa12e:                     return AssignmentTestable.TestResult.EXACT_MATCH;
1:44fa12e:                 else if (fun == null || receiver.type.isValueCompatibleWith(fun.returnType()))
1:44fa12e:                     return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:44fa12e:                 else
1:44fa12e:                     return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:44fa12e:             }
1:44fa12e:             catch (InvalidRequestException e)
1:44fa12e:             {
1:44fa12e:                 return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:44fa12e:             }
1:31e669a:         }
1:c7b02d1: 
1:4ed0060:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:4ed0060:         {
1:4ed0060:             // We could implement this, but the method is only used in selection clause, where FunctionCall is not used 
1:4ed0060:             // we use a Selectable.WithFunction instead). And if that method is later used in other places, better to
1:4ed0060:             // let that future patch make sure this can be implemented properly (note in particular we don't have access
1:4ed0060:             // to the receiver type, which FunctionResolver.get() takes) rather than provide an implementation that may
1:4ed0060:             // not work in all cases.
1:4ed0060:             throw new UnsupportedOperationException();
1:4ed0060:         }
1:4ed0060: 
1:5a4253b:         public String getText()
1:31e669a:         {
1:5a4253b:             return name + terms.stream().map(Term.Raw::getText).collect(Collectors.joining(", ", "(", ")"));
1:31e669a:         }
1:31e669a:     }
1:31e669a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     private static ByteBuffer executeInternal(ProtocolVersion protocolVersion, ScalarFunction fun, List<ByteBuffer> params) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result, ProtocolVersion version) throws InvalidRequestException
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:         {
1:             // We could implement this, but the method is only used in selection clause, where FunctionCall is not used 
1:             // we use a Selectable.WithFunction instead). And if that method is later used in other places, better to
1:             // let that future patch make sure this can be implemented properly (note in particular we don't have access
1:             // to the receiver type, which FunctionResolver.get() takes) rather than provide an implementation that may
1:             // not work in all cases.
1:             throw new UnsupportedOperationException();
1:         }
1: 
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         private final FunctionName name;
1:         public Raw(FunctionName name, List<Term.Raw> terms)
1:             this.name = name;
0:             Function fun = Functions.get(keyspace, name, terms, receiver.ksName, receiver.cfName);
1:                 throw new InvalidRequestException(String.format("Unknown function %s called", name));
1:             // Functions.get() will complain if no function "name" type check with the provided arguments.
1:             // We still have to validate that the return type matches however
0:             if (!receiver.type.isValueCompatibleWith(fun.returnType()))
1:                 throw new InvalidRequestException(String.format("Type error: cannot assign result of function %s (type %s) to %s (type %s)",
0:                                                                 fun.name(), fun.returnType().asCQL3Type(),
1:                                                                 receiver.name, receiver.type.asCQL3Type()));
0:                 Term t = terms.get(i).prepare(keyspace, Functions.makeArgSpec(receiver.ksName, receiver.cfName, fun, i));
/////////////////////////////////////////////////////////////////////////
1:         public AssignmentTestable.TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:             // Note: Functions.get() will return null if the function doesn't exist, or throw is no function matching
1:             // the arguments can be found. We may get one of those if an undefined/wrong function is used as argument
1:             // of another, existing, function. In that case, we return true here because we'll throw a proper exception
1:             // later with a more helpful error message that if we were to return false here.
1:             try
1:             {
0:                 Function fun = Functions.get(keyspace, name, terms, receiver.ksName, receiver.cfName);
1:                 if (fun != null && receiver.type.equals(fun.returnType()))
1:                     return AssignmentTestable.TestResult.EXACT_MATCH;
1:                 else if (fun == null || receiver.type.isValueCompatibleWith(fun.returnType()))
1:                     return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:                 else
1:                     return AssignmentTestable.TestResult.NOT_ASSIGNABLE;
1:             }
1:             catch (InvalidRequestException e)
1:             {
1:                 return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
1:             }
0:             sb.append(name).append("(");
commit:b70eaf3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:         return executeInternal(fun, buffers);
1:     }
0:     private static ByteBuffer executeInternal(Function fun, List<ByteBuffer> params) throws InvalidRequestException
1:     {
0:         ByteBuffer result = fun.execute(params);
1:         try
1:         {
1:             // Check the method didn't lied on it's declared return type
1:             if (result != null)
1:                 fun.returnType().validate(result);
1:             return result;
1:         }
1:         catch (MarshalException e)
1:         {
1:             throw new RuntimeException(String.format("Return of function %s (%s) is not a valid value for its declared return type %s", 
0:                                                      fun, ByteBufferUtil.bytesToHex(result), fun.returnType().asCQL3Type()));
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
0:             return executeInternal(fun, buffers);
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1:     public Term.Terminal bind(QueryOptions options) throws InvalidRequestException
1:         return makeTerminal(fun, bindAndGet(options), options.getProtocolVersion());
1:     public ByteBuffer bindAndGet(QueryOptions options) throws InvalidRequestException
0:             ByteBuffer val = t.bindAndGet(options);
/////////////////////////////////////////////////////////////////////////
0:     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result, int version) throws InvalidRequestException
0:             case LIST: return Lists.Value.fromSerialized(result, (ListType)fun.returnType(), version);
0:             case SET:  return Sets.Value.fromSerialized(result, (SetType)fun.returnType(), version);
0:             case MAP:  return Maps.Value.fromSerialized(result, (MapType)fun.returnType(), version);
/////////////////////////////////////////////////////////////////////////
0:                 ? makeTerminal(fun, execute(fun, parameters), QueryOptions.DEFAULT.getProtocolVersion())
/////////////////////////////////////////////////////////////////////////
0:                 buffers.add(((Term.Terminal)t).get(QueryOptions.DEFAULT));
commit:d63d07b
/////////////////////////////////////////////////////////////////////////
1:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
0:             Function fun = Functions.get(keyspace, functionName, terms, receiver);
0:                 Term t = terms.get(i).prepare(keyspace, Functions.makeArgSpec(receiver, fun, i));
/////////////////////////////////////////////////////////////////////////
0:         public boolean isAssignableTo(String keyspace, ColumnSpecification receiver)
commit:37e9bce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.*;
/////////////////////////////////////////////////////////////////////////
1:     public void collectMarkerSpecification(VariableSpecifications boundNames)
commit:ce4e4b9
/////////////////////////////////////////////////////////////////////////
1:     public boolean containsBindMarker()
1:     {
1:         for (Term t : terms)
1:         {
1:             if (t.containsBindMarker())
1:                 return true;
1:         }
1:         return false;
1:     }
1: 
commit:b853630
/////////////////////////////////////////////////////////////////////////
0:             // If all parameters are terminal and the function is pure, we can
0:             // evaluate it now, otherwise we'd have to wait execution time
0:             return allTerminal && fun.isPure()
commit:b82027c
/////////////////////////////////////////////////////////////////////////
0:             // Note: if returnType == null, it means the function doesn't exist. We may get this if an undefined function
0:             // is used as argument of another, existing, function. In that case, we return true here because we'll catch
0:             // the fact that the method is undefined latter anyway and with a more helpful error message that if we were
0:             // to return false here.
0:             return returnType == null || receiver.type.asCQL3Type().equals(returnType.asCQL3Type());
commit:b72af48
/////////////////////////////////////////////////////////////////////////
0:             return receiver.type.asCQL3Type().equals(returnType.asCQL3Type());
commit:ef57456
/////////////////////////////////////////////////////////////////////////
1:         {
0:             // For now, we don't allow nulls as argument as no existing function needs it and it
0:             // simplify things.
0:             ByteBuffer val = t.bindAndGet(values);
0:             if (val == null)
0:                 throw new InvalidRequestException(String.format("Invalid null value for argument to %s", fun));
0:             buffers.add(val);
1:         }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.cassandra.cql3.ColumnIdentifier;
0: import org.apache.cassandra.cql3.ColumnSpecification;
0: import org.apache.cassandra.cql3.Constants;
0: import org.apache.cassandra.cql3.Lists;
0: import org.apache.cassandra.cql3.Maps;
0: import org.apache.cassandra.cql3.Sets;
0: import org.apache.cassandra.cql3.Term;
0: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.db.marshal.CollectionType;
0: import org.apache.cassandra.db.marshal.ListType;
0: import org.apache.cassandra.db.marshal.MapType;
0: import org.apache.cassandra.db.marshal.SetType;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: public class FunctionCall extends Term.NonTerminal
1: {
0:     private final Function fun;
1:     private final List<Term> terms;
1: 
0:     private FunctionCall(Function fun, List<Term> terms)
1:     {
1:         this.fun = fun;
1:         this.terms = terms;
1:     }
1: 
0:     public void collectMarkerSpecification(ColumnSpecification[] boundNames)
1:     {
1:         for (Term t : terms)
1:             t.collectMarkerSpecification(boundNames);
1:     }
1: 
0:     public Term.Terminal bind(List<ByteBuffer> values) throws InvalidRequestException
1:     {
0:         return makeTerminal(fun, bindAndGet(values));
1:     }
1: 
0:     public ByteBuffer bindAndGet(List<ByteBuffer> values) throws InvalidRequestException
1:     {
0:         List<ByteBuffer> buffers = new ArrayList<ByteBuffer>(terms.size());
1:         for (Term t : terms)
0:             buffers.add(t.bindAndGet(values));
1: 
0:         return fun.execute(buffers);
1:     }
1: 
0:     private static Term.Terminal makeTerminal(Function fun, ByteBuffer result) throws InvalidRequestException
1:     {
0:         if (!(fun.returnType() instanceof CollectionType))
1:             return new Constants.Value(result);
1: 
0:         switch (((CollectionType)fun.returnType()).kind)
1:         {
0:             case LIST: return Lists.Value.fromSerialized(result, (ListType)fun.returnType());
0:             case SET:  return Sets.Value.fromSerialized(result, (SetType)fun.returnType());
0:             case MAP:  return Maps.Value.fromSerialized(result, (MapType)fun.returnType());
1:         }
0:         throw new AssertionError();
1:     }
1: 
0:     public static class Raw implements Term.Raw
1:     {
0:         private final String functionName;
1:         private final List<Term.Raw> terms;
1: 
0:         public Raw(String functionName, List<Term.Raw> terms)
1:         {
0:             this.functionName = functionName;
1:             this.terms = terms;
1:         }
1: 
0:         public Term prepare(ColumnSpecification receiver) throws InvalidRequestException
1:         {
0:             Function fun = Functions.get(functionName, terms, receiver);
1: 
0:             List<Term> parameters = new ArrayList<Term>(terms.size());
0:             boolean allTerminal = true;
1:             for (int i = 0; i < terms.size(); i++)
1:             {
0:                 Term t = terms.get(i).prepare(Functions.makeArgSpec(receiver, fun, i));
0:                 if (t instanceof NonTerminal)
0:                     allTerminal = false;
1:                 parameters.add(t);
1:             }
1: 
0:             return allTerminal
0:                 ? makeTerminal(fun, execute(fun, parameters))
0:                 : new FunctionCall(fun, parameters);
1:         }
1: 
0:         // All parameters must be terminal
0:         private static ByteBuffer execute(Function fun, List<Term> parameters) throws InvalidRequestException
1:         {
0:             List<ByteBuffer> buffers = new ArrayList<ByteBuffer>(parameters.size());
0:             for (Term t : parameters)
1:             {
0:                 assert t instanceof Term.Terminal;
0:                 buffers.add(((Term.Terminal)t).get());
1:             }
0:             return fun.execute(buffers);
1:         }
1: 
0:         public boolean isAssignableTo(ColumnSpecification receiver)
1:         {
0:             AbstractType<?> returnType = Functions.getReturnType(functionName, receiver.ksName, receiver.cfName);
0:             return receiver.type.equals(returnType);
1:         }
1: 
0:         @Override
0:         public String toString()
1:         {
0:             StringBuilder sb = new StringBuilder();
0:             sb.append(functionName).append("(");
1:             for (int i = 0; i < terms.size(); i++)
1:             {
0:                 if (i > 0) sb.append(", ");
0:                 sb.append(terms.get(i));
1:             }
0:             return sb.append(")").toString();
1:         }
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void addFunctionsTo(List<Function> functions)
1:         Terms.addFunctions(terms, functions);
1:         fun.addFunctionsTo(functions);
commit:0cad81a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ScalarFunction fun;
1:     private FunctionCall(ScalarFunction fun, List<Term> terms)
/////////////////////////////////////////////////////////////////////////
0:     private static ByteBuffer executeInternal(ScalarFunction fun, List<ByteBuffer> params) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:             if (fun.isAggregate())
1:                 throw new InvalidRequestException("Aggregation function are not supported in the where clause");
1: 
1:             ScalarFunction scalarFun = (ScalarFunction) fun;
0:             if (!receiver.type.isValueCompatibleWith(scalarFun.returnType()))
1:                                                                 scalarFun.name(), scalarFun.returnType().asCQL3Type(),
/////////////////////////////////////////////////////////////////////////
0:                 Term t = terms.get(i).prepare(keyspace, Functions.makeArgSpec(receiver.ksName, receiver.cfName, scalarFun, i));
/////////////////////////////////////////////////////////////////////////
0:             return allTerminal && scalarFun.isPure()
0:                 ? makeTerminal(scalarFun, execute(scalarFun, parameters), QueryOptions.DEFAULT.getProtocolVersion())
0:                 : new FunctionCall(scalarFun, parameters);
0:         private static ByteBuffer execute(ScalarFunction fun, List<Term> parameters) throws InvalidRequestException
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1:         if (fun.returnType().isCollection())
1:             switch (((CollectionType) fun.returnType()).kind)
0:             {
1:                 case LIST:
1:                     return Lists.Value.fromSerialized(result, (ListType) fun.returnType(), version);
1:                 case SET:
1:                     return Sets.Value.fromSerialized(result, (SetType) fun.returnType(), version);
1:                 case MAP:
1:                     return Maps.Value.fromSerialized(result, (MapType) fun.returnType(), version);
0:             }
1:         else if (fun.returnType().isUDT())
0:         {
1:             return UserTypes.Value.fromSerialized(result, (UserType) fun.returnType());
0:         }
1: 
0:         return new Constants.Value(result);
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1:     public static class Raw extends Term.Raw
/////////////////////////////////////////////////////////////////////////
1:         public String getText()
1:             return name + terms.stream().map(Term.Raw::getText).collect(Collectors.joining(", ", "(", ")"));
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
0:             buffers.add(t.bindAndGet(options));
/////////////////////////////////////////////////////////////////////////
0:             throw new RuntimeException(String.format("Return of function %s (%s) is not a valid value for its declared return type %s",
1:                                                      fun, ByteBufferUtil.bytesToHex(result), fun.returnType().asCQL3Type()), e);
/////////////////////////////////////////////////////////////////////////
0:             Function fun = Functions.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
/////////////////////////////////////////////////////////////////////////
1:                                                                 fun, fun.argTypes().size(), terms.size()));
/////////////////////////////////////////////////////////////////////////
0:                 buffers.add(((Term.Terminal)t).get(QueryOptions.DEFAULT.getProtocolVersion()));
/////////////////////////////////////////////////////////////////////////
0:                 Function fun = Functions.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
1: 
1:                 // Because fromJson() can return whatever type the receiver is, we'll always get EXACT_MATCH.  To
1:                 // handle potentially ambiguous function calls with fromJson() as an argument, always return
1:                 // WEAKLY_ASSIGNABLE to force the user to typecast if necessary
1:                 if (fun != null && fun.name().equals(FromJsonFct.NAME))
1:                     return TestResult.WEAKLY_ASSIGNABLE;
1: 
commit:9dcdb8b
commit:9da742d
/////////////////////////////////////////////////////////////////////////
0:             return returnType == null || receiver.type.isValueCompatibleWith(returnType);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1:             Function fun = FunctionResolver.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
/////////////////////////////////////////////////////////////////////////
1:                 Term t = terms.get(i).prepare(keyspace, FunctionResolver.makeArgSpec(receiver.ksName, receiver.cfName, scalarFun, i));
/////////////////////////////////////////////////////////////////////////
1:                 Function fun = FunctionResolver.get(keyspace, name, terms, receiver.ksName, receiver.cfName, receiver.type);
commit:5205ce6
commit:491098e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:1a45fcb
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Objects;
0: 
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     public boolean equals(Object o)
0:     {
0:         if (this == o)
0:             return true;
0: 
0:         if (!(o instanceof FunctionCall))
0:             return false;
0: 
0:         FunctionCall fc = (FunctionCall) o;
0: 
0:         return Objects.equal(this.fun, fc.fun)
0:             && Objects.equal(this.terms, fc.terms);
0:     }
0: 
0:     @Override
0:     public int hashCode()
0:     {
0:         return Objects.hashCode(fun, terms);
0:     }
0: 
author:blerer
-------------------------------------------------------------------------------
commit:1de8e39
/////////////////////////////////////////////////////////////////////////
1:             if (!scalarFun.testAssignment(keyspace, receiver).isAssignable())
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Iterables;
0: 
1: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions()
0:     {
0:         return Iterables.concat(Terms.getFunctions(terms), fun.getFunctions());
0:     }
0: 
commit:7d68ced
/////////////////////////////////////////////////////////////////////////
1:             return new FunctionCall(scalarFun, parameters);
author:Oded Peer
-------------------------------------------------------------------------------
commit:48f6446
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.statements.RequestValidations;
/////////////////////////////////////////////////////////////////////////
0:         {
1:             ByteBuffer functionArg = t.bindAndGet(options);
1:             RequestValidations.checkBindValueSet(functionArg, "Invalid unset value for argument in call to function %s", fun.name().name);
1:             buffers.add(functionArg);
0:         }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:e2f35c7
/////////////////////////////////////////////////////////////////////////
0:         return fun.usesFunction(ksName, functionName);
commit:794d68b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.Server;
/////////////////////////////////////////////////////////////////////////
1:         return executeInternal(options.getProtocolVersion(), fun, buffers);
0:     private static ByteBuffer executeInternal(int protocolVersion, ScalarFunction fun, List<ByteBuffer> params) throws InvalidRequestException
1:         ByteBuffer result = fun.execute(protocolVersion, params);
/////////////////////////////////////////////////////////////////////////
0:             return executeInternal(Server.CURRENT_VERSION, fun, buffers);
commit:b4d7f3b
/////////////////////////////////////////////////////////////////////////
0:     public boolean usesFunction(String ksName, String functionName)
0:     {
0:         return fun.name().keyspace.equals(ksName) && fun.name().name.equals(functionName);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         List<ByteBuffer> buffers = new ArrayList<>(terms.size());
/////////////////////////////////////////////////////////////////////////
1:         private FunctionName name;
/////////////////////////////////////////////////////////////////////////
1:             List<Term> parameters = new ArrayList<>(terms.size());
/////////////////////////////////////////////////////////////////////////
0:             List<ByteBuffer> buffers = new ArrayList<>(parameters.size());
commit:25411bf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.udf.UDFunction;
0: import org.apache.cassandra.cql3.udf.UDFRegistry;
/////////////////////////////////////////////////////////////////////////
0:         private final String namespace;
0:         public Raw(String namespace, String functionName, List<Term.Raw> terms)
0:             this.namespace = namespace;
0:             Function fun = null;
0:             if (namespace.isEmpty())
0:                 fun = Functions.get(keyspace, functionName, terms, receiver);
0: 
1:             if (fun == null)
0:             {
0:                 UDFunction udf = UDFRegistry.resolveFunction(namespace, functionName, receiver.ksName, receiver.cfName, terms);
0:                 if (udf != null)
0:                     // got a user defined function to call
0:                     fun = udf.create(terms);
0:             }
0: 
1:             if (fun == null)
0:                 throw new InvalidRequestException(String.format("Unknown function %s called", namespace.isEmpty() ? functionName : namespace + "::" + functionName));
/////////////////////////////////////////////////////////////////////////
0:             if (!namespace.isEmpty())
0:                 sb.append(namespace).append("::");
0:                 if (i > 0)
0:                     sb.append(", ");
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:85401dc
/////////////////////////////////////////////////////////////////////////
1:             if (fun.argTypes().size() != terms.size())
1:                 throw new InvalidRequestException(String.format("Incorrect number of arguments specified for function %s (expected %d, found %d)",
0:                                                                 fun.name(), fun.argTypes().size(), terms.size()));
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
============================================================================