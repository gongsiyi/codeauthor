1:dbf6e62: /*
1:dbf6e62:  * Licensed to the Apache Software Foundation (ASF) under one
1:dbf6e62:  * or more contributor license agreements.  See the NOTICE file
1:dbf6e62:  * distributed with this work for additional information
1:dbf6e62:  * regarding copyright ownership.  The ASF licenses this file
1:dbf6e62:  * to you under the Apache License, Version 2.0 (the
1:dbf6e62:  * "License"); you may not use this file except in compliance
1:dbf6e62:  * with the License.  You may obtain a copy of the License at
1:dbf6e62:  *
1:dbf6e62:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dbf6e62:  *
1:dbf6e62:  * Unless required by applicable law or agreed to in writing, software
1:dbf6e62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dbf6e62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dbf6e62:  * See the License for the specific language governing permissions and
1:dbf6e62:  * limitations under the License.
1:dbf6e62:  */
1:dbf6e62: 
1:dbf6e62: package org.apache.cassandra.concurrent;
1:dbf6e62: 
1:dbf6e62: import org.apache.cassandra.service.ClientWarn;
1:dbf6e62: import org.apache.cassandra.tracing.Tracing;
1:dbf6e62: 
1:dbf6e62: public interface ExecutorLocal<T>
1:dbf6e62: {
1:dbf6e62:     ExecutorLocal[] all = { Tracing.instance, ClientWarn.instance };
1:dbf6e62: 
1:dbf6e62:     /**
1:fe7eee0:      * This is called when scheduling the task, and also before calling {@link #set(Object)} when running on a
1:dbf6e62:      * executor thread.
1:dbf6e62:      *
1:dbf6e62:      * @return The thread-local value that we want to copy across executor boundaries; may be null if not set.
1:dbf6e62:      */
1:dbf6e62:     T get();
1:dbf6e62: 
1:dbf6e62:     /**
1:dbf6e62:      * Before a task has been run, this will be called with the value from the thread that scheduled the task, and after
1:dbf6e62:      * the task is finished, the value that was previously retrieved from this thread is restored.
1:dbf6e62:      *
1:dbf6e62:      * @param value Value to use for the executor local state; may be null.
1:dbf6e62:      */
1:dbf6e62:     void set(T value);
1:dbf6e62: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:fe7eee0
/////////////////////////////////////////////////////////////////////////
1:      * This is called when scheduling the task, and also before calling {@link #set(Object)} when running on a
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:dbf6e62
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.concurrent;
1: 
1: import org.apache.cassandra.service.ClientWarn;
0: import org.apache.cassandra.tracing.TraceState;
1: import org.apache.cassandra.tracing.Tracing;
1: 
1: public interface ExecutorLocal<T>
1: {
1:     ExecutorLocal[] all = { Tracing.instance, ClientWarn.instance };
1: 
1:     /**
0:      * This is called when scheduling the task, and also before calling {@link ExecutorLocal#set(T)} when running on a
1:      * executor thread.
1:      *
1:      * @return The thread-local value that we want to copy across executor boundaries; may be null if not set.
1:      */
1:     T get();
1: 
1:     /**
1:      * Before a task has been run, this will be called with the value from the thread that scheduled the task, and after
1:      * the task is finished, the value that was previously retrieved from this thread is restored.
1:      *
1:      * @param value Value to use for the executor local state; may be null.
1:      */
1:     void set(T value);
1: }
============================================================================