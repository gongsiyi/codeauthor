1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
1:69cedbf: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:69cedbf: 
1:69cedbf: /**
1:69cedbf:  * Metrics related to Storage.
1:69cedbf:  */
1:69cedbf: public class StorageMetrics
1:69cedbf: {
1:eb390d0:     private static final MetricNameFactory factory = new DefaultNameFactory("Storage");
1:eb390d0: 
1:8896a70:     public static final Counter load = Metrics.counter(factory.createMetricName("Load"));
1:8896a70:     public static final Counter exceptions = Metrics.counter(factory.createMetricName("Exceptions"));
1:8896a70:     public static final Counter totalHintsInProgress  = Metrics.counter(factory.createMetricName("TotalHintsInProgress"));
1:8896a70:     public static final Counter totalHints = Metrics.counter(factory.createMetricName("TotalHints"));
1:69cedbf: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
/////////////////////////////////////////////////////////////////////////
1:     public static final Counter load = Metrics.counter(factory.createMetricName("Load"));
1:     public static final Counter exceptions = Metrics.counter(factory.createMetricName("Exceptions"));
1:     public static final Counter totalHintsInProgress  = Metrics.counter(factory.createMetricName("TotalHintsInProgress"));
1:     public static final Counter totalHints = Metrics.counter(factory.createMetricName("TotalHints"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
1:     private static final MetricNameFactory factory = new DefaultNameFactory("Storage");
1: 
0:     public static final Counter load = Metrics.newCounter(factory.createMetricName("Load"));
0:     public static final Counter exceptions = Metrics.newCounter(factory.createMetricName("Exceptions"));
0:     public static final Counter totalHintsInProgress  = Metrics.newCounter(factory.createMetricName("TotalHintsInProgress"));
0:     public static final Counter totalHints = Metrics.newCounter(factory.createMetricName("TotalHints"));
commit:0e18f23
/////////////////////////////////////////////////////////////////////////
0:     public static final Counter exceptions = Metrics.newCounter(new MetricName("org.apache.cassandra.metrics", "Storage", "Exceptions"));
0:     public static final Counter totalHintsInProgress  = Metrics.newCounter(new MetricName("org.apache.cassandra.metrics", "Storage", "TotalHintsInProgress"));
0:     public static final Counter totalHints = Metrics.newCounter(new MetricName("org.apache.cassandra.metrics", "Storage", "TotalHints"));
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.MetricName;
1: 
1: /**
1:  * Metrics related to Storage.
1:  */
1: public class StorageMetrics
1: {
0:     public static final Counter load = Metrics.newCounter(new MetricName("org.apache.cassandra.metrics", "Storage", "Load"));
1: }
============================================================================