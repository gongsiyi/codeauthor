1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer.filter;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * A single task or set of work to process an input
1:72790dc:  * and return a single output. Maintains a link to the
1:72790dc:  * next task to be executed after itself
1:72790dc:  */
1:72790dc: public abstract class FilterPipelineTask<F, T>
1:72790dc: {
1:72790dc:     private String name;
1:72790dc:     public FilterPipelineTask<?, ?> next;
1:72790dc: 
1:72790dc:     protected <K, V> void setLast(String name, FilterPipelineTask<K, V> last)
1:72790dc:     {
1:72790dc:         if (last == this)
1:72790dc:             throw new IllegalArgumentException("provided last task [" + last.name + "] cannot be set to itself");
1:72790dc: 
1:72790dc:         if (this.next == null)
1:72790dc:         {
1:72790dc:             this.next = last;
1:72790dc:             this.name = name;
1:72790dc:         }
1:72790dc:         else
1:72790dc:         {
1:72790dc:             this.next.setLast(name, last);
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public abstract T process(F input) throws Exception;
1:72790dc: 
1:72790dc:     public String getName()
1:72790dc:     {
1:72790dc:         return name;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer.filter;
1: 
1: /**
1:  * A single task or set of work to process an input
1:  * and return a single output. Maintains a link to the
1:  * next task to be executed after itself
1:  */
1: public abstract class FilterPipelineTask<F, T>
1: {
1:     private String name;
1:     public FilterPipelineTask<?, ?> next;
1: 
1:     protected <K, V> void setLast(String name, FilterPipelineTask<K, V> last)
1:     {
1:         if (last == this)
1:             throw new IllegalArgumentException("provided last task [" + last.name + "] cannot be set to itself");
1: 
1:         if (this.next == null)
1:         {
1:             this.next = last;
1:             this.name = name;
1:         }
1:         else
1:         {
1:             this.next.setLast(name, last);
1:         }
1:     }
1: 
1:     public abstract T process(F input) throws Exception;
1: 
1:     public String getName()
1:     {
1:         return name;
1:     }
1: }
============================================================================