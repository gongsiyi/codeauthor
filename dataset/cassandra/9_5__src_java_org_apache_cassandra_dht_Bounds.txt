1:0160ad5: /*
1:0160ad5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0160ad5:  * or more contributor license agreements.  See the NOTICE file
1:0160ad5:  * distributed with this work for additional information
1:0160ad5:  * regarding copyright ownership.  The ASF licenses this file
1:0160ad5:  * to you under the Apache License, Version 2.0 (the
1:0160ad5:  * "License"); you may not use this file except in compliance
1:0160ad5:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:0160ad5:  */
1:07cf56f: package org.apache.cassandra.dht;
7:0160ad5: 
1:1c3ff92: import java.util.ArrayList;
1:e98eb1c: import java.util.Collections;
1:1c3ff92: import java.util.Comparator;
1:e98eb1c: import java.util.List;
1:1c3ff92: import java.util.Set;
1:1c3ff92: 
1:1c3ff92: import com.google.common.collect.Iterators;
1:1c3ff92: import com.google.common.collect.Lists;
1:1c3ff92: import com.google.common.collect.PeekingIterator;
1:1c3ff92: import com.google.common.collect.Sets;
1:0160ad5: 
1:a991b64: import org.apache.cassandra.db.PartitionPosition;
1:35f7bc5: import org.apache.cassandra.utils.Pair;
1:0160ad5: 
1:35f7bc5: /**
1:35f7bc5:  * AbstractBounds containing both its endpoints: [left, right].  Used by "classic" by-key range scans.
1:35f7bc5:  */
1:ad84e4d: public class Bounds<T extends RingPosition<T>> extends AbstractBounds<T>
5:0160ad5: {
1:554223b:     public Bounds(T left, T right)
1:0160ad5:     {
1:07893d7:         super(left, right);
1:0160ad5:         // unlike a Range, a Bounds may not wrap
1:3aa7308:         assert !strictlyWrapsAround(left, right) : "[" + left + "," + right + "]";
5:0160ad5:     }
1:5267112: 
1:554223b:     public boolean contains(T position)
1:0160ad5:     {
1:35335ca:         // Range.contains doesnt work correctly if left == right (unless both
1:35335ca:         // are minimum) because for Range that means a wrapping range that select
1:35335ca:         // the whole ring. So we must explicitely handle this case
1:07893d7:         return left.equals(position) || ((right.isMinimum() || !left.equals(right)) && Range.contains(left, right, position));
1:0160ad5:     }
1:0160ad5: 
1:35f7bc5:     public Pair<AbstractBounds<T>, AbstractBounds<T>> split(T position)
1:0160ad5:     {
1:35f7bc5:         assert contains(position);
1:35f7bc5:         // Check if the split would have no effect on the range
1:35f7bc5:         if (position.equals(right))
1:35f7bc5:             return null;
1:35f7bc5: 
1:07893d7:         AbstractBounds<T> lb = new Bounds<T>(left, position);
1:07893d7:         AbstractBounds<T> rb = new Range<T>(position, right);
1:7af7eb3:         return Pair.create(lb, rb);
1:0160ad5:     }
1:0160ad5: 
1:572ef50:     public boolean inclusiveLeft()
1:572ef50:     {
1:572ef50:         return true;
1:572ef50:     }
1:572ef50: 
1:572ef50:     public boolean inclusiveRight()
1:572ef50:     {
1:572ef50:         return true;
1:572ef50:     }
1:572ef50: 
1:88b48df:     public boolean intersects(Bounds<T> that)
1:88b48df:     {
1:88b48df:         // We either contains one of the that bounds, or we are fully contained into that.
1:88b48df:         return contains(that.left) || contains(that.right) || that.contains(left);
1:88b48df:     }
1:88b48df: 
1:554223b:     public List<? extends AbstractBounds<T>> unwrap()
1:0160ad5:     {
1:0160ad5:         // Bounds objects never wrap
1:554223b:         return Collections.<AbstractBounds<T>>singletonList(this);
1:0160ad5:     }
1:0160ad5: 
1:554223b:     @Override
1:0160ad5:     public boolean equals(Object o)
1:554223b:     {
1:0160ad5:         if (!(o instanceof Bounds))
1:0160ad5:             return false;
1:ad84e4d:         Bounds<?> rhs = (Bounds<?>)o;
1:0160ad5:         return left.equals(rhs.left) && right.equals(rhs.right);
1:554223b:     }
1:554223b: 
1:554223b:     @Override
1:0160ad5:     public String toString()
1:554223b:     {
1:0160ad5:         return "[" + left + "," + right + "]";
1:554223b:     }
1:554223b: 
1:08e2891:     protected String getOpeningString()
1:08e2891:     {
1:08e2891:         return "[";
1:08e2891:     }
1:08e2891: 
1:08e2891:     protected String getClosingString()
1:08e2891:     {
1:08e2891:         return "]";
1:08e2891:     }
1:08e2891: 
1:1c3ff92:     public static <T extends RingPosition<T>> boolean isInBounds(T token, Iterable<Bounds<T>> bounds)
1:1c3ff92:     {
1:1c3ff92:         assert bounds != null;
1:1c3ff92: 
1:1c3ff92:         for (Bounds<T> bound : bounds)
1:1c3ff92:         {
1:1c3ff92:             if (bound.contains(token))
1:1c3ff92:             {
1:1c3ff92:                 return true;
1:1c3ff92:             }
1:1c3ff92:         }
1:1c3ff92:         return false;
1:1c3ff92:     }
1:1c3ff92: 
1:a991b64:     public boolean isStartInclusive()
1:a991b64:     {
1:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isEndInclusive()
1:a991b64:     {
1:a991b64:         return true;
1:a991b64:     }
1:a991b64: 
1:554223b:     /**
1:554223b:      * Compute a bounds of keys corresponding to a given bounds of token.
1:554223b:      */
1:a991b64:     public static Bounds<PartitionPosition> makeRowBounds(Token left, Token right)
1:554223b:     {
1:a991b64:         return new Bounds<PartitionPosition>(left.minKeyBound(), right.maxKeyBound());
1:554223b:     }
1:554223b: 
1:5267112:     public AbstractBounds<T> withNewRight(T newRight)
1:5267112:     {
1:5267112:         return new Bounds<T>(left, newRight);
1:5267112:     }
1:1c3ff92: 
1:1c3ff92:     /**
1:1c3ff92:      * Retrieves non-overlapping bounds for the list of input bounds
1:1c3ff92:      *
1:1c3ff92:      * Assume we have the following bounds
1:1c3ff92:      * (brackets representing left/right bound):
1:1c3ff92:      * [   ] [   ]    [   ]   [  ]
1:1c3ff92:      * [   ]         [       ]
1:1c3ff92:      * This method will return the following bounds:
1:1c3ff92:      * [         ]    [          ]
1:1c3ff92:      *
1:1c3ff92:      * @param bounds unsorted bounds to find overlaps
1:1c3ff92:      * @return the non-overlapping bounds
1:1c3ff92:      */
1:1c3ff92:     public static <T extends RingPosition<T>> Set<Bounds<T>> getNonOverlappingBounds(Iterable<Bounds<T>> bounds)
1:1c3ff92:     {
1:1c3ff92:         ArrayList<Bounds<T>> sortedBounds = Lists.newArrayList(bounds);
1:1c3ff92:         Collections.sort(sortedBounds, new Comparator<Bounds<T>>()
1:1c3ff92:         {
1:1c3ff92:             public int compare(Bounds<T> o1, Bounds<T> o2)
1:1c3ff92:             {
1:1c3ff92:                 return o1.left.compareTo(o2.left);
1:1c3ff92:             }
1:1c3ff92:         });
1:1c3ff92: 
1:1c3ff92:         Set<Bounds<T>> nonOverlappingBounds = Sets.newHashSet();
1:1c3ff92: 
1:1c3ff92:         PeekingIterator<Bounds<T>> it = Iterators.peekingIterator(sortedBounds.iterator());
1:1c3ff92:         while (it.hasNext())
1:1c3ff92:         {
1:1c3ff92:             Bounds<T> beginBound = it.next();
1:1c3ff92:             Bounds<T> endBound = beginBound;
1:1c3ff92:             while (it.hasNext() && endBound.right.compareTo(it.peek().left) >= 0)
1:1c3ff92:                 endBound = it.next();
1:1c3ff92:             nonOverlappingBounds.add(new Bounds<>(beginBound.left, endBound.right));
1:1c3ff92:         }
1:1c3ff92: 
1:1c3ff92:         return nonOverlappingBounds;
1:1c3ff92:     }
1:0160ad5: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:0de23f2
commit:e487553
author:Paulo Motta
-------------------------------------------------------------------------------
commit:1c3ff92
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Comparator;
1: import java.util.Set;
1: 
1: import com.google.common.collect.Iterators;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.PeekingIterator;
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:     public static <T extends RingPosition<T>> boolean isInBounds(T token, Iterable<Bounds<T>> bounds)
1:     {
1:         assert bounds != null;
1: 
1:         for (Bounds<T> bound : bounds)
1:         {
1:             if (bound.contains(token))
1:             {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Retrieves non-overlapping bounds for the list of input bounds
1:      *
1:      * Assume we have the following bounds
1:      * (brackets representing left/right bound):
1:      * [   ] [   ]    [   ]   [  ]
1:      * [   ]         [       ]
1:      * This method will return the following bounds:
1:      * [         ]    [          ]
1:      *
1:      * @param bounds unsorted bounds to find overlaps
1:      * @return the non-overlapping bounds
1:      */
1:     public static <T extends RingPosition<T>> Set<Bounds<T>> getNonOverlappingBounds(Iterable<Bounds<T>> bounds)
1:     {
1:         ArrayList<Bounds<T>> sortedBounds = Lists.newArrayList(bounds);
1:         Collections.sort(sortedBounds, new Comparator<Bounds<T>>()
1:         {
1:             public int compare(Bounds<T> o1, Bounds<T> o2)
1:             {
1:                 return o1.left.compareTo(o2.left);
1:             }
1:         });
1: 
1:         Set<Bounds<T>> nonOverlappingBounds = Sets.newHashSet();
1: 
1:         PeekingIterator<Bounds<T>> it = Iterators.peekingIterator(sortedBounds.iterator());
1:         while (it.hasNext())
1:         {
1:             Bounds<T> beginBound = it.next();
1:             Bounds<T> endBound = beginBound;
1:             while (it.hasNext() && endBound.right.compareTo(it.peek().left) >= 0)
1:                 endBound = it.next();
1:             nonOverlappingBounds.add(new Bounds<>(beginBound.left, endBound.right));
1:         }
1: 
1:         return nonOverlappingBounds;
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:99e0c90
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3aa7308
/////////////////////////////////////////////////////////////////////////
1:         assert !strictlyWrapsAround(left, right) : "[" + left + "," + right + "]";
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.PartitionPosition;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isStartInclusive()
1:     {
1:         return true;
1:     }
1: 
1:     public boolean isEndInclusive()
1:     {
1:         return true;
1:     }
1: 
1:     public static Bounds<PartitionPosition> makeRowBounds(Token left, Token right)
1:         return new Bounds<PartitionPosition>(left.minKeyBound(), right.maxKeyBound());
commit:5267112
/////////////////////////////////////////////////////////////////////////
1: 
1:     public AbstractBounds<T> withNewRight(T newRight)
1:     {
1:         return new Bounds<T>(left, newRight);
1:     }
commit:08e2891
/////////////////////////////////////////////////////////////////////////
1:     protected String getOpeningString()
1:     {
1:         return "[";
1:     }
1: 
1:     protected String getClosingString()
1:     {
1:         return "]";
1:     }
1: 
commit:35335ca
/////////////////////////////////////////////////////////////////////////
1:         // Range.contains doesnt work correctly if left == right (unless both
1:         // are minimum) because for Range that means a wrapping range that select
1:         // the whole ring. So we must explicitely handle this case
0:         return left.equals(position) || ((right.isMinimum(partitioner) || !left.equals(right)) && Range.contains(left, right, position));
commit:02030dd
/////////////////////////////////////////////////////////////////////////
0:         // Range.contains doesnt work correctly if left == right because for
0:         // Range that means a wrapping range that select the whole ring. So we
0:         // must explicitely handle this case
0:         return left.equals(position) || (!left.equals(right) && Range.contains(left, right, position));
commit:3eff545
commit:88b48df
/////////////////////////////////////////////////////////////////////////
1:     public boolean intersects(Bounds<T> that)
1:     {
1:         // We either contains one of the that bounds, or we are fully contained into that.
1:         return contains(that.left) || contains(that.right) || that.contains(left);
1:     }
1: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.dht;
commit:35f7bc5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.Pair;
1: /**
1:  * AbstractBounds containing both its endpoints: [left, right].  Used by "classic" by-key range scans.
1:  */
/////////////////////////////////////////////////////////////////////////
1:     public Pair<AbstractBounds<T>, AbstractBounds<T>> split(T position)
1:         assert contains(position);
1:         // Check if the split would have no effect on the range
1:         if (position.equals(right))
1:             return null;
1: 
0:         AbstractBounds<T> lb = new Bounds<T>(left, position, partitioner);
0:         AbstractBounds<T> rb = new Range<T>(position, right, partitioner);
0:         return new Pair<AbstractBounds<T>, AbstractBounds<T>>(lb, rb);
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.RowPosition;
0: public class Bounds<T extends RingPosition> extends AbstractBounds<T>
1:     public Bounds(T left, T right)
0:     Bounds(T left, T right, IPartitioner partitioner)
0:         assert left.compareTo(right) <= 0 || right.isMinimum(partitioner) : "[" + left + "," + right + "]";
1:     public boolean contains(T position)
0:         return Range.contains(left, right, position) || left.equals(position);
0:     public AbstractBounds<T> createFrom(T position)
0:         return new Bounds<T>(left, position, partitioner);
1:     public List<? extends AbstractBounds<T>> unwrap()
1:         return Collections.<AbstractBounds<T>>singletonList(this);
1:     @Override
0:         Bounds<T> rhs = (Bounds<T>)o;
1:     @Override
1: 
1:     /**
1:      * Compute a bounds of keys corresponding to a given bounds of token.
1:      */
0:     public static Bounds<RowPosition> makeRowBounds(Token left, Token right, IPartitioner partitioner)
1:     {
0:         return new Bounds<RowPosition>(left.minKeyBound(partitioner), right.maxKeyBound(partitioner), partitioner);
1:     }
1: 
0:     public AbstractBounds<RowPosition> toRowBounds()
1:     {
0:         return (left instanceof Token) ? makeRowBounds((Token)left, (Token)right, partitioner) : (Bounds<RowPosition>)this;
1:     }
1: 
0:     public AbstractBounds<Token> toTokenBounds()
1:     {
0:         return (left instanceof RowPosition) ? new Bounds<Token>(((RowPosition)left).getToken(), ((RowPosition)right).getToken(), partitioner) : (Bounds<Token>)this;
1:     }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:7aefd91
commit:572ef50
/////////////////////////////////////////////////////////////////////////
1:     public boolean inclusiveLeft()
1:     {
1:         return true;
1:     }
1: 
1:     public boolean inclusiveRight()
1:     {
1:         return true;
1:     }
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69542a9
/////////////////////////////////////////////////////////////////////////
commit:07893d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super(left, right);
0:         assert left.compareTo(right) <= 0 || right.isMinimum() : "[" + left + "," + right + "]";
/////////////////////////////////////////////////////////////////////////
1:         return left.equals(position) || ((right.isMinimum() || !left.equals(right)) && Range.contains(left, right, position));
/////////////////////////////////////////////////////////////////////////
1:         AbstractBounds<T> lb = new Bounds<T>(left, position);
1:         AbstractBounds<T> rb = new Range<T>(position, right);
/////////////////////////////////////////////////////////////////////////
0:     public static Bounds<RowPosition> makeRowBounds(Token left, Token right)
0:         return new Bounds<RowPosition>(left.minKeyBound(), right.maxKeyBound());
0:         return (left instanceof Token) ? makeRowBounds((Token)left, (Token)right) : (Bounds<RowPosition>)this;
0:         return (left instanceof RowPosition) ? new Bounds<Token>(((RowPosition)left).getToken(), ((RowPosition)right).getToken()) : (Bounds<Token>)this;
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public class Bounds<T extends RingPosition<T>> extends AbstractBounds<T>
/////////////////////////////////////////////////////////////////////////
1:         Bounds<?> rhs = (Bounds<?>)o;
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
0:     @SuppressWarnings("unchecked")
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:db381ea
/////////////////////////////////////////////////////////////////////////
0:     public Bounds(T left, T right, IPartitioner partitioner)
commit:7af7eb3
/////////////////////////////////////////////////////////////////////////
1:         return Pair.create(lb, rb);
commit:e7dc05c
commit:5e75a7f
/////////////////////////////////////////////////////////////////////////
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.List;
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.List;
commit:389bac7
/////////////////////////////////////////////////////////////////////////
0:     public AbstractBounds createFrom(Token token)
0:         return new Bounds(left, token);
0:         return Collections.<AbstractBounds>singletonList(this);
commit:0160ad5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.dht;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
1: 
0: import java.util.*;
1: 
0: import org.apache.cassandra.service.StorageService;
1: 
0: public class Bounds extends AbstractBounds
1: {
0:     public Bounds(Token left, Token right)
1:     {
0:         this(left, right, StorageService.getPartitioner());
1:     }
1: 
0:     Bounds(Token left, Token right, IPartitioner partitioner)
1:     {
0:         super(left, right, partitioner);
1:         // unlike a Range, a Bounds may not wrap
0:         assert left.compareTo(right) <= 0 || right.equals(partitioner.getMinimumToken()) : "[" + left + "," + right + "]";
1:     }
1: 
0:     @Override
0:     public boolean contains(Token token)
1:     {
0:         return Range.contains(left, right, token) || left.equals(token);
1:     }
1: 
0:     public Set<AbstractBounds> restrictTo(Range range)
1:     {
0:         Token min = partitioner.getMinimumToken();
1: 
0:         // special case Bounds where left=right (single Token)
0:         if (this.left.equals(this.right) && !this.right.equals(min))
0:             return range.contains(this.left)
0:                    ? Collections.unmodifiableSet(new HashSet<AbstractBounds>(Arrays.asList(this)))
0:                    : Collections.<AbstractBounds>emptySet();
1: 
0:         // get the intersection of a Range w/ same left & right
0:         Set<Range> ranges = range.intersectionWith(new Range(this.left, this.right));
0:         // if range doesn't contain left token anyway, that's the correct answer
0:         if (!range.contains(this.left))
0:             return (Set) ranges;
0:         // otherwise, add back in the left token
0:         Set<AbstractBounds> S = new HashSet<AbstractBounds>(ranges.size());
0:         for (Range restricted : ranges)
1:         {
0:             if (restricted.left.equals(this.left))
0:                 S.add(new Bounds(restricted.left, restricted.right));
0:             else
0:                 S.add(restricted);
1:         }
0:         return Collections.unmodifiableSet(S);
1:     }
1: 
0:     public List<AbstractBounds> unwrap()
1:     {
1:         // Bounds objects never wrap
0:         return (List)Arrays.asList(this);
1:     }
1: 
0:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (!(o instanceof Bounds))
1:             return false;
0:         Bounds rhs = (Bounds)o;
1:         return left.equals(rhs.left) && right.equals(rhs.right);
1:     }
1: 
1:     public String toString()
1:     {
1:         return "[" + left + "," + right + "]";
1:     }
1: }
commit:9cc51b5
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0:         this(left, right, StorageService.getPartitioner());
0:     Bounds(Token left, Token right, IPartitioner partitioner)
0:         super(left, right, partitioner);
0:         // unlike a Range, a Bounds may not wrap
0:         assert left.compareTo(right) <= 0 || right.equals(partitioner.getMinimumToken()) : "[" + left + "," + right + "]";
0:     }
0: 
0:     @Override
0:     public boolean contains(Token token)
0:     {
0:         return Range.contains(left, right, token) || left.equals(token);
0:     }
0: 
0:     public Set<AbstractBounds> restrictTo(Range range)
0:     {
0:         Token min = partitioner.getMinimumToken();
0: 
0:         // special case Bounds where left=right (single Token)
0:         if (this.left.equals(this.right) && !this.right.equals(min))
0:             return range.contains(this.left)
0:                    ? Collections.unmodifiableSet(new HashSet<AbstractBounds>(Arrays.asList(this)))
0:                    : Collections.<AbstractBounds>emptySet();
0: 
0:         // get the intersection of a Range w/ same left & right
0:         Set<Range> ranges = range.intersectionWith(new Range(this.left, this.right));
0:         // if range doesn't contain left token anyway, that's the correct answer
0:         if (!range.contains(this.left))
0:             return (Set) ranges;
0:         // otherwise, add back in the left token
0:         Set<AbstractBounds> S = new HashSet<AbstractBounds>(ranges.size());
0:         for (Range restricted : ranges)
0:             if (restricted.left.equals(this.left))
0:                 S.add(new Bounds(restricted.left, restricted.right));
0:             else
0:                 S.add(restricted);
0:         return Collections.unmodifiableSet(S);
0:     }
0: 
0:     public List<AbstractBounds> unwrap()
0:     {
0:         // Bounds objects never wrap
0:         return (List)Arrays.asList(this);
0:     }
0: 
0:     @Override
0:     public boolean equals(Object o)
0:     {
0:         if (!(o instanceof Bounds))
0:             return false;
0:         Bounds rhs = (Bounds)o;
0:         return left.equals(rhs.left) && right.equals(rhs.right);
commit:2f99e71
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.dht;
0: 
0: import java.util.Arrays;
0: import java.util.List;
0: 
0: import org.apache.commons.lang.ObjectUtils;
0: 
0: import org.apache.cassandra.service.StorageService;
0: 
0: public class Bounds extends AbstractBounds
0: {
0:     public Bounds(Token left, Token right)
0:     {
0:         super(left, right);
0:         // unlike a Range, a Bounds may not wrap
0:         assert left.compareTo(right) <= 0 || right.equals(StorageService.getPartitioner().getMinimumToken());
0:     }
0: 
0:     public List<AbstractBounds> restrictTo(Range range)
0:     {
0:         Token left, right;
0:         if (range.left.equals(range.right))
0:         {
0:             left = this.left;
0:             right = this.right;
0:         }
0:         else
0:         {
0:             left = (Token) ObjectUtils.max(this.left, range.left);
0:             right = this.right.equals(StorageService.getPartitioner().getMinimumToken())
0:                     ? range.right
0:                     : (Token) ObjectUtils.min(this.right, range.right);
0:         }
0:         return (List) Arrays.asList(new Bounds(left, right));
0:     }
0: 
0:     public String toString()
0:     {
0:         return "[" + left + "," + right + "]";
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:34cd691
============================================================================