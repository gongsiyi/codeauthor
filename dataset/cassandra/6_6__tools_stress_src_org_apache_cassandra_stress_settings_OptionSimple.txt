1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:7536429: import java.io.Serializable;
1:2e1e98a: import java.util.Collections;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.regex.Pattern;
1:2e1e98a: 
1:8e360f8: import com.google.common.base.Function;
1:8e360f8: 
1:2e1e98a: /**
1:2e1e98a:  * For parsing a simple (sub)option for a command/major option
1:2e1e98a:  */
1:7536429: class OptionSimple extends Option implements Serializable
1:2e1e98a: {
1:2e1e98a: 
1:3e2c610:     final String displayPrefix;
1:8e360f8:     private final Pattern matchPrefix;
1:8e360f8:     private final String defaultValue;
1:8e360f8:     private final Function<String, String> valueAdapter;
1:8e360f8:     private final String description;
1:8e360f8:     private final boolean required;
1:8e360f8:     private String value;
1:8e360f8: 
1:7536429:     private static final class ValueMatcher implements Function<String, String>, Serializable
1:8e360f8:     {
1:8e360f8:         final Pattern pattern;
1:8e360f8:         private ValueMatcher(Pattern pattern)
1:8e360f8:         {
1:8e360f8:             this.pattern = pattern;
1:8e360f8:         }
1:8e360f8:         public String apply(String s)
1:8e360f8:         {
1:8e360f8:             if (!pattern.matcher(s).matches())
1:8e360f8:                 throw new IllegalArgumentException("Invalid value " + s + "; must match pattern " + pattern);
1:8e360f8:             return s;
1:8e360f8:         }
1:8e360f8:     }
1:2e1e98a: 
1:2e1e98a:     public OptionSimple(String prefix, String valuePattern, String defaultValue, String description, boolean required)
1:2e1e98a:     {
1:8e360f8:         this(prefix, Pattern.compile(Pattern.quote(prefix), Pattern.CASE_INSENSITIVE),
1:8e360f8:              Pattern.compile(valuePattern, Pattern.CASE_INSENSITIVE), defaultValue, description, required);
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     public OptionSimple(String prefix, Function<String, String> valueAdapter, String defaultValue, String description, boolean required)
1:8e360f8:     {
1:8e360f8:         this(prefix, Pattern.compile(Pattern.quote(prefix), Pattern.CASE_INSENSITIVE), valueAdapter, defaultValue, description, required);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public OptionSimple(String displayPrefix, Pattern matchPrefix, Pattern valuePattern, String defaultValue, String description, boolean required)
1:2e1e98a:     {
1:8e360f8:         this(displayPrefix, matchPrefix, new ValueMatcher(valuePattern), defaultValue, description, required);
1:8e360f8:     }
1:8e360f8: 
1:8e360f8:     public OptionSimple(String displayPrefix, Pattern matchPrefix, Function<String, String> valueAdapter, String defaultValue, String description, boolean required)
1:8e360f8:     {
1:2e1e98a:         this.displayPrefix = displayPrefix;
1:2e1e98a:         this.matchPrefix = matchPrefix;
1:8e360f8:         this.valueAdapter = valueAdapter;
2:2e1e98a:         this.defaultValue = defaultValue;
2:2e1e98a:         this.description = description;
2:2e1e98a:         this.required = required;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public boolean setByUser()
1:2e1e98a:     {
1:2e1e98a:         return value != null;
1:2e1e98a:     }
1:2e1e98a: 
1:73b2dcc:     public boolean isRequired()
1:73b2dcc:     {
1:73b2dcc:         return required;
1:73b2dcc:     }
1:73b2dcc: 
1:2e1e98a:     public boolean present()
1:2e1e98a:     {
1:2e1e98a:         return value != null || defaultValue != null;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public String value()
1:2e1e98a:     {
1:2e1e98a:         return value != null ? value : defaultValue;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public boolean accept(String param)
1:2e1e98a:     {
1:2e1e98a:         if (matchPrefix.matcher(param).lookingAt())
1:2e1e98a:         {
1:2e1e98a:             if (value != null)
1:2e1e98a:                 throw new IllegalArgumentException("Suboption " + displayPrefix + " has been specified more than once");
1:2e1e98a:             String v = param.substring(displayPrefix.length());
1:8e360f8:             value = valueAdapter.apply(v);
1:8e360f8:             assert value != null;
1:2e1e98a:             return true;
1:2e1e98a:         }
1:2e1e98a:         return false;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public boolean happy()
1:2e1e98a:     {
1:2e1e98a:         return !required || value != null;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public String shortDisplay()
1:2e1e98a:     {
1:2e1e98a:         StringBuilder sb = new StringBuilder();
1:2e1e98a:         if (!required)
1:2e1e98a:             sb.append("[");
1:2e1e98a:         sb.append(displayPrefix);
1:2e1e98a:         if (displayPrefix.endsWith("="))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (displayPrefix.endsWith("<"))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (displayPrefix.endsWith(">"))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (!required)
1:2e1e98a:             sb.append("]");
1:2e1e98a:         return sb.toString();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public String longDisplay()
1:2e1e98a:     {
1:8e360f8:         if (description.equals("") && defaultValue == null
1:8e360f8:             && (valueAdapter instanceof ValueMatcher && ((ValueMatcher) valueAdapter).pattern.pattern().equals("")))
1:2e1e98a:             return null;
1:2e1e98a:         StringBuilder sb = new StringBuilder();
1:2e1e98a:         sb.append(displayPrefix);
1:2e1e98a:         if (displayPrefix.endsWith("="))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (displayPrefix.endsWith("<"))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (displayPrefix.endsWith(">"))
1:2e1e98a:             sb.append("?");
1:2e1e98a:         if (defaultValue != null)
1:2e1e98a:         {
1:2e1e98a:             sb.append(" (default=");
1:2e1e98a:             sb.append(defaultValue);
1:2e1e98a:             sb.append(")");
1:2e1e98a:         }
1:2e1e98a:         return GroupedOptions.formatLong(sb.toString(), description);
1:2e1e98a:     }
1:2e1e98a: 
1:938faa2:     public String getOptionAsString()
1:938faa2:     {
1:938faa2:         StringBuilder sb = new StringBuilder();
1:938faa2:         sb.append(displayPrefix);
1:938faa2: 
1:938faa2:         if (!(displayPrefix.endsWith("=") || displayPrefix.endsWith("<") || displayPrefix.endsWith(">")))
1:938faa2:         {
1:938faa2:             sb.append(setByUser() ? ":*set*" : ":*not set*");
1:938faa2:         }else{
1:938faa2:             sb.append(value == null ? defaultValue : value);
1:938faa2:         }
1:938faa2:         return sb.toString();
1:938faa2:     }
1:938faa2: 
1:2e1e98a:     public List<String> multiLineDisplay()
1:2e1e98a:     {
1:2e1e98a:         return Collections.emptyList();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public int hashCode()
1:2e1e98a:     {
1:2e1e98a:         return displayPrefix.hashCode();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     @Override
1:2e1e98a:     public boolean equals(Object that)
1:2e1e98a:     {
1:2e1e98a:         return that instanceof OptionSimple && ((OptionSimple) that).displayPrefix.equals(this.displayPrefix);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
1:     public String getOptionAsString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(displayPrefix);
1: 
1:         if (!(displayPrefix.endsWith("=") || displayPrefix.endsWith("<") || displayPrefix.endsWith(">")))
1:         {
1:             sb.append(setByUser() ? ":*set*" : ":*not set*");
1:         }else{
1:             sb.append(value == null ? defaultValue : value);
1:         }
1:         return sb.toString();
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:73b2dcc
/////////////////////////////////////////////////////////////////////////
1:     public boolean isRequired()
1:     {
1:         return required;
1:     }
1: 
commit:7536429
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: class OptionSimple extends Option implements Serializable
/////////////////////////////////////////////////////////////////////////
1:     private static final class ValueMatcher implements Function<String, String>, Serializable
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:3e2c610
/////////////////////////////////////////////////////////////////////////
1:     final String displayPrefix;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8e360f8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: 
0:     private final String displayPrefix;
1:     private final Pattern matchPrefix;
1:     private final String defaultValue;
1:     private final Function<String, String> valueAdapter;
1:     private final String description;
1:     private final boolean required;
1:     private String value;
1: 
0:     private static final class ValueMatcher implements Function<String, String>
1:     {
1:         final Pattern pattern;
1:         private ValueMatcher(Pattern pattern)
1:         {
1:             this.pattern = pattern;
1:         }
1:         public String apply(String s)
1:         {
1:             if (!pattern.matcher(s).matches())
1:                 throw new IllegalArgumentException("Invalid value " + s + "; must match pattern " + pattern);
1:             return s;
1:         }
1:     }
1:         this(prefix, Pattern.compile(Pattern.quote(prefix), Pattern.CASE_INSENSITIVE),
1:              Pattern.compile(valuePattern, Pattern.CASE_INSENSITIVE), defaultValue, description, required);
1:     }
1: 
1:     public OptionSimple(String prefix, Function<String, String> valueAdapter, String defaultValue, String description, boolean required)
1:     {
1:         this(prefix, Pattern.compile(Pattern.quote(prefix), Pattern.CASE_INSENSITIVE), valueAdapter, defaultValue, description, required);
1:         this(displayPrefix, matchPrefix, new ValueMatcher(valuePattern), defaultValue, description, required);
1:     }
1: 
1:     public OptionSimple(String displayPrefix, Pattern matchPrefix, Function<String, String> valueAdapter, String defaultValue, String description, boolean required)
1:     {
1:         this.valueAdapter = valueAdapter;
/////////////////////////////////////////////////////////////////////////
1:             value = valueAdapter.apply(v);
1:             assert value != null;
/////////////////////////////////////////////////////////////////////////
1:         if (description.equals("") && defaultValue == null
1:             && (valueAdapter instanceof ValueMatcher && ((ValueMatcher) valueAdapter).pattern.pattern().equals("")))
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  * For parsing a simple (sub)option for a command/major option
1:  */
0: class OptionSimple extends Option
1: {
1: 
0:     final String displayPrefix;
0:     final Pattern matchPrefix;
0:     final String defaultValue;
0:     final Pattern pattern;
0:     final String description;
0:     final boolean required;
0:     String value;
1: 
1:     public OptionSimple(String prefix, String valuePattern, String defaultValue, String description, boolean required)
1:     {
0:         this.displayPrefix = prefix;
0:         this.matchPrefix = Pattern.compile(Pattern.quote(prefix), Pattern.CASE_INSENSITIVE);
0:         this.pattern = Pattern.compile(valuePattern, Pattern.CASE_INSENSITIVE);
1:         this.defaultValue = defaultValue;
1:         this.description = description;
1:         this.required = required;
1:     }
1: 
1:     public OptionSimple(String displayPrefix, Pattern matchPrefix, Pattern valuePattern, String defaultValue, String description, boolean required)
1:     {
1:         this.displayPrefix = displayPrefix;
1:         this.matchPrefix = matchPrefix;
0:         this.pattern = valuePattern;
1:         this.defaultValue = defaultValue;
1:         this.description = description;
1:         this.required = required;
1:     }
1: 
1:     public boolean setByUser()
1:     {
1:         return value != null;
1:     }
1: 
1:     public boolean present()
1:     {
1:         return value != null || defaultValue != null;
1:     }
1: 
1:     public String value()
1:     {
1:         return value != null ? value : defaultValue;
1:     }
1: 
1:     public boolean accept(String param)
1:     {
1:         if (matchPrefix.matcher(param).lookingAt())
1:         {
1:             if (value != null)
1:                 throw new IllegalArgumentException("Suboption " + displayPrefix + " has been specified more than once");
1:             String v = param.substring(displayPrefix.length());
0:             if (!pattern.matcher(v).matches())
0:                 throw new IllegalArgumentException("Invalid option " + param + "; must match pattern " + pattern);
0:             value = v;
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean happy()
1:     {
1:         return !required || value != null;
1:     }
1: 
1:     public String shortDisplay()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         if (!required)
1:             sb.append("[");
1:         sb.append(displayPrefix);
1:         if (displayPrefix.endsWith("="))
1:             sb.append("?");
1:         if (displayPrefix.endsWith("<"))
1:             sb.append("?");
1:         if (displayPrefix.endsWith(">"))
1:             sb.append("?");
1:         if (!required)
1:             sb.append("]");
1:         return sb.toString();
1:     }
1: 
1:     public String longDisplay()
1:     {
0:         if (description.equals("") && defaultValue == null && pattern.pattern().equals(""))
1:             return null;
1:         StringBuilder sb = new StringBuilder();
1:         sb.append(displayPrefix);
1:         if (displayPrefix.endsWith("="))
1:             sb.append("?");
1:         if (displayPrefix.endsWith("<"))
1:             sb.append("?");
1:         if (displayPrefix.endsWith(">"))
1:             sb.append("?");
1:         if (defaultValue != null)
1:         {
1:             sb.append(" (default=");
1:             sb.append(defaultValue);
1:             sb.append(")");
1:         }
1:         return GroupedOptions.formatLong(sb.toString(), description);
1:     }
1: 
1:     public List<String> multiLineDisplay()
1:     {
1:         return Collections.emptyList();
1:     }
1: 
1:     public int hashCode()
1:     {
1:         return displayPrefix.hashCode();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object that)
1:     {
1:         return that instanceof OptionSimple && ((OptionSimple) that).displayPrefix.equals(this.displayPrefix);
1:     }
1: 
1: }
============================================================================