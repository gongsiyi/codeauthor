1:107545b: /**
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *    http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing,
1:107545b:  * software distributed under the License is distributed on an
1:107545b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:107545b:  * KIND, either express or implied.  See the License for the
1:107545b:  * specific language governing permissions and limitations
1:107545b:  * under the License.
1:107545b:  */
1:107545b: package org.apache.cassandra.serializers;
1:107545b: 
1:107545b: import org.junit.Test;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: import java.util.concurrent.TimeUnit;
1:107545b: 
1:107545b: public class TimeSerializerTest
1:107545b: {
1:107545b:     @Test
1:107545b:     public void testSerializerFromString()
1:107545b:     {
1:107545b:         // nano
1:107545b:         long expected = 5;
1:107545b:         Long time = TimeSerializer.timeStringToLong("00:00:00.000000005");
1:107545b:         assert time == expected : String.format("Failed nano conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // usec
1:107545b:         expected = TimeUnit.MICROSECONDS.toNanos(123);
1:107545b:         time = TimeSerializer.timeStringToLong("00:00:00.000123000");
1:107545b:         assert time == expected : String.format("Failed usec conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // milli
1:107545b:         expected = TimeUnit.MILLISECONDS.toNanos(123);
1:107545b:         time = TimeSerializer.timeStringToLong("00:00:00.123000");
1:107545b:         assert time == expected : String.format("Failed milli conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // sec
1:107545b:         expected = TimeUnit.SECONDS.toNanos(15);
1:107545b:         time = TimeSerializer.timeStringToLong("00:00:15.000");
1:107545b:         assert time == expected : String.format("Failed sec conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // min
1:107545b:         expected = TimeUnit.MINUTES.toNanos(13);
1:107545b:         time = TimeSerializer.timeStringToLong("00:13:00.000");
1:107545b:         assert time == expected : String.format("Failed min conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // hour
1:107545b:         expected = TimeUnit.HOURS.toNanos(2);
1:107545b:         time = TimeSerializer.timeStringToLong("02:0:00.000");
1:107545b:         assert time == expected : String.format("Failed min conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // complex
1:107545b:         expected = buildExpected(4, 31, 12, 123, 456, 789);
1:107545b:         time = TimeSerializer.timeStringToLong("4:31:12.123456789");
1:107545b:         assert time == expected : String.format("Failed complex conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // upper bound
1:107545b:         expected = buildExpected(23, 59, 59, 999, 999, 999);
1:107545b:         time = TimeSerializer.timeStringToLong("23:59:59.999999999");
1:107545b:         assert time == expected : String.format("Failed upper bounds conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // Test partial nano
1:107545b:         expected = buildExpected(12, 13, 14, 123, 654, 120);
1:107545b:         time = TimeSerializer.timeStringToLong("12:13:14.12365412");
1:107545b:         assert time == expected : String.format("Failed partial nano timestring.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // Test raw long value
1:107545b:         expected = 10;
1:107545b:         time = TimeSerializer.timeStringToLong("10");
1:107545b:         assert time == expected : String.format("Failed long conversion.  Expected %s, got %s", expected, time);
1:107545b: 
1:107545b:         // Test 0 long
1:107545b:         expected = 0;
1:107545b:         time = TimeSerializer.timeStringToLong("0");
1:107545b:         assert time == expected : String.format("Failed long conversion.  Expected %s, got %s", expected, time);
1:107545b:     }
1:107545b: 
1:107545b:     private long buildExpected(int hour, int minute, int second, int milli, int micro, int nano)
1:107545b:     {
1:107545b:         return  TimeUnit.HOURS.toNanos(hour) +
1:107545b:                 TimeUnit.MINUTES.toNanos(minute) +
1:107545b:                 TimeUnit.SECONDS.toNanos(second) +
1:107545b:                 TimeUnit.MILLISECONDS.toNanos(milli) +
1:107545b:                 TimeUnit.MICROSECONDS.toNanos(micro) +
1:107545b:                 nano;
1:107545b:     }
1:107545b: 
1:107545b:     @Test
1:107545b:     public void testSerializerToString()
1:107545b:     {
1:107545b:         String source = "00:00:00.000000011";
1:107545b:         Long time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "00:00:00.000012311";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "00:00:00.123000000";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "00:00:12.123450000";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "00:34:12.123450000";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "15:00:12.123450000";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         // boundaries
1:107545b:         source = "00:00:00.000000000";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         source = "23:59:59.999999999";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         assert(source.equals(TimeSerializer.instance.toString(time)));
1:107545b: 
1:107545b:         // truncated
1:107545b:         source = "01:14:18.12";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         String result = TimeSerializer.instance.toString(time);
1:107545b:         assert(result.equals("01:14:18.120000000"));
1:107545b: 
1:107545b:         source = "01:14:18.1201";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         result = TimeSerializer.instance.toString(time);
1:107545b:         assert(result.equals("01:14:18.120100000"));
1:107545b: 
1:107545b:         source = "01:14:18.1201098";
1:107545b:         time = TimeSerializer.timeStringToLong(source);
1:107545b:         result = TimeSerializer.instance.toString(time);
1:107545b:         assert(result.equals("01:14:18.120109800"));
1:107545b:     }
1:107545b: 
1:107545b:     @Test public void testSerialization()
1:107545b:     {
1:107545b:         String source = "01:01:01.123123123";
1:107545b:         Long nt = TimeSerializer.timeStringToLong(source);
1:107545b: 
1:107545b:         ByteBuffer buf = TimeSerializer.instance.serialize(nt);
1:107545b:         TimeSerializer.instance.validate(buf);
1:107545b: 
1:107545b:         Long result = TimeSerializer.instance.deserialize(buf);
1:107545b:         String strResult = TimeSerializer.instance.toString(result);
1:107545b: 
1:107545b:         assert(strResult.equals(source));
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadHourLow()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("-1:0:0.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadHourHigh()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("24:0:0.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadMinuteLow()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:-1:0.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadMinuteHigh()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:60:0.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testEmpty()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadSecondLow()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:-1.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadSecondHigh()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:60.123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadSecondHighNoMilli()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:60");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadNanoLow()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:59.-123456789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadNanoHigh()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:59.1234567899");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testBadNanoCharacter()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("23:59:59.12345A789");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testNegativeLongTime()
1:107545b:     {
1:107545b:         Long time = TimeSerializer.timeStringToLong("-10");
1:107545b:     }
1:107545b: 
1:107545b:     @Test (expected=MarshalException.class)
1:107545b:     public void testRawLongOverflow()
1:107545b:     {
1:107545b:         Long input = TimeUnit.DAYS.toNanos(1) + 1;
1:107545b:         Long time = TimeSerializer.timeStringToLong(input.toString());
1:107545b:     }
1:107545b: }
============================================================================
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.serializers;
1: 
1: import org.junit.Test;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.TimeUnit;
1: 
1: public class TimeSerializerTest
1: {
1:     @Test
1:     public void testSerializerFromString()
1:     {
1:         // nano
1:         long expected = 5;
1:         Long time = TimeSerializer.timeStringToLong("00:00:00.000000005");
1:         assert time == expected : String.format("Failed nano conversion.  Expected %s, got %s", expected, time);
1: 
1:         // usec
1:         expected = TimeUnit.MICROSECONDS.toNanos(123);
1:         time = TimeSerializer.timeStringToLong("00:00:00.000123000");
1:         assert time == expected : String.format("Failed usec conversion.  Expected %s, got %s", expected, time);
1: 
1:         // milli
1:         expected = TimeUnit.MILLISECONDS.toNanos(123);
1:         time = TimeSerializer.timeStringToLong("00:00:00.123000");
1:         assert time == expected : String.format("Failed milli conversion.  Expected %s, got %s", expected, time);
1: 
1:         // sec
1:         expected = TimeUnit.SECONDS.toNanos(15);
1:         time = TimeSerializer.timeStringToLong("00:00:15.000");
1:         assert time == expected : String.format("Failed sec conversion.  Expected %s, got %s", expected, time);
1: 
1:         // min
1:         expected = TimeUnit.MINUTES.toNanos(13);
1:         time = TimeSerializer.timeStringToLong("00:13:00.000");
1:         assert time == expected : String.format("Failed min conversion.  Expected %s, got %s", expected, time);
1: 
1:         // hour
1:         expected = TimeUnit.HOURS.toNanos(2);
1:         time = TimeSerializer.timeStringToLong("02:0:00.000");
1:         assert time == expected : String.format("Failed min conversion.  Expected %s, got %s", expected, time);
1: 
1:         // complex
1:         expected = buildExpected(4, 31, 12, 123, 456, 789);
1:         time = TimeSerializer.timeStringToLong("4:31:12.123456789");
1:         assert time == expected : String.format("Failed complex conversion.  Expected %s, got %s", expected, time);
1: 
1:         // upper bound
1:         expected = buildExpected(23, 59, 59, 999, 999, 999);
1:         time = TimeSerializer.timeStringToLong("23:59:59.999999999");
1:         assert time == expected : String.format("Failed upper bounds conversion.  Expected %s, got %s", expected, time);
1: 
1:         // Test partial nano
1:         expected = buildExpected(12, 13, 14, 123, 654, 120);
1:         time = TimeSerializer.timeStringToLong("12:13:14.12365412");
1:         assert time == expected : String.format("Failed partial nano timestring.  Expected %s, got %s", expected, time);
1: 
1:         // Test raw long value
1:         expected = 10;
1:         time = TimeSerializer.timeStringToLong("10");
1:         assert time == expected : String.format("Failed long conversion.  Expected %s, got %s", expected, time);
1: 
1:         // Test 0 long
1:         expected = 0;
1:         time = TimeSerializer.timeStringToLong("0");
1:         assert time == expected : String.format("Failed long conversion.  Expected %s, got %s", expected, time);
1:     }
1: 
1:     private long buildExpected(int hour, int minute, int second, int milli, int micro, int nano)
1:     {
1:         return  TimeUnit.HOURS.toNanos(hour) +
1:                 TimeUnit.MINUTES.toNanos(minute) +
1:                 TimeUnit.SECONDS.toNanos(second) +
1:                 TimeUnit.MILLISECONDS.toNanos(milli) +
1:                 TimeUnit.MICROSECONDS.toNanos(micro) +
1:                 nano;
1:     }
1: 
1:     @Test
1:     public void testSerializerToString()
1:     {
1:         String source = "00:00:00.000000011";
1:         Long time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "00:00:00.000012311";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "00:00:00.123000000";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "00:00:12.123450000";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "00:34:12.123450000";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "15:00:12.123450000";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         // boundaries
1:         source = "00:00:00.000000000";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         source = "23:59:59.999999999";
1:         time = TimeSerializer.timeStringToLong(source);
1:         assert(source.equals(TimeSerializer.instance.toString(time)));
1: 
1:         // truncated
1:         source = "01:14:18.12";
1:         time = TimeSerializer.timeStringToLong(source);
1:         String result = TimeSerializer.instance.toString(time);
1:         assert(result.equals("01:14:18.120000000"));
1: 
1:         source = "01:14:18.1201";
1:         time = TimeSerializer.timeStringToLong(source);
1:         result = TimeSerializer.instance.toString(time);
1:         assert(result.equals("01:14:18.120100000"));
1: 
1:         source = "01:14:18.1201098";
1:         time = TimeSerializer.timeStringToLong(source);
1:         result = TimeSerializer.instance.toString(time);
1:         assert(result.equals("01:14:18.120109800"));
1:     }
1: 
1:     @Test public void testSerialization()
1:     {
1:         String source = "01:01:01.123123123";
1:         Long nt = TimeSerializer.timeStringToLong(source);
1: 
1:         ByteBuffer buf = TimeSerializer.instance.serialize(nt);
1:         TimeSerializer.instance.validate(buf);
1: 
1:         Long result = TimeSerializer.instance.deserialize(buf);
1:         String strResult = TimeSerializer.instance.toString(result);
1: 
1:         assert(strResult.equals(source));
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadHourLow()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("-1:0:0.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadHourHigh()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("24:0:0.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadMinuteLow()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:-1:0.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadMinuteHigh()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:60:0.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testEmpty()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadSecondLow()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:-1.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadSecondHigh()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:60.123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadSecondHighNoMilli()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:60");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadNanoLow()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:59.-123456789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadNanoHigh()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:59.1234567899");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testBadNanoCharacter()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("23:59:59.12345A789");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testNegativeLongTime()
1:     {
1:         Long time = TimeSerializer.timeStringToLong("-10");
1:     }
1: 
1:     @Test (expected=MarshalException.class)
1:     public void testRawLongOverflow()
1:     {
1:         Long input = TimeUnit.DAYS.toNanos(1) + 1;
1:         Long time = TimeSerializer.timeStringToLong(input.toString());
1:     }
1: }
============================================================================