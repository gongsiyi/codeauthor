1:3c43775: /*
1:3c43775:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c43775:  * or more contributor license agreements.  See the NOTICE file
1:3c43775:  * distributed with this work for additional information
1:3c43775:  * regarding copyright ownership.  The ASF licenses this file
1:3c43775:  * to you under the Apache License, Version 2.0 (the
1:3c43775:  * "License"); you may not use this file except in compliance
1:3c43775:  * with the License.  You may obtain a copy of the License at
1:3c43775:  *
1:3c43775:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c43775:  *
1:3c43775:  * Unless required by applicable law or agreed to in writing, software
1:3c43775:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c43775:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c43775:  * See the License for the specific language governing permissions and
1:3c43775:  * limitations under the License.
1:3c43775:  */
1:3c43775: package org.apache.cassandra.cql3.statements;
2:3c43775: 
1:3c43775: import java.util.LinkedHashMap;
1:3c43775: import java.util.Map;
1:3c43775: 
1:3c43775: import org.apache.cassandra.cql3.ColumnIdentifier;
1:3c43775: import org.apache.cassandra.db.marshal.AbstractType;
1:3c43775: import org.apache.cassandra.db.marshal.ReversedType;
1:3c43775: 
1:3c43775: public class CFProperties
1:3c43775: {
1:b31845c:     public final TableAttributes properties = new TableAttributes();
1:3c43775:     final Map<ColumnIdentifier, Boolean> definedOrdering = new LinkedHashMap<>(); // Insertion ordering is important
1:3c43775:     boolean useCompactStorage = false;
1:3c43775: 
1:3c43775:     public void validate()
1:3c43775:     {
1:3c43775:         properties.validate();
1:3c43775:     }
1:3c43775: 
1:3c43775:     public void setOrdering(ColumnIdentifier alias, boolean reversed)
1:3c43775:     {
1:3c43775:         definedOrdering.put(alias, reversed);
1:3c43775:     }
1:3c43775: 
1:3c43775:     public void setCompactStorage()
1:3c43775:     {
1:3c43775:         useCompactStorage = true;
1:3c43775:     }
1:3c43775: 
1:3c43775:     public AbstractType getReversableType(ColumnIdentifier targetIdentifier, AbstractType<?> type)
1:3c43775:     {
1:3c43775:         if (!definedOrdering.containsKey(targetIdentifier))
1:3c43775:         {
1:3c43775:             return type;
1:3c43775:         }
1:3c43775:         return definedOrdering.get(targetIdentifier) ? ReversedType.getInstance(type) : type;
1:3c43775:     }
1:3c43775: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public final TableAttributes properties = new TableAttributes();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.statements;
1: 
0: import java.util.HashMap;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.ReversedType;
1: 
1: public class CFProperties
1: {
0:     public final CFPropDefs properties = new CFPropDefs();
1:     final Map<ColumnIdentifier, Boolean> definedOrdering = new LinkedHashMap<>(); // Insertion ordering is important
1:     boolean useCompactStorage = false;
1: 
1:     public void validate()
1:     {
1:         properties.validate();
1:     }
1: 
1:     public void setOrdering(ColumnIdentifier alias, boolean reversed)
1:     {
1:         definedOrdering.put(alias, reversed);
1:     }
1: 
1:     public void setCompactStorage()
1:     {
1:         useCompactStorage = true;
1:     }
1: 
1:     public AbstractType getReversableType(ColumnIdentifier targetIdentifier, AbstractType<?> type)
1:     {
1:         if (!definedOrdering.containsKey(targetIdentifier))
1:         {
1:             return type;
1:         }
1:         return definedOrdering.get(targetIdentifier) ? ReversedType.getInstance(type) : type;
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.cql3.statements;
0: 
0: import java.util.HashMap;
0: import java.util.LinkedHashMap;
0: import java.util.Map;
0: 
0: import org.apache.cassandra.cql3.ColumnIdentifier;
0: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.db.marshal.ReversedType;
0: 
0: public class CFProperties
0: {
0:     public final CFPropDefs properties = new CFPropDefs();
0:     final Map<ColumnIdentifier, Boolean> definedOrdering = new LinkedHashMap<>(); // Insertion ordering is important
0:     boolean useCompactStorage = false;
0: 
0:     public void validate()
0:     {
0:         properties.validate();
0:     }
0: 
0:     public void setOrdering(ColumnIdentifier alias, boolean reversed)
0:     {
0:         definedOrdering.put(alias, reversed);
0:     }
0: 
0:     public void setCompactStorage()
0:     {
0:         useCompactStorage = true;
0:     }
0: 
0:     public AbstractType getReversableType(ColumnIdentifier targetIdentifier, AbstractType<?> type)
0:     {
0:         if (!definedOrdering.containsKey(targetIdentifier))
0:         {
0:             return type;
0:         }
0:         return definedOrdering.get(targetIdentifier) ? ReversedType.getInstance(type) : type;
0:     }
0: }
============================================================================