1:4205011: /*
1:4205011:  * Licensed to the Apache Software Foundation (ASF) under one
1:4205011:  * or more contributor license agreements.  See the NOTICE file
1:4205011:  * distributed with this work for additional information
1:4205011:  * regarding copyright ownership.  The ASF licenses this file
1:4205011:  * to you under the Apache License, Version 2.0 (the
1:4205011:  * "License"); you may not use this file except in compliance
1:4205011:  * with the License.  You may obtain a copy of the License at
1:4205011:  *
1:4205011:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4205011:  *
1:4205011:  * Unless required by applicable law or agreed to in writing, software
1:4205011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4205011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4205011:  * See the License for the specific language governing permissions and
1:4205011:  * limitations under the License.
1:4205011:  */
1:4205011: package org.apache.cassandra.cql3.validation.operations;
1:4205011: 
1:4205011: import org.junit.Test;
1:4205011: 
1:4205011: import com.datastax.driver.core.SimpleStatement;
1:4205011: 
1:4205011: import org.apache.cassandra.cql3.CQLTester;
1:4205011: 
1:4205011: public class SelectGroupByTest extends CQLTester
1:4205011: {
1:4205011:     @Test
1:4205011:     public void testGroupByWithoutPaging() throws Throwable
1:4205011:     {
1:4205011:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:4205011:         {
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:4205011:                     + compactOption);
1:4205011: 
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 3, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 3, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 4, 3, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 8, 2, 12, 24)");
1:4205011: 
1:4205011:             // Makes sure that we have some tombstones
1:4205011:             execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2 AND d = 12");
1:4205011:             execute("DELETE FROM %s WHERE a = 3");
1:4205011: 
1:4205011:             // Range queries
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a"),
1:4205011:                        row(1, 2, 6, 4L, 24),
1:4205011:                        row(2, 2, 6, 2L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b"),
1:4205011:                        row(1, 2, 6, 2L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24),
1:4205011:                        row(2, 2, 6, 1L, 6),
1:4205011:                        row(2, 4, 12, 1L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING"),
1:4205011:                        row(1, 2, 6, 2L, 12),
1:4205011:                        row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:             assertEmpty(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE b IN () GROUP BY a, b ALLOW FILTERING"));
1:4205011: 
1:4205011:             // Range queries without aggregates
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             // Range query with LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b LIMIT 2"),
1:4205011:                        row(1, 2, 6, 2L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:             // Range queries with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                        row(1, 2, 6, 2L, 12),
1:4205011:                        row(2, 2, 6, 1L, 6),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 6, 4L, 24),
1:4205011:                        row(2, 2, 6, 2L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             // Range query with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
1:4205011:                        row(1, 2, 6, 2L, 12),
1:4205011:                        row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 6, 4L, 24),
1:4205011:                        row(2, 2, 6, 2L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             // Range queries without aggregates and with LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c LIMIT 3"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b LIMIT 3"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6),
1:4205011:                        row(2, 2, 3, 3));
1:4205011: 
1:4205011:             // Range queries without aggregates and with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             // Range queries without aggregates, with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2 LIMIT 3"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(2, 2, 3, 3));
1:4205011: 
1:4205011:             // Range query with DISTINCT
1:4205011:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s GROUP BY a"),
1:4205011:                        row(1, 1L),
1:4205011:                        row(2, 1L),
1:4205011:                        row(4, 1L));
1:4205011: 
1:4205011:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:4205011:                                  "SELECT DISTINCT a, count(a)FROM %s GROUP BY a, b");
1:4205011: 
1:4205011:             // Range query with DISTINCT and LIMIT
1:4205011:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s GROUP BY a LIMIT 2"),
1:4205011:                        row(1, 1L),
1:4205011:                        row(2, 1L));
1:4205011: 
1:4205011:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:4205011:                                  "SELECT DISTINCT a, count(a)FROM %s GROUP BY a, b LIMIT 2");
1:4205011: 
1:4205011:             // Range query with ORDER BY
1:4205011:             assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:4205011:                                  "SELECT a, b, c, count(b), max(e) FROM %s GROUP BY a, b ORDER BY b DESC, c DESC");
1:4205011: 
1:4205011:             // Single partition queries
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY b, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             // Single partition queries without aggregates
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY b, c"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 and token(a) = token(1) GROUP BY b, c"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             // Single partition queries with DISTINCT
1:4205011:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a"),
1:4205011:                        row(1, 1L));
1:4205011: 
1:4205011:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:4205011:                                  "SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a, b");
1:4205011: 
1:4205011:             // Single partition queries with LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 10"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 1"),
1:4205011:                        row(1L, 6));
1:4205011: 
1:4205011:             // Single partition queries with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 10"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 1"),
1:4205011:                        row(1L, 6));
1:4205011: 
1:4205011:             // Single partition queries without aggregates and with LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 1"),
1:4205011:                        row(1, 2, 1, 3));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6));
1:4205011: 
1:4205011:             // Single partition queries without aggregates and with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                        row(1, 2, 1, 3));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6));
1:4205011: 
1:4205011:             // Single partition queries with ORDER BY
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC"),
1:4205011:                        row(1, 4, 24, 2L, 24),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 2, 6, 1L, 6));
1:4205011: 
1:4205011:             // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC PER PARTITION LIMIT 1"),
1:4205011:                        row(1, 4, 24, 2L, 24));
1:4205011: 
1:4205011:             // Single partition queries with ORDER BY and LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC LIMIT 2"),
1:4205011:                        row(1, 4, 24, 2L, 24),
1:4205011:                        row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:             // Multi-partitions queries
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(1, 4, 12, 2L, 24),
1:4205011:                        row(2, 2, 6, 1L, 6),
1:4205011:                        row(2, 4, 12, 1L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2 GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:             // Multi-partitions queries without aggregates
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 4, 2, 6),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 1, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 4, 2, 6),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(4, 8, 2, 12));
1:4205011: 
1:4205011:             // Multi-partitions query with DISTINCT
1:4205011:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a"),
1:4205011:                        row(1, 1L),
1:4205011:                        row(2, 1L),
1:4205011:                        row(4, 1L));
1:4205011: 
1:4205011:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:4205011:                                  "SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b");
1:4205011: 
1:4205011:             // Multi-partitions query with DISTINCT and LIMIT
1:4205011:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a LIMIT 2"),
1:4205011:                        row(1, 1L),
1:4205011:                        row(2, 1L));
1:4205011: 
1:4205011:             // Multi-partitions queries with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 1"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(2, 2, 6, 1L, 6),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:4205011:                        row(1, 2, 6, 1L, 6),
1:4205011:                        row(1, 2, 12, 1L, 12),
1:4205011:                        row(2, 2, 6, 1L, 6),
1:4205011:                        row(2, 4, 12, 1L, 12),
1:4205011:                        row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:             // Multi-partitions queries with ORDER BY
1:4205011:             assertRows(execute("SELECT a, b, c, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC"),
1:4205011:                        row(4, 8, 2, 1L, 24),
1:4205011:                        row(2, 4, 3, 1L, 12),
1:4205011:                        row(1, 4, 2, 2L, 24),
1:4205011:                        row(2, 2, 3, 1L, 6),
1:4205011:                        row(1, 2, 2, 2L, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c ORDER BY b DESC, c DESC"),
1:4205011:                        row(4, 8, 2, 12),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(1, 4, 2, 12),
1:4205011:                        row(2, 2, 3, 3),
1:4205011:                        row(1, 2, 2, 6),
1:4205011:                        row(1, 2, 1, 3));
1:4205011: 
1:4205011:             // Multi-partitions queries with ORDER BY and LIMIT
1:4205011:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 3"),
1:4205011:                        row(4, 8, 2, 12),
1:4205011:                        row(2, 4, 3, 6),
1:4205011:                        row(1, 4, 2, 12));
1:4205011: 
1:4205011:             // Invalid queries
1:4205011:             assertInvalidMessage("Group by is currently only supported on the columns of the PRIMARY KEY, got e",
1:4205011:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, e");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:4205011:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY c");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:4205011:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, c, b");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:4205011:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, a");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:4205011:                                  "SELECT a, b, c, d FROM %s WHERE token(a) = token(1) GROUP BY b, c");
1:4205011: 
1:4205011:             assertInvalidMessage("Undefined column name clustering1",
1:4205011:                                  "SELECT a, b as clustering1, max(c) FROM %s WHERE a = 1 GROUP BY a, clustering1");
1:4205011: 
1:4205011:             assertInvalidMessage("Undefined column name z",
1:4205011:                                  "SELECT a, b, max(c) FROM %s WHERE a = 1 GROUP BY a, b, z");
1:4205011: 
1:4205011:             // Test with composite partition key
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key ((a, b), c, d))" + compactOption);
1:4205011: 
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 1, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 3, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by is not supported on only a part of the partition key",
1:4205011:                                  "SELECT a, b, max(d) FROM %s GROUP BY a");
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, max(d) FROM %s GROUP BY a, b"),
1:4205011:                        row(1, 2, 12),
1:4205011:                        row(1, 1, 12));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, max(d) FROM %s WHERE a = 1 AND b = 1 GROUP BY b"),
1:4205011:                        row(1, 1, 12));
1:4205011: 
1:4205011:             // Test with table without clustering key
1:4205011:             createTable("CREATE TABLE %s (a int primary key, b int, c int)" + compactOption);
1:4205011: 
1:4205011:             execute("INSERT INTO %s (a, b, c) VALUES (1, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c) VALUES (2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c) VALUES (3, 12, 24)");
1:4205011: 
1:4205011:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:4205011:                     "SELECT a, max(c) FROM %s WHERE a = 1 GROUP BY a, a");
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithoutPagingWithDeletions() throws Throwable
1:4205011:     {
1:4205011:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:4205011:         {
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:4205011:                     + compactOption);
1:4205011: 
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 9, 18)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 9, 18)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 9, 18)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 12, 24)");
1:4205011: 
1:4205011:             execute("DELETE FROM %s WHERE a = 1 AND b = 2 AND c = 1 AND d = 12");
1:4205011:             execute("DELETE FROM %s WHERE a = 1 AND b = 2 AND c = 2 AND d = 9");
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, c, count(b), max(d) FROM %s GROUP BY a, b, c"),
1:4205011:                        row(1, 2, 1, 3L, 9),
1:4205011:                        row(1, 2, 2, 3L, 12),
1:4205011:                        row(1, 2, 3, 4L, 12));
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithRangeNamesQueryWithoutPaging() throws Throwable
1:4205011:     {
1:4205011:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:4205011:         {
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, primary key (a, b, c))"
1:4205011:                     + compactOption);
1:4205011: 
1:4205011:             for (int i = 1; i < 5; i++)
1:4205011:                 for (int j = 1; j < 5; j++)
1:4205011:                     for (int k = 1; k < 5; k++)
1:4205011:                         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", i, j, k, i + j);
1:4205011: 
1:4205011:             // Makes sure that we have some tombstones
1:4205011:             execute("DELETE FROM %s WHERE a = 3");
1:4205011: 
1:4205011:             // Range queries
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(1, 2, 3, 2L, 3),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(2, 2, 4, 2L, 4),
1:4205011:                        row(4, 1, 5, 2L, 5),
1:4205011:                        row(4, 2, 6, 2L, 6));
1:4205011: 
1:4205011:             // Range queries with LIMIT
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a LIMIT 5 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(1, 2, 3, 2L, 3),
1:4205011:                        row(2, 1, 3, 2L, 3));
1:4205011: 
1:4205011:             // Range queries with PER PARTITION LIMIT
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             // Range queries with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 5 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3),
1:4205011:                        row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2 ALLOW FILTERING"),
1:4205011:                        row(1, 1, 2, 2L, 2),
1:4205011:                        row(2, 1, 3, 2L, 3));
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithStaticColumnsWithoutPaging() throws Throwable
1:4205011:     {
1:4205011:         createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, primary key (a, b, c))");
1:4205011: 
1:4205011:         // ------------------------------------
1:4205011:         // Test with non static columns empty
1:4205011:         // ------------------------------------
1:4205011:         execute("UPDATE %s SET s = 1 WHERE a = 1");
1:4205011:         execute("UPDATE %s SET s = 2 WHERE a = 2");
1:4205011:         execute("UPDATE %s SET s = 3 WHERE a = 4");
1:4205011: 
1:4205011:         // Range queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         // Range query without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
1:4205011:                    row(1, null, 1),
1:4205011:                    row(2, null, 2),
1:4205011:                    row(4, null, 3));
1:4205011: 
1:4205011:         // Range query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:         // Range queries with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         // Range query with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a"),
1:4205011:                    row(1, 1, 1L),
1:4205011:                    row(2, 2, 1L),
1:4205011:                    row(4, 3, 1L));
1:4205011: 
1:4205011:         // Range queries with DISTINCT and LIMIT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 1, 1L),
1:4205011:                    row(2, 2, 1L));
1:4205011: 
1:4205011:         // Single partition queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:4205011:                    row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b"),
1:4205011:                    row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:         // Single partition query without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a, b"),
1:4205011:                    row(1, null, 1));
1:4205011: 
1:4205011:         // Single partition query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:         // Single partition query with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:         // Single partition query with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:4205011:                    row(1, 1, 1L));
1:4205011: 
1:4205011:         // Multi-partitions queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions query without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:4205011:                    row(1, null, 1),
1:4205011:                    row(2, null, 2),
1:4205011:                    row(4, null, 3));
1:4205011: 
1:4205011:         // Multi-partitions query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions query with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
1:4205011:                    row(1, null, 1, 0L, 1L),
1:4205011:                    row(2, null, 2, 0L, 1L),
1:4205011:                    row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions queries with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:4205011:                    row(1, 1, 1L),
1:4205011:                    row(2, 2, 1L),
1:4205011:                    row(4, 3, 1L));
1:4205011: 
1:4205011:         // Multi-partitions with DISTINCT and LIMIT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 1, 1L),
1:4205011:                    row(2, 2, 1L));
1:4205011: 
1:4205011:         // ------------------------------------
1:4205011:         // Test with some non static columns empty
1:4205011:         // ------------------------------------
1:4205011:         execute("UPDATE %s SET s = 3 WHERE a = 3");
1:4205011:         execute("DELETE s FROM %s WHERE a = 4");
1:4205011: 
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 1, 3)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 2, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 3, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 3, 3)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 4, 3, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (4, 8, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (5, 8, 2, 12)");
1:4205011: 
1:4205011:         // Makes sure that we have some tombstones
1:4205011:         execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2");
1:4205011:         execute("DELETE FROM %s WHERE a = 5");
1:4205011: 
1:4205011:         // Range queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
1:4205011:                    row(1, 2, 1, 4L, 4L),
1:4205011:                    row(2, 2, 2, 2L, 2L),
1:4205011:                    row(4, 8, null, 1L, 0L),
1:4205011:                    row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(1, 4, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(2, 4, 2, 1L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L),
1:4205011:                    row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Range queries without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(4, 8, null),
1:4205011:                    row(3, null, 3));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(1, 4, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(2, 4, 2),
1:4205011:                    row(4, 8, null),
1:4205011:                    row(3, null, 3));
1:4205011: 
1:4205011:         // Range query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 2, 1, 4L, 4L),
1:4205011:                    row(2, 2, 2, 2L, 2L));
1:4205011: 
1:4205011:         // Range query with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L),
1:4205011:                    row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         // Range query with PER PARTITION LIMIT and LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:         // Range queries without aggregates and with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b LIMIT 10"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(1, 4, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(2, 4, 2),
1:4205011:                    row(4, 8, null),
1:4205011:                    row(3, null, 3));
1:4205011: 
1:4205011:         // Range queries without aggregates and with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(4, 8, null),
1:4205011:                    row(3, null, 3));
1:4205011: 
1:4205011:         // Range queries without aggregates, with PER PARTITION LIMIT and with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2));
1:4205011: 
1:4205011:         // Range query with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a"),
1:4205011:                    row(1, 1, 1L, 1L),
1:4205011:                    row(2, 2, 1L, 1L),
1:4205011:                    row(4, null, 1L, 0L),
1:4205011:                    row(3, 3, 1L, 1L));
1:4205011: 
1:4205011:         // Range query with DISTINCT and LIMIT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 1, 1L, 1L),
1:4205011:                    row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Range query with ORDER BY
1:4205011:         assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:4205011:                              "SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a ORDER BY b DESC, c DESC");
1:4205011: 
1:4205011:         // Single partition queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:4205011:                    row(1, 2, 1, 4L, 4L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3 GROUP BY a, b"),
1:4205011:                    row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2 GROUP BY a, b"),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Single partition queries without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a"),
1:4205011:                    row(1, 2, 1));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 4 GROUP BY a, b"),
1:4205011:                    row(4, 8, null));
1:4205011: 
1:4205011:         // Single partition query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Single partition query with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Single partition queries without aggregates and with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
1:4205011:                    row(2, 2, 2));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 2"),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(2, 4, 2));
1:4205011: 
1:4205011:         // Single partition queries with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 2 GROUP BY a"),
1:4205011:                    row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 4 GROUP BY a"),
1:4205011:                    row(4, null, 1L, 0L));
1:4205011: 
1:4205011:          // Single partition query with ORDER BY
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC"),
1:4205011:                    row(2, 4, 2, 1L, 1L),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:          // Single partition queries with ORDER BY and LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 1"),
1:4205011:                    row(2, 4, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:4205011:        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC PER PARTITION LIMIT 1"),
1:4205011:                   row(2, 4, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions queries
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:4205011:                    row(1, 2, 1, 4L, 4L),
1:4205011:                    row(2, 2, 2, 2L, 2L),
1:4205011:                    row(3, null, 3, 0L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(1, 4, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(2, 4, 2, 1L, 1L),
1:4205011:                    row(3, null, 3, 0L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2 GROUP BY a, b"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions queries without aggregates
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(3, null, 3),
1:4205011:                    row(4, 8, null));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(1, 4, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(2, 4, 2),
1:4205011:                    row(3, null, 3),
1:4205011:                    row(4, 8, null));
1:4205011: 
1:4205011:         // Multi-partitions query with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 2, 1, 4L, 4L),
1:4205011:                    row(2, 2, 2, 2L, 2L));
1:4205011: 
1:4205011:         // Multi-partitions query with PER PARTITION LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(3, null, 3, 0L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(1, 4, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(2, 4, 2, 1L, 1L),
1:4205011:                    row(3, null, 3, 0L, 1L),
1:4205011:                    row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:         // Multi-partitions queries with PER PARTITION LIMIT and LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 4 LIMIT 3"),
1:4205011:                    row(1, 2, 1, 2L, 2L),
1:4205011:                    row(1, 4, 1, 2L, 2L),
1:4205011:                    row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:         // Multi-partitions queries without aggregates and with LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(2, 2, 2));
1:4205011: 
1:4205011:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 10"),
1:4205011:                    row(1, 2, 1),
1:4205011:                    row(1, 4, 1),
1:4205011:                    row(2, 2, 2),
1:4205011:                    row(2, 4, 2),
1:4205011:                    row(3, null, 3),
1:4205011:                    row(4, 8, null));
1:4205011: 
1:4205011:         // Multi-partitions query with DISTINCT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:4205011:                    row(1, 1, 1L, 1L),
1:4205011:                    row(2, 2, 1L, 1L),
1:4205011:                    row(3, 3, 1L, 1L),
1:4205011:                    row(4, null, 1L, 0L));
1:4205011: 
1:4205011:         // Multi-partitions query with DISTINCT and LIMIT
1:4205011:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:4205011:                    row(1, 1, 1L, 1L),
1:4205011:                    row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:          // Multi-partitions query with ORDER BY
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC"),
1:4205011:                    row(4, 8, null, 1L, 0L),
1:4205011:                    row(1, 4, 1, 2L, 2L),
1:4205011:                    row(2, 4, 2, 1L, 1L),
1:4205011:                    row(2, 2, 2, 1L, 1L),
1:4205011:                    row(1, 2, 1, 2L, 2L));
1:4205011: 
1:4205011:          // Multi-partitions queries with ORDER BY and LIMIT
1:4205011:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 2"),
1:4205011:                    row(4, 8, null, 1L, 0L),
1:4205011:                    row(1, 4, 1, 2L, 2L));
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithPaging() throws Throwable
1:4205011:     {
1:4205011:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:4205011:         {
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:4205011:                     + compactOption);
1:4205011: 
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 3, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 3, 3, 6)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 4, 3, 6, 12)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 2, 12, 24)");
1:4205011:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 8, 2, 12, 24)");
1:4205011: 
1:4205011:             // Makes sure that we have some tombstones
1:4205011:             execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2 AND d = 12");
1:4205011:             execute("DELETE FROM %s WHERE a = 3");
1:4205011: 
1:4205011:             for (int pageSize = 1; pageSize < 10; pageSize++)
1:4205011:             {
1:4205011:                 // Range queries
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a", pageSize),
1:4205011:                               row(1, 2, 6, 4L, 24),
1:4205011:                               row(2, 2, 6, 2L, 12),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b", pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(2, 4, 12, 1L, 12),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s", pageSize),
1:4205011:                               row(1, 2, 6, 7L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 ALLOW FILTERING",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 3L, 12));
1:4205011: 
1:4205011:                 // Range queries without aggregates
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(1, 4, 2, 6),
1:4205011:                               row(2, 2, 3, 3),
1:4205011:                               row(2, 4, 3, 6),
1:4205011:                               row(4, 8, 2, 12));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 4, 2, 6),
1:4205011:                               row(2, 2, 3, 3),
1:4205011:                               row(2, 4, 3, 6),
1:4205011:                               row(4, 8, 2, 12));
1:4205011: 
1:4205011:                 // Range query with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 7L, 24));
1:4205011: 
1:4205011:                 // Range queries with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 3", pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(2, 4, 12, 1L, 12),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 // Range query with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2", pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12),
1:4205011:                               row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:                 // Range query without aggregates and with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(2, 2, 3, 3),
1:4205011:                               row(2, 4, 3, 6),
1:4205011:                               row(4, 8, 2, 12));
1:4205011: 
1:4205011:                 // Range queries without aggregates and with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c LIMIT 3", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(1, 4, 2, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b LIMIT 3", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 4, 2, 6),
1:4205011:                               row(2, 2, 3, 3));
1:4205011: 
1:4205011:                 // Range query without aggregates, with PER PARTITION LIMIT and with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2 LIMIT 3", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(2, 2, 3, 3));
1:4205011: 
1:4205011:                 // Range query with DISTINCT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s GROUP BY a", pageSize),
1:4205011:                               row(1, 1L),
1:4205011:                               row(2, 1L),
1:4205011:                               row(4, 1L));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s", pageSize),
1:4205011:                               row(1, 3L));
1:4205011: 
1:4205011:                 // Range query with DISTINCT and LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s GROUP BY a LIMIT 2", pageSize),
1:4205011:                               row(1, 1L),
1:4205011:                               row(2, 1L));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s LIMIT 2", pageSize),
1:4205011:                               row(1, 3L));
1:4205011: 
1:4205011:                 // Range query with ORDER BY
1:4205011:                 assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:4205011:                                      "SELECT a, b, c, count(b), max(e) FROM %s GROUP BY a, b ORDER BY b DESC, c DESC");
1:4205011: 
1:4205011:                 // Single partition queries
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1", pageSize),
1:4205011:                               row(1, 2, 6, 4L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, b, c",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 2L, 12));
1:4205011: 
1:4205011:                 // Single partition queries without aggregates
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 4, 2, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c", pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(1, 4, 2, 6));
1:4205011: 
1:4205011:                 // Single partition query with DISTINCT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 1L));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 1L));
1:4205011: 
1:4205011:                 // Single partition queries with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 10",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 4L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 1",
1:4205011:                                                    pageSize),
1:4205011:                               row(1L, 6));
1:4205011: 
1:4205011:                 // Single partition query with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:                 // Single partition queries without aggregates and with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 4, 2, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 1",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 1, 3));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6));
1:4205011: 
1:4205011:                 // Single partition queries with ORDER BY
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 4, 24, 2L, 24),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(1, 2, 6, 1L, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 ORDER BY b DESC, c DESC",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 4, 24, 4L, 24));
1:4205011: 
1:4205011:                 // Single partition queries with ORDER BY and LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 4, 24, 2L, 24),
1:4205011:                               row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 ORDER BY b DESC, c DESC LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 4, 24, 4L, 24));
1:4205011: 
1:4205011:                 // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC PER PARTITION LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 4, 24, 2L, 24),
1:4205011:                               row(1, 2, 12, 1L, 12));
1:4205011: 
1:4205011:                 // Multi-partitions queries
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(1, 4, 12, 2L, 24),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(2, 4, 12, 1L, 12),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4)",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 7L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2 GROUP BY a, b, c",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(2, 2, 6, 1L, 6));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 3L, 12));
1:4205011: 
1:4205011:                 // Multi-partitions queries with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(1, 2, 12, 1L, 12),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(2, 4, 12, 1L, 12),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 1",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 6, 1L, 6),
1:4205011:                               row(2, 2, 6, 1L, 6),
1:4205011:                               row(4, 8, 24, 1L, 24));
1:4205011: 
1:4205011:                 // Multi-partitions queries without aggregates
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 4, 2, 6),
1:4205011:                               row(2, 2, 3, 3),
1:4205011:                               row(2, 4, 3, 6),
1:4205011:                               row(4, 8, 2, 12));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 2, 1, 3),
1:4205011:                               row(1, 2, 2, 6),
1:4205011:                               row(1, 4, 2, 6),
1:4205011:                               row(2, 2, 3, 3),
1:4205011:                               row(2, 4, 3, 6),
1:4205011:                               row(4, 8, 2, 12));
1:4205011: 
1:4205011:                 // Multi-partitions queries with DISTINCT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 1L),
1:4205011:                               row(2, 1L),
1:4205011:                               row(4, 1L));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4)",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 3L));
1:4205011: 
1:4205011:                 // Multi-partitions query with DISTINCT and LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 1L),
1:4205011:                               row(2, 1L));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) LIMIT 2",
1:4205011:                                                    pageSize),
1:4205011:                               row(1, 3L));
1:4205011:             }
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithRangeNamesQueryWithPaging() throws Throwable
1:4205011:     {
1:4205011:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:4205011:         {
1:4205011:             createTable("CREATE TABLE %s (a int, b int, c int, d int, primary key (a, b, c))"
1:4205011:                     + compactOption);
1:4205011: 
1:4205011:             for (int i = 1; i < 5; i++)
1:4205011:                 for (int j = 1; j < 5; j++)
1:4205011:                     for (int k = 1; k < 5; k++)
1:4205011:                         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", i, j, k, i + j);
1:4205011: 
1:4205011:             // Makes sure that we have some tombstones
1:4205011:             execute("DELETE FROM %s WHERE a = 3");
1:4205011: 
1:4205011:             for (int pageSize = 1; pageSize < 2; pageSize++)
1:4205011:             {
1:4205011:                 // Range queries
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(1, 2, 3, 2L, 3),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(2, 2, 4, 2L, 4),
1:4205011:                               row(4, 1, 5, 2L, 5),
1:4205011:                               row(4, 2, 6, 2L, 6));
1:4205011: 
1:4205011:                 // Range queries with LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a LIMIT 5 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(1, 2, 3, 2L, 3),
1:4205011:                               row(2, 1, 3, 2L, 3));
1:4205011: 
1:4205011:                 // Range queries with PER PARTITION LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 // Range queries with PER PARTITION LIMIT and LIMIT
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 5 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3),
1:4205011:                               row(4, 1, 5, 2L, 5));
1:4205011: 
1:4205011:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2 ALLOW FILTERING", pageSize),
1:4205011:                               row(1, 1, 2, 2L, 2),
1:4205011:                               row(2, 1, 3, 2L, 3));
1:4205011:             }
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     @Test
1:4205011:     public void testGroupByWithStaticColumnsWithPaging() throws Throwable
1:4205011:     {
1:4205011:         createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, primary key (a, b, c))");
1:4205011: 
1:4205011:         // ------------------------------------
1:4205011:         // Test with non static columns empty
1:4205011:         // ------------------------------------
1:4205011:         execute("UPDATE %s SET s = 1 WHERE a = 1");
1:4205011:         execute("UPDATE %s SET s = 2 WHERE a = 2");
1:4205011:         execute("UPDATE %s SET s = 3 WHERE a = 4");
1:4205011: 
1:4205011:         for (int pageSize = 1; pageSize < 10; pageSize++)
1:4205011:         {
1:4205011:             // Range queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a", pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b", pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s", pageSize),
1:4205011:                           row(1, null, 1, 0L, 3L));
1:4205011: 
1:4205011:             // Range query without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b", pageSize),
1:4205011:                           row(1, null, 1),
1:4205011:                           row(2, null, 2),
1:4205011:                           row(4, null, 3));
1:4205011: 
1:4205011:             // Range query with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s LIMIT 2", pageSize),
1:4205011:                           row(1, null, 1, 0L, 3L));
1:4205011: 
1:4205011:             // Range query with PER PARTITION LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2", pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             // Range query with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2 LIMIT 2", pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:             // Range queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a", pageSize),
1:4205011:                           row(1, 1, 1L),
1:4205011:                           row(2, 2, 1L),
1:4205011:                           row(4, 3, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s ", pageSize),
1:4205011:                           row(1, 1, 3L));
1:4205011: 
1:4205011:             // Range queries with DISTINCT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a LIMIT 2", pageSize),
1:4205011:                           row(1, 1, 1L),
1:4205011:                           row(2, 2, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s LIMIT 2", pageSize),
1:4205011:                           row(1, 1, 3L));
1:4205011: 
1:4205011:             // Single partition queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1", pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:             // Single partition query without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a, b", pageSize),
1:4205011:                           row(1, null, 1));
1:4205011: 
1:4205011:             // Single partition queries with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L));
1:4205011: 
1:4205011: 
1:4205011:             // Single partition queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1 GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1", pageSize),
1:4205011:                           row(1, 1, 1L));
1:4205011: 
1:4205011:             // Multi-partitions queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 3L));
1:4205011: 
1:4205011:             // Multi-partitions query without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1),
1:4205011:                           row(2, null, 2),
1:4205011:                           row(4, null, 3));
1:4205011: 
1:4205011:             // Multi-partitions query with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 3L));
1:4205011: 
1:4205011:             // Multi-partitions query with PER PARTITION LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a PER PARTITION LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L),
1:4205011:                           row(4, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             // Multi-partitions query with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a PER PARTITION LIMIT 2 LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, null, 1, 0L, 1L),
1:4205011:                           row(2, null, 2, 0L, 1L));
1:4205011: 
1:4205011:             // Multi-partitions queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L),
1:4205011:                           row(2, 2, 1L),
1:4205011:                           row(4, 3, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 3L));
1:4205011: 
1:4205011:             // Multi-partitions queries with DISTINCT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L),
1:4205011:                           row(2, 2, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 3L));
1:4205011:         }
1:4205011: 
1:4205011:         // ------------------------------------
1:4205011:         // Test with non static columns
1:4205011:         // ------------------------------------
1:4205011:         execute("UPDATE %s SET s = 3 WHERE a = 3");
1:4205011:         execute("DELETE s FROM %s WHERE a = 4");
1:4205011: 
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 1, 3)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 2, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 3, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 3, 3)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 4, 3, 6)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (4, 8, 2, 12)");
1:4205011:         execute("INSERT INTO %s (a, b, c, d) VALUES (5, 8, 2, 12)");
1:4205011: 
1:4205011:         // Makes sure that we have some tombstones
1:4205011:         execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2");
1:4205011:         execute("DELETE FROM %s WHERE a = 5");
1:4205011: 
1:4205011:         for (int pageSize = 1; pageSize < 10; pageSize++)
1:4205011:         {
1:4205011:             // Range queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a", pageSize),
1:4205011:                           row(1, 2, 1, 4L, 4L),
1:4205011:                           row(2, 2, 2, 2L, 2L),
1:4205011:                           row(4, 8, null, 1L, 0L),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b", pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s", pageSize),
1:4205011:                           row(1, 2, 1, 7L, 7L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 ALLOW FILTERING",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 3L, 3L));
1:4205011: 
1:4205011:             // Range queries without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(4, 8, null),
1:4205011:                           row(3, null, 3));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(1, 4, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(2, 4, 2),
1:4205011:                           row(4, 8, null),
1:4205011:                           row(3, null, 3));
1:4205011: 
1:4205011:             // Range query with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 4L, 4L),
1:4205011:                           row(2, 2, 2, 2L, 2L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s LIMIT 2", pageSize),
1:4205011:                           row(1, 2, 1, 7L, 7L));
1:4205011: 
1:4205011:             // Range queries without aggregates and with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a LIMIT 2", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(2, 2, 2));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b LIMIT 10", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(1, 4, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(2, 4, 2),
1:4205011:                           row(4, 8, null),
1:4205011:                           row(3, null, 3));
1:4205011: 
1:4205011:             // Range queries with PER PARTITION LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 2", pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             // Range queries with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 3", pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3", pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             // Range query without aggregates and with PER PARTITION LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(4, 8, null),
1:4205011:                           row(3, null, 3));
1:4205011: 
1:4205011:             // Range queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a", pageSize),
1:4205011:                           row(1, 1, 1L, 1L),
1:4205011:                           row(2, 2, 1L, 1L),
1:4205011:                           row(4, null, 1L, 0L),
1:4205011:                           row(3, 3, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s", pageSize),
1:4205011:                           row(1, 1, 4L, 3L));
1:4205011: 
1:4205011:             // Range queries with DISTINCT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L, 1L),
1:4205011:                           row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s LIMIT 2", pageSize),
1:4205011:                           row(1, 1, 4L, 3L));
1:4205011: 
1:4205011:             // Single partition queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 4L, 4L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3 GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3",
1:4205011:                                                pageSize),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2 GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             // Single partition queries without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a", pageSize),
1:4205011:                           row(1, 2, 1));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 4 GROUP BY a, b", pageSize),
1:4205011:                           row(4, 8, null));
1:4205011: 
1:4205011:             // Single partition queries with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 LIMIT 1",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 2, 2, 2L, 2L));
1:4205011: 
1:4205011:             // Single partition queries without aggregates and with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1", pageSize),
1:4205011:                           row(2, 2, 2));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 2", pageSize),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(2, 4, 2));
1:4205011: 
1:4205011:             // Single partition queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 2 GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 4 GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(4, null, 1L, 0L));
1:4205011: 
1:4205011:             // Single partition queries with ORDER BY
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 ORDER BY b DESC, c DESC",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 4, 2, 2L, 2L));
1:4205011: 
1:4205011:             // Single partition queries with ORDER BY and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 1",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 4, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 ORDER BY b DESC, c DESC LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(2, 4, 2, 2L, 2L));
1:4205011: 
1:4205011:             // Multi-partitions queries
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 4L, 4L),
1:4205011:                           row(2, 2, 2, 2L, 2L),
1:4205011:                           row(3, null, 3, 0L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(3, null, 3, 0L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 7L, 7L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2 GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 3L, 3L));
1:4205011: 
1:4205011:             // Multi-partitions queries without aggregates
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a", pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(3, null, 3),
1:4205011:                           row(4, 8, null));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(1, 4, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(2, 4, 2),
1:4205011:                           row(3, null, 3),
1:4205011:                           row(4, 8, null));
1:4205011: 
1:4205011:             // Multi-partitions queries with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 4L, 4L),
1:4205011:                           row(2, 2, 2, 2L, 2L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 7L, 7L));
1:4205011: 
1:4205011:             // Multi-partitions queries without aggregates and with LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(2, 2, 2));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 10",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1),
1:4205011:                           row(1, 4, 1),
1:4205011:                           row(2, 2, 2),
1:4205011:                           row(2, 4, 2),
1:4205011:                           row(3, null, 3),
1:4205011:                           row(4, 8, null));
1:4205011: 
1:4205011:             // Multi-partitions queries with PER PARTITION LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(3, null, 3, 0L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 3",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(3, null, 3, 0L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             // Multi-partitions queries with PER PARTITION LIMIT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(3, null, 3, 0L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 3 LIMIT 10",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 2, 1, 2L, 2L),
1:4205011:                           row(1, 4, 1, 2L, 2L),
1:4205011:                           row(2, 2, 2, 1L, 1L),
1:4205011:                           row(2, 4, 2, 1L, 1L),
1:4205011:                           row(3, null, 3, 0L, 1L),
1:4205011:                           row(4, 8, null, 1L, 0L));
1:4205011: 
1:4205011:             // Multi-partitions queries with DISTINCT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L, 1L),
1:4205011:                           row(2, 2, 1L, 1L),
1:4205011:                           row(3, 3, 1L, 1L),
1:4205011:                           row(4, null, 1L, 0L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 4L, 3L));
1:4205011: 
1:4205011:             // Multi-partitions query with DISTINCT and LIMIT
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 1L, 1L),
1:4205011:                           row(2, 2, 1L, 1L));
1:4205011: 
1:4205011:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:4205011:                                                pageSize),
1:4205011:                           row(1, 1, 4L, 3L));
1:4205011:         }
1:4205011:     }
1:4205011: 
1:4205011:     private com.datastax.driver.core.ResultSet executeNetWithPaging(String query, int pageSize) throws Throwable
1:4205011:     {
1:4205011:         return sessionNet().execute(new SimpleStatement(formatQuery(query)).setFetchSize(pageSize));
1:4205011:     }
1:4205011: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.validation.operations;
1: 
1: import org.junit.Test;
1: 
1: import com.datastax.driver.core.SimpleStatement;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: 
1: public class SelectGroupByTest extends CQLTester
1: {
1:     @Test
1:     public void testGroupByWithoutPaging() throws Throwable
1:     {
1:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:                     + compactOption);
1: 
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 3, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 3, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 4, 3, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 8, 2, 12, 24)");
1: 
1:             // Makes sure that we have some tombstones
1:             execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2 AND d = 12");
1:             execute("DELETE FROM %s WHERE a = 3");
1: 
1:             // Range queries
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a"),
1:                        row(1, 2, 6, 4L, 24),
1:                        row(2, 2, 6, 2L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b"),
1:                        row(1, 2, 6, 2L, 12),
1:                        row(1, 4, 12, 2L, 24),
1:                        row(2, 2, 6, 1L, 6),
1:                        row(2, 4, 12, 1L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING"),
1:                        row(1, 2, 6, 2L, 12),
1:                        row(2, 2, 6, 1L, 6));
1: 
1:             assertEmpty(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE b IN () GROUP BY a, b ALLOW FILTERING"));
1: 
1:             // Range queries without aggregates
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6),
1:                        row(2, 2, 3, 3),
1:                        row(2, 4, 3, 6),
1:                        row(4, 8, 2, 12));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6),
1:                        row(2, 2, 3, 3),
1:                        row(2, 4, 3, 6),
1:                        row(4, 8, 2, 12));
1: 
1:             // Range query with LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b LIMIT 2"),
1:                        row(1, 2, 6, 2L, 12),
1:                        row(1, 4, 12, 2L, 24));
1: 
1:             // Range queries with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:                        row(1, 2, 6, 2L, 12),
1:                        row(2, 2, 6, 1L, 6),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:                        row(1, 2, 6, 4L, 24),
1:                        row(2, 2, 6, 2L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             // Range query with PER PARTITION LIMIT and LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
1:                        row(1, 2, 6, 2L, 12),
1:                        row(2, 2, 6, 1L, 6));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:                        row(1, 2, 6, 4L, 24),
1:                        row(2, 2, 6, 2L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             // Range queries without aggregates and with LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c LIMIT 3"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b LIMIT 3"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6),
1:                        row(2, 2, 3, 3));
1: 
1:             // Range queries without aggregates and with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(2, 2, 3, 3),
1:                        row(2, 4, 3, 6),
1:                        row(4, 8, 2, 12));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:                        row(1, 2, 1, 3),
1:                        row(2, 2, 3, 3),
1:                        row(4, 8, 2, 12));
1: 
1:             // Range queries without aggregates, with PER PARTITION LIMIT and LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2 LIMIT 3"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(2, 2, 3, 3));
1: 
1:             // Range query with DISTINCT
1:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s GROUP BY a"),
1:                        row(1, 1L),
1:                        row(2, 1L),
1:                        row(4, 1L));
1: 
1:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:                                  "SELECT DISTINCT a, count(a)FROM %s GROUP BY a, b");
1: 
1:             // Range query with DISTINCT and LIMIT
1:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s GROUP BY a LIMIT 2"),
1:                        row(1, 1L),
1:                        row(2, 1L));
1: 
1:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:                                  "SELECT DISTINCT a, count(a)FROM %s GROUP BY a, b LIMIT 2");
1: 
1:             // Range query with ORDER BY
1:             assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:                                  "SELECT a, b, c, count(b), max(e) FROM %s GROUP BY a, b ORDER BY b DESC, c DESC");
1: 
1:             // Single partition queries
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 4, 12, 2L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY b, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 4, 12, 2L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, b, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             // Single partition queries without aggregates
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY b, c"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 and token(a) = token(1) GROUP BY b, c"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6));
1: 
1:             // Single partition queries with DISTINCT
1:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a"),
1:                        row(1, 1L));
1: 
1:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:                                  "SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a, b");
1: 
1:             // Single partition queries with LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 10"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 4, 12, 2L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             assertRows(execute("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 1"),
1:                        row(1L, 6));
1: 
1:             // Single partition queries with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 10"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 4, 12, 2L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             assertRows(execute("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 1"),
1:                        row(1L, 6));
1: 
1:             // Single partition queries without aggregates and with LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 1"),
1:                        row(1, 2, 1, 3));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6));
1: 
1:             // Single partition queries without aggregates and with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 2"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 1"),
1:                        row(1, 2, 1, 3));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6));
1: 
1:             // Single partition queries with ORDER BY
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC"),
1:                        row(1, 4, 24, 2L, 24),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 2, 6, 1L, 6));
1: 
1:             // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC PER PARTITION LIMIT 1"),
1:                        row(1, 4, 24, 2L, 24));
1: 
1:             // Single partition queries with ORDER BY and LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC LIMIT 2"),
1:                        row(1, 4, 24, 2L, 24),
1:                        row(1, 2, 12, 1L, 12));
1: 
1:             // Multi-partitions queries
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(1, 4, 12, 2L, 24),
1:                        row(2, 2, 6, 1L, 6),
1:                        row(2, 4, 12, 1L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2 GROUP BY a, b, c"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(2, 2, 6, 1L, 6));
1: 
1:             // Multi-partitions queries without aggregates
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 4, 2, 6),
1:                        row(2, 2, 3, 3),
1:                        row(2, 4, 3, 6),
1:                        row(4, 8, 2, 12));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c"),
1:                        row(1, 2, 1, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 4, 2, 6),
1:                        row(2, 2, 3, 3),
1:                        row(2, 4, 3, 6),
1:                        row(4, 8, 2, 12));
1: 
1:             // Multi-partitions query with DISTINCT
1:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a"),
1:                        row(1, 1L),
1:                        row(2, 1L),
1:                        row(4, 1L));
1: 
1:             assertInvalidMessage("Grouping on clustering columns is not allowed for SELECT DISTINCT queries",
1:                                  "SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b");
1: 
1:             // Multi-partitions query with DISTINCT and LIMIT
1:             assertRows(execute("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a LIMIT 2"),
1:                        row(1, 1L),
1:                        row(2, 1L));
1: 
1:             // Multi-partitions queries with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 1"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(2, 2, 6, 1L, 6),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             assertRows(execute("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 2"),
1:                        row(1, 2, 6, 1L, 6),
1:                        row(1, 2, 12, 1L, 12),
1:                        row(2, 2, 6, 1L, 6),
1:                        row(2, 4, 12, 1L, 12),
1:                        row(4, 8, 24, 1L, 24));
1: 
1:             // Multi-partitions queries with ORDER BY
1:             assertRows(execute("SELECT a, b, c, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC"),
1:                        row(4, 8, 2, 1L, 24),
1:                        row(2, 4, 3, 1L, 12),
1:                        row(1, 4, 2, 2L, 24),
1:                        row(2, 2, 3, 1L, 6),
1:                        row(1, 2, 2, 2L, 12));
1: 
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c ORDER BY b DESC, c DESC"),
1:                        row(4, 8, 2, 12),
1:                        row(2, 4, 3, 6),
1:                        row(1, 4, 2, 12),
1:                        row(2, 2, 3, 3),
1:                        row(1, 2, 2, 6),
1:                        row(1, 2, 1, 3));
1: 
1:             // Multi-partitions queries with ORDER BY and LIMIT
1:             assertRows(execute("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 3"),
1:                        row(4, 8, 2, 12),
1:                        row(2, 4, 3, 6),
1:                        row(1, 4, 2, 12));
1: 
1:             // Invalid queries
1:             assertInvalidMessage("Group by is currently only supported on the columns of the PRIMARY KEY, got e",
1:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, e");
1: 
1:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY c");
1: 
1:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, c, b");
1: 
1:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:                                  "SELECT a, b, d, count(b), max(c) FROM %s WHERE a = 1 GROUP BY a, a");
1: 
1:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:                                  "SELECT a, b, c, d FROM %s WHERE token(a) = token(1) GROUP BY b, c");
1: 
1:             assertInvalidMessage("Undefined column name clustering1",
1:                                  "SELECT a, b as clustering1, max(c) FROM %s WHERE a = 1 GROUP BY a, clustering1");
1: 
1:             assertInvalidMessage("Undefined column name z",
1:                                  "SELECT a, b, max(c) FROM %s WHERE a = 1 GROUP BY a, b, z");
1: 
1:             // Test with composite partition key
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key ((a, b), c, d))" + compactOption);
1: 
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 1, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 1, 3, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1: 
1:             assertInvalidMessage("Group by is not supported on only a part of the partition key",
1:                                  "SELECT a, b, max(d) FROM %s GROUP BY a");
1: 
1:             assertRows(execute("SELECT a, b, max(d) FROM %s GROUP BY a, b"),
1:                        row(1, 2, 12),
1:                        row(1, 1, 12));
1: 
1:             assertRows(execute("SELECT a, b, max(d) FROM %s WHERE a = 1 AND b = 1 GROUP BY b"),
1:                        row(1, 1, 12));
1: 
1:             // Test with table without clustering key
1:             createTable("CREATE TABLE %s (a int primary key, b int, c int)" + compactOption);
1: 
1:             execute("INSERT INTO %s (a, b, c) VALUES (1, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c) VALUES (2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c) VALUES (3, 12, 24)");
1: 
1:             assertInvalidMessage("Group by currently only support groups of columns following their declared order in the PRIMARY KEY",
1:                     "SELECT a, max(c) FROM %s WHERE a = 1 GROUP BY a, a");
1:         }
1:     }
1: 
1:     @Test
1:     public void testGroupByWithoutPagingWithDeletions() throws Throwable
1:     {
1:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:                     + compactOption);
1: 
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 9, 18)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 9, 18)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 9, 18)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 3, 12, 24)");
1: 
1:             execute("DELETE FROM %s WHERE a = 1 AND b = 2 AND c = 1 AND d = 12");
1:             execute("DELETE FROM %s WHERE a = 1 AND b = 2 AND c = 2 AND d = 9");
1: 
1:             assertRows(execute("SELECT a, b, c, count(b), max(d) FROM %s GROUP BY a, b, c"),
1:                        row(1, 2, 1, 3L, 9),
1:                        row(1, 2, 2, 3L, 12),
1:                        row(1, 2, 3, 4L, 12));
1:         }
1:     }
1: 
1:     @Test
1:     public void testGroupByWithRangeNamesQueryWithoutPaging() throws Throwable
1:     {
1:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, primary key (a, b, c))"
1:                     + compactOption);
1: 
1:             for (int i = 1; i < 5; i++)
1:                 for (int j = 1; j < 5; j++)
1:                     for (int k = 1; k < 5; k++)
1:                         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", i, j, k, i + j);
1: 
1:             // Makes sure that we have some tombstones
1:             execute("DELETE FROM %s WHERE a = 3");
1: 
1:             // Range queries
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(1, 2, 3, 2L, 3),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(2, 2, 4, 2L, 4),
1:                        row(4, 1, 5, 2L, 5),
1:                        row(4, 2, 6, 2L, 6));
1: 
1:             // Range queries with LIMIT
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a LIMIT 5 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(1, 2, 3, 2L, 3),
1:                        row(2, 1, 3, 2L, 3));
1: 
1:             // Range queries with PER PARTITION LIMIT
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             // Range queries with PER PARTITION LIMIT and LIMIT
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 5 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3),
1:                        row(4, 1, 5, 2L, 5));
1: 
1:             assertRows(execute("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2 ALLOW FILTERING"),
1:                        row(1, 1, 2, 2L, 2),
1:                        row(2, 1, 3, 2L, 3));
1:         }
1:     }
1: 
1:     @Test
1:     public void testGroupByWithStaticColumnsWithoutPaging() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, primary key (a, b, c))");
1: 
1:         // ------------------------------------
1:         // Test with non static columns empty
1:         // ------------------------------------
1:         execute("UPDATE %s SET s = 1 WHERE a = 1");
1:         execute("UPDATE %s SET s = 2 WHERE a = 2");
1:         execute("UPDATE %s SET s = 3 WHERE a = 4");
1: 
1:         // Range queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         // Range query without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
1:                    row(1, null, 1),
1:                    row(2, null, 2),
1:                    row(4, null, 3));
1: 
1:         // Range query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L));
1: 
1:         // Range queries with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         // Range query with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a"),
1:                    row(1, 1, 1L),
1:                    row(2, 2, 1L),
1:                    row(4, 3, 1L));
1: 
1:         // Range queries with DISTINCT and LIMIT
1:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a LIMIT 2"),
1:                    row(1, 1, 1L),
1:                    row(2, 2, 1L));
1: 
1:         // Single partition queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:                    row(1, null, 1, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b"),
1:                    row(1, null, 1, 0L, 1L));
1: 
1:         // Single partition query without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a, b"),
1:                    row(1, null, 1));
1: 
1:         // Single partition query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L));
1: 
1:         // Single partition query with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b PER PARTITION LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L));
1: 
1:         // Single partition query with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:                    row(1, 1, 1L));
1: 
1:         // Multi-partitions queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         // Multi-partitions query without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:                    row(1, null, 1),
1:                    row(2, null, 2),
1:                    row(4, null, 3));
1: 
1:         // Multi-partitions query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L));
1: 
1:         // Multi-partitions query with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
1:                    row(1, null, 1, 0L, 1L),
1:                    row(2, null, 2, 0L, 1L),
1:                    row(4, null, 3, 0L, 1L));
1: 
1:         // Multi-partitions queries with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:                    row(1, 1, 1L),
1:                    row(2, 2, 1L),
1:                    row(4, 3, 1L));
1: 
1:         // Multi-partitions with DISTINCT and LIMIT
1:         assertRows(execute("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:                    row(1, 1, 1L),
1:                    row(2, 2, 1L));
1: 
1:         // ------------------------------------
1:         // Test with some non static columns empty
1:         // ------------------------------------
1:         execute("UPDATE %s SET s = 3 WHERE a = 3");
1:         execute("DELETE s FROM %s WHERE a = 4");
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 1, 3)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 2, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 3, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 3, 3)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 4, 3, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (4, 8, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (5, 8, 2, 12)");
1: 
1:         // Makes sure that we have some tombstones
1:         execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2");
1:         execute("DELETE FROM %s WHERE a = 5");
1: 
1:         // Range queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a"),
1:                    row(1, 2, 1, 4L, 4L),
1:                    row(2, 2, 2, 2L, 2L),
1:                    row(4, 8, null, 1L, 0L),
1:                    row(3, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(1, 4, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(2, 4, 2, 1L, 1L),
1:                    row(4, 8, null, 1L, 0L),
1:                    row(3, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Range queries without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2),
1:                    row(4, 8, null),
1:                    row(3, null, 3));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b"),
1:                    row(1, 2, 1),
1:                    row(1, 4, 1),
1:                    row(2, 2, 2),
1:                    row(2, 4, 2),
1:                    row(4, 8, null),
1:                    row(3, null, 3));
1: 
1:         // Range query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a LIMIT 2"),
1:                    row(1, 2, 1, 4L, 4L),
1:                    row(2, 2, 2, 2L, 2L));
1: 
1:         // Range query with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(4, 8, null, 1L, 0L),
1:                    row(3, null, 3, 0L, 1L));
1: 
1:         // Range query with PER PARTITION LIMIT and LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(4, 8, null, 1L, 0L));
1: 
1:         // Range queries without aggregates and with LIMIT
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a LIMIT 2"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b LIMIT 10"),
1:                    row(1, 2, 1),
1:                    row(1, 4, 1),
1:                    row(2, 2, 2),
1:                    row(2, 4, 2),
1:                    row(4, 8, null),
1:                    row(3, null, 3));
1: 
1:         // Range queries without aggregates and with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2),
1:                    row(4, 8, null),
1:                    row(3, null, 3));
1: 
1:         // Range queries without aggregates, with PER PARTITION LIMIT and with LIMIT
1:         assertRows(execute("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2));
1: 
1:         // Range query with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a"),
1:                    row(1, 1, 1L, 1L),
1:                    row(2, 2, 1L, 1L),
1:                    row(4, null, 1L, 0L),
1:                    row(3, 3, 1L, 1L));
1: 
1:         // Range query with DISTINCT and LIMIT
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a LIMIT 2"),
1:                    row(1, 1, 1L, 1L),
1:                    row(2, 2, 1L, 1L));
1: 
1:         // Range query with ORDER BY
1:         assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:                              "SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a ORDER BY b DESC, c DESC");
1: 
1:         // Single partition queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a"),
1:                    row(1, 2, 1, 4L, 4L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3 GROUP BY a, b"),
1:                    row(3, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2 GROUP BY a, b"),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Single partition queries without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a"),
1:                    row(1, 2, 1));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 4 GROUP BY a, b"),
1:                    row(4, 8, null));
1: 
1:         // Single partition query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Single partition query with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b PER PARTITION LIMIT 1"),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Single partition queries without aggregates and with LIMIT
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1"),
1:                    row(2, 2, 2));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 2"),
1:                    row(2, 2, 2),
1:                    row(2, 4, 2));
1: 
1:         // Single partition queries with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 2 GROUP BY a"),
1:                    row(2, 2, 1L, 1L));
1: 
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 4 GROUP BY a"),
1:                    row(4, null, 1L, 0L));
1: 
1:          // Single partition query with ORDER BY
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC"),
1:                    row(2, 4, 2, 1L, 1L),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:          // Single partition queries with ORDER BY and LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 1"),
1:                    row(2, 4, 2, 1L, 1L));
1: 
1:         // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:        assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC PER PARTITION LIMIT 1"),
1:                   row(2, 4, 2, 1L, 1L));
1: 
1:         // Multi-partitions queries
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:                    row(1, 2, 1, 4L, 4L),
1:                    row(2, 2, 2, 2L, 2L),
1:                    row(3, null, 3, 0L, 1L),
1:                    row(4, 8, null, 1L, 0L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(1, 4, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(2, 4, 2, 1L, 1L),
1:                    row(3, null, 3, 0L, 1L),
1:                    row(4, 8, null, 1L, 0L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2 GROUP BY a, b"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Multi-partitions queries without aggregates
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2),
1:                    row(3, null, 3),
1:                    row(4, 8, null));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b"),
1:                    row(1, 2, 1),
1:                    row(1, 4, 1),
1:                    row(2, 2, 2),
1:                    row(2, 4, 2),
1:                    row(3, null, 3),
1:                    row(4, 8, null));
1: 
1:         // Multi-partitions query with LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:                    row(1, 2, 1, 4L, 4L),
1:                    row(2, 2, 2, 2L, 2L));
1: 
1:         // Multi-partitions query with PER PARTITION LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(3, null, 3, 0L, 1L),
1:                    row(4, 8, null, 1L, 0L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 2"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(1, 4, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(2, 4, 2, 1L, 1L),
1:                    row(3, null, 3, 0L, 1L),
1:                    row(4, 8, null, 1L, 0L));
1: 
1:         // Multi-partitions queries with PER PARTITION LIMIT and LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(3, null, 3, 0L, 1L));
1: 
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 4 LIMIT 3"),
1:                    row(1, 2, 1, 2L, 2L),
1:                    row(1, 4, 1, 2L, 2L),
1:                    row(2, 2, 2, 1L, 1L));
1: 
1:         // Multi-partitions queries without aggregates and with LIMIT
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:                    row(1, 2, 1),
1:                    row(2, 2, 2));
1: 
1:         assertRows(execute("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 10"),
1:                    row(1, 2, 1),
1:                    row(1, 4, 1),
1:                    row(2, 2, 2),
1:                    row(2, 4, 2),
1:                    row(3, null, 3),
1:                    row(4, 8, null));
1: 
1:         // Multi-partitions query with DISTINCT
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a"),
1:                    row(1, 1, 1L, 1L),
1:                    row(2, 2, 1L, 1L),
1:                    row(3, 3, 1L, 1L),
1:                    row(4, null, 1L, 0L));
1: 
1:         // Multi-partitions query with DISTINCT and LIMIT
1:         assertRows(execute("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2"),
1:                    row(1, 1, 1L, 1L),
1:                    row(2, 2, 1L, 1L));
1: 
1:          // Multi-partitions query with ORDER BY
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC"),
1:                    row(4, 8, null, 1L, 0L),
1:                    row(1, 4, 1, 2L, 2L),
1:                    row(2, 4, 2, 1L, 1L),
1:                    row(2, 2, 2, 1L, 1L),
1:                    row(1, 2, 1, 2L, 2L));
1: 
1:          // Multi-partitions queries with ORDER BY and LIMIT
1:         assertRows(execute("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 2"),
1:                    row(4, 8, null, 1L, 0L),
1:                    row(1, 4, 1, 2L, 2L));
1:     }
1: 
1:     @Test
1:     public void testGroupByWithPaging() throws Throwable
1:     {
1:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, e int, primary key (a, b, c, d))"
1:                     + compactOption);
1: 
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 1, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 2, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 3, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (1, 4, 2, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 2, 3, 3, 6)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (2, 4, 3, 6, 12)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (3, 3, 2, 12, 24)");
1:             execute("INSERT INTO %s (a, b, c, d, e) VALUES (4, 8, 2, 12, 24)");
1: 
1:             // Makes sure that we have some tombstones
1:             execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2 AND d = 12");
1:             execute("DELETE FROM %s WHERE a = 3");
1: 
1:             for (int pageSize = 1; pageSize < 10; pageSize++)
1:             {
1:                 // Range queries
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a", pageSize),
1:                               row(1, 2, 6, 4L, 24),
1:                               row(2, 2, 6, 2L, 12),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b", pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(1, 4, 12, 2L, 24),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(2, 4, 12, 1L, 12),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s", pageSize),
1:                               row(1, 2, 6, 7L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING",
1:                                                    pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(2, 2, 6, 1L, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE b = 2 ALLOW FILTERING",
1:                                                    pageSize),
1:                               row(1, 2, 6, 3L, 12));
1: 
1:                 // Range queries without aggregates
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(1, 4, 2, 6),
1:                               row(2, 2, 3, 3),
1:                               row(2, 4, 3, 6),
1:                               row(4, 8, 2, 12));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 4, 2, 6),
1:                               row(2, 2, 3, 3),
1:                               row(2, 4, 3, 6),
1:                               row(4, 8, 2, 12));
1: 
1:                 // Range query with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(1, 4, 12, 2L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 7L, 24));
1: 
1:                 // Range queries with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 3", pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(1, 4, 12, 2L, 24),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(2, 4, 12, 1L, 12),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 // Range query with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2", pageSize),
1:                               row(1, 2, 6, 2L, 12),
1:                               row(2, 2, 6, 1L, 6));
1: 
1:                 // Range query without aggregates and with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(2, 2, 3, 3),
1:                               row(2, 4, 3, 6),
1:                               row(4, 8, 2, 12));
1: 
1:                 // Range queries without aggregates and with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c LIMIT 3", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(1, 4, 2, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b LIMIT 3", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 4, 2, 6),
1:                               row(2, 2, 3, 3));
1: 
1:                 // Range query without aggregates, with PER PARTITION LIMIT and with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s GROUP BY a, b, c PER PARTITION LIMIT 2 LIMIT 3", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(2, 2, 3, 3));
1: 
1:                 // Range query with DISTINCT
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s GROUP BY a", pageSize),
1:                               row(1, 1L),
1:                               row(2, 1L),
1:                               row(4, 1L));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s", pageSize),
1:                               row(1, 3L));
1: 
1:                 // Range query with DISTINCT and LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s GROUP BY a LIMIT 2", pageSize),
1:                               row(1, 1L),
1:                               row(2, 1L));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s LIMIT 2", pageSize),
1:                               row(1, 3L));
1: 
1:                 // Range query with ORDER BY
1:                 assertInvalidMessage("ORDER BY is only supported when the partition key is restricted by an EQ or an IN",
1:                                      "SELECT a, b, c, count(b), max(e) FROM %s GROUP BY a, b ORDER BY b DESC, c DESC");
1: 
1:                 // Single partition queries
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(1, 4, 12, 2L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1", pageSize),
1:                               row(1, 2, 6, 4L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2 GROUP BY a, b, c",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 AND b = 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 2L, 12));
1: 
1:                 // Single partition queries without aggregates
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 4, 2, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c", pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(1, 4, 2, 6));
1: 
1:                 // Single partition query with DISTINCT
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a",
1:                                                    pageSize),
1:                               row(1, 1L));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a = 1 GROUP BY a",
1:                                                    pageSize),
1:                               row(1, 1L));
1: 
1:                 // Single partition queries with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 10",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(1, 4, 12, 2L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 4L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 1",
1:                                                    pageSize),
1:                               row(1L, 6));
1: 
1:                 // Single partition query with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c PER PARTITION LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12));
1: 
1:                 // Single partition queries without aggregates and with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 4, 2, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b LIMIT 1",
1:                                                    pageSize),
1:                               row(1, 2, 1, 3));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a = 1 GROUP BY a, b, c LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6));
1: 
1:                 // Single partition queries with ORDER BY
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC",
1:                                                    pageSize),
1:                               row(1, 4, 24, 2L, 24),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(1, 2, 6, 1L, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 ORDER BY b DESC, c DESC",
1:                                                    pageSize),
1:                               row(1, 4, 24, 4L, 24));
1: 
1:                 // Single partition queries with ORDER BY and LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 4, 24, 2L, 24),
1:                               row(1, 2, 12, 1L, 12));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 ORDER BY b DESC, c DESC LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 4, 24, 4L, 24));
1: 
1:                 // Single partition queries with ORDER BY and PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a = 1 GROUP BY a, b, c ORDER BY b DESC, c DESC PER PARTITION LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 4, 24, 2L, 24),
1:                               row(1, 2, 12, 1L, 12));
1: 
1:                 // Multi-partitions queries
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(1, 4, 12, 2L, 24),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(2, 4, 12, 1L, 12),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4)",
1:                                                    pageSize),
1:                               row(1, 2, 6, 7L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2 GROUP BY a, b, c",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(2, 2, 6, 1L, 6));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) AND b = 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 3L, 12));
1: 
1:                 // Multi-partitions queries with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(1, 2, 12, 1L, 12),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(2, 4, 12, 1L, 12),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, e, count(b), max(e) FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c PER PARTITION LIMIT 1",
1:                                                    pageSize),
1:                               row(1, 2, 6, 1L, 6),
1:                               row(2, 2, 6, 1L, 6),
1:                               row(4, 8, 24, 1L, 24));
1: 
1:                 // Multi-partitions queries without aggregates
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b",
1:                                                    pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 4, 2, 6),
1:                               row(2, 2, 3, 3),
1:                               row(2, 4, 3, 6),
1:                               row(4, 8, 2, 12));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, c, d FROM %s WHERE a IN (1, 2, 4) GROUP BY a, b, c",
1:                                                    pageSize),
1:                               row(1, 2, 1, 3),
1:                               row(1, 2, 2, 6),
1:                               row(1, 4, 2, 6),
1:                               row(2, 2, 3, 3),
1:                               row(2, 4, 3, 6),
1:                               row(4, 8, 2, 12));
1: 
1:                 // Multi-partitions queries with DISTINCT
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a",
1:                                                    pageSize),
1:                               row(1, 1L),
1:                               row(2, 1L),
1:                               row(4, 1L));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4)",
1:                                                    pageSize),
1:                               row(1, 3L));
1: 
1:                 // Multi-partitions query with DISTINCT and LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) GROUP BY a LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 1L),
1:                               row(2, 1L));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, count(a)FROM %s WHERE a IN (1, 2, 4) LIMIT 2",
1:                                                    pageSize),
1:                               row(1, 3L));
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testGroupByWithRangeNamesQueryWithPaging() throws Throwable
1:     {
1:         for (String compactOption : new String[] { "", " WITH COMPACT STORAGE" })
1:         {
1:             createTable("CREATE TABLE %s (a int, b int, c int, d int, primary key (a, b, c))"
1:                     + compactOption);
1: 
1:             for (int i = 1; i < 5; i++)
1:                 for (int j = 1; j < 5; j++)
1:                     for (int k = 1; k < 5; k++)
1:                         execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", i, j, k, i + j);
1: 
1:             // Makes sure that we have some tombstones
1:             execute("DELETE FROM %s WHERE a = 3");
1: 
1:             for (int pageSize = 1; pageSize < 2; pageSize++)
1:             {
1:                 // Range queries
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(1, 2, 3, 2L, 3),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(2, 2, 4, 2L, 4),
1:                               row(4, 1, 5, 2L, 5),
1:                               row(4, 2, 6, 2L, 6));
1: 
1:                 // Range queries with LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a LIMIT 5 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b LIMIT 3 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(1, 2, 3, 2L, 3),
1:                               row(2, 1, 3, 2L, 3));
1: 
1:                 // Range queries with PER PARTITION LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 // Range queries with PER PARTITION LIMIT and LIMIT
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b = 1 and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 5 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3),
1:                               row(4, 1, 5, 2L, 5));
1: 
1:                 assertRowsNet(executeNetWithPaging("SELECT a, b, d, count(b), max(d) FROM %s WHERE b IN (1, 2) and c IN (1, 2) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 2 ALLOW FILTERING", pageSize),
1:                               row(1, 1, 2, 2L, 2),
1:                               row(2, 1, 3, 2L, 3));
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testGroupByWithStaticColumnsWithPaging() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a int, b int, c int, s int static, d int, primary key (a, b, c))");
1: 
1:         // ------------------------------------
1:         // Test with non static columns empty
1:         // ------------------------------------
1:         execute("UPDATE %s SET s = 1 WHERE a = 1");
1:         execute("UPDATE %s SET s = 2 WHERE a = 2");
1:         execute("UPDATE %s SET s = 3 WHERE a = 4");
1: 
1:         for (int pageSize = 1; pageSize < 10; pageSize++)
1:         {
1:             // Range queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a", pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b", pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s", pageSize),
1:                           row(1, null, 1, 0L, 3L));
1: 
1:             // Range query without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b", pageSize),
1:                           row(1, null, 1),
1:                           row(2, null, 2),
1:                           row(4, null, 3));
1: 
1:             // Range query with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s LIMIT 2", pageSize),
1:                           row(1, null, 1, 0L, 3L));
1: 
1:             // Range query with PER PARTITION LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2", pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             // Range query with PER PARTITION LIMIT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a PER PARTITION LIMIT 2 LIMIT 2", pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L));
1: 
1:             // Range queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a", pageSize),
1:                           row(1, 1, 1L),
1:                           row(2, 2, 1L),
1:                           row(4, 3, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s ", pageSize),
1:                           row(1, 1, 3L));
1: 
1:             // Range queries with DISTINCT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s GROUP BY a LIMIT 2", pageSize),
1:                           row(1, 1, 1L),
1:                           row(2, 2, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s LIMIT 2", pageSize),
1:                           row(1, 1, 3L));
1: 
1:             // Single partition queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1", pageSize),
1:                           row(1, null, 1, 0L, 1L));
1: 
1:             // Single partition query without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a, b", pageSize),
1:                           row(1, null, 1));
1: 
1:             // Single partition queries with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a, b LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L));
1: 
1: 
1:             // Single partition queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1 GROUP BY a",
1:                                                pageSize),
1:                           row(1, 1, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a = 1", pageSize),
1:                           row(1, 1, 1L));
1: 
1:             // Multi-partitions queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 3L));
1: 
1:             // Multi-partitions query without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, null, 1),
1:                           row(2, null, 2),
1:                           row(4, null, 3));
1: 
1:             // Multi-partitions query with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 3L));
1: 
1:             // Multi-partitions query with PER PARTITION LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a PER PARTITION LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L),
1:                           row(4, null, 3, 0L, 1L));
1: 
1:             // Multi-partitions query with PER PARTITION LIMIT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a PER PARTITION LIMIT 2 LIMIT 2",
1:                                                pageSize),
1:                           row(1, null, 1, 0L, 1L),
1:                           row(2, null, 2, 0L, 1L));
1: 
1:             // Multi-partitions queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:                                                pageSize),
1:                           row(1, 1, 1L),
1:                           row(2, 2, 1L),
1:                           row(4, 3, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:                                                pageSize),
1:                           row(1, 1, 3L));
1: 
1:             // Multi-partitions queries with DISTINCT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 1, 1L),
1:                           row(2, 2, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:                                                pageSize),
1:                           row(1, 1, 3L));
1:         }
1: 
1:         // ------------------------------------
1:         // Test with non static columns
1:         // ------------------------------------
1:         execute("UPDATE %s SET s = 3 WHERE a = 3");
1:         execute("DELETE s FROM %s WHERE a = 4");
1: 
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 1, 3)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 2, 2, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 3, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (1, 4, 3, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 2, 3, 3)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (2, 4, 3, 6)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (4, 8, 2, 12)");
1:         execute("INSERT INTO %s (a, b, c, d) VALUES (5, 8, 2, 12)");
1: 
1:         // Makes sure that we have some tombstones
1:         execute("DELETE FROM %s WHERE a = 1 AND b = 3 AND c = 2");
1:         execute("DELETE FROM %s WHERE a = 5");
1: 
1:         for (int pageSize = 1; pageSize < 10; pageSize++)
1:         {
1:             // Range queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a", pageSize),
1:                           row(1, 2, 1, 4L, 4L),
1:                           row(2, 2, 2, 2L, 2L),
1:                           row(4, 8, null, 1L, 0L),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b", pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(4, 8, null, 1L, 0L),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s", pageSize),
1:                           row(1, 2, 1, 7L, 7L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 GROUP BY a, b ALLOW FILTERING",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE b = 2 ALLOW FILTERING",
1:                                                pageSize),
1:                           row(1, 2, 1, 3L, 3L));
1: 
1:             // Range queries without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a", pageSize),
1:                           row(1, 2, 1),
1:                           row(2, 2, 2),
1:                           row(4, 8, null),
1:                           row(3, null, 3));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b", pageSize),
1:                           row(1, 2, 1),
1:                           row(1, 4, 1),
1:                           row(2, 2, 2),
1:                           row(2, 4, 2),
1:                           row(4, 8, null),
1:                           row(3, null, 3));
1: 
1:             // Range query with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 2, 1, 4L, 4L),
1:                           row(2, 2, 2, 2L, 2L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s LIMIT 2", pageSize),
1:                           row(1, 2, 1, 7L, 7L));
1: 
1:             // Range queries without aggregates and with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a LIMIT 2", pageSize),
1:                           row(1, 2, 1),
1:                           row(2, 2, 2));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b LIMIT 10", pageSize),
1:                           row(1, 2, 1),
1:                           row(1, 4, 1),
1:                           row(2, 2, 2),
1:                           row(2, 4, 2),
1:                           row(4, 8, null),
1:                           row(3, null, 3));
1: 
1:             // Range queries with PER PARTITION LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 2", pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(4, 8, null, 1L, 0L),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(4, 8, null, 1L, 0L),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             // Range queries with PER PARTITION LIMIT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 2 LIMIT 3", pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3", pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             // Range query without aggregates and with PER PARTITION LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s GROUP BY a, b PER PARTITION LIMIT 1", pageSize),
1:                           row(1, 2, 1),
1:                           row(2, 2, 2),
1:                           row(4, 8, null),
1:                           row(3, null, 3));
1: 
1:             // Range queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a", pageSize),
1:                           row(1, 1, 1L, 1L),
1:                           row(2, 2, 1L, 1L),
1:                           row(4, null, 1L, 0L),
1:                           row(3, 3, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s", pageSize),
1:                           row(1, 1, 4L, 3L));
1: 
1:             // Range queries with DISTINCT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 1, 1L, 1L),
1:                           row(2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s LIMIT 2", pageSize),
1:                           row(1, 1, 4L, 3L));
1: 
1:             // Single partition queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 1 GROUP BY a",
1:                                                pageSize),
1:                           row(1, 2, 1, 4L, 4L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3 GROUP BY a, b",
1:                                                pageSize),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 3",
1:                                                pageSize),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2 GROUP BY a, b",
1:                                                pageSize),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 AND b = 2",
1:                                                pageSize),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             // Single partition queries without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 1 GROUP BY a", pageSize),
1:                           row(1, 2, 1));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 4 GROUP BY a, b", pageSize),
1:                           row(4, 8, null));
1: 
1:             // Single partition queries with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1",
1:                                                pageSize),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 LIMIT 1",
1:                                                pageSize),
1:                           row(2, 2, 2, 2L, 2L));
1: 
1:             // Single partition queries without aggregates and with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 1", pageSize),
1:                           row(2, 2, 2));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a = 2 GROUP BY a, b LIMIT 2", pageSize),
1:                           row(2, 2, 2),
1:                           row(2, 4, 2));
1: 
1:             // Single partition queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 2 GROUP BY a",
1:                                                pageSize),
1:                           row(2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a = 4 GROUP BY a",
1:                                                pageSize),
1:                           row(4, null, 1L, 0L));
1: 
1:             // Single partition queries with ORDER BY
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC",
1:                                                pageSize),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 ORDER BY b DESC, c DESC",
1:                                                pageSize),
1:                           row(2, 4, 2, 2L, 2L));
1: 
1:             // Single partition queries with ORDER BY and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 GROUP BY a, b ORDER BY b DESC, c DESC LIMIT 1",
1:                                                pageSize),
1:                           row(2, 4, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a = 2 ORDER BY b DESC, c DESC LIMIT 2",
1:                                                pageSize),
1:                           row(2, 4, 2, 2L, 2L));
1: 
1:             // Multi-partitions queries
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:                                                pageSize),
1:                           row(1, 2, 1, 4L, 4L),
1:                           row(2, 2, 2, 2L, 2L),
1:                           row(3, null, 3, 0L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(3, null, 3, 0L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:                                                pageSize),
1:                           row(1, 2, 1, 7L, 7L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2 GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) AND b = 2",
1:                                                pageSize),
1:                           row(1, 2, 1, 3L, 3L));
1: 
1:             // Multi-partitions queries without aggregates
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a", pageSize),
1:                           row(1, 2, 1),
1:                           row(2, 2, 2),
1:                           row(3, null, 3),
1:                           row(4, 8, null));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b",
1:                                                pageSize),
1:                           row(1, 2, 1),
1:                           row(1, 4, 1),
1:                           row(2, 2, 2),
1:                           row(2, 4, 2),
1:                           row(3, null, 3),
1:                           row(4, 8, null));
1: 
1:             // Multi-partitions queries with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 2, 1, 4L, 4L),
1:                           row(2, 2, 2, 2L, 2L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:                                                pageSize),
1:                           row(1, 2, 1, 7L, 7L));
1: 
1:             // Multi-partitions queries without aggregates and with LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 2, 1),
1:                           row(2, 2, 2));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b LIMIT 10",
1:                                                pageSize),
1:                           row(1, 2, 1),
1:                           row(1, 4, 1),
1:                           row(2, 2, 2),
1:                           row(2, 4, 2),
1:                           row(3, null, 3),
1:                           row(4, 8, null));
1: 
1:             // Multi-partitions queries with PER PARTITION LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(3, null, 3, 0L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 3",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(3, null, 3, 0L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             // Multi-partitions queries with PER PARTITION LIMIT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 1 LIMIT 3",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(3, null, 3, 0L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT a, b, s, count(b), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a, b PER PARTITION LIMIT 3 LIMIT 10",
1:                                                pageSize),
1:                           row(1, 2, 1, 2L, 2L),
1:                           row(1, 4, 1, 2L, 2L),
1:                           row(2, 2, 2, 1L, 1L),
1:                           row(2, 4, 2, 1L, 1L),
1:                           row(3, null, 3, 0L, 1L),
1:                           row(4, 8, null, 1L, 0L));
1: 
1:             // Multi-partitions queries with DISTINCT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a",
1:                                                pageSize),
1:                           row(1, 1, 1L, 1L),
1:                           row(2, 2, 1L, 1L),
1:                           row(3, 3, 1L, 1L),
1:                           row(4, null, 1L, 0L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4)",
1:                                                pageSize),
1:                           row(1, 1, 4L, 3L));
1: 
1:             // Multi-partitions query with DISTINCT and LIMIT
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) GROUP BY a LIMIT 2",
1:                                                pageSize),
1:                           row(1, 1, 1L, 1L),
1:                           row(2, 2, 1L, 1L));
1: 
1:             assertRowsNet(executeNetWithPaging("SELECT DISTINCT a, s, count(a), count(s) FROM %s WHERE a IN (1, 2, 3, 4) LIMIT 2",
1:                                                pageSize),
1:                           row(1, 1, 4L, 3L));
1:         }
1:     }
1: 
1:     private com.datastax.driver.core.ResultSet executeNetWithPaging(String query, int pageSize) throws Throwable
1:     {
1:         return sessionNet().execute(new SimpleStatement(formatQuery(query)).setFetchSize(pageSize));
1:     }
1: }
============================================================================