1:e4f6045: /*
1:e4f6045:  *
1:e4f6045:  * Licensed to the Apache Software Foundation (ASF) under one
1:e4f6045:  * or more contributor license agreements.  See the NOTICE file
1:e4f6045:  * distributed with this work for additional information
1:e4f6045:  * regarding copyright ownership.  The ASF licenses this file
1:e4f6045:  * to you under the Apache License, Version 2.0 (the
1:e4f6045:  * "License"); you may not use this file except in compliance
1:e4f6045:  * with the License.  You may obtain a copy of the License at
1:e4f6045:  *
1:e4f6045:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e4f6045:  *
1:e4f6045:  * Unless required by applicable law or agreed to in writing,
1:e4f6045:  * software distributed under the License is distributed on an
1:e4f6045:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e4f6045:  * KIND, either express or implied.  See the License for the
1:e4f6045:  * specific language governing permissions and limitations
1:e4f6045:  * under the License.
1:e4f6045:  *
1:e4f6045:  */
1:e4f6045: 
1:e4f6045: package org.apache.cassandra.stress.generate;
1:e4f6045: 
1:e4f6045: import java.util.concurrent.atomic.AtomicLong;
1:e4f6045: 
1:e4f6045: public class DistributionSequence extends Distribution
1:e4f6045: {
1:e4f6045: 
1:e4f6045:     private final long start;
1:e4f6045:     private final long totalCount;
1:e4f6045:     private final AtomicLong next = new AtomicLong();
1:e4f6045: 
1:e4f6045:     public DistributionSequence(long start, long end)
1:e4f6045:     {
1:e4f6045:         if (start > end)
1:e4f6045:             throw new IllegalStateException();
1:e4f6045:         this.start = start;
1:e4f6045:         this.totalCount = 1 + end - start;
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     private long nextWithWrap()
1:e4f6045:     {
1:e4f6045:         long next = this.next.getAndIncrement();
1:e4f6045:         return start + (next % totalCount);
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     @Override
1:e4f6045:     public long next()
1:e4f6045:     {
1:e4f6045:         return nextWithWrap();
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     @Override
1:e4f6045:     public double nextDouble()
1:e4f6045:     {
1:e4f6045:         return nextWithWrap();
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     @Override
1:e4f6045:     public long inverseCumProb(double cumProb)
1:e4f6045:     {
1:e4f6045:         return (long) (start + (totalCount-1) * cumProb);
1:e4f6045:     }
1:e4f6045: 
1:e4f6045:     @Override
1:7c759e2:     public void setSeed(long seed)
1:7c759e2:     {
1:7c759e2:         next.set(seed);
1:7c759e2:     }
1:e4f6045: 
1:e4f6045: }
1:e4f6045: 
============================================================================
author:Ben Slater
-------------------------------------------------------------------------------
commit:7c759e2
/////////////////////////////////////////////////////////////////////////
1:     public void setSeed(long seed)
1:     {
1:         next.set(seed);
1:     }
commit:e4f6045
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: package org.apache.cassandra.stress.generate;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: public class DistributionSequence extends Distribution
1: {
1: 
1:     private final long start;
1:     private final long totalCount;
1:     private final AtomicLong next = new AtomicLong();
1: 
1:     public DistributionSequence(long start, long end)
1:     {
1:         if (start > end)
1:             throw new IllegalStateException();
1:         this.start = start;
1:         this.totalCount = 1 + end - start;
1:     }
1: 
1:     private long nextWithWrap()
1:     {
1:         long next = this.next.getAndIncrement();
1:         return start + (next % totalCount);
1:     }
1: 
1:     @Override
1:     public long next()
1:     {
1:         return nextWithWrap();
1:     }
1: 
1:     @Override
1:     public double nextDouble()
1:     {
1:         return nextWithWrap();
1:     }
1: 
1:     @Override
1:     public long inverseCumProb(double cumProb)
1:     {
1:         return (long) (start + (totalCount-1) * cumProb);
1:     }
1: 
1:     @Override
0:     public void setSeed(long seed){}
1: 
1: }
1: 
============================================================================