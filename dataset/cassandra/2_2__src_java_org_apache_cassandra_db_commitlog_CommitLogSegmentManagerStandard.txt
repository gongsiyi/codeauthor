1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
2:e31e216:  */
2:e31e216: 
1:e31e216: package org.apache.cassandra.db.commitlog;
1:e31e216: 
1:e31e216: import java.io.File;
1:e31e216: 
1:e31e216: import org.apache.cassandra.db.Mutation;
1:e31e216: import org.apache.cassandra.io.util.FileUtils;
1:e31e216: 
1:e31e216: public class CommitLogSegmentManagerStandard extends AbstractCommitLogSegmentManager
2:e31e216: {
1:e31e216:     public CommitLogSegmentManagerStandard(final CommitLog commitLog, String storageDirectory)
1:e31e216:     {
1:e31e216:         super(commitLog, storageDirectory);
2:e31e216:     }
1:e31e216: 
1:e31e216:     public void discard(CommitLogSegment segment, boolean delete)
1:e31e216:     {
1:e31e216:         segment.close();
1:e31e216:         if (delete)
1:e31e216:             FileUtils.deleteWithConfirm(segment.logFile);
1:e31e216:         addSize(-segment.onDiskSize());
1:e31e216:     }
1:e31e216: 
2:e31e216:     /**
1:e31e216:      * Reserve space in the current segment for the provided mutation or, if there isn't space available,
1:e31e216:      * create a new segment. allocate() is blocking until allocation succeeds as it waits on a signal in advanceAllocatingFrom
1:e31e216:      *
1:e31e216:      * @param mutation mutation to allocate space for
1:e31e216:      * @param size total size of mutation (overhead + serialized size)
1:e31e216:      * @return the provided Allocation object
1:e31e216:      */
1:e31e216:     public CommitLogSegment.Allocation allocate(Mutation mutation, int size)
1:e31e216:     {
1:e31e216:         CommitLogSegment segment = allocatingFrom();
1:e31e216: 
1:e31e216:         CommitLogSegment.Allocation alloc;
1:e31e216:         while ( null == (alloc = segment.allocate(mutation, size)) )
1:e31e216:         {
1:e31e216:             // failed to allocate, so move to a new segment with enough room
1:e31e216:             advanceAllocatingFrom(segment);
1:e8907c1:             segment = allocatingFrom();
1:e31e216:         }
1:e31e216: 
1:e31e216:         return alloc;
1:e31e216:     }
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Simply delete untracked segment files w/standard, as it'll be flushed to sstables during recovery
1:e31e216:      *
1:e31e216:      * @param file segment file that is no longer in use.
1:e31e216:      */
1:e31e216:     void handleReplayedSegment(final File file)
1:e31e216:     {
1:e31e216:         // (don't decrease managed size, since this was never a "live" segment)
1:e31e216:         logger.trace("(Unopened) segment {} is no longer needed and will be deleted now", file);
1:e31e216:         FileUtils.deleteWithConfirm(file);
1:e31e216:     }
1:e31e216: 
1:e31e216:     public CommitLogSegment createSegment()
1:e31e216:     {
1:e8907c1:         return CommitLogSegment.createSegment(commitLog, this);
1:e31e216:     }
1:e31e216: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:e8907c1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             segment = allocatingFrom();
/////////////////////////////////////////////////////////////////////////
1:         return CommitLogSegment.createSegment(commitLog, this);
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.File;
1: 
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.io.util.FileUtils;
1: 
1: public class CommitLogSegmentManagerStandard extends AbstractCommitLogSegmentManager
1: {
1:     public CommitLogSegmentManagerStandard(final CommitLog commitLog, String storageDirectory)
1:     {
1:         super(commitLog, storageDirectory);
1:     }
1: 
1:     public void discard(CommitLogSegment segment, boolean delete)
1:     {
1:         segment.close();
1:         if (delete)
1:             FileUtils.deleteWithConfirm(segment.logFile);
1:         addSize(-segment.onDiskSize());
1:     }
1: 
1:     /**
0:      * Initiates the shutdown process for the management thread.
1:      */
0:     public void shutdown()
1:     {
0:         run = false;
0:         wakeManager();
1:     }
1: 
1:     /**
1:      * Reserve space in the current segment for the provided mutation or, if there isn't space available,
1:      * create a new segment. allocate() is blocking until allocation succeeds as it waits on a signal in advanceAllocatingFrom
1:      *
1:      * @param mutation mutation to allocate space for
1:      * @param size total size of mutation (overhead + serialized size)
1:      * @return the provided Allocation object
1:      */
1:     public CommitLogSegment.Allocation allocate(Mutation mutation, int size)
1:     {
1:         CommitLogSegment segment = allocatingFrom();
1: 
1:         CommitLogSegment.Allocation alloc;
1:         while ( null == (alloc = segment.allocate(mutation, size)) )
1:         {
1:             // failed to allocate, so move to a new segment with enough room
1:             advanceAllocatingFrom(segment);
0:             segment = allocatingFrom;
1:         }
1: 
1:         return alloc;
1:     }
1: 
1:     /**
1:      * Simply delete untracked segment files w/standard, as it'll be flushed to sstables during recovery
1:      *
1:      * @param file segment file that is no longer in use.
1:      */
1:     void handleReplayedSegment(final File file)
1:     {
1:         // (don't decrease managed size, since this was never a "live" segment)
1:         logger.trace("(Unopened) segment {} is no longer needed and will be deleted now", file);
1:         FileUtils.deleteWithConfirm(file);
1:     }
1: 
1:     public CommitLogSegment createSegment()
1:     {
0:         return CommitLogSegment.createSegment(commitLog, this, () -> wakeManager());
1:     }
1: }
============================================================================