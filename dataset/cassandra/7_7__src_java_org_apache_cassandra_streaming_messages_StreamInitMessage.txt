1:5151169: /*
1:5151169:  * Licensed to the Apache Software Foundation (ASF) under one
1:5151169:  * or more contributor license agreements.  See the NOTICE file
1:5151169:  * distributed with this work for additional information
1:5151169:  * regarding copyright ownership.  The ASF licenses this file
1:5151169:  * to you under the Apache License, Version 2.0 (the
1:5151169:  * "License"); you may not use this file except in compliance
1:5151169:  * with the License.  You may obtain a copy of the License at
1:5151169:  *
1:5151169:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5151169:  *
1:5151169:  * Unless required by applicable law or agreed to in writing, software
1:5151169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5151169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5151169:  * See the License for the specific language governing permissions and
1:5151169:  * limitations under the License.
2:5151169:  */
1:5151169: package org.apache.cassandra.streaming.messages;
1:5151169: 
1:5151169: import java.io.IOException;
1:67ccdab: import java.net.InetAddress;
1:5151169: import java.nio.ByteBuffer;
1:5151169: import java.util.UUID;
1:5151169: 
1:5151169: import org.apache.cassandra.db.TypeSizes;
1:5151169: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:5151169: import org.apache.cassandra.io.util.DataOutputBuffer;
1:c2ecfe7: import org.apache.cassandra.io.util.DataOutputBufferFixed;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:67ccdab: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1:5151169: import org.apache.cassandra.net.MessagingService;
1:5151169: import org.apache.cassandra.utils.UUIDSerializer;
1:5151169: 
1:5151169: /**
1:5151169:  * StreamInitMessage is first sent from the node where {@link org.apache.cassandra.streaming.StreamSession} is started,
1:5151169:  * to initiate corresponding {@link org.apache.cassandra.streaming.StreamSession} on the other side.
1:5151169:  */
1:5151169: public class StreamInitMessage
1:5151169: {
1:5151169:     public static IVersionedSerializer<StreamInitMessage> serializer = new StreamInitMessageSerializer();
1:5151169: 
1:67ccdab:     public final InetAddress from;
1:44fa2cd:     public final int sessionIndex;
1:5151169:     public final UUID planId;
1:5151169:     public final String description;
1:5151169: 
1:d881024:     // true if this init message is to connect for outgoing message on receiving side
1:d881024:     public final boolean isForOutgoing;
1:0de0b8c:     public final boolean keepSSTableLevel;
1:a5b90f1:     public final boolean isIncremental;
1:67ccdab: 
1:a5b90f1:     public StreamInitMessage(InetAddress from, int sessionIndex, UUID planId, String description, boolean isForOutgoing, boolean keepSSTableLevel, boolean isIncremental)
1:5151169:     {
1:67ccdab:         this.from = from;
1:44fa2cd:         this.sessionIndex = sessionIndex;
1:5151169:         this.planId = planId;
1:5151169:         this.description = description;
1:d881024:         this.isForOutgoing = isForOutgoing;
1:0de0b8c:         this.keepSSTableLevel = keepSSTableLevel;
1:a5b90f1:         this.isIncremental = isIncremental;
1:5151169:     }
1:5151169: 
1:5151169:     /**
1:5151169:      * Create serialized message.
1:5151169:      *
1:5151169:      * @param compress true if message is compressed
1:5151169:      * @param version Streaming protocol version
1:5151169:      * @return serialized message in ByteBuffer format
1:5151169:      */
1:5151169:     public ByteBuffer createMessage(boolean compress, int version)
1:5151169:     {
1:5151169:         int header = 0;
1:5151169:         // set compression bit.
1:5151169:         if (compress)
1:5151169:             header |= 4;
1:5151169:         // set streaming bit
1:5151169:         header |= 8;
1:5151169:         // Setting up the version bit
1:5151169:         header |= (version << 8);
1:5151169: 
1:5151169:         byte[] bytes;
1:5151169:         try
1:5151169:         {
1:5151169:             int size = (int)StreamInitMessage.serializer.serializedSize(this, version);
1:7aafe05:             try (DataOutputBuffer buffer = new DataOutputBufferFixed(size))
1:7aafe05:             {
1:7aafe05:                 StreamInitMessage.serializer.serialize(this, buffer, version);
1:7aafe05:                 bytes = buffer.getData();
1:7aafe05:             }
1:5151169:         }
1:5151169:         catch (IOException e)
1:5151169:         {
1:5151169:             throw new RuntimeException(e);
1:5151169:         }
1:5151169:         assert bytes.length > 0;
1:5151169: 
1:5151169:         ByteBuffer buffer = ByteBuffer.allocate(4 + 4 + bytes.length);
1:5151169:         buffer.putInt(MessagingService.PROTOCOL_MAGIC);
1:5151169:         buffer.putInt(header);
1:5151169:         buffer.put(bytes);
1:5151169:         buffer.flip();
1:5151169:         return buffer;
1:5151169:     }
1:5151169: 
1:5151169:     private static class StreamInitMessageSerializer implements IVersionedSerializer<StreamInitMessage>
1:5151169:     {
1:75508ec:         public void serialize(StreamInitMessage message, DataOutputPlus out, int version) throws IOException
1:5151169:         {
1:67ccdab:             CompactEndpointSerializationHelper.serialize(message.from, out);
1:44fa2cd:             out.writeInt(message.sessionIndex);
1:5151169:             UUIDSerializer.serializer.serialize(message.planId, out, MessagingService.current_version);
1:5151169:             out.writeUTF(message.description);
1:d881024:             out.writeBoolean(message.isForOutgoing);
1:0de0b8c:             out.writeBoolean(message.keepSSTableLevel);
1:a5b90f1:             out.writeBoolean(message.isIncremental);
1:5151169:         }
1:5151169: 
1:03f72ac:         public StreamInitMessage deserialize(DataInputPlus in, int version) throws IOException
1:5151169:         {
1:67ccdab:             InetAddress from = CompactEndpointSerializationHelper.deserialize(in);
1:44fa2cd:             int sessionIndex = in.readInt();
1:5151169:             UUID planId = UUIDSerializer.serializer.deserialize(in, MessagingService.current_version);
1:67ccdab:             String description = in.readUTF();
1:67ccdab:             boolean sentByInitiator = in.readBoolean();
1:0de0b8c:             boolean keepSSTableLevel = in.readBoolean();
1:a5b90f1:             boolean isIncremental = in.readBoolean();
1:a5b90f1:             return new StreamInitMessage(from, sessionIndex, planId, description, sentByInitiator, keepSSTableLevel, isIncremental);
1:5151169:         }
1:5151169: 
1:5151169:         public long serializedSize(StreamInitMessage message, int version)
1:5151169:         {
1:67ccdab:             long size = CompactEndpointSerializationHelper.serializedSize(message.from);
1:03f72ac:             size += TypeSizes.sizeof(message.sessionIndex);
1:67ccdab:             size += UUIDSerializer.serializer.serializedSize(message.planId, MessagingService.current_version);
1:03f72ac:             size += TypeSizes.sizeof(message.description);
1:03f72ac:             size += TypeSizes.sizeof(message.isForOutgoing);
1:03f72ac:             size += TypeSizes.sizeof(message.keepSSTableLevel);
1:03f72ac:             size += TypeSizes.sizeof(message.isIncremental);
1:5151169:             return size;
1:5151169:         }
1:5151169:     }
1:5151169: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public StreamInitMessage deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeof(message.sessionIndex);
1:             size += TypeSizes.sizeof(message.description);
1:             size += TypeSizes.sizeof(message.isForOutgoing);
1:             size += TypeSizes.sizeof(message.keepSSTableLevel);
1:             size += TypeSizes.sizeof(message.isIncremental);
commit:c2ecfe7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputBufferFixed;
/////////////////////////////////////////////////////////////////////////
0:             DataOutputBuffer buffer = new DataOutputBufferFixed(size);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:             try (DataOutputBuffer buffer = new DataOutputBufferFixed(size))
1:             {
1:                 StreamInitMessage.serializer.serialize(this, buffer, version);
1:                 bytes = buffer.getData();
1:             }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a5b90f1
/////////////////////////////////////////////////////////////////////////
1:     public final boolean isIncremental;
1:     public StreamInitMessage(InetAddress from, int sessionIndex, UUID planId, String description, boolean isForOutgoing, boolean keepSSTableLevel, boolean isIncremental)
/////////////////////////////////////////////////////////////////////////
1:         this.isIncremental = isIncremental;
/////////////////////////////////////////////////////////////////////////
1:             out.writeBoolean(message.isIncremental);
/////////////////////////////////////////////////////////////////////////
1:             boolean isIncremental = in.readBoolean();
1:             return new StreamInitMessage(from, sessionIndex, planId, description, sentByInitiator, keepSSTableLevel, isIncremental);
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.NATIVE.sizeof(message.isIncremental);
commit:0de0b8c
/////////////////////////////////////////////////////////////////////////
1:     public final boolean keepSSTableLevel;
0:     public StreamInitMessage(InetAddress from, int sessionIndex, UUID planId, String description, boolean isForOutgoing, boolean keepSSTableLevel)
1:         this.keepSSTableLevel = keepSSTableLevel;
/////////////////////////////////////////////////////////////////////////
1:             out.writeBoolean(message.keepSSTableLevel);
/////////////////////////////////////////////////////////////////////////
1:             boolean keepSSTableLevel = in.readBoolean();
0:             return new StreamInitMessage(from, sessionIndex, planId, description, sentByInitiator, keepSSTableLevel);
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.NATIVE.sizeof(message.keepSSTableLevel);
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:44fa2cd
/////////////////////////////////////////////////////////////////////////
1:     public final int sessionIndex;
0:     public StreamInitMessage(InetAddress from, int sessionIndex, UUID planId, String description, boolean isForOutgoing)
1:         this.sessionIndex = sessionIndex;
/////////////////////////////////////////////////////////////////////////
1:             out.writeInt(message.sessionIndex);
/////////////////////////////////////////////////////////////////////////
1:             int sessionIndex = in.readInt();
0:             return new StreamInitMessage(from, sessionIndex, planId, description, sentByInitiator);
0:             size += TypeSizes.NATIVE.sizeof(message.sessionIndex);
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(StreamInitMessage message, DataOutputPlus out, int version) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d881024
/////////////////////////////////////////////////////////////////////////
1:     // true if this init message is to connect for outgoing message on receiving side
1:     public final boolean isForOutgoing;
0:     public StreamInitMessage(InetAddress from, UUID planId, String description, boolean isForOutgoing)
1:         this.isForOutgoing = isForOutgoing;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             out.writeBoolean(message.isForOutgoing);
/////////////////////////////////////////////////////////////////////////
0:             size += TypeSizes.NATIVE.sizeof(message.isForOutgoing);
commit:5151169
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.streaming.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: /**
1:  * StreamInitMessage is first sent from the node where {@link org.apache.cassandra.streaming.StreamSession} is started,
1:  * to initiate corresponding {@link org.apache.cassandra.streaming.StreamSession} on the other side.
1:  */
1: public class StreamInitMessage
1: {
1:     public static IVersionedSerializer<StreamInitMessage> serializer = new StreamInitMessageSerializer();
1: 
1:     public final UUID planId;
1:     public final String description;
1: 
0:     public StreamInitMessage(UUID planId, String description)
1:     {
1:         this.planId = planId;
1:         this.description = description;
1:     }
1: 
1:     /**
1:      * Create serialized message.
1:      *
1:      * @param compress true if message is compressed
1:      * @param version Streaming protocol version
1:      * @return serialized message in ByteBuffer format
1:      */
1:     public ByteBuffer createMessage(boolean compress, int version)
1:     {
1:         int header = 0;
1:         // set compression bit.
1:         if (compress)
1:             header |= 4;
1:         // set streaming bit
1:         header |= 8;
1:         // Setting up the version bit
1:         header |= (version << 8);
1: 
0:         /* Adding the StreamHeader which contains the session Id along
0:          * with the pendingfile info for the stream.
0:          * | Session Id | Pending File Size | Pending File | Bool more files |
0:          * | No. of Pending files | Pending Files ... |
1:          */
1:         byte[] bytes;
1:         try
1:         {
1:             int size = (int)StreamInitMessage.serializer.serializedSize(this, version);
0:             DataOutputBuffer buffer = new DataOutputBuffer(size);
0:             StreamInitMessage.serializer.serialize(this, buffer, version);
0:             bytes = buffer.getData();
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         assert bytes.length > 0;
1: 
1:         ByteBuffer buffer = ByteBuffer.allocate(4 + 4 + bytes.length);
1:         buffer.putInt(MessagingService.PROTOCOL_MAGIC);
1:         buffer.putInt(header);
1:         buffer.put(bytes);
1:         buffer.flip();
1:         return buffer;
1:     }
1: 
1:     private static class StreamInitMessageSerializer implements IVersionedSerializer<StreamInitMessage>
1:     {
0:         public void serialize(StreamInitMessage message, DataOutput out, int version) throws IOException
1:         {
1:             UUIDSerializer.serializer.serialize(message.planId, out, MessagingService.current_version);
1:             out.writeUTF(message.description);
1:         }
1: 
0:         public StreamInitMessage deserialize(DataInput in, int version) throws IOException
1:         {
1:             UUID planId = UUIDSerializer.serializer.deserialize(in, MessagingService.current_version);
0:             return new StreamInitMessage(planId, in.readUTF());
1:         }
1: 
1:         public long serializedSize(StreamInitMessage message, int version)
1:         {
0:             long size = UUIDSerializer.serializer.serializedSize(message.planId, MessagingService.current_version);
0:             size += TypeSizes.NATIVE.sizeof(message.description);
1:             return size;
1:         }
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:67ccdab
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
1: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
/////////////////////////////////////////////////////////////////////////
1:     public final InetAddress from;
0:     // Whether the sender of this message is the stream initiator
0:     public final boolean sentByInitiator;
1: 
0:     public StreamInitMessage(InetAddress from, UUID planId, String description, boolean sentByInitiator)
1:         this.from = from;
0:         this.sentByInitiator = sentByInitiator;
/////////////////////////////////////////////////////////////////////////
1:             CompactEndpointSerializationHelper.serialize(message.from, out);
0:             out.writeBoolean(message.sentByInitiator);
1:             InetAddress from = CompactEndpointSerializationHelper.deserialize(in);
1:             String description = in.readUTF();
1:             boolean sentByInitiator = in.readBoolean();
0:             return new StreamInitMessage(from, planId, description, sentByInitiator);
1:             long size = CompactEndpointSerializationHelper.serializedSize(message.from);
1:             size += UUIDSerializer.serializer.serializedSize(message.planId, MessagingService.current_version);
0:             size += TypeSizes.NATIVE.sizeof(message.sentByInitiator);
============================================================================