1:a384faa: package org.apache.cassandra.db.commitlog;
2:a384faa: 
1:a384faa: /*
1:a384faa:  *
1:a384faa:  * Licensed to the Apache Software Foundation (ASF) under one
1:a384faa:  * or more contributor license agreements.  See the NOTICE file
1:a384faa:  * distributed with this work for additional information
1:a384faa:  * regarding copyright ownership.  The ASF licenses this file
1:a384faa:  * to you under the Apache License, Version 2.0 (the
1:a384faa:  * "License"); you may not use this file except in compliance
1:a384faa:  * with the License.  You may obtain a copy of the License at
1:a384faa:  *
1:a384faa:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a384faa:  *
1:a384faa:  * Unless required by applicable law or agreed to in writing,
1:a384faa:  * software distributed under the License is distributed on an
1:a384faa:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a384faa:  * KIND, either express or implied.  See the License for the
1:a384faa:  * specific language governing permissions and limitations
1:a384faa:  * under the License.
1:a384faa:  *
1:a384faa:  */
1:a384faa: 
1:a384faa: import java.io.*;
1:a384faa: import java.nio.ByteBuffer;
1:a384faa: import java.util.Properties;
1:a384faa: import java.util.UUID;
1:a384faa: 
1:a384faa: import junit.framework.Assert;
1:a384faa: 
1:a384faa: import com.google.common.base.Predicate;
1:a384faa: 
1:d12d2d4: import org.junit.After;
1:d12d2d4: import org.junit.Before;
1:a384faa: import org.junit.BeforeClass;
1:a384faa: import org.junit.Test;
1:a384faa: 
1:a384faa: import org.apache.cassandra.SchemaLoader;
1:a384faa: import org.apache.cassandra.config.CFMetaData;
1:7374e9b: import org.apache.cassandra.config.DatabaseDescriptor;
1:a384faa: import org.apache.cassandra.config.Schema;
1:a384faa: import org.apache.cassandra.db.Mutation;
1:a991b64: import org.apache.cassandra.db.rows.Cell;
1:a991b64: import org.apache.cassandra.db.rows.Row;
1:1526568: import org.apache.cassandra.db.marshal.AsciiType;
1:1526568: import org.apache.cassandra.db.marshal.BytesType;
1:a991b64: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:1526568: import org.apache.cassandra.schema.KeyspaceParams;
1:7374e9b: import org.apache.cassandra.security.EncryptionContextGenerator;
1:d12d2d4: import org.apache.cassandra.utils.JVMStabilityInspector;
1:d12d2d4: import org.apache.cassandra.utils.KillerForTests;
1:d12d2d4: import org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException;
1:a384faa: 
1:7374e9b: /**
1:7374e9b:  * Note: if you are looking to create new test cases for this test, check out
1:7374e9b:  * {@link CommitLogUpgradeTestMaker}
1:7374e9b:  */
1:a384faa: public class CommitLogUpgradeTest
4:a384faa: {
1:9797511:     static
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:a384faa:     static final String DATA_DIR = "test/data/legacy-commitlog/";
1:a384faa:     static final String PROPERTIES_FILE = "hash.txt";
1:a384faa:     static final String CFID_PROPERTY = "cfid";
1:a384faa:     static final String CELLS_PROPERTY = "cells";
1:a384faa:     static final String HASH_PROPERTY = "hash";
1:a384faa: 
1:a384faa:     static final String TABLE = "Standard1";
1:a384faa:     static final String KEYSPACE = "Keyspace1";
1:fb34b79:     static final String CELLNAME = "name";
1:a384faa: 
1:d12d2d4:     private JVMStabilityInspector.Killer originalKiller;
1:d12d2d4:     private KillerForTests killerForTests;
1:d12d2d4:     private boolean shouldBeKilled = false;
1:d12d2d4: 
1:8f88015:     static CFMetaData metadata = CFMetaData.Builder.createDense(KEYSPACE, TABLE, false, false)
1:8f88015:                                                    .addPartitionKey("key", AsciiType.instance)
1:8f88015:                                                    .addClusteringColumn("col", AsciiType.instance)
1:8f88015:                                                    .addRegularColumn("val", BytesType.instance)
1:8f88015:                                                    .build()
1:8f88015:                                                    .compression(SchemaLoader.getCompressionParameters());
1:8f88015: 
1:d12d2d4:     @Before
1:d12d2d4:     public void prepareToBeKilled()
1:d12d2d4:     {
1:d12d2d4:         killerForTests = new KillerForTests();
1:d12d2d4:         originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:d12d2d4:     }
1:d12d2d4: 
1:d12d2d4:     @After
1:d12d2d4:     public void cleanUp()
1:d12d2d4:     {
1:d12d2d4:         JVMStabilityInspector.replaceKiller(originalKiller);
1:d12d2d4:         Assert.assertEquals("JVM killed", shouldBeKilled, killerForTests.wasKilled());
1:d12d2d4:     }
1:d12d2d4: 
1:7374e9b:     @Test
1:a384faa:     public void test20() throws Exception
1:a384faa:     {
1:a384faa:         testRestore(DATA_DIR + "2.0");
3:a384faa:     }
1:d12d2d4: 
1:a384faa:     @Test
1:a384faa:     public void test21() throws Exception
1:a384faa:     {
1:a384faa:         testRestore(DATA_DIR + "2.1");
1:a384faa:     }
1:a384faa: 
1:5f4cc45:     @Test
1:5f4cc45:     public void test22() throws Exception
1:5f4cc45:     {
1:5f4cc45:         testRestore(DATA_DIR + "2.2");
1:5f4cc45:     }
1:5f4cc45: 
1:5f4cc45:     @Test
1:5f4cc45:     public void test22_LZ4() throws Exception
1:5f4cc45:     {
1:5f4cc45:         testRestore(DATA_DIR + "2.2-lz4");
1:5f4cc45:     }
1:5f4cc45: 
1:5f4cc45:     @Test
1:5f4cc45:     public void test22_Snappy() throws Exception
1:5f4cc45:     {
1:5f4cc45:         testRestore(DATA_DIR + "2.2-snappy");
1:5f4cc45:     }
1:5f4cc45: 
1:d12d2d4:     public void test22_truncated() throws Exception
1:d12d2d4:     {
1:d12d2d4:         testRestore(DATA_DIR + "2.2-lz4-truncated");
1:d12d2d4:     }
1:d12d2d4: 
1:d12d2d4:     @Test(expected = CommitLogReplayException.class)
1:d12d2d4:     public void test22_bitrot() throws Exception
1:d12d2d4:     {
1:d12d2d4:         shouldBeKilled = true;
1:d12d2d4:         testRestore(DATA_DIR + "2.2-lz4-bitrot");
1:d12d2d4:     }
1:d12d2d4: 
1:d12d2d4:     @Test
1:d12d2d4:     public void test22_bitrot_ignored() throws Exception
1:d12d2d4:     {
1:e31e216:         try
1:e31e216:         {
1:d12d2d4:             System.setProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY, "true");
1:d12d2d4:             testRestore(DATA_DIR + "2.2-lz4-bitrot");
1:e31e216:         }
1:e31e216:         finally
1:e31e216:         {
1:d12d2d4:             System.clearProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY);
1:d12d2d4:         }
1:d12d2d4:     }
1:d12d2d4: 
1:d12d2d4:     @Test(expected = CommitLogReplayException.class)
1:d12d2d4:     public void test22_bitrot2() throws Exception
1:d12d2d4:     {
1:d12d2d4:         shouldBeKilled = true;
1:d12d2d4:         testRestore(DATA_DIR + "2.2-lz4-bitrot2");
1:d12d2d4:     }
1:d12d2d4: 
1:d12d2d4:     @Test
1:d12d2d4:     public void test22_bitrot2_ignored() throws Exception
1:e31e216:     {
1:e31e216:         try
1:e31e216:         {
1:d12d2d4:             System.setProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY, "true");
1:d12d2d4:             testRestore(DATA_DIR + "2.2-lz4-bitrot2");
1:e31e216:         }
1:e31e216:         finally
1:d12d2d4:         {
1:d12d2d4:             System.clearProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY);
1:d12d2d4:         }
1:d12d2d4:     }
1:d12d2d4: 
1:a384faa:     @Test
1:7374e9b:     public void test34_encrypted() throws Exception
1:7374e9b:     {
1:7374e9b:         testRestore(DATA_DIR + "3.4-encrypted");
1:7374e9b:     }
1:7374e9b: 
1:a384faa:     @BeforeClass
1:7374e9b:     public static void initialize()
1:a384faa:     {
1:a384faa:         SchemaLoader.loadSchema();
1:1526568:         SchemaLoader.createKeyspace(KEYSPACE,
1:1526568:                                     KeyspaceParams.simple(1),
1:1526568:                                     metadata);
1:7374e9b:         DatabaseDescriptor.setEncryptionContext(EncryptionContextGenerator.createContext(true));
1:a384faa:     }
1:a384faa: 
1:a384faa:     public void testRestore(String location) throws IOException, InterruptedException
1:a384faa:     {
1:a384faa:         Properties prop = new Properties();
1:a384faa:         prop.load(new FileInputStream(new File(location + File.separatorChar + PROPERTIES_FILE)));
1:a384faa:         int hash = Integer.parseInt(prop.getProperty(HASH_PROPERTY));
1:a384faa:         int cells = Integer.parseInt(prop.getProperty(CELLS_PROPERTY));
1:a384faa: 
1:a384faa:         String cfidString = prop.getProperty(CFID_PROPERTY);
1:a384faa:         if (cfidString != null)
1:a384faa:         {
1:a384faa:             UUID cfid = UUID.fromString(cfidString);
1:a384faa:             if (Schema.instance.getCF(cfid) == null)
1:a384faa:             {
1:a384faa:                 CFMetaData cfm = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:5ba79cb:                 Schema.instance.unload(cfm);
1:a384faa:                 Schema.instance.load(cfm.copy(cfid));
1:a384faa:             }
1:a384faa:         }
1:a384faa: 
1:a384faa:         Hasher hasher = new Hasher();
1:e31e216:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(hasher);
1:f8f6fd2:         File[] files = new File(location).listFiles((file, name) -> name.endsWith(".log"));
1:e31e216:         replayer.replayFiles(files);
1:a384faa: 
1:a384faa:         Assert.assertEquals(cells, hasher.cells);
1:a384faa:         Assert.assertEquals(hash, hasher.hash);
1:a384faa:     }
1:a384faa: 
1:a384faa:     public static int hash(int hash, ByteBuffer bytes)
1:a384faa:     {
1:a384faa:         int shift = 0;
1:a384faa:         for (int i = 0; i < bytes.limit(); i++)
1:a384faa:         {
1:a384faa:             hash += (bytes.get(i) & 0xFF) << shift;
1:a384faa:             shift = (shift + 8) & 0x1F;
1:a384faa:         }
1:a384faa:         return hash;
1:a384faa:     }
1:a384faa: 
1:a384faa:     class Hasher implements Predicate<Mutation>
1:a384faa:     {
1:a384faa:         int hash = 0;
1:a384faa:         int cells = 0;
1:a384faa: 
2:a384faa:         @Override
1:a384faa:         public boolean apply(Mutation mutation)
1:a384faa:         {
1:a991b64:             for (PartitionUpdate update : mutation.getPartitionUpdates())
1:a384faa:             {
1:a991b64:                 for (Row row : update)
1:fb34b79:                     if (row.clustering().size() > 0 &&
1:fb34b79:                         AsciiType.instance.compose(row.clustering().get(0)).startsWith(CELLNAME))
1:a384faa:                     {
1:fb34b79:                         for (Cell cell : row.cells())
1:fb34b79:                         {
1:fb34b79:                             hash = hash(hash, cell.value());
1:fb34b79:                             ++cells;
1:fb34b79:                         }
1:a384faa:                     }
1:a384faa:             }
1:a384faa:             return true;
1:a384faa:         }
1:a384faa:     }
1:a384faa: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:         }
1:         finally
1:         {
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:         }
1:         finally
1:         {
/////////////////////////////////////////////////////////////////////////
1:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(hasher);
1:         replayer.replayFiles(files);
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.security.EncryptionContextGenerator;
1: /**
1:  * Note: if you are looking to create new test cases for this test, check out
1:  * {@link CommitLogUpgradeTestMaker}
1:  */
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void test34_encrypted() throws Exception
1:     {
1:         testRestore(DATA_DIR + "3.4-encrypted");
1:     }
1: 
1:     public static void initialize()
1:         DatabaseDescriptor.setEncryptionContext(EncryptionContextGenerator.createContext(true));
author:blambov
-------------------------------------------------------------------------------
commit:8f88015
/////////////////////////////////////////////////////////////////////////
1:     static CFMetaData metadata = CFMetaData.Builder.createDense(KEYSPACE, TABLE, false, false)
1:                                                    .addPartitionKey("key", AsciiType.instance)
1:                                                    .addClusteringColumn("col", AsciiType.instance)
1:                                                    .addRegularColumn("val", BytesType.instance)
1:                                                    .build()
1:                                                    .compression(SchemaLoader.getCompressionParameters());
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d12d2d4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: import org.apache.cassandra.utils.KillerForTests;
1: import org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException;
/////////////////////////////////////////////////////////////////////////
1:     private JVMStabilityInspector.Killer originalKiller;
1:     private KillerForTests killerForTests;
1:     private boolean shouldBeKilled = false;
1: 
1:     @Before
1:     public void prepareToBeKilled()
1:     {
1:         killerForTests = new KillerForTests();
1:         originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:     }
1: 
1:     @After
1:     public void cleanUp()
1:     {
1:         JVMStabilityInspector.replaceKiller(originalKiller);
1:         Assert.assertEquals("JVM killed", shouldBeKilled, killerForTests.wasKilled());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void test22_truncated() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.2-lz4-truncated");
1:     }
1: 
1:     @Test(expected = CommitLogReplayException.class)
1:     public void test22_bitrot() throws Exception
1:     {
1:         shouldBeKilled = true;
1:         testRestore(DATA_DIR + "2.2-lz4-bitrot");
1:     }
1: 
1:     @Test
1:     public void test22_bitrot_ignored() throws Exception
1:     {
0:         try {
1:             System.setProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY, "true");
1:             testRestore(DATA_DIR + "2.2-lz4-bitrot");
0:         } finally {
1:             System.clearProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY);
1:         }
1:     }
1: 
1:     @Test(expected = CommitLogReplayException.class)
1:     public void test22_bitrot2() throws Exception
1:     {
1:         shouldBeKilled = true;
1:         testRestore(DATA_DIR + "2.2-lz4-bitrot2");
1:     }
1: 
1:     @Test
1:     public void test22_bitrot2_ignored() throws Exception
1:     {
0:         try {
1:             System.setProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY, "true");
1:             testRestore(DATA_DIR + "2.2-lz4-bitrot2");
0:         } finally {
1:             System.clearProperty(CommitLogReplayer.IGNORE_REPLAY_ERRORS_PROPERTY);
1:         }
1:     }
1: 
commit:f8f6fd2
/////////////////////////////////////////////////////////////////////////
0:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(CommitLog.instance, hasher);
1:         File[] files = new File(location).listFiles((file, name) -> name.endsWith(".log"));
commit:5f4cc45
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void test22() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.2");
1:     }
1: 
1:     @Test
1:     public void test22_LZ4() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.2-lz4");
1:     }
1: 
1:     @Test
1:     public void test22_Snappy() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.2-snappy");
1:     }
1: 
commit:fb34b79
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     static final String CELLNAME = "name";
/////////////////////////////////////////////////////////////////////////
0:                                                 .addClusteringColumn("col", AsciiType.instance)
/////////////////////////////////////////////////////////////////////////
1:                     if (row.clustering().size() > 0 &&
1:                         AsciiType.instance.compose(row.clustering().get(0)).startsWith(CELLNAME))
1:                         for (Cell cell : row.cells())
1:                         {
1:                             hash = hash(hash, cell.value());
1:                             ++cells;
1:                         }
commit:a384faa
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.commitlog;
1: 
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: import java.io.*;
1: import java.nio.ByteBuffer;
0: import java.nio.charset.StandardCharsets;
1: import java.util.Properties;
1: import java.util.UUID;
1: 
1: import junit.framework.Assert;
1: 
1: import com.google.common.base.Predicate;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.db.Cell;
0: import org.apache.cassandra.db.ColumnFamily;
1: import org.apache.cassandra.db.Mutation;
1: 
1: public class CommitLogUpgradeTest
1: {
1:     static final String DATA_DIR = "test/data/legacy-commitlog/";
1:     static final String PROPERTIES_FILE = "hash.txt";
1:     static final String CFID_PROPERTY = "cfid";
1:     static final String CELLS_PROPERTY = "cells";
1:     static final String HASH_PROPERTY = "hash";
1: 
1:     static final String TABLE = "Standard1";
1:     static final String KEYSPACE = "Keyspace1";
0:     static final String CELLNAME = "name";
1: 
1:     @Test
1:     public void test20() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.0");
1:     }
1: 
1:     @Test
1:     public void test21() throws Exception
1:     {
1:         testRestore(DATA_DIR + "2.1");
1:     }
1: 
1:     @BeforeClass
0:     static public void initialize() throws FileNotFoundException, IOException, InterruptedException
1:     {
1:         SchemaLoader.loadSchema();
0:         SchemaLoader.schemaDefinition("");
1:     }
1: 
1:     public void testRestore(String location) throws IOException, InterruptedException
1:     {
1:         Properties prop = new Properties();
1:         prop.load(new FileInputStream(new File(location + File.separatorChar + PROPERTIES_FILE)));
1:         int hash = Integer.parseInt(prop.getProperty(HASH_PROPERTY));
1:         int cells = Integer.parseInt(prop.getProperty(CELLS_PROPERTY));
1: 
1:         String cfidString = prop.getProperty(CFID_PROPERTY);
1:         if (cfidString != null)
1:         {
1:             UUID cfid = UUID.fromString(cfidString);
1:             if (Schema.instance.getCF(cfid) == null)
1:             {
1:                 CFMetaData cfm = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
0:                 Schema.instance.purge(cfm);
1:                 Schema.instance.load(cfm.copy(cfid));
1:             }
1:         }
1: 
1:         Hasher hasher = new Hasher();
0:         CommitLogTestReplayer replayer = new CommitLogTestReplayer(hasher);
0:         File[] files = new File(location).listFiles(new FilenameFilter()
1:         {
1:             @Override
0:             public boolean accept(File dir, String name)
1:             {
0:                 return name.endsWith(".log");
1:             }
0:         });
0:         replayer.recover(files);
1: 
1:         Assert.assertEquals(cells, hasher.cells);
1:         Assert.assertEquals(hash, hasher.hash);
1:     }
1: 
1:     public static int hash(int hash, ByteBuffer bytes)
1:     {
1:         int shift = 0;
1:         for (int i = 0; i < bytes.limit(); i++)
1:         {
1:             hash += (bytes.get(i) & 0xFF) << shift;
1:             shift = (shift + 8) & 0x1F;
1:         }
1:         return hash;
1:     }
1: 
1:     class Hasher implements Predicate<Mutation>
1:     {
1:         int hash = 0;
1:         int cells = 0;
1: 
1:         @Override
1:         public boolean apply(Mutation mutation)
1:         {
0:             for (ColumnFamily cf : mutation.getColumnFamilies())
1:             {
0:                 for (Cell c : cf.getSortedColumns())
1:                 {
0:                     if (new String(c.name().toByteBuffer().array(), StandardCharsets.UTF_8).startsWith(CELLNAME))
1:                     {
0:                         hash = hash(hash, c.value());
0:                         ++cells;
1:                     }
1:                 }
1:             }
1:             return true;
1:         }
1:     }
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
0:                                                 .compression(SchemaLoader.getCompressionParameters());
commit:5ba79cb
/////////////////////////////////////////////////////////////////////////
1:                 Schema.instance.unload(cfm);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1526568
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData metadata = CFMetaData.Builder.createDense(KEYSPACE, TABLE, false, false)
0:                                                 .addPartitionKey("key", AsciiType.instance)
0:                                                 .addClusteringColumn("col", BytesType.instance)
0:                                                 .addRegularColumn("val", BytesType.instance)
0:                                                 .build()
0:                                                 .compressionParameters(SchemaLoader.getCompressionParameters());
1:         SchemaLoader.createKeyspace(KEYSPACE,
1:                                     KeyspaceParams.simple(1),
1:                                     metadata);
commit:2457599
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:                     for (Cell cell : row.cells())
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
0: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             for (PartitionUpdate update : mutation.getPartitionUpdates())
1:                 for (Row row : update)
0:                     for (Cell cell : row)
0:                         hash = hash(hash, cell.value());
============================================================================