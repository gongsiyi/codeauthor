1:dc37dea: /*
1:dc37dea:  * Licensed to the Apache Software Foundation (ASF) under one
1:dc37dea:  * or more contributor license agreements.  See the NOTICE file
1:dc37dea:  * distributed with this work for additional information
1:dc37dea:  * regarding copyright ownership.  The ASF licenses this file
1:dc37dea:  * to you under the Apache License, Version 2.0 (the
1:dc37dea:  * "License"); you may not use this file except in compliance
1:dc37dea:  * with the License.  You may obtain a copy of the License at
1:dc37dea:  *
1:dc37dea:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dc37dea:  *
1:dc37dea:  * Unless required by applicable law or agreed to in writing, software
1:dc37dea:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc37dea:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc37dea:  * See the License for the specific language governing permissions and
1:dc37dea:  * limitations under the License.
1:dc37dea:  */
1:dc37dea: package org.apache.cassandra.utils;
1:dc37dea: 
1:dc37dea: import java.util.Random;
1:1d2c122: import java.util.concurrent.TimeUnit;
1:dc37dea: 
1:83a43f1: import org.junit.Assert;
1:dc37dea: 
1:dc37dea: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OpenBitSet;
1:dc37dea: import org.junit.Test;
1:dc37dea: import org.slf4j.Logger;
1:dc37dea: import org.slf4j.LoggerFactory;
1:dc37dea: 
1:dc37dea: public class LongBitSetTest
1:dc37dea: {
1:dc37dea:     private static final Logger logger = LoggerFactory.getLogger(LongBitSetTest.class);
1:dc37dea:     private static final Random random = new Random();
1:dc37dea: 
1:dc37dea:     public void populateRandom(OffHeapBitSet offbs, OpenBitSet obs, long index)
1:dc37dea:     {
1:dc37dea:         if (random.nextBoolean())
1:dc37dea:         {
1:dc37dea:             offbs.set(index);
1:dc37dea:             obs.set(index);
1:dc37dea:         }
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     public void compare(OffHeapBitSet offbs, OpenBitSet obs, long index)
1:dc37dea:     {
1:dc37dea:         if (offbs.get(index) != obs.get(index))
1:dc37dea:             throw new RuntimeException();
1:dc37dea:         Assert.assertEquals(offbs.get(index), obs.get(index));
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     @Test
1:dc37dea:     public void testBitSetOperations()
1:dc37dea:     {
1:dc37dea:         long size_to_test = Integer.MAX_VALUE / 40;
1:dc37dea:         long size_and_excess = size_to_test + 20;
1:dc37dea:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:dc37dea:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             populateRandom(offbs, obs, i);
1:dc37dea: 
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             compare(offbs, obs, i);
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     @Test
1:dc37dea:     public void timeit()
1:dc37dea:     {
1:dc37dea:         long size_to_test = Integer.MAX_VALUE / 10; // about 214 million
1:dc37dea:         long size_and_excess = size_to_test + 20;
1:dc37dea: 
1:dc37dea:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:dc37dea:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:dc37dea:         logger.info("||Open BS set's|Open BS get's|Open BS clear's|Offheap BS set's|Offheap BS get's|Offheap BS clear's|");
1:dc37dea:         // System.out.println("||Open BS set's|Open BS get's|Open BS clear's|Offheap BS set's|Offheap BS get's|Offheap BS clear's|");
1:dc37dea:         loopOnce(obs, offbs, size_to_test);
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     public void loopOnce(OpenBitSet obs, OffHeapBitSet offbs, long size_to_test)
1:dc37dea:     {
1:dc37dea:         StringBuffer buffer = new StringBuffer();
1:dc37dea:         // start off fresh.
1:dc37dea:         System.gc();
1:1d2c122:         long start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             obs.set(i);
1:1d2c122:         buffer.append("||").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:dc37dea: 
1:1d2c122:         start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             obs.get(i);
1:1d2c122:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:dc37dea: 
1:1d2c122:         start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             obs.clear(i);
1:1d2c122:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:dc37dea: 
1:dc37dea:         System.gc();
1:1d2c122:         start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             offbs.set(i);
1:1d2c122:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:dc37dea: 
1:1d2c122:         start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             offbs.get(i);
1:1d2c122:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:dc37dea: 
1:1d2c122:         start = System.nanoTime();
1:dc37dea:         for (long i = 0; i < size_to_test; i++)
1:dc37dea:             offbs.clear(i);
1:1d2c122:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)).append("|");
1:dc37dea:         logger.info(buffer.toString());
1:dc37dea:         // System.out.println(buffer.toString());
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     /**
1:dc37dea:      * Just to make sure JIT doesn't come on our way
1:dc37dea:      */
1:dc37dea:     @Test
1:dc37dea:     // @Ignore
1:dc37dea:     public void loopIt()
1:dc37dea:     {
1:dc37dea:         long size_to_test = Integer.MAX_VALUE / 10; // about 214 million
1:dc37dea:         long size_and_excess = size_to_test + 20;
1:dc37dea: 
1:dc37dea:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:dc37dea:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:dc37dea:         for (int i = 0; i < 10; i++)
1:dc37dea:             // 10 times to do approx 2B keys each.
1:dc37dea:             loopOnce(obs, offbs, size_to_test);
1:dc37dea:     }
1:dc37dea: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         long start = System.nanoTime();
1:         buffer.append("||").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:         start = System.nanoTime();
1:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:         start = System.nanoTime();
1:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:         start = System.nanoTime();
1:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:         start = System.nanoTime();
1:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
1:         start = System.nanoTime();
1:         buffer.append("|").append(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)).append("|");
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.util.Random;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1: import org.apache.cassandra.utils.obs.OpenBitSet;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class LongBitSetTest
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(LongBitSetTest.class);
1:     private static final Random random = new Random();
1: 
1:     public void populateRandom(OffHeapBitSet offbs, OpenBitSet obs, long index)
1:     {
1:         if (random.nextBoolean())
1:         {
1:             offbs.set(index);
1:             obs.set(index);
1:         }
1:     }
1: 
1:     public void compare(OffHeapBitSet offbs, OpenBitSet obs, long index)
1:     {
1:         if (offbs.get(index) != obs.get(index))
1:             throw new RuntimeException();
1:         Assert.assertEquals(offbs.get(index), obs.get(index));
1:     }
1: 
1:     @Test
1:     public void testBitSetOperations()
1:     {
1:         long size_to_test = Integer.MAX_VALUE / 40;
1:         long size_and_excess = size_to_test + 20;
1:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:         for (long i = 0; i < size_to_test; i++)
1:             populateRandom(offbs, obs, i);
1: 
1:         for (long i = 0; i < size_to_test; i++)
1:             compare(offbs, obs, i);
1:     }
1: 
1:     @Test
1:     public void timeit()
1:     {
1:         long size_to_test = Integer.MAX_VALUE / 10; // about 214 million
1:         long size_and_excess = size_to_test + 20;
1: 
1:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:         logger.info("||Open BS set's|Open BS get's|Open BS clear's|Offheap BS set's|Offheap BS get's|Offheap BS clear's|");
1:         // System.out.println("||Open BS set's|Open BS get's|Open BS clear's|Offheap BS set's|Offheap BS get's|Offheap BS clear's|");
1:         loopOnce(obs, offbs, size_to_test);
1:     }
1: 
1:     public void loopOnce(OpenBitSet obs, OffHeapBitSet offbs, long size_to_test)
1:     {
1:         StringBuffer buffer = new StringBuffer();
1:         // start off fresh.
1:         System.gc();
0:         long start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             obs.set(i);
0:         buffer.append("||").append(System.currentTimeMillis() - start);
1: 
0:         start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             obs.get(i);
0:         buffer.append("|").append(System.currentTimeMillis() - start);
1: 
0:         start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             obs.clear(i);
0:         buffer.append("|").append(System.currentTimeMillis() - start);
1: 
1:         System.gc();
0:         start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             offbs.set(i);
0:         buffer.append("|").append(System.currentTimeMillis() - start);
1: 
0:         start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             offbs.get(i);
1: 
0:         buffer.append("|").append(System.currentTimeMillis() - start);
0:         start = System.currentTimeMillis();
1:         for (long i = 0; i < size_to_test; i++)
1:             offbs.clear(i);
0:         buffer.append("|").append(System.currentTimeMillis() - start).append("|");
1:         logger.info(buffer.toString());
1:         // System.out.println(buffer.toString());
1:     }
1: 
1:     /**
1:      * Just to make sure JIT doesn't come on our way
1:      */
1:     @Test
1:     // @Ignore
1:     public void loopIt()
1:     {
1:         long size_to_test = Integer.MAX_VALUE / 10; // about 214 million
1:         long size_and_excess = size_to_test + 20;
1: 
1:         OpenBitSet obs = new OpenBitSet(size_and_excess);
1:         OffHeapBitSet offbs = new OffHeapBitSet(size_and_excess);
1:         for (int i = 0; i < 10; i++)
1:             // 10 times to do approx 2B keys each.
1:             loopOnce(obs, offbs, size_to_test);
1:     }
1: }
============================================================================