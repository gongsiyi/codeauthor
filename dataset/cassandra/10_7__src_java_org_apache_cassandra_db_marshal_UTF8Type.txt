1:1aeca2b: /*
1:1aeca2b:  * Licensed to the Apache Software Foundation (ASF) under one
1:1aeca2b:  * or more contributor license agreements.  See the NOTICE file
1:1aeca2b:  * distributed with this work for additional information
1:1aeca2b:  * regarding copyright ownership.  The ASF licenses this file
1:1aeca2b:  * to you under the Apache License, Version 2.0 (the
1:1aeca2b:  * "License"); you may not use this file except in compliance
1:1aeca2b:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1aeca2b:  */
1:07cf56f: package org.apache.cassandra.db.marshal;
1:a67f779: 
1:e7a385a: import java.nio.ByteBuffer;
1:c7b02d1: import java.nio.charset.CharacterCodingException;
1:c7b02d1: import java.nio.charset.Charset;
1:c7b02d1: 
1:c7b02d1: import org.apache.cassandra.cql3.Constants;
1:c7b02d1: import org.apache.cassandra.cql3.Json;
1:07cdfd0: 
1:a67f779: import org.apache.cassandra.cql3.CQL3Type;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:c7b02d1: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.TypeSerializer;
1:fc8b76f: import org.apache.cassandra.serializers.UTF8Serializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:acf1b18: import org.apache.cassandra.utils.ByteBufferUtil;
1:07cdfd0: 
1:05d8ffd: public class UTF8Type extends AbstractType<String>
1:0fdab63: {
1:242b717:     public static final UTF8Type instance = new UTF8Type();
1:a67f779: 
1:07594ee:     UTF8Type() {super(ComparisonType.BYTE_ORDER);} // singleton
1:2fd3268: 
1:ad38251:     public ByteBuffer fromString(String source)
1:a67f779:     {
1:2d95cb4:         return decompose(source);
1:0fdab63:     }
1:c7b02d1: 
1:e9c6742: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             return new Constants.Value(fromString((String) parsed));
1:c7b02d1:         }
1:c7b02d1:         catch (ClassCastException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a UTF-8 string, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:6b1bd17:             return '"' + Json.quoteAsJsonString(ByteBufferUtil.string(buffer, Charset.forName("UTF-8"))) + '"';
1:c7b02d1:         }
1:c7b02d1:         catch (CharacterCodingException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new AssertionError("UTF-8 value contained non-utf8 characters: ", exc);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:e9c6742:     @Override
1:0fdab63:     public boolean isCompatibleWith(AbstractType<?> previous)
1:acf1b18:     {
1:0fdab63:         // Anything that is ascii is also utf8, and they both use bytes
1:0fdab63:         // comparison
1:0fdab63:         return this == previous || previous == AsciiType.instance;
1:acf1b18:     }
1:acf1b18: 
1:a67f779:     public CQL3Type asCQL3Type()
1:a67f779:     {
1:a67f779:         return CQL3Type.Native.TEXT;
1:a67f779:     }
1:a67f779: 
1:fc8b76f:     public TypeSerializer<String> getSerializer()
1:e9c6742:     {
1:e9c6742:         return UTF8Serializer.instance;
1:e9c6742:     }
1:a67f779: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:9b5af91
commit:6b1bd17
/////////////////////////////////////////////////////////////////////////
1:             return '"' + Json.quoteAsJsonString(ByteBufferUtil.string(buffer, Charset.forName("UTF-8"))) + '"';
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.CharacterCodingException;
1: import java.nio.charset.Charset;
1: 
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Json;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
1:             return new Constants.Value(fromString((String) parsed));
1:         }
1:         catch (ClassCastException exc)
1:         {
1:             throw new MarshalException(String.format(
1:                     "Expected a UTF-8 string, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         try
1:         {
0:             return '"' + new String(Json.JSON_STRING_ENCODER.quoteAsString(ByteBufferUtil.string(buffer, Charset.forName("UTF-8")))) + '"';
1:         }
1:         catch (CharacterCodingException exc)
1:         {
1:             throw new AssertionError("UTF-8 value contained non-utf8 characters: ", exc);
1:         }
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:     UTF8Type() {super(ComparisonType.BYTE_ORDER);} // singleton
/////////////////////////////////////////////////////////////////////////
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.compareUnsigned(o1, o2);
/////////////////////////////////////////////////////////////////////////
0:     public boolean isByteOrderComparable()
1:     {
0:         return true;
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
commit:56f35db
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.TypeSerializer;
0: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.UTF8Serializer;
/////////////////////////////////////////////////////////////////////////
1:     public TypeSerializer<String> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.MarshalException;
0: import org.apache.cassandra.type.UTF8Serializer;
/////////////////////////////////////////////////////////////////////////
0:         return UTF8Serializer.instance.serialize(bytes);
0:         return UTF8Serializer.instance.deserialize(value);
/////////////////////////////////////////////////////////////////////////
0:         return UTF8Serializer.instance.getString(bytes);
/////////////////////////////////////////////////////////////////////////
0:         UTF8Serializer.instance.validate(bytes);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public AbstractSerializer<String> asComposer()
1:     {
1:         return UTF8Serializer.instance;
1:     }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.Constants;
/////////////////////////////////////////////////////////////////////////
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: import java.util.EnumSet;
0: import java.util.Set;
1: import org.apache.cassandra.cql3.CQL3Type;
0: import org.apache.cassandra.cql3.Term;
0:     private final Set<Term.Type> supportedCQL3Constants = EnumSet.of(Term.Type.STRING);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<Term.Type> supportedCQL3Constants()
1:     {
0:         return supportedCQL3Constants;
1:     }
1: 
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.TEXT;
1:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         };
1: 
0:         static boolean validate(ByteBuffer buf)
/////////////////////////////////////////////////////////////////////////
0:                             break;
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         };
0: 
0:         static boolean validate(ByteBuffer buf)
/////////////////////////////////////////////////////////////////////////
0:                             break;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.db.marshal;
commit:0fdab63
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
1:     public boolean isCompatibleWith(AbstractType<?> previous)
1:     {
1:         // Anything that is ascii is also utf8, and they both use bytes
1:         // comparison
1:         return this == previous || previous == AsciiType.instance;
1:     }
commit:a26fa83
/////////////////////////////////////////////////////////////////////////
0:         if (!UTF8Validator.validate(bytes))
/////////////////////////////////////////////////////////////////////////
0:             buf = buf.slice();
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return ByteBufferUtil.string(bytes);
/////////////////////////////////////////////////////////////////////////
0:         return ByteBufferUtil.bytes(source);
author:Eric Evans
-------------------------------------------------------------------------------
commit:b226cf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return JdbcUTF8.instance.decompose(value);
commit:2395fb3
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.cassandra.cql.term.UTF8Term;
/////////////////////////////////////////////////////////////////////////
0:         return UTF8Term.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:             return UTF8Term.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.term.MarshalException e)
0:             throw new MarshalException(e.getMessage());
0:         return UTF8Term.instance.toString(s);
commit:a0d45f7
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8ed29b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql.jdbc.JdbcUTF8;
/////////////////////////////////////////////////////////////////////////
0:         return JdbcUTF8.instance.compose(bytes);
/////////////////////////////////////////////////////////////////////////
0:             return JdbcUTF8.instance.getString(bytes);
0:         catch (org.apache.cassandra.cql.jdbc.MarshalException e)
commit:c11eeb4
/////////////////////////////////////////////////////////////////////////
commit:835669a
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Types;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public boolean isSigned()
0:     {
0:         return false;
0:     }
0: 
0:     public boolean isCaseSensitive()
0:     {
0:         return true;
0:     }
0: 
0:     public boolean isCurrency()
0:     {
0:         return false;
0:     }
0: 
0:     public int getPrecision(String obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public int getScale(String obj)
0:     {
0:         return -1;
0:     }
0: 
0:     public int getJdbcType()
0:     {
0:         return Types.VARCHAR;
0:     }
0: 
0:     public boolean needsQuotes()
0:     {
0:         return true;
0:     }
commit:2d95cb4
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer decompose(String value)
0:     {
0:         return ByteBufferUtil.bytes(value, Charsets.UTF_8);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         return decompose(source);
0: 
commit:46ea05f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             return ByteBufferUtil.string(bytes, Charsets.UTF_8);
0:             throw new MarshalException("invalid UTF8 bytes " + ByteBufferUtil.bytesToHex(bytes));
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: 
commit:ad38251
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public ByteBuffer fromString(String source)
0:     {
0:         return ByteBuffer.wrap(source.getBytes(Charsets.UTF_8));
0:     }
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:     public String getString(ByteBuffer bytes)
/////////////////////////////////////////////////////////////////////////
0:             throw new MarshalException("invalid UTF8 bytes " + Arrays.toString(bytes.array()));
commit:9f72856
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.nio.charset.CharacterCodingException;
0: import java.util.Arrays;
0: import org.apache.cassandra.utils.FBUtilities;
0: public class UTF8Type extends BytesType
0:             return FBUtilities.decodeToUTF8(bytes);
0:         catch (CharacterCodingException e)
0:             throw new MarshalException("invalid UTF8 bytes " + Arrays.toString(bytes));
commit:242b717
/////////////////////////////////////////////////////////////////////////
1:     public static final UTF8Type instance = new UTF8Type();
0: 
0:     UTF8Type() {} // singleton
0: 
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:e3aef8e
/////////////////////////////////////////////////////////////////////////
commit:e425474
/////////////////////////////////////////////////////////////////////////
0:         // TODO rm hack to support the "i'm going to pretend [] is an index entry if I didn't actually index anything" hack
0:         if (o1.length == 0)
0:         {
0:             return o2.length == 0 ? 0 : -1;
0:         }
0:         if (o2.length == 0)
0:         {
0:             return -1;
0:         }
0: 
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.marshal;
0: 
0: import java.io.UnsupportedEncodingException;
0: 
0: public class UTF8Type extends AbstractType
0: {
0:     public int compare(byte[] o1, byte[] o2)
0:     {
0:         try
0:         {
0:             return new String(o1, "UTF-8").compareTo(new String(o2, "UTF-8"));
0:         }
0:         catch (UnsupportedEncodingException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: 
0:     public String getString(byte[] bytes)
0:     {
0:         try
0:         {
0:             return new String(bytes, "UTF-8");
0:         }
0:         catch (UnsupportedEncodingException e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: }
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:725bfa9
/////////////////////////////////////////////////////////////////////////
0:     public String toString(String s)
0:     {
0:         return s;
0:     }
0: 
commit:d4c800b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Class<String> getType()
0:     {
0:         return String.class;
0:     }
commit:05d8ffd
/////////////////////////////////////////////////////////////////////////
1: public class UTF8Type extends AbstractType<String>
0:     public String compose(ByteBuffer bytes)
0:     {
0:         return getString(bytes);
0:     }
0: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
0:     {
0:         return BytesType.bytesCompare(o1, o2);
0:     }
0: 
commit:a4ebfe3
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         if (!UTF8Validator.validate(bytes.slice()))
0:             throw new MarshalException("String didn't validate.");
0:     }
0:     
0:     static class UTF8Validator
0:     {
0:         enum State {
0:             START,
0:             TWO,
0:             TWO_80,
0:             THREE_a0bf,
0:             THREE_80bf_1,
0:             THREE_80bf_2,
0:             FOUR_90bf,
0:             FOUR_80bf_3,
0:         };    
0:         
0:         // since we're not converting to java strings, we don't need to worry about converting to surrogates.
0:         // buf has already been sliced/duplicated.
0:         static boolean validate(ByteBuffer buf) 
0:         {
0:             int b = 0;
0:             State state = State.START;
0:             while (buf.remaining() > 0)
0:             {
0:                 b = buf.get();
0:                 switch (state)
0:                 {
0:                     case START:
0:                         if (b >= 0)
0:                         {
0:                             // ascii, state stays start.
0:                             if (b > 127)
0:                                 return false;
0:                         }
0:                         else if ((b >> 5) == -2)
0:                         {
0:                             // validate first byte of 2-byte char, 0xc2-0xdf
0:                             if (b == (byte) 0xc0)
0:                                 // speical case: modified utf8 null is 0xc080.
0:                                 state = State.TWO_80;
0:                             else if ((b & 0x1e) == 0)
0:                                 return false;
0:                             state = State.TWO;
0:                         }
0:                         else if ((b >> 4) == -2)
0:                         {
0:                             // 3 bytes. first byte will be 0xe0 or 0xe1-0xef. handling of second byte will differ.
0:                             // so 0xe0,0xa0-0xbf,0x80-0xbf or 0xe1-0xef,0x80-0xbf,0x80-0xbf.
0:                             if (b == (byte)0xe0)
0:                                 state = State.THREE_a0bf;
0:                             else
0:                                 state = State.THREE_80bf_2;
0:                             break;            
0:                         }
0:                         else if ((b >> 3) == -2)
0:                         {
0:                             // 4 bytes. this is where the fun starts.
0:                             if (b == (byte)0xf0)
0:                                 // 0xf0, 0x90-0xbf, 0x80-0xbf, 0x80-0xbf
0:                                 state = State.FOUR_90bf;
0:                             else if (b == (byte)0xf4)
0:                                 // 0xf4, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
0:                                 state = State.FOUR_80bf_3;
0:                             else
0:                                 // 0xf1-0xf3, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
0:                                 state = State.FOUR_80bf_3;
0:                             break;
0:                         }
0:                         else
0:                             return false; // malformed.
0:                         break;
0:                     case TWO:
0:                         // validate second byte of 2-byte char, 0x80-0xbf
0:                         if ((b & 0xc0) != 0x80)
0:                             return false;
0:                         state = State.START;
0:                         break;
0:                     case TWO_80:
0:                         if (b != (byte)0x80)
0:                             return false;
0:                         state = State.START;
0:                         break;
0:                     case THREE_a0bf:
0:                         if ((b & 0xe0) == 0x80)
0:                             return false;
0:                         state = State.THREE_80bf_1;
0:                         break;
0:                     case THREE_80bf_1:
0:                         // expecting 0x80-0xbf
0:                         if ((b & 0xc0) != 0x80)
0:                             return false;
0:                         state = State.START;
0:                         break;
0:                     case THREE_80bf_2:
0:                         // expecting 0x80-bf and then another of the same.
0:                         if ((b & 0xc0) != 0x80)
0:                             return false;
0:                         state = State.THREE_80bf_1;
0:                         break;
0:                     case FOUR_90bf:
0:                         // expecting 0x90-bf. 2nd byte of 4byte sequence. after that it should degrade to 80-bf,80-bf (like 3byte seq).
0:                         if ((b & 0x30) == 0)
0:                             return false;
0:                         state = State.THREE_80bf_2;
0:                         break;
0:                     case FOUR_80bf_3:
0:                         // expecting 0x80-bf 3 times. degenerates to THREE_80bf_2.
0:                         if ((b & 0xc0) != 0x80)
0:                             return false;
0:                         state = State.THREE_80bf_2;
0:                         break;
0:                     default:
0:                         return false; // invalid state.
0:                 }
0:             }
0:             // if state != start, we've got underflow. that's an error.
0:             return state == State.START;
0:         }
0:     }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3787d6c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:             throw new MarshalException("invalid UTF8 bytes " + ByteBufferUtil.string(bytes));
============================================================================