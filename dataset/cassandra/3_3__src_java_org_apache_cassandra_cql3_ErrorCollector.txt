1:8a2d8a1: /*
1:8a2d8a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:8a2d8a1:  * or more contributor license agreements.  See the NOTICE file
1:8a2d8a1:  * distributed with this work for additional information
1:8a2d8a1:  * regarding copyright ownership.  The ASF licenses this file
1:8a2d8a1:  * to you under the Apache License, Version 2.0 (the
1:8a2d8a1:  * "License"); you may not use this file except in compliance
1:8a2d8a1:  * with the License.  You may obtain a copy of the License at
1:8a2d8a1:  *
1:8a2d8a1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a2d8a1:  *
1:8a2d8a1:  * Unless required by applicable law or agreed to in writing, software
1:8a2d8a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a2d8a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a2d8a1:  * See the License for the specific language governing permissions and
1:8a2d8a1:  * limitations under the License.
1:8a2d8a1:  */
1:8a2d8a1: package org.apache.cassandra.cql3;
1:8a2d8a1: 
1:8a2d8a1: import java.util.LinkedList;
1:8a2d8a1: 
1:8a2d8a1: import org.antlr.runtime.BaseRecognizer;
1:8a2d8a1: import org.antlr.runtime.Parser;
1:8a2d8a1: import org.antlr.runtime.RecognitionException;
1:8a2d8a1: import org.antlr.runtime.Token;
1:8a2d8a1: import org.antlr.runtime.TokenStream;
1:8a2d8a1: import org.apache.cassandra.exceptions.SyntaxException;
1:8a2d8a1: 
1:8a2d8a1: /**
1:8a2d8a1:  * <code>ErrorListener</code> that collect and enhance the errors send by the CQL lexer and parser.
1:8a2d8a1:  */
1:8a2d8a1: public final class ErrorCollector implements ErrorListener
1:8a2d8a1: {
1:8a2d8a1:     /**
1:8a2d8a1:      * The offset of the first token of the snippet.
1:8a2d8a1:      */
1:8a2d8a1:     private static final int FIRST_TOKEN_OFFSET = 10;
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * The offset of the last token of the snippet.
1:8a2d8a1:      */
1:8a2d8a1:     private static final int LAST_TOKEN_OFFSET = 2;
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * The CQL query.
1:8a2d8a1:      */
1:8a2d8a1:     private final String query;
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * The error messages.
1:8a2d8a1:      */
1:8a2d8a1:     private final LinkedList<String> errorMsgs = new LinkedList<>();
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Creates a new <code>ErrorCollector</code> instance to collect the syntax errors associated to the specified CQL
1:8a2d8a1:      * query.
1:8a2d8a1:      *
1:8a2d8a1:      * @param query the CQL query that will be parsed
1:8a2d8a1:      */
1:8a2d8a1:     public ErrorCollector(String query)
1:8a2d8a1:     {
1:8a2d8a1:         this.query = query;
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * {@inheritDoc}
1:8a2d8a1:      */
1:8a2d8a1:     @Override
1:8a2d8a1:     public void syntaxError(BaseRecognizer recognizer, String[] tokenNames, RecognitionException e)
1:8a2d8a1:     {
1:8a2d8a1:         String hdr = recognizer.getErrorHeader(e);
1:8a2d8a1:         String msg = recognizer.getErrorMessage(e, tokenNames);
1:8a2d8a1: 
1:8a2d8a1:         StringBuilder builder = new StringBuilder().append(hdr)
1:8a2d8a1:                 .append(' ')
1:8a2d8a1:                 .append(msg);
1:8a2d8a1: 
1:8a2d8a1:         if (recognizer instanceof Parser)
1:8a2d8a1:             appendQuerySnippet((Parser) recognizer, builder);
1:8a2d8a1: 
1:8a2d8a1:         errorMsgs.add(builder.toString());
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * {@inheritDoc}
1:8a2d8a1:      */
1:8a2d8a1:     @Override
1:8a2d8a1:     public void syntaxError(BaseRecognizer recognizer, String errorMsg)
1:8a2d8a1:     {
1:8a2d8a1:         errorMsgs.add(errorMsg);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:c7f3a23:      * Throws the first syntax error found by the lexer or the parser if it exists.
1:8a2d8a1:      *
1:8a2d8a1:      * @throws SyntaxException the syntax error.
1:8a2d8a1:      */
1:c7f3a23:     public void throwFirstSyntaxError() throws SyntaxException
1:8a2d8a1:     {
1:8a2d8a1:         if (!errorMsgs.isEmpty())
1:c7f3a23:             throw new SyntaxException(errorMsgs.getFirst());
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Appends a query snippet to the message to help the user to understand the problem.
1:8a2d8a1:      *
1:8a2d8a1:      * @param parser the parser used to parse the query
1:8a2d8a1:      * @param builder the <code>StringBuilder</code> used to build the error message
1:8a2d8a1:      */
1:8a2d8a1:     private void appendQuerySnippet(Parser parser, StringBuilder builder)
1:8a2d8a1:     {
1:8a2d8a1:         TokenStream tokenStream = parser.getTokenStream();
1:8a2d8a1:         int index = tokenStream.index();
1:8a2d8a1:         int size = tokenStream.size();
1:8a2d8a1: 
1:8a2d8a1:         Token from = tokenStream.get(getSnippetFirstTokenIndex(index));
1:8a2d8a1:         Token to = tokenStream.get(getSnippetLastTokenIndex(index, size));
1:72241f6:         Token offending = tokenStream.get(getOffendingTokenIndex(index, size));
1:8a2d8a1: 
1:8a2d8a1:         appendSnippet(builder, from, to, offending);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Appends a query snippet to the message to help the user to understand the problem.
1:8a2d8a1:      *
1:8a2d8a1:      * @param from the first token to include within the snippet
1:8a2d8a1:      * @param to the last token to include within the snippet
1:8a2d8a1:      * @param offending the token which is responsible for the error
1:8a2d8a1:      */
1:8a2d8a1:     final void appendSnippet(StringBuilder builder,
1:8a2d8a1:                              Token from,
1:8a2d8a1:                              Token to,
1:8a2d8a1:                              Token offending)
1:8a2d8a1:     {
1:c7f3a23:         if (!areTokensValid(from, to, offending))
1:c7f3a23:             return;
1:c7f3a23: 
1:8a2d8a1:         String[] lines = query.split("\n");
1:8a2d8a1: 
1:8a2d8a1:         boolean includeQueryStart = (from.getLine() == 1) && (from.getCharPositionInLine() == 0);
1:8a2d8a1:         boolean includeQueryEnd = (to.getLine() == lines.length)
1:8a2d8a1:                 && (getLastCharPositionInLine(to) == lines[lines.length - 1].length());
1:8a2d8a1: 
1:8a2d8a1:         builder.append(" (");
1:8a2d8a1: 
1:8a2d8a1:         if (!includeQueryStart)
1:8a2d8a1:             builder.append("...");
1:8a2d8a1: 
1:6618bd8:         String toLine = lines[lineIndex(to)];
1:6618bd8:         int toEnd = getLastCharPositionInLine(to);
1:6618bd8:         lines[lineIndex(to)] = toEnd >= toLine.length() ? toLine : toLine.substring(0, toEnd);
1:8a2d8a1:         lines[lineIndex(offending)] = highlightToken(lines[lineIndex(offending)], offending);
1:8a2d8a1:         lines[lineIndex(from)] = lines[lineIndex(from)].substring(from.getCharPositionInLine());
1:8a2d8a1: 
1:8a2d8a1:         for (int i = lineIndex(from), m = lineIndex(to); i <= m; i++)
1:8a2d8a1:             builder.append(lines[i]);
1:8a2d8a1: 
1:8a2d8a1:         if (!includeQueryEnd)
1:8a2d8a1:             builder.append("...");
1:8a2d8a1: 
1:8a2d8a1:         builder.append(")");
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:c7f3a23:      * Checks if the specified tokens are valid.
1:c7f3a23:      *
1:6618bd8:      * @param tokens the tokens to check
1:c7f3a23:      * @return <code>true</code> if all the specified tokens are valid ones,
1:c7f3a23:      * <code>false</code> otherwise.
1:c7f3a23:      */
1:c7f3a23:     private static boolean areTokensValid(Token... tokens)
1:c7f3a23:     {
1:c7f3a23:         for (Token token : tokens)
1:c7f3a23:         {
1:c7f3a23:             if (!isTokenValid(token))
1:c7f3a23:                 return false;
1:c7f3a23:         }
1:c7f3a23:         return true;
1:c7f3a23:     }
1:c7f3a23: 
1:c7f3a23:     /**
1:c7f3a23:      * Checks that the specified token is valid.
1:c7f3a23:      *
1:c7f3a23:      * @param token the token to check
1:c7f3a23:      * @return <code>true</code> if it is considered as valid, <code>false</code> otherwise.
1:c7f3a23:      */
1:c7f3a23:     private static boolean isTokenValid(Token token)
1:c7f3a23:     {
1:c7f3a23:         return token.getLine() > 0 && token.getCharPositionInLine() >= 0;
1:c7f3a23:     }
1:c7f3a23: 
1:c7f3a23:     /**
1:72241f6:      * Returns the index of the offending token. <p>In the case where the offending token is an extra
1:72241f6:      * character at the end, the index returned by the <code>TokenStream</code> might be after the last token.
1:72241f6:      * To avoid that problem we need to make sure that the index of the offending token is a valid index 
1:72241f6:      * (one for which a token exist).</p>
1:72241f6:      *
1:72241f6:      * @param index the token index returned by the <code>TokenStream</code>
1:72241f6:      * @param size the <code>TokenStream</code> size
1:72241f6:      * @return the valid index of the offending token
1:72241f6:      */
1:72241f6:     private static int getOffendingTokenIndex(int index, int size)
1:72241f6:     {
1:72241f6:         return Math.min(index, size - 1);
1:72241f6:     }
1:72241f6: 
1:72241f6:     /**
1:8a2d8a1:      * Puts the specified token within square brackets.
1:8a2d8a1:      *
1:8a2d8a1:      * @param line the line containing the token
1:8a2d8a1:      * @param token the token to put within square brackets
1:8a2d8a1:      */
1:8a2d8a1:     private static String highlightToken(String line, Token token)
1:8a2d8a1:     {
1:8a2d8a1:         String newLine = insertChar(line, getLastCharPositionInLine(token), ']');
1:8a2d8a1:         return insertChar(newLine, token.getCharPositionInLine(), '[');
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Returns the index of the last character relative to the beginning of the line 0..n-1
1:8a2d8a1:      *
1:8a2d8a1:      * @param token the token
1:8a2d8a1:      * @return the index of the last character relative to the beginning of the line 0..n-1
1:8a2d8a1:      */
1:8a2d8a1:     private static int getLastCharPositionInLine(Token token)
1:8a2d8a1:     {
1:8a2d8a1:         return token.getCharPositionInLine() + getLength(token);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Return the token length.
1:8a2d8a1:      *
1:8a2d8a1:      * @param token the token
1:8a2d8a1:      * @return the token length
1:8a2d8a1:      */
1:8a2d8a1:     private static int getLength(Token token)
1:8a2d8a1:     {
1:8a2d8a1:         return token.getText().length();
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Inserts a character at a given position within a <code>String</code>.
1:8a2d8a1:      *
1:8a2d8a1:      * @param s the <code>String</code> in which the character must be inserted
1:8a2d8a1:      * @param index the position where the character must be inserted
1:8a2d8a1:      * @param c the character to insert
1:8a2d8a1:      * @return the modified <code>String</code>
1:8a2d8a1:      */
1:8a2d8a1:     private static String insertChar(String s, int index, char c)
1:8a2d8a1:     {
1:8a2d8a1:         return new StringBuilder().append(s.substring(0, index))
1:8a2d8a1:                 .append(c)
1:8a2d8a1:                 .append(s.substring(index))
1:8a2d8a1:                 .toString();
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Returns the index of the line number on which this token was matched; index=0..n-1
1:8a2d8a1:      *
1:8a2d8a1:      * @param token the token
1:8a2d8a1:      * @return the index of the line number on which this token was matched; index=0..n-1
1:8a2d8a1:      */
1:8a2d8a1:     private static int lineIndex(Token token)
1:8a2d8a1:     {
1:8a2d8a1:         return token.getLine() - 1;
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Returns the index of the last token which is part of the snippet.
1:8a2d8a1:      *
1:8a2d8a1:      * @param index the index of the token causing the error
1:8a2d8a1:      * @param size the total number of tokens
1:8a2d8a1:      * @return the index of the last token which is part of the snippet.
1:8a2d8a1:      */
1:8a2d8a1:     private static int getSnippetLastTokenIndex(int index, int size)
1:8a2d8a1:     {
1:8a2d8a1:         return Math.min(size - 1, index + LAST_TOKEN_OFFSET);
1:8a2d8a1:     }
1:8a2d8a1: 
1:8a2d8a1:     /**
1:8a2d8a1:      * Returns the index of the first token which is part of the snippet.
1:8a2d8a1:      *
1:8a2d8a1:      * @param index the index of the token causing the error
1:8a2d8a1:      * @return the index of the first token which is part of the snippet.
1:8a2d8a1:      */
1:8a2d8a1:     private static int getSnippetFirstTokenIndex(int index)
1:8a2d8a1:     {
1:8a2d8a1:         return Math.max(0, index - FIRST_TOKEN_OFFSET);
1:8a2d8a1:     }
1:8a2d8a1: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:6618bd8
/////////////////////////////////////////////////////////////////////////
1:         String toLine = lines[lineIndex(to)];
1:         int toEnd = getLastCharPositionInLine(to);
1:         lines[lineIndex(to)] = toEnd >= toLine.length() ? toLine : toLine.substring(0, toEnd);
/////////////////////////////////////////////////////////////////////////
1:      * @param tokens the tokens to check
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:4a69811
commit:c7f3a23
/////////////////////////////////////////////////////////////////////////
1:      * Throws the first syntax error found by the lexer or the parser if it exists.
1:     public void throwFirstSyntaxError() throws SyntaxException
1:             throw new SyntaxException(errorMsgs.getFirst());
/////////////////////////////////////////////////////////////////////////
1:         if (!areTokensValid(from, to, offending))
1:             return;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Checks if the specified tokens are valid.
1:      *
0:      * @param token the tokens to check
1:      * @return <code>true</code> if all the specified tokens are valid ones,
1:      * <code>false</code> otherwise.
1:      */
1:     private static boolean areTokensValid(Token... tokens)
1:     {
1:         for (Token token : tokens)
1:         {
1:             if (!isTokenValid(token))
1:                 return false;
1:         }
1:         return true;
1:     }
1: 
1:     /**
1:      * Checks that the specified token is valid.
1:      *
1:      * @param token the token to check
1:      * @return <code>true</code> if it is considered as valid, <code>false</code> otherwise.
1:      */
1:     private static boolean isTokenValid(Token token)
1:     {
1:         return token.getLine() > 0 && token.getCharPositionInLine() >= 0;
1:     }
1: 
1:     /**
author:blerer
-------------------------------------------------------------------------------
commit:72241f6
/////////////////////////////////////////////////////////////////////////
1:         Token offending = tokenStream.get(getOffendingTokenIndex(index, size));
/////////////////////////////////////////////////////////////////////////
1:      * Returns the index of the offending token. <p>In the case where the offending token is an extra
1:      * character at the end, the index returned by the <code>TokenStream</code> might be after the last token.
1:      * To avoid that problem we need to make sure that the index of the offending token is a valid index 
1:      * (one for which a token exist).</p>
1:      *
1:      * @param index the token index returned by the <code>TokenStream</code>
1:      * @param size the <code>TokenStream</code> size
1:      * @return the valid index of the offending token
1:      */
1:     private static int getOffendingTokenIndex(int index, int size)
1:     {
1:         return Math.min(index, size - 1);
1:     }
1: 
1:     /**
commit:8a2d8a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.LinkedList;
1: 
1: import org.antlr.runtime.BaseRecognizer;
1: import org.antlr.runtime.Parser;
1: import org.antlr.runtime.RecognitionException;
1: import org.antlr.runtime.Token;
1: import org.antlr.runtime.TokenStream;
1: import org.apache.cassandra.exceptions.SyntaxException;
1: 
1: /**
1:  * <code>ErrorListener</code> that collect and enhance the errors send by the CQL lexer and parser.
1:  */
1: public final class ErrorCollector implements ErrorListener
1: {
1:     /**
1:      * The offset of the first token of the snippet.
1:      */
1:     private static final int FIRST_TOKEN_OFFSET = 10;
1: 
1:     /**
1:      * The offset of the last token of the snippet.
1:      */
1:     private static final int LAST_TOKEN_OFFSET = 2;
1: 
1:     /**
1:      * The CQL query.
1:      */
1:     private final String query;
1: 
1:     /**
1:      * The error messages.
1:      */
1:     private final LinkedList<String> errorMsgs = new LinkedList<>();
1: 
1:     /**
1:      * Creates a new <code>ErrorCollector</code> instance to collect the syntax errors associated to the specified CQL
1:      * query.
1:      *
1:      * @param query the CQL query that will be parsed
1:      */
1:     public ErrorCollector(String query)
1:     {
1:         this.query = query;
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     @Override
1:     public void syntaxError(BaseRecognizer recognizer, String[] tokenNames, RecognitionException e)
1:     {
1:         String hdr = recognizer.getErrorHeader(e);
1:         String msg = recognizer.getErrorMessage(e, tokenNames);
1: 
1:         StringBuilder builder = new StringBuilder().append(hdr)
1:                 .append(' ')
1:                 .append(msg);
1: 
1:         if (recognizer instanceof Parser)
1:             appendQuerySnippet((Parser) recognizer, builder);
1: 
1:         errorMsgs.add(builder.toString());
1:     }
1: 
1:     /**
1:      * {@inheritDoc}
1:      */
1:     @Override
1:     public void syntaxError(BaseRecognizer recognizer, String errorMsg)
1:     {
1:         errorMsgs.add(errorMsg);
1:     }
1: 
1:     /**
0:      * Throws the last syntax error found by the lexer or the parser if it exists.
1:      *
1:      * @throws SyntaxException the syntax error.
1:      */
0:     public void throwLastSyntaxError() throws SyntaxException
1:     {
1:         if (!errorMsgs.isEmpty())
0:             throw new SyntaxException(errorMsgs.getLast());
1:     }
1: 
1:     /**
1:      * Appends a query snippet to the message to help the user to understand the problem.
1:      *
1:      * @param parser the parser used to parse the query
1:      * @param builder the <code>StringBuilder</code> used to build the error message
1:      */
1:     private void appendQuerySnippet(Parser parser, StringBuilder builder)
1:     {
1:         TokenStream tokenStream = parser.getTokenStream();
1:         int index = tokenStream.index();
1:         int size = tokenStream.size();
1: 
1:         Token from = tokenStream.get(getSnippetFirstTokenIndex(index));
1:         Token to = tokenStream.get(getSnippetLastTokenIndex(index, size));
0:         Token offending = tokenStream.get(index);
1: 
1:         appendSnippet(builder, from, to, offending);
1:     }
1: 
1:     /**
1:      * Appends a query snippet to the message to help the user to understand the problem.
1:      *
1:      * @param from the first token to include within the snippet
1:      * @param to the last token to include within the snippet
1:      * @param offending the token which is responsible for the error
1:      */
1:     final void appendSnippet(StringBuilder builder,
1:                              Token from,
1:                              Token to,
1:                              Token offending)
1:     {
1:         String[] lines = query.split("\n");
1: 
1:         boolean includeQueryStart = (from.getLine() == 1) && (from.getCharPositionInLine() == 0);
1:         boolean includeQueryEnd = (to.getLine() == lines.length)
1:                 && (getLastCharPositionInLine(to) == lines[lines.length - 1].length());
1: 
1:         builder.append(" (");
1: 
1:         if (!includeQueryStart)
1:             builder.append("...");
1: 
0:         lines[lineIndex(to)] = lines[lineIndex(to)].substring(0, getLastCharPositionInLine(to));
1:         lines[lineIndex(offending)] = highlightToken(lines[lineIndex(offending)], offending);
1:         lines[lineIndex(from)] = lines[lineIndex(from)].substring(from.getCharPositionInLine());
1: 
1:         for (int i = lineIndex(from), m = lineIndex(to); i <= m; i++)
1:             builder.append(lines[i]);
1: 
1:         if (!includeQueryEnd)
1:             builder.append("...");
1: 
1:         builder.append(")");
1:     }
1: 
1:     /**
1:      * Puts the specified token within square brackets.
1:      *
1:      * @param line the line containing the token
1:      * @param token the token to put within square brackets
1:      */
1:     private static String highlightToken(String line, Token token)
1:     {
1:         String newLine = insertChar(line, getLastCharPositionInLine(token), ']');
1:         return insertChar(newLine, token.getCharPositionInLine(), '[');
1:     }
1: 
1:     /**
1:      * Returns the index of the last character relative to the beginning of the line 0..n-1
1:      *
1:      * @param token the token
1:      * @return the index of the last character relative to the beginning of the line 0..n-1
1:      */
1:     private static int getLastCharPositionInLine(Token token)
1:     {
1:         return token.getCharPositionInLine() + getLength(token);
1:     }
1: 
1:     /**
1:      * Return the token length.
1:      *
1:      * @param token the token
1:      * @return the token length
1:      */
1:     private static int getLength(Token token)
1:     {
1:         return token.getText().length();
1:     }
1: 
1:     /**
1:      * Inserts a character at a given position within a <code>String</code>.
1:      *
1:      * @param s the <code>String</code> in which the character must be inserted
1:      * @param index the position where the character must be inserted
1:      * @param c the character to insert
1:      * @return the modified <code>String</code>
1:      */
1:     private static String insertChar(String s, int index, char c)
1:     {
1:         return new StringBuilder().append(s.substring(0, index))
1:                 .append(c)
1:                 .append(s.substring(index))
1:                 .toString();
1:     }
1: 
1:     /**
1:      * Returns the index of the line number on which this token was matched; index=0..n-1
1:      *
1:      * @param token the token
1:      * @return the index of the line number on which this token was matched; index=0..n-1
1:      */
1:     private static int lineIndex(Token token)
1:     {
1:         return token.getLine() - 1;
1:     }
1: 
1:     /**
1:      * Returns the index of the last token which is part of the snippet.
1:      *
1:      * @param index the index of the token causing the error
1:      * @param size the total number of tokens
1:      * @return the index of the last token which is part of the snippet.
1:      */
1:     private static int getSnippetLastTokenIndex(int index, int size)
1:     {
1:         return Math.min(size - 1, index + LAST_TOKEN_OFFSET);
1:     }
1: 
1:     /**
1:      * Returns the index of the first token which is part of the snippet.
1:      *
1:      * @param index the index of the token causing the error
1:      * @return the index of the first token which is part of the snippet.
1:      */
1:     private static int getSnippetFirstTokenIndex(int index)
1:     {
1:         return Math.max(0, index - FIRST_TOKEN_OFFSET);
1:     }
1: }
============================================================================