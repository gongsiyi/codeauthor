1:a991b64: package org.apache.cassandra.db;
1:a991b64: /*
1:a991b64:  *
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing,
1:a991b64:  * software distributed under the License is distributed on an
1:a991b64:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a991b64:  * KIND, either express or implied.  See the License for the
1:a991b64:  * specific language governing permissions and limitations
1:a991b64:  * under the License.
1:a991b64:  *
1:a991b64:  */
1:a991b64: 
1:a991b64: import org.apache.cassandra.cql3.CQLTester;
1:a991b64: import org.junit.Test;
1:a991b64: 
1:a991b64: 
1:a991b64: public class MultiKeyspaceTest extends CQLTester
1:a991b64: {
1:a991b64:     @Test
1:a991b64:     public void testSameTableNames() throws Throwable
1:a991b64:     {
1:a991b64:         schemaChange("CREATE KEYSPACE multikstest1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:a991b64:         schemaChange("CREATE TABLE multikstest1.standard1 (a int PRIMARY KEY, b int)");
1:a991b64: 
1:a991b64:         schemaChange("CREATE KEYSPACE multikstest2 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:a991b64:         schemaChange("CREATE TABLE multikstest2.standard1 (a int PRIMARY KEY, b int)");
1:a991b64: 
1:a991b64:         execute("INSERT INTO multikstest1.standard1 (a, b) VALUES (0, 0)");
1:a991b64:         execute("INSERT INTO multikstest2.standard1 (a, b) VALUES (0, 0)");
1:a991b64: 
1:a991b64:         Keyspace.open("multikstest1").flush();
1:a991b64:         Keyspace.open("multikstest2").flush();
1:a991b64: 
1:a991b64:         assertRows(execute("SELECT * FROM multikstest1.standard1"),
1:a991b64:                    row(0, 0));
1:a991b64:         assertRows(execute("SELECT * FROM multikstest2.standard1"),
1:a991b64:                    row(0, 0));
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db;
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.junit.Test;
1: 
1: 
1: public class MultiKeyspaceTest extends CQLTester
1: {
1:     @Test
1:     public void testSameTableNames() throws Throwable
1:     {
1:         schemaChange("CREATE KEYSPACE multikstest1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:         schemaChange("CREATE TABLE multikstest1.standard1 (a int PRIMARY KEY, b int)");
1: 
1:         schemaChange("CREATE KEYSPACE multikstest2 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}");
1:         schemaChange("CREATE TABLE multikstest2.standard1 (a int PRIMARY KEY, b int)");
1: 
1:         execute("INSERT INTO multikstest1.standard1 (a, b) VALUES (0, 0)");
1:         execute("INSERT INTO multikstest2.standard1 (a, b) VALUES (0, 0)");
1: 
1:         Keyspace.open("multikstest1").flush();
1:         Keyspace.open("multikstest2").flush();
1: 
1:         assertRows(execute("SELECT * FROM multikstest1.standard1"),
1:                    row(0, 0));
1:         assertRows(execute("SELECT * FROM multikstest2.standard1"),
1:                    row(0, 0));
1:     }
1: }
============================================================================