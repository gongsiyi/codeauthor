1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: package org.apache.cassandra.index.internal.composites;
1:0626be8: 
1:0626be8: import java.nio.ByteBuffer;
1:0626be8: 
1:0626be8: import org.apache.cassandra.db.*;
1:0626be8: import org.apache.cassandra.db.rows.CellPath;
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: import org.apache.cassandra.index.internal.CassandraIndex;
1:0626be8: import org.apache.cassandra.index.internal.IndexEntry;
1:0626be8: import org.apache.cassandra.schema.IndexMetadata;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Index on a CLUSTERING_COLUMN column definition.
1:0626be8:  *
1:0626be8:  * A cell indexed by this index will have the general form:
1:0626be8:  *   ck_0 ... ck_n c_name : v
1:0626be8:  * where ck_i are the cluster keys, c_name the last component of the cell
1:0626be8:  * composite name (or second to last if collections are in use, but this
1:0626be8:  * has no impact) and v the cell value.
1:0626be8:  *
1:0626be8:  * Such a cell is always indexed by this index (or rather, it is indexed if
1:6b7db8a:  * {@code 
1:0626be8:  * n >= columnDef.componentIndex, which will always be the case in practice)
1:0626be8:  * and it will generate (makeIndexColumnName()) an index entry whose:
1:0626be8:  *   - row key will be ck_i (getIndexedValue()) where i == columnDef.componentIndex.
1:0626be8:  *   - cell name will
1:0626be8:  *       rk ck_0 ... ck_{i-1} ck_{i+1} ck_n
1:0626be8:  *     where rk is the row key of the initial cell and i == columnDef.componentIndex.
1:6b7db8a:  * }
1:0626be8:  */
1:0626be8: public class ClusteringColumnIndex extends CassandraIndex
1:0626be8: {
1:0626be8:     public ClusteringColumnIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:0626be8:     {
1:0626be8:         super(baseCfs, indexDef);
1:0626be8:     }
1:0626be8: 
1:0626be8: 
1:0626be8:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:0626be8:                                       Clustering clustering,
1:0626be8:                                       CellPath path, ByteBuffer cellValue)
1:0626be8:     {
1:0626be8:         return clustering.get(indexedColumn.position());
1:0626be8:     }
1:0626be8: 
1:0626be8:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:0626be8:                                                ClusteringPrefix prefix,
1:0626be8:                                                CellPath path)
1:0626be8:     {
1:0626be8:         CBuilder builder = CBuilder.create(getIndexComparator());
1:0626be8:         builder.add(partitionKey);
1:0626be8:         for (int i = 0; i < Math.min(indexedColumn.position(), prefix.size()); i++)
1:0626be8:             builder.add(prefix.get(i));
1:0626be8:         for (int i = indexedColumn.position() + 1; i < prefix.size(); i++)
1:0626be8:             builder.add(prefix.get(i));
1:0626be8:         return builder;
1:0626be8:     }
1:0626be8: 
1:0626be8:     public IndexEntry decodeEntry(DecoratedKey indexedValue,
1:0626be8:                                   Row indexEntry)
1:0626be8:     {
1:0626be8:         int ckCount = baseCfs.metadata.clusteringColumns().size();
1:0626be8: 
1:0626be8:         Clustering clustering = indexEntry.clustering();
1:0626be8:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:0626be8:         for (int i = 0; i < indexedColumn.position(); i++)
1:0626be8:             builder.add(clustering.get(i + 1));
1:0626be8: 
1:0626be8:         builder.add(indexedValue.getKey());
1:0626be8: 
1:0626be8:         for (int i = indexedColumn.position() + 1; i < ckCount; i++)
1:0626be8:             builder.add(clustering.get(i));
1:0626be8: 
1:0626be8:         return new IndexEntry(indexedValue,
1:0626be8:                               clustering,
1:0626be8:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:0626be8:                               clustering.get(0),
1:0626be8:                               builder.build());
1:0626be8:     }
1:0626be8: 
1:0626be8:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:0626be8:     {
1:0626be8:         return !data.hasLiveData(nowInSec);
1:0626be8:     }
1:0626be8: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:  * {@code 
1:  * }
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.internal.composites;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.rows.CellPath;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.index.internal.CassandraIndex;
1: import org.apache.cassandra.index.internal.IndexEntry;
1: import org.apache.cassandra.schema.IndexMetadata;
1: 
1: /**
1:  * Index on a CLUSTERING_COLUMN column definition.
1:  *
1:  * A cell indexed by this index will have the general form:
1:  *   ck_0 ... ck_n c_name : v
1:  * where ck_i are the cluster keys, c_name the last component of the cell
1:  * composite name (or second to last if collections are in use, but this
1:  * has no impact) and v the cell value.
1:  *
1:  * Such a cell is always indexed by this index (or rather, it is indexed if
1:  * n >= columnDef.componentIndex, which will always be the case in practice)
1:  * and it will generate (makeIndexColumnName()) an index entry whose:
1:  *   - row key will be ck_i (getIndexedValue()) where i == columnDef.componentIndex.
1:  *   - cell name will
1:  *       rk ck_0 ... ck_{i-1} ck_{i+1} ck_n
1:  *     where rk is the row key of the initial cell and i == columnDef.componentIndex.
1:  */
1: public class ClusteringColumnIndex extends CassandraIndex
1: {
1:     public ClusteringColumnIndex(ColumnFamilyStore baseCfs, IndexMetadata indexDef)
1:     {
1:         super(baseCfs, indexDef);
1:     }
1: 
1: 
1:     public ByteBuffer getIndexedValue(ByteBuffer partitionKey,
1:                                       Clustering clustering,
1:                                       CellPath path, ByteBuffer cellValue)
1:     {
1:         return clustering.get(indexedColumn.position());
1:     }
1: 
1:     public CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,
1:                                                ClusteringPrefix prefix,
1:                                                CellPath path)
1:     {
1:         CBuilder builder = CBuilder.create(getIndexComparator());
1:         builder.add(partitionKey);
1:         for (int i = 0; i < Math.min(indexedColumn.position(), prefix.size()); i++)
1:             builder.add(prefix.get(i));
1:         for (int i = indexedColumn.position() + 1; i < prefix.size(); i++)
1:             builder.add(prefix.get(i));
1:         return builder;
1:     }
1: 
1:     public IndexEntry decodeEntry(DecoratedKey indexedValue,
1:                                   Row indexEntry)
1:     {
1:         int ckCount = baseCfs.metadata.clusteringColumns().size();
1: 
1:         Clustering clustering = indexEntry.clustering();
1:         CBuilder builder = CBuilder.create(baseCfs.getComparator());
1:         for (int i = 0; i < indexedColumn.position(); i++)
1:             builder.add(clustering.get(i + 1));
1: 
1:         builder.add(indexedValue.getKey());
1: 
1:         for (int i = indexedColumn.position() + 1; i < ckCount; i++)
1:             builder.add(clustering.get(i));
1: 
1:         return new IndexEntry(indexedValue,
1:                               clustering,
1:                               indexEntry.primaryKeyLivenessInfo().timestamp(),
1:                               clustering.get(0),
1:                               builder.build());
1:     }
1: 
1:     public boolean isStale(Row data, ByteBuffer indexValue, int nowInSec)
1:     {
1:         return !data.hasLiveData(nowInSec);
1:     }
1: }
============================================================================