1:615bf37: /*
1:615bf37:  *
1:615bf37:  * Licensed to the Apache Software Foundation (ASF) under one
1:615bf37:  * or more contributor license agreements.  See the NOTICE file
1:615bf37:  * distributed with this work for additional information
1:615bf37:  * regarding copyright ownership.  The ASF licenses this file
1:615bf37:  * to you under the Apache License, Version 2.0 (the
1:615bf37:  * "License"); you may not use this file except in compliance
1:615bf37:  * with the License.  You may obtain a copy of the License at
1:615bf37:  *
1:615bf37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:615bf37:  *
1:615bf37:  * Unless required by applicable law or agreed to in writing,
1:615bf37:  * software distributed under the License is distributed on an
1:615bf37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:615bf37:  * KIND, either express or implied.  See the License for the
1:615bf37:  * specific language governing permissions and limitations
1:615bf37:  * under the License.
1:615bf37:  *
1:615bf37:  */
1:6f0c7d9: package org.apache.cassandra.net;
3:6f0c7d9: 
1:04afa2b: import java.io.ByteArrayInputStream;
1:04afa2b: import java.io.ByteArrayOutputStream;
1:04afa2b: import java.io.IOException;
1:04afa2b: import java.net.InetAddress;
1:d43b9ce: import java.net.UnknownHostException;
1:04afa2b: import java.util.Arrays;
1:d43b9ce: import java.util.Collections;
1:6f0c7d9: import java.util.List;
1:d43b9ce: import java.util.Map;
1:d43b9ce: import java.util.Set;
1:04afa2b: import java.util.concurrent.ConcurrentHashMap;
1:04afa2b: import java.util.concurrent.TimeUnit;
1:6f0c7d9: 
1:d43b9ce: import com.google.common.collect.Iterables;
1:d43b9ce: 
1:04afa2b: import com.codahale.metrics.Timer;
1:04afa2b: 
1:04afa2b: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
1:04afa2b: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1:04afa2b: import org.apache.cassandra.io.util.WrappedDataOutputStreamPlus;
1:04afa2b: import org.caffinitas.ohc.histo.EstimatedHistogram;
1:d43b9ce: 
1:d43b9ce: import org.junit.Before;
1:9797511: import org.junit.BeforeClass;
1:6f0c7d9: import org.junit.Test;
1:6f0c7d9: 
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: 
1:d43b9ce: import static org.junit.Assert.*;
1:d43b9ce: 
1:6f0c7d9: public class MessagingServiceTest
1:9797511: {
1:d43b9ce:     private final static long ONE_SECOND = TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS);
1:d43b9ce:     private final static long[] bucketOffsets = new EstimatedHistogram(160).getBucketOffsets();
1:d43b9ce:     private final MessagingService messagingService = MessagingService.test();
1:d43b9ce: 
1:9797511:     @BeforeClass
1:d43b9ce:     public static void beforeClass() throws UnknownHostException
1:04afa2b:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:d43b9ce:         DatabaseDescriptor.setBackPressureStrategy(new MockBackPressureStrategy(Collections.emptyMap()));
1:d43b9ce:         DatabaseDescriptor.setBroadcastAddress(InetAddress.getByName("127.0.0.1"));
1:9797511:     }
1:9797511: 
1:d43b9ce:     @Before
1:d43b9ce:     public void before() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         MockBackPressureStrategy.applied = false;
1:d43b9ce:         messagingService.destroyConnectionPool(InetAddress.getByName("127.0.0.2"));
1:d43b9ce:         messagingService.destroyConnectionPool(InetAddress.getByName("127.0.0.3"));
1:d43b9ce:     }
1:04afa2b: 
1:04afa2b:     @Test
1:6f0c7d9:     public void testDroppedMessages()
1:04afa2b:     {
1:6f0c7d9:         MessagingService.Verb verb = MessagingService.Verb.READ;
1:04afa2b: 
1:c9ef25f:         for (int i = 1; i <= 5000; i++)
1:c9ef25f:             messagingService.incrementDroppedMessages(verb, i, i % 2 == 0);
1:6f0c7d9: 
1:6f0c7d9:         List<String> logs = messagingService.getDroppedMessagesLogs();
1:6f0c7d9:         assertEquals(1, logs.size());
1:9d9a1a1:         assertEquals("READ messages were dropped in last 5000 ms: 2500 internal and 2500 cross node. Mean internal dropped latency: 2730 ms and Mean cross-node dropped latency: 2731 ms", logs.get(0));
1:9d9a1a1:         assertEquals(5000, (int) messagingService.getDroppedMessages().get(verb.toString()));
1:6f0c7d9: 
1:6f0c7d9:         logs = messagingService.getDroppedMessagesLogs();
1:6f0c7d9:         assertEquals(0, logs.size());
1:6f0c7d9: 
1:6f0c7d9:         for (int i = 0; i < 2500; i++)
1:c9ef25f:             messagingService.incrementDroppedMessages(verb, i, i % 2 == 0);
1:6f0c7d9: 
1:6f0c7d9:         logs = messagingService.getDroppedMessagesLogs();
1:9d9a1a1:         assertEquals("READ messages were dropped in last 5000 ms: 1250 internal and 1250 cross node. Mean internal dropped latency: 2277 ms and Mean cross-node dropped latency: 2278 ms", logs.get(0));
1:9d9a1a1:         assertEquals(7500, (int) messagingService.getDroppedMessages().get(verb.toString()));
1:04afa2b:     }
1:6f0c7d9: 
1:6f0c7d9:     @Test
1:04afa2b:     public void testDCLatency() throws Exception
1:04afa2b:     {
1:04afa2b:         int latency = 100;
1:04afa2b: 
1:04afa2b:         ConcurrentHashMap<String, Timer> dcLatency = MessagingService.instance().metrics.dcLatency;
1:04afa2b:         dcLatency.clear();
1:04afa2b: 
1:04afa2b:         long now = System.currentTimeMillis();
1:04afa2b:         long sentAt = now - latency;
1:04afa2b: 
1:04afa2b:         assertNull(dcLatency.get("datacenter1"));
1:9d9a1a1:         addDCLatency(sentAt);
1:04afa2b:         assertNotNull(dcLatency.get("datacenter1"));
1:04afa2b:         assertEquals(1, dcLatency.get("datacenter1").getCount());
1:04afa2b:         long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, TimeUnit.MILLISECONDS.toNanos(latency))) - 1];
1:04afa2b:         assertEquals(expectedBucket, dcLatency.get("datacenter1").getSnapshot().getMax());
1:04afa2b:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:04afa2b:     public void testNegativeDCLatency() throws Exception
1:04afa2b:     {
1:04afa2b:         // if clocks are off should just not track anything
1:04afa2b:         int latency = -100;
1:04afa2b: 
1:04afa2b:         ConcurrentHashMap<String, Timer> dcLatency = MessagingService.instance().metrics.dcLatency;
1:04afa2b:         dcLatency.clear();
1:04afa2b: 
1:04afa2b:         long now = System.currentTimeMillis();
1:04afa2b:         long sentAt = now - latency;
1:04afa2b: 
1:04afa2b:         assertNull(dcLatency.get("datacenter1"));
1:9d9a1a1:         addDCLatency(sentAt);
1:04afa2b:         assertNull(dcLatency.get("datacenter1"));
1:04afa2b:     }
1:6f0c7d9: 
1:04afa2b:     @Test
1:d43b9ce:     public void testUpdatesBackPressureOnSendWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:d43b9ce:         IAsyncCallback bpCallback = new BackPressureCallback();
1:d43b9ce:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:d43b9ce:         MessageOut<?> ignored = null;
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), noCallback, ignored);
1:d43b9ce:         assertFalse(backPressureState.onSend);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(false);
1:d43b9ce:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), bpCallback, ignored);
1:d43b9ce:         assertFalse(backPressureState.onSend);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), bpCallback, ignored);
1:d43b9ce:         assertTrue(backPressureState.onSend);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdatesBackPressureOnReceiveWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:d43b9ce:         IAsyncCallback bpCallback = new BackPressureCallback();
1:d43b9ce:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:d43b9ce:         boolean timeout = false;
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), noCallback, timeout);
1:d43b9ce:         assertFalse(backPressureState.onReceive);
1:d43b9ce:         assertFalse(backPressureState.onTimeout);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(false);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:d43b9ce:         assertFalse(backPressureState.onReceive);
1:d43b9ce:         assertFalse(backPressureState.onTimeout);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:d43b9ce:         assertTrue(backPressureState.onReceive);
1:d43b9ce:         assertFalse(backPressureState.onTimeout);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testUpdatesBackPressureOnTimeoutWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:d43b9ce:         IAsyncCallback bpCallback = new BackPressureCallback();
1:d43b9ce:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:d43b9ce:         boolean timeout = true;
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), noCallback, timeout);
1:d43b9ce:         assertFalse(backPressureState.onReceive);
1:d43b9ce:         assertFalse(backPressureState.onTimeout);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(false);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:d43b9ce:         assertFalse(backPressureState.onReceive);
1:d43b9ce:         assertFalse(backPressureState.onTimeout);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:d43b9ce:         assertFalse(backPressureState.onReceive);
1:d43b9ce:         assertTrue(backPressureState.onTimeout);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testAppliesBackPressureWhenEnabled() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(false);
1:d43b9ce:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.2")), ONE_SECOND);
1:d43b9ce:         assertFalse(MockBackPressureStrategy.applied);
1:d43b9ce: 
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.2")), ONE_SECOND);
1:d43b9ce:         assertTrue(MockBackPressureStrategy.applied);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @Test
1:d43b9ce:     public void testDoesntApplyBackPressureToBroadcastAddress() throws UnknownHostException
1:d43b9ce:     {
1:d43b9ce:         DatabaseDescriptor.setBackPressureEnabled(true);
1:d43b9ce:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.1")), ONE_SECOND);
1:d43b9ce:         assertFalse(MockBackPressureStrategy.applied);
1:d43b9ce:     }
1:d43b9ce: 
1:9d9a1a1:     private static void addDCLatency(long sentAt) throws IOException
1:d43b9ce:     {
1:d43b9ce:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:d43b9ce:         try (DataOutputStreamPlus out = new WrappedDataOutputStreamPlus(baos))
1:d43b9ce:         {
1:d43b9ce:             out.writeInt((int) sentAt);
1:d43b9ce:         }
1:d43b9ce:         DataInputStreamPlus in = new DataInputStreamPlus(new ByteArrayInputStream(baos.toByteArray()));
1:9d9a1a1:         MessageIn.readConstructionTime(InetAddress.getLocalHost(), in);
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     public static class MockBackPressureStrategy implements BackPressureStrategy<MockBackPressureStrategy.MockBackPressureState>
1:d43b9ce:     {
1:d43b9ce:         public static volatile boolean applied = false;
1:d43b9ce: 
1:d43b9ce:         public MockBackPressureStrategy(Map<String, Object> args)
1:d43b9ce:         {
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public void apply(Set<MockBackPressureState> states, long timeout, TimeUnit unit)
1:d43b9ce:         {
1:d43b9ce:             if (!Iterables.isEmpty(states))
1:d43b9ce:                 applied = true;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public MockBackPressureState newState(InetAddress host)
1:d43b9ce:         {
1:d43b9ce:             return new MockBackPressureState(host);
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         public static class MockBackPressureState implements BackPressureState
1:d43b9ce:         {
1:d43b9ce:             private final InetAddress host;
1:d43b9ce:             public volatile boolean onSend = false;
1:d43b9ce:             public volatile boolean onReceive = false;
1:d43b9ce:             public volatile boolean onTimeout = false;
1:d43b9ce: 
1:d43b9ce:             private MockBackPressureState(InetAddress host)
1:d43b9ce:             {
1:d43b9ce:                 this.host = host;
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             @Override
1:d43b9ce:             public void onMessageSent(MessageOut<?> message)
1:d43b9ce:             {
1:d43b9ce:                 onSend = true;
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             @Override
1:d43b9ce:             public void onResponseReceived()
1:d43b9ce:             {
1:d43b9ce:                 onReceive = true;
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             @Override
1:d43b9ce:             public void onResponseTimeout()
1:d43b9ce:             {
1:d43b9ce:                 onTimeout = true;
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             @Override
1:d43b9ce:             public double getBackPressureRateLimit()
1:d43b9ce:             {
1:d43b9ce:                 throw new UnsupportedOperationException("Not supported yet.");
1:d43b9ce:             }
1:d43b9ce: 
1:d43b9ce:             @Override
1:d43b9ce:             public InetAddress getHost()
1:d43b9ce:             {
1:d43b9ce:                 return host;
1:d43b9ce:             }
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     private static class BackPressureCallback implements IAsyncCallback
1:d43b9ce:     {
1:d43b9ce:         @Override
1:d43b9ce:         public boolean supportsBackPressure()
1:d43b9ce:         {
1:d43b9ce:             return true;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public boolean isLatencyForSnitch()
1:d43b9ce:         {
1:d43b9ce:             return false;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public void response(MessageIn msg)
1:d43b9ce:         {
1:d43b9ce:             throw new UnsupportedOperationException("Not supported.");
1:d43b9ce:         }
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     private static class NoBackPressureCallback implements IAsyncCallback
1:d43b9ce:     {
1:d43b9ce:         @Override
1:d43b9ce:         public boolean supportsBackPressure()
1:d43b9ce:         {
1:d43b9ce:             return false;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public boolean isLatencyForSnitch()
1:d43b9ce:         {
1:d43b9ce:             return false;
1:d43b9ce:         }
1:d43b9ce: 
1:d43b9ce:         @Override
1:d43b9ce:         public void response(MessageIn msg)
1:d43b9ce:         {
1:d43b9ce:             throw new UnsupportedOperationException("Not supported.");
1:d43b9ce:         }
1:d43b9ce:     }
1:04afa2b: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9d9a1a1
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("READ messages were dropped in last 5000 ms: 2500 internal and 2500 cross node. Mean internal dropped latency: 2730 ms and Mean cross-node dropped latency: 2731 ms", logs.get(0));
1:         assertEquals(5000, (int) messagingService.getDroppedMessages().get(verb.toString()));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("READ messages were dropped in last 5000 ms: 1250 internal and 1250 cross node. Mean internal dropped latency: 2277 ms and Mean cross-node dropped latency: 2278 ms", logs.get(0));
1:         assertEquals(7500, (int) messagingService.getDroppedMessages().get(verb.toString()));
/////////////////////////////////////////////////////////////////////////
1:         addDCLatency(sentAt);
/////////////////////////////////////////////////////////////////////////
1:         addDCLatency(sentAt);
/////////////////////////////////////////////////////////////////////////
1:     private static void addDCLatency(long sentAt) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         MessageIn.readConstructionTime(InetAddress.getLocalHost(), in);
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: import java.net.UnknownHostException;
1: import java.util.Collections;
1: import java.util.Map;
1: import java.util.Set;
1: import com.google.common.collect.Iterables;
1: 
1: 
1: import org.junit.Before;
1: import static org.junit.Assert.*;
1: 
1:     private final static long ONE_SECOND = TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS);
1:     private final static long[] bucketOffsets = new EstimatedHistogram(160).getBucketOffsets();
1:     private final MessagingService messagingService = MessagingService.test();
1: 
1:     public static void beforeClass() throws UnknownHostException
1:         DatabaseDescriptor.setBackPressureStrategy(new MockBackPressureStrategy(Collections.emptyMap()));
1:         DatabaseDescriptor.setBroadcastAddress(InetAddress.getByName("127.0.0.1"));
1:     @Before
1:     public void before() throws UnknownHostException
1:     {
1:         MockBackPressureStrategy.applied = false;
1:         messagingService.destroyConnectionPool(InetAddress.getByName("127.0.0.2"));
1:         messagingService.destroyConnectionPool(InetAddress.getByName("127.0.0.3"));
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testUpdatesBackPressureOnSendWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:     {
1:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:         IAsyncCallback bpCallback = new BackPressureCallback();
1:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:         MessageOut<?> ignored = null;
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), noCallback, ignored);
1:         assertFalse(backPressureState.onSend);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(false);
1:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), bpCallback, ignored);
1:         assertFalse(backPressureState.onSend);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnSend(InetAddress.getByName("127.0.0.2"), bpCallback, ignored);
1:         assertTrue(backPressureState.onSend);
1:     }
1: 
1:     @Test
1:     public void testUpdatesBackPressureOnReceiveWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:     {
1:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:         IAsyncCallback bpCallback = new BackPressureCallback();
1:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:         boolean timeout = false;
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), noCallback, timeout);
1:         assertFalse(backPressureState.onReceive);
1:         assertFalse(backPressureState.onTimeout);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(false);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:         assertFalse(backPressureState.onReceive);
1:         assertFalse(backPressureState.onTimeout);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:         assertTrue(backPressureState.onReceive);
1:         assertFalse(backPressureState.onTimeout);
1:     }
1: 
1:     @Test
1:     public void testUpdatesBackPressureOnTimeoutWhenEnabledAndWithSupportedCallback() throws UnknownHostException
1:     {
1:         MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getConnectionPool(InetAddress.getByName("127.0.0.2")).getBackPressureState();
1:         IAsyncCallback bpCallback = new BackPressureCallback();
1:         IAsyncCallback noCallback = new NoBackPressureCallback();
1:         boolean timeout = true;
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), noCallback, timeout);
1:         assertFalse(backPressureState.onReceive);
1:         assertFalse(backPressureState.onTimeout);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(false);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:         assertFalse(backPressureState.onReceive);
1:         assertFalse(backPressureState.onTimeout);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.updateBackPressureOnReceive(InetAddress.getByName("127.0.0.2"), bpCallback, timeout);
1:         assertFalse(backPressureState.onReceive);
1:         assertTrue(backPressureState.onTimeout);
1:     }
1: 
1:     @Test
1:     public void testAppliesBackPressureWhenEnabled() throws UnknownHostException
1:     {
1:         DatabaseDescriptor.setBackPressureEnabled(false);
1:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.2")), ONE_SECOND);
1:         assertFalse(MockBackPressureStrategy.applied);
1: 
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.2")), ONE_SECOND);
1:         assertTrue(MockBackPressureStrategy.applied);
1:     }
1: 
1:     @Test
1:     public void testDoesntApplyBackPressureToBroadcastAddress() throws UnknownHostException
1:     {
1:         DatabaseDescriptor.setBackPressureEnabled(true);
1:         messagingService.applyBackPressure(Arrays.asList(InetAddress.getByName("127.0.0.1")), ONE_SECOND);
1:         assertFalse(MockBackPressureStrategy.applied);
1:     }
1: 
0:     private static void addDCLatency(long sentAt, long now) throws IOException
1:     {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         try (DataOutputStreamPlus out = new WrappedDataOutputStreamPlus(baos))
1:         {
1:             out.writeInt((int) sentAt);
1:         }
1:         DataInputStreamPlus in = new DataInputStreamPlus(new ByteArrayInputStream(baos.toByteArray()));
0:         MessageIn.readTimestamp(InetAddress.getLocalHost(), in, now);
1:     }
1: 
1:     public static class MockBackPressureStrategy implements BackPressureStrategy<MockBackPressureStrategy.MockBackPressureState>
1:     {
1:         public static volatile boolean applied = false;
1: 
1:         public MockBackPressureStrategy(Map<String, Object> args)
1:         {
1:         }
1: 
1:         @Override
1:         public void apply(Set<MockBackPressureState> states, long timeout, TimeUnit unit)
1:         {
1:             if (!Iterables.isEmpty(states))
1:                 applied = true;
1:         }
1: 
1:         @Override
1:         public MockBackPressureState newState(InetAddress host)
1:         {
1:             return new MockBackPressureState(host);
1:         }
1: 
1:         public static class MockBackPressureState implements BackPressureState
1:         {
1:             private final InetAddress host;
1:             public volatile boolean onSend = false;
1:             public volatile boolean onReceive = false;
1:             public volatile boolean onTimeout = false;
1: 
1:             private MockBackPressureState(InetAddress host)
1:             {
1:                 this.host = host;
1:             }
1: 
1:             @Override
1:             public void onMessageSent(MessageOut<?> message)
1:             {
1:                 onSend = true;
1:             }
1: 
1:             @Override
1:             public void onResponseReceived()
1:             {
1:                 onReceive = true;
1:             }
1: 
1:             @Override
1:             public void onResponseTimeout()
1:             {
1:                 onTimeout = true;
1:             }
1: 
1:             @Override
1:             public double getBackPressureRateLimit()
1:             {
1:                 throw new UnsupportedOperationException("Not supported yet.");
1:             }
1: 
1:             @Override
1:             public InetAddress getHost()
1:             {
1:                 return host;
1:             }
1:         }
1:     }
1: 
1:     private static class BackPressureCallback implements IAsyncCallback
1:     {
1:         @Override
1:         public boolean supportsBackPressure()
1:         {
1:             return true;
1:         }
1: 
1:         @Override
1:         public boolean isLatencyForSnitch()
1:         {
1:             return false;
1:         }
1: 
1:         @Override
1:         public void response(MessageIn msg)
1:         {
1:             throw new UnsupportedOperationException("Not supported.");
1:         }
1:     }
1: 
1:     private static class NoBackPressureCallback implements IAsyncCallback
1:     {
1:         @Override
1:         public boolean supportsBackPressure()
1:         {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean isLatencyForSnitch()
1:         {
1:             return false;
1:         }
1: 
1:         @Override
1:         public void response(MessageIn msg)
1:         {
1:             throw new UnsupportedOperationException("Not supported.");
1:         }
1:     }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
1:     @BeforeClass
0:     public static void initDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Chris Lohfink
-------------------------------------------------------------------------------
commit:04afa2b
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.Arrays;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.TimeUnit;
1: import com.codahale.metrics.Timer;
1: 
1: import org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus;
1: import org.apache.cassandra.io.util.DataOutputStreamPlus;
1: import org.apache.cassandra.io.util.WrappedDataOutputStreamPlus;
1: import org.caffinitas.ohc.histo.EstimatedHistogram;
0: import static org.junit.Assert.*;
0:     private final static long[] bucketOffsets = new EstimatedHistogram(160).getBucketOffsets();
/////////////////////////////////////////////////////////////////////////
0:     private static void addDCLatency(long sentAt, long now) throws IOException
1:     {
0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:         try (DataOutputStreamPlus out = new WrappedDataOutputStreamPlus(baos))
1:         {
0:             out.writeInt((int) sentAt);
1:         }
0:         DataInputStreamPlus in = new DataInputStreamPlus(new ByteArrayInputStream(baos.toByteArray()));
0:         MessageIn.readTimestamp(InetAddress.getLocalHost(), in, now);
1:     }
1: 
1:     @Test
1:     public void testDCLatency() throws Exception
1:     {
1:         int latency = 100;
1: 
1:         ConcurrentHashMap<String, Timer> dcLatency = MessagingService.instance().metrics.dcLatency;
1:         dcLatency.clear();
1: 
1:         long now = System.currentTimeMillis();
1:         long sentAt = now - latency;
1: 
1:         assertNull(dcLatency.get("datacenter1"));
0:         addDCLatency(sentAt, now);
1:         assertNotNull(dcLatency.get("datacenter1"));
1:         assertEquals(1, dcLatency.get("datacenter1").getCount());
1:         long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, TimeUnit.MILLISECONDS.toNanos(latency))) - 1];
1:         assertEquals(expectedBucket, dcLatency.get("datacenter1").getSnapshot().getMax());
1:     }
1: 
1:     @Test
1:     public void testNegativeDCLatency() throws Exception
1:     {
1:         // if clocks are off should just not track anything
1:         int latency = -100;
1: 
1:         ConcurrentHashMap<String, Timer> dcLatency = MessagingService.instance().metrics.dcLatency;
1:         dcLatency.clear();
1: 
1:         long now = System.currentTimeMillis();
1:         long sentAt = now - latency;
1: 
1:         assertNull(dcLatency.get("datacenter1"));
0:         addDCLatency(sentAt, now);
1:         assertNull(dcLatency.get("datacenter1"));
1:     }
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:693e52d
commit:dbefa85
commit:615bf37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
author:anubhavkale
-------------------------------------------------------------------------------
commit:c9ef25f
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 1; i <= 5000; i++)
1:             messagingService.incrementDroppedMessages(verb, i, i % 2 == 0);
0:         assertEquals("READ messages were dropped in last 5000 ms: 2500 for internal timeout and 2500 for cross node timeout. Mean internal dropped latency: 2730 ms and Mean cross-node dropped latency: 2731 ms", logs.get(0));
1:             messagingService.incrementDroppedMessages(verb, i, i % 2 == 0);
0:         assertEquals("READ messages were dropped in last 5000 ms: 1250 for internal timeout and 1250 for cross node timeout. Mean internal dropped latency: 2277 ms and Mean cross-node dropped latency: 2278 ms", logs.get(0));
author:Brandon Williams
-------------------------------------------------------------------------------
commit:6f0c7d9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.net;
1: 
1: import java.util.List;
1: 
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: public class MessagingServiceTest
0: {
0:     private final MessagingService messagingService = MessagingService.test();
1: 
1:     @Test
1:     public void testDroppedMessages()
0:     {
1:         MessagingService.Verb verb = MessagingService.Verb.READ;
1: 
0:         for (int i = 0; i < 5000; i++)
0:             messagingService.incrementDroppedMessages(verb, i % 2 == 0);
1: 
1:         List<String> logs = messagingService.getDroppedMessagesLogs();
1:         assertEquals(1, logs.size());
0:         assertEquals("READ messages were dropped in last 5000 ms: 2500 for internal timeout and 2500 for cross node timeout", logs.get(0));
0:         assertEquals(5000, (int)messagingService.getDroppedMessages().get(verb.toString()));
1: 
1:         logs = messagingService.getDroppedMessagesLogs();
1:         assertEquals(0, logs.size());
1: 
1:         for (int i = 0; i < 2500; i++)
0:             messagingService.incrementDroppedMessages(verb, i % 2 == 0);
1: 
1:         logs = messagingService.getDroppedMessagesLogs();
0:         assertEquals("READ messages were dropped in last 5000 ms: 1250 for internal timeout and 1250 for cross node timeout", logs.get(0));
0:         assertEquals(7500, (int)messagingService.getDroppedMessages().get(verb.toString()));
0:     }
1: 
0: }
commit:9ed0f30
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.net;
0: 
0: import java.util.List;
0: 
0: import org.junit.Test;
0: 
0: import static org.junit.Assert.assertEquals;
0: 
0: public class MessagingServiceTest
0: {
0:     private final MessagingService messagingService = MessagingService.test();
0: 
0:     @Test
0:     public void testDroppedMessages()
0:     {
0:         MessagingService.Verb verb = MessagingService.Verb.READ;
0: 
0:         for (int i = 0; i < 5000; i++)
0:             messagingService.incrementDroppedMessages(verb, i % 2 == 0);
0: 
0:         List<String> logs = messagingService.getDroppedMessagesLogs();
0:         assertEquals(1, logs.size());
0:         assertEquals("READ messages were dropped in last 5000 ms: 2500 for internal timeout and 2500 for cross node timeout", logs.get(0));
0:         assertEquals(5000, (int)messagingService.getDroppedMessages().get(verb.toString()));
0:         assertEquals(5000, (int) messagingService.getRecentlyDroppedMessages().get(verb.toString()));
0: 
0:         logs = messagingService.getDroppedMessagesLogs();
0:         assertEquals(0, logs.size());
0: 
0:         for (int i = 0; i < 2500; i++)
0:             messagingService.incrementDroppedMessages(verb, i % 2 == 0);
0: 
0:         logs = messagingService.getDroppedMessagesLogs();
0:         assertEquals("READ messages were dropped in last 5000 ms: 1250 for internal timeout and 1250 for cross node timeout", logs.get(0));
0:         assertEquals(7500, (int)messagingService.getDroppedMessages().get(verb.toString()));
0:         assertEquals(2500, (int) messagingService.getRecentlyDroppedMessages().get(verb.toString()));
0:     }
0: 
0: }
============================================================================