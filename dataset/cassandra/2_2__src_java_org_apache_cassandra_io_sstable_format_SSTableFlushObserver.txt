1:f81a91d: /*
1:f81a91d:  * Licensed to the Apache Software Foundation (ASF) under one
1:f81a91d:  * or more contributor license agreements.  See the NOTICE file
1:f81a91d:  * distributed with this work for additional information
1:f81a91d:  * regarding copyright ownership.  The ASF licenses this file
1:f81a91d:  * to you under the Apache License, Version 2.0 (the
1:f81a91d:  * "License"); you may not use this file except in compliance
1:f81a91d:  * with the License.  You may obtain a copy of the License at
1:f81a91d:  *
1:f81a91d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f81a91d:  *
1:f81a91d:  * Unless required by applicable law or agreed to in writing, software
1:f81a91d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f81a91d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f81a91d:  * See the License for the specific language governing permissions and
1:f81a91d:  * limitations under the License.
1:f81a91d:  */
1:f81a91d: package org.apache.cassandra.io.sstable.format;
1:f81a91d: 
1:f81a91d: import org.apache.cassandra.db.DecoratedKey;
1:72790dc: import org.apache.cassandra.db.rows.Unfiltered;
1:f81a91d: 
1:f81a91d: /**
1:f81a91d:  * Observer for events in the lifecycle of writing out an sstable.
1:f81a91d:  */
1:f81a91d: public interface SSTableFlushObserver
1:f81a91d: {
1:f81a91d:     /**
1:f81a91d:      * Called before writing any data to the sstable.
1:f81a91d:      */
1:f81a91d:     void begin();
1:f81a91d: 
1:f81a91d:     /**
1:f81a91d:      * Called when a new partition in being written to the sstable,
1:72790dc:      * but before any cells are processed (see {@link #nextUnfilteredCluster(Unfiltered)}).
1:f81a91d:      *
1:f81a91d:      * @param key The key being appended to SSTable.
1:f81a91d:      * @param indexPosition The position of the key in the SSTable PRIMARY_INDEX file.
1:f81a91d:      */
1:f81a91d:     void startPartition(DecoratedKey key, long indexPosition);
1:f81a91d: 
1:f81a91d:     /**
1:72790dc:      * Called after the unfiltered cluster is written to the sstable.
1:f81a91d:      * Will be preceded by a call to {@code startPartition(DecoratedKey, long)},
1:72790dc:      * and the cluster should be assumed to belong to that partition.
1:f81a91d:      *
1:72790dc:      * @param unfilteredCluster The unfiltered cluster being added to SSTable.
1:f81a91d:      */
1:7d857b4:     default void nextUnfilteredCluster(Unfiltered unfilteredCluster, long position)
1:7d857b4:     {
1:7d857b4:         nextUnfilteredCluster(unfilteredCluster);
1:7d857b4:     }
1:7d857b4: 
1:72790dc:     void nextUnfilteredCluster(Unfiltered unfilteredCluster);
1:f81a91d: 
1:f81a91d:     /**
1:f81a91d:      * Called when all data is written to the file and it's ready to be finished up.
1:f81a91d:      */
1:f81a91d:     void complete();
1:f81a91d: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1:     default void nextUnfilteredCluster(Unfiltered unfilteredCluster, long position)
1:     {
1:         nextUnfilteredCluster(unfilteredCluster);
1:     }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.Unfiltered;
/////////////////////////////////////////////////////////////////////////
1:      * but before any cells are processed (see {@link #nextUnfilteredCluster(Unfiltered)}).
/////////////////////////////////////////////////////////////////////////
1:      * Called after the unfiltered cluster is written to the sstable.
1:      * and the cluster should be assumed to belong to that partition.
1:      * @param unfilteredCluster The unfiltered cluster being added to SSTable.
1:     void nextUnfilteredCluster(Unfiltered unfilteredCluster);
commit:f81a91d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.format;
1: 
1: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.rows.ColumnData;
1: 
1: /**
1:  * Observer for events in the lifecycle of writing out an sstable.
1:  */
1: public interface SSTableFlushObserver
1: {
1:     /**
1:      * Called before writing any data to the sstable.
1:      */
1:     void begin();
1: 
1:     /**
1:      * Called when a new partition in being written to the sstable,
0:      * but before any cells are processed (see {@link #nextCell(ColumnData)}).
1:      *
1:      * @param key The key being appended to SSTable.
1:      * @param indexPosition The position of the key in the SSTable PRIMARY_INDEX file.
1:      */
1:     void startPartition(DecoratedKey key, long indexPosition);
1: 
1:     /**
0:      * Called after the cell is written to the sstable.
1:      * Will be preceded by a call to {@code startPartition(DecoratedKey, long)},
0:      * and the cell should be assumed to belong to that row.
1:      *
0:      * @param cell The cell being added to the row.
1:      */
0:     void nextCell(ColumnData cell);
1: 
1:     /**
1:      * Called when all data is written to the file and it's ready to be finished up.
1:      */
1:     void complete();
1: }
============================================================================