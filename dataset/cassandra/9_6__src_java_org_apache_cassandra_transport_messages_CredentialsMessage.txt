1:6d3a3ee: /*
1:6d3a3ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d3a3ee:  * or more contributor license agreements.  See the NOTICE file
1:6d3a3ee:  * distributed with this work for additional information
1:6d3a3ee:  * regarding copyright ownership.  The ASF licenses this file
1:6d3a3ee:  * to you under the Apache License, Version 2.0 (the
1:6d3a3ee:  * "License"); you may not use this file except in compliance
1:6d3a3ee:  * with the License.  You may obtain a copy of the License at
1:6d3a3ee:  *
1:6d3a3ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6d3a3ee:  *
1:6d3a3ee:  * Unless required by applicable law or agreed to in writing, software
1:6d3a3ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6d3a3ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6d3a3ee:  * See the License for the specific language governing permissions and
1:6d3a3ee:  * limitations under the License.
1:6d3a3ee:  */
1:6d3a3ee: package org.apache.cassandra.transport.messages;
2:6d3a3ee: 
1:6d3a3ee: import java.util.HashMap;
1:6d3a3ee: import java.util.Map;
1:6d3a3ee: 
1:879b694: import io.netty.buffer.ByteBuf;
1:401b46b: import org.apache.cassandra.auth.AuthenticatedUser;
1:401b46b: import org.apache.cassandra.config.DatabaseDescriptor;
1:bddfa9e: import org.apache.cassandra.exceptions.AuthenticationException;
1:f00e7a7: import org.apache.cassandra.metrics.AuthMetrics;
1:45b4fd8: import org.apache.cassandra.service.QueryState;
1:6d3a3ee: import org.apache.cassandra.transport.CBUtil;
1:6d3a3ee: import org.apache.cassandra.transport.Message;
1:879b694: import org.apache.cassandra.transport.ProtocolException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:6d3a3ee: 
1:6d3a3ee: /**
1:6d3a3ee:  * Message to indicate that the server is ready to receive requests.
1:6d3a3ee:  */
1:6d3a3ee: public class CredentialsMessage extends Message.Request
3:6d3a3ee: {
1:6d3a3ee:     public static final Message.Codec<CredentialsMessage> codec = new Message.Codec<CredentialsMessage>()
1:6d3a3ee:     {
1:e0adc16:         public CredentialsMessage decode(ByteBuf body, ProtocolVersion version)
1:6d3a3ee:         {
1:e0adc16:             if (version.isGreaterThan(ProtocolVersion.V1))
1:401b46b:                 throw new ProtocolException("Legacy credentials authentication is not supported in " +
1:401b46b:                         "protocol versions > 1. Please use SASL authentication via a SaslResponse message");
1:401b46b: 
1:f8be23a:             Map<String, String> credentials = CBUtil.readStringMap(body);
1:f8be23a:             return new CredentialsMessage(credentials);
3:6d3a3ee:         }
1:6d3a3ee: 
1:e0adc16:         public void encode(CredentialsMessage msg, ByteBuf dest, ProtocolVersion version)
1:6d3a3ee:         {
1:f8be23a:             CBUtil.writeStringMap(msg.credentials, dest);
1:f8be23a:         }
1:6d3a3ee: 
1:e0adc16:         public int encodedSize(CredentialsMessage msg, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             return CBUtil.sizeOfStringMap(msg.credentials);
1:6d3a3ee:         }
1:6d3a3ee:     };
1:6d3a3ee: 
1:f8be23a:     public final Map<String, String> credentials;
1:6d3a3ee: 
1:6d3a3ee:     public CredentialsMessage()
1:6d3a3ee:     {
1:f8be23a:         this(new HashMap<String, String>());
1:6d3a3ee:     }
1:6d3a3ee: 
1:f8be23a:     private CredentialsMessage(Map<String, String> credentials)
1:6d3a3ee:     {
1:f8be23a:         super(Message.Type.CREDENTIALS);
1:f8be23a:         this.credentials = credentials;
1:6d3a3ee:     }
1:6d3a3ee: 
1:aa83c94:     public Message.Response execute(QueryState state, long queryStartNanoTime)
1:6d3a3ee:     {
1:6d3a3ee:         try
1:6d3a3ee:         {
1:879b694:             AuthenticatedUser user = DatabaseDescriptor.getAuthenticator().legacyAuthenticate(credentials);
1:401b46b:             state.getClientState().login(user);
1:f00e7a7:             AuthMetrics.instance.markSuccess();
1:6d3a3ee:         }
1:6d3a3ee:         catch (AuthenticationException e)
1:6d3a3ee:         {
1:f00e7a7:             AuthMetrics.instance.markFailure();
1:6d3a3ee:             return ErrorMessage.fromException(e);
1:6d3a3ee:         }
1:879b694: 
1:879b694:         return new ReadyMessage();
1:6d3a3ee:     }
1:6d3a3ee: 
1:6d3a3ee:     @Override
1:6d3a3ee:     public String toString()
1:6d3a3ee:     {
1:1d54fc3:         return "CREDENTIALS";
1:6d3a3ee:     }
1:6d3a3ee: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         public CredentialsMessage decode(ByteBuf body, ProtocolVersion version)
1:             if (version.isGreaterThan(ProtocolVersion.V1))
/////////////////////////////////////////////////////////////////////////
1:         public void encode(CredentialsMessage msg, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(CredentialsMessage msg, ProtocolVersion version)
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Message.Response execute(QueryState state, long queryStartNanoTime)
author:Soumava Ghosh
-------------------------------------------------------------------------------
commit:f00e7a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.metrics.AuthMetrics;
/////////////////////////////////////////////////////////////////////////
1:             AuthMetrics.instance.markSuccess();
1:             AuthMetrics.instance.markFailure();
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:82e2004
commit:dc79a86
commit:1d54fc3
/////////////////////////////////////////////////////////////////////////
1:         return "CREDENTIALS";
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
1: import org.apache.cassandra.transport.ProtocolException;
/////////////////////////////////////////////////////////////////////////
1:             AuthenticatedUser user = DatabaseDescriptor.getAuthenticator().legacyAuthenticate(credentials);
1: 
1:         return new ReadyMessage();
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
0: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public CredentialsMessage decode(ByteBuf body, int version)
/////////////////////////////////////////////////////////////////////////
0:         public void encode(CredentialsMessage msg, ByteBuf dest, int version)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:02fb218
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> credentials = CBUtil.readStringMap(body);
1:             return new CredentialsMessage(credentials);
0:         public void encode(CredentialsMessage msg, ChannelBuffer dest, int version)
1:             CBUtil.writeStringMap(msg.credentials, dest);
1:         }
0:         public int encodedSize(CredentialsMessage msg, int version)
1:         {
1:             return CBUtil.sizeOfStringMap(msg.credentials);
1:     public final Map<String, String> credentials;
1:         this(new HashMap<String, String>());
1:     private CredentialsMessage(Map<String, String> credentials)
1:         super(Message.Type.CREDENTIALS);
1:         this.credentials = credentials;
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(CredentialsMessage msg, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:401b46b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.AuthenticatedUser;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.transport.ProtocolException;
/////////////////////////////////////////////////////////////////////////
0:             if (version > 1)
1:                 throw new ProtocolException("Legacy credentials authentication is not supported in " +
1:                         "protocol versions > 1. Please use SASL authentication via a SaslResponse message");
1: 
/////////////////////////////////////////////////////////////////////////
0:             AuthenticatedUser user = DatabaseDescriptor.getAuthenticator().authenticate(credentials);
1:             state.getClientState().login(user);
commit:45b4fd8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.service.QueryState;
/////////////////////////////////////////////////////////////////////////
0:     public Message.Response execute(QueryState state)
0:             state.getClientState().login(credentials);
commit:f199fa3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.transport.ServerConnection;
/////////////////////////////////////////////////////////////////////////
0:             ((ServerConnection)connection).clientState().login(credentials);
commit:6d3a3ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
0: import org.jboss.netty.buffer.ChannelBuffers;
1: 
1: import org.apache.cassandra.transport.CBUtil;
1: import org.apache.cassandra.transport.Message;
0: import org.apache.cassandra.utils.SemanticVersion;
0: import org.apache.cassandra.thrift.AuthenticationException;
1: 
1: /**
1:  * Message to indicate that the server is ready to receive requests.
1:  */
1: public class CredentialsMessage extends Message.Request
1: {
1:     public static final Message.Codec<CredentialsMessage> codec = new Message.Codec<CredentialsMessage>()
1:     {
0:         public CredentialsMessage decode(ChannelBuffer body)
1:         {
0:             CredentialsMessage msg = new CredentialsMessage();
0:             int count = body.readUnsignedShort();
0:             for (int i = 0; i < count; i++)
1:             {
0:                 String key = CBUtil.readString(body);
0:                 String value = CBUtil.readString(body);
0:                 msg.credentials.put(key, value);
1:             }
0:             return msg;
1:         }
1: 
0:         public ChannelBuffer encode(CredentialsMessage msg)
1:         {
0:             ChannelBuffer cb = ChannelBuffers.dynamicBuffer();
1: 
0:             cb.writeShort(msg.credentials.size());
0:             for (Map.Entry<String, String> entry : msg.credentials.entrySet())
1:             {
0:                 cb.writeBytes(CBUtil.stringToCB(entry.getKey()));
0:                 cb.writeBytes(CBUtil.stringToCB(entry.getValue()));
1:             }
0:             return cb;
1:         }
1:     };
1: 
0:     public final Map<String, String> credentials = new HashMap<String, String>();
1: 
1:     public CredentialsMessage()
1:     {
0:         super(Message.Type.CREDENTIALS);
1:     }
1: 
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
0:     public Message.Response execute()
1:     {
1:         try
1:         {
0:             connection.clientState().login(credentials);
0:             return new ReadyMessage();
1:         }
1:         catch (AuthenticationException e)
1:         {
1:             return ErrorMessage.fromException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return "CREDENTIALS " + credentials;
1:     }
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:bf2ee04
/////////////////////////////////////////////////////////////////////////
0:         public CredentialsMessage decode(ChannelBuffer body, int version)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.AuthenticationException;
============================================================================