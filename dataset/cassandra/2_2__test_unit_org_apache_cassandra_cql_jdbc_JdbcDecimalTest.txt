1:3816ab8: /*
1:3816ab8:  * Licensed to the Apache Software Foundation (ASF) under one
1:3816ab8:  * or more contributor license agreements.  See the NOTICE file
1:3816ab8:  * distributed with this work for additional information
1:3816ab8:  * regarding copyright ownership.  The ASF licenses this file
1:3816ab8:  * to you under the Apache License, Version 2.0 (the
1:3816ab8:  * "License"); you may not use this file except in compliance
1:3816ab8:  * with the License.  You may obtain a copy of the License at
1:3816ab8:  *
1:3816ab8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3816ab8:  *
1:3816ab8:  * Unless required by applicable law or agreed to in writing,
1:3816ab8:  * software distributed under the License is distributed on an
1:3816ab8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3816ab8:  * KIND, either express or implied.  See the License for the
1:3816ab8:  * specific language governing permissions and limitations
1:3816ab8:  * under the License.
1:3816ab8:  */
1:808d7c9: package org.apache.cassandra.cql.jdbc;
1:808d7c9: 
1:808d7c9: import java.math.BigDecimal;
1:808d7c9: import java.nio.ByteBuffer;
1:808d7c9: 
1:fc8b76f: import org.apache.cassandra.serializers.DecimalSerializer;
1:808d7c9: import org.junit.Assert;
1:808d7c9: import org.junit.Test;
1:808d7c9: 
1:808d7c9: public class JdbcDecimalTest
1:808d7c9: {
1:808d7c9:     @Test
1:808d7c9:     public void testComposeDecompose()
1:808d7c9:     {
1:808d7c9:         BigDecimal expected = new BigDecimal("123456789123456789.987654321");
1:e9c6742:         DecimalSerializer decimal = new DecimalSerializer();
1:808d7c9:         
1:daff1fc:         ByteBuffer buffer = decimal.serialize(expected);
1:daff1fc:         BigDecimal actual = decimal.deserialize(buffer);
1:808d7c9:         Assert.assertEquals(expected, actual);
1:808d7c9:     }
1:808d7c9: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer buffer = decimal.serialize(expected);
1:         BigDecimal actual = decimal.deserialize(buffer);
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.serializers.DecimalSerializer;
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.DecimalSerializer;
/////////////////////////////////////////////////////////////////////////
1:         DecimalSerializer decimal = new DecimalSerializer();
0:         ByteBuffer buffer = decimal.deserialize(expected);
0:         BigDecimal actual = decimal.serialize(buffer);
commit:3816ab8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:808d7c9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql.jdbc;
1: 
1: import java.math.BigDecimal;
1: import java.nio.ByteBuffer;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class JdbcDecimalTest
1: {
1:     @Test
1:     public void testComposeDecompose()
1:     {
1:         BigDecimal expected = new BigDecimal("123456789123456789.987654321");
0:         JdbcDecimal decimal = new JdbcDecimal();
1:         
0:         ByteBuffer buffer = decimal.decompose(expected);     
0:         BigDecimal actual = decimal.compose(buffer);
1:         Assert.assertEquals(expected, actual);
1:     }
1: }
============================================================================