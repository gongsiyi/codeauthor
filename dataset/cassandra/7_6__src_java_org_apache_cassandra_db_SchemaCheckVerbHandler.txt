1:07cf56f: /*
1:07cf56f:  * Licensed to the Apache Software Foundation (ASF) under one
1:07cf56f:  * or more contributor license agreements.  See the NOTICE file
1:07cf56f:  * distributed with this work for additional information
1:07cf56f:  * regarding copyright ownership.  The ASF licenses this file
1:07cf56f:  * to you under the Apache License, Version 2.0 (the
1:07cf56f:  * "License"); you may not use this file except in compliance
1:07cf56f:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:07cf56f:  */
1:ea9dbc8: package org.apache.cassandra.db;
1:2fd3268: 
1:f81cc74: import java.util.UUID;
1:f81cc74: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:978d7bb: import org.apache.cassandra.config.Schema;
1:ea9dbc8: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessageOut;
1:ea9dbc8: import org.apache.cassandra.net.MessagingService;
1:978d7bb: import org.apache.cassandra.utils.UUIDSerializer;
5:ea9dbc8: 
1:ea9dbc8: public class SchemaCheckVerbHandler implements IVerbHandler
1:ea9dbc8: {
1:ea9dbc8:     private final Logger logger = LoggerFactory.getLogger(SchemaCheckVerbHandler.class);
1:07cdfd0: 
1:1936648:     public void doVerb(MessageIn message, int id)
1:ea9dbc8:     {
1:4a849ef:         logger.trace("Received schema check request.");
1:978d7bb:         MessageOut<UUID> response = new MessageOut<UUID>(MessagingService.Verb.INTERNAL_RESPONSE, Schema.instance.getVersion(), UUIDSerializer.serializer);
1:a06be23:         MessagingService.instance().sendReply(response, id, message.from);
1:ea9dbc8:     }
1:ea9dbc8: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Received schema check request.");
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(MessageIn message, int id)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1:         MessagingService.instance().sendReply(response, id, message.from);
commit:021ec71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         MessageOut response = new MessageOut(MessagingService.Verb.INTERNAL_RESPONSE);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageOut;
0: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
0:         MessageOut response = new MessageOut(StorageService.Verb.INTERNAL_RESPONSE);
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
0:         MessagingService.instance().sendReply(response, id, message.getFrom());
commit:37ec7d3
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().sendOneWay(response, message.getFrom());
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
commit:365f20b
/////////////////////////////////////////////////////////////////////////
0:         Message response = message.getInternalReply(DatabaseDescriptor.getDefsVersion().toString().getBytes());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:978d7bb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.utils.UUIDSerializer;
/////////////////////////////////////////////////////////////////////////
1:         MessageOut<UUID> response = new MessageOut<UUID>(MessagingService.Verb.INTERNAL_RESPONSE, Schema.instance.getVersion(), UUIDSerializer.serializer);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:f81cc74
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: 
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         MessageOut<UUID> response = new MessageOut<UUID>(MessagingService.Verb.INTERNAL_RESPONSE, Schema.instance.getVersion(), UUIDGen.serializer);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
1: 
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:7b532bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
0:         Message response = message.getInternalReply(Schema.instance.getVersion().toString().getBytes(), message.getVersion());
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:6ab2b23
/////////////////////////////////////////////////////////////////////////
0:         Message response = message.getInternalReply(DatabaseDescriptor.getDefsVersion().toString().getBytes(), message.getVersion());
commit:ea9dbc8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * <p/>
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p/>
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
1: 
1: 
1: public class SchemaCheckVerbHandler implements IVerbHandler
1: {
1:     private final Logger logger = LoggerFactory.getLogger(SchemaCheckVerbHandler.class);
1:     
0:     @Override
0:     public void doVerb(Message message)
1:     {
0:         logger.debug("Received schema check request.");
0:         Message response = message.getReply(FBUtilities.getLocalAddress(), DatabaseDescriptor.getDefsVersion().toString().getBytes());
0:         MessagingService.instance.sendOneWay(response, message.getFrom());
1:     }
1: }
============================================================================