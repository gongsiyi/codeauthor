1:b263af9: /*
1:b263af9:  * Licensed to the Apache Software Foundation (ASF) under one
1:b263af9:  * or more contributor license agreements.  See the NOTICE file
1:b263af9:  * distributed with this work for additional information
1:b263af9:  * regarding copyright ownership.  The ASF licenses this file
1:b263af9:  * to you under the Apache License, Version 2.0 (the
1:b263af9:  * "License"); you may not use this file except in compliance
1:b263af9:  * with the License.  You may obtain a copy of the License at
1:b263af9:  *
1:b263af9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b263af9:  *
1:b263af9:  * Unless required by applicable law or agreed to in writing, software
1:b263af9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b263af9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b263af9:  * See the License for the specific language governing permissions and
1:b263af9:  * limitations under the License.
1:b263af9:  */
2:b263af9: 
1:b263af9: package org.apache.cassandra.db.rows;
1:b263af9: 
1:b263af9: import java.util.LinkedList;
1:b263af9: import java.util.List;
1:b263af9: 
1:b263af9: import org.apache.cassandra.config.ColumnDefinition;
1:b263af9: import org.apache.cassandra.db.Clustering;
1:b263af9: import org.apache.cassandra.db.DeletionTime;
1:b263af9: import org.apache.cassandra.db.LivenessInfo;
1:b263af9: import org.apache.cassandra.utils.Pair;
1:b263af9: 
1:b263af9: /**
1:b263af9:  * Instrumented Builder implementation for testing the
1:b263af9:  * behavior of Cells and Rows static methods
1:b263af9:  */
1:b263af9: public class RowBuilder implements Row.Builder
1:b263af9: {
1:b263af9:     public List<Cell> cells = new LinkedList<>();
1:b263af9:     public Clustering clustering = null;
1:b263af9:     public LivenessInfo livenessInfo = null;
1:0633637:     public Row.Deletion deletionTime = null;
1:b263af9:     public List<Pair<ColumnDefinition, DeletionTime>> complexDeletions = new LinkedList<>();
1:b263af9: 
1:b263af9:     public void addCell(Cell cell)
1:b263af9:     {
1:b263af9:         cells.add(cell);
1:b263af9:     }
1:b263af9: 
1:b263af9:     public boolean isSorted()
1:b263af9:     {
1:b263af9:         throw new UnsupportedOperationException();
1:b263af9:     }
1:b263af9: 
1:b263af9:     public void newRow(Clustering clustering)
1:b263af9:     {
1:b263af9:         assert this.clustering == null;
1:b263af9:         this.clustering = clustering;
1:b263af9:     }
1:b263af9: 
1:b263af9:     public Clustering clustering()
1:b263af9:     {
1:b263af9:         return clustering;
1:b263af9:     }
1:b263af9: 
1:b263af9:     public void addPrimaryKeyLivenessInfo(LivenessInfo info)
1:b263af9:     {
1:b263af9:         assert livenessInfo == null;
1:b263af9:         livenessInfo = info;
1:b263af9:     }
1:b263af9: 
1:0633637:     public void addRowDeletion(Row.Deletion deletion)
1:b263af9:     {
1:b263af9:         assert deletionTime == null;
1:b263af9:         deletionTime = deletion;
1:b263af9:     }
1:b263af9: 
1:b263af9:     public void addComplexDeletion(ColumnDefinition column, DeletionTime complexDeletion)
1:b263af9:     {
1:b263af9:         complexDeletions.add(Pair.create(column, complexDeletion));
1:b263af9:     }
1:b263af9: 
1:b263af9:     public Row build()
1:b263af9:     {
1:b263af9:         throw new UnsupportedOperationException();
1:b263af9:     }
1:b263af9: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0633637
/////////////////////////////////////////////////////////////////////////
1:     public Row.Deletion deletionTime = null;
/////////////////////////////////////////////////////////////////////////
1:     public void addRowDeletion(Row.Deletion deletion)
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:b263af9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.rows;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.Clustering;
1: import org.apache.cassandra.db.DeletionTime;
1: import org.apache.cassandra.db.LivenessInfo;
1: import org.apache.cassandra.utils.Pair;
1: 
1: /**
1:  * Instrumented Builder implementation for testing the
1:  * behavior of Cells and Rows static methods
1:  */
1: public class RowBuilder implements Row.Builder
1: {
1:     public List<Cell> cells = new LinkedList<>();
1:     public Clustering clustering = null;
1:     public LivenessInfo livenessInfo = null;
0:     public DeletionTime deletionTime = null;
1:     public List<Pair<ColumnDefinition, DeletionTime>> complexDeletions = new LinkedList<>();
1: 
1:     public void addCell(Cell cell)
1:     {
1:         cells.add(cell);
1:     }
1: 
1:     public boolean isSorted()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public void newRow(Clustering clustering)
1:     {
1:         assert this.clustering == null;
1:         this.clustering = clustering;
1:     }
1: 
1:     public Clustering clustering()
1:     {
1:         return clustering;
1:     }
1: 
1:     public void addPrimaryKeyLivenessInfo(LivenessInfo info)
1:     {
1:         assert livenessInfo == null;
1:         livenessInfo = info;
1:     }
1: 
0:     public void addRowDeletion(DeletionTime deletion)
1:     {
1:         assert deletionTime == null;
1:         deletionTime = deletion;
1:     }
1: 
1: 
1:     public void addComplexDeletion(ColumnDefinition column, DeletionTime complexDeletion)
1:     {
1:         complexDeletions.add(Pair.create(column, complexDeletion));
1:     }
1: 
1:     public Row build()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: }
============================================================================