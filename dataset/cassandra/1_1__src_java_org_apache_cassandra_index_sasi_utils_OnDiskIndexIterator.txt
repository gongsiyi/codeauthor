1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.utils;
1:72790dc: 
1:72790dc: import java.io.IOException;
1:72790dc: import java.util.Iterator;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndex.DataTerm;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public class OnDiskIndexIterator extends RangeIterator<DataTerm, CombinedTerm>
1:72790dc: {
1:72790dc:     private final AbstractType<?> comparator;
1:72790dc:     private final Iterator<DataTerm> terms;
1:72790dc: 
1:72790dc:     public OnDiskIndexIterator(OnDiskIndex index)
1:72790dc:     {
1:72790dc:         super(index.min(), index.max(), Long.MAX_VALUE);
1:72790dc: 
1:72790dc:         this.comparator = index.getComparator();
1:72790dc:         this.terms = index.iterator();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static RangeIterator<DataTerm, CombinedTerm> union(OnDiskIndex... union)
1:72790dc:     {
1:72790dc:         RangeUnionIterator.Builder<DataTerm, CombinedTerm> builder = RangeUnionIterator.builder();
1:72790dc:         for (OnDiskIndex e : union)
1:72790dc:         {
1:72790dc:             if (e != null)
1:72790dc:                 builder.add(new OnDiskIndexIterator(e));
1:72790dc:         }
1:72790dc: 
1:72790dc:         return builder.build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected CombinedTerm computeNext()
1:72790dc:     {
1:72790dc:         return terms.hasNext() ? new CombinedTerm(comparator, terms.next()) : endOfData();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected void performSkipTo(DataTerm nextToken)
1:72790dc:     {
1:72790dc:         throw new UnsupportedOperationException();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void close() throws IOException
1:72790dc:     {}
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.utils;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndex.DataTerm;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public class OnDiskIndexIterator extends RangeIterator<DataTerm, CombinedTerm>
1: {
1:     private final AbstractType<?> comparator;
1:     private final Iterator<DataTerm> terms;
1: 
1:     public OnDiskIndexIterator(OnDiskIndex index)
1:     {
1:         super(index.min(), index.max(), Long.MAX_VALUE);
1: 
1:         this.comparator = index.getComparator();
1:         this.terms = index.iterator();
1:     }
1: 
1:     public static RangeIterator<DataTerm, CombinedTerm> union(OnDiskIndex... union)
1:     {
1:         RangeUnionIterator.Builder<DataTerm, CombinedTerm> builder = RangeUnionIterator.builder();
1:         for (OnDiskIndex e : union)
1:         {
1:             if (e != null)
1:                 builder.add(new OnDiskIndexIterator(e));
1:         }
1: 
1:         return builder.build();
1:     }
1: 
1:     protected CombinedTerm computeNext()
1:     {
1:         return terms.hasNext() ? new CombinedTerm(comparator, terms.next()) : endOfData();
1:     }
1: 
1:     protected void performSkipTo(DataTerm nextToken)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public void close() throws IOException
1:     {}
1: }
============================================================================