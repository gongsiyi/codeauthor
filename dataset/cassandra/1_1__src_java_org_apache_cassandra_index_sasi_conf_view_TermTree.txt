1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf.view;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.Set;
1:72790dc: 
1:72790dc: import org.apache.cassandra.index.sasi.SSTableIndex;
1:72790dc: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: 
1:72790dc: public interface TermTree
1:72790dc: {
1:72790dc:     Set<SSTableIndex> search(Expression e);
1:72790dc: 
1:72790dc:     int intervalCount();
1:72790dc: 
1:72790dc:     abstract class Builder
1:72790dc:     {
1:72790dc:         protected final OnDiskIndexBuilder.Mode mode;
1:72790dc:         protected final AbstractType<?> comparator;
1:72790dc:         protected ByteBuffer min, max;
1:72790dc: 
1:72790dc:         protected Builder(OnDiskIndexBuilder.Mode mode, AbstractType<?> comparator)
1:72790dc:         {
1:72790dc:             this.mode = mode;
1:72790dc:             this.comparator = comparator;
1:72790dc:         }
1:72790dc: 
1:72790dc:         public final void add(SSTableIndex index)
1:72790dc:         {
1:72790dc:             addIndex(index);
1:72790dc: 
1:72790dc:             min = min == null || comparator.compare(min, index.minTerm()) > 0 ? index.minTerm() : min;
1:72790dc:             max = max == null || comparator.compare(max, index.maxTerm()) < 0 ? index.maxTerm() : max;
1:72790dc:         }
1:72790dc: 
1:72790dc:         protected abstract void addIndex(SSTableIndex index);
1:72790dc: 
1:72790dc:         public abstract TermTree build();
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf.view;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Set;
1: 
1: import org.apache.cassandra.index.sasi.SSTableIndex;
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
1: public interface TermTree
1: {
1:     Set<SSTableIndex> search(Expression e);
1: 
1:     int intervalCount();
1: 
1:     abstract class Builder
1:     {
1:         protected final OnDiskIndexBuilder.Mode mode;
1:         protected final AbstractType<?> comparator;
1:         protected ByteBuffer min, max;
1: 
1:         protected Builder(OnDiskIndexBuilder.Mode mode, AbstractType<?> comparator)
1:         {
1:             this.mode = mode;
1:             this.comparator = comparator;
1:         }
1: 
1:         public final void add(SSTableIndex index)
1:         {
1:             addIndex(index);
1: 
1:             min = min == null || comparator.compare(min, index.minTerm()) > 0 ? index.minTerm() : min;
1:             max = max == null || comparator.compare(max, index.maxTerm()) < 0 ? index.maxTerm() : max;
1:         }
1: 
1:         protected abstract void addIndex(SSTableIndex index);
1: 
1:         public abstract TermTree build();
1:     }
1: }
============================================================================