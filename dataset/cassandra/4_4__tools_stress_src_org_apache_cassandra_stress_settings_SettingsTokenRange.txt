1:f27ab29: /*
1:f27ab29:  * Licensed to the Apache Software Foundation (ASF) under one
1:f27ab29:  * or more contributor license agreements.  See the NOTICE file
1:f27ab29:  * distributed with this work for additional information
1:f27ab29:  * regarding copyright ownership.  The ASF licenses this file
1:f27ab29:  * to you under the Apache License, Version 2.0 (the
1:f27ab29:  * "License"); you may not use this file except in compliance
1:f27ab29:  * with the License.  You may obtain a copy of the License at
1:f27ab29:  *
1:f27ab29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f27ab29:  *
1:f27ab29:  * Unless required by applicable law or agreed to in writing, software
1:f27ab29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f27ab29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f27ab29:  * See the License for the specific language governing permissions and
1:f27ab29:  * limitations under the License.
1:f27ab29:  */
1:f27ab29: 
1:f27ab29: package org.apache.cassandra.stress.settings;
1:f27ab29: 
1:03a3f95: import java.io.Serializable;
1:f27ab29: import java.util.List;
1:f27ab29: import java.util.Map;
1:f27ab29: 
1:f27ab29: import com.google.common.collect.ImmutableList;
1:f27ab29: import com.google.common.primitives.Ints;
1:938faa2: 
1:f42e235: import org.apache.cassandra.stress.util.ResultLogger;
1:f27ab29: 
1:03a3f95: public class SettingsTokenRange implements Serializable
1:f27ab29: {
1:f27ab29:     public final boolean wrap;
1:f27ab29:     public final int splitFactor;
1:938faa2:     private final TokenRangeOptions options;
1:f27ab29: 
1:03a3f95:     private SettingsTokenRange(TokenRangeOptions options)
1:f27ab29:     {
1:938faa2:         this.options = options;
1:f27ab29:         this.wrap = options.wrap.setByUser();
1:f27ab29:         this.splitFactor = Ints.checkedCast(OptionDistribution.parseLong(options.splitFactor.value()));
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     private static final class TokenRangeOptions extends GroupedOptions
1:f27ab29:     {
1:f27ab29:         final OptionSimple wrap = new OptionSimple("wrap", "", null, "Re-use token ranges in order to terminate stress iterations", false);
1:f27ab29:         final OptionSimple splitFactor = new OptionSimple("split-factor=", "[0-9]+[bmk]?", "1", "Split every token range by this factor", false);
1:f27ab29: 
1:f27ab29: 
1:f27ab29:         @Override
1:f27ab29:         public List<? extends Option> options()
1:f27ab29:         {
1:f27ab29:             return ImmutableList.<Option>builder().add(wrap, splitFactor).build();
1:f27ab29:         }
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public static SettingsTokenRange get(Map<String, String[]> clArgs)
1:f27ab29:     {
1:f27ab29:         String[] params = clArgs.remove("-tokenrange");
1:f27ab29:         if (params == null)
1:f27ab29:         {
1:f27ab29:             return new SettingsTokenRange(new TokenRangeOptions());
1:f27ab29:         }
1:f27ab29:         TokenRangeOptions options = GroupedOptions.select(params, new TokenRangeOptions());
1:f27ab29:         if (options == null)
1:f27ab29:         {
1:f27ab29:             printHelp();
1:f27ab29:             System.out.println("Invalid -tokenrange options provided, see output for valid options");
1:f27ab29:             System.exit(1);
1:f27ab29:         }
1:f27ab29:         return new SettingsTokenRange(options);
1:f27ab29:     }
1:f27ab29: 
1:f42e235:     public void printSettings(ResultLogger out)
1:938faa2:     {
1:938faa2:         out.printf("  Wrap: %b%n", wrap);
1:938faa2:         out.printf("  Split Factor: %d%n", splitFactor);
1:938faa2:     }
1:938faa2: 
1:f27ab29:     public static void printHelp()
1:f27ab29:     {
1:f27ab29:         GroupedOptions.printOptions(System.out, "-tokenrange", new TokenRangeOptions());
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public static Runnable helpPrinter()
1:f27ab29:     {
1:f27ab29:         return SettingsTokenRange::printHelp;
1:f27ab29:     }
1:f27ab29: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.util.ResultLogger;
/////////////////////////////////////////////////////////////////////////
1:     public void printSettings(ResultLogger out)
author:Chris Batey
-------------------------------------------------------------------------------
commit:03a3f95
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1: public class SettingsTokenRange implements Serializable
1:     private SettingsTokenRange(TokenRangeOptions options)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
1:     private final TokenRangeOptions options;
1:         this.options = options;
/////////////////////////////////////////////////////////////////////////
0:     public void printSettings(MultiPrintStream out)
1:     {
1:         out.printf("  Wrap: %b%n", wrap);
1:         out.printf("  Split Factor: %d%n", splitFactor);
1:     }
1: 
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.List;
1: import java.util.Map;
1: 
1: import com.google.common.collect.ImmutableList;
1: import com.google.common.primitives.Ints;
1: 
0: public class SettingsTokenRange
1: {
1:     public final boolean wrap;
1:     public final int splitFactor;
1: 
0:     public SettingsTokenRange(TokenRangeOptions options)
1:     {
1:         this.wrap = options.wrap.setByUser();
1:         this.splitFactor = Ints.checkedCast(OptionDistribution.parseLong(options.splitFactor.value()));
1:     }
1: 
1:     private static final class TokenRangeOptions extends GroupedOptions
1:     {
1:         final OptionSimple wrap = new OptionSimple("wrap", "", null, "Re-use token ranges in order to terminate stress iterations", false);
1:         final OptionSimple splitFactor = new OptionSimple("split-factor=", "[0-9]+[bmk]?", "1", "Split every token range by this factor", false);
1: 
1: 
1:         @Override
1:         public List<? extends Option> options()
1:         {
1:             return ImmutableList.<Option>builder().add(wrap, splitFactor).build();
1:         }
1:     }
1: 
1:     public static SettingsTokenRange get(Map<String, String[]> clArgs)
1:     {
1:         String[] params = clArgs.remove("-tokenrange");
1:         if (params == null)
1:         {
1:             return new SettingsTokenRange(new TokenRangeOptions());
1:         }
1:         TokenRangeOptions options = GroupedOptions.select(params, new TokenRangeOptions());
1:         if (options == null)
1:         {
1:             printHelp();
1:             System.out.println("Invalid -tokenrange options provided, see output for valid options");
1:             System.exit(1);
1:         }
1:         return new SettingsTokenRange(options);
1:     }
1: 
1:     public static void printHelp()
1:     {
1:         GroupedOptions.printOptions(System.out, "-tokenrange", new TokenRangeOptions());
1:     }
1: 
1:     public static Runnable helpPrinter()
1:     {
1:         return SettingsTokenRange::printHelp;
1:     }
1: }
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.stress.settings;
0: 
0: import java.util.List;
0: import java.util.Map;
0: 
0: import com.google.common.collect.ImmutableList;
0: import com.google.common.primitives.Ints;
0: 
0: public class SettingsTokenRange
0: {
0:     public final boolean wrap;
0:     public final int splitFactor;
0: 
0:     public SettingsTokenRange(TokenRangeOptions options)
0:     {
0:         this.wrap = options.wrap.setByUser();
0:         this.splitFactor = Ints.checkedCast(OptionDistribution.parseLong(options.splitFactor.value()));
0:     }
0: 
0:     private static final class TokenRangeOptions extends GroupedOptions
0:     {
0:         final OptionSimple wrap = new OptionSimple("wrap", "", null, "Re-use token ranges in order to terminate stress iterations", false);
0:         final OptionSimple splitFactor = new OptionSimple("split-factor=", "[0-9]+[bmk]?", "1", "Split every token range by this factor", false);
0: 
0: 
0:         @Override
0:         public List<? extends Option> options()
0:         {
0:             return ImmutableList.<Option>builder().add(wrap, splitFactor).build();
0:         }
0:     }
0: 
0:     public static SettingsTokenRange get(Map<String, String[]> clArgs)
0:     {
0:         String[] params = clArgs.remove("-tokenrange");
0:         if (params == null)
0:         {
0:             return new SettingsTokenRange(new TokenRangeOptions());
0:         }
0:         TokenRangeOptions options = GroupedOptions.select(params, new TokenRangeOptions());
0:         if (options == null)
0:         {
0:             printHelp();
0:             System.out.println("Invalid -tokenrange options provided, see output for valid options");
0:             System.exit(1);
0:         }
0:         return new SettingsTokenRange(options);
0:     }
0: 
0:     public static void printHelp()
0:     {
0:         GroupedOptions.printOptions(System.out, "-tokenrange", new TokenRangeOptions());
0:     }
0: 
0:     public static Runnable helpPrinter()
0:     {
0:         return SettingsTokenRange::printHelp;
0:     }
0: }
============================================================================