1:a991b64: /*
1:a991b64: * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64: * or more contributor license agreements.  See the NOTICE file
1:a991b64: * distributed with this work for additional information
1:a991b64: * regarding copyright ownership.  The ASF licenses this file
1:a991b64: * to you under the Apache License, Version 2.0 (the
1:a991b64: * "License"); you may not use this file except in compliance
1:a991b64: * with the License.  You may obtain a copy of the License at
1:a991b64: *
1:a991b64: *    http://www.apache.org/licenses/LICENSE-2.0
1:a991b64: *
1:a991b64: * Unless required by applicable law or agreed to in writing,
1:a991b64: * software distributed under the License is distributed on an
1:a991b64: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a991b64: * KIND, either express or implied.  See the License for the
1:a991b64: * specific language governing permissions and limitations
1:a991b64: * under the License.
1:a991b64: */
1:a991b64: package org.apache.cassandra.db;
2:a991b64: 
1:a991b64: import java.io.IOException;
1:a991b64: import java.security.MessageDigest;
1:a991b64: import java.security.NoSuchAlgorithmException;
1:a991b64: import java.util.Arrays;
1:a991b64: 
1:a991b64: import org.junit.BeforeClass;
1:a991b64: import org.junit.Test;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:c055ab9: import org.apache.cassandra.db.rows.EncodingStats;
1:a991b64: import org.apache.cassandra.db.rows.UnfilteredRowIterators;
1:a991b64: import org.apache.cassandra.db.marshal.AsciiType;
1:a991b64: import org.apache.cassandra.db.marshal.BytesType;
1:a991b64: import org.apache.cassandra.db.partitions.*;
1:c4c9eae: import org.apache.cassandra.io.util.DataInputBuffer;
1:a991b64: import org.apache.cassandra.io.util.DataOutputBuffer;
1:a991b64: import org.apache.cassandra.net.MessagingService;
1:a991b64: import org.apache.cassandra.exceptions.ConfigurationException;
1:a991b64: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.Util;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:a991b64: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
1:a991b64: import static junit.framework.Assert.assertTrue;
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.assertFalse;
1:a991b64: 
1:a991b64: public class PartitionTest
1:a991b64: {
1:a991b64:     private static final String KEYSPACE1 = "Keyspace1";
1:a991b64:     private static final String CF_STANDARD1 = "Standard1";
1:a991b64:     private static final String CF_TENCOL = "TenColumns";
1:a991b64:     private static final String CF_COUNTER1 = "Counter1";
1:a991b64: 
1:a991b64:     @BeforeClass
1:a991b64:     public static void defineSchema() throws ConfigurationException
1:a991b64:     {
1:a991b64:         SchemaLoader.prepareServer();
1:a991b64:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:a991b64:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1),
1:a991b64:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_TENCOL, 10, AsciiType.instance),
1:a991b64:                                     SchemaLoader.denseCFMD(KEYSPACE1, CF_COUNTER1, BytesType.instance));
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testSingleColumn() throws IOException
1:a991b64:     {
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
1:a991b64:         PartitionUpdate update = new RowUpdateBuilder(cfs.metadata, 5, "key1")
1:a991b64:                                  .clustering("c")
1:a991b64:                                  .add("val", "val1")
1:a991b64:                                  .buildUpdate();
1:a991b64: 
1:e51f83b:         CachedBTreePartition partition = CachedBTreePartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
1:a991b64: 
1:a991b64:         DataOutputBuffer bufOut = new DataOutputBuffer();
1:a991b64:         CachedPartition.cacheSerializer.serialize(partition, bufOut);
1:a991b64: 
1:c4c9eae:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new DataInputBuffer(bufOut.getData()));
1:a991b64: 
1:a991b64:         assert deserialized != null;
1:a991b64:         assert deserialized.metadata().cfName.equals(CF_STANDARD1);
1:a991b64:         assert deserialized.partitionKey().equals(partition.partitionKey());
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testManyColumns() throws IOException
1:a991b64:     {
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
1:a991b64:         RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1")
1:a991b64:                                    .clustering("c")
1:a991b64:                                    .add("val", "val1");
1:a991b64: 
2:a991b64:         for (int i = 0; i < 10; i++)
2:a991b64:             builder.add("val" + i, "val" + i);
1:a991b64: 
1:a991b64:         PartitionUpdate update = builder.buildUpdate();
1:a991b64: 
1:e51f83b:         CachedBTreePartition partition = CachedBTreePartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
1:a991b64: 
1:a991b64:         DataOutputBuffer bufOut = new DataOutputBuffer();
1:a991b64:         CachedPartition.cacheSerializer.serialize(partition, bufOut);
1:a991b64: 
1:c4c9eae:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new DataInputBuffer(bufOut.getData()));
1:a991b64: 
1:0d74c3e:         assertEquals(partition.columns().regulars.size(), deserialized.columns().regulars.size());
1:a991b64:         assertTrue(deserialized.columns().regulars.getSimple(1).equals(partition.columns().regulars.getSimple(1)));
1:a991b64:         assertTrue(deserialized.columns().regulars.getSimple(5).equals(partition.columns().regulars.getSimple(5)));
1:a991b64: 
1:a991b64:         ColumnDefinition cDef = cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes("val8"));
1:a991b64:         assertTrue(partition.lastRow().getCell(cDef).value().equals(deserialized.lastRow().getCell(cDef).value()));
1:a991b64:         assert deserialized.partitionKey().equals(partition.partitionKey());
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testDigest() throws NoSuchAlgorithmException
1:a991b64:     {
1:782a1c3:         testDigest(MessagingService.current_version);
1:782a1c3:     }
1:782a1c3: 
1:782a1c3:     @Test
1:782a1c3:     public void testLegacyDigest() throws NoSuchAlgorithmException
1:782a1c3:     {
1:782a1c3:         testDigest(MessagingService.VERSION_22);
1:782a1c3:     }
1:782a1c3: 
1:782a1c3:     public void testDigest(int version) throws NoSuchAlgorithmException
1:782a1c3:     {
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
1:a991b64: 
1:782a1c3:         try
1:782a1c3:         {
1:782a1c3:             RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1").clustering("c").add("val", "val1");
1:782a1c3:             for (int i = 0; i < 10; i++)
1:782a1c3:                 builder.add("val" + i, "val" + i);
1:782a1c3:             builder.build().applyUnsafe();
1:a991b64: 
1:782a1c3:             new RowUpdateBuilder(cfs.metadata, 5, "key2").clustering("c").add("val", "val2").build().applyUnsafe();
1:a991b64: 
1:3e37b4a:             ReadCommand cmd1 = Util.cmd(cfs, "key1").build();
1:3e37b4a:             ReadCommand cmd2 = Util.cmd(cfs, "key2").build();
1:3e37b4a:             ImmutableBTreePartition p1 = Util.getOnlyPartitionUnfiltered(cmd1);
1:3e37b4a:             ImmutableBTreePartition p2 = Util.getOnlyPartitionUnfiltered(cmd2);
1:a991b64: 
1:782a1c3:             MessageDigest digest1 = MessageDigest.getInstance("MD5");
1:782a1c3:             MessageDigest digest2 = MessageDigest.getInstance("MD5");
1:3e37b4a:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:3e37b4a:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
1:782a1c3:             assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1:a991b64: 
1:782a1c3:             p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:782a1c3:             p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:782a1c3:             digest1 = MessageDigest.getInstance("MD5");
1:782a1c3:             digest2 = MessageDigest.getInstance("MD5");
1:3e37b4a:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:3e37b4a:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
1:782a1c3:             assertTrue(Arrays.equals(digest1.digest(), digest2.digest()));
1:782a1c3: 
1:782a1c3:             p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:782a1c3:             RowUpdateBuilder.deleteRow(cfs.metadata, 6, "key2", "c").applyUnsafe();
1:782a1c3:             p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:782a1c3:             digest1 = MessageDigest.getInstance("MD5");
1:782a1c3:             digest2 = MessageDigest.getInstance("MD5");
1:3e37b4a:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:3e37b4a:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
1:782a1c3:             assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1:782a1c3:         }
1:782a1c3:         finally
1:782a1c3:         {
1:782a1c3:             cfs.truncateBlocking();
1:782a1c3:         }
1:a991b64:     }
1:a991b64: 
1:a991b64:     @Test
1:a991b64:     public void testColumnStatsRecordsRowDeletesCorrectly()
1:a991b64:     {
1:a991b64:         long timestamp = System.currentTimeMillis();
1:a991b64:         int localDeletionTime = (int) (timestamp / 1000);
1:a991b64: 
1:a991b64:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
2:a991b64:         RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1").clustering("c").add("val", "val1");
1:a991b64:         for (int i = 0; i < 10; i++)
1:a991b64:             builder.add("val" + i, "val" + i);
2:a991b64:         builder.build().applyUnsafe();
1:a991b64: 
1:2b0a8f6:         RowUpdateBuilder.deleteRowAt(cfs.metadata, 10L, localDeletionTime, "key1", "c").applyUnsafe();
1:e51f83b:         ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
1:c055ab9:         EncodingStats stats = partition.stats();
1:a991b64:         assertEquals(localDeletionTime, stats.minLocalDeletionTime);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:3e37b4a
/////////////////////////////////////////////////////////////////////////
1:             ReadCommand cmd1 = Util.cmd(cfs, "key1").build();
1:             ReadCommand cmd2 = Util.cmd(cfs, "key2").build();
1:             ImmutableBTreePartition p1 = Util.getOnlyPartitionUnfiltered(cmd1);
1:             ImmutableBTreePartition p2 = Util.getOnlyPartitionUnfiltered(cmd2);
1:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
1:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
/////////////////////////////////////////////////////////////////////////
1:             UnfilteredRowIterators.digest(cmd1, p1.unfilteredIterator(), digest1, version);
1:             UnfilteredRowIterators.digest(cmd2, p2.unfilteredIterator(), digest2, version);
commit:782a1c3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         testDigest(MessagingService.current_version);
1:     }
1: 
1:     @Test
1:     public void testLegacyDigest() throws NoSuchAlgorithmException
1:     {
1:         testDigest(MessagingService.VERSION_22);
1:     }
1: 
1:     public void testDigest(int version) throws NoSuchAlgorithmException
1:     {
1:         try
1:         {
1:             RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1").clustering("c").add("val", "val1");
1:             for (int i = 0; i < 10; i++)
1:                 builder.add("val" + i, "val" + i);
1:             builder.build().applyUnsafe();
1:             new RowUpdateBuilder(cfs.metadata, 5, "key2").clustering("c").add("val", "val2").build().applyUnsafe();
0:             ImmutableBTreePartition p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
0:             ImmutableBTreePartition p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:             MessageDigest digest1 = MessageDigest.getInstance("MD5");
1:             MessageDigest digest2 = MessageDigest.getInstance("MD5");
0:             UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1, version);
0:             UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2, version);
1:             assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1:             p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:             p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:             digest1 = MessageDigest.getInstance("MD5");
1:             digest2 = MessageDigest.getInstance("MD5");
0:             UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1, version);
0:             UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2, version);
1:             assertTrue(Arrays.equals(digest1.digest(), digest2.digest()));
1: 
1:             p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:             RowUpdateBuilder.deleteRow(cfs.metadata, 6, "key2", "c").applyUnsafe();
1:             p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1:             digest1 = MessageDigest.getInstance("MD5");
1:             digest2 = MessageDigest.getInstance("MD5");
0:             UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1, version);
0:             UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2, version);
1:             assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1:         }
1:         finally
1:         {
1:             cfs.truncateBlocking();
1:         }
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.EncodingStats;
/////////////////////////////////////////////////////////////////////////
1:         EncodingStats stats = partition.stats();
commit:2b0a8f6
/////////////////////////////////////////////////////////////////////////
1:         RowUpdateBuilder.deleteRowAt(cfs.metadata, 10L, localDeletionTime, "key1", "c").applyUnsafe();
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.db;
1: 
1: import java.io.IOException;
1: import java.security.MessageDigest;
1: import java.security.NoSuchAlgorithmException;
1: import java.util.Arrays;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.db.rows.UnfilteredRowIterator;
1: import org.apache.cassandra.db.rows.UnfilteredRowIterators;
0: import org.apache.cassandra.db.rows.RowStats;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.db.partitions.*;
1: import org.apache.cassandra.io.util.DataOutputBuffer;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.hadoop.io.DataInputBuffer;
1: 
1: import static junit.framework.Assert.assertTrue;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
1: public class PartitionTest
1: {
0:     static int version = MessagingService.current_version;
1:     private static final String KEYSPACE1 = "Keyspace1";
1:     private static final String CF_STANDARD1 = "Standard1";
1:     private static final String CF_TENCOL = "TenColumns";
1:     private static final String CF_COUNTER1 = "Counter1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1),
1:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_TENCOL, 10, AsciiType.instance),
1:                                     SchemaLoader.denseCFMD(KEYSPACE1, CF_COUNTER1, BytesType.instance));
1:     }
1: 
1:     @Test
1:     public void testSingleColumn() throws IOException
1:     {
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1);
1:         PartitionUpdate update = new RowUpdateBuilder(cfs.metadata, 5, "key1")
1:                                  .clustering("c")
1:                                  .add("val", "val1")
1:                                  .buildUpdate();
1: 
0:         ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
1: 
1:         DataOutputBuffer bufOut = new DataOutputBuffer();
1:         CachedPartition.cacheSerializer.serialize(partition, bufOut);
1: 
0:         DataInputBuffer bufIn = new DataInputBuffer();
0:         bufIn.reset(bufOut.getData(), 0, bufOut.getLength());
0:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(bufIn);
1: 
1:         assert deserialized != null;
1:         assert deserialized.metadata().cfName.equals(CF_STANDARD1);
1:         assert deserialized.partitionKey().equals(partition.partitionKey());
1:     }
1: 
1:     @Test
1:     public void testManyColumns() throws IOException
1:     {
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
1:         RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1")
1:                                    .clustering("c")
1:                                    .add("val", "val1");
1: 
1:         for (int i = 0; i < 10; i++)
1:             builder.add("val" + i, "val" + i);
1: 
1:         PartitionUpdate update = builder.buildUpdate();
1: 
0:         ArrayBackedCachedPartition partition = ArrayBackedCachedPartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
1: 
1:         DataOutputBuffer bufOut = new DataOutputBuffer();
1:         CachedPartition.cacheSerializer.serialize(partition, bufOut);
1: 
0:         DataInputBuffer bufIn = new DataInputBuffer();
0:         bufIn.reset(bufOut.getData(), 0, bufOut.getLength());
0:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(bufIn);
1: 
0:         assertEquals(partition.columns().regulars.columnCount(), deserialized.columns().regulars.columnCount());
1:         assertTrue(deserialized.columns().regulars.getSimple(1).equals(partition.columns().regulars.getSimple(1)));
1:         assertTrue(deserialized.columns().regulars.getSimple(5).equals(partition.columns().regulars.getSimple(5)));
1: 
1:         ColumnDefinition cDef = cfs.metadata.getColumnDefinition(ByteBufferUtil.bytes("val8"));
1:         assertTrue(partition.lastRow().getCell(cDef).value().equals(deserialized.lastRow().getCell(cDef).value()));
1:         assert deserialized.partitionKey().equals(partition.partitionKey());
1:     }
1: 
1:     @Test
1:     public void testDigest() throws NoSuchAlgorithmException
1:     {
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
1:         RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1").clustering("c").add("val", "val1");
1:         for (int i = 0; i < 10; i++)
1:             builder.add("val" + i, "val" + i);
1:         builder.build().applyUnsafe();
1: 
0:         new RowUpdateBuilder(cfs.metadata, 5, "key2").clustering("c").add("val", "val2").build().applyUnsafe();
1: 
0:         ArrayBackedPartition p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
0:         ArrayBackedPartition p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
1: 
0:         MessageDigest digest1 = MessageDigest.getInstance("MD5");
0:         MessageDigest digest2 = MessageDigest.getInstance("MD5");
0:         UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);
0:         UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);
0:         assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1: 
0:         p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
0:         p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
0:         digest1 = MessageDigest.getInstance("MD5");
0:         digest2 = MessageDigest.getInstance("MD5");
0:         UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);
0:         UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);
0:         assertTrue(Arrays.equals(digest1.digest(), digest2.digest()));
1: 
0:         p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
0:         RowUpdateBuilder.deleteRow(cfs.metadata, 6, "key2", "c").applyUnsafe();
0:         p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
0:         digest1 = MessageDigest.getInstance("MD5");
0:         digest2 = MessageDigest.getInstance("MD5");
0:         UnfilteredRowIterators.digest(p1.unfilteredIterator(), digest1);
0:         UnfilteredRowIterators.digest(p2.unfilteredIterator(), digest2);
0:         assertFalse(Arrays.equals(digest1.digest(), digest2.digest()));
1:     }
1: 
1:     @Test
1:     public void testColumnStatsRecordsRowDeletesCorrectly()
1:     {
1:         long timestamp = System.currentTimeMillis();
1:         int localDeletionTime = (int) (timestamp / 1000);
1: 
1:         ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_TENCOL);
1:         RowUpdateBuilder builder = new RowUpdateBuilder(cfs.metadata, 5, "key1").clustering("c").add("val", "val1");
1:         for (int i = 0; i < 10; i++)
1:             builder.add("val" + i, "val" + i);
1:         builder.build().applyUnsafe();
1: 
0:         RowUpdateBuilder.deleteRow(cfs.metadata, 10, "key1", "c").applyUnsafe();
0:         ArrayBackedPartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
0:         RowStats stats = partition.stats();
1:         assertEquals(localDeletionTime, stats.minLocalDeletionTime);
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:0d74c3e
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(partition.columns().regulars.size(), deserialized.columns().regulars.size());
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1:         CachedBTreePartition partition = CachedBTreePartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
/////////////////////////////////////////////////////////////////////////
1:         CachedBTreePartition partition = CachedBTreePartition.create(update.unfilteredIterator(), FBUtilities.nowInSeconds());
/////////////////////////////////////////////////////////////////////////
0:         ImmutableBTreePartition p1 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
0:         ImmutableBTreePartition p2 = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key2").build());
/////////////////////////////////////////////////////////////////////////
1:         ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs, "key1").build());
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c4c9eae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputBuffer;
/////////////////////////////////////////////////////////////////////////
1:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new DataInputBuffer(bufOut.getData()));
/////////////////////////////////////////////////////////////////////////
1:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new DataInputBuffer(bufOut.getData()));
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.NIODataInputStream;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));
/////////////////////////////////////////////////////////////////////////
0:         CachedPartition deserialized = CachedPartition.cacheSerializer.deserialize(new NIODataInputStream(bufOut.getData()));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
============================================================================