1:f3b3c41: /*
1:f3b3c41:  * Licensed to the Apache Software Foundation (ASF) under one
1:f3b3c41:  * or more contributor license agreements.  See the NOTICE file
1:f3b3c41:  * distributed with this work for additional information
1:f3b3c41:  * regarding copyright ownership.  The ASF licenses this file
1:f3b3c41:  * to you under the Apache License, Version 2.0 (the
1:f3b3c41:  * "License"); you may not use this file except in compliance
1:f3b3c41:  * with the License.  You may obtain a copy of the License at
1:f3b3c41:  *
1:f3b3c41:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f3b3c41:  *
1:f3b3c41:  * Unless required by applicable law or agreed to in writing, software
1:f3b3c41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3b3c41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3b3c41:  * See the License for the specific language governing permissions and
1:f3b3c41:  * limitations under the License.
1:f3b3c41:  */
1:f3b3c41: package org.apache.cassandra.cql3;
2:f3b3c41: 
1:f3b3c41: import static junit.framework.Assert.fail;
1:f3b3c41: 
1:904cb5d: import java.io.Closeable;
1:f3b3c41: import java.util.UUID;
1:f3b3c41: import java.util.concurrent.ExecutionException;
1:f3b3c41: 
1:f3b3c41: import org.junit.Assert;
1:f3b3c41: import org.junit.Test;
1:f3b3c41: 
1:904cb5d: import org.apache.cassandra.Util;
1:f3b3c41: import org.apache.cassandra.config.Config.DiskFailurePolicy;
1:f3b3c41: import org.apache.cassandra.config.DatabaseDescriptor;
1:f3b3c41: import org.apache.cassandra.db.commitlog.CommitLog;
1:f3b3c41: import org.apache.cassandra.db.commitlog.CommitLogSegment;
1:f3b3c41: import org.apache.cassandra.db.Keyspace;
1:f3b3c41: import org.apache.cassandra.gms.Gossiper;
1:f3b3c41: import org.apache.cassandra.io.FSWriteError;
1:f3b3c41: import org.apache.cassandra.utils.JVMStabilityInspector;
1:f3b3c41: import org.apache.cassandra.utils.KillerForTests;
1:f3b3c41: 
1:f3b3c41: /**
1:f3b3c41:  * Test that TombstoneOverwhelmingException gets thrown when it should be and doesn't when it shouldn't be.
1:f3b3c41:  */
1:f3b3c41: public class OutOfSpaceTest extends CQLTester
5:f3b3c41: {
1:f3b3c41:     @Test
1:f3b3c41:     public void testFlushUnwriteableDie() throws Throwable
1:f3b3c41:     {
2:f3b3c41:         makeTable();
1:f3b3c41: 
1:f3b3c41:         KillerForTests killerForTests = new KillerForTests();
1:f3b3c41:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:f3b3c41:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:904cb5d:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.die);
1:f3b3c41:             flushAndExpectError();
1:f3b3c41:             Assert.assertTrue(killerForTests.wasKilled());
1:f3b3c41:             Assert.assertFalse(killerForTests.wasKilledQuietly()); //only killed quietly on startup failure
5:f3b3c41:         }
1:f3b3c41:         finally
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:f3b3c41:             JVMStabilityInspector.replaceKiller(originalKiller);
1:f3b3c41:         }
1:f3b3c41:     }
1:f3b3c41: 
1:f3b3c41:     @Test
1:f3b3c41:     public void testFlushUnwriteableStop() throws Throwable
1:f3b3c41:     {
1:f3b3c41:         makeTable();
1:f3b3c41: 
1:f3b3c41:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:904cb5d:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.stop);
1:f3b3c41:             flushAndExpectError();
1:f3b3c41:             Assert.assertFalse(Gossiper.instance.isEnabled());
1:f3b3c41:         }
1:f3b3c41:         finally
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:f3b3c41:         }
1:f3b3c41:     }
1:f3b3c41: 
1:f3b3c41:     @Test
1:f3b3c41:     public void testFlushUnwriteableIgnore() throws Throwable
1:f3b3c41:     {
1:f3b3c41:         makeTable();
1:f3b3c41: 
1:f3b3c41:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:904cb5d:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.ignore);
1:f3b3c41:             flushAndExpectError();
1:f3b3c41:         }
1:f3b3c41:         finally
1:f3b3c41:         {
1:f3b3c41:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:f3b3c41:         }
1:f3b3c41: 
1:f3b3c41:         // Next flush should succeed.
1:f3b3c41:         flush();
1:f3b3c41:     }
1:f3b3c41: 
1:f3b3c41:     public void makeTable() throws Throwable
1:f3b3c41:     {
1:f3b3c41:         createTable("CREATE TABLE %s (a text, b text, c text, PRIMARY KEY (a, b));");
1:f3b3c41: 
1:f3b3c41:         // insert exactly the amount of tombstones that shouldn't trigger an exception
1:f3b3c41:         for (int i = 0; i < 10; i++)
1:f3b3c41:             execute("INSERT INTO %s (a, b, c) VALUES ('key', 'column" + i + "', null);");
1:f3b3c41:     }
1:f3b3c41: 
1:f3b3c41:     public void flushAndExpectError() throws InterruptedException, ExecutionException
1:f3b3c41:     {
5:f3b3c41:         try
1:f3b3c41:         {
1:f3b3c41:             Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).forceFlush().get();
1:f3b3c41:             fail("FSWriteError expected.");
1:f3b3c41:         }
1:f3b3c41:         catch (ExecutionException e)
1:f3b3c41:         {
1:f3b3c41:             // Correct path.
1:f3b3c41:             Assert.assertTrue(e.getCause() instanceof FSWriteError);
1:f3b3c41:         }
1:f3b3c41: 
1:f3b3c41:         // Make sure commit log wasn't discarded.
1:f3b3c41:         UUID cfid = currentTableMetadata().cfId;
1:e31e216:         for (CommitLogSegment segment : CommitLog.instance.segmentManager.getActiveSegments())
1:f3b3c41:             if (segment.getDirtyCFIDs().contains(cfid))
1:f3b3c41:                 return;
1:f3b3c41:         fail("Expected commit log to remain dirty for the affected table.");
1:f3b3c41:     }
1:f3b3c41: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:7b10217
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:904cb5d
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
1: import org.apache.cassandra.Util;
/////////////////////////////////////////////////////////////////////////
1:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
/////////////////////////////////////////////////////////////////////////
1:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
/////////////////////////////////////////////////////////////////////////
1:         try (Closeable c = Util.markDirectoriesUnwriteable(getCurrentColumnFamilyStore()))
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f3b3c41
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import static junit.framework.Assert.fail;
1: 
0: import java.io.IOError;
1: import java.util.UUID;
1: import java.util.concurrent.ExecutionException;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.Config.DiskFailurePolicy;
1: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.BlacklistedDirectories;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Directories.DataDirectory;
1: import org.apache.cassandra.db.commitlog.CommitLog;
1: import org.apache.cassandra.db.commitlog.CommitLogSegment;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.gms.Gossiper;
1: import org.apache.cassandra.io.FSWriteError;
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: import org.apache.cassandra.utils.KillerForTests;
1: 
1: /**
1:  * Test that TombstoneOverwhelmingException gets thrown when it should be and doesn't when it shouldn't be.
1:  */
1: public class OutOfSpaceTest extends CQLTester
1: {
1:     @Test
1:     public void testFlushUnwriteableDie() throws Throwable
1:     {
1:         makeTable();
0:         markDirectoriesUnwriteable();
1: 
1:         KillerForTests killerForTests = new KillerForTests();
1:         JVMStabilityInspector.Killer originalKiller = JVMStabilityInspector.replaceKiller(killerForTests);
1:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.die);
1:             flushAndExpectError();
1:             Assert.assertTrue(killerForTests.wasKilled());
1:             Assert.assertFalse(killerForTests.wasKilledQuietly()); //only killed quietly on startup failure
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:             JVMStabilityInspector.replaceKiller(originalKiller);
1:         }
1:     }
1: 
1:     @Test
1:     public void testFlushUnwriteableStop() throws Throwable
1:     {
1:         makeTable();
0:         markDirectoriesUnwriteable();
1: 
1:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.stop);
1:             flushAndExpectError();
1:             Assert.assertFalse(Gossiper.instance.isEnabled());
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:         }
1:     }
1: 
1:     @Test
1:     public void testFlushUnwriteableIgnore() throws Throwable
1:     {
1:         makeTable();
0:         markDirectoriesUnwriteable();
1: 
1:         DiskFailurePolicy oldPolicy = DatabaseDescriptor.getDiskFailurePolicy();
1:         try
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy.ignore);
1:             flushAndExpectError();
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.setDiskFailurePolicy(oldPolicy);
1:         }
1: 
1:         // Next flush should succeed.
1:         makeTable();
1:         flush();
1:     }
1: 
1:     public void makeTable() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (a text, b text, c text, PRIMARY KEY (a, b));");
1: 
1:         // insert exactly the amount of tombstones that shouldn't trigger an exception
1:         for (int i = 0; i < 10; i++)
1:             execute("INSERT INTO %s (a, b, c) VALUES ('key', 'column" + i + "', null);");
1:     }
1: 
0:     public void markDirectoriesUnwriteable()
1:     {
0:         ColumnFamilyStore cfs = Keyspace.open(keyspace()).getColumnFamilyStore(currentTable());
1:         try
1:         {
0:             for ( ; ; )
1:             {
0:                 DataDirectory dir = cfs.directories.getWriteableLocation(1);
0:                 BlacklistedDirectories.maybeMarkUnwritable(cfs.directories.getLocationForDisk(dir));
1:             }
1:         }
0:         catch (IOError e)
1:         {
0:             // Expected -- marked all directories as unwritable
1:         }
1:     }
1: 
1:     public void flushAndExpectError() throws InterruptedException, ExecutionException
1:     {
1:         try
1:         {
1:             Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).forceFlush().get();
1:             fail("FSWriteError expected.");
1:         }
1:         catch (ExecutionException e)
1:         {
1:             // Correct path.
1:             Assert.assertTrue(e.getCause() instanceof FSWriteError);
1:         }
1: 
1:         // Make sure commit log wasn't discarded.
1:         UUID cfid = currentTableMetadata().cfId;
0:         for (CommitLogSegment segment : CommitLog.instance.allocator.getActiveSegments())
1:             if (segment.getDirtyCFIDs().contains(cfid))
1:                 return;
1:         fail("Expected commit log to remain dirty for the affected table.");
1:     }
1: }
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1:         for (CommitLogSegment segment : CommitLog.instance.segmentManager.getActiveSegments())
commit:bd4cab2
============================================================================