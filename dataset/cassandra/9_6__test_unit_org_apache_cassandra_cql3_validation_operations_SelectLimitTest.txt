1:615bf37: /*
1:615bf37:  *
1:615bf37:  * Licensed to the Apache Software Foundation (ASF) under one
1:615bf37:  * or more contributor license agreements.  See the NOTICE file
1:615bf37:  * distributed with this work for additional information
1:615bf37:  * regarding copyright ownership.  The ASF licenses this file
1:615bf37:  * to you under the Apache License, Version 2.0 (the
1:615bf37:  * "License"); you may not use this file except in compliance
1:615bf37:  * with the License.  You may obtain a copy of the License at
1:615bf37:  *
1:615bf37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:615bf37:  *
1:615bf37:  * Unless required by applicable law or agreed to in writing,
1:615bf37:  * software distributed under the License is distributed on an
1:615bf37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:615bf37:  * KIND, either express or implied.  See the License for the
1:615bf37:  * specific language governing permissions and limitations
1:615bf37:  * under the License.
1:615bf37:  *
1:615bf37:  */
1:01115f7: package org.apache.cassandra.cql3.validation.operations;
2:01115f7: 
1:01115f7: import org.junit.BeforeClass;
1:01115f7: import org.junit.Test;
1:01115f7: 
1:01115f7: import org.apache.cassandra.config.DatabaseDescriptor;
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: import org.apache.cassandra.dht.ByteOrderedPartitioner;
1:01115f7: 
1:01115f7: public class SelectLimitTest extends CQLTester
1:01115f7: {
1:01115f7:     @BeforeClass
1:01115f7:     public static void setUp()
1:01115f7:     {
1:0a08525:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
1:01115f7:     }
1:9a0eb9a: 
1:01115f7:     /**
1:01115f7:      * Test limit across a partition range, requires byte ordered partitioner,
1:01115f7:      * migrated from cql_tests.py:TestCQL.limit_range_test()
1:01115f7:      */
1:9a0eb9a:     @Test
1:01115f7:     public void testPartitionRange() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 100; i++)
1:01115f7:             for (String tld : new String[] { "com", "org", "net" })
1:01115f7:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(userid) >= token(2) LIMIT 1"),
1:01115f7:                    row(2, "http://foo.com", 42L));
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE token(userid) > token(2) LIMIT 1"),
1:01115f7:                    row(3, "http://foo.com", 42L));
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test limit across a column range,
1:01115f7:      * migrated from cql_tests.py:TestCQL.limit_multiget_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testColumnRange() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 100; i++)
1:01115f7:             for (String tld : new String[] { "com", "org", "net" })
1:01115f7:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
1:01115f7: 
1:01115f7:         // Check that we do limit the output to 1 *and* that we respect query
1:01115f7:         // order of keys (even though 48 is after 2)
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE userid IN (48, 2) LIMIT 1"),
1:01115f7:                    row(2, "http://foo.com", 42L));
1:01115f7: 
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Test limit queries on a sparse table,
1:01115f7:      * migrated from cql_tests.py:TestCQL.limit_sparse_test()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testSparseTable() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (userid int, url text, day int, month text, year int, PRIMARY KEY (userid, url))");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 100; i++)
1:01115f7:             for (String tld : new String[] { "com", "org", "net" })
1:01115f7:                 execute("INSERT INTO %s (userid, url, day, month, year) VALUES (?, ?, 1, 'jan', 2012)", i, String.format("http://foo.%s", tld));
1:01115f7: 
1:01115f7:         assertRowCount(execute("SELECT * FROM %s LIMIT 4"), 4);
1:01115f7: 
1:01115f7:     }
1:01115f7: 
1:01115f7:     /**
1:01115f7:      * Check for #7052 bug,
1:01115f7:      * migrated from cql_tests.py:TestCQL.limit_compact_table()
1:01115f7:      */
1:01115f7:     @Test
1:01115f7:     public void testLimitInCompactTable() throws Throwable
1:01115f7:     {
1:01115f7:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v) ) WITH COMPACT STORAGE ");
1:01115f7: 
1:01115f7:         for (int i = 0; i < 4; i++)
1:01115f7:             for (int j = 0; j < 4; j++)
1:01115f7:                 execute("INSERT INTO %s(k, v) VALUES (?, ?)", i, j);
1:01115f7: 
1:01115f7:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > 0 AND v <= 4 LIMIT 2"),
1:01115f7:                    row(1),
1:01115f7:                    row(2));
1:01115f7:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > -1 AND v <= 4 LIMIT 2"),
1:01115f7:                    row(0),
1:01115f7:                    row(1));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 2"),
1:01115f7:                    row(0, 1),
1:01115f7:                    row(0, 2));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > -1 AND v <= 4 LIMIT 2"),
1:01115f7:                    row(0, 0),
1:01115f7:                    row(0, 1));
1:01115f7:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 6"),
1:01115f7:                    row(0, 1),
1:01115f7:                    row(0, 2),
1:01115f7:                    row(0, 3),
1:01115f7:                    row(1, 1),
1:01115f7:                    row(1, 2),
1:01115f7:                    row(1, 3));
1:a991b64:         assertRows(execute("SELECT * FROM %s WHERE v > 1 AND v <= 3 LIMIT 6 ALLOW FILTERING"),
1:a991b64:                    row(0, 2),
1:a991b64:                    row(0, 3),
1:a991b64:                    row(1, 2),
1:a991b64:                    row(1, 3),
1:a991b64:                    row(2, 2),
1:a991b64:                    row(2, 3));
1:01115f7:     }
1:84426d1: 
1:84426d1:     @Test
1:9a0eb9a:     public void testPerPartitionLimit() throws Throwable
1:9a0eb9a:     {
1:9a0eb9a:         perPartitionLimitTest(false);
1:9a0eb9a:     }
1:9a0eb9a: 
1:9a0eb9a:     @Test
1:9a0eb9a:     public void testPerPartitionLimitWithCompactStorage() throws Throwable
1:9a0eb9a:     {
1:9a0eb9a:         perPartitionLimitTest(true);
1:9a0eb9a:     }
1:9a0eb9a: 
1:9a0eb9a:     private void perPartitionLimitTest(boolean withCompactStorage) throws Throwable
1:9a0eb9a:     {
1:9a0eb9a:         String query = "CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))";
1:9a0eb9a: 
1:9a0eb9a:         if (withCompactStorage)
1:9a0eb9a:             createTable(query + " WITH COMPACT STORAGE");
1:9a0eb9a:         else
1:9a0eb9a:             createTable(query);
1:9a0eb9a: 
1:9a0eb9a:         for (int i = 0; i < 5; i++)
1:9a0eb9a:         {
1:9a0eb9a:             for (int j = 0; j < 5; j++)
1:9a0eb9a:             {
1:9a0eb9a:                 execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", i, j, j);
1:9a0eb9a:             }
1:9a0eb9a:         }
1:9a0eb9a: 
1:9a0eb9a:         assertInvalidMessage("LIMIT must be strictly positive",
1:9a0eb9a:                              "SELECT * FROM %s PER PARTITION LIMIT ?", 0);
1:9a0eb9a:         assertInvalidMessage("LIMIT must be strictly positive",
1:9a0eb9a:                              "SELECT * FROM %s PER PARTITION LIMIT ?", -1);
1:9a0eb9a: 
1:9a0eb9a:         assertRowsIgnoringOrder(execute("SELECT * FROM %s PER PARTITION LIMIT ?", 2),
1:9a0eb9a:                                 row(0, 0, 0),
1:9a0eb9a:                                 row(0, 1, 1),
1:9a0eb9a:                                 row(1, 0, 0),
1:9a0eb9a:                                 row(1, 1, 1),
1:9a0eb9a:                                 row(2, 0, 0),
1:9a0eb9a:                                 row(2, 1, 1),
1:9a0eb9a:                                 row(3, 0, 0),
1:9a0eb9a:                                 row(3, 1, 1),
1:9a0eb9a:                                 row(4, 0, 0),
1:9a0eb9a:                                 row(4, 1, 1));
1:9a0eb9a: 
1:9a0eb9a:         // Combined Per Partition and "global" limit
1:9a0eb9a:         assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?", 2, 6),
1:9a0eb9a:                        6);
1:9a0eb9a: 
1:9a0eb9a:         // odd amount of results
1:9a0eb9a:         assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?", 2, 5),
1:9a0eb9a:                        5);
1:9a0eb9a: 
1:9a0eb9a:         // IN query
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ?", 2),
1:9a0eb9a:                    row(2, 0, 0),
1:9a0eb9a:                    row(2, 1, 1),
1:9a0eb9a:                    row(3, 0, 0),
1:9a0eb9a:                    row(3, 1, 1));
1:9a0eb9a: 
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ? LIMIT 3", 2),
1:9a0eb9a:                    row(2, 0, 0),
1:9a0eb9a:                    row(2, 1, 1),
1:9a0eb9a:                    row(3, 0, 0));
1:9a0eb9a: 
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a IN (1,2,3) PER PARTITION LIMIT ? LIMIT 3", 2),
1:9a0eb9a:                    row(1, 0, 0),
1:9a0eb9a:                    row(1, 1, 1),
1:9a0eb9a:                    row(2, 0, 0));
1:9a0eb9a: 
1:9a0eb9a:         // with restricted partition key
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a = ? PER PARTITION LIMIT ?", 2, 3),
1:9a0eb9a:                    row(2, 0, 0),
1:9a0eb9a:                    row(2, 1, 1),
1:9a0eb9a:                    row(2, 2, 2));
1:9a0eb9a: 
1:9a0eb9a:         // with ordering
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a IN (3, 2) ORDER BY b DESC PER PARTITION LIMIT ?", 2),
1:9a0eb9a:                    row(2, 4, 4),
1:9a0eb9a:                    row(3, 4, 4),
1:9a0eb9a:                    row(2, 3, 3),
1:9a0eb9a:                    row(3, 3, 3));
1:9a0eb9a: 
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a IN (3, 2) ORDER BY b DESC PER PARTITION LIMIT ? LIMIT ?", 3, 4),
1:9a0eb9a:                    row(2, 4, 4),
1:9a0eb9a:                    row(3, 4, 4),
1:9a0eb9a:                    row(2, 3, 3),
1:9a0eb9a:                    row(3, 3, 3));
1:9a0eb9a: 
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a = ? ORDER BY b DESC PER PARTITION LIMIT ?", 2, 3),
1:9a0eb9a:                    row(2, 4, 4),
1:9a0eb9a:                    row(2, 3, 3),
1:9a0eb9a:                    row(2, 2, 2));
1:9a0eb9a: 
1:9a0eb9a:         // with filtering
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? PER PARTITION LIMIT ? ALLOW FILTERING", 2, 0, 2),
1:9a0eb9a:                    row(2, 1, 1),
1:9a0eb9a:                    row(2, 2, 2));
1:9a0eb9a: 
1:9a0eb9a:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? ORDER BY b DESC PER PARTITION LIMIT ? ALLOW FILTERING", 2, 2, 2),
1:9a0eb9a:                    row(2, 4, 4),
1:9a0eb9a:                    row(2, 3, 3));
1:9a0eb9a: 
1:9a0eb9a:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries",
1:9a0eb9a:                              "SELECT DISTINCT a FROM %s PER PARTITION LIMIT ?", 3);
1:9a0eb9a:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries",
1:9a0eb9a:                              "SELECT DISTINCT a FROM %s PER PARTITION LIMIT ? LIMIT ?", 3, 4);
1:9a0eb9a:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with aggregate queries.",
1:9a0eb9a:                              "SELECT COUNT(*) FROM %s PER PARTITION LIMIT ?", 3);
1:9a0eb9a:     }
1:01115f7: 
1:01115f7:     @Test
1:84426d1:     public void testLimitWithDeletedRowsAndStaticColumns() throws Throwable
1:84426d1:     {
1:84426d1:         createTable("CREATE TABLE %s (pk int, c int, v int, s int static, PRIMARY KEY (pk, c))");
1:84426d1: 
1:84426d1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (1, -1, 1, 1)");
1:84426d1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (2, -1, 1, 1)");
1:84426d1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (3, -1, 1, 1)");
1:84426d1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (4, -1, 1, 1)");
1:84426d1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (5, -1, 1, 1)");
1:84426d1: 
1:84426d1:         assertRows(execute("SELECT * FROM %s"),
1:84426d1:                    row(1, -1, 1, 1),
1:84426d1:                    row(2, -1, 1, 1),
1:84426d1:                    row(3, -1, 1, 1),
1:84426d1:                    row(4, -1, 1, 1),
1:84426d1:                    row(5, -1, 1, 1));
1:84426d1: 
1:84426d1:         execute("DELETE FROM %s WHERE pk = 2");
1:84426d1: 
1:84426d1:         assertRows(execute("SELECT * FROM %s"),
1:84426d1:                    row(1, -1, 1, 1),
1:84426d1:                    row(3, -1, 1, 1),
1:84426d1:                    row(4, -1, 1, 1),
1:84426d1:                    row(5, -1, 1, 1));
1:84426d1: 
1:84426d1:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:84426d1:                    row(1, -1, 1, 1),
1:84426d1:                    row(3, -1, 1, 1));
1:84426d1:     }
1:01115f7: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:2764e85
author:Sharvanath Pathak
-------------------------------------------------------------------------------
commit:84426d1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testLimitWithDeletedRowsAndStaticColumns() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (pk int, c int, v int, s int static, PRIMARY KEY (pk, c))");
1: 
1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (1, -1, 1, 1)");
1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (2, -1, 1, 1)");
1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (3, -1, 1, 1)");
1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (4, -1, 1, 1)");
1:         execute("INSERT INTO %s (pk, c, v, s) VALUES (5, -1, 1, 1)");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, -1, 1, 1),
1:                    row(2, -1, 1, 1),
1:                    row(3, -1, 1, 1),
1:                    row(4, -1, 1, 1),
1:                    row(5, -1, 1, 1));
1: 
1:         execute("DELETE FROM %s WHERE pk = 2");
1: 
1:         assertRows(execute("SELECT * FROM %s"),
1:                    row(1, -1, 1, 1),
1:                    row(3, -1, 1, 1),
1:                    row(4, -1, 1, 1),
1:                    row(5, -1, 1, 1));
1: 
1:         assertRows(execute("SELECT * FROM %s LIMIT 2"),
1:                    row(1, -1, 1, 1),
1:                    row(3, -1, 1, 1));
1:     }
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:693e52d
commit:05bacc7
commit:dbefa85
commit:615bf37
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
author:Alex Petrov
-------------------------------------------------------------------------------
commit:9a0eb9a
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testPerPartitionLimit() throws Throwable
1:     {
1:         perPartitionLimitTest(false);
1:     }
1: 
1:     @Test
1:     public void testPerPartitionLimitWithCompactStorage() throws Throwable
1:     {
1:         perPartitionLimitTest(true);
1:     }
1: 
1:     private void perPartitionLimitTest(boolean withCompactStorage) throws Throwable
1:     {
1:         String query = "CREATE TABLE %s (a int, b int, c int, PRIMARY KEY (a, b))";
1: 
1:         if (withCompactStorage)
1:             createTable(query + " WITH COMPACT STORAGE");
1:         else
1:             createTable(query);
1: 
1:         for (int i = 0; i < 5; i++)
1:         {
1:             for (int j = 0; j < 5; j++)
1:             {
1:                 execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", i, j, j);
1:             }
1:         }
1: 
1:         assertInvalidMessage("LIMIT must be strictly positive",
1:                              "SELECT * FROM %s PER PARTITION LIMIT ?", 0);
1:         assertInvalidMessage("LIMIT must be strictly positive",
1:                              "SELECT * FROM %s PER PARTITION LIMIT ?", -1);
1: 
1:         assertRowsIgnoringOrder(execute("SELECT * FROM %s PER PARTITION LIMIT ?", 2),
1:                                 row(0, 0, 0),
1:                                 row(0, 1, 1),
1:                                 row(1, 0, 0),
1:                                 row(1, 1, 1),
1:                                 row(2, 0, 0),
1:                                 row(2, 1, 1),
1:                                 row(3, 0, 0),
1:                                 row(3, 1, 1),
1:                                 row(4, 0, 0),
1:                                 row(4, 1, 1));
1: 
1:         // Combined Per Partition and "global" limit
1:         assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?", 2, 6),
1:                        6);
1: 
1:         // odd amount of results
1:         assertRowCount(execute("SELECT * FROM %s PER PARTITION LIMIT ? LIMIT ?", 2, 5),
1:                        5);
1: 
1:         // IN query
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ?", 2),
1:                    row(2, 0, 0),
1:                    row(2, 1, 1),
1:                    row(3, 0, 0),
1:                    row(3, 1, 1));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (2,3) PER PARTITION LIMIT ? LIMIT 3", 2),
1:                    row(2, 0, 0),
1:                    row(2, 1, 1),
1:                    row(3, 0, 0));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (1,2,3) PER PARTITION LIMIT ? LIMIT 3", 2),
1:                    row(1, 0, 0),
1:                    row(1, 1, 1),
1:                    row(2, 0, 0));
1: 
1:         // with restricted partition key
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? PER PARTITION LIMIT ?", 2, 3),
1:                    row(2, 0, 0),
1:                    row(2, 1, 1),
1:                    row(2, 2, 2));
1: 
1:         // with ordering
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (3, 2) ORDER BY b DESC PER PARTITION LIMIT ?", 2),
1:                    row(2, 4, 4),
1:                    row(3, 4, 4),
1:                    row(2, 3, 3),
1:                    row(3, 3, 3));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a IN (3, 2) ORDER BY b DESC PER PARTITION LIMIT ? LIMIT ?", 3, 4),
1:                    row(2, 4, 4),
1:                    row(3, 4, 4),
1:                    row(2, 3, 3),
1:                    row(3, 3, 3));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? ORDER BY b DESC PER PARTITION LIMIT ?", 2, 3),
1:                    row(2, 4, 4),
1:                    row(2, 3, 3),
1:                    row(2, 2, 2));
1: 
1:         // with filtering
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? PER PARTITION LIMIT ? ALLOW FILTERING", 2, 0, 2),
1:                    row(2, 1, 1),
1:                    row(2, 2, 2));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE a = ? AND b > ? ORDER BY b DESC PER PARTITION LIMIT ? ALLOW FILTERING", 2, 2, 2),
1:                    row(2, 4, 4),
1:                    row(2, 3, 3));
1: 
1:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries",
1:                              "SELECT DISTINCT a FROM %s PER PARTITION LIMIT ?", 3);
1:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with SELECT DISTINCT queries",
1:                              "SELECT DISTINCT a FROM %s PER PARTITION LIMIT ? LIMIT ?", 3, 4);
1:         assertInvalidMessage("PER PARTITION LIMIT is not allowed with aggregate queries.",
1:                              "SELECT COUNT(*) FROM %s PER PARTITION LIMIT ?", 3);
1:     }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         DatabaseDescriptor.setPartitionerUnsafe(ByteOrderedPartitioner.instance);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:         assertRows(execute("SELECT * FROM %s WHERE v > 1 AND v <= 3 LIMIT 6 ALLOW FILTERING"),
1:                    row(0, 2),
1:                    row(0, 3),
1:                    row(1, 2),
1:                    row(1, 3),
1:                    row(2, 2),
1:                    row(2, 3));
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.operations;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.dht.ByteOrderedPartitioner;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: public class SelectLimitTest extends CQLTester
1: {
1:     @BeforeClass
1:     public static void setUp()
1:     {
0:         DatabaseDescriptor.setPartitioner(ByteOrderedPartitioner.instance);
1:     }
1: 
1:     /**
1:      * Test limit across a partition range, requires byte ordered partitioner,
1:      * migrated from cql_tests.py:TestCQL.limit_range_test()
1:      */
1:     @Test
1:     public void testPartitionRange() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
1: 
1:         for (int i = 0; i < 100; i++)
1:             for (String tld : new String[] { "com", "org", "net" })
1:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(userid) >= token(2) LIMIT 1"),
1:                    row(2, "http://foo.com", 42L));
1: 
1:         assertRows(execute("SELECT * FROM %s WHERE token(userid) > token(2) LIMIT 1"),
1:                    row(3, "http://foo.com", 42L));
1:     }
1: 
1:     /**
1:      * Test limit across a column range,
1:      * migrated from cql_tests.py:TestCQL.limit_multiget_test()
1:      */
1:     @Test
1:     public void testColumnRange() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
1: 
1:         for (int i = 0; i < 100; i++)
1:             for (String tld : new String[] { "com", "org", "net" })
1:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
1: 
1:         // Check that we do limit the output to 1 *and* that we respect query
1:         // order of keys (even though 48 is after 2)
1:         assertRows(execute("SELECT * FROM %s WHERE userid IN (48, 2) LIMIT 1"),
1:                    row(2, "http://foo.com", 42L));
1: 
1:     }
1: 
1:     /**
1:      * Test limit queries on a sparse table,
1:      * migrated from cql_tests.py:TestCQL.limit_sparse_test()
1:      */
1:     @Test
1:     public void testSparseTable() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (userid int, url text, day int, month text, year int, PRIMARY KEY (userid, url))");
1: 
1:         for (int i = 0; i < 100; i++)
1:             for (String tld : new String[] { "com", "org", "net" })
1:                 execute("INSERT INTO %s (userid, url, day, month, year) VALUES (?, ?, 1, 'jan', 2012)", i, String.format("http://foo.%s", tld));
1: 
1:         assertRowCount(execute("SELECT * FROM %s LIMIT 4"), 4);
1: 
1:     }
1: 
1:     /**
1:      * Check for #7052 bug,
1:      * migrated from cql_tests.py:TestCQL.limit_compact_table()
1:      */
1:     @Test
1:     public void testLimitInCompactTable() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v) ) WITH COMPACT STORAGE ");
1: 
1:         for (int i = 0; i < 4; i++)
1:             for (int j = 0; j < 4; j++)
1:                 execute("INSERT INTO %s(k, v) VALUES (?, ?)", i, j);
1: 
1:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > 0 AND v <= 4 LIMIT 2"),
1:                    row(1),
1:                    row(2));
1:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > -1 AND v <= 4 LIMIT 2"),
1:                    row(0),
1:                    row(1));
1:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 2"),
1:                    row(0, 1),
1:                    row(0, 2));
1:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > -1 AND v <= 4 LIMIT 2"),
1:                    row(0, 0),
1:                    row(0, 1));
1:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 6"),
1:                    row(0, 1),
1:                    row(0, 2),
1:                    row(0, 3),
1:                    row(1, 1),
1:                    row(1, 2),
1:                    row(1, 3));
1: 
0:         // strict bound (v > 1) over a range of partitions is not supported for compact storage if limit is provided
0:         assertInvalidThrow(InvalidRequestException.class, "SELECT * FROM %s WHERE v > 1 AND v <= 3 LIMIT 6 ALLOW FILTERING");
1:     }
1: }
commit:f797bfa
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cql3.validation.operations;
0: 
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.dht.ByteOrderedPartitioner;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: 
0: public class SelectLimitTest extends CQLTester
0: {
0:     @BeforeClass
0:     public static void setUp()
0:     {
0:         DatabaseDescriptor.setPartitioner(new ByteOrderedPartitioner());
0:     }
0: 
0:     /**
0:      * Test limit across a partition range, requires byte ordered partitioner,
0:      * migrated from cql_tests.py:TestCQL.limit_range_test()
0:      */
0:     @Test
0:     public void testPartitionRange() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
0: 
0:         for (int i = 0; i < 100; i++)
0:             for (String tld : new String[] { "com", "org", "net" })
0:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
0: 
0:         assertRows(execute("SELECT * FROM %s WHERE token(userid) >= token(2) LIMIT 1"),
0:                    row(2, "http://foo.com", 42L));
0: 
0:         assertRows(execute("SELECT * FROM %s WHERE token(userid) > token(2) LIMIT 1"),
0:                    row(3, "http://foo.com", 42L));
0:     }
0: 
0:     /**
0:      * Test limit across a column range,
0:      * migrated from cql_tests.py:TestCQL.limit_multiget_test()
0:      */
0:     @Test
0:     public void testColumnRange() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (userid int, url text, time bigint, PRIMARY KEY (userid, url)) WITH COMPACT STORAGE");
0: 
0:         for (int i = 0; i < 100; i++)
0:             for (String tld : new String[] { "com", "org", "net" })
0:                 execute("INSERT INTO %s (userid, url, time) VALUES (?, ?, ?)", i, String.format("http://foo.%s", tld), 42L);
0: 
0:         // Check that we do limit the output to 1 *and* that we respect query
0:         // order of keys (even though 48 is after 2)
0:         assertRows(execute("SELECT * FROM %s WHERE userid IN (48, 2) LIMIT 1"),
0:                    row(48, "http://foo.com", 42L));
0:     }
0: 
0:     /**
0:      * Test limit queries on a sparse table,
0:      * migrated from cql_tests.py:TestCQL.limit_sparse_test()
0:      */
0:     @Test
0:     public void testSparseTable() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (userid int, url text, day int, month text, year int, PRIMARY KEY (userid, url))");
0: 
0:         for (int i = 0; i < 100; i++)
0:             for (String tld : new String[] { "com", "org", "net" })
0:                 execute("INSERT INTO %s (userid, url, day, month, year) VALUES (?, ?, 1, 'jan', 2012)", i, String.format("http://foo.%s", tld));
0: 
0:         assertRowCount(execute("SELECT * FROM %s LIMIT 4"), 4);
0: 
0:     }
0: 
0:     /**
0:      * Check for #7052 bug,
0:      * migrated from cql_tests.py:TestCQL.limit_compact_table()
0:      */
0:     @Test
0:     public void testLimitInCompactTable() throws Throwable
0:     {
0:         createTable("CREATE TABLE %s (k int, v int, PRIMARY KEY (k, v) ) WITH COMPACT STORAGE ");
0: 
0:         for (int i = 0; i < 4; i++)
0:             for (int j = 0; j < 4; j++)
0:                 execute("INSERT INTO %s(k, v) VALUES (?, ?)", i, j);
0: 
0:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > 0 AND v <= 4 LIMIT 2"),
0:                    row(1),
0:                    row(2));
0:         assertRows(execute("SELECT v FROM %s WHERE k=0 AND v > -1 AND v <= 4 LIMIT 2"),
0:                    row(0),
0:                    row(1));
0:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 2"),
0:                    row(0, 1),
0:                    row(0, 2));
0:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > -1 AND v <= 4 LIMIT 2"),
0:                    row(0, 0),
0:                    row(0, 1));
0:         assertRows(execute("SELECT * FROM %s WHERE k IN (0, 1, 2) AND v > 0 AND v <= 4 LIMIT 6"),
0:                    row(0, 1),
0:                    row(0, 2),
0:                    row(0, 3),
0:                    row(1, 1),
0:                    row(1, 2),
0:                    row(1, 3));
0: 
0:         // strict bound (v > 1) over a range of partitions is not supported for compact storage if limit is provided
0:         assertInvalidThrow(InvalidRequestException.class, "SELECT * FROM %s WHERE v > 1 AND v <= 3 LIMIT 6 ALLOW FILTERING");
0:     }
0: }
============================================================================