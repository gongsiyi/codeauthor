1:d43b9ce: /*
1:d43b9ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:d43b9ce:  * or more contributor license agreements.  See the NOTICE file
1:d43b9ce:  * distributed with this work for additional information
1:d43b9ce:  * regarding copyright ownership.  The ASF licenses this file
1:d43b9ce:  * to you under the Apache License, Version 2.0 (the
1:d43b9ce:  * "License"); you may not use this file except in compliance
1:d43b9ce:  * with the License.  You may obtain a copy of the License at
1:d43b9ce:  *
1:d43b9ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d43b9ce:  *
1:d43b9ce:  * Unless required by applicable law or agreed to in writing, software
1:d43b9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d43b9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d43b9ce:  * See the License for the specific language governing permissions and
1:d43b9ce:  * limitations under the License.
1:d43b9ce:  */
1:d43b9ce: package org.apache.cassandra.utils.concurrent;
1:d43b9ce: 
1:d43b9ce: import java.util.concurrent.atomic.AtomicLong;
1:d43b9ce: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:d43b9ce: 
1:d43b9ce: import com.google.common.annotations.VisibleForTesting;
1:d43b9ce: 
1:d43b9ce: import org.apache.cassandra.utils.TimeSource;
1:d43b9ce: 
1:d43b9ce: /**
1:d43b9ce:  * This class extends ReentrantReadWriteLock to provide a write lock that can only be acquired at provided intervals.
1:d43b9ce:  */
1:d43b9ce: public class IntervalLock extends ReentrantReadWriteLock
1:d43b9ce: {
1:d43b9ce:     private final AtomicLong lastAcquire = new AtomicLong();
1:d43b9ce:     private final TimeSource timeSource;
1:d43b9ce: 
1:d43b9ce:     public IntervalLock(TimeSource timeSource)
1:d43b9ce:     {
1:d43b9ce:         this.timeSource = timeSource;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Try acquiring a write lock if the given interval is passed since the last call to this method.
1:d43b9ce:      *
1:d43b9ce:      * @param interval In millis.
1:d43b9ce:      * @return True if acquired and locked, false otherwise.
1:d43b9ce:      */
1:d43b9ce:     public boolean tryIntervalLock(long interval)
1:d43b9ce:     {
1:d43b9ce:         long now = timeSource.currentTimeMillis();
1:d43b9ce:         boolean acquired = (now - lastAcquire.get() >= interval) && writeLock().tryLock();
1:d43b9ce:         if (acquired)
1:d43b9ce:             lastAcquire.set(now);
1:d43b9ce: 
1:d43b9ce:         return acquired;
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     /**
1:d43b9ce:      * Release the last acquired interval lock.
1:d43b9ce:      */
1:d43b9ce:     public void releaseIntervalLock()
1:d43b9ce:     {
1:d43b9ce:         writeLock().unlock();
1:d43b9ce:     }
1:d43b9ce: 
1:d43b9ce:     @VisibleForTesting
1:d43b9ce:     public long getLastIntervalAcquire()
1:d43b9ce:     {
1:d43b9ce:         return lastAcquire.get();
1:d43b9ce:     }
1:d43b9ce: }
============================================================================
author:Sergio Bossa
-------------------------------------------------------------------------------
commit:d43b9ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils.concurrent;
1: 
1: import java.util.concurrent.atomic.AtomicLong;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: import org.apache.cassandra.utils.TimeSource;
1: 
1: /**
1:  * This class extends ReentrantReadWriteLock to provide a write lock that can only be acquired at provided intervals.
1:  */
1: public class IntervalLock extends ReentrantReadWriteLock
1: {
1:     private final AtomicLong lastAcquire = new AtomicLong();
1:     private final TimeSource timeSource;
1: 
1:     public IntervalLock(TimeSource timeSource)
1:     {
1:         this.timeSource = timeSource;
1:     }
1: 
1:     /**
1:      * Try acquiring a write lock if the given interval is passed since the last call to this method.
1:      *
1:      * @param interval In millis.
1:      * @return True if acquired and locked, false otherwise.
1:      */
1:     public boolean tryIntervalLock(long interval)
1:     {
1:         long now = timeSource.currentTimeMillis();
1:         boolean acquired = (now - lastAcquire.get() >= interval) && writeLock().tryLock();
1:         if (acquired)
1:             lastAcquire.set(now);
1: 
1:         return acquired;
1:     }
1: 
1:     /**
1:      * Release the last acquired interval lock.
1:      */
1:     public void releaseIntervalLock()
1:     {
1:         writeLock().unlock();
1:     }
1: 
1:     @VisibleForTesting
1:     public long getLastIntervalAcquire()
1:     {
1:         return lastAcquire.get();
1:     }
1: }
============================================================================