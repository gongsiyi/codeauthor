1:1352ebd: /*
1:1352ebd:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:1352ebd:  *  contributor license agreements.  See the NOTICE file distributed with
1:1352ebd:  *  this work for additional information regarding copyright ownership.
1:1352ebd:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:1352ebd:  *  (the "License"); you may not use this file except in compliance with
1:1352ebd:  *  the License.  You may obtain a copy of the License at
1:1352ebd:  *
1:1352ebd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1352ebd:  *
1:1352ebd:  *  Unless required by applicable law or agreed to in writing, software
1:1352ebd:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:1352ebd:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1352ebd:  *  See the License for the specific language governing permissions and
1:1352ebd:  *  limitations under the License.
1:1352ebd:  *
1:1352ebd:  */
1:1352ebd: 
1:1352ebd: package org.apache.cassandra;
1:1352ebd: 
1:1352ebd: import java.io.BufferedWriter;
1:1352ebd: import java.io.IOException;
1:1352ebd: import java.io.OutputStream;
1:1352ebd: import java.io.OutputStreamWriter;
1:1352ebd: import java.io.Writer;
1:1352ebd: import java.net.InetAddress;
1:1352ebd: import java.net.UnknownHostException;
1:1352ebd: import java.util.Date;
1:1352ebd: import java.util.Enumeration;
1:1352ebd: import java.util.Hashtable;
1:1352ebd: import java.util.Properties;
1:1352ebd: 
1:1352ebd: import javax.xml.parsers.DocumentBuilder;
1:1352ebd: import javax.xml.parsers.DocumentBuilderFactory;
1:1352ebd: 
1:1352ebd: import junit.framework.AssertionFailedError;
1:1352ebd: import junit.framework.Test;
1:1352ebd: 
1:1352ebd: import org.apache.tools.ant.BuildException;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.IgnoredTestListener;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;
1:1352ebd: import org.apache.tools.ant.taskdefs.optional.junit.XMLConstants;
1:1352ebd: import org.apache.tools.ant.util.DOMElementWriter;
1:1352ebd: import org.apache.tools.ant.util.DateUtils;
1:1352ebd: import org.apache.tools.ant.util.FileUtils;
1:1352ebd: import org.w3c.dom.Document;
1:1352ebd: import org.w3c.dom.Element;
1:1352ebd: import org.w3c.dom.Text;
1:1352ebd: 
1:1352ebd: 
1:1352ebd: /**
1:1352ebd:  * Prints XML output of the test to a specified Writer.
1:1352ebd:  *
1:1352ebd:  * @see FormatterElement
1:1352ebd:  */
1:1352ebd: 
1:1352ebd: public class CassandraXMLJUnitResultFormatter implements JUnitResultFormatter, XMLConstants, IgnoredTestListener {
1:1352ebd: 
1:1352ebd:     private static final double ONE_SECOND = 1000.0;
1:1352ebd: 
1:1352ebd:     /** constant for unnnamed testsuites/cases */
1:1352ebd:     private static final String UNKNOWN = "unknown";
1:1352ebd: 
1:1352ebd:     private static DocumentBuilder getDocumentBuilder() {
1:1352ebd:         try {
1:1352ebd:             return DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:1352ebd:         } catch (final Exception exc) {
1:1352ebd:             throw new ExceptionInInitializerError(exc);
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     private static final String tag = System.getProperty("cassandra.testtag", "");
1:1352ebd: 
1:c8d3cc1:     /*
1:c8d3cc1:      * Set the property for the test suite name so that log configuration can pick it up
1:c8d3cc1:      * and log to a file specific to this test suite
1:c8d3cc1:      */
1:c8d3cc1:     static
1:c8d3cc1:     {
1:c8d3cc1:         String command = System.getProperty("sun.java.command");
1:c8d3cc1:         String args[] = command.split(" ");
1:c8d3cc1:         System.setProperty("suitename", args[1]);
1:c8d3cc1:     }
1:c8d3cc1: 
1:1352ebd:     /**
1:1352ebd:      * The XML document.
1:1352ebd:      */
1:1352ebd:     private Document doc;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * The wrapper for the whole testsuite.
1:1352ebd:      */
1:1352ebd:     private Element rootElement;
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Element for the current test.
1:1352ebd:      *
1:1352ebd:      * The keying of this map is a bit of a hack: tests are keyed by caseName(className) since
1:1352ebd:      * the Test we get for Test-start isn't the same as the Test we get during test-assumption-fail,
1:1352ebd:      * so we can't easily match Test objects without manually iterating over all keys and checking
1:1352ebd:      * individual fields.
1:1352ebd:      */
1:1352ebd:     private final Hashtable<String, Element> testElements = new Hashtable<String, Element>();
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * tests that failed.
1:1352ebd:      */
1:1352ebd:     private final Hashtable failedTests = new Hashtable();
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Tests that were skipped.
1:1352ebd:      */
1:1352ebd:     private final Hashtable<String, Test> skippedTests = new Hashtable<String, Test>();
1:1352ebd:     /**
1:1352ebd:      * Tests that were ignored. See the note above about the key being a bit of a hack.
1:1352ebd:      */
1:1352ebd:     private final Hashtable<String, Test> ignoredTests = new Hashtable<String, Test>();
1:1352ebd:     /**
1:1352ebd:      * Timing helper.
1:1352ebd:      */
1:1352ebd:     private final Hashtable<String, Long> testStarts = new Hashtable<String, Long>();
1:1352ebd:     /**
1:1352ebd:      * Where to write the log to.
1:1352ebd:      */
1:1352ebd:     private OutputStream out;
1:1352ebd: 
1:1352ebd:     /** No arg constructor. */
1:1352ebd:     public CassandraXMLJUnitResultFormatter() {
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /** {@inheritDoc}. */
1:1352ebd:     public void setOutput(final OutputStream out) {
1:1352ebd:         this.out = out;
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /** {@inheritDoc}. */
1:1352ebd:     public void setSystemOutput(final String out) {
1:1352ebd:         formatOutput(SYSTEM_OUT, out);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /** {@inheritDoc}. */
1:1352ebd:     public void setSystemError(final String out) {
1:1352ebd:         formatOutput(SYSTEM_ERR, out);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * The whole testsuite started.
1:1352ebd:      * @param suite the testsuite.
1:1352ebd:      */
1:1352ebd:     public void startTestSuite(final JUnitTest suite) {
1:1352ebd:         doc = getDocumentBuilder().newDocument();
1:1352ebd:         rootElement = doc.createElement(TESTSUITE);
1:1352ebd:         String n = suite.getName();
1:1352ebd: //        if (n != null && !tag.isEmpty())
1:1352ebd: //            n = n + "-" + tag;
1:1352ebd:         rootElement.setAttribute(ATTR_NAME, n == null ? UNKNOWN : n);
1:1352ebd: 
1:1352ebd:         //add the timestamp
1:1352ebd:         final String timestamp = DateUtils.format(new Date(),
1:1352ebd:                 DateUtils.ISO8601_DATETIME_PATTERN);
1:1352ebd:         rootElement.setAttribute(TIMESTAMP, timestamp);
1:1352ebd:         //and the hostname.
1:1352ebd:         rootElement.setAttribute(HOSTNAME, getHostname());
1:1352ebd: 
1:1352ebd:         // Output properties
1:1352ebd:         final Element propsElement = doc.createElement(PROPERTIES);
1:1352ebd:         rootElement.appendChild(propsElement);
1:1352ebd:         final Properties props = suite.getProperties();
1:1352ebd:         if (props != null) {
1:1352ebd:             final Enumeration e = props.propertyNames();
1:1352ebd:             while (e.hasMoreElements()) {
1:1352ebd:                 final String name = (String) e.nextElement();
1:1352ebd:                 final Element propElement = doc.createElement(PROPERTY);
1:1352ebd:                 propElement.setAttribute(ATTR_NAME, name);
1:1352ebd:                 propElement.setAttribute(ATTR_VALUE, props.getProperty(name));
1:1352ebd:                 propsElement.appendChild(propElement);
1:1352ebd:             }
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * get the local hostname
1:1352ebd:      * @return the name of the local host, or "localhost" if we cannot work it out
1:1352ebd:      */
1:1352ebd:     private String getHostname()  {
1:1352ebd:         String hostname = "localhost";
1:1352ebd:         try {
1:1352ebd:             final InetAddress localHost = InetAddress.getLocalHost();
1:1352ebd:             if (localHost != null) {
1:1352ebd:                 hostname = localHost.getHostName();
1:1352ebd:             }
1:1352ebd:         } catch (final UnknownHostException e) {
1:1352ebd:             // fall back to default 'localhost'
1:1352ebd:         }
1:1352ebd:         return hostname;
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * The whole testsuite ended.
1:1352ebd:      * @param suite the testsuite.
1:1352ebd:      * @throws BuildException on error.
1:1352ebd:      */
1:1352ebd:     public void endTestSuite(final JUnitTest suite) throws BuildException {
1:1352ebd:         rootElement.setAttribute(ATTR_TESTS, "" + suite.runCount());
1:1352ebd:         rootElement.setAttribute(ATTR_FAILURES, "" + suite.failureCount());
1:1352ebd:         rootElement.setAttribute(ATTR_ERRORS, "" + suite.errorCount());
1:1352ebd:         rootElement.setAttribute(ATTR_SKIPPED, "" + suite.skipCount());
1:1352ebd:         rootElement.setAttribute(
1:1352ebd:             ATTR_TIME, "" + (suite.getRunTime() / ONE_SECOND));
1:1352ebd:         if (out != null) {
1:1352ebd:             Writer wri = null;
1:1352ebd:             try {
1:1352ebd:                 wri = new BufferedWriter(new OutputStreamWriter(out, "UTF8"));
1:1352ebd:                 wri.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
1:1352ebd:                 (new DOMElementWriter()).write(rootElement, wri, 0, "  ");
1:1352ebd:             } catch (final IOException exc) {
1:1352ebd:                 throw new BuildException("Unable to write log file", exc);
1:1352ebd:             } finally {
1:1352ebd:                 if (wri != null) {
1:1352ebd:                     try {
1:1352ebd:                         wri.flush();
1:1352ebd:                     } catch (final IOException ex) {
1:1352ebd:                         // ignore
1:1352ebd:                     }
1:1352ebd:                 }
1:1352ebd:                 if (out != System.out && out != System.err) {
1:1352ebd:                     FileUtils.close(wri);
1:1352ebd:                 }
1:1352ebd:             }
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener.
1:1352ebd:      *
1:1352ebd:      * <p>A new Test is started.
1:1352ebd:      * @param t the test.
1:1352ebd:      */
1:1352ebd:     public void startTest(final Test t) {
1:1352ebd:         testStarts.put(createDescription(t), System.currentTimeMillis());
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     private static String createDescription(final Test test) throws BuildException {
1:1352ebd:         if (!tag.isEmpty())
1:1352ebd:             return JUnitVersionHelper.getTestCaseName(test) + "-" + tag +"(" + JUnitVersionHelper.getTestCaseClassName(test) + ")";
1:1352ebd:         return JUnitVersionHelper.getTestCaseName(test) + "(" + JUnitVersionHelper.getTestCaseClassName(test) + ")";
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener.
1:1352ebd:      *
1:1352ebd:      * <p>A Test is finished.
1:1352ebd:      * @param test the test.
1:1352ebd:      */
1:1352ebd:     public void endTest(final Test test) {
1:1352ebd:         final String testDescription = createDescription(test);
1:1352ebd: 
1:1352ebd:         // Fix for bug #5637 - if a junit.extensions.TestSetup is
1:1352ebd:         // used and throws an exception during setUp then startTest
1:1352ebd:         // would never have been called
1:1352ebd:         if (!testStarts.containsKey(testDescription)) {
1:1352ebd:             startTest(test);
1:1352ebd:         }
1:1352ebd:         Element currentTest;
1:1352ebd:         if (!failedTests.containsKey(test) && !skippedTests.containsKey(testDescription) && !ignoredTests.containsKey(testDescription)) {
1:1352ebd:             currentTest = doc.createElement(TESTCASE);
1:1352ebd:             String n = JUnitVersionHelper.getTestCaseName(test);
1:1352ebd:             if (n != null && !tag.isEmpty())
1:1352ebd:                 n = n + "-" + tag;
1:1352ebd:             currentTest.setAttribute(ATTR_NAME,
1:1352ebd:                                      n == null ? UNKNOWN : n);
1:1352ebd:             // a TestSuite can contain Tests from multiple classes,
1:1352ebd:             // even tests with the same name - disambiguate them.
1:1352ebd:             currentTest.setAttribute(ATTR_CLASSNAME,
1:1352ebd:                     JUnitVersionHelper.getTestCaseClassName(test));
1:1352ebd:             rootElement.appendChild(currentTest);
1:1352ebd:             testElements.put(createDescription(test), currentTest);
1:1352ebd:         } else {
1:1352ebd:             currentTest = testElements.get(testDescription);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         final Long l = testStarts.get(createDescription(test));
1:1352ebd:         currentTest.setAttribute(ATTR_TIME,
1:1352ebd:             "" + ((System.currentTimeMillis() - l) / ONE_SECOND));
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener for JUnit &lt;= 3.4.
1:1352ebd:      *
1:1352ebd:      * <p>A Test failed.
1:1352ebd:      * @param test the test.
1:1352ebd:      * @param t the exception.
1:1352ebd:      */
1:1352ebd:     public void addFailure(final Test test, final Throwable t) {
1:1352ebd:         formatError(FAILURE, test, t);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener for JUnit &gt; 3.4.
1:1352ebd:      *
1:1352ebd:      * <p>A Test failed.
1:1352ebd:      * @param test the test.
1:1352ebd:      * @param t the assertion.
1:1352ebd:      */
1:1352ebd:     public void addFailure(final Test test, final AssertionFailedError t) {
1:1352ebd:         addFailure(test, (Throwable) t);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     /**
1:1352ebd:      * Interface TestListener.
1:1352ebd:      *
1:1352ebd:      * <p>An error occurred while running the test.
1:1352ebd:      * @param test the test.
1:1352ebd:      * @param t the error.
1:1352ebd:      */
1:1352ebd:     public void addError(final Test test, final Throwable t) {
1:1352ebd:         formatError(ERROR, test, t);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     private void formatError(final String type, final Test test, final Throwable t) {
1:1352ebd:         if (test != null) {
1:1352ebd:             endTest(test);
1:1352ebd:             failedTests.put(test, test);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         final Element nested = doc.createElement(type);
1:1352ebd:         Element currentTest;
1:1352ebd:         if (test != null) {
1:1352ebd:             currentTest = testElements.get(createDescription(test));
1:1352ebd:         } else {
1:1352ebd:             currentTest = rootElement;
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         currentTest.appendChild(nested);
1:1352ebd: 
1:1352ebd:         final String message = t.getMessage();
1:1352ebd:         if (message != null && message.length() > 0) {
1:1352ebd:             nested.setAttribute(ATTR_MESSAGE, t.getMessage());
1:1352ebd:         }
1:1352ebd:         nested.setAttribute(ATTR_TYPE, t.getClass().getName());
1:1352ebd: 
1:1352ebd:         final String strace = JUnitTestRunner.getFilteredTrace(t);
1:1352ebd:         final Text trace = doc.createTextNode(strace);
1:1352ebd:         nested.appendChild(trace);
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     private void formatOutput(final String type, final String output) {
1:1352ebd:         final Element nested = doc.createElement(type);
1:1352ebd:         rootElement.appendChild(nested);
1:1352ebd:         nested.appendChild(doc.createCDATASection(output));
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     public void testIgnored(final Test test) {
1:1352ebd:         formatSkip(test, JUnitVersionHelper.getIgnoreMessage(test));
1:1352ebd:         if (test != null) {
1:1352ebd:             ignoredTests.put(createDescription(test), test);
1:1352ebd:         }
1:1352ebd:     }
1:1352ebd: 
1:1352ebd: 
1:1352ebd:     public void formatSkip(final Test test, final String message) {
1:1352ebd:         if (test != null) {
1:1352ebd:             endTest(test);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         final Element nested = doc.createElement("skipped");
1:1352ebd: 
1:1352ebd:         if (message != null) {
1:1352ebd:             nested.setAttribute("message", message);
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         Element currentTest;
1:1352ebd:         if (test != null) {
1:1352ebd:             currentTest = testElements.get(createDescription(test));
1:1352ebd:         } else {
1:1352ebd:             currentTest = rootElement;
1:1352ebd:         }
1:1352ebd: 
1:1352ebd:         currentTest.appendChild(nested);
1:1352ebd: 
1:1352ebd:     }
1:1352ebd: 
1:1352ebd:     public void testAssumptionFailure(final Test test, final Throwable failure) {
1:1352ebd:         formatSkip(test, failure.getMessage());
1:1352ebd:         skippedTests.put(createDescription(test), test);
1:1352ebd: 
1:1352ebd:     }
1:1352ebd: } // XMLJUnitResultFormatter
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c8d3cc1
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * Set the property for the test suite name so that log configuration can pick it up
1:      * and log to a file specific to this test suite
1:      */
1:     static
1:     {
1:         String command = System.getProperty("sun.java.command");
1:         String args[] = command.split(" ");
1:         System.setProperty("suitename", args[1]);
1:     }
1: 
author:Jason Brown
-------------------------------------------------------------------------------
commit:1352ebd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  *
1:  */
1: 
1: package org.apache.cassandra;
1: 
1: import java.io.BufferedWriter;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.OutputStreamWriter;
1: import java.io.Writer;
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.Date;
1: import java.util.Enumeration;
1: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: 
1: import junit.framework.AssertionFailedError;
1: import junit.framework.Test;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.taskdefs.optional.junit.IgnoredTestListener;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner;
1: import org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelper;
1: import org.apache.tools.ant.taskdefs.optional.junit.XMLConstants;
1: import org.apache.tools.ant.util.DOMElementWriter;
1: import org.apache.tools.ant.util.DateUtils;
1: import org.apache.tools.ant.util.FileUtils;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Text;
1: 
1: 
1: /**
1:  * Prints XML output of the test to a specified Writer.
1:  *
1:  * @see FormatterElement
1:  */
1: 
1: public class CassandraXMLJUnitResultFormatter implements JUnitResultFormatter, XMLConstants, IgnoredTestListener {
1: 
1:     private static final double ONE_SECOND = 1000.0;
1: 
1:     /** constant for unnnamed testsuites/cases */
1:     private static final String UNKNOWN = "unknown";
1: 
1:     private static DocumentBuilder getDocumentBuilder() {
1:         try {
1:             return DocumentBuilderFactory.newInstance().newDocumentBuilder();
1:         } catch (final Exception exc) {
1:             throw new ExceptionInInitializerError(exc);
1:         }
1:     }
1: 
1:     private static final String tag = System.getProperty("cassandra.testtag", "");
1: 
1:     /**
1:      * The XML document.
1:      */
1:     private Document doc;
1: 
1:     /**
1:      * The wrapper for the whole testsuite.
1:      */
1:     private Element rootElement;
1: 
1:     /**
1:      * Element for the current test.
1:      *
1:      * The keying of this map is a bit of a hack: tests are keyed by caseName(className) since
1:      * the Test we get for Test-start isn't the same as the Test we get during test-assumption-fail,
1:      * so we can't easily match Test objects without manually iterating over all keys and checking
1:      * individual fields.
1:      */
1:     private final Hashtable<String, Element> testElements = new Hashtable<String, Element>();
1: 
1:     /**
1:      * tests that failed.
1:      */
1:     private final Hashtable failedTests = new Hashtable();
1: 
1:     /**
1:      * Tests that were skipped.
1:      */
1:     private final Hashtable<String, Test> skippedTests = new Hashtable<String, Test>();
1:     /**
1:      * Tests that were ignored. See the note above about the key being a bit of a hack.
1:      */
1:     private final Hashtable<String, Test> ignoredTests = new Hashtable<String, Test>();
1:     /**
1:      * Timing helper.
1:      */
1:     private final Hashtable<String, Long> testStarts = new Hashtable<String, Long>();
1:     /**
1:      * Where to write the log to.
1:      */
1:     private OutputStream out;
1: 
1:     /** No arg constructor. */
1:     public CassandraXMLJUnitResultFormatter() {
1:     }
1: 
1:     /** {@inheritDoc}. */
1:     public void setOutput(final OutputStream out) {
1:         this.out = out;
1:     }
1: 
1:     /** {@inheritDoc}. */
1:     public void setSystemOutput(final String out) {
1:         formatOutput(SYSTEM_OUT, out);
1:     }
1: 
1:     /** {@inheritDoc}. */
1:     public void setSystemError(final String out) {
1:         formatOutput(SYSTEM_ERR, out);
1:     }
1: 
1:     /**
1:      * The whole testsuite started.
1:      * @param suite the testsuite.
1:      */
1:     public void startTestSuite(final JUnitTest suite) {
1:         doc = getDocumentBuilder().newDocument();
1:         rootElement = doc.createElement(TESTSUITE);
1:         String n = suite.getName();
1: //        if (n != null && !tag.isEmpty())
1: //            n = n + "-" + tag;
1:         rootElement.setAttribute(ATTR_NAME, n == null ? UNKNOWN : n);
1: 
1:         //add the timestamp
1:         final String timestamp = DateUtils.format(new Date(),
1:                 DateUtils.ISO8601_DATETIME_PATTERN);
1:         rootElement.setAttribute(TIMESTAMP, timestamp);
1:         //and the hostname.
1:         rootElement.setAttribute(HOSTNAME, getHostname());
1: 
1:         // Output properties
1:         final Element propsElement = doc.createElement(PROPERTIES);
1:         rootElement.appendChild(propsElement);
1:         final Properties props = suite.getProperties();
1:         if (props != null) {
1:             final Enumeration e = props.propertyNames();
1:             while (e.hasMoreElements()) {
1:                 final String name = (String) e.nextElement();
1:                 final Element propElement = doc.createElement(PROPERTY);
1:                 propElement.setAttribute(ATTR_NAME, name);
1:                 propElement.setAttribute(ATTR_VALUE, props.getProperty(name));
1:                 propsElement.appendChild(propElement);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * get the local hostname
1:      * @return the name of the local host, or "localhost" if we cannot work it out
1:      */
1:     private String getHostname()  {
1:         String hostname = "localhost";
1:         try {
1:             final InetAddress localHost = InetAddress.getLocalHost();
1:             if (localHost != null) {
1:                 hostname = localHost.getHostName();
1:             }
1:         } catch (final UnknownHostException e) {
1:             // fall back to default 'localhost'
1:         }
1:         return hostname;
1:     }
1: 
1:     /**
1:      * The whole testsuite ended.
1:      * @param suite the testsuite.
1:      * @throws BuildException on error.
1:      */
1:     public void endTestSuite(final JUnitTest suite) throws BuildException {
1:         rootElement.setAttribute(ATTR_TESTS, "" + suite.runCount());
1:         rootElement.setAttribute(ATTR_FAILURES, "" + suite.failureCount());
1:         rootElement.setAttribute(ATTR_ERRORS, "" + suite.errorCount());
1:         rootElement.setAttribute(ATTR_SKIPPED, "" + suite.skipCount());
1:         rootElement.setAttribute(
1:             ATTR_TIME, "" + (suite.getRunTime() / ONE_SECOND));
1:         if (out != null) {
1:             Writer wri = null;
1:             try {
1:                 wri = new BufferedWriter(new OutputStreamWriter(out, "UTF8"));
1:                 wri.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
1:                 (new DOMElementWriter()).write(rootElement, wri, 0, "  ");
1:             } catch (final IOException exc) {
1:                 throw new BuildException("Unable to write log file", exc);
1:             } finally {
1:                 if (wri != null) {
1:                     try {
1:                         wri.flush();
1:                     } catch (final IOException ex) {
1:                         // ignore
1:                     }
1:                 }
1:                 if (out != System.out && out != System.err) {
1:                     FileUtils.close(wri);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Interface TestListener.
1:      *
1:      * <p>A new Test is started.
1:      * @param t the test.
1:      */
1:     public void startTest(final Test t) {
1:         testStarts.put(createDescription(t), System.currentTimeMillis());
1:     }
1: 
1:     private static String createDescription(final Test test) throws BuildException {
1:         if (!tag.isEmpty())
1:             return JUnitVersionHelper.getTestCaseName(test) + "-" + tag +"(" + JUnitVersionHelper.getTestCaseClassName(test) + ")";
1:         return JUnitVersionHelper.getTestCaseName(test) + "(" + JUnitVersionHelper.getTestCaseClassName(test) + ")";
1:     }
1: 
1:     /**
1:      * Interface TestListener.
1:      *
1:      * <p>A Test is finished.
1:      * @param test the test.
1:      */
1:     public void endTest(final Test test) {
1:         final String testDescription = createDescription(test);
1: 
1:         // Fix for bug #5637 - if a junit.extensions.TestSetup is
1:         // used and throws an exception during setUp then startTest
1:         // would never have been called
1:         if (!testStarts.containsKey(testDescription)) {
1:             startTest(test);
1:         }
1:         Element currentTest;
1:         if (!failedTests.containsKey(test) && !skippedTests.containsKey(testDescription) && !ignoredTests.containsKey(testDescription)) {
1:             currentTest = doc.createElement(TESTCASE);
1:             String n = JUnitVersionHelper.getTestCaseName(test);
1:             if (n != null && !tag.isEmpty())
1:                 n = n + "-" + tag;
1:             currentTest.setAttribute(ATTR_NAME,
1:                                      n == null ? UNKNOWN : n);
1:             // a TestSuite can contain Tests from multiple classes,
1:             // even tests with the same name - disambiguate them.
1:             currentTest.setAttribute(ATTR_CLASSNAME,
1:                     JUnitVersionHelper.getTestCaseClassName(test));
1:             rootElement.appendChild(currentTest);
1:             testElements.put(createDescription(test), currentTest);
1:         } else {
1:             currentTest = testElements.get(testDescription);
1:         }
1: 
1:         final Long l = testStarts.get(createDescription(test));
1:         currentTest.setAttribute(ATTR_TIME,
1:             "" + ((System.currentTimeMillis() - l) / ONE_SECOND));
1:     }
1: 
1:     /**
1:      * Interface TestListener for JUnit &lt;= 3.4.
1:      *
1:      * <p>A Test failed.
1:      * @param test the test.
1:      * @param t the exception.
1:      */
1:     public void addFailure(final Test test, final Throwable t) {
1:         formatError(FAILURE, test, t);
1:     }
1: 
1:     /**
1:      * Interface TestListener for JUnit &gt; 3.4.
1:      *
1:      * <p>A Test failed.
1:      * @param test the test.
1:      * @param t the assertion.
1:      */
1:     public void addFailure(final Test test, final AssertionFailedError t) {
1:         addFailure(test, (Throwable) t);
1:     }
1: 
1:     /**
1:      * Interface TestListener.
1:      *
1:      * <p>An error occurred while running the test.
1:      * @param test the test.
1:      * @param t the error.
1:      */
1:     public void addError(final Test test, final Throwable t) {
1:         formatError(ERROR, test, t);
1:     }
1: 
1:     private void formatError(final String type, final Test test, final Throwable t) {
1:         if (test != null) {
1:             endTest(test);
1:             failedTests.put(test, test);
1:         }
1: 
1:         final Element nested = doc.createElement(type);
1:         Element currentTest;
1:         if (test != null) {
1:             currentTest = testElements.get(createDescription(test));
1:         } else {
1:             currentTest = rootElement;
1:         }
1: 
1:         currentTest.appendChild(nested);
1: 
1:         final String message = t.getMessage();
1:         if (message != null && message.length() > 0) {
1:             nested.setAttribute(ATTR_MESSAGE, t.getMessage());
1:         }
1:         nested.setAttribute(ATTR_TYPE, t.getClass().getName());
1: 
1:         final String strace = JUnitTestRunner.getFilteredTrace(t);
1:         final Text trace = doc.createTextNode(strace);
1:         nested.appendChild(trace);
1:     }
1: 
1:     private void formatOutput(final String type, final String output) {
1:         final Element nested = doc.createElement(type);
1:         rootElement.appendChild(nested);
1:         nested.appendChild(doc.createCDATASection(output));
1:     }
1: 
1:     public void testIgnored(final Test test) {
1:         formatSkip(test, JUnitVersionHelper.getIgnoreMessage(test));
1:         if (test != null) {
1:             ignoredTests.put(createDescription(test), test);
1:         }
1:     }
1: 
1: 
1:     public void formatSkip(final Test test, final String message) {
1:         if (test != null) {
1:             endTest(test);
1:         }
1: 
1:         final Element nested = doc.createElement("skipped");
1: 
1:         if (message != null) {
1:             nested.setAttribute("message", message);
1:         }
1: 
1:         Element currentTest;
1:         if (test != null) {
1:             currentTest = testElements.get(createDescription(test));
1:         } else {
1:             currentTest = rootElement;
1:         }
1: 
1:         currentTest.appendChild(nested);
1: 
1:     }
1: 
1:     public void testAssumptionFailure(final Test test, final Throwable failure) {
1:         formatSkip(test, failure.getMessage());
1:         skippedTests.put(createDescription(test), test);
1: 
1:     }
1: } // XMLJUnitResultFormatter
============================================================================