1:7751588: /*
1:7751588:  * Licensed to the Apache Software Foundation (ASF) under one
1:7751588:  * or more contributor license agreements.  See the NOTICE file
1:7751588:  * distributed with this work for additional information
1:7751588:  * regarding copyright ownership.  The ASF licenses this file
1:7751588:  * to you under the Apache License, Version 2.0 (the
1:7751588:  * "License"); you may not use this file except in compliance
1:7751588:  * with the License.  You may obtain a copy of the License at
1:7751588:  *
1:7751588:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7751588:  *
1:7751588:  * Unless required by applicable law or agreed to in writing, software
1:7751588:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7751588:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7751588:  * See the License for the specific language governing permissions and
1:7751588:  * limitations under the License.
1:7751588:  */
1:7751588: package org.apache.cassandra.net;
1:7751588: 
1:7751588: import java.net.InetAddress;
1:7751588: import java.net.UnknownHostException;
1:7751588: import java.util.function.Predicate;
1:7751588: 
1:7751588: /**
1:7751588:  * Starting point for mocking {@link MessagingService} interactions. Outgoing messages can be
1:7751588:  * intercepted by first creating a {@link MatcherResponse} by calling {@link MockMessagingService#when(Matcher)}.
1:7751588:  * Alternatively {@link Matcher}s can be created by using helper methods such as {@link #to(InetAddress)},
1:7751588:  * {@link #verb(MessagingService.Verb)} or {@link #payload(Predicate)} and may also be
1:7751588:  * nested using {@link MockMessagingService#all(Matcher[])} or {@link MockMessagingService#any(Matcher[])}.
1:7751588:  * After each test, {@link MockMessagingService#cleanup()} must be called for free listeners registered
1:7751588:  * in {@link MessagingService}.
1:7751588:  */
1:7751588: public class MockMessagingService
1:7751588: {
1:7751588: 
1:7751588:     private MockMessagingService()
1:7751588:     {
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a MatcherResponse based on specified matcher.
1:7751588:      */
1:7751588:     public static MatcherResponse when(Matcher matcher)
1:7751588:     {
1:7751588:         return new MatcherResponse(matcher);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Unsubscribes any handlers added by calling {@link MessagingService#addMessageSink(IMessageSink)}.
1:7751588:      * This should be called after each test.
1:7751588:      */
1:7751588:     public static void cleanup()
1:7751588:     {
1:7751588:         MessagingService.instance().clearMessageSinks();
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a matcher that will indicate if the target address of the outgoing message equals the
1:7751588:      * provided address.
1:7751588:      */
1:7751588:     public static Matcher<InetAddress> to(String address)
1:7751588:     {
1:7751588:         try
1:7751588:         {
1:7751588:             return to(InetAddress.getByName(address));
1:7751588:         }
1:7751588:         catch (UnknownHostException e)
1:7751588:         {
1:7751588:             throw new RuntimeException(e);
1:7751588:         }
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a matcher that will indicate if the target address of the outgoing message equals the
1:7751588:      * provided address.
1:7751588:      */
1:7751588:     public static Matcher<InetAddress> to(InetAddress address)
1:7751588:     {
1:7751588:         return (in, to) -> to == address || to.equals(address);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a matcher that will indicate if the verb of the outgoing message equals the
1:7751588:      * provided value.
1:7751588:      */
1:7751588:     public static Matcher<MessagingService.Verb> verb(MessagingService.Verb verb)
1:7751588:     {
1:7751588:         return (in, to) -> in.verb == verb;
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a matcher based on the result of the provided predicate called with the outgoing message.
1:7751588:      */
1:7751588:     public static <T> Matcher<T> message(Predicate<MessageOut<T>> fn)
1:7751588:     {
1:7751588:         return (msg, to) -> fn.test(msg);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Creates a matcher based on the result of the provided predicate called with the outgoing message's payload.
1:7751588:      */
1:7751588:     public static <T> Matcher<T> payload(Predicate<T> fn)
1:7751588:     {
1:7751588:         return (msg, to) -> fn.test(msg.payload);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Inverts boolean result of wrapped matcher.
1:7751588:      */
1:7751588:     public static <T> Matcher<T> not(Matcher<T> matcher)
1:7751588:     {
1:7751588:         return (o, to) -> !matcher.matches(o, to);
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Indicates true in case all provided matchers returned true.
1:7751588:      */
1:7751588:     public static <T> Matcher<?> all(Matcher<?>... matchers)
1:7751588:     {
1:7751588:         return (MessageOut<T> out, InetAddress to) -> {
1:7751588:             for (Matcher matcher : matchers)
1:7751588:             {
1:7751588:                 if (!matcher.matches(out, to))
1:7751588:                     return false;
1:7751588:             }
1:7751588:             return true;
1:7751588:         };
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * Indicates true in case at least a single provided matcher returned true.
1:7751588:      */
1:7751588:     public static <T> Matcher<?> any(Matcher<?>... matchers)
1:7751588:     {
1:7751588:         return (MessageOut<T> out, InetAddress to) -> {
1:7751588:             for (Matcher matcher : matchers)
1:7751588:             {
1:7751588:                 if (matcher.matches(out, to))
1:7751588:                     return true;
1:7751588:             }
1:7751588:             return false;
1:7751588:         };
1:7751588:     }
1:7751588: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:7751588
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.net;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.function.Predicate;
1: 
1: /**
1:  * Starting point for mocking {@link MessagingService} interactions. Outgoing messages can be
1:  * intercepted by first creating a {@link MatcherResponse} by calling {@link MockMessagingService#when(Matcher)}.
1:  * Alternatively {@link Matcher}s can be created by using helper methods such as {@link #to(InetAddress)},
1:  * {@link #verb(MessagingService.Verb)} or {@link #payload(Predicate)} and may also be
1:  * nested using {@link MockMessagingService#all(Matcher[])} or {@link MockMessagingService#any(Matcher[])}.
1:  * After each test, {@link MockMessagingService#cleanup()} must be called for free listeners registered
1:  * in {@link MessagingService}.
1:  */
1: public class MockMessagingService
1: {
1: 
1:     private MockMessagingService()
1:     {
1:     }
1: 
1:     /**
1:      * Creates a MatcherResponse based on specified matcher.
1:      */
1:     public static MatcherResponse when(Matcher matcher)
1:     {
1:         return new MatcherResponse(matcher);
1:     }
1: 
1:     /**
1:      * Unsubscribes any handlers added by calling {@link MessagingService#addMessageSink(IMessageSink)}.
1:      * This should be called after each test.
1:      */
1:     public static void cleanup()
1:     {
1:         MessagingService.instance().clearMessageSinks();
1:     }
1: 
1:     /**
1:      * Creates a matcher that will indicate if the target address of the outgoing message equals the
1:      * provided address.
1:      */
1:     public static Matcher<InetAddress> to(String address)
1:     {
1:         try
1:         {
1:             return to(InetAddress.getByName(address));
1:         }
1:         catch (UnknownHostException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Creates a matcher that will indicate if the target address of the outgoing message equals the
1:      * provided address.
1:      */
1:     public static Matcher<InetAddress> to(InetAddress address)
1:     {
1:         return (in, to) -> to == address || to.equals(address);
1:     }
1: 
1:     /**
1:      * Creates a matcher that will indicate if the verb of the outgoing message equals the
1:      * provided value.
1:      */
1:     public static Matcher<MessagingService.Verb> verb(MessagingService.Verb verb)
1:     {
1:         return (in, to) -> in.verb == verb;
1:     }
1: 
1:     /**
1:      * Creates a matcher based on the result of the provided predicate called with the outgoing message.
1:      */
1:     public static <T> Matcher<T> message(Predicate<MessageOut<T>> fn)
1:     {
1:         return (msg, to) -> fn.test(msg);
1:     }
1: 
1:     /**
1:      * Creates a matcher based on the result of the provided predicate called with the outgoing message's payload.
1:      */
1:     public static <T> Matcher<T> payload(Predicate<T> fn)
1:     {
1:         return (msg, to) -> fn.test(msg.payload);
1:     }
1: 
1:     /**
1:      * Inverts boolean result of wrapped matcher.
1:      */
1:     public static <T> Matcher<T> not(Matcher<T> matcher)
1:     {
1:         return (o, to) -> !matcher.matches(o, to);
1:     }
1: 
1:     /**
1:      * Indicates true in case all provided matchers returned true.
1:      */
1:     public static <T> Matcher<?> all(Matcher<?>... matchers)
1:     {
1:         return (MessageOut<T> out, InetAddress to) -> {
1:             for (Matcher matcher : matchers)
1:             {
1:                 if (!matcher.matches(out, to))
1:                     return false;
1:             }
1:             return true;
1:         };
1:     }
1: 
1:     /**
1:      * Indicates true in case at least a single provided matcher returned true.
1:      */
1:     public static <T> Matcher<?> any(Matcher<?>... matchers)
1:     {
1:         return (MessageOut<T> out, InetAddress to) -> {
1:             for (Matcher matcher : matchers)
1:             {
1:                 if (matcher.matches(out, to))
1:                     return true;
1:             }
1:             return false;
1:         };
1:     }
1: }
============================================================================