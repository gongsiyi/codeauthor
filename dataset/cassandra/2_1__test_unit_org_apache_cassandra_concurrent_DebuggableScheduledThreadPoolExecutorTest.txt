1:7af9c6a: /*
1:7af9c6a:  * Licensed to the Apache Software Foundation (ASF) under one
1:7af9c6a:  * or more contributor license agreements.  See the NOTICE file
1:7af9c6a:  * distributed with this work for additional information
1:7af9c6a:  * regarding copyright ownership.  The ASF licenses this file
1:7af9c6a:  * to you under the Apache License, Version 2.0 (the
1:7af9c6a:  * "License"); you may not use this file except in compliance
1:7af9c6a:  * with the License.  You may obtain a copy of the License at
1:7af9c6a:  *
1:7af9c6a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7af9c6a:  *
1:7af9c6a:  * Unless required by applicable law or agreed to in writing, software
1:7af9c6a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7af9c6a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7af9c6a:  * See the License for the specific language governing permissions and
1:7af9c6a:  * limitations under the License.
1:7af9c6a:  */
1:7af9c6a: 
1:7af9c6a: package org.apache.cassandra.concurrent;
1:7af9c6a: 
1:7af9c6a: import java.io.IOException;
1:7af9c6a: import java.util.concurrent.CancellationException;
1:7af9c6a: import java.util.concurrent.ExecutionException;
1:7af9c6a: import java.util.concurrent.ScheduledFuture;
1:7af9c6a: import java.util.concurrent.TimeUnit;
1:7af9c6a: import java.util.concurrent.TimeoutException;
1:7af9c6a: import java.util.concurrent.atomic.AtomicInteger;
1:7af9c6a: 
1:7af9c6a: import org.junit.BeforeClass;
1:7af9c6a: import org.junit.Test;
1:7af9c6a: 
1:7af9c6a: import junit.framework.Assert;
1:7af9c6a: import org.apache.cassandra.service.EmbeddedCassandraService;
1:7af9c6a: import org.apache.cassandra.service.StorageService;
1:7af9c6a: 
1:7af9c6a: public class DebuggableScheduledThreadPoolExecutorTest
1:7af9c6a: {
1:7af9c6a: 
1:7af9c6a:     static EmbeddedCassandraService service;
1:7af9c6a: 
1:7af9c6a:     @BeforeClass
1:7af9c6a:     public static void startup() throws IOException
1:7af9c6a:     {
1:7af9c6a:         //The DSTPE checks for if we are in the service shutdown hook so
1:7af9c6a:         //to test it we need to start C* internally.
1:7af9c6a:         service = new EmbeddedCassandraService();
1:7af9c6a:         service.start();
1:7af9c6a:     }
1:7af9c6a: 
1:7af9c6a:     @Test
1:7af9c6a:     public void testShutdown() throws ExecutionException, InterruptedException, IOException
1:7af9c6a:     {
1:7af9c6a:         DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool");
1:7af9c6a: 
1:7af9c6a:         final AtomicInteger value = new AtomicInteger(0);
1:7af9c6a: 
1:7af9c6a:         //Normal scheduled task
1:7af9c6a:         ScheduledFuture future = testPool.schedule(new Runnable()
1:7af9c6a:         {
1:7af9c6a:             public void run()
1:7af9c6a:             {
1:7af9c6a:                 value.incrementAndGet();
1:7af9c6a:             }
1:7af9c6a:         }, 1, TimeUnit.SECONDS);
1:7af9c6a: 
1:7af9c6a:         future.get();
1:7af9c6a:         assert value.get() == 1;
1:7af9c6a: 
1:7af9c6a: 
1:7af9c6a:         //Shut down before schedule
1:7af9c6a:         future = testPool.schedule(new Runnable()
1:7af9c6a:         {
1:7af9c6a:             public void run()
1:7af9c6a:             {
1:7af9c6a:                 value.incrementAndGet();
1:7af9c6a:             }
1:7af9c6a:         }, 10, TimeUnit.SECONDS);
1:7af9c6a: 
1:7af9c6a: 
1:7af9c6a:         StorageService.instance.drain();
1:7af9c6a:         testPool.shutdown();
1:7af9c6a: 
1:7af9c6a:         future.get();
1:7af9c6a:         assert value.get() == 2;
1:7af9c6a: 
1:7af9c6a: 
1:7af9c6a:         //Now shut down verify task isn't just swallowed
1:7af9c6a:         future = testPool.schedule(new Runnable()
1:7af9c6a:         {
1:7af9c6a:             public void run()
1:7af9c6a:             {
1:7af9c6a:                 value.incrementAndGet();
1:7af9c6a:             }
1:7af9c6a:         }, 1, TimeUnit.SECONDS);
1:7af9c6a: 
1:7af9c6a: 
1:7af9c6a:         try
1:7af9c6a:         {
1:7af9c6a:             future.get(2, TimeUnit.SECONDS);
1:7af9c6a:             Assert.fail("Task should be cancelled");
1:7af9c6a:         }
1:7af9c6a:         catch (CancellationException e)
1:7af9c6a:         {
1:7af9c6a: 
1:7af9c6a:         }
1:7af9c6a:         catch (TimeoutException e)
1:7af9c6a:         {
1:7af9c6a:             Assert.fail("Task should be cancelled");
1:7af9c6a:         }
1:7af9c6a: 
1:7af9c6a:         assert future.isCancelled();
1:7af9c6a:         assert value.get() == 2;
1:7af9c6a:     }
1:7af9c6a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7af9c6a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.concurrent;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.CancellationException;
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ScheduledFuture;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import junit.framework.Assert;
1: import org.apache.cassandra.service.EmbeddedCassandraService;
1: import org.apache.cassandra.service.StorageService;
1: 
1: public class DebuggableScheduledThreadPoolExecutorTest
1: {
1: 
1:     static EmbeddedCassandraService service;
1: 
1:     @BeforeClass
1:     public static void startup() throws IOException
1:     {
1:         //The DSTPE checks for if we are in the service shutdown hook so
1:         //to test it we need to start C* internally.
1:         service = new EmbeddedCassandraService();
1:         service.start();
1:     }
1: 
1:     @Test
1:     public void testShutdown() throws ExecutionException, InterruptedException, IOException
1:     {
1:         DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool");
1: 
1:         final AtomicInteger value = new AtomicInteger(0);
1: 
1:         //Normal scheduled task
1:         ScheduledFuture future = testPool.schedule(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 value.incrementAndGet();
1:             }
1:         }, 1, TimeUnit.SECONDS);
1: 
1:         future.get();
1:         assert value.get() == 1;
1: 
1: 
1:         //Shut down before schedule
1:         future = testPool.schedule(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 value.incrementAndGet();
1:             }
1:         }, 10, TimeUnit.SECONDS);
1: 
1: 
1:         StorageService.instance.drain();
1:         testPool.shutdown();
1: 
1:         future.get();
1:         assert value.get() == 2;
1: 
1: 
1:         //Now shut down verify task isn't just swallowed
1:         future = testPool.schedule(new Runnable()
1:         {
1:             public void run()
1:             {
1:                 value.incrementAndGet();
1:             }
1:         }, 1, TimeUnit.SECONDS);
1: 
1: 
1:         try
1:         {
1:             future.get(2, TimeUnit.SECONDS);
1:             Assert.fail("Task should be cancelled");
1:         }
1:         catch (CancellationException e)
1:         {
1: 
1:         }
1:         catch (TimeoutException e)
1:         {
1:             Assert.fail("Task should be cancelled");
1:         }
1: 
1:         assert future.isCancelled();
1:         assert value.get() == 2;
1:     }
1: }
============================================================================