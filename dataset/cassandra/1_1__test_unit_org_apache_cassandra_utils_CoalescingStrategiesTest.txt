1:8284964: /*
1:8284964:  * Licensed to the Apache Software Foundation (ASF) under one
1:8284964:  * or more contributor license agreements.  See the NOTICE file
1:8284964:  * distributed with this work for additional information
1:8284964:  * regarding copyright ownership.  The ASF licenses this file
1:8284964:  * to you under the Apache License, Version 2.0 (the
1:8284964:  * "License"); you may not use this file except in compliance
1:8284964:  * with the License.  You may obtain a copy of the License at
1:8284964:  *
1:8284964:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8284964:  *
1:8284964:  * Unless required by applicable law or agreed to in writing, software
1:8284964:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8284964:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8284964:  * See the License for the specific language governing permissions and
1:8284964:  * limitations under the License.
1:8284964:  */
1:8284964: package org.apache.cassandra.utils;
1:8284964: 
1:8284964: import org.apache.cassandra.utils.CoalescingStrategies.Clock;
1:8284964: import org.apache.cassandra.utils.CoalescingStrategies.Coalescable;
1:8284964: import org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy;
1:8284964: import org.apache.cassandra.utils.CoalescingStrategies.Parker;
1:8284964: import org.junit.Before;
1:8284964: import org.junit.Test;
1:8284964: import org.slf4j.Logger;
1:8284964: import org.slf4j.LoggerFactory;
1:8284964: 
1:8284964: import java.util.ArrayDeque;
1:8284964: import java.util.ArrayList;
1:8284964: import java.util.List;
1:8284964: import java.util.Queue;
1:8284964: import java.util.concurrent.BlockingQueue;
1:8284964: import java.util.concurrent.ExecutorService;
1:8284964: import java.util.concurrent.Executors;
1:8284964: import java.util.concurrent.Future;
1:8284964: import java.util.concurrent.LinkedBlockingQueue;
1:8284964: import java.util.concurrent.Semaphore;
1:8284964: import java.util.concurrent.TimeUnit;
1:8284964: import java.util.concurrent.locks.LockSupport;
1:8284964: 
1:8284964: import static org.junit.Assert.*;
1:8284964: 
1:8284964: public class CoalescingStrategiesTest
1:8284964: {
1:8284964: 
1:8284964:     static final ExecutorService ex = Executors.newSingleThreadExecutor();
1:8284964: 
1:8284964:     private static final Logger logger = LoggerFactory.getLogger(CoalescingStrategiesTest.class);
1:8284964: 
1:8284964:     static class MockParker implements Parker
1:8284964:     {
1:8284964:         Queue<Long> parks = new ArrayDeque<Long>();
1:8284964:         Semaphore permits = new Semaphore(0);
1:8284964: 
1:8284964:         Semaphore parked = new Semaphore(0);
1:8284964: 
1:8284964:         public void park(long nanos)
1:8284964:         {
1:8284964:             parks.offer(nanos);
1:8284964:             parked.release();
1:8284964:             try
1:8284964:             {
1:8284964:                 permits.acquire();
1:8284964:             }
1:8284964:             catch (InterruptedException e)
1:8284964:             {
1:8284964:                 throw new RuntimeException(e);
1:8284964:             }
1:8284964:         }
1:8284964:     }
1:8284964: 
1:8284964:     static class SimpleCoalescable implements Coalescable
1:8284964:     {
1:8284964:         final long timestampNanos;
1:8284964: 
1:8284964:         SimpleCoalescable(long timestampNanos)
1:8284964:         {
1:8284964:             this.timestampNanos = timestampNanos;
1:8284964:         }
1:8284964: 
1:8284964:         public long timestampNanos()
1:8284964:         {
1:8284964:             return timestampNanos;
1:8284964:         }
1:8284964:     }
1:8284964: 
1:8284964: 
1:8284964:     static long toNanos(long micros)
1:8284964:     {
1:8284964:         return TimeUnit.MICROSECONDS.toNanos(micros);
1:8284964:     }
1:8284964: 
1:8284964:     MockParker parker;
1:8284964: 
1:8284964:     BlockingQueue<SimpleCoalescable> input;
1:8284964:     List<SimpleCoalescable> output;
1:8284964: 
1:8284964:     CoalescingStrategy cs;
1:8284964: 
1:8284964:     Semaphore queueParked = new Semaphore(0);
1:8284964:     Semaphore queueRelease = new Semaphore(0);
1:8284964: 
1:8284964:     @SuppressWarnings({ "serial" })
1:8284964:     @Before
1:8284964:     public void setUp() throws Exception
1:8284964:     {
1:8284964:         cs = null;
1:8284964:         CoalescingStrategies.CLOCK = new Clock()
1:8284964:         {
1:8284964:             @Override
1:8284964:             public long nanoTime()
1:8284964:             {
1:8284964:                 return 0;
1:8284964:             }
1:8284964:         };
1:8284964: 
1:8284964:         parker = new MockParker();
1:8284964:         input = new LinkedBlockingQueue<SimpleCoalescable>()
1:8284964:                 {
1:8284964:             @Override
1:8284964:             public SimpleCoalescable take() throws InterruptedException
1:8284964:             {
1:8284964:                 queueParked.release();
1:8284964:                 queueRelease.acquire();
1:8284964:                 return super.take();
1:8284964:             }
1:8284964:         };
1:8284964:         output = new ArrayList<>(128);
1:8284964: 
1:8284964:         clear();
1:8284964:     }
1:8284964: 
1:8284964:     CoalescingStrategy newStrategy(String name, int window)
1:8284964:     {
1:8284964:         return CoalescingStrategies.newCoalescingStrategy(name, window, parker, logger, "Stupendopotamus");
1:8284964:     }
1:8284964: 
1:8284964:     void add(long whenMicros)
1:8284964:     {
1:8284964:         input.offer(new SimpleCoalescable(toNanos(whenMicros)));
1:8284964:     }
1:8284964: 
1:8284964:     void clear()
1:8284964:     {
1:8284964:         output.clear();
1:8284964:         input.clear();
1:8284964:         parker.parks.clear();
1:8284964:         parker.parked.drainPermits();
1:8284964:         parker.permits.drainPermits();
1:8284964:         queueParked.drainPermits();
1:8284964:         queueRelease.drainPermits();
1:8284964:     }
1:8284964: 
1:8284964:     void release() throws Exception
1:8284964:     {
1:8284964:         queueRelease.release();
1:8284964:         parker.permits.release();
1:8284964:         fut.get();
1:8284964:     }
1:8284964: 
1:8284964:     Future<?> fut;
1:8284964:     void runBlocker(Semaphore waitFor) throws Exception
1:8284964:     {
1:8284964:         fut = ex.submit(new Runnable()
1:8284964:         {
1:8284964:             @Override
1:8284964:             public void run()
1:8284964:             {
1:8284964:                 try
1:8284964:                 {
1:8284964:                     cs.coalesce(input, output, 128);
1:8284964:                 }
1:8284964:                 catch (Exception ex)
1:8284964:                 {
1:8284964:                     ex.printStackTrace();
1:8284964:                     throw new RuntimeException(ex);
1:8284964:                 }
1:8284964:             }
1:8284964:         });
1:8284964:         waitFor.acquire();
1:8284964:     }
1:8284964: 
1:8284964:     @Test
1:8284964:     public void testFixedCoalescingStrategy() throws Exception
1:8284964:     {
1:8284964:         cs = newStrategy("FIXED", 200);
1:8284964: 
1:8284964:         //Test that when a stream of messages continues arriving it keeps sending until all are drained
1:8284964:         //It does this because it is already awake and sending messages
1:8284964:         add(42);
1:8284964:         add(42);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(42);
1:8284964:         add(42);
1:8284964:         add(42);
1:8284964:         release();
1:8284964:         assertEquals( 3, output.size());
1:8284964:         assertEquals(toNanos(200), parker.parks.poll().longValue());
1:8284964: 
1:8284964:     }
1:8284964: 
1:8284964:     @Test
1:8284964:     public void testDisabledCoalescingStrateg() throws Exception
1:8284964:     {
1:8284964:         cs = newStrategy("DISABLED", 200);
1:8284964: 
1:8284964:         add(42);
1:8284964:         add(42);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(42);
1:8284964:         add(42);
1:8284964:         release();
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964:     }
1:8284964: 
1:8284964:     @Test
1:8284964:     public void parkLoop() throws Exception
1:8284964:    {
1:8284964:         final Thread current = Thread.currentThread();
1:8284964:         final Semaphore helperReady = new Semaphore(0);
1:8284964:         final Semaphore helperGo = new Semaphore(0);
1:8284964: 
1:8284964:         new Thread()
1:8284964:         {
1:8284964:             @Override
1:8284964:             public void run()
1:8284964:             {
1:8284964:                 try
1:8284964:                 {
1:8284964:                     helperReady.release();
1:8284964:                     helperGo.acquire();
1:8284964:                     Thread.sleep(50);
1:8284964:                     LockSupport.unpark(current);
1:8284964:                 }
1:8284964:                 catch (Exception e)
1:8284964:                 {
1:8284964:                     e.printStackTrace();
1:8284964:                     logger.error("Error", e);
1:8284964:                     System.exit(-1);
1:8284964:                 }
1:8284964:             }
1:8284964:         }.start();
1:8284964: 
1:8284964:         long start = System.nanoTime();
1:8284964:         helperGo.release();
1:8284964: 
1:8284964:         long parkNanos = TimeUnit.MILLISECONDS.toNanos(500);
1:8284964: 
1:8284964:         CoalescingStrategies.parkLoop(parkNanos);
1:8284964:         long delta = System.nanoTime() - start;
1:8284964: 
1:8284964:         assertTrue (delta >= (parkNanos - (parkNanos / 16)));
1:8284964:     }
1:8284964: 
1:8284964:     @Test
1:8284964:     public void testMovingAverageCoalescingStrategy() throws Exception
1:8284964:     {
1:8284964:         cs = newStrategy("org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy", 200);
1:8284964: 
1:8284964: 
1:8284964:         //Test that things can be pulled out of the queue if it is non-empty
1:8284964:         add(201);
1:8284964:         add(401);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         //Test that blocking on the queue results in everything drained
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(601);
1:8284964:         add(801);
1:8284964:         release();
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that out of order samples still flow
1:8284964:         runBlocker(queueParked);
1:8284964:         add(0);
1:8284964:         release();
1:8284964:         assertEquals( 1, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         add(0);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 1, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that too high an average doesn't coalesce
1:8284964:         for (long ii = 0; ii < 128; ii++)
1:8284964:             add(ii * 1000);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals(output.size(), 128);
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(129 * 1000);
1:8284964:         release();
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that a low enough average coalesces
1:8284964:         cs = newStrategy("MOVINGAVERAGE", 200);
1:8284964:         for (long ii = 0; ii < 128; ii++)
1:8284964:             add(ii * 99);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals(output.size(), 128);
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(128 * 99);
1:8284964:         add(129 * 99);
1:8284964:         release();
1:8284964:         assertEquals(2, output.size());
1:8284964:         assertEquals(toNanos(198), parker.parks.poll().longValue());
1:8284964:     }
1:8284964: 
1:8284964:     @Test
1:8284964:     public void testTimeHorizonStrategy() throws Exception
1:8284964:     {
1:8284964:         cs = newStrategy("TIMEHORIZON", 200);
1:8284964: 
1:8284964:         //Test that things can be pulled out of the queue if it is non-empty
1:8284964:         add(201);
1:8284964:         add(401);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         //Test that blocking on the queue results in everything drained
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(601);
1:8284964:         add(801);
1:8284964:         release();
1:8284964:         assertEquals( 2, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that out of order samples still flow
1:8284964:         runBlocker(queueParked);
1:8284964:         add(0);
1:8284964:         release();
1:8284964:         assertEquals( 1, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         add(0);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals( 1, output.size());
1:8284964:         assertNull(parker.parks.poll());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that too high an average doesn't coalesce
1:8284964:         for (long ii = 0; ii < 128; ii++)
1:8284964:             add(ii * 1000);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals(output.size(), 128);
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(129 * 1000);
1:8284964:         release();
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test that a low enough average coalesces
1:8284964:         cs = newStrategy("TIMEHORIZON", 200);
1:8284964:         primeTimeHorizonAverage(99);
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         runBlocker(queueParked);
1:8284964:         add(100000 * 99);
1:8284964:         queueRelease.release();
1:8284964:         parker.parked.acquire();
1:8284964:         add(100001 * 99);
1:8284964:         parker.permits.release();
1:8284964:         fut.get();
1:8284964:         assertEquals(2, output.size());
1:8284964:         assertEquals(toNanos(198), parker.parks.poll().longValue());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Test far future
1:8284964:         add(Integer.MAX_VALUE);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals(1, output.size());
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964: 
1:8284964:         clear();
1:8284964: 
1:8284964:         //Distant past
1:8284964:         add(0);
1:8284964:         cs.coalesce(input, output, 128);
1:8284964:         assertEquals(1, output.size());
1:8284964:         assertTrue(parker.parks.isEmpty());
1:8284964:     }
1:8284964: 
1:8284964:     void primeTimeHorizonAverage(long micros) throws Exception
1:8284964:     {
1:8284964:         for (long ii = 0; ii < 100000; ii++)
1:8284964:         {
1:8284964:             add(ii * micros);
1:8284964:             if (ii % 128 == 0)
1:8284964:             {
1:8284964:                 cs.coalesce(input, output, 128);
1:8284964:                 output.clear();
1:8284964:             }
1:8284964:         }
1:8284964:     }
1:8284964: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:8284964
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import org.apache.cassandra.utils.CoalescingStrategies.Clock;
1: import org.apache.cassandra.utils.CoalescingStrategies.Coalescable;
1: import org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy;
1: import org.apache.cassandra.utils.CoalescingStrategies.Parker;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.ArrayDeque;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Queue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.locks.LockSupport;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class CoalescingStrategiesTest
1: {
1: 
1:     static final ExecutorService ex = Executors.newSingleThreadExecutor();
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(CoalescingStrategiesTest.class);
1: 
1:     static class MockParker implements Parker
1:     {
1:         Queue<Long> parks = new ArrayDeque<Long>();
1:         Semaphore permits = new Semaphore(0);
1: 
1:         Semaphore parked = new Semaphore(0);
1: 
1:         public void park(long nanos)
1:         {
1:             parks.offer(nanos);
1:             parked.release();
1:             try
1:             {
1:                 permits.acquire();
1:             }
1:             catch (InterruptedException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
1: 
1:     static class SimpleCoalescable implements Coalescable
1:     {
1:         final long timestampNanos;
1: 
1:         SimpleCoalescable(long timestampNanos)
1:         {
1:             this.timestampNanos = timestampNanos;
1:         }
1: 
1:         public long timestampNanos()
1:         {
1:             return timestampNanos;
1:         }
1:     }
1: 
1: 
1:     static long toNanos(long micros)
1:     {
1:         return TimeUnit.MICROSECONDS.toNanos(micros);
1:     }
1: 
1:     MockParker parker;
1: 
1:     BlockingQueue<SimpleCoalescable> input;
1:     List<SimpleCoalescable> output;
1: 
1:     CoalescingStrategy cs;
1: 
1:     Semaphore queueParked = new Semaphore(0);
1:     Semaphore queueRelease = new Semaphore(0);
1: 
1:     @SuppressWarnings({ "serial" })
1:     @Before
1:     public void setUp() throws Exception
1:     {
1:         cs = null;
1:         CoalescingStrategies.CLOCK = new Clock()
1:         {
1:             @Override
1:             public long nanoTime()
1:             {
1:                 return 0;
1:             }
1:         };
1: 
1:         parker = new MockParker();
1:         input = new LinkedBlockingQueue<SimpleCoalescable>()
1:                 {
1:             @Override
1:             public SimpleCoalescable take() throws InterruptedException
1:             {
1:                 queueParked.release();
1:                 queueRelease.acquire();
1:                 return super.take();
1:             }
1:         };
1:         output = new ArrayList<>(128);
1: 
1:         clear();
1:     }
1: 
1:     CoalescingStrategy newStrategy(String name, int window)
1:     {
1:         return CoalescingStrategies.newCoalescingStrategy(name, window, parker, logger, "Stupendopotamus");
1:     }
1: 
1:     void add(long whenMicros)
1:     {
1:         input.offer(new SimpleCoalescable(toNanos(whenMicros)));
1:     }
1: 
1:     void clear()
1:     {
1:         output.clear();
1:         input.clear();
1:         parker.parks.clear();
1:         parker.parked.drainPermits();
1:         parker.permits.drainPermits();
1:         queueParked.drainPermits();
1:         queueRelease.drainPermits();
1:     }
1: 
1:     void release() throws Exception
1:     {
1:         queueRelease.release();
1:         parker.permits.release();
1:         fut.get();
1:     }
1: 
1:     Future<?> fut;
1:     void runBlocker(Semaphore waitFor) throws Exception
1:     {
1:         fut = ex.submit(new Runnable()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 try
1:                 {
1:                     cs.coalesce(input, output, 128);
1:                 }
1:                 catch (Exception ex)
1:                 {
1:                     ex.printStackTrace();
1:                     throw new RuntimeException(ex);
1:                 }
1:             }
1:         });
1:         waitFor.acquire();
1:     }
1: 
1:     @Test
1:     public void testFixedCoalescingStrategy() throws Exception
1:     {
1:         cs = newStrategy("FIXED", 200);
1: 
1:         //Test that when a stream of messages continues arriving it keeps sending until all are drained
1:         //It does this because it is already awake and sending messages
1:         add(42);
1:         add(42);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(42);
1:         add(42);
1:         add(42);
1:         release();
1:         assertEquals( 3, output.size());
1:         assertEquals(toNanos(200), parker.parks.poll().longValue());
1: 
1:     }
1: 
1:     @Test
1:     public void testDisabledCoalescingStrateg() throws Exception
1:     {
1:         cs = newStrategy("DISABLED", 200);
1: 
1:         add(42);
1:         add(42);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(42);
1:         add(42);
1:         release();
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1:     }
1: 
1:     @Test
1:     public void parkLoop() throws Exception
1:    {
1:         final Thread current = Thread.currentThread();
1:         final Semaphore helperReady = new Semaphore(0);
1:         final Semaphore helperGo = new Semaphore(0);
1: 
1:         new Thread()
1:         {
1:             @Override
1:             public void run()
1:             {
1:                 try
1:                 {
1:                     helperReady.release();
1:                     helperGo.acquire();
1:                     Thread.sleep(50);
1:                     LockSupport.unpark(current);
1:                 }
1:                 catch (Exception e)
1:                 {
1:                     e.printStackTrace();
1:                     logger.error("Error", e);
1:                     System.exit(-1);
1:                 }
1:             }
1:         }.start();
1: 
1:         long start = System.nanoTime();
1:         helperGo.release();
1: 
1:         long parkNanos = TimeUnit.MILLISECONDS.toNanos(500);
1: 
1:         CoalescingStrategies.parkLoop(parkNanos);
1:         long delta = System.nanoTime() - start;
1: 
1:         assertTrue (delta >= (parkNanos - (parkNanos / 16)));
1:     }
1: 
1:     @Test
1:     public void testMovingAverageCoalescingStrategy() throws Exception
1:     {
1:         cs = newStrategy("org.apache.cassandra.utils.CoalescingStrategies$MovingAverageCoalescingStrategy", 200);
1: 
1: 
1:         //Test that things can be pulled out of the queue if it is non-empty
1:         add(201);
1:         add(401);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         //Test that blocking on the queue results in everything drained
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(601);
1:         add(801);
1:         release();
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         //Test that out of order samples still flow
1:         runBlocker(queueParked);
1:         add(0);
1:         release();
1:         assertEquals( 1, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         add(0);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 1, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         //Test that too high an average doesn't coalesce
1:         for (long ii = 0; ii < 128; ii++)
1:             add(ii * 1000);
1:         cs.coalesce(input, output, 128);
1:         assertEquals(output.size(), 128);
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(129 * 1000);
1:         release();
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         //Test that a low enough average coalesces
1:         cs = newStrategy("MOVINGAVERAGE", 200);
1:         for (long ii = 0; ii < 128; ii++)
1:             add(ii * 99);
1:         cs.coalesce(input, output, 128);
1:         assertEquals(output.size(), 128);
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(128 * 99);
1:         add(129 * 99);
1:         release();
1:         assertEquals(2, output.size());
1:         assertEquals(toNanos(198), parker.parks.poll().longValue());
1:     }
1: 
1:     @Test
1:     public void testTimeHorizonStrategy() throws Exception
1:     {
1:         cs = newStrategy("TIMEHORIZON", 200);
1: 
1:         //Test that things can be pulled out of the queue if it is non-empty
1:         add(201);
1:         add(401);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         //Test that blocking on the queue results in everything drained
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(601);
1:         add(801);
1:         release();
1:         assertEquals( 2, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         //Test that out of order samples still flow
1:         runBlocker(queueParked);
1:         add(0);
1:         release();
1:         assertEquals( 1, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         add(0);
1:         cs.coalesce(input, output, 128);
1:         assertEquals( 1, output.size());
1:         assertNull(parker.parks.poll());
1: 
1:         clear();
1: 
1:         //Test that too high an average doesn't coalesce
1:         for (long ii = 0; ii < 128; ii++)
1:             add(ii * 1000);
1:         cs.coalesce(input, output, 128);
1:         assertEquals(output.size(), 128);
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(129 * 1000);
1:         release();
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         //Test that a low enough average coalesces
1:         cs = newStrategy("TIMEHORIZON", 200);
1:         primeTimeHorizonAverage(99);
1: 
1:         clear();
1: 
1:         runBlocker(queueParked);
1:         add(100000 * 99);
1:         queueRelease.release();
1:         parker.parked.acquire();
1:         add(100001 * 99);
1:         parker.permits.release();
1:         fut.get();
1:         assertEquals(2, output.size());
1:         assertEquals(toNanos(198), parker.parks.poll().longValue());
1: 
1:         clear();
1: 
1:         //Test far future
1:         add(Integer.MAX_VALUE);
1:         cs.coalesce(input, output, 128);
1:         assertEquals(1, output.size());
1:         assertTrue(parker.parks.isEmpty());
1: 
1:         clear();
1: 
1:         //Distant past
1:         add(0);
1:         cs.coalesce(input, output, 128);
1:         assertEquals(1, output.size());
1:         assertTrue(parker.parks.isEmpty());
1:     }
1: 
1:     void primeTimeHorizonAverage(long micros) throws Exception
1:     {
1:         for (long ii = 0; ii < 100000; ii++)
1:         {
1:             add(ii * micros);
1:             if (ii % 128 == 0)
1:             {
1:                 cs.coalesce(input, output, 128);
1:                 output.clear();
1:             }
1:         }
1:     }
1: }
============================================================================