1:07cf56f: /*
1:b2024a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:b2024a1:  * or more contributor license agreements.  See the NOTICE file
1:b2024a1:  * distributed with this work for additional information
1:b2024a1:  * regarding copyright ownership.  The ASF licenses this file
1:b2024a1:  * to you under the Apache License, Version 2.0 (the
1:b2024a1:  * "License"); you may not use this file except in compliance
1:b2024a1:  * with the License.  You may obtain a copy of the License at
1:b2024a1:  *
1:b2024a1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b2024a1:  *
1:b2024a1:  * Unless required by applicable law or agreed to in writing, software
1:b2024a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b2024a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b2024a1:  * See the License for the specific language governing permissions and
1:b2024a1:  * limitations under the License.
1:b2024a1:  */
1:b2024a1: package org.apache.cassandra.db;
6:b2024a1: 
1:b2024a1: import org.slf4j.Logger;
1:b2024a1: import org.slf4j.LoggerFactory;
1:b2024a1: 
1:20cdc0f: import org.apache.cassandra.config.DatabaseDescriptor;
1:5a6f0b8: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:5a6f0b8: import org.apache.cassandra.net.MessagingService;
1:b2024a1: import org.apache.cassandra.service.StorageProxy;
1:5a6f0b8: import org.apache.cassandra.utils.FBUtilities;
1:b2024a1: 
1:a06be23: public class CounterMutationVerbHandler implements IVerbHandler<CounterMutation>
2:7371e10: {
1:5a6e2b0:     private static final Logger logger = LoggerFactory.getLogger(CounterMutationVerbHandler.class);
1:b2024a1: 
1:1936648:     public void doVerb(final MessageIn<CounterMutation> message, final int id)
1:7371e10:     {
1:aa83c94:         long queryStartNanoTime = System.nanoTime();
1:c059a56:         final CounterMutation cm = message.payload;
1:4a849ef:         logger.trace("Applying forwarded {}", cm);
1:b2024a1: 
1:c059a56:         String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
1:c059a56:         // We should not wait for the result of the write in this thread,
1:c059a56:         // otherwise we could have a distributed deadlock between replicas
1:c059a56:         // running this VerbHandler (see #4578).
1:c059a56:         // Instead, we use a callback to send the response. Note that the callback
1:c059a56:         // will not be called if the request timeout, but this is ok
1:c059a56:         // because the coordinator of the counter mutation will timeout on
1:c059a56:         // it's own in that case.
1:c059a56:         StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter, new Runnable()
1:c8a0a3a:         {
1:c059a56:             public void run()
1:c059a56:             {
1:53a177a:                 MessagingService.instance().sendReply(WriteResponse.createMessage(), id, message.from);
1:c059a56:             }
1:aa83c94:         }, queryStartNanoTime);
2:7371e10:     }
1:7371e10: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:         long queryStartNanoTime = System.nanoTime();
/////////////////////////////////////////////////////////////////////////
1:         }, queryStartNanoTime);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
commit:cd6aa2d
/////////////////////////////////////////////////////////////////////////
0:               logger.debug("Applying forwarded {}", cm);
commit:997ab95
/////////////////////////////////////////////////////////////////////////
commit:f650d3e
/////////////////////////////////////////////////////////////////////////
author:blerer
-------------------------------------------------------------------------------
commit:aa60cde
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Applying forwarded {}", cm);
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1:                 MessagingService.instance().sendReply(WriteResponse.createMessage(), id, message.from);
commit:c059a56
/////////////////////////////////////////////////////////////////////////
1:         final CounterMutation cm = message.payload;
0:         logger.debug("Applying forwarded {}", cm);
1:         String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
1:         // We should not wait for the result of the write in this thread,
1:         // otherwise we could have a distributed deadlock between replicas
1:         // running this VerbHandler (see #4578).
1:         // Instead, we use a callback to send the response. Note that the callback
1:         // will not be called if the request timeout, but this is ok
1:         // because the coordinator of the counter mutation will timeout on
1:         // it's own in that case.
1:         StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter, new Runnable()
1:             public void run()
1:             {
0:                 MessagingService.instance().sendReply(new WriteResponse().createMessage(), id, message.from);
1:             }
0:         });
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:c8a0a3a
/////////////////////////////////////////////////////////////////////////
0:             logger.debug("Applying forwarded {}", cm);
/////////////////////////////////////////////////////////////////////////
0:             StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter, new Runnable()
1:             {
0:                     MessagingService.instance().sendReply(new WriteResponse().createMessage(), id, message.from);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:e2506f1
/////////////////////////////////////////////////////////////////////////
commit:d5fc193
commit:7371e10
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(final Message message, final String id)
/////////////////////////////////////////////////////////////////////////
0:             final CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
0:             // We should not wait for the result of the write in this thread,
0:             // otherwise we could have a distributed deadlock between replicas
0:             // running this VerbHandler (see #4578).
0:             // Instead, we use a callback to send the response. Note that the callback
0:             // will not be called if the request timeout, but this is ok
0:             // because the coordinator of the counter mutation will timeout on
0:             // it's own in that case.
0:             StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter, new Runnable(){
0:                 public void run()
1:                 {
0:                     try
1:                     {
0:                         WriteResponse response = new WriteResponse(cm.getTable(), cm.key(), true);
0:                         Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
0:                         MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
1:                     }
0:                     catch (IOException e)
1:                     {
0:                         logger.error("Error writing response to counter mutation", e);
1:                     }
1:                 }
0:             });
/////////////////////////////////////////////////////////////////////////
0:             // The coordinator will timeout on it's own so ignore
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.RequestExecutionException;
/////////////////////////////////////////////////////////////////////////
0:         catch (RequestExecutionException e)
0:             // The coordinator will timeout on itself, so let that go
0:             logger.debug("counter error", e);
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(CounterMutationVerbHandler.class);
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:20cdc0f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:             String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getLocalAddress());
0:             StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter).get();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1936648
/////////////////////////////////////////////////////////////////////////
1:     public void doVerb(final MessageIn<CounterMutation> message, final int id)
commit:fd2ddb5
/////////////////////////////////////////////////////////////////////////
0:             WriteResponse response = new WriteResponse();
commit:c9a13c3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.TimedOutException;
/////////////////////////////////////////////////////////////////////////
0:             // We check for UnavailableException in the coordinator now. It is
0:             logger.debug("counter unavailable", e);
0:         catch (TimedOutException e)
0:             logger.debug("counter timeout", e);
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1: public class CounterMutationVerbHandler implements IVerbHandler<CounterMutation>
0:     public void doVerb(MessageIn<CounterMutation> message, String id)
0:             CounterMutation cm = message.payload;
0:             MessagingService.instance().sendReply(response.createMessage(), id, message.from);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(MessageIn message, String id)
commit:5a6f0b8
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInputStream;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.utils.FBUtilities;
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream in = new DataInputStream(new FastByteArrayInputStream(message.getMessageBody()));
0:             CounterMutation cm = CounterMutation.serializer().deserialize(in, message.getVersion());
0:             MessagingService.instance().sendReply(response.createMessage(), id, message.getFrom());
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(Message message, String id)
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
commit:b2024a1
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
0: import java.io.*;
0: import java.util.concurrent.TimeoutException;
1: 
0: import java.net.InetAddress;
0: import java.nio.ByteBuffer;
0: import java.util.Collections;
1: 
0: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.net.*;
0: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.service.StorageProxy;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.UnavailableException;
1: 
0: public class CounterMutationVerbHandler implements IVerbHandler
0: {
0:     private static Logger logger = LoggerFactory.getLogger(CounterMutationVerbHandler.class);
1: 
0:     public void doVerb(Message message)
0:     {
0:         byte[] bytes = message.getMessageBody();
0:         ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);
1: 
0:         try
0:         {
0:             DataInputStream is = new DataInputStream(buffer);
0:             CounterMutation cm = CounterMutation.serializer().deserialize(is);
0:             if (logger.isDebugEnabled())
0:               logger.debug("Applying forwarded " + cm);
1: 
0:             StorageProxy.applyCounterMutationOnLeader(cm);
0:             WriteResponse response = new WriteResponse(cm.getTable(), cm.key(), true);
0:             Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
0:             MessagingService.instance().sendOneWay(responseMessage, message.getFrom());
0:         }
0:         catch (UnavailableException e)
0:         {
0:             // We check for UnavailableException in the coordinator not. It is
0:             // hence reasonable to let the coordinator timeout in the very
0:             // unlikely case we arrive here
0:         }
0:         catch (TimeoutException e)
0:         {
0:             // The coordinator node will have timeout itself so we let that goes
0:         }
0:         catch (IOException e)
0:         {
0:             logger.error("Error in counter mutation", e);
0:         }
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:01883da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.FastByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:         FastByteArrayInputStream buffer = new FastByteArrayInputStream(bytes);
commit:127c028
/////////////////////////////////////////////////////////////////////////
0:             String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getBroadcastAddress());
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:             CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
============================================================================