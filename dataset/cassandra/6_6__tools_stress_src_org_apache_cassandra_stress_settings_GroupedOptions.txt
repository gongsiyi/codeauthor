1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
2:2e1e98a: 
1:2e1e98a: import java.io.PrintStream;
1:03a3f95: import java.io.Serializable;
1:2e1e98a: import java.util.HashSet;
1:2e1e98a: import java.util.List;
1:2e1e98a: import java.util.Set;
1:2e1e98a: 
1:73b2dcc: import com.google.common.collect.ImmutableList;
1:938faa2: 
1:03a3f95: public abstract class GroupedOptions implements Serializable
1:2e1e98a: {
1:73b2dcc: 
1:2e1e98a:     int accepted = 0;
1:2e1e98a: 
1:2e1e98a:     public boolean accept(String param)
1:2e1e98a:     {
1:2e1e98a:         for (Option option : options())
1:2e1e98a:         {
1:2e1e98a:             if (option.accept(param))
1:2e1e98a:             {
1:2e1e98a:                 accepted++;
1:2e1e98a:                 return true;
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:         return false;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public boolean happy()
1:2e1e98a:     {
1:2e1e98a:         for (Option option : options())
1:2e1e98a:             if (!option.happy())
1:2e1e98a:                 return false;
1:2e1e98a:         return true;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public abstract List<? extends Option> options();
1:2e1e98a: 
1:2e1e98a:     // hands the parameters to each of the option groups, and returns the first provided
1:2e1e98a:     // option group that is happy() after this is done, that also accepted all the parameters
1:2e1e98a:     public static <G extends GroupedOptions> G select(String[] params, G... groupings)
1:2e1e98a:     {
1:2e1e98a:         for (String param : params)
1:2e1e98a:         {
1:2e1e98a:             boolean accepted = false;
1:2e1e98a:             for (GroupedOptions grouping : groupings)
1:2e1e98a:                 accepted |= grouping.accept(param);
1:2e1e98a:             if (!accepted)
1:2e1e98a:                 throw new IllegalArgumentException("Invalid parameter " + param);
1:2e1e98a:         }
1:2e1e98a:         for (G grouping : groupings)
1:2e1e98a:             if (grouping.happy() && grouping.accepted == params.length)
1:2e1e98a:                 return grouping;
1:2e1e98a:         return null;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     // pretty prints all of the option groupings
1:2e1e98a:     public static void printOptions(PrintStream out, String command, GroupedOptions... groupings)
1:2e1e98a:     {
1:2e1e98a:         out.println();
1:2e1e98a:         boolean firstRow = true;
1:2e1e98a:         for (GroupedOptions grouping : groupings)
1:2e1e98a:         {
1:2e1e98a:             if (!firstRow)
1:2e1e98a:             {
1:2e1e98a:                 out.println(" OR ");
1:2e1e98a:             }
1:2e1e98a:             firstRow = false;
1:2e1e98a: 
1:43f19eb:             StringBuilder sb = new StringBuilder("Usage: ").append(command);
1:2e1e98a:             for (Option option : grouping.options())
1:2e1e98a:             {
1:2e1e98a:                 sb.append(" ");
1:2e1e98a:                 sb.append(option.shortDisplay());
1:2e1e98a:             }
1:2e1e98a:             out.println(sb.toString());
1:2e1e98a:         }
1:2e1e98a:         out.println();
1:2e1e98a:         final Set<Option> printed = new HashSet<>();
1:2e1e98a:         for (GroupedOptions grouping : groupings)
1:2e1e98a:         {
1:2e1e98a:             for (Option option : grouping.options())
1:2e1e98a:             {
1:2e1e98a:                 if (printed.add(option))
1:2e1e98a:                 {
1:2e1e98a:                     if (option.longDisplay() != null)
1:2e1e98a:                     {
1:2e1e98a:                         out.println("  " + option.longDisplay());
1:2e1e98a:                         for (String row : option.multiLineDisplay())
1:2e1e98a:                             out.println("      " + row);
1:2e1e98a:                     }
1:2e1e98a:                 }
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:938faa2:     public String getOptionAsString()
1:938faa2:     {
1:938faa2:         StringBuilder sb = new StringBuilder();
1:938faa2:         for (Option option : options())
1:938faa2:         {
1:938faa2:             sb.append(option.getOptionAsString());
1:938faa2:             sb.append("; ");
1:938faa2:         }
1:938faa2:         return sb.toString();
1:938faa2:     }
1:938faa2: 
1:938faa2: 
1:73b2dcc:     public static List<? extends Option> merge(List<? extends Option> ... optionss)
1:73b2dcc:     {
1:73b2dcc:         ImmutableList.Builder<Option> builder = ImmutableList.builder();
1:73b2dcc:         for (List<? extends Option> options : optionss)
1:73b2dcc:             for (Option option : options)
1:73b2dcc:                 if (option instanceof OptionSimple && ((OptionSimple) option).isRequired())
1:73b2dcc:                     builder.add(option);
1:73b2dcc:         for (List<? extends Option> options : optionss)
1:73b2dcc:             for (Option option : options)
1:73b2dcc:                 if (!(option instanceof OptionSimple && ((OptionSimple) option).isRequired()))
1:73b2dcc:                     builder.add(option);
1:73b2dcc:         return builder.build();
1:73b2dcc:     }
1:73b2dcc: 
1:03a3f95:     static String formatLong(String longDisplay, String description)
1:2e1e98a:     {
1:2e1e98a:         return String.format("%-40s %s", longDisplay, description);
1:2e1e98a:     }
1:2e1e98a: 
1:03a3f95:     static String formatMultiLine(String longDisplay, String description)
1:2e1e98a:     {
1:2e1e98a:         return String.format("%-36s %s", longDisplay, description);
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Chris Batey
-------------------------------------------------------------------------------
commit:03a3f95
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: public abstract class GroupedOptions implements Serializable
/////////////////////////////////////////////////////////////////////////
1:     static String formatLong(String longDisplay, String description)
1:     static String formatMultiLine(String longDisplay, String description)
author:Ben Slater
-------------------------------------------------------------------------------
commit:938faa2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.stress.util.MultiPrintStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getOptionAsString()
1:     {
1:         StringBuilder sb = new StringBuilder();
1:         for (Option option : options())
1:         {
1:             sb.append(option.getOptionAsString());
1:             sb.append("; ");
1:         }
1:         return sb.toString();
1:     }
1: 
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:1963b7f
commit:73b2dcc
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableList;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static List<? extends Option> merge(List<? extends Option> ... optionss)
1:     {
1:         ImmutableList.Builder<Option> builder = ImmutableList.builder();
1:         for (List<? extends Option> options : optionss)
1:             for (Option option : options)
1:                 if (option instanceof OptionSimple && ((OptionSimple) option).isRequired())
1:                     builder.add(option);
1:         for (List<? extends Option> options : optionss)
1:             for (Option option : options)
1:                 if (!(option instanceof OptionSimple && ((OptionSimple) option).isRequired()))
1:                     builder.add(option);
1:         return builder.build();
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:43f19eb
/////////////////////////////////////////////////////////////////////////
1:             StringBuilder sb = new StringBuilder("Usage: ").append(command);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.io.PrintStream;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
0: public abstract class GroupedOptions
1: {
1: 
1:     int accepted = 0;
1: 
1:     public boolean accept(String param)
1:     {
1:         for (Option option : options())
1:         {
1:             if (option.accept(param))
1:             {
1:                 accepted++;
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     public boolean happy()
1:     {
1:         for (Option option : options())
1:             if (!option.happy())
1:                 return false;
1:         return true;
1:     }
1: 
1:     public abstract List<? extends Option> options();
1: 
1:     // hands the parameters to each of the option groups, and returns the first provided
1:     // option group that is happy() after this is done, that also accepted all the parameters
1:     public static <G extends GroupedOptions> G select(String[] params, G... groupings)
1:     {
1:         for (String param : params)
1:         {
1:             boolean accepted = false;
1:             for (GroupedOptions grouping : groupings)
1:                 accepted |= grouping.accept(param);
1:             if (!accepted)
1:                 throw new IllegalArgumentException("Invalid parameter " + param);
1:         }
1:         for (G grouping : groupings)
1:             if (grouping.happy() && grouping.accepted == params.length)
1:                 return grouping;
1:         return null;
1:     }
1: 
1:     // pretty prints all of the option groupings
1:     public static void printOptions(PrintStream out, String command, GroupedOptions... groupings)
1:     {
1:         out.println();
1:         boolean firstRow = true;
1:         for (GroupedOptions grouping : groupings)
1:         {
1:             if (!firstRow)
1:             {
1:                 out.println(" OR ");
1:             }
1:             firstRow = false;
1: 
0:             StringBuilder sb = new StringBuilder("Usage: " + command);
1:             for (Option option : grouping.options())
1:             {
1:                 sb.append(" ");
1:                 sb.append(option.shortDisplay());
1:             }
1:             out.println(sb.toString());
1:         }
1:         out.println();
1:         final Set<Option> printed = new HashSet<>();
1:         for (GroupedOptions grouping : groupings)
1:         {
1:             for (Option option : grouping.options())
1:             {
1:                 if (printed.add(option))
1:                 {
1:                     if (option.longDisplay() != null)
1:                     {
1:                         out.println("  " + option.longDisplay());
1:                         for (String row : option.multiLineDisplay())
1:                             out.println("      " + row);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
0:     public static String formatLong(String longDisplay, String description)
1:     {
1:         return String.format("%-40s %s", longDisplay, description);
1:     }
1: 
0:     public static String formatMultiLine(String longDisplay, String description)
1:     {
1:         return String.format("%-36s %s", longDisplay, description);
1:     }
1: 
1: }
============================================================================