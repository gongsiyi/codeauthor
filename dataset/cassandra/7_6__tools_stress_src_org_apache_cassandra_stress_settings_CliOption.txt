1:2e1e98a: package org.apache.cassandra.stress.settings;
1:9f14856: /*
1:89f275c:  *
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:89f275c:  *
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:89f275c:  *
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:89f275c:  *
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:2e1e98a: import java.util.HashMap;
1:2e1e98a: import java.util.Map;
1:2e1e98a: 
1:2e1e98a: public enum CliOption
1:2e1e98a: {
1:0580fb2:     POP("Population distribution and intra-partition visit order", SettingsPopulation.helpPrinter()),
1:0580fb2:     INSERT("Insert specific options relating to various methods for batching and splitting partition updates", SettingsInsert.helpPrinter()),
1:2e1e98a:     COL("Column details such as size and count distribution, data generator, names, comparator and if super columns should be used", SettingsColumn.helpPrinter()),
1:2e1e98a:     RATE("Thread count, rate limit or automatic mode (default is auto)", SettingsRate.helpPrinter()),
1:2e1e98a:     MODE("Thrift or CQL with options", SettingsMode.helpPrinter()),
1:c1610f6:     ERRORS("How to handle errors when encountered during stress", SettingsErrors.helpPrinter()),
1:2e1e98a:     SCHEMA("Replication settings, compression, compaction, etc.", SettingsSchema.helpPrinter()),
1:2e1e98a:     NODE("Nodes to connect to", SettingsNode.helpPrinter()),
1:2e1e98a:     LOG("Where to log progress to, and the interval at which to do it", SettingsLog.helpPrinter()),
1:2e1e98a:     TRANSPORT("Custom transport factories", SettingsTransport.helpPrinter()),
1:2e1e98a:     PORT("The port to connect to cassandra nodes on", SettingsPort.helpPrinter()),
1:232e12b:     SENDTO("-send-to", "Specify a stress server to send this command to", SettingsMisc.sendToDaemonHelpPrinter()),
1:f27ab29:     GRAPH("-graph", "Graph recorded metrics", SettingsGraph.helpPrinter()),
1:f27ab29:     TOKENRANGE("Token range settings", SettingsTokenRange.helpPrinter())
1:2e1e98a:     ;
1:2e1e98a: 
1:2e1e98a:     private static final Map<String, CliOption> LOOKUP;
1:2e1e98a:     static
1:2e1e98a:     {
1:2e1e98a:         final Map<String, CliOption> lookup = new HashMap<>();
1:2e1e98a:         for (CliOption cmd : values())
1:2e1e98a:         {
1:2e1e98a:             lookup.put("-" + cmd.toString().toLowerCase(), cmd);
1:2e1e98a:             if (cmd.extraName != null)
1:2e1e98a:                 lookup.put(cmd.extraName, cmd);
1:2e1e98a:         }
1:2e1e98a:         LOOKUP = lookup;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public static CliOption get(String command)
1:2e1e98a:     {
1:2e1e98a:         return LOOKUP.get(command.toLowerCase());
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public final String extraName;
1:2e1e98a:     public final String description;
1:2e1e98a:     private final Runnable helpPrinter;
1:2e1e98a: 
1:2e1e98a:     private CliOption(String description, Runnable helpPrinter)
1:2e1e98a:     {
1:2e1e98a:         this(null, description, helpPrinter);
1:2e1e98a:     }
1:2e1e98a:     private CliOption(String extraName, String description, Runnable helpPrinter)
1:2e1e98a:     {
1:2e1e98a:         this.extraName = extraName;
1:2e1e98a:         this.description = description;
1:2e1e98a:         this.helpPrinter = helpPrinter;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void printHelp()
1:2e1e98a:     {
1:2e1e98a:         helpPrinter.run();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1:     GRAPH("-graph", "Graph recorded metrics", SettingsGraph.helpPrinter()),
1:     TOKENRANGE("Token range settings", SettingsTokenRange.helpPrinter())
commit:232e12b
/////////////////////////////////////////////////////////////////////////
1:     SENDTO("-send-to", "Specify a stress server to send this command to", SettingsMisc.sendToDaemonHelpPrinter()),
0:     TOKENRANGE("Token range settings", SettingsTokenRange.helpPrinter())
author:Ryan McGuire
-------------------------------------------------------------------------------
commit:e4467a0
/////////////////////////////////////////////////////////////////////////
0:     SENDTO("-send-to", "Specify a stress server to send this command to", SettingsMisc.sendToDaemonHelpPrinter()),
0:     GRAPH("-graph", "Graph recorded metrics", SettingsGraph.helpPrinter())
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:cdba5aa
/////////////////////////////////////////////////////////////////////////
0:     SAMPLE("Specify the number of samples to collect for measuring latency", SettingsSamples.helpPrinter()),
commit:0580fb2
/////////////////////////////////////////////////////////////////////////
1:     POP("Population distribution and intra-partition visit order", SettingsPopulation.helpPrinter()),
1:     INSERT("Insert specific options relating to various methods for batching and splitting partition updates", SettingsInsert.helpPrinter()),
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:c1610f6
/////////////////////////////////////////////////////////////////////////
1:     ERRORS("How to handle errors when encountered during stress", SettingsErrors.helpPrinter()),
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.settings;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public enum CliOption
1: {
0:     KEY("Key details such as size in bytes and value distribution", SettingsKey.helpPrinter()),
1:     COL("Column details such as size and count distribution, data generator, names, comparator and if super columns should be used", SettingsColumn.helpPrinter()),
1:     RATE("Thread count, rate limit or automatic mode (default is auto)", SettingsRate.helpPrinter()),
1:     MODE("Thrift or CQL with options", SettingsMode.helpPrinter()),
1:     SCHEMA("Replication settings, compression, compaction, etc.", SettingsSchema.helpPrinter()),
1:     NODE("Nodes to connect to", SettingsNode.helpPrinter()),
1:     LOG("Where to log progress to, and the interval at which to do it", SettingsLog.helpPrinter()),
1:     TRANSPORT("Custom transport factories", SettingsTransport.helpPrinter()),
1:     PORT("The port to connect to cassandra nodes on", SettingsPort.helpPrinter()),
0:     SENDTO("-send-to", "Specify a stress server to send this command to", SettingsMisc.sendToDaemonHelpPrinter())
1:     ;
1: 
1:     private static final Map<String, CliOption> LOOKUP;
1:     static
1:     {
1:         final Map<String, CliOption> lookup = new HashMap<>();
1:         for (CliOption cmd : values())
1:         {
1:             lookup.put("-" + cmd.toString().toLowerCase(), cmd);
1:             if (cmd.extraName != null)
1:                 lookup.put(cmd.extraName, cmd);
1:         }
1:         LOOKUP = lookup;
1:     }
1: 
1:     public static CliOption get(String command)
1:     {
1:         return LOOKUP.get(command.toLowerCase());
1:     }
1: 
1:     public final String extraName;
1:     public final String description;
1:     private final Runnable helpPrinter;
1: 
1:     private CliOption(String description, Runnable helpPrinter)
1:     {
1:         this(null, description, helpPrinter);
1:     }
1:     private CliOption(String extraName, String description, Runnable helpPrinter)
1:     {
1:         this.extraName = extraName;
1:         this.description = description;
1:         this.helpPrinter = helpPrinter;
1:     }
1: 
1:     public void printHelp()
1:     {
1:         helpPrinter.run();
1:     }
1: 
1: }
============================================================================