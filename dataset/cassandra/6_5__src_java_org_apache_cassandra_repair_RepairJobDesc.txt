1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:0dd50a6: import java.util.ArrayList;
1:0dd50a6: import java.util.Collection;
1:eb4fa4a: import java.util.UUID;
1:eb4fa4a: 
1:eb4fa4a: import com.google.common.base.Objects;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.db.TypeSizes;
1:eb4fa4a: import org.apache.cassandra.dht.AbstractBounds;
1:eb4fa4a: import org.apache.cassandra.dht.Range;
1:eb4fa4a: import org.apache.cassandra.dht.Token;
1:eb4fa4a: import org.apache.cassandra.io.IVersionedSerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:a7b7214: import org.apache.cassandra.net.MessagingService;
1:eb4fa4a: import org.apache.cassandra.utils.UUIDSerializer;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * RepairJobDesc is used from various repair processes to distinguish one RepairJob to another.
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public class RepairJobDesc
1:eb4fa4a: {
1:eb4fa4a:     public static final IVersionedSerializer<RepairJobDesc> serializer = new RepairJobDescSerializer();
1:eb4fa4a: 
1:a7b7214:     public final UUID parentSessionId;
1:eb4fa4a:     /** RepairSession id */
1:eb4fa4a:     public final UUID sessionId;
1:eb4fa4a:     public final String keyspace;
1:eb4fa4a:     public final String columnFamily;
1:eb4fa4a:     /** repairing range  */
1:0dd50a6:     public final Collection<Range<Token>> ranges;
1:eb4fa4a: 
1:0dd50a6:     public RepairJobDesc(UUID parentSessionId, UUID sessionId, String keyspace, String columnFamily, Collection<Range<Token>> ranges)
1:eb4fa4a:     {
1:a7b7214:         this.parentSessionId = parentSessionId;
1:eb4fa4a:         this.sessionId = sessionId;
1:eb4fa4a:         this.keyspace = keyspace;
1:eb4fa4a:         this.columnFamily = columnFamily;
1:0dd50a6:         this.ranges = ranges;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public String toString()
1:eb4fa4a:     {
1:0dd50a6:         return "[repair #" + sessionId + " on " + keyspace + "/" + columnFamily + ", " + ranges + "]";
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public boolean equals(Object o)
1:eb4fa4a:     {
1:eb4fa4a:         if (this == o) return true;
1:eb4fa4a:         if (o == null || getClass() != o.getClass()) return false;
1:eb4fa4a: 
1:eb4fa4a:         RepairJobDesc that = (RepairJobDesc) o;
1:eb4fa4a: 
1:eb4fa4a:         if (!columnFamily.equals(that.columnFamily)) return false;
1:eb4fa4a:         if (!keyspace.equals(that.keyspace)) return false;
1:0dd50a6:         if (ranges != null ? that.ranges == null || (ranges.size() != that.ranges.size()) || (ranges.size() == that.ranges.size() && !ranges.containsAll(that.ranges)) : that.ranges != null) return false;
1:eb4fa4a:         if (!sessionId.equals(that.sessionId)) return false;
1:a7b7214:         if (parentSessionId != null ? !parentSessionId.equals(that.parentSessionId) : that.parentSessionId != null) return false;
1:eb4fa4a: 
1:eb4fa4a:         return true;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     @Override
1:eb4fa4a:     public int hashCode()
1:eb4fa4a:     {
1:0dd50a6:         return Objects.hashCode(sessionId, keyspace, columnFamily, ranges);
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     private static class RepairJobDescSerializer implements IVersionedSerializer<RepairJobDesc>
1:eb4fa4a:     {
1:75508ec:         public void serialize(RepairJobDesc desc, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:a7b7214:             if (version >= MessagingService.VERSION_21)
1:a7b7214:             {
1:a7b7214:                 out.writeBoolean(desc.parentSessionId != null);
1:a7b7214:                 if (desc.parentSessionId != null)
1:a7b7214:                     UUIDSerializer.serializer.serialize(desc.parentSessionId, out, version);
1:a7b7214:             }
1:eb4fa4a:             UUIDSerializer.serializer.serialize(desc.sessionId, out, version);
1:eb4fa4a:             out.writeUTF(desc.keyspace);
1:eb4fa4a:             out.writeUTF(desc.columnFamily);
1:0dd50a6:             MessagingService.validatePartitioner(desc.ranges);
1:0dd50a6:             out.writeInt(desc.ranges.size());
1:0dd50a6:             for (Range<Token> rt : desc.ranges)
1:0dd50a6:                 AbstractBounds.tokenSerializer.serialize(rt, out, version);
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public RepairJobDesc deserialize(DataInputPlus in, int version) throws IOException
1:eb4fa4a:         {
1:a7b7214:             UUID parentSessionId = null;
1:a7b7214:             if (version >= MessagingService.VERSION_21)
1:a7b7214:             {
1:a7b7214:                 if (in.readBoolean())
1:a7b7214:                     parentSessionId = UUIDSerializer.serializer.deserialize(in, version);
1:a7b7214:             }
1:eb4fa4a:             UUID sessionId = UUIDSerializer.serializer.deserialize(in, version);
1:eb4fa4a:             String keyspace = in.readUTF();
1:eb4fa4a:             String columnFamily = in.readUTF();
1:0dd50a6: 
1:0dd50a6:             int nRanges = in.readInt();
1:0dd50a6:             Collection<Range<Token>> ranges = new ArrayList<>();
1:0dd50a6:             Range<Token> range;
1:0dd50a6: 
1:0dd50a6:             for (int i = 0; i < nRanges; i++)
1:0dd50a6:             {
1:0dd50a6:                 range = (Range<Token>) AbstractBounds.tokenSerializer.deserialize(in,
1:0dd50a6:                         MessagingService.globalPartitioner(), version);
1:0dd50a6:                 ranges.add(range);
1:0dd50a6:             }
1:0dd50a6: 
1:0dd50a6:             return new RepairJobDesc(parentSessionId, sessionId, keyspace, columnFamily, ranges);
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(RepairJobDesc desc, int version)
1:eb4fa4a:         {
1:eb4fa4a:             int size = 0;
1:a7b7214:             if (version >= MessagingService.VERSION_21)
1:a7b7214:             {
1:03f72ac:                 size += TypeSizes.sizeof(desc.parentSessionId != null);
1:a7b7214:                 if (desc.parentSessionId != null)
1:a7b7214:                     size += UUIDSerializer.serializer.serializedSize(desc.parentSessionId, version);
1:a7b7214:             }
1:eb4fa4a:             size += UUIDSerializer.serializer.serializedSize(desc.sessionId, version);
1:03f72ac:             size += TypeSizes.sizeof(desc.keyspace);
1:03f72ac:             size += TypeSizes.sizeof(desc.columnFamily);
1:0dd50a6:             size += TypeSizes.sizeof(desc.ranges.size());
1:0dd50a6:             for (Range<Token> rt : desc.ranges)
1:0dd50a6:             {
1:0dd50a6:                 size += AbstractBounds.tokenSerializer.serializedSize(rt, version);
1:0dd50a6:             }
1:eb4fa4a:             return size;
1:eb4fa4a:         }
1:eb4fa4a:     }
1:eb4fa4a: }
============================================================================
author:Marcus Olsson
-------------------------------------------------------------------------------
commit:0dd50a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     public final Collection<Range<Token>> ranges;
1:     public RepairJobDesc(UUID parentSessionId, UUID sessionId, String keyspace, String columnFamily, Collection<Range<Token>> ranges)
1:         this.ranges = ranges;
1:         return "[repair #" + sessionId + " on " + keyspace + "/" + columnFamily + ", " + ranges + "]";
/////////////////////////////////////////////////////////////////////////
1:         if (ranges != null ? that.ranges == null || (ranges.size() != that.ranges.size()) || (ranges.size() == that.ranges.size() && !ranges.containsAll(that.ranges)) : that.ranges != null) return false;
/////////////////////////////////////////////////////////////////////////
1:         return Objects.hashCode(sessionId, keyspace, columnFamily, ranges);
/////////////////////////////////////////////////////////////////////////
1:             MessagingService.validatePartitioner(desc.ranges);
1:             out.writeInt(desc.ranges.size());
1:             for (Range<Token> rt : desc.ranges)
1:                 AbstractBounds.tokenSerializer.serialize(rt, out, version);
/////////////////////////////////////////////////////////////////////////
1: 
1:             int nRanges = in.readInt();
1:             Collection<Range<Token>> ranges = new ArrayList<>();
1:             Range<Token> range;
1: 
1:             for (int i = 0; i < nRanges; i++)
1:             {
1:                 range = (Range<Token>) AbstractBounds.tokenSerializer.deserialize(in,
1:                         MessagingService.globalPartitioner(), version);
1:                 ranges.add(range);
1:             }
1: 
1:             return new RepairJobDesc(parentSessionId, sessionId, keyspace, columnFamily, ranges);
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeof(desc.ranges.size());
1:             for (Range<Token> rt : desc.ranges)
1:             {
1:                 size += AbstractBounds.tokenSerializer.serializedSize(rt, version);
1:             }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public RepairJobDesc deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:                 size += TypeSizes.sizeof(desc.parentSessionId != null);
1:             size += TypeSizes.sizeof(desc.keyspace);
1:             size += TypeSizes.sizeof(desc.columnFamily);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69542a9
/////////////////////////////////////////////////////////////////////////
0:             AbstractBounds.tokenSerializer.serialize(desc.range, out, version);
/////////////////////////////////////////////////////////////////////////
0:             Range<Token> range = (Range<Token>)AbstractBounds.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version);
/////////////////////////////////////////////////////////////////////////
0:             size += AbstractBounds.tokenSerializer.serializedSize(desc.range, version);
commit:806facc
/////////////////////////////////////////////////////////////////////////
0:             MessagingService.validatePartitioner(desc.range);
/////////////////////////////////////////////////////////////////////////
0:             Range<Token> range = (Range<Token>)AbstractBounds.serializer.deserialize(in, MessagingService.globalPartitioner(), version).toTokenBounds();
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(RepairJobDesc desc, DataOutputPlus out, int version) throws IOException
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:a7b7214
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
0: import org.apache.cassandra.utils.UUIDGen;
/////////////////////////////////////////////////////////////////////////
1:     public final UUID parentSessionId;
/////////////////////////////////////////////////////////////////////////
0:     public RepairJobDesc(UUID parentSessionId, UUID sessionId, String keyspace, String columnFamily, Range<Token> range)
1:         this.parentSessionId = parentSessionId;
/////////////////////////////////////////////////////////////////////////
0:         return "[repair #" + sessionId + " on " + keyspace + "/" + columnFamily + ", " + range + "]";
/////////////////////////////////////////////////////////////////////////
1:         if (parentSessionId != null ? !parentSessionId.equals(that.parentSessionId) : that.parentSessionId != null) return false;
/////////////////////////////////////////////////////////////////////////
1:             if (version >= MessagingService.VERSION_21)
1:             {
1:                 out.writeBoolean(desc.parentSessionId != null);
1:                 if (desc.parentSessionId != null)
1:                     UUIDSerializer.serializer.serialize(desc.parentSessionId, out, version);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             UUID parentSessionId = null;
1:             if (version >= MessagingService.VERSION_21)
1:             {
1:                 if (in.readBoolean())
1:                     parentSessionId = UUIDSerializer.serializer.deserialize(in, version);
1:             }
0:             return new RepairJobDesc(parentSessionId, sessionId, keyspace, columnFamily, range);
1:             if (version >= MessagingService.VERSION_21)
1:             {
0:                 size += TypeSizes.NATIVE.sizeof(desc.parentSessionId != null);
1:                 if (desc.parentSessionId != null)
1:                     size += UUIDSerializer.serializer.serializedSize(desc.parentSessionId, version);
1:             }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.UUID;
1: 
1: import com.google.common.base.Objects;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.dht.AbstractBounds;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.utils.UUIDSerializer;
1: 
1: /**
1:  * RepairJobDesc is used from various repair processes to distinguish one RepairJob to another.
1:  *
1:  * @since 2.0
1:  */
1: public class RepairJobDesc
1: {
1:     public static final IVersionedSerializer<RepairJobDesc> serializer = new RepairJobDescSerializer();
1: 
1:     /** RepairSession id */
1:     public final UUID sessionId;
1:     public final String keyspace;
1:     public final String columnFamily;
1:     /** repairing range  */
0:     public final Range<Token> range;
1: 
0:     public RepairJobDesc(UUID sessionId, String keyspace, String columnFamily, Range<Token> range)
1:     {
1:         this.sessionId = sessionId;
1:         this.keyspace = keyspace;
1:         this.columnFamily = columnFamily;
0:         this.range = range;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         StringBuilder sb = new StringBuilder("[repair #");
0:         sb.append(sessionId);
0:         sb.append(" on ");
0:         sb.append(keyspace).append("/").append(columnFamily);
0:         sb.append(", ").append(range);
0:         sb.append("]");
0:         return sb.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         RepairJobDesc that = (RepairJobDesc) o;
1: 
1:         if (!columnFamily.equals(that.columnFamily)) return false;
1:         if (!keyspace.equals(that.keyspace)) return false;
0:         if (range != null ? !range.equals(that.range) : that.range != null) return false;
1:         if (!sessionId.equals(that.sessionId)) return false;
1: 
1:         return true;
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hashCode(sessionId, keyspace, columnFamily, range);
1:     }
1: 
1:     private static class RepairJobDescSerializer implements IVersionedSerializer<RepairJobDesc>
1:     {
0:         public void serialize(RepairJobDesc desc, DataOutput out, int version) throws IOException
1:         {
1:             UUIDSerializer.serializer.serialize(desc.sessionId, out, version);
1:             out.writeUTF(desc.keyspace);
1:             out.writeUTF(desc.columnFamily);
0:             AbstractBounds.serializer.serialize(desc.range, out, version);
1:         }
1: 
0:         public RepairJobDesc deserialize(DataInput in, int version) throws IOException
1:         {
1:             UUID sessionId = UUIDSerializer.serializer.deserialize(in, version);
1:             String keyspace = in.readUTF();
1:             String columnFamily = in.readUTF();
0:             Range<Token> range = (Range<Token>)AbstractBounds.serializer.deserialize(in, version);
0:             return new RepairJobDesc(sessionId, keyspace, columnFamily, range);
1:         }
1: 
1:         public long serializedSize(RepairJobDesc desc, int version)
1:         {
1:             int size = 0;
1:             size += UUIDSerializer.serializer.serializedSize(desc.sessionId, version);
0:             size += TypeSizes.NATIVE.sizeof(desc.keyspace);
0:             size += TypeSizes.NATIVE.sizeof(desc.columnFamily);
0:             size += AbstractBounds.serializer.serializedSize(desc.range, version);
1:             return size;
1:         }
1:     }
1: }
============================================================================